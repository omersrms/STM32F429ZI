
omer_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e4c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004fe0  08004fe0  00014fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800518c  0800518c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800518c  0800518c  0001518c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005194  08005194  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005194  08005194  00015194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005198  08005198  00015198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800519c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000074  08005210  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08005210  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb5d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001908  00000000  00000000  0002bc01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002d510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002de80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015665  00000000  00000000  0002e780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c15c  00000000  00000000  00043de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000864b7  00000000  00000000  0004ff41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d63f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027f4  00000000  00000000  000d6448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004fc8 	.word	0x08004fc8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08004fc8 	.word	0x08004fc8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b087      	sub	sp, #28
 80004dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004de:	f000 fbcf 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e2:	f000 f91f 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fa0d 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ea:	f000 f9d9 	bl	80008a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004ee:	f000 f985 	bl	80007fc <MX_I2C1_Init>




HAL_StatusTypeDef ret;
uint8_t udata[6]="123abc";
 80004f2:	4a7a      	ldr	r2, [pc, #488]	; (80006dc <main+0x204>)
 80004f4:	f107 0308 	add.w	r3, r7, #8
 80004f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004fc:	6018      	str	r0, [r3, #0]
 80004fe:	3304      	adds	r3, #4
 8000500:	8019      	strh	r1, [r3, #0]

  while (1)
  {


	   HAL_UART_Receive(&huart2,&rdata,sizeof(rdata),HAL_MAX_DELAY);
 8000502:	f04f 33ff 	mov.w	r3, #4294967295
 8000506:	2214      	movs	r2, #20
 8000508:	4975      	ldr	r1, [pc, #468]	; (80006e0 <main+0x208>)
 800050a:	4876      	ldr	r0, [pc, #472]	; (80006e4 <main+0x20c>)
 800050c:	f004 f915 	bl	800473a <HAL_UART_Receive>

	   HAL_UART_Transmit(&huart2, "\rfull data:",11,100);
 8000510:	2364      	movs	r3, #100	; 0x64
 8000512:	220b      	movs	r2, #11
 8000514:	4974      	ldr	r1, [pc, #464]	; (80006e8 <main+0x210>)
 8000516:	4873      	ldr	r0, [pc, #460]	; (80006e4 <main+0x20c>)
 8000518:	f004 f87d 	bl	8004616 <HAL_UART_Transmit>
	   HAL_UART_Transmit(&huart2,&rdata,sizeof(rdata),100);
 800051c:	2364      	movs	r3, #100	; 0x64
 800051e:	2214      	movs	r2, #20
 8000520:	496f      	ldr	r1, [pc, #444]	; (80006e0 <main+0x208>)
 8000522:	4870      	ldr	r0, [pc, #448]	; (80006e4 <main+0x20c>)
 8000524:	f004 f877 	bl	8004616 <HAL_UART_Transmit>


	    memcpy(state,&rdata[0],1);
 8000528:	4b70      	ldr	r3, [pc, #448]	; (80006ec <main+0x214>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	461a      	mov	r2, r3
 800052e:	4b6c      	ldr	r3, [pc, #432]	; (80006e0 <main+0x208>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	7013      	strb	r3, [r2, #0]

	    HAL_UART_Transmit(&huart2, " state:",7,100);
 8000534:	2364      	movs	r3, #100	; 0x64
 8000536:	2207      	movs	r2, #7
 8000538:	496d      	ldr	r1, [pc, #436]	; (80006f0 <main+0x218>)
 800053a:	486a      	ldr	r0, [pc, #424]	; (80006e4 <main+0x20c>)
 800053c:	f004 f86b 	bl	8004616 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart2,&state,sizeof(state),100);
 8000540:	2364      	movs	r3, #100	; 0x64
 8000542:	2201      	movs	r2, #1
 8000544:	4969      	ldr	r1, [pc, #420]	; (80006ec <main+0x214>)
 8000546:	4867      	ldr	r0, [pc, #412]	; (80006e4 <main+0x20c>)
 8000548:	f004 f865 	bl	8004616 <HAL_UART_Transmit>


	    uint8_t address[4]="0000";
 800054c:	f04f 3330 	mov.w	r3, #808464432	; 0x30303030
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b63      	ldr	r3, [pc, #396]	; (80006e0 <main+0x208>)
 8000554:	f8d3 3001 	ldr.w	r3, [r3, #1]
	    memcpy(address,&rdata[1],4);
 8000558:	607b      	str	r3, [r7, #4]


	    realaddress[0]=0;
 800055a:	4b66      	ldr	r3, [pc, #408]	; (80006f4 <main+0x21c>)
 800055c:	2200      	movs	r2, #0
 800055e:	801a      	strh	r2, [r3, #0]
	    realaddress[1]=atoi('x');
 8000560:	2078      	movs	r0, #120	; 0x78
 8000562:	f004 fc6f 	bl	8004e44 <atoi>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	4b62      	ldr	r3, [pc, #392]	; (80006f4 <main+0x21c>)
 800056c:	805a      	strh	r2, [r3, #2]
	    realaddress[2]=rdata[1];
 800056e:	4b5c      	ldr	r3, [pc, #368]	; (80006e0 <main+0x208>)
 8000570:	785b      	ldrb	r3, [r3, #1]
 8000572:	b29a      	uxth	r2, r3
 8000574:	4b5f      	ldr	r3, [pc, #380]	; (80006f4 <main+0x21c>)
 8000576:	809a      	strh	r2, [r3, #4]
	    realaddress[3]=rdata[2];
 8000578:	4b59      	ldr	r3, [pc, #356]	; (80006e0 <main+0x208>)
 800057a:	789b      	ldrb	r3, [r3, #2]
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b5d      	ldr	r3, [pc, #372]	; (80006f4 <main+0x21c>)
 8000580:	80da      	strh	r2, [r3, #6]
	    realaddress[4]=rdata[3];
 8000582:	4b57      	ldr	r3, [pc, #348]	; (80006e0 <main+0x208>)
 8000584:	78db      	ldrb	r3, [r3, #3]
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b5a      	ldr	r3, [pc, #360]	; (80006f4 <main+0x21c>)
 800058a:	811a      	strh	r2, [r3, #8]
	    realaddress[5]=rdata[4];
 800058c:	4b54      	ldr	r3, [pc, #336]	; (80006e0 <main+0x208>)
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	b29a      	uxth	r2, r3
 8000592:	4b58      	ldr	r3, [pc, #352]	; (80006f4 <main+0x21c>)
 8000594:	815a      	strh	r2, [r3, #10]
	//    realaddress=((rdata[1]-48)*1000)+((rdata[2]-48)*100)+((rdata[3]-48)*10)+((rdata[4]-48)*1);



	    HAL_UART_Transmit(&huart2, " address:",9,100);
 8000596:	2364      	movs	r3, #100	; 0x64
 8000598:	2209      	movs	r2, #9
 800059a:	4957      	ldr	r1, [pc, #348]	; (80006f8 <main+0x220>)
 800059c:	4851      	ldr	r0, [pc, #324]	; (80006e4 <main+0x20c>)
 800059e:	f004 f83a 	bl	8004616 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart2,&realaddress,sizeof(realaddress),100);
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	220c      	movs	r2, #12
 80005a6:	4953      	ldr	r1, [pc, #332]	; (80006f4 <main+0x21c>)
 80005a8:	484e      	ldr	r0, [pc, #312]	; (80006e4 <main+0x20c>)
 80005aa:	f004 f834 	bl	8004616 <HAL_UART_Transmit>

	    memcpy(data,&rdata[5],15);
 80005ae:	4b53      	ldr	r3, [pc, #332]	; (80006fc <main+0x224>)
 80005b0:	4a4b      	ldr	r2, [pc, #300]	; (80006e0 <main+0x208>)
 80005b2:	1d54      	adds	r4, r2, #5
 80005b4:	6820      	ldr	r0, [r4, #0]
 80005b6:	6861      	ldr	r1, [r4, #4]
 80005b8:	68a2      	ldr	r2, [r4, #8]
 80005ba:	c307      	stmia	r3!, {r0, r1, r2}
 80005bc:	89a2      	ldrh	r2, [r4, #12]
 80005be:	7ba1      	ldrb	r1, [r4, #14]
 80005c0:	801a      	strh	r2, [r3, #0]
 80005c2:	460a      	mov	r2, r1
 80005c4:	709a      	strb	r2, [r3, #2]


	    HAL_UART_Transmit(&huart2, " data:",6,100);
 80005c6:	2364      	movs	r3, #100	; 0x64
 80005c8:	2206      	movs	r2, #6
 80005ca:	494d      	ldr	r1, [pc, #308]	; (8000700 <main+0x228>)
 80005cc:	4845      	ldr	r0, [pc, #276]	; (80006e4 <main+0x20c>)
 80005ce:	f004 f822 	bl	8004616 <HAL_UART_Transmit>
	    HAL_UART_Transmit(&huart2,&data,sizeof(data),100);
 80005d2:	2364      	movs	r3, #100	; 0x64
 80005d4:	220f      	movs	r2, #15
 80005d6:	4949      	ldr	r1, [pc, #292]	; (80006fc <main+0x224>)
 80005d8:	4842      	ldr	r0, [pc, #264]	; (80006e4 <main+0x20c>)
 80005da:	f004 f81c 	bl	8004616 <HAL_UART_Transmit>

	 HAL_Delay(500);
 80005de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005e2:	f000 fbbf 	bl	8000d64 <HAL_Delay>



if(rdata[0]=='W'){
 80005e6:	4b3e      	ldr	r3, [pc, #248]	; (80006e0 <main+0x208>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b57      	cmp	r3, #87	; 0x57
 80005ec:	d133      	bne.n	8000656 <main+0x17e>
HAL_UART_Transmit(&huart2, "\r--WRITING EEPROM--",19,100);
 80005ee:	2364      	movs	r3, #100	; 0x64
 80005f0:	2213      	movs	r2, #19
 80005f2:	4944      	ldr	r1, [pc, #272]	; (8000704 <main+0x22c>)
 80005f4:	483b      	ldr	r0, [pc, #236]	; (80006e4 <main+0x20c>)
 80005f6:	f004 f80e 	bl	8004616 <HAL_UART_Transmit>

//ret = HAL_I2C_Mem_Write(&hi2c1,(0x50<<1),realaddress,8,data,sizeof(data),HAL_MAX_DELAY);


HAL_I2C_Master_Transmit(&hi2c1,(0x50<<1),0x0205,6,HAL_MAX_DELAY);
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2306      	movs	r3, #6
 8000602:	f240 2205 	movw	r2, #517	; 0x205
 8000606:	21a0      	movs	r1, #160	; 0xa0
 8000608:	483f      	ldr	r0, [pc, #252]	; (8000708 <main+0x230>)
 800060a:	f000 fff3 	bl	80015f4 <HAL_I2C_Master_Transmit>

HAL_Delay(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f000 fba8 	bl	8000d64 <HAL_Delay>

ret = HAL_I2C_Master_Transmit(&hi2c1,(0x50<<1),data,sizeof(data),HAL_MAX_DELAY);
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	230f      	movs	r3, #15
 800061c:	4a37      	ldr	r2, [pc, #220]	; (80006fc <main+0x224>)
 800061e:	21a0      	movs	r1, #160	; 0xa0
 8000620:	4839      	ldr	r0, [pc, #228]	; (8000708 <main+0x230>)
 8000622:	f000 ffe7 	bl	80015f4 <HAL_I2C_Master_Transmit>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]

if(ret !=HAL_OK){
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d005      	beq.n	800063c <main+0x164>
	  	HAL_UART_Transmit(&huart2, "\rhata1",6,100);
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	2206      	movs	r2, #6
 8000634:	4935      	ldr	r1, [pc, #212]	; (800070c <main+0x234>)
 8000636:	482b      	ldr	r0, [pc, #172]	; (80006e4 <main+0x20c>)
 8000638:	f003 ffed 	bl	8004616 <HAL_UART_Transmit>
	  }

HAL_UART_Transmit(&huart2, "\rWritten data:",14,100);
 800063c:	2364      	movs	r3, #100	; 0x64
 800063e:	220e      	movs	r2, #14
 8000640:	4933      	ldr	r1, [pc, #204]	; (8000710 <main+0x238>)
 8000642:	4828      	ldr	r0, [pc, #160]	; (80006e4 <main+0x20c>)
 8000644:	f003 ffe7 	bl	8004616 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2,data,sizeof(data),100);
 8000648:	2364      	movs	r3, #100	; 0x64
 800064a:	220f      	movs	r2, #15
 800064c:	492b      	ldr	r1, [pc, #172]	; (80006fc <main+0x224>)
 800064e:	4825      	ldr	r0, [pc, #148]	; (80006e4 <main+0x20c>)
 8000650:	f003 ffe1 	bl	8004616 <HAL_UART_Transmit>
 8000654:	e03d      	b.n	80006d2 <main+0x1fa>


}else if(rdata[0]=='R'){
 8000656:	4b22      	ldr	r3, [pc, #136]	; (80006e0 <main+0x208>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b52      	cmp	r3, #82	; 0x52
 800065c:	d133      	bne.n	80006c6 <main+0x1ee>
HAL_UART_Transmit(&huart2, "\r--READING EEPROM--",19,100);
 800065e:	2364      	movs	r3, #100	; 0x64
 8000660:	2213      	movs	r2, #19
 8000662:	492c      	ldr	r1, [pc, #176]	; (8000714 <main+0x23c>)
 8000664:	481f      	ldr	r0, [pc, #124]	; (80006e4 <main+0x20c>)
 8000666:	f003 ffd6 	bl	8004616 <HAL_UART_Transmit>

//ret = HAL_I2C_Mem_Read(&hi2c1,(0x50<<1),realaddress,8,data,sizeof(data),HAL_MAX_DELAY); // adrese SAYI gir. string girme
//                address               HEX --> DEC


 HAL_I2C_Master_Transmit(&hi2c1,(0x50<<1),0x0205,6,HAL_MAX_DELAY);
 800066a:	f04f 33ff 	mov.w	r3, #4294967295
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2306      	movs	r3, #6
 8000672:	f240 2205 	movw	r2, #517	; 0x205
 8000676:	21a0      	movs	r1, #160	; 0xa0
 8000678:	4823      	ldr	r0, [pc, #140]	; (8000708 <main+0x230>)
 800067a:	f000 ffbb 	bl	80015f4 <HAL_I2C_Master_Transmit>

 HAL_Delay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f000 fb70 	bl	8000d64 <HAL_Delay>

ret= HAL_I2C_Master_Receive(&hi2c1,(0x50<<1), data,sizeof(data),HAL_MAX_DELAY);
 8000684:	f04f 33ff 	mov.w	r3, #4294967295
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	230f      	movs	r3, #15
 800068c:	4a1b      	ldr	r2, [pc, #108]	; (80006fc <main+0x224>)
 800068e:	21a0      	movs	r1, #160	; 0xa0
 8000690:	481d      	ldr	r0, [pc, #116]	; (8000708 <main+0x230>)
 8000692:	f001 f8ad 	bl	80017f0 <HAL_I2C_Master_Receive>
 8000696:	4603      	mov	r3, r0
 8000698:	73fb      	strb	r3, [r7, #15]
if(ret !=HAL_OK){
 800069a:	7bfb      	ldrb	r3, [r7, #15]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d005      	beq.n	80006ac <main+0x1d4>
	  	HAL_UART_Transmit(&huart2, "\rhata2",6,100);
 80006a0:	2364      	movs	r3, #100	; 0x64
 80006a2:	2206      	movs	r2, #6
 80006a4:	491c      	ldr	r1, [pc, #112]	; (8000718 <main+0x240>)
 80006a6:	480f      	ldr	r0, [pc, #60]	; (80006e4 <main+0x20c>)
 80006a8:	f003 ffb5 	bl	8004616 <HAL_UART_Transmit>
	  }



HAL_UART_Transmit(&huart2, "\rReceived data:",15,100);
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	220f      	movs	r2, #15
 80006b0:	491a      	ldr	r1, [pc, #104]	; (800071c <main+0x244>)
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <main+0x20c>)
 80006b4:	f003 ffaf 	bl	8004616 <HAL_UART_Transmit>
HAL_UART_Transmit(&huart2,data,sizeof(data),100);
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	220f      	movs	r2, #15
 80006bc:	490f      	ldr	r1, [pc, #60]	; (80006fc <main+0x224>)
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <main+0x20c>)
 80006c0:	f003 ffa9 	bl	8004616 <HAL_UART_Transmit>
 80006c4:	e005      	b.n	80006d2 <main+0x1fa>

}


else{
	HAL_UART_Transmit(&huart2, "HATA", 4,100);
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	2204      	movs	r2, #4
 80006ca:	4915      	ldr	r1, [pc, #84]	; (8000720 <main+0x248>)
 80006cc:	4805      	ldr	r0, [pc, #20]	; (80006e4 <main+0x20c>)
 80006ce:	f003 ffa2 	bl	8004616 <HAL_UART_Transmit>
}

HAL_Delay(500);
 80006d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006d6:	f000 fb45 	bl	8000d64 <HAL_Delay>
  {
 80006da:	e712      	b.n	8000502 <main+0x2a>
 80006dc:	08005068 	.word	0x08005068
 80006e0:	20000090 	.word	0x20000090
 80006e4:	20000114 	.word	0x20000114
 80006e8:	08004fe0 	.word	0x08004fe0
 80006ec:	20000000 	.word	0x20000000
 80006f0:	08004fec 	.word	0x08004fec
 80006f4:	200000a4 	.word	0x200000a4
 80006f8:	08004ff4 	.word	0x08004ff4
 80006fc:	200000b0 	.word	0x200000b0
 8000700:	08005000 	.word	0x08005000
 8000704:	08005008 	.word	0x08005008
 8000708:	200000c0 	.word	0x200000c0
 800070c:	0800501c 	.word	0x0800501c
 8000710:	08005024 	.word	0x08005024
 8000714:	08005034 	.word	0x08005034
 8000718:	08005048 	.word	0x08005048
 800071c:	08005050 	.word	0x08005050
 8000720:	08005060 	.word	0x08005060

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	; 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	; 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f004 fbb4 	bl	8004ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <SystemClock_Config+0xd0>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <SystemClock_Config+0xd0>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <SystemClock_Config+0xd0>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <SystemClock_Config+0xd4>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <SystemClock_Config+0xd4>)
 8000772:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000790:	2302      	movs	r3, #2
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000798:	2310      	movs	r3, #16
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800079c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007a2:	2304      	movs	r3, #4
 80007a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007a6:	2307      	movs	r3, #7
 80007a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007aa:	f107 0320 	add.w	r3, r7, #32
 80007ae:	4618      	mov	r0, r3
 80007b0:	f003 fa4c 	bl	8003c4c <HAL_RCC_OscConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ba:	f000 f911 	bl	80009e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007be:	230f      	movs	r3, #15
 80007c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c2:	2302      	movs	r3, #2
 80007c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2102      	movs	r1, #2
 80007da:	4618      	mov	r0, r3
 80007dc:	f003 fcae 	bl	800413c <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007e6:	f000 f8fb 	bl	80009e0 <Error_Handler>
  }
}
 80007ea:	bf00      	nop
 80007ec:	3750      	adds	r7, #80	; 0x50
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40007000 	.word	0x40007000

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_I2C1_Init+0x94>)
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <MX_I2C1_Init+0x98>)
 8000806:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_I2C1_Init+0x94>)
 800080a:	4a23      	ldr	r2, [pc, #140]	; (8000898 <MX_I2C1_Init+0x9c>)
 800080c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800080e:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_I2C1_Init+0x94>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000814:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_I2C1_Init+0x94>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081a:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_I2C1_Init+0x94>)
 800081c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000822:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C1_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000828:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_I2C1_Init+0x94>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C1_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <MX_I2C1_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083a:	4815      	ldr	r0, [pc, #84]	; (8000890 <MX_I2C1_Init+0x94>)
 800083c:	f000 fd96 	bl	800136c <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 8000846:	f000 f8cb 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  __HAL_RCC_I2C1_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <MX_I2C1_Init+0xa0>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	4a12      	ldr	r2, [pc, #72]	; (800089c <MX_I2C1_Init+0xa0>)
 8000854:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000858:	6413      	str	r3, [r2, #64]	; 0x40
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <MX_I2C1_Init+0xa0>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  /* I2C1 interrupt Init */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	201f      	movs	r0, #31
 800086c:	f000 fb79 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000870:	201f      	movs	r0, #31
 8000872:	f000 fb92 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2020      	movs	r0, #32
 800087c:	f000 fb71 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000880:	2020      	movs	r0, #32
 8000882:	f000 fb8a 	bl	8000f9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200000c0 	.word	0x200000c0
 8000894:	40005400 	.word	0x40005400
 8000898:	000186a0 	.word	0x000186a0
 800089c:	40023800 	.word	0x40023800

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <MX_USART2_UART_Init+0x60>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x5c>)
 80008d8:	f003 fe50 	bl	800457c <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f87d 	bl	80009e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008e6:	2200      	movs	r2, #0
 80008e8:	2100      	movs	r1, #0
 80008ea:	2026      	movs	r0, #38	; 0x26
 80008ec:	f000 fb39 	bl	8000f62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f0:	2026      	movs	r0, #38	; 0x26
 80008f2:	f000 fb52 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000114 	.word	0x20000114
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a2c      	ldr	r2, [pc, #176]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b2a      	ldr	r3, [pc, #168]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a25      	ldr	r2, [pc, #148]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b23      	ldr	r3, [pc, #140]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b1f      	ldr	r3, [pc, #124]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a1e      	ldr	r2, [pc, #120]	; (80009d4 <MX_GPIO_Init+0xd0>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b1c      	ldr	r3, [pc, #112]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <MX_GPIO_Init+0xd0>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <MX_GPIO_Init+0xd4>)
 8000990:	f000 fcd2 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800099a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	4619      	mov	r1, r3
 80009aa:	480c      	ldr	r0, [pc, #48]	; (80009dc <MX_GPIO_Init+0xd8>)
 80009ac:	f000 fb40 	bl	8001030 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009b0:	2320      	movs	r3, #32
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4804      	ldr	r0, [pc, #16]	; (80009d8 <MX_GPIO_Init+0xd4>)
 80009c8:	f000 fb32 	bl	8001030 <HAL_GPIO_Init>

}
 80009cc:	bf00      	nop
 80009ce:	3728      	adds	r7, #40	; 0x28
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020800 	.word	0x40020800

080009e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e4:	b672      	cpsid	i
}
 80009e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <Error_Handler+0x8>
	...

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	607b      	str	r3, [r7, #4]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <HAL_MspInit+0x4c>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <HAL_MspInit+0x4c>)
 80009fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a00:	6453      	str	r3, [r2, #68]	; 0x44
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a2a:	2007      	movs	r0, #7
 8000a2c:	f000 fa8e 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800

08000a3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	; 0x28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <HAL_I2C_MspInit+0xa4>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d13c      	bne.n	8000ad8 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <HAL_I2C_MspInit+0xa8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a1f      	ldr	r2, [pc, #124]	; (8000ae4 <HAL_I2C_MspInit+0xa8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <HAL_I2C_MspInit+0xa8>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a80:	2312      	movs	r3, #18
 8000a82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <HAL_I2C_MspInit+0xac>)
 8000a98:	f000 faca 	bl	8001030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <HAL_I2C_MspInit+0xa8>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <HAL_I2C_MspInit+0xa8>)
 8000aa6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <HAL_I2C_MspInit+0xa8>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	201f      	movs	r0, #31
 8000abe:	f000 fa50 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ac2:	201f      	movs	r0, #31
 8000ac4:	f000 fa69 	bl	8000f9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2100      	movs	r1, #0
 8000acc:	2020      	movs	r0, #32
 8000ace:	f000 fa48 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ad2:	2020      	movs	r0, #32
 8000ad4:	f000 fa61 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a1d      	ldr	r2, [pc, #116]	; (8000b80 <HAL_UART_MspInit+0x94>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d133      	bne.n	8000b76 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a14      	ldr	r2, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_UART_MspInit+0x98>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b46:	230c      	movs	r3, #12
 8000b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b56:	2307      	movs	r3, #7
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4809      	ldr	r0, [pc, #36]	; (8000b88 <HAL_UART_MspInit+0x9c>)
 8000b62:	f000 fa65 	bl	8001030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2026      	movs	r0, #38	; 0x26
 8000b6c:	f000 f9f9 	bl	8000f62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b70:	2026      	movs	r0, #38	; 0x26
 8000b72:	f000 fa12 	bl	8000f9a <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b76:	bf00      	nop
 8000b78:	3728      	adds	r7, #40	; 0x28
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <NMI_Handler+0x4>

08000b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <MemManage_Handler+0x4>

08000b9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000baa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd8:	f000 f8a4 	bl	8000d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000be4:	4802      	ldr	r0, [pc, #8]	; (8000bf0 <I2C1_EV_IRQHandler+0x10>)
 8000be6:	f001 f829 	bl	8001c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	200000c0 	.word	0x200000c0

08000bf4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000bf8:	4802      	ldr	r0, [pc, #8]	; (8000c04 <I2C1_ER_IRQHandler+0x10>)
 8000bfa:	f001 f990 	bl	8001f1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200000c0 	.word	0x200000c0

08000c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	; (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c30:	480d      	ldr	r0, [pc, #52]	; (8000c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c32:	490e      	ldr	r1, [pc, #56]	; (8000c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c34:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c38:	e002      	b.n	8000c40 <LoopCopyDataInit>

08000c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c3e:	3304      	adds	r3, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c44:	d3f9      	bcc.n	8000c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c46:	4a0b      	ldr	r2, [pc, #44]	; (8000c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c48:	4c0b      	ldr	r4, [pc, #44]	; (8000c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c4c:	e001      	b.n	8000c52 <LoopFillZerobss>

08000c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c50:	3204      	adds	r2, #4

08000c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c54:	d3fb      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c56:	f7ff ffd7 	bl	8000c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f004 f8fd 	bl	8004e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fc3b 	bl	80004d8 <main>
  bx  lr    
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c70:	0800519c 	.word	0x0800519c
  ldr r2, =_sbss
 8000c74:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c78:	2000015c 	.word	0x2000015c

08000c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0d      	ldr	r2, [pc, #52]	; (8000cc0 <HAL_Init+0x40>)
 8000c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_Init+0x40>)
 8000c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a07      	ldr	r2, [pc, #28]	; (8000cc0 <HAL_Init+0x40>)
 8000ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca8:	2003      	movs	r0, #3
 8000caa:	f000 f94f 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f000 f808 	bl	8000cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb4:	f7ff fe9a 	bl	80009ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40023c00 	.word	0x40023c00

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x54>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <HAL_InitTick+0x58>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f000 f967 	bl	8000fb6 <HAL_SYSTICK_Config>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e00e      	b.n	8000d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b0f      	cmp	r3, #15
 8000cf6:	d80a      	bhi.n	8000d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000d00:	f000 f92f 	bl	8000f62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d04:	4a06      	ldr	r2, [pc, #24]	; (8000d20 <HAL_InitTick+0x5c>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e000      	b.n	8000d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	2000000c 	.word	0x2000000c
 8000d20:	20000008 	.word	0x20000008

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	20000158 	.word	0x20000158

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000158 	.word	0x20000158

08000d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d6c:	f7ff ffee 	bl	8000d4c <HAL_GetTick>
 8000d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d7c:	d005      	beq.n	8000d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_Delay+0x44>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	461a      	mov	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4413      	add	r3, r2
 8000d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8a:	bf00      	nop
 8000d8c:	f7ff ffde 	bl	8000d4c <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	68fa      	ldr	r2, [r7, #12]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d8f7      	bhi.n	8000d8c <HAL_Delay+0x28>
  {
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	2000000c 	.word	0x2000000c

08000dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc2:	68ba      	ldr	r2, [r7, #8]
 8000dc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc8:	4013      	ands	r3, r2
 8000dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <__NVIC_SetPriorityGrouping+0x44>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00

08000df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <__NVIC_GetPriorityGrouping+0x18>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	0a1b      	lsrs	r3, r3, #8
 8000dfe:	f003 0307 	and.w	r3, r3, #7
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db0b      	blt.n	8000e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	f003 021f 	and.w	r2, r3, #31
 8000e28:	4907      	ldr	r1, [pc, #28]	; (8000e48 <__NVIC_EnableIRQ+0x38>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	095b      	lsrs	r3, r3, #5
 8000e30:	2001      	movs	r0, #1
 8000e32:	fa00 f202 	lsl.w	r2, r0, r2
 8000e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	e000e100 	.word	0xe000e100

08000e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	6039      	str	r1, [r7, #0]
 8000e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	db0a      	blt.n	8000e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	490c      	ldr	r1, [pc, #48]	; (8000e98 <__NVIC_SetPriority+0x4c>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	0112      	lsls	r2, r2, #4
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	440b      	add	r3, r1
 8000e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e74:	e00a      	b.n	8000e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	b2da      	uxtb	r2, r3
 8000e7a:	4908      	ldr	r1, [pc, #32]	; (8000e9c <__NVIC_SetPriority+0x50>)
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	f003 030f 	and.w	r3, r3, #15
 8000e82:	3b04      	subs	r3, #4
 8000e84:	0112      	lsls	r2, r2, #4
 8000e86:	b2d2      	uxtb	r2, r2
 8000e88:	440b      	add	r3, r1
 8000e8a:	761a      	strb	r2, [r3, #24]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000e100 	.word	0xe000e100
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f1c3 0307 	rsb	r3, r3, #7
 8000eba:	2b04      	cmp	r3, #4
 8000ebc:	bf28      	it	cs
 8000ebe:	2304      	movcs	r3, #4
 8000ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	3304      	adds	r3, #4
 8000ec6:	2b06      	cmp	r3, #6
 8000ec8:	d902      	bls.n	8000ed0 <NVIC_EncodePriority+0x30>
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3b03      	subs	r3, #3
 8000ece:	e000      	b.n	8000ed2 <NVIC_EncodePriority+0x32>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	43d9      	mvns	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	4313      	orrs	r3, r2
         );
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
	...

08000f08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f18:	d301      	bcc.n	8000f1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00f      	b.n	8000f3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1e:	4a0a      	ldr	r2, [pc, #40]	; (8000f48 <SysTick_Config+0x40>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f26:	210f      	movs	r1, #15
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f7ff ff8e 	bl	8000e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SysTick_Config+0x40>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <SysTick_Config+0x40>)
 8000f38:	2207      	movs	r2, #7
 8000f3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	e000e010 	.word	0xe000e010

08000f4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ff29 	bl	8000dac <__NVIC_SetPriorityGrouping>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b086      	sub	sp, #24
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	4603      	mov	r3, r0
 8000f6a:	60b9      	str	r1, [r7, #8]
 8000f6c:	607a      	str	r2, [r7, #4]
 8000f6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f74:	f7ff ff3e 	bl	8000df4 <__NVIC_GetPriorityGrouping>
 8000f78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	68b9      	ldr	r1, [r7, #8]
 8000f7e:	6978      	ldr	r0, [r7, #20]
 8000f80:	f7ff ff8e 	bl	8000ea0 <NVIC_EncodePriority>
 8000f84:	4602      	mov	r2, r0
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff5d 	bl	8000e4c <__NVIC_SetPriority>
}
 8000f92:	bf00      	nop
 8000f94:	3718      	adds	r7, #24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff31 	bl	8000e10 <__NVIC_EnableIRQ>
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ffa2 	bl	8000f08 <SysTick_Config>
 8000fc4:	4603      	mov	r3, r0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d004      	beq.n	8000fec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e00c      	b.n	8001006 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2205      	movs	r2, #5
 8000ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001020:	b2db      	uxtb	r3, r3
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
 800104a:	e159      	b.n	8001300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	697a      	ldr	r2, [r7, #20]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8148 	bne.w	80012fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 0303 	and.w	r3, r3, #3
 8001072:	2b01      	cmp	r3, #1
 8001074:	d005      	beq.n	8001082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	2b02      	cmp	r3, #2
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b03      	cmp	r3, #3
 80010ee:	d017      	beq.n	8001120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b02      	cmp	r3, #2
 800112a:	d123      	bne.n	8001174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	08da      	lsrs	r2, r3, #3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3208      	adds	r2, #8
 8001134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	691a      	ldr	r2, [r3, #16]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	69b9      	ldr	r1, [r7, #24]
 8001170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	2203      	movs	r2, #3
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0203 	and.w	r2, r3, #3
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a2 	beq.w	80012fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b54      	ldr	r3, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x2e8>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d2:	4a52      	ldr	r2, [pc, #328]	; (800131c <HAL_GPIO_Init+0x2ec>)
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	089b      	lsrs	r3, r3, #2
 80011d8:	3302      	adds	r3, #2
 80011da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	220f      	movs	r2, #15
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a49      	ldr	r2, [pc, #292]	; (8001320 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d019      	beq.n	8001232 <HAL_GPIO_Init+0x202>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a48      	ldr	r2, [pc, #288]	; (8001324 <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0x1fe>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a47      	ldr	r2, [pc, #284]	; (8001328 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00d      	beq.n	800122a <HAL_GPIO_Init+0x1fa>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a46      	ldr	r2, [pc, #280]	; (800132c <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d007      	beq.n	8001226 <HAL_GPIO_Init+0x1f6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a45      	ldr	r2, [pc, #276]	; (8001330 <HAL_GPIO_Init+0x300>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d101      	bne.n	8001222 <HAL_GPIO_Init+0x1f2>
 800121e:	2304      	movs	r3, #4
 8001220:	e008      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001222:	2307      	movs	r3, #7
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001226:	2303      	movs	r3, #3
 8001228:	e004      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122a:	2302      	movs	r3, #2
 800122c:	e002      	b.n	8001234 <HAL_GPIO_Init+0x204>
 800122e:	2301      	movs	r3, #1
 8001230:	e000      	b.n	8001234 <HAL_GPIO_Init+0x204>
 8001232:	2300      	movs	r3, #0
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	f002 0203 	and.w	r2, r2, #3
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	4093      	lsls	r3, r2
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4313      	orrs	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001244:	4935      	ldr	r1, [pc, #212]	; (800131c <HAL_GPIO_Init+0x2ec>)
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	089b      	lsrs	r3, r3, #2
 800124a:	3302      	adds	r3, #2
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001252:	4b38      	ldr	r3, [pc, #224]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001276:	4a2f      	ldr	r2, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x304>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800127c:	4b2d      	ldr	r3, [pc, #180]	; (8001334 <HAL_GPIO_Init+0x304>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012a0:	4a24      	ldr	r2, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012ca:	4a1a      	ldr	r2, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012d0:	4b18      	ldr	r3, [pc, #96]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012ec:	69ba      	ldr	r2, [r7, #24]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f4:	4a0f      	ldr	r2, [pc, #60]	; (8001334 <HAL_GPIO_Init+0x304>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	61fb      	str	r3, [r7, #28]
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	2b0f      	cmp	r3, #15
 8001304:	f67f aea2 	bls.w	800104c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800
 800131c:	40013800 	.word	0x40013800
 8001320:	40020000 	.word	0x40020000
 8001324:	40020400 	.word	0x40020400
 8001328:	40020800 	.word	0x40020800
 800132c:	40020c00 	.word	0x40020c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40013c00 	.word	0x40013c00

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001354:	e003      	b.n	800135e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001356:	887b      	ldrh	r3, [r7, #2]
 8001358:	041a      	lsls	r2, r3, #16
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	619a      	str	r2, [r3, #24]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e12b      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fb52 	bl	8000a3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d0:	f003 f8ac 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 80013d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a81      	ldr	r2, [pc, #516]	; (80015e0 <HAL_I2C_Init+0x274>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d807      	bhi.n	80013f0 <HAL_I2C_Init+0x84>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_I2C_Init+0x278>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	bf94      	ite	ls
 80013e8:	2301      	movls	r3, #1
 80013ea:	2300      	movhi	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e006      	b.n	80013fe <HAL_I2C_Init+0x92>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a7d      	ldr	r2, [pc, #500]	; (80015e8 <HAL_I2C_Init+0x27c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	bf94      	ite	ls
 80013f8:	2301      	movls	r3, #1
 80013fa:	2300      	movhi	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0e7      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a78      	ldr	r2, [pc, #480]	; (80015ec <HAL_I2C_Init+0x280>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a6a      	ldr	r2, [pc, #424]	; (80015e0 <HAL_I2C_Init+0x274>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d802      	bhi.n	8001440 <HAL_I2C_Init+0xd4>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	e009      	b.n	8001454 <HAL_I2C_Init+0xe8>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_I2C_Init+0x284>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	3301      	adds	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	430b      	orrs	r3, r1
 800145a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	495c      	ldr	r1, [pc, #368]	; (80015e0 <HAL_I2C_Init+0x274>)
 8001470:	428b      	cmp	r3, r1
 8001472:	d819      	bhi.n	80014a8 <HAL_I2C_Init+0x13c>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e59      	subs	r1, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001488:	400b      	ands	r3, r1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_I2C_Init+0x138>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e59      	subs	r1, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fbb1 f3f3 	udiv	r3, r1, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a2:	e051      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e04f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <HAL_I2C_Init+0x168>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e012      	b.n	80014fa <HAL_I2C_Init+0x18e>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	0099      	lsls	r1, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Init+0x196>
 80014fe:	2301      	movs	r3, #1
 8001500:	e022      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <HAL_I2C_Init+0x1bc>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e58      	subs	r0, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6859      	ldr	r1, [r3, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	440b      	add	r3, r1
 8001518:	fbb0 f3f3 	udiv	r3, r0, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	e00f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6911      	ldr	r1, [r2, #16]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	4311      	orrs	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	000186a0 	.word	0x000186a0
 80015e4:	001e847f 	.word	0x001e847f
 80015e8:	003d08ff 	.word	0x003d08ff
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	461a      	mov	r2, r3
 8001600:	460b      	mov	r3, r1
 8001602:	817b      	strh	r3, [r7, #10]
 8001604:	4613      	mov	r3, r2
 8001606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff fba0 	bl	8000d4c <HAL_GetTick>
 800160c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	f040 80e0 	bne.w	80017dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	2319      	movs	r3, #25
 8001622:	2201      	movs	r2, #1
 8001624:	4970      	ldr	r1, [pc, #448]	; (80017e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f002 f8e6 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001632:	2302      	movs	r3, #2
 8001634:	e0d3      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_I2C_Master_Transmit+0x50>
 8001640:	2302      	movs	r3, #2
 8001642:	e0cc      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b01      	cmp	r3, #1
 8001658:	d007      	beq.n	800166a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2221      	movs	r2, #33	; 0x21
 800167e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2210      	movs	r2, #16
 8001686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2200      	movs	r2, #0
 800168e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	893a      	ldrh	r2, [r7, #8]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	4a50      	ldr	r2, [pc, #320]	; (80017ec <HAL_I2C_Master_Transmit+0x1f8>)
 80016aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016ac:	8979      	ldrh	r1, [r7, #10]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f001 fea8 	bl	8003408 <I2C_MasterRequestWrite>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e08d      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016d8:	e066      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	6a39      	ldr	r1, [r7, #32]
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f002 f960 	bl	80039a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00d      	beq.n	8001706 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d107      	bne.n	8001702 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001700:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e06b      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	781a      	ldrb	r2, [r3, #0]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	1c5a      	adds	r2, r3, #1
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001720:	b29b      	uxth	r3, r3
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800172e:	3b01      	subs	r3, #1
 8001730:	b29a      	uxth	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b04      	cmp	r3, #4
 8001742:	d11b      	bne.n	800177c <HAL_I2C_Master_Transmit+0x188>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	d017      	beq.n	800177c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	781a      	ldrb	r2, [r3, #0]
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	3b01      	subs	r3, #1
 800176a:	b29a      	uxth	r2, r3
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	6a39      	ldr	r1, [r7, #32]
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f002 f950 	bl	8003a26 <I2C_WaitOnBTFFlagUntilTimeout>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00d      	beq.n	80017a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2b04      	cmp	r3, #4
 8001792:	d107      	bne.n	80017a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e01a      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d194      	bne.n	80016da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	e000      	b.n	80017de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017dc:	2302      	movs	r3, #2
  }
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	00100002 	.word	0x00100002
 80017ec:	ffff0000 	.word	0xffff0000

080017f0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08c      	sub	sp, #48	; 0x30
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	461a      	mov	r2, r3
 80017fc:	460b      	mov	r3, r1
 80017fe:	817b      	strh	r3, [r7, #10]
 8001800:	4613      	mov	r3, r2
 8001802:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001804:	f7ff faa2 	bl	8000d4c <HAL_GetTick>
 8001808:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b20      	cmp	r3, #32
 8001814:	f040 820b 	bne.w	8001c2e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2319      	movs	r3, #25
 800181e:	2201      	movs	r2, #1
 8001820:	497c      	ldr	r1, [pc, #496]	; (8001a14 <HAL_I2C_Master_Receive+0x224>)
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f001 ffe8 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800182e:	2302      	movs	r3, #2
 8001830:	e1fe      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_I2C_Master_Receive+0x50>
 800183c:	2302      	movs	r3, #2
 800183e:	e1f7      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d007      	beq.n	8001866 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f042 0201 	orr.w	r2, r2, #1
 8001864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2222      	movs	r2, #34	; 0x22
 800187a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2210      	movs	r2, #16
 8001882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2200      	movs	r2, #0
 800188a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	687a      	ldr	r2, [r7, #4]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	893a      	ldrh	r2, [r7, #8]
 8001896:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800189c:	b29a      	uxth	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a5c      	ldr	r2, [pc, #368]	; (8001a18 <HAL_I2C_Master_Receive+0x228>)
 80018a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018a8:	8979      	ldrh	r1, [r7, #10]
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f001 fe2c 	bl	800350c <I2C_MasterRequestRead>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e1b8      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d113      	bne.n	80018ee <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018c6:	2300      	movs	r3, #0
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	623b      	str	r3, [r7, #32]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e18c      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d11b      	bne.n	800192e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001904:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	695b      	ldr	r3, [r3, #20]
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	e16c      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001932:	2b02      	cmp	r3, #2
 8001934:	d11b      	bne.n	800196e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001944:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001954:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	e14c      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800197c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001994:	e138      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800199a:	2b03      	cmp	r3, #3
 800199c:	f200 80f1 	bhi.w	8001b82 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d123      	bne.n	80019f0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	f002 f8ad 	bl	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e139      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	b2d2      	uxtb	r2, r2
 80019c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	3b01      	subs	r3, #1
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019ee:	e10b      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d14e      	bne.n	8001a96 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019fe:	2200      	movs	r2, #0
 8001a00:	4906      	ldr	r1, [pc, #24]	; (8001a1c <HAL_I2C_Master_Receive+0x22c>)
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f001 fef8 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d008      	beq.n	8001a20 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e10e      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
 8001a12:	bf00      	nop
 8001a14:	00100002 	.word	0x00100002
 8001a18:	ffff0000 	.word	0xffff0000
 8001a1c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691a      	ldr	r2, [r3, #16]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	1c5a      	adds	r2, r3, #1
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691a      	ldr	r2, [r3, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a94:	e0b8      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4966      	ldr	r1, [pc, #408]	; (8001c38 <HAL_I2C_Master_Receive+0x448>)
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f001 fea9 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0bf      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	1c5a      	adds	r2, r3, #1
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001af8:	2200      	movs	r2, #0
 8001afa:	494f      	ldr	r1, [pc, #316]	; (8001c38 <HAL_I2C_Master_Receive+0x448>)
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f001 fe7b 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e091      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	691a      	ldr	r2, [r3, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b80:	e042      	b.n	8001c08 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f001 ffc0 	bl	8003b0c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e04c      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d118      	bne.n	8001c08 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29a      	uxth	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aec2 	bne.w	8001996 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	e000      	b.n	8001c30 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c2e:	2302      	movs	r3, #2
  }
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3728      	adds	r7, #40	; 0x28
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	00010004 	.word	0x00010004

08001c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d003      	beq.n	8001c74 <HAL_I2C_EV_IRQHandler+0x38>
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	2b40      	cmp	r3, #64	; 0x40
 8001c70:	f040 80c1 	bne.w	8001df6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10d      	bne.n	8001caa <HAL_I2C_EV_IRQHandler+0x6e>
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001c94:	d003      	beq.n	8001c9e <HAL_I2C_EV_IRQHandler+0x62>
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001c9c:	d101      	bne.n	8001ca2 <HAL_I2C_EV_IRQHandler+0x66>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e000      	b.n	8001ca4 <HAL_I2C_EV_IRQHandler+0x68>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	f000 8132 	beq.w	8001f0e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00c      	beq.n	8001cce <HAL_I2C_EV_IRQHandler+0x92>
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	0a5b      	lsrs	r3, r3, #9
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d006      	beq.n	8001cce <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 ffa8 	bl	8003c16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 fd83 	bl	80027d2 <I2C_Master_SB>
 8001ccc:	e092      	b.n	8001df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08db      	lsrs	r3, r3, #3
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d009      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0xb2>
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	0a5b      	lsrs	r3, r3, #9
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fdf9 	bl	80028de <I2C_Master_ADD10>
 8001cec:	e082      	b.n	8001df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d009      	beq.n	8001d0e <HAL_I2C_EV_IRQHandler+0xd2>
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	0a5b      	lsrs	r3, r3, #9
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fe13 	bl	8002932 <I2C_Master_ADDR>
 8001d0c:	e072      	b.n	8001df4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d03b      	beq.n	8001d92 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d28:	f000 80f3 	beq.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	09db      	lsrs	r3, r3, #7
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00f      	beq.n	8001d58 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	0a9b      	lsrs	r3, r3, #10
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <HAL_I2C_EV_IRQHandler+0x11c>
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	089b      	lsrs	r3, r3, #2
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d103      	bne.n	8001d58 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 f9f3 	bl	800213c <I2C_MasterTransmit_TXE>
 8001d56:	e04d      	b.n	8001df4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	089b      	lsrs	r3, r3, #2
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80d6 	beq.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	0a5b      	lsrs	r3, r3, #9
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80cf 	beq.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001d74:	7bbb      	ldrb	r3, [r7, #14]
 8001d76:	2b21      	cmp	r3, #33	; 0x21
 8001d78:	d103      	bne.n	8001d82 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fa7a 	bl	8002274 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d80:	e0c7      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	2b40      	cmp	r3, #64	; 0x40
 8001d86:	f040 80c4 	bne.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fae8 	bl	8002360 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d90:	e0bf      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001da0:	f000 80b7 	beq.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	099b      	lsrs	r3, r3, #6
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00f      	beq.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x194>
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	0a9b      	lsrs	r3, r3, #10
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d009      	beq.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x194>
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	089b      	lsrs	r3, r3, #2
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d103      	bne.n	8001dd0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 fb5d 	bl	8002488 <I2C_MasterReceive_RXNE>
 8001dce:	e011      	b.n	8001df4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 809a 	beq.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	0a5b      	lsrs	r3, r3, #9
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 8093 	beq.w	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fc06 	bl	80025fe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001df2:	e08e      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001df4:	e08d      	b.n	8001f12 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d004      	beq.n	8001e08 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	61fb      	str	r3, [r7, #28]
 8001e06:	e007      	b.n	8001e18 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	695b      	ldr	r3, [r3, #20]
 8001e16:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	085b      	lsrs	r3, r3, #1
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d012      	beq.n	8001e4a <HAL_I2C_EV_IRQHandler+0x20e>
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	0a5b      	lsrs	r3, r3, #9
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001e40:	69b9      	ldr	r1, [r7, #24]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 ffc4 	bl	8002dd0 <I2C_Slave_ADDR>
 8001e48:	e066      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d009      	beq.n	8001e6a <HAL_I2C_EV_IRQHandler+0x22e>
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	0a5b      	lsrs	r3, r3, #9
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fffe 	bl	8002e64 <I2C_Slave_STOPF>
 8001e68:	e056      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001e6a:	7bbb      	ldrb	r3, [r7, #14]
 8001e6c:	2b21      	cmp	r3, #33	; 0x21
 8001e6e:	d002      	beq.n	8001e76 <HAL_I2C_EV_IRQHandler+0x23a>
 8001e70:	7bbb      	ldrb	r3, [r7, #14]
 8001e72:	2b29      	cmp	r3, #41	; 0x29
 8001e74:	d125      	bne.n	8001ec2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	09db      	lsrs	r3, r3, #7
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00f      	beq.n	8001ea2 <HAL_I2C_EV_IRQHandler+0x266>
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	0a9b      	lsrs	r3, r3, #10
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_I2C_EV_IRQHandler+0x266>
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	089b      	lsrs	r3, r3, #2
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d103      	bne.n	8001ea2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 feda 	bl	8002c54 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ea0:	e039      	b.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d033      	beq.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2da>
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	0a5b      	lsrs	r3, r3, #9
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d02d      	beq.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 ff07 	bl	8002cce <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec0:	e029      	b.n	8001f16 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	099b      	lsrs	r3, r3, #6
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00f      	beq.n	8001eee <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	0a9b      	lsrs	r3, r3, #10
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_I2C_EV_IRQHandler+0x2b2>
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 ff12 	bl	8002d10 <I2C_SlaveReceive_RXNE>
 8001eec:	e014      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00e      	beq.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	0a5b      	lsrs	r3, r3, #9
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d008      	beq.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 ff40 	bl	8002d8c <I2C_SlaveReceive_BTF>
 8001f0c:	e004      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001f0e:	bf00      	nop
 8001f10:	e002      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f12:	bf00      	nop
 8001f14:	e000      	b.n	8001f18 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f16:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b08a      	sub	sp, #40	; 0x28
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
 8001f2c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f40:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f42:	6a3b      	ldr	r3, [r7, #32]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00e      	beq.n	8001f6c <HAL_I2C_ER_IRQHandler+0x4e>
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	0a1b      	lsrs	r3, r3, #8
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f6a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	0a5b      	lsrs	r3, r3, #9
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0x78>
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	0a1b      	lsrs	r3, r3, #8
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001f94:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f96:	6a3b      	ldr	r3, [r7, #32]
 8001f98:	0a9b      	lsrs	r3, r3, #10
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03f      	beq.n	8002022 <HAL_I2C_ER_IRQHandler+0x104>
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	0a1b      	lsrs	r3, r3, #8
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d039      	beq.n	8002022 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001fc8:	7ebb      	ldrb	r3, [r7, #26]
 8001fca:	2b20      	cmp	r3, #32
 8001fcc:	d112      	bne.n	8001ff4 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10f      	bne.n	8001ff4 <HAL_I2C_ER_IRQHandler+0xd6>
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	2b21      	cmp	r3, #33	; 0x21
 8001fd8:	d008      	beq.n	8001fec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b29      	cmp	r3, #41	; 0x29
 8001fde:	d005      	beq.n	8001fec <HAL_I2C_ER_IRQHandler+0xce>
 8001fe0:	7cfb      	ldrb	r3, [r7, #19]
 8001fe2:	2b28      	cmp	r3, #40	; 0x28
 8001fe4:	d106      	bne.n	8001ff4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b21      	cmp	r3, #33	; 0x21
 8001fea:	d103      	bne.n	8001ff4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f001 f869 	bl	80030c4 <I2C_Slave_AF>
 8001ff2:	e016      	b.n	8002022 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ffc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f043 0304 	orr.w	r3, r3, #4
 8002004:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002006:	7efb      	ldrb	r3, [r7, #27]
 8002008:	2b10      	cmp	r3, #16
 800200a:	d002      	beq.n	8002012 <HAL_I2C_ER_IRQHandler+0xf4>
 800200c:	7efb      	ldrb	r3, [r7, #27]
 800200e:	2b40      	cmp	r3, #64	; 0x40
 8002010:	d107      	bne.n	8002022 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002020:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	0adb      	lsrs	r3, r3, #11
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <HAL_I2C_ER_IRQHandler+0x12e>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	0a1b      	lsrs	r3, r3, #8
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800204a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	2b00      	cmp	r3, #0
 8002050:	d008      	beq.n	8002064 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f001 f8a0 	bl	80031a4 <I2C_ITError>
  }
}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	70fb      	strb	r3, [r7, #3]
 80020c8:	4613      	mov	r3, r2
 80020ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002152:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	d150      	bne.n	8002204 <I2C_MasterTransmit_TXE+0xc8>
 8002162:	7bfb      	ldrb	r3, [r7, #15]
 8002164:	2b21      	cmp	r3, #33	; 0x21
 8002166:	d14d      	bne.n	8002204 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b08      	cmp	r3, #8
 800216c:	d01d      	beq.n	80021aa <I2C_MasterTransmit_TXE+0x6e>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b20      	cmp	r3, #32
 8002172:	d01a      	beq.n	80021aa <I2C_MasterTransmit_TXE+0x6e>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800217a:	d016      	beq.n	80021aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800218a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2211      	movs	r2, #17
 8002190:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2220      	movs	r2, #32
 800219e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ff62 	bl	800206c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021a8:	e060      	b.n	800226c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d107      	bne.n	80021f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff7d 	bl	80020ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021f2:	e03b      	b.n	800226c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7ff ff35 	bl	800206c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002202:	e033      	b.n	800226c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b21      	cmp	r3, #33	; 0x21
 8002208:	d005      	beq.n	8002216 <I2C_MasterTransmit_TXE+0xda>
 800220a:	7bbb      	ldrb	r3, [r7, #14]
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d12d      	bne.n	800226c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b22      	cmp	r3, #34	; 0x22
 8002214:	d12a      	bne.n	800226c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d108      	bne.n	8002232 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800222e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002230:	e01c      	b.n	800226c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b40      	cmp	r3, #64	; 0x40
 800223c:	d103      	bne.n	8002246 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 f88e 	bl	8002360 <I2C_MemoryTransmit_TXE_BTF>
}
 8002244:	e012      	b.n	800226c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	781a      	ldrb	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800226a:	e7ff      	b.n	800226c <I2C_MasterTransmit_TXE+0x130>
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b21      	cmp	r3, #33	; 0x21
 800228c:	d164      	bne.n	8002358 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d012      	beq.n	80022be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	1c5a      	adds	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80022bc:	e04c      	b.n	8002358 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d01d      	beq.n	8002300 <I2C_MasterTransmit_BTF+0x8c>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	d01a      	beq.n	8002300 <I2C_MasterTransmit_BTF+0x8c>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d0:	d016      	beq.n	8002300 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80022e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2211      	movs	r2, #17
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff feb7 	bl	800206c <HAL_I2C_MasterTxCpltCallback>
}
 80022fe:	e02b      	b.n	8002358 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800230e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2220      	movs	r2, #32
 800232a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b40      	cmp	r3, #64	; 0x40
 8002338:	d107      	bne.n	800234a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff fed2 	bl	80020ec <HAL_I2C_MemTxCpltCallback>
}
 8002348:	e006      	b.n	8002358 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff fe8a 	bl	800206c <HAL_I2C_MasterTxCpltCallback>
}
 8002358:	bf00      	nop
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800236e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d11d      	bne.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237c:	2b01      	cmp	r3, #1
 800237e:	d10b      	bne.n	8002398 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002384:	b2da      	uxtb	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002390:	1c9a      	adds	r2, r3, #2
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002396:	e073      	b.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800239c:	b29b      	uxth	r3, r3
 800239e:	121b      	asrs	r3, r3, #8
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023b2:	e065      	b.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d10b      	bne.n	80023d4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023cc:	1c5a      	adds	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023d2:	e055      	b.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d151      	bne.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80023dc:	7bfb      	ldrb	r3, [r7, #15]
 80023de:	2b22      	cmp	r3, #34	; 0x22
 80023e0:	d10d      	bne.n	80023fe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	651a      	str	r2, [r3, #80]	; 0x50
}
 80023fc:	e040      	b.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002408:	7bfb      	ldrb	r3, [r7, #15]
 800240a:	2b21      	cmp	r3, #33	; 0x21
 800240c:	d112      	bne.n	8002434 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	1c5a      	adds	r2, r3, #1
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002428:	b29b      	uxth	r3, r3
 800242a:	3b01      	subs	r3, #1
 800242c:	b29a      	uxth	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002432:	e025      	b.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002438:	b29b      	uxth	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d120      	bne.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b21      	cmp	r3, #33	; 0x21
 8002442:	d11d      	bne.n	8002480 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002452:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2220      	movs	r2, #32
 800246e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff fe36 	bl	80020ec <HAL_I2C_MemTxCpltCallback>
}
 8002480:	bf00      	nop
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b22      	cmp	r3, #34	; 0x22
 800249a:	f040 80ac 	bne.w	80025f6 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d921      	bls.n	80024f0 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	691a      	ldr	r2, [r3, #16]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	f040 808c 	bne.w	80025f6 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80024ee:	e082      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d075      	beq.n	80025e4 <I2C_MasterReceive_RXNE+0x15c>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d002      	beq.n	8002504 <I2C_MasterReceive_RXNE+0x7c>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d16f      	bne.n	80025e4 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f001 facf 	bl	8003aa8 <I2C_WaitOnSTOPRequestThroughIT>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d142      	bne.n	8002596 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800252e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	691a      	ldr	r2, [r3, #16]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002542:	1c5a      	adds	r2, r3, #1
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b40      	cmp	r3, #64	; 0x40
 8002568:	d10a      	bne.n	8002580 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff fdc1 	bl	8002100 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800257e:	e03a      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2212      	movs	r2, #18
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff fd76 	bl	8002080 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002594:	e02f      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2220      	movs	r2, #32
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fd99 	bl	8002114 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80025e2:	e008      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f2:	605a      	str	r2, [r3, #4]
}
 80025f4:	e7ff      	b.n	80025f6 <I2C_MasterReceive_RXNE+0x16e>
 80025f6:	bf00      	nop
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	2b04      	cmp	r3, #4
 8002614:	d11b      	bne.n	800264e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002624:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800264c:	e0bd      	b.n	80027ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002652:	b29b      	uxth	r3, r3
 8002654:	2b03      	cmp	r3, #3
 8002656:	d129      	bne.n	80026ac <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002666:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d00a      	beq.n	8002684 <I2C_MasterReceive_BTF+0x86>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d007      	beq.n	8002684 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002682:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691a      	ldr	r2, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	b2d2      	uxtb	r2, r2
 8002690:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002696:	1c5a      	adds	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3b01      	subs	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026aa:	e08e      	b.n	80027ca <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d176      	bne.n	80027a4 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d002      	beq.n	80026c2 <I2C_MasterReceive_BTF+0xc4>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b10      	cmp	r3, #16
 80026c0:	d108      	bne.n	80026d4 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	e019      	b.n	8002708 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d002      	beq.n	80026e0 <I2C_MasterReceive_BTF+0xe2>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d108      	bne.n	80026f2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ee:	601a      	str	r2, [r3, #0]
 80026f0:	e00a      	b.n	8002708 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2b10      	cmp	r3, #16
 80026f6:	d007      	beq.n	8002708 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002706:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691a      	ldr	r2, [r3, #16]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	3b01      	subs	r3, #1
 8002728:	b29a      	uxth	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274a:	b29b      	uxth	r3, r3
 800274c:	3b01      	subs	r3, #1
 800274e:	b29a      	uxth	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002762:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b40      	cmp	r3, #64	; 0x40
 8002776:	d10a      	bne.n	800278e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff fcba 	bl	8002100 <HAL_I2C_MemRxCpltCallback>
}
 800278c:	e01d      	b.n	80027ca <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2212      	movs	r2, #18
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7ff fc6f 	bl	8002080 <HAL_I2C_MasterRxCpltCallback>
}
 80027a2:	e012      	b.n	80027ca <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80027ca:	bf00      	nop
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b40      	cmp	r3, #64	; 0x40
 80027e4:	d117      	bne.n	8002816 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d109      	bne.n	8002802 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027fe:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002800:	e067      	b.n	80028d2 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	b2db      	uxtb	r3, r3
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	b2da      	uxtb	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	611a      	str	r2, [r3, #16]
}
 8002814:	e05d      	b.n	80028d2 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800281e:	d133      	bne.n	8002888 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b21      	cmp	r3, #33	; 0x21
 800282a:	d109      	bne.n	8002840 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	b2db      	uxtb	r3, r3
 8002832:	461a      	mov	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	e008      	b.n	8002852 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	b2db      	uxtb	r3, r3
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	b2da      	uxtb	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <I2C_Master_SB+0x92>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d108      	bne.n	8002876 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	2b00      	cmp	r3, #0
 800286a:	d032      	beq.n	80028d2 <I2C_Master_SB+0x100>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002872:	2b00      	cmp	r3, #0
 8002874:	d02d      	beq.n	80028d2 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002884:	605a      	str	r2, [r3, #4]
}
 8002886:	e024      	b.n	80028d2 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	b29b      	uxth	r3, r3
 8002896:	11db      	asrs	r3, r3, #7
 8002898:	b2db      	uxtb	r3, r3
 800289a:	f003 0306 	and.w	r3, r3, #6
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f063 030f 	orn	r3, r3, #15
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]
}
 80028ac:	e011      	b.n	80028d2 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d10d      	bne.n	80028d2 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	11db      	asrs	r3, r3, #7
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	f003 0306 	and.w	r3, r3, #6
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	f063 030e 	orn	r3, r3, #14
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d004      	beq.n	8002904 <I2C_Master_ADD10+0x26>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d108      	bne.n	8002916 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00c      	beq.n	8002926 <I2C_Master_ADD10+0x48>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002924:	605a      	str	r2, [r3, #4]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002932:	b480      	push	{r7}
 8002934:	b091      	sub	sp, #68	; 0x44
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b22      	cmp	r3, #34	; 0x22
 800295a:	f040 8169 	bne.w	8002c30 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10f      	bne.n	8002986 <I2C_Master_ADDR+0x54>
 8002966:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800296a:	2b40      	cmp	r3, #64	; 0x40
 800296c:	d10b      	bne.n	8002986 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800296e:	2300      	movs	r3, #0
 8002970:	633b      	str	r3, [r7, #48]	; 0x30
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	633b      	str	r3, [r7, #48]	; 0x30
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	e160      	b.n	8002c48 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11d      	bne.n	80029ca <I2C_Master_ADDR+0x98>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002996:	d118      	bne.n	80029ca <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002998:	2300      	movs	r3, #0
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	651a      	str	r2, [r3, #80]	; 0x50
 80029c8:	e13e      	b.n	8002c48 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d113      	bne.n	80029fc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80029e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e115      	b.n	8002c28 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	f040 808a 	bne.w	8002b1c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a0e:	d137      	bne.n	8002a80 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a2e:	d113      	bne.n	8002a58 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a3e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	e0e7      	b.n	8002c28 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	623b      	str	r3, [r7, #32]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e0d3      	b.n	8002c28 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d02e      	beq.n	8002ae4 <I2C_Master_ADDR+0x1b2>
 8002a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d02b      	beq.n	8002ae4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d102      	bne.n	8002a98 <I2C_Master_ADDR+0x166>
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d125      	bne.n	8002ae4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a9a:	2b04      	cmp	r3, #4
 8002a9c:	d00e      	beq.n	8002abc <I2C_Master_ADDR+0x18a>
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d00b      	beq.n	8002abc <I2C_Master_ADDR+0x18a>
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d008      	beq.n	8002abc <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e007      	b.n	8002acc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002aca:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	e0a1      	b.n	8002c28 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	61bb      	str	r3, [r7, #24]
 8002b08:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e085      	b.n	8002c28 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d14d      	bne.n	8002bc2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b28:	2b04      	cmp	r3, #4
 8002b2a:	d016      	beq.n	8002b5a <I2C_Master_ADDR+0x228>
 8002b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d013      	beq.n	8002b5a <I2C_Master_ADDR+0x228>
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d010      	beq.n	8002b5a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b46:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e007      	b.n	8002b6a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b68:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b78:	d117      	bne.n	8002baa <I2C_Master_ADDR+0x278>
 8002b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b80:	d00b      	beq.n	8002b9a <I2C_Master_ADDR+0x268>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d008      	beq.n	8002b9a <I2C_Master_ADDR+0x268>
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d005      	beq.n	8002b9a <I2C_Master_ADDR+0x268>
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d002      	beq.n	8002b9a <I2C_Master_ADDR+0x268>
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	d107      	bne.n	8002baa <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ba8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	e032      	b.n	8002c28 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be0:	d117      	bne.n	8002c12 <I2C_Master_ADDR+0x2e0>
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002be8:	d00b      	beq.n	8002c02 <I2C_Master_ADDR+0x2d0>
 8002bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d008      	beq.n	8002c02 <I2C_Master_ADDR+0x2d0>
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	2b08      	cmp	r3, #8
 8002bf4:	d005      	beq.n	8002c02 <I2C_Master_ADDR+0x2d0>
 8002bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf8:	2b10      	cmp	r3, #16
 8002bfa:	d002      	beq.n	8002c02 <I2C_Master_ADDR+0x2d0>
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	2b20      	cmp	r3, #32
 8002c00:	d107      	bne.n	8002c12 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	685a      	ldr	r2, [r3, #4]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c10:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	613b      	str	r3, [r7, #16]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	613b      	str	r3, [r7, #16]
 8002c26:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c2e:	e00b      	b.n	8002c48 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	695b      	ldr	r3, [r3, #20]
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	68fb      	ldr	r3, [r7, #12]
}
 8002c46:	e7ff      	b.n	8002c48 <I2C_Master_ADDR+0x316>
 8002c48:	bf00      	nop
 8002c4a:	3744      	adds	r7, #68	; 0x44
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c62:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d02b      	beq.n	8002cc6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c72:	781a      	ldrb	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d114      	bne.n	8002cc6 <I2C_SlaveTransmit_TXE+0x72>
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b29      	cmp	r3, #41	; 0x29
 8002ca0:	d111      	bne.n	8002cc6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2221      	movs	r2, #33	; 0x21
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2228      	movs	r2, #40	; 0x28
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff f9e7 	bl	8002094 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d011      	beq.n	8002d04 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d02c      	beq.n	8002d84 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d114      	bne.n	8002d84 <I2C_SlaveReceive_RXNE+0x74>
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d5e:	d111      	bne.n	8002d84 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2222      	movs	r2, #34	; 0x22
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2228      	movs	r2, #40	; 0x28
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7ff f992 	bl	80020a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dea:	2b28      	cmp	r3, #40	; 0x28
 8002dec:	d127      	bne.n	8002e3e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	09db      	lsrs	r3, r3, #7
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	81bb      	strh	r3, [r7, #12]
 8002e20:	e002      	b.n	8002e28 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e30:	89ba      	ldrh	r2, [r7, #12]
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff f940 	bl	80020bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002e3c:	e00e      	b.n	8002e5c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002e5c:	bf00      	nop
 8002e5e:	3710      	adds	r7, #16
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}

08002e64 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e72:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e82:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	60bb      	str	r3, [r7, #8]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	60bb      	str	r3, [r7, #8]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ebc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec0:	d172      	bne.n	8002fa8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ec2:	7bfb      	ldrb	r3, [r7, #15]
 8002ec4:	2b22      	cmp	r3, #34	; 0x22
 8002ec6:	d002      	beq.n	8002ece <I2C_Slave_STOPF+0x6a>
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	2b2a      	cmp	r3, #42	; 0x2a
 8002ecc:	d135      	bne.n	8002f3a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0204 	orr.w	r2, r3, #4
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f00:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe f883 	bl	8001012 <HAL_DMA_GetState>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d049      	beq.n	8002fa6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	4a69      	ldr	r2, [pc, #420]	; (80030bc <I2C_Slave_STOPF+0x258>)
 8002f18:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f855 	bl	8000fce <HAL_DMA_Abort_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d03d      	beq.n	8002fa6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f34:	4610      	mov	r0, r2
 8002f36:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f38:	e035      	b.n	8002fa6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe f84d 	bl	8001012 <HAL_DMA_GetState>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d014      	beq.n	8002fa8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f82:	4a4e      	ldr	r2, [pc, #312]	; (80030bc <I2C_Slave_STOPF+0x258>)
 8002f84:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fe f81f 	bl	8000fce <HAL_DMA_Abort_IT>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4798      	blx	r3
 8002fa4:	e000      	b.n	8002fa8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d03e      	beq.n	8003030 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d112      	bne.n	8002fe6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	1c5a      	adds	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff0:	2b40      	cmp	r3, #64	; 0x40
 8002ff2:	d112      	bne.n	800301a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	f043 0204 	orr.w	r2, r3, #4
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f8b3 	bl	80031a4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800303e:	e039      	b.n	80030b4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	2b2a      	cmp	r3, #42	; 0x2a
 8003044:	d109      	bne.n	800305a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2228      	movs	r2, #40	; 0x28
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f7ff f827 	bl	80020a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003060:	b2db      	uxtb	r3, r3
 8003062:	2b28      	cmp	r3, #40	; 0x28
 8003064:	d111      	bne.n	800308a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <I2C_Slave_STOPF+0x25c>)
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff f828 	bl	80020d8 <HAL_I2C_ListenCpltCallback>
}
 8003088:	e014      	b.n	80030b4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308e:	2b22      	cmp	r3, #34	; 0x22
 8003090:	d002      	beq.n	8003098 <I2C_Slave_STOPF+0x234>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b22      	cmp	r3, #34	; 0x22
 8003096:	d10d      	bne.n	80030b4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fe fffa 	bl	80020a8 <HAL_I2C_SlaveRxCpltCallback>
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	080036a9 	.word	0x080036a9
 80030c0:	ffff0000 	.word	0xffff0000

080030c4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030d2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d002      	beq.n	80030e6 <I2C_Slave_AF+0x22>
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2b20      	cmp	r3, #32
 80030e4:	d129      	bne.n	800313a <I2C_Slave_AF+0x76>
 80030e6:	7bfb      	ldrb	r3, [r7, #15]
 80030e8:	2b28      	cmp	r3, #40	; 0x28
 80030ea:	d126      	bne.n	800313a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a2c      	ldr	r2, [pc, #176]	; (80031a0 <I2C_Slave_AF+0xdc>)
 80030f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003100:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800311a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe ffd0 	bl	80020d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003138:	e02e      	b.n	8003198 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b21      	cmp	r3, #33	; 0x21
 800313e:	d126      	bne.n	800318e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <I2C_Slave_AF+0xdc>)
 8003144:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2221      	movs	r2, #33	; 0x21
 800314a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2220      	movs	r2, #32
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685a      	ldr	r2, [r3, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800316a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003174:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fe ff84 	bl	8002094 <HAL_I2C_SlaveTxCpltCallback>
}
 800318c:	e004      	b.n	8003198 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003196:	615a      	str	r2, [r3, #20]
}
 8003198:	bf00      	nop
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	ffff0000 	.word	0xffff0000

080031a4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031ba:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80031bc:	7bbb      	ldrb	r3, [r7, #14]
 80031be:	2b10      	cmp	r3, #16
 80031c0:	d002      	beq.n	80031c8 <I2C_ITError+0x24>
 80031c2:	7bbb      	ldrb	r3, [r7, #14]
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d10a      	bne.n	80031de <I2C_ITError+0x3a>
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
 80031ca:	2b22      	cmp	r3, #34	; 0x22
 80031cc:	d107      	bne.n	80031de <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031dc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80031e4:	2b28      	cmp	r3, #40	; 0x28
 80031e6:	d107      	bne.n	80031f8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2228      	movs	r2, #40	; 0x28
 80031f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80031f6:	e015      	b.n	8003224 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003206:	d00a      	beq.n	800321e <I2C_ITError+0x7a>
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b60      	cmp	r3, #96	; 0x60
 800320c:	d007      	beq.n	800321e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800322e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003232:	d162      	bne.n	80032fa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003242:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d020      	beq.n	8003294 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <I2C_ITError+0x25c>)
 8003258:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd feb5 	bl	8000fce <HAL_DMA_Abort_IT>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8089 	beq.w	800337e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0201 	bic.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800328e:	4610      	mov	r0, r2
 8003290:	4798      	blx	r3
 8003292:	e074      	b.n	800337e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	4a59      	ldr	r2, [pc, #356]	; (8003400 <I2C_ITError+0x25c>)
 800329a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd fe94 	bl	8000fce <HAL_DMA_Abort_IT>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d068      	beq.n	800337e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b6:	2b40      	cmp	r3, #64	; 0x40
 80032b8:	d10b      	bne.n	80032d2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032f4:	4610      	mov	r0, r2
 80032f6:	4798      	blx	r3
 80032f8:	e041      	b.n	800337e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b60      	cmp	r3, #96	; 0x60
 8003304:	d125      	bne.n	8003352 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b40      	cmp	r3, #64	; 0x40
 8003320:	d10b      	bne.n	800333a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	b2d2      	uxtb	r2, r2
 800332e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7fe feec 	bl	8002128 <HAL_I2C_AbortCpltCallback>
 8003350:	e015      	b.n	800337e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d10b      	bne.n	8003378 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	691a      	ldr	r2, [r3, #16]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	b2d2      	uxtb	r2, r2
 800336c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fe fecb 	bl	8002114 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10e      	bne.n	80033ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003394:	2b00      	cmp	r3, #0
 8003396:	d109      	bne.n	80033ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033ba:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b04      	cmp	r3, #4
 80033ce:	d113      	bne.n	80033f8 <I2C_ITError+0x254>
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
 80033d2:	2b28      	cmp	r3, #40	; 0x28
 80033d4:	d110      	bne.n	80033f8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <I2C_ITError+0x260>)
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7fe fe70 	bl	80020d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033f8:	bf00      	nop
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	080036a9 	.word	0x080036a9
 8003404:	ffff0000 	.word	0xffff0000

08003408 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b088      	sub	sp, #32
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]
 8003414:	460b      	mov	r3, r1
 8003416:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d006      	beq.n	8003432 <I2C_MasterRequestWrite+0x2a>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d003      	beq.n	8003432 <I2C_MasterRequestWrite+0x2a>
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003430:	d108      	bne.n	8003444 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003440:	601a      	str	r2, [r3, #0]
 8003442:	e00b      	b.n	800345c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003448:	2b12      	cmp	r3, #18
 800344a:	d107      	bne.n	800345c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800345a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f000 f9c5 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003482:	d103      	bne.n	800348c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f44f 7200 	mov.w	r2, #512	; 0x200
 800348a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e035      	b.n	80034fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003498:	d108      	bne.n	80034ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800349a:	897b      	ldrh	r3, [r7, #10]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034a8:	611a      	str	r2, [r3, #16]
 80034aa:	e01b      	b.n	80034e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034ac:	897b      	ldrh	r3, [r7, #10]
 80034ae:	11db      	asrs	r3, r3, #7
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	f003 0306 	and.w	r3, r3, #6
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	f063 030f 	orn	r3, r3, #15
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	490e      	ldr	r1, [pc, #56]	; (8003504 <I2C_MasterRequestWrite+0xfc>)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f9eb 	bl	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e010      	b.n	80034fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034da:	897b      	ldrh	r3, [r7, #10]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4907      	ldr	r1, [pc, #28]	; (8003508 <I2C_MasterRequestWrite+0x100>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f9db 	bl	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	00010008 	.word	0x00010008
 8003508:	00010002 	.word	0x00010002

0800350c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af02      	add	r7, sp, #8
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	607a      	str	r2, [r7, #4]
 8003516:	603b      	str	r3, [r7, #0]
 8003518:	460b      	mov	r3, r1
 800351a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003520:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003530:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d006      	beq.n	8003546 <I2C_MasterRequestRead+0x3a>
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d003      	beq.n	8003546 <I2C_MasterRequestRead+0x3a>
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003544:	d108      	bne.n	8003558 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	e00b      	b.n	8003570 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	2b11      	cmp	r3, #17
 800355e:	d107      	bne.n	8003570 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800356e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f93b 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003596:	d103      	bne.n	80035a0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e079      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035ac:	d108      	bne.n	80035c0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	611a      	str	r2, [r3, #16]
 80035be:	e05f      	b.n	8003680 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035c0:	897b      	ldrh	r3, [r7, #10]
 80035c2:	11db      	asrs	r3, r3, #7
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 0306 	and.w	r3, r3, #6
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	f063 030f 	orn	r3, r3, #15
 80035d0:	b2da      	uxtb	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	4930      	ldr	r1, [pc, #192]	; (80036a0 <I2C_MasterRequestRead+0x194>)
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f961 	bl	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e054      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	4929      	ldr	r1, [pc, #164]	; (80036a4 <I2C_MasterRequestRead+0x198>)
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f951 	bl	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e044      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	613b      	str	r3, [r7, #16]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003632:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f8d9 	bl	80037f8 <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365a:	d103      	bne.n	8003664 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e017      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	11db      	asrs	r3, r3, #7
 800366c:	b2db      	uxtb	r3, r3
 800366e:	f003 0306 	and.w	r3, r3, #6
 8003672:	b2db      	uxtb	r3, r3
 8003674:	f063 030e 	orn	r3, r3, #14
 8003678:	b2da      	uxtb	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <I2C_MasterRequestRead+0x198>)
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f90d 	bl	80038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e000      	b.n	8003698 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	00010008 	.word	0x00010008
 80036a4:	00010002 	.word	0x00010002

080036a8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036c2:	4b4b      	ldr	r3, [pc, #300]	; (80037f0 <I2C_DMAAbort+0x148>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	08db      	lsrs	r3, r3, #3
 80036c8:	4a4a      	ldr	r2, [pc, #296]	; (80037f4 <I2C_DMAAbort+0x14c>)
 80036ca:	fba2 2303 	umull	r2, r3, r2, r3
 80036ce:	0a1a      	lsrs	r2, r3, #8
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00da      	lsls	r2, r3, #3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80036ee:	e00a      	b.n	8003706 <I2C_DMAAbort+0x5e>
    }
    count--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003704:	d0ea      	beq.n	80036dc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003712:	2200      	movs	r2, #0
 8003714:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	2b00      	cmp	r3, #0
 800371c:	d003      	beq.n	8003726 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	2200      	movs	r2, #0
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003734:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	2200      	movs	r2, #0
 800373a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	2200      	movs	r2, #0
 800374a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	2200      	movs	r2, #0
 800375a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d10e      	bne.n	8003796 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2200      	movs	r2, #0
 800378c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800378e:	6978      	ldr	r0, [r7, #20]
 8003790:	f7fe fcca 	bl	8002128 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003794:	e027      	b.n	80037e6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003796:	7cfb      	ldrb	r3, [r7, #19]
 8003798:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800379c:	2b28      	cmp	r3, #40	; 0x28
 800379e:	d117      	bne.n	80037d0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037be:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	2200      	movs	r2, #0
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2228      	movs	r2, #40	; 0x28
 80037ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037ce:	e007      	b.n	80037e0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80037e0:	6978      	ldr	r0, [r7, #20]
 80037e2:	f7fe fc97 	bl	8002114 <HAL_I2C_ErrorCallback>
}
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000004 	.word	0x20000004
 80037f4:	14f8b589 	.word	0x14f8b589

080037f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	4613      	mov	r3, r2
 8003806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003808:	e025      	b.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003810:	d021      	beq.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003812:	f7fd fa9b 	bl	8000d4c <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d302      	bcc.n	8003828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d116      	bne.n	8003856 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e023      	b.n	800389e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	0c1b      	lsrs	r3, r3, #16
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10d      	bne.n	800387c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4013      	ands	r3, r2
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	bf0c      	ite	eq
 8003872:	2301      	moveq	r3, #1
 8003874:	2300      	movne	r3, #0
 8003876:	b2db      	uxtb	r3, r3
 8003878:	461a      	mov	r2, r3
 800387a:	e00c      	b.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf0c      	ite	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	2300      	movne	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	79fb      	ldrb	r3, [r7, #7]
 8003898:	429a      	cmp	r2, r3
 800389a:	d0b6      	beq.n	800380a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3710      	adds	r7, #16
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b084      	sub	sp, #16
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	607a      	str	r2, [r7, #4]
 80038b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b4:	e051      	b.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c4:	d123      	bne.n	800390e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f043 0204 	orr.w	r2, r3, #4
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e046      	b.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d021      	beq.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003916:	f7fd fa19 	bl	8000d4c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	429a      	cmp	r2, r3
 8003924:	d302      	bcc.n	800392c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d116      	bne.n	800395a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2220      	movs	r2, #32
 8003936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	f043 0220 	orr.w	r2, r3, #32
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e020      	b.n	800399c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d10c      	bne.n	800397e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	43da      	mvns	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	4013      	ands	r3, r2
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	bf14      	ite	ne
 8003976:	2301      	movne	r3, #1
 8003978:	2300      	moveq	r3, #0
 800397a:	b2db      	uxtb	r3, r3
 800397c:	e00b      	b.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	43da      	mvns	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf14      	ite	ne
 8003990:	2301      	movne	r3, #1
 8003992:	2300      	moveq	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d18d      	bne.n	80038b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039b0:	e02d      	b.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 f900 	bl	8003bb8 <I2C_IsAcknowledgeFailed>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e02d      	b.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d021      	beq.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f7fd f9bf 	bl	8000d4c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d116      	bne.n	8003a0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f043 0220 	orr.w	r2, r3, #32
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e007      	b.n	8003a1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b80      	cmp	r3, #128	; 0x80
 8003a1a:	d1ca      	bne.n	80039b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	60f8      	str	r0, [r7, #12]
 8003a2e:	60b9      	str	r1, [r7, #8]
 8003a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a32:	e02d      	b.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f8bf 	bl	8003bb8 <I2C_IsAcknowledgeFailed>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e02d      	b.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d021      	beq.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7fd f97e 	bl	8000d4c <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	68ba      	ldr	r2, [r7, #8]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d302      	bcc.n	8003a62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d116      	bne.n	8003a90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f043 0220 	orr.w	r2, r3, #32
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e007      	b.n	8003aa0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d1ca      	bne.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ab4:	4b13      	ldr	r3, [pc, #76]	; (8003b04 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	08db      	lsrs	r3, r3, #3
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003abc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac0:	0a1a      	lsrs	r2, r3, #8
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d107      	bne.n	8003ae6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e008      	b.n	8003af8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af4:	d0e9      	beq.n	8003aca <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	20000004 	.word	0x20000004
 8003b08:	14f8b589 	.word	0x14f8b589

08003b0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b18:	e042      	b.n	8003ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d119      	bne.n	8003b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0210 	mvn.w	r2, #16
 8003b30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e029      	b.n	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5c:	f7fd f8f6 	bl	8000d4c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d116      	bne.n	8003ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8c:	f043 0220 	orr.w	r2, r3, #32
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e007      	b.n	8003bb0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d1b5      	bne.n	8003b1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bce:	d11b      	bne.n	8003c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf4:	f043 0204 	orr.w	r2, r3, #4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e000      	b.n	8003c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c26:	d103      	bne.n	8003c30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c2e:	e007      	b.n	8003c40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c38:	d102      	bne.n	8003c40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e267      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d075      	beq.n	8003d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c6a:	4b88      	ldr	r3, [pc, #544]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f003 030c 	and.w	r3, r3, #12
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d00c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c76:	4b85      	ldr	r3, [pc, #532]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7e:	2b08      	cmp	r3, #8
 8003c80:	d112      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c82:	4b82      	ldr	r3, [pc, #520]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c8e:	d10b      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	4b7e      	ldr	r3, [pc, #504]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d05b      	beq.n	8003d54 <HAL_RCC_OscConfig+0x108>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d157      	bne.n	8003d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e242      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb0:	d106      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x74>
 8003cb2:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a75      	ldr	r2, [pc, #468]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e01d      	b.n	8003cfc <HAL_RCC_OscConfig+0xb0>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x98>
 8003cca:	4b70      	ldr	r3, [pc, #448]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a6f      	ldr	r2, [pc, #444]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b6d      	ldr	r3, [pc, #436]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a6c      	ldr	r2, [pc, #432]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e00b      	b.n	8003cfc <HAL_RCC_OscConfig+0xb0>
 8003ce4:	4b69      	ldr	r3, [pc, #420]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a68      	ldr	r2, [pc, #416]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cee:	6013      	str	r3, [r2, #0]
 8003cf0:	4b66      	ldr	r3, [pc, #408]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a65      	ldr	r2, [pc, #404]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003cf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d013      	beq.n	8003d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fd f822 	bl	8000d4c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fd f81e 	bl	8000d4c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	; 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e207      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	4b5b      	ldr	r3, [pc, #364]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0xc0>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d2c:	f7fd f80e 	bl	8000d4c <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	e008      	b.n	8003d46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d34:	f7fd f80a 	bl	8000d4c <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e1f3      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	4b51      	ldr	r3, [pc, #324]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1f0      	bne.n	8003d34 <HAL_RCC_OscConfig+0xe8>
 8003d52:	e000      	b.n	8003d56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d063      	beq.n	8003e2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d62:	4b4a      	ldr	r3, [pc, #296]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 030c 	and.w	r3, r3, #12
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00b      	beq.n	8003d86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	4b47      	ldr	r3, [pc, #284]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d11c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b44      	ldr	r3, [pc, #272]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d116      	bne.n	8003db4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d86:	4b41      	ldr	r3, [pc, #260]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_RCC_OscConfig+0x152>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e1c7      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4937      	ldr	r1, [pc, #220]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db2:	e03a      	b.n	8003e2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dbc:	4b34      	ldr	r3, [pc, #208]	; (8003e90 <HAL_RCC_OscConfig+0x244>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fc ffc3 	bl	8000d4c <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dca:	f7fc ffbf 	bl	8000d4c <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e1a8      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de8:	4b28      	ldr	r3, [pc, #160]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	4925      	ldr	r1, [pc, #148]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	600b      	str	r3, [r1, #0]
 8003dfc:	e015      	b.n	8003e2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dfe:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_RCC_OscConfig+0x244>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fc ffa2 	bl	8000d4c <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e0c:	f7fc ff9e 	bl	8000d4c <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e187      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d036      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d016      	beq.n	8003e6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e3e:	4b15      	ldr	r3, [pc, #84]	; (8003e94 <HAL_RCC_OscConfig+0x248>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e44:	f7fc ff82 	bl	8000d4c <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fc ff7e 	bl	8000d4c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e167      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_RCC_OscConfig+0x240>)
 8003e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x200>
 8003e6a:	e01b      	b.n	8003ea4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e6c:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <HAL_RCC_OscConfig+0x248>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e72:	f7fc ff6b 	bl	8000d4c <HAL_GetTick>
 8003e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	e00e      	b.n	8003e98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7a:	f7fc ff67 	bl	8000d4c <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d907      	bls.n	8003e98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e150      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
 8003e8c:	40023800 	.word	0x40023800
 8003e90:	42470000 	.word	0x42470000
 8003e94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e98:	4b88      	ldr	r3, [pc, #544]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ea      	bne.n	8003e7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 8097 	beq.w	8003fe0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eb6:	4b81      	ldr	r3, [pc, #516]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10f      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	60bb      	str	r3, [r7, #8]
 8003ec6:	4b7d      	ldr	r3, [pc, #500]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	4a7c      	ldr	r2, [pc, #496]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed2:	4b7a      	ldr	r3, [pc, #488]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee2:	4b77      	ldr	r3, [pc, #476]	; (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d118      	bne.n	8003f20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eee:	4b74      	ldr	r3, [pc, #464]	; (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a73      	ldr	r2, [pc, #460]	; (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fc ff27 	bl	8000d4c <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f02:	f7fc ff23 	bl	8000d4c <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e10c      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f14:	4b6a      	ldr	r3, [pc, #424]	; (80040c0 <HAL_RCC_OscConfig+0x474>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d106      	bne.n	8003f36 <HAL_RCC_OscConfig+0x2ea>
 8003f28:	4b64      	ldr	r3, [pc, #400]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2c:	4a63      	ldr	r2, [pc, #396]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	6713      	str	r3, [r2, #112]	; 0x70
 8003f34:	e01c      	b.n	8003f70 <HAL_RCC_OscConfig+0x324>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	2b05      	cmp	r3, #5
 8003f3c:	d10c      	bne.n	8003f58 <HAL_RCC_OscConfig+0x30c>
 8003f3e:	4b5f      	ldr	r3, [pc, #380]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	4a5e      	ldr	r2, [pc, #376]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 0304 	orr.w	r3, r3, #4
 8003f48:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4a:	4b5c      	ldr	r3, [pc, #368]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f4e:	4a5b      	ldr	r2, [pc, #364]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	e00b      	b.n	8003f70 <HAL_RCC_OscConfig+0x324>
 8003f58:	4b58      	ldr	r3, [pc, #352]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a57      	ldr	r2, [pc, #348]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f023 0301 	bic.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	4b55      	ldr	r3, [pc, #340]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a54      	ldr	r2, [pc, #336]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f6a:	f023 0304 	bic.w	r3, r3, #4
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d015      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fc fee8 	bl	8000d4c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fc fee4 	bl	8000d4c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0cb      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4b49      	ldr	r3, [pc, #292]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCC_OscConfig+0x334>
 8003fa2:	e014      	b.n	8003fce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa4:	f7fc fed2 	bl	8000d4c <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003faa:	e00a      	b.n	8003fc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fac:	f7fc fece 	bl	8000d4c <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e0b5      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1ee      	bne.n	8003fac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd4:	4b39      	ldr	r3, [pc, #228]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	4a38      	ldr	r2, [pc, #224]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 80a1 	beq.w	800412c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fea:	4b34      	ldr	r3, [pc, #208]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f003 030c 	and.w	r3, r3, #12
 8003ff2:	2b08      	cmp	r3, #8
 8003ff4:	d05c      	beq.n	80040b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d141      	bne.n	8004082 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <HAL_RCC_OscConfig+0x478>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fc fea2 	bl	8000d4c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400c:	f7fc fe9e 	bl	8000d4c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e087      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b27      	ldr	r3, [pc, #156]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69da      	ldr	r2, [r3, #28]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	431a      	orrs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	019b      	lsls	r3, r3, #6
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	085b      	lsrs	r3, r3, #1
 8004042:	3b01      	subs	r3, #1
 8004044:	041b      	lsls	r3, r3, #16
 8004046:	431a      	orrs	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404c:	061b      	lsls	r3, r3, #24
 800404e:	491b      	ldr	r1, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8004050:	4313      	orrs	r3, r2
 8004052:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x478>)
 8004056:	2201      	movs	r2, #1
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fc fe77 	bl	8000d4c <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004062:	f7fc fe73 	bl	8000d4c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e05c      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004074:	4b11      	ldr	r3, [pc, #68]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <HAL_RCC_OscConfig+0x416>
 8004080:	e054      	b.n	800412c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <HAL_RCC_OscConfig+0x478>)
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fc fe60 	bl	8000d4c <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004090:	f7fc fe5c 	bl	8000d4c <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b02      	cmp	r3, #2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e045      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a2:	4b06      	ldr	r3, [pc, #24]	; (80040bc <HAL_RCC_OscConfig+0x470>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0x444>
 80040ae:	e03d      	b.n	800412c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e038      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40007000 	.word	0x40007000
 80040c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_OscConfig+0x4ec>)
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d028      	beq.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d121      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d11a      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004100:	4293      	cmp	r3, r2
 8004102:	d111      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	085b      	lsrs	r3, r3, #1
 8004110:	3b01      	subs	r3, #1
 8004112:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004114:	429a      	cmp	r2, r3
 8004116:	d107      	bne.n	8004128 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004122:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e000      	b.n	800412e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800

0800413c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e0cc      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004150:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d90c      	bls.n	8004178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415e:	4b65      	ldr	r3, [pc, #404]	; (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004166:	4b63      	ldr	r3, [pc, #396]	; (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d001      	beq.n	8004178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e0b8      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004190:	4b59      	ldr	r3, [pc, #356]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a58      	ldr	r2, [pc, #352]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800419a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041a8:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4a52      	ldr	r2, [pc, #328]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	494d      	ldr	r1, [pc, #308]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d044      	beq.n	800425c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041da:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d119      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e07f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d107      	bne.n	800420a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041fa:	4b3f      	ldr	r3, [pc, #252]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d109      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e06f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800420a:	4b3b      	ldr	r3, [pc, #236]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d101      	bne.n	800421a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e067      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800421a:	4b37      	ldr	r3, [pc, #220]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f023 0203 	bic.w	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4934      	ldr	r1, [pc, #208]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004228:	4313      	orrs	r3, r2
 800422a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800422c:	f7fc fd8e 	bl	8000d4c <HAL_GetTick>
 8004230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004232:	e00a      	b.n	800424a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004234:	f7fc fd8a 	bl	8000d4c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e04f      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800424a:	4b2b      	ldr	r3, [pc, #172]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 020c 	and.w	r2, r3, #12
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	429a      	cmp	r2, r3
 800425a:	d1eb      	bne.n	8004234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800425c:	4b25      	ldr	r3, [pc, #148]	; (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	683a      	ldr	r2, [r7, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d20c      	bcs.n	8004284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426a:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b20      	ldr	r3, [pc, #128]	; (80042f4 <HAL_RCC_ClockConfig+0x1b8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e032      	b.n	80042ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d008      	beq.n	80042a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004290:	4b19      	ldr	r3, [pc, #100]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4916      	ldr	r1, [pc, #88]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ae:	4b12      	ldr	r3, [pc, #72]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	490e      	ldr	r1, [pc, #56]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042c2:	f000 f821 	bl	8004308 <HAL_RCC_GetSysClockFreq>
 80042c6:	4602      	mov	r2, r0
 80042c8:	4b0b      	ldr	r3, [pc, #44]	; (80042f8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	490a      	ldr	r1, [pc, #40]	; (80042fc <HAL_RCC_ClockConfig+0x1c0>)
 80042d4:	5ccb      	ldrb	r3, [r1, r3]
 80042d6:	fa22 f303 	lsr.w	r3, r2, r3
 80042da:	4a09      	ldr	r2, [pc, #36]	; (8004300 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fc fcee 	bl	8000cc4 <HAL_InitTick>

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40023c00 	.word	0x40023c00
 80042f8:	40023800 	.word	0x40023800
 80042fc:	08005070 	.word	0x08005070
 8004300:	20000004 	.word	0x20000004
 8004304:	20000008 	.word	0x20000008

08004308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800430c:	b094      	sub	sp, #80	; 0x50
 800430e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	647b      	str	r3, [r7, #68]	; 0x44
 8004314:	2300      	movs	r3, #0
 8004316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004318:	2300      	movs	r3, #0
 800431a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800431c:	2300      	movs	r3, #0
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004320:	4b79      	ldr	r3, [pc, #484]	; (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d00d      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x40>
 800432c:	2b08      	cmp	r3, #8
 800432e:	f200 80e1 	bhi.w	80044f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_RCC_GetSysClockFreq+0x34>
 8004336:	2b04      	cmp	r3, #4
 8004338:	d003      	beq.n	8004342 <HAL_RCC_GetSysClockFreq+0x3a>
 800433a:	e0db      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800433c:	4b73      	ldr	r3, [pc, #460]	; (800450c <HAL_RCC_GetSysClockFreq+0x204>)
 800433e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004340:	e0db      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004342:	4b73      	ldr	r3, [pc, #460]	; (8004510 <HAL_RCC_GetSysClockFreq+0x208>)
 8004344:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004346:	e0d8      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004348:	4b6f      	ldr	r3, [pc, #444]	; (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004350:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004352:	4b6d      	ldr	r3, [pc, #436]	; (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d063      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435e:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	099b      	lsrs	r3, r3, #6
 8004364:	2200      	movs	r2, #0
 8004366:	63bb      	str	r3, [r7, #56]	; 0x38
 8004368:	63fa      	str	r2, [r7, #60]	; 0x3c
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
 8004372:	2300      	movs	r3, #0
 8004374:	637b      	str	r3, [r7, #52]	; 0x34
 8004376:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800437a:	4622      	mov	r2, r4
 800437c:	462b      	mov	r3, r5
 800437e:	f04f 0000 	mov.w	r0, #0
 8004382:	f04f 0100 	mov.w	r1, #0
 8004386:	0159      	lsls	r1, r3, #5
 8004388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800438c:	0150      	lsls	r0, r2, #5
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4621      	mov	r1, r4
 8004394:	1a51      	subs	r1, r2, r1
 8004396:	6139      	str	r1, [r7, #16]
 8004398:	4629      	mov	r1, r5
 800439a:	eb63 0301 	sbc.w	r3, r3, r1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ac:	4659      	mov	r1, fp
 80043ae:	018b      	lsls	r3, r1, #6
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043b6:	4651      	mov	r1, sl
 80043b8:	018a      	lsls	r2, r1, #6
 80043ba:	4651      	mov	r1, sl
 80043bc:	ebb2 0801 	subs.w	r8, r2, r1
 80043c0:	4659      	mov	r1, fp
 80043c2:	eb63 0901 	sbc.w	r9, r3, r1
 80043c6:	f04f 0200 	mov.w	r2, #0
 80043ca:	f04f 0300 	mov.w	r3, #0
 80043ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043da:	4690      	mov	r8, r2
 80043dc:	4699      	mov	r9, r3
 80043de:	4623      	mov	r3, r4
 80043e0:	eb18 0303 	adds.w	r3, r8, r3
 80043e4:	60bb      	str	r3, [r7, #8]
 80043e6:	462b      	mov	r3, r5
 80043e8:	eb49 0303 	adc.w	r3, r9, r3
 80043ec:	60fb      	str	r3, [r7, #12]
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043fa:	4629      	mov	r1, r5
 80043fc:	024b      	lsls	r3, r1, #9
 80043fe:	4621      	mov	r1, r4
 8004400:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004404:	4621      	mov	r1, r4
 8004406:	024a      	lsls	r2, r1, #9
 8004408:	4610      	mov	r0, r2
 800440a:	4619      	mov	r1, r3
 800440c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800440e:	2200      	movs	r2, #0
 8004410:	62bb      	str	r3, [r7, #40]	; 0x28
 8004412:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004414:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004418:	f7fb fedc 	bl	80001d4 <__aeabi_uldivmod>
 800441c:	4602      	mov	r2, r0
 800441e:	460b      	mov	r3, r1
 8004420:	4613      	mov	r3, r2
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	e058      	b.n	80044d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004426:	4b38      	ldr	r3, [pc, #224]	; (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	099b      	lsrs	r3, r3, #6
 800442c:	2200      	movs	r2, #0
 800442e:	4618      	mov	r0, r3
 8004430:	4611      	mov	r1, r2
 8004432:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	2300      	movs	r3, #0
 800443a:	627b      	str	r3, [r7, #36]	; 0x24
 800443c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004440:	4642      	mov	r2, r8
 8004442:	464b      	mov	r3, r9
 8004444:	f04f 0000 	mov.w	r0, #0
 8004448:	f04f 0100 	mov.w	r1, #0
 800444c:	0159      	lsls	r1, r3, #5
 800444e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004452:	0150      	lsls	r0, r2, #5
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4641      	mov	r1, r8
 800445a:	ebb2 0a01 	subs.w	sl, r2, r1
 800445e:	4649      	mov	r1, r9
 8004460:	eb63 0b01 	sbc.w	fp, r3, r1
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004470:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004474:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004478:	ebb2 040a 	subs.w	r4, r2, sl
 800447c:	eb63 050b 	sbc.w	r5, r3, fp
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	f04f 0300 	mov.w	r3, #0
 8004488:	00eb      	lsls	r3, r5, #3
 800448a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800448e:	00e2      	lsls	r2, r4, #3
 8004490:	4614      	mov	r4, r2
 8004492:	461d      	mov	r5, r3
 8004494:	4643      	mov	r3, r8
 8004496:	18e3      	adds	r3, r4, r3
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	464b      	mov	r3, r9
 800449c:	eb45 0303 	adc.w	r3, r5, r3
 80044a0:	607b      	str	r3, [r7, #4]
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044ae:	4629      	mov	r1, r5
 80044b0:	028b      	lsls	r3, r1, #10
 80044b2:	4621      	mov	r1, r4
 80044b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b8:	4621      	mov	r1, r4
 80044ba:	028a      	lsls	r2, r1, #10
 80044bc:	4610      	mov	r0, r2
 80044be:	4619      	mov	r1, r3
 80044c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044c2:	2200      	movs	r2, #0
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044cc:	f7fb fe82 	bl	80001d4 <__aeabi_uldivmod>
 80044d0:	4602      	mov	r2, r0
 80044d2:	460b      	mov	r3, r1
 80044d4:	4613      	mov	r3, r2
 80044d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d8:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <HAL_RCC_GetSysClockFreq+0x200>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	0c1b      	lsrs	r3, r3, #16
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	3301      	adds	r3, #1
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80044e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f2:	e002      	b.n	80044fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044f4:	4b05      	ldr	r3, [pc, #20]	; (800450c <HAL_RCC_GetSysClockFreq+0x204>)
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3750      	adds	r7, #80	; 0x50
 8004500:	46bd      	mov	sp, r7
 8004502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800
 800450c:	00f42400 	.word	0x00f42400
 8004510:	007a1200 	.word	0x007a1200

08004514 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004518:	4b03      	ldr	r3, [pc, #12]	; (8004528 <HAL_RCC_GetHCLKFreq+0x14>)
 800451a:	681b      	ldr	r3, [r3, #0]
}
 800451c:	4618      	mov	r0, r3
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	20000004 	.word	0x20000004

0800452c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004530:	f7ff fff0 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 8004534:	4602      	mov	r2, r0
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	0a9b      	lsrs	r3, r3, #10
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	4903      	ldr	r1, [pc, #12]	; (8004550 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004542:	5ccb      	ldrb	r3, [r1, r3]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004548:	4618      	mov	r0, r3
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40023800 	.word	0x40023800
 8004550:	08005080 	.word	0x08005080

08004554 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004558:	f7ff ffdc 	bl	8004514 <HAL_RCC_GetHCLKFreq>
 800455c:	4602      	mov	r2, r0
 800455e:	4b05      	ldr	r3, [pc, #20]	; (8004574 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	0b5b      	lsrs	r3, r3, #13
 8004564:	f003 0307 	and.w	r3, r3, #7
 8004568:	4903      	ldr	r1, [pc, #12]	; (8004578 <HAL_RCC_GetPCLK2Freq+0x24>)
 800456a:	5ccb      	ldrb	r3, [r1, r3]
 800456c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40023800 	.word	0x40023800
 8004578:	08005080 	.word	0x08005080

0800457c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e03f      	b.n	800460e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc faa2 	bl	8000aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2224      	movs	r2, #36	; 0x24
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 f9cb 	bl	800495c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b08a      	sub	sp, #40	; 0x28
 800461a:	af02      	add	r7, sp, #8
 800461c:	60f8      	str	r0, [r7, #12]
 800461e:	60b9      	str	r1, [r7, #8]
 8004620:	603b      	str	r3, [r7, #0]
 8004622:	4613      	mov	r3, r2
 8004624:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b20      	cmp	r3, #32
 8004634:	d17c      	bne.n	8004730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_UART_Transmit+0x2c>
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e075      	b.n	8004732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_UART_Transmit+0x3e>
 8004650:	2302      	movs	r3, #2
 8004652:	e06e      	b.n	8004732 <HAL_UART_Transmit+0x11c>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2221      	movs	r2, #33	; 0x21
 8004666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466a:	f7fc fb6f 	bl	8000d4c <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004684:	d108      	bne.n	8004698 <HAL_UART_Transmit+0x82>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e003      	b.n	80046a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046a8:	e02a      	b.n	8004700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2200      	movs	r2, #0
 80046b2:	2180      	movs	r1, #128	; 0x80
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f8e2 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e036      	b.n	8004732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3302      	adds	r3, #2
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	e007      	b.n	80046f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1cf      	bne.n	80046aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2140      	movs	r1, #64	; 0x40
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f8b2 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e006      	b.n	8004732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	3720      	adds	r7, #32
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b08a      	sub	sp, #40	; 0x28
 800473e:	af02      	add	r7, sp, #8
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b20      	cmp	r3, #32
 8004758:	f040 808c 	bne.w	8004874 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_UART_Receive+0x2e>
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e084      	b.n	8004876 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_UART_Receive+0x40>
 8004776:	2302      	movs	r3, #2
 8004778:	e07d      	b.n	8004876 <HAL_UART_Receive+0x13c>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2222      	movs	r2, #34	; 0x22
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004796:	f7fc fad9 	bl	8000d4c <HAL_GetTick>
 800479a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	88fa      	ldrh	r2, [r7, #6]
 80047a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b0:	d108      	bne.n	80047c4 <HAL_UART_Receive+0x8a>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d104      	bne.n	80047c4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	e003      	b.n	80047cc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80047d4:	e043      	b.n	800485e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	9300      	str	r3, [sp, #0]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2200      	movs	r2, #0
 80047de:	2120      	movs	r1, #32
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f84c 	bl	800487e <UART_WaitOnFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e042      	b.n	8004876 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	b29a      	uxth	r2, r3
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	3302      	adds	r3, #2
 800480c:	61bb      	str	r3, [r7, #24]
 800480e:	e01f      	b.n	8004850 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004818:	d007      	beq.n	800482a <HAL_UART_Receive+0xf0>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10a      	bne.n	8004838 <HAL_UART_Receive+0xfe>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	b2da      	uxtb	r2, r3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e008      	b.n	800484a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	b2db      	uxtb	r3, r3
 8004840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004844:	b2da      	uxtb	r2, r3
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	3301      	adds	r3, #1
 800484e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1b6      	bne.n	80047d6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2220      	movs	r2, #32
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004870:	2300      	movs	r3, #0
 8004872:	e000      	b.n	8004876 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004874:	2302      	movs	r3, #2
  }
}
 8004876:	4618      	mov	r0, r3
 8004878:	3720      	adds	r7, #32
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800487e:	b580      	push	{r7, lr}
 8004880:	b090      	sub	sp, #64	; 0x40
 8004882:	af00      	add	r7, sp, #0
 8004884:	60f8      	str	r0, [r7, #12]
 8004886:	60b9      	str	r1, [r7, #8]
 8004888:	603b      	str	r3, [r7, #0]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	e050      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004896:	d04c      	beq.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489a:	2b00      	cmp	r3, #0
 800489c:	d007      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0x30>
 800489e:	f7fc fa55 	bl	8000d4c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d241      	bcs.n	8004932 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	330c      	adds	r3, #12
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	e853 3f00 	ldrex	r3, [r3]
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048ce:	637a      	str	r2, [r7, #52]	; 0x34
 80048d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e5      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	613b      	str	r3, [r7, #16]
   return(result);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f023 0301 	bic.w	r3, r3, #1
 80048f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004902:	623a      	str	r2, [r7, #32]
 8004904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	69f9      	ldr	r1, [r7, #28]
 8004908:	6a3a      	ldr	r2, [r7, #32]
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e5      	bne.n	80048e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e00f      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	4013      	ands	r3, r2
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	429a      	cmp	r2, r3
 8004940:	bf0c      	ite	eq
 8004942:	2301      	moveq	r3, #1
 8004944:	2300      	movne	r3, #0
 8004946:	b2db      	uxtb	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	429a      	cmp	r2, r3
 800494e:	d09f      	beq.n	8004890 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3740      	adds	r7, #64	; 0x40
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800495c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004960:	b0c0      	sub	sp, #256	; 0x100
 8004962:	af00      	add	r7, sp, #0
 8004964:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004978:	68d9      	ldr	r1, [r3, #12]
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	ea40 0301 	orr.w	r3, r0, r1
 8004984:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	431a      	orrs	r2, r3
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	431a      	orrs	r2, r3
 800499c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80049a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049b4:	f021 010c 	bic.w	r1, r1, #12
 80049b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80049c2:	430b      	orrs	r3, r1
 80049c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d6:	6999      	ldr	r1, [r3, #24]
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	ea40 0301 	orr.w	r3, r0, r1
 80049e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	4b8f      	ldr	r3, [pc, #572]	; (8004c28 <UART_SetConfig+0x2cc>)
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d005      	beq.n	80049fc <UART_SetConfig+0xa0>
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	4b8d      	ldr	r3, [pc, #564]	; (8004c2c <UART_SetConfig+0x2d0>)
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d104      	bne.n	8004a06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049fc:	f7ff fdaa 	bl	8004554 <HAL_RCC_GetPCLK2Freq>
 8004a00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a04:	e003      	b.n	8004a0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a06:	f7ff fd91 	bl	800452c <HAL_RCC_GetPCLK1Freq>
 8004a0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	f040 810c 	bne.w	8004c34 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a2e:	4622      	mov	r2, r4
 8004a30:	462b      	mov	r3, r5
 8004a32:	1891      	adds	r1, r2, r2
 8004a34:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a36:	415b      	adcs	r3, r3
 8004a38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a3e:	4621      	mov	r1, r4
 8004a40:	eb12 0801 	adds.w	r8, r2, r1
 8004a44:	4629      	mov	r1, r5
 8004a46:	eb43 0901 	adc.w	r9, r3, r1
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a5e:	4690      	mov	r8, r2
 8004a60:	4699      	mov	r9, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	eb18 0303 	adds.w	r3, r8, r3
 8004a68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a6c:	462b      	mov	r3, r5
 8004a6e:	eb49 0303 	adc.w	r3, r9, r3
 8004a72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	18db      	adds	r3, r3, r3
 8004a8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a90:	4613      	mov	r3, r2
 8004a92:	eb42 0303 	adc.w	r3, r2, r3
 8004a96:	657b      	str	r3, [r7, #84]	; 0x54
 8004a98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004aa0:	f7fb fb98 	bl	80001d4 <__aeabi_uldivmod>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	011c      	lsls	r4, r3, #4
 8004ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004abc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ac0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ac4:	4642      	mov	r2, r8
 8004ac6:	464b      	mov	r3, r9
 8004ac8:	1891      	adds	r1, r2, r2
 8004aca:	64b9      	str	r1, [r7, #72]	; 0x48
 8004acc:	415b      	adcs	r3, r3
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ad0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	eb12 0a01 	adds.w	sl, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0b01 	adc.w	fp, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004aec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004af4:	4692      	mov	sl, r2
 8004af6:	469b      	mov	fp, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	eb1a 0303 	adds.w	r3, sl, r3
 8004afe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b02:	464b      	mov	r3, r9
 8004b04:	eb4b 0303 	adc.w	r3, fp, r3
 8004b08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b20:	460b      	mov	r3, r1
 8004b22:	18db      	adds	r3, r3, r3
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
 8004b26:	4613      	mov	r3, r2
 8004b28:	eb42 0303 	adc.w	r3, r2, r3
 8004b2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b36:	f7fb fb4d 	bl	80001d4 <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	4b3b      	ldr	r3, [pc, #236]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004b42:	fba3 2301 	umull	r2, r3, r3, r1
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2264      	movs	r2, #100	; 0x64
 8004b4a:	fb02 f303 	mul.w	r3, r2, r3
 8004b4e:	1acb      	subs	r3, r1, r3
 8004b50:	00db      	lsls	r3, r3, #3
 8004b52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004b56:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004b58:	fba3 2302 	umull	r2, r3, r3, r2
 8004b5c:	095b      	lsrs	r3, r3, #5
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b64:	441c      	add	r4, r3
 8004b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b78:	4642      	mov	r2, r8
 8004b7a:	464b      	mov	r3, r9
 8004b7c:	1891      	adds	r1, r2, r2
 8004b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b80:	415b      	adcs	r3, r3
 8004b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b88:	4641      	mov	r1, r8
 8004b8a:	1851      	adds	r1, r2, r1
 8004b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b8e:	4649      	mov	r1, r9
 8004b90:	414b      	adcs	r3, r1
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	00cb      	lsls	r3, r1, #3
 8004ba4:	4651      	mov	r1, sl
 8004ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004baa:	4651      	mov	r1, sl
 8004bac:	00ca      	lsls	r2, r1, #3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4642      	mov	r2, r8
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	460a      	mov	r2, r1
 8004bc0:	eb42 0303 	adc.w	r3, r2, r3
 8004bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004bd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004bd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004bdc:	460b      	mov	r3, r1
 8004bde:	18db      	adds	r3, r3, r3
 8004be0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be2:	4613      	mov	r3, r2
 8004be4:	eb42 0303 	adc.w	r3, r2, r3
 8004be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004bee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004bf2:	f7fb faef 	bl	80001d4 <__aeabi_uldivmod>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8004c00:	095b      	lsrs	r3, r3, #5
 8004c02:	2164      	movs	r1, #100	; 0x64
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	3332      	adds	r3, #50	; 0x32
 8004c0e:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <UART_SetConfig+0x2d4>)
 8004c10:	fba2 2303 	umull	r2, r3, r2, r3
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	f003 0207 	and.w	r2, r3, #7
 8004c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4422      	add	r2, r4
 8004c22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c24:	e105      	b.n	8004e32 <UART_SetConfig+0x4d6>
 8004c26:	bf00      	nop
 8004c28:	40011000 	.word	0x40011000
 8004c2c:	40011400 	.word	0x40011400
 8004c30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004c3e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004c42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004c46:	4642      	mov	r2, r8
 8004c48:	464b      	mov	r3, r9
 8004c4a:	1891      	adds	r1, r2, r2
 8004c4c:	6239      	str	r1, [r7, #32]
 8004c4e:	415b      	adcs	r3, r3
 8004c50:	627b      	str	r3, [r7, #36]	; 0x24
 8004c52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c56:	4641      	mov	r1, r8
 8004c58:	1854      	adds	r4, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0501 	adc.w	r5, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	00eb      	lsls	r3, r5, #3
 8004c6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c6e:	00e2      	lsls	r2, r4, #3
 8004c70:	4614      	mov	r4, r2
 8004c72:	461d      	mov	r5, r3
 8004c74:	4643      	mov	r3, r8
 8004c76:	18e3      	adds	r3, r4, r3
 8004c78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c7c:	464b      	mov	r3, r9
 8004c7e:	eb45 0303 	adc.w	r3, r5, r3
 8004c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c92:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ca2:	4629      	mov	r1, r5
 8004ca4:	008b      	lsls	r3, r1, #2
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cac:	4621      	mov	r1, r4
 8004cae:	008a      	lsls	r2, r1, #2
 8004cb0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004cb4:	f7fb fa8e 	bl	80001d4 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4b60      	ldr	r3, [pc, #384]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	011c      	lsls	r4, r3, #4
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004cd0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004cd4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004cd8:	4642      	mov	r2, r8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	1891      	adds	r1, r2, r2
 8004cde:	61b9      	str	r1, [r7, #24]
 8004ce0:	415b      	adcs	r3, r3
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ce8:	4641      	mov	r1, r8
 8004cea:	1851      	adds	r1, r2, r1
 8004cec:	6139      	str	r1, [r7, #16]
 8004cee:	4649      	mov	r1, r9
 8004cf0:	414b      	adcs	r3, r1
 8004cf2:	617b      	str	r3, [r7, #20]
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d00:	4659      	mov	r1, fp
 8004d02:	00cb      	lsls	r3, r1, #3
 8004d04:	4651      	mov	r1, sl
 8004d06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0a:	4651      	mov	r1, sl
 8004d0c:	00ca      	lsls	r2, r1, #3
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	4642      	mov	r2, r8
 8004d16:	189b      	adds	r3, r3, r2
 8004d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	460a      	mov	r2, r1
 8004d20:	eb42 0303 	adc.w	r3, r2, r3
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d32:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004d52:	f7fb fa3f 	bl	80001d4 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b39      	ldr	r3, [pc, #228]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	; 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	3332      	adds	r3, #50	; 0x32
 8004d6e:	4a34      	ldr	r2, [pc, #208]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d7a:	441c      	add	r4, r3
 8004d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d80:	2200      	movs	r2, #0
 8004d82:	673b      	str	r3, [r7, #112]	; 0x70
 8004d84:	677a      	str	r2, [r7, #116]	; 0x74
 8004d86:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	464b      	mov	r3, r9
 8004d8e:	1891      	adds	r1, r2, r2
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	415b      	adcs	r3, r3
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d9a:	4641      	mov	r1, r8
 8004d9c:	1851      	adds	r1, r2, r1
 8004d9e:	6039      	str	r1, [r7, #0]
 8004da0:	4649      	mov	r1, r9
 8004da2:	414b      	adcs	r3, r1
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004db2:	4659      	mov	r1, fp
 8004db4:	00cb      	lsls	r3, r1, #3
 8004db6:	4651      	mov	r1, sl
 8004db8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dbc:	4651      	mov	r1, sl
 8004dbe:	00ca      	lsls	r2, r1, #3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	189b      	adds	r3, r3, r2
 8004dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dcc:	464b      	mov	r3, r9
 8004dce:	460a      	mov	r2, r1
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	663b      	str	r3, [r7, #96]	; 0x60
 8004de0:	667a      	str	r2, [r7, #100]	; 0x64
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004dee:	4649      	mov	r1, r9
 8004df0:	008b      	lsls	r3, r1, #2
 8004df2:	4641      	mov	r1, r8
 8004df4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004df8:	4641      	mov	r1, r8
 8004dfa:	008a      	lsls	r2, r1, #2
 8004dfc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e00:	f7fb f9e8 	bl	80001d4 <__aeabi_uldivmod>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4b0d      	ldr	r3, [pc, #52]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004e0a:	fba3 1302 	umull	r1, r3, r3, r2
 8004e0e:	095b      	lsrs	r3, r3, #5
 8004e10:	2164      	movs	r1, #100	; 0x64
 8004e12:	fb01 f303 	mul.w	r3, r1, r3
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	3332      	adds	r3, #50	; 0x32
 8004e1c:	4a08      	ldr	r2, [pc, #32]	; (8004e40 <UART_SetConfig+0x4e4>)
 8004e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e22:	095b      	lsrs	r3, r3, #5
 8004e24:	f003 020f 	and.w	r2, r3, #15
 8004e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4422      	add	r2, r4
 8004e30:	609a      	str	r2, [r3, #8]
}
 8004e32:	bf00      	nop
 8004e34:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3e:	bf00      	nop
 8004e40:	51eb851f 	.word	0x51eb851f

08004e44 <atoi>:
 8004e44:	220a      	movs	r2, #10
 8004e46:	2100      	movs	r1, #0
 8004e48:	f000 b8b4 	b.w	8004fb4 <strtol>

08004e4c <__errno>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <__errno+0x8>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000010 	.word	0x20000010

08004e58 <__libc_init_array>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	4d0d      	ldr	r5, [pc, #52]	; (8004e90 <__libc_init_array+0x38>)
 8004e5c:	4c0d      	ldr	r4, [pc, #52]	; (8004e94 <__libc_init_array+0x3c>)
 8004e5e:	1b64      	subs	r4, r4, r5
 8004e60:	10a4      	asrs	r4, r4, #2
 8004e62:	2600      	movs	r6, #0
 8004e64:	42a6      	cmp	r6, r4
 8004e66:	d109      	bne.n	8004e7c <__libc_init_array+0x24>
 8004e68:	4d0b      	ldr	r5, [pc, #44]	; (8004e98 <__libc_init_array+0x40>)
 8004e6a:	4c0c      	ldr	r4, [pc, #48]	; (8004e9c <__libc_init_array+0x44>)
 8004e6c:	f000 f8ac 	bl	8004fc8 <_init>
 8004e70:	1b64      	subs	r4, r4, r5
 8004e72:	10a4      	asrs	r4, r4, #2
 8004e74:	2600      	movs	r6, #0
 8004e76:	42a6      	cmp	r6, r4
 8004e78:	d105      	bne.n	8004e86 <__libc_init_array+0x2e>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e80:	4798      	blx	r3
 8004e82:	3601      	adds	r6, #1
 8004e84:	e7ee      	b.n	8004e64 <__libc_init_array+0xc>
 8004e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8a:	4798      	blx	r3
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	e7f2      	b.n	8004e76 <__libc_init_array+0x1e>
 8004e90:	08005194 	.word	0x08005194
 8004e94:	08005194 	.word	0x08005194
 8004e98:	08005194 	.word	0x08005194
 8004e9c:	08005198 	.word	0x08005198

08004ea0 <memset>:
 8004ea0:	4402      	add	r2, r0
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d100      	bne.n	8004eaa <memset+0xa>
 8004ea8:	4770      	bx	lr
 8004eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8004eae:	e7f9      	b.n	8004ea4 <memset+0x4>

08004eb0 <_strtol_l.constprop.0>:
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb6:	d001      	beq.n	8004ebc <_strtol_l.constprop.0+0xc>
 8004eb8:	2b24      	cmp	r3, #36	; 0x24
 8004eba:	d906      	bls.n	8004eca <_strtol_l.constprop.0+0x1a>
 8004ebc:	f7ff ffc6 	bl	8004e4c <__errno>
 8004ec0:	2316      	movs	r3, #22
 8004ec2:	6003      	str	r3, [r0, #0]
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004fb0 <_strtol_l.constprop.0+0x100>
 8004ece:	460d      	mov	r5, r1
 8004ed0:	462e      	mov	r6, r5
 8004ed2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ed6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004eda:	f017 0708 	ands.w	r7, r7, #8
 8004ede:	d1f7      	bne.n	8004ed0 <_strtol_l.constprop.0+0x20>
 8004ee0:	2c2d      	cmp	r4, #45	; 0x2d
 8004ee2:	d132      	bne.n	8004f4a <_strtol_l.constprop.0+0x9a>
 8004ee4:	782c      	ldrb	r4, [r5, #0]
 8004ee6:	2701      	movs	r7, #1
 8004ee8:	1cb5      	adds	r5, r6, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d05b      	beq.n	8004fa6 <_strtol_l.constprop.0+0xf6>
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d109      	bne.n	8004f06 <_strtol_l.constprop.0+0x56>
 8004ef2:	2c30      	cmp	r4, #48	; 0x30
 8004ef4:	d107      	bne.n	8004f06 <_strtol_l.constprop.0+0x56>
 8004ef6:	782c      	ldrb	r4, [r5, #0]
 8004ef8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004efc:	2c58      	cmp	r4, #88	; 0x58
 8004efe:	d14d      	bne.n	8004f9c <_strtol_l.constprop.0+0xec>
 8004f00:	786c      	ldrb	r4, [r5, #1]
 8004f02:	2310      	movs	r3, #16
 8004f04:	3502      	adds	r5, #2
 8004f06:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f0e:	f04f 0c00 	mov.w	ip, #0
 8004f12:	fbb8 f9f3 	udiv	r9, r8, r3
 8004f16:	4666      	mov	r6, ip
 8004f18:	fb03 8a19 	mls	sl, r3, r9, r8
 8004f1c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004f20:	f1be 0f09 	cmp.w	lr, #9
 8004f24:	d816      	bhi.n	8004f54 <_strtol_l.constprop.0+0xa4>
 8004f26:	4674      	mov	r4, lr
 8004f28:	42a3      	cmp	r3, r4
 8004f2a:	dd24      	ble.n	8004f76 <_strtol_l.constprop.0+0xc6>
 8004f2c:	f1bc 0f00 	cmp.w	ip, #0
 8004f30:	db1e      	blt.n	8004f70 <_strtol_l.constprop.0+0xc0>
 8004f32:	45b1      	cmp	r9, r6
 8004f34:	d31c      	bcc.n	8004f70 <_strtol_l.constprop.0+0xc0>
 8004f36:	d101      	bne.n	8004f3c <_strtol_l.constprop.0+0x8c>
 8004f38:	45a2      	cmp	sl, r4
 8004f3a:	db19      	blt.n	8004f70 <_strtol_l.constprop.0+0xc0>
 8004f3c:	fb06 4603 	mla	r6, r6, r3, r4
 8004f40:	f04f 0c01 	mov.w	ip, #1
 8004f44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004f48:	e7e8      	b.n	8004f1c <_strtol_l.constprop.0+0x6c>
 8004f4a:	2c2b      	cmp	r4, #43	; 0x2b
 8004f4c:	bf04      	itt	eq
 8004f4e:	782c      	ldrbeq	r4, [r5, #0]
 8004f50:	1cb5      	addeq	r5, r6, #2
 8004f52:	e7ca      	b.n	8004eea <_strtol_l.constprop.0+0x3a>
 8004f54:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004f58:	f1be 0f19 	cmp.w	lr, #25
 8004f5c:	d801      	bhi.n	8004f62 <_strtol_l.constprop.0+0xb2>
 8004f5e:	3c37      	subs	r4, #55	; 0x37
 8004f60:	e7e2      	b.n	8004f28 <_strtol_l.constprop.0+0x78>
 8004f62:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004f66:	f1be 0f19 	cmp.w	lr, #25
 8004f6a:	d804      	bhi.n	8004f76 <_strtol_l.constprop.0+0xc6>
 8004f6c:	3c57      	subs	r4, #87	; 0x57
 8004f6e:	e7db      	b.n	8004f28 <_strtol_l.constprop.0+0x78>
 8004f70:	f04f 3cff 	mov.w	ip, #4294967295
 8004f74:	e7e6      	b.n	8004f44 <_strtol_l.constprop.0+0x94>
 8004f76:	f1bc 0f00 	cmp.w	ip, #0
 8004f7a:	da05      	bge.n	8004f88 <_strtol_l.constprop.0+0xd8>
 8004f7c:	2322      	movs	r3, #34	; 0x22
 8004f7e:	6003      	str	r3, [r0, #0]
 8004f80:	4646      	mov	r6, r8
 8004f82:	b942      	cbnz	r2, 8004f96 <_strtol_l.constprop.0+0xe6>
 8004f84:	4630      	mov	r0, r6
 8004f86:	e79e      	b.n	8004ec6 <_strtol_l.constprop.0+0x16>
 8004f88:	b107      	cbz	r7, 8004f8c <_strtol_l.constprop.0+0xdc>
 8004f8a:	4276      	negs	r6, r6
 8004f8c:	2a00      	cmp	r2, #0
 8004f8e:	d0f9      	beq.n	8004f84 <_strtol_l.constprop.0+0xd4>
 8004f90:	f1bc 0f00 	cmp.w	ip, #0
 8004f94:	d000      	beq.n	8004f98 <_strtol_l.constprop.0+0xe8>
 8004f96:	1e69      	subs	r1, r5, #1
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	e7f3      	b.n	8004f84 <_strtol_l.constprop.0+0xd4>
 8004f9c:	2430      	movs	r4, #48	; 0x30
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1b1      	bne.n	8004f06 <_strtol_l.constprop.0+0x56>
 8004fa2:	2308      	movs	r3, #8
 8004fa4:	e7af      	b.n	8004f06 <_strtol_l.constprop.0+0x56>
 8004fa6:	2c30      	cmp	r4, #48	; 0x30
 8004fa8:	d0a5      	beq.n	8004ef6 <_strtol_l.constprop.0+0x46>
 8004faa:	230a      	movs	r3, #10
 8004fac:	e7ab      	b.n	8004f06 <_strtol_l.constprop.0+0x56>
 8004fae:	bf00      	nop
 8004fb0:	08005089 	.word	0x08005089

08004fb4 <strtol>:
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	4601      	mov	r1, r0
 8004fba:	4802      	ldr	r0, [pc, #8]	; (8004fc4 <strtol+0x10>)
 8004fbc:	6800      	ldr	r0, [r0, #0]
 8004fbe:	f7ff bf77 	b.w	8004eb0 <_strtol_l.constprop.0>
 8004fc2:	bf00      	nop
 8004fc4:	20000010 	.word	0x20000010

08004fc8 <_init>:
 8004fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fca:	bf00      	nop
 8004fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fce:	bc08      	pop	{r3}
 8004fd0:	469e      	mov	lr, r3
 8004fd2:	4770      	bx	lr

08004fd4 <_fini>:
 8004fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd6:	bf00      	nop
 8004fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fda:	bc08      	pop	{r3}
 8004fdc:	469e      	mov	lr, r3
 8004fde:	4770      	bx	lr
