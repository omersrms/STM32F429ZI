
ethernet-lwip-freertos-http.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003780  0800fdbc  0800fdbc  0001fdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801353c  0801353c  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801353c  0801353c  0002353c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013544  08013544  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013544  08013544  00023544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013548  08013548  00023548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801354c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000108b8  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010948  20010948  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004bffa  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009af8  00000000  00000000  0007c0ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00031df1  00000000  00000000  00085bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002548  00000000  00000000  000b79a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003388  00000000  00000000  000b9ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000137e6  00000000  00000000  000bd278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c842  00000000  00000000  000d0a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103f0b  00000000  00000000  0011d2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002211ab  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000077b8  00000000  00000000  002211fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800fda4 	.word	0x0800fda4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	0800fda4 	.word	0x0800fda4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <http_thread>:
	netbuf_delete(inbuf);
}


static void http_thread(void *arg)
{ 
 80005b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005b8:	b08c      	sub	sp, #48	; 0x30
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80005ba:	2200      	movs	r2, #0
 80005bc:	4611      	mov	r1, r2
 80005be:	2010      	movs	r0, #16
 80005c0:	f005 fc70 	bl	8005ea4 <netconn_new_with_proto_and_callback>
  
  if (conn!= NULL)
 80005c4:	b128      	cbz	r0, 80005d2 <http_thread+0x1e>
 80005c6:	4605      	mov	r5, r0
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, IP_ADDR_ANY, 80);
 80005c8:	2250      	movs	r2, #80	; 0x50
 80005ca:	492a      	ldr	r1, [pc, #168]	; (8000674 <http_thread+0xc0>)
 80005cc:	f005 fce8 	bl	8005fa0 <netconn_bind>
    
    if (err == ERR_OK)
 80005d0:	b110      	cbz	r0, 80005d8 <http_thread+0x24>
          netconn_delete(newconn);
        }
      }
    }
  }
}
 80005d2:	b00c      	add	sp, #48	; 0x30
 80005d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netconn_listen(conn);
 80005d8:	21ff      	movs	r1, #255	; 0xff
 80005da:	4628      	mov	r0, r5
 80005dc:	f005 fd08 	bl	8005ff0 <netconn_listen_with_backlog>
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 80005e0:	4e25      	ldr	r6, [pc, #148]	; (8000678 <http_thread+0xc4>)
				fs_open(&file, "/404.html");
 80005e2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8000680 <http_thread+0xcc>
				fs_open(&file, "/index.html");
 80005e6:	4f25      	ldr	r7, [pc, #148]	; (800067c <http_thread+0xc8>)
 80005e8:	e016      	b.n	8000618 <http_thread+0x64>
				fs_open(&file, "/404.html");
 80005ea:	4641      	mov	r1, r8
 80005ec:	a806      	add	r0, sp, #24
 80005ee:	f007 f95b 	bl	80078a8 <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80005f2:	2300      	movs	r3, #0
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	9a07      	ldr	r2, [sp, #28]
 80005f8:	9906      	ldr	r1, [sp, #24]
 80005fa:	4620      	mov	r0, r4
 80005fc:	f005 fdaa 	bl	8006154 <netconn_write_partly>
				fs_close(&file);
 8000600:	a806      	add	r0, sp, #24
 8000602:	f007 f973 	bl	80078ec <fs_close>
	netconn_close(conn);
 8000606:	4620      	mov	r0, r4
 8000608:	f005 fdb1 	bl	800616e <netconn_close>
	netbuf_delete(inbuf);
 800060c:	9804      	ldr	r0, [sp, #16]
 800060e:	f006 ffcd 	bl	80075ac <netbuf_delete>
          netconn_delete(newconn);
 8000612:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000614:	f005 fcb4 	bl	8005f80 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000618:	a90b      	add	r1, sp, #44	; 0x2c
 800061a:	4628      	mov	r0, r5
 800061c:	f005 fdbc 	bl	8006198 <netconn_accept>
        if(accept_err == ERR_OK)
 8000620:	2800      	cmp	r0, #0
 8000622:	d1f9      	bne.n	8000618 <http_thread+0x64>
          http_server(newconn);
 8000624:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	recv_err = netconn_recv(conn, &inbuf);
 8000626:	a904      	add	r1, sp, #16
 8000628:	4620      	mov	r0, r4
 800062a:	f005 fef5 	bl	8006418 <netconn_recv>
	if (recv_err == ERR_OK)
 800062e:	2800      	cmp	r0, #0
 8000630:	d1e9      	bne.n	8000606 <http_thread+0x52>
		if (netconn_err(conn) == ERR_OK)
 8000632:	4620      	mov	r0, r4
 8000634:	f005 fda0 	bl	8006178 <netconn_err>
 8000638:	2800      	cmp	r0, #0
 800063a:	d1e4      	bne.n	8000606 <http_thread+0x52>
			netbuf_data(inbuf, (void**)&buf, &buflen);
 800063c:	f10d 020e 	add.w	r2, sp, #14
 8000640:	a905      	add	r1, sp, #20
 8000642:	9804      	ldr	r0, [sp, #16]
 8000644:	f006 ffc2 	bl	80075cc <netbuf_data>
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 8000648:	220f      	movs	r2, #15
 800064a:	4631      	mov	r1, r6
 800064c:	9805      	ldr	r0, [sp, #20]
 800064e:	f00e fd7c 	bl	800f14a <strncmp>
 8000652:	2800      	cmp	r0, #0
 8000654:	d1c9      	bne.n	80005ea <http_thread+0x36>
				fs_open(&file, "/index.html");
 8000656:	4639      	mov	r1, r7
 8000658:	a806      	add	r0, sp, #24
 800065a:	f007 f925 	bl	80078a8 <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800065e:	2300      	movs	r3, #0
 8000660:	9300      	str	r3, [sp, #0]
 8000662:	9a07      	ldr	r2, [sp, #28]
 8000664:	9906      	ldr	r1, [sp, #24]
 8000666:	4620      	mov	r0, r4
 8000668:	f005 fd74 	bl	8006154 <netconn_write_partly>
				fs_close(&file);
 800066c:	a806      	add	r0, sp, #24
 800066e:	f007 f93d 	bl	80078ec <fs_close>
 8000672:	e7c8      	b.n	8000606 <http_thread+0x52>
 8000674:	080131e4 	.word	0x080131e4
 8000678:	0800fdbc 	.word	0x0800fdbc
 800067c:	0800fdc0 	.word	0x0800fdc0
 8000680:	0800fdcc 	.word	0x0800fdcc

08000684 <http_server_init>:


void http_server_init()
{
 8000684:	b500      	push	{lr}
 8000686:	b083      	sub	sp, #12
  sys_thread_new("http_thread", http_thread, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000688:	2318      	movs	r3, #24
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000690:	2200      	movs	r2, #0
 8000692:	4903      	ldr	r1, [pc, #12]	; (80006a0 <http_server_init+0x1c>)
 8000694:	4803      	ldr	r0, [pc, #12]	; (80006a4 <http_server_init+0x20>)
 8000696:	f00e fa42 	bl	800eb1e <sys_thread_new>
}
 800069a:	b003      	add	sp, #12
 800069c:	f85d fb04 	ldr.w	pc, [sp], #4
 80006a0:	080005b5 	.word	0x080005b5
 80006a4:	0800fdd8 	.word	0x0800fdd8

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 80006aa:	f002 fc2b 	bl	8002f04 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

  http_server_init();
 80006ae:	f7ff ffe9 	bl	8000684 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b2:	2401      	movs	r4, #1
 80006b4:	4620      	mov	r0, r4
 80006b6:	f003 f85f 	bl	8003778 <osDelay>
  for(;;)
 80006ba:	e7fb      	b.n	80006b4 <StartDefaultTask+0xc>

080006bc <SystemClock_Config>:
{
 80006bc:	b500      	push	{lr}
 80006be:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c0:	2230      	movs	r2, #48	; 0x30
 80006c2:	2100      	movs	r1, #0
 80006c4:	a808      	add	r0, sp, #32
 80006c6:	f00e fb90 	bl	800edea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	2300      	movs	r3, #0
 80006cc:	9303      	str	r3, [sp, #12]
 80006ce:	9304      	str	r3, [sp, #16]
 80006d0:	9305      	str	r3, [sp, #20]
 80006d2:	9306      	str	r3, [sp, #24]
 80006d4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	4a20      	ldr	r2, [pc, #128]	; (800075c <SystemClock_Config+0xa0>)
 80006da:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80006dc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80006e0:	6411      	str	r1, [r2, #64]	; 0x40
 80006e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80006e4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80006e8:	9201      	str	r2, [sp, #4]
 80006ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ec:	9302      	str	r3, [sp, #8]
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <SystemClock_Config+0xa4>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fe:	9302      	str	r3, [sp, #8]
 8000700:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000702:	2301      	movs	r3, #1
 8000704:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000706:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800070a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000710:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000714:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000716:	2204      	movs	r2, #4
 8000718:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800071a:	22a8      	movs	r2, #168	; 0xa8
 800071c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000720:	2307      	movs	r3, #7
 8000722:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	a808      	add	r0, sp, #32
 8000726:	f001 fc4f 	bl	8001fc8 <HAL_RCC_OscConfig>
 800072a:	b998      	cbnz	r0, 8000754 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072c:	230f      	movs	r3, #15
 800072e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000730:	2302      	movs	r3, #2
 8000732:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000738:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000744:	2105      	movs	r1, #5
 8000746:	a803      	add	r0, sp, #12
 8000748:	f001 fea4 	bl	8002494 <HAL_RCC_ClockConfig>
 800074c:	b920      	cbnz	r0, 8000758 <SystemClock_Config+0x9c>
}
 800074e:	b015      	add	sp, #84	; 0x54
 8000750:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000756:	e7fe      	b.n	8000756 <SystemClock_Config+0x9a>
 8000758:	b672      	cpsid	i
 800075a:	e7fe      	b.n	800075a <SystemClock_Config+0x9e>
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <main>:
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000768:	f000 fb4e 	bl	8000e08 <HAL_Init>
  SystemClock_Config();
 800076c:	f7ff ffa6 	bl	80006bc <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	2400      	movs	r4, #0
 8000772:	9407      	str	r4, [sp, #28]
 8000774:	9408      	str	r4, [sp, #32]
 8000776:	9409      	str	r4, [sp, #36]	; 0x24
 8000778:	940a      	str	r4, [sp, #40]	; 0x28
 800077a:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077c:	9401      	str	r4, [sp, #4]
 800077e:	4b52      	ldr	r3, [pc, #328]	; (80008c8 <main+0x164>)
 8000780:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000782:	f042 0204 	orr.w	r2, r2, #4
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
 8000788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800078a:	f002 0204 	and.w	r2, r2, #4
 800078e:	9201      	str	r2, [sp, #4]
 8000790:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	9402      	str	r4, [sp, #8]
 8000794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000796:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
 800079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800079e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80007a2:	9202      	str	r2, [sp, #8]
 80007a4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	9403      	str	r4, [sp, #12]
 80007a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007aa:	f042 0201 	orr.w	r2, r2, #1
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
 80007b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007b2:	f002 0201 	and.w	r2, r2, #1
 80007b6:	9203      	str	r2, [sp, #12]
 80007b8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	9404      	str	r4, [sp, #16]
 80007bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007be:	f042 0202 	orr.w	r2, r2, #2
 80007c2:	631a      	str	r2, [r3, #48]	; 0x30
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	f002 0202 	and.w	r2, r2, #2
 80007ca:	9204      	str	r2, [sp, #16]
 80007cc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	9405      	str	r4, [sp, #20]
 80007d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d2:	f042 0208 	orr.w	r2, r2, #8
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
 80007d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007da:	f002 0208 	and.w	r2, r2, #8
 80007de:	9205      	str	r2, [sp, #20]
 80007e0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007e2:	9406      	str	r4, [sp, #24]
 80007e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007ea:	631a      	str	r2, [r3, #48]	; 0x30
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f2:	9306      	str	r3, [sp, #24]
 80007f4:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007f6:	4f35      	ldr	r7, [pc, #212]	; (80008cc <main+0x168>)
 80007f8:	4622      	mov	r2, r4
 80007fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80007fe:	4638      	mov	r0, r7
 8000800:	f001 fb44 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000804:	4d32      	ldr	r5, [pc, #200]	; (80008d0 <main+0x16c>)
 8000806:	4622      	mov	r2, r4
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4628      	mov	r0, r5
 800080c:	f001 fb3e 	bl	8001e8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800081e:	a907      	add	r1, sp, #28
 8000820:	482c      	ldr	r0, [pc, #176]	; (80008d4 <main+0x170>)
 8000822:	f001 fa1f 	bl	8001c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000826:	f244 0381 	movw	r3, #16513	; 0x4081
 800082a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2601      	movs	r6, #1
 800082e:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000834:	a907      	add	r1, sp, #28
 8000836:	4638      	mov	r0, r7
 8000838:	f001 fa14 	bl	8001c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800083c:	2340      	movs	r3, #64	; 0x40
 800083e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000844:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000846:	a907      	add	r1, sp, #28
 8000848:	4628      	mov	r0, r5
 800084a:	f001 fa0b 	bl	8001c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800084e:	2380      	movs	r3, #128	; 0x80
 8000850:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000856:	a907      	add	r1, sp, #28
 8000858:	4628      	mov	r0, r5
 800085a:	f001 fa03 	bl	8001c64 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800085e:	481e      	ldr	r0, [pc, #120]	; (80008d8 <main+0x174>)
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <main+0x178>)
 8000862:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000864:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000868:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800086c:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800086e:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000870:	230c      	movs	r3, #12
 8000872:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000874:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000876:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000878:	f002 f93e 	bl	8002af8 <HAL_UART_Init>
 800087c:	b9f8      	cbnz	r0, 80008be <main+0x15a>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800087e:	4818      	ldr	r0, [pc, #96]	; (80008e0 <main+0x17c>)
 8000880:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000884:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000886:	2304      	movs	r3, #4
 8000888:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800088a:	2202      	movs	r2, #2
 800088c:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800088e:	2300      	movs	r3, #0
 8000890:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000892:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000894:	2201      	movs	r2, #1
 8000896:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000898:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800089a:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800089c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800089e:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008a0:	f001 fafa 	bl	8001e98 <HAL_PCD_Init>
 80008a4:	b968      	cbnz	r0, 80008c2 <main+0x15e>
  osKernelInitialize();
 80008a6:	f002 fee3 	bl	8003670 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <main+0x180>)
 80008ac:	2100      	movs	r1, #0
 80008ae:	480e      	ldr	r0, [pc, #56]	; (80008e8 <main+0x184>)
 80008b0:	f002 ff16 	bl	80036e0 <osThreadNew>
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <main+0x188>)
 80008b6:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80008b8:	f002 feec 	bl	8003694 <osKernelStart>
  while (1)
 80008bc:	e7fe      	b.n	80008bc <main+0x158>
 80008be:	b672      	cpsid	i
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0x15c>
 80008c2:	b672      	cpsid	i
 80008c4:	e7fe      	b.n	80008c4 <main+0x160>
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40021800 	.word	0x40021800
 80008d4:	40020800 	.word	0x40020800
 80008d8:	200005bc 	.word	0x200005bc
 80008dc:	40004800 	.word	0x40004800
 80008e0:	200000b0 	.word	0x200000b0
 80008e4:	0800fdf0 	.word	0x0800fdf0
 80008e8:	080006a9 	.word	0x080006a9
 80008ec:	200000ac 	.word	0x200000ac

080008f0 <HAL_TIM_PeriodElapsedCallback>:
{
 80008f0:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 80008f2:	6802      	ldr	r2, [r0, #0]
 80008f4:	4b03      	ldr	r3, [pc, #12]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d000      	beq.n	80008fc <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80008fa:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80008fc:	f000 fa9e 	bl	8000e3c <HAL_IncTick>
}
 8000900:	e7fb      	b.n	80008fa <HAL_TIM_PeriodElapsedCallback+0xa>
 8000902:	bf00      	nop
 8000904:	40001000 	.word	0x40001000

08000908 <Error_Handler>:
 8000908:	b672      	cpsid	i
  while (1)
 800090a:	e7fe      	b.n	800090a <Error_Handler+0x2>

0800090c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800090c:	b500      	push	{lr}
 800090e:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000910:	2200      	movs	r2, #0
 8000912:	9200      	str	r2, [sp, #0]
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x40>)
 8000916:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000918:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800091c:	6459      	str	r1, [r3, #68]	; 0x44
 800091e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000920:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000924:	9100      	str	r1, [sp, #0]
 8000926:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	9201      	str	r2, [sp, #4]
 800092a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800092c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000930:	6419      	str	r1, [r3, #64]	; 0x40
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000938:	9301      	str	r3, [sp, #4]
 800093a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800093c:	210f      	movs	r1, #15
 800093e:	f06f 0001 	mvn.w	r0, #1
 8000942:	f000 fab3 	bl	8000eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	b003      	add	sp, #12
 8000948:	f85d fb04 	ldr.w	pc, [sp], #4
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b500      	push	{lr}
 8000952:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	2300      	movs	r3, #0
 8000956:	9303      	str	r3, [sp, #12]
 8000958:	9304      	str	r3, [sp, #16]
 800095a:	9305      	str	r3, [sp, #20]
 800095c:	9306      	str	r3, [sp, #24]
 800095e:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000960:	6802      	ldr	r2, [r0, #0]
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0x68>)
 8000964:	429a      	cmp	r2, r3
 8000966:	d002      	beq.n	800096e <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000968:	b009      	add	sp, #36	; 0x24
 800096a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800096e:	2100      	movs	r1, #0
 8000970:	9101      	str	r1, [sp, #4]
 8000972:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000978:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800097c:	641a      	str	r2, [r3, #64]	; 0x40
 800097e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000980:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000988:	9102      	str	r1, [sp, #8]
 800098a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800098c:	f042 0208 	orr.w	r2, r2, #8
 8000990:	631a      	str	r2, [r3, #48]	; 0x30
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	f003 0308 	and.w	r3, r3, #8
 8000998:	9302      	str	r3, [sp, #8]
 800099a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800099c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009a0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009aa:	2307      	movs	r3, #7
 80009ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	a903      	add	r1, sp, #12
 80009b0:	4802      	ldr	r0, [pc, #8]	; (80009bc <HAL_UART_MspInit+0x6c>)
 80009b2:	f001 f957 	bl	8001c64 <HAL_GPIO_Init>
}
 80009b6:	e7d7      	b.n	8000968 <HAL_UART_MspInit+0x18>
 80009b8:	40004800 	.word	0x40004800
 80009bc:	40020c00 	.word	0x40020c00

080009c0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	2300      	movs	r3, #0
 80009c6:	9303      	str	r3, [sp, #12]
 80009c8:	9304      	str	r3, [sp, #16]
 80009ca:	9305      	str	r3, [sp, #20]
 80009cc:	9306      	str	r3, [sp, #24]
 80009ce:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 80009d0:	6803      	ldr	r3, [r0, #0]
 80009d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009d6:	d001      	beq.n	80009dc <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80009d8:	b008      	add	sp, #32
 80009da:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	2500      	movs	r5, #0
 80009de:	9501      	str	r5, [sp, #4]
 80009e0:	4c17      	ldr	r4, [pc, #92]	; (8000a40 <HAL_PCD_MspInit+0x80>)
 80009e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6323      	str	r3, [r4, #48]	; 0x30
 80009ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	9301      	str	r3, [sp, #4]
 80009f2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009f4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a02:	230a      	movs	r3, #10
 8000a04:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	4e0f      	ldr	r6, [pc, #60]	; (8000a44 <HAL_PCD_MspInit+0x84>)
 8000a08:	a903      	add	r1, sp, #12
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	f001 f92a 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a14:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	a903      	add	r1, sp, #12
 8000a1c:	4630      	mov	r0, r6
 8000a1e:	f001 f921 	bl	8001c64 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	6363      	str	r3, [r4, #52]	; 0x34
 8000a2a:	9502      	str	r5, [sp, #8]
 8000a2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a32:	6463      	str	r3, [r4, #68]	; 0x44
 8000a34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	9b02      	ldr	r3, [sp, #8]
}
 8000a3e:	e7cb      	b.n	80009d8 <HAL_PCD_MspInit+0x18>
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b530      	push	{r4, r5, lr}
 8000a4a:	b089      	sub	sp, #36	; 0x24
 8000a4c:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	9301      	str	r3, [sp, #4]
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <HAL_InitTick+0x90>)
 8000a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a56:	f042 0210 	orr.w	r2, r2, #16
 8000a5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f003 0310 	and.w	r3, r3, #16
 8000a62:	9301      	str	r3, [sp, #4]
 8000a64:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a66:	a902      	add	r1, sp, #8
 8000a68:	a803      	add	r0, sp, #12
 8000a6a:	f001 fdeb 	bl	8002644 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a6e:	9b06      	ldr	r3, [sp, #24]
 8000a70:	b9cb      	cbnz	r3, 8000aa6 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a72:	f001 fdc7 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8000a76:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a78:	4818      	ldr	r0, [pc, #96]	; (8000adc <HAL_InitTick+0x94>)
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_InitTick+0x98>)
 8000a7c:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a82:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a84:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <HAL_InitTick+0x9c>)
 8000a86:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8a:	0c9b      	lsrs	r3, r3, #18
 8000a8c:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a8e:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a94:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a98:	f001 ff7e 	bl	8002998 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	b130      	cbz	r0, 8000aae <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8000aa0:	4628      	mov	r0, r5
 8000aa2:	b009      	add	sp, #36	; 0x24
 8000aa4:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000aa6:	f001 fdad 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8000aaa:	0043      	lsls	r3, r0, #1
 8000aac:	e7e4      	b.n	8000a78 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <HAL_InitTick+0x94>)
 8000ab0:	f001 fde8 	bl	8002684 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	d1f2      	bne.n	8000aa0 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aba:	2036      	movs	r0, #54	; 0x36
 8000abc:	f000 fa2c 	bl	8000f18 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac0:	2c0f      	cmp	r4, #15
 8000ac2:	d901      	bls.n	8000ac8 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	e7eb      	b.n	8000aa0 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	4621      	mov	r1, r4
 8000acc:	2036      	movs	r0, #54	; 0x36
 8000ace:	f000 f9ed 	bl	8000eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad2:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_InitTick+0xa0>)
 8000ad4:	601c      	str	r4, [r3, #0]
 8000ad6:	e7e3      	b.n	8000aa0 <HAL_InitTick+0x58>
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	20000600 	.word	0x20000600
 8000ae0:	40001000 	.word	0x40001000
 8000ae4:	431bde83 	.word	0x431bde83
 8000ae8:	20000008 	.word	0x20000008

08000aec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler>

08000aee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler>

08000af0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler>

08000af2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler>

08000af4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler>

08000af6 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af6:	4770      	bx	lr

08000af8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000afa:	4802      	ldr	r0, [pc, #8]	; (8000b04 <TIM6_DAC_IRQHandler+0xc>)
 8000afc:	f001 fe0a 	bl	8002714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b00:	bd08      	pop	{r3, pc}
 8000b02:	bf00      	nop
 8000b04:	20000600 	.word	0x20000600

08000b08 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b0a:	4802      	ldr	r0, [pc, #8]	; (8000b14 <ETH_IRQHandler+0xc>)
 8000b0c:	f000 ff14 	bl	8001938 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b10:	bd08      	pop	{r3, pc}
 8000b12:	bf00      	nop
 8000b14:	20000864 	.word	0x20000864

08000b18 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000b18:	2001      	movs	r0, #1
 8000b1a:	4770      	bx	lr

08000b1c <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <_kill+0xc>)
 8000b1e:	2216      	movs	r2, #22
 8000b20:	601a      	str	r2, [r3, #0]
	return -1;
}
 8000b22:	f04f 30ff 	mov.w	r0, #4294967295
 8000b26:	4770      	bx	lr
 8000b28:	20010944 	.word	0x20010944

08000b2c <_exit>:
	errno = EINVAL;
 8000b2c:	4b01      	ldr	r3, [pc, #4]	; (8000b34 <_exit+0x8>)
 8000b2e:	2216      	movs	r2, #22
 8000b30:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000b32:	e7fe      	b.n	8000b32 <_exit+0x6>
 8000b34:	20010944 	.word	0x20010944

08000b38 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b38:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	1e16      	subs	r6, r2, #0
 8000b3c:	dd07      	ble.n	8000b4e <_read+0x16>
 8000b3e:	460c      	mov	r4, r1
 8000b40:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000b42:	f3af 8000 	nop.w
 8000b46:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	42a5      	cmp	r5, r4
 8000b4c:	d1f9      	bne.n	8000b42 <_read+0xa>
	}

return len;
}
 8000b4e:	4630      	mov	r0, r6
 8000b50:	bd70      	pop	{r4, r5, r6, pc}

08000b52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b52:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b54:	1e16      	subs	r6, r2, #0
 8000b56:	dd07      	ble.n	8000b68 <_write+0x16>
 8000b58:	460c      	mov	r4, r1
 8000b5a:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000b5c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000b60:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b64:	42a5      	cmp	r5, r4
 8000b66:	d1f9      	bne.n	8000b5c <_write+0xa>
	}
	return len;
}
 8000b68:	4630      	mov	r0, r6
 8000b6a:	bd70      	pop	{r4, r5, r6, pc}

08000b6c <_close>:

int _close(int file)
{
	return -1;
}
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	4770      	bx	lr

08000b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000b78:	2000      	movs	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000b80:	2000      	movs	r0, #0
 8000b82:	4770      	bx	lr

08000b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b84:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b86:	4a0c      	ldr	r2, [pc, #48]	; (8000bb8 <_sbrk+0x34>)
 8000b88:	6812      	ldr	r2, [r2, #0]
 8000b8a:	b152      	cbz	r2, 8000ba2 <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <_sbrk+0x34>)
 8000b8e:	6810      	ldr	r0, [r2, #0]
 8000b90:	4403      	add	r3, r0
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <_sbrk+0x38>)
 8000b94:	490a      	ldr	r1, [pc, #40]	; (8000bc0 <_sbrk+0x3c>)
 8000b96:	1a52      	subs	r2, r2, r1
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d806      	bhi.n	8000baa <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <_sbrk+0x34>)
 8000b9e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ba0:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <_sbrk+0x34>)
 8000ba4:	4907      	ldr	r1, [pc, #28]	; (8000bc4 <_sbrk+0x40>)
 8000ba6:	6011      	str	r1, [r2, #0]
 8000ba8:	e7f0      	b.n	8000b8c <_sbrk+0x8>
    errno = ENOMEM;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x44>)
 8000bac:	220c      	movs	r2, #12
 8000bae:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000648 	.word	0x20000648
 8000bbc:	20030000 	.word	0x20030000
 8000bc0:	00000400 	.word	0x00000400
 8000bc4:	20010948 	.word	0x20010948
 8000bc8:	20010944 	.word	0x20010944

08000bcc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <SystemInit+0x10>)
 8000bce:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000bd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ffdf 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f00e f8a7 	bl	800ed60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fda7 	bl	8000764 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c24:	0801354c 	.word	0x0801354c
  ldr r2, =_sbss
 8000c28:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c2c:	20010948 	.word	0x20010948

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>

08000c32 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c32:	b188      	cbz	r0, 8000c58 <LAN8742_RegisterBusIO+0x26>
 8000c34:	68ca      	ldr	r2, [r1, #12]
 8000c36:	b192      	cbz	r2, 8000c5e <LAN8742_RegisterBusIO+0x2c>
 8000c38:	688a      	ldr	r2, [r1, #8]
 8000c3a:	b19a      	cbz	r2, 8000c64 <LAN8742_RegisterBusIO+0x32>
 8000c3c:	690a      	ldr	r2, [r1, #16]
 8000c3e:	b1a2      	cbz	r2, 8000c6a <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c40:	680a      	ldr	r2, [r1, #0]
 8000c42:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c44:	684a      	ldr	r2, [r1, #4]
 8000c46:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c48:	68ca      	ldr	r2, [r1, #12]
 8000c4a:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c4c:	688a      	ldr	r2, [r1, #8]
 8000c4e:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c50:	690a      	ldr	r2, [r1, #16]
 8000c52:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000c54:	2000      	movs	r0, #0
 8000c56:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	4770      	bx	lr
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	4770      	bx	lr
 8000c6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000c6e:	4770      	bx	lr

08000c70 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000c7c:	6844      	ldr	r4, [r0, #4]
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d149      	bne.n	8000d16 <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000c82:	6883      	ldr	r3, [r0, #8]
 8000c84:	b103      	cbz	r3, 8000c88 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c86:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000c8c:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c8e:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c90:	f06f 0804 	mvn.w	r8, #4
 8000c94:	e003      	b.n	8000c9e <LAN8742_Init+0x2e>
 8000c96:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c98:	3401      	adds	r4, #1
 8000c9a:	2c20      	cmp	r4, #32
 8000c9c:	d033      	beq.n	8000d06 <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c9e:	696b      	ldr	r3, [r5, #20]
 8000ca0:	aa01      	add	r2, sp, #4
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	4798      	blx	r3
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	dbf4      	blt.n	8000c96 <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cac:	9b01      	ldr	r3, [sp, #4]
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d1f0      	bne.n	8000c98 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000cb6:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000cb8:	692b      	ldr	r3, [r5, #16]
 8000cba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4798      	blx	r3
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	db36      	blt.n	8000d36 <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000cc8:	696b      	ldr	r3, [r5, #20]
 8000cca:	aa01      	add	r2, sp, #4
 8000ccc:	2100      	movs	r1, #0
 8000cce:	6828      	ldr	r0, [r5, #0]
 8000cd0:	4798      	blx	r3
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	db32      	blt.n	8000d3c <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000cd6:	69ab      	ldr	r3, [r5, #24]
 8000cd8:	4798      	blx	r3
 8000cda:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000cdc:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000cde:	9b01      	ldr	r3, [sp, #4]
 8000ce0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ce4:	d017      	beq.n	8000d16 <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ce6:	69ab      	ldr	r3, [r5, #24]
 8000ce8:	4798      	blx	r3
 8000cea:	1b00      	subs	r0, r0, r4
 8000cec:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cf0:	d827      	bhi.n	8000d42 <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000cf2:	696b      	ldr	r3, [r5, #20]
 8000cf4:	aa01      	add	r2, sp, #4
 8000cf6:	4631      	mov	r1, r6
 8000cf8:	6828      	ldr	r0, [r5, #0]
 8000cfa:	4798      	blx	r3
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	daee      	bge.n	8000cde <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d00:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d04:	e013      	b.n	8000d2e <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d06:	682c      	ldr	r4, [r5, #0]
 8000d08:	2c1f      	cmp	r4, #31
 8000d0a:	d902      	bls.n	8000d12 <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d0c:	f06f 0702 	mvn.w	r7, #2
 8000d10:	e00d      	b.n	8000d2e <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000d12:	b967      	cbnz	r7, 8000d2e <LAN8742_Init+0xbe>
 8000d14:	e7d0      	b.n	8000cb8 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000d16:	69ab      	ldr	r3, [r5, #24]
 8000d18:	4798      	blx	r3
 8000d1a:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d1c:	69ab      	ldr	r3, [r5, #24]
 8000d1e:	4798      	blx	r3
 8000d20:	1b03      	subs	r3, r0, r4
 8000d22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d26:	d9f9      	bls.n	8000d1c <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	606b      	str	r3, [r5, #4]
 8000d2c:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000d2e:	4638      	mov	r0, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d36:	f06f 0703 	mvn.w	r7, #3
 8000d3a:	e7f8      	b.n	8000d2e <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000d3c:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000d40:	e7f5      	b.n	8000d2e <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d42:	f06f 0701 	mvn.w	r7, #1
 8000d46:	e7f2      	b.n	8000d2e <LAN8742_Init+0xbe>

08000d48 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	4604      	mov	r4, r0
  uint32_t readval = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d52:	6943      	ldr	r3, [r0, #20]
 8000d54:	aa01      	add	r2, sp, #4
 8000d56:	2101      	movs	r1, #1
 8000d58:	6800      	ldr	r0, [r0, #0]
 8000d5a:	4798      	blx	r3
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	db39      	blt.n	8000dd4 <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d60:	6963      	ldr	r3, [r4, #20]
 8000d62:	aa01      	add	r2, sp, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	4798      	blx	r3
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	db35      	blt.n	8000dda <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d6e:	9b01      	ldr	r3, [sp, #4]
 8000d70:	f013 0f04 	tst.w	r3, #4
 8000d74:	d034      	beq.n	8000de0 <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d76:	6963      	ldr	r3, [r4, #20]
 8000d78:	aa01      	add	r2, sp, #4
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	4798      	blx	r3
 8000d80:	2800      	cmp	r0, #0
 8000d82:	db30      	blt.n	8000de6 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d84:	9b01      	ldr	r3, [sp, #4]
 8000d86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000d8a:	d10d      	bne.n	8000da8 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000d8c:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000d90:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000d94:	d02a      	beq.n	8000dec <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000d9a:	d129      	bne.n	8000df0 <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000da0:	bf14      	ite	ne
 8000da2:	2004      	movne	r0, #4
 8000da4:	2005      	moveq	r0, #5
 8000da6:	e01c      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000da8:	6963      	ldr	r3, [r4, #20]
 8000daa:	aa01      	add	r2, sp, #4
 8000dac:	211f      	movs	r1, #31
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	4798      	blx	r3
 8000db2:	2800      	cmp	r0, #0
 8000db4:	db1e      	blt.n	8000df4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000dbc:	d01d      	beq.n	8000dfa <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dbe:	f003 031c 	and.w	r3, r3, #28
 8000dc2:	2b18      	cmp	r3, #24
 8000dc4:	d01b      	beq.n	8000dfe <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000dc6:	2b08      	cmp	r3, #8
 8000dc8:	d01b      	beq.n	8000e02 <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dca:	2b14      	cmp	r3, #20
 8000dcc:	bf0c      	ite	eq
 8000dce:	2004      	moveq	r0, #4
 8000dd0:	2005      	movne	r0, #5
 8000dd2:	e006      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000dd4:	f06f 0004 	mvn.w	r0, #4
 8000dd8:	e003      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000dda:	f06f 0004 	mvn.w	r0, #4
 8000dde:	e000      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000de0:	2001      	movs	r0, #1
    }				
  }
}
 8000de2:	b002      	add	sp, #8
 8000de4:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 8000de6:	f06f 0004 	mvn.w	r0, #4
 8000dea:	e7fa      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dec:	2002      	movs	r0, #2
 8000dee:	e7f8      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000df0:	2003      	movs	r0, #3
 8000df2:	e7f6      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 8000df4:	f06f 0004 	mvn.w	r0, #4
 8000df8:	e7f3      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	e7f1      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dfe:	2002      	movs	r0, #2
 8000e00:	e7ef      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e02:	2003      	movs	r0, #3
 8000e04:	e7ed      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_Init+0x30>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e12:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e1a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f82f 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fe0c 	bl	8000a48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fd6c 	bl	800090c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000e34:	2000      	movs	r0, #0
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x10>)
 8000e3e:	6811      	ldr	r1, [r2, #0]
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_IncTick+0x14>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	440b      	add	r3, r1
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000064c 	.word	0x2000064c
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e54:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <HAL_GetTick+0x8>)
 8000e56:	6818      	ldr	r0, [r3, #0]
}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	2000064c 	.word	0x2000064c

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fff6 	bl	8000e54 <HAL_GetTick>
 8000e68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e6e:	d002      	beq.n	8000e76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_Delay+0x24>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	f7ff ffed 	bl	8000e54 <HAL_GetTick>
 8000e7a:	1b40      	subs	r0, r0, r5
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	d3fa      	bcc.n	8000e76 <HAL_Delay+0x16>
  {
  }
}
 8000e80:	bd38      	pop	{r3, r4, r5, pc}
 8000e82:	bf00      	nop
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e8a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	0203      	lsls	r3, r0, #8
 8000e8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e96:	0412      	lsls	r2, r2, #16
 8000e98:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ea4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_NVIC_SetPriority+0x64>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb6:	f1c3 0c07 	rsb	ip, r3, #7
 8000eba:	f1bc 0f04 	cmp.w	ip, #4
 8000ebe:	bf28      	it	cs
 8000ec0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec4:	f103 0e04 	add.w	lr, r3, #4
 8000ec8:	f1be 0f06 	cmp.w	lr, #6
 8000ecc:	bf8c      	ite	hi
 8000ece:	3b03      	subhi	r3, #3
 8000ed0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed2:	f04f 3eff 	mov.w	lr, #4294967295
 8000ed6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000eda:	ea21 010c 	bic.w	r1, r1, ip
 8000ede:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	fa0e f303 	lsl.w	r3, lr, r3
 8000ee4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000eea:	2800      	cmp	r0, #0
 8000eec:	db09      	blt.n	8000f02 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	0109      	lsls	r1, r1, #4
 8000ef0:	b2c9      	uxtb	r1, r1
 8000ef2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ef6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000efa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	f000 000f 	and.w	r0, r0, #15
 8000f06:	0109      	lsls	r1, r1, #4
 8000f08:	b2c9      	uxtb	r1, r1
 8000f0a:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_NVIC_SetPriority+0x68>)
 8000f0c:	5419      	strb	r1, [r3, r0]
 8000f0e:	e7f6      	b.n	8000efe <HAL_NVIC_SetPriority+0x52>
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	e000ed14 	.word	0xe000ed14

08000f18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	db08      	blt.n	8000f2e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1c:	0942      	lsrs	r2, r0, #5
 8000f1e:	f000 001f 	and.w	r0, r0, #31
 8000f22:	2301      	movs	r3, #1
 8000f24:	fa03 f000 	lsl.w	r0, r3, r0
 8000f28:	4b01      	ldr	r3, [pc, #4]	; (8000f30 <HAL_NVIC_EnableIRQ+0x18>)
 8000f2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8000f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f38:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 8000f3e:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000f40:	f107 0312 	add.w	r3, r7, #18
 8000f44:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8000f48:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d035      	beq.n	8000fba <ETH_UpdateDescriptor+0x86>
 8000f4e:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f50:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f54:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000fc0 <ETH_UpdateDescriptor+0x8c>
 8000f58:	e01a      	b.n	8000f90 <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 8000f5a:	a801      	add	r0, sp, #4
 8000f5c:	f002 fb36 	bl	80035cc <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8000f60:	9b01      	ldr	r3, [sp, #4]
 8000f62:	b1f3      	cbz	r3, 8000fa2 <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8000f64:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8000f66:	60a3      	str	r3, [r4, #8]
 8000f68:	e015      	b.n	8000f96 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f6a:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f6e:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000f7a:	1c7b      	adds	r3, r7, #1
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	bf8c      	ite	hi
 8000f80:	3f03      	subhi	r7, #3
 8000f82:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000f84:	f107 0312 	add.w	r3, r7, #18
 8000f88:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8000f8c:	3d01      	subs	r5, #1
 8000f8e:	d009      	beq.n	8000fa4 <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8000f90:	6a23      	ldr	r3, [r4, #32]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0e1      	beq.n	8000f5a <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 8000f96:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e6      	bne.n	8000f6a <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f9c:	f8c4 8004 	str.w	r8, [r4, #4]
 8000fa0:	e7e5      	b.n	8000f6e <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 8000fa2:	b905      	cbnz	r5, 8000fa6 <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000fa4:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8000fa6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8000fa8:	42ab      	cmp	r3, r5
 8000faa:	d006      	beq.n	8000fba <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8000fb6:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8000fb8:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fc0:	800045f8 	.word	0x800045f8

08000fc4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8000fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8000fc8:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000fca:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8000fce:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	f2c0 80ad 	blt.w	8001134 <ETH_Prepare_Tx_Descriptors+0x170>
 8000fda:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8000fdc:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	f040 80a9 	bne.w	8001138 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8000fe6:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8000fe8:	6825      	ldr	r5, [r4, #0]
 8000fea:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8000fec:	685e      	ldr	r6, [r3, #4]
 8000fee:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 8000ff2:	f026 061f 	bic.w	r6, r6, #31
 8000ff6:	6865      	ldr	r5, [r4, #4]
 8000ff8:	4335      	orrs	r5, r6
 8000ffa:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8000ffc:	680d      	ldr	r5, [r1, #0]
 8000ffe:	f015 0f01 	tst.w	r5, #1
 8001002:	d005      	beq.n	8001010 <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001004:	681e      	ldr	r6, [r3, #0]
 8001006:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 800100a:	694d      	ldr	r5, [r1, #20]
 800100c:	4335      	orrs	r5, r6
 800100e:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001010:	680d      	ldr	r5, [r1, #0]
 8001012:	f015 0f20 	tst.w	r5, #32
 8001016:	d005      	beq.n	8001024 <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001018:	681e      	ldr	r6, [r3, #0]
 800101a:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 800101e:	690d      	ldr	r5, [r1, #16]
 8001020:	4335      	orrs	r5, r6
 8001022:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001024:	6809      	ldr	r1, [r1, #0]
 8001026:	f011 0f04 	tst.w	r1, #4
 800102a:	d003      	beq.n	8001034 <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001032:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800103a:	6019      	str	r1, [r3, #0]
 800103c:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001046:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001048:	68a1      	ldr	r1, [r4, #8]
 800104a:	2900      	cmp	r1, #0
 800104c:	d053      	beq.n	80010f6 <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800104e:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 8001050:	2601      	movs	r6, #1
 8001052:	e02c      	b.n	80010ae <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 800105a:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800105c:	1c6b      	adds	r3, r5, #1
 800105e:	2b03      	cmp	r3, #3
 8001060:	bf8c      	ite	hi
 8001062:	3d03      	subhi	r5, #3
 8001064:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001066:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 800106a:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001074:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	2900      	cmp	r1, #0
 800107a:	db24      	blt.n	80010c6 <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800107c:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 8001080:	bb09      	cbnz	r1, 80010c6 <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001082:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001084:	6821      	ldr	r1, [r4, #0]
 8001086:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001088:	6859      	ldr	r1, [r3, #4]
 800108a:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800108e:	f021 011f 	bic.w	r1, r1, #31
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	4311      	orrs	r1, r2
 8001096:	6059      	str	r1, [r3, #4]
 8001098:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800109c:	6819      	ldr	r1, [r3, #0]
 800109e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80010a2:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 80010a4:	f106 0e01 	add.w	lr, r6, #1
 80010a8:	68a1      	ldr	r1, [r4, #8]
 80010aa:	b331      	cbz	r1, 80010fa <ETH_Prepare_Tx_Descriptors+0x136>
 80010ac:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 80010b4:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80010b6:	f1b8 0f00 	cmp.w	r8, #0
 80010ba:	d0cb      	beq.n	8001054 <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80010c2:	6019      	str	r1, [r3, #0]
 80010c4:	e7ca      	b.n	800105c <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010c6:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d037      	beq.n	800113e <ETH_Prepare_Tx_Descriptors+0x17a>
 80010ce:	2100      	movs	r1, #0
 80010d0:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010da:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 80010dc:	1c7b      	adds	r3, r7, #1
 80010de:	2b03      	cmp	r3, #3
 80010e0:	bf8c      	ite	hi
 80010e2:	3f03      	subhi	r7, #3
 80010e4:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010e6:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 80010ea:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80010ec:	3101      	adds	r1, #1
 80010ee:	428e      	cmp	r6, r1
 80010f0:	d1ee      	bne.n	80010d0 <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 80010f2:	2002      	movs	r0, #2
 80010f4:	e021      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80010f6:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 80010f8:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 80010fa:	f1b8 0f00 	cmp.w	r8, #0
 80010fe:	d014      	beq.n	800112a <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800110e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001110:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8001114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8001118:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800111a:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800111c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800111e:	3301      	adds	r3, #1
 8001120:	441e      	add	r6, r3
 8001122:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001124:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001126:	2000      	movs	r0, #0
 8001128:	e007      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e7e9      	b.n	8001108 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 8001134:	2002      	movs	r0, #2
 8001136:	e000      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
 8001138:	2002      	movs	r0, #2
}
 800113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 800113e:	2002      	movs	r0, #2
 8001140:	e7fb      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
	...

08001144 <ETH_SetMACConfig>:
{
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	4605      	mov	r5, r0
 800114a:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 800114c:	6801      	ldr	r1, [r0, #0]
 800114e:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001150:	4e3b      	ldr	r6, [pc, #236]	; (8001240 <ETH_SetMACConfig+0xfc>)
 8001152:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001154:	7c23      	ldrb	r3, [r4, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	bf0c      	ite	eq
 800115a:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 800115e:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001162:	7c63      	ldrb	r3, [r4, #17]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf0c      	ite	eq
 8001168:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 800116c:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001170:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001174:	68a3      	ldr	r3, [r4, #8]
 8001176:	6962      	ldr	r2, [r4, #20]
 8001178:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800117a:	7fa2      	ldrb	r2, [r4, #30]
 800117c:	2a00      	cmp	r2, #0
 800117e:	bf0c      	ite	eq
 8001180:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8001184:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001186:	f894 901c 	ldrb.w	r9, [r4, #28]
 800118a:	69a2      	ldr	r2, [r4, #24]
 800118c:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800118e:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001190:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001194:	2a00      	cmp	r2, #0
 8001196:	bf0c      	ite	eq
 8001198:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 800119c:	f04f 0a00 	movne.w	sl, #0
 80011a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011a8:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 80011ac:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011b0:	7be7      	ldrb	r7, [r4, #15]
 80011b2:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011b6:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 80011ba:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80011be:	4333      	orrs	r3, r6
 80011c0:	ea43 030e 	orr.w	r3, r3, lr
 80011c4:	ea43 030c 	orr.w	r3, r3, ip
 80011c8:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011ca:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80011ce:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fe43 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80011da:	682b      	ldr	r3, [r5, #0]
 80011dc:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 80011de:	6828      	ldr	r0, [r5, #0]
 80011e0:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80011e2:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80011e6:	0409      	lsls	r1, r1, #16
 80011e8:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011ea:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011ec:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf0c      	ite	eq
 80011f4:	2380      	moveq	r3, #128	; 0x80
 80011f6:	2300      	movne	r3, #0
 80011f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011fa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80011fe:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001200:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 8001204:	2901      	cmp	r1, #1
 8001206:	bf0c      	ite	eq
 8001208:	2108      	moveq	r1, #8
 800120a:	2100      	movne	r1, #0
 800120c:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800120e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8001212:	2b01      	cmp	r3, #1
 8001214:	bf0c      	ite	eq
 8001216:	2304      	moveq	r3, #4
 8001218:	2300      	movne	r3, #0
 800121a:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800121c:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8001220:	2901      	cmp	r1, #1
 8001222:	bf0c      	ite	eq
 8001224:	2102      	moveq	r1, #2
 8001226:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001228:	4313      	orrs	r3, r2
 800122a:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800122c:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff fe14 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	619c      	str	r4, [r3, #24]
}
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	ff20810f 	.word	0xff20810f

08001244 <ETH_SetDMAConfig>:
{
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	4605      	mov	r5, r0
 8001248:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 800124a:	6802      	ldr	r2, [r0, #0]
 800124c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001250:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001252:	482c      	ldr	r0, [pc, #176]	; (8001304 <ETH_SetDMAConfig+0xc0>)
 8001254:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001256:	7b0b      	ldrb	r3, [r1, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001260:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001262:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001266:	7f4b      	ldrb	r3, [r1, #29]
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001270:	2100      	movne	r1, #0
 8001272:	6963      	ldr	r3, [r4, #20]
 8001274:	6a27      	ldr	r7, [r4, #32]
 8001276:	433b      	orrs	r3, r7
 8001278:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800127c:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001280:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001284:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001288:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800128c:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8001290:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001294:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 8001298:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800129c:	4303      	orrs	r3, r0
 800129e:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012a0:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a6:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ae:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fdd5 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012bc:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012be:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012c0:	68a3      	ldr	r3, [r4, #8]
 80012c2:	69a1      	ldr	r1, [r4, #24]
 80012c4:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012c6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012ca:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80012ce:	6921      	ldr	r1, [r4, #16]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6821      	ldr	r1, [r4, #0]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012d8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012dc:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012de:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ea:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fdb3 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001300:	601c      	str	r4, [r3, #0]
}
 8001302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001304:	f8de3f23 	.word	0xf8de3f23

08001308 <ETH_FlushTransmitFIFO>:
{
 8001308:	b510      	push	{r4, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001312:	6803      	ldr	r3, [r0, #0]
 8001314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800131e:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fd98 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	9a01      	ldr	r2, [sp, #4]
 8001334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	b002      	add	sp, #8
 800133c:	bd10      	pop	{r4, pc}
	...

08001340 <HAL_ETH_Init>:
  if (heth == NULL)
 8001340:	2800      	cmp	r0, #0
 8001342:	f000 8109 	beq.w	8001558 <HAL_ETH_Init+0x218>
{
 8001346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001348:	b0a7      	sub	sp, #156	; 0x9c
 800134a:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 800134c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001350:	2b00      	cmp	r3, #0
 8001352:	d034      	beq.n	80013be <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b80      	ldr	r3, [pc, #512]	; (800155c <HAL_ETH_Init+0x21c>)
 800135a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800135c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_ETH_Init+0x220>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001374:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	68a9      	ldr	r1, [r5, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 800137e:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800138e:	f7ff fd61 	bl	8000e54 <HAL_GetTick>
 8001392:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139a:	681c      	ldr	r4, [r3, #0]
 800139c:	f014 0401 	ands.w	r4, r4, #1
 80013a0:	d013      	beq.n	80013ca <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a2:	f7ff fd57 	bl	8000e54 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80013ac:	d9f2      	bls.n	8001394 <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013ae:	2304      	movs	r3, #4
 80013b0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80013b4:	23e0      	movs	r3, #224	; 0xe0
 80013b6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e0ca      	b.n	8001554 <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 80013be:	2323      	movs	r3, #35	; 0x23
 80013c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80013c4:	f002 f808 	bl	80033d8 <HAL_ETH_MspInit>
 80013c8:	e7c4      	b.n	8001354 <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 80013ca:	2701      	movs	r7, #1
 80013cc:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80013d0:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013d4:	2600      	movs	r6, #0
 80013d6:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013d8:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013dc:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013e0:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80013e4:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80013e8:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80013ec:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013f0:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80013f2:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80013f6:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80013f8:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80013fc:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80013fe:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001402:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140a:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001410:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001412:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001416:	a90d      	add	r1, sp, #52	; 0x34
 8001418:	4628      	mov	r0, r5
 800141a:	f7ff fe93 	bl	8001144 <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800141e:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001422:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001426:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800142a:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800142e:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001430:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001434:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001438:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800143a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800143e:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001446:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144c:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800144e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001452:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001454:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001458:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800145a:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800145c:	a902      	add	r1, sp, #8
 800145e:	4628      	mov	r0, r5
 8001460:	f7ff fef0 	bl	8001244 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001464:	f105 0c18 	add.w	ip, r5, #24
 8001468:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800146a:	4630      	mov	r0, r6
 800146c:	e00a      	b.n	8001484 <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800146e:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8001472:	68ee      	ldr	r6, [r5, #12]
 8001474:	4476      	add	r6, lr
 8001476:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001478:	58d1      	ldr	r1, [r2, r3]
 800147a:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800147e:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001480:	3328      	adds	r3, #40	; 0x28
 8001482:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001484:	68ea      	ldr	r2, [r5, #12]
 8001486:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001488:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800148a:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800148c:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800148e:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001490:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001494:	58d6      	ldr	r6, [r2, r3]
 8001496:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800149a:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800149c:	1e7e      	subs	r6, r7, #1
 800149e:	2e02      	cmp	r6, #2
 80014a0:	d9e5      	bls.n	800146e <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80014a2:	68ee      	ldr	r6, [r5, #12]
 80014a4:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80014a6:	58d1      	ldr	r1, [r2, r3]
 80014a8:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 80014ac:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014ae:	2f03      	cmp	r7, #3
 80014b0:	d9e6      	bls.n	8001480 <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	68ea      	ldr	r2, [r5, #12]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014be:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014c0:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80014c4:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80014c6:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014c8:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014cc:	f244 57f8 	movw	r7, #17912	; 0x45f8
 80014d0:	e006      	b.n	80014e0 <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80014d2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80014d6:	692a      	ldr	r2, [r5, #16]
 80014d8:	4472      	add	r2, lr
 80014da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014dc:	3428      	adds	r4, #40	; 0x28
 80014de:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 80014e0:	692a      	ldr	r2, [r5, #16]
 80014e2:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80014e4:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80014e6:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80014e8:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80014ea:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80014ec:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80014ee:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014f0:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014f4:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80014fe:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001502:	1e42      	subs	r2, r0, #1
 8001504:	2a02      	cmp	r2, #2
 8001506:	d9e4      	bls.n	80014d2 <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001508:	692a      	ldr	r2, [r5, #16]
 800150a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800150c:	2803      	cmp	r0, #3
 800150e:	d9e5      	bls.n	80014dc <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001510:	2000      	movs	r0, #0
 8001512:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001514:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001516:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001518:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800151a:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	692a      	ldr	r2, [r5, #16]
 8001520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001524:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001526:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001528:	7951      	ldrb	r1, [r2, #5]
 800152a:	7913      	ldrb	r3, [r2, #4]
 800152c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <HAL_ETH_Init+0x224>)
 8001532:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001534:	78d4      	ldrb	r4, [r2, #3]
 8001536:	7893      	ldrb	r3, [r2, #2]
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800153e:	7814      	ldrb	r4, [r2, #0]
 8001540:	4323      	orrs	r3, r4
 8001542:	7852      	ldrb	r2, [r2, #1]
 8001544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001548:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800154a:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800154e:	2310      	movs	r3, #16
 8001550:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001554:	b027      	add	sp, #156	; 0x9c
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001558:	2001      	movs	r0, #1
}
 800155a:	4770      	bx	lr
 800155c:	40023800 	.word	0x40023800
 8001560:	40013800 	.word	0x40013800
 8001564:	40028000 	.word	0x40028000

08001568 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001568:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800156c:	2b10      	cmp	r3, #16
 800156e:	d001      	beq.n	8001574 <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	4770      	bx	lr
{
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001578:	2523      	movs	r5, #35	; 0x23
 800157a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800157e:	2304      	movs	r3, #4
 8001580:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001582:	f7ff fcd7 	bl	8000f34 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fc63 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fc57 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fea6 	bl	8001308 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c8:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	f042 0202 	orr.w	r2, r2, #2
 80015d6:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 80015d8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 80015dc:	2000      	movs	r0, #0
}
 80015de:	bd70      	pop	{r4, r5, r6, pc}

080015e0 <HAL_ETH_Start_IT>:
{
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80015e2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d001      	beq.n	80015ee <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
}
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ee:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80015f0:	2523      	movs	r5, #35	; 0x23
 80015f2:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 80015f6:	2601      	movs	r6, #1
 80015f8:	6586      	str	r6, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015fa:	6802      	ldr	r2, [r0, #0]
 80015fc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80015fe:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 8001602:	63d3      	str	r3, [r2, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001604:	6802      	ldr	r2, [r0, #0]
 8001606:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 800160a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001612:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001616:	6802      	ldr	r2, [r0, #0]
 8001618:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 800161c:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 8001620:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001624:	2304      	movs	r3, #4
 8001626:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001628:	f7ff fc84 	bl	8000f34 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800163a:	4630      	mov	r0, r6
 800163c:	f7ff fc10 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001652:	4630      	mov	r0, r6
 8001654:	f7ff fc04 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	601f      	str	r7, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fe53 	bl	8001308 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800166e:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	f042 0202 	orr.w	r2, r2, #2
 800167c:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001684:	69d3      	ldr	r3, [r2, #28]
 8001686:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800168a:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800168e:	61d3      	str	r3, [r2, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001690:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 8001694:	2000      	movs	r0, #0
 8001696:	e7a9      	b.n	80015ec <HAL_ETH_Start_IT+0xc>

08001698 <HAL_ETH_Stop_IT>:
{
 8001698:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800169a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800169e:	2b23      	cmp	r3, #35	; 0x23
 80016a0:	d001      	beq.n	80016a6 <HAL_ETH_Stop_IT+0xe>
    return HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
}
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80016a8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016ac:	6802      	ldr	r2, [r0, #0]
 80016ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b2:	69d3      	ldr	r3, [r2, #28]
 80016b4:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80016b8:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80016bc:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016be:	6803      	ldr	r3, [r0, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ca:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016cc:	6803      	ldr	r3, [r0, #0]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	f022 0202 	bic.w	r2, r2, #2
 80016d8:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016da:	6802      	ldr	r2, [r0, #0]
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80016e4:	6803      	ldr	r3, [r0, #0]
 80016e6:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fbb9 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fe08 	bl	8001308 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	f023 0308 	bic.w	r3, r3, #8
 8001700:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fbaa 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800170c:	4622      	mov	r2, r4
 800170e:	f852 3b48 	ldr.w	r3, [r2], #72
 8001712:	601d      	str	r5, [r3, #0]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001714:	f104 0058 	add.w	r0, r4, #88	; 0x58
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001718:	f852 1b04 	ldr.w	r1, [r2], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800171c:	684b      	ldr	r3, [r1, #4]
 800171e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001722:	604b      	str	r3, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001724:	4282      	cmp	r2, r0
 8001726:	d1f7      	bne.n	8001718 <HAL_ETH_Stop_IT+0x80>
    heth->RxDescList.ItMode = 0U;
 8001728:	2000      	movs	r0, #0
 800172a:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 800172c:	2310      	movs	r3, #16
 800172e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8001732:	e7b7      	b.n	80016a4 <HAL_ETH_Stop_IT+0xc>

08001734 <HAL_ETH_Transmit_IT>:
{
 8001734:	b510      	push	{r4, lr}
 8001736:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001738:	b129      	cbz	r1, 8001746 <HAL_ETH_Transmit_IT+0x12>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800173a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800173e:	2b23      	cmp	r3, #35	; 0x23
 8001740:	d009      	beq.n	8001756 <HAL_ETH_Transmit_IT+0x22>
    return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
}
 8001744:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001746:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	e7f6      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001756:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001758:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800175a:	2201      	movs	r2, #1
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff fc31 	bl	8000fc4 <ETH_Prepare_Tx_Descriptors>
 8001762:	b138      	cbz	r0, 8001774 <HAL_ETH_Transmit_IT+0x40>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001764:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001770:	2001      	movs	r0, #1
 8001772:	e7e7      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	2a03      	cmp	r2, #3
 800177e:	bf92      	itee	ls
 8001780:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001782:	3b03      	subhi	r3, #3
 8001784:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800178c:	6952      	ldr	r2, [r2, #20]
 800178e:	f012 0f04 	tst.w	r2, #4
 8001792:	d009      	beq.n	80017a8 <HAL_ETH_Transmit_IT+0x74>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	2204      	movs	r2, #4
 800179a:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	2000      	movs	r0, #0
 80017a4:	6058      	str	r0, [r3, #4]
 80017a6:	e7cd      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>
    return HAL_OK;
 80017a8:	2000      	movs	r0, #0
 80017aa:	e7cb      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>

080017ac <HAL_ETH_ReadData>:
{
 80017ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b0:	b085      	sub	sp, #20
 80017b2:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 80017b4:	9103      	str	r1, [sp, #12]
 80017b6:	b1e1      	cbz	r1, 80017f2 <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017b8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80017bc:	2b23      	cmp	r3, #35	; 0x23
 80017be:	d17e      	bne.n	80018be <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 80017c0:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017c2:	f107 0312 	add.w	r3, r7, #18
 80017c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80017cc:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	f2c0 8083 	blt.w	80018de <HAL_ETH_ReadData+0x132>
 80017d8:	f1bb 0f00 	cmp.w	fp, #0
 80017dc:	d066      	beq.n	80018ac <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 80017de:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017e2:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 80017ec:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 80017ee:	46c1      	mov	r9, r8
 80017f0:	e037      	b.n	8001862 <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017f2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e05e      	b.n	80018c0 <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 8001808:	bf1c      	itt	ne
 800180a:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800180e:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001818:	d134      	bne.n	8001884 <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 800181a:	696e      	ldr	r6, [r5, #20]
 800181c:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800181e:	68a2      	ldr	r2, [r4, #8]
 8001820:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001822:	b2b3      	uxth	r3, r6
 8001824:	9901      	ldr	r1, [sp, #4]
 8001826:	9802      	ldr	r0, [sp, #8]
 8001828:	f001 fef6 	bl	8003618 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 800182c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800182e:	3301      	adds	r3, #1
 8001830:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001834:	4433      	add	r3, r6
 8001836:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001838:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 800183c:	1c7b      	adds	r3, r7, #1
 800183e:	2b03      	cmp	r3, #3
 8001840:	bf8c      	ite	hi
 8001842:	3f03      	subhi	r7, #3
 8001844:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001846:	f107 0312 	add.w	r3, r7, #18
 800184a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 800184e:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db1f      	blt.n	8001898 <HAL_ETH_ReadData+0xec>
 8001858:	45c3      	cmp	fp, r8
 800185a:	d01c      	beq.n	8001896 <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 800185c:	f1ba 0f00 	cmp.w	sl, #0
 8001860:	d131      	bne.n	80018c6 <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001868:	d003      	beq.n	8001872 <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800186a:	69a3      	ldr	r3, [r4, #24]
 800186c:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800186e:	69e3      	ldr	r3, [r4, #28]
 8001870:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001878:	d1c3      	bne.n	8001802 <HAL_ETH_ReadData+0x56>
 800187a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1c0      	bne.n	8001802 <HAL_ETH_ReadData+0x56>
 8001880:	46ca      	mov	sl, r9
 8001882:	e7db      	b.n	800183c <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001884:	6826      	ldr	r6, [r4, #0]
 8001886:	f3c6 460d 	ubfx	r6, r6, #16, #14
 800188a:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 8001890:	f04f 0a01 	mov.w	sl, #1
 8001894:	e7c3      	b.n	800181e <HAL_ETH_ReadData+0x72>
    desccnt++;
 8001896:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001898:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800189a:	4443      	add	r3, r8
 800189c:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800189e:	b93b      	cbnz	r3, 80018b0 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80018a0:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 80018a4:	f1ba 0f00 	cmp.w	sl, #0
 80018a8:	d00a      	beq.n	80018c0 <HAL_ETH_ReadData+0x114>
 80018aa:	e012      	b.n	80018d2 <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 80018ac:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 80018b0:	4628      	mov	r0, r5
 80018b2:	f7ff fb3f 	bl	8000f34 <ETH_UpdateDescriptor>
 80018b6:	e7f3      	b.n	80018a0 <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 80018b8:	f04f 0a00 	mov.w	sl, #0
 80018bc:	e7f8      	b.n	80018b0 <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
}
 80018c0:	b005      	add	sp, #20
 80018c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018c6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80018c8:	4443      	add	r3, r8
 80018ca:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ef      	bne.n	80018b0 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80018d0:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 80018d2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80018d4:	9a03      	ldr	r2, [sp, #12]
 80018d6:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 80018d8:	2000      	movs	r0, #0
 80018da:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 80018dc:	e7f0      	b.n	80018c0 <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ea      	bne.n	80018b8 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	e7ec      	b.n	80018c0 <HAL_ETH_ReadData+0x114>

080018e6 <HAL_ETH_ReleaseTxPacket>:
{
 80018e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80018ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80018ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018ee:	b1a5      	cbz	r5, 800191a <HAL_ETH_ReleaseTxPacket+0x34>
 80018f0:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 80018f2:	f04f 0800 	mov.w	r8, #0
 80018f6:	e003      	b.n	8001900 <HAL_ETH_ReleaseTxPacket+0x1a>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80018f8:	3401      	adds	r4, #1
 80018fa:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018fe:	b165      	cbz	r5, 800191a <HAL_ETH_ReleaseTxPacket+0x34>
    numOfBuf--;
 8001900:	3d01      	subs	r5, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001902:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 8001906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001908:	2800      	cmp	r0, #0
 800190a:	d0f5      	beq.n	80018f8 <HAL_ETH_ReleaseTxPacket+0x12>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800190c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001910:	68f2      	ldr	r2, [r6, #12]
 8001912:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da02      	bge.n	8001920 <HAL_ETH_ReleaseTxPacket+0x3a>
}
 800191a:	2000      	movs	r0, #0
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001920:	f001 fe95 	bl	800364e <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001924:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001928:	3401      	adds	r4, #1
 800192a:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 800192e:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8001930:	6474      	str	r4, [r6, #68]	; 0x44
 8001932:	e7e4      	b.n	80018fe <HAL_ETH_ReleaseTxPacket+0x18>

08001934 <HAL_ETH_PMTCallback>:
}
 8001934:	4770      	bx	lr

08001936 <HAL_ETH_WakeUpCallback>:
}
 8001936:	4770      	bx	lr

08001938 <HAL_ETH_IRQHandler>:
{
 8001938:	b510      	push	{r4, lr}
 800193a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001942:	6952      	ldr	r2, [r2, #20]
 8001944:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001948:	d005      	beq.n	8001956 <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800194a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800194e:	69d2      	ldr	r2, [r2, #28]
 8001950:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001954:	d147      	bne.n	80019e6 <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800195c:	6952      	ldr	r2, [r2, #20]
 800195e:	f012 0f01 	tst.w	r2, #1
 8001962:	d005      	beq.n	8001970 <HAL_ETH_IRQHandler+0x38>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001964:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001968:	69d2      	ldr	r2, [r2, #28]
 800196a:	f012 0f01 	tst.w	r2, #1
 800196e:	d141      	bne.n	80019f4 <HAL_ETH_IRQHandler+0xbc>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001976:	6952      	ldr	r2, [r2, #20]
 8001978:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800197c:	d028      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x98>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800197e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001982:	69d2      	ldr	r2, [r2, #28]
 8001984:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001988:	d022      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800198a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001996:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800199a:	6952      	ldr	r2, [r2, #20]
 800199c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80019a0:	d031      	beq.n	8001a06 <HAL_ETH_IRQHandler+0xce>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80019a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019ac:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 80019b0:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 80019b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019b8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 80019c2:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80019c4:	23e0      	movs	r3, #224	; 0xe0
 80019c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f001 fbfc 	bl	80031c8 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d4:	f012 0f08 	tst.w	r2, #8
 80019d8:	d11f      	bne.n	8001a1a <HAL_ETH_IRQHandler+0xe2>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_ETH_IRQHandler+0x10c>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019e2:	d126      	bne.n	8001a32 <HAL_ETH_IRQHandler+0xfa>
}
 80019e4:	bd10      	pop	{r4, pc}
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_ETH_IRQHandler+0x110>)
 80019ec:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 80019ee:	f001 fbdb 	bl	80031a8 <HAL_ETH_RxCpltCallback>
 80019f2:	e7b0      	b.n	8001956 <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80019fc:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f001 fbda 	bl	80031b8 <HAL_ETH_TxCpltCallback>
 8001a04:	e7b4      	b.n	8001970 <HAL_ETH_IRQHandler+0x38>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	f248 6180 	movw	r1, #34432	; 0x8680
 8001a10:	400a      	ands	r2, r1
 8001a12:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a16:	6159      	str	r1, [r3, #20]
 8001a18:	e7d7      	b.n	80019ca <HAL_ETH_IRQHandler+0x92>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001a20:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff85 	bl	8001934 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001a30:	e7d3      	b.n	80019da <HAL_ETH_IRQHandler+0xa2>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_ETH_IRQHandler+0x10c>)
 8001a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a38:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff ff7b 	bl	8001936 <HAL_ETH_WakeUpCallback>
}
 8001a40:	e7d0      	b.n	80019e4 <HAL_ETH_IRQHandler+0xac>
 8001a42:	bf00      	nop
 8001a44:	40013c00 	.word	0x40013c00
 8001a48:	00010040 	.word	0x00010040

08001a4c <HAL_ETH_ReadPHYRegister>:
{
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4604      	mov	r4, r0
 8001a50:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a52:	6805      	ldr	r5, [r0, #0]
 8001a54:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a56:	0192      	lsls	r2, r2, #6
 8001a58:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a5c:	f000 021c 	and.w	r2, r0, #28
 8001a60:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a62:	02cb      	lsls	r3, r1, #11
 8001a64:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a66:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a68:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001a6c:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001a6e:	f7ff f9f1 	bl	8000e54 <HAL_GetTick>
 8001a72:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a74:	f7ff f9ee 	bl	8000e54 <HAL_GetTick>
 8001a78:	1b40      	subs	r0, r0, r5
 8001a7a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001a7e:	d209      	bcs.n	8001a94 <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a84:	f011 0f01 	tst.w	r1, #1
 8001a88:	d1f4      	bne.n	8001a74 <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a8a:	6953      	ldr	r3, [r2, #20]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
}
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e7fc      	b.n	8001a92 <HAL_ETH_ReadPHYRegister+0x46>

08001a98 <HAL_ETH_WritePHYRegister>:
{
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a9c:	6805      	ldr	r5, [r0, #0]
 8001a9e:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001aa0:	0192      	lsls	r2, r2, #6
 8001aa2:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001aa6:	f000 001c 	and.w	r0, r0, #28
 8001aaa:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001aac:	02ca      	lsls	r2, r1, #11
 8001aae:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ab0:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ab2:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001abe:	f7ff f9c9 	bl	8000e54 <HAL_GetTick>
 8001ac2:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ac4:	f7ff f9c6 	bl	8000e54 <HAL_GetTick>
 8001ac8:	1b40      	subs	r0, r0, r5
 8001aca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001ace:	d206      	bcs.n	8001ade <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad4:	f013 0f01 	tst.w	r3, #1
 8001ad8:	d1f4      	bne.n	8001ac4 <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001ada:	2000      	movs	r0, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
}
 8001ae0:	bd38      	pop	{r3, r4, r5, pc}

08001ae2 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	d06f      	beq.n	8001bc6 <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ae6:	6802      	ldr	r2, [r0, #0]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001aee:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001afa:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001afc:	6802      	ldr	r2, [r0, #0]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001b04:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001b08:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b0c:	6802      	ldr	r2, [r0, #0]
 8001b0e:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001b10:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b14:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b16:	6802      	ldr	r2, [r0, #0]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001b1e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001b22:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b24:	6802      	ldr	r2, [r0, #0]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001b2c:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b2e:	6802      	ldr	r2, [r0, #0]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b36:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b38:	6802      	ldr	r2, [r0, #0]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b40:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b42:	6802      	ldr	r2, [r0, #0]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001b4a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001b4e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b50:	6802      	ldr	r2, [r0, #0]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001b58:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001b5c:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b5e:	6802      	ldr	r2, [r0, #0]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001b66:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b68:	6802      	ldr	r2, [r0, #0]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001b70:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b72:	6802      	ldr	r2, [r0, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001b7a:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b7c:	6802      	ldr	r2, [r0, #0]
 8001b7e:	6992      	ldr	r2, [r2, #24]
 8001b80:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001b84:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b88:	6802      	ldr	r2, [r0, #0]
 8001b8a:	6992      	ldr	r2, [r2, #24]
 8001b8c:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001b90:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001b94:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b98:	6802      	ldr	r2, [r0, #0]
 8001b9a:	6992      	ldr	r2, [r2, #24]
 8001b9c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001ba0:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ba2:	6802      	ldr	r2, [r0, #0]
 8001ba4:	6992      	ldr	r2, [r2, #24]
 8001ba6:	0c12      	lsrs	r2, r2, #16
 8001ba8:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001baa:	6802      	ldr	r2, [r0, #0]
 8001bac:	6992      	ldr	r2, [r2, #24]
 8001bae:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001bb2:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001bba:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bbe:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	4770      	bx	lr
    return HAL_ERROR;
 8001bc6:	2001      	movs	r0, #1
}
 8001bc8:	4770      	bx	lr

08001bca <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001bca:	b151      	cbz	r1, 8001be2 <HAL_ETH_SetMACConfig+0x18>
{
 8001bcc:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001bce:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d001      	beq.n	8001bda <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
}
 8001bd8:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001bda:	f7ff fab3 	bl	8001144 <ETH_SetMACConfig>
    return HAL_OK;
 8001bde:	2000      	movs	r0, #0
 8001be0:	e7fa      	b.n	8001bd8 <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
}
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_ETH_SetMDIOClockRange>:
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001bf0:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001bf4:	f000 fd00 	bl	80025f8 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_ETH_SetMDIOClockRange+0x54>)
 8001bfa:	4403      	add	r3, r0
 8001bfc:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d204      	bcs.n	8001c0c <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c02:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	611c      	str	r4, [r3, #16]
}
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001c0e:	4403      	add	r3, r0
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c16:	f044 040c 	orr.w	r4, r4, #12
 8001c1a:	e7f4      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_ETH_SetMDIOClockRange+0x64>)
 8001c1e:	4403      	add	r3, r0
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d3ef      	bcc.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001c28:	4403      	add	r3, r0
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001c2c:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c2e:	bf94      	ite	ls
 8001c30:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c34:	f044 0410 	orrhi.w	r4, r4, #16
 8001c38:	e7e5      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x1e>
 8001c3a:	bf00      	nop
 8001c3c:	feced300 	.word	0xfeced300
 8001c40:	00e4e1c0 	.word	0x00e4e1c0
 8001c44:	fde9f140 	.word	0xfde9f140
 8001c48:	017d783f 	.word	0x017d783f
 8001c4c:	fc6c7900 	.word	0xfc6c7900
 8001c50:	02625a00 	.word	0x02625a00
 8001c54:	fa0a1f00 	.word	0xfa0a1f00
 8001c58:	02faf07f 	.word	0x02faf07f

08001c5c <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001c5c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4d82      	ldr	r5, [pc, #520]	; (8001e78 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c70:	4c82      	ldr	r4, [pc, #520]	; (8001e7c <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001e84 <HAL_GPIO_Init+0x220>
 8001c76:	e04d      	b.n	8001d14 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7a:	f04f 0903 	mov.w	r9, #3
 8001c7e:	fa09 f902 	lsl.w	r9, r9, r2
 8001c82:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	68cf      	ldr	r7, [r1, #12]
 8001c88:	4097      	lsls	r7, r2
 8001c8a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001c8e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c90:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c92:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c96:	684f      	ldr	r7, [r1, #4]
 8001c98:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001c9c:	409f      	lsls	r7, r3
 8001c9e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001ca2:	6047      	str	r7, [r0, #4]
 8001ca4:	e046      	b.n	8001d34 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	f04f 0e00 	mov.w	lr, #0
 8001caa:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001cae:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb2:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001cb6:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cbc:	684e      	ldr	r6, [r1, #4]
 8001cbe:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	bf0c      	ite	eq
 8001cc4:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cc8:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001ccc:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001cce:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd0:	684e      	ldr	r6, [r1, #4]
 8001cd2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	bf0c      	ite	eq
 8001cd8:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cdc:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001ce0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001ce2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	684e      	ldr	r6, [r1, #4]
 8001ce6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001cea:	bf0c      	ite	eq
 8001cec:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cf0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001cf4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf8:	684e      	ldr	r6, [r1, #4]
 8001cfa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	bf0c      	ite	eq
 8001d00:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d04:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001d08:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	3202      	adds	r2, #2
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	f000 80af 	beq.w	8001e72 <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001d14:	f04f 0e01 	mov.w	lr, #1
 8001d18:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1c:	680f      	ldr	r7, [r1, #0]
 8001d1e:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001d22:	ea3e 0607 	bics.w	r6, lr, r7
 8001d26:	d1f0      	bne.n	8001d0a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d28:	684f      	ldr	r7, [r1, #4]
 8001d2a:	f007 0703 	and.w	r7, r7, #3
 8001d2e:	3f01      	subs	r7, #1
 8001d30:	2f01      	cmp	r7, #1
 8001d32:	d9a1      	bls.n	8001c78 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d34:	684f      	ldr	r7, [r1, #4]
 8001d36:	f007 0703 	and.w	r7, r7, #3
 8001d3a:	2f03      	cmp	r7, #3
 8001d3c:	d027      	beq.n	8001d8e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001d3e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d40:	f04f 0e03 	mov.w	lr, #3
 8001d44:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d48:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	688f      	ldr	r7, [r1, #8]
 8001d4e:	4097      	lsls	r7, r2
 8001d50:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d54:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	684f      	ldr	r7, [r1, #4]
 8001d58:	f007 0703 	and.w	r7, r7, #3
 8001d5c:	2f02      	cmp	r7, #2
 8001d5e:	d116      	bne.n	8001d8e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001d64:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001d68:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6c:	f003 0907 	and.w	r9, r3, #7
 8001d70:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001d74:	f04f 0a0f 	mov.w	sl, #15
 8001d78:	fa0a fa09 	lsl.w	sl, sl, r9
 8001d7c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d80:	690f      	ldr	r7, [r1, #16]
 8001d82:	fa07 f709 	lsl.w	r7, r7, r9
 8001d86:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001d8e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d90:	f04f 0e03 	mov.w	lr, #3
 8001d94:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d98:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	684f      	ldr	r7, [r1, #4]
 8001d9e:	f007 0703 	and.w	r7, r7, #3
 8001da2:	4097      	lsls	r7, r2
 8001da4:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001da8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001daa:	684f      	ldr	r7, [r1, #4]
 8001dac:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001db0:	d0ab      	beq.n	8001d0a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2700      	movs	r7, #0
 8001db4:	9701      	str	r7, [sp, #4]
 8001db6:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001db8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001dbc:	646f      	str	r7, [r5, #68]	; 0x44
 8001dbe:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001dc0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001dc4:	9701      	str	r7, [sp, #4]
 8001dc6:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc8:	f023 0703 	bic.w	r7, r3, #3
 8001dcc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001dd0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001dd4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	f003 0e03 	and.w	lr, r3, #3
 8001ddc:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001de0:	f04f 0e0f 	mov.w	lr, #15
 8001de4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001de8:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dec:	4e24      	ldr	r6, [pc, #144]	; (8001e80 <HAL_GPIO_Init+0x21c>)
 8001dee:	42b0      	cmp	r0, r6
 8001df0:	f43f af59 	beq.w	8001ca6 <HAL_GPIO_Init+0x42>
 8001df4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001df8:	42b0      	cmp	r0, r6
 8001dfa:	d022      	beq.n	8001e42 <HAL_GPIO_Init+0x1de>
 8001dfc:	4540      	cmp	r0, r8
 8001dfe:	d023      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e00:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001e04:	42b0      	cmp	r0, r6
 8001e06:	d022      	beq.n	8001e4e <HAL_GPIO_Init+0x1ea>
 8001e08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e0c:	42b0      	cmp	r0, r6
 8001e0e:	d021      	beq.n	8001e54 <HAL_GPIO_Init+0x1f0>
 8001e10:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e14:	42b0      	cmp	r0, r6
 8001e16:	d020      	beq.n	8001e5a <HAL_GPIO_Init+0x1f6>
 8001e18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e1c:	42b0      	cmp	r0, r6
 8001e1e:	d01f      	beq.n	8001e60 <HAL_GPIO_Init+0x1fc>
 8001e20:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001e88 <HAL_GPIO_Init+0x224>
 8001e24:	4570      	cmp	r0, lr
 8001e26:	d01e      	beq.n	8001e66 <HAL_GPIO_Init+0x202>
 8001e28:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e2c:	4570      	cmp	r0, lr
 8001e2e:	d01d      	beq.n	8001e6c <HAL_GPIO_Init+0x208>
 8001e30:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e34:	4570      	cmp	r0, lr
 8001e36:	bf0c      	ite	eq
 8001e38:	f04f 0e09 	moveq.w	lr, #9
 8001e3c:	f04f 0e0a 	movne.w	lr, #10
 8001e40:	e733      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e42:	f04f 0e01 	mov.w	lr, #1
 8001e46:	e730      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e48:	f04f 0e02 	mov.w	lr, #2
 8001e4c:	e72d      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e4e:	f04f 0e03 	mov.w	lr, #3
 8001e52:	e72a      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e54:	f04f 0e04 	mov.w	lr, #4
 8001e58:	e727      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e5a:	f04f 0e05 	mov.w	lr, #5
 8001e5e:	e724      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e60:	f04f 0e06 	mov.w	lr, #6
 8001e64:	e721      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e66:	f04f 0e07 	mov.w	lr, #7
 8001e6a:	e71e      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e6c:	f04f 0e08 	mov.w	lr, #8
 8001e70:	e71b      	b.n	8001caa <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001e72:	b003      	add	sp, #12
 8001e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013c00 	.word	0x40013c00
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40021c00 	.word	0x40021c00

08001e8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	b10a      	cbz	r2, 8001e92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8e:	6181      	str	r1, [r0, #24]
 8001e90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	0409      	lsls	r1, r1, #16
 8001e94:	6181      	str	r1, [r0, #24]
  }
}
 8001e96:	4770      	bx	lr

08001e98 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e98:	b570      	push	{r4, r5, r6, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e9c:	2800      	cmp	r0, #0
 8001e9e:	f000 8090 	beq.w	8001fc2 <HAL_PCD_Init+0x12a>
 8001ea2:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ea4:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ea6:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001eaa:	b33b      	cbz	r3, 8001efc <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eac:	2303      	movs	r3, #3
 8001eae:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eb2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001eb4:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001eb8:	bf04      	itt	eq
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ebe:	6828      	ldr	r0, [r5, #0]
 8001ec0:	f000 feb7 	bl	8002c32 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec4:	462c      	mov	r4, r5
 8001ec6:	f854 6b10 	ldr.w	r6, [r4], #16
 8001eca:	46ec      	mov	ip, sp
 8001ecc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ece:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001edc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ee0:	1d2b      	adds	r3, r5, #4
 8001ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee4:	4630      	mov	r0, r6
 8001ee6:	f000 fe5f 	bl	8002ba8 <USB_CoreInit>
 8001eea:	4604      	mov	r4, r0
 8001eec:	b158      	cbz	r0, 8001f06 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ef4:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	b00a      	add	sp, #40	; 0x28
 8001efa:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001efc:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001f00:	f7fe fd5e 	bl	80009c0 <HAL_PCD_MspInit>
 8001f04:	e7d2      	b.n	8001eac <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f06:	2100      	movs	r1, #0
 8001f08:	6828      	ldr	r0, [r5, #0]
 8001f0a:	f000 fe98 	bl	8002c3e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0e:	6868      	ldr	r0, [r5, #4]
 8001f10:	b398      	cbz	r0, 8001f7a <HAL_PCD_Init+0xe2>
 8001f12:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001f14:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f18:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001f1a:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001f1e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001f22:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001f26:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f2a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2e:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f32:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f34:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f36:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001f3a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001f3e:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	4283      	cmp	r3, r0
 8001f46:	d3e8      	bcc.n	8001f1a <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8001f48:	2200      	movs	r2, #0
 8001f4a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f4e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001f52:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8001f56:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f5a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f5e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f62:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f66:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f6a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f72:	3401      	adds	r4, #1
 8001f74:	b2e4      	uxtb	r4, r4
 8001f76:	4284      	cmp	r4, r0
 8001f78:	d3e7      	bcc.n	8001f4a <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f7a:	462c      	mov	r4, r5
 8001f7c:	f854 6b10 	ldr.w	r6, [r4], #16
 8001f80:	46ec      	mov	ip, sp
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f92:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001f96:	1d2b      	adds	r3, r5, #4
 8001f98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f9a:	4630      	mov	r0, r6
 8001f9c:	f000 fed6 	bl	8002d4c <USB_DevInit>
 8001fa0:	4604      	mov	r4, r0
 8001fa2:	b120      	cbz	r0, 8001fae <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001faa:	2401      	movs	r4, #1
 8001fac:	e7a3      	b.n	8001ef6 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fba:	6828      	ldr	r0, [r5, #0]
 8001fbc:	f000 ff92 	bl	8002ee4 <USB_DevDisconnect>
  return HAL_OK;
 8001fc0:	e799      	b.n	8001ef6 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8001fc2:	2401      	movs	r4, #1
 8001fc4:	e797      	b.n	8001ef6 <HAL_PCD_Init+0x5e>
	...

08001fc8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	f000 81e1 	beq.w	8002390 <HAL_RCC_OscConfig+0x3c8>
{
 8001fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	6803      	ldr	r3, [r0, #0]
 8001fd8:	f013 0f01 	tst.w	r3, #1
 8001fdc:	d03b      	beq.n	8002056 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fde:	4b9f      	ldr	r3, [pc, #636]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d02c      	beq.n	8002044 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fea:	4b9c      	ldr	r3, [pc, #624]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d021      	beq.n	800203a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ff6:	6863      	ldr	r3, [r4, #4]
 8001ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffc:	d04f      	beq.n	800209e <HAL_RCC_OscConfig+0xd6>
 8001ffe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002002:	d052      	beq.n	80020aa <HAL_RCC_OscConfig+0xe2>
 8002004:	4b95      	ldr	r3, [pc, #596]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002014:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002016:	6863      	ldr	r3, [r4, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d050      	beq.n	80020be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe ff1a 	bl	8000e54 <HAL_GetTick>
 8002020:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4e8e      	ldr	r6, [pc, #568]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002024:	6833      	ldr	r3, [r6, #0]
 8002026:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800202a:	d114      	bne.n	8002056 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800202c:	f7fe ff12 	bl	8000e54 <HAL_GetTick>
 8002030:	1b40      	subs	r0, r0, r5
 8002032:	2864      	cmp	r0, #100	; 0x64
 8002034:	d9f6      	bls.n	8002024 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8002036:	2003      	movs	r0, #3
 8002038:	e1b1      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800203a:	4b88      	ldr	r3, [pc, #544]	; (800225c <HAL_RCC_OscConfig+0x294>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002042:	d0d8      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	4b85      	ldr	r3, [pc, #532]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800204c:	d003      	beq.n	8002056 <HAL_RCC_OscConfig+0x8e>
 800204e:	6863      	ldr	r3, [r4, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 819f 	beq.w	8002394 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	6823      	ldr	r3, [r4, #0]
 8002058:	f013 0f02 	tst.w	r3, #2
 800205c:	d054      	beq.n	8002108 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800205e:	4b7f      	ldr	r3, [pc, #508]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f013 0f0c 	tst.w	r3, #12
 8002066:	d03e      	beq.n	80020e6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002068:	4b7c      	ldr	r3, [pc, #496]	; (800225c <HAL_RCC_OscConfig+0x294>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002070:	2b08      	cmp	r3, #8
 8002072:	d033      	beq.n	80020dc <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002074:	68e3      	ldr	r3, [r4, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d068      	beq.n	800214c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800207a:	4b79      	ldr	r3, [pc, #484]	; (8002260 <HAL_RCC_OscConfig+0x298>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7fe fee8 	bl	8000e54 <HAL_GetTick>
 8002084:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002086:	4e75      	ldr	r6, [pc, #468]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002088:	6833      	ldr	r3, [r6, #0]
 800208a:	f013 0f02 	tst.w	r3, #2
 800208e:	d154      	bne.n	800213a <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002090:	f7fe fee0 	bl	8000e54 <HAL_GetTick>
 8002094:	1b40      	subs	r0, r0, r5
 8002096:	2802      	cmp	r0, #2
 8002098:	d9f6      	bls.n	8002088 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800209a:	2003      	movs	r0, #3
 800209c:	e17f      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	4a6f      	ldr	r2, [pc, #444]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80020a0:	6813      	ldr	r3, [r2, #0]
 80020a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	e7b5      	b.n	8002016 <HAL_RCC_OscConfig+0x4e>
 80020aa:	4b6c      	ldr	r3, [pc, #432]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e7ab      	b.n	8002016 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80020be:	f7fe fec9 	bl	8000e54 <HAL_GetTick>
 80020c2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c4:	4e65      	ldr	r6, [pc, #404]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80020c6:	6833      	ldr	r3, [r6, #0]
 80020c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020cc:	d0c3      	beq.n	8002056 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020ce:	f7fe fec1 	bl	8000e54 <HAL_GetTick>
 80020d2:	1b40      	subs	r0, r0, r5
 80020d4:	2864      	cmp	r0, #100	; 0x64
 80020d6:	d9f6      	bls.n	80020c6 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80020d8:	2003      	movs	r0, #3
 80020da:	e160      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020dc:	4b5f      	ldr	r3, [pc, #380]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020e4:	d1c6      	bne.n	8002074 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b5d      	ldr	r3, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f013 0f02 	tst.w	r3, #2
 80020ee:	d003      	beq.n	80020f8 <HAL_RCC_OscConfig+0x130>
 80020f0:	68e3      	ldr	r3, [r4, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	f040 8150 	bne.w	8002398 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f8:	4a58      	ldr	r2, [pc, #352]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80020fa:	6813      	ldr	r3, [r2, #0]
 80020fc:	6921      	ldr	r1, [r4, #16]
 80020fe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002102:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002106:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	f013 0f08 	tst.w	r3, #8
 800210e:	d042      	beq.n	8002196 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002110:	6963      	ldr	r3, [r4, #20]
 8002112:	b36b      	cbz	r3, 8002170 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002114:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_RCC_OscConfig+0x298>)
 8002116:	2201      	movs	r2, #1
 8002118:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe fe9a 	bl	8000e54 <HAL_GetTick>
 8002120:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4e4e      	ldr	r6, [pc, #312]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002124:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002126:	f013 0f02 	tst.w	r3, #2
 800212a:	d134      	bne.n	8002196 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800212c:	f7fe fe92 	bl	8000e54 <HAL_GetTick>
 8002130:	1b40      	subs	r0, r0, r5
 8002132:	2802      	cmp	r0, #2
 8002134:	d9f6      	bls.n	8002124 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8002136:	2003      	movs	r0, #3
 8002138:	e131      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4a48      	ldr	r2, [pc, #288]	; (800225c <HAL_RCC_OscConfig+0x294>)
 800213c:	6813      	ldr	r3, [r2, #0]
 800213e:	6921      	ldr	r1, [r4, #16]
 8002140:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002144:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	e7dd      	b.n	8002108 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800214c:	4b44      	ldr	r3, [pc, #272]	; (8002260 <HAL_RCC_OscConfig+0x298>)
 800214e:	2200      	movs	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002152:	f7fe fe7f 	bl	8000e54 <HAL_GetTick>
 8002156:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002158:	4e40      	ldr	r6, [pc, #256]	; (800225c <HAL_RCC_OscConfig+0x294>)
 800215a:	6833      	ldr	r3, [r6, #0]
 800215c:	f013 0f02 	tst.w	r3, #2
 8002160:	d0d2      	beq.n	8002108 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe fe77 	bl	8000e54 <HAL_GetTick>
 8002166:	1b40      	subs	r0, r0, r5
 8002168:	2802      	cmp	r0, #2
 800216a:	d9f6      	bls.n	800215a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800216c:	2003      	movs	r0, #3
 800216e:	e116      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002170:	4b3b      	ldr	r3, [pc, #236]	; (8002260 <HAL_RCC_OscConfig+0x298>)
 8002172:	2200      	movs	r2, #0
 8002174:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe fe6c 	bl	8000e54 <HAL_GetTick>
 800217c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800217e:	4e37      	ldr	r6, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x294>)
 8002180:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002182:	f013 0f02 	tst.w	r3, #2
 8002186:	d006      	beq.n	8002196 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fe64 	bl	8000e54 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
 800218e:	2802      	cmp	r0, #2
 8002190:	d9f6      	bls.n	8002180 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8002192:	2003      	movs	r0, #3
 8002194:	e103      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	6823      	ldr	r3, [r4, #0]
 8002198:	f013 0f04 	tst.w	r3, #4
 800219c:	d076      	beq.n	800228c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800219e:	4b2f      	ldr	r3, [pc, #188]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021a6:	d133      	bne.n	8002210 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80021ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021c0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_OscConfig+0x29c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021ca:	d023      	beq.n	8002214 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021cc:	68a3      	ldr	r3, [r4, #8]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d034      	beq.n	800223c <HAL_RCC_OscConfig+0x274>
 80021d2:	2b05      	cmp	r3, #5
 80021d4:	d038      	beq.n	8002248 <HAL_RCC_OscConfig+0x280>
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_RCC_OscConfig+0x294>)
 80021d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	671a      	str	r2, [r3, #112]	; 0x70
 80021e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021e2:	f022 0204 	bic.w	r2, r2, #4
 80021e6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021e8:	68a3      	ldr	r3, [r4, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d03c      	beq.n	8002268 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe fe31 	bl	8000e54 <HAL_GetTick>
 80021f2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f4:	4f19      	ldr	r7, [pc, #100]	; (800225c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021fc:	f013 0f02 	tst.w	r3, #2
 8002200:	d143      	bne.n	800228a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fe27 	bl	8000e54 <HAL_GetTick>
 8002206:	1b80      	subs	r0, r0, r6
 8002208:	4540      	cmp	r0, r8
 800220a:	d9f6      	bls.n	80021fa <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
 800220e:	e0c6      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8002210:	2500      	movs	r5, #0
 8002212:	e7d6      	b.n	80021c2 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002214:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_RCC_OscConfig+0x29c>)
 8002216:	6813      	ldr	r3, [r2, #0]
 8002218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800221e:	f7fe fe19 	bl	8000e54 <HAL_GetTick>
 8002222:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002224:	4f0f      	ldr	r7, [pc, #60]	; (8002264 <HAL_RCC_OscConfig+0x29c>)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	f413 7f80 	tst.w	r3, #256	; 0x100
 800222c:	d1ce      	bne.n	80021cc <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222e:	f7fe fe11 	bl	8000e54 <HAL_GetTick>
 8002232:	1b80      	subs	r0, r0, r6
 8002234:	2802      	cmp	r0, #2
 8002236:	d9f6      	bls.n	8002226 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8002238:	2003      	movs	r0, #3
 800223a:	e0b0      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	4a07      	ldr	r2, [pc, #28]	; (800225c <HAL_RCC_OscConfig+0x294>)
 800223e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	; 0x70
 8002246:	e7cf      	b.n	80021e8 <HAL_RCC_OscConfig+0x220>
 8002248:	4b04      	ldr	r3, [pc, #16]	; (800225c <HAL_RCC_OscConfig+0x294>)
 800224a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800224c:	f042 0204 	orr.w	r2, r2, #4
 8002250:	671a      	str	r2, [r3, #112]	; 0x70
 8002252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	671a      	str	r2, [r3, #112]	; 0x70
 800225a:	e7c5      	b.n	80021e8 <HAL_RCC_OscConfig+0x220>
 800225c:	40023800 	.word	0x40023800
 8002260:	42470000 	.word	0x42470000
 8002264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002268:	f7fe fdf4 	bl	8000e54 <HAL_GetTick>
 800226c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226e:	4f52      	ldr	r7, [pc, #328]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002276:	f013 0f02 	tst.w	r3, #2
 800227a:	d006      	beq.n	800228a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800227c:	f7fe fdea 	bl	8000e54 <HAL_GetTick>
 8002280:	1b80      	subs	r0, r0, r6
 8002282:	4540      	cmp	r0, r8
 8002284:	d9f6      	bls.n	8002274 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002286:	2003      	movs	r0, #3
 8002288:	e089      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800228a:	b9ed      	cbnz	r5, 80022c8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228c:	69a3      	ldr	r3, [r4, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	f000 8084 	beq.w	800239c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002294:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 8002296:	6892      	ldr	r2, [r2, #8]
 8002298:	f002 020c 	and.w	r2, r2, #12
 800229c:	2a08      	cmp	r2, #8
 800229e:	d051      	beq.n	8002344 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d017      	beq.n	80022d4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a4:	4b45      	ldr	r3, [pc, #276]	; (80023bc <HAL_RCC_OscConfig+0x3f4>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fdd3 	bl	8000e54 <HAL_GetTick>
 80022ae:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b0:	4d41      	ldr	r5, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 80022b2:	682b      	ldr	r3, [r5, #0]
 80022b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022b8:	d042      	beq.n	8002340 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ba:	f7fe fdcb 	bl	8000e54 <HAL_GetTick>
 80022be:	1b00      	subs	r0, r0, r4
 80022c0:	2802      	cmp	r0, #2
 80022c2:	d9f6      	bls.n	80022b2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80022c4:	2003      	movs	r0, #3
 80022c6:	e06a      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c8:	4a3b      	ldr	r2, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 80022ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022d0:	6413      	str	r3, [r2, #64]	; 0x40
 80022d2:	e7db      	b.n	800228c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80022d4:	4b39      	ldr	r3, [pc, #228]	; (80023bc <HAL_RCC_OscConfig+0x3f4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80022da:	f7fe fdbb 	bl	8000e54 <HAL_GetTick>
 80022de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022e0:	4e35      	ldr	r6, [pc, #212]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 80022e2:	6833      	ldr	r3, [r6, #0]
 80022e4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022e8:	d006      	beq.n	80022f8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ea:	f7fe fdb3 	bl	8000e54 <HAL_GetTick>
 80022ee:	1b40      	subs	r0, r0, r5
 80022f0:	2802      	cmp	r0, #2
 80022f2:	d9f6      	bls.n	80022e2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80022f4:	2003      	movs	r0, #3
 80022f6:	e052      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80022f8:	69e3      	ldr	r3, [r4, #28]
 80022fa:	6a22      	ldr	r2, [r4, #32]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002300:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002304:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002306:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800230a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800230c:	0852      	lsrs	r2, r2, #1
 800230e:	3a01      	subs	r2, #1
 8002310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002314:	4a28      	ldr	r2, [pc, #160]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 8002316:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_RCC_OscConfig+0x3f4>)
 800231a:	2201      	movs	r2, #1
 800231c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800231e:	f7fe fd99 	bl	8000e54 <HAL_GetTick>
 8002322:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002324:	4d24      	ldr	r5, [pc, #144]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800232c:	d106      	bne.n	800233c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fd91 	bl	8000e54 <HAL_GetTick>
 8002332:	1b00      	subs	r0, r0, r4
 8002334:	2802      	cmp	r0, #2
 8002336:	d9f6      	bls.n	8002326 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002338:	2003      	movs	r0, #3
 800233a:	e030      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800233c:	2000      	movs	r0, #0
 800233e:	e02e      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
 8002340:	2000      	movs	r0, #0
 8002342:	e02c      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002344:	2b01      	cmp	r3, #1
 8002346:	d02d      	beq.n	80023a4 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCC_OscConfig+0x3f0>)
 800234a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800234c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002350:	69e2      	ldr	r2, [r4, #28]
 8002352:	4291      	cmp	r1, r2
 8002354:	d128      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	6a21      	ldr	r1, [r4, #32]
 800235c:	428a      	cmp	r2, r1
 800235e:	d125      	bne.n	80023ac <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002360:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002362:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002366:	401a      	ands	r2, r3
 8002368:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800236c:	d120      	bne.n	80023b0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800236e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002372:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002374:	0852      	lsrs	r2, r2, #1
 8002376:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002378:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800237c:	d11a      	bne.n	80023b4 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800237e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002380:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002384:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002388:	bf14      	ite	ne
 800238a:	2001      	movne	r0, #1
 800238c:	2000      	moveq	r0, #0
 800238e:	e006      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8002390:	2001      	movs	r0, #1
}
 8002392:	4770      	bx	lr
        return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
 8002396:	e002      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8002398:	2001      	movs	r0, #1
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 800239c:	2000      	movs	r0, #0
}
 800239e:	b002      	add	sp, #8
 80023a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e7fa      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e7f8      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
 80023ac:	2001      	movs	r0, #1
 80023ae:	e7f6      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
 80023b0:	2001      	movs	r0, #1
 80023b2:	e7f4      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
 80023b4:	2001      	movs	r0, #1
 80023b6:	e7f2      	b.n	800239e <HAL_RCC_OscConfig+0x3d6>
 80023b8:	40023800 	.word	0x40023800
 80023bc:	42470000 	.word	0x42470000

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c2:	4b31      	ldr	r3, [pc, #196]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d057      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0xbe>
 80023ce:	2b08      	cmp	r3, #8
 80023d0:	d157      	bne.n	8002482 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023e0:	d02a      	beq.n	8002438 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023e2:	4b29      	ldr	r3, [pc, #164]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80023ea:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80023ee:	ebb1 000c 	subs.w	r0, r1, ip
 80023f2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80023f6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80023fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023fe:	0181      	lsls	r1, r0, #6
 8002400:	1a09      	subs	r1, r1, r0
 8002402:	eb63 030e 	sbc.w	r3, r3, lr
 8002406:	00db      	lsls	r3, r3, #3
 8002408:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800240c:	00c9      	lsls	r1, r1, #3
 800240e:	eb11 0c0c 	adds.w	ip, r1, ip
 8002412:	f143 0300 	adc.w	r3, r3, #0
 8002416:	0259      	lsls	r1, r3, #9
 8002418:	2300      	movs	r3, #0
 800241a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800241e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002422:	f7fd ff45 	bl	80002b0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800242e:	3301      	adds	r3, #1
 8002430:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002432:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002436:	e025      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002438:	4b13      	ldr	r3, [pc, #76]	; (8002488 <HAL_RCC_GetSysClockFreq+0xc8>)
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002440:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002444:	ebb1 000c 	subs.w	r0, r1, ip
 8002448:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800244c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002450:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002454:	0181      	lsls	r1, r0, #6
 8002456:	1a09      	subs	r1, r1, r0
 8002458:	eb63 030e 	sbc.w	r3, r3, lr
 800245c:	00db      	lsls	r3, r3, #3
 800245e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002462:	00c9      	lsls	r1, r1, #3
 8002464:	eb11 0c0c 	adds.w	ip, r1, ip
 8002468:	f143 0300 	adc.w	r3, r3, #0
 800246c:	0299      	lsls	r1, r3, #10
 800246e:	2300      	movs	r3, #0
 8002470:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002474:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002478:	f7fd ff1a 	bl	80002b0 <__aeabi_uldivmod>
 800247c:	e7d3      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800247e:	4803      	ldr	r0, [pc, #12]	; (800248c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002480:	e000      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002484:	bd08      	pop	{r3, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	007a1200 	.word	0x007a1200
 8002490:	00f42400 	.word	0x00f42400

08002494 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002494:	2800      	cmp	r0, #0
 8002496:	f000 809d 	beq.w	80025d4 <HAL_RCC_ClockConfig+0x140>
{
 800249a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	460d      	mov	r5, r1
 80024a0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a2:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_ClockConfig+0x150>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	428b      	cmp	r3, r1
 80024ac:	d208      	bcs.n	80024c0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ae:	b2cb      	uxtb	r3, r1
 80024b0:	4a4c      	ldr	r2, [pc, #304]	; (80025e4 <HAL_RCC_ClockConfig+0x150>)
 80024b2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	428b      	cmp	r3, r1
 80024bc:	f040 808c 	bne.w	80025d8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	f013 0f02 	tst.w	r3, #2
 80024c6:	d017      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	f013 0f04 	tst.w	r3, #4
 80024cc:	d004      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ce:	4a46      	ldr	r2, [pc, #280]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 80024d0:	6893      	ldr	r3, [r2, #8]
 80024d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	6823      	ldr	r3, [r4, #0]
 80024da:	f013 0f08 	tst.w	r3, #8
 80024de:	d004      	beq.n	80024ea <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4a41      	ldr	r2, [pc, #260]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 80024e2:	6893      	ldr	r3, [r2, #8]
 80024e4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024e8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ea:	4a3f      	ldr	r2, [pc, #252]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 80024ec:	6893      	ldr	r3, [r2, #8]
 80024ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f2:	68a1      	ldr	r1, [r4, #8]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	f013 0f01 	tst.w	r3, #1
 80024fe:	d032      	beq.n	8002566 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002500:	6862      	ldr	r2, [r4, #4]
 8002502:	2a01      	cmp	r2, #1
 8002504:	d021      	beq.n	800254a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002506:	1e93      	subs	r3, r2, #2
 8002508:	2b01      	cmp	r3, #1
 800250a:	d925      	bls.n	8002558 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f013 0f02 	tst.w	r3, #2
 8002514:	d062      	beq.n	80025dc <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002516:	4934      	ldr	r1, [pc, #208]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 8002518:	688b      	ldr	r3, [r1, #8]
 800251a:	f023 0303 	bic.w	r3, r3, #3
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002522:	f7fe fc97 	bl	8000e54 <HAL_GetTick>
 8002526:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002528:	4f2f      	ldr	r7, [pc, #188]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	6862      	ldr	r2, [r4, #4]
 8002536:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800253a:	d014      	beq.n	8002566 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253c:	f7fe fc8a 	bl	8000e54 <HAL_GetTick>
 8002540:	1b80      	subs	r0, r0, r6
 8002542:	4540      	cmp	r0, r8
 8002544:	d9f3      	bls.n	800252e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002546:	2003      	movs	r0, #3
 8002548:	e042      	b.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002552:	d1e0      	bne.n	8002516 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002554:	2001      	movs	r0, #1
 8002556:	e03b      	b.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002560:	d1d9      	bne.n	8002516 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002562:	2001      	movs	r0, #1
 8002564:	e034      	b.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_ClockConfig+0x150>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	42ab      	cmp	r3, r5
 8002570:	d907      	bls.n	8002582 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002572:	b2ea      	uxtb	r2, r5
 8002574:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_ClockConfig+0x150>)
 8002576:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	42ab      	cmp	r3, r5
 8002580:	d12e      	bne.n	80025e0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	f013 0f04 	tst.w	r3, #4
 8002588:	d006      	beq.n	8002598 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800258a:	4a17      	ldr	r2, [pc, #92]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 800258c:	6893      	ldr	r3, [r2, #8]
 800258e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002592:	68e1      	ldr	r1, [r4, #12]
 8002594:	430b      	orrs	r3, r1
 8002596:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f013 0f08 	tst.w	r3, #8
 800259e:	d007      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 80025a2:	6893      	ldr	r3, [r2, #8]
 80025a4:	6921      	ldr	r1, [r4, #16]
 80025a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025aa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025ae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b0:	f7ff ff06 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <HAL_RCC_ClockConfig+0x154>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025bc:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_ClockConfig+0x158>)
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	40d8      	lsrs	r0, r3
 80025c2:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x15c>)
 80025c4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <HAL_RCC_ClockConfig+0x160>)
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	f7fe fa3d 	bl	8000a48 <HAL_InitTick>
  return HAL_OK;
 80025ce:	2000      	movs	r0, #0
}
 80025d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80025d4:	2001      	movs	r0, #1
}
 80025d6:	4770      	bx	lr
      return HAL_ERROR;
 80025d8:	2001      	movs	r0, #1
 80025da:	e7f9      	b.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80025dc:	2001      	movs	r0, #1
 80025de:	e7f7      	b.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80025e0:	2001      	movs	r0, #1
 80025e2:	e7f5      	b.n	80025d0 <HAL_RCC_ClockConfig+0x13c>
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	0800fe14 	.word	0x0800fe14
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000008 	.word	0x20000008

080025f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80025f8:	4b01      	ldr	r3, [pc, #4]	; (8002600 <HAL_RCC_GetHCLKFreq+0x8>)
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800260c:	4a03      	ldr	r2, [pc, #12]	; (800261c <HAL_RCC_GetPCLK1Freq+0x18>)
 800260e:	5cd3      	ldrb	r3, [r2, r3]
 8002610:	4a03      	ldr	r2, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002612:	6810      	ldr	r0, [r2, #0]
}
 8002614:	40d8      	lsrs	r0, r3
 8002616:	4770      	bx	lr
 8002618:	40023800 	.word	0x40023800
 800261c:	0800fe24 	.word	0x0800fe24
 8002620:	20000000 	.word	0x20000000

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002624:	4b04      	ldr	r3, [pc, #16]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800262c:	4a03      	ldr	r2, [pc, #12]	; (800263c <HAL_RCC_GetPCLK2Freq+0x18>)
 800262e:	5cd3      	ldrb	r3, [r2, r3]
 8002630:	4a03      	ldr	r2, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002632:	6810      	ldr	r0, [r2, #0]
}
 8002634:	40d8      	lsrs	r0, r3
 8002636:	4770      	bx	lr
 8002638:	40023800 	.word	0x40023800
 800263c:	0800fe24 	.word	0x0800fe24
 8002640:	20000000 	.word	0x20000000

08002644 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002644:	230f      	movs	r3, #15
 8002646:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_GetClockConfig+0x34>)
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	f002 0203 	and.w	r2, r2, #3
 8002650:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002658:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002660:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	08db      	lsrs	r3, r3, #3
 8002666:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800266a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCC_GetClockConfig+0x38>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 030f 	and.w	r3, r3, #15
 8002674:	600b      	str	r3, [r1, #0]
}
 8002676:	4770      	bx	lr
 8002678:	40023800 	.word	0x40023800
 800267c:	40023c00 	.word	0x40023c00

08002680 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002680:	4770      	bx	lr
	...

08002684 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002684:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b01      	cmp	r3, #1
 800268c:	d137      	bne.n	80026fe <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800268e:	2302      	movs	r3, #2
 8002690:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002694:	6802      	ldr	r2, [r0, #0]
 8002696:	68d3      	ldr	r3, [r2, #12]
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800269e:	6803      	ldr	r3, [r0, #0]
 80026a0:	4a19      	ldr	r2, [pc, #100]	; (8002708 <HAL_TIM_Base_Start_IT+0x84>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d020      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d01d      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026ac:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d019      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d015      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d011      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026c4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d00d      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026cc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
 80026d4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026d8:	4293      	cmp	r3, r2
 80026da:	d005      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026e4:	2000      	movs	r0, #0
 80026e6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e8:	689a      	ldr	r2, [r3, #8]
 80026ea:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ee:	2a06      	cmp	r2, #6
 80026f0:	d007      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	f042 0201 	orr.w	r2, r2, #1
 80026f8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80026fa:	2000      	movs	r0, #0
 80026fc:	4770      	bx	lr
    return HAL_ERROR;
 80026fe:	2001      	movs	r0, #1
 8002700:	4770      	bx	lr
  return HAL_OK;
 8002702:	2000      	movs	r0, #0
}
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40010000 	.word	0x40010000

0800270c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270c:	4770      	bx	lr

0800270e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800270e:	4770      	bx	lr

08002710 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002710:	4770      	bx	lr

08002712 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002712:	4770      	bx	lr

08002714 <HAL_TIM_IRQHandler>:
{
 8002714:	b510      	push	{r4, lr}
 8002716:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002718:	6803      	ldr	r3, [r0, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	f012 0f02 	tst.w	r2, #2
 8002720:	d011      	beq.n	8002746 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	f012 0f02 	tst.w	r2, #2
 8002728:	d00d      	beq.n	8002746 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800272a:	f06f 0202 	mvn.w	r2, #2
 800272e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002730:	2301      	movs	r3, #1
 8002732:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002734:	6803      	ldr	r3, [r0, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	f013 0f03 	tst.w	r3, #3
 800273c:	d070      	beq.n	8002820 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800273e:	f7ff ffe6 	bl	800270e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	2300      	movs	r3, #0
 8002744:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	f012 0f04 	tst.w	r2, #4
 800274e:	d012      	beq.n	8002776 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	f012 0f04 	tst.w	r2, #4
 8002756:	d00e      	beq.n	8002776 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002758:	f06f 0204 	mvn.w	r2, #4
 800275c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800275e:	2302      	movs	r3, #2
 8002760:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	f413 7f40 	tst.w	r3, #768	; 0x300
 800276a:	d05f      	beq.n	800282c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff ffce 	bl	800270e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002772:	2300      	movs	r3, #0
 8002774:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	f012 0f08 	tst.w	r2, #8
 800277e:	d012      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	f012 0f08 	tst.w	r2, #8
 8002786:	d00e      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002788:	f06f 0208 	mvn.w	r2, #8
 800278c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278e:	2304      	movs	r3, #4
 8002790:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f013 0f03 	tst.w	r3, #3
 800279a:	d04e      	beq.n	800283a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ffb6 	bl	800270e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a2:	2300      	movs	r3, #0
 80027a4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	f012 0f10 	tst.w	r2, #16
 80027ae:	d012      	beq.n	80027d6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	f012 0f10 	tst.w	r2, #16
 80027b6:	d00e      	beq.n	80027d6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027b8:	f06f 0210 	mvn.w	r2, #16
 80027bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027be:	2308      	movs	r3, #8
 80027c0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80027ca:	d03d      	beq.n	8002848 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff ff9e 	bl	800270e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	2300      	movs	r3, #0
 80027d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	f012 0f01 	tst.w	r2, #1
 80027de:	d003      	beq.n	80027e8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	f012 0f01 	tst.w	r2, #1
 80027e6:	d136      	bne.n	8002856 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80027f8:	d134      	bne.n	8002864 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	691a      	ldr	r2, [r3, #16]
 80027fe:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002802:	d003      	beq.n	800280c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	f012 0f40 	tst.w	r2, #64	; 0x40
 800280a:	d132      	bne.n	8002872 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800280c:	6823      	ldr	r3, [r4, #0]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	f012 0f20 	tst.w	r2, #32
 8002814:	d003      	beq.n	800281e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	f012 0f20 	tst.w	r2, #32
 800281c:	d130      	bne.n	8002880 <HAL_TIM_IRQHandler+0x16c>
}
 800281e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002820:	f7ff ff74 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ff73 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
 800282a:	e78a      	b.n	8002742 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ff6d 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002832:	4620      	mov	r0, r4
 8002834:	f7ff ff6c 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
 8002838:	e79b      	b.n	8002772 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283a:	4620      	mov	r0, r4
 800283c:	f7ff ff66 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002840:	4620      	mov	r0, r4
 8002842:	f7ff ff65 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
 8002846:	e7ac      	b.n	80027a2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002848:	4620      	mov	r0, r4
 800284a:	f7ff ff5f 	bl	800270c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff ff5e 	bl	8002710 <HAL_TIM_PWM_PulseFinishedCallback>
 8002854:	e7bd      	b.n	80027d2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002856:	f06f 0201 	mvn.w	r2, #1
 800285a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800285c:	4620      	mov	r0, r4
 800285e:	f7fe f847 	bl	80008f0 <HAL_TIM_PeriodElapsedCallback>
 8002862:	e7c1      	b.n	80027e8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002864:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002868:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800286a:	4620      	mov	r0, r4
 800286c:	f000 f8c1 	bl	80029f2 <HAL_TIMEx_BreakCallback>
 8002870:	e7c3      	b.n	80027fa <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002872:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002876:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002878:	4620      	mov	r0, r4
 800287a:	f7ff ff4a 	bl	8002712 <HAL_TIM_TriggerCallback>
 800287e:	e7c5      	b.n	800280c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002880:	f06f 0220 	mvn.w	r2, #32
 8002884:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002886:	4620      	mov	r0, r4
 8002888:	f000 f8b2 	bl	80029f0 <HAL_TIMEx_CommutCallback>
}
 800288c:	e7c7      	b.n	800281e <HAL_TIM_IRQHandler+0x10a>
	...

08002890 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002890:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002892:	4a40      	ldr	r2, [pc, #256]	; (8002994 <TIM_Base_SetConfig+0x104>)
 8002894:	4290      	cmp	r0, r2
 8002896:	d05d      	beq.n	8002954 <TIM_Base_SetConfig+0xc4>
 8002898:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800289c:	d031      	beq.n	8002902 <TIM_Base_SetConfig+0x72>
 800289e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80028a2:	4290      	cmp	r0, r2
 80028a4:	d051      	beq.n	800294a <TIM_Base_SetConfig+0xba>
 80028a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028aa:	4290      	cmp	r0, r2
 80028ac:	d06d      	beq.n	800298a <TIM_Base_SetConfig+0xfa>
 80028ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028b2:	4290      	cmp	r0, r2
 80028b4:	d064      	beq.n	8002980 <TIM_Base_SetConfig+0xf0>
 80028b6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80028ba:	4290      	cmp	r0, r2
 80028bc:	d033      	beq.n	8002926 <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80028c2:	4290      	cmp	r0, r2
 80028c4:	d021      	beq.n	800290a <TIM_Base_SetConfig+0x7a>
 80028c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028ca:	4290      	cmp	r0, r2
 80028cc:	d01d      	beq.n	800290a <TIM_Base_SetConfig+0x7a>
 80028ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028d2:	4290      	cmp	r0, r2
 80028d4:	d019      	beq.n	800290a <TIM_Base_SetConfig+0x7a>
 80028d6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80028da:	4290      	cmp	r0, r2
 80028dc:	d015      	beq.n	800290a <TIM_Base_SetConfig+0x7a>
 80028de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028e2:	4290      	cmp	r0, r2
 80028e4:	d011      	beq.n	800290a <TIM_Base_SetConfig+0x7a>
 80028e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d00d      	beq.n	800290a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028f2:	694a      	ldr	r2, [r1, #20]
 80028f4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80028f6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028f8:	688b      	ldr	r3, [r1, #8]
 80028fa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028fc:	680b      	ldr	r3, [r1, #0]
 80028fe:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002900:	e03b      	b.n	800297a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002906:	684a      	ldr	r2, [r1, #4]
 8002908:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800290e:	68ca      	ldr	r2, [r1, #12]
 8002910:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002916:	694a      	ldr	r2, [r1, #20]
 8002918:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800291a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800291c:	688b      	ldr	r3, [r1, #8]
 800291e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002920:	680b      	ldr	r3, [r1, #0]
 8002922:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	e029      	b.n	800297a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800292a:	684a      	ldr	r2, [r1, #4]
 800292c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	68ca      	ldr	r2, [r1, #12]
 8002934:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800293a:	694a      	ldr	r2, [r1, #20]
 800293c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800293e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002940:	688b      	ldr	r3, [r1, #8]
 8002942:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002944:	680b      	ldr	r3, [r1, #0]
 8002946:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002948:	e015      	b.n	8002976 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800294a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800294e:	684a      	ldr	r2, [r1, #4]
 8002950:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002952:	e7da      	b.n	800290a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002958:	684a      	ldr	r2, [r1, #4]
 800295a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800295c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002960:	68ca      	ldr	r2, [r1, #12]
 8002962:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002968:	694a      	ldr	r2, [r1, #20]
 800296a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800296c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296e:	688b      	ldr	r3, [r1, #8]
 8002970:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002972:	680b      	ldr	r3, [r1, #0]
 8002974:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002976:	690b      	ldr	r3, [r1, #16]
 8002978:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800297a:	2301      	movs	r3, #1
 800297c:	6143      	str	r3, [r0, #20]
}
 800297e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002980:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002984:	684a      	ldr	r2, [r1, #4]
 8002986:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002988:	e7bf      	b.n	800290a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800298e:	684a      	ldr	r2, [r1, #4]
 8002990:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002992:	e7ba      	b.n	800290a <TIM_Base_SetConfig+0x7a>
 8002994:	40010000 	.word	0x40010000

08002998 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002998:	b340      	cbz	r0, 80029ec <HAL_TIM_Base_Init+0x54>
{
 800299a:	b510      	push	{r4, lr}
 800299c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800299e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029a2:	b1f3      	cbz	r3, 80029e2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	2302      	movs	r3, #2
 80029a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029aa:	4621      	mov	r1, r4
 80029ac:	f851 0b04 	ldr.w	r0, [r1], #4
 80029b0:	f7ff ff6e 	bl	8002890 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80029be:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80029c2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029c6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029d2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80029d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80029da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029de:	2000      	movs	r0, #0
}
 80029e0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80029e2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029e6:	f7ff fe4b 	bl	8002680 <HAL_TIM_Base_MspInit>
 80029ea:	e7db      	b.n	80029a4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
}
 80029ee:	4770      	bx	lr

080029f0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f2:	4770      	bx	lr

080029f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029f4:	b538      	push	{r3, r4, r5, lr}
 80029f6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029f8:	6802      	ldr	r2, [r0, #0]
 80029fa:	6913      	ldr	r3, [r2, #16]
 80029fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a00:	68c1      	ldr	r1, [r0, #12]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002a06:	6801      	ldr	r1, [r0, #0]
 8002a08:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a0a:	6883      	ldr	r3, [r0, #8]
 8002a0c:	6900      	ldr	r0, [r0, #16]
 8002a0e:	4303      	orrs	r3, r0
 8002a10:	6960      	ldr	r0, [r4, #20]
 8002a12:	4303      	orrs	r3, r0
 8002a14:	69e0      	ldr	r0, [r4, #28]
 8002a16:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a18:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002a1c:	f022 020c 	bic.w	r2, r2, #12
 8002a20:	4313      	orrs	r3, r2
 8002a22:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a24:	6822      	ldr	r2, [r4, #0]
 8002a26:	6953      	ldr	r3, [r2, #20]
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	69a1      	ldr	r1, [r4, #24]
 8002a2e:	430b      	orrs	r3, r1
 8002a30:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	4a2e      	ldr	r2, [pc, #184]	; (8002af0 <UART_SetConfig+0xfc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d006      	beq.n	8002a48 <UART_SetConfig+0x54>
 8002a3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d002      	beq.n	8002a48 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a42:	f7ff fddf 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 8002a46:	e001      	b.n	8002a4c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a48:	f7ff fdec 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4c:	69e3      	ldr	r3, [r4, #28]
 8002a4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a52:	d024      	beq.n	8002a9e <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a54:	2100      	movs	r1, #0
 8002a56:	1803      	adds	r3, r0, r0
 8002a58:	4149      	adcs	r1, r1
 8002a5a:	181b      	adds	r3, r3, r0
 8002a5c:	f141 0100 	adc.w	r1, r1, #0
 8002a60:	00c9      	lsls	r1, r1, #3
 8002a62:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	1818      	adds	r0, r3, r0
 8002a6a:	6863      	ldr	r3, [r4, #4]
 8002a6c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002a70:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002a74:	f141 0100 	adc.w	r1, r1, #0
 8002a78:	f7fd fc1a 	bl	80002b0 <__aeabi_uldivmod>
 8002a7c:	6821      	ldr	r1, [r4, #0]
 8002a7e:	4a1d      	ldr	r2, [pc, #116]	; (8002af4 <UART_SetConfig+0x100>)
 8002a80:	fba2 4300 	umull	r4, r3, r2, r0
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	2464      	movs	r4, #100	; 0x64
 8002a88:	fb04 0013 	mls	r0, r4, r3, r0
 8002a8c:	0100      	lsls	r0, r0, #4
 8002a8e:	3032      	adds	r0, #50	; 0x32
 8002a90:	fba2 2000 	umull	r2, r0, r2, r0
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002a9a:	6088      	str	r0, [r1, #8]
  }
}
 8002a9c:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	1802      	adds	r2, r0, r0
 8002aa2:	eb43 0103 	adc.w	r1, r3, r3
 8002aa6:	1812      	adds	r2, r2, r0
 8002aa8:	f141 0100 	adc.w	r1, r1, #0
 8002aac:	00c9      	lsls	r1, r1, #3
 8002aae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ab2:	00d2      	lsls	r2, r2, #3
 8002ab4:	1810      	adds	r0, r2, r0
 8002ab6:	f141 0100 	adc.w	r1, r1, #0
 8002aba:	6862      	ldr	r2, [r4, #4]
 8002abc:	1892      	adds	r2, r2, r2
 8002abe:	415b      	adcs	r3, r3
 8002ac0:	f7fd fbf6 	bl	80002b0 <__aeabi_uldivmod>
 8002ac4:	4d0b      	ldr	r5, [pc, #44]	; (8002af4 <UART_SetConfig+0x100>)
 8002ac6:	fba5 3200 	umull	r3, r2, r5, r0
 8002aca:	0951      	lsrs	r1, r2, #5
 8002acc:	2364      	movs	r3, #100	; 0x64
 8002ace:	fb03 0311 	mls	r3, r3, r1, r0
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	3332      	adds	r3, #50	; 0x32
 8002ad6:	fba5 2303 	umull	r2, r3, r5, r3
 8002ada:	6820      	ldr	r0, [r4, #0]
 8002adc:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002ae0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002ae4:	091b      	lsrs	r3, r3, #4
 8002ae6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002aea:	4413      	add	r3, r2
 8002aec:	6083      	str	r3, [r0, #8]
 8002aee:	e7d5      	b.n	8002a9c <UART_SetConfig+0xa8>
 8002af0:	40011000 	.word	0x40011000
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <HAL_UART_Init>:
  if (huart == NULL)
 8002af8:	b358      	cbz	r0, 8002b52 <HAL_UART_Init+0x5a>
{
 8002afa:	b510      	push	{r4, lr}
 8002afc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002afe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b02:	b30b      	cbz	r3, 8002b48 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b04:	2324      	movs	r3, #36	; 0x24
 8002b06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	68d3      	ldr	r3, [r2, #12]
 8002b0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b12:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b14:	4620      	mov	r0, r4
 8002b16:	f7ff ff6d 	bl	80029f4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	6913      	ldr	r3, [r2, #16]
 8002b1e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b22:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b24:	6822      	ldr	r2, [r4, #0]
 8002b26:	6953      	ldr	r3, [r2, #20]
 8002b28:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002b2c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002b2e:	6822      	ldr	r2, [r4, #0]
 8002b30:	68d3      	ldr	r3, [r2, #12]
 8002b32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b36:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b38:	2000      	movs	r0, #0
 8002b3a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b42:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002b46:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b48:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002b4c:	f7fd ff00 	bl	8000950 <HAL_UART_MspInit>
 8002b50:	e7d8      	b.n	8002b04 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002b52:	2001      	movs	r0, #1
}
 8002b54:	4770      	bx	lr
	...

08002b58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b58:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002b5e:	4a11      	ldr	r2, [pc, #68]	; (8002ba4 <USB_CoreReset+0x4c>)
    count++;
 8002b60:	9b01      	ldr	r3, [sp, #4]
 8002b62:	3301      	adds	r3, #1
 8002b64:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002b66:	9b01      	ldr	r3, [sp, #4]
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d815      	bhi.n	8002b98 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b6c:	6903      	ldr	r3, [r0, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	daf6      	bge.n	8002b60 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002b72:	2300      	movs	r3, #0
 8002b74:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b76:	6903      	ldr	r3, [r0, #16]
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002b7e:	4a09      	ldr	r2, [pc, #36]	; (8002ba4 <USB_CoreReset+0x4c>)
    count++;
 8002b80:	9b01      	ldr	r3, [sp, #4]
 8002b82:	3301      	adds	r3, #1
 8002b84:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002b86:	9b01      	ldr	r3, [sp, #4]
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d808      	bhi.n	8002b9e <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b8c:	6903      	ldr	r3, [r0, #16]
 8002b8e:	f013 0f01 	tst.w	r3, #1
 8002b92:	d1f5      	bne.n	8002b80 <USB_CoreReset+0x28>

  return HAL_OK;
 8002b94:	2000      	movs	r0, #0
 8002b96:	e000      	b.n	8002b9a <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002b98:	2003      	movs	r0, #3
}
 8002b9a:	b002      	add	sp, #8
 8002b9c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	e7fb      	b.n	8002b9a <USB_CoreReset+0x42>
 8002ba2:	bf00      	nop
 8002ba4:	00030d40 	.word	0x00030d40

08002ba8 <USB_CoreInit>:
{
 8002ba8:	b084      	sub	sp, #16
 8002baa:	b510      	push	{r4, lr}
 8002bac:	4604      	mov	r4, r0
 8002bae:	a803      	add	r0, sp, #12
 8002bb0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bb4:	9b08      	ldr	r3, [sp, #32]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d11f      	bne.n	8002bfa <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bc2:	68e3      	ldr	r3, [r4, #12]
 8002bc4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bcc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bce:	68e3      	ldr	r3, [r4, #12]
 8002bd0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002bd4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002bd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d009      	beq.n	8002bf0 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ffbb 	bl	8002b58 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002be2:	9b06      	ldr	r3, [sp, #24]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d01b      	beq.n	8002c20 <USB_CoreInit+0x78>
}
 8002be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bec:	b004      	add	sp, #16
 8002bee:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bf0:	68e3      	ldr	r3, [r4, #12]
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf6:	60e3      	str	r3, [r4, #12]
 8002bf8:	e7f0      	b.n	8002bdc <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002bfa:	68e3      	ldr	r3, [r4, #12]
 8002bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c00:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff ffa8 	bl	8002b58 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002c08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c0a:	b923      	cbnz	r3, 8002c16 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c12:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c14:	e7e5      	b.n	8002be2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c16:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c1c:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c1e:	e7e0      	b.n	8002be2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c20:	68a3      	ldr	r3, [r4, #8]
 8002c22:	f043 0306 	orr.w	r3, r3, #6
 8002c26:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c28:	68a3      	ldr	r3, [r4, #8]
 8002c2a:	f043 0320 	orr.w	r3, r3, #32
 8002c2e:	60a3      	str	r3, [r4, #8]
 8002c30:	e7da      	b.n	8002be8 <USB_CoreInit+0x40>

08002c32 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c32:	6883      	ldr	r3, [r0, #8]
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6083      	str	r3, [r0, #8]
}
 8002c3a:	2000      	movs	r0, #0
 8002c3c:	4770      	bx	lr

08002c3e <USB_SetCurrentMode>:
{
 8002c3e:	b570      	push	{r4, r5, r6, lr}
 8002c40:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c42:	68c3      	ldr	r3, [r0, #12]
 8002c44:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002c48:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002c4a:	2901      	cmp	r1, #1
 8002c4c:	d015      	beq.n	8002c7a <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8002c4e:	bb29      	cbnz	r1, 8002c9c <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c50:	68c3      	ldr	r3, [r0, #12]
 8002c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c56:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002c58:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002c5a:	2601      	movs	r6, #1
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f7fe f8ff 	bl	8000e60 <HAL_Delay>
      ms++;
 8002c62:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002c64:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c66:	f013 0f01 	tst.w	r3, #1
 8002c6a:	d001      	beq.n	8002c70 <USB_SetCurrentMode+0x32>
 8002c6c:	2c32      	cmp	r4, #50	; 0x32
 8002c6e:	d1f5      	bne.n	8002c5c <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002c70:	2c32      	cmp	r4, #50	; 0x32
 8002c72:	bf14      	ite	ne
 8002c74:	2000      	movne	r0, #0
 8002c76:	2001      	moveq	r0, #1
}
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c7a:	68c3      	ldr	r3, [r0, #12]
 8002c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c80:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002c82:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002c84:	2601      	movs	r6, #1
 8002c86:	4630      	mov	r0, r6
 8002c88:	f7fe f8ea 	bl	8000e60 <HAL_Delay>
      ms++;
 8002c8c:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002c8e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002c90:	f013 0f01 	tst.w	r3, #1
 8002c94:	d1ec      	bne.n	8002c70 <USB_SetCurrentMode+0x32>
 8002c96:	2c32      	cmp	r4, #50	; 0x32
 8002c98:	d1f5      	bne.n	8002c86 <USB_SetCurrentMode+0x48>
 8002c9a:	e7e9      	b.n	8002c70 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	e7eb      	b.n	8002c78 <USB_SetCurrentMode+0x3a>

08002ca0 <USB_FlushTxFifo>:
{
 8002ca0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002ca6:	4a11      	ldr	r2, [pc, #68]	; (8002cec <USB_FlushTxFifo+0x4c>)
    count++;
 8002ca8:	9b01      	ldr	r3, [sp, #4]
 8002caa:	3301      	adds	r3, #1
 8002cac:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cae:	9b01      	ldr	r3, [sp, #4]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d815      	bhi.n	8002ce0 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cb4:	6903      	ldr	r3, [r0, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	daf6      	bge.n	8002ca8 <USB_FlushTxFifo+0x8>
  count = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002cbe:	0189      	lsls	r1, r1, #6
 8002cc0:	f041 0120 	orr.w	r1, r1, #32
 8002cc4:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8002cc6:	4a09      	ldr	r2, [pc, #36]	; (8002cec <USB_FlushTxFifo+0x4c>)
    count++;
 8002cc8:	9b01      	ldr	r3, [sp, #4]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cce:	9b01      	ldr	r3, [sp, #4]
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d808      	bhi.n	8002ce6 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002cd4:	6903      	ldr	r3, [r0, #16]
 8002cd6:	f013 0f20 	tst.w	r3, #32
 8002cda:	d1f5      	bne.n	8002cc8 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e000      	b.n	8002ce2 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002ce0:	2003      	movs	r0, #3
}
 8002ce2:	b002      	add	sp, #8
 8002ce4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e7fb      	b.n	8002ce2 <USB_FlushTxFifo+0x42>
 8002cea:	bf00      	nop
 8002cec:	00030d40 	.word	0x00030d40

08002cf0 <USB_FlushRxFifo>:
{
 8002cf0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cf6:	4a10      	ldr	r2, [pc, #64]	; (8002d38 <USB_FlushRxFifo+0x48>)
    count++;
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cfe:	9b01      	ldr	r3, [sp, #4]
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d813      	bhi.n	8002d2c <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d04:	6903      	ldr	r3, [r0, #16]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	daf6      	bge.n	8002cf8 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d0e:	2310      	movs	r3, #16
 8002d10:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002d12:	4a09      	ldr	r2, [pc, #36]	; (8002d38 <USB_FlushRxFifo+0x48>)
    count++;
 8002d14:	9b01      	ldr	r3, [sp, #4]
 8002d16:	3301      	adds	r3, #1
 8002d18:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d1a:	9b01      	ldr	r3, [sp, #4]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d808      	bhi.n	8002d32 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d20:	6903      	ldr	r3, [r0, #16]
 8002d22:	f013 0f10 	tst.w	r3, #16
 8002d26:	d1f5      	bne.n	8002d14 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002d28:	2000      	movs	r0, #0
 8002d2a:	e000      	b.n	8002d2e <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002d2c:	2003      	movs	r0, #3
}
 8002d2e:	b002      	add	sp, #8
 8002d30:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002d32:	2003      	movs	r0, #3
 8002d34:	e7fb      	b.n	8002d2e <USB_FlushRxFifo+0x3e>
 8002d36:	bf00      	nop
 8002d38:	00030d40 	.word	0x00030d40

08002d3c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002d3c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002d40:	4319      	orrs	r1, r3
 8002d42:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002d46:	2000      	movs	r0, #0
 8002d48:	4770      	bx	lr
	...

08002d4c <USB_DevInit>:
{
 8002d4c:	b084      	sub	sp, #16
 8002d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d52:	4604      	mov	r4, r0
 8002d54:	a809      	add	r0, sp, #36	; 0x24
 8002d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002d5a:	460d      	mov	r5, r1
 8002d5c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002d5e:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002d60:	4619      	mov	r1, r3
 8002d62:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002d66:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002d6a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	2b0f      	cmp	r3, #15
 8002d70:	d1f7      	bne.n	8002d62 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8002d72:	bb26      	cbnz	r6, 8002dbe <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d74:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002d78:	f043 0302 	orr.w	r3, r3, #2
 8002d7c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d82:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d86:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d88:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d8e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d96:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002d9e:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002da2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002da6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002daa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d114      	bne.n	8002dda <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002db0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002db2:	b96b      	cbnz	r3, 8002dd0 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002db4:	2100      	movs	r1, #0
 8002db6:	4620      	mov	r0, r4
 8002db8:	f7ff ffc0 	bl	8002d3c <USB_SetDevSpeed>
 8002dbc:	e011      	b.n	8002de2 <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dc4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002dc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002dcc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002dce:	e7e3      	b.n	8002d98 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f7ff ffb2 	bl	8002d3c <USB_SetDevSpeed>
 8002dd8:	e003      	b.n	8002de2 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dda:	2103      	movs	r1, #3
 8002ddc:	4620      	mov	r0, r4
 8002dde:	f7ff ffad 	bl	8002d3c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002de2:	2110      	movs	r1, #16
 8002de4:	4620      	mov	r0, r4
 8002de6:	f7ff ff5b 	bl	8002ca0 <USB_FlushTxFifo>
 8002dea:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dec:	4620      	mov	r0, r4
 8002dee:	f7ff ff7f 	bl	8002cf0 <USB_FlushRxFifo>
 8002df2:	ea48 0800 	orr.w	r8, r8, r0
 8002df6:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 8002dfa:	bf14      	ite	ne
 8002dfc:	f04f 0e01 	movne.w	lr, #1
 8002e00:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e08:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e0a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	d03f      	beq.n	8002e90 <USB_DevInit+0x144>
 8002e10:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8002e14:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e16:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e18:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e1c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e20:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002e24:	e00a      	b.n	8002e3c <USB_DevInit+0xf0>
      if (i == 0U)
 8002e26:	b182      	cbz	r2, 8002e4a <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e28:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e2c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e30:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e34:	3201      	adds	r2, #1
 8002e36:	3320      	adds	r3, #32
 8002e38:	4295      	cmp	r5, r2
 8002e3a:	d009      	beq.n	8002e50 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	2800      	cmp	r0, #0
 8002e42:	dbf0      	blt.n	8002e26 <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e44:	f8c3 c000 	str.w	ip, [r3]
 8002e48:	e7f0      	b.n	8002e2c <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e4a:	f8c3 a000 	str.w	sl, [r3]
 8002e4e:	e7ed      	b.n	8002e2c <USB_DevInit+0xe0>
 8002e50:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e54:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e56:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e58:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e5c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e60:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002e64:	e00a      	b.n	8002e7c <USB_DevInit+0x130>
      if (i == 0U)
 8002e66:	b182      	cbz	r2, 8002e8a <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e68:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e6c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e70:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e74:	3201      	adds	r2, #1
 8002e76:	3320      	adds	r3, #32
 8002e78:	4295      	cmp	r5, r2
 8002e7a:	d009      	beq.n	8002e90 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	2800      	cmp	r0, #0
 8002e82:	dbf0      	blt.n	8002e66 <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e84:	f8c3 c000 	str.w	ip, [r3]
 8002e88:	e7f0      	b.n	8002e6c <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e8a:	f8c3 a000 	str.w	sl, [r3]
 8002e8e:	e7ed      	b.n	8002e6c <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e96:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e9c:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002ea0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ea4:	b91b      	cbnz	r3, 8002eae <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002ea6:	69a3      	ldr	r3, [r4, #24]
 8002ea8:	f043 0310 	orr.w	r3, r3, #16
 8002eac:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002eae:	69a2      	ldr	r2, [r4, #24]
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <USB_DevInit+0x194>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002eb8:	b11b      	cbz	r3, 8002ec2 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eba:	69a3      	ldr	r3, [r4, #24]
 8002ebc:	f043 0308 	orr.w	r3, r3, #8
 8002ec0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002ec2:	2e01      	cmp	r6, #1
 8002ec4:	d004      	beq.n	8002ed0 <USB_DevInit+0x184>
}
 8002ec6:	4670      	mov	r0, lr
 8002ec8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ecc:	b004      	add	sp, #16
 8002ece:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ed0:	69a3      	ldr	r3, [r4, #24]
 8002ed2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ed6:	f043 0304 	orr.w	r3, r3, #4
 8002eda:	61a3      	str	r3, [r4, #24]
 8002edc:	e7f3      	b.n	8002ec6 <USB_DevInit+0x17a>
 8002ede:	bf00      	nop
 8002ee0:	803c3800 	.word	0x803c3800

08002ee4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002ee4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002ee8:	f023 0303 	bic.w	r3, r3, #3
 8002eec:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ef0:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002efc:	2000      	movs	r0, #0
 8002efe:	4770      	bx	lr

08002f00 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8002f00:	4770      	bx	lr
	...

08002f04 <MX_LWIP_Init>:
{
 8002f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f06:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 8002f08:	4e37      	ldr	r6, [pc, #220]	; (8002fe8 <MX_LWIP_Init+0xe4>)
 8002f0a:	21a9      	movs	r1, #169	; 0xa9
 8002f0c:	7031      	strb	r1, [r6, #0]
  IP_ADDRESS[1] = 254;
 8002f0e:	22fe      	movs	r2, #254	; 0xfe
 8002f10:	7072      	strb	r2, [r6, #1]
  IP_ADDRESS[2] = 101;
 8002f12:	2365      	movs	r3, #101	; 0x65
 8002f14:	70b3      	strb	r3, [r6, #2]
  IP_ADDRESS[3] = 15;
 8002f16:	200f      	movs	r0, #15
 8002f18:	70f0      	strb	r0, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 8002f1a:	4d34      	ldr	r5, [pc, #208]	; (8002fec <MX_LWIP_Init+0xe8>)
 8002f1c:	20ff      	movs	r0, #255	; 0xff
 8002f1e:	7028      	strb	r0, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8002f20:	7068      	strb	r0, [r5, #1]
  NETMASK_ADDRESS[2] = 0;
 8002f22:	2700      	movs	r7, #0
 8002f24:	70af      	strb	r7, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 8002f26:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 8002f28:	4c31      	ldr	r4, [pc, #196]	; (8002ff0 <MX_LWIP_Init+0xec>)
 8002f2a:	7021      	strb	r1, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 8002f2c:	7062      	strb	r2, [r4, #1]
  GATEWAY_ADDRESS[2] = 101;
 8002f2e:	70a3      	strb	r3, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	70e3      	strb	r3, [r4, #3]
  tcpip_init( NULL, NULL );
 8002f34:	4639      	mov	r1, r7
 8002f36:	4638      	mov	r0, r7
 8002f38:	f004 fc74 	bl	8007824 <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002f3c:	7833      	ldrb	r3, [r6, #0]
 8002f3e:	7872      	ldrb	r2, [r6, #1]
 8002f40:	f896 c003 	ldrb.w	ip, [r6, #3]
 8002f44:	78b0      	ldrb	r0, [r6, #2]
 8002f46:	492b      	ldr	r1, [pc, #172]	; (8002ff4 <MX_LWIP_Init+0xf0>)
 8002f48:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8002f4c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002f50:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f54:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f56:	782b      	ldrb	r3, [r5, #0]
 8002f58:	7868      	ldrb	r0, [r5, #1]
 8002f5a:	78ee      	ldrb	r6, [r5, #3]
 8002f5c:	78ad      	ldrb	r5, [r5, #2]
 8002f5e:	4a26      	ldr	r2, [pc, #152]	; (8002ff8 <MX_LWIP_Init+0xf4>)
 8002f60:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002f64:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002f68:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f6c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f6e:	7820      	ldrb	r0, [r4, #0]
 8002f70:	7865      	ldrb	r5, [r4, #1]
 8002f72:	78e6      	ldrb	r6, [r4, #3]
 8002f74:	78a4      	ldrb	r4, [r4, #2]
 8002f76:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <MX_LWIP_Init+0xf8>)
 8002f78:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8002f7c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8002f80:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002f84:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002f86:	4c1e      	ldr	r4, [pc, #120]	; (8003000 <MX_LWIP_Init+0xfc>)
 8002f88:	481e      	ldr	r0, [pc, #120]	; (8003004 <MX_LWIP_Init+0x100>)
 8002f8a:	9002      	str	r0, [sp, #8]
 8002f8c:	481e      	ldr	r0, [pc, #120]	; (8003008 <MX_LWIP_Init+0x104>)
 8002f8e:	9001      	str	r0, [sp, #4]
 8002f90:	9700      	str	r7, [sp, #0]
 8002f92:	4620      	mov	r0, r4
 8002f94:	f005 f8d4 	bl	8008140 <netif_add>
  netif_set_default(&gnetif);
 8002f98:	4620      	mov	r0, r4
 8002f9a:	f005 f969 	bl	8008270 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8002f9e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8002fa2:	f013 0f04 	tst.w	r3, #4
 8002fa6:	d01b      	beq.n	8002fe0 <MX_LWIP_Init+0xdc>
    netif_set_up(&gnetif);
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f005 f967 	bl	800827c <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002fae:	4d14      	ldr	r5, [pc, #80]	; (8003000 <MX_LWIP_Init+0xfc>)
 8002fb0:	4916      	ldr	r1, [pc, #88]	; (800300c <MX_LWIP_Init+0x108>)
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	f005 f9e2 	bl	800837c <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002fb8:	4c15      	ldr	r4, [pc, #84]	; (8003010 <MX_LWIP_Init+0x10c>)
 8002fba:	2220      	movs	r2, #32
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	1d20      	adds	r0, r4, #4
 8002fc0:	f00b ff13 	bl	800edea <memset>
  attributes.name = "EthLink";
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <MX_LWIP_Init+0x110>)
 8002fc6:	6023      	str	r3, [r4, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8002fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fcc:	6163      	str	r3, [r4, #20]
  attributes.priority = osPriorityBelowNormal;
 8002fce:	2310      	movs	r3, #16
 8002fd0:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	4810      	ldr	r0, [pc, #64]	; (8003018 <MX_LWIP_Init+0x114>)
 8002fd8:	f000 fb82 	bl	80036e0 <osThreadNew>
}
 8002fdc:	b005      	add	sp, #20
 8002fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8002fe0:	4807      	ldr	r0, [pc, #28]	; (8003000 <MX_LWIP_Init+0xfc>)
 8002fe2:	f005 f969 	bl	80082b8 <netif_set_down>
 8002fe6:	e7e2      	b.n	8002fae <MX_LWIP_Init+0xaa>
 8002fe8:	20000654 	.word	0x20000654
 8002fec:	20000658 	.word	0x20000658
 8002ff0:	20000650 	.word	0x20000650
 8002ff4:	200006b8 	.word	0x200006b8
 8002ff8:	200006bc 	.word	0x200006bc
 8002ffc:	200006b4 	.word	0x200006b4
 8003000:	20000680 	.word	0x20000680
 8003004:	08007785 	.word	0x08007785
 8003008:	080031e5 	.word	0x080031e5
 800300c:	08002f01 	.word	0x08002f01
 8003010:	2000065c 	.word	0x2000065c
 8003014:	0800fe2c 	.word	0x0800fe2c
 8003018:	08003505 	.word	0x08003505

0800301c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800301c:	2000      	movs	r0, #0
 800301e:	4770      	bx	lr

08003020 <ethernetif_input>:
{
 8003020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003024:	b083      	sub	sp, #12
 8003026:	4606      	mov	r6, r0
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003028:	4d12      	ldr	r5, [pc, #72]	; (8003074 <ethernetif_input+0x54>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 800302a:	4f13      	ldr	r7, [pc, #76]	; (8003078 <ethernetif_input+0x58>)
 800302c:	e010      	b.n	8003050 <ethernetif_input+0x30>
 800302e:	a901      	add	r1, sp, #4
 8003030:	4638      	mov	r0, r7
 8003032:	f7fe fbbb 	bl	80017ac <HAL_ETH_ReadData>
  return p;
 8003036:	9c01      	ldr	r4, [sp, #4]
        if (p != NULL)
 8003038:	b154      	cbz	r4, 8003050 <ethernetif_input+0x30>
          if (netif->input( p, netif) != ERR_OK )
 800303a:	6933      	ldr	r3, [r6, #16]
 800303c:	4631      	mov	r1, r6
 800303e:	4620      	mov	r0, r4
 8003040:	4798      	blx	r3
 8003042:	b990      	cbnz	r0, 800306a <ethernetif_input+0x4a>
  struct pbuf *p = NULL;
 8003044:	f8cd 9004 	str.w	r9, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003048:	f898 3000 	ldrb.w	r3, [r8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <ethernetif_input+0xe>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003050:	f04f 34ff 	mov.w	r4, #4294967295
 8003054:	4621      	mov	r1, r4
 8003056:	6828      	ldr	r0, [r5, #0]
 8003058:	f000 fc8a 	bl	8003970 <osSemaphoreAcquire>
 800305c:	2800      	cmp	r0, #0
 800305e:	d1f9      	bne.n	8003054 <ethernetif_input+0x34>
  struct pbuf *p = NULL;
 8003060:	f04f 0900 	mov.w	r9, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8003064:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800307c <ethernetif_input+0x5c>
 8003068:	e7ec      	b.n	8003044 <ethernetif_input+0x24>
            pbuf_free(p);
 800306a:	4620      	mov	r0, r4
 800306c:	f005 fa7e 	bl	800856c <pbuf_free>
      } while(p!=NULL);
 8003070:	e7e8      	b.n	8003044 <ethernetif_input+0x24>
 8003072:	bf00      	nop
 8003074:	20000824 	.word	0x20000824
 8003078:	20000864 	.word	0x20000864
 800307c:	20000820 	.word	0x20000820

08003080 <low_level_output>:
{
 8003080:	b530      	push	{r4, r5, lr}
 8003082:	b08d      	sub	sp, #52	; 0x34
 8003084:	460c      	mov	r4, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003086:	2230      	movs	r2, #48	; 0x30
 8003088:	2100      	movs	r1, #0
 800308a:	4668      	mov	r0, sp
 800308c:	f00b fead 	bl	800edea <memset>
  for(q = p; q != NULL; q = q->next)
 8003090:	b32c      	cbz	r4, 80030de <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 8003092:	6863      	ldr	r3, [r4, #4]
 8003094:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 8003096:	8963      	ldrh	r3, [r4, #10]
 8003098:	9301      	str	r3, [sp, #4]
    if(i>0)
 800309a:	a803      	add	r0, sp, #12
  for(q = p; q != NULL; q = q->next)
 800309c:	4621      	mov	r1, r4
    Txbuffer[i].len = q->len;
 800309e:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 80030a0:	2500      	movs	r5, #0
 80030a2:	e002      	b.n	80030aa <low_level_output+0x2a>
 80030a4:	300c      	adds	r0, #12
 80030a6:	3301      	adds	r3, #1
{
 80030a8:	4611      	mov	r1, r2
    if(q->next == NULL)
 80030aa:	680a      	ldr	r2, [r1, #0]
 80030ac:	b192      	cbz	r2, 80030d4 <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d030      	beq.n	8003114 <low_level_output+0x94>
    Txbuffer[i].buffer = q->payload;
 80030b2:	6851      	ldr	r1, [r2, #4]
 80030b4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80030b8:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80030bc:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 80030c0:	f84c 1c30 	str.w	r1, [ip, #-48]
    Txbuffer[i].len = q->len;
 80030c4:	8951      	ldrh	r1, [r2, #10]
 80030c6:	f84c 1c2c 	str.w	r1, [ip, #-44]
    if(i>0)
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0ea      	beq.n	80030a4 <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 80030ce:	f840 0c04 	str.w	r0, [r0, #-4]
 80030d2:	e7e7      	b.n	80030a4 <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 80030d4:	f840 5c04 	str.w	r5, [r0, #-4]
  for(q = p; q != NULL; q = q->next)
 80030d8:	680a      	ldr	r2, [r1, #0]
 80030da:	2a00      	cmp	r2, #0
 80030dc:	d1e7      	bne.n	80030ae <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 80030de:	4d0f      	ldr	r5, [pc, #60]	; (800311c <low_level_output+0x9c>)
 80030e0:	8923      	ldrh	r3, [r4, #8]
 80030e2:	606b      	str	r3, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 80030e4:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.pData = p;
 80030e8:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f005 fbc2 	bl	8008874 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 80030f0:	4629      	mov	r1, r5
 80030f2:	480b      	ldr	r0, [pc, #44]	; (8003120 <low_level_output+0xa0>)
 80030f4:	f7fe fb1e 	bl	8001734 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 80030f8:	4d0a      	ldr	r5, [pc, #40]	; (8003124 <low_level_output+0xa4>)
 80030fa:	f04f 34ff 	mov.w	r4, #4294967295
 80030fe:	4621      	mov	r1, r4
 8003100:	6828      	ldr	r0, [r5, #0]
 8003102:	f000 fc35 	bl	8003970 <osSemaphoreAcquire>
 8003106:	2800      	cmp	r0, #0
 8003108:	d1f9      	bne.n	80030fe <low_level_output+0x7e>
  HAL_ETH_ReleaseTxPacket(&heth);
 800310a:	4805      	ldr	r0, [pc, #20]	; (8003120 <low_level_output+0xa0>)
 800310c:	f7fe fbeb 	bl	80018e6 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003110:	2000      	movs	r0, #0
 8003112:	e001      	b.n	8003118 <low_level_output+0x98>
      return ERR_IF;
 8003114:	f06f 000b 	mvn.w	r0, #11
}
 8003118:	b00d      	add	sp, #52	; 0x34
 800311a:	bd30      	pop	{r4, r5, pc}
 800311c:	20000828 	.word	0x20000828
 8003120:	20000864 	.word	0x20000864
 8003124:	20000860 	.word	0x20000860

08003128 <pbuf_free_custom>:
{
 8003128:	b508      	push	{r3, lr}
 800312a:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800312c:	4807      	ldr	r0, [pc, #28]	; (800314c <pbuf_free_custom+0x24>)
 800312e:	f004 ff45 	bl	8007fbc <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <pbuf_free_custom+0x28>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b01      	cmp	r3, #1
 8003138:	d000      	beq.n	800313c <pbuf_free_custom+0x14>
}
 800313a:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <pbuf_free_custom+0x28>)
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003142:	4b04      	ldr	r3, [pc, #16]	; (8003154 <pbuf_free_custom+0x2c>)
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	f000 fc47 	bl	80039d8 <osSemaphoreRelease>
}
 800314a:	e7f6      	b.n	800313a <pbuf_free_custom+0x12>
 800314c:	0800fe90 	.word	0x0800fe90
 8003150:	20000820 	.word	0x20000820
 8003154:	20000824 	.word	0x20000824

08003158 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003158:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800315a:	f7fd fe7b 	bl	8000e54 <HAL_GetTick>
}
 800315e:	bd08      	pop	{r3, pc}

08003160 <ETH_PHY_IO_Init>:
{
 8003160:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003162:	4802      	ldr	r0, [pc, #8]	; (800316c <ETH_PHY_IO_Init+0xc>)
 8003164:	f7fe fd40 	bl	8001be8 <HAL_ETH_SetMDIOClockRange>
}
 8003168:	2000      	movs	r0, #0
 800316a:	bd08      	pop	{r3, pc}
 800316c:	20000864 	.word	0x20000864

08003170 <ETH_PHY_IO_ReadReg>:
{
 8003170:	b508      	push	{r3, lr}
 8003172:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003174:	460a      	mov	r2, r1
 8003176:	4601      	mov	r1, r0
 8003178:	4803      	ldr	r0, [pc, #12]	; (8003188 <ETH_PHY_IO_ReadReg+0x18>)
 800317a:	f7fe fc67 	bl	8001a4c <HAL_ETH_ReadPHYRegister>
 800317e:	3800      	subs	r0, #0
 8003180:	bf18      	it	ne
 8003182:	2001      	movne	r0, #1
}
 8003184:	4240      	negs	r0, r0
 8003186:	bd08      	pop	{r3, pc}
 8003188:	20000864 	.word	0x20000864

0800318c <ETH_PHY_IO_WriteReg>:
{
 800318c:	b508      	push	{r3, lr}
 800318e:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003190:	460a      	mov	r2, r1
 8003192:	4601      	mov	r1, r0
 8003194:	4803      	ldr	r0, [pc, #12]	; (80031a4 <ETH_PHY_IO_WriteReg+0x18>)
 8003196:	f7fe fc7f 	bl	8001a98 <HAL_ETH_WritePHYRegister>
 800319a:	3800      	subs	r0, #0
 800319c:	bf18      	it	ne
 800319e:	2001      	movne	r0, #1
}
 80031a0:	4240      	negs	r0, r0
 80031a2:	bd08      	pop	{r3, pc}
 80031a4:	20000864 	.word	0x20000864

080031a8 <HAL_ETH_RxCpltCallback>:
{
 80031a8:	b508      	push	{r3, lr}
  osSemaphoreRelease(RxPktSemaphore);
 80031aa:	4b02      	ldr	r3, [pc, #8]	; (80031b4 <HAL_ETH_RxCpltCallback+0xc>)
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	f000 fc13 	bl	80039d8 <osSemaphoreRelease>
}
 80031b2:	bd08      	pop	{r3, pc}
 80031b4:	20000824 	.word	0x20000824

080031b8 <HAL_ETH_TxCpltCallback>:
{
 80031b8:	b508      	push	{r3, lr}
  osSemaphoreRelease(TxPktSemaphore);
 80031ba:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_ETH_TxCpltCallback+0xc>)
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	f000 fc0b 	bl	80039d8 <osSemaphoreRelease>
}
 80031c2:	bd08      	pop	{r3, pc}
 80031c4:	20000860 	.word	0x20000860

080031c8 <HAL_ETH_ErrorCallback>:
{
 80031c8:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80031ca:	f7fe fd47 	bl	8001c5c <HAL_ETH_GetDMAError>
 80031ce:	f010 0f80 	tst.w	r0, #128	; 0x80
 80031d2:	d100      	bne.n	80031d6 <HAL_ETH_ErrorCallback+0xe>
}
 80031d4:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 80031d6:	4b02      	ldr	r3, [pc, #8]	; (80031e0 <HAL_ETH_ErrorCallback+0x18>)
 80031d8:	6818      	ldr	r0, [r3, #0]
 80031da:	f000 fbfd 	bl	80039d8 <osSemaphoreRelease>
}
 80031de:	e7f9      	b.n	80031d4 <HAL_ETH_ErrorCallback+0xc>
 80031e0:	20000824 	.word	0x20000824

080031e4 <ethernetif_init>:
{
 80031e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031e8:	b0a4      	sub	sp, #144	; 0x90
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80031ea:	4604      	mov	r4, r0
 80031ec:	2800      	cmp	r0, #0
 80031ee:	f000 80b0 	beq.w	8003352 <ethernetif_init+0x16e>
  netif->name[0] = IFNAME0;
 80031f2:	2373      	movs	r3, #115	; 0x73
 80031f4:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80031f8:	2374      	movs	r3, #116	; 0x74
 80031fa:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 80031fe:	4b63      	ldr	r3, [pc, #396]	; (800338c <ethernetif_init+0x1a8>)
 8003200:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8003202:	4b63      	ldr	r3, [pc, #396]	; (8003390 <ethernetif_init+0x1ac>)
 8003204:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8003206:	2264      	movs	r2, #100	; 0x64
 8003208:	2100      	movs	r1, #0
 800320a:	a80b      	add	r0, sp, #44	; 0x2c
 800320c:	f00b fded 	bl	800edea <memset>
  heth.Instance = ETH;
 8003210:	4e60      	ldr	r6, [pc, #384]	; (8003394 <ethernetif_init+0x1b0>)
 8003212:	4b61      	ldr	r3, [pc, #388]	; (8003398 <ethernetif_init+0x1b4>)
 8003214:	6033      	str	r3, [r6, #0]
  MACAddr[0] = 0x00;
 8003216:	2500      	movs	r5, #0
 8003218:	f88d 5000 	strb.w	r5, [sp]
  MACAddr[1] = 0x80;
 800321c:	2380      	movs	r3, #128	; 0x80
 800321e:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 8003222:	23e1      	movs	r3, #225	; 0xe1
 8003224:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 8003228:	f88d 5003 	strb.w	r5, [sp, #3]
  MACAddr[4] = 0x00;
 800322c:	f88d 5004 	strb.w	r5, [sp, #4]
  MACAddr[5] = 0x00;
 8003230:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003234:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003238:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800323c:	60b3      	str	r3, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800323e:	4b57      	ldr	r3, [pc, #348]	; (800339c <ethernetif_init+0x1b8>)
 8003240:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003242:	4b57      	ldr	r3, [pc, #348]	; (80033a0 <ethernetif_init+0x1bc>)
 8003244:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1536;
 8003246:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800324a:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800324c:	4630      	mov	r0, r6
 800324e:	f7fe f877 	bl	8001340 <HAL_ETH_Init>
 8003252:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003254:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80033cc <ethernetif_init+0x1e8>
 8003258:	2234      	movs	r2, #52	; 0x34
 800325a:	4629      	mov	r1, r5
 800325c:	f108 0004 	add.w	r0, r8, #4
 8003260:	f00b fdc3 	bl	800edea <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003264:	2321      	movs	r3, #33	; 0x21
 8003266:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800326a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800326e:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003272:	484c      	ldr	r0, [pc, #304]	; (80033a4 <ethernetif_init+0x1c0>)
 8003274:	f004 fe4e 	bl	8007f14 <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003278:	2306      	movs	r3, #6
 800327a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800327e:	6873      	ldr	r3, [r6, #4]
 8003280:	781a      	ldrb	r2, [r3, #0]
 8003282:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003286:	785a      	ldrb	r2, [r3, #1]
 8003288:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800328c:	789a      	ldrb	r2, [r3, #2]
 800328e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003292:	78da      	ldrb	r2, [r3, #3]
 8003294:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003298:	791a      	ldrb	r2, [r3, #4]
 800329a:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800329e:	795b      	ldrb	r3, [r3, #5]
 80032a0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80032a4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80032a8:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80032aa:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80032ae:	f043 030a 	orr.w	r3, r3, #10
 80032b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80032b6:	462a      	mov	r2, r5
 80032b8:	2101      	movs	r1, #1
 80032ba:	4608      	mov	r0, r1
 80032bc:	f000 fafa 	bl	80038b4 <osSemaphoreNew>
 80032c0:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <ethernetif_init+0x1c4>)
 80032c2:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80032c4:	462a      	mov	r2, r5
 80032c6:	2101      	movs	r1, #1
 80032c8:	4608      	mov	r0, r1
 80032ca:	f000 faf3 	bl	80038b4 <osSemaphoreNew>
 80032ce:	4b37      	ldr	r3, [pc, #220]	; (80033ac <ethernetif_init+0x1c8>)
 80032d0:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80032d2:	2220      	movs	r2, #32
 80032d4:	4629      	mov	r1, r5
 80032d6:	a803      	add	r0, sp, #12
 80032d8:	f00b fd87 	bl	800edea <memset>
  attributes.name = "EthIf";
 80032dc:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <ethernetif_init+0x1cc>)
 80032de:	9302      	str	r3, [sp, #8]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80032e0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80032e4:	9307      	str	r3, [sp, #28]
  attributes.priority = osPriorityRealtime;
 80032e6:	2330      	movs	r3, #48	; 0x30
 80032e8:	9308      	str	r3, [sp, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 80032ea:	aa02      	add	r2, sp, #8
 80032ec:	4621      	mov	r1, r4
 80032ee:	4831      	ldr	r0, [pc, #196]	; (80033b4 <ethernetif_init+0x1d0>)
 80032f0:	f000 f9f6 	bl	80036e0 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80032f4:	4d30      	ldr	r5, [pc, #192]	; (80033b8 <ethernetif_init+0x1d4>)
 80032f6:	4931      	ldr	r1, [pc, #196]	; (80033bc <ethernetif_init+0x1d8>)
 80032f8:	4628      	mov	r0, r5
 80032fa:	f7fd fc9a 	bl	8000c32 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 80032fe:	4628      	mov	r0, r5
 8003300:	f7fd fcb6 	bl	8000c70 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003304:	2f00      	cmp	r7, #0
 8003306:	d13a      	bne.n	800337e <ethernetif_init+0x19a>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003308:	4628      	mov	r0, r5
 800330a:	f7fd fd1d 	bl	8000d48 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800330e:	2801      	cmp	r0, #1
 8003310:	dd27      	ble.n	8003362 <ethernetif_init+0x17e>
      switch (PHYLinkState)
 8003312:	2804      	cmp	r0, #4
 8003314:	d02c      	beq.n	8003370 <ethernetif_init+0x18c>
 8003316:	2805      	cmp	r0, #5
 8003318:	d02e      	beq.n	8003378 <ethernetif_init+0x194>
 800331a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 800331e:	2803      	cmp	r0, #3
 8003320:	bf14      	ite	ne
 8003322:	f44f 6700 	movne.w	r7, #2048	; 0x800
 8003326:	2700      	moveq	r7, #0
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003328:	4d1a      	ldr	r5, [pc, #104]	; (8003394 <ethernetif_init+0x1b0>)
 800332a:	a90b      	add	r1, sp, #44	; 0x2c
 800332c:	4628      	mov	r0, r5
 800332e:	f7fe fbd8 	bl	8001ae2 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003332:	9711      	str	r7, [sp, #68]	; 0x44
    MACConf.Speed = speed;
 8003334:	9610      	str	r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003336:	a90b      	add	r1, sp, #44	; 0x2c
 8003338:	4628      	mov	r0, r5
 800333a:	f7fe fc46 	bl	8001bca <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800333e:	4628      	mov	r0, r5
 8003340:	f7fe f94e 	bl	80015e0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003344:	4620      	mov	r0, r4
 8003346:	f004 ff99 	bl	800827c <netif_set_up>
    netif_set_link_up(netif);
 800334a:	4620      	mov	r0, r4
 800334c:	f004 ffd4 	bl	80082f8 <netif_set_link_up>
 8003350:	e017      	b.n	8003382 <ethernetif_init+0x19e>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003352:	4b1b      	ldr	r3, [pc, #108]	; (80033c0 <ethernetif_init+0x1dc>)
 8003354:	f240 12e5 	movw	r2, #485	; 0x1e5
 8003358:	491a      	ldr	r1, [pc, #104]	; (80033c4 <ethernetif_init+0x1e0>)
 800335a:	481b      	ldr	r0, [pc, #108]	; (80033c8 <ethernetif_init+0x1e4>)
 800335c:	f00b fde2 	bl	800ef24 <iprintf>
 8003360:	e747      	b.n	80031f2 <ethernetif_init+0xe>
      netif_set_link_down(netif);
 8003362:	4620      	mov	r0, r4
 8003364:	f004 ffec 	bl	8008340 <netif_set_link_down>
      netif_set_down(netif);
 8003368:	4620      	mov	r0, r4
 800336a:	f004 ffa5 	bl	80082b8 <netif_set_down>
 800336e:	e008      	b.n	8003382 <ethernetif_init+0x19e>
        speed = ETH_SPEED_10M;
 8003370:	2600      	movs	r6, #0
        duplex = ETH_FULLDUPLEX_MODE;
 8003372:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8003376:	e7d7      	b.n	8003328 <ethernetif_init+0x144>
        speed = ETH_SPEED_10M;
 8003378:	2600      	movs	r6, #0
        duplex = ETH_HALFDUPLEX_MODE;
 800337a:	4637      	mov	r7, r6
 800337c:	e7d4      	b.n	8003328 <ethernetif_init+0x144>
    Error_Handler();
 800337e:	f7fd fac3 	bl	8000908 <Error_Handler>
}
 8003382:	2000      	movs	r0, #0
 8003384:	b024      	add	sp, #144	; 0x90
 8003386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800338a:	bf00      	nop
 800338c:	0800d8a1 	.word	0x0800d8a1
 8003390:	08003081 	.word	0x08003081
 8003394:	20000864 	.word	0x20000864
 8003398:	40028000 	.word	0x40028000
 800339c:	20000760 	.word	0x20000760
 80033a0:	200006c0 	.word	0x200006c0
 80033a4:	0800fe90 	.word	0x0800fe90
 80033a8:	20000824 	.word	0x20000824
 80033ac:	20000860 	.word	0x20000860
 80033b0:	0800fe88 	.word	0x0800fe88
 80033b4:	08003021 	.word	0x08003021
 80033b8:	20000800 	.word	0x20000800
 80033bc:	2000000c 	.word	0x2000000c
 80033c0:	0800fe34 	.word	0x0800fe34
 80033c4:	0800fe50 	.word	0x0800fe50
 80033c8:	0800fe60 	.word	0x0800fe60
 80033cc:	20000828 	.word	0x20000828

080033d0 <sys_now>:
{
 80033d0:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80033d2:	f7fd fd3f 	bl	8000e54 <HAL_GetTick>
}
 80033d6:	bd08      	pop	{r3, pc}

080033d8 <HAL_ETH_MspInit>:
{
 80033d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033da:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	2300      	movs	r3, #0
 80033de:	9307      	str	r3, [sp, #28]
 80033e0:	9308      	str	r3, [sp, #32]
 80033e2:	9309      	str	r3, [sp, #36]	; 0x24
 80033e4:	930a      	str	r3, [sp, #40]	; 0x28
 80033e6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80033e8:	6802      	ldr	r2, [r0, #0]
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <HAL_ETH_MspInit+0x118>)
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d001      	beq.n	80033f4 <HAL_ETH_MspInit+0x1c>
}
 80033f0:	b00d      	add	sp, #52	; 0x34
 80033f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80033f4:	2400      	movs	r4, #0
 80033f6:	9400      	str	r4, [sp, #0]
 80033f8:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800340a:	9200      	str	r2, [sp, #0]
 800340c:	9a00      	ldr	r2, [sp, #0]
 800340e:	9401      	str	r4, [sp, #4]
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003416:	631a      	str	r2, [r3, #48]	; 0x30
 8003418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800341e:	9201      	str	r2, [sp, #4]
 8003420:	9a01      	ldr	r2, [sp, #4]
 8003422:	9402      	str	r4, [sp, #8]
 8003424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003426:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
 800342c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003432:	9202      	str	r2, [sp, #8]
 8003434:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	9403      	str	r4, [sp, #12]
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	f042 0204 	orr.w	r2, r2, #4
 800343e:	631a      	str	r2, [r3, #48]	; 0x30
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	f002 0204 	and.w	r2, r2, #4
 8003446:	9203      	str	r2, [sp, #12]
 8003448:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	9404      	str	r4, [sp, #16]
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	631a      	str	r2, [r3, #48]	; 0x30
 8003454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003456:	f002 0201 	and.w	r2, r2, #1
 800345a:	9204      	str	r2, [sp, #16]
 800345c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	9405      	str	r4, [sp, #20]
 8003460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003462:	f042 0202 	orr.w	r2, r2, #2
 8003466:	631a      	str	r2, [r3, #48]	; 0x30
 8003468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346a:	f002 0202 	and.w	r2, r2, #2
 800346e:	9205      	str	r2, [sp, #20]
 8003470:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003472:	9406      	str	r4, [sp, #24]
 8003474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003476:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
 800347c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	9306      	str	r3, [sp, #24]
 8003484:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003486:	2332      	movs	r3, #50	; 0x32
 8003488:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800348a:	2702      	movs	r7, #2
 800348c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800348e:	2603      	movs	r6, #3
 8003490:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003492:	250b      	movs	r5, #11
 8003494:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003496:	a907      	add	r1, sp, #28
 8003498:	4816      	ldr	r0, [pc, #88]	; (80034f4 <HAL_ETH_MspInit+0x11c>)
 800349a:	f7fe fbe3 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800349e:	2386      	movs	r3, #134	; 0x86
 80034a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034a8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034aa:	a907      	add	r1, sp, #28
 80034ac:	4812      	ldr	r0, [pc, #72]	; (80034f8 <HAL_ETH_MspInit+0x120>)
 80034ae:	f7fe fbd9 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80034b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034b6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034be:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80034c0:	a907      	add	r1, sp, #28
 80034c2:	480e      	ldr	r0, [pc, #56]	; (80034fc <HAL_ETH_MspInit+0x124>)
 80034c4:	f7fe fbce 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80034c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80034cc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034d4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034d6:	a907      	add	r1, sp, #28
 80034d8:	4809      	ldr	r0, [pc, #36]	; (8003500 <HAL_ETH_MspInit+0x128>)
 80034da:	f7fe fbc3 	bl	8001c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80034de:	4622      	mov	r2, r4
 80034e0:	2105      	movs	r1, #5
 80034e2:	203d      	movs	r0, #61	; 0x3d
 80034e4:	f7fd fce2 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80034e8:	203d      	movs	r0, #61	; 0x3d
 80034ea:	f7fd fd15 	bl	8000f18 <HAL_NVIC_EnableIRQ>
}
 80034ee:	e77f      	b.n	80033f0 <HAL_ETH_MspInit+0x18>
 80034f0:	40028000 	.word	0x40028000
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40021800 	.word	0x40021800

08003504 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8003504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003508:	b09a      	sub	sp, #104	; 0x68
 800350a:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 800350c:	2264      	movs	r2, #100	; 0x64
 800350e:	2100      	movs	r1, #0
 8003510:	a801      	add	r0, sp, #4
 8003512:	f00b fc6a 	bl	800edea <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003516:	2700      	movs	r7, #0
 8003518:	46b8      	mov	r8, r7
 800351a:	46ba      	mov	sl, r7

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800351c:	4d29      	ldr	r5, [pc, #164]	; (80035c4 <ethernet_link_thread+0xc0>)
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_100M;
      linkchanged = 1;
      break;
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800351e:	f44f 6900 	mov.w	r9, #2048	; 0x800
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003522:	4e29      	ldr	r6, [pc, #164]	; (80035c8 <ethernet_link_thread+0xc4>)
 8003524:	e00b      	b.n	800353e <ethernet_link_thread+0x3a>
    HAL_ETH_Stop_IT(&heth);
 8003526:	4630      	mov	r0, r6
 8003528:	f7fe f8b6 	bl	8001698 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800352c:	4620      	mov	r0, r4
 800352e:	f004 fec3 	bl	80082b8 <netif_set_down>
    netif_set_link_down(netif);
 8003532:	4620      	mov	r0, r4
 8003534:	f004 ff04 	bl	8008340 <netif_set_link_down>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8003538:	2064      	movs	r0, #100	; 0x64
 800353a:	f000 f91d 	bl	8003778 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800353e:	4628      	mov	r0, r5
 8003540:	f7fd fc02 	bl	8000d48 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003544:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003548:	f013 0f04 	tst.w	r3, #4
 800354c:	d00b      	beq.n	8003566 <ethernet_link_thread+0x62>
 800354e:	2801      	cmp	r0, #1
 8003550:	dde9      	ble.n	8003526 <ethernet_link_thread+0x22>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003552:	f013 0f04 	tst.w	r3, #4
 8003556:	d1ef      	bne.n	8003538 <ethernet_link_thread+0x34>
    switch (PHYLinkState)
 8003558:	3802      	subs	r0, #2
 800355a:	2803      	cmp	r0, #3
 800355c:	d826      	bhi.n	80035ac <ethernet_link_thread+0xa8>
 800355e:	e8df f000 	tbb	[pc, r0]
 8003562:	0829      	.short	0x0829
 8003564:	222d      	.short	0x222d
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003566:	f013 0f04 	tst.w	r3, #4
 800356a:	d1e5      	bne.n	8003538 <ethernet_link_thread+0x34>
 800356c:	2801      	cmp	r0, #1
 800356e:	dde3      	ble.n	8003538 <ethernet_link_thread+0x34>
 8003570:	e7f2      	b.n	8003558 <ethernet_link_thread+0x54>
    switch (PHYLinkState)
 8003572:	2700      	movs	r7, #0
 8003574:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003578:	a901      	add	r1, sp, #4
 800357a:	4630      	mov	r0, r6
 800357c:	f7fe fab1 	bl	8001ae2 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003580:	9707      	str	r7, [sp, #28]
      MACConf.Speed = speed;
 8003582:	f8cd 8018 	str.w	r8, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003586:	a901      	add	r1, sp, #4
 8003588:	4630      	mov	r0, r6
 800358a:	f7fe fb1e 	bl	8001bca <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800358e:	4630      	mov	r0, r6
 8003590:	f7fd ffea 	bl	8001568 <HAL_ETH_Start>
      netif_set_up(netif);
 8003594:	4620      	mov	r0, r4
 8003596:	f004 fe71 	bl	800827c <netif_set_up>
      netif_set_link_up(netif);
 800359a:	4620      	mov	r0, r4
 800359c:	f004 feac 	bl	80082f8 <netif_set_link_up>
 80035a0:	f04f 0a01 	mov.w	sl, #1
 80035a4:	e7c8      	b.n	8003538 <ethernet_link_thread+0x34>
      duplex = ETH_HALFDUPLEX_MODE;
 80035a6:	2700      	movs	r7, #0
      speed = ETH_SPEED_10M;
 80035a8:	46b8      	mov	r8, r7
      break;
 80035aa:	e7e5      	b.n	8003578 <ethernet_link_thread+0x74>
    if(linkchanged)
 80035ac:	f1ba 0f00 	cmp.w	sl, #0
 80035b0:	d0c2      	beq.n	8003538 <ethernet_link_thread+0x34>
 80035b2:	e7e1      	b.n	8003578 <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80035b4:	464f      	mov	r7, r9
      speed = ETH_SPEED_100M;
 80035b6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80035ba:	e7dd      	b.n	8003578 <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80035bc:	464f      	mov	r7, r9
      speed = ETH_SPEED_10M;
 80035be:	f04f 0800 	mov.w	r8, #0
    if(linkchanged)
 80035c2:	e7d9      	b.n	8003578 <ethernet_link_thread+0x74>
 80035c4:	20000800 	.word	0x20000800
 80035c8:	20000864 	.word	0x20000864

080035cc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80035d2:	480e      	ldr	r0, [pc, #56]	; (800360c <HAL_ETH_RxAllocateCallback+0x40>)
 80035d4:	f004 fcc2 	bl	8007f5c <memp_malloc_pool>
  if (p)
 80035d8:	b188      	cbz	r0, 80035fe <HAL_ETH_RxAllocateCallback+0x32>
 80035da:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80035dc:	f100 0220 	add.w	r2, r0, #32
 80035e0:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80035e2:	4a0b      	ldr	r2, [pc, #44]	; (8003610 <HAL_ETH_RxAllocateCallback+0x44>)
 80035e4:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80035e6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80035ea:	9201      	str	r2, [sp, #4]
 80035ec:	6822      	ldr	r2, [r4, #0]
 80035ee:	9200      	str	r2, [sp, #0]
 80035f0:	2241      	movs	r2, #65	; 0x41
 80035f2:	2100      	movs	r1, #0
 80035f4:	4608      	mov	r0, r1
 80035f6:	f004 ff57 	bl	80084a8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80035fa:	b002      	add	sp, #8
 80035fc:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 80035fe:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_ETH_RxAllocateCallback+0x48>)
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003604:	2300      	movs	r3, #0
 8003606:	6023      	str	r3, [r4, #0]
}
 8003608:	e7f7      	b.n	80035fa <HAL_ETH_RxAllocateCallback+0x2e>
 800360a:	bf00      	nop
 800360c:	0800fe90 	.word	0x0800fe90
 8003610:	08003129 	.word	0x08003129
 8003614:	20000820 	.word	0x20000820

08003618 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003618:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800361a:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 800361e:	2500      	movs	r5, #0
 8003620:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003624:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 8003628:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 800362c:	6802      	ldr	r2, [r0, #0]
 800362e:	b162      	cbz	r2, 800364a <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003630:	680a      	ldr	r2, [r1, #0]
 8003632:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 8003634:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003636:	6802      	ldr	r2, [r0, #0]
 8003638:	b12a      	cbz	r2, 8003646 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 800363a:	8911      	ldrh	r1, [r2, #8]
 800363c:	4419      	add	r1, r3
 800363e:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	2a00      	cmp	r2, #0
 8003644:	d1f9      	bne.n	800363a <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003646:	bc30      	pop	{r4, r5}
 8003648:	4770      	bx	lr
    *ppStart = p;
 800364a:	6004      	str	r4, [r0, #0]
 800364c:	e7f2      	b.n	8003634 <HAL_ETH_RxLinkCallback+0x1c>

0800364e <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800364e:	b508      	push	{r3, lr}
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003650:	f004 ff8c 	bl	800856c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8003654:	bd08      	pop	{r3, pc}

08003656 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003656:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003658:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800365c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800365e:	f001 fdf5 	bl	800524c <xTaskGetSchedulerState>
 8003662:	2801      	cmp	r0, #1
 8003664:	d100      	bne.n	8003668 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003666:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8003668:	f002 f9dc 	bl	8005a24 <xPortSysTickHandler>
}
 800366c:	e7fb      	b.n	8003666 <SysTick_Handler+0x10>
	...

08003670 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003670:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003674:	b92b      	cbnz	r3, 8003682 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <osKernelInitialize+0x20>)
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	b928      	cbnz	r0, 8003688 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003680:	4770      	bx	lr
    stat = osErrorISR;
 8003682:	f06f 0005 	mvn.w	r0, #5
 8003686:	4770      	bx	lr
    } else {
      stat = osError;
 8003688:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20005b58 	.word	0x20005b58

08003694 <osKernelStart>:
 8003694:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003698:	b973      	cbnz	r3, 80036b8 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800369a:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <osKernelStart+0x30>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d10d      	bne.n	80036be <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80036a2:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a4:	2400      	movs	r4, #0
 80036a6:	4b08      	ldr	r3, [pc, #32]	; (80036c8 <osKernelStart+0x34>)
 80036a8:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <osKernelStart+0x30>)
 80036ac:	2202      	movs	r2, #2
 80036ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036b0:	f001 fafc 	bl	8004cac <vTaskStartScheduler>
      stat = osOK;
 80036b4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80036b6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80036b8:	f06f 0005 	mvn.w	r0, #5
 80036bc:	4770      	bx	lr
      stat = osError;
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
}
 80036c2:	4770      	bx	lr
 80036c4:	20005b58 	.word	0x20005b58
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80036cc:	b508      	push	{r3, lr}
 80036ce:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 80036d2:	b113      	cbz	r3, 80036da <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 80036d4:	f001 fb46 	bl	8004d64 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 80036d8:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 80036da:	f001 fb3d 	bl	8004d58 <xTaskGetTickCount>
  return (ticks);
 80036de:	e7fb      	b.n	80036d8 <osKernelGetTickCount+0xc>

080036e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e2:	b087      	sub	sp, #28
 80036e4:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036e6:	2200      	movs	r2, #0
 80036e8:	9205      	str	r2, [sp, #20]
 80036ea:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80036ee:	2a00      	cmp	r2, #0
 80036f0:	d13d      	bne.n	800376e <osThreadNew+0x8e>
 80036f2:	2800      	cmp	r0, #0
 80036f4:	d03b      	beq.n	800376e <osThreadNew+0x8e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 80036f6:	b35c      	cbz	r4, 8003750 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 80036f8:	69a3      	ldr	r3, [r4, #24]
 80036fa:	b12b      	cbz	r3, 8003708 <osThreadNew+0x28>
        prio = (UBaseType_t)attr->priority;
 80036fc:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036fe:	3b01      	subs	r3, #1
 8003700:	2b37      	cmp	r3, #55	; 0x37
 8003702:	d902      	bls.n	800370a <osThreadNew+0x2a>
        return (NULL);
 8003704:	2000      	movs	r0, #0
 8003706:	e033      	b.n	8003770 <osThreadNew+0x90>
 8003708:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800370a:	6863      	ldr	r3, [r4, #4]
 800370c:	f013 0f01 	tst.w	r3, #1
 8003710:	d130      	bne.n	8003774 <osThreadNew+0x94>
      }

      if (attr->stack_size > 0U) {
 8003712:	6963      	ldr	r3, [r4, #20]
 8003714:	b19b      	cbz	r3, 800373e <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003716:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8003718:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800371c:	68a6      	ldr	r6, [r4, #8]
 800371e:	b18e      	cbz	r6, 8003744 <osThreadNew+0x64>
 8003720:	68e7      	ldr	r7, [r4, #12]
 8003722:	2fbb      	cmp	r7, #187	; 0xbb
 8003724:	d923      	bls.n	800376e <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003726:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003728:	b30c      	cbz	r4, 800376e <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800372a:	b303      	cbz	r3, 800376e <osThreadNew+0x8e>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800372c:	9602      	str	r6, [sp, #8]
 800372e:	9401      	str	r4, [sp, #4]
 8003730:	9500      	str	r5, [sp, #0]
 8003732:	460b      	mov	r3, r1
 8003734:	4661      	mov	r1, ip
 8003736:	f001 fa4b 	bl	8004bd0 <xTaskCreateStatic>
 800373a:	9005      	str	r0, [sp, #20]
 800373c:	e017      	b.n	800376e <osThreadNew+0x8e>
    stack = configMINIMAL_STACK_SIZE;
 800373e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003742:	e7e9      	b.n	8003718 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003744:	68e3      	ldr	r3, [r4, #12]
 8003746:	b993      	cbnz	r3, 800376e <osThreadNew+0x8e>
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	4664      	mov	r4, ip
 800374c:	b97b      	cbnz	r3, 800376e <osThreadNew+0x8e>
 800374e:	e002      	b.n	8003756 <osThreadNew+0x76>
    prio  = (UBaseType_t)osPriorityNormal;
 8003750:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8003752:	f44f 7200 	mov.w	r2, #512	; 0x200
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003756:	ab05      	add	r3, sp, #20
 8003758:	9301      	str	r3, [sp, #4]
 800375a:	9500      	str	r5, [sp, #0]
 800375c:	460b      	mov	r3, r1
 800375e:	b292      	uxth	r2, r2
 8003760:	4621      	mov	r1, r4
 8003762:	f001 fa70 	bl	8004c46 <xTaskCreate>
 8003766:	2801      	cmp	r0, #1
            hTask = NULL;
 8003768:	bf1c      	itt	ne
 800376a:	2300      	movne	r3, #0
 800376c:	9305      	strne	r3, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800376e:	9805      	ldr	r0, [sp, #20]
}
 8003770:	b007      	add	sp, #28
 8003772:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (NULL);
 8003774:	2000      	movs	r0, #0
 8003776:	e7fb      	b.n	8003770 <osThreadNew+0x90>

08003778 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003778:	b508      	push	{r3, lr}
 800377a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800377e:	b933      	cbnz	r3, 800378e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003780:	b908      	cbnz	r0, 8003786 <osDelay+0xe>
    stat = osOK;
 8003782:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003784:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8003786:	f001 fc11 	bl	8004fac <vTaskDelay>
    stat = osOK;
 800378a:	2000      	movs	r0, #0
 800378c:	e7fa      	b.n	8003784 <osDelay+0xc>
    stat = osErrorISR;
 800378e:	f06f 0005 	mvn.w	r0, #5
 8003792:	e7f7      	b.n	8003784 <osDelay+0xc>

08003794 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003794:	b570      	push	{r4, r5, r6, lr}
 8003796:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800379a:	2e00      	cmp	r6, #0
 800379c:	d135      	bne.n	800380a <osMutexNew+0x76>
 800379e:	4604      	mov	r4, r0
    if (attr != NULL) {
 80037a0:	b370      	cbz	r0, 8003800 <osMutexNew+0x6c>
      type = attr->attr_bits;
 80037a2:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80037a4:	f013 0f08 	tst.w	r3, #8
 80037a8:	d132      	bne.n	8003810 <osMutexNew+0x7c>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80037aa:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 80037ae:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80037b0:	6881      	ldr	r1, [r0, #8]
 80037b2:	b121      	cbz	r1, 80037be <osMutexNew+0x2a>
 80037b4:	68c2      	ldr	r2, [r0, #12]
 80037b6:	2a4f      	cmp	r2, #79	; 0x4f
 80037b8:	d80d      	bhi.n	80037d6 <osMutexNew+0x42>
  hMutex = NULL;
 80037ba:	2500      	movs	r5, #0
 80037bc:	e026      	b.n	800380c <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80037be:	68c2      	ldr	r2, [r0, #12]
 80037c0:	2a00      	cmp	r2, #0
 80037c2:	d1fa      	bne.n	80037ba <osMutexNew+0x26>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80037c4:	b1e3      	cbz	r3, 8003800 <osMutexNew+0x6c>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80037c6:	2004      	movs	r0, #4
 80037c8:	f000 fcfa 	bl	80041c0 <xQueueCreateMutex>
 80037cc:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80037ce:	2d00      	cmp	r5, #0
 80037d0:	d0f3      	beq.n	80037ba <osMutexNew+0x26>
        if (attr != NULL) {
 80037d2:	b93c      	cbnz	r4, 80037e4 <osMutexNew+0x50>
 80037d4:	e007      	b.n	80037e6 <osMutexNew+0x52>
          if (rmtx != 0U) {
 80037d6:	b173      	cbz	r3, 80037f6 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80037d8:	2004      	movs	r0, #4
 80037da:	f000 fcfc 	bl	80041d6 <xQueueCreateMutexStatic>
 80037de:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80037e0:	2d00      	cmp	r5, #0
 80037e2:	d0ea      	beq.n	80037ba <osMutexNew+0x26>
          name = attr->name;
 80037e4:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80037e6:	4621      	mov	r1, r4
 80037e8:	4628      	mov	r0, r5
 80037ea:	f000 fffb 	bl	80047e4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80037ee:	b16e      	cbz	r6, 800380c <osMutexNew+0x78>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80037f0:	f045 0501 	orr.w	r5, r5, #1
 80037f4:	e00a      	b.n	800380c <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80037f6:	2001      	movs	r0, #1
 80037f8:	f000 fced 	bl	80041d6 <xQueueCreateMutexStatic>
 80037fc:	4605      	mov	r5, r0
 80037fe:	e7ef      	b.n	80037e0 <osMutexNew+0x4c>
              hMutex = xSemaphoreCreateMutex ();
 8003800:	2001      	movs	r0, #1
 8003802:	f000 fcdd 	bl	80041c0 <xQueueCreateMutex>
 8003806:	4605      	mov	r5, r0
 8003808:	e7e1      	b.n	80037ce <osMutexNew+0x3a>
  hMutex = NULL;
 800380a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800380c:	4628      	mov	r0, r5
 800380e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8003810:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8003812:	e7fb      	b.n	800380c <osMutexNew+0x78>

08003814 <osMutexAcquire>:
 8003814:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003818:	b9f2      	cbnz	r2, 8003858 <osMutexAcquire+0x44>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800381a:	b510      	push	{r4, lr}
 800381c:	4603      	mov	r3, r0
 800381e:	460c      	mov	r4, r1
 8003820:	f020 0001 	bic.w	r0, r0, #1
 8003824:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003828:	b1c8      	cbz	r0, 800385e <osMutexAcquire+0x4a>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800382a:	b153      	cbz	r3, 8003842 <osMutexAcquire+0x2e>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800382c:	f000 ff47 	bl	80046be <xQueueTakeMutexRecursive>
 8003830:	2801      	cmp	r0, #1
 8003832:	d017      	beq.n	8003864 <osMutexAcquire+0x50>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003834:	2c00      	cmp	r4, #0
 8003836:	bf14      	ite	ne
 8003838:	f06f 0001 	mvnne.w	r0, #1
 800383c:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003840:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003842:	f000 fe69 	bl	8004518 <xQueueSemaphoreTake>
 8003846:	2801      	cmp	r0, #1
 8003848:	d00e      	beq.n	8003868 <osMutexAcquire+0x54>
          stat = osErrorResource;
 800384a:	2c00      	cmp	r4, #0
 800384c:	bf14      	ite	ne
 800384e:	f06f 0001 	mvnne.w	r0, #1
 8003852:	f06f 0002 	mvneq.w	r0, #2
 8003856:	e7f3      	b.n	8003840 <osMutexAcquire+0x2c>
    stat = osErrorISR;
 8003858:	f06f 0005 	mvn.w	r0, #5
}
 800385c:	4770      	bx	lr
    stat = osErrorParameter;
 800385e:	f06f 0003 	mvn.w	r0, #3
 8003862:	e7ed      	b.n	8003840 <osMutexAcquire+0x2c>
  stat = osOK;
 8003864:	2000      	movs	r0, #0
 8003866:	e7eb      	b.n	8003840 <osMutexAcquire+0x2c>
 8003868:	2000      	movs	r0, #0
 800386a:	e7e9      	b.n	8003840 <osMutexAcquire+0x2c>

0800386c <osMutexRelease>:
 800386c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003870:	b9d2      	cbnz	r2, 80038a8 <osMutexRelease+0x3c>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003872:	b508      	push	{r3, lr}
 8003874:	4603      	mov	r3, r0
 8003876:	f020 0001 	bic.w	r0, r0, #1
 800387a:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800387e:	b1b0      	cbz	r0, 80038ae <osMutexRelease+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003880:	b13b      	cbz	r3, 8003892 <osMutexRelease+0x26>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003882:	f000 fcb7 	bl	80041f4 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 8003886:	2801      	cmp	r0, #1
 8003888:	bf0c      	ite	eq
 800388a:	2000      	moveq	r0, #0
 800388c:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003890:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003892:	2300      	movs	r3, #0
 8003894:	461a      	mov	r2, r3
 8003896:	4619      	mov	r1, r3
 8003898:	f000 fbba 	bl	8004010 <xQueueGenericSend>
        stat = osErrorResource;
 800389c:	2801      	cmp	r0, #1
 800389e:	bf0c      	ite	eq
 80038a0:	2000      	moveq	r0, #0
 80038a2:	f06f 0002 	mvnne.w	r0, #2
 80038a6:	e7f3      	b.n	8003890 <osMutexRelease+0x24>
    stat = osErrorISR;
 80038a8:	f06f 0005 	mvn.w	r0, #5
}
 80038ac:	4770      	bx	lr
    stat = osErrorParameter;
 80038ae:	f06f 0003 	mvn.w	r0, #3
 80038b2:	e7ed      	b.n	8003890 <osMutexRelease+0x24>

080038b4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80038b4:	b570      	push	{r4, r5, r6, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d138      	bne.n	8003932 <osSemaphoreNew+0x7e>
 80038c0:	460e      	mov	r6, r1
 80038c2:	4614      	mov	r4, r2
 80038c4:	2800      	cmp	r0, #0
 80038c6:	d038      	beq.n	800393a <osSemaphoreNew+0x86>
 80038c8:	4288      	cmp	r0, r1
 80038ca:	d338      	bcc.n	800393e <osSemaphoreNew+0x8a>
    mem = -1;

    if (attr != NULL) {
 80038cc:	2a00      	cmp	r2, #0
 80038ce:	d041      	beq.n	8003954 <osSemaphoreNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80038d0:	6895      	ldr	r5, [r2, #8]
 80038d2:	b125      	cbz	r5, 80038de <osSemaphoreNew+0x2a>
 80038d4:	68d3      	ldr	r3, [r2, #12]
 80038d6:	2b4f      	cmp	r3, #79	; 0x4f
 80038d8:	d833      	bhi.n	8003942 <osSemaphoreNew+0x8e>
  hSemaphore = NULL;
 80038da:	2500      	movs	r5, #0
 80038dc:	e02a      	b.n	8003934 <osSemaphoreNew+0x80>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80038de:	68d3      	ldr	r3, [r2, #12]
 80038e0:	bb43      	cbnz	r3, 8003934 <osSemaphoreNew+0x80>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80038e2:	2801      	cmp	r0, #1
 80038e4:	d13e      	bne.n	8003964 <osSemaphoreNew+0xb0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80038e6:	2203      	movs	r2, #3
 80038e8:	2100      	movs	r1, #0
 80038ea:	2001      	movs	r0, #1
 80038ec:	f000 fb27 	bl	8003f3e <xQueueGenericCreate>
 80038f0:	4605      	mov	r5, r0
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80038f2:	b1fd      	cbz	r5, 8003934 <osSemaphoreNew+0x80>
 80038f4:	b986      	cbnz	r6, 8003918 <osSemaphoreNew+0x64>
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 80038f6:	b104      	cbz	r4, 80038fa <osSemaphoreNew+0x46>
          name = attr->name;
 80038f8:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 80038fa:	4621      	mov	r1, r4
 80038fc:	4628      	mov	r0, r5
 80038fe:	f000 ff71 	bl	80047e4 <vQueueAddToRegistry>
 8003902:	e017      	b.n	8003934 <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003904:	2303      	movs	r3, #3
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	462b      	mov	r3, r5
 800390a:	2200      	movs	r2, #0
 800390c:	4611      	mov	r1, r2
 800390e:	2001      	movs	r0, #1
 8003910:	f000 fabd 	bl	8003e8e <xQueueGenericCreateStatic>
 8003914:	4605      	mov	r5, r0
 8003916:	e7ec      	b.n	80038f2 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003918:	2300      	movs	r3, #0
 800391a:	461a      	mov	r2, r3
 800391c:	4619      	mov	r1, r3
 800391e:	4628      	mov	r0, r5
 8003920:	f000 fb76 	bl	8004010 <xQueueGenericSend>
 8003924:	2801      	cmp	r0, #1
 8003926:	d0e6      	beq.n	80038f6 <osSemaphoreNew+0x42>
            vSemaphoreDelete (hSemaphore);
 8003928:	4628      	mov	r0, r5
 800392a:	f000 ff87 	bl	800483c <vQueueDelete>
            hSemaphore = NULL;
 800392e:	2500      	movs	r5, #0
 8003930:	e000      	b.n	8003934 <osSemaphoreNew+0x80>
  hSemaphore = NULL;
 8003932:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003934:	4628      	mov	r0, r5
 8003936:	b002      	add	sp, #8
 8003938:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800393a:	2500      	movs	r5, #0
 800393c:	e7fa      	b.n	8003934 <osSemaphoreNew+0x80>
 800393e:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8003940:	e7f8      	b.n	8003934 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003942:	2801      	cmp	r0, #1
 8003944:	d0de      	beq.n	8003904 <osSemaphoreNew+0x50>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003946:	462a      	mov	r2, r5
 8003948:	f000 fb21 	bl	8003f8e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800394c:	4605      	mov	r5, r0
 800394e:	2800      	cmp	r0, #0
 8003950:	d1d2      	bne.n	80038f8 <osSemaphoreNew+0x44>
 8003952:	e7ef      	b.n	8003934 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003954:	2801      	cmp	r0, #1
 8003956:	d0c6      	beq.n	80038e6 <osSemaphoreNew+0x32>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003958:	f000 fb3c 	bl	8003fd4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800395c:	4605      	mov	r5, r0
 800395e:	2800      	cmp	r0, #0
 8003960:	d0e8      	beq.n	8003934 <osSemaphoreNew+0x80>
 8003962:	e7ca      	b.n	80038fa <osSemaphoreNew+0x46>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003964:	f000 fb36 	bl	8003fd4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003968:	4605      	mov	r5, r0
 800396a:	2800      	cmp	r0, #0
 800396c:	d1c4      	bne.n	80038f8 <osSemaphoreNew+0x44>
 800396e:	e7e1      	b.n	8003934 <osSemaphoreNew+0x80>

08003970 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003970:	b338      	cbz	r0, 80039c2 <osSemaphoreAcquire+0x52>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003972:	b510      	push	{r4, lr}
 8003974:	b082      	sub	sp, #8
 8003976:	460c      	mov	r4, r1
 8003978:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800397c:	b1b3      	cbz	r3, 80039ac <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800397e:	bb19      	cbnz	r1, 80039c8 <osSemaphoreAcquire+0x58>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003980:	2100      	movs	r1, #0
 8003982:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003984:	aa01      	add	r2, sp, #4
 8003986:	f000 feba 	bl	80046fe <xQueueReceiveFromISR>
 800398a:	2801      	cmp	r0, #1
 800398c:	d11f      	bne.n	80039ce <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800398e:	9801      	ldr	r0, [sp, #4]
 8003990:	b150      	cbz	r0, 80039a8 <osSemaphoreAcquire+0x38>
 8003992:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800399a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800399e:	f3bf 8f4f 	dsb	sy
 80039a2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80039a6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80039a8:	b002      	add	sp, #8
 80039aa:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039ac:	f000 fdb4 	bl	8004518 <xQueueSemaphoreTake>
 80039b0:	2801      	cmp	r0, #1
 80039b2:	d00f      	beq.n	80039d4 <osSemaphoreAcquire+0x64>
        stat = osErrorResource;
 80039b4:	2c00      	cmp	r4, #0
 80039b6:	bf14      	ite	ne
 80039b8:	f06f 0001 	mvnne.w	r0, #1
 80039bc:	f06f 0002 	mvneq.w	r0, #2
 80039c0:	e7f2      	b.n	80039a8 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 80039c2:	f06f 0003 	mvn.w	r0, #3
}
 80039c6:	4770      	bx	lr
      stat = osErrorParameter;
 80039c8:	f06f 0003 	mvn.w	r0, #3
 80039cc:	e7ec      	b.n	80039a8 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 80039ce:	f06f 0002 	mvn.w	r0, #2
 80039d2:	e7e9      	b.n	80039a8 <osSemaphoreAcquire+0x38>
  stat = osOK;
 80039d4:	2000      	movs	r0, #0
 80039d6:	e7e7      	b.n	80039a8 <osSemaphoreAcquire+0x38>

080039d8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80039d8:	b330      	cbz	r0, 8003a28 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80039da:	b500      	push	{lr}
 80039dc:	b083      	sub	sp, #12
 80039de:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80039e2:	b1a3      	cbz	r3, 8003a0e <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80039e8:	a901      	add	r1, sp, #4
 80039ea:	f000 fc8a 	bl	8004302 <xQueueGiveFromISR>
 80039ee:	2801      	cmp	r0, #1
 80039f0:	d11d      	bne.n	8003a2e <osSemaphoreRelease+0x56>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80039f2:	9801      	ldr	r0, [sp, #4]
 80039f4:	b1a8      	cbz	r0, 8003a22 <osSemaphoreRelease+0x4a>
 80039f6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80039fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fe:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	e009      	b.n	8003a22 <osSemaphoreRelease+0x4a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	461a      	mov	r2, r3
 8003a12:	4619      	mov	r1, r3
 8003a14:	f000 fafc 	bl	8004010 <xQueueGenericSend>
      stat = osErrorResource;
 8003a18:	2801      	cmp	r0, #1
 8003a1a:	bf0c      	ite	eq
 8003a1c:	2000      	moveq	r0, #0
 8003a1e:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 8003a22:	b003      	add	sp, #12
 8003a24:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8003a28:	f06f 0003 	mvn.w	r0, #3
}
 8003a2c:	4770      	bx	lr
      stat = osErrorResource;
 8003a2e:	f06f 0002 	mvn.w	r0, #2
 8003a32:	e7f6      	b.n	8003a22 <osSemaphoreRelease+0x4a>

08003a34 <osSemaphoreDelete>:
 8003a34:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8003a38:	b94b      	cbnz	r3, 8003a4e <osSemaphoreDelete+0x1a>
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8003a3e:	b148      	cbz	r0, 8003a54 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8003a40:	f000 fee6 	bl	8004810 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 8003a44:	4620      	mov	r0, r4
 8003a46:	f000 fef9 	bl	800483c <vQueueDelete>
    stat = osOK;
 8003a4a:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 8003a4c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003a4e:	f06f 0005 	mvn.w	r0, #5
}
 8003a52:	4770      	bx	lr
    stat = osErrorParameter;
 8003a54:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003a58:	e7f8      	b.n	8003a4c <osSemaphoreDelete+0x18>

08003a5a <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a5a:	b570      	push	{r4, r5, r6, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a62:	bb6b      	cbnz	r3, 8003ac0 <osMessageQueueNew+0x66>
 8003a64:	4614      	mov	r4, r2
 8003a66:	b378      	cbz	r0, 8003ac8 <osMessageQueueNew+0x6e>
 8003a68:	b381      	cbz	r1, 8003acc <osMessageQueueNew+0x72>
    mem = -1;

    if (attr != NULL) {
 8003a6a:	2a00      	cmp	r2, #0
 8003a6c:	d034      	beq.n	8003ad8 <osMessageQueueNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a6e:	6895      	ldr	r5, [r2, #8]
 8003a70:	b15d      	cbz	r5, 8003a8a <osMessageQueueNew+0x30>
 8003a72:	68d3      	ldr	r3, [r2, #12]
 8003a74:	2b4f      	cmp	r3, #79	; 0x4f
 8003a76:	d92b      	bls.n	8003ad0 <osMessageQueueNew+0x76>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a78:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a7a:	b35a      	cbz	r2, 8003ad4 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a7c:	fb01 f300 	mul.w	r3, r1, r0
 8003a80:	6966      	ldr	r6, [r4, #20]
 8003a82:	429e      	cmp	r6, r3
 8003a84:	d213      	bcs.n	8003aae <osMessageQueueNew+0x54>
  hQueue = NULL;
 8003a86:	2500      	movs	r5, #0
 8003a88:	e01b      	b.n	8003ac2 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a8a:	68d3      	ldr	r3, [r2, #12]
 8003a8c:	b9cb      	cbnz	r3, 8003ac2 <osMessageQueueNew+0x68>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a8e:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a90:	b9ba      	cbnz	r2, 8003ac2 <osMessageQueueNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003a92:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 8003a94:	4615      	mov	r5, r2
      if (mem == 0) {
 8003a96:	b9a3      	cbnz	r3, 8003ac2 <osMessageQueueNew+0x68>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f000 fa50 	bl	8003f3e <xQueueGenericCreate>
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003a9e:	4605      	mov	r5, r0
 8003aa0:	b178      	cbz	r0, 8003ac2 <osMessageQueueNew+0x68>
      if (attr != NULL) {
        name = attr->name;
 8003aa2:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8003aa4:	4621      	mov	r1, r4
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	f000 fe9c 	bl	80047e4 <vQueueAddToRegistry>
 8003aac:	e009      	b.n	8003ac2 <osMessageQueueNew+0x68>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	f000 f9eb 	bl	8003e8e <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003ab8:	4605      	mov	r5, r0
 8003aba:	2800      	cmp	r0, #0
 8003abc:	d1f1      	bne.n	8003aa2 <osMessageQueueNew+0x48>
 8003abe:	e000      	b.n	8003ac2 <osMessageQueueNew+0x68>
  hQueue = NULL;
 8003ac0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	b002      	add	sp, #8
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8003ac8:	2500      	movs	r5, #0
 8003aca:	e7fa      	b.n	8003ac2 <osMessageQueueNew+0x68>
 8003acc:	2500      	movs	r5, #0
 8003ace:	e7f8      	b.n	8003ac2 <osMessageQueueNew+0x68>
 8003ad0:	2500      	movs	r5, #0
 8003ad2:	e7f6      	b.n	8003ac2 <osMessageQueueNew+0x68>
 8003ad4:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8003ad6:	e7f4      	b.n	8003ac2 <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f000 fa30 	bl	8003f3e <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003ade:	4605      	mov	r5, r0
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d0ee      	beq.n	8003ac2 <osMessageQueueNew+0x68>
 8003ae4:	e7de      	b.n	8003aa4 <osMessageQueueNew+0x4a>

08003ae6 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003ae6:	b510      	push	{r4, lr}
 8003ae8:	b082      	sub	sp, #8
 8003aea:	461c      	mov	r4, r3
 8003aec:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003af0:	b1bb      	cbz	r3, 8003b22 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003af2:	b330      	cbz	r0, 8003b42 <osMessageQueuePut+0x5c>
 8003af4:	b341      	cbz	r1, 8003b48 <osMessageQueuePut+0x62>
 8003af6:	bb54      	cbnz	r4, 8003b4e <osMessageQueuePut+0x68>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003afc:	aa01      	add	r2, sp, #4
 8003afe:	f000 fb99 	bl	8004234 <xQueueGenericSendFromISR>
 8003b02:	2801      	cmp	r0, #1
 8003b04:	d126      	bne.n	8003b54 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003b06:	9801      	ldr	r0, [sp, #4]
 8003b08:	b1c8      	cbz	r0, 8003b3e <osMessageQueuePut+0x58>
 8003b0a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003b1e:	2000      	movs	r0, #0
 8003b20:	e00d      	b.n	8003b3e <osMessageQueuePut+0x58>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b22:	b1d0      	cbz	r0, 8003b5a <osMessageQueuePut+0x74>
 8003b24:	b1e1      	cbz	r1, 8003b60 <osMessageQueuePut+0x7a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	4622      	mov	r2, r4
 8003b2a:	f000 fa71 	bl	8004010 <xQueueGenericSend>
 8003b2e:	2801      	cmp	r0, #1
 8003b30:	d019      	beq.n	8003b66 <osMessageQueuePut+0x80>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003b32:	2c00      	cmp	r4, #0
 8003b34:	bf14      	ite	ne
 8003b36:	f06f 0001 	mvnne.w	r0, #1
 8003b3a:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003b3e:	b002      	add	sp, #8
 8003b40:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003b42:	f06f 0003 	mvn.w	r0, #3
 8003b46:	e7fa      	b.n	8003b3e <osMessageQueuePut+0x58>
 8003b48:	f06f 0003 	mvn.w	r0, #3
 8003b4c:	e7f7      	b.n	8003b3e <osMessageQueuePut+0x58>
 8003b4e:	f06f 0003 	mvn.w	r0, #3
 8003b52:	e7f4      	b.n	8003b3e <osMessageQueuePut+0x58>
        stat = osErrorResource;
 8003b54:	f06f 0002 	mvn.w	r0, #2
 8003b58:	e7f1      	b.n	8003b3e <osMessageQueuePut+0x58>
      stat = osErrorParameter;
 8003b5a:	f06f 0003 	mvn.w	r0, #3
 8003b5e:	e7ee      	b.n	8003b3e <osMessageQueuePut+0x58>
 8003b60:	f06f 0003 	mvn.w	r0, #3
 8003b64:	e7eb      	b.n	8003b3e <osMessageQueuePut+0x58>
  stat = osOK;
 8003b66:	2000      	movs	r0, #0
 8003b68:	e7e9      	b.n	8003b3e <osMessageQueuePut+0x58>

08003b6a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003b6a:	b510      	push	{r4, lr}
 8003b6c:	b082      	sub	sp, #8
 8003b6e:	461c      	mov	r4, r3
 8003b70:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003b74:	b1bb      	cbz	r3, 8003ba6 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b76:	b328      	cbz	r0, 8003bc4 <osMessageQueueGet+0x5a>
 8003b78:	b339      	cbz	r1, 8003bca <osMessageQueueGet+0x60>
 8003b7a:	bb4c      	cbnz	r4, 8003bd0 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003b80:	aa01      	add	r2, sp, #4
 8003b82:	f000 fdbc 	bl	80046fe <xQueueReceiveFromISR>
 8003b86:	2801      	cmp	r0, #1
 8003b88:	d125      	bne.n	8003bd6 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003b8a:	9801      	ldr	r0, [sp, #4]
 8003b8c:	b1c0      	cbz	r0, 8003bc0 <osMessageQueueGet+0x56>
 8003b8e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b9a:	f3bf 8f4f 	dsb	sy
 8003b9e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	e00c      	b.n	8003bc0 <osMessageQueueGet+0x56>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ba6:	b1c8      	cbz	r0, 8003bdc <osMessageQueueGet+0x72>
 8003ba8:	b1d9      	cbz	r1, 8003be2 <osMessageQueueGet+0x78>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003baa:	4622      	mov	r2, r4
 8003bac:	f000 fc02 	bl	80043b4 <xQueueReceive>
 8003bb0:	2801      	cmp	r0, #1
 8003bb2:	d019      	beq.n	8003be8 <osMessageQueueGet+0x7e>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003bb4:	2c00      	cmp	r4, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	f06f 0001 	mvnne.w	r0, #1
 8003bbc:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003bc4:	f06f 0003 	mvn.w	r0, #3
 8003bc8:	e7fa      	b.n	8003bc0 <osMessageQueueGet+0x56>
 8003bca:	f06f 0003 	mvn.w	r0, #3
 8003bce:	e7f7      	b.n	8003bc0 <osMessageQueueGet+0x56>
 8003bd0:	f06f 0003 	mvn.w	r0, #3
 8003bd4:	e7f4      	b.n	8003bc0 <osMessageQueueGet+0x56>
        stat = osErrorResource;
 8003bd6:	f06f 0002 	mvn.w	r0, #2
 8003bda:	e7f1      	b.n	8003bc0 <osMessageQueueGet+0x56>
      stat = osErrorParameter;
 8003bdc:	f06f 0003 	mvn.w	r0, #3
 8003be0:	e7ee      	b.n	8003bc0 <osMessageQueueGet+0x56>
 8003be2:	f06f 0003 	mvn.w	r0, #3
 8003be6:	e7eb      	b.n	8003bc0 <osMessageQueueGet+0x56>
  stat = osOK;
 8003be8:	2000      	movs	r0, #0
 8003bea:	e7e9      	b.n	8003bc0 <osMessageQueueGet+0x56>

08003bec <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8003bec:	b148      	cbz	r0, 8003c02 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003bee:	b508      	push	{r3, lr}
 8003bf0:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8003bf4:	b112      	cbz	r2, 8003bfc <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003bf6:	f000 fde9 	bl	80047cc <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8003bfa:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8003bfc:	f000 fdd3 	bl	80047a6 <uxQueueMessagesWaiting>
 8003c00:	e7fb      	b.n	8003bfa <osMessageQueueGetCount+0xe>
    count = 0U;
 8003c02:	2000      	movs	r0, #0
}
 8003c04:	4770      	bx	lr

08003c06 <osMessageQueueDelete>:
 8003c06:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8003c0a:	b94b      	cbnz	r3, 8003c20 <osMessageQueueDelete+0x1a>
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8003c10:	b148      	cbz	r0, 8003c26 <osMessageQueueDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8003c12:	f000 fdfd 	bl	8004810 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vQueueDelete (hQueue);
 8003c16:	4620      	mov	r0, r4
 8003c18:	f000 fe10 	bl	800483c <vQueueDelete>
    stat = osOK;
 8003c1c:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 8003c1e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003c20:	f06f 0005 	mvn.w	r0, #5
}
 8003c24:	4770      	bx	lr
    stat = osErrorParameter;
 8003c26:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003c2a:	e7f8      	b.n	8003c1e <osMessageQueueDelete+0x18>

08003c2c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <vApplicationGetIdleTaskMemory+0x10>)
 8003c2e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c30:	4b03      	ldr	r3, [pc, #12]	; (8003c40 <vApplicationGetIdleTaskMemory+0x14>)
 8003c32:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c38:	6013      	str	r3, [r2, #0]
}
 8003c3a:	4770      	bx	lr
 8003c3c:	20005a9c 	.word	0x20005a9c
 8003c40:	2000529c 	.word	0x2000529c

08003c44 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <vApplicationGetTimerTaskMemory+0x10>)
 8003c46:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c48:	4b03      	ldr	r3, [pc, #12]	; (8003c58 <vApplicationGetTimerTaskMemory+0x14>)
 8003c4a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c50:	6013      	str	r3, [r2, #0]
}
 8003c52:	4770      	bx	lr
 8003c54:	20006b5c 	.word	0x20006b5c
 8003c58:	20005b5c 	.word	0x20005b5c

08003c5c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5c:	f100 0308 	add.w	r3, r0, #8
 8003c60:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c62:	f04f 32ff 	mov.w	r2, #4294967295
 8003c66:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c68:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c70:	4770      	bx	lr

08003c72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c76:	4770      	bx	lr

08003c78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c78:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c7a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c80:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c82:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c84:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003c86:	6803      	ldr	r3, [r0, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	6003      	str	r3, [r0, #0]
}
 8003c8c:	4770      	bx	lr

08003c8e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c8e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c90:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c92:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003c96:	d011      	beq.n	8003cbc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c98:	f100 0308 	add.w	r3, r0, #8
 8003c9c:	461c      	mov	r4, r3
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	42aa      	cmp	r2, r5
 8003ca4:	d9fa      	bls.n	8003c9c <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ca6:	6863      	ldr	r3, [r4, #4]
 8003ca8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003caa:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cac:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cae:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cb0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003cb2:	6803      	ldr	r3, [r0, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	6003      	str	r3, [r0, #0]
}
 8003cb8:	bc30      	pop	{r4, r5}
 8003cba:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cbc:	6904      	ldr	r4, [r0, #16]
 8003cbe:	e7f2      	b.n	8003ca6 <vListInsert+0x18>

08003cc0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cc0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc2:	6841      	ldr	r1, [r0, #4]
 8003cc4:	6882      	ldr	r2, [r0, #8]
 8003cc6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cc8:	6841      	ldr	r1, [r0, #4]
 8003cca:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003cd0:	bf04      	itt	eq
 8003cd2:	6882      	ldreq	r2, [r0, #8]
 8003cd4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ce0:	6818      	ldr	r0, [r3, #0]
}
 8003ce2:	4770      	bx	lr

08003ce4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ce8:	f001 fe2c 	bl	8005944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003cee:	f001 fe4b 	bl	8005988 <vPortExitCritical>

	return xReturn;
}
 8003cf2:	fab4 f084 	clz	r0, r4
 8003cf6:	0940      	lsrs	r0, r0, #5
 8003cf8:	bd10      	pop	{r4, pc}

08003cfa <prvCopyDataToQueue>:
{
 8003cfa:	b570      	push	{r4, r5, r6, lr}
 8003cfc:	4604      	mov	r4, r0
 8003cfe:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d00:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d02:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d04:	b95a      	cbnz	r2, 8003d1e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d06:	6803      	ldr	r3, [r0, #0]
 8003d08:	b11b      	cbz	r3, 8003d12 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003d0a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d0c:	3601      	adds	r6, #1
 8003d0e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d12:	6880      	ldr	r0, [r0, #8]
 8003d14:	f001 faf4 	bl	8005300 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60a3      	str	r3, [r4, #8]
 8003d1c:	e7f6      	b.n	8003d0c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003d1e:	b96d      	cbnz	r5, 8003d3c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d20:	6840      	ldr	r0, [r0, #4]
 8003d22:	f00b f854 	bl	800edce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d26:	6863      	ldr	r3, [r4, #4]
 8003d28:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d2a:	4413      	add	r3, r2
 8003d2c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d2e:	68a2      	ldr	r2, [r4, #8]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d319      	bcc.n	8003d68 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d34:	6823      	ldr	r3, [r4, #0]
 8003d36:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003d38:	4628      	mov	r0, r5
 8003d3a:	e7e7      	b.n	8003d0c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d3c:	68c0      	ldr	r0, [r0, #12]
 8003d3e:	f00b f846 	bl	800edce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d42:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d44:	4251      	negs	r1, r2
 8003d46:	68e3      	ldr	r3, [r4, #12]
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d4c:	6822      	ldr	r2, [r4, #0]
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d202      	bcs.n	8003d58 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d52:	68a3      	ldr	r3, [r4, #8]
 8003d54:	440b      	add	r3, r1
 8003d56:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003d58:	2d02      	cmp	r5, #2
 8003d5a:	d001      	beq.n	8003d60 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003d5c:	2000      	movs	r0, #0
 8003d5e:	e7d5      	b.n	8003d0c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d60:	b126      	cbz	r6, 8003d6c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003d62:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003d64:	2000      	movs	r0, #0
 8003d66:	e7d1      	b.n	8003d0c <prvCopyDataToQueue+0x12>
 8003d68:	4628      	mov	r0, r5
 8003d6a:	e7cf      	b.n	8003d0c <prvCopyDataToQueue+0x12>
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e7cd      	b.n	8003d0c <prvCopyDataToQueue+0x12>

08003d70 <prvCopyDataFromQueue>:
{
 8003d70:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d72:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d74:	b16a      	cbz	r2, 8003d92 <prvCopyDataFromQueue+0x22>
{
 8003d76:	b510      	push	{r4, lr}
 8003d78:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d7a:	68d9      	ldr	r1, [r3, #12]
 8003d7c:	4411      	add	r1, r2
 8003d7e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d80:	689c      	ldr	r4, [r3, #8]
 8003d82:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d84:	bf24      	itt	cs
 8003d86:	6819      	ldrcs	r1, [r3, #0]
 8003d88:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	f00b f81f 	bl	800edce <memcpy>
}
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	4770      	bx	lr

08003d94 <prvUnlockQueue>:
{
 8003d94:	b570      	push	{r4, r5, r6, lr}
 8003d96:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003d98:	f001 fdd4 	bl	8005944 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003d9c:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003da0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003da2:	2c00      	cmp	r4, #0
 8003da4:	dd0f      	ble.n	8003dc6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003da6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003daa:	e002      	b.n	8003db2 <prvUnlockQueue+0x1e>
			--cTxLock;
 8003dac:	3c01      	subs	r4, #1
 8003dae:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003db0:	b14c      	cbz	r4, 8003dc6 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003db4:	b13b      	cbz	r3, 8003dc6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db6:	4630      	mov	r0, r6
 8003db8:	f001 f9aa 	bl	8005110 <xTaskRemoveFromEventList>
 8003dbc:	2800      	cmp	r0, #0
 8003dbe:	d0f5      	beq.n	8003dac <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003dc0:	f001 fa38 	bl	8005234 <vTaskMissedYield>
 8003dc4:	e7f2      	b.n	8003dac <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8003dc6:	23ff      	movs	r3, #255	; 0xff
 8003dc8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003dcc:	f001 fddc 	bl	8005988 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003dd0:	f001 fdb8 	bl	8005944 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003dd4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003dd8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dda:	2c00      	cmp	r4, #0
 8003ddc:	dd0f      	ble.n	8003dfe <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dde:	f105 0610 	add.w	r6, r5, #16
 8003de2:	e002      	b.n	8003dea <prvUnlockQueue+0x56>
				--cRxLock;
 8003de4:	3c01      	subs	r4, #1
 8003de6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003de8:	b14c      	cbz	r4, 8003dfe <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dea:	692b      	ldr	r3, [r5, #16]
 8003dec:	b13b      	cbz	r3, 8003dfe <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dee:	4630      	mov	r0, r6
 8003df0:	f001 f98e 	bl	8005110 <xTaskRemoveFromEventList>
 8003df4:	2800      	cmp	r0, #0
 8003df6:	d0f5      	beq.n	8003de4 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8003df8:	f001 fa1c 	bl	8005234 <vTaskMissedYield>
 8003dfc:	e7f2      	b.n	8003de4 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8003dfe:	23ff      	movs	r3, #255	; 0xff
 8003e00:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003e04:	f001 fdc0 	bl	8005988 <vPortExitCritical>
}
 8003e08:	bd70      	pop	{r4, r5, r6, pc}

08003e0a <xQueueGenericReset>:
{
 8003e0a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003e0c:	b1e0      	cbz	r0, 8003e48 <xQueueGenericReset+0x3e>
 8003e0e:	460d      	mov	r5, r1
 8003e10:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003e12:	f001 fd97 	bl	8005944 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e1a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	18d0      	adds	r0, r2, r3
 8003e22:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e24:	2000      	movs	r0, #0
 8003e26:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e28:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e2a:	1a5b      	subs	r3, r3, r1
 8003e2c:	4413      	add	r3, r2
 8003e2e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e30:	23ff      	movs	r3, #255	; 0xff
 8003e32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003e3a:	b9fd      	cbnz	r5, 8003e7c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3c:	6923      	ldr	r3, [r4, #16]
 8003e3e:	b963      	cbnz	r3, 8003e5a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003e40:	f001 fda2 	bl	8005988 <vPortExitCritical>
}
 8003e44:	2001      	movs	r0, #1
 8003e46:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003e58:	e7fe      	b.n	8003e58 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5a:	f104 0010 	add.w	r0, r4, #16
 8003e5e:	f001 f957 	bl	8005110 <xTaskRemoveFromEventList>
 8003e62:	2800      	cmp	r0, #0
 8003e64:	d0ec      	beq.n	8003e40 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003e66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	e7e1      	b.n	8003e40 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e7c:	f104 0010 	add.w	r0, r4, #16
 8003e80:	f7ff feec 	bl	8003c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e84:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e88:	f7ff fee8 	bl	8003c5c <vListInitialise>
 8003e8c:	e7d8      	b.n	8003e40 <xQueueGenericReset+0x36>

08003e8e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e8e:	b940      	cbnz	r0, 8003ea2 <xQueueGenericCreateStatic+0x14>
 8003e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e94:	f383 8811 	msr	BASEPRI, r3
 8003e98:	f3bf 8f6f 	isb	sy
 8003e9c:	f3bf 8f4f 	dsb	sy
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericCreateStatic+0x12>
	{
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	b082      	sub	sp, #8
 8003ea6:	461c      	mov	r4, r3
 8003ea8:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8003eaa:	b154      	cbz	r4, 8003ec2 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003eac:	b192      	cbz	r2, 8003ed4 <xQueueGenericCreateStatic+0x46>
 8003eae:	b9d9      	cbnz	r1, 8003ee8 <xQueueGenericCreateStatic+0x5a>
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	f383 8811 	msr	BASEPRI, r3
 8003eb8:	f3bf 8f6f 	isb	sy
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGenericCreateStatic+0x32>
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003ed2:	e7fe      	b.n	8003ed2 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ed4:	b341      	cbz	r1, 8003f28 <xQueueGenericCreateStatic+0x9a>
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	e7fe      	b.n	8003ee6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ee8:	2050      	movs	r0, #80	; 0x50
 8003eea:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003eec:	9801      	ldr	r0, [sp, #4]
 8003eee:	2850      	cmp	r0, #80	; 0x50
 8003ef0:	d008      	beq.n	8003f04 <xQueueGenericCreateStatic+0x76>
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	e7fe      	b.n	8003f02 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f04:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f06:	2001      	movs	r0, #1
 8003f08:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f0c:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003f0e:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f10:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f12:	2101      	movs	r1, #1
 8003f14:	4620      	mov	r0, r4
 8003f16:	f7ff ff78 	bl	8003e0a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003f1a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003f1e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8003f22:	4620      	mov	r0, r4
 8003f24:	b002      	add	sp, #8
 8003f26:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f28:	2250      	movs	r2, #80	; 0x50
 8003f2a:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f2c:	9a01      	ldr	r2, [sp, #4]
 8003f2e:	2a50      	cmp	r2, #80	; 0x50
 8003f30:	d1df      	bne.n	8003ef2 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f32:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f34:	2201      	movs	r2, #1
 8003f36:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	e7e6      	b.n	8003f0c <xQueueGenericCreateStatic+0x7e>

08003f3e <xQueueGenericCreate>:
	{
 8003f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f40:	b940      	cbnz	r0, 8003f54 <xQueueGenericCreate+0x16>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericCreate+0x14>
 8003f54:	460d      	mov	r5, r1
 8003f56:	4614      	mov	r4, r2
 8003f58:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f5a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f5e:	3050      	adds	r0, #80	; 0x50
 8003f60:	f001 fe76 	bl	8005c50 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003f64:	4606      	mov	r6, r0
 8003f66:	b170      	cbz	r0, 8003f86 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f6e:	b165      	cbz	r5, 8003f8a <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f70:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f74:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003f76:	63f7      	str	r7, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f78:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f7ff ff44 	bl	8003e0a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003f82:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
	}
 8003f86:	4630      	mov	r0, r6
 8003f88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	e7f2      	b.n	8003f74 <xQueueGenericCreate+0x36>

08003f8e <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8003f8e:	b940      	cbnz	r0, 8003fa2 <xQueueCreateCountingSemaphoreStatic+0x14>
 8003f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fa8:	4288      	cmp	r0, r1
 8003faa:	d208      	bcs.n	8003fbe <xQueueCreateCountingSemaphoreStatic+0x30>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	e7fe      	b.n	8003fbc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003fbe:	2302      	movs	r3, #2
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	f7ff ff61 	bl	8003e8e <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8003fcc:	b100      	cbz	r0, 8003fd0 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fce:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003fd0:	b002      	add	sp, #8
 8003fd2:	bd10      	pop	{r4, pc}

08003fd4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8003fd4:	b940      	cbnz	r0, 8003fe8 <xQueueCreateCountingSemaphore+0x14>
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	e7fe      	b.n	8003fe6 <xQueueCreateCountingSemaphore+0x12>
	{
 8003fe8:	b510      	push	{r4, lr}
 8003fea:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fec:	4288      	cmp	r0, r1
 8003fee:	d208      	bcs.n	8004002 <xQueueCreateCountingSemaphore+0x2e>
 8003ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff4:	f383 8811 	msr	BASEPRI, r3
 8003ff8:	f3bf 8f6f 	isb	sy
 8003ffc:	f3bf 8f4f 	dsb	sy
 8004000:	e7fe      	b.n	8004000 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004002:	2202      	movs	r2, #2
 8004004:	2100      	movs	r1, #0
 8004006:	f7ff ff9a 	bl	8003f3e <xQueueGenericCreate>
		if( xHandle != NULL )
 800400a:	b100      	cbz	r0, 800400e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800400c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800400e:	bd10      	pop	{r4, pc}

08004010 <xQueueGenericSend>:
{
 8004010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004014:	b085      	sub	sp, #20
 8004016:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004018:	b188      	cbz	r0, 800403e <xQueueGenericSend+0x2e>
 800401a:	460e      	mov	r6, r1
 800401c:	461d      	mov	r5, r3
 800401e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004020:	b1b1      	cbz	r1, 8004050 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004022:	2d02      	cmp	r5, #2
 8004024:	d120      	bne.n	8004068 <xQueueGenericSend+0x58>
 8004026:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d01d      	beq.n	8004068 <xQueueGenericSend+0x58>
 800402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004030:	f383 8811 	msr	BASEPRI, r3
 8004034:	f3bf 8f6f 	isb	sy
 8004038:	f3bf 8f4f 	dsb	sy
 800403c:	e7fe      	b.n	800403c <xQueueGenericSend+0x2c>
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800404e:	e7fe      	b.n	800404e <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004050:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0e5      	beq.n	8004022 <xQueueGenericSend+0x12>
 8004056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	e7fe      	b.n	8004066 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004068:	f001 f8f0 	bl	800524c <xTaskGetSchedulerState>
 800406c:	b950      	cbnz	r0, 8004084 <xQueueGenericSend+0x74>
 800406e:	9b01      	ldr	r3, [sp, #4]
 8004070:	b163      	cbz	r3, 800408c <xQueueGenericSend+0x7c>
 8004072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	e7fe      	b.n	8004082 <xQueueGenericSend+0x72>
 8004084:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8004088:	2700      	movs	r7, #0
 800408a:	e03a      	b.n	8004102 <xQueueGenericSend+0xf2>
 800408c:	f04f 0800 	mov.w	r8, #0
 8004090:	e7fa      	b.n	8004088 <xQueueGenericSend+0x78>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004092:	462a      	mov	r2, r5
 8004094:	4631      	mov	r1, r6
 8004096:	4620      	mov	r0, r4
 8004098:	f7ff fe2f 	bl	8003cfa <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800409c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800409e:	b983      	cbnz	r3, 80040c2 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 80040a0:	b148      	cbz	r0, 80040b6 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 80040a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80040b6:	f001 fc67 	bl	8005988 <vPortExitCritical>
				return pdPASS;
 80040ba:	2001      	movs	r0, #1
}
 80040bc:	b005      	add	sp, #20
 80040be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040c6:	f001 f823 	bl	8005110 <xTaskRemoveFromEventList>
 80040ca:	2800      	cmp	r0, #0
 80040cc:	d0f3      	beq.n	80040b6 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 80040ce:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	e7e8      	b.n	80040b6 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 80040e4:	f001 fc50 	bl	8005988 <vPortExitCritical>
					return errQUEUE_FULL;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e7e7      	b.n	80040bc <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040ec:	a802      	add	r0, sp, #8
 80040ee:	f001 f853 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040f2:	e014      	b.n	800411e <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 80040f4:	4620      	mov	r0, r4
 80040f6:	f7ff fe4d 	bl	8003d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040fa:	f000 fed5 	bl	8004ea8 <xTaskResumeAll>
 80040fe:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8004102:	f001 fc1f 	bl	8005944 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004106:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004108:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800410a:	429a      	cmp	r2, r3
 800410c:	d3c1      	bcc.n	8004092 <xQueueGenericSend+0x82>
 800410e:	2d02      	cmp	r5, #2
 8004110:	d0bf      	beq.n	8004092 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004112:	9b01      	ldr	r3, [sp, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e5      	beq.n	80040e4 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8004118:	f1b8 0f00 	cmp.w	r8, #0
 800411c:	d0e6      	beq.n	80040ec <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 800411e:	f001 fc33 	bl	8005988 <vPortExitCritical>
		vTaskSuspendAll();
 8004122:	f000 fe11 	bl	8004d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004126:	f001 fc0d 	bl	8005944 <vPortEnterCritical>
 800412a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800412e:	b252      	sxtb	r2, r2
 8004130:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004134:	bf08      	it	eq
 8004136:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800413a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800413e:	b252      	sxtb	r2, r2
 8004140:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004144:	bf08      	it	eq
 8004146:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800414a:	f001 fc1d 	bl	8005988 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800414e:	a901      	add	r1, sp, #4
 8004150:	a802      	add	r0, sp, #8
 8004152:	f001 f82d 	bl	80051b0 <xTaskCheckForTimeOut>
 8004156:	bb00      	cbnz	r0, 800419a <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004158:	f001 fbf4 	bl	8005944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800415c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8004160:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004164:	f001 fc10 	bl	8005988 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004168:	45c1      	cmp	r9, r8
 800416a:	d1c3      	bne.n	80040f4 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800416c:	9901      	ldr	r1, [sp, #4]
 800416e:	f104 0010 	add.w	r0, r4, #16
 8004172:	f000 ff97 	bl	80050a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004176:	4620      	mov	r0, r4
 8004178:	f7ff fe0c 	bl	8003d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800417c:	f000 fe94 	bl	8004ea8 <xTaskResumeAll>
 8004180:	2800      	cmp	r0, #0
 8004182:	d1bc      	bne.n	80040fe <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8004184:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	e7b1      	b.n	80040fe <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800419a:	4620      	mov	r0, r4
 800419c:	f7ff fdfa 	bl	8003d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041a0:	f000 fe82 	bl	8004ea8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80041a4:	2000      	movs	r0, #0
 80041a6:	e789      	b.n	80040bc <xQueueGenericSend+0xac>

080041a8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80041a8:	b148      	cbz	r0, 80041be <prvInitialiseMutex+0x16>
	{
 80041aa:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80041ac:	2100      	movs	r1, #0
 80041ae:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80041b0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80041b2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041b4:	460b      	mov	r3, r1
 80041b6:	460a      	mov	r2, r1
 80041b8:	f7ff ff2a 	bl	8004010 <xQueueGenericSend>
	}
 80041bc:	bd08      	pop	{r3, pc}
 80041be:	4770      	bx	lr

080041c0 <xQueueCreateMutex>:
	{
 80041c0:	b510      	push	{r4, lr}
 80041c2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80041c4:	2100      	movs	r1, #0
 80041c6:	2001      	movs	r0, #1
 80041c8:	f7ff feb9 	bl	8003f3e <xQueueGenericCreate>
 80041cc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041ce:	f7ff ffeb 	bl	80041a8 <prvInitialiseMutex>
	}
 80041d2:	4620      	mov	r0, r4
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <xQueueCreateMutexStatic>:
	{
 80041d6:	b510      	push	{r4, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80041dc:	9000      	str	r0, [sp, #0]
 80041de:	2200      	movs	r2, #0
 80041e0:	4611      	mov	r1, r2
 80041e2:	2001      	movs	r0, #1
 80041e4:	f7ff fe53 	bl	8003e8e <xQueueGenericCreateStatic>
 80041e8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041ea:	f7ff ffdd 	bl	80041a8 <prvInitialiseMutex>
	}
 80041ee:	4620      	mov	r0, r4
 80041f0:	b002      	add	sp, #8
 80041f2:	bd10      	pop	{r4, pc}

080041f4 <xQueueGiveMutexRecursive>:
	{
 80041f4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80041f6:	b138      	cbz	r0, 8004208 <xQueueGiveMutexRecursive+0x14>
 80041f8:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80041fa:	6885      	ldr	r5, [r0, #8]
 80041fc:	f001 f820 	bl	8005240 <xTaskGetCurrentTaskHandle>
 8004200:	4285      	cmp	r5, r0
 8004202:	d00a      	beq.n	800421a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004204:	2000      	movs	r0, #0
	}
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004218:	e7fe      	b.n	8004218 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800421a:	68e3      	ldr	r3, [r4, #12]
 800421c:	3b01      	subs	r3, #1
 800421e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004220:	b10b      	cbz	r3, 8004226 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004222:	2001      	movs	r0, #1
		return xReturn;
 8004224:	e7ef      	b.n	8004206 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004226:	461a      	mov	r2, r3
 8004228:	4619      	mov	r1, r3
 800422a:	4620      	mov	r0, r4
 800422c:	f7ff fef0 	bl	8004010 <xQueueGenericSend>
			xReturn = pdPASS;
 8004230:	2001      	movs	r0, #1
 8004232:	e7e8      	b.n	8004206 <xQueueGiveMutexRecursive+0x12>

08004234 <xQueueGenericSendFromISR>:
{
 8004234:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004238:	b190      	cbz	r0, 8004260 <xQueueGenericSendFromISR+0x2c>
 800423a:	460f      	mov	r7, r1
 800423c:	4616      	mov	r6, r2
 800423e:	461c      	mov	r4, r3
 8004240:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004242:	b1b1      	cbz	r1, 8004272 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004244:	2c02      	cmp	r4, #2
 8004246:	d120      	bne.n	800428a <xQueueGenericSendFromISR+0x56>
 8004248:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800424a:	2b01      	cmp	r3, #1
 800424c:	d01d      	beq.n	800428a <xQueueGenericSendFromISR+0x56>
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	e7fe      	b.n	800425e <xQueueGenericSendFromISR+0x2a>
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004270:	e7fe      	b.n	8004270 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004272:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0e5      	beq.n	8004244 <xQueueGenericSendFromISR+0x10>
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	e7fe      	b.n	8004288 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800428a:	f001 fc83 	bl	8005b94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800428e:	f3ef 8911 	mrs	r9, BASEPRI
 8004292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004296:	f383 8811 	msr	BASEPRI, r3
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042a2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80042a4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d306      	bcc.n	80042b8 <xQueueGenericSendFromISR+0x84>
 80042aa:	2c02      	cmp	r4, #2
 80042ac:	d004      	beq.n	80042b8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80042ae:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042b0:	f389 8811 	msr	BASEPRI, r9
}
 80042b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80042b8:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 80042bc:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042c2:	4622      	mov	r2, r4
 80042c4:	4639      	mov	r1, r7
 80042c6:	4628      	mov	r0, r5
 80042c8:	f7ff fd17 	bl	8003cfa <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80042cc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80042d0:	d006      	beq.n	80042e0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042d2:	f108 0301 	add.w	r3, r8, #1
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80042dc:	2001      	movs	r0, #1
 80042de:	e7e7      	b.n	80042b0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042e0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042e2:	b90b      	cbnz	r3, 80042e8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80042e4:	2001      	movs	r0, #1
 80042e6:	e7e3      	b.n	80042b0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042e8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80042ec:	f000 ff10 	bl	8005110 <xTaskRemoveFromEventList>
 80042f0:	b118      	cbz	r0, 80042fa <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80042f2:	b126      	cbz	r6, 80042fe <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042f4:	2001      	movs	r0, #1
 80042f6:	6030      	str	r0, [r6, #0]
 80042f8:	e7da      	b.n	80042b0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80042fa:	2001      	movs	r0, #1
 80042fc:	e7d8      	b.n	80042b0 <xQueueGenericSendFromISR+0x7c>
 80042fe:	2001      	movs	r0, #1
 8004300:	e7d6      	b.n	80042b0 <xQueueGenericSendFromISR+0x7c>

08004302 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004302:	b168      	cbz	r0, 8004320 <xQueueGiveFromISR+0x1e>
{
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	460c      	mov	r4, r1
 8004308:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800430a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800430c:	b18b      	cbz	r3, 8004332 <xQueueGiveFromISR+0x30>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	e7fe      	b.n	800431e <xQueueGiveFromISR+0x1c>
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004330:	e7fe      	b.n	8004330 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004332:	6803      	ldr	r3, [r0, #0]
 8004334:	b1eb      	cbz	r3, 8004372 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004336:	f001 fc2d 	bl	8005b94 <vPortValidateInterruptPriority>
	__asm volatile
 800433a:	f3ef 8611 	mrs	r6, BASEPRI
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800434e:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004350:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004352:	4293      	cmp	r3, r2
 8004354:	d926      	bls.n	80043a4 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004356:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800435a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800435c:	3201      	adds	r2, #1
 800435e:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d011      	beq.n	800438a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004366:	3301      	adds	r3, #1
 8004368:	b25b      	sxtb	r3, r3
 800436a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800436e:	2001      	movs	r0, #1
 8004370:	e019      	b.n	80043a6 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004372:	6883      	ldr	r3, [r0, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0de      	beq.n	8004336 <xQueueGiveFromISR+0x34>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	e7fe      	b.n	8004388 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800438a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800438c:	b90b      	cbnz	r3, 8004392 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800438e:	2001      	movs	r0, #1
 8004390:	e009      	b.n	80043a6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004392:	f105 0024 	add.w	r0, r5, #36	; 0x24
 8004396:	f000 febb 	bl	8005110 <xTaskRemoveFromEventList>
 800439a:	b138      	cbz	r0, 80043ac <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800439c:	b144      	cbz	r4, 80043b0 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800439e:	2001      	movs	r0, #1
 80043a0:	6020      	str	r0, [r4, #0]
 80043a2:	e000      	b.n	80043a6 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80043a4:	2000      	movs	r0, #0
	__asm volatile
 80043a6:	f386 8811 	msr	BASEPRI, r6
}
 80043aa:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80043ac:	2001      	movs	r0, #1
 80043ae:	e7fa      	b.n	80043a6 <xQueueGiveFromISR+0xa4>
 80043b0:	2001      	movs	r0, #1
 80043b2:	e7f8      	b.n	80043a6 <xQueueGiveFromISR+0xa4>

080043b4 <xQueueReceive>:
{
 80043b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80043bc:	b180      	cbz	r0, 80043e0 <xQueueReceive+0x2c>
 80043be:	460e      	mov	r6, r1
 80043c0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043c2:	b1b1      	cbz	r1, 80043f2 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043c4:	f000 ff42 	bl	800524c <xTaskGetSchedulerState>
 80043c8:	b9f8      	cbnz	r0, 800440a <xQueueReceive+0x56>
 80043ca:	9b01      	ldr	r3, [sp, #4]
 80043cc:	b30b      	cbz	r3, 8004412 <xQueueReceive+0x5e>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	e7fe      	b.n	80043de <xQueueReceive+0x2a>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80043f0:	e7fe      	b.n	80043f0 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0e5      	beq.n	80043c4 <xQueueReceive+0x10>
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	e7fe      	b.n	8004408 <xQueueReceive+0x54>
 800440a:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800440e:	2700      	movs	r7, #0
 8004410:	e03b      	b.n	800448a <xQueueReceive+0xd6>
 8004412:	f04f 0800 	mov.w	r8, #0
 8004416:	e7fa      	b.n	800440e <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004418:	4631      	mov	r1, r6
 800441a:	4620      	mov	r0, r4
 800441c:	f7ff fca8 	bl	8003d70 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004420:	3d01      	subs	r5, #1
 8004422:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004424:	6923      	ldr	r3, [r4, #16]
 8004426:	b92b      	cbnz	r3, 8004434 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8004428:	f001 faae 	bl	8005988 <vPortExitCritical>
				return pdPASS;
 800442c:	2001      	movs	r0, #1
}
 800442e:	b004      	add	sp, #16
 8004430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004434:	f104 0010 	add.w	r0, r4, #16
 8004438:	f000 fe6a 	bl	8005110 <xTaskRemoveFromEventList>
 800443c:	2800      	cmp	r0, #0
 800443e:	d0f3      	beq.n	8004428 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8004440:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004448:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	e7e8      	b.n	8004428 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8004456:	f001 fa97 	bl	8005988 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800445a:	2000      	movs	r0, #0
 800445c:	e7e7      	b.n	800442e <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800445e:	a802      	add	r0, sp, #8
 8004460:	f000 fe9a 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004464:	e01c      	b.n	80044a0 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8004466:	4620      	mov	r0, r4
 8004468:	f7ff fc94 	bl	8003d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800446c:	f000 fd1c 	bl	8004ea8 <xTaskResumeAll>
 8004470:	e009      	b.n	8004486 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8004472:	4620      	mov	r0, r4
 8004474:	f7ff fc8e 	bl	8003d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004478:	f000 fd16 	bl	8004ea8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff fc31 	bl	8003ce4 <prvIsQueueEmpty>
 8004482:	2800      	cmp	r0, #0
 8004484:	d146      	bne.n	8004514 <xQueueReceive+0x160>
 8004486:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800448a:	f001 fa5b 	bl	8005944 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800448e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004490:	2d00      	cmp	r5, #0
 8004492:	d1c1      	bne.n	8004418 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004494:	9b01      	ldr	r3, [sp, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0dd      	beq.n	8004456 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800449a:	f1b8 0f00 	cmp.w	r8, #0
 800449e:	d0de      	beq.n	800445e <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 80044a0:	f001 fa72 	bl	8005988 <vPortExitCritical>
		vTaskSuspendAll();
 80044a4:	f000 fc50 	bl	8004d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044a8:	f001 fa4c 	bl	8005944 <vPortEnterCritical>
 80044ac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80044b0:	b25b      	sxtb	r3, r3
 80044b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b6:	bf08      	it	eq
 80044b8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80044bc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	bf08      	it	eq
 80044c8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80044cc:	f001 fa5c 	bl	8005988 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044d0:	a901      	add	r1, sp, #4
 80044d2:	a802      	add	r0, sp, #8
 80044d4:	f000 fe6c 	bl	80051b0 <xTaskCheckForTimeOut>
 80044d8:	2800      	cmp	r0, #0
 80044da:	d1ca      	bne.n	8004472 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044dc:	4620      	mov	r0, r4
 80044de:	f7ff fc01 	bl	8003ce4 <prvIsQueueEmpty>
 80044e2:	2800      	cmp	r0, #0
 80044e4:	d0bf      	beq.n	8004466 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044e6:	9901      	ldr	r1, [sp, #4]
 80044e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044ec:	f000 fdda 	bl	80050a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044f0:	4620      	mov	r0, r4
 80044f2:	f7ff fc4f 	bl	8003d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044f6:	f000 fcd7 	bl	8004ea8 <xTaskResumeAll>
 80044fa:	2800      	cmp	r0, #0
 80044fc:	d1c3      	bne.n	8004486 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 80044fe:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004506:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	e7b8      	b.n	8004486 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8004514:	2000      	movs	r0, #0
 8004516:	e78a      	b.n	800442e <xQueueReceive+0x7a>

08004518 <xQueueSemaphoreTake>:
{
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b085      	sub	sp, #20
 800451c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800451e:	b158      	cbz	r0, 8004538 <xQueueSemaphoreTake+0x20>
 8004520:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004522:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004524:	b18b      	cbz	r3, 800454a <xQueueSemaphoreTake+0x32>
 8004526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	e7fe      	b.n	8004536 <xQueueSemaphoreTake+0x1e>
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	f383 8811 	msr	BASEPRI, r3
 8004540:	f3bf 8f6f 	isb	sy
 8004544:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004548:	e7fe      	b.n	8004548 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800454a:	f000 fe7f 	bl	800524c <xTaskGetSchedulerState>
 800454e:	b950      	cbnz	r0, 8004566 <xQueueSemaphoreTake+0x4e>
 8004550:	9b01      	ldr	r3, [sp, #4]
 8004552:	b163      	cbz	r3, 800456e <xQueueSemaphoreTake+0x56>
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	e7fe      	b.n	8004564 <xQueueSemaphoreTake+0x4c>
 8004566:	2600      	movs	r6, #0
 8004568:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800456a:	2500      	movs	r5, #0
 800456c:	e04e      	b.n	800460c <xQueueSemaphoreTake+0xf4>
 800456e:	2600      	movs	r6, #0
 8004570:	4637      	mov	r7, r6
 8004572:	e7fa      	b.n	800456a <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004574:	3b01      	subs	r3, #1
 8004576:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	b13b      	cbz	r3, 800458c <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800457c:	6923      	ldr	r3, [r4, #16]
 800457e:	b94b      	cbnz	r3, 8004594 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 8004580:	f001 fa02 	bl	8005988 <vPortExitCritical>
				return pdPASS;
 8004584:	2601      	movs	r6, #1
}
 8004586:	4630      	mov	r0, r6
 8004588:	b005      	add	sp, #20
 800458a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800458c:	f000 ff50 	bl	8005430 <pvTaskIncrementMutexHeldCount>
 8004590:	60a0      	str	r0, [r4, #8]
 8004592:	e7f3      	b.n	800457c <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004594:	f104 0010 	add.w	r0, r4, #16
 8004598:	f000 fdba 	bl	8005110 <xTaskRemoveFromEventList>
 800459c:	2800      	cmp	r0, #0
 800459e:	d0ef      	beq.n	8004580 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 80045a0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80045a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	e7e4      	b.n	8004580 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80045b6:	b146      	cbz	r6, 80045ca <xQueueSemaphoreTake+0xb2>
 80045b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	e7fe      	b.n	80045c8 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 80045ca:	f001 f9dd 	bl	8005988 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80045ce:	e7da      	b.n	8004586 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045d0:	a802      	add	r0, sp, #8
 80045d2:	f000 fde1 	bl	8005198 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045d6:	e023      	b.n	8004620 <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 80045d8:	f001 f9b4 	bl	8005944 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045dc:	68a0      	ldr	r0, [r4, #8]
 80045de:	f000 fe45 	bl	800526c <xTaskPriorityInherit>
 80045e2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80045e4:	f001 f9d0 	bl	8005988 <vPortExitCritical>
 80045e8:	e040      	b.n	800466c <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 80045ea:	4620      	mov	r0, r4
 80045ec:	f7ff fbd2 	bl	8003d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045f0:	f000 fc5a 	bl	8004ea8 <xTaskResumeAll>
 80045f4:	e009      	b.n	800460a <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7ff fbcc 	bl	8003d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045fc:	f000 fc54 	bl	8004ea8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004600:	4620      	mov	r0, r4
 8004602:	f7ff fb6f 	bl	8003ce4 <prvIsQueueEmpty>
 8004606:	2800      	cmp	r0, #0
 8004608:	d147      	bne.n	800469a <xQueueSemaphoreTake+0x182>
 800460a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800460c:	f001 f99a 	bl	8005944 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004610:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1ae      	bne.n	8004574 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004616:	9b01      	ldr	r3, [sp, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0cc      	beq.n	80045b6 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800461c:	2f00      	cmp	r7, #0
 800461e:	d0d7      	beq.n	80045d0 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 8004620:	f001 f9b2 	bl	8005988 <vPortExitCritical>
		vTaskSuspendAll();
 8004624:	f000 fb90 	bl	8004d48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004628:	f001 f98c 	bl	8005944 <vPortEnterCritical>
 800462c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004630:	b25b      	sxtb	r3, r3
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	bf08      	it	eq
 8004638:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 800463c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	bf08      	it	eq
 8004648:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 800464c:	f001 f99c 	bl	8005988 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004650:	a901      	add	r1, sp, #4
 8004652:	a802      	add	r0, sp, #8
 8004654:	f000 fdac 	bl	80051b0 <xTaskCheckForTimeOut>
 8004658:	2800      	cmp	r0, #0
 800465a:	d1cc      	bne.n	80045f6 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800465c:	4620      	mov	r0, r4
 800465e:	f7ff fb41 	bl	8003ce4 <prvIsQueueEmpty>
 8004662:	2800      	cmp	r0, #0
 8004664:	d0c1      	beq.n	80045ea <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d0b5      	beq.n	80045d8 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800466c:	9901      	ldr	r1, [sp, #4]
 800466e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004672:	f000 fd17 	bl	80050a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004676:	4620      	mov	r0, r4
 8004678:	f7ff fb8c 	bl	8003d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800467c:	f000 fc14 	bl	8004ea8 <xTaskResumeAll>
 8004680:	2800      	cmp	r0, #0
 8004682:	d1c2      	bne.n	800460a <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8004684:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800468c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004690:	f3bf 8f4f 	dsb	sy
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	e7b7      	b.n	800460a <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 800469a:	2e00      	cmp	r6, #0
 800469c:	f43f af73 	beq.w	8004586 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 80046a0:	f001 f950 	bl	8005944 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046a6:	b119      	cbz	r1, 80046b0 <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046aa:	6819      	ldr	r1, [r3, #0]
 80046ac:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80046b0:	68a0      	ldr	r0, [r4, #8]
 80046b2:	f000 fe6d 	bl	8005390 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80046b6:	f001 f967 	bl	8005988 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80046ba:	2600      	movs	r6, #0
 80046bc:	e763      	b.n	8004586 <xQueueSemaphoreTake+0x6e>

080046be <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80046be:	b180      	cbz	r0, 80046e2 <xQueueTakeMutexRecursive+0x24>
	{
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	460c      	mov	r4, r1
 80046c4:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80046c6:	6886      	ldr	r6, [r0, #8]
 80046c8:	f000 fdba 	bl	8005240 <xTaskGetCurrentTaskHandle>
 80046cc:	4286      	cmp	r6, r0
 80046ce:	d011      	beq.n	80046f4 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80046d0:	4621      	mov	r1, r4
 80046d2:	4628      	mov	r0, r5
 80046d4:	f7ff ff20 	bl	8004518 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80046d8:	b180      	cbz	r0, 80046fc <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80046da:	68eb      	ldr	r3, [r5, #12]
 80046dc:	3301      	adds	r3, #1
 80046de:	60eb      	str	r3, [r5, #12]
		return xReturn;
 80046e0:	e00c      	b.n	80046fc <xQueueTakeMutexRecursive+0x3e>
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80046f2:	e7fe      	b.n	80046f2 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80046f4:	68eb      	ldr	r3, [r5, #12]
 80046f6:	3301      	adds	r3, #1
 80046f8:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80046fa:	2001      	movs	r0, #1
	}
 80046fc:	bd70      	pop	{r4, r5, r6, pc}

080046fe <xQueueReceiveFromISR>:
{
 80046fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004702:	b1b0      	cbz	r0, 8004732 <xQueueReceiveFromISR+0x34>
 8004704:	460d      	mov	r5, r1
 8004706:	4616      	mov	r6, r2
 8004708:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800470a:	b1d9      	cbz	r1, 8004744 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800470c:	f001 fa42 	bl	8005b94 <vPortValidateInterruptPriority>
	__asm volatile
 8004710:	f3ef 8811 	mrs	r8, BASEPRI
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004724:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004726:	b9cf      	cbnz	r7, 800475c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8004728:	2000      	movs	r0, #0
	__asm volatile
 800472a:	f388 8811 	msr	BASEPRI, r8
}
 800472e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004742:	e7fe      	b.n	8004742 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004744:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0e0      	beq.n	800470c <xQueueReceiveFromISR+0xe>
 800474a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	e7fe      	b.n	800475a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800475c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8004760:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004764:	4629      	mov	r1, r5
 8004766:	4620      	mov	r0, r4
 8004768:	f7ff fb02 	bl	8003d70 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800476c:	3f01      	subs	r7, #1
 800476e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004770:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004774:	d006      	beq.n	8004784 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004776:	f109 0301 	add.w	r3, r9, #1
 800477a:	b25b      	sxtb	r3, r3
 800477c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8004780:	2001      	movs	r0, #1
 8004782:	e7d2      	b.n	800472a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	b90b      	cbnz	r3, 800478c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8004788:	2001      	movs	r0, #1
 800478a:	e7ce      	b.n	800472a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800478c:	f104 0010 	add.w	r0, r4, #16
 8004790:	f000 fcbe 	bl	8005110 <xTaskRemoveFromEventList>
 8004794:	b118      	cbz	r0, 800479e <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 8004796:	b126      	cbz	r6, 80047a2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004798:	2001      	movs	r0, #1
 800479a:	6030      	str	r0, [r6, #0]
 800479c:	e7c5      	b.n	800472a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 800479e:	2001      	movs	r0, #1
 80047a0:	e7c3      	b.n	800472a <xQueueReceiveFromISR+0x2c>
 80047a2:	2001      	movs	r0, #1
 80047a4:	e7c1      	b.n	800472a <xQueueReceiveFromISR+0x2c>

080047a6 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80047a6:	b140      	cbz	r0, 80047ba <uxQueueMessagesWaiting+0x14>
{
 80047a8:	b510      	push	{r4, lr}
 80047aa:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80047ac:	f001 f8ca 	bl	8005944 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80047b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80047b2:	f001 f8e9 	bl	8005988 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047b6:	4620      	mov	r0, r4
 80047b8:	bd10      	pop	{r4, pc}
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80047ca:	e7fe      	b.n	80047ca <uxQueueMessagesWaiting+0x24>

080047cc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80047cc:	b108      	cbz	r0, 80047d2 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80047ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047d0:	4770      	bx	lr
 80047d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d6:	f383 8811 	msr	BASEPRI, r3
 80047da:	f3bf 8f6f 	isb	sy
 80047de:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80047e2:	e7fe      	b.n	80047e2 <uxQueueMessagesWaitingFromISR+0x16>

080047e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047e4:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047e6:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047e8:	4c08      	ldr	r4, [pc, #32]	; (800480c <vQueueAddToRegistry+0x28>)
 80047ea:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80047ee:	b12a      	cbz	r2, 80047fc <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047f0:	3301      	adds	r3, #1
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d1f9      	bne.n	80047ea <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047fc:	4a03      	ldr	r2, [pc, #12]	; (800480c <vQueueAddToRegistry+0x28>)
 80047fe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004802:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004806:	6058      	str	r0, [r3, #4]
				break;
 8004808:	e7f5      	b.n	80047f6 <vQueueAddToRegistry+0x12>
 800480a:	bf00      	nop
 800480c:	20006c18 	.word	0x20006c18

08004810 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004810:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004812:	4909      	ldr	r1, [pc, #36]	; (8004838 <vQueueUnregisterQueue+0x28>)
 8004814:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8004818:	6852      	ldr	r2, [r2, #4]
 800481a:	4282      	cmp	r2, r0
 800481c:	d003      	beq.n	8004826 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800481e:	3301      	adds	r3, #1
 8004820:	2b08      	cmp	r3, #8
 8004822:	d1f7      	bne.n	8004814 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004824:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <vQueueUnregisterQueue+0x28>)
 8004828:	2100      	movs	r1, #0
 800482a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800482e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004832:	6059      	str	r1, [r3, #4]
				break;
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	20006c18 	.word	0x20006c18

0800483c <vQueueDelete>:
	configASSERT( pxQueue );
 800483c:	b138      	cbz	r0, 800484e <vQueueDelete+0x12>
{
 800483e:	b510      	push	{r4, lr}
 8004840:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8004842:	f7ff ffe5 	bl	8004810 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004846:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800484a:	b14b      	cbz	r3, 8004860 <vQueueDelete+0x24>
}
 800484c:	bd10      	pop	{r4, pc}
 800484e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004852:	f383 8811 	msr	BASEPRI, r3
 8004856:	f3bf 8f6f 	isb	sy
 800485a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800485e:	e7fe      	b.n	800485e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8004860:	4620      	mov	r0, r4
 8004862:	f001 fa91 	bl	8005d88 <vPortFree>
}
 8004866:	e7f1      	b.n	800484c <vQueueDelete+0x10>

08004868 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	4604      	mov	r4, r0
 800486c:	460d      	mov	r5, r1
 800486e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004870:	f001 f868 	bl	8005944 <vPortEnterCritical>
 8004874:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004878:	b25b      	sxtb	r3, r3
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	bf04      	itt	eq
 8004880:	2300      	moveq	r3, #0
 8004882:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8004886:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800488a:	b25b      	sxtb	r3, r3
 800488c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004890:	bf04      	itt	eq
 8004892:	2300      	moveq	r3, #0
 8004894:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004898:	f001 f876 	bl	8005988 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800489c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800489e:	b11b      	cbz	r3, 80048a8 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048a0:	4620      	mov	r0, r4
 80048a2:	f7ff fa77 	bl	8003d94 <prvUnlockQueue>
	}
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048a8:	4632      	mov	r2, r6
 80048aa:	4629      	mov	r1, r5
 80048ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80048b0:	f000 fc10 	bl	80050d4 <vTaskPlaceOnEventListRestricted>
 80048b4:	e7f4      	b.n	80048a0 <vQueueWaitForMessageRestricted+0x38>
	...

080048b8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048b8:	4b08      	ldr	r3, [pc, #32]	; (80048dc <prvResetNextTaskUnblockTime+0x24>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	b923      	cbnz	r3, 80048ca <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <prvResetNextTaskUnblockTime+0x28>)
 80048c2:	f04f 32ff 	mov.w	r2, #4294967295
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ca:	4b04      	ldr	r3, [pc, #16]	; (80048dc <prvResetNextTaskUnblockTime+0x24>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <prvResetNextTaskUnblockTime+0x28>)
 80048d6:	601a      	str	r2, [r3, #0]
	}
}
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	20006c5c 	.word	0x20006c5c
 80048e0:	20007100 	.word	0x20007100

080048e4 <prvInitialiseNewTask>:
{
 80048e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	4606      	mov	r6, r0
 80048ea:	4689      	mov	r9, r1
 80048ec:	461f      	mov	r7, r3
 80048ee:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80048f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80048f4:	0095      	lsls	r5, r2, #2
 80048f6:	462a      	mov	r2, r5
 80048f8:	21a5      	movs	r1, #165	; 0xa5
 80048fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80048fc:	f00a fa75 	bl	800edea <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004900:	3d04      	subs	r5, #4
 8004902:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004904:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004906:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800490a:	f1b9 0f00 	cmp.w	r9, #0
 800490e:	d043      	beq.n	8004998 <prvInitialiseNewTask+0xb4>
 8004910:	f109 3cff 	add.w	ip, r9, #4294967295
 8004914:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8004918:	f109 010f 	add.w	r1, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800491c:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8004920:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004924:	b10a      	cbz	r2, 800492a <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004926:	458c      	cmp	ip, r1
 8004928:	d1f8      	bne.n	800491c <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800492a:	2300      	movs	r3, #0
 800492c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004930:	9b08      	ldr	r3, [sp, #32]
 8004932:	2b37      	cmp	r3, #55	; 0x37
 8004934:	bf28      	it	cs
 8004936:	2337      	movcs	r3, #55	; 0x37
 8004938:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 800493a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800493c:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800493e:	f04f 0a00 	mov.w	sl, #0
 8004942:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004946:	1d20      	adds	r0, r4, #4
 8004948:	f7ff f993 	bl	8003c72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800494c:	f104 0018 	add.w	r0, r4, #24
 8004950:	f7ff f98f 	bl	8003c72 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004954:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004956:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 800495a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800495c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800495e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004962:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004966:	2260      	movs	r2, #96	; 0x60
 8004968:	4651      	mov	r1, sl
 800496a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800496e:	f00a fa3c 	bl	800edea <memset>
 8004972:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <prvInitialiseNewTask+0xbc>)
 8004974:	65a3      	str	r3, [r4, #88]	; 0x58
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <prvInitialiseNewTask+0xc0>)
 8004978:	65e3      	str	r3, [r4, #92]	; 0x5c
 800497a:	4b0b      	ldr	r3, [pc, #44]	; (80049a8 <prvInitialiseNewTask+0xc4>)
 800497c:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800497e:	463a      	mov	r2, r7
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	f000 ffb2 	bl	80058ec <pxPortInitialiseStack>
 8004988:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800498a:	f1b8 0f00 	cmp.w	r8, #0
 800498e:	d001      	beq.n	8004994 <prvInitialiseNewTask+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004990:	f8c8 4000 	str.w	r4, [r8]
}
 8004994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004998:	2300      	movs	r3, #0
 800499a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800499e:	e7c7      	b.n	8004930 <prvInitialiseNewTask+0x4c>
 80049a0:	08013414 	.word	0x08013414
 80049a4:	08013434 	.word	0x08013434
 80049a8:	080133f4 	.word	0x080133f4

080049ac <prvAddNewTaskToReadyList>:
{
 80049ac:	b570      	push	{r4, r5, r6, lr}
 80049ae:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80049b0:	f000 ffc8 	bl	8005944 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80049b4:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <prvAddNewTaskToReadyList+0xcc>)
 80049b6:	6813      	ldr	r3, [r2, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049bc:	4b2f      	ldr	r3, [pc, #188]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d034      	beq.n	8004a2e <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 80049c4:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <prvAddNewTaskToReadyList+0xd4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	b93b      	cbnz	r3, 80049da <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ca:	4b2c      	ldr	r3, [pc, #176]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80049d2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80049d4:	bf9c      	itt	ls
 80049d6:	4b29      	ldrls	r3, [pc, #164]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 80049d8:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 80049da:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <prvAddNewTaskToReadyList+0xd8>)
 80049dc:	6813      	ldr	r3, [r2, #0]
 80049de:	3301      	adds	r3, #1
 80049e0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049e2:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80049e4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80049e6:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <prvAddNewTaskToReadyList+0xdc>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4298      	cmp	r0, r3
 80049ec:	bf84      	itt	hi
 80049ee:	4b26      	ldrhi	r3, [pc, #152]	; (8004a88 <prvAddNewTaskToReadyList+0xdc>)
 80049f0:	6018      	strhi	r0, [r3, #0]
 80049f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049f6:	1d29      	adds	r1, r5, #4
 80049f8:	4b24      	ldr	r3, [pc, #144]	; (8004a8c <prvAddNewTaskToReadyList+0xe0>)
 80049fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80049fe:	f7ff f93b 	bl	8003c78 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004a02:	f000 ffc1 	bl	8005988 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <prvAddNewTaskToReadyList+0xd4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	b17b      	cbz	r3, 8004a2c <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a12:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d209      	bcs.n	8004a2c <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8004a18:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a20:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
}
 8004a2c:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8004a2e:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <prvAddNewTaskToReadyList+0xd0>)
 8004a30:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a32:	6813      	ldr	r3, [r2, #0]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d1d0      	bne.n	80049da <prvAddNewTaskToReadyList+0x2e>
 8004a38:	4c14      	ldr	r4, [pc, #80]	; (8004a8c <prvAddNewTaskToReadyList+0xe0>)
 8004a3a:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f7ff f90c 	bl	8003c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a44:	3414      	adds	r4, #20
 8004a46:	42b4      	cmp	r4, r6
 8004a48:	d1f9      	bne.n	8004a3e <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 8004a4a:	4e11      	ldr	r6, [pc, #68]	; (8004a90 <prvAddNewTaskToReadyList+0xe4>)
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff f905 	bl	8003c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a52:	4c10      	ldr	r4, [pc, #64]	; (8004a94 <prvAddNewTaskToReadyList+0xe8>)
 8004a54:	4620      	mov	r0, r4
 8004a56:	f7ff f901 	bl	8003c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a5a:	480f      	ldr	r0, [pc, #60]	; (8004a98 <prvAddNewTaskToReadyList+0xec>)
 8004a5c:	f7ff f8fe 	bl	8003c5c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004a60:	480e      	ldr	r0, [pc, #56]	; (8004a9c <prvAddNewTaskToReadyList+0xf0>)
 8004a62:	f7ff f8fb 	bl	8003c5c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004a66:	480e      	ldr	r0, [pc, #56]	; (8004aa0 <prvAddNewTaskToReadyList+0xf4>)
 8004a68:	f7ff f8f8 	bl	8003c5c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <prvAddNewTaskToReadyList+0xf8>)
 8004a6e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <prvAddNewTaskToReadyList+0xfc>)
 8004a72:	601c      	str	r4, [r3, #0]
}
 8004a74:	e7b1      	b.n	80049da <prvAddNewTaskToReadyList+0x2e>
 8004a76:	bf00      	nop
 8004a78:	200070c4 	.word	0x200070c4
 8004a7c:	20006c58 	.word	0x20006c58
 8004a80:	20007120 	.word	0x20007120
 8004a84:	200070d0 	.word	0x200070d0
 8004a88:	200070d4 	.word	0x200070d4
 8004a8c:	20006c64 	.word	0x20006c64
 8004a90:	200070d8 	.word	0x200070d8
 8004a94:	200070ec 	.word	0x200070ec
 8004a98:	2000710c 	.word	0x2000710c
 8004a9c:	20007138 	.word	0x20007138
 8004aa0:	20007124 	.word	0x20007124
 8004aa4:	20006c5c 	.word	0x20006c5c
 8004aa8:	20006c60 	.word	0x20006c60

08004aac <prvDeleteTCB>:
	{
 8004aac:	b510      	push	{r4, lr}
 8004aae:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ab0:	3054      	adds	r0, #84	; 0x54
 8004ab2:	f00a fa9b 	bl	800efec <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ab6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8004aba:	b163      	cbz	r3, 8004ad6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d011      	beq.n	8004ae4 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d00e      	beq.n	8004ae2 <prvDeleteTCB+0x36>
 8004ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	e7fe      	b.n	8004ad4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8004ad6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ad8:	f001 f956 	bl	8005d88 <vPortFree>
				vPortFree( pxTCB );
 8004adc:	4620      	mov	r0, r4
 8004ade:	f001 f953 	bl	8005d88 <vPortFree>
	}
 8004ae2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004ae4:	4620      	mov	r0, r4
 8004ae6:	f001 f94f 	bl	8005d88 <vPortFree>
 8004aea:	e7fa      	b.n	8004ae2 <prvDeleteTCB+0x36>

08004aec <prvIdleTask>:
{
 8004aec:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aee:	4c15      	ldr	r4, [pc, #84]	; (8004b44 <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004af0:	4f15      	ldr	r7, [pc, #84]	; (8004b48 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8004af2:	4e16      	ldr	r6, [pc, #88]	; (8004b4c <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004af4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004b50 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	b1a3      	cbz	r3, 8004b26 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8004afc:	f000 ff22 	bl	8005944 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b04:	1d28      	adds	r0, r5, #4
 8004b06:	f7ff f8db 	bl	8003cc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b0a:	6833      	ldr	r3, [r6, #0]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004b16:	f000 ff37 	bl	8005988 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f7ff ffc6 	bl	8004aac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ea      	bne.n	8004afc <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b26:	f8d8 3000 	ldr.w	r3, [r8]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d9e4      	bls.n	8004af8 <prvIdleTask+0xc>
				taskYIELD();
 8004b2e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b36:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	e7d9      	b.n	8004af8 <prvIdleTask+0xc>
 8004b44:	200070c8 	.word	0x200070c8
 8004b48:	20007138 	.word	0x20007138
 8004b4c:	200070c4 	.word	0x200070c4
 8004b50:	20006c64 	.word	0x20006c64

08004b54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b54:	b570      	push	{r4, r5, r6, lr}
 8004b56:	4604      	mov	r4, r0
 8004b58:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b5a:	4b17      	ldr	r3, [pc, #92]	; (8004bb8 <prvAddCurrentTaskToDelayedList+0x64>)
 8004b5c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b5e:	4b17      	ldr	r3, [pc, #92]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	3004      	adds	r0, #4
 8004b64:	f7ff f8ac 	bl	8003cc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b68:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b6c:	d00d      	beq.n	8004b8a <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b6e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004b76:	42a6      	cmp	r6, r4
 8004b78:	d910      	bls.n	8004b9c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004b7c:	6818      	ldr	r0, [r3, #0]
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b80:	6819      	ldr	r1, [r3, #0]
 8004b82:	3104      	adds	r1, #4
 8004b84:	f7ff f883 	bl	8003c8e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b88:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b8a:	2d00      	cmp	r5, #0
 8004b8c:	d0ef      	beq.n	8004b6e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b8e:	4b0b      	ldr	r3, [pc, #44]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	3104      	adds	r1, #4
 8004b94:	480b      	ldr	r0, [pc, #44]	; (8004bc4 <prvAddCurrentTaskToDelayedList+0x70>)
 8004b96:	f7ff f86f 	bl	8003c78 <vListInsertEnd>
 8004b9a:	e7f5      	b.n	8004b88 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x74>)
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	4b06      	ldr	r3, [pc, #24]	; (8004bbc <prvAddCurrentTaskToDelayedList+0x68>)
 8004ba2:	6819      	ldr	r1, [r3, #0]
 8004ba4:	3104      	adds	r1, #4
 8004ba6:	f7ff f872 	bl	8003c8e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x78>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004bb0:	bf84      	itt	hi
 8004bb2:	4b06      	ldrhi	r3, [pc, #24]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x78>)
 8004bb4:	601c      	strhi	r4, [r3, #0]
}
 8004bb6:	e7e7      	b.n	8004b88 <prvAddCurrentTaskToDelayedList+0x34>
 8004bb8:	2000714c 	.word	0x2000714c
 8004bbc:	20006c58 	.word	0x20006c58
 8004bc0:	20006c60 	.word	0x20006c60
 8004bc4:	20007124 	.word	0x20007124
 8004bc8:	20006c5c 	.word	0x20006c5c
 8004bcc:	20007100 	.word	0x20007100

08004bd0 <xTaskCreateStatic>:
	{
 8004bd0:	b530      	push	{r4, r5, lr}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004bd6:	b17c      	cbz	r4, 8004bf8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bda:	b1b5      	cbz	r5, 8004c0a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bdc:	25bc      	movs	r5, #188	; 0xbc
 8004bde:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004be0:	9d04      	ldr	r5, [sp, #16]
 8004be2:	2dbc      	cmp	r5, #188	; 0xbc
 8004be4:	d01a      	beq.n	8004c1c <xTaskCreateStatic+0x4c>
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	e7fe      	b.n	8004bf6 <xTaskCreateStatic+0x26>
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004c08:	e7fe      	b.n	8004c08 <xTaskCreateStatic+0x38>
 8004c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0e:	f383 8811 	msr	BASEPRI, r3
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004c1a:	e7fe      	b.n	8004c1a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c1c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c20:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c22:	2402      	movs	r4, #2
 8004c24:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c28:	2400      	movs	r4, #0
 8004c2a:	9403      	str	r4, [sp, #12]
 8004c2c:	9502      	str	r5, [sp, #8]
 8004c2e:	ac05      	add	r4, sp, #20
 8004c30:	9401      	str	r4, [sp, #4]
 8004c32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c34:	9400      	str	r4, [sp, #0]
 8004c36:	f7ff fe55 	bl	80048e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c3c:	f7ff feb6 	bl	80049ac <prvAddNewTaskToReadyList>
	}
 8004c40:	9805      	ldr	r0, [sp, #20]
 8004c42:	b007      	add	sp, #28
 8004c44:	bd30      	pop	{r4, r5, pc}

08004c46 <xTaskCreate>:
	{
 8004c46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	4607      	mov	r7, r0
 8004c4e:	4688      	mov	r8, r1
 8004c50:	4614      	mov	r4, r2
 8004c52:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c54:	0090      	lsls	r0, r2, #2
 8004c56:	f000 fffb 	bl	8005c50 <pvPortMalloc>
			if( pxStack != NULL )
 8004c5a:	b308      	cbz	r0, 8004ca0 <xTaskCreate+0x5a>
 8004c5c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c5e:	20bc      	movs	r0, #188	; 0xbc
 8004c60:	f000 fff6 	bl	8005c50 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004c64:	4605      	mov	r5, r0
 8004c66:	b1a8      	cbz	r0, 8004c94 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004c68:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9002      	str	r0, [sp, #8]
 8004c76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	4633      	mov	r3, r6
 8004c80:	4622      	mov	r2, r4
 8004c82:	4641      	mov	r1, r8
 8004c84:	4638      	mov	r0, r7
 8004c86:	f7ff fe2d 	bl	80048e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c8a:	4628      	mov	r0, r5
 8004c8c:	f7ff fe8e 	bl	80049ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c90:	2001      	movs	r0, #1
 8004c92:	e007      	b.n	8004ca4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8004c94:	4648      	mov	r0, r9
 8004c96:	f001 f877 	bl	8005d88 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9e:	e001      	b.n	8004ca4 <xTaskCreate+0x5e>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004ca4:	b005      	add	sp, #20
 8004ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004cac <vTaskStartScheduler>:
{
 8004cac:	b510      	push	{r4, lr}
 8004cae:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cb0:	2400      	movs	r4, #0
 8004cb2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cb4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cb6:	aa07      	add	r2, sp, #28
 8004cb8:	a906      	add	r1, sp, #24
 8004cba:	a805      	add	r0, sp, #20
 8004cbc:	f7fe ffb6 	bl	8003c2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cc0:	9b05      	ldr	r3, [sp, #20]
 8004cc2:	9302      	str	r3, [sp, #8]
 8004cc4:	9b06      	ldr	r3, [sp, #24]
 8004cc6:	9301      	str	r3, [sp, #4]
 8004cc8:	9400      	str	r4, [sp, #0]
 8004cca:	4623      	mov	r3, r4
 8004ccc:	9a07      	ldr	r2, [sp, #28]
 8004cce:	4917      	ldr	r1, [pc, #92]	; (8004d2c <vTaskStartScheduler+0x80>)
 8004cd0:	4817      	ldr	r0, [pc, #92]	; (8004d30 <vTaskStartScheduler+0x84>)
 8004cd2:	f7ff ff7d 	bl	8004bd0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004cd6:	b338      	cbz	r0, 8004d28 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8004cd8:	f000 fc14 	bl	8005504 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004cdc:	2801      	cmp	r0, #1
 8004cde:	d00b      	beq.n	8004cf8 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ce0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004ce4:	d120      	bne.n	8004d28 <vTaskStartScheduler+0x7c>
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	e7fe      	b.n	8004cf6 <vTaskStartScheduler+0x4a>
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d08:	4b0a      	ldr	r3, [pc, #40]	; (8004d34 <vTaskStartScheduler+0x88>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	3354      	adds	r3, #84	; 0x54
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <vTaskStartScheduler+0x8c>)
 8004d10:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <vTaskStartScheduler+0x90>)
 8004d14:	f04f 32ff 	mov.w	r2, #4294967295
 8004d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <vTaskStartScheduler+0x94>)
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <vTaskStartScheduler+0x98>)
 8004d22:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004d24:	f000 fea8 	bl	8005a78 <xPortStartScheduler>
}
 8004d28:	b008      	add	sp, #32
 8004d2a:	bd10      	pop	{r4, pc}
 8004d2c:	0800fe9c 	.word	0x0800fe9c
 8004d30:	08004aed 	.word	0x08004aed
 8004d34:	20006c58 	.word	0x20006c58
 8004d38:	2000002c 	.word	0x2000002c
 8004d3c:	20007100 	.word	0x20007100
 8004d40:	20007120 	.word	0x20007120
 8004d44:	2000714c 	.word	0x2000714c

08004d48 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004d48:	4a02      	ldr	r2, [pc, #8]	; (8004d54 <vTaskSuspendAll+0xc>)
 8004d4a:	6813      	ldr	r3, [r2, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	6013      	str	r3, [r2, #0]
}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	200070cc 	.word	0x200070cc

08004d58 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <xTaskGetTickCount+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	2000714c 	.word	0x2000714c

08004d64 <xTaskGetTickCountFromISR>:
{
 8004d64:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d66:	f000 ff15 	bl	8005b94 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004d6a:	4b01      	ldr	r3, [pc, #4]	; (8004d70 <xTaskGetTickCountFromISR+0xc>)
 8004d6c:	6818      	ldr	r0, [r3, #0]
}
 8004d6e:	bd08      	pop	{r3, pc}
 8004d70:	2000714c 	.word	0x2000714c

08004d74 <xTaskIncrementTick>:
{
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d78:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <xTaskIncrementTick+0x108>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d175      	bne.n	8004e6c <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d80:	4b3f      	ldr	r3, [pc, #252]	; (8004e80 <xTaskIncrementTick+0x10c>)
 8004d82:	681e      	ldr	r6, [r3, #0]
 8004d84:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004d86:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d88:	b9c6      	cbnz	r6, 8004dbc <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <xTaskIncrementTick+0x110>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	b143      	cbz	r3, 8004da4 <xTaskIncrementTick+0x30>
 8004d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d96:	f383 8811 	msr	BASEPRI, r3
 8004d9a:	f3bf 8f6f 	isb	sy
 8004d9e:	f3bf 8f4f 	dsb	sy
 8004da2:	e7fe      	b.n	8004da2 <xTaskIncrementTick+0x2e>
 8004da4:	4a37      	ldr	r2, [pc, #220]	; (8004e84 <xTaskIncrementTick+0x110>)
 8004da6:	6811      	ldr	r1, [r2, #0]
 8004da8:	4b37      	ldr	r3, [pc, #220]	; (8004e88 <xTaskIncrementTick+0x114>)
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	6010      	str	r0, [r2, #0]
 8004dae:	6019      	str	r1, [r3, #0]
 8004db0:	4a36      	ldr	r2, [pc, #216]	; (8004e8c <xTaskIncrementTick+0x118>)
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	3301      	adds	r3, #1
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	f7ff fd7e 	bl	80048b8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dbc:	4b34      	ldr	r3, [pc, #208]	; (8004e90 <xTaskIncrementTick+0x11c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	42b3      	cmp	r3, r6
 8004dc2:	d841      	bhi.n	8004e48 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dc4:	4b2f      	ldr	r3, [pc, #188]	; (8004e84 <xTaskIncrementTick+0x110>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	b13b      	cbz	r3, 8004ddc <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8004dcc:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dce:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8004e84 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8004dd2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004ea4 <xTaskIncrementTick+0x130>
 8004dd6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004e98 <xTaskIncrementTick+0x124>
 8004dda:	e022      	b.n	8004e22 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8004ddc:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dde:	4b2c      	ldr	r3, [pc, #176]	; (8004e90 <xTaskIncrementTick+0x11c>)
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	601a      	str	r2, [r3, #0]
					break;
 8004de6:	e030      	b.n	8004e4a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8004de8:	4a29      	ldr	r2, [pc, #164]	; (8004e90 <xTaskIncrementTick+0x11c>)
 8004dea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dec:	e02d      	b.n	8004e4a <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8004dee:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004df0:	f8d9 3000 	ldr.w	r3, [r9]
 8004df4:	4298      	cmp	r0, r3
 8004df6:	bf88      	it	hi
 8004df8:	f8c9 0000 	strhi.w	r0, [r9]
 8004dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e00:	4639      	mov	r1, r7
 8004e02:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8004e06:	f7fe ff37 	bl	8003c78 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e0a:	4b22      	ldr	r3, [pc, #136]	; (8004e94 <xTaskIncrementTick+0x120>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004e12:	429a      	cmp	r2, r3
 8004e14:	bf28      	it	cs
 8004e16:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e18:	f8d8 3000 	ldr.w	r3, [r8]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0dd      	beq.n	8004dde <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e22:	f8d8 3000 	ldr.w	r3, [r8]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e2a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8004e2c:	429e      	cmp	r6, r3
 8004e2e:	d3db      	bcc.n	8004de8 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e30:	1d27      	adds	r7, r4, #4
 8004e32:	4638      	mov	r0, r7
 8004e34:	f7fe ff44 	bl	8003cc0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d0d7      	beq.n	8004dee <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e3e:	f104 0018 	add.w	r0, r4, #24
 8004e42:	f7fe ff3d 	bl	8003cc0 <uxListRemove>
 8004e46:	e7d2      	b.n	8004dee <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8004e48:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e4a:	4b12      	ldr	r3, [pc, #72]	; (8004e94 <xTaskIncrementTick+0x120>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <xTaskIncrementTick+0x124>)
 8004e58:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	bf28      	it	cs
 8004e5e:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <xTaskIncrementTick+0x128>)
 8004e62:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	bf18      	it	ne
 8004e68:	2501      	movne	r5, #1
 8004e6a:	e004      	b.n	8004e76 <xTaskIncrementTick+0x102>
		++xPendedTicks;
 8004e6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ea0 <xTaskIncrementTick+0x12c>)
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	3301      	adds	r3, #1
 8004e72:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004e74:	2500      	movs	r5, #0
}
 8004e76:	4628      	mov	r0, r5
 8004e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e7c:	200070cc 	.word	0x200070cc
 8004e80:	2000714c 	.word	0x2000714c
 8004e84:	20006c5c 	.word	0x20006c5c
 8004e88:	20006c60 	.word	0x20006c60
 8004e8c:	20007104 	.word	0x20007104
 8004e90:	20007100 	.word	0x20007100
 8004e94:	20006c58 	.word	0x20006c58
 8004e98:	20006c64 	.word	0x20006c64
 8004e9c:	20007150 	.word	0x20007150
 8004ea0:	20007108 	.word	0x20007108
 8004ea4:	200070d4 	.word	0x200070d4

08004ea8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8004ea8:	4b38      	ldr	r3, [pc, #224]	; (8004f8c <xTaskResumeAll+0xe4>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	b943      	cbnz	r3, 8004ec0 <xTaskResumeAll+0x18>
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	e7fe      	b.n	8004ebe <xTaskResumeAll+0x16>
{
 8004ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8004ec4:	f000 fd3e 	bl	8005944 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004ec8:	4b30      	ldr	r3, [pc, #192]	; (8004f8c <xTaskResumeAll+0xe4>)
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	3a01      	subs	r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d149      	bne.n	8004f6a <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <xTaskResumeAll+0xe8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d04b      	beq.n	8004f76 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ede:	4b2d      	ldr	r3, [pc, #180]	; (8004f94 <xTaskResumeAll+0xec>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04b      	beq.n	8004f7e <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee6:	4e2b      	ldr	r6, [pc, #172]	; (8004f94 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8004ee8:	4f2b      	ldr	r7, [pc, #172]	; (8004f98 <xTaskResumeAll+0xf0>)
 8004eea:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004fa8 <xTaskResumeAll+0x100>
 8004eee:	e002      	b.n	8004ef6 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef0:	6833      	ldr	r3, [r6, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d041      	beq.n	8004f7a <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef6:	68f3      	ldr	r3, [r6, #12]
 8004ef8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004efa:	f104 0018 	add.w	r0, r4, #24
 8004efe:	f7fe fedf 	bl	8003cc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f02:	1d25      	adds	r5, r4, #4
 8004f04:	4628      	mov	r0, r5
 8004f06:	f7fe fedb 	bl	8003cc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	4298      	cmp	r0, r3
 8004f10:	bf88      	it	hi
 8004f12:	6038      	strhi	r0, [r7, #0]
 8004f14:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f18:	4629      	mov	r1, r5
 8004f1a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004f1e:	f7fe feab 	bl	8003c78 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <xTaskResumeAll+0xf4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d3e0      	bcc.n	8004ef0 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8004f2e:	4b1c      	ldr	r3, [pc, #112]	; (8004fa0 <xTaskResumeAll+0xf8>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	e7dc      	b.n	8004ef0 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f36:	3c01      	subs	r4, #1
 8004f38:	d005      	beq.n	8004f46 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8004f3a:	f7ff ff1b 	bl	8004d74 <xTaskIncrementTick>
 8004f3e:	2800      	cmp	r0, #0
 8004f40:	d0f9      	beq.n	8004f36 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8004f42:	6035      	str	r5, [r6, #0]
 8004f44:	e7f7      	b.n	8004f36 <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 8004f46:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <xTaskResumeAll+0xfc>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8004f4c:	4b14      	ldr	r3, [pc, #80]	; (8004fa0 <xTaskResumeAll+0xf8>)
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	b164      	cbz	r4, 8004f6c <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8004f52:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004f66:	2401      	movs	r4, #1
 8004f68:	e000      	b.n	8004f6c <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8004f6a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f6c:	f000 fd0c 	bl	8005988 <vPortExitCritical>
}
 8004f70:	4620      	mov	r0, r4
 8004f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8004f76:	2400      	movs	r4, #0
 8004f78:	e7f8      	b.n	8004f6c <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8004f7a:	f7ff fc9d 	bl	80048b8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <xTaskResumeAll+0xfc>)
 8004f80:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004f82:	2c00      	cmp	r4, #0
 8004f84:	d0e2      	beq.n	8004f4c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8004f86:	4e06      	ldr	r6, [pc, #24]	; (8004fa0 <xTaskResumeAll+0xf8>)
 8004f88:	2501      	movs	r5, #1
 8004f8a:	e7d6      	b.n	8004f3a <xTaskResumeAll+0x92>
 8004f8c:	200070cc 	.word	0x200070cc
 8004f90:	200070c4 	.word	0x200070c4
 8004f94:	2000710c 	.word	0x2000710c
 8004f98:	200070d4 	.word	0x200070d4
 8004f9c:	20006c58 	.word	0x20006c58
 8004fa0:	20007150 	.word	0x20007150
 8004fa4:	20007108 	.word	0x20007108
 8004fa8:	20006c64 	.word	0x20006c64

08004fac <vTaskDelay>:
	{
 8004fac:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fae:	b1a8      	cbz	r0, 8004fdc <vTaskDelay+0x30>
 8004fb0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <vTaskDelay+0x48>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	b143      	cbz	r3, 8004fca <vTaskDelay+0x1e>
 8004fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbc:	f383 8811 	msr	BASEPRI, r3
 8004fc0:	f3bf 8f6f 	isb	sy
 8004fc4:	f3bf 8f4f 	dsb	sy
 8004fc8:	e7fe      	b.n	8004fc8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004fca:	f7ff febd 	bl	8004d48 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fce:	2100      	movs	r1, #0
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f7ff fdbf 	bl	8004b54 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004fd6:	f7ff ff67 	bl	8004ea8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004fda:	b948      	cbnz	r0, 8004ff0 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8004fdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004fe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fe4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004fe8:	f3bf 8f4f 	dsb	sy
 8004fec:	f3bf 8f6f 	isb	sy
	}
 8004ff0:	bd10      	pop	{r4, pc}
 8004ff2:	bf00      	nop
 8004ff4:	200070cc 	.word	0x200070cc

08004ff8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ff8:	4b24      	ldr	r3, [pc, #144]	; (800508c <vTaskSwitchContext+0x94>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	b11b      	cbz	r3, 8005006 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8004ffe:	4b24      	ldr	r3, [pc, #144]	; (8005090 <vTaskSwitchContext+0x98>)
 8005000:	2201      	movs	r2, #1
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005006:	4b22      	ldr	r3, [pc, #136]	; (8005090 <vTaskSwitchContext+0x98>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500c:	4b21      	ldr	r3, [pc, #132]	; (8005094 <vTaskSwitchContext+0x9c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005014:	0092      	lsls	r2, r2, #2
 8005016:	4920      	ldr	r1, [pc, #128]	; (8005098 <vTaskSwitchContext+0xa0>)
 8005018:	588a      	ldr	r2, [r1, r2]
 800501a:	b98a      	cbnz	r2, 8005040 <vTaskSwitchContext+0x48>
 800501c:	b13b      	cbz	r3, 800502e <vTaskSwitchContext+0x36>
 800501e:	3b01      	subs	r3, #1
 8005020:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005024:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005028:	b952      	cbnz	r2, 8005040 <vTaskSwitchContext+0x48>
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f7      	bne.n	800501e <vTaskSwitchContext+0x26>
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	e7fe      	b.n	800503e <vTaskSwitchContext+0x46>
 8005040:	4a15      	ldr	r2, [pc, #84]	; (8005098 <vTaskSwitchContext+0xa0>)
 8005042:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005046:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800504a:	6848      	ldr	r0, [r1, #4]
 800504c:	6840      	ldr	r0, [r0, #4]
 800504e:	6048      	str	r0, [r1, #4]
 8005050:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005054:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005058:	3208      	adds	r2, #8
 800505a:	4290      	cmp	r0, r2
 800505c:	d00f      	beq.n	800507e <vTaskSwitchContext+0x86>
 800505e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005062:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <vTaskSwitchContext+0xa0>)
 8005064:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005068:	6852      	ldr	r2, [r2, #4]
 800506a:	68d1      	ldr	r1, [r2, #12]
 800506c:	4a0b      	ldr	r2, [pc, #44]	; (800509c <vTaskSwitchContext+0xa4>)
 800506e:	6011      	str	r1, [r2, #0]
 8005070:	4908      	ldr	r1, [pc, #32]	; (8005094 <vTaskSwitchContext+0x9c>)
 8005072:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	3354      	adds	r3, #84	; 0x54
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <vTaskSwitchContext+0xa8>)
 800507a:	6013      	str	r3, [r2, #0]
}
 800507c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800507e:	6840      	ldr	r0, [r0, #4]
 8005080:	4a05      	ldr	r2, [pc, #20]	; (8005098 <vTaskSwitchContext+0xa0>)
 8005082:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005086:	6050      	str	r0, [r2, #4]
 8005088:	e7e9      	b.n	800505e <vTaskSwitchContext+0x66>
 800508a:	bf00      	nop
 800508c:	200070cc 	.word	0x200070cc
 8005090:	20007150 	.word	0x20007150
 8005094:	200070d4 	.word	0x200070d4
 8005098:	20006c64 	.word	0x20006c64
 800509c:	20006c58 	.word	0x20006c58
 80050a0:	2000002c 	.word	0x2000002c

080050a4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80050a4:	b158      	cbz	r0, 80050be <vTaskPlaceOnEventList+0x1a>
{
 80050a6:	b510      	push	{r4, lr}
 80050a8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050aa:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <vTaskPlaceOnEventList+0x2c>)
 80050ac:	6811      	ldr	r1, [r2, #0]
 80050ae:	3118      	adds	r1, #24
 80050b0:	f7fe fded 	bl	8003c8e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050b4:	2101      	movs	r1, #1
 80050b6:	4620      	mov	r0, r4
 80050b8:	f7ff fd4c 	bl	8004b54 <prvAddCurrentTaskToDelayedList>
}
 80050bc:	bd10      	pop	{r4, pc}
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80050ce:	e7fe      	b.n	80050ce <vTaskPlaceOnEventList+0x2a>
 80050d0:	20006c58 	.word	0x20006c58

080050d4 <vTaskPlaceOnEventListRestricted>:
	{
 80050d4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80050d6:	b178      	cbz	r0, 80050f8 <vTaskPlaceOnEventListRestricted+0x24>
 80050d8:	460d      	mov	r5, r1
 80050da:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050dc:	4a0b      	ldr	r2, [pc, #44]	; (800510c <vTaskPlaceOnEventListRestricted+0x38>)
 80050de:	6811      	ldr	r1, [r2, #0]
 80050e0:	3118      	adds	r1, #24
 80050e2:	f7fe fdc9 	bl	8003c78 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80050e6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050e8:	4621      	mov	r1, r4
 80050ea:	bf0c      	ite	eq
 80050ec:	4628      	moveq	r0, r5
 80050ee:	f04f 30ff 	movne.w	r0, #4294967295
 80050f2:	f7ff fd2f 	bl	8004b54 <prvAddCurrentTaskToDelayedList>
	}
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005108:	e7fe      	b.n	8005108 <vTaskPlaceOnEventListRestricted+0x34>
 800510a:	bf00      	nop
 800510c:	20006c58 	.word	0x20006c58

08005110 <xTaskRemoveFromEventList>:
{
 8005110:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005112:	68c3      	ldr	r3, [r0, #12]
 8005114:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005116:	b32c      	cbz	r4, 8005164 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005118:	f104 0518 	add.w	r5, r4, #24
 800511c:	4628      	mov	r0, r5
 800511e:	f7fe fdcf 	bl	8003cc0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005122:	4b17      	ldr	r3, [pc, #92]	; (8005180 <xTaskRemoveFromEventList+0x70>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	bb33      	cbnz	r3, 8005176 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005128:	1d25      	adds	r5, r4, #4
 800512a:	4628      	mov	r0, r5
 800512c:	f7fe fdc8 	bl	8003cc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005130:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005132:	4b14      	ldr	r3, [pc, #80]	; (8005184 <xTaskRemoveFromEventList+0x74>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4298      	cmp	r0, r3
 8005138:	bf84      	itt	hi
 800513a:	4b12      	ldrhi	r3, [pc, #72]	; (8005184 <xTaskRemoveFromEventList+0x74>)
 800513c:	6018      	strhi	r0, [r3, #0]
 800513e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005142:	4629      	mov	r1, r5
 8005144:	4b10      	ldr	r3, [pc, #64]	; (8005188 <xTaskRemoveFromEventList+0x78>)
 8005146:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800514a:	f7fe fd95 	bl	8003c78 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <xTaskRemoveFromEventList+0x7c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005156:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005158:	bf83      	ittte	hi
 800515a:	2001      	movhi	r0, #1
 800515c:	4b0c      	ldrhi	r3, [pc, #48]	; (8005190 <xTaskRemoveFromEventList+0x80>)
 800515e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005160:	2000      	movls	r0, #0
}
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005168:	f383 8811 	msr	BASEPRI, r3
 800516c:	f3bf 8f6f 	isb	sy
 8005170:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005174:	e7fe      	b.n	8005174 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005176:	4629      	mov	r1, r5
 8005178:	4806      	ldr	r0, [pc, #24]	; (8005194 <xTaskRemoveFromEventList+0x84>)
 800517a:	f7fe fd7d 	bl	8003c78 <vListInsertEnd>
 800517e:	e7e6      	b.n	800514e <xTaskRemoveFromEventList+0x3e>
 8005180:	200070cc 	.word	0x200070cc
 8005184:	200070d4 	.word	0x200070d4
 8005188:	20006c64 	.word	0x20006c64
 800518c:	20006c58 	.word	0x20006c58
 8005190:	20007150 	.word	0x20007150
 8005194:	2000710c 	.word	0x2000710c

08005198 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <vTaskInternalSetTimeOutState+0x10>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800519e:	4b03      	ldr	r3, [pc, #12]	; (80051ac <vTaskInternalSetTimeOutState+0x14>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6043      	str	r3, [r0, #4]
}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20007104 	.word	0x20007104
 80051ac:	2000714c 	.word	0x2000714c

080051b0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80051b0:	b1d0      	cbz	r0, 80051e8 <xTaskCheckForTimeOut+0x38>
{
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	460c      	mov	r4, r1
 80051b6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80051b8:	b1f9      	cbz	r1, 80051fa <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80051ba:	f000 fbc3 	bl	8005944 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <xTaskCheckForTimeOut+0x7c>)
 80051c0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80051c2:	6823      	ldr	r3, [r4, #0]
 80051c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c8:	d028      	beq.n	800521c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051ca:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051cc:	4818      	ldr	r0, [pc, #96]	; (8005230 <xTaskCheckForTimeOut+0x80>)
 80051ce:	6800      	ldr	r0, [r0, #0]
 80051d0:	682e      	ldr	r6, [r5, #0]
 80051d2:	4286      	cmp	r6, r0
 80051d4:	d001      	beq.n	80051da <xTaskCheckForTimeOut+0x2a>
 80051d6:	4291      	cmp	r1, r2
 80051d8:	d925      	bls.n	8005226 <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051da:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051dc:	4283      	cmp	r3, r0
 80051de:	d815      	bhi.n	800520c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80051e4:	2401      	movs	r4, #1
 80051e6:	e01a      	b.n	800521e <xTaskCheckForTimeOut+0x6e>
 80051e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ec:	f383 8811 	msr	BASEPRI, r3
 80051f0:	f3bf 8f6f 	isb	sy
 80051f4:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 80051f8:	e7fe      	b.n	80051f8 <xTaskCheckForTimeOut+0x48>
 80051fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fe:	f383 8811 	msr	BASEPRI, r3
 8005202:	f3bf 8f6f 	isb	sy
 8005206:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800520a:	e7fe      	b.n	800520a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800520c:	1a9b      	subs	r3, r3, r2
 800520e:	440b      	add	r3, r1
 8005210:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005212:	4628      	mov	r0, r5
 8005214:	f7ff ffc0 	bl	8005198 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005218:	2400      	movs	r4, #0
 800521a:	e000      	b.n	800521e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800521c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800521e:	f000 fbb3 	bl	8005988 <vPortExitCritical>
}
 8005222:	4620      	mov	r0, r4
 8005224:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8005226:	2401      	movs	r4, #1
 8005228:	e7f9      	b.n	800521e <xTaskCheckForTimeOut+0x6e>
 800522a:	bf00      	nop
 800522c:	2000714c 	.word	0x2000714c
 8005230:	20007104 	.word	0x20007104

08005234 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005234:	4b01      	ldr	r3, [pc, #4]	; (800523c <vTaskMissedYield+0x8>)
 8005236:	2201      	movs	r2, #1
 8005238:	601a      	str	r2, [r3, #0]
}
 800523a:	4770      	bx	lr
 800523c:	20007150 	.word	0x20007150

08005240 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005240:	4b01      	ldr	r3, [pc, #4]	; (8005248 <xTaskGetCurrentTaskHandle+0x8>)
 8005242:	6818      	ldr	r0, [r3, #0]
	}
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	20006c58 	.word	0x20006c58

0800524c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800524c:	4b05      	ldr	r3, [pc, #20]	; (8005264 <xTaskGetSchedulerState+0x18>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b133      	cbz	r3, 8005260 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <xTaskGetSchedulerState+0x1c>)
 8005254:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf0c      	ite	eq
 800525a:	2002      	moveq	r0, #2
 800525c:	2000      	movne	r0, #0
 800525e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005260:	2001      	movs	r0, #1
	}
 8005262:	4770      	bx	lr
 8005264:	20007120 	.word	0x20007120
 8005268:	200070cc 	.word	0x200070cc

0800526c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800526c:	2800      	cmp	r0, #0
 800526e:	d03f      	beq.n	80052f0 <xTaskPriorityInherit+0x84>
	{
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005274:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005276:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <xTaskPriorityInherit+0x88>)
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800527c:	4293      	cmp	r3, r2
 800527e:	d22e      	bcs.n	80052de <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005280:	6982      	ldr	r2, [r0, #24]
 8005282:	2a00      	cmp	r2, #0
 8005284:	db05      	blt.n	8005292 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005286:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <xTaskPriorityInherit+0x88>)
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800528c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005290:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005292:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <xTaskPriorityInherit+0x8c>)
 8005298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800529c:	6962      	ldr	r2, [r4, #20]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d005      	beq.n	80052ae <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052a2:	4b14      	ldr	r3, [pc, #80]	; (80052f4 <xTaskPriorityInherit+0x88>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80052aa:	2001      	movs	r0, #1
 80052ac:	e01f      	b.n	80052ee <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ae:	1d25      	adds	r5, r4, #4
 80052b0:	4628      	mov	r0, r5
 80052b2:	f7fe fd05 	bl	8003cc0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052b6:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <xTaskPriorityInherit+0x88>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80052bc:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <xTaskPriorityInherit+0x90>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4298      	cmp	r0, r3
 80052c4:	bf84      	itt	hi
 80052c6:	4b0d      	ldrhi	r3, [pc, #52]	; (80052fc <xTaskPriorityInherit+0x90>)
 80052c8:	6018      	strhi	r0, [r3, #0]
 80052ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052ce:	4629      	mov	r1, r5
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <xTaskPriorityInherit+0x8c>)
 80052d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052d6:	f7fe fccf 	bl	8003c78 <vListInsertEnd>
				xReturn = pdTRUE;
 80052da:	2001      	movs	r0, #1
 80052dc:	e007      	b.n	80052ee <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <xTaskPriorityInherit+0x88>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	4298      	cmp	r0, r3
 80052e8:	bf2c      	ite	cs
 80052ea:	2000      	movcs	r0, #0
 80052ec:	2001      	movcc	r0, #1
	}
 80052ee:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80052f0:	2000      	movs	r0, #0
	}
 80052f2:	4770      	bx	lr
 80052f4:	20006c58 	.word	0x20006c58
 80052f8:	20006c64 	.word	0x20006c64
 80052fc:	200070d4 	.word	0x200070d4

08005300 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005300:	2800      	cmp	r0, #0
 8005302:	d03b      	beq.n	800537c <xTaskPriorityDisinherit+0x7c>
	{
 8005304:	b538      	push	{r3, r4, r5, lr}
 8005306:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005308:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <xTaskPriorityDisinherit+0x84>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4283      	cmp	r3, r0
 800530e:	d008      	beq.n	8005322 <xTaskPriorityDisinherit+0x22>
 8005310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	e7fe      	b.n	8005320 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005322:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005324:	b943      	cbnz	r3, 8005338 <xTaskPriorityDisinherit+0x38>
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	e7fe      	b.n	8005336 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005338:	3b01      	subs	r3, #1
 800533a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800533c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800533e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005340:	4291      	cmp	r1, r2
 8005342:	d01d      	beq.n	8005380 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005344:	b10b      	cbz	r3, 800534a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005346:	2000      	movs	r0, #0
	}
 8005348:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534a:	1d05      	adds	r5, r0, #4
 800534c:	4628      	mov	r0, r5
 800534e:	f7fe fcb7 	bl	8003cc0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005352:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005354:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005356:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800535a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <xTaskPriorityDisinherit+0x88>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4298      	cmp	r0, r3
 8005362:	bf84      	itt	hi
 8005364:	4b08      	ldrhi	r3, [pc, #32]	; (8005388 <xTaskPriorityDisinherit+0x88>)
 8005366:	6018      	strhi	r0, [r3, #0]
 8005368:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800536c:	4629      	mov	r1, r5
 800536e:	4b07      	ldr	r3, [pc, #28]	; (800538c <xTaskPriorityDisinherit+0x8c>)
 8005370:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005374:	f7fe fc80 	bl	8003c78 <vListInsertEnd>
					xReturn = pdTRUE;
 8005378:	2001      	movs	r0, #1
 800537a:	e7e5      	b.n	8005348 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800537c:	2000      	movs	r0, #0
	}
 800537e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005380:	2000      	movs	r0, #0
 8005382:	e7e1      	b.n	8005348 <xTaskPriorityDisinherit+0x48>
 8005384:	20006c58 	.word	0x20006c58
 8005388:	200070d4 	.word	0x200070d4
 800538c:	20006c64 	.word	0x20006c64

08005390 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005390:	2800      	cmp	r0, #0
 8005392:	d046      	beq.n	8005422 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8005398:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800539a:	b943      	cbnz	r3, 80053ae <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	e7fe      	b.n	80053ac <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80053ae:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80053b0:	4291      	cmp	r1, r2
 80053b2:	bf38      	it	cc
 80053b4:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80053b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80053b8:	428a      	cmp	r2, r1
 80053ba:	d001      	beq.n	80053c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d000      	beq.n	80053c2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80053c0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80053c2:	4b18      	ldr	r3, [pc, #96]	; (8005424 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4283      	cmp	r3, r0
 80053c8:	d022      	beq.n	8005410 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80053ca:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053cc:	6983      	ldr	r3, [r0, #24]
 80053ce:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d0:	bfa4      	itt	ge
 80053d2:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 80053d6:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053dc:	4b12      	ldr	r3, [pc, #72]	; (8005428 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80053de:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80053e2:	6943      	ldr	r3, [r0, #20]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d1eb      	bne.n	80053c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053e8:	1d05      	adds	r5, r0, #4
 80053ea:	4628      	mov	r0, r5
 80053ec:	f7fe fc68 	bl	8003cc0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80053f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80053f2:	4b0e      	ldr	r3, [pc, #56]	; (800542c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4298      	cmp	r0, r3
 80053f8:	bf84      	itt	hi
 80053fa:	4b0c      	ldrhi	r3, [pc, #48]	; (800542c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 80053fc:	6018      	strhi	r0, [r3, #0]
 80053fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005402:	4629      	mov	r1, r5
 8005404:	4b08      	ldr	r3, [pc, #32]	; (8005428 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8005406:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800540a:	f7fe fc35 	bl	8003c78 <vListInsertEnd>
	}
 800540e:	e7d7      	b.n	80053c0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8005410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005414:	f383 8811 	msr	BASEPRI, r3
 8005418:	f3bf 8f6f 	isb	sy
 800541c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005420:	e7fe      	b.n	8005420 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8005422:	4770      	bx	lr
 8005424:	20006c58 	.word	0x20006c58
 8005428:	20006c64 	.word	0x20006c64
 800542c:	200070d4 	.word	0x200070d4

08005430 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <pvTaskIncrementMutexHeldCount+0x18>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b123      	cbz	r3, 8005440 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005436:	4b04      	ldr	r3, [pc, #16]	; (8005448 <pvTaskIncrementMutexHeldCount+0x18>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800543c:	3301      	adds	r3, #1
 800543e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8005440:	4b01      	ldr	r3, [pc, #4]	; (8005448 <pvTaskIncrementMutexHeldCount+0x18>)
 8005442:	6818      	ldr	r0, [r3, #0]
	}
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20006c58 	.word	0x20006c58

0800544c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800544c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800544e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005450:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005452:	4291      	cmp	r1, r2
 8005454:	d80c      	bhi.n	8005470 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005456:	1ad2      	subs	r2, r2, r3
 8005458:	6983      	ldr	r3, [r0, #24]
 800545a:	429a      	cmp	r2, r3
 800545c:	d301      	bcc.n	8005462 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800545e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005460:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005462:	1d01      	adds	r1, r0, #4
 8005464:	4b09      	ldr	r3, [pc, #36]	; (800548c <prvInsertTimerInActiveList+0x40>)
 8005466:	6818      	ldr	r0, [r3, #0]
 8005468:	f7fe fc11 	bl	8003c8e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800546c:	2000      	movs	r0, #0
 800546e:	e7f7      	b.n	8005460 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005470:	429a      	cmp	r2, r3
 8005472:	d201      	bcs.n	8005478 <prvInsertTimerInActiveList+0x2c>
 8005474:	4299      	cmp	r1, r3
 8005476:	d206      	bcs.n	8005486 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005478:	1d01      	adds	r1, r0, #4
 800547a:	4b05      	ldr	r3, [pc, #20]	; (8005490 <prvInsertTimerInActiveList+0x44>)
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f7fe fc06 	bl	8003c8e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005482:	2000      	movs	r0, #0
 8005484:	e7ec      	b.n	8005460 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8005486:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005488:	e7ea      	b.n	8005460 <prvInsertTimerInActiveList+0x14>
 800548a:	bf00      	nop
 800548c:	20007158 	.word	0x20007158
 8005490:	20007154 	.word	0x20007154

08005494 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005494:	b530      	push	{r4, r5, lr}
 8005496:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005498:	f000 fa54 	bl	8005944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800549c:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <prvCheckForValidListAndQueue+0x50>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	b11b      	cbz	r3, 80054aa <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054a2:	f000 fa71 	bl	8005988 <vPortExitCritical>
}
 80054a6:	b003      	add	sp, #12
 80054a8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80054aa:	4d0f      	ldr	r5, [pc, #60]	; (80054e8 <prvCheckForValidListAndQueue+0x54>)
 80054ac:	4628      	mov	r0, r5
 80054ae:	f7fe fbd5 	bl	8003c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054b2:	4c0e      	ldr	r4, [pc, #56]	; (80054ec <prvCheckForValidListAndQueue+0x58>)
 80054b4:	4620      	mov	r0, r4
 80054b6:	f7fe fbd1 	bl	8003c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ba:	4b0d      	ldr	r3, [pc, #52]	; (80054f0 <prvCheckForValidListAndQueue+0x5c>)
 80054bc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054be:	4b0d      	ldr	r3, [pc, #52]	; (80054f4 <prvCheckForValidListAndQueue+0x60>)
 80054c0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054c2:	2300      	movs	r3, #0
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <prvCheckForValidListAndQueue+0x64>)
 80054c8:	4a0c      	ldr	r2, [pc, #48]	; (80054fc <prvCheckForValidListAndQueue+0x68>)
 80054ca:	2110      	movs	r1, #16
 80054cc:	200a      	movs	r0, #10
 80054ce:	f7fe fcde 	bl	8003e8e <xQueueGenericCreateStatic>
 80054d2:	4b04      	ldr	r3, [pc, #16]	; (80054e4 <prvCheckForValidListAndQueue+0x50>)
 80054d4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80054d6:	2800      	cmp	r0, #0
 80054d8:	d0e3      	beq.n	80054a2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054da:	4909      	ldr	r1, [pc, #36]	; (8005500 <prvCheckForValidListAndQueue+0x6c>)
 80054dc:	f7ff f982 	bl	80047e4 <vQueueAddToRegistry>
 80054e0:	e7df      	b.n	80054a2 <prvCheckForValidListAndQueue+0xe>
 80054e2:	bf00      	nop
 80054e4:	20007278 	.word	0x20007278
 80054e8:	200071fc 	.word	0x200071fc
 80054ec:	20007210 	.word	0x20007210
 80054f0:	20007154 	.word	0x20007154
 80054f4:	20007158 	.word	0x20007158
 80054f8:	20007228 	.word	0x20007228
 80054fc:	2000715c 	.word	0x2000715c
 8005500:	0800fea4 	.word	0x0800fea4

08005504 <xTimerCreateTimerTask>:
{
 8005504:	b510      	push	{r4, lr}
 8005506:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005508:	f7ff ffc4 	bl	8005494 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800550c:	4b12      	ldr	r3, [pc, #72]	; (8005558 <xTimerCreateTimerTask+0x54>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	b1cb      	cbz	r3, 8005546 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005512:	2400      	movs	r4, #0
 8005514:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005516:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005518:	aa07      	add	r2, sp, #28
 800551a:	a906      	add	r1, sp, #24
 800551c:	a805      	add	r0, sp, #20
 800551e:	f7fe fb91 	bl	8003c44 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005522:	9b05      	ldr	r3, [sp, #20]
 8005524:	9302      	str	r3, [sp, #8]
 8005526:	9b06      	ldr	r3, [sp, #24]
 8005528:	9301      	str	r3, [sp, #4]
 800552a:	2302      	movs	r3, #2
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	4623      	mov	r3, r4
 8005530:	9a07      	ldr	r2, [sp, #28]
 8005532:	490a      	ldr	r1, [pc, #40]	; (800555c <xTimerCreateTimerTask+0x58>)
 8005534:	480a      	ldr	r0, [pc, #40]	; (8005560 <xTimerCreateTimerTask+0x5c>)
 8005536:	f7ff fb4b 	bl	8004bd0 <xTaskCreateStatic>
 800553a:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <xTimerCreateTimerTask+0x60>)
 800553c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800553e:	b110      	cbz	r0, 8005546 <xTimerCreateTimerTask+0x42>
}
 8005540:	2001      	movs	r0, #1
 8005542:	b008      	add	sp, #32
 8005544:	bd10      	pop	{r4, pc}
 8005546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005556:	e7fe      	b.n	8005556 <xTimerCreateTimerTask+0x52>
 8005558:	20007278 	.word	0x20007278
 800555c:	0800feac 	.word	0x0800feac
 8005560:	08005679 	.word	0x08005679
 8005564:	2000727c 	.word	0x2000727c

08005568 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005568:	b1d8      	cbz	r0, 80055a2 <xTimerGenericCommand+0x3a>
 800556a:	469c      	mov	ip, r3
 800556c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800556e:	4815      	ldr	r0, [pc, #84]	; (80055c4 <xTimerGenericCommand+0x5c>)
 8005570:	6800      	ldr	r0, [r0, #0]
 8005572:	b328      	cbz	r0, 80055c0 <xTimerGenericCommand+0x58>
{
 8005574:	b500      	push	{lr}
 8005576:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8005578:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800557a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800557c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800557e:	2905      	cmp	r1, #5
 8005580:	dc18      	bgt.n	80055b4 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005582:	f7ff fe63 	bl	800524c <xTaskGetSchedulerState>
 8005586:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005588:	f04f 0300 	mov.w	r3, #0
 800558c:	bf0c      	ite	eq
 800558e:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005590:	461a      	movne	r2, r3
 8005592:	4669      	mov	r1, sp
 8005594:	480b      	ldr	r0, [pc, #44]	; (80055c4 <xTimerGenericCommand+0x5c>)
 8005596:	6800      	ldr	r0, [r0, #0]
 8005598:	f7fe fd3a 	bl	8004010 <xQueueGenericSend>
}
 800559c:	b005      	add	sp, #20
 800559e:	f85d fb04 	ldr.w	pc, [sp], #4
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80055b2:	e7fe      	b.n	80055b2 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055b4:	2300      	movs	r3, #0
 80055b6:	4662      	mov	r2, ip
 80055b8:	4669      	mov	r1, sp
 80055ba:	f7fe fe3b 	bl	8004234 <xQueueGenericSendFromISR>
 80055be:	e7ed      	b.n	800559c <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 80055c0:	2000      	movs	r0, #0
}
 80055c2:	4770      	bx	lr
 80055c4:	20007278 	.word	0x20007278

080055c8 <prvSampleTimeNow>:
{
 80055c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 80055d0:	f7ff fbc2 	bl	8004d58 <xTaskGetTickCount>
 80055d4:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 80055d6:	4b25      	ldr	r3, [pc, #148]	; (800566c <prvSampleTimeNow+0xa4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4283      	cmp	r3, r0
 80055dc:	d808      	bhi.n	80055f0 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 80055de:	2300      	movs	r3, #0
 80055e0:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 80055e4:	4b21      	ldr	r3, [pc, #132]	; (800566c <prvSampleTimeNow+0xa4>)
 80055e6:	601e      	str	r6, [r3, #0]
}
 80055e8:	4630      	mov	r0, r6
 80055ea:	b002      	add	sp, #8
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055f0:	4d1f      	ldr	r5, [pc, #124]	; (8005670 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055f2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055f6:	682b      	ldr	r3, [r5, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	b36a      	cbz	r2, 8005658 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005602:	f104 0904 	add.w	r9, r4, #4
 8005606:	4648      	mov	r0, r9
 8005608:	f7fe fb5a 	bl	8003cc0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800560c:	6a23      	ldr	r3, [r4, #32]
 800560e:	4620      	mov	r0, r4
 8005610:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005612:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005616:	f013 0f04 	tst.w	r3, #4
 800561a:	d0ec      	beq.n	80055f6 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800561c:	69a3      	ldr	r3, [r4, #24]
 800561e:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8005620:	429f      	cmp	r7, r3
 8005622:	d206      	bcs.n	8005632 <prvSampleTimeNow+0x6a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005624:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005626:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005628:	4649      	mov	r1, r9
 800562a:	6828      	ldr	r0, [r5, #0]
 800562c:	f7fe fb2f 	bl	8003c8e <vListInsert>
 8005630:	e7e1      	b.n	80055f6 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005632:	f8cd 8000 	str.w	r8, [sp]
 8005636:	4643      	mov	r3, r8
 8005638:	463a      	mov	r2, r7
 800563a:	4641      	mov	r1, r8
 800563c:	4620      	mov	r0, r4
 800563e:	f7ff ff93 	bl	8005568 <xTimerGenericCommand>
				configASSERT( xResult );
 8005642:	2800      	cmp	r0, #0
 8005644:	d1d7      	bne.n	80055f6 <prvSampleTimeNow+0x2e>
 8005646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	e7fe      	b.n	8005656 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 8005658:	4a06      	ldr	r2, [pc, #24]	; (8005674 <prvSampleTimeNow+0xac>)
 800565a:	6810      	ldr	r0, [r2, #0]
 800565c:	4904      	ldr	r1, [pc, #16]	; (8005670 <prvSampleTimeNow+0xa8>)
 800565e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005660:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8005662:	2301      	movs	r3, #1
 8005664:	f8ca 3000 	str.w	r3, [sl]
 8005668:	e7bc      	b.n	80055e4 <prvSampleTimeNow+0x1c>
 800566a:	bf00      	nop
 800566c:	20007224 	.word	0x20007224
 8005670:	20007154 	.word	0x20007154
 8005674:	20007158 	.word	0x20007158

08005678 <prvTimerTask>:
{
 8005678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800567c:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800567e:	4e79      	ldr	r6, [pc, #484]	; (8005864 <prvTimerTask+0x1ec>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005680:	4d79      	ldr	r5, [pc, #484]	; (8005868 <prvTimerTask+0x1f0>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005682:	4f7a      	ldr	r7, [pc, #488]	; (800586c <prvTimerTask+0x1f4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800568a:	f1b8 0f00 	cmp.w	r8, #0
 800568e:	d025      	beq.n	80056dc <prvTimerTask+0x64>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8005696:	f7ff fb57 	bl	8004d48 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800569a:	a804      	add	r0, sp, #16
 800569c:	f7ff ff94 	bl	80055c8 <prvSampleTimeNow>
 80056a0:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80056a2:	9a04      	ldr	r2, [sp, #16]
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	d155      	bne.n	8005754 <prvTimerTask+0xdc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056a8:	4580      	cmp	r8, r0
 80056aa:	d824      	bhi.n	80056f6 <prvTimerTask+0x7e>
				( void ) xTaskResumeAll();
 80056ac:	f7ff fbfc 	bl	8004ea8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b0:	6833      	ldr	r3, [r6, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056b8:	f109 0004 	add.w	r0, r9, #4
 80056bc:	f7fe fb00 	bl	8003cc0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056c0:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 80056c4:	f013 0f04 	tst.w	r3, #4
 80056c8:	d128      	bne.n	800571c <prvTimerTask+0xa4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056d2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80056d6:	4648      	mov	r0, r9
 80056d8:	4798      	blx	r3
}
 80056da:	e03d      	b.n	8005758 <prvTimerTask+0xe0>
	vTaskSuspendAll();
 80056dc:	f7ff fb34 	bl	8004d48 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056e0:	a804      	add	r0, sp, #16
 80056e2:	f7ff ff71 	bl	80055c8 <prvSampleTimeNow>
 80056e6:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80056e8:	9b04      	ldr	r3, [sp, #16]
 80056ea:	bb9b      	cbnz	r3, 8005754 <prvTimerTask+0xdc>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	fab2 f282 	clz	r2, r2
 80056f4:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056f6:	eba8 0104 	sub.w	r1, r8, r4
 80056fa:	6828      	ldr	r0, [r5, #0]
 80056fc:	f7ff f8b4 	bl	8004868 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005700:	f7ff fbd2 	bl	8004ea8 <xTaskResumeAll>
 8005704:	bb40      	cbnz	r0, 8005758 <prvTimerTask+0xe0>
					portYIELD_WITHIN_API();
 8005706:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800570a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800570e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	e01d      	b.n	8005758 <prvTimerTask+0xe0>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800571c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005720:	4643      	mov	r3, r8
 8005722:	4622      	mov	r2, r4
 8005724:	4441      	add	r1, r8
 8005726:	4648      	mov	r0, r9
 8005728:	f7ff fe90 	bl	800544c <prvInsertTimerInActiveList>
 800572c:	2800      	cmp	r0, #0
 800572e:	d0d0      	beq.n	80056d2 <prvTimerTask+0x5a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005730:	2100      	movs	r1, #0
 8005732:	9100      	str	r1, [sp, #0]
 8005734:	460b      	mov	r3, r1
 8005736:	4642      	mov	r2, r8
 8005738:	4648      	mov	r0, r9
 800573a:	f7ff ff15 	bl	8005568 <xTimerGenericCommand>
			configASSERT( xResult );
 800573e:	2800      	cmp	r0, #0
 8005740:	d1c7      	bne.n	80056d2 <prvTimerTask+0x5a>
 8005742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005746:	f383 8811 	msr	BASEPRI, r3
 800574a:	f3bf 8f6f 	isb	sy
 800574e:	f3bf 8f4f 	dsb	sy
 8005752:	e7fe      	b.n	8005752 <prvTimerTask+0xda>
			( void ) xTaskResumeAll();
 8005754:	f7ff fba8 	bl	8004ea8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005758:	2400      	movs	r4, #0
}
 800575a:	e006      	b.n	800576a <prvTimerTask+0xf2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800575c:	9907      	ldr	r1, [sp, #28]
 800575e:	9806      	ldr	r0, [sp, #24]
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005764:	9b04      	ldr	r3, [sp, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da09      	bge.n	800577e <prvTimerTask+0x106>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800576a:	4622      	mov	r2, r4
 800576c:	a904      	add	r1, sp, #16
 800576e:	6828      	ldr	r0, [r5, #0]
 8005770:	f7fe fe20 	bl	80043b4 <xQueueReceive>
 8005774:	2800      	cmp	r0, #0
 8005776:	d085      	beq.n	8005684 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005778:	9b04      	ldr	r3, [sp, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	dbee      	blt.n	800575c <prvTimerTask+0xe4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800577e:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005782:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005786:	b11b      	cbz	r3, 8005790 <prvTimerTask+0x118>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005788:	f108 0004 	add.w	r0, r8, #4
 800578c:	f7fe fa98 	bl	8003cc0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005790:	a803      	add	r0, sp, #12
 8005792:	f7ff ff19 	bl	80055c8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8005796:	9b04      	ldr	r3, [sp, #16]
 8005798:	2b09      	cmp	r3, #9
 800579a:	d8e6      	bhi.n	800576a <prvTimerTask+0xf2>
 800579c:	e8df f003 	tbb	[pc, r3]
 80057a0:	33050505 	.word	0x33050505
 80057a4:	0505543a 	.word	0x0505543a
 80057a8:	3a33      	.short	0x3a33
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057aa:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057b6:	9b05      	ldr	r3, [sp, #20]
 80057b8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80057bc:	4602      	mov	r2, r0
 80057be:	4419      	add	r1, r3
 80057c0:	4640      	mov	r0, r8
 80057c2:	f7ff fe43 	bl	800544c <prvInsertTimerInActiveList>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0cf      	beq.n	800576a <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ca:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80057ce:	4640      	mov	r0, r8
 80057d0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057d2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80057d6:	f013 0f04 	tst.w	r3, #4
 80057da:	d0c6      	beq.n	800576a <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057dc:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80057e0:	9400      	str	r4, [sp, #0]
 80057e2:	4623      	mov	r3, r4
 80057e4:	9905      	ldr	r1, [sp, #20]
 80057e6:	440a      	add	r2, r1
 80057e8:	4621      	mov	r1, r4
 80057ea:	4640      	mov	r0, r8
 80057ec:	f7ff febc 	bl	8005568 <xTimerGenericCommand>
							configASSERT( xResult );
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d1ba      	bne.n	800576a <prvTimerTask+0xf2>
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	e7fe      	b.n	8005804 <prvTimerTask+0x18c>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005806:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800580a:	f023 0301 	bic.w	r3, r3, #1
 800580e:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					break;
 8005812:	e7aa      	b.n	800576a <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005814:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005820:	9905      	ldr	r1, [sp, #20]
 8005822:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005826:	b131      	cbz	r1, 8005836 <prvTimerTask+0x1be>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005828:	4603      	mov	r3, r0
 800582a:	4602      	mov	r2, r0
 800582c:	4401      	add	r1, r0
 800582e:	4640      	mov	r0, r8
 8005830:	f7ff fe0c 	bl	800544c <prvInsertTimerInActiveList>
					break;
 8005834:	e799      	b.n	800576a <prvTimerTask+0xf2>
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005846:	e7fe      	b.n	8005846 <prvTimerTask+0x1ce>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005848:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800584c:	f013 0f02 	tst.w	r3, #2
 8005850:	d004      	beq.n	800585c <prvTimerTask+0x1e4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
 800585a:	e786      	b.n	800576a <prvTimerTask+0xf2>
							vPortFree( pxTimer );
 800585c:	4640      	mov	r0, r8
 800585e:	f000 fa93 	bl	8005d88 <vPortFree>
 8005862:	e782      	b.n	800576a <prvTimerTask+0xf2>
 8005864:	20007154 	.word	0x20007154
 8005868:	20007278 	.word	0x20007278
 800586c:	20007158 	.word	0x20007158

08005870 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005870:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005872:	2300      	movs	r3, #0
 8005874:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <prvTaskExitError+0x3c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d008      	beq.n	8005892 <prvTaskExitError+0x22>
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	e7fe      	b.n	8005890 <prvTaskExitError+0x20>
 8005892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0fc      	beq.n	80058a2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058a8:	b002      	add	sp, #8
 80058aa:	4770      	bx	lr
 80058ac:	20000020 	.word	0x20000020

080058b0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058b0:	4808      	ldr	r0, [pc, #32]	; (80058d4 <prvPortStartFirstTask+0x24>)
 80058b2:	6800      	ldr	r0, [r0, #0]
 80058b4:	6800      	ldr	r0, [r0, #0]
 80058b6:	f380 8808 	msr	MSP, r0
 80058ba:	f04f 0000 	mov.w	r0, #0
 80058be:	f380 8814 	msr	CONTROL, r0
 80058c2:	b662      	cpsie	i
 80058c4:	b661      	cpsie	f
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	df00      	svc	0
 80058d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058d2:	0000      	.short	0x0000
 80058d4:	e000ed08 	.word	0xe000ed08

080058d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058e8 <vPortEnableVFP+0x10>
 80058dc:	6801      	ldr	r1, [r0, #0]
 80058de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058e2:	6001      	str	r1, [r0, #0]
 80058e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058e6:	0000      	.short	0x0000
 80058e8:	e000ed88 	.word	0xe000ed88

080058ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058f0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80058f4:	f021 0101 	bic.w	r1, r1, #1
 80058f8:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <pxPortInitialiseStack+0x28>)
 80058fe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005902:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005906:	f06f 0302 	mvn.w	r3, #2
 800590a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800590e:	3844      	subs	r0, #68	; 0x44
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	08005871 	.word	0x08005871
	...

08005920 <SVC_Handler>:
	__asm volatile (
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <pxCurrentTCBConst2>)
 8005922:	6819      	ldr	r1, [r3, #0]
 8005924:	6808      	ldr	r0, [r1, #0]
 8005926:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800592a:	f380 8809 	msr	PSP, r0
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8811 	msr	BASEPRI, r0
 800593a:	4770      	bx	lr
 800593c:	f3af 8000 	nop.w

08005940 <pxCurrentTCBConst2>:
 8005940:	20006c58 	.word	0x20006c58

08005944 <vPortEnterCritical>:
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <vPortEnterCritical+0x40>)
 8005956:	6813      	ldr	r3, [r2, #0]
 8005958:	3301      	adds	r3, #1
 800595a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800595c:	2b01      	cmp	r3, #1
 800595e:	d000      	beq.n	8005962 <vPortEnterCritical+0x1e>
}
 8005960:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005962:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005966:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800596a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800596e:	d0f7      	beq.n	8005960 <vPortEnterCritical+0x1c>
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	e7fe      	b.n	8005980 <vPortEnterCritical+0x3c>
 8005982:	bf00      	nop
 8005984:	20000020 	.word	0x20000020

08005988 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005988:	4b09      	ldr	r3, [pc, #36]	; (80059b0 <vPortExitCritical+0x28>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	b943      	cbnz	r3, 80059a0 <vPortExitCritical+0x18>
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	e7fe      	b.n	800599e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80059a0:	3b01      	subs	r3, #1
 80059a2:	4a03      	ldr	r2, [pc, #12]	; (80059b0 <vPortExitCritical+0x28>)
 80059a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059a6:	b90b      	cbnz	r3, 80059ac <vPortExitCritical+0x24>
	__asm volatile
 80059a8:	f383 8811 	msr	BASEPRI, r3
}
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000020 	.word	0x20000020
	...

080059c0 <PendSV_Handler>:
	__asm volatile
 80059c0:	f3ef 8009 	mrs	r0, PSP
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	4b15      	ldr	r3, [pc, #84]	; (8005a20 <pxCurrentTCBConst>)
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	f01e 0f10 	tst.w	lr, #16
 80059d0:	bf08      	it	eq
 80059d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059da:	6010      	str	r0, [r2, #0]
 80059dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059e4:	f380 8811 	msr	BASEPRI, r0
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	f3bf 8f6f 	isb	sy
 80059f0:	f7ff fb02 	bl	8004ff8 <vTaskSwitchContext>
 80059f4:	f04f 0000 	mov.w	r0, #0
 80059f8:	f380 8811 	msr	BASEPRI, r0
 80059fc:	bc09      	pop	{r0, r3}
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	6808      	ldr	r0, [r1, #0]
 8005a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a06:	f01e 0f10 	tst.w	lr, #16
 8005a0a:	bf08      	it	eq
 8005a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a10:	f380 8809 	msr	PSP, r0
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	4770      	bx	lr
 8005a1a:	bf00      	nop
 8005a1c:	f3af 8000 	nop.w

08005a20 <pxCurrentTCBConst>:
 8005a20:	20006c58 	.word	0x20006c58

08005a24 <xPortSysTickHandler>:
{
 8005a24:	b508      	push	{r3, lr}
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005a36:	f7ff f99d 	bl	8004d74 <xTaskIncrementTick>
 8005a3a:	b128      	cbz	r0, 8005a48 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005a48:	2300      	movs	r3, #0
 8005a4a:	f383 8811 	msr	BASEPRI, r3
}
 8005a4e:	bd08      	pop	{r3, pc}

08005a50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a50:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005a54:	2300      	movs	r3, #0
 8005a56:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a58:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a5a:	4b05      	ldr	r3, [pc, #20]	; (8005a70 <vPortSetupTimerInterrupt+0x20>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4905      	ldr	r1, [pc, #20]	; (8005a74 <vPortSetupTimerInterrupt+0x24>)
 8005a60:	fba1 1303 	umull	r1, r3, r1, r3
 8005a64:	099b      	lsrs	r3, r3, #6
 8005a66:	3b01      	subs	r3, #1
 8005a68:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a6a:	2307      	movs	r3, #7
 8005a6c:	6113      	str	r3, [r2, #16]
}
 8005a6e:	4770      	bx	lr
 8005a70:	20000000 	.word	0x20000000
 8005a74:	10624dd3 	.word	0x10624dd3

08005a78 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a78:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a7c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005a80:	4b3e      	ldr	r3, [pc, #248]	; (8005b7c <xPortStartScheduler+0x104>)
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d03b      	beq.n	8005afe <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a8a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005a8e:	4b3c      	ldr	r3, [pc, #240]	; (8005b80 <xPortStartScheduler+0x108>)
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d03d      	beq.n	8005b10 <xPortStartScheduler+0x98>
{
 8005a94:	b530      	push	{r4, r5, lr}
 8005a96:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a98:	4b3a      	ldr	r3, [pc, #232]	; (8005b84 <xPortStartScheduler+0x10c>)
 8005a9a:	781a      	ldrb	r2, [r3, #0]
 8005a9c:	b2d2      	uxtb	r2, r2
 8005a9e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005aa0:	22ff      	movs	r2, #255	; 0xff
 8005aa2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005aac:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ab4:	4a34      	ldr	r2, [pc, #208]	; (8005b88 <xPortStartScheduler+0x110>)
 8005ab6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ab8:	4b34      	ldr	r3, [pc, #208]	; (8005b8c <xPortStartScheduler+0x114>)
 8005aba:	2207      	movs	r2, #7
 8005abc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005abe:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ac2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ac6:	d011      	beq.n	8005aec <xPortStartScheduler+0x74>
 8005ac8:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005aca:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ad6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ada:	4611      	mov	r1, r2
 8005adc:	3a01      	subs	r2, #1
 8005ade:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ae2:	d1f2      	bne.n	8005aca <xPortStartScheduler+0x52>
 8005ae4:	4b29      	ldr	r3, [pc, #164]	; (8005b8c <xPortStartScheduler+0x114>)
 8005ae6:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ae8:	2903      	cmp	r1, #3
 8005aea:	d01a      	beq.n	8005b22 <xPortStartScheduler+0xaa>
	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	e7fe      	b.n	8005afc <xPortStartScheduler+0x84>
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b0e:	e7fe      	b.n	8005b0e <xPortStartScheduler+0x96>
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b20:	e7fe      	b.n	8005b20 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b22:	4b1a      	ldr	r3, [pc, #104]	; (8005b8c <xPortStartScheduler+0x114>)
 8005b24:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005b28:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b2a:	9b01      	ldr	r3, [sp, #4]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <xPortStartScheduler+0x10c>)
 8005b30:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b32:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8005b36:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005b3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b3e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b42:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005b46:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b4a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005b4e:	f7ff ff7f 	bl	8005a50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005b52:	2500      	movs	r5, #0
 8005b54:	4b0e      	ldr	r3, [pc, #56]	; (8005b90 <xPortStartScheduler+0x118>)
 8005b56:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005b58:	f7ff febe 	bl	80058d8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b5c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005b60:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b64:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005b68:	f7ff fea2 	bl	80058b0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005b6c:	f7ff fa44 	bl	8004ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8005b70:	f7ff fe7e 	bl	8005870 <prvTaskExitError>
}
 8005b74:	4628      	mov	r0, r5
 8005b76:	b003      	add	sp, #12
 8005b78:	bd30      	pop	{r4, r5, pc}
 8005b7a:	bf00      	nop
 8005b7c:	410fc271 	.word	0x410fc271
 8005b80:	410fc270 	.word	0x410fc270
 8005b84:	e000e400 	.word	0xe000e400
 8005b88:	20007280 	.word	0x20007280
 8005b8c:	20007284 	.word	0x20007284
 8005b90:	20000020 	.word	0x20000020

08005b94 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b94:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b98:	2b0f      	cmp	r3, #15
 8005b9a:	d90f      	bls.n	8005bbc <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b9c:	4a11      	ldr	r2, [pc, #68]	; (8005be4 <vPortValidateInterruptPriority+0x50>)
 8005b9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ba0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ba2:	4a11      	ldr	r2, [pc, #68]	; (8005be8 <vPortValidateInterruptPriority+0x54>)
 8005ba4:	7812      	ldrb	r2, [r2, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d908      	bls.n	8005bbc <vPortValidateInterruptPriority+0x28>
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	e7fe      	b.n	8005bba <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005bc0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005bc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bc8:	4a08      	ldr	r2, [pc, #32]	; (8005bec <vPortValidateInterruptPriority+0x58>)
 8005bca:	6812      	ldr	r2, [r2, #0]
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d908      	bls.n	8005be2 <vPortValidateInterruptPriority+0x4e>
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	e7fe      	b.n	8005be0 <vPortValidateInterruptPriority+0x4c>
	}
 8005be2:	4770      	bx	lr
 8005be4:	e000e3f0 	.word	0xe000e3f0
 8005be8:	20007280 	.word	0x20007280
 8005bec:	20007284 	.word	0x20007284

08005bf0 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bf0:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <prvInsertBlockIntoFreeList+0x58>)
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4283      	cmp	r3, r0
 8005bf8:	d3fb      	bcc.n	8005bf2 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bfa:	6851      	ldr	r1, [r2, #4]
 8005bfc:	eb02 0c01 	add.w	ip, r2, r1
 8005c00:	4560      	cmp	r0, ip
 8005c02:	d009      	beq.n	8005c18 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c04:	6841      	ldr	r1, [r0, #4]
 8005c06:	eb00 0c01 	add.w	ip, r0, r1
 8005c0a:	4563      	cmp	r3, ip
 8005c0c:	d009      	beq.n	8005c22 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c0e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c10:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c12:	bf18      	it	ne
 8005c14:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005c16:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c18:	6840      	ldr	r0, [r0, #4]
 8005c1a:	4401      	add	r1, r0
 8005c1c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005c1e:	4610      	mov	r0, r2
 8005c20:	e7f0      	b.n	8005c04 <prvInsertBlockIntoFreeList+0x14>
{
 8005c22:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c24:	4c09      	ldr	r4, [pc, #36]	; (8005c4c <prvInsertBlockIntoFreeList+0x5c>)
 8005c26:	6824      	ldr	r4, [r4, #0]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	d00b      	beq.n	8005c44 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	4419      	add	r1, r3
 8005c30:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c32:	6813      	ldr	r3, [r2, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005c38:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c3a:	bf18      	it	ne
 8005c3c:	6010      	strne	r0, [r2, #0]
	}
}
 8005c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c42:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c44:	6004      	str	r4, [r0, #0]
 8005c46:	e7f7      	b.n	8005c38 <prvInsertBlockIntoFreeList+0x48>
 8005c48:	2000aea0 	.word	0x2000aea0
 8005c4c:	20007288 	.word	0x20007288

08005c50 <pvPortMalloc>:
{
 8005c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c52:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005c54:	f7ff f878 	bl	8004d48 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005c58:	4b44      	ldr	r3, [pc, #272]	; (8005d6c <pvPortMalloc+0x11c>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	b1b3      	cbz	r3, 8005c8c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c5e:	4b44      	ldr	r3, [pc, #272]	; (8005d70 <pvPortMalloc+0x120>)
 8005c60:	681d      	ldr	r5, [r3, #0]
 8005c62:	4225      	tst	r5, r4
 8005c64:	d17d      	bne.n	8005d62 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8005c66:	2c00      	cmp	r4, #0
 8005c68:	d07b      	beq.n	8005d62 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 8005c6a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c6e:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c72:	bf1c      	itt	ne
 8005c74:	f022 0207 	bicne.w	r2, r2, #7
 8005c78:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c7a:	2a00      	cmp	r2, #0
 8005c7c:	d071      	beq.n	8005d62 <pvPortMalloc+0x112>
 8005c7e:	4b3d      	ldr	r3, [pc, #244]	; (8005d74 <pvPortMalloc+0x124>)
 8005c80:	681e      	ldr	r6, [r3, #0]
 8005c82:	4296      	cmp	r6, r2
 8005c84:	d36d      	bcc.n	8005d62 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 8005c86:	493c      	ldr	r1, [pc, #240]	; (8005d78 <pvPortMalloc+0x128>)
 8005c88:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c8a:	e027      	b.n	8005cdc <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8005c8c:	4a3b      	ldr	r2, [pc, #236]	; (8005d7c <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c8e:	f012 0f07 	tst.w	r2, #7
 8005c92:	d007      	beq.n	8005ca4 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005c94:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005c96:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005c9a:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8005c9e:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca0:	460a      	mov	r2, r1
 8005ca2:	e001      	b.n	8005ca8 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ca4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ca8:	4833      	ldr	r0, [pc, #204]	; (8005d78 <pvPortMalloc+0x128>)
 8005caa:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cac:	2100      	movs	r1, #0
 8005cae:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cb0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005cb2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb4:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005cb8:	482c      	ldr	r0, [pc, #176]	; (8005d6c <pvPortMalloc+0x11c>)
 8005cba:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005cbc:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cbe:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cc0:	1a99      	subs	r1, r3, r2
 8005cc2:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cc4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cc6:	4b2e      	ldr	r3, [pc, #184]	; (8005d80 <pvPortMalloc+0x130>)
 8005cc8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cca:	4b2a      	ldr	r3, [pc, #168]	; (8005d74 <pvPortMalloc+0x124>)
 8005ccc:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cce:	4b28      	ldr	r3, [pc, #160]	; (8005d70 <pvPortMalloc+0x120>)
 8005cd0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005cd4:	601a      	str	r2, [r3, #0]
}
 8005cd6:	e7c2      	b.n	8005c5e <pvPortMalloc+0xe>
 8005cd8:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cda:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cdc:	6863      	ldr	r3, [r4, #4]
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d202      	bcs.n	8005ce8 <pvPortMalloc+0x98>
 8005ce2:	6823      	ldr	r3, [r4, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1f7      	bne.n	8005cd8 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8005ce8:	4b20      	ldr	r3, [pc, #128]	; (8005d6c <pvPortMalloc+0x11c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	42a3      	cmp	r3, r4
 8005cee:	d038      	beq.n	8005d62 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cf0:	680f      	ldr	r7, [r1, #0]
 8005cf2:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cf4:	6823      	ldr	r3, [r4, #0]
 8005cf6:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cf8:	6863      	ldr	r3, [r4, #4]
 8005cfa:	1a9b      	subs	r3, r3, r2
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d910      	bls.n	8005d22 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d00:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d02:	f010 0f07 	tst.w	r0, #7
 8005d06:	d008      	beq.n	8005d1a <pvPortMalloc+0xca>
 8005d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0c:	f383 8811 	msr	BASEPRI, r3
 8005d10:	f3bf 8f6f 	isb	sy
 8005d14:	f3bf 8f4f 	dsb	sy
 8005d18:	e7fe      	b.n	8005d18 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d1a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d1c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d1e:	f7ff ff67 	bl	8005bf0 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	1af6      	subs	r6, r6, r3
 8005d26:	4a13      	ldr	r2, [pc, #76]	; (8005d74 <pvPortMalloc+0x124>)
 8005d28:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d2a:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <pvPortMalloc+0x130>)
 8005d2c:	6812      	ldr	r2, [r2, #0]
 8005d2e:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d30:	bf3c      	itt	cc
 8005d32:	4a13      	ldrcc	r2, [pc, #76]	; (8005d80 <pvPortMalloc+0x130>)
 8005d34:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d36:	431d      	orrs	r5, r3
 8005d38:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005d3e:	4a11      	ldr	r2, [pc, #68]	; (8005d84 <pvPortMalloc+0x134>)
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	3301      	adds	r3, #1
 8005d44:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005d46:	f7ff f8af 	bl	8004ea8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d4a:	f017 0f07 	tst.w	r7, #7
 8005d4e:	d00b      	beq.n	8005d68 <pvPortMalloc+0x118>
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	e7fe      	b.n	8005d60 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8005d62:	f7ff f8a1 	bl	8004ea8 <xTaskResumeAll>
 8005d66:	2700      	movs	r7, #0
}
 8005d68:	4638      	mov	r0, r7
 8005d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d6c:	20007288 	.word	0x20007288
 8005d70:	2000ae8c 	.word	0x2000ae8c
 8005d74:	2000ae90 	.word	0x2000ae90
 8005d78:	2000aea0 	.word	0x2000aea0
 8005d7c:	2000728c 	.word	0x2000728c
 8005d80:	2000ae94 	.word	0x2000ae94
 8005d84:	2000ae98 	.word	0x2000ae98

08005d88 <vPortFree>:
	if( pv != NULL )
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	d033      	beq.n	8005df4 <vPortFree+0x6c>
{
 8005d8c:	b510      	push	{r4, lr}
 8005d8e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d90:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005d94:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <vPortFree+0x70>)
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	4213      	tst	r3, r2
 8005d9a:	d108      	bne.n	8005dae <vPortFree+0x26>
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	e7fe      	b.n	8005dac <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dae:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005db2:	b141      	cbz	r1, 8005dc6 <vPortFree+0x3e>
 8005db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db8:	f383 8811 	msr	BASEPRI, r3
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	f3bf 8f4f 	dsb	sy
 8005dc4:	e7fe      	b.n	8005dc4 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dc6:	ea23 0302 	bic.w	r3, r3, r2
 8005dca:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005dce:	f7fe ffbb 	bl	8004d48 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <vPortFree+0x74>)
 8005dd4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005dd8:	6811      	ldr	r1, [r2, #0]
 8005dda:	440b      	add	r3, r1
 8005ddc:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dde:	f1a4 0008 	sub.w	r0, r4, #8
 8005de2:	f7ff ff05 	bl	8005bf0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005de6:	4a06      	ldr	r2, [pc, #24]	; (8005e00 <vPortFree+0x78>)
 8005de8:	6813      	ldr	r3, [r2, #0]
 8005dea:	3301      	adds	r3, #1
 8005dec:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005dee:	f7ff f85b 	bl	8004ea8 <xTaskResumeAll>
}
 8005df2:	bd10      	pop	{r4, pc}
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	2000ae8c 	.word	0x2000ae8c
 8005dfc:	2000ae90 	.word	0x2000ae90
 8005e00:	2000ae9c 	.word	0x2000ae9c

08005e04 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8005e04:	b510      	push	{r4, lr}
 8005e06:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005e08:	680a      	ldr	r2, [r1, #0]
 8005e0a:	320c      	adds	r2, #12
 8005e0c:	f001 fcfa 	bl	8007804 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8005e10:	b100      	cbz	r0, 8005e14 <netconn_apimsg+0x10>
    return apimsg->err;
  }
  return err;
}
 8005e12:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8005e14:	f994 0004 	ldrsb.w	r0, [r4, #4]
 8005e18:	e7fb      	b.n	8005e12 <netconn_apimsg+0xe>
	...

08005e1c <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8005e1c:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005e1e:	b160      	cbz	r0, 8005e3a <netconn_tcp_recvd_msg+0x1e>
 8005e20:	460c      	mov	r4, r1
 8005e22:	4611      	mov	r1, r2
 8005e24:	7803      	ldrb	r3, [r0, #0]
 8005e26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	d105      	bne.n	8005e3a <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8005e2e:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8005e30:	6094      	str	r4, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005e32:	4807      	ldr	r0, [pc, #28]	; (8005e50 <netconn_tcp_recvd_msg+0x34>)
 8005e34:	f7ff ffe6 	bl	8005e04 <netconn_apimsg>
}
 8005e38:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005e3a:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <netconn_tcp_recvd_msg+0x38>)
 8005e3c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005e40:	4905      	ldr	r1, [pc, #20]	; (8005e58 <netconn_tcp_recvd_msg+0x3c>)
 8005e42:	4806      	ldr	r0, [pc, #24]	; (8005e5c <netconn_tcp_recvd_msg+0x40>)
 8005e44:	f009 f86e 	bl	800ef24 <iprintf>
 8005e48:	f06f 000f 	mvn.w	r0, #15
 8005e4c:	e7f4      	b.n	8005e38 <netconn_tcp_recvd_msg+0x1c>
 8005e4e:	bf00      	nop
 8005e50:	080073d1 	.word	0x080073d1
 8005e54:	0800feb4 	.word	0x0800feb4
 8005e58:	0800fee8 	.word	0x0800fee8
 8005e5c:	0800fe60 	.word	0x0800fe60

08005e60 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005e60:	b500      	push	{lr}
 8005e62:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005e64:	b160      	cbz	r0, 8005e80 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005e66:	9000      	str	r0, [sp, #0]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005e68:	f88d 1008 	strb.w	r1, [sp, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005e6c:	2329      	movs	r3, #41	; 0x29
 8005e6e:	f88d 3009 	strb.w	r3, [sp, #9]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005e72:	4669      	mov	r1, sp
 8005e74:	4807      	ldr	r0, [pc, #28]	; (8005e94 <netconn_close_shutdown+0x34>)
 8005e76:	f7ff ffc5 	bl	8005e04 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005e7a:	b009      	add	sp, #36	; 0x24
 8005e7c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <netconn_close_shutdown+0x38>)
 8005e82:	f240 4247 	movw	r2, #1095	; 0x447
 8005e86:	4905      	ldr	r1, [pc, #20]	; (8005e9c <netconn_close_shutdown+0x3c>)
 8005e88:	4805      	ldr	r0, [pc, #20]	; (8005ea0 <netconn_close_shutdown+0x40>)
 8005e8a:	f009 f84b 	bl	800ef24 <iprintf>
 8005e8e:	f06f 000f 	mvn.w	r0, #15
 8005e92:	e7f2      	b.n	8005e7a <netconn_close_shutdown+0x1a>
 8005e94:	080074e1 	.word	0x080074e1
 8005e98:	0800feb4 	.word	0x0800feb4
 8005e9c:	0800ff0c 	.word	0x0800ff0c
 8005ea0:	0800fe60 	.word	0x0800fe60

08005ea4 <netconn_new_with_proto_and_callback>:
{
 8005ea4:	b570      	push	{r4, r5, r6, lr}
 8005ea6:	b088      	sub	sp, #32
 8005ea8:	460c      	mov	r4, r1
  conn = netconn_alloc(t, callback);
 8005eaa:	4611      	mov	r1, r2
 8005eac:	f001 f816 	bl	8006edc <netconn_alloc>
  if (conn != NULL) {
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	b138      	cbz	r0, 8005ec4 <netconn_new_with_proto_and_callback+0x20>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005eb4:	f88d 4008 	strb.w	r4, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8005eb8:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005eba:	4669      	mov	r1, sp
 8005ebc:	4820      	ldr	r0, [pc, #128]	; (8005f40 <netconn_new_with_proto_and_callback+0x9c>)
 8005ebe:	f7ff ffa1 	bl	8005e04 <netconn_apimsg>
    if (err != ERR_OK) {
 8005ec2:	b910      	cbnz	r0, 8005eca <netconn_new_with_proto_and_callback+0x26>
}
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	b008      	add	sp, #32
 8005ec8:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005eca:	686b      	ldr	r3, [r5, #4]
 8005ecc:	b12b      	cbz	r3, 8005eda <netconn_new_with_proto_and_callback+0x36>
 8005ece:	4b1d      	ldr	r3, [pc, #116]	; (8005f44 <netconn_new_with_proto_and_callback+0xa0>)
 8005ed0:	22a3      	movs	r2, #163	; 0xa3
 8005ed2:	491d      	ldr	r1, [pc, #116]	; (8005f48 <netconn_new_with_proto_and_callback+0xa4>)
 8005ed4:	481d      	ldr	r0, [pc, #116]	; (8005f4c <netconn_new_with_proto_and_callback+0xa8>)
 8005ed6:	f009 f825 	bl	800ef24 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005eda:	f105 0410 	add.w	r4, r5, #16
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f008 fdae 	bl	800ea40 <sys_mbox_valid>
 8005ee4:	b1b0      	cbz	r0, 8005f14 <netconn_new_with_proto_and_callback+0x70>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005ee6:	f105 0014 	add.w	r0, r5, #20
 8005eea:	f008 fda9 	bl	800ea40 <sys_mbox_valid>
 8005eee:	b9c0      	cbnz	r0, 8005f22 <netconn_new_with_proto_and_callback+0x7e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005ef0:	f105 060c 	add.w	r6, r5, #12
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	f008 fde9 	bl	800eacc <sys_sem_valid>
 8005efa:	b1c8      	cbz	r0, 8005f30 <netconn_new_with_proto_and_callback+0x8c>
      sys_sem_free(&conn->op_completed);
 8005efc:	4630      	mov	r0, r6
 8005efe:	f008 fde0 	bl	800eac2 <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8005f02:	4620      	mov	r0, r4
 8005f04:	f008 fd57 	bl	800e9b6 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005f08:	4629      	mov	r1, r5
 8005f0a:	2007      	movs	r0, #7
 8005f0c:	f002 f86c 	bl	8007fe8 <memp_free>
      return NULL;
 8005f10:	2500      	movs	r5, #0
 8005f12:	e7d7      	b.n	8005ec4 <netconn_new_with_proto_and_callback+0x20>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005f14:	4b0b      	ldr	r3, [pc, #44]	; (8005f44 <netconn_new_with_proto_and_callback+0xa0>)
 8005f16:	22a4      	movs	r2, #164	; 0xa4
 8005f18:	490d      	ldr	r1, [pc, #52]	; (8005f50 <netconn_new_with_proto_and_callback+0xac>)
 8005f1a:	480c      	ldr	r0, [pc, #48]	; (8005f4c <netconn_new_with_proto_and_callback+0xa8>)
 8005f1c:	f009 f802 	bl	800ef24 <iprintf>
 8005f20:	e7e1      	b.n	8005ee6 <netconn_new_with_proto_and_callback+0x42>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005f22:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <netconn_new_with_proto_and_callback+0xa0>)
 8005f24:	22a6      	movs	r2, #166	; 0xa6
 8005f26:	490b      	ldr	r1, [pc, #44]	; (8005f54 <netconn_new_with_proto_and_callback+0xb0>)
 8005f28:	4808      	ldr	r0, [pc, #32]	; (8005f4c <netconn_new_with_proto_and_callback+0xa8>)
 8005f2a:	f008 fffb 	bl	800ef24 <iprintf>
 8005f2e:	e7df      	b.n	8005ef0 <netconn_new_with_proto_and_callback+0x4c>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005f30:	4b04      	ldr	r3, [pc, #16]	; (8005f44 <netconn_new_with_proto_and_callback+0xa0>)
 8005f32:	22a9      	movs	r2, #169	; 0xa9
 8005f34:	4908      	ldr	r1, [pc, #32]	; (8005f58 <netconn_new_with_proto_and_callback+0xb4>)
 8005f36:	4805      	ldr	r0, [pc, #20]	; (8005f4c <netconn_new_with_proto_and_callback+0xa8>)
 8005f38:	f008 fff4 	bl	800ef24 <iprintf>
 8005f3c:	e7de      	b.n	8005efc <netconn_new_with_proto_and_callback+0x58>
 8005f3e:	bf00      	nop
 8005f40:	08006e6d 	.word	0x08006e6d
 8005f44:	0800feb4 	.word	0x0800feb4
 8005f48:	0800ff28 	.word	0x0800ff28
 8005f4c:	0800fe60 	.word	0x0800fe60
 8005f50:	0800ff4c 	.word	0x0800ff4c
 8005f54:	0800ff64 	.word	0x0800ff64
 8005f58:	0800ff88 	.word	0x0800ff88

08005f5c <netconn_prepare_delete>:
  if (conn == NULL) {
 8005f5c:	b160      	cbz	r0, 8005f78 <netconn_prepare_delete+0x1c>
{
 8005f5e:	b500      	push	{lr}
 8005f60:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_REF(msg).conn = conn;
 8005f62:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005f64:	2329      	movs	r3, #41	; 0x29
 8005f66:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005f6a:	4669      	mov	r1, sp
 8005f6c:	4803      	ldr	r0, [pc, #12]	; (8005f7c <netconn_prepare_delete+0x20>)
 8005f6e:	f7ff ff49 	bl	8005e04 <netconn_apimsg>
}
 8005f72:	b009      	add	sp, #36	; 0x24
 8005f74:	f85d fb04 	ldr.w	pc, [sp], #4
    return ERR_OK;
 8005f78:	2000      	movs	r0, #0
}
 8005f7a:	4770      	bx	lr
 8005f7c:	080071a1 	.word	0x080071a1

08005f80 <netconn_delete>:
{
 8005f80:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8005f82:	b150      	cbz	r0, 8005f9a <netconn_delete+0x1a>
 8005f84:	4605      	mov	r5, r0
    err = netconn_prepare_delete(conn);
 8005f86:	f7ff ffe9 	bl	8005f5c <netconn_prepare_delete>
  if (err == ERR_OK) {
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	b108      	cbz	r0, 8005f92 <netconn_delete+0x12>
}
 8005f8e:	4620      	mov	r0, r4
 8005f90:	bd38      	pop	{r3, r4, r5, pc}
    netconn_free(conn);
 8005f92:	4628      	mov	r0, r5
 8005f94:	f000 ffe6 	bl	8006f64 <netconn_free>
 8005f98:	e7f9      	b.n	8005f8e <netconn_delete+0xe>
    return ERR_OK;
 8005f9a:	2400      	movs	r4, #0
 8005f9c:	e7f7      	b.n	8005f8e <netconn_delete+0xe>
	...

08005fa0 <netconn_bind>:
{
 8005fa0:	b500      	push	{lr}
 8005fa2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005fa4:	b178      	cbz	r0, 8005fc6 <netconn_bind+0x26>
 8005fa6:	4603      	mov	r3, r0
    addr = IP4_ADDR_ANY;
 8005fa8:	480c      	ldr	r0, [pc, #48]	; (8005fdc <netconn_bind+0x3c>)
 8005faa:	2900      	cmp	r1, #0
 8005fac:	bf08      	it	eq
 8005fae:	4601      	moveq	r1, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8005fb0:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005fb2:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005fb4:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005fb8:	4669      	mov	r1, sp
 8005fba:	4809      	ldr	r0, [pc, #36]	; (8005fe0 <netconn_bind+0x40>)
 8005fbc:	f7ff ff22 	bl	8005e04 <netconn_apimsg>
}
 8005fc0:	b009      	add	sp, #36	; 0x24
 8005fc2:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005fc6:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <netconn_bind+0x44>)
 8005fc8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005fcc:	4906      	ldr	r1, [pc, #24]	; (8005fe8 <netconn_bind+0x48>)
 8005fce:	4807      	ldr	r0, [pc, #28]	; (8005fec <netconn_bind+0x4c>)
 8005fd0:	f008 ffa8 	bl	800ef24 <iprintf>
 8005fd4:	f06f 000f 	mvn.w	r0, #15
 8005fd8:	e7f2      	b.n	8005fc0 <netconn_bind+0x20>
 8005fda:	bf00      	nop
 8005fdc:	080131e4 	.word	0x080131e4
 8005fe0:	080072c1 	.word	0x080072c1
 8005fe4:	0800feb4 	.word	0x0800feb4
 8005fe8:	0800ffa4 	.word	0x0800ffa4
 8005fec:	0800fe60 	.word	0x0800fe60

08005ff0 <netconn_listen_with_backlog>:
{
 8005ff0:	b500      	push	{lr}
 8005ff2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8005ff4:	b138      	cbz	r0, 8006006 <netconn_listen_with_backlog+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8005ff6:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8005ff8:	4669      	mov	r1, sp
 8005ffa:	4808      	ldr	r0, [pc, #32]	; (800601c <netconn_listen_with_backlog+0x2c>)
 8005ffc:	f7ff ff02 	bl	8005e04 <netconn_apimsg>
}
 8006000:	b009      	add	sp, #36	; 0x24
 8006002:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006006:	4b06      	ldr	r3, [pc, #24]	; (8006020 <netconn_listen_with_backlog+0x30>)
 8006008:	f240 12bb 	movw	r2, #443	; 0x1bb
 800600c:	4905      	ldr	r1, [pc, #20]	; (8006024 <netconn_listen_with_backlog+0x34>)
 800600e:	4806      	ldr	r0, [pc, #24]	; (8006028 <netconn_listen_with_backlog+0x38>)
 8006010:	f008 ff88 	bl	800ef24 <iprintf>
 8006014:	f06f 000f 	mvn.w	r0, #15
 8006018:	e7f2      	b.n	8006000 <netconn_listen_with_backlog+0x10>
 800601a:	bf00      	nop
 800601c:	080072fd 	.word	0x080072fd
 8006020:	0800feb4 	.word	0x0800feb4
 8006024:	0800ffc0 	.word	0x0800ffc0
 8006028:	0800fe60 	.word	0x0800fe60

0800602c <netconn_write_vectors_partly>:
{
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006030:	b308      	cbz	r0, 8006076 <netconn_write_vectors_partly+0x4a>
 8006032:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006034:	7800      	ldrb	r0, [r0, #0]
 8006036:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800603a:	2810      	cmp	r0, #16
 800603c:	d125      	bne.n	800608a <netconn_write_vectors_partly+0x5e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800603e:	7f28      	ldrb	r0, [r5, #28]
 8006040:	f010 0f02 	tst.w	r0, #2
 8006044:	d12b      	bne.n	800609e <netconn_write_vectors_partly+0x72>
 8006046:	f003 0004 	and.w	r0, r3, #4
 800604a:	2800      	cmp	r0, #0
 800604c:	bf14      	ite	ne
 800604e:	2601      	movne	r6, #1
 8006050:	2600      	moveq	r6, #0
  if (dontblock && !bytes_written) {
 8006052:	d125      	bne.n	80060a0 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8006054:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8006056:	b162      	cbz	r2, 8006072 <netconn_write_vectors_partly+0x46>
    size += vectors[i].len;
 8006058:	468c      	mov	ip, r1
 800605a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 800605e:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8006060:	3001      	adds	r0, #1
 8006062:	4290      	cmp	r0, r2
 8006064:	d022      	beq.n	80060ac <netconn_write_vectors_partly+0x80>
    if (size < vectors[i].len) {
 8006066:	f85c 7030 	ldr.w	r7, [ip, r0, lsl #3]
 800606a:	19e4      	adds	r4, r4, r7
 800606c:	d3f8      	bcc.n	8006060 <netconn_write_vectors_partly+0x34>
      return ERR_VAL;
 800606e:	f06f 0005 	mvn.w	r0, #5
}
 8006072:	b009      	add	sp, #36	; 0x24
 8006074:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006076:	4b31      	ldr	r3, [pc, #196]	; (800613c <netconn_write_vectors_partly+0x110>)
 8006078:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800607c:	4930      	ldr	r1, [pc, #192]	; (8006140 <netconn_write_vectors_partly+0x114>)
 800607e:	4831      	ldr	r0, [pc, #196]	; (8006144 <netconn_write_vectors_partly+0x118>)
 8006080:	f008 ff50 	bl	800ef24 <iprintf>
 8006084:	f06f 000f 	mvn.w	r0, #15
 8006088:	e7f3      	b.n	8006072 <netconn_write_vectors_partly+0x46>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800608a:	4b2c      	ldr	r3, [pc, #176]	; (800613c <netconn_write_vectors_partly+0x110>)
 800608c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8006090:	492d      	ldr	r1, [pc, #180]	; (8006148 <netconn_write_vectors_partly+0x11c>)
 8006092:	482c      	ldr	r0, [pc, #176]	; (8006144 <netconn_write_vectors_partly+0x118>)
 8006094:	f008 ff46 	bl	800ef24 <iprintf>
 8006098:	f06f 0005 	mvn.w	r0, #5
 800609c:	e7e9      	b.n	8006072 <netconn_write_vectors_partly+0x46>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800609e:	2601      	movs	r6, #1
  if (dontblock && !bytes_written) {
 80060a0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060a2:	2800      	cmp	r0, #0
 80060a4:	d1d6      	bne.n	8006054 <netconn_write_vectors_partly+0x28>
    return ERR_VAL;
 80060a6:	f06f 0005 	mvn.w	r0, #5
 80060aa:	e7e2      	b.n	8006072 <netconn_write_vectors_partly+0x46>
  if (size == 0) {
 80060ac:	2c00      	cmp	r4, #0
 80060ae:	d03e      	beq.n	800612e <netconn_write_vectors_partly+0x102>
  } else if (size > SSIZE_MAX) {
 80060b0:	2c00      	cmp	r4, #0
 80060b2:	da1f      	bge.n	80060f4 <netconn_write_vectors_partly+0xc8>
    if (!bytes_written) {
 80060b4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d03b      	beq.n	8006132 <netconn_write_vectors_partly+0x106>
  API_MSG_VAR_REF(msg).conn = conn;
 80060ba:	9500      	str	r5, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80060bc:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80060be:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80060c2:	2200      	movs	r2, #0
 80060c4:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80060c6:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80060ca:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80060ce:	9305      	str	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80060d0:	9206      	str	r2, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80060d2:	4669      	mov	r1, sp
 80060d4:	481d      	ldr	r0, [pc, #116]	; (800614c <netconn_write_vectors_partly+0x120>)
 80060d6:	f7ff fe95 	bl	8005e04 <netconn_apimsg>
  if (err == ERR_OK) {
 80060da:	2800      	cmp	r0, #0
 80060dc:	d1c9      	bne.n	8006072 <netconn_write_vectors_partly+0x46>
    size = (size_t)limited;
 80060de:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80060e2:	9b06      	ldr	r3, [sp, #24]
 80060e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060e6:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 80060e8:	bb36      	cbnz	r6, 8006138 <netconn_write_vectors_partly+0x10c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80060ea:	9b06      	ldr	r3, [sp, #24]
 80060ec:	42a3      	cmp	r3, r4
 80060ee:	d115      	bne.n	800611c <netconn_write_vectors_partly+0xf0>
  return err;
 80060f0:	2000      	movs	r0, #0
 80060f2:	e7be      	b.n	8006072 <netconn_write_vectors_partly+0x46>
  API_MSG_VAR_REF(msg).conn = conn;
 80060f4:	9500      	str	r5, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80060f6:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80060f8:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80060fc:	2200      	movs	r2, #0
 80060fe:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006100:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006104:	9405      	str	r4, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8006106:	9206      	str	r2, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006108:	4669      	mov	r1, sp
 800610a:	4810      	ldr	r0, [pc, #64]	; (800614c <netconn_write_vectors_partly+0x120>)
 800610c:	f7ff fe7a 	bl	8005e04 <netconn_apimsg>
  if (err == ERR_OK) {
 8006110:	2800      	cmp	r0, #0
 8006112:	d1ae      	bne.n	8006072 <netconn_write_vectors_partly+0x46>
    if (bytes_written != NULL) {
 8006114:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0e6      	beq.n	80060e8 <netconn_write_vectors_partly+0xbc>
 800611a:	e7e2      	b.n	80060e2 <netconn_write_vectors_partly+0xb6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <netconn_write_vectors_partly+0x110>)
 800611e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006122:	490b      	ldr	r1, [pc, #44]	; (8006150 <netconn_write_vectors_partly+0x124>)
 8006124:	4807      	ldr	r0, [pc, #28]	; (8006144 <netconn_write_vectors_partly+0x118>)
 8006126:	f008 fefd 	bl	800ef24 <iprintf>
  return err;
 800612a:	2000      	movs	r0, #0
 800612c:	e7a1      	b.n	8006072 <netconn_write_vectors_partly+0x46>
    return ERR_OK;
 800612e:	2000      	movs	r0, #0
 8006130:	e79f      	b.n	8006072 <netconn_write_vectors_partly+0x46>
      return ERR_VAL;
 8006132:	f06f 0005 	mvn.w	r0, #5
 8006136:	e79c      	b.n	8006072 <netconn_write_vectors_partly+0x46>
  return err;
 8006138:	2000      	movs	r0, #0
 800613a:	e79a      	b.n	8006072 <netconn_write_vectors_partly+0x46>
 800613c:	0800feb4 	.word	0x0800feb4
 8006140:	0800ffe0 	.word	0x0800ffe0
 8006144:	0800fe60 	.word	0x0800fe60
 8006148:	0800fffc 	.word	0x0800fffc
 800614c:	08007409 	.word	0x08007409
 8006150:	08010020 	.word	0x08010020

08006154 <netconn_write_partly>:
{
 8006154:	b500      	push	{lr}
 8006156:	b085      	sub	sp, #20
  vector.ptr = dataptr;
 8006158:	9102      	str	r1, [sp, #8]
  vector.len = size;
 800615a:	9203      	str	r2, [sp, #12]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800615c:	9a06      	ldr	r2, [sp, #24]
 800615e:	9200      	str	r2, [sp, #0]
 8006160:	2201      	movs	r2, #1
 8006162:	a902      	add	r1, sp, #8
 8006164:	f7ff ff62 	bl	800602c <netconn_write_vectors_partly>
}
 8006168:	b005      	add	sp, #20
 800616a:	f85d fb04 	ldr.w	pc, [sp], #4

0800616e <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800616e:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8006170:	2103      	movs	r1, #3
 8006172:	f7ff fe75 	bl	8005e60 <netconn_close_shutdown>
}
 8006176:	bd08      	pop	{r3, pc}

08006178 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8006178:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800617a:	b150      	cbz	r0, 8006192 <netconn_err+0x1a>
 800617c:	4604      	mov	r4, r0
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800617e:	f008 fce5 	bl	800eb4c <sys_arch_protect>
  err = conn->pending_err;
 8006182:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800618a:	f008 fceb 	bl	800eb64 <sys_arch_unprotect>
  return err;
}
 800618e:	4628      	mov	r0, r5
 8006190:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8006192:	2500      	movs	r5, #0
 8006194:	e7fb      	b.n	800618e <netconn_err+0x16>
	...

08006198 <netconn_accept>:
{
 8006198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800619a:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800619c:	b169      	cbz	r1, 80061ba <netconn_accept+0x22>
 800619e:	4604      	mov	r4, r0
 80061a0:	460e      	mov	r6, r1
  *new_conn = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80061a6:	b190      	cbz	r0, 80061ce <netconn_accept+0x36>
  err = netconn_err(conn);
 80061a8:	f7ff ffe6 	bl	8006178 <netconn_err>
 80061ac:	4605      	mov	r5, r0
 80061ae:	f88d 0007 	strb.w	r0, [sp, #7]
  if (err != ERR_OK) {
 80061b2:	b1b0      	cbz	r0, 80061e2 <netconn_accept+0x4a>
}
 80061b4:	4628      	mov	r0, r5
 80061b6:	b003      	add	sp, #12
 80061b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80061ba:	4b26      	ldr	r3, [pc, #152]	; (8006254 <netconn_accept+0xbc>)
 80061bc:	f240 12e1 	movw	r2, #481	; 0x1e1
 80061c0:	4925      	ldr	r1, [pc, #148]	; (8006258 <netconn_accept+0xc0>)
 80061c2:	4826      	ldr	r0, [pc, #152]	; (800625c <netconn_accept+0xc4>)
 80061c4:	f008 feae 	bl	800ef24 <iprintf>
 80061c8:	f06f 050f 	mvn.w	r5, #15
 80061cc:	e7f2      	b.n	80061b4 <netconn_accept+0x1c>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80061ce:	4b21      	ldr	r3, [pc, #132]	; (8006254 <netconn_accept+0xbc>)
 80061d0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80061d4:	4922      	ldr	r1, [pc, #136]	; (8006260 <netconn_accept+0xc8>)
 80061d6:	4821      	ldr	r0, [pc, #132]	; (800625c <netconn_accept+0xc4>)
 80061d8:	f008 fea4 	bl	800ef24 <iprintf>
 80061dc:	f06f 050f 	mvn.w	r5, #15
 80061e0:	e7e8      	b.n	80061b4 <netconn_accept+0x1c>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80061e2:	f104 0714 	add.w	r7, r4, #20
 80061e6:	4638      	mov	r0, r7
 80061e8:	f008 fc2a 	bl	800ea40 <sys_mbox_valid>
 80061ec:	b340      	cbz	r0, 8006240 <netconn_accept+0xa8>
 80061ee:	7f23      	ldrb	r3, [r4, #28]
 80061f0:	f013 0f01 	tst.w	r3, #1
 80061f4:	d127      	bne.n	8006246 <netconn_accept+0xae>
  if (netconn_is_nonblocking(conn)) {
 80061f6:	f013 0f02 	tst.w	r3, #2
 80061fa:	d009      	beq.n	8006210 <netconn_accept+0x78>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80061fc:	4669      	mov	r1, sp
 80061fe:	4638      	mov	r0, r7
 8006200:	f008 fc13 	bl	800ea2a <sys_arch_mbox_tryfetch>
 8006204:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006208:	d107      	bne.n	800621a <netconn_accept+0x82>
      return ERR_WOULDBLOCK;
 800620a:	f06f 0506 	mvn.w	r5, #6
 800620e:	e7d1      	b.n	80061b4 <netconn_accept+0x1c>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006210:	2200      	movs	r2, #0
 8006212:	4669      	mov	r1, sp
 8006214:	4638      	mov	r0, r7
 8006216:	f008 fbe7 	bl	800e9e8 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800621a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800621c:	b11b      	cbz	r3, 8006226 <netconn_accept+0x8e>
 800621e:	2200      	movs	r2, #0
 8006220:	2101      	movs	r1, #1
 8006222:	4620      	mov	r0, r4
 8006224:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006226:	f10d 0107 	add.w	r1, sp, #7
 800622a:	9800      	ldr	r0, [sp, #0]
 800622c:	f000 fdf0 	bl	8006e10 <lwip_netconn_is_err_msg>
 8006230:	b918      	cbnz	r0, 800623a <netconn_accept+0xa2>
  if (accept_ptr == NULL) {
 8006232:	9b00      	ldr	r3, [sp, #0]
 8006234:	b153      	cbz	r3, 800624c <netconn_accept+0xb4>
  *new_conn = newconn;
 8006236:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8006238:	e7bc      	b.n	80061b4 <netconn_accept+0x1c>
    return err;
 800623a:	f99d 5007 	ldrsb.w	r5, [sp, #7]
 800623e:	e7b9      	b.n	80061b4 <netconn_accept+0x1c>
    return ERR_CLSD;
 8006240:	f06f 050e 	mvn.w	r5, #14
 8006244:	e7b6      	b.n	80061b4 <netconn_accept+0x1c>
 8006246:	f06f 050e 	mvn.w	r5, #14
 800624a:	e7b3      	b.n	80061b4 <netconn_accept+0x1c>
    return ERR_CLSD;
 800624c:	f06f 050e 	mvn.w	r5, #14
 8006250:	e7b0      	b.n	80061b4 <netconn_accept+0x1c>
 8006252:	bf00      	nop
 8006254:	0800feb4 	.word	0x0800feb4
 8006258:	08010044 	.word	0x08010044
 800625c:	0800fe60 	.word	0x0800fe60
 8006260:	08010064 	.word	0x08010064

08006264 <netconn_recv_data>:
{
 8006264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006266:	b083      	sub	sp, #12
  void *buf = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800626c:	2900      	cmp	r1, #0
 800626e:	d034      	beq.n	80062da <netconn_recv_data+0x76>
 8006270:	4604      	mov	r4, r0
 8006272:	4617      	mov	r7, r2
 8006274:	460e      	mov	r6, r1
  *new_buf = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800627a:	2800      	cmp	r0, #0
 800627c:	d037      	beq.n	80062ee <netconn_recv_data+0x8a>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800627e:	f100 0510 	add.w	r5, r0, #16
 8006282:	4628      	mov	r0, r5
 8006284:	f008 fbdc 	bl	800ea40 <sys_mbox_valid>
 8006288:	2800      	cmp	r0, #0
 800628a:	d03a      	beq.n	8006302 <netconn_recv_data+0x9e>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800628c:	7f23      	ldrb	r3, [r4, #28]
 800628e:	f003 0303 	and.w	r3, r3, #3
 8006292:	f007 0204 	and.w	r2, r7, #4
 8006296:	4313      	orrs	r3, r2
 8006298:	d103      	bne.n	80062a2 <netconn_recv_data+0x3e>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800629a:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d045      	beq.n	800632e <netconn_recv_data+0xca>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80062a2:	a901      	add	r1, sp, #4
 80062a4:	4628      	mov	r0, r5
 80062a6:	f008 fbc0 	bl	800ea2a <sys_arch_mbox_tryfetch>
 80062aa:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062ae:	d030      	beq.n	8006312 <netconn_recv_data+0xae>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80062b0:	7823      	ldrb	r3, [r4, #0]
 80062b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062b6:	2b10      	cmp	r3, #16
 80062b8:	d03f      	beq.n	800633a <netconn_recv_data+0xd6>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80062ba:	9b01      	ldr	r3, [sp, #4]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d04c      	beq.n	800635a <netconn_recv_data+0xf6>
    len = netbuf_len((struct netbuf *)buf);
 80062c0:	9b01      	ldr	r3, [sp, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80062c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062c8:	b113      	cbz	r3, 80062d0 <netconn_recv_data+0x6c>
 80062ca:	2101      	movs	r1, #1
 80062cc:	4620      	mov	r0, r4
 80062ce:	4798      	blx	r3
  *new_buf = buf;
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80062d4:	2000      	movs	r0, #0
}
 80062d6:	b003      	add	sp, #12
 80062d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80062da:	4b24      	ldr	r3, [pc, #144]	; (800636c <netconn_recv_data+0x108>)
 80062dc:	f44f 7212 	mov.w	r2, #584	; 0x248
 80062e0:	4923      	ldr	r1, [pc, #140]	; (8006370 <netconn_recv_data+0x10c>)
 80062e2:	4824      	ldr	r0, [pc, #144]	; (8006374 <netconn_recv_data+0x110>)
 80062e4:	f008 fe1e 	bl	800ef24 <iprintf>
 80062e8:	f06f 000f 	mvn.w	r0, #15
 80062ec:	e7f3      	b.n	80062d6 <netconn_recv_data+0x72>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80062ee:	4b1f      	ldr	r3, [pc, #124]	; (800636c <netconn_recv_data+0x108>)
 80062f0:	f240 224a 	movw	r2, #586	; 0x24a
 80062f4:	4920      	ldr	r1, [pc, #128]	; (8006378 <netconn_recv_data+0x114>)
 80062f6:	481f      	ldr	r0, [pc, #124]	; (8006374 <netconn_recv_data+0x110>)
 80062f8:	f008 fe14 	bl	800ef24 <iprintf>
 80062fc:	f06f 000f 	mvn.w	r0, #15
 8006300:	e7e9      	b.n	80062d6 <netconn_recv_data+0x72>
    err_t err = netconn_err(conn);
 8006302:	4620      	mov	r0, r4
 8006304:	f7ff ff38 	bl	8006178 <netconn_err>
    return ERR_CONN;
 8006308:	2800      	cmp	r0, #0
 800630a:	bf08      	it	eq
 800630c:	f06f 000a 	mvneq.w	r0, #10
 8006310:	e7e1      	b.n	80062d6 <netconn_recv_data+0x72>
      err = netconn_err(conn);
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff ff30 	bl	8006178 <netconn_err>
      if (err != ERR_OK) {
 8006318:	2800      	cmp	r0, #0
 800631a:	d1dc      	bne.n	80062d6 <netconn_recv_data+0x72>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800631c:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800631e:	f013 0f01 	tst.w	r3, #1
 8006322:	bf14      	ite	ne
 8006324:	f06f 000a 	mvnne.w	r0, #10
 8006328:	f06f 0006 	mvneq.w	r0, #6
 800632c:	e7d3      	b.n	80062d6 <netconn_recv_data+0x72>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800632e:	2200      	movs	r2, #0
 8006330:	a901      	add	r1, sp, #4
 8006332:	4628      	mov	r0, r5
 8006334:	f008 fb58 	bl	800e9e8 <sys_arch_mbox_fetch>
 8006338:	e7ba      	b.n	80062b0 <netconn_recv_data+0x4c>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800633a:	f10d 0103 	add.w	r1, sp, #3
 800633e:	9801      	ldr	r0, [sp, #4]
 8006340:	f000 fd66 	bl	8006e10 <lwip_netconn_is_err_msg>
 8006344:	b130      	cbz	r0, 8006354 <netconn_recv_data+0xf0>
      if (err == ERR_CLSD) {
 8006346:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800634a:	f110 0f0f 	cmn.w	r0, #15
 800634e:	bf08      	it	eq
 8006350:	2000      	moveq	r0, #0
 8006352:	e7c0      	b.n	80062d6 <netconn_recv_data+0x72>
    len = ((struct pbuf *)buf)->tot_len;
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	891a      	ldrh	r2, [r3, #8]
 8006358:	e7b5      	b.n	80062c6 <netconn_recv_data+0x62>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800635a:	4b04      	ldr	r3, [pc, #16]	; (800636c <netconn_recv_data+0x108>)
 800635c:	f240 2291 	movw	r2, #657	; 0x291
 8006360:	4906      	ldr	r1, [pc, #24]	; (800637c <netconn_recv_data+0x118>)
 8006362:	4804      	ldr	r0, [pc, #16]	; (8006374 <netconn_recv_data+0x110>)
 8006364:	f008 fdde 	bl	800ef24 <iprintf>
 8006368:	e7aa      	b.n	80062c0 <netconn_recv_data+0x5c>
 800636a:	bf00      	nop
 800636c:	0800feb4 	.word	0x0800feb4
 8006370:	08010084 	.word	0x08010084
 8006374:	0800fe60 	.word	0x0800fe60
 8006378:	080100a4 	.word	0x080100a4
 800637c:	080100c0 	.word	0x080100c0

08006380 <netconn_recv_data_tcp>:
{
 8006380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006382:	b089      	sub	sp, #36	; 0x24
 8006384:	4604      	mov	r4, r0
 8006386:	460f      	mov	r7, r1
 8006388:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800638a:	3010      	adds	r0, #16
 800638c:	f008 fb58 	bl	800ea40 <sys_mbox_valid>
 8006390:	2800      	cmp	r0, #0
 8006392:	d03e      	beq.n	8006412 <netconn_recv_data_tcp+0x92>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006394:	7f23      	ldrb	r3, [r4, #28]
 8006396:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800639a:	2a00      	cmp	r2, #0
 800639c:	db1b      	blt.n	80063d6 <netconn_recv_data_tcp+0x56>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800639e:	4632      	mov	r2, r6
 80063a0:	4639      	mov	r1, r7
 80063a2:	4620      	mov	r0, r4
 80063a4:	f7ff ff5e 	bl	8006264 <netconn_recv_data>
  if (err != ERR_OK) {
 80063a8:	4605      	mov	r5, r0
 80063aa:	bb30      	cbnz	r0, 80063fa <netconn_recv_data_tcp+0x7a>
  buf = *new_buf;
 80063ac:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80063ae:	f016 0f08 	tst.w	r6, #8
 80063b2:	d105      	bne.n	80063c0 <netconn_recv_data_tcp+0x40>
    u16_t len = buf ? buf->tot_len : 1;
 80063b4:	b327      	cbz	r7, 8006400 <netconn_recv_data_tcp+0x80>
 80063b6:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80063b8:	466a      	mov	r2, sp
 80063ba:	4620      	mov	r0, r4
 80063bc:	f7ff fd2e 	bl	8005e1c <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 80063c0:	b9df      	cbnz	r7, 80063fa <netconn_recv_data_tcp+0x7a>
    if (apiflags & NETCONN_NOFIN) {
 80063c2:	f016 0f10 	tst.w	r6, #16
 80063c6:	d009      	beq.n	80063dc <netconn_recv_data_tcp+0x5c>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80063c8:	7f23      	ldrb	r3, [r4, #28]
 80063ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063ce:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 80063d0:	f06f 0506 	mvn.w	r5, #6
 80063d4:	e011      	b.n	80063fa <netconn_recv_data_tcp+0x7a>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80063d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063da:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80063dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063de:	b11b      	cbz	r3, 80063e8 <netconn_recv_data_tcp+0x68>
 80063e0:	2200      	movs	r2, #0
 80063e2:	2101      	movs	r1, #1
 80063e4:	4620      	mov	r0, r4
 80063e6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80063e8:	6863      	ldr	r3, [r4, #4]
 80063ea:	b95b      	cbnz	r3, 8006404 <netconn_recv_data_tcp+0x84>
        err = netconn_err(conn);
 80063ec:	4620      	mov	r0, r4
 80063ee:	f7ff fec3 	bl	8006178 <netconn_err>
        return ERR_RST;
 80063f2:	1e05      	subs	r5, r0, #0
 80063f4:	bf08      	it	eq
 80063f6:	f06f 050d 	mvneq.w	r5, #13
}
 80063fa:	4628      	mov	r0, r5
 80063fc:	b009      	add	sp, #36	; 0x24
 80063fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8006400:	2101      	movs	r1, #1
 8006402:	e7d9      	b.n	80063b8 <netconn_recv_data_tcp+0x38>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8006404:	2101      	movs	r1, #1
 8006406:	4620      	mov	r0, r4
 8006408:	f7ff fd2a 	bl	8005e60 <netconn_close_shutdown>
      return ERR_CLSD;
 800640c:	f06f 050e 	mvn.w	r5, #14
 8006410:	e7f3      	b.n	80063fa <netconn_recv_data_tcp+0x7a>
    return ERR_CONN;
 8006412:	f06f 050a 	mvn.w	r5, #10
 8006416:	e7f0      	b.n	80063fa <netconn_recv_data_tcp+0x7a>

08006418 <netconn_recv>:
{
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800641c:	b311      	cbz	r1, 8006464 <netconn_recv+0x4c>
 800641e:	4604      	mov	r4, r0
 8006420:	460d      	mov	r5, r1
  *new_buf = NULL;
 8006422:	2300      	movs	r3, #0
 8006424:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006426:	b338      	cbz	r0, 8006478 <netconn_recv+0x60>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006428:	7803      	ldrb	r3, [r0, #0]
 800642a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800642e:	2b10      	cmp	r3, #16
 8006430:	d13c      	bne.n	80064ac <netconn_recv+0x94>
    struct pbuf *p = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006436:	2006      	movs	r0, #6
 8006438:	f001 fda6 	bl	8007f88 <memp_malloc>
    if (buf == NULL) {
 800643c:	4606      	mov	r6, r0
 800643e:	2800      	cmp	r0, #0
 8006440:	d031      	beq.n	80064a6 <netconn_recv+0x8e>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8006442:	2200      	movs	r2, #0
 8006444:	a901      	add	r1, sp, #4
 8006446:	4620      	mov	r0, r4
 8006448:	f7ff ff9a 	bl	8006380 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800644c:	4604      	mov	r4, r0
 800644e:	b9e8      	cbnz	r0, 800648c <netconn_recv+0x74>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006450:	9b01      	ldr	r3, [sp, #4]
 8006452:	b303      	cbz	r3, 8006496 <netconn_recv+0x7e>
    buf->p = p;
 8006454:	9b01      	ldr	r3, [sp, #4]
 8006456:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8006458:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 800645e:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8006460:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8006462:	e027      	b.n	80064b4 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006464:	4b15      	ldr	r3, [pc, #84]	; (80064bc <netconn_recv+0xa4>)
 8006466:	f240 3263 	movw	r2, #867	; 0x363
 800646a:	4915      	ldr	r1, [pc, #84]	; (80064c0 <netconn_recv+0xa8>)
 800646c:	4815      	ldr	r0, [pc, #84]	; (80064c4 <netconn_recv+0xac>)
 800646e:	f008 fd59 	bl	800ef24 <iprintf>
 8006472:	f06f 040f 	mvn.w	r4, #15
 8006476:	e01d      	b.n	80064b4 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006478:	4b10      	ldr	r3, [pc, #64]	; (80064bc <netconn_recv+0xa4>)
 800647a:	f240 3265 	movw	r2, #869	; 0x365
 800647e:	4912      	ldr	r1, [pc, #72]	; (80064c8 <netconn_recv+0xb0>)
 8006480:	4810      	ldr	r0, [pc, #64]	; (80064c4 <netconn_recv+0xac>)
 8006482:	f008 fd4f 	bl	800ef24 <iprintf>
 8006486:	f06f 040f 	mvn.w	r4, #15
 800648a:	e013      	b.n	80064b4 <netconn_recv+0x9c>
      memp_free(MEMP_NETBUF, buf);
 800648c:	4631      	mov	r1, r6
 800648e:	2006      	movs	r0, #6
 8006490:	f001 fdaa 	bl	8007fe8 <memp_free>
      return err;
 8006494:	e00e      	b.n	80064b4 <netconn_recv+0x9c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <netconn_recv+0xa4>)
 8006498:	f240 3279 	movw	r2, #889	; 0x379
 800649c:	490b      	ldr	r1, [pc, #44]	; (80064cc <netconn_recv+0xb4>)
 800649e:	4809      	ldr	r0, [pc, #36]	; (80064c4 <netconn_recv+0xac>)
 80064a0:	f008 fd40 	bl	800ef24 <iprintf>
 80064a4:	e7d6      	b.n	8006454 <netconn_recv+0x3c>
      return ERR_MEM;
 80064a6:	f04f 34ff 	mov.w	r4, #4294967295
 80064aa:	e003      	b.n	80064b4 <netconn_recv+0x9c>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80064ac:	2200      	movs	r2, #0
 80064ae:	f7ff fed9 	bl	8006264 <netconn_recv_data>
 80064b2:	4604      	mov	r4, r0
}
 80064b4:	4620      	mov	r0, r4
 80064b6:	b002      	add	sp, #8
 80064b8:	bd70      	pop	{r4, r5, r6, pc}
 80064ba:	bf00      	nop
 80064bc:	0800feb4 	.word	0x0800feb4
 80064c0:	08010084 	.word	0x08010084
 80064c4:	0800fe60 	.word	0x0800fe60
 80064c8:	080100a4 	.word	0x080100a4
 80064cc:	08010204 	.word	0x08010204

080064d0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80064d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d4:	4604      	mov	r4, r0
 80064d6:	4615      	mov	r5, r2
 80064d8:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80064da:	460e      	mov	r6, r1
 80064dc:	b369      	cbz	r1, 800653a <recv_udp+0x6a>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80064de:	2c00      	cmp	r4, #0
 80064e0:	d032      	beq.n	8006548 <recv_udp+0x78>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80064e2:	6863      	ldr	r3, [r4, #4]
 80064e4:	42b3      	cmp	r3, r6
 80064e6:	d005      	beq.n	80064f4 <recv_udp+0x24>
 80064e8:	4b24      	ldr	r3, [pc, #144]	; (800657c <recv_udp+0xac>)
 80064ea:	22ee      	movs	r2, #238	; 0xee
 80064ec:	4924      	ldr	r1, [pc, #144]	; (8006580 <recv_udp+0xb0>)
 80064ee:	4825      	ldr	r0, [pc, #148]	; (8006584 <recv_udp+0xb4>)
 80064f0:	f008 fd18 	bl	800ef24 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80064f4:	f104 0710 	add.w	r7, r4, #16
 80064f8:	4638      	mov	r0, r7
 80064fa:	f008 faa1 	bl	800ea40 <sys_mbox_valid>
 80064fe:	b368      	cbz	r0, 800655c <recv_udp+0x8c>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006500:	2006      	movs	r0, #6
 8006502:	f001 fd41 	bl	8007f88 <memp_malloc>
  if (buf == NULL) {
 8006506:	4606      	mov	r6, r0
 8006508:	b368      	cbz	r0, 8006566 <recv_udp+0x96>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 800650a:	6005      	str	r5, [r0, #0]
    buf->ptr = p;
 800650c:	6045      	str	r5, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 800650e:	f1b8 0f00 	cmp.w	r8, #0
 8006512:	d02c      	beq.n	800656e <recv_udp+0x9e>
 8006514:	f8d8 3000 	ldr.w	r3, [r8]
 8006518:	60b3      	str	r3, [r6, #8]
    buf->port = port;
 800651a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800651e:	81b3      	strh	r3, [r6, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006520:	892d      	ldrh	r5, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006522:	4631      	mov	r1, r6
 8006524:	4638      	mov	r0, r7
 8006526:	f008 fa4f 	bl	800e9c8 <sys_mbox_trypost>
 800652a:	bb10      	cbnz	r0, 8006572 <recv_udp+0xa2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800652c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800652e:	b1c3      	cbz	r3, 8006562 <recv_udp+0x92>
 8006530:	462a      	mov	r2, r5
 8006532:	2100      	movs	r1, #0
 8006534:	4620      	mov	r0, r4
 8006536:	4798      	blx	r3
 8006538:	e013      	b.n	8006562 <recv_udp+0x92>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800653a:	4b10      	ldr	r3, [pc, #64]	; (800657c <recv_udp+0xac>)
 800653c:	22e5      	movs	r2, #229	; 0xe5
 800653e:	4912      	ldr	r1, [pc, #72]	; (8006588 <recv_udp+0xb8>)
 8006540:	4810      	ldr	r0, [pc, #64]	; (8006584 <recv_udp+0xb4>)
 8006542:	f008 fcef 	bl	800ef24 <iprintf>
 8006546:	e7ca      	b.n	80064de <recv_udp+0xe>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <recv_udp+0xac>)
 800654a:	22e6      	movs	r2, #230	; 0xe6
 800654c:	490f      	ldr	r1, [pc, #60]	; (800658c <recv_udp+0xbc>)
 800654e:	480d      	ldr	r0, [pc, #52]	; (8006584 <recv_udp+0xb4>)
 8006550:	f008 fce8 	bl	800ef24 <iprintf>
    pbuf_free(p);
 8006554:	4628      	mov	r0, r5
 8006556:	f002 f809 	bl	800856c <pbuf_free>
    return;
 800655a:	e002      	b.n	8006562 <recv_udp+0x92>
    pbuf_free(p);
 800655c:	4628      	mov	r0, r5
 800655e:	f002 f805 	bl	800856c <pbuf_free>
  }
}
 8006562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8006566:	4628      	mov	r0, r5
 8006568:	f002 f800 	bl	800856c <pbuf_free>
    return;
 800656c:	e7f9      	b.n	8006562 <recv_udp+0x92>
    ip_addr_set(&buf->addr, addr);
 800656e:	2300      	movs	r3, #0
 8006570:	e7d2      	b.n	8006518 <recv_udp+0x48>
    netbuf_delete(buf);
 8006572:	4630      	mov	r0, r6
 8006574:	f001 f81a 	bl	80075ac <netbuf_delete>
    return;
 8006578:	e7f3      	b.n	8006562 <recv_udp+0x92>
 800657a:	bf00      	nop
 800657c:	080100cc 	.word	0x080100cc
 8006580:	08010144 	.word	0x08010144
 8006584:	0800fe60 	.word	0x0800fe60
 8006588:	08010100 	.word	0x08010100
 800658c:	08010124 	.word	0x08010124

08006590 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006590:	b510      	push	{r4, lr}
 8006592:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006594:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 8006596:	4620      	mov	r0, r4
 8006598:	f002 fcde 	bl	8008f58 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800659c:	4908      	ldr	r1, [pc, #32]	; (80065c0 <setup_tcp+0x30>)
 800659e:	4620      	mov	r0, r4
 80065a0:	f002 fcde 	bl	8008f60 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80065a4:	4907      	ldr	r1, [pc, #28]	; (80065c4 <setup_tcp+0x34>)
 80065a6:	4620      	mov	r0, r4
 80065a8:	f002 fcf4 	bl	8008f94 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80065ac:	2202      	movs	r2, #2
 80065ae:	4906      	ldr	r1, [pc, #24]	; (80065c8 <setup_tcp+0x38>)
 80065b0:	4620      	mov	r0, r4
 80065b2:	f002 fd29 	bl	8009008 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80065b6:	4905      	ldr	r1, [pc, #20]	; (80065cc <setup_tcp+0x3c>)
 80065b8:	4620      	mov	r0, r4
 80065ba:	f002 fd05 	bl	8008fc8 <tcp_err>
}
 80065be:	bd10      	pop	{r4, pc}
 80065c0:	08006d2d 	.word	0x08006d2d
 80065c4:	08006cbd 	.word	0x08006cbd
 80065c8:	08006c3d 	.word	0x08006c3d
 80065cc:	080065d1 	.word	0x080065d1

080065d0 <err_tcp>:
{
 80065d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80065d6:	4604      	mov	r4, r0
 80065d8:	b358      	cbz	r0, 8006632 <err_tcp+0x62>
  SYS_ARCH_PROTECT(lev);
 80065da:	f008 fab7 	bl	800eb4c <sys_arch_protect>
  conn->pcb.tcp = NULL;
 80065de:	2200      	movs	r2, #0
 80065e0:	6062      	str	r2, [r4, #4]
  conn->pending_err = err;
 80065e2:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80065e4:	7f23      	ldrb	r3, [r4, #28]
 80065e6:	f043 0301 	orr.w	r3, r3, #1
 80065ea:	7723      	strb	r3, [r4, #28]
  old_state = conn->state;
 80065ec:	7866      	ldrb	r6, [r4, #1]
  conn->state = NETCONN_NONE;
 80065ee:	7062      	strb	r2, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 80065f0:	f008 fab8 	bl	800eb64 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80065f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f6:	b17b      	cbz	r3, 8006618 <err_tcp+0x48>
 80065f8:	2200      	movs	r2, #0
 80065fa:	2104      	movs	r1, #4
 80065fc:	4620      	mov	r0, r4
 80065fe:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006600:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006602:	b14b      	cbz	r3, 8006618 <err_tcp+0x48>
 8006604:	2200      	movs	r2, #0
 8006606:	4611      	mov	r1, r2
 8006608:	4620      	mov	r0, r4
 800660a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800660c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800660e:	b11b      	cbz	r3, 8006618 <err_tcp+0x48>
 8006610:	2200      	movs	r2, #0
 8006612:	2102      	movs	r1, #2
 8006614:	4620      	mov	r0, r4
 8006616:	4798      	blx	r3
  switch (err) {
 8006618:	f115 0f0e 	cmn.w	r5, #14
 800661c:	d01a      	beq.n	8006654 <err_tcp+0x84>
 800661e:	f115 0f0d 	cmn.w	r5, #13
 8006622:	d01a      	beq.n	800665a <err_tcp+0x8a>
 8006624:	f115 0f0f 	cmn.w	r5, #15
 8006628:	d035      	beq.n	8006696 <err_tcp+0xc6>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800662a:	b955      	cbnz	r5, 8006642 <err_tcp+0x72>
      return NULL;
 800662c:	f04f 0800 	mov.w	r8, #0
 8006630:	e015      	b.n	800665e <err_tcp+0x8e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006632:	4b36      	ldr	r3, [pc, #216]	; (800670c <err_tcp+0x13c>)
 8006634:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006638:	4935      	ldr	r1, [pc, #212]	; (8006710 <err_tcp+0x140>)
 800663a:	4836      	ldr	r0, [pc, #216]	; (8006714 <err_tcp+0x144>)
 800663c:	f008 fc72 	bl	800ef24 <iprintf>
 8006640:	e7cb      	b.n	80065da <err_tcp+0xa>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8006642:	4b32      	ldr	r3, [pc, #200]	; (800670c <err_tcp+0x13c>)
 8006644:	227d      	movs	r2, #125	; 0x7d
 8006646:	4934      	ldr	r1, [pc, #208]	; (8006718 <err_tcp+0x148>)
 8006648:	4832      	ldr	r0, [pc, #200]	; (8006714 <err_tcp+0x144>)
 800664a:	f008 fc6b 	bl	800ef24 <iprintf>
      return NULL;
 800664e:	f04f 0800 	mov.w	r8, #0
 8006652:	e004      	b.n	800665e <err_tcp+0x8e>
  switch (err) {
 8006654:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006728 <err_tcp+0x158>
 8006658:	e001      	b.n	800665e <err_tcp+0x8e>
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800665a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800672c <err_tcp+0x15c>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800665e:	f104 0710 	add.w	r7, r4, #16
 8006662:	4638      	mov	r0, r7
 8006664:	f008 f9ec 	bl	800ea40 <sys_mbox_valid>
 8006668:	b9c0      	cbnz	r0, 800669c <err_tcp+0xcc>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800666a:	f104 0714 	add.w	r7, r4, #20
 800666e:	4638      	mov	r0, r7
 8006670:	f008 f9e6 	bl	800ea40 <sys_mbox_valid>
 8006674:	b9b8      	cbnz	r0, 80066a6 <err_tcp+0xd6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006676:	2e01      	cmp	r6, #1
 8006678:	d01a      	beq.n	80066b0 <err_tcp+0xe0>
 800667a:	1ef3      	subs	r3, r6, #3
 800667c:	b2db      	uxtb	r3, r3
 800667e:	2b01      	cmp	r3, #1
 8006680:	d916      	bls.n	80066b0 <err_tcp+0xe0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006682:	6a23      	ldr	r3, [r4, #32]
 8006684:	b37b      	cbz	r3, 80066e6 <err_tcp+0x116>
 8006686:	4b21      	ldr	r3, [pc, #132]	; (800670c <err_tcp+0x13c>)
 8006688:	f240 12f7 	movw	r2, #503	; 0x1f7
 800668c:	4923      	ldr	r1, [pc, #140]	; (800671c <err_tcp+0x14c>)
 800668e:	4821      	ldr	r0, [pc, #132]	; (8006714 <err_tcp+0x144>)
 8006690:	f008 fc48 	bl	800ef24 <iprintf>
}
 8006694:	e027      	b.n	80066e6 <err_tcp+0x116>
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8006696:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006730 <err_tcp+0x160>
 800669a:	e7e0      	b.n	800665e <err_tcp+0x8e>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800669c:	4641      	mov	r1, r8
 800669e:	4638      	mov	r0, r7
 80066a0:	f008 f992 	bl	800e9c8 <sys_mbox_trypost>
 80066a4:	e7e1      	b.n	800666a <err_tcp+0x9a>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80066a6:	4641      	mov	r1, r8
 80066a8:	4638      	mov	r0, r7
 80066aa:	f008 f98d 	bl	800e9c8 <sys_mbox_trypost>
 80066ae:	e7e2      	b.n	8006676 <err_tcp+0xa6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80066b0:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80066b2:	f023 0204 	bic.w	r2, r3, #4
 80066b6:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80066b8:	f013 0f04 	tst.w	r3, #4
 80066bc:	d113      	bne.n	80066e6 <err_tcp+0x116>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80066be:	6a23      	ldr	r3, [r4, #32]
 80066c0:	b19b      	cbz	r3, 80066ea <err_tcp+0x11a>
      if (old_state == NETCONN_CLOSE) {
 80066c2:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 80066c4:	6a23      	ldr	r3, [r4, #32]
 80066c6:	bf06      	itte	eq
 80066c8:	2200      	moveq	r2, #0
 80066ca:	711a      	strbeq	r2, [r3, #4]
        conn->current_msg->err = err;
 80066cc:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80066ce:	6a23      	ldr	r3, [r4, #32]
 80066d0:	681d      	ldr	r5, [r3, #0]
 80066d2:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80066d4:	4628      	mov	r0, r5
 80066d6:	f008 f9f9 	bl	800eacc <sys_sem_valid>
 80066da:	b170      	cbz	r0, 80066fa <err_tcp+0x12a>
      conn->current_msg = NULL;
 80066dc:	2300      	movs	r3, #0
 80066de:	6223      	str	r3, [r4, #32]
      sys_sem_signal(op_completed_sem);
 80066e0:	4628      	mov	r0, r5
 80066e2:	f008 f9e9 	bl	800eab8 <sys_sem_signal>
}
 80066e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80066ea:	4b08      	ldr	r3, [pc, #32]	; (800670c <err_tcp+0x13c>)
 80066ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80066f0:	490b      	ldr	r1, [pc, #44]	; (8006720 <err_tcp+0x150>)
 80066f2:	4808      	ldr	r0, [pc, #32]	; (8006714 <err_tcp+0x144>)
 80066f4:	f008 fc16 	bl	800ef24 <iprintf>
 80066f8:	e7e3      	b.n	80066c2 <err_tcp+0xf2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80066fa:	4b04      	ldr	r3, [pc, #16]	; (800670c <err_tcp+0x13c>)
 80066fc:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006700:	4908      	ldr	r1, [pc, #32]	; (8006724 <err_tcp+0x154>)
 8006702:	4804      	ldr	r0, [pc, #16]	; (8006714 <err_tcp+0x144>)
 8006704:	f008 fc0e 	bl	800ef24 <iprintf>
 8006708:	e7e8      	b.n	80066dc <err_tcp+0x10c>
 800670a:	bf00      	nop
 800670c:	080100cc 	.word	0x080100cc
 8006710:	08010164 	.word	0x08010164
 8006714:	0800fe60 	.word	0x0800fe60
 8006718:	08010174 	.word	0x08010174
 800671c:	080101bc 	.word	0x080101bc
 8006720:	08010184 	.word	0x08010184
 8006724:	080101a0 	.word	0x080101a0
 8006728:	080104ee 	.word	0x080104ee
 800672c:	080104ec 	.word	0x080104ec
 8006730:	080104ed 	.word	0x080104ed

08006734 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	b083      	sub	sp, #12
 800673a:	9101      	str	r1, [sp, #4]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800673c:	4605      	mov	r5, r0
 800673e:	b1e8      	cbz	r0, 800677c <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006740:	786b      	ldrb	r3, [r5, #1]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d122      	bne.n	800678c <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006746:	6a2b      	ldr	r3, [r5, #32]
 8006748:	b343      	cbz	r3, 800679c <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800674a:	686b      	ldr	r3, [r5, #4]
 800674c:	b373      	cbz	r3, 80067ac <lwip_netconn_do_writemore+0x78>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800674e:	6a2b      	ldr	r3, [r5, #32]
 8006750:	699a      	ldr	r2, [r3, #24]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	429a      	cmp	r2, r3
 8006756:	d231      	bcs.n	80067bc <lwip_netconn_do_writemore+0x88>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006758:	6a2b      	ldr	r3, [r5, #32]
 800675a:	899b      	ldrh	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d035      	beq.n	80067cc <lwip_netconn_do_writemore+0x98>

  apiflags = conn->current_msg->msg.w.apiflags;
 8006760:	6a2b      	ldr	r3, [r5, #32]
 8006762:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006766:	f895 a01c 	ldrb.w	sl, [r5, #28]
 800676a:	f00a 0a02 	and.w	sl, sl, #2
 800676e:	f008 0304 	and.w	r3, r8, #4
 8006772:	ea4a 0a03 	orr.w	sl, sl, r3
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006776:	f8df b248 	ldr.w	fp, [pc, #584]	; 80069c0 <lwip_netconn_do_writemore+0x28c>
 800677a:	e103      	b.n	8006984 <lwip_netconn_do_writemore+0x250>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800677c:	4b90      	ldr	r3, [pc, #576]	; (80069c0 <lwip_netconn_do_writemore+0x28c>)
 800677e:	f240 6273 	movw	r2, #1651	; 0x673
 8006782:	4990      	ldr	r1, [pc, #576]	; (80069c4 <lwip_netconn_do_writemore+0x290>)
 8006784:	4890      	ldr	r0, [pc, #576]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 8006786:	f008 fbcd 	bl	800ef24 <iprintf>
 800678a:	e7d9      	b.n	8006740 <lwip_netconn_do_writemore+0xc>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800678c:	4b8c      	ldr	r3, [pc, #560]	; (80069c0 <lwip_netconn_do_writemore+0x28c>)
 800678e:	f240 6274 	movw	r2, #1652	; 0x674
 8006792:	498e      	ldr	r1, [pc, #568]	; (80069cc <lwip_netconn_do_writemore+0x298>)
 8006794:	488c      	ldr	r0, [pc, #560]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 8006796:	f008 fbc5 	bl	800ef24 <iprintf>
 800679a:	e7d4      	b.n	8006746 <lwip_netconn_do_writemore+0x12>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800679c:	4b88      	ldr	r3, [pc, #544]	; (80069c0 <lwip_netconn_do_writemore+0x28c>)
 800679e:	f240 6275 	movw	r2, #1653	; 0x675
 80067a2:	498b      	ldr	r1, [pc, #556]	; (80069d0 <lwip_netconn_do_writemore+0x29c>)
 80067a4:	4888      	ldr	r0, [pc, #544]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 80067a6:	f008 fbbd 	bl	800ef24 <iprintf>
 80067aa:	e7ce      	b.n	800674a <lwip_netconn_do_writemore+0x16>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80067ac:	4b84      	ldr	r3, [pc, #528]	; (80069c0 <lwip_netconn_do_writemore+0x28c>)
 80067ae:	f240 6276 	movw	r2, #1654	; 0x676
 80067b2:	4988      	ldr	r1, [pc, #544]	; (80069d4 <lwip_netconn_do_writemore+0x2a0>)
 80067b4:	4884      	ldr	r0, [pc, #528]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 80067b6:	f008 fbb5 	bl	800ef24 <iprintf>
 80067ba:	e7c8      	b.n	800674e <lwip_netconn_do_writemore+0x1a>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80067bc:	4b80      	ldr	r3, [pc, #512]	; (80069c0 <lwip_netconn_do_writemore+0x28c>)
 80067be:	f240 6277 	movw	r2, #1655	; 0x677
 80067c2:	4985      	ldr	r1, [pc, #532]	; (80069d8 <lwip_netconn_do_writemore+0x2a4>)
 80067c4:	4880      	ldr	r0, [pc, #512]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 80067c6:	f008 fbad 	bl	800ef24 <iprintf>
 80067ca:	e7c5      	b.n	8006758 <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80067cc:	4b7c      	ldr	r3, [pc, #496]	; (80069c0 <lwip_netconn_do_writemore+0x28c>)
 80067ce:	f240 6279 	movw	r2, #1657	; 0x679
 80067d2:	4982      	ldr	r1, [pc, #520]	; (80069dc <lwip_netconn_do_writemore+0x2a8>)
 80067d4:	487c      	ldr	r0, [pc, #496]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 80067d6:	f008 fba5 	bl	800ef24 <iprintf>
 80067da:	e7c1      	b.n	8006760 <lwip_netconn_do_writemore+0x2c>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80067dc:	6993      	ldr	r3, [r2, #24]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf0c      	ite	eq
 80067e2:	f06f 0406 	mvneq.w	r4, #6
 80067e6:	2400      	movne	r4, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80067e8:	6a2b      	ldr	r3, [r5, #32]
 80067ea:	699a      	ldr	r2, [r3, #24]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d359      	bcc.n	80068a6 <lwip_netconn_do_writemore+0x172>
 80067f2:	e094      	b.n	800691e <lwip_netconn_do_writemore+0x1ea>
          apiflags |= TCP_WRITE_FLAG_MORE;
 80067f4:	f048 0802 	orr.w	r8, r8, #2
        len = available;
 80067f8:	4604      	mov	r4, r0
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80067fa:	46a1      	mov	r9, r4
 80067fc:	4423      	add	r3, r4
 80067fe:	4299      	cmp	r1, r3
 8006800:	d32b      	bcc.n	800685a <lwip_netconn_do_writemore+0x126>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006806:	429c      	cmp	r4, r3
 8006808:	d02f      	beq.n	800686a <lwip_netconn_do_writemore+0x136>
 800680a:	b2b6      	uxth	r6, r6
 800680c:	42a6      	cmp	r6, r4
 800680e:	f040 809e 	bne.w	800694e <lwip_netconn_do_writemore+0x21a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8006812:	6a2b      	ldr	r3, [r5, #32]
 8006814:	899b      	ldrh	r3, [r3, #12]
 8006816:	2b01      	cmp	r3, #1
 8006818:	f240 8099 	bls.w	800694e <lwip_netconn_do_writemore+0x21a>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800681c:	f048 0802 	orr.w	r8, r8, #2
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006820:	4643      	mov	r3, r8
 8006822:	4622      	mov	r2, r4
 8006824:	4639      	mov	r1, r7
 8006826:	6868      	ldr	r0, [r5, #4]
 8006828:	f005 f900 	bl	800ba2c <tcp_write>
      if (err == ERR_OK) {
 800682c:	4604      	mov	r4, r0
 800682e:	b300      	cbz	r0, 8006872 <lwip_netconn_do_writemore+0x13e>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	d965      	bls.n	8006904 <lwip_netconn_do_writemore+0x1d0>
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      }
    } else if (err == ERR_MEM) {
 8006838:	f1b4 3fff 	cmp.w	r4, #4294967295
 800683c:	d03e      	beq.n	80068bc <lwip_netconn_do_writemore+0x188>
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800683e:	6a2b      	ldr	r3, [r5, #32]
 8006840:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8006842:	711c      	strb	r4, [r3, #4]
    conn->current_msg = NULL;
 8006844:	2300      	movs	r3, #0
 8006846:	622b      	str	r3, [r5, #32]
    conn->state = NETCONN_NONE;
 8006848:	706b      	strb	r3, [r5, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800684a:	9b01      	ldr	r3, [sp, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d148      	bne.n	80068e2 <lwip_netconn_do_writemore+0x1ae>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8006850:	2400      	movs	r4, #0
}
 8006852:	4620      	mov	r0, r4
 8006854:	b003      	add	sp, #12
 8006856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800685a:	465b      	mov	r3, fp
 800685c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8006860:	495f      	ldr	r1, [pc, #380]	; (80069e0 <lwip_netconn_do_writemore+0x2ac>)
 8006862:	4859      	ldr	r0, [pc, #356]	; (80069c8 <lwip_netconn_do_writemore+0x294>)
 8006864:	f008 fb5e 	bl	800ef24 <iprintf>
 8006868:	e7cb      	b.n	8006802 <lwip_netconn_do_writemore+0xce>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800686a:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800686e:	d2d5      	bcs.n	800681c <lwip_netconn_do_writemore+0xe8>
 8006870:	e7cb      	b.n	800680a <lwip_netconn_do_writemore+0xd6>
        write_more = 1;
 8006872:	2101      	movs	r1, #1
 8006874:	e075      	b.n	8006962 <lwip_netconn_do_writemore+0x22e>
          conn->current_msg->msg.w.vector_cnt--;
 8006876:	899a      	ldrh	r2, [r3, #12]
 8006878:	3a01      	subs	r2, #1
 800687a:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800687c:	6a2b      	ldr	r3, [r5, #32]
 800687e:	899a      	ldrh	r2, [r3, #12]
 8006880:	2a00      	cmp	r2, #0
 8006882:	d07d      	beq.n	8006980 <lwip_netconn_do_writemore+0x24c>
            conn->current_msg->msg.w.vector++;
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	3208      	adds	r2, #8
 8006888:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800688a:	6a2b      	ldr	r3, [r5, #32]
 800688c:	2200      	movs	r2, #0
 800688e:	611a      	str	r2, [r3, #16]
 8006890:	e076      	b.n	8006980 <lwip_netconn_do_writemore+0x24c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006892:	1c63      	adds	r3, r4, #1
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	d8ce      	bhi.n	8006838 <lwip_netconn_do_writemore+0x104>
 800689a:	e033      	b.n	8006904 <lwip_netconn_do_writemore+0x1d0>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800689c:	6a2b      	ldr	r3, [r5, #32]
 800689e:	699a      	ldr	r2, [r3, #24]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d231      	bcs.n	800690a <lwip_netconn_do_writemore+0x1d6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80068a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a8:	b11b      	cbz	r3, 80068b2 <lwip_netconn_do_writemore+0x17e>
 80068aa:	2200      	movs	r2, #0
 80068ac:	2103      	movs	r1, #3
 80068ae:	4628      	mov	r0, r5
 80068b0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80068b2:	7f2b      	ldrb	r3, [r5, #28]
 80068b4:	f043 0310 	orr.w	r3, r3, #16
 80068b8:	772b      	strb	r3, [r5, #28]
 80068ba:	e036      	b.n	800692a <lwip_netconn_do_writemore+0x1f6>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80068bc:	6868      	ldr	r0, [r5, #4]
 80068be:	f005 feeb 	bl	800c698 <tcp_output>
      if (out_err == ERR_RTE) {
 80068c2:	f110 0f04 	cmn.w	r0, #4
 80068c6:	d00a      	beq.n	80068de <lwip_netconn_do_writemore+0x1aa>
      } else if (dontblock) {
 80068c8:	f1ba 0f00 	cmp.w	sl, #0
 80068cc:	d0c1      	beq.n	8006852 <lwip_netconn_do_writemore+0x11e>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80068ce:	6a2b      	ldr	r3, [r5, #32]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	bf0c      	ite	eq
 80068d6:	f06f 0406 	mvneq.w	r4, #6
 80068da:	2400      	movne	r4, #0
 80068dc:	e7af      	b.n	800683e <lwip_netconn_do_writemore+0x10a>
        err = out_err;
 80068de:	4604      	mov	r4, r0
 80068e0:	e7ad      	b.n	800683e <lwip_netconn_do_writemore+0x10a>
      sys_sem_signal(op_completed_sem);
 80068e2:	300c      	adds	r0, #12
 80068e4:	f008 f8e8 	bl	800eab8 <sys_sem_signal>
  return ERR_OK;
 80068e8:	2400      	movs	r4, #0
 80068ea:	e7b2      	b.n	8006852 <lwip_netconn_do_writemore+0x11e>
      out_err = tcp_output(conn->pcb.tcp);
 80068ec:	6868      	ldr	r0, [r5, #4]
 80068ee:	f005 fed3 	bl	800c698 <tcp_output>
 80068f2:	4604      	mov	r4, r0
      if (out_err == ERR_RTE) {
 80068f4:	f110 0f04 	cmn.w	r0, #4
    return ERR_MEM;
 80068f8:	bf18      	it	ne
 80068fa:	f04f 34ff 	movne.w	r4, #4294967295
      if (out_err == ERR_RTE) {
 80068fe:	d09e      	beq.n	800683e <lwip_netconn_do_writemore+0x10a>
 8006900:	e7a7      	b.n	8006852 <lwip_netconn_do_writemore+0x11e>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006902:	2400      	movs	r4, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006904:	f1ba 0f00 	cmp.w	sl, #0
 8006908:	d1c8      	bne.n	800689c <lwip_netconn_do_writemore+0x168>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800690a:	686b      	ldr	r3, [r5, #4]
 800690c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006910:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006914:	d303      	bcc.n	800691e <lwip_netconn_do_writemore+0x1ea>
 8006916:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800691a:	2b04      	cmp	r3, #4
 800691c:	d905      	bls.n	800692a <lwip_netconn_do_writemore+0x1f6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800691e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006920:	b11b      	cbz	r3, 800692a <lwip_netconn_do_writemore+0x1f6>
 8006922:	2200      	movs	r2, #0
 8006924:	2103      	movs	r1, #3
 8006926:	4628      	mov	r0, r5
 8006928:	4798      	blx	r3
    if (err == ERR_OK) {
 800692a:	2c00      	cmp	r4, #0
 800692c:	d184      	bne.n	8006838 <lwip_netconn_do_writemore+0x104>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800692e:	6a2b      	ldr	r3, [r5, #32]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	429a      	cmp	r2, r3
 8006936:	d002      	beq.n	800693e <lwip_netconn_do_writemore+0x20a>
 8006938:	f1ba 0f00 	cmp.w	sl, #0
 800693c:	d0d6      	beq.n	80068ec <lwip_netconn_do_writemore+0x1b8>
      out_err = tcp_output(conn->pcb.tcp);
 800693e:	6868      	ldr	r0, [r5, #4]
 8006940:	f005 feaa 	bl	800c698 <tcp_output>
        err = out_err;
 8006944:	f110 0f04 	cmn.w	r0, #4
 8006948:	bf08      	it	eq
 800694a:	4604      	moveq	r4, r0
 800694c:	e777      	b.n	800683e <lwip_netconn_do_writemore+0x10a>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800694e:	4643      	mov	r3, r8
 8006950:	4622      	mov	r2, r4
 8006952:	4639      	mov	r1, r7
 8006954:	6868      	ldr	r0, [r5, #4]
 8006956:	f005 f869 	bl	800ba2c <tcp_write>
      if (err == ERR_OK) {
 800695a:	4604      	mov	r4, r0
 800695c:	2800      	cmp	r0, #0
 800695e:	d198      	bne.n	8006892 <lwip_netconn_do_writemore+0x15e>
 8006960:	2100      	movs	r1, #0
        conn->current_msg->msg.w.offset += len;
 8006962:	6a2a      	ldr	r2, [r5, #32]
 8006964:	6993      	ldr	r3, [r2, #24]
 8006966:	444b      	add	r3, r9
 8006968:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 800696a:	6a2a      	ldr	r2, [r5, #32]
 800696c:	6913      	ldr	r3, [r2, #16]
 800696e:	444b      	add	r3, r9
 8006970:	6113      	str	r3, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006972:	6a2b      	ldr	r3, [r5, #32]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	6918      	ldr	r0, [r3, #16]
 8006978:	6852      	ldr	r2, [r2, #4]
 800697a:	4290      	cmp	r0, r2
 800697c:	f43f af7b 	beq.w	8006876 <lwip_netconn_do_writemore+0x142>
    } while (write_more && err == ERR_OK);
 8006980:	2900      	cmp	r1, #0
 8006982:	d0be      	beq.n	8006902 <lwip_netconn_do_writemore+0x1ce>
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006984:	6a2a      	ldr	r2, [r5, #32]
 8006986:	6891      	ldr	r1, [r2, #8]
 8006988:	6913      	ldr	r3, [r2, #16]
 800698a:	680f      	ldr	r7, [r1, #0]
 800698c:	441f      	add	r7, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800698e:	6849      	ldr	r1, [r1, #4]
 8006990:	1ace      	subs	r6, r1, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 8006992:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
        apiflags |= TCP_WRITE_FLAG_MORE;
 8006996:	bf26      	itte	cs
 8006998:	f048 0802 	orrcs.w	r8, r8, #2
        len = 0xffff;
 800699c:	f64f 74ff 	movwcs	r4, #65535	; 0xffff
        len = (u16_t)diff;
 80069a0:	b2b4      	uxthcc	r4, r6
      available = tcp_sndbuf(conn->pcb.tcp);
 80069a2:	6868      	ldr	r0, [r5, #4]
 80069a4:	f8b0 0064 	ldrh.w	r0, [r0, #100]	; 0x64
      if (available < len) {
 80069a8:	4284      	cmp	r4, r0
 80069aa:	f67f af26 	bls.w	80067fa <lwip_netconn_do_writemore+0xc6>
        if (dontblock) {
 80069ae:	f1ba 0f00 	cmp.w	sl, #0
 80069b2:	f43f af1f 	beq.w	80067f4 <lwip_netconn_do_writemore+0xc0>
          if (!len) {
 80069b6:	2800      	cmp	r0, #0
 80069b8:	f43f af10 	beq.w	80067dc <lwip_netconn_do_writemore+0xa8>
        len = available;
 80069bc:	4604      	mov	r4, r0
 80069be:	e71c      	b.n	80067fa <lwip_netconn_do_writemore+0xc6>
 80069c0:	080100cc 	.word	0x080100cc
 80069c4:	08010164 	.word	0x08010164
 80069c8:	0800fe60 	.word	0x0800fe60
 80069cc:	080101d8 	.word	0x080101d8
 80069d0:	08010184 	.word	0x08010184
 80069d4:	080101f8 	.word	0x080101f8
 80069d8:	08010210 	.word	0x08010210
 80069dc:	08010250 	.word	0x08010250
 80069e0:	08010278 	.word	0x08010278

080069e4 <lwip_netconn_do_close_internal>:
{
 80069e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e8:	460f      	mov	r7, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80069ea:	4604      	mov	r4, r0
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d036      	beq.n	8006a5e <lwip_netconn_do_close_internal+0x7a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80069f0:	7823      	ldrb	r3, [r4, #0]
 80069f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f6:	2b10      	cmp	r3, #16
 80069f8:	d139      	bne.n	8006a6e <lwip_netconn_do_close_internal+0x8a>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 80069fa:	7863      	ldrb	r3, [r4, #1]
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d13e      	bne.n	8006a7e <lwip_netconn_do_close_internal+0x9a>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006a00:	6863      	ldr	r3, [r4, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d043      	beq.n	8006a8e <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006a06:	6a23      	ldr	r3, [r4, #32]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d048      	beq.n	8006a9e <lwip_netconn_do_close_internal+0xba>
  tpcb = conn->pcb.tcp;
 8006a0c:	6866      	ldr	r6, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8006a0e:	6a23      	ldr	r3, [r4, #32]
 8006a10:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8006a12:	f003 0801 	and.w	r8, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8006a16:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d012      	beq.n	8006a44 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_rx &&
 8006a1e:	f1b8 0f00 	cmp.w	r8, #0
 8006a22:	d006      	beq.n	8006a32 <lwip_netconn_do_close_internal+0x4e>
             ((tpcb->state == FIN_WAIT_1) ||
 8006a24:	7d32      	ldrb	r2, [r6, #20]
 8006a26:	1f53      	subs	r3, r2, #5
  } else if (shut_rx &&
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d90a      	bls.n	8006a44 <lwip_netconn_do_close_internal+0x60>
              (tpcb->state == FIN_WAIT_2) ||
 8006a2e:	2a08      	cmp	r2, #8
 8006a30:	d008      	beq.n	8006a44 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	f000 80cd 	beq.w	8006bd4 <lwip_netconn_do_close_internal+0x1f0>
 8006a3a:	8b73      	ldrh	r3, [r6, #26]
 8006a3c:	f013 0f10 	tst.w	r3, #16
 8006a40:	f000 80c8 	beq.w	8006bd4 <lwip_netconn_do_close_internal+0x1f0>
    tcp_arg(tpcb, NULL);
 8006a44:	2100      	movs	r1, #0
 8006a46:	4630      	mov	r0, r6
 8006a48:	f002 fa86 	bl	8008f58 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006a4c:	f896 a014 	ldrb.w	sl, [r6, #20]
 8006a50:	f1ba 0f01 	cmp.w	sl, #1
 8006a54:	f000 80d6 	beq.w	8006c04 <lwip_netconn_do_close_internal+0x220>
 8006a58:	f04f 0a01 	mov.w	sl, #1
 8006a5c:	e0bf      	b.n	8006bde <lwip_netconn_do_close_internal+0x1fa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006a5e:	4b6c      	ldr	r3, [pc, #432]	; (8006c10 <lwip_netconn_do_close_internal+0x22c>)
 8006a60:	f240 32a2 	movw	r2, #930	; 0x3a2
 8006a64:	496b      	ldr	r1, [pc, #428]	; (8006c14 <lwip_netconn_do_close_internal+0x230>)
 8006a66:	486c      	ldr	r0, [pc, #432]	; (8006c18 <lwip_netconn_do_close_internal+0x234>)
 8006a68:	f008 fa5c 	bl	800ef24 <iprintf>
 8006a6c:	e7c0      	b.n	80069f0 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006a6e:	4b68      	ldr	r3, [pc, #416]	; (8006c10 <lwip_netconn_do_close_internal+0x22c>)
 8006a70:	f240 32a3 	movw	r2, #931	; 0x3a3
 8006a74:	4969      	ldr	r1, [pc, #420]	; (8006c1c <lwip_netconn_do_close_internal+0x238>)
 8006a76:	4868      	ldr	r0, [pc, #416]	; (8006c18 <lwip_netconn_do_close_internal+0x234>)
 8006a78:	f008 fa54 	bl	800ef24 <iprintf>
 8006a7c:	e7bd      	b.n	80069fa <lwip_netconn_do_close_internal+0x16>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006a7e:	4b64      	ldr	r3, [pc, #400]	; (8006c10 <lwip_netconn_do_close_internal+0x22c>)
 8006a80:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8006a84:	4966      	ldr	r1, [pc, #408]	; (8006c20 <lwip_netconn_do_close_internal+0x23c>)
 8006a86:	4864      	ldr	r0, [pc, #400]	; (8006c18 <lwip_netconn_do_close_internal+0x234>)
 8006a88:	f008 fa4c 	bl	800ef24 <iprintf>
 8006a8c:	e7b8      	b.n	8006a00 <lwip_netconn_do_close_internal+0x1c>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006a8e:	4b60      	ldr	r3, [pc, #384]	; (8006c10 <lwip_netconn_do_close_internal+0x22c>)
 8006a90:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006a94:	4963      	ldr	r1, [pc, #396]	; (8006c24 <lwip_netconn_do_close_internal+0x240>)
 8006a96:	4860      	ldr	r0, [pc, #384]	; (8006c18 <lwip_netconn_do_close_internal+0x234>)
 8006a98:	f008 fa44 	bl	800ef24 <iprintf>
 8006a9c:	e7b3      	b.n	8006a06 <lwip_netconn_do_close_internal+0x22>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006a9e:	4b5c      	ldr	r3, [pc, #368]	; (8006c10 <lwip_netconn_do_close_internal+0x22c>)
 8006aa0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006aa4:	4960      	ldr	r1, [pc, #384]	; (8006c28 <lwip_netconn_do_close_internal+0x244>)
 8006aa6:	485c      	ldr	r0, [pc, #368]	; (8006c18 <lwip_netconn_do_close_internal+0x234>)
 8006aa8:	f008 fa3c 	bl	800ef24 <iprintf>
 8006aac:	e7ae      	b.n	8006a0c <lwip_netconn_do_close_internal+0x28>
      tcp_recv(tpcb, NULL);
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f002 fa55 	bl	8008f60 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006ab6:	2100      	movs	r1, #0
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f002 fa9f 	bl	8008ffc <tcp_accept>
 8006abe:	e092      	b.n	8006be6 <lwip_netconn_do_close_internal+0x202>
      tcp_sent(tpcb, NULL);
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f002 fa66 	bl	8008f94 <tcp_sent>
 8006ac8:	e091      	b.n	8006bee <lwip_netconn_do_close_internal+0x20a>
      tcp_poll(tpcb, NULL, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	4611      	mov	r1, r2
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f002 fa9a 	bl	8009008 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f002 fa76 	bl	8008fc8 <tcp_err>
      err = tcp_close(tpcb);
 8006adc:	4630      	mov	r0, r6
 8006ade:	f002 fe29 	bl	8009734 <tcp_close>
 8006ae2:	4605      	mov	r5, r0
    if (err == ERR_MEM) {
 8006ae4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006ae8:	d022      	beq.n	8006b30 <lwip_netconn_do_close_internal+0x14c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006aea:	6a23      	ldr	r3, [r4, #32]
 8006aec:	681e      	ldr	r6, [r3, #0]
 8006aee:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006af0:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 8006af2:	2300      	movs	r3, #0
 8006af4:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006af6:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006af8:	b9a5      	cbnz	r5, 8006b24 <lwip_netconn_do_close_internal+0x140>
      if (shut_close) {
 8006afa:	f1ba 0f00 	cmp.w	sl, #0
 8006afe:	d143      	bne.n	8006b88 <lwip_netconn_do_close_internal+0x1a4>
      if (shut_rx) {
 8006b00:	f1b8 0f00 	cmp.w	r8, #0
 8006b04:	d005      	beq.n	8006b12 <lwip_netconn_do_close_internal+0x12e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b08:	b163      	cbz	r3, 8006b24 <lwip_netconn_do_close_internal+0x140>
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4798      	blx	r3
      if (shut_tx) {
 8006b12:	f1b9 0f00 	cmp.w	r9, #0
 8006b16:	d005      	beq.n	8006b24 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b1a:	b11b      	cbz	r3, 8006b24 <lwip_netconn_do_close_internal+0x140>
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2102      	movs	r1, #2
 8006b20:	4620      	mov	r0, r4
 8006b22:	4798      	blx	r3
    if (delayed)
 8006b24:	2f00      	cmp	r7, #0
 8006b26:	d138      	bne.n	8006b9a <lwip_netconn_do_close_internal+0x1b6>
    return ERR_OK;
 8006b28:	2500      	movs	r5, #0
}
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006b30:	6a23      	ldr	r3, [r4, #32]
 8006b32:	7a5a      	ldrb	r2, [r3, #9]
 8006b34:	b19a      	cbz	r2, 8006b5e <lwip_netconn_do_close_internal+0x17a>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006b36:	7d33      	ldrb	r3, [r6, #20]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d033      	beq.n	8006ba4 <lwip_netconn_do_close_internal+0x1c0>
    if (shut_tx) {
 8006b3c:	f1b9 0f00 	cmp.w	r9, #0
 8006b40:	d138      	bne.n	8006bb4 <lwip_netconn_do_close_internal+0x1d0>
    tcp_poll(tpcb, poll_tcp, 1);
 8006b42:	2201      	movs	r2, #1
 8006b44:	4939      	ldr	r1, [pc, #228]	; (8006c2c <lwip_netconn_do_close_internal+0x248>)
 8006b46:	4630      	mov	r0, r6
 8006b48:	f002 fa5e 	bl	8009008 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006b4c:	4938      	ldr	r1, [pc, #224]	; (8006c30 <lwip_netconn_do_close_internal+0x24c>)
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f002 fa3a 	bl	8008fc8 <tcp_err>
    tcp_arg(tpcb, conn);
 8006b54:	4621      	mov	r1, r4
 8006b56:	4630      	mov	r0, r6
 8006b58:	f002 f9fe 	bl	8008f58 <tcp_arg>
  return err;
 8006b5c:	e7e5      	b.n	8006b2a <lwip_netconn_do_close_internal+0x146>
        if (shut_close) {
 8006b5e:	f1ba 0f00 	cmp.w	sl, #0
 8006b62:	d107      	bne.n	8006b74 <lwip_netconn_do_close_internal+0x190>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006b64:	681e      	ldr	r6, [r3, #0]
 8006b66:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006b68:	22ff      	movs	r2, #255	; 0xff
 8006b6a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006b70:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006b72:	e7d7      	b.n	8006b24 <lwip_netconn_do_close_internal+0x140>
          tcp_abort(tpcb);
 8006b74:	4630      	mov	r0, r6
 8006b76:	f002 fbcf 	bl	8009318 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006b7a:	6a22      	ldr	r2, [r4, #32]
 8006b7c:	6816      	ldr	r6, [r2, #0]
 8006b7e:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006b80:	2300      	movs	r3, #0
 8006b82:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 8006b84:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006b86:	7063      	strb	r3, [r4, #1]
        conn->pcb.tcp = NULL;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b8e:	b1b3      	cbz	r3, 8006bbe <lwip_netconn_do_close_internal+0x1da>
 8006b90:	2200      	movs	r2, #0
 8006b92:	2104      	movs	r1, #4
 8006b94:	4620      	mov	r0, r4
 8006b96:	4798      	blx	r3
 8006b98:	e7b2      	b.n	8006b00 <lwip_netconn_do_close_internal+0x11c>
      sys_sem_signal(op_completed_sem);
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	f007 ff8c 	bl	800eab8 <sys_sem_signal>
    return ERR_OK;
 8006ba0:	2500      	movs	r5, #0
 8006ba2:	e7c2      	b.n	8006b2a <lwip_netconn_do_close_internal+0x146>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006ba4:	4b1a      	ldr	r3, [pc, #104]	; (8006c10 <lwip_netconn_do_close_internal+0x22c>)
 8006ba6:	f240 4241 	movw	r2, #1089	; 0x441
 8006baa:	4922      	ldr	r1, [pc, #136]	; (8006c34 <lwip_netconn_do_close_internal+0x250>)
 8006bac:	481a      	ldr	r0, [pc, #104]	; (8006c18 <lwip_netconn_do_close_internal+0x234>)
 8006bae:	f008 f9b9 	bl	800ef24 <iprintf>
 8006bb2:	e7c3      	b.n	8006b3c <lwip_netconn_do_close_internal+0x158>
      tcp_sent(tpcb, sent_tcp);
 8006bb4:	4920      	ldr	r1, [pc, #128]	; (8006c38 <lwip_netconn_do_close_internal+0x254>)
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f002 f9ec 	bl	8008f94 <tcp_sent>
 8006bbc:	e7c1      	b.n	8006b42 <lwip_netconn_do_close_internal+0x15e>
      if (shut_rx) {
 8006bbe:	f1b8 0f00 	cmp.w	r8, #0
 8006bc2:	d1af      	bne.n	8006b24 <lwip_netconn_do_close_internal+0x140>
 8006bc4:	e7a5      	b.n	8006b12 <lwip_netconn_do_close_internal+0x12e>
    tcp_accept(tpcb, NULL);
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f002 fa17 	bl	8008ffc <tcp_accept>
 8006bce:	f04f 0a00 	mov.w	sl, #0
 8006bd2:	e010      	b.n	8006bf6 <lwip_netconn_do_close_internal+0x212>
  if (tpcb->state == LISTEN) {
 8006bd4:	7d33      	ldrb	r3, [r6, #20]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d0f5      	beq.n	8006bc6 <lwip_netconn_do_close_internal+0x1e2>
 8006bda:	f04f 0a00 	mov.w	sl, #0
    if (shut_rx) {
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	f47f af64 	bne.w	8006aae <lwip_netconn_do_close_internal+0xca>
    if (shut_tx) {
 8006be6:	f1b9 0f00 	cmp.w	r9, #0
 8006bea:	f47f af69 	bne.w	8006ac0 <lwip_netconn_do_close_internal+0xdc>
    if (shut_close) {
 8006bee:	f1ba 0f00 	cmp.w	sl, #0
 8006bf2:	f47f af6a 	bne.w	8006aca <lwip_netconn_do_close_internal+0xe6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006bf6:	464a      	mov	r2, r9
 8006bf8:	4641      	mov	r1, r8
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	f002 fe6c 	bl	80098d8 <tcp_shutdown>
 8006c00:	4605      	mov	r5, r0
 8006c02:	e76f      	b.n	8006ae4 <lwip_netconn_do_close_internal+0x100>
    tcp_accept(tpcb, NULL);
 8006c04:	2100      	movs	r1, #0
 8006c06:	4630      	mov	r0, r6
 8006c08:	f002 f9f8 	bl	8008ffc <tcp_accept>
  if (shut_close) {
 8006c0c:	e766      	b.n	8006adc <lwip_netconn_do_close_internal+0xf8>
 8006c0e:	bf00      	nop
 8006c10:	080100cc 	.word	0x080100cc
 8006c14:	0800ffd0 	.word	0x0800ffd0
 8006c18:	0800fe60 	.word	0x0800fe60
 8006c1c:	080102a4 	.word	0x080102a4
 8006c20:	080102c4 	.word	0x080102c4
 8006c24:	080102e8 	.word	0x080102e8
 8006c28:	08010184 	.word	0x08010184
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	080065d1 	.word	0x080065d1
 8006c34:	080102fc 	.word	0x080102fc
 8006c38:	08006cbd 	.word	0x08006cbd

08006c3c <poll_tcp>:
{
 8006c3c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006c3e:	4604      	mov	r4, r0
 8006c40:	b1f0      	cbz	r0, 8006c80 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8006c42:	7863      	ldrb	r3, [r4, #1]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d023      	beq.n	8006c90 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d026      	beq.n	8006c9a <poll_tcp+0x5e>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006c4c:	7f23      	ldrb	r3, [r4, #28]
 8006c4e:	f013 0f10 	tst.w	r3, #16
 8006c52:	d013      	beq.n	8006c7c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006c54:	6862      	ldr	r2, [r4, #4]
 8006c56:	b18a      	cbz	r2, 8006c7c <poll_tcp+0x40>
 8006c58:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8006c5c:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8006c60:	d30c      	bcc.n	8006c7c <poll_tcp+0x40>
 8006c62:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8006c66:	2a04      	cmp	r2, #4
 8006c68:	d808      	bhi.n	8006c7c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006c6a:	f023 0310 	bic.w	r3, r3, #16
 8006c6e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c72:	b11b      	cbz	r3, 8006c7c <poll_tcp+0x40>
 8006c74:	2200      	movs	r2, #0
 8006c76:	2102      	movs	r1, #2
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4798      	blx	r3
}
 8006c7c:	2000      	movs	r0, #0
 8006c7e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006c80:	4b0b      	ldr	r3, [pc, #44]	; (8006cb0 <poll_tcp+0x74>)
 8006c82:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006c86:	490b      	ldr	r1, [pc, #44]	; (8006cb4 <poll_tcp+0x78>)
 8006c88:	480b      	ldr	r0, [pc, #44]	; (8006cb8 <poll_tcp+0x7c>)
 8006c8a:	f008 f94b 	bl	800ef24 <iprintf>
 8006c8e:	e7d8      	b.n	8006c42 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006c90:	2101      	movs	r1, #1
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff fd4e 	bl	8006734 <lwip_netconn_do_writemore>
 8006c98:	e7d8      	b.n	8006c4c <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006c9a:	6a23      	ldr	r3, [r4, #32]
 8006c9c:	b11b      	cbz	r3, 8006ca6 <poll_tcp+0x6a>
 8006c9e:	7a5a      	ldrb	r2, [r3, #9]
 8006ca0:	b10a      	cbz	r2, 8006ca6 <poll_tcp+0x6a>
      conn->current_msg->msg.sd.polls_left--;
 8006ca2:	3a01      	subs	r2, #1
 8006ca4:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fe9b 	bl	80069e4 <lwip_netconn_do_close_internal>
 8006cae:	e7cd      	b.n	8006c4c <poll_tcp+0x10>
 8006cb0:	080100cc 	.word	0x080100cc
 8006cb4:	08010164 	.word	0x08010164
 8006cb8:	0800fe60 	.word	0x0800fe60

08006cbc <sent_tcp>:
{
 8006cbc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006cbe:	b1e0      	cbz	r0, 8006cfa <sent_tcp+0x3e>
 8006cc0:	4615      	mov	r5, r2
 8006cc2:	4604      	mov	r4, r0
    if (conn->state == NETCONN_WRITE) {
 8006cc4:	7843      	ldrb	r3, [r0, #1]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d020      	beq.n	8006d0c <sent_tcp+0x50>
    } else if (conn->state == NETCONN_CLOSE) {
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d023      	beq.n	8006d16 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006cce:	6863      	ldr	r3, [r4, #4]
 8006cd0:	b1d3      	cbz	r3, 8006d08 <sent_tcp+0x4c>
 8006cd2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006cd6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006cda:	d315      	bcc.n	8006d08 <sent_tcp+0x4c>
 8006cdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006ce0:	2b04      	cmp	r3, #4
 8006ce2:	d811      	bhi.n	8006d08 <sent_tcp+0x4c>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006ce4:	7f23      	ldrb	r3, [r4, #28]
 8006ce6:	f023 0310 	bic.w	r3, r3, #16
 8006cea:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cee:	b15b      	cbz	r3, 8006d08 <sent_tcp+0x4c>
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	2102      	movs	r1, #2
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	4798      	blx	r3
  return ERR_OK;
 8006cf8:	e006      	b.n	8006d08 <sent_tcp+0x4c>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <sent_tcp+0x64>)
 8006cfc:	f240 1293 	movw	r2, #403	; 0x193
 8006d00:	4908      	ldr	r1, [pc, #32]	; (8006d24 <sent_tcp+0x68>)
 8006d02:	4809      	ldr	r0, [pc, #36]	; (8006d28 <sent_tcp+0x6c>)
 8006d04:	f008 f90e 	bl	800ef24 <iprintf>
}
 8006d08:	2000      	movs	r0, #0
 8006d0a:	bd38      	pop	{r3, r4, r5, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	4620      	mov	r0, r4
 8006d10:	f7ff fd10 	bl	8006734 <lwip_netconn_do_writemore>
 8006d14:	e7db      	b.n	8006cce <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006d16:	2101      	movs	r1, #1
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f7ff fe63 	bl	80069e4 <lwip_netconn_do_close_internal>
 8006d1e:	e7d6      	b.n	8006cce <sent_tcp+0x12>
 8006d20:	080100cc 	.word	0x080100cc
 8006d24:	08010164 	.word	0x08010164
 8006d28:	0800fe60 	.word	0x0800fe60

08006d2c <recv_tcp>:
{
 8006d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2e:	4604      	mov	r4, r0
 8006d30:	4615      	mov	r5, r2
 8006d32:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006d34:	460f      	mov	r7, r1
 8006d36:	b329      	cbz	r1, 8006d84 <recv_tcp+0x58>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006d38:	b364      	cbz	r4, 8006d94 <recv_tcp+0x68>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006d3a:	2e00      	cmp	r6, #0
 8006d3c:	d151      	bne.n	8006de2 <recv_tcp+0xb6>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8006d3e:	6863      	ldr	r3, [r4, #4]
 8006d40:	42bb      	cmp	r3, r7
 8006d42:	d006      	beq.n	8006d52 <recv_tcp+0x26>
 8006d44:	4b2b      	ldr	r3, [pc, #172]	; (8006df4 <recv_tcp+0xc8>)
 8006d46:	f240 1235 	movw	r2, #309	; 0x135
 8006d4a:	492b      	ldr	r1, [pc, #172]	; (8006df8 <recv_tcp+0xcc>)
 8006d4c:	482b      	ldr	r0, [pc, #172]	; (8006dfc <recv_tcp+0xd0>)
 8006d4e:	f008 f8e9 	bl	800ef24 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006d52:	f104 0610 	add.w	r6, r4, #16
 8006d56:	4630      	mov	r0, r6
 8006d58:	f007 fe72 	bl	800ea40 <sys_mbox_valid>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d02e      	beq.n	8006dbe <recv_tcp+0x92>
  if (p != NULL) {
 8006d60:	2d00      	cmp	r5, #0
 8006d62:	d036      	beq.n	8006dd2 <recv_tcp+0xa6>
    len = p->tot_len;
 8006d64:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006d66:	4629      	mov	r1, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f007 fe2d 	bl	800e9c8 <sys_mbox_trypost>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	2800      	cmp	r0, #0
 8006d72:	d133      	bne.n	8006ddc <recv_tcp+0xb0>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006d74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d76:	b11b      	cbz	r3, 8006d80 <recv_tcp+0x54>
 8006d78:	463a      	mov	r2, r7
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	4798      	blx	r3
}
 8006d80:	4628      	mov	r0, r5
 8006d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006d84:	4b1b      	ldr	r3, [pc, #108]	; (8006df4 <recv_tcp+0xc8>)
 8006d86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d8a:	491d      	ldr	r1, [pc, #116]	; (8006e00 <recv_tcp+0xd4>)
 8006d8c:	481b      	ldr	r0, [pc, #108]	; (8006dfc <recv_tcp+0xd0>)
 8006d8e:	f008 f8c9 	bl	800ef24 <iprintf>
 8006d92:	e7d1      	b.n	8006d38 <recv_tcp+0xc>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006d94:	4b17      	ldr	r3, [pc, #92]	; (8006df4 <recv_tcp+0xc8>)
 8006d96:	f240 122d 	movw	r2, #301	; 0x12d
 8006d9a:	491a      	ldr	r1, [pc, #104]	; (8006e04 <recv_tcp+0xd8>)
 8006d9c:	4817      	ldr	r0, [pc, #92]	; (8006dfc <recv_tcp+0xd0>)
 8006d9e:	f008 f8c1 	bl	800ef24 <iprintf>
    return ERR_VAL;
 8006da2:	f06f 0505 	mvn.w	r5, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006da6:	2e00      	cmp	r6, #0
 8006da8:	d0ea      	beq.n	8006d80 <recv_tcp+0x54>
 8006daa:	4b12      	ldr	r3, [pc, #72]	; (8006df4 <recv_tcp+0xc8>)
 8006dac:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006db0:	4915      	ldr	r1, [pc, #84]	; (8006e08 <recv_tcp+0xdc>)
 8006db2:	4812      	ldr	r0, [pc, #72]	; (8006dfc <recv_tcp+0xd0>)
 8006db4:	f008 f8b6 	bl	800ef24 <iprintf>
    return ERR_VAL;
 8006db8:	f06f 0505 	mvn.w	r5, #5
 8006dbc:	e7e0      	b.n	8006d80 <recv_tcp+0x54>
    if (p != NULL) {
 8006dbe:	b15d      	cbz	r5, 8006dd8 <recv_tcp+0xac>
      tcp_recved(pcb, p->tot_len);
 8006dc0:	8929      	ldrh	r1, [r5, #8]
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f002 f850 	bl	8008e68 <tcp_recved>
      pbuf_free(p);
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f001 fbcf 	bl	800856c <pbuf_free>
    return ERR_OK;
 8006dce:	2500      	movs	r5, #0
 8006dd0:	e7d6      	b.n	8006d80 <recv_tcp+0x54>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8006dd2:	4d0e      	ldr	r5, [pc, #56]	; (8006e0c <recv_tcp+0xe0>)
    len = 0;
 8006dd4:	2700      	movs	r7, #0
 8006dd6:	e7c6      	b.n	8006d66 <recv_tcp+0x3a>
    return ERR_OK;
 8006dd8:	2500      	movs	r5, #0
 8006dda:	e7d1      	b.n	8006d80 <recv_tcp+0x54>
    return ERR_MEM;
 8006ddc:	f04f 35ff 	mov.w	r5, #4294967295
 8006de0:	e7ce      	b.n	8006d80 <recv_tcp+0x54>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006de2:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <recv_tcp+0xc8>)
 8006de4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006de8:	4907      	ldr	r1, [pc, #28]	; (8006e08 <recv_tcp+0xdc>)
 8006dea:	4804      	ldr	r0, [pc, #16]	; (8006dfc <recv_tcp+0xd0>)
 8006dec:	f008 f89a 	bl	800ef24 <iprintf>
  if (conn == NULL) {
 8006df0:	e7a5      	b.n	8006d3e <recv_tcp+0x12>
 8006df2:	bf00      	nop
 8006df4:	080100cc 	.word	0x080100cc
 8006df8:	08010364 	.word	0x08010364
 8006dfc:	0800fe60 	.word	0x0800fe60
 8006e00:	08010320 	.word	0x08010320
 8006e04:	08010344 	.word	0x08010344
 8006e08:	08010384 	.word	0x08010384
 8006e0c:	080104ed 	.word	0x080104ed

08006e10 <lwip_netconn_is_err_msg>:
{
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8006e14:	460d      	mov	r5, r1
 8006e16:	b169      	cbz	r1, 8006e34 <lwip_netconn_is_err_msg+0x24>
  if (msg == &netconn_aborted) {
 8006e18:	4b0e      	ldr	r3, [pc, #56]	; (8006e54 <lwip_netconn_is_err_msg+0x44>)
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d011      	beq.n	8006e42 <lwip_netconn_is_err_msg+0x32>
  } else if (msg == &netconn_reset) {
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <lwip_netconn_is_err_msg+0x48>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	d012      	beq.n	8006e4a <lwip_netconn_is_err_msg+0x3a>
  } else if (msg == &netconn_closed) {
 8006e24:	4b0d      	ldr	r3, [pc, #52]	; (8006e5c <lwip_netconn_is_err_msg+0x4c>)
 8006e26:	429c      	cmp	r4, r3
    *err = ERR_CLSD;
 8006e28:	bf03      	ittte	eq
 8006e2a:	23f1      	moveq	r3, #241	; 0xf1
 8006e2c:	702b      	strbeq	r3, [r5, #0]
    return 1;
 8006e2e:	2001      	moveq	r0, #1
  return 0;
 8006e30:	2000      	movne	r0, #0
}
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8006e34:	4b0a      	ldr	r3, [pc, #40]	; (8006e60 <lwip_netconn_is_err_msg+0x50>)
 8006e36:	2285      	movs	r2, #133	; 0x85
 8006e38:	490a      	ldr	r1, [pc, #40]	; (8006e64 <lwip_netconn_is_err_msg+0x54>)
 8006e3a:	480b      	ldr	r0, [pc, #44]	; (8006e68 <lwip_netconn_is_err_msg+0x58>)
 8006e3c:	f008 f872 	bl	800ef24 <iprintf>
 8006e40:	e7ea      	b.n	8006e18 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_ABRT;
 8006e42:	23f3      	movs	r3, #243	; 0xf3
 8006e44:	702b      	strb	r3, [r5, #0]
    return 1;
 8006e46:	2001      	movs	r0, #1
 8006e48:	e7f3      	b.n	8006e32 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_RST;
 8006e4a:	23f2      	movs	r3, #242	; 0xf2
 8006e4c:	702b      	strb	r3, [r5, #0]
    return 1;
 8006e4e:	2001      	movs	r0, #1
 8006e50:	e7ef      	b.n	8006e32 <lwip_netconn_is_err_msg+0x22>
 8006e52:	bf00      	nop
 8006e54:	080104ec 	.word	0x080104ec
 8006e58:	080104ee 	.word	0x080104ee
 8006e5c:	080104ed 	.word	0x080104ed
 8006e60:	080100cc 	.word	0x080100cc
 8006e64:	0801039c 	.word	0x0801039c
 8006e68:	0800fe60 	.word	0x0800fe60

08006e6c <lwip_netconn_do_newconn>:
{
 8006e6c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006e72:	6805      	ldr	r5, [r0, #0]
 8006e74:	686b      	ldr	r3, [r5, #4]
 8006e76:	b103      	cbz	r3, 8006e7a <lwip_netconn_do_newconn+0xe>
}
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
 8006e7a:	4604      	mov	r4, r0
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006e7c:	782b      	ldrb	r3, [r5, #0]
 8006e7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d019      	beq.n	8006eba <lwip_netconn_do_newconn+0x4e>
 8006e86:	2b20      	cmp	r3, #32
 8006e88:	d122      	bne.n	8006ed0 <lwip_netconn_do_newconn+0x64>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006e8a:	2000      	movs	r0, #0
 8006e8c:	f006 f978 	bl	800d180 <udp_new_ip_type>
 8006e90:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	b16a      	cbz	r2, 8006eb4 <lwip_netconn_do_newconn+0x48>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006e9c:	bf04      	itt	eq
 8006e9e:	2301      	moveq	r3, #1
 8006ea0:	7413      	strbeq	r3, [r2, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	490c      	ldr	r1, [pc, #48]	; (8006ed8 <lwip_netconn_do_newconn+0x6c>)
 8006ea6:	6850      	ldr	r0, [r2, #4]
 8006ea8:	f006 f920 	bl	800d0ec <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8006eac:	6823      	ldr	r3, [r4, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d1e1      	bne.n	8006e78 <lwip_netconn_do_newconn+0xc>
    msg->err = ERR_MEM;
 8006eb4:	23ff      	movs	r3, #255	; 0xff
 8006eb6:	7123      	strb	r3, [r4, #4]
}
 8006eb8:	e7de      	b.n	8006e78 <lwip_netconn_do_newconn+0xc>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f002 fb70 	bl	80095a0 <tcp_new_ip_type>
 8006ec0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006ec2:	6820      	ldr	r0, [r4, #0]
 8006ec4:	6843      	ldr	r3, [r0, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d0f4      	beq.n	8006eb4 <lwip_netconn_do_newconn+0x48>
        setup_tcp(msg->conn);
 8006eca:	f7ff fb61 	bl	8006590 <setup_tcp>
 8006ece:	e7ed      	b.n	8006eac <lwip_netconn_do_newconn+0x40>
      msg->err = ERR_VAL;
 8006ed0:	23fa      	movs	r3, #250	; 0xfa
 8006ed2:	7103      	strb	r3, [r0, #4]
      return;
 8006ed4:	e7d0      	b.n	8006e78 <lwip_netconn_do_newconn+0xc>
 8006ed6:	bf00      	nop
 8006ed8:	080064d1 	.word	0x080064d1

08006edc <netconn_alloc>:
{
 8006edc:	b570      	push	{r4, r5, r6, lr}
 8006ede:	4605      	mov	r5, r0
 8006ee0:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006ee2:	2007      	movs	r0, #7
 8006ee4:	f001 f850 	bl	8007f88 <memp_malloc>
  if (conn == NULL) {
 8006ee8:	4604      	mov	r4, r0
 8006eea:	b378      	cbz	r0, 8006f4c <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 8006eec:	2300      	movs	r3, #0
 8006eee:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8006ef0:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8006ef2:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8006ef4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8006ef8:	2d10      	cmp	r5, #16
 8006efa:	d001      	beq.n	8006f00 <netconn_alloc+0x24>
 8006efc:	2d20      	cmp	r5, #32
 8006efe:	d119      	bne.n	8006f34 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006f00:	f104 0510 	add.w	r5, r4, #16
 8006f04:	2106      	movs	r1, #6
 8006f06:	4628      	mov	r0, r5
 8006f08:	f007 fd48 	bl	800e99c <sys_mbox_new>
 8006f0c:	b9c8      	cbnz	r0, 8006f42 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006f0e:	2100      	movs	r1, #0
 8006f10:	f104 000c 	add.w	r0, r4, #12
 8006f14:	f007 fd9c 	bl	800ea50 <sys_sem_new>
 8006f18:	b9d0      	cbnz	r0, 8006f50 <netconn_alloc+0x74>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006f1a:	f104 0014 	add.w	r0, r4, #20
 8006f1e:	f007 fd94 	bl	800ea4a <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8006f22:	2300      	movs	r3, #0
 8006f24:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2a:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8006f2c:	6266      	str	r6, [r4, #36]	; 0x24
  conn->current_msg  = NULL;
 8006f2e:	6223      	str	r3, [r4, #32]
  conn->flags = init_flags;
 8006f30:	7723      	strb	r3, [r4, #28]
  return conn;
 8006f32:	e00b      	b.n	8006f4c <netconn_alloc+0x70>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006f34:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <netconn_alloc+0x7c>)
 8006f36:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006f3a:	4908      	ldr	r1, [pc, #32]	; (8006f5c <netconn_alloc+0x80>)
 8006f3c:	4808      	ldr	r0, [pc, #32]	; (8006f60 <netconn_alloc+0x84>)
 8006f3e:	f007 fff1 	bl	800ef24 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8006f42:	4621      	mov	r1, r4
 8006f44:	2007      	movs	r0, #7
 8006f46:	f001 f84f 	bl	8007fe8 <memp_free>
  return NULL;
 8006f4a:	2400      	movs	r4, #0
}
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	bd70      	pop	{r4, r5, r6, pc}
    sys_mbox_free(&conn->recvmbox);
 8006f50:	4628      	mov	r0, r5
 8006f52:	f007 fd30 	bl	800e9b6 <sys_mbox_free>
    goto free_and_return;
 8006f56:	e7f4      	b.n	8006f42 <netconn_alloc+0x66>
 8006f58:	080100cc 	.word	0x080100cc
 8006f5c:	080103a8 	.word	0x080103a8
 8006f60:	0800fe60 	.word	0x0800fe60

08006f64 <netconn_free>:
{
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006f68:	6843      	ldr	r3, [r0, #4]
 8006f6a:	b133      	cbz	r3, 8006f7a <netconn_free+0x16>
 8006f6c:	4b16      	ldr	r3, [pc, #88]	; (8006fc8 <netconn_free+0x64>)
 8006f6e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006f72:	4916      	ldr	r1, [pc, #88]	; (8006fcc <netconn_free+0x68>)
 8006f74:	4816      	ldr	r0, [pc, #88]	; (8006fd0 <netconn_free+0x6c>)
 8006f76:	f007 ffd5 	bl	800ef24 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006f7a:	f104 0010 	add.w	r0, r4, #16
 8006f7e:	f007 fd5f 	bl	800ea40 <sys_mbox_valid>
 8006f82:	b988      	cbnz	r0, 8006fa8 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006f84:	f104 0014 	add.w	r0, r4, #20
 8006f88:	f007 fd5a 	bl	800ea40 <sys_mbox_valid>
 8006f8c:	b9a0      	cbnz	r0, 8006fb8 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8006f8e:	f104 050c 	add.w	r5, r4, #12
 8006f92:	4628      	mov	r0, r5
 8006f94:	f007 fd95 	bl	800eac2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006f98:	4628      	mov	r0, r5
 8006f9a:	f007 fd9c 	bl	800ead6 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	2007      	movs	r0, #7
 8006fa2:	f001 f821 	bl	8007fe8 <memp_free>
}
 8006fa6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006fa8:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <netconn_free+0x64>)
 8006faa:	f240 3223 	movw	r2, #803	; 0x323
 8006fae:	4909      	ldr	r1, [pc, #36]	; (8006fd4 <netconn_free+0x70>)
 8006fb0:	4807      	ldr	r0, [pc, #28]	; (8006fd0 <netconn_free+0x6c>)
 8006fb2:	f007 ffb7 	bl	800ef24 <iprintf>
 8006fb6:	e7e5      	b.n	8006f84 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <netconn_free+0x64>)
 8006fba:	f240 3226 	movw	r2, #806	; 0x326
 8006fbe:	4906      	ldr	r1, [pc, #24]	; (8006fd8 <netconn_free+0x74>)
 8006fc0:	4803      	ldr	r0, [pc, #12]	; (8006fd0 <netconn_free+0x6c>)
 8006fc2:	f007 ffaf 	bl	800ef24 <iprintf>
 8006fc6:	e7e2      	b.n	8006f8e <netconn_free+0x2a>
 8006fc8:	080100cc 	.word	0x080100cc
 8006fcc:	080103d0 	.word	0x080103d0
 8006fd0:	0800fe60 	.word	0x0800fe60
 8006fd4:	08010400 	.word	0x08010400
 8006fd8:	0801043c 	.word	0x0801043c

08006fdc <netconn_drain>:
{
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006fe2:	f100 0510 	add.w	r5, r0, #16
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f007 fd2a 	bl	800ea40 <sys_mbox_valid>
 8006fec:	b968      	cbnz	r0, 800700a <netconn_drain+0x2e>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006fee:	3414      	adds	r4, #20
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f007 fd25 	bl	800ea40 <sys_mbox_valid>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d044      	beq.n	8007084 <netconn_drain+0xa8>
            newconn->pcb.tcp = NULL;
 8006ffa:	2600      	movs	r6, #0
 8006ffc:	e023      	b.n	8007046 <netconn_drain+0x6a>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006ffe:	f10d 0103 	add.w	r1, sp, #3
 8007002:	9801      	ldr	r0, [sp, #4]
 8007004:	f7ff ff04 	bl	8006e10 <lwip_netconn_is_err_msg>
 8007008:	b178      	cbz	r0, 800702a <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800700a:	a901      	add	r1, sp, #4
 800700c:	4628      	mov	r0, r5
 800700e:	f007 fd0c 	bl	800ea2a <sys_arch_mbox_tryfetch>
 8007012:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007016:	d00c      	beq.n	8007032 <netconn_drain+0x56>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007018:	7823      	ldrb	r3, [r4, #0]
 800701a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800701e:	2b10      	cmp	r3, #16
 8007020:	d0ed      	beq.n	8006ffe <netconn_drain+0x22>
          netbuf_delete((struct netbuf *)mem);
 8007022:	9801      	ldr	r0, [sp, #4]
 8007024:	f000 fac2 	bl	80075ac <netbuf_delete>
 8007028:	e7ef      	b.n	800700a <netconn_drain+0x2e>
            pbuf_free((struct pbuf *)mem);
 800702a:	9801      	ldr	r0, [sp, #4]
 800702c:	f001 fa9e 	bl	800856c <pbuf_free>
 8007030:	e7eb      	b.n	800700a <netconn_drain+0x2e>
    sys_mbox_free(&conn->recvmbox);
 8007032:	4628      	mov	r0, r5
 8007034:	f007 fcbf 	bl	800e9b6 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007038:	4628      	mov	r0, r5
 800703a:	f007 fd06 	bl	800ea4a <sys_mbox_set_invalid>
 800703e:	e7d6      	b.n	8006fee <netconn_drain+0x12>
          netconn_free(newconn);
 8007040:	4628      	mov	r0, r5
 8007042:	f7ff ff8f 	bl	8006f64 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007046:	a901      	add	r1, sp, #4
 8007048:	4620      	mov	r0, r4
 800704a:	f007 fcee 	bl	800ea2a <sys_arch_mbox_tryfetch>
 800704e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007052:	d011      	beq.n	8007078 <netconn_drain+0x9c>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007054:	f10d 0103 	add.w	r1, sp, #3
 8007058:	9801      	ldr	r0, [sp, #4]
 800705a:	f7ff fed9 	bl	8006e10 <lwip_netconn_is_err_msg>
 800705e:	2800      	cmp	r0, #0
 8007060:	d1f1      	bne.n	8007046 <netconn_drain+0x6a>
          struct netconn *newconn = (struct netconn *)mem;
 8007062:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8007064:	4628      	mov	r0, r5
 8007066:	f7ff ffb9 	bl	8006fdc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800706a:	6868      	ldr	r0, [r5, #4]
 800706c:	2800      	cmp	r0, #0
 800706e:	d0e7      	beq.n	8007040 <netconn_drain+0x64>
            tcp_abort(newconn->pcb.tcp);
 8007070:	f002 f952 	bl	8009318 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007074:	606e      	str	r6, [r5, #4]
 8007076:	e7e3      	b.n	8007040 <netconn_drain+0x64>
    sys_mbox_free(&conn->acceptmbox);
 8007078:	4620      	mov	r0, r4
 800707a:	f007 fc9c 	bl	800e9b6 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800707e:	4620      	mov	r0, r4
 8007080:	f007 fce3 	bl	800ea4a <sys_mbox_set_invalid>
}
 8007084:	b002      	add	sp, #8
 8007086:	bd70      	pop	{r4, r5, r6, pc}

08007088 <accept_function>:
{
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 800708a:	2800      	cmp	r0, #0
 800708c:	d06e      	beq.n	800716c <accept_function+0xe4>
 800708e:	460d      	mov	r5, r1
 8007090:	4616      	mov	r6, r2
 8007092:	4604      	mov	r4, r0
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8007094:	f100 0714 	add.w	r7, r0, #20
 8007098:	4638      	mov	r0, r7
 800709a:	f007 fcd1 	bl	800ea40 <sys_mbox_valid>
 800709e:	2800      	cmp	r0, #0
 80070a0:	d067      	beq.n	8007172 <accept_function+0xea>
  if (newpcb == NULL) {
 80070a2:	b1bd      	cbz	r5, 80070d4 <accept_function+0x4c>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80070a4:	bb36      	cbnz	r6, 80070f4 <accept_function+0x6c>
  newconn = netconn_alloc(conn->type, conn->callback);
 80070a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070a8:	7820      	ldrb	r0, [r4, #0]
 80070aa:	f7ff ff17 	bl	8006edc <netconn_alloc>
  if (newconn == NULL) {
 80070ae:	4606      	mov	r6, r0
 80070b0:	b340      	cbz	r0, 8007104 <accept_function+0x7c>
  newconn->pcb.tcp = newpcb;
 80070b2:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80070b4:	f7ff fa6c 	bl	8006590 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80070b8:	4631      	mov	r1, r6
 80070ba:	4638      	mov	r0, r7
 80070bc:	f007 fc84 	bl	800e9c8 <sys_mbox_trypost>
 80070c0:	4605      	mov	r5, r0
 80070c2:	bb68      	cbnz	r0, 8007120 <accept_function+0x98>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80070c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c6:	b11b      	cbz	r3, 80070d0 <accept_function+0x48>
 80070c8:	2200      	movs	r2, #0
 80070ca:	4611      	mov	r1, r2
 80070cc:	4620      	mov	r0, r4
 80070ce:	4798      	blx	r3
}
 80070d0:	4628      	mov	r0, r5
 80070d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80070d4:	492e      	ldr	r1, [pc, #184]	; (8007190 <accept_function+0x108>)
 80070d6:	4638      	mov	r0, r7
 80070d8:	f007 fc76 	bl	800e9c8 <sys_mbox_trypost>
 80070dc:	2800      	cmp	r0, #0
 80070de:	d14b      	bne.n	8007178 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80070e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d04b      	beq.n	800717e <accept_function+0xf6>
 80070e6:	2200      	movs	r2, #0
 80070e8:	4611      	mov	r1, r2
 80070ea:	4620      	mov	r0, r4
 80070ec:	4798      	blx	r3
    return ERR_VAL;
 80070ee:	f06f 0505 	mvn.w	r5, #5
 80070f2:	e7ed      	b.n	80070d0 <accept_function+0x48>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80070f4:	4b27      	ldr	r3, [pc, #156]	; (8007194 <accept_function+0x10c>)
 80070f6:	f240 222a 	movw	r2, #554	; 0x22a
 80070fa:	4927      	ldr	r1, [pc, #156]	; (8007198 <accept_function+0x110>)
 80070fc:	4827      	ldr	r0, [pc, #156]	; (800719c <accept_function+0x114>)
 80070fe:	f007 ff11 	bl	800ef24 <iprintf>
 8007102:	e7d0      	b.n	80070a6 <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007104:	4922      	ldr	r1, [pc, #136]	; (8007190 <accept_function+0x108>)
 8007106:	4638      	mov	r0, r7
 8007108:	f007 fc5e 	bl	800e9c8 <sys_mbox_trypost>
 800710c:	bbd0      	cbnz	r0, 8007184 <accept_function+0xfc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800710e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007110:	b3db      	cbz	r3, 800718a <accept_function+0x102>
 8007112:	2200      	movs	r2, #0
 8007114:	4611      	mov	r1, r2
 8007116:	4620      	mov	r0, r4
 8007118:	4798      	blx	r3
    return ERR_MEM;
 800711a:	f04f 35ff 	mov.w	r5, #4294967295
 800711e:	e7d7      	b.n	80070d0 <accept_function+0x48>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007120:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8007122:	2100      	movs	r1, #0
 8007124:	4620      	mov	r0, r4
 8007126:	f001 ff17 	bl	8008f58 <tcp_arg>
    tcp_recv(pcb, NULL);
 800712a:	2100      	movs	r1, #0
 800712c:	4620      	mov	r0, r4
 800712e:	f001 ff17 	bl	8008f60 <tcp_recv>
    tcp_sent(pcb, NULL);
 8007132:	2100      	movs	r1, #0
 8007134:	4620      	mov	r0, r4
 8007136:	f001 ff2d 	bl	8008f94 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800713a:	2200      	movs	r2, #0
 800713c:	4611      	mov	r1, r2
 800713e:	4620      	mov	r0, r4
 8007140:	f001 ff62 	bl	8009008 <tcp_poll>
    tcp_err(pcb, NULL);
 8007144:	2100      	movs	r1, #0
 8007146:	4620      	mov	r0, r4
 8007148:	f001 ff3e 	bl	8008fc8 <tcp_err>
    newconn->pcb.tcp = NULL;
 800714c:	2300      	movs	r3, #0
 800714e:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8007150:	f106 0410 	add.w	r4, r6, #16
 8007154:	4620      	mov	r0, r4
 8007156:	f007 fc2e 	bl	800e9b6 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800715a:	4620      	mov	r0, r4
 800715c:	f007 fc75 	bl	800ea4a <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007160:	4630      	mov	r0, r6
 8007162:	f7ff feff 	bl	8006f64 <netconn_free>
    return ERR_MEM;
 8007166:	f04f 35ff 	mov.w	r5, #4294967295
 800716a:	e7b1      	b.n	80070d0 <accept_function+0x48>
    return ERR_VAL;
 800716c:	f06f 0505 	mvn.w	r5, #5
 8007170:	e7ae      	b.n	80070d0 <accept_function+0x48>
    return ERR_VAL;
 8007172:	f06f 0505 	mvn.w	r5, #5
 8007176:	e7ab      	b.n	80070d0 <accept_function+0x48>
    return ERR_VAL;
 8007178:	f06f 0505 	mvn.w	r5, #5
 800717c:	e7a8      	b.n	80070d0 <accept_function+0x48>
 800717e:	f06f 0505 	mvn.w	r5, #5
 8007182:	e7a5      	b.n	80070d0 <accept_function+0x48>
    return ERR_MEM;
 8007184:	f04f 35ff 	mov.w	r5, #4294967295
 8007188:	e7a2      	b.n	80070d0 <accept_function+0x48>
 800718a:	f04f 35ff 	mov.w	r5, #4294967295
 800718e:	e79f      	b.n	80070d0 <accept_function+0x48>
 8007190:	080104ec 	.word	0x080104ec
 8007194:	080100cc 	.word	0x080100cc
 8007198:	08010478 	.word	0x08010478
 800719c:	0800fe60 	.word	0x0800fe60

080071a0 <lwip_netconn_do_delconn>:
{
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80071a4:	6803      	ldr	r3, [r0, #0]
 80071a6:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80071a8:	b1e5      	cbz	r5, 80071e4 <lwip_netconn_do_delconn+0x44>
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	d10a      	bne.n	80071ca <lwip_netconn_do_delconn+0x2a>
  if (((state != NETCONN_NONE) &&
 80071b4:	2d02      	cmp	r5, #2
 80071b6:	d015      	beq.n	80071e4 <lwip_netconn_do_delconn+0x44>
       (state != NETCONN_LISTEN) &&
 80071b8:	2d03      	cmp	r5, #3
 80071ba:	d00e      	beq.n	80071da <lwip_netconn_do_delconn+0x3a>
    msg->err = ERR_INPROGRESS;
 80071bc:	23fb      	movs	r3, #251	; 0xfb
 80071be:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80071c0:	6820      	ldr	r0, [r4, #0]
 80071c2:	300c      	adds	r0, #12
 80071c4:	f007 fc82 	bl	800eacc <sys_sem_valid>
}
 80071c8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80071ca:	4b37      	ldr	r3, [pc, #220]	; (80072a8 <lwip_netconn_do_delconn+0x108>)
 80071cc:	f240 425e 	movw	r2, #1118	; 0x45e
 80071d0:	4936      	ldr	r1, [pc, #216]	; (80072ac <lwip_netconn_do_delconn+0x10c>)
 80071d2:	4837      	ldr	r0, [pc, #220]	; (80072b0 <lwip_netconn_do_delconn+0x110>)
 80071d4:	f007 fea6 	bl	800ef24 <iprintf>
 80071d8:	e7ec      	b.n	80071b4 <lwip_netconn_do_delconn+0x14>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	7f1b      	ldrb	r3, [r3, #28]
 80071de:	f013 0f04 	tst.w	r3, #4
 80071e2:	d0eb      	beq.n	80071bc <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 80071e8:	6820      	ldr	r0, [r4, #0]
 80071ea:	f7ff fef7 	bl	8006fdc <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	6851      	ldr	r1, [r2, #4]
 80071f2:	b179      	cbz	r1, 8007214 <lwip_netconn_do_delconn+0x74>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80071f4:	7813      	ldrb	r3, [r2, #0]
 80071f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071fa:	2b10      	cmp	r3, #16
 80071fc:	d019      	beq.n	8007232 <lwip_netconn_do_delconn+0x92>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d105      	bne.n	800720e <lwip_netconn_do_delconn+0x6e>
          msg->conn->pcb.udp->recv_arg = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	61cb      	str	r3, [r1, #28]
          udp_remove(msg->conn->pcb.udp);
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	6858      	ldr	r0, [r3, #4]
 800720a:	f005 ff83 	bl	800d114 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	2200      	movs	r2, #0
 8007212:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d0d1      	beq.n	80071c0 <lwip_netconn_do_delconn+0x20>
 800721c:	2200      	movs	r2, #0
 800721e:	4611      	mov	r1, r2
 8007220:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007222:	6820      	ldr	r0, [r4, #0]
 8007224:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0ca      	beq.n	80071c0 <lwip_netconn_do_delconn+0x20>
 800722a:	2200      	movs	r2, #0
 800722c:	2102      	movs	r1, #2
 800722e:	4798      	blx	r3
 8007230:	e7c6      	b.n	80071c0 <lwip_netconn_do_delconn+0x20>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007232:	6a13      	ldr	r3, [r2, #32]
 8007234:	b133      	cbz	r3, 8007244 <lwip_netconn_do_delconn+0xa4>
 8007236:	4b1c      	ldr	r3, [pc, #112]	; (80072a8 <lwip_netconn_do_delconn+0x108>)
 8007238:	f240 4294 	movw	r2, #1172	; 0x494
 800723c:	491d      	ldr	r1, [pc, #116]	; (80072b4 <lwip_netconn_do_delconn+0x114>)
 800723e:	481c      	ldr	r0, [pc, #112]	; (80072b0 <lwip_netconn_do_delconn+0x110>)
 8007240:	f007 fe70 	bl	800ef24 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007244:	6823      	ldr	r3, [r4, #0]
 8007246:	2204      	movs	r2, #4
 8007248:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800724a:	2303      	movs	r3, #3
 800724c:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	621c      	str	r4, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007252:	2100      	movs	r1, #0
 8007254:	6820      	ldr	r0, [r4, #0]
 8007256:	f7ff fbc5 	bl	80069e4 <lwip_netconn_do_close_internal>
 800725a:	2800      	cmp	r0, #0
 800725c:	d0b4      	beq.n	80071c8 <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	785b      	ldrb	r3, [r3, #1]
 8007262:	2b04      	cmp	r3, #4
 8007264:	d117      	bne.n	8007296 <lwip_netconn_do_delconn+0xf6>
            UNLOCK_TCPIP_CORE();
 8007266:	4d14      	ldr	r5, [pc, #80]	; (80072b8 <lwip_netconn_do_delconn+0x118>)
 8007268:	4628      	mov	r0, r5
 800726a:	f007 fc53 	bl	800eb14 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800726e:	6820      	ldr	r0, [r4, #0]
 8007270:	2100      	movs	r1, #0
 8007272:	300c      	adds	r0, #12
 8007274:	f007 fc01 	bl	800ea7a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007278:	4628      	mov	r0, r5
 800727a:	f007 fc44 	bl	800eb06 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d0a0      	beq.n	80071c8 <lwip_netconn_do_delconn+0x28>
 8007286:	4b08      	ldr	r3, [pc, #32]	; (80072a8 <lwip_netconn_do_delconn+0x108>)
 8007288:	f240 429e 	movw	r2, #1182	; 0x49e
 800728c:	490b      	ldr	r1, [pc, #44]	; (80072bc <lwip_netconn_do_delconn+0x11c>)
 800728e:	4808      	ldr	r0, [pc, #32]	; (80072b0 <lwip_netconn_do_delconn+0x110>)
 8007290:	f007 fe48 	bl	800ef24 <iprintf>
 8007294:	e798      	b.n	80071c8 <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007296:	4b04      	ldr	r3, [pc, #16]	; (80072a8 <lwip_netconn_do_delconn+0x108>)
 8007298:	f240 429a 	movw	r2, #1178	; 0x49a
 800729c:	4907      	ldr	r1, [pc, #28]	; (80072bc <lwip_netconn_do_delconn+0x11c>)
 800729e:	4804      	ldr	r0, [pc, #16]	; (80072b0 <lwip_netconn_do_delconn+0x110>)
 80072a0:	f007 fe40 	bl	800ef24 <iprintf>
 80072a4:	e7df      	b.n	8007266 <lwip_netconn_do_delconn+0xc6>
 80072a6:	bf00      	nop
 80072a8:	080100cc 	.word	0x080100cc
 80072ac:	080104a0 	.word	0x080104a0
 80072b0:	0800fe60 	.word	0x0800fe60
 80072b4:	080104b4 	.word	0x080104b4
 80072b8:	2000aea8 	.word	0x2000aea8
 80072bc:	080104d0 	.word	0x080104d0

080072c0 <lwip_netconn_do_bind>:
{
 80072c0:	b510      	push	{r4, lr}
 80072c2:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80072c4:	6803      	ldr	r3, [r0, #0]
 80072c6:	6858      	ldr	r0, [r3, #4]
 80072c8:	b180      	cbz	r0, 80072ec <lwip_netconn_do_bind+0x2c>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072d0:	2b10      	cmp	r3, #16
 80072d2:	d006      	beq.n	80072e2 <lwip_netconn_do_bind+0x22>
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d10c      	bne.n	80072f2 <lwip_netconn_do_bind+0x32>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80072d8:	89a2      	ldrh	r2, [r4, #12]
 80072da:	68a1      	ldr	r1, [r4, #8]
 80072dc:	f005 fe80 	bl	800cfe0 <udp_bind>
        break;
 80072e0:	e009      	b.n	80072f6 <lwip_netconn_do_bind+0x36>
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80072e2:	89a2      	ldrh	r2, [r4, #12]
 80072e4:	68a1      	ldr	r1, [r4, #8]
 80072e6:	f001 fcb7 	bl	8008c58 <tcp_bind>
        break;
 80072ea:	e004      	b.n	80072f6 <lwip_netconn_do_bind+0x36>
    err = ERR_VAL;
 80072ec:	f06f 0005 	mvn.w	r0, #5
 80072f0:	e001      	b.n	80072f6 <lwip_netconn_do_bind+0x36>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80072f2:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 80072f6:	7120      	strb	r0, [r4, #4]
}
 80072f8:	bd10      	pop	{r4, pc}
	...

080072fc <lwip_netconn_do_listen>:
{
 80072fc:	b530      	push	{r4, r5, lr}
 80072fe:	b083      	sub	sp, #12
 8007300:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007302:	6803      	ldr	r3, [r0, #0]
 8007304:	6858      	ldr	r0, [r3, #4]
 8007306:	2800      	cmp	r0, #0
 8007308:	d05b      	beq.n	80073c2 <lwip_netconn_do_listen+0xc6>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800730a:	781a      	ldrb	r2, [r3, #0]
 800730c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007310:	2a10      	cmp	r2, #16
 8007312:	d007      	beq.n	8007324 <lwip_netconn_do_listen+0x28>
      err = ERR_ARG;
 8007314:	23f0      	movs	r3, #240	; 0xf0
 8007316:	f88d 3007 	strb.w	r3, [sp, #7]
  msg->err = err;
 800731a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800731e:	7123      	strb	r3, [r4, #4]
}
 8007320:	b003      	add	sp, #12
 8007322:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8007324:	785b      	ldrb	r3, [r3, #1]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d144      	bne.n	80073b4 <lwip_netconn_do_listen+0xb8>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800732a:	7d03      	ldrb	r3, [r0, #20]
 800732c:	b11b      	cbz	r3, 8007336 <lwip_netconn_do_listen+0x3a>
          err = ERR_VAL;
 800732e:	23fa      	movs	r3, #250	; 0xfa
 8007330:	f88d 3007 	strb.w	r3, [sp, #7]
 8007334:	e7f1      	b.n	800731a <lwip_netconn_do_listen+0x1e>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007336:	f10d 0207 	add.w	r2, sp, #7
 800733a:	21ff      	movs	r1, #255	; 0xff
 800733c:	f001 fcf0 	bl	8008d20 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8007340:	4605      	mov	r5, r0
 8007342:	2800      	cmp	r0, #0
 8007344:	d0e9      	beq.n	800731a <lwip_netconn_do_listen+0x1e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8007346:	6820      	ldr	r0, [r4, #0]
 8007348:	3010      	adds	r0, #16
 800734a:	f007 fb79 	bl	800ea40 <sys_mbox_valid>
 800734e:	b9c8      	cbnz	r0, 8007384 <lwip_netconn_do_listen+0x88>
            err = ERR_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	3014      	adds	r0, #20
 800735a:	f007 fb71 	bl	800ea40 <sys_mbox_valid>
 800735e:	b1d0      	cbz	r0, 8007396 <lwip_netconn_do_listen+0x9a>
            if (err == ERR_OK) {
 8007360:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007364:	b9fb      	cbnz	r3, 80073a6 <lwip_netconn_do_listen+0xaa>
              msg->conn->state = NETCONN_LISTEN;
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	2202      	movs	r2, #2
 800736a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	605d      	str	r5, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007370:	6821      	ldr	r1, [r4, #0]
 8007372:	6848      	ldr	r0, [r1, #4]
 8007374:	f001 fdf0 	bl	8008f58 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007378:	6823      	ldr	r3, [r4, #0]
 800737a:	4914      	ldr	r1, [pc, #80]	; (80073cc <lwip_netconn_do_listen+0xd0>)
 800737c:	6858      	ldr	r0, [r3, #4]
 800737e:	f001 fe3d 	bl	8008ffc <tcp_accept>
 8007382:	e7ca      	b.n	800731a <lwip_netconn_do_listen+0x1e>
              sys_mbox_free(&msg->conn->recvmbox);
 8007384:	6820      	ldr	r0, [r4, #0]
 8007386:	3010      	adds	r0, #16
 8007388:	f007 fb15 	bl	800e9b6 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	3010      	adds	r0, #16
 8007390:	f007 fb5b 	bl	800ea4a <sys_mbox_set_invalid>
 8007394:	e7dc      	b.n	8007350 <lwip_netconn_do_listen+0x54>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8007396:	6820      	ldr	r0, [r4, #0]
 8007398:	2106      	movs	r1, #6
 800739a:	3014      	adds	r0, #20
 800739c:	f007 fafe 	bl	800e99c <sys_mbox_new>
 80073a0:	f88d 0007 	strb.w	r0, [sp, #7]
 80073a4:	e7dc      	b.n	8007360 <lwip_netconn_do_listen+0x64>
              tcp_close(lpcb);
 80073a6:	4628      	mov	r0, r5
 80073a8:	f002 f9c4 	bl	8009734 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	2200      	movs	r2, #0
 80073b0:	605a      	str	r2, [r3, #4]
 80073b2:	e7b2      	b.n	800731a <lwip_netconn_do_listen+0x1e>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80073b4:	2b02      	cmp	r3, #2
        err = ERR_OK;
 80073b6:	bf0c      	ite	eq
 80073b8:	2300      	moveq	r3, #0
        err = ERR_CONN;
 80073ba:	23f5      	movne	r3, #245	; 0xf5
 80073bc:	f88d 3007 	strb.w	r3, [sp, #7]
 80073c0:	e7ab      	b.n	800731a <lwip_netconn_do_listen+0x1e>
    err = ERR_CONN;
 80073c2:	23f5      	movs	r3, #245	; 0xf5
 80073c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80073c8:	e7a7      	b.n	800731a <lwip_netconn_do_listen+0x1e>
 80073ca:	bf00      	nop
 80073cc:	08007089 	.word	0x08007089

080073d0 <lwip_netconn_do_recv>:
{
 80073d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80073d2:	2300      	movs	r3, #0
 80073d4:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80073d6:	6803      	ldr	r3, [r0, #0]
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	b12a      	cbz	r2, 80073e8 <lwip_netconn_do_recv+0x18>
 80073dc:	4606      	mov	r6, r0
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d000      	beq.n	80073ea <lwip_netconn_do_recv+0x1a>
}
 80073e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 80073ea:	6884      	ldr	r4, [r0, #8]
 80073ec:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80073f0:	4625      	mov	r5, r4
 80073f2:	42bc      	cmp	r4, r7
 80073f4:	bf28      	it	cs
 80073f6:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 80073f8:	6833      	ldr	r3, [r6, #0]
 80073fa:	b2a9      	uxth	r1, r5
 80073fc:	6858      	ldr	r0, [r3, #4]
 80073fe:	f001 fd33 	bl	8008e68 <tcp_recved>
      } while (remaining != 0);
 8007402:	1b64      	subs	r4, r4, r5
 8007404:	d1f4      	bne.n	80073f0 <lwip_netconn_do_recv+0x20>
 8007406:	e7ef      	b.n	80073e8 <lwip_netconn_do_recv+0x18>

08007408 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800740c:	6800      	ldr	r0, [r0, #0]
 800740e:	f7fe feb3 	bl	8006178 <netconn_err>
  if (err == ERR_OK) {
 8007412:	4603      	mov	r3, r0
 8007414:	b938      	cbnz	r0, 8007426 <lwip_netconn_do_write+0x1e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	7813      	ldrb	r3, [r2, #0]
 800741a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800741e:	2b10      	cmp	r3, #16
 8007420:	d003      	beq.n	800742a <lwip_netconn_do_write+0x22>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8007422:	f06f 0305 	mvn.w	r3, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8007426:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8007428:	bd38      	pop	{r3, r4, r5, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800742a:	7853      	ldrb	r3, [r2, #1]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d144      	bne.n	80074ba <lwip_netconn_do_write+0xb2>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007430:	6853      	ldr	r3, [r2, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d044      	beq.n	80074c0 <lwip_netconn_do_write+0xb8>
        msg->conn->state = NETCONN_WRITE;
 8007436:	2301      	movs	r3, #1
 8007438:	7053      	strb	r3, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	b133      	cbz	r3, 800744e <lwip_netconn_do_write+0x46>
 8007440:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <lwip_netconn_do_write+0xc0>)
 8007442:	f240 7223 	movw	r2, #1827	; 0x723
 8007446:	4921      	ldr	r1, [pc, #132]	; (80074cc <lwip_netconn_do_write+0xc4>)
 8007448:	4821      	ldr	r0, [pc, #132]	; (80074d0 <lwip_netconn_do_write+0xc8>)
 800744a:	f007 fd6b 	bl	800ef24 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800744e:	6963      	ldr	r3, [r4, #20]
 8007450:	b31b      	cbz	r3, 800749a <lwip_netconn_do_write+0x92>
        msg->conn->current_msg = msg;
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	621c      	str	r4, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007456:	2100      	movs	r1, #0
 8007458:	6820      	ldr	r0, [r4, #0]
 800745a:	f7ff f96b 	bl	8006734 <lwip_netconn_do_writemore>
 800745e:	2800      	cmp	r0, #0
 8007460:	d0e2      	beq.n	8007428 <lwip_netconn_do_write+0x20>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d11f      	bne.n	80074aa <lwip_netconn_do_write+0xa2>
          UNLOCK_TCPIP_CORE();
 800746a:	4d1a      	ldr	r5, [pc, #104]	; (80074d4 <lwip_netconn_do_write+0xcc>)
 800746c:	4628      	mov	r0, r5
 800746e:	f007 fb51 	bl	800eb14 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007472:	6820      	ldr	r0, [r4, #0]
 8007474:	2100      	movs	r1, #0
 8007476:	300c      	adds	r0, #12
 8007478:	f007 faff 	bl	800ea7a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800747c:	4628      	mov	r0, r5
 800747e:	f007 fb42 	bl	800eb06 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	785b      	ldrb	r3, [r3, #1]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d1ce      	bne.n	8007428 <lwip_netconn_do_write+0x20>
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <lwip_netconn_do_write+0xc0>)
 800748c:	f240 722c 	movw	r2, #1836	; 0x72c
 8007490:	4911      	ldr	r1, [pc, #68]	; (80074d8 <lwip_netconn_do_write+0xd0>)
 8007492:	480f      	ldr	r0, [pc, #60]	; (80074d0 <lwip_netconn_do_write+0xc8>)
 8007494:	f007 fd46 	bl	800ef24 <iprintf>
 8007498:	e7c6      	b.n	8007428 <lwip_netconn_do_write+0x20>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800749a:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <lwip_netconn_do_write+0xc0>)
 800749c:	f240 7224 	movw	r2, #1828	; 0x724
 80074a0:	490e      	ldr	r1, [pc, #56]	; (80074dc <lwip_netconn_do_write+0xd4>)
 80074a2:	480b      	ldr	r0, [pc, #44]	; (80074d0 <lwip_netconn_do_write+0xc8>)
 80074a4:	f007 fd3e 	bl	800ef24 <iprintf>
 80074a8:	e7d3      	b.n	8007452 <lwip_netconn_do_write+0x4a>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80074aa:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <lwip_netconn_do_write+0xc0>)
 80074ac:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80074b0:	4909      	ldr	r1, [pc, #36]	; (80074d8 <lwip_netconn_do_write+0xd0>)
 80074b2:	4807      	ldr	r0, [pc, #28]	; (80074d0 <lwip_netconn_do_write+0xc8>)
 80074b4:	f007 fd36 	bl	800ef24 <iprintf>
 80074b8:	e7d7      	b.n	800746a <lwip_netconn_do_write+0x62>
        err = ERR_INPROGRESS;
 80074ba:	f06f 0304 	mvn.w	r3, #4
 80074be:	e7b2      	b.n	8007426 <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 80074c0:	f06f 030a 	mvn.w	r3, #10
 80074c4:	e7af      	b.n	8007426 <lwip_netconn_do_write+0x1e>
 80074c6:	bf00      	nop
 80074c8:	080100cc 	.word	0x080100cc
 80074cc:	080104b4 	.word	0x080104b4
 80074d0:	0800fe60 	.word	0x0800fe60
 80074d4:	2000aea8 	.word	0x2000aea8
 80074d8:	080104d0 	.word	0x080104d0
 80074dc:	080104d8 	.word	0x080104d8

080074e0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80074e4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80074e6:	6843      	ldr	r3, [r0, #4]
 80074e8:	b123      	cbz	r3, 80074f4 <lwip_netconn_do_close+0x14>
 80074ea:	7803      	ldrb	r3, [r0, #0]
 80074ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d002      	beq.n	80074fa <lwip_netconn_do_close+0x1a>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80074f4:	23f5      	movs	r3, #245	; 0xf5
 80074f6:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
  enum netconn_state state = msg->conn->state;
 80074fa:	7843      	ldrb	r3, [r0, #1]
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80074fc:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80074fe:	2a03      	cmp	r2, #3
 8007500:	d001      	beq.n	8007506 <lwip_netconn_do_close+0x26>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007502:	2b02      	cmp	r3, #2
 8007504:	d0f6      	beq.n	80074f4 <lwip_netconn_do_close+0x14>
    if (state == NETCONN_CONNECT) {
 8007506:	2b03      	cmp	r3, #3
 8007508:	d004      	beq.n	8007514 <lwip_netconn_do_close+0x34>
    } else if (state == NETCONN_WRITE) {
 800750a:	2b01      	cmp	r3, #1
 800750c:	d105      	bne.n	800751a <lwip_netconn_do_close+0x3a>
      msg->err = ERR_INPROGRESS;
 800750e:	23fb      	movs	r3, #251	; 0xfb
 8007510:	7123      	strb	r3, [r4, #4]
 8007512:	e7f1      	b.n	80074f8 <lwip_netconn_do_close+0x18>
      msg->err = ERR_CONN;
 8007514:	23f5      	movs	r3, #245	; 0xf5
 8007516:	7123      	strb	r3, [r4, #4]
 8007518:	e7ee      	b.n	80074f8 <lwip_netconn_do_close+0x18>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800751a:	f012 0f01 	tst.w	r2, #1
 800751e:	d130      	bne.n	8007582 <lwip_netconn_do_close+0xa2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	b133      	cbz	r3, 8007534 <lwip_netconn_do_close+0x54>
 8007526:	4b1c      	ldr	r3, [pc, #112]	; (8007598 <lwip_netconn_do_close+0xb8>)
 8007528:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800752c:	491b      	ldr	r1, [pc, #108]	; (800759c <lwip_netconn_do_close+0xbc>)
 800752e:	481c      	ldr	r0, [pc, #112]	; (80075a0 <lwip_netconn_do_close+0xc0>)
 8007530:	f007 fcf8 	bl	800ef24 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	2204      	movs	r2, #4
 8007538:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	621c      	str	r4, [r3, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800753e:	2100      	movs	r1, #0
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	f7ff fa4f 	bl	80069e4 <lwip_netconn_do_close_internal>
 8007546:	2800      	cmp	r0, #0
 8007548:	d0d6      	beq.n	80074f8 <lwip_netconn_do_close+0x18>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b04      	cmp	r3, #4
 8007550:	d11a      	bne.n	8007588 <lwip_netconn_do_close+0xa8>
        UNLOCK_TCPIP_CORE();
 8007552:	4d14      	ldr	r5, [pc, #80]	; (80075a4 <lwip_netconn_do_close+0xc4>)
 8007554:	4628      	mov	r0, r5
 8007556:	f007 fadd 	bl	800eb14 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800755a:	6820      	ldr	r0, [r4, #0]
 800755c:	2100      	movs	r1, #0
 800755e:	300c      	adds	r0, #12
 8007560:	f007 fa8b 	bl	800ea7a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007564:	4628      	mov	r0, r5
 8007566:	f007 face 	bl	800eb06 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800756a:	6823      	ldr	r3, [r4, #0]
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0c2      	beq.n	80074f8 <lwip_netconn_do_close+0x18>
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <lwip_netconn_do_close+0xb8>)
 8007574:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007578:	490b      	ldr	r1, [pc, #44]	; (80075a8 <lwip_netconn_do_close+0xc8>)
 800757a:	4809      	ldr	r0, [pc, #36]	; (80075a0 <lwip_netconn_do_close+0xc0>)
 800757c:	f007 fcd2 	bl	800ef24 <iprintf>
 8007580:	e7ba      	b.n	80074f8 <lwip_netconn_do_close+0x18>
        netconn_drain(msg->conn);
 8007582:	f7ff fd2b 	bl	8006fdc <netconn_drain>
 8007586:	e7cb      	b.n	8007520 <lwip_netconn_do_close+0x40>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <lwip_netconn_do_close+0xb8>)
 800758a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800758e:	4906      	ldr	r1, [pc, #24]	; (80075a8 <lwip_netconn_do_close+0xc8>)
 8007590:	4803      	ldr	r0, [pc, #12]	; (80075a0 <lwip_netconn_do_close+0xc0>)
 8007592:	f007 fcc7 	bl	800ef24 <iprintf>
 8007596:	e7dc      	b.n	8007552 <lwip_netconn_do_close+0x72>
 8007598:	080100cc 	.word	0x080100cc
 800759c:	080104b4 	.word	0x080104b4
 80075a0:	0800fe60 	.word	0x0800fe60
 80075a4:	2000aea8 	.word	0x2000aea8
 80075a8:	080104d0 	.word	0x080104d0

080075ac <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80075ac:	b168      	cbz	r0, 80075ca <netbuf_delete+0x1e>
{
 80075ae:	b510      	push	{r4, lr}
 80075b0:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80075b2:	6800      	ldr	r0, [r0, #0]
 80075b4:	b120      	cbz	r0, 80075c0 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80075b6:	f000 ffd9 	bl	800856c <pbuf_free>
      buf->p = buf->ptr = NULL;
 80075ba:	2300      	movs	r3, #0
 80075bc:	6063      	str	r3, [r4, #4]
 80075be:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80075c0:	4621      	mov	r1, r4
 80075c2:	2006      	movs	r0, #6
 80075c4:	f000 fd10 	bl	8007fe8 <memp_free>
  }
}
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	4770      	bx	lr

080075cc <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80075cc:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80075ce:	b158      	cbz	r0, 80075e8 <netbuf_data+0x1c>
 80075d0:	4603      	mov	r3, r0
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80075d2:	b191      	cbz	r1, 80075fa <netbuf_data+0x2e>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80075d4:	b1d2      	cbz	r2, 800760c <netbuf_data+0x40>

  if (buf->ptr == NULL) {
 80075d6:	6840      	ldr	r0, [r0, #4]
 80075d8:	b308      	cbz	r0, 800761e <netbuf_data+0x52>
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
 80075da:	6840      	ldr	r0, [r0, #4]
 80075dc:	6008      	str	r0, [r1, #0]
  *len = buf->ptr->len;
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	895b      	ldrh	r3, [r3, #10]
 80075e2:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 80075e4:	2000      	movs	r0, #0
}
 80075e6:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <netbuf_data+0x58>)
 80075ea:	22c6      	movs	r2, #198	; 0xc6
 80075ec:	490e      	ldr	r1, [pc, #56]	; (8007628 <netbuf_data+0x5c>)
 80075ee:	480f      	ldr	r0, [pc, #60]	; (800762c <netbuf_data+0x60>)
 80075f0:	f007 fc98 	bl	800ef24 <iprintf>
 80075f4:	f06f 000f 	mvn.w	r0, #15
 80075f8:	e7f5      	b.n	80075e6 <netbuf_data+0x1a>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80075fa:	4b0a      	ldr	r3, [pc, #40]	; (8007624 <netbuf_data+0x58>)
 80075fc:	22c7      	movs	r2, #199	; 0xc7
 80075fe:	490c      	ldr	r1, [pc, #48]	; (8007630 <netbuf_data+0x64>)
 8007600:	480a      	ldr	r0, [pc, #40]	; (800762c <netbuf_data+0x60>)
 8007602:	f007 fc8f 	bl	800ef24 <iprintf>
 8007606:	f06f 000f 	mvn.w	r0, #15
 800760a:	e7ec      	b.n	80075e6 <netbuf_data+0x1a>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800760c:	4b05      	ldr	r3, [pc, #20]	; (8007624 <netbuf_data+0x58>)
 800760e:	22c8      	movs	r2, #200	; 0xc8
 8007610:	4908      	ldr	r1, [pc, #32]	; (8007634 <netbuf_data+0x68>)
 8007612:	4806      	ldr	r0, [pc, #24]	; (800762c <netbuf_data+0x60>)
 8007614:	f007 fc86 	bl	800ef24 <iprintf>
 8007618:	f06f 000f 	mvn.w	r0, #15
 800761c:	e7e3      	b.n	80075e6 <netbuf_data+0x1a>
    return ERR_BUF;
 800761e:	f06f 0001 	mvn.w	r0, #1
 8007622:	e7e0      	b.n	80075e6 <netbuf_data+0x1a>
 8007624:	080104f0 	.word	0x080104f0
 8007628:	08010564 	.word	0x08010564
 800762c:	0800fe60 	.word	0x0800fe60
 8007630:	08010580 	.word	0x08010580
 8007634:	080105a0 	.word	0x080105a0

08007638 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007638:	b500      	push	{lr}
 800763a:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800763c:	4831      	ldr	r0, [pc, #196]	; (8007704 <tcpip_thread+0xcc>)
 800763e:	f007 fa62 	bl	800eb06 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <tcpip_thread+0xd0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	b113      	cbz	r3, 800764e <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8007648:	4a30      	ldr	r2, [pc, #192]	; (800770c <tcpip_thread+0xd4>)
 800764a:	6810      	ldr	r0, [r2, #0]
 800764c:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800764e:	4d2d      	ldr	r5, [pc, #180]	; (8007704 <tcpip_thread+0xcc>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007650:	4e2f      	ldr	r6, [pc, #188]	; (8007710 <tcpip_thread+0xd8>)
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
 8007652:	e01e      	b.n	8007692 <tcpip_thread+0x5a>
    UNLOCK_TCPIP_CORE();
 8007654:	4628      	mov	r0, r5
 8007656:	f007 fa5d 	bl	800eb14 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800765a:	2200      	movs	r2, #0
 800765c:	a901      	add	r1, sp, #4
 800765e:	4630      	mov	r0, r6
 8007660:	f007 f9c2 	bl	800e9e8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007664:	4628      	mov	r0, r5
 8007666:	f007 fa4e 	bl	800eb06 <sys_mutex_lock>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 800766a:	9c01      	ldr	r4, [sp, #4]
 800766c:	b34c      	cbz	r4, 80076c2 <tcpip_thread+0x8a>
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
  switch (msg->type) {
 800766e:	7823      	ldrb	r3, [r4, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d03b      	beq.n	80076ec <tcpip_thread+0xb4>
 8007674:	2b02      	cmp	r3, #2
 8007676:	d041      	beq.n	80076fc <tcpip_thread+0xc4>
 8007678:	b353      	cbz	r3, 80076d0 <tcpip_thread+0x98>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800767a:	4b26      	ldr	r3, [pc, #152]	; (8007714 <tcpip_thread+0xdc>)
 800767c:	22cf      	movs	r2, #207	; 0xcf
 800767e:	4926      	ldr	r1, [pc, #152]	; (8007718 <tcpip_thread+0xe0>)
 8007680:	4826      	ldr	r0, [pc, #152]	; (800771c <tcpip_thread+0xe4>)
 8007682:	f007 fc4f 	bl	800ef24 <iprintf>
      break;
 8007686:	e004      	b.n	8007692 <tcpip_thread+0x5a>
    sys_check_timeouts();
 8007688:	f005 fb66 	bl	800cd58 <sys_check_timeouts>
    goto again;
 800768c:	e001      	b.n	8007692 <tcpip_thread+0x5a>
    sys_check_timeouts();
 800768e:	f005 fb63 	bl	800cd58 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8007692:	f005 fb85 	bl	800cda0 <sys_timeouts_sleeptime>
 8007696:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007698:	f1b0 3fff 	cmp.w	r0, #4294967295
 800769c:	d0da      	beq.n	8007654 <tcpip_thread+0x1c>
  } else if (sleeptime == 0) {
 800769e:	2800      	cmp	r0, #0
 80076a0:	d0f2      	beq.n	8007688 <tcpip_thread+0x50>
  UNLOCK_TCPIP_CORE();
 80076a2:	4628      	mov	r0, r5
 80076a4:	f007 fa36 	bl	800eb14 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80076a8:	4622      	mov	r2, r4
 80076aa:	a901      	add	r1, sp, #4
 80076ac:	4630      	mov	r0, r6
 80076ae:	f007 f99b 	bl	800e9e8 <sys_arch_mbox_fetch>
 80076b2:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80076b4:	4628      	mov	r0, r5
 80076b6:	f007 fa26 	bl	800eb06 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80076ba:	f1b4 3fff 	cmp.w	r4, #4294967295
 80076be:	d0e6      	beq.n	800768e <tcpip_thread+0x56>
 80076c0:	e7d3      	b.n	800766a <tcpip_thread+0x32>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80076c2:	4b14      	ldr	r3, [pc, #80]	; (8007714 <tcpip_thread+0xdc>)
 80076c4:	2291      	movs	r2, #145	; 0x91
 80076c6:	4914      	ldr	r1, [pc, #80]	; (8007718 <tcpip_thread+0xe0>)
 80076c8:	4814      	ldr	r0, [pc, #80]	; (800771c <tcpip_thread+0xe4>)
 80076ca:	f007 fc2b 	bl	800ef24 <iprintf>
      continue;
 80076ce:	e7e0      	b.n	8007692 <tcpip_thread+0x5a>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80076d0:	68e3      	ldr	r3, [r4, #12]
 80076d2:	68a1      	ldr	r1, [r4, #8]
 80076d4:	6860      	ldr	r0, [r4, #4]
 80076d6:	4798      	blx	r3
 80076d8:	b920      	cbnz	r0, 80076e4 <tcpip_thread+0xac>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80076da:	4621      	mov	r1, r4
 80076dc:	2009      	movs	r0, #9
 80076de:	f000 fc83 	bl	8007fe8 <memp_free>
      break;
 80076e2:	e7d6      	b.n	8007692 <tcpip_thread+0x5a>
        pbuf_free(msg->msg.inp.p);
 80076e4:	6860      	ldr	r0, [r4, #4]
 80076e6:	f000 ff41 	bl	800856c <pbuf_free>
 80076ea:	e7f6      	b.n	80076da <tcpip_thread+0xa2>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80076ec:	6863      	ldr	r3, [r4, #4]
 80076ee:	68a0      	ldr	r0, [r4, #8]
 80076f0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80076f2:	4621      	mov	r1, r4
 80076f4:	2008      	movs	r0, #8
 80076f6:	f000 fc77 	bl	8007fe8 <memp_free>
      break;
 80076fa:	e7ca      	b.n	8007692 <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80076fc:	6863      	ldr	r3, [r4, #4]
 80076fe:	68a0      	ldr	r0, [r4, #8]
 8007700:	4798      	blx	r3
      break;
 8007702:	e7c6      	b.n	8007692 <tcpip_thread+0x5a>
 8007704:	2000aea8 	.word	0x2000aea8
 8007708:	2000aeac 	.word	0x2000aeac
 800770c:	2000aeb0 	.word	0x2000aeb0
 8007710:	2000aeb4 	.word	0x2000aeb4
 8007714:	080105bc 	.word	0x080105bc
 8007718:	080105ec 	.word	0x080105ec
 800771c:	0800fe60 	.word	0x0800fe60

08007720 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007722:	4607      	mov	r7, r0
 8007724:	460e      	mov	r6, r1
 8007726:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007728:	4812      	ldr	r0, [pc, #72]	; (8007774 <tcpip_inpkt+0x54>)
 800772a:	f007 f989 	bl	800ea40 <sys_mbox_valid>
 800772e:	b178      	cbz	r0, 8007750 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007730:	2009      	movs	r0, #9
 8007732:	f000 fc29 	bl	8007f88 <memp_malloc>
  if (msg == NULL) {
 8007736:	4604      	mov	r4, r0
 8007738:	b1c0      	cbz	r0, 800776c <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800773a:	2300      	movs	r3, #0
 800773c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 800773e:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8007740:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8007742:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007744:	4601      	mov	r1, r0
 8007746:	480b      	ldr	r0, [pc, #44]	; (8007774 <tcpip_inpkt+0x54>)
 8007748:	f007 f93e 	bl	800e9c8 <sys_mbox_trypost>
 800774c:	b938      	cbnz	r0, 800775e <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800774e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007750:	4b09      	ldr	r3, [pc, #36]	; (8007778 <tcpip_inpkt+0x58>)
 8007752:	22fc      	movs	r2, #252	; 0xfc
 8007754:	4909      	ldr	r1, [pc, #36]	; (800777c <tcpip_inpkt+0x5c>)
 8007756:	480a      	ldr	r0, [pc, #40]	; (8007780 <tcpip_inpkt+0x60>)
 8007758:	f007 fbe4 	bl	800ef24 <iprintf>
 800775c:	e7e8      	b.n	8007730 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800775e:	4621      	mov	r1, r4
 8007760:	2009      	movs	r0, #9
 8007762:	f000 fc41 	bl	8007fe8 <memp_free>
    return ERR_MEM;
 8007766:	f04f 30ff 	mov.w	r0, #4294967295
 800776a:	e7f0      	b.n	800774e <tcpip_inpkt+0x2e>
    return ERR_MEM;
 800776c:	f04f 30ff 	mov.w	r0, #4294967295
 8007770:	e7ed      	b.n	800774e <tcpip_inpkt+0x2e>
 8007772:	bf00      	nop
 8007774:	2000aeb4 	.word	0x2000aeb4
 8007778:	080105bc 	.word	0x080105bc
 800777c:	0801060c 	.word	0x0801060c
 8007780:	0800fe60 	.word	0x0800fe60

08007784 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007784:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007786:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800778a:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800778e:	bf14      	ite	ne
 8007790:	4a02      	ldrne	r2, [pc, #8]	; (800779c <tcpip_input+0x18>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007792:	4a03      	ldreq	r2, [pc, #12]	; (80077a0 <tcpip_input+0x1c>)
 8007794:	f7ff ffc4 	bl	8007720 <tcpip_inpkt>
}
 8007798:	bd08      	pop	{r3, pc}
 800779a:	bf00      	nop
 800779c:	0800e885 	.word	0x0800e885
 80077a0:	0800dcc1 	.word	0x0800dcc1

080077a4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	4606      	mov	r6, r0
 80077a8:	460d      	mov	r5, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80077aa:	4812      	ldr	r0, [pc, #72]	; (80077f4 <tcpip_try_callback+0x50>)
 80077ac:	f007 f948 	bl	800ea40 <sys_mbox_valid>
 80077b0:	b170      	cbz	r0, 80077d0 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80077b2:	2008      	movs	r0, #8
 80077b4:	f000 fbe8 	bl	8007f88 <memp_malloc>
  if (msg == NULL) {
 80077b8:	4604      	mov	r4, r0
 80077ba:	b1c0      	cbz	r0, 80077ee <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80077bc:	2301      	movs	r3, #1
 80077be:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80077c0:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80077c2:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80077c4:	4601      	mov	r1, r0
 80077c6:	480b      	ldr	r0, [pc, #44]	; (80077f4 <tcpip_try_callback+0x50>)
 80077c8:	f007 f8fe 	bl	800e9c8 <sys_mbox_trypost>
 80077cc:	b940      	cbnz	r0, 80077e0 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80077ce:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80077d0:	4b09      	ldr	r3, [pc, #36]	; (80077f8 <tcpip_try_callback+0x54>)
 80077d2:	f240 125d 	movw	r2, #349	; 0x15d
 80077d6:	4909      	ldr	r1, [pc, #36]	; (80077fc <tcpip_try_callback+0x58>)
 80077d8:	4809      	ldr	r0, [pc, #36]	; (8007800 <tcpip_try_callback+0x5c>)
 80077da:	f007 fba3 	bl	800ef24 <iprintf>
 80077de:	e7e8      	b.n	80077b2 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80077e0:	4621      	mov	r1, r4
 80077e2:	2008      	movs	r0, #8
 80077e4:	f000 fc00 	bl	8007fe8 <memp_free>
    return ERR_MEM;
 80077e8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ec:	e7ef      	b.n	80077ce <tcpip_try_callback+0x2a>
    return ERR_MEM;
 80077ee:	f04f 30ff 	mov.w	r0, #4294967295
 80077f2:	e7ec      	b.n	80077ce <tcpip_try_callback+0x2a>
 80077f4:	2000aeb4 	.word	0x2000aeb4
 80077f8:	080105bc 	.word	0x080105bc
 80077fc:	0801060c 	.word	0x0801060c
 8007800:	0800fe60 	.word	0x0800fe60

08007804 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	460d      	mov	r5, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800780a:	4e05      	ldr	r6, [pc, #20]	; (8007820 <tcpip_send_msg_wait_sem+0x1c>)
 800780c:	4630      	mov	r0, r6
 800780e:	f007 f97a 	bl	800eb06 <sys_mutex_lock>
  fn(apimsg);
 8007812:	4628      	mov	r0, r5
 8007814:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 8007816:	4630      	mov	r0, r6
 8007818:	f007 f97c 	bl	800eb14 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800781c:	2000      	movs	r0, #0
 800781e:	bd70      	pop	{r4, r5, r6, pc}
 8007820:	2000aea8 	.word	0x2000aea8

08007824 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007824:	b530      	push	{r4, r5, lr}
 8007826:	b083      	sub	sp, #12
 8007828:	4605      	mov	r5, r0
 800782a:	460c      	mov	r4, r1
  lwip_init();
 800782c:	f000 f870 	bl	8007910 <lwip_init>

  tcpip_init_done = initfunc;
 8007830:	4b13      	ldr	r3, [pc, #76]	; (8007880 <tcpip_init+0x5c>)
 8007832:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8007834:	4b13      	ldr	r3, [pc, #76]	; (8007884 <tcpip_init+0x60>)
 8007836:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007838:	2106      	movs	r1, #6
 800783a:	4813      	ldr	r0, [pc, #76]	; (8007888 <tcpip_init+0x64>)
 800783c:	f007 f8ae 	bl	800e99c <sys_mbox_new>
 8007840:	b970      	cbnz	r0, 8007860 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007842:	4812      	ldr	r0, [pc, #72]	; (800788c <tcpip_init+0x68>)
 8007844:	f007 f954 	bl	800eaf0 <sys_mutex_new>
 8007848:	b990      	cbnz	r0, 8007870 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800784a:	2318      	movs	r3, #24
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007852:	2200      	movs	r2, #0
 8007854:	490e      	ldr	r1, [pc, #56]	; (8007890 <tcpip_init+0x6c>)
 8007856:	480f      	ldr	r0, [pc, #60]	; (8007894 <tcpip_init+0x70>)
 8007858:	f007 f961 	bl	800eb1e <sys_thread_new>
}
 800785c:	b003      	add	sp, #12
 800785e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007860:	4b0d      	ldr	r3, [pc, #52]	; (8007898 <tcpip_init+0x74>)
 8007862:	f240 2261 	movw	r2, #609	; 0x261
 8007866:	490d      	ldr	r1, [pc, #52]	; (800789c <tcpip_init+0x78>)
 8007868:	480d      	ldr	r0, [pc, #52]	; (80078a0 <tcpip_init+0x7c>)
 800786a:	f007 fb5b 	bl	800ef24 <iprintf>
 800786e:	e7e8      	b.n	8007842 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007870:	4b09      	ldr	r3, [pc, #36]	; (8007898 <tcpip_init+0x74>)
 8007872:	f240 2265 	movw	r2, #613	; 0x265
 8007876:	490b      	ldr	r1, [pc, #44]	; (80078a4 <tcpip_init+0x80>)
 8007878:	4809      	ldr	r0, [pc, #36]	; (80078a0 <tcpip_init+0x7c>)
 800787a:	f007 fb53 	bl	800ef24 <iprintf>
 800787e:	e7e4      	b.n	800784a <tcpip_init+0x26>
 8007880:	2000aeac 	.word	0x2000aeac
 8007884:	2000aeb0 	.word	0x2000aeb0
 8007888:	2000aeb4 	.word	0x2000aeb4
 800788c:	2000aea8 	.word	0x2000aea8
 8007890:	08007639 	.word	0x08007639
 8007894:	08010664 	.word	0x08010664
 8007898:	080105bc 	.word	0x080105bc
 800789c:	0801061c 	.word	0x0801061c
 80078a0:	0800fe60 	.word	0x0800fe60
 80078a4:	08010640 	.word	0x08010640

080078a8 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80078a8:	b1c0      	cbz	r0, 80078dc <fs_open+0x34>
{
 80078aa:	b570      	push	{r4, r5, r6, lr}
 80078ac:	460d      	mov	r5, r1
 80078ae:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 80078b0:	b1b9      	cbz	r1, 80078e2 <fs_open+0x3a>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80078b2:	4c0d      	ldr	r4, [pc, #52]	; (80078e8 <fs_open+0x40>)
    if (!strcmp(name, (const char *)f->name)) {
 80078b4:	6861      	ldr	r1, [r4, #4]
 80078b6:	4628      	mov	r0, r5
 80078b8:	f7f8 fc9a 	bl	80001f0 <strcmp>
 80078bc:	b128      	cbz	r0, 80078ca <fs_open+0x22>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80078be:	6824      	ldr	r4, [r4, #0]
 80078c0:	2c00      	cmp	r4, #0
 80078c2:	d1f7      	bne.n	80078b4 <fs_open+0xc>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 80078c4:	f06f 0005 	mvn.w	r0, #5
 80078c8:	e007      	b.n	80078da <fs_open+0x32>
      file->data = (const char *)f->data;
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 80078ce:	68e3      	ldr	r3, [r4, #12]
 80078d0:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 80078d2:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 80078d4:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 80078d6:	7c23      	ldrb	r3, [r4, #16]
 80078d8:	7433      	strb	r3, [r6, #16]
}
 80078da:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80078dc:	f06f 000f 	mvn.w	r0, #15
}
 80078e0:	4770      	bx	lr
    return ERR_ARG;
 80078e2:	f06f 000f 	mvn.w	r0, #15
 80078e6:	e7f8      	b.n	80078da <fs_open+0x32>
 80078e8:	0801135c 	.word	0x0801135c

080078ec <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 80078ec:	4770      	bx	lr

080078ee <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 80078ee:	0a03      	lsrs	r3, r0, #8
 80078f0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80078f4:	b280      	uxth	r0, r0
 80078f6:	4770      	bx	lr

080078f8 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 80078f8:	0e03      	lsrs	r3, r0, #24
 80078fa:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80078fe:	0202      	lsls	r2, r0, #8
 8007900:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8007904:	4313      	orrs	r3, r2
 8007906:	0a00      	lsrs	r0, r0, #8
 8007908:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 800790c:	4318      	orrs	r0, r3
 800790e:	4770      	bx	lr

08007910 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007910:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8007912:	f007 f8e3 	bl	800eadc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8007916:	f000 f80b 	bl	8007930 <mem_init>
  memp_init();
 800791a:	f000 fb11 	bl	8007f40 <memp_init>
  pbuf_init();
  netif_init();
 800791e:	f000 fbdd 	bl	80080dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8007922:	f005 fa61 	bl	800cde8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8007926:	f001 f973 	bl	8008c10 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800792a:	f005 f9ff 	bl	800cd2c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800792e:	bd08      	pop	{r3, pc}

08007930 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007930:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007932:	4b13      	ldr	r3, [pc, #76]	; (8007980 <mem_init+0x50>)
 8007934:	f023 0303 	bic.w	r3, r3, #3
 8007938:	4a12      	ldr	r2, [pc, #72]	; (8007984 <mem_init+0x54>)
 800793a:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 800793c:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8007940:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 8007942:	2200      	movs	r2, #0
 8007944:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8007946:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8007948:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800794a:	4a0f      	ldr	r2, [pc, #60]	; (8007988 <mem_init+0x58>)
 800794c:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 800794e:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8007952:	2001      	movs	r0, #1
 8007954:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 8007958:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 800795c:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007960:	4a0a      	ldr	r2, [pc, #40]	; (800798c <mem_init+0x5c>)
 8007962:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007964:	480a      	ldr	r0, [pc, #40]	; (8007990 <mem_init+0x60>)
 8007966:	f007 f8c3 	bl	800eaf0 <sys_mutex_new>
 800796a:	b900      	cbnz	r0, 800796e <mem_init+0x3e>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800796c:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <mem_init+0x64>)
 8007970:	f240 221f 	movw	r2, #543	; 0x21f
 8007974:	4908      	ldr	r1, [pc, #32]	; (8007998 <mem_init+0x68>)
 8007976:	4809      	ldr	r0, [pc, #36]	; (800799c <mem_init+0x6c>)
 8007978:	f007 fad4 	bl	800ef24 <iprintf>
}
 800797c:	e7f6      	b.n	800796c <mem_init+0x3c>
 800797e:	bf00      	nop
 8007980:	2000aee3 	.word	0x2000aee3
 8007984:	2000aed8 	.word	0x2000aed8
 8007988:	2000aedc 	.word	0x2000aedc
 800798c:	2000aed0 	.word	0x2000aed0
 8007990:	2000aed4 	.word	0x2000aed4
 8007994:	08011370 	.word	0x08011370
 8007998:	080113a0 	.word	0x080113a0
 800799c:	0800fe60 	.word	0x0800fe60

080079a0 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f000 80da 	beq.w	8007b5a <mem_free+0x1ba>
{
 80079a6:	b538      	push	{r3, r4, r5, lr}
 80079a8:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80079aa:	f010 0f03 	tst.w	r0, #3
 80079ae:	d117      	bne.n	80079e0 <mem_free+0x40>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80079b0:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80079b4:	4b69      	ldr	r3, [pc, #420]	; (8007b5c <mem_free+0x1bc>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	42ab      	cmp	r3, r5
 80079ba:	d805      	bhi.n	80079c8 <mem_free+0x28>
 80079bc:	f100 030c 	add.w	r3, r0, #12
 80079c0:	4a67      	ldr	r2, [pc, #412]	; (8007b60 <mem_free+0x1c0>)
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d217      	bcs.n	80079f8 <mem_free+0x58>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80079c8:	4b66      	ldr	r3, [pc, #408]	; (8007b64 <mem_free+0x1c4>)
 80079ca:	f240 227f 	movw	r2, #639	; 0x27f
 80079ce:	4966      	ldr	r1, [pc, #408]	; (8007b68 <mem_free+0x1c8>)
 80079d0:	4866      	ldr	r0, [pc, #408]	; (8007b6c <mem_free+0x1cc>)
 80079d2:	f007 faa7 	bl	800ef24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80079d6:	f007 f8b9 	bl	800eb4c <sys_arch_protect>
 80079da:	f007 f8c3 	bl	800eb64 <sys_arch_unprotect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80079de:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80079e0:	4b60      	ldr	r3, [pc, #384]	; (8007b64 <mem_free+0x1c4>)
 80079e2:	f240 2273 	movw	r2, #627	; 0x273
 80079e6:	4962      	ldr	r1, [pc, #392]	; (8007b70 <mem_free+0x1d0>)
 80079e8:	4860      	ldr	r0, [pc, #384]	; (8007b6c <mem_free+0x1cc>)
 80079ea:	f007 fa9b 	bl	800ef24 <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 80079ee:	f007 f8ad 	bl	800eb4c <sys_arch_protect>
 80079f2:	f007 f8b7 	bl	800eb64 <sys_arch_unprotect>
    return;
 80079f6:	e7f2      	b.n	80079de <mem_free+0x3e>
  LWIP_MEM_FREE_PROTECT();
 80079f8:	485e      	ldr	r0, [pc, #376]	; (8007b74 <mem_free+0x1d4>)
 80079fa:	f007 f884 	bl	800eb06 <sys_mutex_lock>
  if (!mem->used) {
 80079fe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d062      	beq.n	8007acc <mem_free+0x12c>
  nmem = ptr_to_mem(mem->next);
 8007a06:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007a0a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007a0e:	f200 8095 	bhi.w	8007b3c <mem_free+0x19c>
  pmem = ptr_to_mem(mem->prev);
 8007a12:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007a16:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8007a1a:	f200 808f 	bhi.w	8007b3c <mem_free+0x19c>
  return (mem_size_t)((u8_t *)mem - ram);
 8007a1e:	4a4f      	ldr	r2, [pc, #316]	; (8007b5c <mem_free+0x1bc>)
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	1aa9      	subs	r1, r5, r2
 8007a24:	b289      	uxth	r1, r1
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007a26:	4288      	cmp	r0, r1
 8007a28:	d003      	beq.n	8007a32 <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007a2a:	5a10      	ldrh	r0, [r2, r0]
 8007a2c:	4288      	cmp	r0, r1
 8007a2e:	f040 8085 	bne.w	8007b3c <mem_free+0x19c>
  return (struct mem *)(void *)&ram[ptr];
 8007a32:	4413      	add	r3, r2
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007a34:	484a      	ldr	r0, [pc, #296]	; (8007b60 <mem_free+0x1c0>)
 8007a36:	6800      	ldr	r0, [r0, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	d002      	beq.n	8007a42 <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007a3c:	885b      	ldrh	r3, [r3, #2]
 8007a3e:	428b      	cmp	r3, r1
 8007a40:	d17c      	bne.n	8007b3c <mem_free+0x19c>
  mem->used = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007a48:	4b4b      	ldr	r3, [pc, #300]	; (8007b78 <mem_free+0x1d8>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	42ab      	cmp	r3, r5
 8007a4e:	d901      	bls.n	8007a54 <mem_free+0xb4>
    lfree = mem;
 8007a50:	4b49      	ldr	r3, [pc, #292]	; (8007b78 <mem_free+0x1d8>)
 8007a52:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007a54:	4295      	cmp	r5, r2
 8007a56:	d348      	bcc.n	8007aea <mem_free+0x14a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007a58:	4285      	cmp	r5, r0
 8007a5a:	d251      	bcs.n	8007b00 <mem_free+0x160>
  return (struct mem *)(void *)&ram[ptr];
 8007a5c:	4b3f      	ldr	r3, [pc, #252]	; (8007b5c <mem_free+0x1bc>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007a64:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007a66:	4295      	cmp	r5, r2
 8007a68:	d015      	beq.n	8007a96 <mem_free+0xf6>
 8007a6a:	7910      	ldrb	r0, [r2, #4]
 8007a6c:	b998      	cbnz	r0, 8007a96 <mem_free+0xf6>
 8007a6e:	483c      	ldr	r0, [pc, #240]	; (8007b60 <mem_free+0x1c0>)
 8007a70:	6800      	ldr	r0, [r0, #0]
 8007a72:	4290      	cmp	r0, r2
 8007a74:	d00f      	beq.n	8007a96 <mem_free+0xf6>
    if (lfree == nmem) {
 8007a76:	4840      	ldr	r0, [pc, #256]	; (8007b78 <mem_free+0x1d8>)
 8007a78:	6800      	ldr	r0, [r0, #0]
 8007a7a:	4290      	cmp	r0, r2
      lfree = mem;
 8007a7c:	bf04      	itt	eq
 8007a7e:	4a3e      	ldreq	r2, [pc, #248]	; (8007b78 <mem_free+0x1d8>)
 8007a80:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 8007a82:	5a5a      	ldrh	r2, [r3, r1]
 8007a84:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007a88:	5a5a      	ldrh	r2, [r3, r1]
 8007a8a:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007a8e:	d002      	beq.n	8007a96 <mem_free+0xf6>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007a90:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007a92:	1ae9      	subs	r1, r5, r3
 8007a94:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8007a96:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007a9a:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007a9c:	4295      	cmp	r5, r2
 8007a9e:	d011      	beq.n	8007ac4 <mem_free+0x124>
 8007aa0:	7910      	ldrb	r0, [r2, #4]
 8007aa2:	b978      	cbnz	r0, 8007ac4 <mem_free+0x124>
    if (lfree == mem) {
 8007aa4:	4834      	ldr	r0, [pc, #208]	; (8007b78 <mem_free+0x1d8>)
 8007aa6:	6800      	ldr	r0, [r0, #0]
 8007aa8:	4285      	cmp	r5, r0
      lfree = pmem;
 8007aaa:	bf04      	itt	eq
 8007aac:	4832      	ldreq	r0, [pc, #200]	; (8007b78 <mem_free+0x1d8>)
 8007aae:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 8007ab0:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007ab4:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007ab6:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007aba:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007abe:	bf1c      	itt	ne
 8007ac0:	189b      	addne	r3, r3, r2
 8007ac2:	8059      	strhne	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007ac4:	482b      	ldr	r0, [pc, #172]	; (8007b74 <mem_free+0x1d4>)
 8007ac6:	f007 f825 	bl	800eb14 <sys_mutex_unlock>
 8007aca:	e788      	b.n	80079de <mem_free+0x3e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007acc:	4b25      	ldr	r3, [pc, #148]	; (8007b64 <mem_free+0x1c4>)
 8007ace:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007ad2:	492a      	ldr	r1, [pc, #168]	; (8007b7c <mem_free+0x1dc>)
 8007ad4:	4825      	ldr	r0, [pc, #148]	; (8007b6c <mem_free+0x1cc>)
 8007ad6:	f007 fa25 	bl	800ef24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007ada:	4826      	ldr	r0, [pc, #152]	; (8007b74 <mem_free+0x1d4>)
 8007adc:	f007 f81a 	bl	800eb14 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007ae0:	f007 f834 	bl	800eb4c <sys_arch_protect>
 8007ae4:	f007 f83e 	bl	800eb64 <sys_arch_unprotect>
    return;
 8007ae8:	e779      	b.n	80079de <mem_free+0x3e>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007aea:	4b1e      	ldr	r3, [pc, #120]	; (8007b64 <mem_free+0x1c4>)
 8007aec:	f240 12df 	movw	r2, #479	; 0x1df
 8007af0:	4923      	ldr	r1, [pc, #140]	; (8007b80 <mem_free+0x1e0>)
 8007af2:	481e      	ldr	r0, [pc, #120]	; (8007b6c <mem_free+0x1cc>)
 8007af4:	f007 fa16 	bl	800ef24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007af8:	4b19      	ldr	r3, [pc, #100]	; (8007b60 <mem_free+0x1c0>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	429d      	cmp	r5, r3
 8007afe:	d306      	bcc.n	8007b0e <mem_free+0x16e>
 8007b00:	4b18      	ldr	r3, [pc, #96]	; (8007b64 <mem_free+0x1c4>)
 8007b02:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007b06:	491f      	ldr	r1, [pc, #124]	; (8007b84 <mem_free+0x1e4>)
 8007b08:	4818      	ldr	r0, [pc, #96]	; (8007b6c <mem_free+0x1cc>)
 8007b0a:	f007 fa0b 	bl	800ef24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007b0e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007b12:	b133      	cbz	r3, 8007b22 <mem_free+0x182>
 8007b14:	4b13      	ldr	r3, [pc, #76]	; (8007b64 <mem_free+0x1c4>)
 8007b16:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007b1a:	491b      	ldr	r1, [pc, #108]	; (8007b88 <mem_free+0x1e8>)
 8007b1c:	4813      	ldr	r0, [pc, #76]	; (8007b6c <mem_free+0x1cc>)
 8007b1e:	f007 fa01 	bl	800ef24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007b22:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007b26:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007b2a:	d997      	bls.n	8007a5c <mem_free+0xbc>
 8007b2c:	4b0d      	ldr	r3, [pc, #52]	; (8007b64 <mem_free+0x1c4>)
 8007b2e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007b32:	4916      	ldr	r1, [pc, #88]	; (8007b8c <mem_free+0x1ec>)
 8007b34:	480d      	ldr	r0, [pc, #52]	; (8007b6c <mem_free+0x1cc>)
 8007b36:	f007 f9f5 	bl	800ef24 <iprintf>
 8007b3a:	e78f      	b.n	8007a5c <mem_free+0xbc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007b3c:	4b09      	ldr	r3, [pc, #36]	; (8007b64 <mem_free+0x1c4>)
 8007b3e:	f240 2295 	movw	r2, #661	; 0x295
 8007b42:	4913      	ldr	r1, [pc, #76]	; (8007b90 <mem_free+0x1f0>)
 8007b44:	4809      	ldr	r0, [pc, #36]	; (8007b6c <mem_free+0x1cc>)
 8007b46:	f007 f9ed 	bl	800ef24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007b4a:	480a      	ldr	r0, [pc, #40]	; (8007b74 <mem_free+0x1d4>)
 8007b4c:	f006 ffe2 	bl	800eb14 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007b50:	f006 fffc 	bl	800eb4c <sys_arch_protect>
 8007b54:	f007 f806 	bl	800eb64 <sys_arch_unprotect>
    return;
 8007b58:	e741      	b.n	80079de <mem_free+0x3e>
 8007b5a:	4770      	bx	lr
 8007b5c:	2000aed8 	.word	0x2000aed8
 8007b60:	2000aedc 	.word	0x2000aedc
 8007b64:	08011370 	.word	0x08011370
 8007b68:	080113e0 	.word	0x080113e0
 8007b6c:	0800fe60 	.word	0x0800fe60
 8007b70:	080113bc 	.word	0x080113bc
 8007b74:	2000aed4 	.word	0x2000aed4
 8007b78:	2000aed0 	.word	0x2000aed0
 8007b7c:	080113fc 	.word	0x080113fc
 8007b80:	08011424 	.word	0x08011424
 8007b84:	0801143c 	.word	0x0801143c
 8007b88:	08011458 	.word	0x08011458
 8007b8c:	08011474 	.word	0x08011474
 8007b90:	080114a0 	.word	0x080114a0

08007b94 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b98:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007b9a:	1ccc      	adds	r4, r1, #3
 8007b9c:	f024 0403 	bic.w	r4, r4, #3
 8007ba0:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007ba2:	2c0b      	cmp	r4, #11
 8007ba4:	d904      	bls.n	8007bb0 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007ba6:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8007baa:	d902      	bls.n	8007bb2 <mem_trim+0x1e>
    return NULL;
 8007bac:	2000      	movs	r0, #0
 8007bae:	e01f      	b.n	8007bf0 <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 8007bb0:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007bb2:	42a1      	cmp	r1, r4
 8007bb4:	f200 809a 	bhi.w	8007cec <mem_trim+0x158>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007bb8:	4b4e      	ldr	r3, [pc, #312]	; (8007cf4 <mem_trim+0x160>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	42ab      	cmp	r3, r5
 8007bbe:	d803      	bhi.n	8007bc8 <mem_trim+0x34>
 8007bc0:	4a4d      	ldr	r2, [pc, #308]	; (8007cf8 <mem_trim+0x164>)
 8007bc2:	6812      	ldr	r2, [r2, #0]
 8007bc4:	42aa      	cmp	r2, r5
 8007bc6:	d815      	bhi.n	8007bf4 <mem_trim+0x60>
 8007bc8:	4b4c      	ldr	r3, [pc, #304]	; (8007cfc <mem_trim+0x168>)
 8007bca:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007bce:	494c      	ldr	r1, [pc, #304]	; (8007d00 <mem_trim+0x16c>)
 8007bd0:	484c      	ldr	r0, [pc, #304]	; (8007d04 <mem_trim+0x170>)
 8007bd2:	f007 f9a7 	bl	800ef24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007bd6:	4b47      	ldr	r3, [pc, #284]	; (8007cf4 <mem_trim+0x160>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	42ab      	cmp	r3, r5
 8007bdc:	d803      	bhi.n	8007be6 <mem_trim+0x52>
 8007bde:	4a46      	ldr	r2, [pc, #280]	; (8007cf8 <mem_trim+0x164>)
 8007be0:	6812      	ldr	r2, [r2, #0]
 8007be2:	42aa      	cmp	r2, r5
 8007be4:	d806      	bhi.n	8007bf4 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007be6:	f006 ffb1 	bl	800eb4c <sys_arch_protect>
 8007bea:	f006 ffbb 	bl	800eb64 <sys_arch_unprotect>
    return rmem;
 8007bee:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007bf4:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007bf8:	1afb      	subs	r3, r7, r3
 8007bfa:	b29f      	uxth	r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007bfc:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8007c00:	3e08      	subs	r6, #8
 8007c02:	1bf6      	subs	r6, r6, r7
 8007c04:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007c06:	42a6      	cmp	r6, r4
 8007c08:	d32f      	bcc.n	8007c6a <mem_trim+0xd6>
  if (newsize == size) {
 8007c0a:	42a6      	cmp	r6, r4
 8007c0c:	d070      	beq.n	8007cf0 <mem_trim+0x15c>
  LWIP_MEM_FREE_PROTECT();
 8007c0e:	483e      	ldr	r0, [pc, #248]	; (8007d08 <mem_trim+0x174>)
 8007c10:	f006 ff79 	bl	800eb06 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007c14:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007c18:	4b36      	ldr	r3, [pc, #216]	; (8007cf4 <mem_trim+0x160>)
 8007c1a:	f8d3 a000 	ldr.w	sl, [r3]
 8007c1e:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 8007c22:	f899 3004 	ldrb.w	r3, [r9, #4]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d136      	bne.n	8007c98 <mem_trim+0x104>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c2a:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007c2e:	d025      	beq.n	8007c7c <mem_trim+0xe8>
    next = mem2->next;
 8007c30:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007c34:	3408      	adds	r4, #8
 8007c36:	443c      	add	r4, r7
 8007c38:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007c3a:	4b34      	ldr	r3, [pc, #208]	; (8007d0c <mem_trim+0x178>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	454b      	cmp	r3, r9
 8007c40:	d024      	beq.n	8007c8c <mem_trim+0xf8>
  return (struct mem *)(void *)&ram[ptr];
 8007c42:	4b2c      	ldr	r3, [pc, #176]	; (8007cf4 <mem_trim+0x160>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 8007c48:	2000      	movs	r0, #0
 8007c4a:	7110      	strb	r0, [r2, #4]
    mem2->next = next;
 8007c4c:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007c4e:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007c50:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c54:	5b1a      	ldrh	r2, [r3, r4]
 8007c56:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007c5a:	d001      	beq.n	8007c60 <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007c5c:	4413      	add	r3, r2
 8007c5e:	805c      	strh	r4, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007c60:	4829      	ldr	r0, [pc, #164]	; (8007d08 <mem_trim+0x174>)
 8007c62:	f006 ff57 	bl	800eb14 <sys_mutex_unlock>
  return rmem;
 8007c66:	4628      	mov	r0, r5
 8007c68:	e7c2      	b.n	8007bf0 <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007c6a:	4b24      	ldr	r3, [pc, #144]	; (8007cfc <mem_trim+0x168>)
 8007c6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007c70:	4927      	ldr	r1, [pc, #156]	; (8007d10 <mem_trim+0x17c>)
 8007c72:	4824      	ldr	r0, [pc, #144]	; (8007d04 <mem_trim+0x170>)
 8007c74:	f007 f956 	bl	800ef24 <iprintf>
    return NULL;
 8007c78:	2000      	movs	r0, #0
 8007c7a:	e7b9      	b.n	8007bf0 <mem_trim+0x5c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c7c:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <mem_trim+0x168>)
 8007c7e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007c82:	4924      	ldr	r1, [pc, #144]	; (8007d14 <mem_trim+0x180>)
 8007c84:	481f      	ldr	r0, [pc, #124]	; (8007d04 <mem_trim+0x170>)
 8007c86:	f007 f94d 	bl	800ef24 <iprintf>
 8007c8a:	e7d1      	b.n	8007c30 <mem_trim+0x9c>
  return (struct mem *)(void *)&ram[ptr];
 8007c8c:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <mem_trim+0x160>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 8007c92:	4a1e      	ldr	r2, [pc, #120]	; (8007d0c <mem_trim+0x178>)
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	e7d4      	b.n	8007c42 <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007c98:	f104 0314 	add.w	r3, r4, #20
 8007c9c:	42b3      	cmp	r3, r6
 8007c9e:	d8df      	bhi.n	8007c60 <mem_trim+0xcc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007ca0:	3408      	adds	r4, #8
 8007ca2:	443c      	add	r4, r7
 8007ca4:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007ca6:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007caa:	d017      	beq.n	8007cdc <mem_trim+0x148>
  return (struct mem *)(void *)&ram[ptr];
 8007cac:	4b11      	ldr	r3, [pc, #68]	; (8007cf4 <mem_trim+0x160>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007cb2:	4916      	ldr	r1, [pc, #88]	; (8007d0c <mem_trim+0x178>)
 8007cb4:	6809      	ldr	r1, [r1, #0]
 8007cb6:	4291      	cmp	r1, r2
      lfree = mem2;
 8007cb8:	bf84      	itt	hi
 8007cba:	4914      	ldrhi	r1, [pc, #80]	; (8007d0c <mem_trim+0x178>)
 8007cbc:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007cc2:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8007cc6:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007cc8:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007cca:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007cce:	5b1a      	ldrh	r2, [r3, r4]
 8007cd0:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007cd4:	bf1c      	itt	ne
 8007cd6:	189b      	addne	r3, r3, r2
 8007cd8:	805c      	strhne	r4, [r3, #2]
 8007cda:	e7c1      	b.n	8007c60 <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007cdc:	4b07      	ldr	r3, [pc, #28]	; (8007cfc <mem_trim+0x168>)
 8007cde:	f240 3216 	movw	r2, #790	; 0x316
 8007ce2:	490c      	ldr	r1, [pc, #48]	; (8007d14 <mem_trim+0x180>)
 8007ce4:	4807      	ldr	r0, [pc, #28]	; (8007d04 <mem_trim+0x170>)
 8007ce6:	f007 f91d 	bl	800ef24 <iprintf>
 8007cea:	e7df      	b.n	8007cac <mem_trim+0x118>
    return NULL;
 8007cec:	2000      	movs	r0, #0
 8007cee:	e77f      	b.n	8007bf0 <mem_trim+0x5c>
    return rmem;
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	e77d      	b.n	8007bf0 <mem_trim+0x5c>
 8007cf4:	2000aed8 	.word	0x2000aed8
 8007cf8:	2000aedc 	.word	0x2000aedc
 8007cfc:	08011370 	.word	0x08011370
 8007d00:	080114d4 	.word	0x080114d4
 8007d04:	0800fe60 	.word	0x0800fe60
 8007d08:	2000aed4 	.word	0x2000aed4
 8007d0c:	2000aed0 	.word	0x2000aed0
 8007d10:	080114ec 	.word	0x080114ec
 8007d14:	0801150c 	.word	0x0801150c

08007d18 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f000 809c 	beq.w	8007e56 <mem_malloc+0x13e>
{
 8007d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d20:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007d22:	1cc6      	adds	r6, r0, #3
 8007d24:	f026 0603 	bic.w	r6, r6, #3
 8007d28:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007d2a:	2e0b      	cmp	r6, #11
 8007d2c:	d904      	bls.n	8007d38 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007d2e:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007d32:	d902      	bls.n	8007d3a <mem_malloc+0x22>
    return NULL;
 8007d34:	2000      	movs	r0, #0
 8007d36:	e08d      	b.n	8007e54 <mem_malloc+0x13c>
    size = MIN_SIZE_ALIGNED;
 8007d38:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007d3a:	42b3      	cmp	r3, r6
 8007d3c:	f200 808d 	bhi.w	8007e5a <mem_malloc+0x142>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007d40:	4849      	ldr	r0, [pc, #292]	; (8007e68 <mem_malloc+0x150>)
 8007d42:	f006 fee0 	bl	800eb06 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8007d46:	4b49      	ldr	r3, [pc, #292]	; (8007e6c <mem_malloc+0x154>)
 8007d48:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d4a:	4b49      	ldr	r3, [pc, #292]	; (8007e70 <mem_malloc+0x158>)
  return (mem_size_t)((u8_t *)mem - ram);
 8007d4c:	681c      	ldr	r4, [r3, #0]
 8007d4e:	1a64      	subs	r4, r4, r1
 8007d50:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d52:	4623      	mov	r3, r4
 8007d54:	4637      	mov	r7, r6
 8007d56:	f5c6 5020 	rsb	r0, r6, #10240	; 0x2800
 8007d5a:	4284      	cmp	r4, r0
 8007d5c:	d276      	bcs.n	8007e4c <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d5e:	f06f 0c07 	mvn.w	ip, #7
 8007d62:	e039      	b.n	8007dd8 <mem_malloc+0xc0>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007d64:	4b43      	ldr	r3, [pc, #268]	; (8007e74 <mem_malloc+0x15c>)
 8007d66:	f240 3287 	movw	r2, #903	; 0x387
 8007d6a:	4943      	ldr	r1, [pc, #268]	; (8007e78 <mem_malloc+0x160>)
 8007d6c:	4843      	ldr	r0, [pc, #268]	; (8007e7c <mem_malloc+0x164>)
 8007d6e:	f007 f8d9 	bl	800ef24 <iprintf>
 8007d72:	e045      	b.n	8007e00 <mem_malloc+0xe8>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007d74:	2301      	movs	r3, #1
 8007d76:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007d78:	4b3d      	ldr	r3, [pc, #244]	; (8007e70 <mem_malloc+0x158>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	d056      	beq.n	8007e2e <mem_malloc+0x116>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007d80:	4839      	ldr	r0, [pc, #228]	; (8007e68 <mem_malloc+0x150>)
 8007d82:	f006 fec7 	bl	800eb14 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d86:	3708      	adds	r7, #8
 8007d88:	442f      	add	r7, r5
 8007d8a:	4b3d      	ldr	r3, [pc, #244]	; (8007e80 <mem_malloc+0x168>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	42bb      	cmp	r3, r7
 8007d90:	d305      	bcc.n	8007d9e <mem_malloc+0x86>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007d92:	f015 0f03 	tst.w	r5, #3
 8007d96:	d10a      	bne.n	8007dae <mem_malloc+0x96>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007d98:	f105 0008 	add.w	r0, r5, #8
 8007d9c:	e05a      	b.n	8007e54 <mem_malloc+0x13c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d9e:	4b35      	ldr	r3, [pc, #212]	; (8007e74 <mem_malloc+0x15c>)
 8007da0:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007da4:	4937      	ldr	r1, [pc, #220]	; (8007e84 <mem_malloc+0x16c>)
 8007da6:	4835      	ldr	r0, [pc, #212]	; (8007e7c <mem_malloc+0x164>)
 8007da8:	f007 f8bc 	bl	800ef24 <iprintf>
 8007dac:	e7f1      	b.n	8007d92 <mem_malloc+0x7a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007dae:	4e31      	ldr	r6, [pc, #196]	; (8007e74 <mem_malloc+0x15c>)
 8007db0:	4c32      	ldr	r4, [pc, #200]	; (8007e7c <mem_malloc+0x164>)
 8007db2:	4633      	mov	r3, r6
 8007db4:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007db8:	4933      	ldr	r1, [pc, #204]	; (8007e88 <mem_malloc+0x170>)
 8007dba:	4620      	mov	r0, r4
 8007dbc:	f007 f8b2 	bl	800ef24 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007dc0:	4633      	mov	r3, r6
 8007dc2:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007dc6:	4931      	ldr	r1, [pc, #196]	; (8007e8c <mem_malloc+0x174>)
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f007 f8ab 	bl	800ef24 <iprintf>
 8007dce:	e7e3      	b.n	8007d98 <mem_malloc+0x80>
         ptr = ptr_to_mem(ptr)->next) {
 8007dd0:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007dd2:	4623      	mov	r3, r4
 8007dd4:	4284      	cmp	r4, r0
 8007dd6:	d239      	bcs.n	8007e4c <mem_malloc+0x134>
  return (struct mem *)(void *)&ram[ptr];
 8007dd8:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 8007dda:	792a      	ldrb	r2, [r5, #4]
 8007ddc:	2a00      	cmp	r2, #0
 8007dde:	d1f7      	bne.n	8007dd0 <mem_malloc+0xb8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007de0:	5aca      	ldrh	r2, [r1, r3]
 8007de2:	ebac 0303 	sub.w	r3, ip, r3
 8007de6:	4413      	add	r3, r2
      if ((!mem->used) &&
 8007de8:	42bb      	cmp	r3, r7
 8007dea:	d3f1      	bcc.n	8007dd0 <mem_malloc+0xb8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007dec:	f107 0214 	add.w	r2, r7, #20
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d3bf      	bcc.n	8007d74 <mem_malloc+0x5c>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007df4:	3608      	adds	r6, #8
 8007df6:	4426      	add	r6, r4
 8007df8:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007dfa:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007dfe:	d0b1      	beq.n	8007d64 <mem_malloc+0x4c>
  return (struct mem *)(void *)&ram[ptr];
 8007e00:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <mem_malloc+0x154>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	199a      	adds	r2, r3, r6
          mem2->used = 0;
 8007e06:	2100      	movs	r1, #0
 8007e08:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007e0a:	8829      	ldrh	r1, [r5, #0]
 8007e0c:	5399      	strh	r1, [r3, r6]
          mem2->prev = ptr;
 8007e0e:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8007e10:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 8007e12:	2201      	movs	r2, #1
 8007e14:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e16:	5b9a      	ldrh	r2, [r3, r6]
 8007e18:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007e1c:	d0ac      	beq.n	8007d78 <mem_malloc+0x60>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007e1e:	4413      	add	r3, r2
 8007e20:	805e      	strh	r6, [r3, #2]
        if (mem == lfree) {
 8007e22:	4b13      	ldr	r3, [pc, #76]	; (8007e70 <mem_malloc+0x158>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	42ab      	cmp	r3, r5
 8007e28:	d1aa      	bne.n	8007d80 <mem_malloc+0x68>
          while (cur->used && cur != ram_end) {
 8007e2a:	792b      	ldrb	r3, [r5, #4]
 8007e2c:	b1d3      	cbz	r3, 8007e64 <mem_malloc+0x14c>
 8007e2e:	4b14      	ldr	r3, [pc, #80]	; (8007e80 <mem_malloc+0x168>)
 8007e30:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8007e32:	4b0e      	ldr	r3, [pc, #56]	; (8007e6c <mem_malloc+0x154>)
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8007e38:	4299      	cmp	r1, r3
 8007e3a:	d010      	beq.n	8007e5e <mem_malloc+0x146>
  return (struct mem *)(void *)&ram[ptr];
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8007e40:	791a      	ldrb	r2, [r3, #4]
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	d1f8      	bne.n	8007e38 <mem_malloc+0x120>
          lfree = cur;
 8007e46:	4a0a      	ldr	r2, [pc, #40]	; (8007e70 <mem_malloc+0x158>)
 8007e48:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007e4a:	e799      	b.n	8007d80 <mem_malloc+0x68>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007e4c:	4806      	ldr	r0, [pc, #24]	; (8007e68 <mem_malloc+0x150>)
 8007e4e:	f006 fe61 	bl	800eb14 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007e52:	2000      	movs	r0, #0
}
 8007e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8007e56:	2000      	movs	r0, #0
}
 8007e58:	4770      	bx	lr
    return NULL;
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	e7fa      	b.n	8007e54 <mem_malloc+0x13c>
          lfree = cur;
 8007e5e:	4a04      	ldr	r2, [pc, #16]	; (8007e70 <mem_malloc+0x158>)
 8007e60:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007e62:	e78d      	b.n	8007d80 <mem_malloc+0x68>
  return (struct mem *)(void *)&ram[ptr];
 8007e64:	462b      	mov	r3, r5
 8007e66:	e7ee      	b.n	8007e46 <mem_malloc+0x12e>
 8007e68:	2000aed4 	.word	0x2000aed4
 8007e6c:	2000aed8 	.word	0x2000aed8
 8007e70:	2000aed0 	.word	0x2000aed0
 8007e74:	08011370 	.word	0x08011370
 8007e78:	0801150c 	.word	0x0801150c
 8007e7c:	0800fe60 	.word	0x0800fe60
 8007e80:	2000aedc 	.word	0x2000aedc
 8007e84:	08011520 	.word	0x08011520
 8007e88:	08011550 	.word	0x08011550
 8007e8c:	08011580 	.word	0x08011580

08007e90 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007e90:	b538      	push	{r3, r4, r5, lr}
 8007e92:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007e94:	f006 fe5a 	bl	800eb4c <sys_arch_protect>
 8007e98:	4605      	mov	r5, r0

  memp = *desc->tab;
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007e9e:	b18c      	cbz	r4, 8007ec4 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007ea4:	f014 0f03 	tst.w	r4, #3
 8007ea8:	d104      	bne.n	8007eb4 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f006 fe5a 	bl	800eb64 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007eb4:	4b05      	ldr	r3, [pc, #20]	; (8007ecc <do_memp_malloc_pool+0x3c>)
 8007eb6:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007eba:	4905      	ldr	r1, [pc, #20]	; (8007ed0 <do_memp_malloc_pool+0x40>)
 8007ebc:	4805      	ldr	r0, [pc, #20]	; (8007ed4 <do_memp_malloc_pool+0x44>)
 8007ebe:	f007 f831 	bl	800ef24 <iprintf>
 8007ec2:	e7f2      	b.n	8007eaa <do_memp_malloc_pool+0x1a>
    SYS_ARCH_UNPROTECT(old_level);
 8007ec4:	f006 fe4e 	bl	800eb64 <sys_arch_unprotect>
  return NULL;
 8007ec8:	e7f2      	b.n	8007eb0 <do_memp_malloc_pool+0x20>
 8007eca:	bf00      	nop
 8007ecc:	080115a4 	.word	0x080115a4
 8007ed0:	080115d4 	.word	0x080115d4
 8007ed4:	0800fe60 	.word	0x0800fe60

08007ed8 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4605      	mov	r5, r0
 8007edc:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007ede:	f011 0f03 	tst.w	r1, #3
 8007ee2:	d109      	bne.n	8007ef8 <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8007ee4:	f006 fe32 	bl	800eb4c <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007ee8:	68ab      	ldr	r3, [r5, #8]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007eee:	68ab      	ldr	r3, [r5, #8]
 8007ef0:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007ef2:	f006 fe37 	bl	800eb64 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007ef8:	4b03      	ldr	r3, [pc, #12]	; (8007f08 <do_memp_free_pool+0x30>)
 8007efa:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007efe:	4903      	ldr	r1, [pc, #12]	; (8007f0c <do_memp_free_pool+0x34>)
 8007f00:	4803      	ldr	r0, [pc, #12]	; (8007f10 <do_memp_free_pool+0x38>)
 8007f02:	f007 f80f 	bl	800ef24 <iprintf>
 8007f06:	e7ed      	b.n	8007ee4 <do_memp_free_pool+0xc>
 8007f08:	080115a4 	.word	0x080115a4
 8007f0c:	080115f8 	.word	0x080115f8
 8007f10:	0800fe60 	.word	0x0800fe60

08007f14 <memp_init_pool>:
  *desc->tab = NULL;
 8007f14:	6883      	ldr	r3, [r0, #8]
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007f1a:	6843      	ldr	r3, [r0, #4]
 8007f1c:	3303      	adds	r3, #3
 8007f1e:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007f22:	8842      	ldrh	r2, [r0, #2]
 8007f24:	b15a      	cbz	r2, 8007f3e <memp_init_pool+0x2a>
 8007f26:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8007f28:	6881      	ldr	r1, [r0, #8]
 8007f2a:	6809      	ldr	r1, [r1, #0]
 8007f2c:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007f2e:	6881      	ldr	r1, [r0, #8]
 8007f30:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007f32:	8801      	ldrh	r1, [r0, #0]
 8007f34:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8007f36:	3201      	adds	r2, #1
 8007f38:	8841      	ldrh	r1, [r0, #2]
 8007f3a:	4291      	cmp	r1, r2
 8007f3c:	dcf4      	bgt.n	8007f28 <memp_init_pool+0x14>
}
 8007f3e:	4770      	bx	lr

08007f40 <memp_init>:
{
 8007f40:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007f42:	4c05      	ldr	r4, [pc, #20]	; (8007f58 <memp_init+0x18>)
 8007f44:	f104 0534 	add.w	r5, r4, #52	; 0x34
    memp_init_pool(memp_pools[i]);
 8007f48:	f854 0b04 	ldr.w	r0, [r4], #4
 8007f4c:	f7ff ffe2 	bl	8007f14 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007f50:	42ac      	cmp	r4, r5
 8007f52:	d1f9      	bne.n	8007f48 <memp_init+0x8>
}
 8007f54:	bd38      	pop	{r3, r4, r5, pc}
 8007f56:	bf00      	nop
 8007f58:	08011704 	.word	0x08011704

08007f5c <memp_malloc_pool>:
{
 8007f5c:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f5e:	4604      	mov	r4, r0
 8007f60:	b110      	cbz	r0, 8007f68 <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 8007f62:	f7ff ff95 	bl	8007e90 <do_memp_malloc_pool>
}
 8007f66:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <memp_malloc_pool+0x20>)
 8007f6a:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007f6e:	4904      	ldr	r1, [pc, #16]	; (8007f80 <memp_malloc_pool+0x24>)
 8007f70:	4804      	ldr	r0, [pc, #16]	; (8007f84 <memp_malloc_pool+0x28>)
 8007f72:	f006 ffd7 	bl	800ef24 <iprintf>
    return NULL;
 8007f76:	4620      	mov	r0, r4
 8007f78:	e7f5      	b.n	8007f66 <memp_malloc_pool+0xa>
 8007f7a:	bf00      	nop
 8007f7c:	080115a4 	.word	0x080115a4
 8007f80:	08011618 	.word	0x08011618
 8007f84:	0800fe60 	.word	0x0800fe60

08007f88 <memp_malloc>:
{
 8007f88:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007f8a:	280c      	cmp	r0, #12
 8007f8c:	d805      	bhi.n	8007f9a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007f8e:	4b07      	ldr	r3, [pc, #28]	; (8007fac <memp_malloc+0x24>)
 8007f90:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007f94:	f7ff ff7c 	bl	8007e90 <do_memp_malloc_pool>
}
 8007f98:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007f9a:	4b05      	ldr	r3, [pc, #20]	; (8007fb0 <memp_malloc+0x28>)
 8007f9c:	f240 1257 	movw	r2, #343	; 0x157
 8007fa0:	4904      	ldr	r1, [pc, #16]	; (8007fb4 <memp_malloc+0x2c>)
 8007fa2:	4805      	ldr	r0, [pc, #20]	; (8007fb8 <memp_malloc+0x30>)
 8007fa4:	f006 ffbe 	bl	800ef24 <iprintf>
 8007fa8:	2000      	movs	r0, #0
 8007faa:	e7f5      	b.n	8007f98 <memp_malloc+0x10>
 8007fac:	08011704 	.word	0x08011704
 8007fb0:	080115a4 	.word	0x080115a4
 8007fb4:	0801162c 	.word	0x0801162c
 8007fb8:	0800fe60 	.word	0x0800fe60

08007fbc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007fbc:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007fbe:	b128      	cbz	r0, 8007fcc <memp_free_pool+0x10>
 8007fc0:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 8007fc2:	b111      	cbz	r1, 8007fca <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7ff ff87 	bl	8007ed8 <do_memp_free_pool>
}
 8007fca:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <memp_free_pool+0x20>)
 8007fce:	f240 1295 	movw	r2, #405	; 0x195
 8007fd2:	4903      	ldr	r1, [pc, #12]	; (8007fe0 <memp_free_pool+0x24>)
 8007fd4:	4803      	ldr	r0, [pc, #12]	; (8007fe4 <memp_free_pool+0x28>)
 8007fd6:	f006 ffa5 	bl	800ef24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007fda:	e7f6      	b.n	8007fca <memp_free_pool+0xe>
 8007fdc:	080115a4 	.word	0x080115a4
 8007fe0:	08011618 	.word	0x08011618
 8007fe4:	0800fe60 	.word	0x0800fe60

08007fe8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007fe8:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007fea:	280c      	cmp	r0, #12
 8007fec:	d806      	bhi.n	8007ffc <memp_free+0x14>

  if (mem == NULL) {
 8007fee:	b121      	cbz	r1, 8007ffa <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007ff0:	4b06      	ldr	r3, [pc, #24]	; (800800c <memp_free+0x24>)
 8007ff2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007ff6:	f7ff ff6f 	bl	8007ed8 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007ffa:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007ffc:	4b04      	ldr	r3, [pc, #16]	; (8008010 <memp_free+0x28>)
 8007ffe:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008002:	4904      	ldr	r1, [pc, #16]	; (8008014 <memp_free+0x2c>)
 8008004:	4804      	ldr	r0, [pc, #16]	; (8008018 <memp_free+0x30>)
 8008006:	f006 ff8d 	bl	800ef24 <iprintf>
 800800a:	e7f6      	b.n	8007ffa <memp_free+0x12>
 800800c:	08011704 	.word	0x08011704
 8008010:	080115a4 	.word	0x080115a4
 8008014:	0801164c 	.word	0x0801164c
 8008018:	0800fe60 	.word	0x0800fe60

0800801c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 800801c:	f06f 000b 	mvn.w	r0, #11
 8008020:	4770      	bx	lr
	...

08008024 <netif_issue_reports>:
{
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008028:	4605      	mov	r5, r0
 800802a:	b170      	cbz	r0, 800804a <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800802c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8008030:	f003 0205 	and.w	r2, r3, #5
 8008034:	2a05      	cmp	r2, #5
 8008036:	d107      	bne.n	8008048 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008038:	f014 0f01 	tst.w	r4, #1
 800803c:	d004      	beq.n	8008048 <netif_issue_reports+0x24>
 800803e:	686a      	ldr	r2, [r5, #4]
 8008040:	b112      	cbz	r2, 8008048 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008042:	f013 0f08 	tst.w	r3, #8
 8008046:	d108      	bne.n	800805a <netif_issue_reports+0x36>
}
 8008048:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <netif_issue_reports+0x40>)
 800804c:	f240 326d 	movw	r2, #877	; 0x36d
 8008050:	4905      	ldr	r1, [pc, #20]	; (8008068 <netif_issue_reports+0x44>)
 8008052:	4806      	ldr	r0, [pc, #24]	; (800806c <netif_issue_reports+0x48>)
 8008054:	f006 ff66 	bl	800ef24 <iprintf>
 8008058:	e7e8      	b.n	800802c <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 800805a:	1d29      	adds	r1, r5, #4
 800805c:	4628      	mov	r0, r5
 800805e:	f005 faad 	bl	800d5bc <etharp_request>
 8008062:	e7f1      	b.n	8008048 <netif_issue_reports+0x24>
 8008064:	08011738 	.word	0x08011738
 8008068:	0801176c 	.word	0x0801176c
 800806c:	0800fe60 	.word	0x0800fe60

08008070 <netif_do_set_ipaddr>:
{
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	4605      	mov	r5, r0
 8008076:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008078:	460e      	mov	r6, r1
 800807a:	b139      	cbz	r1, 800808c <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800807c:	b174      	cbz	r4, 800809c <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800807e:	686b      	ldr	r3, [r5, #4]
 8008080:	6832      	ldr	r2, [r6, #0]
 8008082:	429a      	cmp	r2, r3
 8008084:	d112      	bne.n	80080ac <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8008086:	2000      	movs	r0, #0
}
 8008088:	b002      	add	sp, #8
 800808a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <netif_do_set_ipaddr+0x60>)
 800808e:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008092:	4910      	ldr	r1, [pc, #64]	; (80080d4 <netif_do_set_ipaddr+0x64>)
 8008094:	4810      	ldr	r0, [pc, #64]	; (80080d8 <netif_do_set_ipaddr+0x68>)
 8008096:	f006 ff45 	bl	800ef24 <iprintf>
 800809a:	e7ef      	b.n	800807c <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800809c:	4b0c      	ldr	r3, [pc, #48]	; (80080d0 <netif_do_set_ipaddr+0x60>)
 800809e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80080a2:	490c      	ldr	r1, [pc, #48]	; (80080d4 <netif_do_set_ipaddr+0x64>)
 80080a4:	480c      	ldr	r0, [pc, #48]	; (80080d8 <netif_do_set_ipaddr+0x68>)
 80080a6:	f006 ff3d 	bl	800ef24 <iprintf>
 80080aa:	e7e8      	b.n	800807e <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80080ac:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80080ae:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80080b0:	a901      	add	r1, sp, #4
 80080b2:	4620      	mov	r0, r4
 80080b4:	f001 f970 	bl	8009398 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80080b8:	a901      	add	r1, sp, #4
 80080ba:	4620      	mov	r0, r4
 80080bc:	f005 f864 	bl	800d188 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80080c0:	6833      	ldr	r3, [r6, #0]
 80080c2:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80080c4:	2101      	movs	r1, #1
 80080c6:	4628      	mov	r0, r5
 80080c8:	f7ff ffac 	bl	8008024 <netif_issue_reports>
    return 1; /* address changed */
 80080cc:	2001      	movs	r0, #1
 80080ce:	e7db      	b.n	8008088 <netif_do_set_ipaddr+0x18>
 80080d0:	08011738 	.word	0x08011738
 80080d4:	08010054 	.word	0x08010054
 80080d8:	0800fe60 	.word	0x0800fe60

080080dc <netif_init>:
}
 80080dc:	4770      	bx	lr
	...

080080e0 <netif_set_addr>:
{
 80080e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e2:	b083      	sub	sp, #12
 80080e4:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80080e6:	4d15      	ldr	r5, [pc, #84]	; (800813c <netif_set_addr+0x5c>)
 80080e8:	2900      	cmp	r1, #0
 80080ea:	bf18      	it	ne
 80080ec:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 80080ee:	4f13      	ldr	r7, [pc, #76]	; (800813c <netif_set_addr+0x5c>)
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	bf18      	it	ne
 80080f4:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 80080f6:	4e11      	ldr	r6, [pc, #68]	; (800813c <netif_set_addr+0x5c>)
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	bf18      	it	ne
 80080fc:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 80080fe:	b10d      	cbz	r5, 8008104 <netif_set_addr+0x24>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b993      	cbnz	r3, 800812a <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008104:	aa01      	add	r2, sp, #4
 8008106:	4629      	mov	r1, r5
 8008108:	4620      	mov	r0, r4
 800810a:	f7ff ffb1 	bl	8008070 <netif_do_set_ipaddr>
 800810e:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68a2      	ldr	r2, [r4, #8]
 8008114:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008116:	bf18      	it	ne
 8008118:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800811a:	6833      	ldr	r3, [r6, #0]
 800811c:	68e2      	ldr	r2, [r4, #12]
 800811e:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008120:	bf18      	it	ne
 8008122:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8008124:	b119      	cbz	r1, 800812e <netif_set_addr+0x4e>
}
 8008126:	b003      	add	sp, #12
 8008128:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800812a:	2100      	movs	r1, #0
 800812c:	e7f0      	b.n	8008110 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800812e:	aa01      	add	r2, sp, #4
 8008130:	4629      	mov	r1, r5
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff ff9c 	bl	8008070 <netif_do_set_ipaddr>
}
 8008138:	e7f5      	b.n	8008126 <netif_set_addr+0x46>
 800813a:	bf00      	nop
 800813c:	080131e4 	.word	0x080131e4

08008140 <netif_add>:
{
 8008140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008144:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008146:	4606      	mov	r6, r0
 8008148:	2800      	cmp	r0, #0
 800814a:	d02c      	beq.n	80081a6 <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800814c:	2c00      	cmp	r4, #0
 800814e:	d033      	beq.n	80081b8 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008150:	2000      	movs	r0, #0
 8008152:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008154:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008156:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8008158:	4d3b      	ldr	r5, [pc, #236]	; (8008248 <netif_add+0x108>)
 800815a:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 800815c:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 800815e:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 8008162:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8008164:	9808      	ldr	r0, [sp, #32]
 8008166:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8008168:	4838      	ldr	r0, [pc, #224]	; (800824c <netif_add+0x10c>)
 800816a:	7800      	ldrb	r0, [r0, #0]
 800816c:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 8008170:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008172:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008174:	4836      	ldr	r0, [pc, #216]	; (8008250 <netif_add+0x110>)
 8008176:	2b00      	cmp	r3, #0
 8008178:	bf08      	it	eq
 800817a:	4603      	moveq	r3, r0
 800817c:	2a00      	cmp	r2, #0
 800817e:	bf08      	it	eq
 8008180:	4602      	moveq	r2, r0
 8008182:	2900      	cmp	r1, #0
 8008184:	bf08      	it	eq
 8008186:	4601      	moveq	r1, r0
 8008188:	4630      	mov	r0, r6
 800818a:	f7ff ffa9 	bl	80080e0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800818e:	4630      	mov	r0, r6
 8008190:	47a0      	blx	r4
 8008192:	2800      	cmp	r0, #0
 8008194:	d147      	bne.n	8008226 <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008196:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008268 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800819a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8008258 <netif_add+0x118>
 800819e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800826c <netif_add+0x12c>
 80081a2:	4f2c      	ldr	r7, [pc, #176]	; (8008254 <netif_add+0x114>)
 80081a4:	e031      	b.n	800820a <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80081a6:	4b2c      	ldr	r3, [pc, #176]	; (8008258 <netif_add+0x118>)
 80081a8:	f240 1227 	movw	r2, #295	; 0x127
 80081ac:	492b      	ldr	r1, [pc, #172]	; (800825c <netif_add+0x11c>)
 80081ae:	4829      	ldr	r0, [pc, #164]	; (8008254 <netif_add+0x114>)
 80081b0:	f006 feb8 	bl	800ef24 <iprintf>
 80081b4:	4630      	mov	r0, r6
 80081b6:	e045      	b.n	8008244 <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80081b8:	4b27      	ldr	r3, [pc, #156]	; (8008258 <netif_add+0x118>)
 80081ba:	f44f 7294 	mov.w	r2, #296	; 0x128
 80081be:	4928      	ldr	r1, [pc, #160]	; (8008260 <netif_add+0x120>)
 80081c0:	4824      	ldr	r0, [pc, #144]	; (8008254 <netif_add+0x114>)
 80081c2:	f006 feaf 	bl	800ef24 <iprintf>
 80081c6:	2000      	movs	r0, #0
 80081c8:	e03c      	b.n	8008244 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80081ca:	4643      	mov	r3, r8
 80081cc:	f240 128b 	movw	r2, #395	; 0x18b
 80081d0:	4649      	mov	r1, r9
 80081d2:	4638      	mov	r0, r7
 80081d4:	f006 fea6 	bl	800ef24 <iprintf>
 80081d8:	e009      	b.n	80081ee <netif_add+0xae>
        if (netif2->num == netif->num) {
 80081da:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80081de:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d00e      	beq.n	8008204 <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081e6:	6824      	ldr	r4, [r4, #0]
 80081e8:	b1fc      	cbz	r4, 800822a <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80081ea:	42a6      	cmp	r6, r4
 80081ec:	d0ed      	beq.n	80081ca <netif_add+0x8a>
        num_netifs++;
 80081ee:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80081f0:	2dff      	cmp	r5, #255	; 0xff
 80081f2:	ddf2      	ble.n	80081da <netif_add+0x9a>
 80081f4:	4643      	mov	r3, r8
 80081f6:	f240 128d 	movw	r2, #397	; 0x18d
 80081fa:	491a      	ldr	r1, [pc, #104]	; (8008264 <netif_add+0x124>)
 80081fc:	4638      	mov	r0, r7
 80081fe:	f006 fe91 	bl	800ef24 <iprintf>
 8008202:	e7ea      	b.n	80081da <netif_add+0x9a>
          netif->num++;
 8008204:	3301      	adds	r3, #1
 8008206:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 800820a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800820e:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8008210:	bf04      	itt	eq
 8008212:	2300      	moveq	r3, #0
 8008214:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008218:	f8da 4000 	ldr.w	r4, [sl]
 800821c:	b12c      	cbz	r4, 800822a <netif_add+0xea>
      num_netifs = 0;
 800821e:	2500      	movs	r5, #0
 8008220:	e7e3      	b.n	80081ea <netif_add+0xaa>
    netif_num = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	e007      	b.n	8008236 <netif_add+0xf6>
    return NULL;
 8008226:	2000      	movs	r0, #0
 8008228:	e00c      	b.n	8008244 <netif_add+0x104>
  if (netif->num == 254) {
 800822a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800822e:	2bfe      	cmp	r3, #254	; 0xfe
 8008230:	d0f7      	beq.n	8008222 <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 8008232:	3301      	adds	r3, #1
 8008234:	b2db      	uxtb	r3, r3
 8008236:	4a05      	ldr	r2, [pc, #20]	; (800824c <netif_add+0x10c>)
 8008238:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 800823a:	4b0b      	ldr	r3, [pc, #44]	; (8008268 <netif_add+0x128>)
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8008240:	601e      	str	r6, [r3, #0]
  return netif;
 8008242:	4630      	mov	r0, r6
}
 8008244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008248:	0800801d 	.word	0x0800801d
 800824c:	200107c8 	.word	0x200107c8
 8008250:	080131e4 	.word	0x080131e4
 8008254:	0800fe60 	.word	0x0800fe60
 8008258:	08011738 	.word	0x08011738
 800825c:	08011790 	.word	0x08011790
 8008260:	080117ac 	.word	0x080117ac
 8008264:	080117e4 	.word	0x080117e4
 8008268:	200107c4 	.word	0x200107c4
 800826c:	080117d0 	.word	0x080117d0

08008270 <netif_set_default>:
  netif_default = netif;
 8008270:	4b01      	ldr	r3, [pc, #4]	; (8008278 <netif_set_default+0x8>)
 8008272:	6018      	str	r0, [r3, #0]
}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	200107c0 	.word	0x200107c0

0800827c <netif_set_up>:
{
 800827c:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800827e:	b128      	cbz	r0, 800828c <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008280:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008284:	f013 0f01 	tst.w	r3, #1
 8008288:	d008      	beq.n	800829c <netif_set_up+0x20>
}
 800828a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800828c:	4b07      	ldr	r3, [pc, #28]	; (80082ac <netif_set_up+0x30>)
 800828e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008292:	4907      	ldr	r1, [pc, #28]	; (80082b0 <netif_set_up+0x34>)
 8008294:	4807      	ldr	r0, [pc, #28]	; (80082b4 <netif_set_up+0x38>)
 8008296:	f006 fe45 	bl	800ef24 <iprintf>
 800829a:	e7f6      	b.n	800828a <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800829c:	f043 0301 	orr.w	r3, r3, #1
 80082a0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80082a4:	2103      	movs	r1, #3
 80082a6:	f7ff febd 	bl	8008024 <netif_issue_reports>
 80082aa:	e7ee      	b.n	800828a <netif_set_up+0xe>
 80082ac:	08011738 	.word	0x08011738
 80082b0:	08011814 	.word	0x08011814
 80082b4:	0800fe60 	.word	0x0800fe60

080082b8 <netif_set_down>:
{
 80082b8:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80082ba:	b160      	cbz	r0, 80082d6 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 80082bc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80082c0:	f013 0f01 	tst.w	r3, #1
 80082c4:	d006      	beq.n	80082d4 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80082c6:	f023 0101 	bic.w	r1, r3, #1
 80082ca:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80082ce:	f013 0f08 	tst.w	r3, #8
 80082d2:	d108      	bne.n	80082e6 <netif_set_down+0x2e>
}
 80082d4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <netif_set_down+0x34>)
 80082d8:	f240 329b 	movw	r2, #923	; 0x39b
 80082dc:	4904      	ldr	r1, [pc, #16]	; (80082f0 <netif_set_down+0x38>)
 80082de:	4805      	ldr	r0, [pc, #20]	; (80082f4 <netif_set_down+0x3c>)
 80082e0:	f006 fe20 	bl	800ef24 <iprintf>
 80082e4:	e7f6      	b.n	80082d4 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 80082e6:	f005 f8a5 	bl	800d434 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 80082ea:	e7f3      	b.n	80082d4 <netif_set_down+0x1c>
 80082ec:	08011738 	.word	0x08011738
 80082f0:	08011830 	.word	0x08011830
 80082f4:	0800fe60 	.word	0x0800fe60

080082f8 <netif_set_link_up>:
{
 80082f8:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80082fa:	b130      	cbz	r0, 800830a <netif_set_link_up+0x12>
 80082fc:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80082fe:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008302:	f013 0f04 	tst.w	r3, #4
 8008306:	d008      	beq.n	800831a <netif_set_link_up+0x22>
}
 8008308:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800830a:	4b0a      	ldr	r3, [pc, #40]	; (8008334 <netif_set_link_up+0x3c>)
 800830c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008310:	4909      	ldr	r1, [pc, #36]	; (8008338 <netif_set_link_up+0x40>)
 8008312:	480a      	ldr	r0, [pc, #40]	; (800833c <netif_set_link_up+0x44>)
 8008314:	f006 fe06 	bl	800ef24 <iprintf>
 8008318:	e7f6      	b.n	8008308 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800831a:	f043 0304 	orr.w	r3, r3, #4
 800831e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008322:	2103      	movs	r1, #3
 8008324:	f7ff fe7e 	bl	8008024 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8008328:	69e3      	ldr	r3, [r4, #28]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d0ec      	beq.n	8008308 <netif_set_link_up+0x10>
 800832e:	4620      	mov	r0, r4
 8008330:	4798      	blx	r3
 8008332:	e7e9      	b.n	8008308 <netif_set_link_up+0x10>
 8008334:	08011738 	.word	0x08011738
 8008338:	08011850 	.word	0x08011850
 800833c:	0800fe60 	.word	0x0800fe60

08008340 <netif_set_link_down>:
{
 8008340:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008342:	b160      	cbz	r0, 800835e <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008344:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008348:	f013 0f04 	tst.w	r3, #4
 800834c:	d006      	beq.n	800835c <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800834e:	f023 0304 	bic.w	r3, r3, #4
 8008352:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008356:	69c3      	ldr	r3, [r0, #28]
 8008358:	b103      	cbz	r3, 800835c <netif_set_link_down+0x1c>
 800835a:	4798      	blx	r3
}
 800835c:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800835e:	4b04      	ldr	r3, [pc, #16]	; (8008370 <netif_set_link_down+0x30>)
 8008360:	f240 4206 	movw	r2, #1030	; 0x406
 8008364:	4903      	ldr	r1, [pc, #12]	; (8008374 <netif_set_link_down+0x34>)
 8008366:	4804      	ldr	r0, [pc, #16]	; (8008378 <netif_set_link_down+0x38>)
 8008368:	f006 fddc 	bl	800ef24 <iprintf>
 800836c:	e7f6      	b.n	800835c <netif_set_link_down+0x1c>
 800836e:	bf00      	nop
 8008370:	08011738 	.word	0x08011738
 8008374:	08011874 	.word	0x08011874
 8008378:	0800fe60 	.word	0x0800fe60

0800837c <netif_set_link_callback>:
  if (netif) {
 800837c:	b100      	cbz	r0, 8008380 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800837e:	61c1      	str	r1, [r0, #28]
}
 8008380:	4770      	bx	lr
	...

08008384 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008384:	4602      	mov	r2, r0
 8008386:	b160      	cbz	r0, 80083a2 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8008388:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <netif_get_by_index+0x24>)
 800838a:	6818      	ldr	r0, [r3, #0]
 800838c:	b150      	cbz	r0, 80083a4 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 800838e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8008392:	3301      	adds	r3, #1
 8008394:	b2db      	uxtb	r3, r3
 8008396:	4293      	cmp	r3, r2
 8008398:	d004      	beq.n	80083a4 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 800839a:	6800      	ldr	r0, [r0, #0]
 800839c:	2800      	cmp	r0, #0
 800839e:	d1f6      	bne.n	800838e <netif_get_by_index+0xa>
 80083a0:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 80083a2:	2000      	movs	r0, #0
}
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	200107c4 	.word	0x200107c4

080083ac <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80083ac:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80083ae:	b1d8      	cbz	r0, 80083e8 <pbuf_add_header_impl+0x3c>
 80083b0:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80083b2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80083b6:	d22e      	bcs.n	8008416 <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 80083b8:	b339      	cbz	r1, 800840a <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 80083ba:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80083be:	8918      	ldrh	r0, [r3, #8]
 80083c0:	4460      	add	r0, ip
 80083c2:	b280      	uxth	r0, r0
 80083c4:	4560      	cmp	r0, ip
 80083c6:	d322      	bcc.n	800840e <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80083c8:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 80083cc:	f1be 0f00 	cmp.w	lr, #0
 80083d0:	db13      	blt.n	80083fa <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80083d2:	b1f2      	cbz	r2, 8008412 <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 80083d4:	685a      	ldr	r2, [r3, #4]
 80083d6:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80083d8:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80083da:	895a      	ldrh	r2, [r3, #10]
 80083dc:	4494      	add	ip, r2
 80083de:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80083e2:	8118      	strh	r0, [r3, #8]


  return 0;
 80083e4:	2000      	movs	r0, #0
 80083e6:	e017      	b.n	8008418 <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <pbuf_add_header_impl+0x70>)
 80083ea:	f240 12df 	movw	r2, #479	; 0x1df
 80083ee:	490c      	ldr	r1, [pc, #48]	; (8008420 <pbuf_add_header_impl+0x74>)
 80083f0:	480c      	ldr	r0, [pc, #48]	; (8008424 <pbuf_add_header_impl+0x78>)
 80083f2:	f006 fd97 	bl	800ef24 <iprintf>
    return 1;
 80083f6:	2001      	movs	r0, #1
 80083f8:	e00e      	b.n	8008418 <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80083fe:	f103 0210 	add.w	r2, r3, #16
 8008402:	4291      	cmp	r1, r2
 8008404:	d2e8      	bcs.n	80083d8 <pbuf_add_header_impl+0x2c>
      return 1;
 8008406:	2001      	movs	r0, #1
 8008408:	e006      	b.n	8008418 <pbuf_add_header_impl+0x6c>
    return 0;
 800840a:	2000      	movs	r0, #0
 800840c:	e004      	b.n	8008418 <pbuf_add_header_impl+0x6c>
    return 1;
 800840e:	2001      	movs	r0, #1
 8008410:	e002      	b.n	8008418 <pbuf_add_header_impl+0x6c>
      return 1;
 8008412:	2001      	movs	r0, #1
 8008414:	e000      	b.n	8008418 <pbuf_add_header_impl+0x6c>
    return 1;
 8008416:	2001      	movs	r0, #1
}
 8008418:	bd08      	pop	{r3, pc}
 800841a:	bf00      	nop
 800841c:	08011898 	.word	0x08011898
 8008420:	08010204 	.word	0x08010204
 8008424:	0800fe60 	.word	0x0800fe60

08008428 <pbuf_free_ooseq_callback>:
{
 8008428:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800842a:	f006 fb8f 	bl	800eb4c <sys_arch_protect>
 800842e:	4b08      	ldr	r3, [pc, #32]	; (8008450 <pbuf_free_ooseq_callback+0x28>)
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	f006 fb96 	bl	800eb64 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008438:	4b06      	ldr	r3, [pc, #24]	; (8008454 <pbuf_free_ooseq_callback+0x2c>)
 800843a:	6818      	ldr	r0, [r3, #0]
 800843c:	b138      	cbz	r0, 800844e <pbuf_free_ooseq_callback+0x26>
    if (pcb->ooseq != NULL) {
 800843e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8008440:	b91b      	cbnz	r3, 800844a <pbuf_free_ooseq_callback+0x22>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8008442:	68c0      	ldr	r0, [r0, #12]
 8008444:	2800      	cmp	r0, #0
 8008446:	d1fa      	bne.n	800843e <pbuf_free_ooseq_callback+0x16>
 8008448:	e001      	b.n	800844e <pbuf_free_ooseq_callback+0x26>
      tcp_free_ooseq(pcb);
 800844a:	f000 fe3d 	bl	80090c8 <tcp_free_ooseq>
}
 800844e:	bd08      	pop	{r3, pc}
 8008450:	200107c9 	.word	0x200107c9
 8008454:	200107cc 	.word	0x200107cc

08008458 <pbuf_alloc_reference>:
{
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	4606      	mov	r6, r0
 800845c:	460d      	mov	r5, r1
 800845e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008460:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b01      	cmp	r3, #1
 8008468:	d110      	bne.n	800848c <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800846a:	200b      	movs	r0, #11
 800846c:	f7ff fd8c 	bl	8007f88 <memp_malloc>
  if (p == NULL) {
 8008470:	4603      	mov	r3, r0
 8008472:	b148      	cbz	r0, 8008488 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8008474:	2200      	movs	r2, #0
 8008476:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8008478:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 800847a:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800847c:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800847e:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8008480:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8008482:	2101      	movs	r1, #1
 8008484:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008486:	73c2      	strb	r2, [r0, #15]
}
 8008488:	4618      	mov	r0, r3
 800848a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800848c:	4b03      	ldr	r3, [pc, #12]	; (800849c <pbuf_alloc_reference+0x44>)
 800848e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8008492:	4903      	ldr	r1, [pc, #12]	; (80084a0 <pbuf_alloc_reference+0x48>)
 8008494:	4803      	ldr	r0, [pc, #12]	; (80084a4 <pbuf_alloc_reference+0x4c>)
 8008496:	f006 fd45 	bl	800ef24 <iprintf>
 800849a:	e7e6      	b.n	800846a <pbuf_alloc_reference+0x12>
 800849c:	08011898 	.word	0x08011898
 80084a0:	080118c8 	.word	0x080118c8
 80084a4:	0800fe60 	.word	0x0800fe60

080084a8 <pbuf_alloced_custom>:
{
 80084a8:	b430      	push	{r4, r5}
 80084aa:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80084ac:	3003      	adds	r0, #3
 80084ae:	f020 0003 	bic.w	r0, r0, #3
 80084b2:	eb01 0c00 	add.w	ip, r1, r0
 80084b6:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 80084ba:	45ac      	cmp	ip, r5
 80084bc:	d80f      	bhi.n	80084de <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 80084be:	b104      	cbz	r4, 80084c2 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80084c0:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80084c2:	4618      	mov	r0, r3
  p->next = NULL;
 80084c4:	2500      	movs	r5, #0
 80084c6:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 80084c8:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 80084ca:	8119      	strh	r1, [r3, #8]
  p->len = len;
 80084cc:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 80084ce:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80084d0:	2202      	movs	r2, #2
 80084d2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80084d4:	2201      	movs	r2, #1
 80084d6:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80084d8:	73dd      	strb	r5, [r3, #15]
}
 80084da:	bc30      	pop	{r4, r5}
 80084dc:	4770      	bx	lr
    return NULL;
 80084de:	2000      	movs	r0, #0
 80084e0:	e7fb      	b.n	80084da <pbuf_alloced_custom+0x32>

080084e2 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80084e2:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80084e4:	2200      	movs	r2, #0
 80084e6:	f7ff ff61 	bl	80083ac <pbuf_add_header_impl>
}
 80084ea:	bd08      	pop	{r3, pc}

080084ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80084ec:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80084ee:	b190      	cbz	r0, 8008516 <pbuf_remove_header+0x2a>
 80084f0:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80084f2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80084f6:	d222      	bcs.n	800853e <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 80084f8:	b1f9      	cbz	r1, 800853a <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80084fa:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80084fc:	895a      	ldrh	r2, [r3, #10]
 80084fe:	4282      	cmp	r2, r0
 8008500:	d312      	bcc.n	8008528 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008502:	685c      	ldr	r4, [r3, #4]
 8008504:	4421      	add	r1, r4
 8008506:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8008508:	1a12      	subs	r2, r2, r0
 800850a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800850c:	891a      	ldrh	r2, [r3, #8]
 800850e:	1a10      	subs	r0, r2, r0
 8008510:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008512:	2000      	movs	r0, #0
}
 8008514:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8008516:	4b0b      	ldr	r3, [pc, #44]	; (8008544 <pbuf_remove_header+0x58>)
 8008518:	f240 224b 	movw	r2, #587	; 0x24b
 800851c:	490a      	ldr	r1, [pc, #40]	; (8008548 <pbuf_remove_header+0x5c>)
 800851e:	480b      	ldr	r0, [pc, #44]	; (800854c <pbuf_remove_header+0x60>)
 8008520:	f006 fd00 	bl	800ef24 <iprintf>
    return 1;
 8008524:	2001      	movs	r0, #1
 8008526:	e7f5      	b.n	8008514 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <pbuf_remove_header+0x58>)
 800852a:	f240 2255 	movw	r2, #597	; 0x255
 800852e:	4908      	ldr	r1, [pc, #32]	; (8008550 <pbuf_remove_header+0x64>)
 8008530:	4806      	ldr	r0, [pc, #24]	; (800854c <pbuf_remove_header+0x60>)
 8008532:	f006 fcf7 	bl	800ef24 <iprintf>
 8008536:	2001      	movs	r0, #1
 8008538:	e7ec      	b.n	8008514 <pbuf_remove_header+0x28>
    return 0;
 800853a:	2000      	movs	r0, #0
 800853c:	e7ea      	b.n	8008514 <pbuf_remove_header+0x28>
    return 1;
 800853e:	2001      	movs	r0, #1
 8008540:	e7e8      	b.n	8008514 <pbuf_remove_header+0x28>
 8008542:	bf00      	nop
 8008544:	08011898 	.word	0x08011898
 8008548:	08010204 	.word	0x08010204
 800854c:	0800fe60 	.word	0x0800fe60
 8008550:	080118dc 	.word	0x080118dc

08008554 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8008554:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8008556:	2900      	cmp	r1, #0
 8008558:	db03      	blt.n	8008562 <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800855a:	2201      	movs	r2, #1
 800855c:	f7ff ff26 	bl	80083ac <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 8008560:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8008562:	4249      	negs	r1, r1
 8008564:	f7ff ffc2 	bl	80084ec <pbuf_remove_header>
 8008568:	e7fa      	b.n	8008560 <pbuf_header_force+0xc>
	...

0800856c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800856c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8008570:	b140      	cbz	r0, 8008584 <pbuf_free+0x18>
 8008572:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008574:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008576:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8008634 <pbuf_free+0xc8>
 800857a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008648 <pbuf_free+0xdc>
 800857e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800863c <pbuf_free+0xd0>
 8008582:	e01a      	b.n	80085ba <pbuf_free+0x4e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008584:	4b2b      	ldr	r3, [pc, #172]	; (8008634 <pbuf_free+0xc8>)
 8008586:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800858a:	492b      	ldr	r1, [pc, #172]	; (8008638 <pbuf_free+0xcc>)
 800858c:	482b      	ldr	r0, [pc, #172]	; (800863c <pbuf_free+0xd0>)
 800858e:	f006 fcc9 	bl	800ef24 <iprintf>
    return 0;
 8008592:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008594:	4630      	mov	r0, r6
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800859a:	464b      	mov	r3, r9
 800859c:	f240 22f1 	movw	r2, #753	; 0x2f1
 80085a0:	4651      	mov	r1, sl
 80085a2:	4640      	mov	r0, r8
 80085a4:	f006 fcbe 	bl	800ef24 <iprintf>
 80085a8:	e00d      	b.n	80085c6 <pbuf_free+0x5a>
        pc->custom_free_function(p);
 80085aa:	6923      	ldr	r3, [r4, #16]
 80085ac:	4620      	mov	r0, r4
 80085ae:	4798      	blx	r3
      count++;
 80085b0:	3601      	adds	r6, #1
 80085b2:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 80085b4:	2d00      	cmp	r5, #0
 80085b6:	d0ed      	beq.n	8008594 <pbuf_free+0x28>
      p = q;
 80085b8:	462c      	mov	r4, r5
    SYS_ARCH_PROTECT(old_level);
 80085ba:	f006 fac7 	bl	800eb4c <sys_arch_protect>
 80085be:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80085c0:	7ba3      	ldrb	r3, [r4, #14]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0e9      	beq.n	800859a <pbuf_free+0x2e>
    ref = --(p->ref);
 80085c6:	7ba5      	ldrb	r5, [r4, #14]
 80085c8:	3d01      	subs	r5, #1
 80085ca:	b2ed      	uxtb	r5, r5
 80085cc:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 80085ce:	4638      	mov	r0, r7
 80085d0:	f006 fac8 	bl	800eb64 <sys_arch_unprotect>
    if (ref == 0) {
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	d1dd      	bne.n	8008594 <pbuf_free+0x28>
      q = p->next;
 80085d8:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80085da:	7b63      	ldrb	r3, [r4, #13]
 80085dc:	f013 0f02 	tst.w	r3, #2
 80085e0:	d00a      	beq.n	80085f8 <pbuf_free+0x8c>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e0      	bne.n	80085aa <pbuf_free+0x3e>
 80085e8:	464b      	mov	r3, r9
 80085ea:	f240 22ff 	movw	r2, #767	; 0x2ff
 80085ee:	4914      	ldr	r1, [pc, #80]	; (8008640 <pbuf_free+0xd4>)
 80085f0:	4640      	mov	r0, r8
 80085f2:	f006 fc97 	bl	800ef24 <iprintf>
 80085f6:	e7d8      	b.n	80085aa <pbuf_free+0x3e>
      alloc_src = pbuf_get_allocsrc(p);
 80085f8:	7b23      	ldrb	r3, [r4, #12]
 80085fa:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80085fe:	2b02      	cmp	r3, #2
 8008600:	d006      	beq.n	8008610 <pbuf_free+0xa4>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008602:	2b01      	cmp	r3, #1
 8008604:	d009      	beq.n	800861a <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008606:	b96b      	cbnz	r3, 8008624 <pbuf_free+0xb8>
          mem_free(p);
 8008608:	4620      	mov	r0, r4
 800860a:	f7ff f9c9 	bl	80079a0 <mem_free>
 800860e:	e7cf      	b.n	80085b0 <pbuf_free+0x44>
          memp_free(MEMP_PBUF_POOL, p);
 8008610:	4621      	mov	r1, r4
 8008612:	200c      	movs	r0, #12
 8008614:	f7ff fce8 	bl	8007fe8 <memp_free>
 8008618:	e7ca      	b.n	80085b0 <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 800861a:	4621      	mov	r1, r4
 800861c:	200b      	movs	r0, #11
 800861e:	f7ff fce3 	bl	8007fe8 <memp_free>
 8008622:	e7c5      	b.n	80085b0 <pbuf_free+0x44>
          LWIP_ASSERT("invalid pbuf type", 0);
 8008624:	464b      	mov	r3, r9
 8008626:	f240 320f 	movw	r2, #783	; 0x30f
 800862a:	4906      	ldr	r1, [pc, #24]	; (8008644 <pbuf_free+0xd8>)
 800862c:	4640      	mov	r0, r8
 800862e:	f006 fc79 	bl	800ef24 <iprintf>
 8008632:	e7bd      	b.n	80085b0 <pbuf_free+0x44>
 8008634:	08011898 	.word	0x08011898
 8008638:	08010204 	.word	0x08010204
 800863c:	0800fe60 	.word	0x0800fe60
 8008640:	08011914 	.word	0x08011914
 8008644:	08011938 	.word	0x08011938
 8008648:	080118fc 	.word	0x080118fc

0800864c <pbuf_alloc>:
{
 800864c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8008652:	b285      	uxth	r5, r0
  switch (type) {
 8008654:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8008658:	d03d      	beq.n	80086d6 <pbuf_alloc+0x8a>
 800865a:	4604      	mov	r4, r0
 800865c:	d80e      	bhi.n	800867c <pbuf_alloc+0x30>
 800865e:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008662:	b29b      	uxth	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d02f      	beq.n	80086c8 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008668:	4b47      	ldr	r3, [pc, #284]	; (8008788 <pbuf_alloc+0x13c>)
 800866a:	f240 1227 	movw	r2, #295	; 0x127
 800866e:	4947      	ldr	r1, [pc, #284]	; (800878c <pbuf_alloc+0x140>)
 8008670:	4847      	ldr	r0, [pc, #284]	; (8008790 <pbuf_alloc+0x144>)
 8008672:	f006 fc57 	bl	800ef24 <iprintf>
      return NULL;
 8008676:	f04f 0800 	mov.w	r8, #0
 800867a:	e029      	b.n	80086d0 <pbuf_alloc+0x84>
  switch (type) {
 800867c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8008680:	d1f2      	bne.n	8008668 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008682:	1ceb      	adds	r3, r5, #3
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	1cca      	adds	r2, r1, #3
 800868a:	f022 0503 	bic.w	r5, r2, #3
 800868e:	442b      	add	r3, r5
 8008690:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008692:	f103 0010 	add.w	r0, r3, #16
 8008696:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008698:	42ab      	cmp	r3, r5
 800869a:	d36e      	bcc.n	800877a <pbuf_alloc+0x12e>
 800869c:	4285      	cmp	r5, r0
 800869e:	d86f      	bhi.n	8008780 <pbuf_alloc+0x134>
      p = (struct pbuf *)mem_malloc(alloc_len);
 80086a0:	f7ff fb3a 	bl	8007d18 <mem_malloc>
      if (p == NULL) {
 80086a4:	4680      	mov	r8, r0
 80086a6:	b198      	cbz	r0, 80086d0 <pbuf_alloc+0x84>
  p->next = NULL;
 80086a8:	2200      	movs	r2, #0
 80086aa:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80086ac:	1903      	adds	r3, r0, r4
 80086ae:	3313      	adds	r3, #19
 80086b0:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 80086b4:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 80086b6:	8106      	strh	r6, [r0, #8]
  p->len = len;
 80086b8:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 80086ba:	2380      	movs	r3, #128	; 0x80
 80086bc:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 80086be:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 80086c0:	2301      	movs	r3, #1
 80086c2:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80086c4:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80086c6:	e003      	b.n	80086d0 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 80086c8:	2000      	movs	r0, #0
 80086ca:	f7ff fec5 	bl	8008458 <pbuf_alloc_reference>
 80086ce:	4680      	mov	r8, r0
}
 80086d0:	4640      	mov	r0, r8
 80086d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 80086d6:	2400      	movs	r4, #0
 80086d8:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80086da:	f04f 0a0c 	mov.w	sl, #12
  p->next = NULL;
 80086de:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 80086e0:	f04f 0b82 	mov.w	fp, #130	; 0x82
 80086e4:	e026      	b.n	8008734 <pbuf_alloc+0xe8>
  SYS_ARCH_PROTECT(old_level);
 80086e6:	f006 fa31 	bl	800eb4c <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 80086ea:	4b2a      	ldr	r3, [pc, #168]	; (8008794 <pbuf_alloc+0x148>)
 80086ec:	781d      	ldrb	r5, [r3, #0]
 80086ee:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 80086f0:	2201      	movs	r2, #1
 80086f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80086f4:	f006 fa36 	bl	800eb64 <sys_arch_unprotect>
  if (!queued) {
 80086f8:	b13d      	cbz	r5, 800870a <pbuf_alloc+0xbe>
          if (p) {
 80086fa:	f1b8 0f00 	cmp.w	r8, #0
 80086fe:	d0e7      	beq.n	80086d0 <pbuf_alloc+0x84>
            pbuf_free(p);
 8008700:	4640      	mov	r0, r8
 8008702:	f7ff ff33 	bl	800856c <pbuf_free>
          return NULL;
 8008706:	46a0      	mov	r8, r4
 8008708:	e7e2      	b.n	80086d0 <pbuf_alloc+0x84>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800870a:	2100      	movs	r1, #0
 800870c:	4822      	ldr	r0, [pc, #136]	; (8008798 <pbuf_alloc+0x14c>)
 800870e:	f7ff f849 	bl	80077a4 <tcpip_try_callback>
 8008712:	2800      	cmp	r0, #0
 8008714:	d0f1      	beq.n	80086fa <pbuf_alloc+0xae>
 8008716:	f006 fa19 	bl	800eb4c <sys_arch_protect>
 800871a:	4b1e      	ldr	r3, [pc, #120]	; (8008794 <pbuf_alloc+0x148>)
 800871c:	2200      	movs	r2, #0
 800871e:	701a      	strb	r2, [r3, #0]
 8008720:	f006 fa20 	bl	800eb64 <sys_arch_unprotect>
 8008724:	e7e9      	b.n	80086fa <pbuf_alloc+0xae>
          last->next = q;
 8008726:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 800872a:	1a76      	subs	r6, r6, r1
 800872c:	b2b6      	uxth	r6, r6
        offset = 0;
 800872e:	463d      	mov	r5, r7
      } while (rem_len > 0);
 8008730:	2e00      	cmp	r6, #0
 8008732:	d0cd      	beq.n	80086d0 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008734:	46a1      	mov	r9, r4
 8008736:	4650      	mov	r0, sl
 8008738:	f7ff fc26 	bl	8007f88 <memp_malloc>
        if (q == NULL) {
 800873c:	4604      	mov	r4, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d0d1      	beq.n	80086e6 <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008742:	1ce9      	adds	r1, r5, #3
 8008744:	f021 0103 	bic.w	r1, r1, #3
 8008748:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 800874c:	b289      	uxth	r1, r1
 800874e:	42b1      	cmp	r1, r6
 8008750:	bf28      	it	cs
 8008752:	4631      	movcs	r1, r6
  p->next = NULL;
 8008754:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008756:	4405      	add	r5, r0
 8008758:	3513      	adds	r5, #19
 800875a:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 800875e:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 8008760:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8008762:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8008764:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8008768:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 800876a:	2301      	movs	r3, #1
 800876c:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800876e:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 8008770:	f1b8 0f00 	cmp.w	r8, #0
 8008774:	d1d7      	bne.n	8008726 <pbuf_alloc+0xda>
          p = q;
 8008776:	4680      	mov	r8, r0
 8008778:	e7d7      	b.n	800872a <pbuf_alloc+0xde>
        return NULL;
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	e7a7      	b.n	80086d0 <pbuf_alloc+0x84>
 8008780:	f04f 0800 	mov.w	r8, #0
 8008784:	e7a4      	b.n	80086d0 <pbuf_alloc+0x84>
 8008786:	bf00      	nop
 8008788:	08011898 	.word	0x08011898
 800878c:	0801194c 	.word	0x0801194c
 8008790:	0800fe60 	.word	0x0800fe60
 8008794:	200107c9 	.word	0x200107c9
 8008798:	08008429 	.word	0x08008429

0800879c <pbuf_realloc>:
{
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80087a2:	4604      	mov	r4, r0
 80087a4:	b168      	cbz	r0, 80087c2 <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 80087a6:	8927      	ldrh	r7, [r4, #8]
 80087a8:	42b7      	cmp	r7, r6
 80087aa:	d939      	bls.n	8008820 <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 80087ac:	8963      	ldrh	r3, [r4, #10]
 80087ae:	429e      	cmp	r6, r3
 80087b0:	d923      	bls.n	80087fa <pbuf_realloc+0x5e>
  rem_len = new_len;
 80087b2:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80087b4:	f8df a090 	ldr.w	sl, [pc, #144]	; 8008848 <pbuf_realloc+0xac>
 80087b8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8008858 <pbuf_realloc+0xbc>
 80087bc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8008850 <pbuf_realloc+0xb4>
 80087c0:	e00a      	b.n	80087d8 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80087c2:	4b21      	ldr	r3, [pc, #132]	; (8008848 <pbuf_realloc+0xac>)
 80087c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80087c8:	4920      	ldr	r1, [pc, #128]	; (800884c <pbuf_realloc+0xb0>)
 80087ca:	4821      	ldr	r0, [pc, #132]	; (8008850 <pbuf_realloc+0xb4>)
 80087cc:	f006 fbaa 	bl	800ef24 <iprintf>
 80087d0:	e7e9      	b.n	80087a6 <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 80087d2:	8963      	ldrh	r3, [r4, #10]
 80087d4:	42ab      	cmp	r3, r5
 80087d6:	d211      	bcs.n	80087fc <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 80087d8:	1aed      	subs	r5, r5, r3
 80087da:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80087dc:	1bf3      	subs	r3, r6, r7
 80087de:	8922      	ldrh	r2, [r4, #8]
 80087e0:	4413      	add	r3, r2
 80087e2:	8123      	strh	r3, [r4, #8]
    q = q->next;
 80087e4:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80087e6:	2c00      	cmp	r4, #0
 80087e8:	d1f3      	bne.n	80087d2 <pbuf_realloc+0x36>
 80087ea:	4653      	mov	r3, sl
 80087ec:	f240 12af 	movw	r2, #431	; 0x1af
 80087f0:	4649      	mov	r1, r9
 80087f2:	4640      	mov	r0, r8
 80087f4:	f006 fb96 	bl	800ef24 <iprintf>
 80087f8:	e7eb      	b.n	80087d2 <pbuf_realloc+0x36>
  rem_len = new_len;
 80087fa:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80087fc:	7b22      	ldrb	r2, [r4, #12]
 80087fe:	f012 0f0f 	tst.w	r2, #15
 8008802:	d105      	bne.n	8008810 <pbuf_realloc+0x74>
 8008804:	42ab      	cmp	r3, r5
 8008806:	d003      	beq.n	8008810 <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008808:	7b63      	ldrb	r3, [r4, #13]
 800880a:	f013 0f02 	tst.w	r3, #2
 800880e:	d009      	beq.n	8008824 <pbuf_realloc+0x88>
  q->len = rem_len;
 8008810:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008812:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008814:	6820      	ldr	r0, [r4, #0]
 8008816:	b108      	cbz	r0, 800881c <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8008818:	f7ff fea8 	bl	800856c <pbuf_free>
  q->next = NULL;
 800881c:	2300      	movs	r3, #0
 800881e:	6023      	str	r3, [r4, #0]
}
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	1b1b      	subs	r3, r3, r4
 8008828:	18e9      	adds	r1, r5, r3
 800882a:	b289      	uxth	r1, r1
 800882c:	4620      	mov	r0, r4
 800882e:	f7ff f9b1 	bl	8007b94 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008832:	4604      	mov	r4, r0
 8008834:	2800      	cmp	r0, #0
 8008836:	d1eb      	bne.n	8008810 <pbuf_realloc+0x74>
 8008838:	4b03      	ldr	r3, [pc, #12]	; (8008848 <pbuf_realloc+0xac>)
 800883a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800883e:	4905      	ldr	r1, [pc, #20]	; (8008854 <pbuf_realloc+0xb8>)
 8008840:	4803      	ldr	r0, [pc, #12]	; (8008850 <pbuf_realloc+0xb4>)
 8008842:	f006 fb6f 	bl	800ef24 <iprintf>
 8008846:	e7e3      	b.n	8008810 <pbuf_realloc+0x74>
 8008848:	08011898 	.word	0x08011898
 800884c:	08011968 	.word	0x08011968
 8008850:	0800fe60 	.word	0x0800fe60
 8008854:	08011998 	.word	0x08011998
 8008858:	08011980 	.word	0x08011980

0800885c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 800885c:	4603      	mov	r3, r0
 800885e:	b130      	cbz	r0, 800886e <pbuf_clen+0x12>
  len = 0;
 8008860:	2000      	movs	r0, #0
    ++len;
 8008862:	3001      	adds	r0, #1
 8008864:	b280      	uxth	r0, r0
    p = p->next;
 8008866:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1fa      	bne.n	8008862 <pbuf_clen+0x6>
 800886c:	4770      	bx	lr
  len = 0;
 800886e:	2000      	movs	r0, #0
  }
  return len;
}
 8008870:	4770      	bx	lr
	...

08008874 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8008874:	b198      	cbz	r0, 800889e <pbuf_ref+0x2a>
{
 8008876:	b510      	push	{r4, lr}
 8008878:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800887a:	f006 f967 	bl	800eb4c <sys_arch_protect>
 800887e:	7ba3      	ldrb	r3, [r4, #14]
 8008880:	3301      	adds	r3, #1
 8008882:	73a3      	strb	r3, [r4, #14]
 8008884:	f006 f96e 	bl	800eb64 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008888:	7ba3      	ldrb	r3, [r4, #14]
 800888a:	b103      	cbz	r3, 800888e <pbuf_ref+0x1a>
  }
}
 800888c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800888e:	4b04      	ldr	r3, [pc, #16]	; (80088a0 <pbuf_ref+0x2c>)
 8008890:	f240 3242 	movw	r2, #834	; 0x342
 8008894:	4903      	ldr	r1, [pc, #12]	; (80088a4 <pbuf_ref+0x30>)
 8008896:	4804      	ldr	r0, [pc, #16]	; (80088a8 <pbuf_ref+0x34>)
 8008898:	f006 fb44 	bl	800ef24 <iprintf>
}
 800889c:	e7f6      	b.n	800888c <pbuf_ref+0x18>
 800889e:	4770      	bx	lr
 80088a0:	08011898 	.word	0x08011898
 80088a4:	080119b4 	.word	0x080119b4
 80088a8:	0800fe60 	.word	0x0800fe60

080088ac <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80088ac:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80088ae:	b130      	cbz	r0, 80088be <pbuf_cat+0x12>
 80088b0:	460d      	mov	r5, r1
 80088b2:	4602      	mov	r2, r0
 80088b4:	b119      	cbz	r1, 80088be <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80088b6:	6804      	ldr	r4, [r0, #0]
 80088b8:	b954      	cbnz	r4, 80088d0 <pbuf_cat+0x24>
 80088ba:	4604      	mov	r4, r0
 80088bc:	e010      	b.n	80088e0 <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80088be:	4b15      	ldr	r3, [pc, #84]	; (8008914 <pbuf_cat+0x68>)
 80088c0:	f240 3259 	movw	r2, #857	; 0x359
 80088c4:	4914      	ldr	r1, [pc, #80]	; (8008918 <pbuf_cat+0x6c>)
 80088c6:	4815      	ldr	r0, [pc, #84]	; (800891c <pbuf_cat+0x70>)
 80088c8:	f006 fb2c 	bl	800ef24 <iprintf>
 80088cc:	e021      	b.n	8008912 <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 80088ce:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088d0:	8913      	ldrh	r3, [r2, #8]
 80088d2:	8928      	ldrh	r0, [r5, #8]
 80088d4:	4403      	add	r3, r0
 80088d6:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	4622      	mov	r2, r4
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f6      	bne.n	80088ce <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80088e0:	8922      	ldrh	r2, [r4, #8]
 80088e2:	8963      	ldrh	r3, [r4, #10]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d00f      	beq.n	8008908 <pbuf_cat+0x5c>
 80088e8:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <pbuf_cat+0x68>)
 80088ea:	f240 3262 	movw	r2, #866	; 0x362
 80088ee:	490c      	ldr	r1, [pc, #48]	; (8008920 <pbuf_cat+0x74>)
 80088f0:	480a      	ldr	r0, [pc, #40]	; (800891c <pbuf_cat+0x70>)
 80088f2:	f006 fb17 	bl	800ef24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	b133      	cbz	r3, 8008908 <pbuf_cat+0x5c>
 80088fa:	4b06      	ldr	r3, [pc, #24]	; (8008914 <pbuf_cat+0x68>)
 80088fc:	f240 3263 	movw	r2, #867	; 0x363
 8008900:	4908      	ldr	r1, [pc, #32]	; (8008924 <pbuf_cat+0x78>)
 8008902:	4806      	ldr	r0, [pc, #24]	; (800891c <pbuf_cat+0x70>)
 8008904:	f006 fb0e 	bl	800ef24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008908:	8923      	ldrh	r3, [r4, #8]
 800890a:	892a      	ldrh	r2, [r5, #8]
 800890c:	4413      	add	r3, r2
 800890e:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008910:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8008912:	bd38      	pop	{r3, r4, r5, pc}
 8008914:	08011898 	.word	0x08011898
 8008918:	080119c8 	.word	0x080119c8
 800891c:	0800fe60 	.word	0x0800fe60
 8008920:	08011a00 	.word	0x08011a00
 8008924:	08011a30 	.word	0x08011a30

08008928 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800892c:	b178      	cbz	r0, 800894e <pbuf_copy+0x26>
 800892e:	460c      	mov	r4, r1
 8008930:	4606      	mov	r6, r0
 8008932:	b161      	cbz	r1, 800894e <pbuf_copy+0x26>
 8008934:	8902      	ldrh	r2, [r0, #8]
 8008936:	890b      	ldrh	r3, [r1, #8]
 8008938:	429a      	cmp	r2, r3
 800893a:	d308      	bcc.n	800894e <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 800893c:	2700      	movs	r7, #0
 800893e:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008940:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8008a50 <pbuf_copy+0x128>
 8008944:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008a68 <pbuf_copy+0x140>
 8008948:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008a58 <pbuf_copy+0x130>
 800894c:	e050      	b.n	80089f0 <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800894e:	4b40      	ldr	r3, [pc, #256]	; (8008a50 <pbuf_copy+0x128>)
 8008950:	f240 32c9 	movw	r2, #969	; 0x3c9
 8008954:	493f      	ldr	r1, [pc, #252]	; (8008a54 <pbuf_copy+0x12c>)
 8008956:	4840      	ldr	r0, [pc, #256]	; (8008a58 <pbuf_copy+0x130>)
 8008958:	f006 fae4 	bl	800ef24 <iprintf>
 800895c:	f06f 000f 	mvn.w	r0, #15
 8008960:	e016      	b.n	8008990 <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008962:	4653      	mov	r3, sl
 8008964:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008968:	4659      	mov	r1, fp
 800896a:	4648      	mov	r0, r9
 800896c:	f006 fada 	bl	800ef24 <iprintf>
 8008970:	e052      	b.n	8008a18 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008972:	4653      	mov	r3, sl
 8008974:	f240 32da 	movw	r2, #986	; 0x3da
 8008978:	4938      	ldr	r1, [pc, #224]	; (8008a5c <pbuf_copy+0x134>)
 800897a:	4648      	mov	r0, r9
 800897c:	f006 fad2 	bl	800ef24 <iprintf>
 8008980:	e04d      	b.n	8008a1e <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 8008982:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008984:	b116      	cbz	r6, 800898c <pbuf_copy+0x64>
      offset_to = 0;
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	e050      	b.n	8008a2e <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800898c:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800898e:	b90c      	cbnz	r4, 8008994 <pbuf_copy+0x6c>
}
 8008990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008994:	4b2e      	ldr	r3, [pc, #184]	; (8008a50 <pbuf_copy+0x128>)
 8008996:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800899a:	4931      	ldr	r1, [pc, #196]	; (8008a60 <pbuf_copy+0x138>)
 800899c:	482e      	ldr	r0, [pc, #184]	; (8008a58 <pbuf_copy+0x130>)
 800899e:	f006 fac1 	bl	800ef24 <iprintf>
 80089a2:	f06f 000f 	mvn.w	r0, #15
 80089a6:	e7f3      	b.n	8008990 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d045      	beq.n	8008a3a <pbuf_copy+0x112>
 80089ae:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <pbuf_copy+0x128>)
 80089b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80089b4:	492b      	ldr	r1, [pc, #172]	; (8008a64 <pbuf_copy+0x13c>)
 80089b6:	4828      	ldr	r0, [pc, #160]	; (8008a58 <pbuf_copy+0x130>)
 80089b8:	f006 fab4 	bl	800ef24 <iprintf>
 80089bc:	f06f 0005 	mvn.w	r0, #5
 80089c0:	e7e6      	b.n	8008990 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089c2:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <pbuf_copy+0x128>)
 80089c4:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80089c8:	4926      	ldr	r1, [pc, #152]	; (8008a64 <pbuf_copy+0x13c>)
 80089ca:	4823      	ldr	r0, [pc, #140]	; (8008a58 <pbuf_copy+0x130>)
 80089cc:	f006 faaa 	bl	800ef24 <iprintf>
 80089d0:	f06f 0005 	mvn.w	r0, #5
 80089d4:	e7dc      	b.n	8008990 <pbuf_copy+0x68>
  return ERR_OK;
 80089d6:	2000      	movs	r0, #0
 80089d8:	e7da      	b.n	8008990 <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d034      	beq.n	8008a48 <pbuf_copy+0x120>
 80089de:	8972      	ldrh	r2, [r6, #10]
 80089e0:	8933      	ldrh	r3, [r6, #8]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d132      	bne.n	8008a4c <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80089e6:	6833      	ldr	r3, [r6, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1ea      	bne.n	80089c2 <pbuf_copy+0x9a>
  } while (p_from);
 80089ec:	2c00      	cmp	r4, #0
 80089ee:	d0f2      	beq.n	80089d6 <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80089f0:	8975      	ldrh	r5, [r6, #10]
 80089f2:	eba5 0508 	sub.w	r5, r5, r8
 80089f6:	8963      	ldrh	r3, [r4, #10]
 80089f8:	1bdb      	subs	r3, r3, r7
 80089fa:	429d      	cmp	r5, r3
 80089fc:	bf28      	it	cs
 80089fe:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008a00:	6870      	ldr	r0, [r6, #4]
 8008a02:	6861      	ldr	r1, [r4, #4]
 8008a04:	462a      	mov	r2, r5
 8008a06:	4439      	add	r1, r7
 8008a08:	4440      	add	r0, r8
 8008a0a:	f006 f9e0 	bl	800edce <memcpy>
    offset_to += len;
 8008a0e:	44a8      	add	r8, r5
    offset_from += len;
 8008a10:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008a12:	8973      	ldrh	r3, [r6, #10]
 8008a14:	4543      	cmp	r3, r8
 8008a16:	d3a4      	bcc.n	8008962 <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008a18:	8963      	ldrh	r3, [r4, #10]
 8008a1a:	42bb      	cmp	r3, r7
 8008a1c:	d3a9      	bcc.n	8008972 <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 8008a1e:	8963      	ldrh	r3, [r4, #10]
 8008a20:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 8008a22:	bf9c      	itt	ls
 8008a24:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8008a26:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 8008a28:	8973      	ldrh	r3, [r6, #10]
 8008a2a:	4543      	cmp	r3, r8
 8008a2c:	d0a9      	beq.n	8008982 <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	d0d3      	beq.n	80089da <pbuf_copy+0xb2>
 8008a32:	8962      	ldrh	r2, [r4, #10]
 8008a34:	8923      	ldrh	r3, [r4, #8]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d0b6      	beq.n	80089a8 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008a3a:	2e00      	cmp	r6, #0
 8008a3c:	d0d8      	beq.n	80089f0 <pbuf_copy+0xc8>
 8008a3e:	8972      	ldrh	r2, [r6, #10]
 8008a40:	8933      	ldrh	r3, [r6, #8]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d1d4      	bne.n	80089f0 <pbuf_copy+0xc8>
 8008a46:	e7ce      	b.n	80089e6 <pbuf_copy+0xbe>
  return ERR_OK;
 8008a48:	2000      	movs	r0, #0
 8008a4a:	e7a1      	b.n	8008990 <pbuf_copy+0x68>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	e79f      	b.n	8008990 <pbuf_copy+0x68>
 8008a50:	08011898 	.word	0x08011898
 8008a54:	08011a40 	.word	0x08011a40
 8008a58:	0800fe60 	.word	0x0800fe60
 8008a5c:	08011a88 	.word	0x08011a88
 8008a60:	08011aa4 	.word	0x08011aa4
 8008a64:	08011ab4 	.word	0x08011ab4
 8008a68:	08011a70 	.word	0x08011a70

08008a6c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008a6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a70:	b148      	cbz	r0, 8008a86 <pbuf_copy_partial+0x1a>
 8008a72:	4688      	mov	r8, r1
 8008a74:	4692      	mov	sl, r2
 8008a76:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a78:	b181      	cbz	r1, 8008a9c <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8008a7a:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a7c:	b15a      	cbz	r2, 8008a96 <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8008a7e:	2700      	movs	r7, #0
  u16_t left = 0;
 8008a80:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 8008a82:	46b9      	mov	r9, r7
 8008a84:	e02f      	b.n	8008ae6 <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a86:	4b1c      	ldr	r3, [pc, #112]	; (8008af8 <pbuf_copy_partial+0x8c>)
 8008a88:	f240 420a 	movw	r2, #1034	; 0x40a
 8008a8c:	491b      	ldr	r1, [pc, #108]	; (8008afc <pbuf_copy_partial+0x90>)
 8008a8e:	481c      	ldr	r0, [pc, #112]	; (8008b00 <pbuf_copy_partial+0x94>)
 8008a90:	f006 fa48 	bl	800ef24 <iprintf>
 8008a94:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 8008a96:	4638      	mov	r0, r7
 8008a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a9c:	4b16      	ldr	r3, [pc, #88]	; (8008af8 <pbuf_copy_partial+0x8c>)
 8008a9e:	f240 420b 	movw	r2, #1035	; 0x40b
 8008aa2:	4918      	ldr	r1, [pc, #96]	; (8008b04 <pbuf_copy_partial+0x98>)
 8008aa4:	4816      	ldr	r0, [pc, #88]	; (8008b00 <pbuf_copy_partial+0x94>)
 8008aa6:	f006 fa3d 	bl	800ef24 <iprintf>
 8008aaa:	2700      	movs	r7, #0
 8008aac:	e7f3      	b.n	8008a96 <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 8008aae:	896c      	ldrh	r4, [r5, #10]
 8008ab0:	1ae4      	subs	r4, r4, r3
 8008ab2:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8008ab4:	4554      	cmp	r4, sl
 8008ab6:	bf28      	it	cs
 8008ab8:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008aba:	6869      	ldr	r1, [r5, #4]
 8008abc:	4622      	mov	r2, r4
 8008abe:	4419      	add	r1, r3
 8008ac0:	eb08 0006 	add.w	r0, r8, r6
 8008ac4:	f006 f983 	bl	800edce <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008ac8:	4427      	add	r7, r4
 8008aca:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8008acc:	4426      	add	r6, r4
 8008ace:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8008ad0:	ebaa 0404 	sub.w	r4, sl, r4
 8008ad4:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 8008ad8:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008ada:	682d      	ldr	r5, [r5, #0]
 8008adc:	f1ba 0f00 	cmp.w	sl, #0
 8008ae0:	d0d9      	beq.n	8008a96 <pbuf_copy_partial+0x2a>
 8008ae2:	2d00      	cmp	r5, #0
 8008ae4:	d0d7      	beq.n	8008a96 <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0e1      	beq.n	8008aae <pbuf_copy_partial+0x42>
 8008aea:	896a      	ldrh	r2, [r5, #10]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d8de      	bhi.n	8008aae <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 8008af0:	1a9b      	subs	r3, r3, r2
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	e7f1      	b.n	8008ada <pbuf_copy_partial+0x6e>
 8008af6:	bf00      	nop
 8008af8:	08011898 	.word	0x08011898
 8008afc:	08011ae0 	.word	0x08011ae0
 8008b00:	0800fe60 	.word	0x0800fe60
 8008b04:	08011b00 	.word	0x08011b00

08008b08 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008b0c:	460a      	mov	r2, r1
 8008b0e:	8921      	ldrh	r1, [r4, #8]
 8008b10:	f7ff fd9c 	bl	800864c <pbuf_alloc>
  if (q == NULL) {
 8008b14:	4605      	mov	r5, r0
 8008b16:	b118      	cbz	r0, 8008b20 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008b18:	4621      	mov	r1, r4
 8008b1a:	f7ff ff05 	bl	8008928 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008b1e:	b908      	cbnz	r0, 8008b24 <pbuf_clone+0x1c>
  return q;
}
 8008b20:	4628      	mov	r0, r5
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008b24:	4b03      	ldr	r3, [pc, #12]	; (8008b34 <pbuf_clone+0x2c>)
 8008b26:	f240 5224 	movw	r2, #1316	; 0x524
 8008b2a:	4903      	ldr	r1, [pc, #12]	; (8008b38 <pbuf_clone+0x30>)
 8008b2c:	4803      	ldr	r0, [pc, #12]	; (8008b3c <pbuf_clone+0x34>)
 8008b2e:	f006 f9f9 	bl	800ef24 <iprintf>
 8008b32:	e7f5      	b.n	8008b20 <pbuf_clone+0x18>
 8008b34:	08011898 	.word	0x08011898
 8008b38:	08011b24 	.word	0x08011b24
 8008b3c:	0800fe60 	.word	0x0800fe60

08008b40 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008b40:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 8008b42:	4b13      	ldr	r3, [pc, #76]	; (8008b90 <tcp_new_port+0x50>)
 8008b44:	8818      	ldrh	r0, [r3, #0]
{
 8008b46:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008b4a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8008b4e:	e002      	b.n	8008b56 <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008b50:	3c01      	subs	r4, #1
 8008b52:	b2a4      	uxth	r4, r4
 8008b54:	b1bc      	cbz	r4, 8008b86 <tcp_new_port+0x46>
  tcp_port++;
 8008b56:	3001      	adds	r0, #1
 8008b58:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008b5a:	4570      	cmp	r0, lr
 8008b5c:	bf08      	it	eq
 8008b5e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008b62:	490c      	ldr	r1, [pc, #48]	; (8008b94 <tcp_new_port+0x54>)
 8008b64:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008b68:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	b12b      	cbz	r3, 8008b7c <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8008b70:	8ada      	ldrh	r2, [r3, #22]
 8008b72:	4282      	cmp	r2, r0
 8008b74:	d0ec      	beq.n	8008b50 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d1f9      	bne.n	8008b70 <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008b7c:	4561      	cmp	r1, ip
 8008b7e:	d1f3      	bne.n	8008b68 <tcp_new_port+0x28>
 8008b80:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <tcp_new_port+0x50>)
 8008b82:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8008b84:	bd10      	pop	{r4, pc}
 8008b86:	4b02      	ldr	r3, [pc, #8]	; (8008b90 <tcp_new_port+0x50>)
 8008b88:	8018      	strh	r0, [r3, #0]
          return 0;
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	e7fa      	b.n	8008b84 <tcp_new_port+0x44>
 8008b8e:	bf00      	nop
 8008b90:	20000028 	.word	0x20000028
 8008b94:	080121c4 	.word	0x080121c4

08008b98 <tcp_close_shutdown_fin>:
{
 8008b98:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	b140      	cbz	r0, 8008bb0 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8008b9e:	7d23      	ldrb	r3, [r4, #20]
 8008ba0:	2b04      	cmp	r3, #4
 8008ba2:	d018      	beq.n	8008bd6 <tcp_close_shutdown_fin+0x3e>
 8008ba4:	2b07      	cmp	r3, #7
 8008ba6:	d01d      	beq.n	8008be4 <tcp_close_shutdown_fin+0x4c>
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d009      	beq.n	8008bc0 <tcp_close_shutdown_fin+0x28>
 8008bac:	2000      	movs	r0, #0
}
 8008bae:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008bb0:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <tcp_close_shutdown_fin+0x6c>)
 8008bb2:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008bb6:	4914      	ldr	r1, [pc, #80]	; (8008c08 <tcp_close_shutdown_fin+0x70>)
 8008bb8:	4814      	ldr	r0, [pc, #80]	; (8008c0c <tcp_close_shutdown_fin+0x74>)
 8008bba:	f006 f9b3 	bl	800ef24 <iprintf>
 8008bbe:	e7ee      	b.n	8008b9e <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f003 fbe3 	bl	800c38c <tcp_send_fin>
      if (err == ERR_OK) {
 8008bc6:	b9a0      	cbnz	r0, 8008bf2 <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8008bc8:	2305      	movs	r3, #5
 8008bca:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f003 fd63 	bl	800c698 <tcp_output>
  return err;
 8008bd2:	2000      	movs	r0, #0
 8008bd4:	e7eb      	b.n	8008bae <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f003 fbd8 	bl	800c38c <tcp_send_fin>
      if (err == ERR_OK) {
 8008bdc:	b948      	cbnz	r0, 8008bf2 <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8008bde:	2305      	movs	r3, #5
 8008be0:	7523      	strb	r3, [r4, #20]
 8008be2:	e7f3      	b.n	8008bcc <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8008be4:	4620      	mov	r0, r4
 8008be6:	f003 fbd1 	bl	800c38c <tcp_send_fin>
      if (err == ERR_OK) {
 8008bea:	b910      	cbnz	r0, 8008bf2 <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 8008bec:	2309      	movs	r3, #9
 8008bee:	7523      	strb	r3, [r4, #20]
 8008bf0:	e7ec      	b.n	8008bcc <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8008bf2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008bf6:	d1da      	bne.n	8008bae <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008bf8:	8b63      	ldrh	r3, [r4, #26]
 8008bfa:	f043 0308 	orr.w	r3, r3, #8
 8008bfe:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8008c00:	2000      	movs	r0, #0
 8008c02:	e7d4      	b.n	8008bae <tcp_close_shutdown_fin+0x16>
 8008c04:	08011b38 	.word	0x08011b38
 8008c08:	08011b68 	.word	0x08011b68
 8008c0c:	0800fe60 	.word	0x0800fe60

08008c10 <tcp_init>:
{
 8008c10:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008c12:	f006 f99f 	bl	800ef54 <rand>
 8008c16:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008c1a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008c1e:	4b01      	ldr	r3, [pc, #4]	; (8008c24 <tcp_init+0x14>)
 8008c20:	8018      	strh	r0, [r3, #0]
}
 8008c22:	bd08      	pop	{r3, pc}
 8008c24:	20000028 	.word	0x20000028

08008c28 <tcp_free>:
{
 8008c28:	b510      	push	{r4, lr}
 8008c2a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008c2c:	7d03      	ldrb	r3, [r0, #20]
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d004      	beq.n	8008c3c <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 8008c32:	4621      	mov	r1, r4
 8008c34:	2001      	movs	r0, #1
 8008c36:	f7ff f9d7 	bl	8007fe8 <memp_free>
}
 8008c3a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008c3c:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <tcp_free+0x24>)
 8008c3e:	22d4      	movs	r2, #212	; 0xd4
 8008c40:	4903      	ldr	r1, [pc, #12]	; (8008c50 <tcp_free+0x28>)
 8008c42:	4804      	ldr	r0, [pc, #16]	; (8008c54 <tcp_free+0x2c>)
 8008c44:	f006 f96e 	bl	800ef24 <iprintf>
 8008c48:	e7f3      	b.n	8008c32 <tcp_free+0xa>
 8008c4a:	bf00      	nop
 8008c4c:	08011b38 	.word	0x08011b38
 8008c50:	08011b74 	.word	0x08011b74
 8008c54:	0800fe60 	.word	0x0800fe60

08008c58 <tcp_bind>:
{
 8008c58:	b570      	push	{r4, r5, r6, lr}
    ipaddr = IP4_ADDR_ANY;
 8008c5a:	4c2a      	ldr	r4, [pc, #168]	; (8008d04 <tcp_bind+0xac>)
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	bf18      	it	ne
 8008c60:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c62:	b168      	cbz	r0, 8008c80 <tcp_bind+0x28>
 8008c64:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008c66:	7d03      	ldrb	r3, [r0, #20]
 8008c68:	b9a3      	cbnz	r3, 8008c94 <tcp_bind+0x3c>
  if (port == 0) {
 8008c6a:	b1ea      	cbz	r2, 8008ca8 <tcp_bind+0x50>
 8008c6c:	4e26      	ldr	r6, [pc, #152]	; (8008d08 <tcp_bind+0xb0>)
 8008c6e:	f106 0c10 	add.w	ip, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c72:	f856 3b04 	ldr.w	r3, [r6], #4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	bb53      	cbnz	r3, 8008cd0 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8008c7a:	4566      	cmp	r6, ip
 8008c7c:	d1f9      	bne.n	8008c72 <tcp_bind+0x1a>
 8008c7e:	e017      	b.n	8008cb0 <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c80:	4b22      	ldr	r3, [pc, #136]	; (8008d0c <tcp_bind+0xb4>)
 8008c82:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008c86:	4922      	ldr	r1, [pc, #136]	; (8008d10 <tcp_bind+0xb8>)
 8008c88:	4822      	ldr	r0, [pc, #136]	; (8008d14 <tcp_bind+0xbc>)
 8008c8a:	f006 f94b 	bl	800ef24 <iprintf>
 8008c8e:	f06f 000f 	mvn.w	r0, #15
 8008c92:	e019      	b.n	8008cc8 <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008c94:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <tcp_bind+0xb4>)
 8008c96:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008c9a:	491f      	ldr	r1, [pc, #124]	; (8008d18 <tcp_bind+0xc0>)
 8008c9c:	481d      	ldr	r0, [pc, #116]	; (8008d14 <tcp_bind+0xbc>)
 8008c9e:	f006 f941 	bl	800ef24 <iprintf>
 8008ca2:	f06f 0005 	mvn.w	r0, #5
 8008ca6:	e00f      	b.n	8008cc8 <tcp_bind+0x70>
    port = tcp_new_port();
 8008ca8:	f7ff ff4a 	bl	8008b40 <tcp_new_port>
    if (port == 0) {
 8008cac:	4602      	mov	r2, r0
 8008cae:	b1e0      	cbz	r0, 8008cea <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 8008cb0:	b114      	cbz	r4, 8008cb8 <tcp_bind+0x60>
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	b103      	cbz	r3, 8008cb8 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008cb6:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8008cb8:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008cba:	4b18      	ldr	r3, [pc, #96]	; (8008d1c <tcp_bind+0xc4>)
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	60ea      	str	r2, [r5, #12]
 8008cc0:	601d      	str	r5, [r3, #0]
 8008cc2:	f003 fff9 	bl	800ccb8 <tcp_timer_needed>
  return ERR_OK;
 8008cc6:	2000      	movs	r0, #0
}
 8008cc8:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0d4      	beq.n	8008c7a <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 8008cd0:	8ad9      	ldrh	r1, [r3, #22]
 8008cd2:	4291      	cmp	r1, r2
 8008cd4:	d1f9      	bne.n	8008cca <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008cd6:	6819      	ldr	r1, [r3, #0]
 8008cd8:	b151      	cbz	r1, 8008cf0 <tcp_bind+0x98>
 8008cda:	b164      	cbz	r4, 8008cf6 <tcp_bind+0x9e>
                 ip_addr_isany(ipaddr) ||
 8008cdc:	6820      	ldr	r0, [r4, #0]
 8008cde:	b168      	cbz	r0, 8008cfc <tcp_bind+0xa4>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008ce0:	4281      	cmp	r1, r0
 8008ce2:	d1f2      	bne.n	8008cca <tcp_bind+0x72>
              return ERR_USE;
 8008ce4:	f06f 0007 	mvn.w	r0, #7
 8008ce8:	e7ee      	b.n	8008cc8 <tcp_bind+0x70>
      return ERR_BUF;
 8008cea:	f06f 0001 	mvn.w	r0, #1
 8008cee:	e7eb      	b.n	8008cc8 <tcp_bind+0x70>
              return ERR_USE;
 8008cf0:	f06f 0007 	mvn.w	r0, #7
 8008cf4:	e7e8      	b.n	8008cc8 <tcp_bind+0x70>
 8008cf6:	f06f 0007 	mvn.w	r0, #7
 8008cfa:	e7e5      	b.n	8008cc8 <tcp_bind+0x70>
 8008cfc:	f06f 0007 	mvn.w	r0, #7
 8008d00:	e7e2      	b.n	8008cc8 <tcp_bind+0x70>
 8008d02:	bf00      	nop
 8008d04:	080131e4 	.word	0x080131e4
 8008d08:	080121c4 	.word	0x080121c4
 8008d0c:	08011b38 	.word	0x08011b38
 8008d10:	08011b88 	.word	0x08011b88
 8008d14:	0800fe60 	.word	0x0800fe60
 8008d18:	08011ba0 	.word	0x08011ba0
 8008d1c:	200107d4 	.word	0x200107d4

08008d20 <tcp_listen_with_backlog_and_err>:
{
 8008d20:	b570      	push	{r4, r5, r6, lr}
 8008d22:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d24:	4604      	mov	r4, r0
 8008d26:	b330      	cbz	r0, 8008d76 <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008d28:	7d03      	ldrb	r3, [r0, #20]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d12e      	bne.n	8008d8c <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008d2e:	2002      	movs	r0, #2
 8008d30:	f7ff f92a 	bl	8007f88 <memp_malloc>
  if (lpcb == NULL) {
 8008d34:	4605      	mov	r5, r0
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d04b      	beq.n	8008dd2 <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008d3e:	8ae3      	ldrh	r3, [r4, #22]
 8008d40:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008d42:	2301      	movs	r3, #1
 8008d44:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8008d46:	7d63      	ldrb	r3, [r4, #21]
 8008d48:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008d4a:	7a63      	ldrb	r3, [r4, #9]
 8008d4c:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8008d52:	7ae3      	ldrb	r3, [r4, #11]
 8008d54:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 8008d56:	7aa3      	ldrb	r3, [r4, #10]
 8008d58:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8008d5e:	8ae3      	ldrh	r3, [r4, #22]
 8008d60:	b33b      	cbz	r3, 8008db2 <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d62:	4b1d      	ldr	r3, [pc, #116]	; (8008dd8 <tcp_listen_with_backlog_and_err+0xb8>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	42a3      	cmp	r3, r4
 8008d68:	d01b      	beq.n	8008da2 <tcp_listen_with_backlog_and_err+0x82>
 8008d6a:	b303      	cbz	r3, 8008dae <tcp_listen_with_backlog_and_err+0x8e>
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	42a2      	cmp	r2, r4
 8008d70:	d01b      	beq.n	8008daa <tcp_listen_with_backlog_and_err+0x8a>
 8008d72:	4613      	mov	r3, r2
 8008d74:	e7f9      	b.n	8008d6a <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <tcp_listen_with_backlog_and_err+0xbc>)
 8008d78:	f240 3259 	movw	r2, #857	; 0x359
 8008d7c:	4918      	ldr	r1, [pc, #96]	; (8008de0 <tcp_listen_with_backlog_and_err+0xc0>)
 8008d7e:	4819      	ldr	r0, [pc, #100]	; (8008de4 <tcp_listen_with_backlog_and_err+0xc4>)
 8008d80:	f006 f8d0 	bl	800ef24 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8008d84:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d86:	f06f 030f 	mvn.w	r3, #15
 8008d8a:	e01e      	b.n	8008dca <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008d8c:	4b13      	ldr	r3, [pc, #76]	; (8008ddc <tcp_listen_with_backlog_and_err+0xbc>)
 8008d8e:	f240 325a 	movw	r2, #858	; 0x35a
 8008d92:	4915      	ldr	r1, [pc, #84]	; (8008de8 <tcp_listen_with_backlog_and_err+0xc8>)
 8008d94:	4813      	ldr	r0, [pc, #76]	; (8008de4 <tcp_listen_with_backlog_and_err+0xc4>)
 8008d96:	f006 f8c5 	bl	800ef24 <iprintf>
 8008d9a:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008d9e:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008da0:	e013      	b.n	8008dca <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008da2:	68e2      	ldr	r2, [r4, #12]
 8008da4:	4b0c      	ldr	r3, [pc, #48]	; (8008dd8 <tcp_listen_with_backlog_and_err+0xb8>)
 8008da6:	601a      	str	r2, [r3, #0]
 8008da8:	e001      	b.n	8008dae <tcp_listen_with_backlog_and_err+0x8e>
 8008daa:	68e2      	ldr	r2, [r4, #12]
 8008dac:	60da      	str	r2, [r3, #12]
 8008dae:	2300      	movs	r3, #0
 8008db0:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8008db2:	4620      	mov	r0, r4
 8008db4:	f7ff ff38 	bl	8008c28 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008db8:	4b0c      	ldr	r3, [pc, #48]	; (8008dec <tcp_listen_with_backlog_and_err+0xcc>)
 8008dba:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <tcp_listen_with_backlog_and_err+0xd0>)
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	60ea      	str	r2, [r5, #12]
 8008dc2:	601d      	str	r5, [r3, #0]
 8008dc4:	f003 ff78 	bl	800ccb8 <tcp_timer_needed>
  res = ERR_OK;
 8008dc8:	2300      	movs	r3, #0
  if (err != NULL) {
 8008dca:	b106      	cbz	r6, 8008dce <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 8008dcc:	7033      	strb	r3, [r6, #0]
}
 8008dce:	4628      	mov	r0, r5
 8008dd0:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dd6:	e7f8      	b.n	8008dca <tcp_listen_with_backlog_and_err+0xaa>
 8008dd8:	200107d4 	.word	0x200107d4
 8008ddc:	08011b38 	.word	0x08011b38
 8008de0:	08011bc8 	.word	0x08011bc8
 8008de4:	0800fe60 	.word	0x0800fe60
 8008de8:	08011bf8 	.word	0x08011bf8
 8008dec:	08009325 	.word	0x08009325
 8008df0:	200107d8 	.word	0x200107d8

08008df4 <tcp_update_rcv_ann_wnd>:
{
 8008df4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008df6:	4604      	mov	r4, r0
 8008df8:	b188      	cbz	r0, 8008e1e <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008dfa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008dfc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008dfe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008e00:	1950      	adds	r0, r2, r5
 8008e02:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008e04:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 8008e08:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 8008e0c:	bf94      	ite	ls
 8008e0e:	eba0 010c 	subls.w	r1, r0, ip
 8008e12:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 8008e16:	2900      	cmp	r1, #0
 8008e18:	db09      	blt.n	8008e2e <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008e1a:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8008e1c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008e1e:	4b0e      	ldr	r3, [pc, #56]	; (8008e58 <tcp_update_rcv_ann_wnd+0x64>)
 8008e20:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008e24:	490d      	ldr	r1, [pc, #52]	; (8008e5c <tcp_update_rcv_ann_wnd+0x68>)
 8008e26:	480e      	ldr	r0, [pc, #56]	; (8008e60 <tcp_update_rcv_ann_wnd+0x6c>)
 8008e28:	f006 f87c 	bl	800ef24 <iprintf>
 8008e2c:	e7e5      	b.n	8008dfa <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008e2e:	1aea      	subs	r2, r5, r3
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	dd02      	ble.n	8008e3a <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8008e34:	2000      	movs	r0, #0
 8008e36:	8560      	strh	r0, [r4, #42]	; 0x2a
 8008e38:	e7f0      	b.n	8008e1c <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008e3a:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008e3c:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008e40:	d202      	bcs.n	8008e48 <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008e42:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008e44:	2000      	movs	r0, #0
 8008e46:	e7e9      	b.n	8008e1c <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008e48:	4b03      	ldr	r3, [pc, #12]	; (8008e58 <tcp_update_rcv_ann_wnd+0x64>)
 8008e4a:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008e4e:	4905      	ldr	r1, [pc, #20]	; (8008e64 <tcp_update_rcv_ann_wnd+0x70>)
 8008e50:	4803      	ldr	r0, [pc, #12]	; (8008e60 <tcp_update_rcv_ann_wnd+0x6c>)
 8008e52:	f006 f867 	bl	800ef24 <iprintf>
 8008e56:	e7f4      	b.n	8008e42 <tcp_update_rcv_ann_wnd+0x4e>
 8008e58:	08011b38 	.word	0x08011b38
 8008e5c:	08011c30 	.word	0x08011c30
 8008e60:	0800fe60 	.word	0x0800fe60
 8008e64:	08011c54 	.word	0x08011c54

08008e68 <tcp_recved>:
{
 8008e68:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008e6a:	b178      	cbz	r0, 8008e8c <tcp_recved+0x24>
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008e70:	7d03      	ldrb	r3, [r0, #20]
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d012      	beq.n	8008e9c <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008e76:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8008e78:	1919      	adds	r1, r3, r4
 8008e7a:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008e7c:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008e80:	d814      	bhi.n	8008eac <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008e82:	428b      	cmp	r3, r1
 8008e84:	bf88      	it	hi
 8008e86:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8008e8a:	e011      	b.n	8008eb0 <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008e8c:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <tcp_recved+0x68>)
 8008e8e:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008e92:	4910      	ldr	r1, [pc, #64]	; (8008ed4 <tcp_recved+0x6c>)
 8008e94:	4810      	ldr	r0, [pc, #64]	; (8008ed8 <tcp_recved+0x70>)
 8008e96:	f006 f845 	bl	800ef24 <iprintf>
 8008e9a:	e010      	b.n	8008ebe <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <tcp_recved+0x68>)
 8008e9e:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008ea2:	490e      	ldr	r1, [pc, #56]	; (8008edc <tcp_recved+0x74>)
 8008ea4:	480c      	ldr	r0, [pc, #48]	; (8008ed8 <tcp_recved+0x70>)
 8008ea6:	f006 f83d 	bl	800ef24 <iprintf>
 8008eaa:	e7e4      	b.n	8008e76 <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008eac:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8008eb0:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7ff ff9e 	bl	8008df4 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008eb8:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008ebc:	d200      	bcs.n	8008ec0 <tcp_recved+0x58>
}
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8008ec0:	8b6b      	ldrh	r3, [r5, #26]
 8008ec2:	f043 0302 	orr.w	r3, r3, #2
 8008ec6:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f003 fbe5 	bl	800c698 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 8008ece:	e7f6      	b.n	8008ebe <tcp_recved+0x56>
 8008ed0:	08011b38 	.word	0x08011b38
 8008ed4:	08011c70 	.word	0x08011c70
 8008ed8:	0800fe60 	.word	0x0800fe60
 8008edc:	08011c88 	.word	0x08011c88

08008ee0 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8008ee0:	b150      	cbz	r0, 8008ef8 <tcp_seg_free+0x18>
{
 8008ee2:	b510      	push	{r4, lr}
 8008ee4:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8008ee6:	6840      	ldr	r0, [r0, #4]
 8008ee8:	b108      	cbz	r0, 8008eee <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008eea:	f7ff fb3f 	bl	800856c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008eee:	4621      	mov	r1, r4
 8008ef0:	2003      	movs	r0, #3
 8008ef2:	f7ff f879 	bl	8007fe8 <memp_free>
  }
}
 8008ef6:	bd10      	pop	{r4, pc}
 8008ef8:	4770      	bx	lr

08008efa <tcp_segs_free>:
{
 8008efa:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8008efc:	4604      	mov	r4, r0
 8008efe:	b128      	cbz	r0, 8008f0c <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 8008f00:	4620      	mov	r0, r4
 8008f02:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8008f04:	f7ff ffec 	bl	8008ee0 <tcp_seg_free>
  while (seg != NULL) {
 8008f08:	2c00      	cmp	r4, #0
 8008f0a:	d1f9      	bne.n	8008f00 <tcp_segs_free+0x6>
}
 8008f0c:	bd10      	pop	{r4, pc}
	...

08008f10 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008f10:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008f12:	4605      	mov	r5, r0
 8008f14:	b188      	cbz	r0, 8008f3a <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008f16:	2003      	movs	r0, #3
 8008f18:	f7ff f836 	bl	8007f88 <memp_malloc>
  if (cseg == NULL) {
 8008f1c:	4604      	mov	r4, r0
 8008f1e:	b150      	cbz	r0, 8008f36 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008f20:	6828      	ldr	r0, [r5, #0]
 8008f22:	6869      	ldr	r1, [r5, #4]
 8008f24:	68aa      	ldr	r2, [r5, #8]
 8008f26:	68eb      	ldr	r3, [r5, #12]
 8008f28:	6020      	str	r0, [r4, #0]
 8008f2a:	6061      	str	r1, [r4, #4]
 8008f2c:	60a2      	str	r2, [r4, #8]
 8008f2e:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8008f30:	6860      	ldr	r0, [r4, #4]
 8008f32:	f7ff fc9f 	bl	8008874 <pbuf_ref>
  return cseg;
}
 8008f36:	4620      	mov	r0, r4
 8008f38:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008f3a:	4b04      	ldr	r3, [pc, #16]	; (8008f4c <tcp_seg_copy+0x3c>)
 8008f3c:	f240 6282 	movw	r2, #1666	; 0x682
 8008f40:	4903      	ldr	r1, [pc, #12]	; (8008f50 <tcp_seg_copy+0x40>)
 8008f42:	4804      	ldr	r0, [pc, #16]	; (8008f54 <tcp_seg_copy+0x44>)
 8008f44:	f005 ffee 	bl	800ef24 <iprintf>
 8008f48:	e7e5      	b.n	8008f16 <tcp_seg_copy+0x6>
 8008f4a:	bf00      	nop
 8008f4c:	08011b38 	.word	0x08011b38
 8008f50:	08011cb0 	.word	0x08011cb0
 8008f54:	0800fe60 	.word	0x0800fe60

08008f58 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008f58:	b100      	cbz	r0, 8008f5c <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008f5a:	6101      	str	r1, [r0, #16]
  }
}
 8008f5c:	4770      	bx	lr
	...

08008f60 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f60:	b180      	cbz	r0, 8008f84 <tcp_recv+0x24>
{
 8008f62:	b538      	push	{r3, r4, r5, lr}
 8008f64:	460c      	mov	r4, r1
 8008f66:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008f68:	7d03      	ldrb	r3, [r0, #20]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d002      	beq.n	8008f74 <tcp_recv+0x14>
    pcb->recv = recv;
 8008f6e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 8008f72:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008f74:	4b04      	ldr	r3, [pc, #16]	; (8008f88 <tcp_recv+0x28>)
 8008f76:	f240 72df 	movw	r2, #2015	; 0x7df
 8008f7a:	4904      	ldr	r1, [pc, #16]	; (8008f8c <tcp_recv+0x2c>)
 8008f7c:	4804      	ldr	r0, [pc, #16]	; (8008f90 <tcp_recv+0x30>)
 8008f7e:	f005 ffd1 	bl	800ef24 <iprintf>
 8008f82:	e7f4      	b.n	8008f6e <tcp_recv+0xe>
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	08011b38 	.word	0x08011b38
 8008f8c:	08011ccc 	.word	0x08011ccc
 8008f90:	0800fe60 	.word	0x0800fe60

08008f94 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f94:	b180      	cbz	r0, 8008fb8 <tcp_sent+0x24>
{
 8008f96:	b538      	push	{r3, r4, r5, lr}
 8008f98:	460c      	mov	r4, r1
 8008f9a:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008f9c:	7d03      	ldrb	r3, [r0, #20]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d002      	beq.n	8008fa8 <tcp_sent+0x14>
    pcb->sent = sent;
 8008fa2:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008fa8:	4b04      	ldr	r3, [pc, #16]	; (8008fbc <tcp_sent+0x28>)
 8008faa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008fae:	4904      	ldr	r1, [pc, #16]	; (8008fc0 <tcp_sent+0x2c>)
 8008fb0:	4804      	ldr	r0, [pc, #16]	; (8008fc4 <tcp_sent+0x30>)
 8008fb2:	f005 ffb7 	bl	800ef24 <iprintf>
 8008fb6:	e7f4      	b.n	8008fa2 <tcp_sent+0xe>
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	08011b38 	.word	0x08011b38
 8008fc0:	08011cf4 	.word	0x08011cf4
 8008fc4:	0800fe60 	.word	0x0800fe60

08008fc8 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008fc8:	b180      	cbz	r0, 8008fec <tcp_err+0x24>
{
 8008fca:	b538      	push	{r3, r4, r5, lr}
 8008fcc:	460c      	mov	r4, r1
 8008fce:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008fd0:	7d03      	ldrb	r3, [r0, #20]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d002      	beq.n	8008fdc <tcp_err+0x14>
    pcb->errf = err;
 8008fd6:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <tcp_err+0x28>)
 8008fde:	f640 020d 	movw	r2, #2061	; 0x80d
 8008fe2:	4904      	ldr	r1, [pc, #16]	; (8008ff4 <tcp_err+0x2c>)
 8008fe4:	4804      	ldr	r0, [pc, #16]	; (8008ff8 <tcp_err+0x30>)
 8008fe6:	f005 ff9d 	bl	800ef24 <iprintf>
 8008fea:	e7f4      	b.n	8008fd6 <tcp_err+0xe>
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop
 8008ff0:	08011b38 	.word	0x08011b38
 8008ff4:	08011d1c 	.word	0x08011d1c
 8008ff8:	0800fe60 	.word	0x0800fe60

08008ffc <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008ffc:	b118      	cbz	r0, 8009006 <tcp_accept+0xa>
 8008ffe:	7d02      	ldrb	r2, [r0, #20]
 8009000:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8009002:	bf08      	it	eq
 8009004:	6181      	streq	r1, [r0, #24]
  }
}
 8009006:	4770      	bx	lr

08009008 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8009008:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800900a:	b148      	cbz	r0, 8009020 <tcp_poll+0x18>
 800900c:	460d      	mov	r5, r1
 800900e:	4614      	mov	r4, r2
 8009010:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009012:	7d03      	ldrb	r3, [r0, #20]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d00b      	beq.n	8009030 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8009018:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800901c:	7774      	strb	r4, [r6, #29]
}
 800901e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8009020:	4b07      	ldr	r3, [pc, #28]	; (8009040 <tcp_poll+0x38>)
 8009022:	f640 023d 	movw	r2, #2109	; 0x83d
 8009026:	4907      	ldr	r1, [pc, #28]	; (8009044 <tcp_poll+0x3c>)
 8009028:	4807      	ldr	r0, [pc, #28]	; (8009048 <tcp_poll+0x40>)
 800902a:	f005 ff7b 	bl	800ef24 <iprintf>
 800902e:	e7f6      	b.n	800901e <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8009030:	4b03      	ldr	r3, [pc, #12]	; (8009040 <tcp_poll+0x38>)
 8009032:	f640 023e 	movw	r2, #2110	; 0x83e
 8009036:	4905      	ldr	r1, [pc, #20]	; (800904c <tcp_poll+0x44>)
 8009038:	4803      	ldr	r0, [pc, #12]	; (8009048 <tcp_poll+0x40>)
 800903a:	f005 ff73 	bl	800ef24 <iprintf>
 800903e:	e7eb      	b.n	8009018 <tcp_poll+0x10>
 8009040:	08011b38 	.word	0x08011b38
 8009044:	08011d44 	.word	0x08011d44
 8009048:	0800fe60 	.word	0x0800fe60
 800904c:	08011d5c 	.word	0x08011d5c

08009050 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8009050:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009052:	b130      	cbz	r0, 8009062 <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8009054:	4b07      	ldr	r3, [pc, #28]	; (8009074 <tcp_next_iss+0x24>)
 8009056:	6818      	ldr	r0, [r3, #0]
 8009058:	4a07      	ldr	r2, [pc, #28]	; (8009078 <tcp_next_iss+0x28>)
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	4410      	add	r0, r2
 800905e:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8009060:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8009062:	4b06      	ldr	r3, [pc, #24]	; (800907c <tcp_next_iss+0x2c>)
 8009064:	f640 02af 	movw	r2, #2223	; 0x8af
 8009068:	4905      	ldr	r1, [pc, #20]	; (8009080 <tcp_next_iss+0x30>)
 800906a:	4806      	ldr	r0, [pc, #24]	; (8009084 <tcp_next_iss+0x34>)
 800906c:	f005 ff5a 	bl	800ef24 <iprintf>
 8009070:	e7f0      	b.n	8009054 <tcp_next_iss+0x4>
 8009072:	bf00      	nop
 8009074:	20000024 	.word	0x20000024
 8009078:	200107dc 	.word	0x200107dc
 800907c:	08011b38 	.word	0x08011b38
 8009080:	08011d7c 	.word	0x08011d7c
 8009084:	0800fe60 	.word	0x0800fe60

08009088 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4605      	mov	r5, r0
 800908c:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800908e:	b162      	cbz	r2, 80090aa <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8009090:	b14c      	cbz	r4, 80090a6 <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 8009092:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009094:	b13b      	cbz	r3, 80090a6 <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009096:	2b28      	cmp	r3, #40	; 0x28
 8009098:	bf86      	itte	hi
 800909a:	3b28      	subhi	r3, #40	; 0x28
 800909c:	b29b      	uxthhi	r3, r3
 800909e:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80090a0:	429d      	cmp	r5, r3
 80090a2:	bf28      	it	cs
 80090a4:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 80090a6:	4628      	mov	r0, r5
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80090aa:	4b04      	ldr	r3, [pc, #16]	; (80090bc <tcp_eff_send_mss_netif+0x34>)
 80090ac:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80090b0:	4903      	ldr	r1, [pc, #12]	; (80090c0 <tcp_eff_send_mss_netif+0x38>)
 80090b2:	4804      	ldr	r0, [pc, #16]	; (80090c4 <tcp_eff_send_mss_netif+0x3c>)
 80090b4:	f005 ff36 	bl	800ef24 <iprintf>
 80090b8:	e7ea      	b.n	8009090 <tcp_eff_send_mss_netif+0x8>
 80090ba:	bf00      	nop
 80090bc:	08011b38 	.word	0x08011b38
 80090c0:	08011d98 	.word	0x08011d98
 80090c4:	0800fe60 	.word	0x0800fe60

080090c8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80090c8:	b510      	push	{r4, lr}
 80090ca:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 80090cc:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80090ce:	b118      	cbz	r0, 80090d8 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 80090d0:	f7ff ff13 	bl	8008efa <tcp_segs_free>
    pcb->ooseq = NULL;
 80090d4:	2300      	movs	r3, #0
 80090d6:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80090d8:	bd10      	pop	{r4, pc}
	...

080090dc <tcp_pcb_purge>:
{
 80090dc:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80090de:	b1f8      	cbz	r0, 8009120 <tcp_pcb_purge+0x44>
 80090e0:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80090e2:	7d03      	ldrb	r3, [r0, #20]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d91a      	bls.n	800911e <tcp_pcb_purge+0x42>
 80090e8:	2b0a      	cmp	r3, #10
 80090ea:	d018      	beq.n	800911e <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 80090ec:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80090ee:	b118      	cbz	r0, 80090f8 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 80090f0:	f7ff fa3c 	bl	800856c <pbuf_free>
      pcb->refused_data = NULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 80090f8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80090fa:	b113      	cbz	r3, 8009102 <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 80090fc:	4620      	mov	r0, r4
 80090fe:	f7ff ffe3 	bl	80090c8 <tcp_free_ooseq>
    pcb->rtime = -1;
 8009102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009106:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8009108:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800910a:	f7ff fef6 	bl	8008efa <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800910e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009110:	f7ff fef3 	bl	8008efa <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8009114:	2300      	movs	r3, #0
 8009116:	66e3      	str	r3, [r4, #108]	; 0x6c
 8009118:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 800911a:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 800911e:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8009120:	4b03      	ldr	r3, [pc, #12]	; (8009130 <tcp_pcb_purge+0x54>)
 8009122:	f640 0251 	movw	r2, #2129	; 0x851
 8009126:	4903      	ldr	r1, [pc, #12]	; (8009134 <tcp_pcb_purge+0x58>)
 8009128:	4803      	ldr	r0, [pc, #12]	; (8009138 <tcp_pcb_purge+0x5c>)
 800912a:	f005 fefb 	bl	800ef24 <iprintf>
 800912e:	e7f6      	b.n	800911e <tcp_pcb_purge+0x42>
 8009130:	08011b38 	.word	0x08011b38
 8009134:	08011dc0 	.word	0x08011dc0
 8009138:	0800fe60 	.word	0x0800fe60

0800913c <tcp_pcb_remove>:
{
 800913c:	b538      	push	{r3, r4, r5, lr}
 800913e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009140:	460c      	mov	r4, r1
 8009142:	b149      	cbz	r1, 8009158 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009144:	b185      	cbz	r5, 8009168 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8009146:	682b      	ldr	r3, [r5, #0]
 8009148:	42a3      	cmp	r3, r4
 800914a:	d015      	beq.n	8009178 <tcp_pcb_remove+0x3c>
 800914c:	b1cb      	cbz	r3, 8009182 <tcp_pcb_remove+0x46>
 800914e:	68da      	ldr	r2, [r3, #12]
 8009150:	42a2      	cmp	r2, r4
 8009152:	d014      	beq.n	800917e <tcp_pcb_remove+0x42>
 8009154:	4613      	mov	r3, r2
 8009156:	e7f9      	b.n	800914c <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8009158:	4b25      	ldr	r3, [pc, #148]	; (80091f0 <tcp_pcb_remove+0xb4>)
 800915a:	f640 0283 	movw	r2, #2179	; 0x883
 800915e:	4925      	ldr	r1, [pc, #148]	; (80091f4 <tcp_pcb_remove+0xb8>)
 8009160:	4825      	ldr	r0, [pc, #148]	; (80091f8 <tcp_pcb_remove+0xbc>)
 8009162:	f005 fedf 	bl	800ef24 <iprintf>
 8009166:	e7ed      	b.n	8009144 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009168:	4b21      	ldr	r3, [pc, #132]	; (80091f0 <tcp_pcb_remove+0xb4>)
 800916a:	f640 0284 	movw	r2, #2180	; 0x884
 800916e:	4923      	ldr	r1, [pc, #140]	; (80091fc <tcp_pcb_remove+0xc0>)
 8009170:	4821      	ldr	r0, [pc, #132]	; (80091f8 <tcp_pcb_remove+0xbc>)
 8009172:	f005 fed7 	bl	800ef24 <iprintf>
 8009176:	e7e6      	b.n	8009146 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8009178:	68e3      	ldr	r3, [r4, #12]
 800917a:	602b      	str	r3, [r5, #0]
 800917c:	e001      	b.n	8009182 <tcp_pcb_remove+0x46>
 800917e:	68e2      	ldr	r2, [r4, #12]
 8009180:	60da      	str	r2, [r3, #12]
 8009182:	2300      	movs	r3, #0
 8009184:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8009186:	4620      	mov	r0, r4
 8009188:	f7ff ffa8 	bl	80090dc <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 800918c:	7d23      	ldrb	r3, [r4, #20]
 800918e:	2b0a      	cmp	r3, #10
 8009190:	d005      	beq.n	800919e <tcp_pcb_remove+0x62>
 8009192:	2b01      	cmp	r3, #1
 8009194:	d01e      	beq.n	80091d4 <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8009196:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009198:	f013 0f01 	tst.w	r3, #1
 800919c:	d11e      	bne.n	80091dc <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800919e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80091a0:	b133      	cbz	r3, 80091b0 <tcp_pcb_remove+0x74>
 80091a2:	4b13      	ldr	r3, [pc, #76]	; (80091f0 <tcp_pcb_remove+0xb4>)
 80091a4:	f640 0293 	movw	r2, #2195	; 0x893
 80091a8:	4915      	ldr	r1, [pc, #84]	; (8009200 <tcp_pcb_remove+0xc4>)
 80091aa:	4813      	ldr	r0, [pc, #76]	; (80091f8 <tcp_pcb_remove+0xbc>)
 80091ac:	f005 feba 	bl	800ef24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80091b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80091b2:	b133      	cbz	r3, 80091c2 <tcp_pcb_remove+0x86>
 80091b4:	4b0e      	ldr	r3, [pc, #56]	; (80091f0 <tcp_pcb_remove+0xb4>)
 80091b6:	f640 0294 	movw	r2, #2196	; 0x894
 80091ba:	4912      	ldr	r1, [pc, #72]	; (8009204 <tcp_pcb_remove+0xc8>)
 80091bc:	480e      	ldr	r0, [pc, #56]	; (80091f8 <tcp_pcb_remove+0xbc>)
 80091be:	f005 feb1 	bl	800ef24 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80091c2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80091c4:	b133      	cbz	r3, 80091d4 <tcp_pcb_remove+0x98>
 80091c6:	4b0a      	ldr	r3, [pc, #40]	; (80091f0 <tcp_pcb_remove+0xb4>)
 80091c8:	f640 0296 	movw	r2, #2198	; 0x896
 80091cc:	490e      	ldr	r1, [pc, #56]	; (8009208 <tcp_pcb_remove+0xcc>)
 80091ce:	480a      	ldr	r0, [pc, #40]	; (80091f8 <tcp_pcb_remove+0xbc>)
 80091d0:	f005 fea8 	bl	800ef24 <iprintf>
  pcb->state = CLOSED;
 80091d4:	2300      	movs	r3, #0
 80091d6:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 80091d8:	82e3      	strh	r3, [r4, #22]
}
 80091da:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 80091dc:	f043 0302 	orr.w	r3, r3, #2
 80091e0:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 80091e2:	4620      	mov	r0, r4
 80091e4:	f003 fa58 	bl	800c698 <tcp_output>
  if (pcb->state != LISTEN) {
 80091e8:	7d23      	ldrb	r3, [r4, #20]
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d0f2      	beq.n	80091d4 <tcp_pcb_remove+0x98>
 80091ee:	e7d6      	b.n	800919e <tcp_pcb_remove+0x62>
 80091f0:	08011b38 	.word	0x08011b38
 80091f4:	08011ddc 	.word	0x08011ddc
 80091f8:	0800fe60 	.word	0x0800fe60
 80091fc:	08011df8 	.word	0x08011df8
 8009200:	08011e18 	.word	0x08011e18
 8009204:	08011e30 	.word	0x08011e30
 8009208:	08011e4c 	.word	0x08011e4c

0800920c <tcp_abandon>:
{
 800920c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009210:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009212:	b1f8      	cbz	r0, 8009254 <tcp_abandon+0x48>
 8009214:	460d      	mov	r5, r1
 8009216:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009218:	7d03      	ldrb	r3, [r0, #20]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d022      	beq.n	8009264 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 800921e:	7d23      	ldrb	r3, [r4, #20]
 8009220:	2b0a      	cmp	r3, #10
 8009222:	d027      	beq.n	8009274 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8009224:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8009228:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 800922c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8009230:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8009232:	2b00      	cmp	r3, #0
 8009234:	d147      	bne.n	80092c6 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 8009236:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 800923a:	f1ba 0f00 	cmp.w	sl, #0
 800923e:	d04c      	beq.n	80092da <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009240:	4b2d      	ldr	r3, [pc, #180]	; (80092f8 <tcp_abandon+0xec>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	42a3      	cmp	r3, r4
 8009246:	d01d      	beq.n	8009284 <tcp_abandon+0x78>
 8009248:	b313      	cbz	r3, 8009290 <tcp_abandon+0x84>
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	42a2      	cmp	r2, r4
 800924e:	d01d      	beq.n	800928c <tcp_abandon+0x80>
 8009250:	4613      	mov	r3, r2
 8009252:	e7f9      	b.n	8009248 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009254:	4b29      	ldr	r3, [pc, #164]	; (80092fc <tcp_abandon+0xf0>)
 8009256:	f240 223d 	movw	r2, #573	; 0x23d
 800925a:	4929      	ldr	r1, [pc, #164]	; (8009300 <tcp_abandon+0xf4>)
 800925c:	4829      	ldr	r0, [pc, #164]	; (8009304 <tcp_abandon+0xf8>)
 800925e:	f005 fe61 	bl	800ef24 <iprintf>
 8009262:	e02d      	b.n	80092c0 <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009264:	4b25      	ldr	r3, [pc, #148]	; (80092fc <tcp_abandon+0xf0>)
 8009266:	f44f 7210 	mov.w	r2, #576	; 0x240
 800926a:	4927      	ldr	r1, [pc, #156]	; (8009308 <tcp_abandon+0xfc>)
 800926c:	4825      	ldr	r0, [pc, #148]	; (8009304 <tcp_abandon+0xf8>)
 800926e:	f005 fe59 	bl	800ef24 <iprintf>
 8009272:	e7d4      	b.n	800921e <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009274:	4621      	mov	r1, r4
 8009276:	4825      	ldr	r0, [pc, #148]	; (800930c <tcp_abandon+0x100>)
 8009278:	f7ff ff60 	bl	800913c <tcp_pcb_remove>
    tcp_free(pcb);
 800927c:	4620      	mov	r0, r4
 800927e:	f7ff fcd3 	bl	8008c28 <tcp_free>
 8009282:	e01d      	b.n	80092c0 <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009284:	68e2      	ldr	r2, [r4, #12]
 8009286:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <tcp_abandon+0xec>)
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	e001      	b.n	8009290 <tcp_abandon+0x84>
 800928c:	68e2      	ldr	r2, [r4, #12]
 800928e:	60da      	str	r2, [r3, #12]
 8009290:	2500      	movs	r5, #0
 8009292:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8009294:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8009296:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009298:	b108      	cbz	r0, 800929e <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 800929a:	f7ff fe2e 	bl	8008efa <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800929e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80092a0:	b108      	cbz	r0, 80092a6 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 80092a2:	f7ff fe2a 	bl	8008efa <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80092a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80092a8:	b108      	cbz	r0, 80092ae <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 80092aa:	f7ff fe26 	bl	8008efa <tcp_segs_free>
    if (send_rst) {
 80092ae:	b9b5      	cbnz	r5, 80092de <tcp_abandon+0xd2>
    tcp_free(pcb);
 80092b0:	4620      	mov	r0, r4
 80092b2:	f7ff fcb9 	bl	8008c28 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80092b6:	b11e      	cbz	r6, 80092c0 <tcp_abandon+0xb4>
 80092b8:	f06f 010c 	mvn.w	r1, #12
 80092bc:	4638      	mov	r0, r7
 80092be:	47b0      	blx	r6
}
 80092c0:	b004      	add	sp, #16
 80092c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80092c6:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80092ca:	4621      	mov	r1, r4
 80092cc:	4810      	ldr	r0, [pc, #64]	; (8009310 <tcp_abandon+0x104>)
 80092ce:	f7ff ff35 	bl	800913c <tcp_pcb_remove>
 80092d2:	4b10      	ldr	r3, [pc, #64]	; (8009314 <tcp_abandon+0x108>)
 80092d4:	2201      	movs	r2, #1
 80092d6:	701a      	strb	r2, [r3, #0]
 80092d8:	e7dd      	b.n	8009296 <tcp_abandon+0x8a>
    int send_rst = 0;
 80092da:	2500      	movs	r5, #0
 80092dc:	e7db      	b.n	8009296 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80092de:	8b23      	ldrh	r3, [r4, #24]
 80092e0:	9302      	str	r3, [sp, #8]
 80092e2:	f8cd a004 	str.w	sl, [sp, #4]
 80092e6:	1d23      	adds	r3, r4, #4
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4623      	mov	r3, r4
 80092ec:	464a      	mov	r2, r9
 80092ee:	4641      	mov	r1, r8
 80092f0:	4620      	mov	r0, r4
 80092f2:	f003 f94f 	bl	800c594 <tcp_rst>
 80092f6:	e7db      	b.n	80092b0 <tcp_abandon+0xa4>
 80092f8:	200107d4 	.word	0x200107d4
 80092fc:	08011b38 	.word	0x08011b38
 8009300:	08011e64 	.word	0x08011e64
 8009304:	0800fe60 	.word	0x0800fe60
 8009308:	08011e80 	.word	0x08011e80
 800930c:	200107e4 	.word	0x200107e4
 8009310:	200107cc 	.word	0x200107cc
 8009314:	200107d0 	.word	0x200107d0

08009318 <tcp_abort>:
{
 8009318:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 800931a:	2101      	movs	r1, #1
 800931c:	f7ff ff76 	bl	800920c <tcp_abandon>
}
 8009320:	bd08      	pop	{r3, pc}
	...

08009324 <tcp_accept_null>:
{
 8009324:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009326:	460c      	mov	r4, r1
 8009328:	b129      	cbz	r1, 8009336 <tcp_accept_null+0x12>
  tcp_abort(pcb);
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff fff4 	bl	8009318 <tcp_abort>
}
 8009330:	f06f 000c 	mvn.w	r0, #12
 8009334:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8009336:	4b04      	ldr	r3, [pc, #16]	; (8009348 <tcp_accept_null+0x24>)
 8009338:	f240 320f 	movw	r2, #783	; 0x30f
 800933c:	4903      	ldr	r1, [pc, #12]	; (800934c <tcp_accept_null+0x28>)
 800933e:	4804      	ldr	r0, [pc, #16]	; (8009350 <tcp_accept_null+0x2c>)
 8009340:	f005 fdf0 	bl	800ef24 <iprintf>
 8009344:	e7f1      	b.n	800932a <tcp_accept_null+0x6>
 8009346:	bf00      	nop
 8009348:	08011b38 	.word	0x08011b38
 800934c:	08011eb4 	.word	0x08011eb4
 8009350:	0800fe60 	.word	0x0800fe60

08009354 <tcp_netif_ip_addr_changed_pcblist>:
{
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009358:	4605      	mov	r5, r0
 800935a:	b108      	cbz	r0, 8009360 <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 800935c:	b97c      	cbnz	r4, 800937e <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 800935e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8009362:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009366:	490a      	ldr	r1, [pc, #40]	; (8009390 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8009368:	480a      	ldr	r0, [pc, #40]	; (8009394 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 800936a:	f005 fddb 	bl	800ef24 <iprintf>
 800936e:	e7f5      	b.n	800935c <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 8009370:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ffd0 	bl	8009318 <tcp_abort>
      pcb = next;
 8009378:	4634      	mov	r4, r6
  while (pcb != NULL) {
 800937a:	2c00      	cmp	r4, #0
 800937c:	d0ef      	beq.n	800935e <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800937e:	6822      	ldr	r2, [r4, #0]
 8009380:	682b      	ldr	r3, [r5, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d0f4      	beq.n	8009370 <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8009386:	68e4      	ldr	r4, [r4, #12]
 8009388:	e7f7      	b.n	800937a <tcp_netif_ip_addr_changed_pcblist+0x26>
 800938a:	bf00      	nop
 800938c:	08011b38 	.word	0x08011b38
 8009390:	08011ed4 	.word	0x08011ed4
 8009394:	0800fe60 	.word	0x0800fe60

08009398 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8009398:	b308      	cbz	r0, 80093de <tcp_netif_ip_addr_changed+0x46>
{
 800939a:	b538      	push	{r3, r4, r5, lr}
 800939c:	460d      	mov	r5, r1
 800939e:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 80093a0:	6803      	ldr	r3, [r0, #0]
 80093a2:	b903      	cbnz	r3, 80093a6 <tcp_netif_ip_addr_changed+0xe>
}
 80093a4:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <tcp_netif_ip_addr_changed+0x48>)
 80093a8:	6819      	ldr	r1, [r3, #0]
 80093aa:	f7ff ffd3 	bl	8009354 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <tcp_netif_ip_addr_changed+0x4c>)
 80093b0:	6819      	ldr	r1, [r3, #0]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f7ff ffce 	bl	8009354 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 80093b8:	2d00      	cmp	r5, #0
 80093ba:	d0f3      	beq.n	80093a4 <tcp_netif_ip_addr_changed+0xc>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d0f0      	beq.n	80093a4 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093c2:	4b09      	ldr	r3, [pc, #36]	; (80093e8 <tcp_netif_ip_addr_changed+0x50>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0ec      	beq.n	80093a4 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80093ca:	6819      	ldr	r1, [r3, #0]
 80093cc:	6822      	ldr	r2, [r4, #0]
 80093ce:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80093d0:	bf04      	itt	eq
 80093d2:	682a      	ldreq	r2, [r5, #0]
 80093d4:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1f6      	bne.n	80093ca <tcp_netif_ip_addr_changed+0x32>
 80093dc:	e7e2      	b.n	80093a4 <tcp_netif_ip_addr_changed+0xc>
 80093de:	4770      	bx	lr
 80093e0:	200107cc 	.word	0x200107cc
 80093e4:	200107d4 	.word	0x200107d4
 80093e8:	200107d8 	.word	0x200107d8

080093ec <tcp_kill_state>:
{
 80093ec:	b538      	push	{r3, r4, r5, lr}
 80093ee:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80093f0:	f1a0 0308 	sub.w	r3, r0, #8
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d807      	bhi.n	800940a <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093fa:	4b10      	ldr	r3, [pc, #64]	; (800943c <tcp_kill_state+0x50>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	b1e3      	cbz	r3, 800943a <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009400:	4a0f      	ldr	r2, [pc, #60]	; (8009440 <tcp_kill_state+0x54>)
 8009402:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 8009404:	2100      	movs	r1, #0
  inactive = NULL;
 8009406:	4608      	mov	r0, r1
 8009408:	e009      	b.n	800941e <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800940a:	4b0e      	ldr	r3, [pc, #56]	; (8009444 <tcp_kill_state+0x58>)
 800940c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8009410:	490d      	ldr	r1, [pc, #52]	; (8009448 <tcp_kill_state+0x5c>)
 8009412:	480e      	ldr	r0, [pc, #56]	; (800944c <tcp_kill_state+0x60>)
 8009414:	f005 fd86 	bl	800ef24 <iprintf>
 8009418:	e7ef      	b.n	80093fa <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	b14b      	cbz	r3, 8009432 <tcp_kill_state+0x46>
    if (pcb->state == state) {
 800941e:	7d1a      	ldrb	r2, [r3, #20]
 8009420:	42a2      	cmp	r2, r4
 8009422:	d1fa      	bne.n	800941a <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009424:	6a1a      	ldr	r2, [r3, #32]
 8009426:	1aaa      	subs	r2, r5, r2
 8009428:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 800942a:	bf24      	itt	cs
 800942c:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800942e:	4618      	movcs	r0, r3
 8009430:	e7f3      	b.n	800941a <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 8009432:	b110      	cbz	r0, 800943a <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 8009434:	2100      	movs	r1, #0
 8009436:	f7ff fee9 	bl	800920c <tcp_abandon>
}
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	200107cc 	.word	0x200107cc
 8009440:	200107dc 	.word	0x200107dc
 8009444:	08011b38 	.word	0x08011b38
 8009448:	08011f08 	.word	0x08011f08
 800944c:	0800fe60 	.word	0x0800fe60

08009450 <tcp_alloc>:
{
 8009450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009452:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009454:	2001      	movs	r0, #1
 8009456:	f7fe fd97 	bl	8007f88 <memp_malloc>
  if (pcb == NULL) {
 800945a:	4604      	mov	r4, r0
 800945c:	b360      	cbz	r0, 80094b8 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800945e:	229c      	movs	r2, #156	; 0x9c
 8009460:	2100      	movs	r1, #0
 8009462:	4620      	mov	r0, r4
 8009464:	f005 fcc1 	bl	800edea <memset>
    pcb->prio = prio;
 8009468:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800946a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800946e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009472:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009476:	8562      	strh	r2, [r4, #42]	; 0x2a
 8009478:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800947a:	22ff      	movs	r2, #255	; 0xff
 800947c:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800947e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009482:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009484:	2206      	movs	r2, #6
 8009486:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800948a:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 800948c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009490:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8009492:	2201      	movs	r2, #1
 8009494:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009498:	4a3b      	ldr	r2, [pc, #236]	; (8009588 <tcp_alloc+0x138>)
 800949a:	6812      	ldr	r2, [r2, #0]
 800949c:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800949e:	4a3b      	ldr	r2, [pc, #236]	; (800958c <tcp_alloc+0x13c>)
 80094a0:	7812      	ldrb	r2, [r2, #0]
 80094a2:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 80094a4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 80094a8:	4b39      	ldr	r3, [pc, #228]	; (8009590 <tcp_alloc+0x140>)
 80094aa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80094ae:	4b39      	ldr	r3, [pc, #228]	; (8009594 <tcp_alloc+0x144>)
 80094b0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80094b4:	4620      	mov	r0, r4
 80094b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80094b8:	4b37      	ldr	r3, [pc, #220]	; (8009598 <tcp_alloc+0x148>)
 80094ba:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 80094bc:	2d00      	cmp	r5, #0
 80094be:	d132      	bne.n	8009526 <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094c0:	4b36      	ldr	r3, [pc, #216]	; (800959c <tcp_alloc+0x14c>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	b17b      	cbz	r3, 80094e6 <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094c6:	4a30      	ldr	r2, [pc, #192]	; (8009588 <tcp_alloc+0x138>)
 80094c8:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 80094ca:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094cc:	6a1a      	ldr	r2, [r3, #32]
 80094ce:	1a82      	subs	r2, r0, r2
 80094d0:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 80094d2:	bf24      	itt	cs
 80094d4:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80094d6:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f6      	bne.n	80094cc <tcp_alloc+0x7c>
  if (inactive != NULL) {
 80094de:	b114      	cbz	r4, 80094e6 <tcp_alloc+0x96>
    tcp_abort(inactive);
 80094e0:	4620      	mov	r0, r4
 80094e2:	f7ff ff19 	bl	8009318 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094e6:	2001      	movs	r0, #1
 80094e8:	f7fe fd4e 	bl	8007f88 <memp_malloc>
    if (pcb == NULL) {
 80094ec:	4604      	mov	r4, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d1b5      	bne.n	800945e <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 80094f2:	2009      	movs	r0, #9
 80094f4:	f7ff ff7a 	bl	80093ec <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094f8:	2001      	movs	r0, #1
 80094fa:	f7fe fd45 	bl	8007f88 <memp_malloc>
      if (pcb == NULL) {
 80094fe:	4604      	mov	r4, r0
 8009500:	2800      	cmp	r0, #0
 8009502:	d1ac      	bne.n	800945e <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8009504:	2008      	movs	r0, #8
 8009506:	f7ff ff71 	bl	80093ec <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800950a:	2001      	movs	r0, #1
 800950c:	f7fe fd3c 	bl	8007f88 <memp_malloc>
        if (pcb == NULL) {
 8009510:	4604      	mov	r4, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	d1a3      	bne.n	800945e <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8009516:	f016 0f80 	tst.w	r6, #128	; 0x80
 800951a:	d110      	bne.n	800953e <tcp_alloc+0xee>
  if (mprio == 0) {
 800951c:	b36e      	cbz	r6, 800957a <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800951e:	4633      	mov	r3, r6
 8009520:	e00e      	b.n	8009540 <tcp_alloc+0xf0>
  while (pcb != NULL) {
 8009522:	2d00      	cmp	r5, #0
 8009524:	d0cc      	beq.n	80094c0 <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 8009526:	4628      	mov	r0, r5
 8009528:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800952a:	8b43      	ldrh	r3, [r0, #26]
 800952c:	f013 0f08 	tst.w	r3, #8
 8009530:	d0f7      	beq.n	8009522 <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009532:	f023 0308 	bic.w	r3, r3, #8
 8009536:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8009538:	f7ff fb2e 	bl	8008b98 <tcp_close_shutdown_fin>
 800953c:	e7f1      	b.n	8009522 <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800953e:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 8009540:	3b01      	subs	r3, #1
 8009542:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009544:	4b14      	ldr	r3, [pc, #80]	; (8009598 <tcp_alloc+0x148>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	b1bb      	cbz	r3, 800957a <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800954a:	490f      	ldr	r1, [pc, #60]	; (8009588 <tcp_alloc+0x138>)
 800954c:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 800954e:	2000      	movs	r0, #0
 8009550:	e005      	b.n	800955e <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 8009552:	6a1a      	ldr	r2, [r3, #32]
 8009554:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 8009556:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8009558:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800955a:	68db      	ldr	r3, [r3, #12]
 800955c:	b14b      	cbz	r3, 8009572 <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 800955e:	7d59      	ldrb	r1, [r3, #21]
 8009560:	4291      	cmp	r1, r2
 8009562:	d3f6      	bcc.n	8009552 <tcp_alloc+0x102>
 8009564:	d1f9      	bne.n	800955a <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009566:	6a1f      	ldr	r7, [r3, #32]
 8009568:	eba5 0c07 	sub.w	ip, r5, r7
 800956c:	4584      	cmp	ip, r0
 800956e:	d3f4      	bcc.n	800955a <tcp_alloc+0x10a>
 8009570:	e7ef      	b.n	8009552 <tcp_alloc+0x102>
  if (inactive != NULL) {
 8009572:	b114      	cbz	r4, 800957a <tcp_alloc+0x12a>
    tcp_abort(inactive);
 8009574:	4620      	mov	r0, r4
 8009576:	f7ff fecf 	bl	8009318 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800957a:	2001      	movs	r0, #1
 800957c:	f7fe fd04 	bl	8007f88 <memp_malloc>
  if (pcb != NULL) {
 8009580:	4604      	mov	r4, r0
 8009582:	2800      	cmp	r0, #0
 8009584:	d096      	beq.n	80094b4 <tcp_alloc+0x64>
 8009586:	e76a      	b.n	800945e <tcp_alloc+0xe>
 8009588:	200107dc 	.word	0x200107dc
 800958c:	200107e1 	.word	0x200107e1
 8009590:	08009775 	.word	0x08009775
 8009594:	006ddd00 	.word	0x006ddd00
 8009598:	200107cc 	.word	0x200107cc
 800959c:	200107e4 	.word	0x200107e4

080095a0 <tcp_new_ip_type>:
{
 80095a0:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80095a2:	2040      	movs	r0, #64	; 0x40
 80095a4:	f7ff ff54 	bl	8009450 <tcp_alloc>
}
 80095a8:	bd08      	pop	{r3, pc}
	...

080095ac <tcp_close_shutdown>:
{
 80095ac:	b530      	push	{r4, r5, lr}
 80095ae:	b085      	sub	sp, #20
 80095b0:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80095b2:	4604      	mov	r4, r0
 80095b4:	b188      	cbz	r0, 80095da <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80095b6:	b125      	cbz	r5, 80095c2 <tcp_close_shutdown+0x16>
 80095b8:	7d23      	ldrb	r3, [r4, #20]
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	d015      	beq.n	80095ea <tcp_close_shutdown+0x3e>
 80095be:	2b07      	cmp	r3, #7
 80095c0:	d013      	beq.n	80095ea <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 80095c2:	7d23      	ldrb	r3, [r4, #20]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d06d      	beq.n	80096a4 <tcp_close_shutdown+0xf8>
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	f000 8091 	beq.w	80096f0 <tcp_close_shutdown+0x144>
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d04f      	beq.n	8009672 <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 80095d2:	4620      	mov	r0, r4
 80095d4:	f7ff fae0 	bl	8008b98 <tcp_close_shutdown_fin>
 80095d8:	e081      	b.n	80096de <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80095da:	4b4b      	ldr	r3, [pc, #300]	; (8009708 <tcp_close_shutdown+0x15c>)
 80095dc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80095e0:	494a      	ldr	r1, [pc, #296]	; (800970c <tcp_close_shutdown+0x160>)
 80095e2:	484b      	ldr	r0, [pc, #300]	; (8009710 <tcp_close_shutdown+0x164>)
 80095e4:	f005 fc9e 	bl	800ef24 <iprintf>
 80095e8:	e7e5      	b.n	80095b6 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80095ea:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80095ec:	b1e3      	cbz	r3, 8009628 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80095ee:	8b63      	ldrh	r3, [r4, #26]
 80095f0:	f013 0f10 	tst.w	r3, #16
 80095f4:	d01d      	beq.n	8009632 <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80095f6:	8b23      	ldrh	r3, [r4, #24]
 80095f8:	9302      	str	r3, [sp, #8]
 80095fa:	8ae3      	ldrh	r3, [r4, #22]
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	1d23      	adds	r3, r4, #4
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	4623      	mov	r3, r4
 8009604:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009606:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009608:	4620      	mov	r0, r4
 800960a:	f002 ffc3 	bl	800c594 <tcp_rst>
      tcp_pcb_purge(pcb);
 800960e:	4620      	mov	r0, r4
 8009610:	f7ff fd64 	bl	80090dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009614:	4b3f      	ldr	r3, [pc, #252]	; (8009714 <tcp_close_shutdown+0x168>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	42a3      	cmp	r3, r4
 800961a:	d012      	beq.n	8009642 <tcp_close_shutdown+0x96>
 800961c:	b1bb      	cbz	r3, 800964e <tcp_close_shutdown+0xa2>
 800961e:	68da      	ldr	r2, [r3, #12]
 8009620:	42a2      	cmp	r2, r4
 8009622:	d012      	beq.n	800964a <tcp_close_shutdown+0x9e>
 8009624:	4613      	mov	r3, r2
 8009626:	e7f9      	b.n	800961c <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009628:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800962a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800962e:	d0c8      	beq.n	80095c2 <tcp_close_shutdown+0x16>
 8009630:	e7dd      	b.n	80095ee <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009632:	4b35      	ldr	r3, [pc, #212]	; (8009708 <tcp_close_shutdown+0x15c>)
 8009634:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009638:	4937      	ldr	r1, [pc, #220]	; (8009718 <tcp_close_shutdown+0x16c>)
 800963a:	4835      	ldr	r0, [pc, #212]	; (8009710 <tcp_close_shutdown+0x164>)
 800963c:	f005 fc72 	bl	800ef24 <iprintf>
 8009640:	e7d9      	b.n	80095f6 <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 8009642:	68e2      	ldr	r2, [r4, #12]
 8009644:	4b33      	ldr	r3, [pc, #204]	; (8009714 <tcp_close_shutdown+0x168>)
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	e001      	b.n	800964e <tcp_close_shutdown+0xa2>
 800964a:	68e2      	ldr	r2, [r4, #12]
 800964c:	60da      	str	r2, [r3, #12]
 800964e:	2300      	movs	r3, #0
 8009650:	60e3      	str	r3, [r4, #12]
 8009652:	4b32      	ldr	r3, [pc, #200]	; (800971c <tcp_close_shutdown+0x170>)
 8009654:	2201      	movs	r2, #1
 8009656:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8009658:	4b31      	ldr	r3, [pc, #196]	; (8009720 <tcp_close_shutdown+0x174>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	42a3      	cmp	r3, r4
 800965e:	d004      	beq.n	800966a <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8009660:	4620      	mov	r0, r4
 8009662:	f7ff fae1 	bl	8008c28 <tcp_free>
      return ERR_OK;
 8009666:	2000      	movs	r0, #0
 8009668:	e039      	b.n	80096de <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 800966a:	f002 f80f 	bl	800b68c <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800966e:	2000      	movs	r0, #0
 8009670:	e035      	b.n	80096de <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 8009672:	8ae3      	ldrh	r3, [r4, #22]
 8009674:	b18b      	cbz	r3, 800969a <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009676:	4b2b      	ldr	r3, [pc, #172]	; (8009724 <tcp_close_shutdown+0x178>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	42a3      	cmp	r3, r4
 800967c:	d005      	beq.n	800968a <tcp_close_shutdown+0xde>
 800967e:	b153      	cbz	r3, 8009696 <tcp_close_shutdown+0xea>
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	42a2      	cmp	r2, r4
 8009684:	d005      	beq.n	8009692 <tcp_close_shutdown+0xe6>
 8009686:	4613      	mov	r3, r2
 8009688:	e7f9      	b.n	800967e <tcp_close_shutdown+0xd2>
 800968a:	68e2      	ldr	r2, [r4, #12]
 800968c:	4b25      	ldr	r3, [pc, #148]	; (8009724 <tcp_close_shutdown+0x178>)
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e001      	b.n	8009696 <tcp_close_shutdown+0xea>
 8009692:	68e2      	ldr	r2, [r4, #12]
 8009694:	60da      	str	r2, [r3, #12]
 8009696:	2300      	movs	r3, #0
 8009698:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 800969a:	4620      	mov	r0, r4
 800969c:	f7ff fac4 	bl	8008c28 <tcp_free>
  return ERR_OK;
 80096a0:	2000      	movs	r0, #0
      break;
 80096a2:	e01c      	b.n	80096de <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80096a4:	4d20      	ldr	r5, [pc, #128]	; (8009728 <tcp_close_shutdown+0x17c>)
 80096a6:	1d29      	adds	r1, r5, #4
 80096a8:	3510      	adds	r5, #16
      pcb->listener = NULL;
 80096aa:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80096ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80096b0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80096b2:	b133      	cbz	r3, 80096c2 <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 80096b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80096b6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 80096b8:	bf08      	it	eq
 80096ba:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d1f8      	bne.n	80096b4 <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80096c2:	428d      	cmp	r5, r1
 80096c4:	d1f2      	bne.n	80096ac <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80096c6:	4621      	mov	r1, r4
 80096c8:	4818      	ldr	r0, [pc, #96]	; (800972c <tcp_close_shutdown+0x180>)
 80096ca:	f7ff fd37 	bl	800913c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80096ce:	7d23      	ldrb	r3, [r4, #20]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d006      	beq.n	80096e2 <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80096d4:	4621      	mov	r1, r4
 80096d6:	2002      	movs	r0, #2
 80096d8:	f7fe fc86 	bl	8007fe8 <memp_free>
  return ERR_OK;
 80096dc:	2000      	movs	r0, #0
}
 80096de:	b005      	add	sp, #20
 80096e0:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80096e2:	4b09      	ldr	r3, [pc, #36]	; (8009708 <tcp_close_shutdown+0x15c>)
 80096e4:	22df      	movs	r2, #223	; 0xdf
 80096e6:	4912      	ldr	r1, [pc, #72]	; (8009730 <tcp_close_shutdown+0x184>)
 80096e8:	4809      	ldr	r0, [pc, #36]	; (8009710 <tcp_close_shutdown+0x164>)
 80096ea:	f005 fc1b 	bl	800ef24 <iprintf>
 80096ee:	e7f1      	b.n	80096d4 <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80096f0:	4621      	mov	r1, r4
 80096f2:	4808      	ldr	r0, [pc, #32]	; (8009714 <tcp_close_shutdown+0x168>)
 80096f4:	f7ff fd22 	bl	800913c <tcp_pcb_remove>
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <tcp_close_shutdown+0x170>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80096fe:	4620      	mov	r0, r4
 8009700:	f7ff fa92 	bl	8008c28 <tcp_free>
  return ERR_OK;
 8009704:	2000      	movs	r0, #0
      break;
 8009706:	e7ea      	b.n	80096de <tcp_close_shutdown+0x132>
 8009708:	08011b38 	.word	0x08011b38
 800970c:	08011f18 	.word	0x08011f18
 8009710:	0800fe60 	.word	0x0800fe60
 8009714:	200107cc 	.word	0x200107cc
 8009718:	08011f38 	.word	0x08011f38
 800971c:	200107d0 	.word	0x200107d0
 8009720:	20010810 	.word	0x20010810
 8009724:	200107d4 	.word	0x200107d4
 8009728:	080121c4 	.word	0x080121c4
 800972c:	200107d8 	.word	0x200107d8
 8009730:	08011f54 	.word	0x08011f54

08009734 <tcp_close>:
{
 8009734:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009736:	b160      	cbz	r0, 8009752 <tcp_close+0x1e>
 8009738:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 800973a:	7d02      	ldrb	r2, [r0, #20]
 800973c:	2a01      	cmp	r2, #1
 800973e:	d003      	beq.n	8009748 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009740:	8b42      	ldrh	r2, [r0, #26]
 8009742:	f042 0210 	orr.w	r2, r2, #16
 8009746:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8009748:	2101      	movs	r1, #1
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff ff2e 	bl	80095ac <tcp_close_shutdown>
}
 8009750:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8009752:	4b05      	ldr	r3, [pc, #20]	; (8009768 <tcp_close+0x34>)
 8009754:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009758:	4904      	ldr	r1, [pc, #16]	; (800976c <tcp_close+0x38>)
 800975a:	4805      	ldr	r0, [pc, #20]	; (8009770 <tcp_close+0x3c>)
 800975c:	f005 fbe2 	bl	800ef24 <iprintf>
 8009760:	f06f 000f 	mvn.w	r0, #15
 8009764:	e7f4      	b.n	8009750 <tcp_close+0x1c>
 8009766:	bf00      	nop
 8009768:	08011b38 	.word	0x08011b38
 800976c:	08011f70 	.word	0x08011f70
 8009770:	0800fe60 	.word	0x0800fe60

08009774 <tcp_recv_null>:
{
 8009774:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009776:	b151      	cbz	r1, 800978e <tcp_recv_null+0x1a>
 8009778:	4614      	mov	r4, r2
 800977a:	4608      	mov	r0, r1
  if (p != NULL) {
 800977c:	b18a      	cbz	r2, 80097a2 <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800977e:	8911      	ldrh	r1, [r2, #8]
 8009780:	f7ff fb72 	bl	8008e68 <tcp_recved>
    pbuf_free(p);
 8009784:	4620      	mov	r0, r4
 8009786:	f7fe fef1 	bl	800856c <pbuf_free>
  return ERR_OK;
 800978a:	2000      	movs	r0, #0
}
 800978c:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800978e:	4b08      	ldr	r3, [pc, #32]	; (80097b0 <tcp_recv_null+0x3c>)
 8009790:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009794:	4907      	ldr	r1, [pc, #28]	; (80097b4 <tcp_recv_null+0x40>)
 8009796:	4808      	ldr	r0, [pc, #32]	; (80097b8 <tcp_recv_null+0x44>)
 8009798:	f005 fbc4 	bl	800ef24 <iprintf>
 800979c:	f06f 000f 	mvn.w	r0, #15
 80097a0:	e7f4      	b.n	800978c <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 80097a2:	b10b      	cbz	r3, 80097a8 <tcp_recv_null+0x34>
  return ERR_OK;
 80097a4:	2000      	movs	r0, #0
 80097a6:	e7f1      	b.n	800978c <tcp_recv_null+0x18>
    return tcp_close(pcb);
 80097a8:	f7ff ffc4 	bl	8009734 <tcp_close>
 80097ac:	e7ee      	b.n	800978c <tcp_recv_null+0x18>
 80097ae:	bf00      	nop
 80097b0:	08011b38 	.word	0x08011b38
 80097b4:	08011f88 	.word	0x08011f88
 80097b8:	0800fe60 	.word	0x0800fe60

080097bc <tcp_process_refused_data>:
{
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80097be:	b318      	cbz	r0, 8009808 <tcp_process_refused_data+0x4c>
 80097c0:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 80097c2:	6f86      	ldr	r6, [r0, #120]	; 0x78
 80097c4:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80097ca:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 80097ce:	b32d      	cbz	r5, 800981c <tcp_process_refused_data+0x60>
 80097d0:	4632      	mov	r2, r6
 80097d2:	4601      	mov	r1, r0
 80097d4:	6900      	ldr	r0, [r0, #16]
 80097d6:	47a8      	blx	r5
 80097d8:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 80097da:	bb3d      	cbnz	r5, 800982c <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80097dc:	f017 0f20 	tst.w	r7, #32
 80097e0:	d02a      	beq.n	8009838 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80097e2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80097e4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 80097e8:	bf1c      	itt	ne
 80097ea:	3301      	addne	r3, #1
 80097ec:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80097ee:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 80097f2:	b30e      	cbz	r6, 8009838 <tcp_process_refused_data+0x7c>
 80097f4:	2300      	movs	r3, #0
 80097f6:	461a      	mov	r2, r3
 80097f8:	4621      	mov	r1, r4
 80097fa:	6920      	ldr	r0, [r4, #16]
 80097fc:	47b0      	blx	r6
          return ERR_ABRT;
 80097fe:	f110 0f0d 	cmn.w	r0, #13
 8009802:	bf08      	it	eq
 8009804:	4605      	moveq	r5, r0
 8009806:	e017      	b.n	8009838 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8009808:	4b0c      	ldr	r3, [pc, #48]	; (800983c <tcp_process_refused_data+0x80>)
 800980a:	f240 6209 	movw	r2, #1545	; 0x609
 800980e:	490c      	ldr	r1, [pc, #48]	; (8009840 <tcp_process_refused_data+0x84>)
 8009810:	480c      	ldr	r0, [pc, #48]	; (8009844 <tcp_process_refused_data+0x88>)
 8009812:	f005 fb87 	bl	800ef24 <iprintf>
 8009816:	f06f 050f 	mvn.w	r5, #15
 800981a:	e00d      	b.n	8009838 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800981c:	2300      	movs	r3, #0
 800981e:	4632      	mov	r2, r6
 8009820:	4601      	mov	r1, r0
 8009822:	4618      	mov	r0, r3
 8009824:	f7ff ffa6 	bl	8009774 <tcp_recv_null>
 8009828:	4605      	mov	r5, r0
 800982a:	e7d6      	b.n	80097da <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 800982c:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 8009830:	bf1c      	itt	ne
 8009832:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 8009834:	f06f 0504 	mvnne.w	r5, #4
}
 8009838:	4628      	mov	r0, r5
 800983a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800983c:	08011b38 	.word	0x08011b38
 8009840:	08011fa4 	.word	0x08011fa4
 8009844:	0800fe60 	.word	0x0800fe60

08009848 <tcp_fasttmr>:
{
 8009848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 800984c:	4a1f      	ldr	r2, [pc, #124]	; (80098cc <tcp_fasttmr+0x84>)
 800984e:	7813      	ldrb	r3, [r2, #0]
 8009850:	3301      	adds	r3, #1
 8009852:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009854:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80098d4 <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 8009858:	4e1d      	ldr	r6, [pc, #116]	; (80098d0 <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 800985a:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 800985e:	2c00      	cmp	r4, #0
 8009860:	d032      	beq.n	80098c8 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009862:	4d1a      	ldr	r5, [pc, #104]	; (80098cc <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 8009864:	2700      	movs	r7, #0
 8009866:	e013      	b.n	8009890 <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 8009868:	f043 0302 	orr.w	r3, r3, #2
 800986c:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800986e:	4620      	mov	r0, r4
 8009870:	f002 ff12 	bl	800c698 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009874:	8b63      	ldrh	r3, [r4, #26]
 8009876:	f023 0303 	bic.w	r3, r3, #3
 800987a:	8363      	strh	r3, [r4, #26]
 800987c:	e011      	b.n	80098a2 <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800987e:	f023 0308 	bic.w	r3, r3, #8
 8009882:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009884:	4620      	mov	r0, r4
 8009886:	f7ff f987 	bl	8008b98 <tcp_close_shutdown_fin>
 800988a:	e00e      	b.n	80098aa <tcp_fasttmr+0x62>
      pcb = pcb->next;
 800988c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800988e:	b1dc      	cbz	r4, 80098c8 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 8009890:	782b      	ldrb	r3, [r5, #0]
 8009892:	7fa2      	ldrb	r2, [r4, #30]
 8009894:	429a      	cmp	r2, r3
 8009896:	d0f9      	beq.n	800988c <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8009898:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800989a:	8b63      	ldrh	r3, [r4, #26]
 800989c:	f013 0f01 	tst.w	r3, #1
 80098a0:	d1e2      	bne.n	8009868 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 80098a2:	8b63      	ldrh	r3, [r4, #26]
 80098a4:	f013 0f08 	tst.w	r3, #8
 80098a8:	d1e9      	bne.n	800987e <tcp_fasttmr+0x36>
      next = pcb->next;
 80098aa:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 80098ae:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80098b0:	b143      	cbz	r3, 80098c4 <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 80098b2:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 80098b4:	4620      	mov	r0, r4
 80098b6:	f7ff ff81 	bl	80097bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80098ba:	7833      	ldrb	r3, [r6, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1cc      	bne.n	800985a <tcp_fasttmr+0x12>
      pcb = next;
 80098c0:	464c      	mov	r4, r9
 80098c2:	e7e4      	b.n	800988e <tcp_fasttmr+0x46>
 80098c4:	464c      	mov	r4, r9
 80098c6:	e7e2      	b.n	800988e <tcp_fasttmr+0x46>
}
 80098c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098cc:	200107e1 	.word	0x200107e1
 80098d0:	200107d0 	.word	0x200107d0
 80098d4:	200107cc 	.word	0x200107cc

080098d8 <tcp_shutdown>:
{
 80098d8:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80098da:	b188      	cbz	r0, 8009900 <tcp_shutdown+0x28>
 80098dc:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 80098de:	7d03      	ldrb	r3, [r0, #20]
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d02a      	beq.n	800993a <tcp_shutdown+0x62>
  if (shut_rx) {
 80098e4:	b1d1      	cbz	r1, 800991c <tcp_shutdown+0x44>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80098e6:	8b43      	ldrh	r3, [r0, #26]
 80098e8:	f043 0310 	orr.w	r3, r3, #16
 80098ec:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 80098ee:	b98a      	cbnz	r2, 8009914 <tcp_shutdown+0x3c>
    if (pcb->refused_data != NULL) {
 80098f0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80098f2:	b118      	cbz	r0, 80098fc <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 80098f4:	f7fe fe3a 	bl	800856c <pbuf_free>
      pcb->refused_data = NULL;
 80098f8:	2300      	movs	r3, #0
 80098fa:	67a3      	str	r3, [r4, #120]	; 0x78
  return ERR_OK;
 80098fc:	2000      	movs	r0, #0
 80098fe:	e01b      	b.n	8009938 <tcp_shutdown+0x60>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8009900:	4b12      	ldr	r3, [pc, #72]	; (800994c <tcp_shutdown+0x74>)
 8009902:	f240 2207 	movw	r2, #519	; 0x207
 8009906:	4912      	ldr	r1, [pc, #72]	; (8009950 <tcp_shutdown+0x78>)
 8009908:	4812      	ldr	r0, [pc, #72]	; (8009954 <tcp_shutdown+0x7c>)
 800990a:	f005 fb0b 	bl	800ef24 <iprintf>
 800990e:	f06f 000f 	mvn.w	r0, #15
 8009912:	e011      	b.n	8009938 <tcp_shutdown+0x60>
      return tcp_close_shutdown(pcb, 1);
 8009914:	2101      	movs	r1, #1
 8009916:	f7ff fe49 	bl	80095ac <tcp_close_shutdown>
 800991a:	e00d      	b.n	8009938 <tcp_shutdown+0x60>
  if (shut_tx) {
 800991c:	b182      	cbz	r2, 8009940 <tcp_shutdown+0x68>
    switch (pcb->state) {
 800991e:	2b04      	cmp	r3, #4
 8009920:	d804      	bhi.n	800992c <tcp_shutdown+0x54>
 8009922:	2b02      	cmp	r3, #2
 8009924:	d804      	bhi.n	8009930 <tcp_shutdown+0x58>
 8009926:	f06f 000a 	mvn.w	r0, #10
 800992a:	e005      	b.n	8009938 <tcp_shutdown+0x60>
 800992c:	2b07      	cmp	r3, #7
 800992e:	d109      	bne.n	8009944 <tcp_shutdown+0x6c>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8009930:	2100      	movs	r1, #0
 8009932:	4620      	mov	r0, r4
 8009934:	f7ff fe3a 	bl	80095ac <tcp_close_shutdown>
}
 8009938:	bd10      	pop	{r4, pc}
    return ERR_CONN;
 800993a:	f06f 000a 	mvn.w	r0, #10
 800993e:	e7fb      	b.n	8009938 <tcp_shutdown+0x60>
  return ERR_OK;
 8009940:	2000      	movs	r0, #0
 8009942:	e7f9      	b.n	8009938 <tcp_shutdown+0x60>
    switch (pcb->state) {
 8009944:	f06f 000a 	mvn.w	r0, #10
 8009948:	e7f6      	b.n	8009938 <tcp_shutdown+0x60>
 800994a:	bf00      	nop
 800994c:	08011b38 	.word	0x08011b38
 8009950:	08011fcc 	.word	0x08011fcc
 8009954:	0800fe60 	.word	0x0800fe60

08009958 <tcp_slowtmr>:
{
 8009958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800995c:	b085      	sub	sp, #20
  ++tcp_ticks;
 800995e:	4ab4      	ldr	r2, [pc, #720]	; (8009c30 <tcp_slowtmr+0x2d8>)
 8009960:	6813      	ldr	r3, [r2, #0]
 8009962:	3301      	adds	r3, #1
 8009964:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009966:	4ab3      	ldr	r2, [pc, #716]	; (8009c34 <tcp_slowtmr+0x2dc>)
 8009968:	7813      	ldrb	r3, [r2, #0]
 800996a:	3301      	adds	r3, #1
 800996c:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800996e:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8009c5c <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009972:	4eb1      	ldr	r6, [pc, #708]	; (8009c38 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009974:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8009c60 <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 8009978:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 800997c:	2c00      	cmp	r4, #0
 800997e:	f000 81f4 	beq.w	8009d6a <tcp_slowtmr+0x412>
  prev = NULL;
 8009982:	2500      	movs	r5, #0
 8009984:	e19e      	b.n	8009cc4 <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009986:	4633      	mov	r3, r6
 8009988:	f240 42be 	movw	r2, #1214	; 0x4be
 800998c:	49ab      	ldr	r1, [pc, #684]	; (8009c3c <tcp_slowtmr+0x2e4>)
 800998e:	48ac      	ldr	r0, [pc, #688]	; (8009c40 <tcp_slowtmr+0x2e8>)
 8009990:	f005 fac8 	bl	800ef24 <iprintf>
 8009994:	e19a      	b.n	8009ccc <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009996:	4633      	mov	r3, r6
 8009998:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800999c:	49a9      	ldr	r1, [pc, #676]	; (8009c44 <tcp_slowtmr+0x2ec>)
 800999e:	48a8      	ldr	r0, [pc, #672]	; (8009c40 <tcp_slowtmr+0x2e8>)
 80099a0:	f005 fac0 	bl	800ef24 <iprintf>
 80099a4:	e196      	b.n	8009cd4 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80099a6:	4633      	mov	r3, r6
 80099a8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80099ac:	49a6      	ldr	r1, [pc, #664]	; (8009c48 <tcp_slowtmr+0x2f0>)
 80099ae:	48a4      	ldr	r0, [pc, #656]	; (8009c40 <tcp_slowtmr+0x2e8>)
 80099b0:	f005 fab8 	bl	800ef24 <iprintf>
 80099b4:	e192      	b.n	8009cdc <tcp_slowtmr+0x384>
      continue;
 80099b6:	4625      	mov	r5, r4
      pcb = pcb->next;
 80099b8:	68e4      	ldr	r4, [r4, #12]
      continue;
 80099ba:	e181      	b.n	8009cc0 <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80099bc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80099c0:	2b05      	cmp	r3, #5
 80099c2:	f240 819b 	bls.w	8009cfc <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 80099c6:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 80099ca:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 80099cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80099ce:	b15b      	cbz	r3, 80099e8 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80099d0:	4b97      	ldr	r3, [pc, #604]	; (8009c30 <tcp_slowtmr+0x2d8>)
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	6a23      	ldr	r3, [r4, #32]
 80099d6:	1ad2      	subs	r2, r2, r3
 80099d8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80099dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80099e0:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80099e4:	f080 80f8 	bcs.w	8009bd8 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 80099e8:	7d23      	ldrb	r3, [r4, #20]
 80099ea:	2b03      	cmp	r3, #3
 80099ec:	f000 80f8 	beq.w	8009be0 <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 80099f0:	2b09      	cmp	r3, #9
 80099f2:	f040 80fc 	bne.w	8009bee <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80099f6:	4b8e      	ldr	r3, [pc, #568]	; (8009c30 <tcp_slowtmr+0x2d8>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	6a22      	ldr	r2, [r4, #32]
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	2bf0      	cmp	r3, #240	; 0xf0
 8009a00:	f240 80f5 	bls.w	8009bee <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 8009a04:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8009a08:	4620      	mov	r0, r4
 8009a0a:	f7ff fb67 	bl	80090dc <tcp_pcb_purge>
      if (prev != NULL) {
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	f000 8130 	beq.w	8009c74 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009a14:	f8da 3000 	ldr.w	r3, [sl]
 8009a18:	42a3      	cmp	r3, r4
 8009a1a:	f000 8123 	beq.w	8009c64 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 8009a1e:	68e3      	ldr	r3, [r4, #12]
 8009a20:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 8009a22:	f1b8 0f00 	cmp.w	r8, #0
 8009a26:	f040 8134 	bne.w	8009c92 <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 8009a2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 8009a2e:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 8009a32:	4620      	mov	r0, r4
 8009a34:	f7ff f8f8 	bl	8008c28 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009a38:	4b84      	ldr	r3, [pc, #528]	; (8009c4c <tcp_slowtmr+0x2f4>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009a3e:	2f00      	cmp	r7, #0
 8009a40:	f000 813a 	beq.w	8009cb8 <tcp_slowtmr+0x360>
 8009a44:	f06f 010c 	mvn.w	r1, #12
 8009a48:	4648      	mov	r0, r9
 8009a4a:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 8009a4c:	4b7f      	ldr	r3, [pc, #508]	; (8009c4c <tcp_slowtmr+0x2f4>)
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d191      	bne.n	8009978 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 8009a54:	4644      	mov	r4, r8
 8009a56:	e133      	b.n	8009cc0 <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009a58:	4633      	mov	r3, r6
 8009a5a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009a5e:	497c      	ldr	r1, [pc, #496]	; (8009c50 <tcp_slowtmr+0x2f8>)
 8009a60:	4877      	ldr	r0, [pc, #476]	; (8009c40 <tcp_slowtmr+0x2e8>)
 8009a62:	f005 fa5f 	bl	800ef24 <iprintf>
 8009a66:	e15b      	b.n	8009d20 <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f002 fb0d 	bl	800c088 <tcp_split_unsent_seg>
 8009a6e:	b158      	cbz	r0, 8009a88 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 8009a70:	2300      	movs	r3, #0
 8009a72:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009a76:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8009a7a:	2b06      	cmp	r3, #6
 8009a7c:	d876      	bhi.n	8009b6c <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 8009a7e:	3301      	adds	r3, #1
 8009a80:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8009a84:	2700      	movs	r7, #0
 8009a86:	e050      	b.n	8009b2a <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f002 fe05 	bl	800c698 <tcp_output>
 8009a8e:	2800      	cmp	r0, #0
 8009a90:	d1ee      	bne.n	8009a70 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8009a92:	2700      	movs	r7, #0
 8009a94:	e049      	b.n	8009b2a <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009a96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009a98:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009a9c:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8009a9e:	bf9c      	itt	ls
 8009aa0:	3301      	addls	r3, #1
 8009aa2:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8009aa4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009aa8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009aac:	429a      	cmp	r2, r3
 8009aae:	db3c      	blt.n	8009b2a <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	f002 fc9d 	bl	800c3f0 <tcp_rexmit_rto_prepare>
 8009ab6:	b118      	cbz	r0, 8009ac0 <tcp_slowtmr+0x168>
 8009ab8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009aba:	bbb3      	cbnz	r3, 8009b2a <tcp_slowtmr+0x1d2>
 8009abc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009abe:	b3a3      	cbz	r3, 8009b2a <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 8009ac0:	7d23      	ldrb	r3, [r4, #20]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d014      	beq.n	8009af0 <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009ac6:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009aca:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8009ace:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009ad2:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009ad6:	2a0c      	cmp	r2, #12
 8009ad8:	bf28      	it	cs
 8009ada:	220c      	movcs	r2, #12
 8009adc:	495d      	ldr	r1, [pc, #372]	; (8009c54 <tcp_slowtmr+0x2fc>)
 8009ade:	5c8a      	ldrb	r2, [r1, r2]
 8009ae0:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009ae2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	bfa8      	it	ge
 8009aea:	4613      	movge	r3, r2
 8009aec:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009af4:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009af8:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009afc:	429a      	cmp	r2, r3
 8009afe:	bf28      	it	cs
 8009b00:	461a      	movcs	r2, r3
 8009b02:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009b04:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009b06:	0043      	lsls	r3, r0, #1
 8009b08:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009b0a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8009b0e:	bf98      	it	ls
 8009b10:	460b      	movls	r3, r1
 8009b12:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 8009b16:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009b20:	4620      	mov	r0, r4
 8009b22:	f002 ff85 	bl	800ca30 <tcp_rexmit_rto_commit>
 8009b26:	e000      	b.n	8009b2a <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 8009b28:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 8009b2a:	7d23      	ldrb	r3, [r4, #20]
 8009b2c:	2b06      	cmp	r3, #6
 8009b2e:	d01f      	beq.n	8009b70 <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009b30:	f894 8009 	ldrb.w	r8, [r4, #9]
 8009b34:	f018 0808 	ands.w	r8, r8, #8
 8009b38:	f43f af48 	beq.w	80099cc <tcp_slowtmr+0x74>
 8009b3c:	2b04      	cmp	r3, #4
 8009b3e:	d12a      	bne.n	8009b96 <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b40:	4b3b      	ldr	r3, [pc, #236]	; (8009c30 <tcp_slowtmr+0x2d8>)
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	6a23      	ldr	r3, [r4, #32]
 8009b46:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009b48:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009b4c:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8009b50:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009b54:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b58:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009b5c:	d920      	bls.n	8009ba0 <tcp_slowtmr+0x248>
        ++pcb_remove;
 8009b5e:	3701      	adds	r7, #1
 8009b60:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 8009b62:	f04f 0801 	mov.w	r8, #1
 8009b66:	e731      	b.n	80099cc <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 8009b68:	2701      	movs	r7, #1
 8009b6a:	e7de      	b.n	8009b2a <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 8009b6c:	2700      	movs	r7, #0
 8009b6e:	e7dc      	b.n	8009b2a <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 8009b70:	8b63      	ldrh	r3, [r4, #26]
 8009b72:	f013 0f10 	tst.w	r3, #16
 8009b76:	d007      	beq.n	8009b88 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b78:	4b2d      	ldr	r3, [pc, #180]	; (8009c30 <tcp_slowtmr+0x2d8>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	6a22      	ldr	r2, [r4, #32]
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	2b28      	cmp	r3, #40	; 0x28
 8009b82:	d901      	bls.n	8009b88 <tcp_slowtmr+0x230>
          ++pcb_remove;
 8009b84:	3701      	adds	r7, #1
 8009b86:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8009b88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 8134 	beq.w	8009df8 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 8009b90:	f04f 0800 	mov.w	r8, #0
 8009b94:	e71c      	b.n	80099d0 <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 8009b96:	2b07      	cmp	r3, #7
 8009b98:	d0d2      	beq.n	8009b40 <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8009b9a:	f04f 0800 	mov.w	r8, #0
 8009b9e:	e715      	b.n	80099cc <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009ba0:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009ba4:	482c      	ldr	r0, [pc, #176]	; (8009c58 <tcp_slowtmr+0x300>)
 8009ba6:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009baa:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009bae:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8009bb2:	d802      	bhi.n	8009bba <tcp_slowtmr+0x262>
    pcb_reset = 0;
 8009bb4:	f04f 0800 	mov.w	r8, #0
 8009bb8:	e708      	b.n	80099cc <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8009bba:	4620      	mov	r0, r4
 8009bbc:	f002 ff6e 	bl	800ca9c <tcp_keepalive>
        if (err == ERR_OK) {
 8009bc0:	b938      	cbnz	r0, 8009bd2 <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 8009bc2:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8009bcc:	f04f 0800 	mov.w	r8, #0
 8009bd0:	e6fc      	b.n	80099cc <tcp_slowtmr+0x74>
 8009bd2:	f04f 0800 	mov.w	r8, #0
 8009bd6:	e6f9      	b.n	80099cc <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f7ff fa75 	bl	80090c8 <tcp_free_ooseq>
 8009bde:	e703      	b.n	80099e8 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009be0:	4b13      	ldr	r3, [pc, #76]	; (8009c30 <tcp_slowtmr+0x2d8>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6a22      	ldr	r2, [r4, #32]
 8009be6:	1a9b      	subs	r3, r3, r2
 8009be8:	2b28      	cmp	r3, #40	; 0x28
 8009bea:	f63f af0b 	bhi.w	8009a04 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 8009bee:	2f00      	cmp	r7, #0
 8009bf0:	f47f af08 	bne.w	8009a04 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 8009bf4:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8009bf6:	7f23      	ldrb	r3, [r4, #28]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009bfe:	7f62      	ldrb	r2, [r4, #29]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d85b      	bhi.n	8009cbc <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009c08:	4a10      	ldr	r2, [pc, #64]	; (8009c4c <tcp_slowtmr+0x2f4>)
 8009c0a:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009c0c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d04b      	beq.n	8009cac <tcp_slowtmr+0x354>
 8009c14:	4621      	mov	r1, r4
 8009c16:	6920      	ldr	r0, [r4, #16]
 8009c18:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009c1a:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <tcp_slowtmr+0x2f4>)
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f47f aeaa 	bne.w	8009978 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 8009c24:	2800      	cmp	r0, #0
 8009c26:	d041      	beq.n	8009cac <tcp_slowtmr+0x354>
 8009c28:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009c2a:	463c      	mov	r4, r7
 8009c2c:	e048      	b.n	8009cc0 <tcp_slowtmr+0x368>
 8009c2e:	bf00      	nop
 8009c30:	200107dc 	.word	0x200107dc
 8009c34:	200107e1 	.word	0x200107e1
 8009c38:	08011b38 	.word	0x08011b38
 8009c3c:	08011fe8 	.word	0x08011fe8
 8009c40:	0800fe60 	.word	0x0800fe60
 8009c44:	08012014 	.word	0x08012014
 8009c48:	08012040 	.word	0x08012040
 8009c4c:	200107d0 	.word	0x200107d0
 8009c50:	080120a4 	.word	0x080120a4
 8009c54:	080121b4 	.word	0x080121b4
 8009c58:	000124f8 	.word	0x000124f8
 8009c5c:	200107cc 	.word	0x200107cc
 8009c60:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009c64:	4633      	mov	r3, r6
 8009c66:	f240 526d 	movw	r2, #1389	; 0x56d
 8009c6a:	4966      	ldr	r1, [pc, #408]	; (8009e04 <tcp_slowtmr+0x4ac>)
 8009c6c:	4866      	ldr	r0, [pc, #408]	; (8009e08 <tcp_slowtmr+0x4b0>)
 8009c6e:	f005 f959 	bl	800ef24 <iprintf>
 8009c72:	e6d4      	b.n	8009a1e <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009c74:	f8da 3000 	ldr.w	r3, [sl]
 8009c78:	42a3      	cmp	r3, r4
 8009c7a:	d006      	beq.n	8009c8a <tcp_slowtmr+0x332>
 8009c7c:	4633      	mov	r3, r6
 8009c7e:	f240 5271 	movw	r2, #1393	; 0x571
 8009c82:	4962      	ldr	r1, [pc, #392]	; (8009e0c <tcp_slowtmr+0x4b4>)
 8009c84:	4860      	ldr	r0, [pc, #384]	; (8009e08 <tcp_slowtmr+0x4b0>)
 8009c86:	f005 f94d 	bl	800ef24 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	f8ca 3000 	str.w	r3, [sl]
 8009c90:	e6c7      	b.n	8009a22 <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009c92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c94:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009c96:	8b23      	ldrh	r3, [r4, #24]
 8009c98:	9302      	str	r3, [sp, #8]
 8009c9a:	8ae3      	ldrh	r3, [r4, #22]
 8009c9c:	9301      	str	r3, [sp, #4]
 8009c9e:	1d23      	adds	r3, r4, #4
 8009ca0:	9300      	str	r3, [sp, #0]
 8009ca2:	4623      	mov	r3, r4
 8009ca4:	4620      	mov	r0, r4
 8009ca6:	f002 fc75 	bl	800c594 <tcp_rst>
 8009caa:	e6be      	b.n	8009a2a <tcp_slowtmr+0xd2>
          tcp_output(prev);
 8009cac:	4620      	mov	r0, r4
 8009cae:	f002 fcf3 	bl	800c698 <tcp_output>
 8009cb2:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009cb4:	463c      	mov	r4, r7
 8009cb6:	e003      	b.n	8009cc0 <tcp_slowtmr+0x368>
      pcb = pcb->next;
 8009cb8:	4644      	mov	r4, r8
 8009cba:	e001      	b.n	8009cc0 <tcp_slowtmr+0x368>
 8009cbc:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009cbe:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8009cc0:	2c00      	cmp	r4, #0
 8009cc2:	d052      	beq.n	8009d6a <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009cc4:	7d23      	ldrb	r3, [r4, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f43f ae5d 	beq.w	8009986 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009ccc:	7d23      	ldrb	r3, [r4, #20]
 8009cce:	2b01      	cmp	r3, #1
 8009cd0:	f43f ae61 	beq.w	8009996 <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009cd4:	7d23      	ldrb	r3, [r4, #20]
 8009cd6:	2b0a      	cmp	r3, #10
 8009cd8:	f43f ae65 	beq.w	80099a6 <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009cdc:	4b4c      	ldr	r3, [pc, #304]	; (8009e10 <tcp_slowtmr+0x4b8>)
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	7fa2      	ldrb	r2, [r4, #30]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	f43f ae67 	beq.w	80099b6 <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8009ce8:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009cea:	7d23      	ldrb	r3, [r4, #20]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	f43f ae65 	beq.w	80099bc <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009cf2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009cf6:	2b0b      	cmp	r3, #11
 8009cf8:	f63f af16 	bhi.w	8009b28 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 8009cfc:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 8009d00:	2f00      	cmp	r7, #0
 8009d02:	f43f aec8 	beq.w	8009a96 <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009d06:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009d08:	b133      	cbz	r3, 8009d18 <tcp_slowtmr+0x3c0>
 8009d0a:	4633      	mov	r3, r6
 8009d0c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009d10:	4940      	ldr	r1, [pc, #256]	; (8009e14 <tcp_slowtmr+0x4bc>)
 8009d12:	483d      	ldr	r0, [pc, #244]	; (8009e08 <tcp_slowtmr+0x4b0>)
 8009d14:	f005 f906 	bl	800ef24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009d18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f43f ae9c 	beq.w	8009a58 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009d20:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8009d24:	2b0b      	cmp	r3, #11
 8009d26:	f63f af1f 	bhi.w	8009b68 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009d2a:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8009d2e:	4b3a      	ldr	r3, [pc, #232]	; (8009e18 <tcp_slowtmr+0x4c0>)
 8009d30:	4413      	add	r3, r2
 8009d32:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8009d36:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d208      	bcs.n	8009d50 <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009d46:	4293      	cmp	r3, r2
    pcb_remove = 0;
 8009d48:	bf38      	it	cc
 8009d4a:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 8009d4c:	f4ff aeed 	bcc.w	8009b2a <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 8009d50:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009d54:	2900      	cmp	r1, #0
 8009d56:	f47f ae87 	bne.w	8009a68 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f002 fecc 	bl	800caf8 <tcp_zero_window_probe>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	f43f ae85 	beq.w	8009a70 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8009d66:	2700      	movs	r7, #0
 8009d68:	e6df      	b.n	8009b2a <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 8009d6a:	4b2c      	ldr	r3, [pc, #176]	; (8009e1c <tcp_slowtmr+0x4c4>)
 8009d6c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009d6e:	2c00      	cmp	r4, #0
 8009d70:	d045      	beq.n	8009dfe <tcp_slowtmr+0x4a6>
  prev = NULL;
 8009d72:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d74:	4f2a      	ldr	r7, [pc, #168]	; (8009e20 <tcp_slowtmr+0x4c8>)
 8009d76:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009e30 <tcp_slowtmr+0x4d8>
 8009d7a:	4e23      	ldr	r6, [pc, #140]	; (8009e08 <tcp_slowtmr+0x4b0>)
 8009d7c:	e009      	b.n	8009d92 <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009d7e:	4b29      	ldr	r3, [pc, #164]	; (8009e24 <tcp_slowtmr+0x4cc>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6a22      	ldr	r2, [r4, #32]
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	2bf0      	cmp	r3, #240	; 0xf0
 8009d88:	d80e      	bhi.n	8009da8 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8009d8a:	4625      	mov	r5, r4
 8009d8c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8009d8e:	2c00      	cmp	r4, #0
 8009d90:	d035      	beq.n	8009dfe <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d92:	7d23      	ldrb	r3, [r4, #20]
 8009d94:	2b0a      	cmp	r3, #10
 8009d96:	d0f2      	beq.n	8009d7e <tcp_slowtmr+0x426>
 8009d98:	463b      	mov	r3, r7
 8009d9a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009d9e:	4641      	mov	r1, r8
 8009da0:	4630      	mov	r0, r6
 8009da2:	f005 f8bf 	bl	800ef24 <iprintf>
 8009da6:	e7ea      	b.n	8009d7e <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff f997 	bl	80090dc <tcp_pcb_purge>
      if (prev != NULL) {
 8009dae:	b1a5      	cbz	r5, 8009dda <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009db0:	4b1a      	ldr	r3, [pc, #104]	; (8009e1c <tcp_slowtmr+0x4c4>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	42a3      	cmp	r3, r4
 8009db6:	d008      	beq.n	8009dca <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8009db8:	68e3      	ldr	r3, [r4, #12]
 8009dba:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8009dbc:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7fe ff31 	bl	8008c28 <tcp_free>
      pcb = pcb->next;
 8009dc6:	464c      	mov	r4, r9
 8009dc8:	e7e1      	b.n	8009d8e <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009dca:	463b      	mov	r3, r7
 8009dcc:	f240 52af 	movw	r2, #1455	; 0x5af
 8009dd0:	4915      	ldr	r1, [pc, #84]	; (8009e28 <tcp_slowtmr+0x4d0>)
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	f005 f8a6 	bl	800ef24 <iprintf>
 8009dd8:	e7ee      	b.n	8009db8 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009dda:	4b10      	ldr	r3, [pc, #64]	; (8009e1c <tcp_slowtmr+0x4c4>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	42a3      	cmp	r3, r4
 8009de0:	d006      	beq.n	8009df0 <tcp_slowtmr+0x498>
 8009de2:	463b      	mov	r3, r7
 8009de4:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009de8:	4910      	ldr	r1, [pc, #64]	; (8009e2c <tcp_slowtmr+0x4d4>)
 8009dea:	4630      	mov	r0, r6
 8009dec:	f005 f89a 	bl	800ef24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009df0:	68e2      	ldr	r2, [r4, #12]
 8009df2:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <tcp_slowtmr+0x4c4>)
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	e7e1      	b.n	8009dbc <tcp_slowtmr+0x464>
    pcb_reset = 0;
 8009df8:	f04f 0800 	mov.w	r8, #0
 8009dfc:	e6f7      	b.n	8009bee <tcp_slowtmr+0x296>
}
 8009dfe:	b005      	add	sp, #20
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	080120dc 	.word	0x080120dc
 8009e08:	0800fe60 	.word	0x0800fe60
 8009e0c:	08012108 	.word	0x08012108
 8009e10:	200107e1 	.word	0x200107e1
 8009e14:	08012070 	.word	0x08012070
 8009e18:	080121d4 	.word	0x080121d4
 8009e1c:	200107e4 	.word	0x200107e4
 8009e20:	08011b38 	.word	0x08011b38
 8009e24:	200107dc 	.word	0x200107dc
 8009e28:	08012164 	.word	0x08012164
 8009e2c:	0801218c 	.word	0x0801218c
 8009e30:	08012134 	.word	0x08012134

08009e34 <tcp_tmr>:
{
 8009e34:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009e36:	f7ff fd07 	bl	8009848 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009e3a:	4a06      	ldr	r2, [pc, #24]	; (8009e54 <tcp_tmr+0x20>)
 8009e3c:	7813      	ldrb	r3, [r2, #0]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	7013      	strb	r3, [r2, #0]
 8009e44:	f013 0f01 	tst.w	r3, #1
 8009e48:	d100      	bne.n	8009e4c <tcp_tmr+0x18>
}
 8009e4a:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8009e4c:	f7ff fd84 	bl	8009958 <tcp_slowtmr>
}
 8009e50:	e7fb      	b.n	8009e4a <tcp_tmr+0x16>
 8009e52:	bf00      	nop
 8009e54:	200107e0 	.word	0x200107e0

08009e58 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8009e58:	4a09      	ldr	r2, [pc, #36]	; (8009e80 <tcp_get_next_optbyte+0x28>)
 8009e5a:	8813      	ldrh	r3, [r2, #0]
 8009e5c:	1c59      	adds	r1, r3, #1
 8009e5e:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009e60:	4a08      	ldr	r2, [pc, #32]	; (8009e84 <tcp_get_next_optbyte+0x2c>)
 8009e62:	6812      	ldr	r2, [r2, #0]
 8009e64:	b11a      	cbz	r2, 8009e6e <tcp_get_next_optbyte+0x16>
 8009e66:	4908      	ldr	r1, [pc, #32]	; (8009e88 <tcp_get_next_optbyte+0x30>)
 8009e68:	8809      	ldrh	r1, [r1, #0]
 8009e6a:	428b      	cmp	r3, r1
 8009e6c:	d204      	bcs.n	8009e78 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009e6e:	4a07      	ldr	r2, [pc, #28]	; (8009e8c <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8009e70:	6812      	ldr	r2, [r2, #0]
 8009e72:	4413      	add	r3, r2
 8009e74:	7d18      	ldrb	r0, [r3, #20]
 8009e76:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009e78:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8009e7e:	4770      	bx	lr
 8009e80:	20010814 	.word	0x20010814
 8009e84:	20010820 	.word	0x20010820
 8009e88:	2001081c 	.word	0x2001081c
 8009e8c:	20010818 	.word	0x20010818

08009e90 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009e92:	4607      	mov	r7, r0
 8009e94:	b1d0      	cbz	r0, 8009ecc <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009e96:	4b1e      	ldr	r3, [pc, #120]	; (8009f10 <tcp_parseopt+0x80>)
 8009e98:	881d      	ldrh	r5, [r3, #0]
 8009e9a:	2d00      	cmp	r5, #0
 8009e9c:	d037      	beq.n	8009f0e <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009e9e:	4b1d      	ldr	r3, [pc, #116]	; (8009f14 <tcp_parseopt+0x84>)
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	801a      	strh	r2, [r3, #0]
 8009ea4:	461e      	mov	r6, r3
 8009ea6:	8833      	ldrh	r3, [r6, #0]
 8009ea8:	42ab      	cmp	r3, r5
 8009eaa:	d230      	bcs.n	8009f0e <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8009eac:	f7ff ffd4 	bl	8009e58 <tcp_get_next_optbyte>
      switch (opt) {
 8009eb0:	2801      	cmp	r0, #1
 8009eb2:	d0f8      	beq.n	8009ea6 <tcp_parseopt+0x16>
 8009eb4:	2802      	cmp	r0, #2
 8009eb6:	d011      	beq.n	8009edc <tcp_parseopt+0x4c>
 8009eb8:	b348      	cbz	r0, 8009f0e <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009eba:	f7ff ffcd 	bl	8009e58 <tcp_get_next_optbyte>
          if (data < 2) {
 8009ebe:	2801      	cmp	r0, #1
 8009ec0:	d925      	bls.n	8009f0e <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009ec2:	8833      	ldrh	r3, [r6, #0]
 8009ec4:	3b02      	subs	r3, #2
 8009ec6:	4418      	add	r0, r3
 8009ec8:	8030      	strh	r0, [r6, #0]
 8009eca:	e7ec      	b.n	8009ea6 <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009ecc:	4b12      	ldr	r3, [pc, #72]	; (8009f18 <tcp_parseopt+0x88>)
 8009ece:	f240 727d 	movw	r2, #1917	; 0x77d
 8009ed2:	4912      	ldr	r1, [pc, #72]	; (8009f1c <tcp_parseopt+0x8c>)
 8009ed4:	4812      	ldr	r0, [pc, #72]	; (8009f20 <tcp_parseopt+0x90>)
 8009ed6:	f005 f825 	bl	800ef24 <iprintf>
 8009eda:	e7dc      	b.n	8009e96 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009edc:	f7ff ffbc 	bl	8009e58 <tcp_get_next_optbyte>
 8009ee0:	2804      	cmp	r0, #4
 8009ee2:	d114      	bne.n	8009f0e <tcp_parseopt+0x7e>
 8009ee4:	8833      	ldrh	r3, [r6, #0]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	42ab      	cmp	r3, r5
 8009eea:	da10      	bge.n	8009f0e <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009eec:	f7ff ffb4 	bl	8009e58 <tcp_get_next_optbyte>
 8009ef0:	0204      	lsls	r4, r0, #8
 8009ef2:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 8009ef4:	f7ff ffb0 	bl	8009e58 <tcp_get_next_optbyte>
 8009ef8:	4320      	orrs	r0, r4
 8009efa:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009efc:	1e43      	subs	r3, r0, #1
 8009efe:	b29b      	uxth	r3, r3
 8009f00:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009f04:	bf28      	it	cs
 8009f06:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8009f0a:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 8009f0c:	e7cb      	b.n	8009ea6 <tcp_parseopt+0x16>
      }
    }
  }
}
 8009f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f10:	20010824 	.word	0x20010824
 8009f14:	20010814 	.word	0x20010814
 8009f18:	080121dc 	.word	0x080121dc
 8009f1c:	08012210 	.word	0x08012210
 8009f20:	0800fe60 	.word	0x0800fe60

08009f24 <tcp_input_delayed_close>:
{
 8009f24:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009f26:	4604      	mov	r4, r0
 8009f28:	b130      	cbz	r0, 8009f38 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 8009f2a:	4b11      	ldr	r3, [pc, #68]	; (8009f70 <tcp_input_delayed_close+0x4c>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	f013 0f10 	tst.w	r3, #16
 8009f32:	d109      	bne.n	8009f48 <tcp_input_delayed_close+0x24>
  return 0;
 8009f34:	2000      	movs	r0, #0
}
 8009f36:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009f38:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <tcp_input_delayed_close+0x50>)
 8009f3a:	f240 225a 	movw	r2, #602	; 0x25a
 8009f3e:	490e      	ldr	r1, [pc, #56]	; (8009f78 <tcp_input_delayed_close+0x54>)
 8009f40:	480e      	ldr	r0, [pc, #56]	; (8009f7c <tcp_input_delayed_close+0x58>)
 8009f42:	f004 ffef 	bl	800ef24 <iprintf>
 8009f46:	e7f0      	b.n	8009f2a <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009f48:	8b63      	ldrh	r3, [r4, #26]
 8009f4a:	f013 0f10 	tst.w	r3, #16
 8009f4e:	d106      	bne.n	8009f5e <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009f50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009f54:	b11b      	cbz	r3, 8009f5e <tcp_input_delayed_close+0x3a>
 8009f56:	f06f 010e 	mvn.w	r1, #14
 8009f5a:	6920      	ldr	r0, [r4, #16]
 8009f5c:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4807      	ldr	r0, [pc, #28]	; (8009f80 <tcp_input_delayed_close+0x5c>)
 8009f62:	f7ff f8eb 	bl	800913c <tcp_pcb_remove>
    tcp_free(pcb);
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7fe fe5e 	bl	8008c28 <tcp_free>
    return 1;
 8009f6c:	2001      	movs	r0, #1
 8009f6e:	e7e2      	b.n	8009f36 <tcp_input_delayed_close+0x12>
 8009f70:	20010808 	.word	0x20010808
 8009f74:	080121dc 	.word	0x080121dc
 8009f78:	0801222c 	.word	0x0801222c
 8009f7c:	0800fe60 	.word	0x0800fe60
 8009f80:	200107cc 	.word	0x200107cc

08009f84 <tcp_free_acked_segments>:
{
 8009f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8009f88:	460d      	mov	r5, r1
 8009f8a:	b139      	cbz	r1, 8009f9c <tcp_free_acked_segments+0x18>
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009f90:	4f2c      	ldr	r7, [pc, #176]	; (800a044 <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009f92:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800a04c <tcp_free_acked_segments+0xc8>
 8009f96:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800a058 <tcp_free_acked_segments+0xd4>
 8009f9a:	e01b      	b.n	8009fd4 <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8009f9c:	468b      	mov	fp, r1
 8009f9e:	e00a      	b.n	8009fb6 <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009fa0:	4653      	mov	r3, sl
 8009fa2:	f240 4257 	movw	r2, #1111	; 0x457
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	4827      	ldr	r0, [pc, #156]	; (800a048 <tcp_free_acked_segments+0xc4>)
 8009faa:	f004 ffbb 	bl	800ef24 <iprintf>
 8009fae:	e030      	b.n	800a012 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009fb0:	f1b8 0f00 	cmp.w	r8, #0
 8009fb4:	d002      	beq.n	8009fbc <tcp_free_acked_segments+0x38>
}
 8009fb6:	4658      	mov	r0, fp
 8009fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009fbc:	4b23      	ldr	r3, [pc, #140]	; (800a04c <tcp_free_acked_segments+0xc8>)
 8009fbe:	f240 4261 	movw	r2, #1121	; 0x461
 8009fc2:	4923      	ldr	r1, [pc, #140]	; (800a050 <tcp_free_acked_segments+0xcc>)
 8009fc4:	4820      	ldr	r0, [pc, #128]	; (800a048 <tcp_free_acked_segments+0xc4>)
 8009fc6:	f004 ffad 	bl	800ef24 <iprintf>
 8009fca:	e7f4      	b.n	8009fb6 <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8009fcc:	f1bb 0f00 	cmp.w	fp, #0
 8009fd0:	d0f1      	beq.n	8009fb6 <tcp_free_acked_segments+0x32>
 8009fd2:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009fd4:	68eb      	ldr	r3, [r5, #12]
 8009fd6:	6858      	ldr	r0, [r3, #4]
 8009fd8:	f7fd fc8e 	bl	80078f8 <lwip_htonl>
 8009fdc:	4604      	mov	r4, r0
 8009fde:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8009fe2:	68eb      	ldr	r3, [r5, #12]
 8009fe4:	8998      	ldrh	r0, [r3, #12]
 8009fe6:	f7fd fc82 	bl	80078ee <lwip_htons>
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	1ae4      	subs	r4, r4, r3
 8009fee:	445c      	add	r4, fp
 8009ff0:	f010 0003 	ands.w	r0, r0, #3
 8009ff4:	bf18      	it	ne
 8009ff6:	2001      	movne	r0, #1
 8009ff8:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8009ffa:	2c00      	cmp	r4, #0
 8009ffc:	dc1f      	bgt.n	800a03e <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 8009ffe:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 800a002:	6868      	ldr	r0, [r5, #4]
 800a004:	f7fe fc2a 	bl	800885c <pbuf_clen>
 800a008:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800a00a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a00e:	4283      	cmp	r3, r0
 800a010:	d3c6      	bcc.n	8009fa0 <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800a012:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 800a016:	1b04      	subs	r4, r0, r4
 800a018:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800a01c:	4a0d      	ldr	r2, [pc, #52]	; (800a054 <tcp_free_acked_segments+0xd0>)
 800a01e:	892b      	ldrh	r3, [r5, #8]
 800a020:	8811      	ldrh	r1, [r2, #0]
 800a022:	440b      	add	r3, r1
 800a024:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 800a026:	4628      	mov	r0, r5
 800a028:	f7fe ff5a 	bl	8008ee0 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 800a02c:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0cb      	beq.n	8009fcc <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800a034:	f1bb 0f00 	cmp.w	fp, #0
 800a038:	d0ba      	beq.n	8009fb0 <tcp_free_acked_segments+0x2c>
 800a03a:	465d      	mov	r5, fp
 800a03c:	e7ca      	b.n	8009fd4 <tcp_free_acked_segments+0x50>
 800a03e:	46ab      	mov	fp, r5
  return seg_list;
 800a040:	e7b9      	b.n	8009fb6 <tcp_free_acked_segments+0x32>
 800a042:	bf00      	nop
 800a044:	200107e8 	.word	0x200107e8
 800a048:	0800fe60 	.word	0x0800fe60
 800a04c:	080121dc 	.word	0x080121dc
 800a050:	0801227c 	.word	0x0801227c
 800a054:	20010800 	.word	0x20010800
 800a058:	08012254 	.word	0x08012254

0800a05c <tcp_oos_insert_segment>:
{
 800a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a060:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a062:	4605      	mov	r5, r0
 800a064:	b160      	cbz	r0, 800a080 <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a066:	68eb      	ldr	r3, [r5, #12]
 800a068:	8998      	ldrh	r0, [r3, #12]
 800a06a:	f7fd fc40 	bl	80078ee <lwip_htons>
 800a06e:	f010 0f01 	tst.w	r0, #1
 800a072:	d10d      	bne.n	800a090 <tcp_oos_insert_segment+0x34>
    while (next &&
 800a074:	2c00      	cmp	r4, #0
 800a076:	d035      	beq.n	800a0e4 <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a078:	4e20      	ldr	r6, [pc, #128]	; (800a0fc <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a07a:	f04f 0901 	mov.w	r9, #1
 800a07e:	e014      	b.n	800a0aa <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a080:	4b1f      	ldr	r3, [pc, #124]	; (800a100 <tcp_oos_insert_segment+0xa4>)
 800a082:	f240 421f 	movw	r2, #1055	; 0x41f
 800a086:	491f      	ldr	r1, [pc, #124]	; (800a104 <tcp_oos_insert_segment+0xa8>)
 800a088:	481f      	ldr	r0, [pc, #124]	; (800a108 <tcp_oos_insert_segment+0xac>)
 800a08a:	f004 ff4b 	bl	800ef24 <iprintf>
 800a08e:	e7ea      	b.n	800a066 <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 800a090:	4620      	mov	r0, r4
 800a092:	f7fe ff32 	bl	8008efa <tcp_segs_free>
    next = NULL;
 800a096:	2400      	movs	r4, #0
  cseg->next = next;
 800a098:	602c      	str	r4, [r5, #0]
}
 800a09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 800a09e:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	f7fe ff1d 	bl	8008ee0 <tcp_seg_free>
    while (next &&
 800a0a6:	b1ef      	cbz	r7, 800a0e4 <tcp_oos_insert_segment+0x88>
      next = next->next;
 800a0a8:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a0aa:	f8d6 c000 	ldr.w	ip, [r6]
 800a0ae:	68e1      	ldr	r1, [r4, #12]
 800a0b0:	6848      	ldr	r0, [r1, #4]
 800a0b2:	892b      	ldrh	r3, [r5, #8]
 800a0b4:	4463      	add	r3, ip
 800a0b6:	1a1b      	subs	r3, r3, r0
 800a0b8:	8922      	ldrh	r2, [r4, #8]
 800a0ba:	1a9a      	subs	r2, r3, r2
    while (next &&
 800a0bc:	2a00      	cmp	r2, #0
 800a0be:	db13      	blt.n	800a0e8 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a0c0:	8988      	ldrh	r0, [r1, #12]
 800a0c2:	f7fd fc14 	bl	80078ee <lwip_htons>
 800a0c6:	f010 0f01 	tst.w	r0, #1
 800a0ca:	d0e8      	beq.n	800a09e <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a0cc:	68eb      	ldr	r3, [r5, #12]
 800a0ce:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800a0d2:	4648      	mov	r0, r9
 800a0d4:	f7fd fc0b 	bl	80078ee <lwip_htons>
 800a0d8:	68eb      	ldr	r3, [r5, #12]
 800a0da:	ea48 0800 	orr.w	r8, r8, r0
 800a0de:	f8a3 800c 	strh.w	r8, [r3, #12]
 800a0e2:	e7dc      	b.n	800a09e <tcp_oos_insert_segment+0x42>
    next = NULL;
 800a0e4:	2400      	movs	r4, #0
 800a0e6:	e7d7      	b.n	800a098 <tcp_oos_insert_segment+0x3c>
    if (next &&
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	ddd5      	ble.n	800a098 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a0ec:	eba0 010c 	sub.w	r1, r0, ip
 800a0f0:	b289      	uxth	r1, r1
 800a0f2:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a0f4:	6868      	ldr	r0, [r5, #4]
 800a0f6:	f7fe fb51 	bl	800879c <pbuf_realloc>
 800a0fa:	e7cd      	b.n	800a098 <tcp_oos_insert_segment+0x3c>
 800a0fc:	2001080c 	.word	0x2001080c
 800a100:	080121dc 	.word	0x080121dc
 800a104:	0801229c 	.word	0x0801229c
 800a108:	0800fe60 	.word	0x0800fe60

0800a10c <tcp_receive>:
{
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a110:	4604      	mov	r4, r0
 800a112:	2800      	cmp	r0, #0
 800a114:	d066      	beq.n	800a1e4 <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a116:	7d23      	ldrb	r3, [r4, #20]
 800a118:	2b03      	cmp	r3, #3
 800a11a:	d96b      	bls.n	800a1f4 <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 800a11c:	4ba4      	ldr	r3, [pc, #656]	; (800a3b0 <tcp_receive+0x2a4>)
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	f013 0f10 	tst.w	r3, #16
 800a124:	d03a      	beq.n	800a19c <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a126:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800a12a:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a12c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a12e:	4ba1      	ldr	r3, [pc, #644]	; (800a3b4 <tcp_receive+0x2a8>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	1ad1      	subs	r1, r2, r3
 800a134:	2900      	cmp	r1, #0
 800a136:	db0a      	blt.n	800a14e <tcp_receive+0x42>
 800a138:	429a      	cmp	r2, r3
 800a13a:	d063      	beq.n	800a204 <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a13c:	4a9e      	ldr	r2, [pc, #632]	; (800a3b8 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a13e:	6812      	ldr	r2, [r2, #0]
 800a140:	4290      	cmp	r0, r2
 800a142:	d114      	bne.n	800a16e <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a144:	4a9d      	ldr	r2, [pc, #628]	; (800a3bc <tcp_receive+0x2b0>)
 800a146:	6812      	ldr	r2, [r2, #0]
 800a148:	89d2      	ldrh	r2, [r2, #14]
 800a14a:	42aa      	cmp	r2, r5
 800a14c:	d90f      	bls.n	800a16e <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a14e:	4a9b      	ldr	r2, [pc, #620]	; (800a3bc <tcp_receive+0x2b0>)
 800a150:	6812      	ldr	r2, [r2, #0]
 800a152:	89d2      	ldrh	r2, [r2, #14]
 800a154:	b291      	uxth	r1, r2
 800a156:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a15a:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800a15e:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a160:	bf38      	it	cc
 800a162:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800a166:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a168:	4b93      	ldr	r3, [pc, #588]	; (800a3b8 <tcp_receive+0x2ac>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a16e:	4b92      	ldr	r3, [pc, #584]	; (800a3b8 <tcp_receive+0x2ac>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a174:	1a5a      	subs	r2, r3, r1
 800a176:	2a00      	cmp	r2, #0
 800a178:	dd4a      	ble.n	800a210 <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a17a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a17c:	1a9a      	subs	r2, r3, r2
 800a17e:	2a00      	cmp	r2, #0
 800a180:	f340 808a 	ble.w	800a298 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 800a184:	4620      	mov	r0, r4
 800a186:	f002 fa4d 	bl	800c624 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a18a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a18c:	b133      	cbz	r3, 800a19c <tcp_receive+0x90>
 800a18e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a190:	4989      	ldr	r1, [pc, #548]	; (800a3b8 <tcp_receive+0x2ac>)
 800a192:	6809      	ldr	r1, [r1, #0]
 800a194:	1a52      	subs	r2, r2, r1
 800a196:	2a00      	cmp	r2, #0
 800a198:	f2c0 8131 	blt.w	800a3fe <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a19c:	4b88      	ldr	r3, [pc, #544]	; (800a3c0 <tcp_receive+0x2b4>)
 800a19e:	881a      	ldrh	r2, [r3, #0]
 800a1a0:	2a00      	cmp	r2, #0
 800a1a2:	d058      	beq.n	800a256 <tcp_receive+0x14a>
 800a1a4:	7d23      	ldrb	r3, [r4, #20]
 800a1a6:	2b06      	cmp	r3, #6
 800a1a8:	d855      	bhi.n	800a256 <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a1aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a1ac:	4b81      	ldr	r3, [pc, #516]	; (800a3b4 <tcp_receive+0x2a8>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	1ace      	subs	r6, r1, r3
 800a1b2:	2e01      	cmp	r6, #1
 800a1b4:	d406      	bmi.n	800a1c4 <tcp_receive+0xb8>
 800a1b6:	f1c3 0001 	rsb	r0, r3, #1
 800a1ba:	1a82      	subs	r2, r0, r2
 800a1bc:	440a      	add	r2, r1
 800a1be:	2a00      	cmp	r2, #0
 800a1c0:	f340 813f 	ble.w	800a442 <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a1c4:	1a5a      	subs	r2, r3, r1
 800a1c6:	2a00      	cmp	r2, #0
 800a1c8:	f2c0 8185 	blt.w	800a4d6 <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a1cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a1ce:	f1c2 0201 	rsb	r2, r2, #1
 800a1d2:	441a      	add	r2, r3
 800a1d4:	1a52      	subs	r2, r2, r1
 800a1d6:	2a00      	cmp	r2, #0
 800a1d8:	f340 8182 	ble.w	800a4e0 <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f002 fa21 	bl	800c624 <tcp_send_empty_ack>
 800a1e2:	e048      	b.n	800a276 <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a1e4:	4b77      	ldr	r3, [pc, #476]	; (800a3c4 <tcp_receive+0x2b8>)
 800a1e6:	f240 427b 	movw	r2, #1147	; 0x47b
 800a1ea:	4977      	ldr	r1, [pc, #476]	; (800a3c8 <tcp_receive+0x2bc>)
 800a1ec:	4877      	ldr	r0, [pc, #476]	; (800a3cc <tcp_receive+0x2c0>)
 800a1ee:	f004 fe99 	bl	800ef24 <iprintf>
 800a1f2:	e790      	b.n	800a116 <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a1f4:	4b73      	ldr	r3, [pc, #460]	; (800a3c4 <tcp_receive+0x2b8>)
 800a1f6:	f240 427c 	movw	r2, #1148	; 0x47c
 800a1fa:	4975      	ldr	r1, [pc, #468]	; (800a3d0 <tcp_receive+0x2c4>)
 800a1fc:	4873      	ldr	r0, [pc, #460]	; (800a3cc <tcp_receive+0x2c0>)
 800a1fe:	f004 fe91 	bl	800ef24 <iprintf>
 800a202:	e78b      	b.n	800a11c <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a204:	4a6c      	ldr	r2, [pc, #432]	; (800a3b8 <tcp_receive+0x2ac>)
 800a206:	6812      	ldr	r2, [r2, #0]
 800a208:	1a82      	subs	r2, r0, r2
 800a20a:	2a00      	cmp	r2, #0
 800a20c:	da96      	bge.n	800a13c <tcp_receive+0x30>
 800a20e:	e79e      	b.n	800a14e <tcp_receive+0x42>
      if (tcplen == 0) {
 800a210:	4a6b      	ldr	r2, [pc, #428]	; (800a3c0 <tcp_receive+0x2b4>)
 800a212:	8812      	ldrh	r2, [r2, #0]
 800a214:	b932      	cbnz	r2, 800a224 <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a216:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800a21a:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a21c:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a21e:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a220:	4282      	cmp	r2, r0
 800a222:	d003      	beq.n	800a22c <tcp_receive+0x120>
        pcb->dupacks = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a22a:	e7ae      	b.n	800a18a <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 800a22c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a230:	2a00      	cmp	r2, #0
 800a232:	dbf7      	blt.n	800a224 <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 800a234:	428b      	cmp	r3, r1
 800a236:	d1f5      	bne.n	800a224 <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a238:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a23c:	2bff      	cmp	r3, #255	; 0xff
 800a23e:	d01c      	beq.n	800a27a <tcp_receive+0x16e>
                ++pcb->dupacks;
 800a240:	3301      	adds	r3, #1
 800a242:	b2db      	uxtb	r3, r3
 800a244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d816      	bhi.n	800a27a <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d01f      	beq.n	800a290 <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a250:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a252:	2b00      	cmp	r3, #0
 800a254:	d19b      	bne.n	800a18e <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a256:	4b57      	ldr	r3, [pc, #348]	; (800a3b4 <tcp_receive+0x2a8>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a25c:	1a99      	subs	r1, r3, r2
 800a25e:	2900      	cmp	r1, #0
 800a260:	db05      	blt.n	800a26e <tcp_receive+0x162>
 800a262:	3301      	adds	r3, #1
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a268:	1a9b      	subs	r3, r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	dd03      	ble.n	800a276 <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 800a26e:	8b63      	ldrh	r3, [r4, #26]
 800a270:	f043 0302 	orr.w	r3, r3, #2
 800a274:	8363      	strh	r3, [r4, #26]
}
 800a276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a27a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a27e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a280:	4413      	add	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	429a      	cmp	r2, r3
 800a286:	bf88      	it	hi
 800a288:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a28c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800a290:	4620      	mov	r0, r4
 800a292:	f002 f943 	bl	800c51c <tcp_rexmit_fast>
      if (!found_dupack) {
 800a296:	e778      	b.n	800a18a <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 800a298:	8b62      	ldrh	r2, [r4, #26]
 800a29a:	f012 0f04 	tst.w	r2, #4
 800a29e:	d009      	beq.n	800a2b4 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800a2a0:	f022 0204 	bic.w	r2, r2, #4
 800a2a4:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a2a6:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a2aa:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a2ba:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800a2be:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a2c0:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800a2c4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800a2c8:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800a2cc:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a2ce:	7d22      	ldrb	r2, [r4, #20]
 800a2d0:	2a03      	cmp	r2, #3
 800a2d2:	d91c      	bls.n	800a30e <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a2d4:	1a5b      	subs	r3, r3, r1
 800a2d6:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800a2d8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a2dc:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a2e0:	4291      	cmp	r1, r2
 800a2e2:	d948      	bls.n	800a376 <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a2e4:	8b61      	ldrh	r1, [r4, #26]
 800a2e6:	f411 6f00 	tst.w	r1, #2048	; 0x800
 800a2ea:	bf14      	ite	ne
 800a2ec:	2001      	movne	r0, #1
 800a2ee:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a2f0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800a2f2:	fb11 f100 	smulbb	r1, r1, r0
 800a2f6:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800a2f8:	4299      	cmp	r1, r3
 800a2fa:	bf94      	ite	ls
 800a2fc:	1850      	addls	r0, r2, r1
 800a2fe:	18d0      	addhi	r0, r2, r3
 800a300:	b283      	uxth	r3, r0
 800a302:	429a      	cmp	r2, r3
 800a304:	bf88      	it	hi
 800a306:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a30a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a30e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a310:	4a30      	ldr	r2, [pc, #192]	; (800a3d4 <tcp_receive+0x2c8>)
 800a312:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a314:	4620      	mov	r0, r4
 800a316:	f7ff fe35 	bl	8009f84 <tcp_free_acked_segments>
 800a31a:	4603      	mov	r3, r0
 800a31c:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a31e:	4a2e      	ldr	r2, [pc, #184]	; (800a3d8 <tcp_receive+0x2cc>)
 800a320:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a322:	4620      	mov	r0, r4
 800a324:	f7ff fe2e 	bl	8009f84 <tcp_free_acked_segments>
 800a328:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800a32a:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a32c:	fab2 f382 	clz	r3, r2
 800a330:	095b      	lsrs	r3, r3, #5
 800a332:	425b      	negs	r3, r3
 800a334:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a336:	2300      	movs	r3, #0
 800a338:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800a33a:	2800      	cmp	r0, #0
 800a33c:	d035      	beq.n	800a3aa <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a33e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a342:	4926      	ldr	r1, [pc, #152]	; (800a3dc <tcp_receive+0x2d0>)
 800a344:	8809      	ldrh	r1, [r1, #0]
 800a346:	440b      	add	r3, r1
 800a348:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a34c:	8b63      	ldrh	r3, [r4, #26]
 800a34e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a352:	f43f af1a 	beq.w	800a18a <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 800a356:	2a00      	cmp	r2, #0
 800a358:	d042      	beq.n	800a3e0 <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a35a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a35c:	68d3      	ldr	r3, [r2, #12]
 800a35e:	6858      	ldr	r0, [r3, #4]
 800a360:	f7fd faca 	bl	80078f8 <lwip_htonl>
 800a364:	1a2d      	subs	r5, r5, r0
 800a366:	2d00      	cmp	r5, #0
 800a368:	f73f af0f 	bgt.w	800a18a <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 800a36c:	8b63      	ldrh	r3, [r4, #26]
 800a36e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a372:	8363      	strh	r3, [r4, #26]
 800a374:	e709      	b.n	800a18a <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a376:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800a37a:	440b      	add	r3, r1
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	4299      	cmp	r1, r3
 800a380:	d804      	bhi.n	800a38c <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a382:	429a      	cmp	r2, r3
 800a384:	d904      	bls.n	800a390 <tcp_receive+0x284>
 800a386:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a38a:	e7c0      	b.n	800a30e <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a38c:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a390:	1a9b      	subs	r3, r3, r2
 800a392:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a396:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a398:	4413      	add	r3, r2
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	429a      	cmp	r2, r3
 800a39e:	bf88      	it	hi
 800a3a0:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a3a4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a3a8:	e7b1      	b.n	800a30e <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 800a3aa:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a3ae:	e7c6      	b.n	800a33e <tcp_receive+0x232>
 800a3b0:	200107ec 	.word	0x200107ec
 800a3b4:	2001080c 	.word	0x2001080c
 800a3b8:	200107e8 	.word	0x200107e8
 800a3bc:	20010818 	.word	0x20010818
 800a3c0:	20010826 	.word	0x20010826
 800a3c4:	080121dc 	.word	0x080121dc
 800a3c8:	080122c4 	.word	0x080122c4
 800a3cc:	0800fe60 	.word	0x0800fe60
 800a3d0:	080122e0 	.word	0x080122e0
 800a3d4:	080122fc 	.word	0x080122fc
 800a3d8:	08012304 	.word	0x08012304
 800a3dc:	20010800 	.word	0x20010800
          if ((pcb->unsent == NULL) ||
 800a3e0:	b140      	cbz	r0, 800a3f4 <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a3e2:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a3e4:	68c3      	ldr	r3, [r0, #12]
 800a3e6:	6858      	ldr	r0, [r3, #4]
 800a3e8:	f7fd fa86 	bl	80078f8 <lwip_htonl>
 800a3ec:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800a3ee:	2d00      	cmp	r5, #0
 800a3f0:	f73f aecb 	bgt.w	800a18a <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 800a3f4:	8b63      	ldrh	r3, [r4, #26]
 800a3f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3fa:	8363      	strh	r3, [r4, #26]
 800a3fc:	e6c5      	b.n	800a18a <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a3fe:	4a9a      	ldr	r2, [pc, #616]	; (800a668 <tcp_receive+0x55c>)
 800a400:	8816      	ldrh	r6, [r2, #0]
 800a402:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800a404:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800a408:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 800a40c:	1ab1      	subs	r1, r6, r2
 800a40e:	1ac9      	subs	r1, r1, r3
 800a410:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800a412:	fa15 f181 	uxtah	r1, r5, r1
 800a416:	b209      	sxth	r1, r1
 800a418:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800a41a:	2800      	cmp	r0, #0
 800a41c:	db0d      	blt.n	800a43a <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 800a41e:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a422:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 800a426:	1813      	adds	r3, r2, r0
 800a428:	b29b      	uxth	r3, r3
 800a42a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a42c:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a430:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	6363      	str	r3, [r4, #52]	; 0x34
 800a438:	e6b0      	b.n	800a19c <tcp_receive+0x90>
        m = (s16_t) - m;
 800a43a:	1b92      	subs	r2, r2, r6
 800a43c:	4413      	add	r3, r2
 800a43e:	b218      	sxth	r0, r3
 800a440:	e7ed      	b.n	800a41e <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 800a442:	4b8a      	ldr	r3, [pc, #552]	; (800a66c <tcp_receive+0x560>)
 800a444:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a446:	2d00      	cmp	r5, #0
 800a448:	d02d      	beq.n	800a4a6 <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a44a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a44e:	429e      	cmp	r6, r3
 800a450:	d831      	bhi.n	800a4b6 <tcp_receive+0x3aa>
      off = (u16_t)off32;
 800a452:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a454:	4b85      	ldr	r3, [pc, #532]	; (800a66c <tcp_receive+0x560>)
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	891b      	ldrh	r3, [r3, #8]
 800a45a:	42b3      	cmp	r3, r6
 800a45c:	d333      	bcc.n	800a4c6 <tcp_receive+0x3ba>
      inseg.len -= off;
 800a45e:	4b83      	ldr	r3, [pc, #524]	; (800a66c <tcp_receive+0x560>)
 800a460:	891a      	ldrh	r2, [r3, #8]
 800a462:	1b92      	subs	r2, r2, r6
 800a464:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	891a      	ldrh	r2, [r3, #8]
 800a46a:	1b92      	subs	r2, r2, r6
 800a46c:	b292      	uxth	r2, r2
      while (p->len < off) {
 800a46e:	896b      	ldrh	r3, [r5, #10]
 800a470:	429e      	cmp	r6, r3
 800a472:	d908      	bls.n	800a486 <tcp_receive+0x37a>
        p->len = 0;
 800a474:	2100      	movs	r1, #0
        off -= p->len;
 800a476:	1af3      	subs	r3, r6, r3
 800a478:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 800a47a:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800a47c:	8169      	strh	r1, [r5, #10]
        p = p->next;
 800a47e:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800a480:	896b      	ldrh	r3, [r5, #10]
 800a482:	42b3      	cmp	r3, r6
 800a484:	d3f7      	bcc.n	800a476 <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 800a486:	4631      	mov	r1, r6
 800a488:	4628      	mov	r0, r5
 800a48a:	f7fe f82f 	bl	80084ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a490:	4a77      	ldr	r2, [pc, #476]	; (800a670 <tcp_receive+0x564>)
 800a492:	6013      	str	r3, [r2, #0]
 800a494:	4a75      	ldr	r2, [pc, #468]	; (800a66c <tcp_receive+0x560>)
 800a496:	68d2      	ldr	r2, [r2, #12]
 800a498:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a49a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a49c:	1a5a      	subs	r2, r3, r1
 800a49e:	2a00      	cmp	r2, #0
 800a4a0:	f6bf ae94 	bge.w	800a1cc <tcp_receive+0xc0>
 800a4a4:	e69a      	b.n	800a1dc <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a4a6:	4b73      	ldr	r3, [pc, #460]	; (800a674 <tcp_receive+0x568>)
 800a4a8:	f240 5294 	movw	r2, #1428	; 0x594
 800a4ac:	4972      	ldr	r1, [pc, #456]	; (800a678 <tcp_receive+0x56c>)
 800a4ae:	4873      	ldr	r0, [pc, #460]	; (800a67c <tcp_receive+0x570>)
 800a4b0:	f004 fd38 	bl	800ef24 <iprintf>
 800a4b4:	e7c9      	b.n	800a44a <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a4b6:	4b6f      	ldr	r3, [pc, #444]	; (800a674 <tcp_receive+0x568>)
 800a4b8:	f240 5295 	movw	r2, #1429	; 0x595
 800a4bc:	4970      	ldr	r1, [pc, #448]	; (800a680 <tcp_receive+0x574>)
 800a4be:	486f      	ldr	r0, [pc, #444]	; (800a67c <tcp_receive+0x570>)
 800a4c0:	f004 fd30 	bl	800ef24 <iprintf>
 800a4c4:	e7c5      	b.n	800a452 <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a4c6:	4b6b      	ldr	r3, [pc, #428]	; (800a674 <tcp_receive+0x568>)
 800a4c8:	f240 5297 	movw	r2, #1431	; 0x597
 800a4cc:	496d      	ldr	r1, [pc, #436]	; (800a684 <tcp_receive+0x578>)
 800a4ce:	486b      	ldr	r0, [pc, #428]	; (800a67c <tcp_receive+0x570>)
 800a4d0:	f004 fd28 	bl	800ef24 <iprintf>
 800a4d4:	e7c3      	b.n	800a45e <tcp_receive+0x352>
        tcp_ack_now(pcb);
 800a4d6:	8b63      	ldrh	r3, [r4, #26]
 800a4d8:	f043 0302 	orr.w	r3, r3, #2
 800a4dc:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a4de:	e67d      	b.n	800a1dc <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 800a4e0:	428b      	cmp	r3, r1
 800a4e2:	d008      	beq.n	800a4f6 <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 800a4e4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a4e6:	2d00      	cmp	r5, #0
 800a4e8:	f000 817a 	beq.w	800a7e0 <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 800a4ec:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a4ee:	1e5f      	subs	r7, r3, #1
 800a4f0:	f103 0c01 	add.w	ip, r3, #1
 800a4f4:	e195      	b.n	800a822 <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 800a4f6:	4b5d      	ldr	r3, [pc, #372]	; (800a66c <tcp_receive+0x560>)
 800a4f8:	891d      	ldrh	r5, [r3, #8]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	8998      	ldrh	r0, [r3, #12]
 800a4fe:	f7fd f9f6 	bl	80078ee <lwip_htons>
 800a502:	f010 0303 	ands.w	r3, r0, #3
 800a506:	bf18      	it	ne
 800a508:	2301      	movne	r3, #1
 800a50a:	442b      	add	r3, r5
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	4a5e      	ldr	r2, [pc, #376]	; (800a688 <tcp_receive+0x57c>)
 800a510:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800a512:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a514:	429a      	cmp	r2, r3
 800a516:	d317      	bcc.n	800a548 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 800a518:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 823e 	beq.w	800a99c <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a520:	4b52      	ldr	r3, [pc, #328]	; (800a66c <tcp_receive+0x560>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	8998      	ldrh	r0, [r3, #12]
 800a526:	f7fd f9e2 	bl	80078ee <lwip_htons>
 800a52a:	f010 0f01 	tst.w	r0, #1
 800a52e:	d053      	beq.n	800a5d8 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 800a530:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a532:	2800      	cmp	r0, #0
 800a534:	f000 8232 	beq.w	800a99c <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 800a538:	6803      	ldr	r3, [r0, #0]
 800a53a:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a53c:	f7fe fcd0 	bl	8008ee0 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a540:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a542:	2800      	cmp	r0, #0
 800a544:	d1f8      	bne.n	800a538 <tcp_receive+0x42c>
 800a546:	e229      	b.n	800a99c <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a548:	4b48      	ldr	r3, [pc, #288]	; (800a66c <tcp_receive+0x560>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	8998      	ldrh	r0, [r3, #12]
 800a54e:	f7fd f9ce 	bl	80078ee <lwip_htons>
 800a552:	f010 0f01 	tst.w	r0, #1
 800a556:	d12f      	bne.n	800a5b8 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a558:	4b44      	ldr	r3, [pc, #272]	; (800a66c <tcp_receive+0x560>)
 800a55a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a55c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a55e:	68db      	ldr	r3, [r3, #12]
 800a560:	8998      	ldrh	r0, [r3, #12]
 800a562:	f7fd f9c4 	bl	80078ee <lwip_htons>
 800a566:	f010 0f02 	tst.w	r0, #2
 800a56a:	d003      	beq.n	800a574 <tcp_receive+0x468>
            inseg.len -= 1;
 800a56c:	4a3f      	ldr	r2, [pc, #252]	; (800a66c <tcp_receive+0x560>)
 800a56e:	8913      	ldrh	r3, [r2, #8]
 800a570:	3b01      	subs	r3, #1
 800a572:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800a574:	4e3d      	ldr	r6, [pc, #244]	; (800a66c <tcp_receive+0x560>)
 800a576:	8931      	ldrh	r1, [r6, #8]
 800a578:	6870      	ldr	r0, [r6, #4]
 800a57a:	f7fe f90f 	bl	800879c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a57e:	8935      	ldrh	r5, [r6, #8]
 800a580:	68f3      	ldr	r3, [r6, #12]
 800a582:	8998      	ldrh	r0, [r3, #12]
 800a584:	f7fd f9b3 	bl	80078ee <lwip_htons>
 800a588:	f010 0303 	ands.w	r3, r0, #3
 800a58c:	bf18      	it	ne
 800a58e:	2301      	movne	r3, #1
 800a590:	442b      	add	r3, r5
 800a592:	b29b      	uxth	r3, r3
 800a594:	4a3c      	ldr	r2, [pc, #240]	; (800a688 <tcp_receive+0x57c>)
 800a596:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a598:	4a35      	ldr	r2, [pc, #212]	; (800a670 <tcp_receive+0x564>)
 800a59a:	6812      	ldr	r2, [r2, #0]
 800a59c:	4413      	add	r3, r2
 800a59e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a5a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a5a2:	440a      	add	r2, r1
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d0b7      	beq.n	800a518 <tcp_receive+0x40c>
 800a5a8:	4b32      	ldr	r3, [pc, #200]	; (800a674 <tcp_receive+0x568>)
 800a5aa:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a5ae:	4937      	ldr	r1, [pc, #220]	; (800a68c <tcp_receive+0x580>)
 800a5b0:	4832      	ldr	r0, [pc, #200]	; (800a67c <tcp_receive+0x570>)
 800a5b2:	f004 fcb7 	bl	800ef24 <iprintf>
 800a5b6:	e7af      	b.n	800a518 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a5b8:	4e2c      	ldr	r6, [pc, #176]	; (800a66c <tcp_receive+0x560>)
 800a5ba:	68f3      	ldr	r3, [r6, #12]
 800a5bc:	899d      	ldrh	r5, [r3, #12]
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f7fd f995 	bl	80078ee <lwip_htons>
 800a5c4:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a5c8:	f7fd f991 	bl	80078ee <lwip_htons>
 800a5cc:	68f3      	ldr	r3, [r6, #12]
 800a5ce:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a5d2:	4305      	orrs	r5, r0
 800a5d4:	819d      	strh	r5, [r3, #12]
 800a5d6:	e7bf      	b.n	800a558 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 800a5d8:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800a5da:	2d00      	cmp	r5, #0
 800a5dc:	f000 81d8 	beq.w	800a990 <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a5e0:	4f23      	ldr	r7, [pc, #140]	; (800a670 <tcp_receive+0x564>)
 800a5e2:	4e29      	ldr	r6, [pc, #164]	; (800a688 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a5e4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a66c <tcp_receive+0x560>
 800a5e8:	e009      	b.n	800a5fe <tcp_receive+0x4f2>
              next = next->next;
 800a5ea:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 800a5ee:	4628      	mov	r0, r5
 800a5f0:	f7fe fc76 	bl	8008ee0 <tcp_seg_free>
            while (next &&
 800a5f4:	f1b9 0f00 	cmp.w	r9, #0
 800a5f8:	f000 81ca 	beq.w	800a990 <tcp_receive+0x884>
              next = next->next;
 800a5fc:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a5fe:	f8d7 c000 	ldr.w	ip, [r7]
 800a602:	68e9      	ldr	r1, [r5, #12]
 800a604:	6848      	ldr	r0, [r1, #4]
 800a606:	8833      	ldrh	r3, [r6, #0]
 800a608:	4463      	add	r3, ip
 800a60a:	1a1b      	subs	r3, r3, r0
 800a60c:	892a      	ldrh	r2, [r5, #8]
 800a60e:	1a9a      	subs	r2, r3, r2
            while (next &&
 800a610:	2a00      	cmp	r2, #0
 800a612:	f2c0 81bf 	blt.w	800a994 <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a616:	8988      	ldrh	r0, [r1, #12]
 800a618:	f7fd f969 	bl	80078ee <lwip_htons>
 800a61c:	f010 0f01 	tst.w	r0, #1
 800a620:	d0e3      	beq.n	800a5ea <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a622:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a626:	8998      	ldrh	r0, [r3, #12]
 800a628:	f7fd f961 	bl	80078ee <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a62c:	f010 0f02 	tst.w	r0, #2
 800a630:	d1db      	bne.n	800a5ea <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a632:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a636:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800a63a:	2001      	movs	r0, #1
 800a63c:	f7fd f957 	bl	80078ee <lwip_htons>
 800a640:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a644:	ea49 0900 	orr.w	r9, r9, r0
 800a648:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a64c:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800a650:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a654:	8998      	ldrh	r0, [r3, #12]
 800a656:	f7fd f94a 	bl	80078ee <lwip_htons>
 800a65a:	f010 0303 	ands.w	r3, r0, #3
 800a65e:	bf18      	it	ne
 800a660:	2301      	movne	r3, #1
 800a662:	444b      	add	r3, r9
 800a664:	8033      	strh	r3, [r6, #0]
 800a666:	e7c0      	b.n	800a5ea <tcp_receive+0x4de>
 800a668:	200107dc 	.word	0x200107dc
 800a66c:	200107f0 	.word	0x200107f0
 800a670:	2001080c 	.word	0x2001080c
 800a674:	080121dc 	.word	0x080121dc
 800a678:	0801230c 	.word	0x0801230c
 800a67c:	0800fe60 	.word	0x0800fe60
 800a680:	0801231c 	.word	0x0801231c
 800a684:	0801232c 	.word	0x0801232c
 800a688:	20010826 	.word	0x20010826
 800a68c:	0801233c 	.word	0x0801233c
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a690:	4b81      	ldr	r3, [pc, #516]	; (800a898 <tcp_receive+0x78c>)
 800a692:	eba0 000c 	sub.w	r0, r0, ip
 800a696:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	8998      	ldrh	r0, [r3, #12]
 800a69c:	f7fd f927 	bl	80078ee <lwip_htons>
 800a6a0:	f010 0f02 	tst.w	r0, #2
 800a6a4:	d003      	beq.n	800a6ae <tcp_receive+0x5a2>
                inseg.len -= 1;
 800a6a6:	4a7c      	ldr	r2, [pc, #496]	; (800a898 <tcp_receive+0x78c>)
 800a6a8:	8913      	ldrh	r3, [r2, #8]
 800a6aa:	3b01      	subs	r3, #1
 800a6ac:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a6ae:	4f7a      	ldr	r7, [pc, #488]	; (800a898 <tcp_receive+0x78c>)
 800a6b0:	8939      	ldrh	r1, [r7, #8]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7fe f872 	bl	800879c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a6b8:	893e      	ldrh	r6, [r7, #8]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8998      	ldrh	r0, [r3, #12]
 800a6be:	f7fd f916 	bl	80078ee <lwip_htons>
 800a6c2:	f010 0303 	ands.w	r3, r0, #3
 800a6c6:	bf18      	it	ne
 800a6c8:	2301      	movne	r3, #1
 800a6ca:	4433      	add	r3, r6
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	4a73      	ldr	r2, [pc, #460]	; (800a89c <tcp_receive+0x790>)
 800a6d0:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a6d2:	4a73      	ldr	r2, [pc, #460]	; (800a8a0 <tcp_receive+0x794>)
 800a6d4:	6812      	ldr	r2, [r2, #0]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	68ea      	ldr	r2, [r5, #12]
 800a6da:	6852      	ldr	r2, [r2, #4]
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	f000 815c 	beq.w	800a99a <tcp_receive+0x88e>
 800a6e2:	4b70      	ldr	r3, [pc, #448]	; (800a8a4 <tcp_receive+0x798>)
 800a6e4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a6e8:	496f      	ldr	r1, [pc, #444]	; (800a8a8 <tcp_receive+0x79c>)
 800a6ea:	4870      	ldr	r0, [pc, #448]	; (800a8ac <tcp_receive+0x7a0>)
 800a6ec:	f004 fc1a 	bl	800ef24 <iprintf>
 800a6f0:	e153      	b.n	800a99a <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a6f2:	4b6c      	ldr	r3, [pc, #432]	; (800a8a4 <tcp_receive+0x798>)
 800a6f4:	f240 6207 	movw	r2, #1543	; 0x607
 800a6f8:	496d      	ldr	r1, [pc, #436]	; (800a8b0 <tcp_receive+0x7a4>)
 800a6fa:	486c      	ldr	r0, [pc, #432]	; (800a8ac <tcp_receive+0x7a0>)
 800a6fc:	f004 fc12 	bl	800ef24 <iprintf>
 800a700:	e156      	b.n	800a9b0 <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a702:	4643      	mov	r3, r8
 800a704:	f240 622b 	movw	r2, #1579	; 0x62b
 800a708:	4639      	mov	r1, r7
 800a70a:	4868      	ldr	r0, [pc, #416]	; (800a8ac <tcp_receive+0x7a0>)
 800a70c:	f004 fc0a 	bl	800ef24 <iprintf>
 800a710:	e03e      	b.n	800a790 <tcp_receive+0x684>
              recv_data = cseg->p;
 800a712:	4b68      	ldr	r3, [pc, #416]	; (800a8b4 <tcp_receive+0x7a8>)
 800a714:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800a716:	2300      	movs	r3, #0
 800a718:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a71a:	68eb      	ldr	r3, [r5, #12]
 800a71c:	8998      	ldrh	r0, [r3, #12]
 800a71e:	f7fd f8e6 	bl	80078ee <lwip_htons>
 800a722:	f010 0f01 	tst.w	r0, #1
 800a726:	d009      	beq.n	800a73c <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 800a728:	4a63      	ldr	r2, [pc, #396]	; (800a8b8 <tcp_receive+0x7ac>)
 800a72a:	7813      	ldrb	r3, [r2, #0]
 800a72c:	f043 0320 	orr.w	r3, r3, #32
 800a730:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a732:	7d23      	ldrb	r3, [r4, #20]
 800a734:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800a736:	bf04      	itt	eq
 800a738:	2307      	moveq	r3, #7
 800a73a:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800a740:	4628      	mov	r0, r5
 800a742:	f7fe fbcd 	bl	8008ee0 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a746:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a748:	2d00      	cmp	r5, #0
 800a74a:	d03d      	beq.n	800a7c8 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a74c:	68ea      	ldr	r2, [r5, #12]
 800a74e:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800a750:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a752:	428b      	cmp	r3, r1
 800a754:	d138      	bne.n	800a7c8 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a756:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a758:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a75c:	8990      	ldrh	r0, [r2, #12]
 800a75e:	f7fd f8c6 	bl	80078ee <lwip_htons>
 800a762:	f010 0003 	ands.w	r0, r0, #3
 800a766:	bf18      	it	ne
 800a768:	2001      	movne	r0, #1
 800a76a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a76c:	4499      	add	r9, r3
 800a76e:	4448      	add	r0, r9
 800a770:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a772:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800a776:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a77a:	68eb      	ldr	r3, [r5, #12]
 800a77c:	8998      	ldrh	r0, [r3, #12]
 800a77e:	f7fd f8b6 	bl	80078ee <lwip_htons>
 800a782:	f010 0003 	ands.w	r0, r0, #3
 800a786:	bf18      	it	ne
 800a788:	2001      	movne	r0, #1
 800a78a:	4450      	add	r0, sl
 800a78c:	4581      	cmp	r9, r0
 800a78e:	d3b8      	bcc.n	800a702 <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a790:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a794:	68eb      	ldr	r3, [r5, #12]
 800a796:	8998      	ldrh	r0, [r3, #12]
 800a798:	f7fd f8a9 	bl	80078ee <lwip_htons>
 800a79c:	f010 0003 	ands.w	r0, r0, #3
 800a7a0:	bf18      	it	ne
 800a7a2:	2001      	movne	r0, #1
 800a7a4:	4448      	add	r0, r9
 800a7a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a7a8:	1a18      	subs	r0, r3, r0
 800a7aa:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f7fe fb21 	bl	8008df4 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a7b2:	6869      	ldr	r1, [r5, #4]
 800a7b4:	890b      	ldrh	r3, [r1, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d0af      	beq.n	800a71a <tcp_receive+0x60e>
            if (recv_data) {
 800a7ba:	4b3e      	ldr	r3, [pc, #248]	; (800a8b4 <tcp_receive+0x7a8>)
 800a7bc:	6818      	ldr	r0, [r3, #0]
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d0a7      	beq.n	800a712 <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 800a7c2:	f7fe f873 	bl	80088ac <pbuf_cat>
 800a7c6:	e7a6      	b.n	800a716 <tcp_receive+0x60a>
        tcp_ack(pcb);
 800a7c8:	8b63      	ldrh	r3, [r4, #26]
 800a7ca:	f013 0f01 	tst.w	r3, #1
 800a7ce:	bf1a      	itte	ne
 800a7d0:	f023 0301 	bicne.w	r3, r3, #1
 800a7d4:	f043 0302 	orrne.w	r3, r3, #2
 800a7d8:	f043 0301 	orreq.w	r3, r3, #1
 800a7dc:	8363      	strh	r3, [r4, #26]
 800a7de:	e54a      	b.n	800a276 <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a7e0:	482d      	ldr	r0, [pc, #180]	; (800a898 <tcp_receive+0x78c>)
 800a7e2:	f7fe fb95 	bl	8008f10 <tcp_seg_copy>
 800a7e6:	6760      	str	r0, [r4, #116]	; 0x74
 800a7e8:	e051      	b.n	800a88e <tcp_receive+0x782>
              if (inseg.len > next->len) {
 800a7ea:	4b2b      	ldr	r3, [pc, #172]	; (800a898 <tcp_receive+0x78c>)
 800a7ec:	891a      	ldrh	r2, [r3, #8]
 800a7ee:	892b      	ldrh	r3, [r5, #8]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d94c      	bls.n	800a88e <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a7f4:	4828      	ldr	r0, [pc, #160]	; (800a898 <tcp_receive+0x78c>)
 800a7f6:	f7fe fb8b 	bl	8008f10 <tcp_seg_copy>
                if (cseg != NULL) {
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d046      	beq.n	800a88e <tcp_receive+0x782>
                  if (prev != NULL) {
 800a800:	b12e      	cbz	r6, 800a80e <tcp_receive+0x702>
                    prev->next = cseg;
 800a802:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800a804:	4629      	mov	r1, r5
 800a806:	4618      	mov	r0, r3
 800a808:	f7ff fc28 	bl	800a05c <tcp_oos_insert_segment>
 800a80c:	e03f      	b.n	800a88e <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a80e:	6760      	str	r0, [r4, #116]	; 0x74
 800a810:	e7f8      	b.n	800a804 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a812:	1a99      	subs	r1, r3, r2
 800a814:	2900      	cmp	r1, #0
 800a816:	db27      	blt.n	800a868 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800a818:	6829      	ldr	r1, [r5, #0]
 800a81a:	462e      	mov	r6, r5
 800a81c:	2900      	cmp	r1, #0
 800a81e:	d033      	beq.n	800a888 <tcp_receive+0x77c>
 800a820:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800a822:	68e8      	ldr	r0, [r5, #12]
 800a824:	6842      	ldr	r2, [r0, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	d0df      	beq.n	800a7ea <tcp_receive+0x6de>
              if (prev == NULL) {
 800a82a:	2e00      	cmp	r6, #0
 800a82c:	d0f1      	beq.n	800a812 <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a82e:	68f1      	ldr	r1, [r6, #12]
 800a830:	6849      	ldr	r1, [r1, #4]
 800a832:	1a79      	subs	r1, r7, r1
 800a834:	2900      	cmp	r1, #0
 800a836:	dbef      	blt.n	800a818 <tcp_receive+0x70c>
 800a838:	ebac 0102 	sub.w	r1, ip, r2
 800a83c:	2900      	cmp	r1, #0
 800a83e:	dceb      	bgt.n	800a818 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a840:	4815      	ldr	r0, [pc, #84]	; (800a898 <tcp_receive+0x78c>)
 800a842:	f7fe fb65 	bl	8008f10 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a846:	4607      	mov	r7, r0
 800a848:	b308      	cbz	r0, 800a88e <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a84a:	68f3      	ldr	r3, [r6, #12]
 800a84c:	6859      	ldr	r1, [r3, #4]
 800a84e:	4b14      	ldr	r3, [pc, #80]	; (800a8a0 <tcp_receive+0x794>)
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	8933      	ldrh	r3, [r6, #8]
 800a854:	440b      	add	r3, r1
 800a856:	1a9b      	subs	r3, r3, r2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	dc0e      	bgt.n	800a87a <tcp_receive+0x76e>
                    prev->next = cseg;
 800a85c:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a85e:	4629      	mov	r1, r5
 800a860:	4638      	mov	r0, r7
 800a862:	f7ff fbfb 	bl	800a05c <tcp_oos_insert_segment>
 800a866:	e012      	b.n	800a88e <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a868:	480b      	ldr	r0, [pc, #44]	; (800a898 <tcp_receive+0x78c>)
 800a86a:	f7fe fb51 	bl	8008f10 <tcp_seg_copy>
                  if (cseg != NULL) {
 800a86e:	b170      	cbz	r0, 800a88e <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a870:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a872:	4629      	mov	r1, r5
 800a874:	f7ff fbf2 	bl	800a05c <tcp_oos_insert_segment>
 800a878:	e009      	b.n	800a88e <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a87a:	1a52      	subs	r2, r2, r1
 800a87c:	b291      	uxth	r1, r2
 800a87e:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a880:	6870      	ldr	r0, [r6, #4]
 800a882:	f7fd ff8b 	bl	800879c <pbuf_realloc>
 800a886:	e7e9      	b.n	800a85c <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a888:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	dc16      	bgt.n	800a8bc <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 800a88e:	4620      	mov	r0, r4
 800a890:	f001 fec8 	bl	800c624 <tcp_send_empty_ack>
 800a894:	e4ef      	b.n	800a276 <tcp_receive+0x16a>
 800a896:	bf00      	nop
 800a898:	200107f0 	.word	0x200107f0
 800a89c:	20010826 	.word	0x20010826
 800a8a0:	2001080c 	.word	0x2001080c
 800a8a4:	080121dc 	.word	0x080121dc
 800a8a8:	08012374 	.word	0x08012374
 800a8ac:	0800fe60 	.word	0x0800fe60
 800a8b0:	080123b0 	.word	0x080123b0
 800a8b4:	20010804 	.word	0x20010804
 800a8b8:	20010808 	.word	0x20010808
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a8bc:	8980      	ldrh	r0, [r0, #12]
 800a8be:	f7fd f816 	bl	80078ee <lwip_htons>
 800a8c2:	f010 0f01 	tst.w	r0, #1
 800a8c6:	d1e2      	bne.n	800a88e <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 800a8c8:	484d      	ldr	r0, [pc, #308]	; (800aa00 <tcp_receive+0x8f4>)
 800a8ca:	f7fe fb21 	bl	8008f10 <tcp_seg_copy>
 800a8ce:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800a8d0:	2800      	cmp	r0, #0
 800a8d2:	d0dc      	beq.n	800a88e <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a8d4:	68eb      	ldr	r3, [r5, #12]
 800a8d6:	6859      	ldr	r1, [r3, #4]
 800a8d8:	4b4a      	ldr	r3, [pc, #296]	; (800aa04 <tcp_receive+0x8f8>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	892a      	ldrh	r2, [r5, #8]
 800a8de:	440a      	add	r2, r1
 800a8e0:	1ad2      	subs	r2, r2, r3
 800a8e2:	2a00      	cmp	r2, #0
 800a8e4:	dc3c      	bgt.n	800a960 <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a8e6:	4b48      	ldr	r3, [pc, #288]	; (800aa08 <tcp_receive+0x8fc>)
 800a8e8:	881b      	ldrh	r3, [r3, #0]
 800a8ea:	4a46      	ldr	r2, [pc, #280]	; (800aa04 <tcp_receive+0x8f8>)
 800a8ec:	6812      	ldr	r2, [r2, #0]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a8f2:	1a9b      	subs	r3, r3, r2
 800a8f4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a8f6:	1a9b      	subs	r3, r3, r2
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	ddc8      	ble.n	800a88e <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	68db      	ldr	r3, [r3, #12]
 800a900:	8998      	ldrh	r0, [r3, #12]
 800a902:	f7fc fff4 	bl	80078ee <lwip_htons>
 800a906:	f010 0f01 	tst.w	r0, #1
 800a90a:	d130      	bne.n	800a96e <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a90c:	682a      	ldr	r2, [r5, #0]
 800a90e:	4e3d      	ldr	r6, [pc, #244]	; (800aa04 <tcp_receive+0x8f8>)
 800a910:	6831      	ldr	r1, [r6, #0]
 800a912:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a914:	1a5b      	subs	r3, r3, r1
 800a916:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a918:	440b      	add	r3, r1
 800a91a:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a91c:	682b      	ldr	r3, [r5, #0]
 800a91e:	8919      	ldrh	r1, [r3, #8]
 800a920:	6858      	ldr	r0, [r3, #4]
 800a922:	f7fd ff3b 	bl	800879c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a926:	682b      	ldr	r3, [r5, #0]
 800a928:	891d      	ldrh	r5, [r3, #8]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	8998      	ldrh	r0, [r3, #12]
 800a92e:	f7fc ffde 	bl	80078ee <lwip_htons>
 800a932:	f010 0303 	ands.w	r3, r0, #3
 800a936:	bf18      	it	ne
 800a938:	2301      	movne	r3, #1
 800a93a:	442b      	add	r3, r5
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	4a32      	ldr	r2, [pc, #200]	; (800aa08 <tcp_receive+0x8fc>)
 800a940:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a942:	6832      	ldr	r2, [r6, #0]
 800a944:	4413      	add	r3, r2
 800a946:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a948:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a94a:	440a      	add	r2, r1
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d09e      	beq.n	800a88e <tcp_receive+0x782>
 800a950:	4b2e      	ldr	r3, [pc, #184]	; (800aa0c <tcp_receive+0x900>)
 800a952:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a956:	492e      	ldr	r1, [pc, #184]	; (800aa10 <tcp_receive+0x904>)
 800a958:	482e      	ldr	r0, [pc, #184]	; (800aa14 <tcp_receive+0x908>)
 800a95a:	f004 fae3 	bl	800ef24 <iprintf>
 800a95e:	e796      	b.n	800a88e <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a960:	1a5b      	subs	r3, r3, r1
 800a962:	b299      	uxth	r1, r3
 800a964:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a966:	6868      	ldr	r0, [r5, #4]
 800a968:	f7fd ff18 	bl	800879c <pbuf_realloc>
 800a96c:	e7bb      	b.n	800a8e6 <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a96e:	682b      	ldr	r3, [r5, #0]
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	899e      	ldrh	r6, [r3, #12]
 800a974:	4630      	mov	r0, r6
 800a976:	f7fc ffba 	bl	80078ee <lwip_htons>
 800a97a:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a97e:	f7fc ffb6 	bl	80078ee <lwip_htons>
 800a982:	682b      	ldr	r3, [r5, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
 800a986:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a98a:	4306      	orrs	r6, r0
 800a98c:	819e      	strh	r6, [r3, #12]
 800a98e:	e7bd      	b.n	800a90c <tcp_receive+0x800>
              next = next->next;
 800a990:	2500      	movs	r5, #0
 800a992:	e002      	b.n	800a99a <tcp_receive+0x88e>
            if (next &&
 800a994:	2b00      	cmp	r3, #0
 800a996:	f73f ae7b 	bgt.w	800a690 <tcp_receive+0x584>
            pcb->ooseq = next;
 800a99a:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800a99c:	4b1a      	ldr	r3, [pc, #104]	; (800aa08 <tcp_receive+0x8fc>)
 800a99e:	881a      	ldrh	r2, [r3, #0]
 800a9a0:	4b18      	ldr	r3, [pc, #96]	; (800aa04 <tcp_receive+0x8f8>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	4413      	add	r3, r2
 800a9a6:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a9a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	f4ff aea1 	bcc.w	800a6f2 <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800a9b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a9b2:	4a15      	ldr	r2, [pc, #84]	; (800aa08 <tcp_receive+0x8fc>)
 800a9b4:	8812      	ldrh	r2, [r2, #0]
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7fe fa1a 	bl	8008df4 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a9c0:	4b0f      	ldr	r3, [pc, #60]	; (800aa00 <tcp_receive+0x8f4>)
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	891a      	ldrh	r2, [r3, #8]
 800a9c6:	b122      	cbz	r2, 800a9d2 <tcp_receive+0x8c6>
          recv_data = inseg.p;
 800a9c8:	4a13      	ldr	r2, [pc, #76]	; (800aa18 <tcp_receive+0x90c>)
 800a9ca:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800a9cc:	4b0c      	ldr	r3, [pc, #48]	; (800aa00 <tcp_receive+0x8f4>)
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a9d2:	4b0b      	ldr	r3, [pc, #44]	; (800aa00 <tcp_receive+0x8f4>)
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	8998      	ldrh	r0, [r3, #12]
 800a9d8:	f7fc ff89 	bl	80078ee <lwip_htons>
 800a9dc:	f010 0f01 	tst.w	r0, #1
 800a9e0:	d004      	beq.n	800a9ec <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 800a9e2:	4a0e      	ldr	r2, [pc, #56]	; (800aa1c <tcp_receive+0x910>)
 800a9e4:	7813      	ldrb	r3, [r2, #0]
 800a9e6:	f043 0320 	orr.w	r3, r3, #32
 800a9ea:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800a9ec:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a9ee:	2d00      	cmp	r5, #0
 800a9f0:	f43f aeea 	beq.w	800a7c8 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a9f4:	4e03      	ldr	r6, [pc, #12]	; (800aa04 <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a9f6:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800aa0c <tcp_receive+0x900>
 800a9fa:	4f09      	ldr	r7, [pc, #36]	; (800aa20 <tcp_receive+0x914>)
 800a9fc:	e6a6      	b.n	800a74c <tcp_receive+0x640>
 800a9fe:	bf00      	nop
 800aa00:	200107f0 	.word	0x200107f0
 800aa04:	2001080c 	.word	0x2001080c
 800aa08:	20010826 	.word	0x20010826
 800aa0c:	080121dc 	.word	0x080121dc
 800aa10:	0801233c 	.word	0x0801233c
 800aa14:	0800fe60 	.word	0x0800fe60
 800aa18:	20010804 	.word	0x20010804
 800aa1c:	20010808 	.word	0x20010808
 800aa20:	080123d0 	.word	0x080123d0

0800aa24 <tcp_input>:
{
 800aa24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa28:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	b158      	cbz	r0, 800aa46 <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800aa2e:	686a      	ldr	r2, [r5, #4]
 800aa30:	4b77      	ldr	r3, [pc, #476]	; (800ac10 <tcp_input+0x1ec>)
 800aa32:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800aa34:	896b      	ldrh	r3, [r5, #10]
 800aa36:	2b13      	cmp	r3, #19
 800aa38:	d80c      	bhi.n	800aa54 <tcp_input+0x30>
  pbuf_free(p);
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f7fd fd96 	bl	800856c <pbuf_free>
}
 800aa40:	b005      	add	sp, #20
 800aa42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800aa46:	4b73      	ldr	r3, [pc, #460]	; (800ac14 <tcp_input+0x1f0>)
 800aa48:	2283      	movs	r2, #131	; 0x83
 800aa4a:	4973      	ldr	r1, [pc, #460]	; (800ac18 <tcp_input+0x1f4>)
 800aa4c:	4873      	ldr	r0, [pc, #460]	; (800ac1c <tcp_input+0x1f8>)
 800aa4e:	f004 fa69 	bl	800ef24 <iprintf>
 800aa52:	e7ec      	b.n	800aa2e <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa54:	4b72      	ldr	r3, [pc, #456]	; (800ac20 <tcp_input+0x1fc>)
 800aa56:	6819      	ldr	r1, [r3, #0]
 800aa58:	6958      	ldr	r0, [r3, #20]
 800aa5a:	f003 fa96 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	d1eb      	bne.n	800aa3a <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800aa62:	4b6f      	ldr	r3, [pc, #444]	; (800ac20 <tcp_input+0x1fc>)
 800aa64:	695b      	ldr	r3, [r3, #20]
 800aa66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa6a:	2be0      	cmp	r3, #224	; 0xe0
 800aa6c:	d0e5      	beq.n	800aa3a <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800aa6e:	4b68      	ldr	r3, [pc, #416]	; (800ac10 <tcp_input+0x1ec>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	8998      	ldrh	r0, [r3, #12]
 800aa74:	f7fc ff3b 	bl	80078ee <lwip_htons>
 800aa78:	0a81      	lsrs	r1, r0, #10
 800aa7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800aa7e:	2913      	cmp	r1, #19
 800aa80:	d9db      	bls.n	800aa3a <tcp_input+0x16>
 800aa82:	b28b      	uxth	r3, r1
 800aa84:	892a      	ldrh	r2, [r5, #8]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3d7      	bcc.n	800aa3a <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800aa8a:	f1a3 0214 	sub.w	r2, r3, #20
 800aa8e:	b292      	uxth	r2, r2
 800aa90:	4864      	ldr	r0, [pc, #400]	; (800ac24 <tcp_input+0x200>)
 800aa92:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800aa94:	4864      	ldr	r0, [pc, #400]	; (800ac28 <tcp_input+0x204>)
 800aa96:	2400      	movs	r4, #0
 800aa98:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800aa9a:	8968      	ldrh	r0, [r5, #10]
 800aa9c:	4298      	cmp	r0, r3
 800aa9e:	d22e      	bcs.n	800aafe <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d068      	beq.n	800ab78 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800aaa6:	2114      	movs	r1, #20
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	f7fd fd1f 	bl	80084ec <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800aaae:	896c      	ldrh	r4, [r5, #10]
 800aab0:	4b5e      	ldr	r3, [pc, #376]	; (800ac2c <tcp_input+0x208>)
 800aab2:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800aab4:	4b5b      	ldr	r3, [pc, #364]	; (800ac24 <tcp_input+0x200>)
 800aab6:	881f      	ldrh	r7, [r3, #0]
 800aab8:	1b3e      	subs	r6, r7, r4
 800aaba:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800aabc:	4621      	mov	r1, r4
 800aabe:	4628      	mov	r0, r5
 800aac0:	f7fd fd14 	bl	80084ec <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800aac4:	6828      	ldr	r0, [r5, #0]
 800aac6:	8943      	ldrh	r3, [r0, #10]
 800aac8:	42b3      	cmp	r3, r6
 800aaca:	d3b6      	bcc.n	800aa3a <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aacc:	6842      	ldr	r2, [r0, #4]
 800aace:	4b56      	ldr	r3, [pc, #344]	; (800ac28 <tcp_input+0x204>)
 800aad0:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800aad2:	4631      	mov	r1, r6
 800aad4:	f7fd fd0a 	bl	80084ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800aad8:	892b      	ldrh	r3, [r5, #8]
 800aada:	441c      	add	r4, r3
 800aadc:	1be4      	subs	r4, r4, r7
 800aade:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800aae0:	896b      	ldrh	r3, [r5, #10]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d14f      	bne.n	800ab86 <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aae6:	682b      	ldr	r3, [r5, #0]
 800aae8:	892a      	ldrh	r2, [r5, #8]
 800aaea:	891b      	ldrh	r3, [r3, #8]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d00b      	beq.n	800ab08 <tcp_input+0xe4>
 800aaf0:	4b48      	ldr	r3, [pc, #288]	; (800ac14 <tcp_input+0x1f0>)
 800aaf2:	22e0      	movs	r2, #224	; 0xe0
 800aaf4:	494e      	ldr	r1, [pc, #312]	; (800ac30 <tcp_input+0x20c>)
 800aaf6:	4849      	ldr	r0, [pc, #292]	; (800ac1c <tcp_input+0x1f8>)
 800aaf8:	f004 fa14 	bl	800ef24 <iprintf>
 800aafc:	e004      	b.n	800ab08 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800aafe:	4b4b      	ldr	r3, [pc, #300]	; (800ac2c <tcp_input+0x208>)
 800ab00:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ab02:	4628      	mov	r0, r5
 800ab04:	f7fd fcf2 	bl	80084ec <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ab08:	4c41      	ldr	r4, [pc, #260]	; (800ac10 <tcp_input+0x1ec>)
 800ab0a:	6826      	ldr	r6, [r4, #0]
 800ab0c:	8830      	ldrh	r0, [r6, #0]
 800ab0e:	f7fc feee 	bl	80078ee <lwip_htons>
 800ab12:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ab14:	6826      	ldr	r6, [r4, #0]
 800ab16:	8870      	ldrh	r0, [r6, #2]
 800ab18:	f7fc fee9 	bl	80078ee <lwip_htons>
 800ab1c:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ab1e:	6826      	ldr	r6, [r4, #0]
 800ab20:	6870      	ldr	r0, [r6, #4]
 800ab22:	f7fc fee9 	bl	80078f8 <lwip_htonl>
 800ab26:	6070      	str	r0, [r6, #4]
 800ab28:	4b42      	ldr	r3, [pc, #264]	; (800ac34 <tcp_input+0x210>)
 800ab2a:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ab2c:	6826      	ldr	r6, [r4, #0]
 800ab2e:	68b0      	ldr	r0, [r6, #8]
 800ab30:	f7fc fee2 	bl	80078f8 <lwip_htonl>
 800ab34:	60b0      	str	r0, [r6, #8]
 800ab36:	4b40      	ldr	r3, [pc, #256]	; (800ac38 <tcp_input+0x214>)
 800ab38:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ab3a:	6826      	ldr	r6, [r4, #0]
 800ab3c:	89f0      	ldrh	r0, [r6, #14]
 800ab3e:	f7fc fed6 	bl	80078ee <lwip_htons>
 800ab42:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	8998      	ldrh	r0, [r3, #12]
 800ab48:	f7fc fed1 	bl	80078ee <lwip_htons>
 800ab4c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800ab50:	4b3a      	ldr	r3, [pc, #232]	; (800ac3c <tcp_input+0x218>)
 800ab52:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800ab54:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800ab56:	f010 0f03 	tst.w	r0, #3
 800ab5a:	d11b      	bne.n	800ab94 <tcp_input+0x170>
  tcplen = p->tot_len;
 800ab5c:	4b38      	ldr	r3, [pc, #224]	; (800ac40 <tcp_input+0x21c>)
 800ab5e:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab60:	4b38      	ldr	r3, [pc, #224]	; (800ac44 <tcp_input+0x220>)
 800ab62:	681c      	ldr	r4, [r3, #0]
 800ab64:	2c00      	cmp	r4, #0
 800ab66:	f000 8563 	beq.w	800b630 <tcp_input+0xc0c>
  prev = NULL;
 800ab6a:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab6c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800ac14 <tcp_input+0x1f0>
 800ab70:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800ac58 <tcp_input+0x234>
 800ab74:	4f29      	ldr	r7, [pc, #164]	; (800ac1c <tcp_input+0x1f8>)
 800ab76:	e035      	b.n	800abe4 <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ab78:	4b26      	ldr	r3, [pc, #152]	; (800ac14 <tcp_input+0x1f0>)
 800ab7a:	22c2      	movs	r2, #194	; 0xc2
 800ab7c:	4932      	ldr	r1, [pc, #200]	; (800ac48 <tcp_input+0x224>)
 800ab7e:	4827      	ldr	r0, [pc, #156]	; (800ac1c <tcp_input+0x1f8>)
 800ab80:	f004 f9d0 	bl	800ef24 <iprintf>
 800ab84:	e78f      	b.n	800aaa6 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab86:	4b23      	ldr	r3, [pc, #140]	; (800ac14 <tcp_input+0x1f0>)
 800ab88:	22df      	movs	r2, #223	; 0xdf
 800ab8a:	4930      	ldr	r1, [pc, #192]	; (800ac4c <tcp_input+0x228>)
 800ab8c:	4823      	ldr	r0, [pc, #140]	; (800ac1c <tcp_input+0x1f8>)
 800ab8e:	f004 f9c9 	bl	800ef24 <iprintf>
 800ab92:	e7a8      	b.n	800aae6 <tcp_input+0xc2>
    tcplen++;
 800ab94:	1c53      	adds	r3, r2, #1
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	4929      	ldr	r1, [pc, #164]	; (800ac40 <tcp_input+0x21c>)
 800ab9a:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d9df      	bls.n	800ab60 <tcp_input+0x13c>
 800aba0:	e74b      	b.n	800aa3a <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800aba2:	4643      	mov	r3, r8
 800aba4:	22fb      	movs	r2, #251	; 0xfb
 800aba6:	4649      	mov	r1, r9
 800aba8:	4638      	mov	r0, r7
 800abaa:	f004 f9bb 	bl	800ef24 <iprintf>
 800abae:	e01c      	b.n	800abea <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800abb0:	4643      	mov	r3, r8
 800abb2:	22fc      	movs	r2, #252	; 0xfc
 800abb4:	4926      	ldr	r1, [pc, #152]	; (800ac50 <tcp_input+0x22c>)
 800abb6:	4638      	mov	r0, r7
 800abb8:	f004 f9b4 	bl	800ef24 <iprintf>
 800abbc:	e018      	b.n	800abf0 <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800abbe:	4643      	mov	r3, r8
 800abc0:	22fd      	movs	r2, #253	; 0xfd
 800abc2:	4924      	ldr	r1, [pc, #144]	; (800ac54 <tcp_input+0x230>)
 800abc4:	4638      	mov	r0, r7
 800abc6:	f004 f9ad 	bl	800ef24 <iprintf>
 800abca:	e014      	b.n	800abf6 <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 800abcc:	4b10      	ldr	r3, [pc, #64]	; (800ac10 <tcp_input+0x1ec>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	8b21      	ldrh	r1, [r4, #24]
 800abd2:	881a      	ldrh	r2, [r3, #0]
 800abd4:	4291      	cmp	r1, r2
 800abd6:	d041      	beq.n	800ac5c <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800abd8:	68e3      	ldr	r3, [r4, #12]
 800abda:	4626      	mov	r6, r4
 800abdc:	2b00      	cmp	r3, #0
 800abde:	f000 8527 	beq.w	800b630 <tcp_input+0xc0c>
 800abe2:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800abe4:	7d23      	ldrb	r3, [r4, #20]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d0db      	beq.n	800aba2 <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800abea:	7d23      	ldrb	r3, [r4, #20]
 800abec:	2b0a      	cmp	r3, #10
 800abee:	d0df      	beq.n	800abb0 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800abf0:	7d23      	ldrb	r3, [r4, #20]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d0e3      	beq.n	800abbe <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800abf6:	7a22      	ldrb	r2, [r4, #8]
 800abf8:	2a00      	cmp	r2, #0
 800abfa:	d0e7      	beq.n	800abcc <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800abfc:	4b08      	ldr	r3, [pc, #32]	; (800ac20 <tcp_input+0x1fc>)
 800abfe:	685b      	ldr	r3, [r3, #4]
 800ac00:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac04:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d0df      	beq.n	800abcc <tcp_input+0x1a8>
 800ac0c:	e7e4      	b.n	800abd8 <tcp_input+0x1b4>
 800ac0e:	bf00      	nop
 800ac10:	20010818 	.word	0x20010818
 800ac14:	080121dc 	.word	0x080121dc
 800ac18:	080123f8 	.word	0x080123f8
 800ac1c:	0800fe60 	.word	0x0800fe60
 800ac20:	2000aeb8 	.word	0x2000aeb8
 800ac24:	20010824 	.word	0x20010824
 800ac28:	20010820 	.word	0x20010820
 800ac2c:	2001081c 	.word	0x2001081c
 800ac30:	0801242c 	.word	0x0801242c
 800ac34:	2001080c 	.word	0x2001080c
 800ac38:	200107e8 	.word	0x200107e8
 800ac3c:	200107ec 	.word	0x200107ec
 800ac40:	20010826 	.word	0x20010826
 800ac44:	200107cc 	.word	0x200107cc
 800ac48:	08012410 	.word	0x08012410
 800ac4c:	08012420 	.word	0x08012420
 800ac50:	08012474 	.word	0x08012474
 800ac54:	080124a0 	.word	0x080124a0
 800ac58:	0801244c 	.word	0x0801244c
    if (pcb->remote_port == tcphdr->src &&
 800ac5c:	8ae2      	ldrh	r2, [r4, #22]
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d1b9      	bne.n	800abd8 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800ac64:	6862      	ldr	r2, [r4, #4]
 800ac66:	4b8f      	ldr	r3, [pc, #572]	; (800aea4 <tcp_input+0x480>)
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d1b4      	bne.n	800abd8 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac6e:	6822      	ldr	r2, [r4, #0]
 800ac70:	4b8c      	ldr	r3, [pc, #560]	; (800aea4 <tcp_input+0x480>)
 800ac72:	695b      	ldr	r3, [r3, #20]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d1af      	bne.n	800abd8 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ac78:	68e3      	ldr	r3, [r4, #12]
 800ac7a:	42a3      	cmp	r3, r4
 800ac7c:	d04d      	beq.n	800ad1a <tcp_input+0x2f6>
      if (prev != NULL) {
 800ac7e:	b146      	cbz	r6, 800ac92 <tcp_input+0x26e>
        prev->next = pcb->next;
 800ac80:	68e3      	ldr	r3, [r4, #12]
 800ac82:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800ac84:	4b88      	ldr	r3, [pc, #544]	; (800aea8 <tcp_input+0x484>)
 800ac86:	681a      	ldr	r2, [r3, #0]
 800ac88:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800ac8a:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ac8c:	68e3      	ldr	r3, [r4, #12]
 800ac8e:	42a3      	cmp	r3, r4
 800ac90:	d04d      	beq.n	800ad2e <tcp_input+0x30a>
    inseg.next = NULL;
 800ac92:	4a86      	ldr	r2, [pc, #536]	; (800aeac <tcp_input+0x488>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800ac98:	8929      	ldrh	r1, [r5, #8]
 800ac9a:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800ac9c:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ac9e:	4984      	ldr	r1, [pc, #528]	; (800aeb0 <tcp_input+0x48c>)
 800aca0:	6809      	ldr	r1, [r1, #0]
 800aca2:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800aca4:	4a83      	ldr	r2, [pc, #524]	; (800aeb4 <tcp_input+0x490>)
 800aca6:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800aca8:	4a83      	ldr	r2, [pc, #524]	; (800aeb8 <tcp_input+0x494>)
 800acaa:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800acac:	4a83      	ldr	r2, [pc, #524]	; (800aebc <tcp_input+0x498>)
 800acae:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800acb0:	4b83      	ldr	r3, [pc, #524]	; (800aec0 <tcp_input+0x49c>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f013 0f08 	tst.w	r3, #8
 800acb8:	f040 817c 	bne.w	800afb4 <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 800acbc:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800acbe:	b16b      	cbz	r3, 800acdc <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800acc0:	4620      	mov	r0, r4
 800acc2:	f7fe fd7b 	bl	80097bc <tcp_process_refused_data>
 800acc6:	f110 0f0d 	cmn.w	r0, #13
 800acca:	f000 8178 	beq.w	800afbe <tcp_input+0x59a>
 800acce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800acd0:	b123      	cbz	r3, 800acdc <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800acd2:	4b7c      	ldr	r3, [pc, #496]	; (800aec4 <tcp_input+0x4a0>)
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f040 8171 	bne.w	800afbe <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 800acdc:	4b7a      	ldr	r3, [pc, #488]	; (800aec8 <tcp_input+0x4a4>)
 800acde:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800ace0:	4b77      	ldr	r3, [pc, #476]	; (800aec0 <tcp_input+0x49c>)
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	f013 0f04 	tst.w	r3, #4
 800ace8:	f000 81aa 	beq.w	800b040 <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 800acec:	7d21      	ldrb	r1, [r4, #20]
 800acee:	2902      	cmp	r1, #2
 800acf0:	f000 816b 	beq.w	800afca <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800acf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800acf6:	4b75      	ldr	r3, [pc, #468]	; (800aecc <tcp_input+0x4a8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	f000 818e 	beq.w	800b01c <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ad00:	1a9b      	subs	r3, r3, r2
 800ad02:	f100 8167 	bmi.w	800afd4 <tcp_input+0x5b0>
 800ad06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800ad08:	1a9b      	subs	r3, r3, r2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	f300 8162 	bgt.w	800afd4 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800ad10:	8b63      	ldrh	r3, [r4, #26]
 800ad12:	f043 0302 	orr.w	r3, r3, #2
 800ad16:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 800ad18:	e15c      	b.n	800afd4 <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ad1a:	4b6d      	ldr	r3, [pc, #436]	; (800aed0 <tcp_input+0x4ac>)
 800ad1c:	f240 120d 	movw	r2, #269	; 0x10d
 800ad20:	496c      	ldr	r1, [pc, #432]	; (800aed4 <tcp_input+0x4b0>)
 800ad22:	486d      	ldr	r0, [pc, #436]	; (800aed8 <tcp_input+0x4b4>)
 800ad24:	f004 f8fe 	bl	800ef24 <iprintf>
      if (prev != NULL) {
 800ad28:	2e00      	cmp	r6, #0
 800ad2a:	d1a9      	bne.n	800ac80 <tcp_input+0x25c>
 800ad2c:	e7ae      	b.n	800ac8c <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ad2e:	4b68      	ldr	r3, [pc, #416]	; (800aed0 <tcp_input+0x4ac>)
 800ad30:	f240 1215 	movw	r2, #277	; 0x115
 800ad34:	4969      	ldr	r1, [pc, #420]	; (800aedc <tcp_input+0x4b8>)
 800ad36:	4868      	ldr	r0, [pc, #416]	; (800aed8 <tcp_input+0x4b4>)
 800ad38:	f004 f8f4 	bl	800ef24 <iprintf>
 800ad3c:	e7a9      	b.n	800ac92 <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ad3e:	4643      	mov	r3, r8
 800ad40:	f240 121f 	movw	r2, #287	; 0x11f
 800ad44:	4639      	mov	r1, r7
 800ad46:	4630      	mov	r0, r6
 800ad48:	f004 f8ec 	bl	800ef24 <iprintf>
 800ad4c:	e00b      	b.n	800ad66 <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 800ad4e:	4b58      	ldr	r3, [pc, #352]	; (800aeb0 <tcp_input+0x48c>)
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	8819      	ldrh	r1, [r3, #0]
 800ad54:	8b22      	ldrh	r2, [r4, #24]
 800ad56:	428a      	cmp	r2, r1
 800ad58:	d011      	beq.n	800ad7e <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad5a:	68e4      	ldr	r4, [r4, #12]
 800ad5c:	2c00      	cmp	r4, #0
 800ad5e:	d051      	beq.n	800ae04 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ad60:	7d23      	ldrb	r3, [r4, #20]
 800ad62:	2b0a      	cmp	r3, #10
 800ad64:	d1eb      	bne.n	800ad3e <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad66:	7a22      	ldrb	r2, [r4, #8]
 800ad68:	2a00      	cmp	r2, #0
 800ad6a:	d0f0      	beq.n	800ad4e <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ad6c:	4b4d      	ldr	r3, [pc, #308]	; (800aea4 <tcp_input+0x480>)
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad74:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad76:	b2db      	uxtb	r3, r3
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d0e8      	beq.n	800ad4e <tcp_input+0x32a>
 800ad7c:	e7ed      	b.n	800ad5a <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800ad7e:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ad80:	8ae3      	ldrh	r3, [r4, #22]
 800ad82:	4283      	cmp	r3, r0
 800ad84:	d1e9      	bne.n	800ad5a <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800ad86:	6862      	ldr	r2, [r4, #4]
 800ad88:	4b46      	ldr	r3, [pc, #280]	; (800aea4 <tcp_input+0x480>)
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	429a      	cmp	r2, r3
 800ad8e:	d1e4      	bne.n	800ad5a <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad90:	6822      	ldr	r2, [r4, #0]
 800ad92:	4b44      	ldr	r3, [pc, #272]	; (800aea4 <tcp_input+0x480>)
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d1df      	bne.n	800ad5a <tcp_input+0x336>
  if (flags & TCP_RST) {
 800ad9a:	4b49      	ldr	r3, [pc, #292]	; (800aec0 <tcp_input+0x49c>)
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	f013 0f04 	tst.w	r3, #4
 800ada2:	d10e      	bne.n	800adc2 <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800ada4:	f013 0f02 	tst.w	r3, #2
 800ada8:	d01d      	beq.n	800ade6 <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800adaa:	4b48      	ldr	r3, [pc, #288]	; (800aecc <tcp_input+0x4a8>)
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	d403      	bmi.n	800adbc <tcp_input+0x398>
 800adb4:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800adb6:	1b9b      	subs	r3, r3, r6
 800adb8:	2b00      	cmp	r3, #0
 800adba:	dd06      	ble.n	800adca <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 800adbc:	4b41      	ldr	r3, [pc, #260]	; (800aec4 <tcp_input+0x4a0>)
 800adbe:	881b      	ldrh	r3, [r3, #0]
 800adc0:	b9c3      	cbnz	r3, 800adf4 <tcp_input+0x3d0>
        pbuf_free(p);
 800adc2:	4628      	mov	r0, r5
 800adc4:	f7fd fbd2 	bl	800856c <pbuf_free>
        return;
 800adc8:	e63a      	b.n	800aa40 <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800adca:	4b45      	ldr	r3, [pc, #276]	; (800aee0 <tcp_input+0x4bc>)
 800adcc:	4e3d      	ldr	r6, [pc, #244]	; (800aec4 <tcp_input+0x4a0>)
 800adce:	8836      	ldrh	r6, [r6, #0]
 800add0:	9102      	str	r1, [sp, #8]
 800add2:	9001      	str	r0, [sp, #4]
 800add4:	1f19      	subs	r1, r3, #4
 800add6:	9100      	str	r1, [sp, #0]
 800add8:	4432      	add	r2, r6
 800adda:	4942      	ldr	r1, [pc, #264]	; (800aee4 <tcp_input+0x4c0>)
 800addc:	6809      	ldr	r1, [r1, #0]
 800adde:	4620      	mov	r0, r4
 800ade0:	f001 fbd8 	bl	800c594 <tcp_rst>
      return;
 800ade4:	e7ed      	b.n	800adc2 <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800ade6:	f013 0f01 	tst.w	r3, #1
 800adea:	d0e7      	beq.n	800adbc <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 800adec:	4b3e      	ldr	r3, [pc, #248]	; (800aee8 <tcp_input+0x4c4>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6223      	str	r3, [r4, #32]
 800adf2:	e7e3      	b.n	800adbc <tcp_input+0x398>
    tcp_ack_now(pcb);
 800adf4:	8b63      	ldrh	r3, [r4, #26]
 800adf6:	f043 0302 	orr.w	r3, r3, #2
 800adfa:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800adfc:	4620      	mov	r0, r4
 800adfe:	f001 fc4b 	bl	800c698 <tcp_output>
 800ae02:	e7de      	b.n	800adc2 <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae04:	4b39      	ldr	r3, [pc, #228]	; (800aeec <tcp_input+0x4c8>)
 800ae06:	f8d3 c000 	ldr.w	ip, [r3]
 800ae0a:	f1bc 0f00 	cmp.w	ip, #0
 800ae0e:	f000 8402 	beq.w	800b616 <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae12:	4b24      	ldr	r3, [pc, #144]	; (800aea4 <tcp_input+0x480>)
 800ae14:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800ae16:	4a26      	ldr	r2, [pc, #152]	; (800aeb0 <tcp_input+0x48c>)
 800ae18:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ae1a:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae1c:	4664      	mov	r4, ip
    prev = NULL;
 800ae1e:	2100      	movs	r1, #0
 800ae20:	e009      	b.n	800ae36 <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800ae22:	8ae2      	ldrh	r2, [r4, #22]
 800ae24:	8843      	ldrh	r3, [r0, #2]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d00f      	beq.n	800ae4a <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ae2a:	68e3      	ldr	r3, [r4, #12]
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	f000 83f1 	beq.w	800b616 <tcp_input+0xbf2>
 800ae34:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ae36:	7a22      	ldrb	r2, [r4, #8]
 800ae38:	2a00      	cmp	r2, #0
 800ae3a:	d0f2      	beq.n	800ae22 <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae3c:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800ae40:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d0ec      	beq.n	800ae22 <tcp_input+0x3fe>
 800ae48:	e7ef      	b.n	800ae2a <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ae4a:	6823      	ldr	r3, [r4, #0]
 800ae4c:	42bb      	cmp	r3, r7
 800ae4e:	d001      	beq.n	800ae54 <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d1ea      	bne.n	800ae2a <tcp_input+0x406>
      if (prev != NULL) {
 800ae54:	b129      	cbz	r1, 800ae62 <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800ae56:	68e3      	ldr	r3, [r4, #12]
 800ae58:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ae5a:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ae5e:	4b23      	ldr	r3, [pc, #140]	; (800aeec <tcp_input+0x4c8>)
 800ae60:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800ae62:	4b17      	ldr	r3, [pc, #92]	; (800aec0 <tcp_input+0x49c>)
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	f013 0f04 	tst.w	r3, #4
 800ae6a:	d105      	bne.n	800ae78 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 800ae6c:	f013 0f10 	tst.w	r3, #16
 800ae70:	d106      	bne.n	800ae80 <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 800ae72:	f013 0f02 	tst.w	r3, #2
 800ae76:	d13b      	bne.n	800aef0 <tcp_input+0x4cc>
      pbuf_free(p);
 800ae78:	4628      	mov	r0, r5
 800ae7a:	f7fd fb77 	bl	800856c <pbuf_free>
      return;
 800ae7e:	e5df      	b.n	800aa40 <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae80:	4b17      	ldr	r3, [pc, #92]	; (800aee0 <tcp_input+0x4bc>)
 800ae82:	4a10      	ldr	r2, [pc, #64]	; (800aec4 <tcp_input+0x4a0>)
 800ae84:	8811      	ldrh	r1, [r2, #0]
 800ae86:	4a11      	ldr	r2, [pc, #68]	; (800aecc <tcp_input+0x4a8>)
 800ae88:	6812      	ldr	r2, [r2, #0]
 800ae8a:	8806      	ldrh	r6, [r0, #0]
 800ae8c:	9602      	str	r6, [sp, #8]
 800ae8e:	8840      	ldrh	r0, [r0, #2]
 800ae90:	9001      	str	r0, [sp, #4]
 800ae92:	1f18      	subs	r0, r3, #4
 800ae94:	9000      	str	r0, [sp, #0]
 800ae96:	440a      	add	r2, r1
 800ae98:	4912      	ldr	r1, [pc, #72]	; (800aee4 <tcp_input+0x4c0>)
 800ae9a:	6809      	ldr	r1, [r1, #0]
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	f001 fb79 	bl	800c594 <tcp_rst>
 800aea2:	e7e9      	b.n	800ae78 <tcp_input+0x454>
 800aea4:	2000aeb8 	.word	0x2000aeb8
 800aea8:	200107cc 	.word	0x200107cc
 800aeac:	200107f0 	.word	0x200107f0
 800aeb0:	20010818 	.word	0x20010818
 800aeb4:	20010804 	.word	0x20010804
 800aeb8:	20010808 	.word	0x20010808
 800aebc:	20010800 	.word	0x20010800
 800aec0:	200107ec 	.word	0x200107ec
 800aec4:	20010826 	.word	0x20010826
 800aec8:	20010810 	.word	0x20010810
 800aecc:	2001080c 	.word	0x2001080c
 800aed0:	080121dc 	.word	0x080121dc
 800aed4:	080124c8 	.word	0x080124c8
 800aed8:	0800fe60 	.word	0x0800fe60
 800aedc:	080124f4 	.word	0x080124f4
 800aee0:	2000aecc 	.word	0x2000aecc
 800aee4:	200107e8 	.word	0x200107e8
 800aee8:	200107dc 	.word	0x200107dc
 800aeec:	200107d8 	.word	0x200107d8
    npcb = tcp_alloc(pcb->prio);
 800aef0:	7d60      	ldrb	r0, [r4, #21]
 800aef2:	f7fe faad 	bl	8009450 <tcp_alloc>
    if (npcb == NULL) {
 800aef6:	4606      	mov	r6, r0
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d04c      	beq.n	800af96 <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800aefc:	4ba5      	ldr	r3, [pc, #660]	; (800b194 <tcp_input+0x770>)
 800aefe:	695a      	ldr	r2, [r3, #20]
 800af00:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800af06:	8ae3      	ldrh	r3, [r4, #22]
 800af08:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800af0a:	4fa3      	ldr	r7, [pc, #652]	; (800b198 <tcp_input+0x774>)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	881b      	ldrh	r3, [r3, #0]
 800af10:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800af12:	2303      	movs	r3, #3
 800af14:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800af16:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800b1d4 <tcp_input+0x7b0>
 800af1a:	f8d8 3000 	ldr.w	r3, [r8]
 800af1e:	3301      	adds	r3, #1
 800af20:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800af22:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800af24:	f7fe f894 	bl	8009050 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800af28:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 800af2a:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 800af2c:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 800af2e:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800af30:	f8d8 3000 	ldr.w	r3, [r8]
 800af34:	3b01      	subs	r3, #1
 800af36:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800af38:	6923      	ldr	r3, [r4, #16]
 800af3a:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 800af3c:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800af3e:	7a63      	ldrb	r3, [r4, #9]
 800af40:	f003 030c 	and.w	r3, r3, #12
 800af44:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800af46:	7a23      	ldrb	r3, [r4, #8]
 800af48:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800af4a:	4b94      	ldr	r3, [pc, #592]	; (800b19c <tcp_input+0x778>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	60f2      	str	r2, [r6, #12]
 800af50:	601e      	str	r6, [r3, #0]
 800af52:	f001 feb1 	bl	800ccb8 <tcp_timer_needed>
 800af56:	4b92      	ldr	r3, [pc, #584]	; (800b1a0 <tcp_input+0x77c>)
 800af58:	2201      	movs	r2, #1
 800af5a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7fe ff97 	bl	8009e90 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	89db      	ldrh	r3, [r3, #14]
 800af66:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af6a:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af6e:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 800af70:	1d34      	adds	r4, r6, #4
 800af72:	4620      	mov	r0, r4
 800af74:	f002 fe68 	bl	800dc48 <ip4_route>
 800af78:	4601      	mov	r1, r0
 800af7a:	4622      	mov	r2, r4
 800af7c:	4638      	mov	r0, r7
 800af7e:	f7fe f883 	bl	8009088 <tcp_eff_send_mss_netif>
 800af82:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af84:	2112      	movs	r1, #18
 800af86:	4630      	mov	r0, r6
 800af88:	f001 f956 	bl	800c238 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800af8c:	b968      	cbnz	r0, 800afaa <tcp_input+0x586>
    tcp_output(npcb);
 800af8e:	4630      	mov	r0, r6
 800af90:	f001 fb82 	bl	800c698 <tcp_output>
 800af94:	e770      	b.n	800ae78 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af96:	69a3      	ldr	r3, [r4, #24]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f43f af6d 	beq.w	800ae78 <tcp_input+0x454>
 800af9e:	f04f 32ff 	mov.w	r2, #4294967295
 800afa2:	2100      	movs	r1, #0
 800afa4:	6920      	ldr	r0, [r4, #16]
 800afa6:	4798      	blx	r3
 800afa8:	e766      	b.n	800ae78 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 800afaa:	2100      	movs	r1, #0
 800afac:	4630      	mov	r0, r6
 800afae:	f7fe f92d 	bl	800920c <tcp_abandon>
      return;
 800afb2:	e761      	b.n	800ae78 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 800afb4:	7b6b      	ldrb	r3, [r5, #13]
 800afb6:	f043 0301 	orr.w	r3, r3, #1
 800afba:	736b      	strb	r3, [r5, #13]
 800afbc:	e67e      	b.n	800acbc <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800afbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800afc0:	b9e3      	cbnz	r3, 800affc <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800afc2:	4620      	mov	r0, r4
 800afc4:	f001 fb2e 	bl	800c624 <tcp_send_empty_ack>
 800afc8:	e018      	b.n	800affc <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 800afca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800afcc:	4b75      	ldr	r3, [pc, #468]	; (800b1a4 <tcp_input+0x780>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d02b      	beq.n	800b02c <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 800afd4:	4b74      	ldr	r3, [pc, #464]	; (800b1a8 <tcp_input+0x784>)
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	f013 0f08 	tst.w	r3, #8
 800afdc:	f000 8295 	beq.w	800b50a <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800afe0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800afe4:	b11b      	cbz	r3, 800afee <tcp_input+0x5ca>
 800afe6:	f06f 010d 	mvn.w	r1, #13
 800afea:	6920      	ldr	r0, [r4, #16]
 800afec:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800afee:	4621      	mov	r1, r4
 800aff0:	486a      	ldr	r0, [pc, #424]	; (800b19c <tcp_input+0x778>)
 800aff2:	f7fe f8a3 	bl	800913c <tcp_pcb_remove>
        tcp_free(pcb);
 800aff6:	4620      	mov	r0, r4
 800aff8:	f7fd fe16 	bl	8008c28 <tcp_free>
    tcp_input_pcb = NULL;
 800affc:	2300      	movs	r3, #0
 800affe:	4a6b      	ldr	r2, [pc, #428]	; (800b1ac <tcp_input+0x788>)
 800b000:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800b002:	4a6b      	ldr	r2, [pc, #428]	; (800b1b0 <tcp_input+0x78c>)
 800b004:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800b006:	4b6b      	ldr	r3, [pc, #428]	; (800b1b4 <tcp_input+0x790>)
 800b008:	6858      	ldr	r0, [r3, #4]
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f43f ad18 	beq.w	800aa40 <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800b010:	f7fd faac 	bl	800856c <pbuf_free>
      inseg.p = NULL;
 800b014:	4b67      	ldr	r3, [pc, #412]	; (800b1b4 <tcp_input+0x790>)
 800b016:	2200      	movs	r2, #0
 800b018:	605a      	str	r2, [r3, #4]
 800b01a:	e511      	b.n	800aa40 <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800b01c:	b931      	cbnz	r1, 800b02c <tcp_input+0x608>
 800b01e:	4b66      	ldr	r3, [pc, #408]	; (800b1b8 <tcp_input+0x794>)
 800b020:	f44f 724e 	mov.w	r2, #824	; 0x338
 800b024:	4965      	ldr	r1, [pc, #404]	; (800b1bc <tcp_input+0x798>)
 800b026:	4866      	ldr	r0, [pc, #408]	; (800b1c0 <tcp_input+0x79c>)
 800b028:	f003 ff7c 	bl	800ef24 <iprintf>
      recv_flags |= TF_RESET;
 800b02c:	4a5e      	ldr	r2, [pc, #376]	; (800b1a8 <tcp_input+0x784>)
 800b02e:	7813      	ldrb	r3, [r2, #0]
 800b030:	f043 0308 	orr.w	r3, r3, #8
 800b034:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800b036:	8b63      	ldrh	r3, [r4, #26]
 800b038:	f023 0301 	bic.w	r3, r3, #1
 800b03c:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800b03e:	e7c9      	b.n	800afd4 <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800b040:	f013 0f02 	tst.w	r3, #2
 800b044:	d004      	beq.n	800b050 <tcp_input+0x62c>
 800b046:	7d23      	ldrb	r3, [r4, #20]
 800b048:	3b02      	subs	r3, #2
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d81c      	bhi.n	800b08a <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800b050:	8b63      	ldrh	r3, [r4, #26]
 800b052:	f013 0f10 	tst.w	r3, #16
 800b056:	d102      	bne.n	800b05e <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 800b058:	4b5a      	ldr	r3, [pc, #360]	; (800b1c4 <tcp_input+0x7a0>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800b05e:	2300      	movs	r3, #0
 800b060:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b064:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800b068:	4620      	mov	r0, r4
 800b06a:	f7fe ff11 	bl	8009e90 <tcp_parseopt>
  switch (pcb->state) {
 800b06e:	7d23      	ldrb	r3, [r4, #20]
 800b070:	3b02      	subs	r3, #2
 800b072:	2b07      	cmp	r3, #7
 800b074:	d8ae      	bhi.n	800afd4 <tcp_input+0x5b0>
 800b076:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b07a:	000d      	.short	0x000d
 800b07c:	014f00d1 	.word	0x014f00d1
 800b080:	01b1015f 	.word	0x01b1015f
 800b084:	01fd014f 	.word	0x01fd014f
 800b088:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 800b08a:	8b63      	ldrh	r3, [r4, #26]
 800b08c:	f043 0302 	orr.w	r3, r3, #2
 800b090:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800b092:	e79f      	b.n	800afd4 <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b094:	4b4c      	ldr	r3, [pc, #304]	; (800b1c8 <tcp_input+0x7a4>)
 800b096:	781a      	ldrb	r2, [r3, #0]
 800b098:	f002 0312 	and.w	r3, r2, #18
 800b09c:	2b12      	cmp	r3, #18
 800b09e:	d020      	beq.n	800b0e2 <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800b0a0:	f012 0f10 	tst.w	r2, #16
 800b0a4:	d096      	beq.n	800afd4 <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b0a6:	4b3c      	ldr	r3, [pc, #240]	; (800b198 <tcp_input+0x774>)
 800b0a8:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b0aa:	4b48      	ldr	r3, [pc, #288]	; (800b1cc <tcp_input+0x7a8>)
 800b0ac:	4a48      	ldr	r2, [pc, #288]	; (800b1d0 <tcp_input+0x7ac>)
 800b0ae:	8810      	ldrh	r0, [r2, #0]
 800b0b0:	4a48      	ldr	r2, [pc, #288]	; (800b1d4 <tcp_input+0x7b0>)
 800b0b2:	6812      	ldr	r2, [r2, #0]
 800b0b4:	880d      	ldrh	r5, [r1, #0]
 800b0b6:	9502      	str	r5, [sp, #8]
 800b0b8:	8849      	ldrh	r1, [r1, #2]
 800b0ba:	9101      	str	r1, [sp, #4]
 800b0bc:	1f19      	subs	r1, r3, #4
 800b0be:	9100      	str	r1, [sp, #0]
 800b0c0:	4402      	add	r2, r0
 800b0c2:	4938      	ldr	r1, [pc, #224]	; (800b1a4 <tcp_input+0x780>)
 800b0c4:	6809      	ldr	r1, [r1, #0]
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	f001 fa64 	bl	800c594 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b0cc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b0d0:	2b05      	cmp	r3, #5
 800b0d2:	f63f af7f 	bhi.w	800afd4 <tcp_input+0x5b0>
          pcb->rtime = 0;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b0da:	4620      	mov	r0, r4
 800b0dc:	f001 fcc4 	bl	800ca68 <tcp_rexmit_rto>
 800b0e0:	e778      	b.n	800afd4 <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800b0e2:	4b30      	ldr	r3, [pc, #192]	; (800b1a4 <tcp_input+0x780>)
 800b0e4:	6819      	ldr	r1, [r3, #0]
 800b0e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	428b      	cmp	r3, r1
 800b0ec:	d1d8      	bne.n	800b0a0 <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800b0ee:	4b39      	ldr	r3, [pc, #228]	; (800b1d4 <tcp_input+0x7b0>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b0f6:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800b0f8:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b0fa:	4a27      	ldr	r2, [pc, #156]	; (800b198 <tcp_input+0x774>)
 800b0fc:	6812      	ldr	r2, [r2, #0]
 800b0fe:	89d2      	ldrh	r2, [r2, #14]
 800b100:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b104:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b108:	3b01      	subs	r3, #1
 800b10a:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b10c:	2304      	movs	r3, #4
 800b10e:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b110:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800b112:	18e5      	adds	r5, r4, r3
 800b114:	4628      	mov	r0, r5
 800b116:	f002 fd97 	bl	800dc48 <ip4_route>
 800b11a:	4601      	mov	r1, r0
 800b11c:	462a      	mov	r2, r5
 800b11e:	4630      	mov	r0, r6
 800b120:	f7fd ffb2 	bl	8009088 <tcp_eff_send_mss_netif>
 800b124:	4603      	mov	r3, r0
 800b126:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b128:	0041      	lsls	r1, r0, #1
 800b12a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b12e:	428a      	cmp	r2, r1
 800b130:	bf38      	it	cc
 800b132:	460a      	movcc	r2, r1
 800b134:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800b138:	d94e      	bls.n	800b1d8 <tcp_input+0x7b4>
 800b13a:	0083      	lsls	r3, r0, #2
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b142:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b146:	2b00      	cmp	r3, #0
 800b148:	d04f      	beq.n	800b1ea <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 800b14a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b14e:	3b01      	subs	r3, #1
 800b150:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800b154:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800b156:	2d00      	cmp	r5, #0
 800b158:	d04f      	beq.n	800b1fa <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 800b15a:	682b      	ldr	r3, [r5, #0]
 800b15c:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800b15e:	4628      	mov	r0, r5
 800b160:	f7fd febe 	bl	8008ee0 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b164:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b166:	2b00      	cmp	r3, #0
 800b168:	d054      	beq.n	800b214 <tcp_input+0x7f0>
          pcb->rtime = 0;
 800b16a:	2300      	movs	r3, #0
 800b16c:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800b16e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b172:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b176:	b13b      	cbz	r3, 800b188 <tcp_input+0x764>
 800b178:	2200      	movs	r2, #0
 800b17a:	4621      	mov	r1, r4
 800b17c:	6920      	ldr	r0, [r4, #16]
 800b17e:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800b180:	f110 0f0d 	cmn.w	r0, #13
 800b184:	f43f af3a 	beq.w	800affc <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 800b188:	8b63      	ldrh	r3, [r4, #26]
 800b18a:	f043 0302 	orr.w	r3, r3, #2
 800b18e:	8363      	strh	r3, [r4, #26]
 800b190:	e720      	b.n	800afd4 <tcp_input+0x5b0>
 800b192:	bf00      	nop
 800b194:	2000aeb8 	.word	0x2000aeb8
 800b198:	20010818 	.word	0x20010818
 800b19c:	200107cc 	.word	0x200107cc
 800b1a0:	200107d0 	.word	0x200107d0
 800b1a4:	200107e8 	.word	0x200107e8
 800b1a8:	20010808 	.word	0x20010808
 800b1ac:	20010810 	.word	0x20010810
 800b1b0:	20010804 	.word	0x20010804
 800b1b4:	200107f0 	.word	0x200107f0
 800b1b8:	080121dc 	.word	0x080121dc
 800b1bc:	08012550 	.word	0x08012550
 800b1c0:	0800fe60 	.word	0x0800fe60
 800b1c4:	200107dc 	.word	0x200107dc
 800b1c8:	200107ec 	.word	0x200107ec
 800b1cc:	2000aecc 	.word	0x2000aecc
 800b1d0:	20010826 	.word	0x20010826
 800b1d4:	2001080c 	.word	0x2001080c
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b1d8:	f241 121c 	movw	r2, #4380	; 0x111c
 800b1dc:	4291      	cmp	r1, r2
 800b1de:	bf86      	itte	hi
 800b1e0:	0043      	lslhi	r3, r0, #1
 800b1e2:	b29b      	uxthhi	r3, r3
 800b1e4:	f241 131c 	movwls	r3, #4380	; 0x111c
 800b1e8:	e7a9      	b.n	800b13e <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b1ea:	4b92      	ldr	r3, [pc, #584]	; (800b434 <tcp_input+0xa10>)
 800b1ec:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b1f0:	4991      	ldr	r1, [pc, #580]	; (800b438 <tcp_input+0xa14>)
 800b1f2:	4892      	ldr	r0, [pc, #584]	; (800b43c <tcp_input+0xa18>)
 800b1f4:	f003 fe96 	bl	800ef24 <iprintf>
 800b1f8:	e7a7      	b.n	800b14a <tcp_input+0x726>
          rseg = pcb->unsent;
 800b1fa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b1fc:	b115      	cbz	r5, 800b204 <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 800b1fe:	682b      	ldr	r3, [r5, #0]
 800b200:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b202:	e7ac      	b.n	800b15e <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b204:	4b8b      	ldr	r3, [pc, #556]	; (800b434 <tcp_input+0xa10>)
 800b206:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b20a:	498d      	ldr	r1, [pc, #564]	; (800b440 <tcp_input+0xa1c>)
 800b20c:	488b      	ldr	r0, [pc, #556]	; (800b43c <tcp_input+0xa18>)
 800b20e:	f003 fe89 	bl	800ef24 <iprintf>
 800b212:	e7f4      	b.n	800b1fe <tcp_input+0x7da>
          pcb->rtime = -1;
 800b214:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b218:	8623      	strh	r3, [r4, #48]	; 0x30
 800b21a:	e7aa      	b.n	800b172 <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 800b21c:	4b89      	ldr	r3, [pc, #548]	; (800b444 <tcp_input+0xa20>)
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	f013 0f10 	tst.w	r3, #16
 800b224:	d069      	beq.n	800b2fa <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b226:	4b88      	ldr	r3, [pc, #544]	; (800b448 <tcp_input+0xa24>)
 800b228:	6819      	ldr	r1, [r3, #0]
 800b22a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b22c:	43db      	mvns	r3, r3
 800b22e:	42cb      	cmn	r3, r1
 800b230:	d403      	bmi.n	800b23a <tcp_input+0x816>
 800b232:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b234:	1acb      	subs	r3, r1, r3
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd11      	ble.n	800b25e <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b23a:	4b84      	ldr	r3, [pc, #528]	; (800b44c <tcp_input+0xa28>)
 800b23c:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b23e:	4b84      	ldr	r3, [pc, #528]	; (800b450 <tcp_input+0xa2c>)
 800b240:	4a84      	ldr	r2, [pc, #528]	; (800b454 <tcp_input+0xa30>)
 800b242:	8815      	ldrh	r5, [r2, #0]
 800b244:	4a84      	ldr	r2, [pc, #528]	; (800b458 <tcp_input+0xa34>)
 800b246:	6812      	ldr	r2, [r2, #0]
 800b248:	8806      	ldrh	r6, [r0, #0]
 800b24a:	9602      	str	r6, [sp, #8]
 800b24c:	8840      	ldrh	r0, [r0, #2]
 800b24e:	9001      	str	r0, [sp, #4]
 800b250:	1f18      	subs	r0, r3, #4
 800b252:	9000      	str	r0, [sp, #0]
 800b254:	442a      	add	r2, r5
 800b256:	4620      	mov	r0, r4
 800b258:	f001 f99c 	bl	800c594 <tcp_rst>
 800b25c:	e6ba      	b.n	800afd4 <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 800b25e:	2304      	movs	r3, #4
 800b260:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800b262:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b264:	2b00      	cmp	r3, #0
 800b266:	d03b      	beq.n	800b2e0 <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	b34b      	cbz	r3, 800b2c0 <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b26c:	2200      	movs	r2, #0
 800b26e:	4621      	mov	r1, r4
 800b270:	6920      	ldr	r0, [r4, #16]
 800b272:	4798      	blx	r3
          if (err != ERR_OK) {
 800b274:	2800      	cmp	r0, #0
 800b276:	d12f      	bne.n	800b2d8 <tcp_input+0x8b4>
          tcp_receive(pcb);
 800b278:	4620      	mov	r0, r4
 800b27a:	f7fe ff47 	bl	800a10c <tcp_receive>
          if (recv_acked != 0) {
 800b27e:	4b77      	ldr	r3, [pc, #476]	; (800b45c <tcp_input+0xa38>)
 800b280:	881b      	ldrh	r3, [r3, #0]
 800b282:	b113      	cbz	r3, 800b28a <tcp_input+0x866>
            recv_acked--;
 800b284:	3b01      	subs	r3, #1
 800b286:	4a75      	ldr	r2, [pc, #468]	; (800b45c <tcp_input+0xa38>)
 800b288:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b28a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b28c:	0059      	lsls	r1, r3, #1
 800b28e:	f241 121c 	movw	r2, #4380	; 0x111c
 800b292:	428a      	cmp	r2, r1
 800b294:	bf38      	it	cc
 800b296:	460a      	movcc	r2, r1
 800b298:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b29c:	d924      	bls.n	800b2e8 <tcp_input+0x8c4>
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800b2a6:	4b6e      	ldr	r3, [pc, #440]	; (800b460 <tcp_input+0xa3c>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	f013 0f20 	tst.w	r3, #32
 800b2ae:	f43f ae91 	beq.w	800afd4 <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 800b2b2:	8b63      	ldrh	r3, [r4, #26]
 800b2b4:	f043 0302 	orr.w	r3, r3, #2
 800b2b8:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800b2ba:	2307      	movs	r3, #7
 800b2bc:	7523      	strb	r3, [r4, #20]
 800b2be:	e689      	b.n	800afd4 <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b2c0:	4b5c      	ldr	r3, [pc, #368]	; (800b434 <tcp_input+0xa10>)
 800b2c2:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b2c6:	4967      	ldr	r1, [pc, #412]	; (800b464 <tcp_input+0xa40>)
 800b2c8:	485c      	ldr	r0, [pc, #368]	; (800b43c <tcp_input+0xa18>)
 800b2ca:	f003 fe2b 	bl	800ef24 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b2ce:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d1ca      	bne.n	800b26c <tcp_input+0x848>
 800b2d6:	e003      	b.n	800b2e0 <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 800b2d8:	f110 0f0d 	cmn.w	r0, #13
 800b2dc:	f43f ae8e 	beq.w	800affc <tcp_input+0x5d8>
              tcp_abort(pcb);
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f7fe f819 	bl	8009318 <tcp_abort>
 800b2e6:	e689      	b.n	800affc <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b2e8:	f241 121c 	movw	r2, #4380	; 0x111c
 800b2ec:	4291      	cmp	r1, r2
 800b2ee:	bf86      	itte	hi
 800b2f0:	005b      	lslhi	r3, r3, #1
 800b2f2:	b29b      	uxthhi	r3, r3
 800b2f4:	f241 131c 	movwls	r3, #4380	; 0x111c
 800b2f8:	e7d3      	b.n	800b2a2 <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b2fa:	f013 0f02 	tst.w	r3, #2
 800b2fe:	f43f ae69 	beq.w	800afd4 <tcp_input+0x5b0>
 800b302:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b304:	3b01      	subs	r3, #1
 800b306:	4a54      	ldr	r2, [pc, #336]	; (800b458 <tcp_input+0xa34>)
 800b308:	6812      	ldr	r2, [r2, #0]
 800b30a:	4293      	cmp	r3, r2
 800b30c:	f47f ae62 	bne.w	800afd4 <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 800b310:	4620      	mov	r0, r4
 800b312:	f001 f8bb 	bl	800c48c <tcp_rexmit>
 800b316:	e65d      	b.n	800afd4 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b318:	4620      	mov	r0, r4
 800b31a:	f7fe fef7 	bl	800a10c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b31e:	4b50      	ldr	r3, [pc, #320]	; (800b460 <tcp_input+0xa3c>)
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	f013 0f20 	tst.w	r3, #32
 800b326:	f43f ae55 	beq.w	800afd4 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800b32a:	8b63      	ldrh	r3, [r4, #26]
 800b32c:	f043 0302 	orr.w	r3, r3, #2
 800b330:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800b332:	2307      	movs	r3, #7
 800b334:	7523      	strb	r3, [r4, #20]
 800b336:	e64d      	b.n	800afd4 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b338:	4620      	mov	r0, r4
 800b33a:	f7fe fee7 	bl	800a10c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b33e:	4b48      	ldr	r3, [pc, #288]	; (800b460 <tcp_input+0xa3c>)
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	f013 0f20 	tst.w	r3, #32
 800b346:	d036      	beq.n	800b3b6 <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b348:	4b3e      	ldr	r3, [pc, #248]	; (800b444 <tcp_input+0xa20>)
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	f013 0f10 	tst.w	r3, #16
 800b350:	d004      	beq.n	800b35c <tcp_input+0x938>
 800b352:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b354:	4b3c      	ldr	r3, [pc, #240]	; (800b448 <tcp_input+0xa24>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d006      	beq.n	800b36a <tcp_input+0x946>
          tcp_ack_now(pcb);
 800b35c:	8b63      	ldrh	r3, [r4, #26]
 800b35e:	f043 0302 	orr.w	r3, r3, #2
 800b362:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800b364:	2308      	movs	r3, #8
 800b366:	7523      	strb	r3, [r4, #20]
 800b368:	e634      	b.n	800afd4 <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b36a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1f5      	bne.n	800b35c <tcp_input+0x938>
          tcp_ack_now(pcb);
 800b370:	8b63      	ldrh	r3, [r4, #26]
 800b372:	f043 0302 	orr.w	r3, r3, #2
 800b376:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800b378:	4620      	mov	r0, r4
 800b37a:	f7fd feaf 	bl	80090dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b37e:	4b3a      	ldr	r3, [pc, #232]	; (800b468 <tcp_input+0xa44>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	42a3      	cmp	r3, r4
 800b384:	d005      	beq.n	800b392 <tcp_input+0x96e>
 800b386:	b153      	cbz	r3, 800b39e <tcp_input+0x97a>
 800b388:	68da      	ldr	r2, [r3, #12]
 800b38a:	42a2      	cmp	r2, r4
 800b38c:	d005      	beq.n	800b39a <tcp_input+0x976>
 800b38e:	4613      	mov	r3, r2
 800b390:	e7f9      	b.n	800b386 <tcp_input+0x962>
 800b392:	68e2      	ldr	r2, [r4, #12]
 800b394:	4b34      	ldr	r3, [pc, #208]	; (800b468 <tcp_input+0xa44>)
 800b396:	601a      	str	r2, [r3, #0]
 800b398:	e001      	b.n	800b39e <tcp_input+0x97a>
 800b39a:	68e2      	ldr	r2, [r4, #12]
 800b39c:	60da      	str	r2, [r3, #12]
 800b39e:	4b33      	ldr	r3, [pc, #204]	; (800b46c <tcp_input+0xa48>)
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b3a4:	230a      	movs	r3, #10
 800b3a6:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b3a8:	4b31      	ldr	r3, [pc, #196]	; (800b470 <tcp_input+0xa4c>)
 800b3aa:	681a      	ldr	r2, [r3, #0]
 800b3ac:	60e2      	str	r2, [r4, #12]
 800b3ae:	601c      	str	r4, [r3, #0]
 800b3b0:	f001 fc82 	bl	800ccb8 <tcp_timer_needed>
 800b3b4:	e60e      	b.n	800afd4 <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b3b6:	4b23      	ldr	r3, [pc, #140]	; (800b444 <tcp_input+0xa20>)
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	f013 0f10 	tst.w	r3, #16
 800b3be:	f43f ae09 	beq.w	800afd4 <tcp_input+0x5b0>
 800b3c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b3c4:	4b20      	ldr	r3, [pc, #128]	; (800b448 <tcp_input+0xa24>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	429a      	cmp	r2, r3
 800b3ca:	f47f ae03 	bne.w	800afd4 <tcp_input+0x5b0>
 800b3ce:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	f47f adff 	bne.w	800afd4 <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 800b3d6:	2306      	movs	r3, #6
 800b3d8:	7523      	strb	r3, [r4, #20]
 800b3da:	e5fb      	b.n	800afd4 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b3dc:	4620      	mov	r0, r4
 800b3de:	f7fe fe95 	bl	800a10c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b3e2:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <tcp_input+0xa3c>)
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	f013 0f20 	tst.w	r3, #32
 800b3ea:	f43f adf3 	beq.w	800afd4 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800b3ee:	8b63      	ldrh	r3, [r4, #26]
 800b3f0:	f043 0302 	orr.w	r3, r3, #2
 800b3f4:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f7fd fe70 	bl	80090dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b3fc:	4b1a      	ldr	r3, [pc, #104]	; (800b468 <tcp_input+0xa44>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	42a3      	cmp	r3, r4
 800b402:	d005      	beq.n	800b410 <tcp_input+0x9ec>
 800b404:	b153      	cbz	r3, 800b41c <tcp_input+0x9f8>
 800b406:	68da      	ldr	r2, [r3, #12]
 800b408:	42a2      	cmp	r2, r4
 800b40a:	d005      	beq.n	800b418 <tcp_input+0x9f4>
 800b40c:	4613      	mov	r3, r2
 800b40e:	e7f9      	b.n	800b404 <tcp_input+0x9e0>
 800b410:	68e2      	ldr	r2, [r4, #12]
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <tcp_input+0xa44>)
 800b414:	601a      	str	r2, [r3, #0]
 800b416:	e001      	b.n	800b41c <tcp_input+0x9f8>
 800b418:	68e2      	ldr	r2, [r4, #12]
 800b41a:	60da      	str	r2, [r3, #12]
 800b41c:	4b13      	ldr	r3, [pc, #76]	; (800b46c <tcp_input+0xa48>)
 800b41e:	2201      	movs	r2, #1
 800b420:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b422:	230a      	movs	r3, #10
 800b424:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b426:	4b12      	ldr	r3, [pc, #72]	; (800b470 <tcp_input+0xa4c>)
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	60e2      	str	r2, [r4, #12]
 800b42c:	601c      	str	r4, [r3, #0]
 800b42e:	f001 fc43 	bl	800ccb8 <tcp_timer_needed>
 800b432:	e5cf      	b.n	800afd4 <tcp_input+0x5b0>
 800b434:	080121dc 	.word	0x080121dc
 800b438:	08012570 	.word	0x08012570
 800b43c:	0800fe60 	.word	0x0800fe60
 800b440:	08012588 	.word	0x08012588
 800b444:	200107ec 	.word	0x200107ec
 800b448:	200107e8 	.word	0x200107e8
 800b44c:	20010818 	.word	0x20010818
 800b450:	2000aecc 	.word	0x2000aecc
 800b454:	20010826 	.word	0x20010826
 800b458:	2001080c 	.word	0x2001080c
 800b45c:	20010800 	.word	0x20010800
 800b460:	20010808 	.word	0x20010808
 800b464:	0801259c 	.word	0x0801259c
 800b468:	200107cc 	.word	0x200107cc
 800b46c:	200107d0 	.word	0x200107d0
 800b470:	200107e4 	.word	0x200107e4
      tcp_receive(pcb);
 800b474:	4620      	mov	r0, r4
 800b476:	f7fe fe49 	bl	800a10c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b47a:	4b73      	ldr	r3, [pc, #460]	; (800b648 <tcp_input+0xc24>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	f013 0f10 	tst.w	r3, #16
 800b482:	f43f ada7 	beq.w	800afd4 <tcp_input+0x5b0>
 800b486:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b488:	4b70      	ldr	r3, [pc, #448]	; (800b64c <tcp_input+0xc28>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	f47f ada1 	bne.w	800afd4 <tcp_input+0x5b0>
 800b492:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b494:	2b00      	cmp	r3, #0
 800b496:	f47f ad9d 	bne.w	800afd4 <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 800b49a:	4620      	mov	r0, r4
 800b49c:	f7fd fe1e 	bl	80090dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b4a0:	4b6b      	ldr	r3, [pc, #428]	; (800b650 <tcp_input+0xc2c>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	42a3      	cmp	r3, r4
 800b4a6:	d005      	beq.n	800b4b4 <tcp_input+0xa90>
 800b4a8:	b153      	cbz	r3, 800b4c0 <tcp_input+0xa9c>
 800b4aa:	68da      	ldr	r2, [r3, #12]
 800b4ac:	42a2      	cmp	r2, r4
 800b4ae:	d005      	beq.n	800b4bc <tcp_input+0xa98>
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	e7f9      	b.n	800b4a8 <tcp_input+0xa84>
 800b4b4:	68e2      	ldr	r2, [r4, #12]
 800b4b6:	4b66      	ldr	r3, [pc, #408]	; (800b650 <tcp_input+0xc2c>)
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	e001      	b.n	800b4c0 <tcp_input+0xa9c>
 800b4bc:	68e2      	ldr	r2, [r4, #12]
 800b4be:	60da      	str	r2, [r3, #12]
 800b4c0:	4b64      	ldr	r3, [pc, #400]	; (800b654 <tcp_input+0xc30>)
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b4c6:	230a      	movs	r3, #10
 800b4c8:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b4ca:	4b63      	ldr	r3, [pc, #396]	; (800b658 <tcp_input+0xc34>)
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	60e2      	str	r2, [r4, #12]
 800b4d0:	601c      	str	r4, [r3, #0]
 800b4d2:	f001 fbf1 	bl	800ccb8 <tcp_timer_needed>
 800b4d6:	e57d      	b.n	800afd4 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7fe fe17 	bl	800a10c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b4de:	4b5a      	ldr	r3, [pc, #360]	; (800b648 <tcp_input+0xc24>)
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	f013 0f10 	tst.w	r3, #16
 800b4e6:	f43f ad75 	beq.w	800afd4 <tcp_input+0x5b0>
 800b4ea:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b4ec:	4b57      	ldr	r3, [pc, #348]	; (800b64c <tcp_input+0xc28>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	429a      	cmp	r2, r3
 800b4f2:	f47f ad6f 	bne.w	800afd4 <tcp_input+0x5b0>
 800b4f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f47f ad6b 	bne.w	800afd4 <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 800b4fe:	4a57      	ldr	r2, [pc, #348]	; (800b65c <tcp_input+0xc38>)
 800b500:	7813      	ldrb	r3, [r2, #0]
 800b502:	f043 0310 	orr.w	r3, r3, #16
 800b506:	7013      	strb	r3, [r2, #0]
 800b508:	e564      	b.n	800afd4 <tcp_input+0x5b0>
        if (recv_acked > 0) {
 800b50a:	4b55      	ldr	r3, [pc, #340]	; (800b660 <tcp_input+0xc3c>)
 800b50c:	881a      	ldrh	r2, [r3, #0]
 800b50e:	b162      	cbz	r2, 800b52a <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b510:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b514:	b133      	cbz	r3, 800b524 <tcp_input+0xb00>
 800b516:	4621      	mov	r1, r4
 800b518:	6920      	ldr	r0, [r4, #16]
 800b51a:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b51c:	f110 0f0d 	cmn.w	r0, #13
 800b520:	f43f ad6c 	beq.w	800affc <tcp_input+0x5d8>
          recv_acked = 0;
 800b524:	4b4e      	ldr	r3, [pc, #312]	; (800b660 <tcp_input+0xc3c>)
 800b526:	2200      	movs	r2, #0
 800b528:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b52a:	4620      	mov	r0, r4
 800b52c:	f7fe fcfa 	bl	8009f24 <tcp_input_delayed_close>
 800b530:	2800      	cmp	r0, #0
 800b532:	f47f ad63 	bne.w	800affc <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800b536:	4b4b      	ldr	r3, [pc, #300]	; (800b664 <tcp_input+0xc40>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	b1eb      	cbz	r3, 800b578 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b53c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b53e:	b133      	cbz	r3, 800b54e <tcp_input+0xb2a>
 800b540:	4b49      	ldr	r3, [pc, #292]	; (800b668 <tcp_input+0xc44>)
 800b542:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b546:	4949      	ldr	r1, [pc, #292]	; (800b66c <tcp_input+0xc48>)
 800b548:	4849      	ldr	r0, [pc, #292]	; (800b670 <tcp_input+0xc4c>)
 800b54a:	f003 fceb 	bl	800ef24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b54e:	8b63      	ldrh	r3, [r4, #26]
 800b550:	f013 0f10 	tst.w	r3, #16
 800b554:	d128      	bne.n	800b5a8 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b556:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b55a:	b36d      	cbz	r5, 800b5b8 <tcp_input+0xb94>
 800b55c:	2300      	movs	r3, #0
 800b55e:	4a41      	ldr	r2, [pc, #260]	; (800b664 <tcp_input+0xc40>)
 800b560:	6812      	ldr	r2, [r2, #0]
 800b562:	4621      	mov	r1, r4
 800b564:	6920      	ldr	r0, [r4, #16]
 800b566:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800b568:	f110 0f0d 	cmn.w	r0, #13
 800b56c:	f43f ad46 	beq.w	800affc <tcp_input+0x5d8>
          if (err != ERR_OK) {
 800b570:	b110      	cbz	r0, 800b578 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800b572:	4b3c      	ldr	r3, [pc, #240]	; (800b664 <tcp_input+0xc40>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800b578:	4b38      	ldr	r3, [pc, #224]	; (800b65c <tcp_input+0xc38>)
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	f013 0f20 	tst.w	r3, #32
 800b580:	d005      	beq.n	800b58e <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800b582:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b584:	b303      	cbz	r3, 800b5c8 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b586:	7b5a      	ldrb	r2, [r3, #13]
 800b588:	f042 0220 	orr.w	r2, r2, #32
 800b58c:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800b58e:	4b39      	ldr	r3, [pc, #228]	; (800b674 <tcp_input+0xc50>)
 800b590:	2200      	movs	r2, #0
 800b592:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b594:	4620      	mov	r0, r4
 800b596:	f7fe fcc5 	bl	8009f24 <tcp_input_delayed_close>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	f47f ad2e 	bne.w	800affc <tcp_input+0x5d8>
        tcp_output(pcb);
 800b5a0:	4620      	mov	r0, r4
 800b5a2:	f001 f879 	bl	800c698 <tcp_output>
 800b5a6:	e529      	b.n	800affc <tcp_input+0x5d8>
            pbuf_free(recv_data);
 800b5a8:	4b2e      	ldr	r3, [pc, #184]	; (800b664 <tcp_input+0xc40>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	f7fc ffde 	bl	800856c <pbuf_free>
            tcp_abort(pcb);
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f7fd feb1 	bl	8009318 <tcp_abort>
            goto aborted;
 800b5b6:	e521      	b.n	800affc <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	4a2a      	ldr	r2, [pc, #168]	; (800b664 <tcp_input+0xc40>)
 800b5bc:	6812      	ldr	r2, [r2, #0]
 800b5be:	4621      	mov	r1, r4
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	f7fe f8d7 	bl	8009774 <tcp_recv_null>
 800b5c6:	e7cf      	b.n	800b568 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b5c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b5ca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800b5ce:	bf1c      	itt	ne
 800b5d0:	3301      	addne	r3, #1
 800b5d2:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b5d4:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	d0d8      	beq.n	800b58e <tcp_input+0xb6a>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	461a      	mov	r2, r3
 800b5e0:	4621      	mov	r1, r4
 800b5e2:	6920      	ldr	r0, [r4, #16]
 800b5e4:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800b5e6:	f110 0f0d 	cmn.w	r0, #13
 800b5ea:	d1d0      	bne.n	800b58e <tcp_input+0xb6a>
 800b5ec:	e506      	b.n	800affc <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b5ee:	4b22      	ldr	r3, [pc, #136]	; (800b678 <tcp_input+0xc54>)
 800b5f0:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b5f2:	4b22      	ldr	r3, [pc, #136]	; (800b67c <tcp_input+0xc58>)
 800b5f4:	4a22      	ldr	r2, [pc, #136]	; (800b680 <tcp_input+0xc5c>)
 800b5f6:	8810      	ldrh	r0, [r2, #0]
 800b5f8:	4a22      	ldr	r2, [pc, #136]	; (800b684 <tcp_input+0xc60>)
 800b5fa:	6812      	ldr	r2, [r2, #0]
 800b5fc:	880c      	ldrh	r4, [r1, #0]
 800b5fe:	9402      	str	r4, [sp, #8]
 800b600:	8849      	ldrh	r1, [r1, #2]
 800b602:	9101      	str	r1, [sp, #4]
 800b604:	1f19      	subs	r1, r3, #4
 800b606:	9100      	str	r1, [sp, #0]
 800b608:	4402      	add	r2, r0
 800b60a:	4910      	ldr	r1, [pc, #64]	; (800b64c <tcp_input+0xc28>)
 800b60c:	6809      	ldr	r1, [r1, #0]
 800b60e:	2000      	movs	r0, #0
 800b610:	f000 ffc0 	bl	800c594 <tcp_rst>
 800b614:	e007      	b.n	800b626 <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b616:	4b18      	ldr	r3, [pc, #96]	; (800b678 <tcp_input+0xc54>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	8998      	ldrh	r0, [r3, #12]
 800b61c:	f7fc f967 	bl	80078ee <lwip_htons>
 800b620:	f010 0f04 	tst.w	r0, #4
 800b624:	d0e3      	beq.n	800b5ee <tcp_input+0xbca>
    pbuf_free(p);
 800b626:	4628      	mov	r0, r5
 800b628:	f7fc ffa0 	bl	800856c <pbuf_free>
 800b62c:	f7ff ba08 	b.w	800aa40 <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b630:	4b09      	ldr	r3, [pc, #36]	; (800b658 <tcp_input+0xc34>)
 800b632:	681c      	ldr	r4, [r3, #0]
 800b634:	2c00      	cmp	r4, #0
 800b636:	f43f abe5 	beq.w	800ae04 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b63a:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800b668 <tcp_input+0xc44>
 800b63e:	4f12      	ldr	r7, [pc, #72]	; (800b688 <tcp_input+0xc64>)
 800b640:	4e0b      	ldr	r6, [pc, #44]	; (800b670 <tcp_input+0xc4c>)
 800b642:	f7ff bb8d 	b.w	800ad60 <tcp_input+0x33c>
 800b646:	bf00      	nop
 800b648:	200107ec 	.word	0x200107ec
 800b64c:	200107e8 	.word	0x200107e8
 800b650:	200107cc 	.word	0x200107cc
 800b654:	200107d0 	.word	0x200107d0
 800b658:	200107e4 	.word	0x200107e4
 800b65c:	20010808 	.word	0x20010808
 800b660:	20010800 	.word	0x20010800
 800b664:	20010804 	.word	0x20010804
 800b668:	080121dc 	.word	0x080121dc
 800b66c:	080125bc 	.word	0x080125bc
 800b670:	0800fe60 	.word	0x0800fe60
 800b674:	20010810 	.word	0x20010810
 800b678:	20010818 	.word	0x20010818
 800b67c:	2000aecc 	.word	0x2000aecc
 800b680:	20010826 	.word	0x20010826
 800b684:	2001080c 	.word	0x2001080c
 800b688:	08012520 	.word	0x08012520

0800b68c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b68c:	4a02      	ldr	r2, [pc, #8]	; (800b698 <tcp_trigger_input_pcb_close+0xc>)
 800b68e:	7813      	ldrb	r3, [r2, #0]
 800b690:	f043 0310 	orr.w	r3, r3, #16
 800b694:	7013      	strb	r3, [r2, #0]
}
 800b696:	4770      	bx	lr
 800b698:	20010808 	.word	0x20010808

0800b69c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b69c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b69e:	4604      	mov	r4, r0
 800b6a0:	b128      	cbz	r0, 800b6ae <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b6a2:	6863      	ldr	r3, [r4, #4]
 800b6a4:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b6a6:	3801      	subs	r0, #1
 800b6a8:	bf18      	it	ne
 800b6aa:	2001      	movne	r0, #1
 800b6ac:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b6ae:	4b04      	ldr	r3, [pc, #16]	; (800b6c0 <tcp_output_segment_busy+0x24>)
 800b6b0:	f240 529a 	movw	r2, #1434	; 0x59a
 800b6b4:	4903      	ldr	r1, [pc, #12]	; (800b6c4 <tcp_output_segment_busy+0x28>)
 800b6b6:	4804      	ldr	r0, [pc, #16]	; (800b6c8 <tcp_output_segment_busy+0x2c>)
 800b6b8:	f003 fc34 	bl	800ef24 <iprintf>
 800b6bc:	e7f1      	b.n	800b6a2 <tcp_output_segment_busy+0x6>
 800b6be:	bf00      	nop
 800b6c0:	080125d8 	.word	0x080125d8
 800b6c4:	0801260c 	.word	0x0801260c
 800b6c8:	0800fe60 	.word	0x0800fe60

0800b6cc <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b6d0:	460d      	mov	r5, r1
 800b6d2:	b181      	cbz	r1, 800b6f6 <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b6d4:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6d6:	00a4      	lsls	r4, r4, #2
 800b6d8:	f004 0404 	and.w	r4, r4, #4
 800b6dc:	3414      	adds	r4, #20
 800b6de:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b6e0:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b6e2:	429c      	cmp	r4, r3
 800b6e4:	d006      	beq.n	800b6f4 <tcp_output_fill_options+0x28>
 800b6e6:	4b08      	ldr	r3, [pc, #32]	; (800b708 <tcp_output_fill_options+0x3c>)
 800b6e8:	f240 7275 	movw	r2, #1909	; 0x775
 800b6ec:	4907      	ldr	r1, [pc, #28]	; (800b70c <tcp_output_fill_options+0x40>)
 800b6ee:	4808      	ldr	r0, [pc, #32]	; (800b710 <tcp_output_fill_options+0x44>)
 800b6f0:	f003 fc18 	bl	800ef24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b6f4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b6f6:	4b04      	ldr	r3, [pc, #16]	; (800b708 <tcp_output_fill_options+0x3c>)
 800b6f8:	f240 7256 	movw	r2, #1878	; 0x756
 800b6fc:	4905      	ldr	r1, [pc, #20]	; (800b714 <tcp_output_fill_options+0x48>)
 800b6fe:	4804      	ldr	r0, [pc, #16]	; (800b710 <tcp_output_fill_options+0x44>)
 800b700:	f003 fc10 	bl	800ef24 <iprintf>
 800b704:	e7e6      	b.n	800b6d4 <tcp_output_fill_options+0x8>
 800b706:	bf00      	nop
 800b708:	080125d8 	.word	0x080125d8
 800b70c:	0801265c 	.word	0x0801265c
 800b710:	0800fe60 	.word	0x0800fe60
 800b714:	08012634 	.word	0x08012634

0800b718 <tcp_pbuf_prealloc>:
{
 800b718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	4680      	mov	r8, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	4615      	mov	r5, r2
 800b722:	9e08      	ldr	r6, [sp, #32]
 800b724:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b728:	461f      	mov	r7, r3
 800b72a:	b1cb      	cbz	r3, 800b760 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b72c:	b1fe      	cbz	r6, 800b76e <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800b72e:	42ac      	cmp	r4, r5
 800b730:	d229      	bcs.n	800b786 <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b732:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b736:	f013 0f02 	tst.w	r3, #2
 800b73a:	d108      	bne.n	800b74e <tcp_pbuf_prealloc+0x36>
 800b73c:	8b73      	ldrh	r3, [r6, #26]
 800b73e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b742:	d139      	bne.n	800b7b8 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800b744:	f1b9 0f00 	cmp.w	r9, #0
 800b748:	d001      	beq.n	800b74e <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800b74a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800b74c:	b1b3      	cbz	r3, 800b77c <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b74e:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800b752:	f021 0103 	bic.w	r1, r1, #3
 800b756:	428d      	cmp	r5, r1
 800b758:	bf28      	it	cs
 800b75a:	460d      	movcs	r5, r1
 800b75c:	b2a9      	uxth	r1, r5
 800b75e:	e013      	b.n	800b788 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b760:	4b16      	ldr	r3, [pc, #88]	; (800b7bc <tcp_pbuf_prealloc+0xa4>)
 800b762:	22e8      	movs	r2, #232	; 0xe8
 800b764:	4916      	ldr	r1, [pc, #88]	; (800b7c0 <tcp_pbuf_prealloc+0xa8>)
 800b766:	4817      	ldr	r0, [pc, #92]	; (800b7c4 <tcp_pbuf_prealloc+0xac>)
 800b768:	f003 fbdc 	bl	800ef24 <iprintf>
 800b76c:	e7de      	b.n	800b72c <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b76e:	4b13      	ldr	r3, [pc, #76]	; (800b7bc <tcp_pbuf_prealloc+0xa4>)
 800b770:	22e9      	movs	r2, #233	; 0xe9
 800b772:	4915      	ldr	r1, [pc, #84]	; (800b7c8 <tcp_pbuf_prealloc+0xb0>)
 800b774:	4813      	ldr	r0, [pc, #76]	; (800b7c4 <tcp_pbuf_prealloc+0xac>)
 800b776:	f003 fbd5 	bl	800ef24 <iprintf>
 800b77a:	e7d8      	b.n	800b72e <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800b77c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d1e5      	bne.n	800b74e <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800b782:	4621      	mov	r1, r4
 800b784:	e000      	b.n	800b788 <tcp_pbuf_prealloc+0x70>
 800b786:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b788:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b78c:	4640      	mov	r0, r8
 800b78e:	f7fc ff5d 	bl	800864c <pbuf_alloc>
  if (p == NULL) {
 800b792:	4605      	mov	r5, r0
 800b794:	b168      	cbz	r0, 800b7b2 <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b796:	6803      	ldr	r3, [r0, #0]
 800b798:	b133      	cbz	r3, 800b7a8 <tcp_pbuf_prealloc+0x90>
 800b79a:	4b08      	ldr	r3, [pc, #32]	; (800b7bc <tcp_pbuf_prealloc+0xa4>)
 800b79c:	f240 120b 	movw	r2, #267	; 0x10b
 800b7a0:	490a      	ldr	r1, [pc, #40]	; (800b7cc <tcp_pbuf_prealloc+0xb4>)
 800b7a2:	4808      	ldr	r0, [pc, #32]	; (800b7c4 <tcp_pbuf_prealloc+0xac>)
 800b7a4:	f003 fbbe 	bl	800ef24 <iprintf>
  *oversize = p->len - length;
 800b7a8:	896b      	ldrh	r3, [r5, #10]
 800b7aa:	1b1b      	subs	r3, r3, r4
 800b7ac:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800b7ae:	812c      	strh	r4, [r5, #8]
 800b7b0:	816c      	strh	r4, [r5, #10]
}
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800b7b8:	4621      	mov	r1, r4
 800b7ba:	e7e5      	b.n	800b788 <tcp_pbuf_prealloc+0x70>
 800b7bc:	080125d8 	.word	0x080125d8
 800b7c0:	08012670 	.word	0x08012670
 800b7c4:	0800fe60 	.word	0x0800fe60
 800b7c8:	08012694 	.word	0x08012694
 800b7cc:	080126b4 	.word	0x080126b4

0800b7d0 <tcp_create_segment>:
{
 800b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	460e      	mov	r6, r1
 800b7d6:	4617      	mov	r7, r2
 800b7d8:	4698      	mov	r8, r3
 800b7da:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b7de:	4681      	mov	r9, r0
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d041      	beq.n	800b868 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b7e4:	2e00      	cmp	r6, #0
 800b7e6:	d046      	beq.n	800b876 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b7e8:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800b7ec:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b7f0:	2003      	movs	r0, #3
 800b7f2:	f7fc fbc9 	bl	8007f88 <memp_malloc>
 800b7f6:	4604      	mov	r4, r0
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d043      	beq.n	800b884 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800b7fc:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b800:	2300      	movs	r3, #0
 800b802:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800b804:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b806:	fa1f fa85 	uxth.w	sl, r5
 800b80a:	8933      	ldrh	r3, [r6, #8]
 800b80c:	4553      	cmp	r3, sl
 800b80e:	d33d      	bcc.n	800b88c <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800b810:	8931      	ldrh	r1, [r6, #8]
 800b812:	eba1 010a 	sub.w	r1, r1, sl
 800b816:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b818:	2114      	movs	r1, #20
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7fc fe61 	bl	80084e2 <pbuf_add_header>
 800b820:	2800      	cmp	r0, #0
 800b822:	d13a      	bne.n	800b89a <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b824:	6863      	ldr	r3, [r4, #4]
 800b826:	685e      	ldr	r6, [r3, #4]
 800b828:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b82a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800b82e:	f7fc f85e 	bl	80078ee <lwip_htons>
 800b832:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b834:	68e6      	ldr	r6, [r4, #12]
 800b836:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800b83a:	f7fc f858 	bl	80078ee <lwip_htons>
 800b83e:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b840:	68e6      	ldr	r6, [r4, #12]
 800b842:	4640      	mov	r0, r8
 800b844:	f7fc f858 	bl	80078f8 <lwip_htonl>
 800b848:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b84a:	68e6      	ldr	r6, [r4, #12]
 800b84c:	02a8      	lsls	r0, r5, #10
 800b84e:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 800b852:	4338      	orrs	r0, r7
 800b854:	f7fc f84b 	bl	80078ee <lwip_htons>
 800b858:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800b85a:	68e3      	ldr	r3, [r4, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	749a      	strb	r2, [r3, #18]
 800b860:	74da      	strb	r2, [r3, #19]
}
 800b862:	4620      	mov	r0, r4
 800b864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b868:	4b0e      	ldr	r3, [pc, #56]	; (800b8a4 <tcp_create_segment+0xd4>)
 800b86a:	22a3      	movs	r2, #163	; 0xa3
 800b86c:	490e      	ldr	r1, [pc, #56]	; (800b8a8 <tcp_create_segment+0xd8>)
 800b86e:	480f      	ldr	r0, [pc, #60]	; (800b8ac <tcp_create_segment+0xdc>)
 800b870:	f003 fb58 	bl	800ef24 <iprintf>
 800b874:	e7b6      	b.n	800b7e4 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <tcp_create_segment+0xd4>)
 800b878:	22a4      	movs	r2, #164	; 0xa4
 800b87a:	490d      	ldr	r1, [pc, #52]	; (800b8b0 <tcp_create_segment+0xe0>)
 800b87c:	480b      	ldr	r0, [pc, #44]	; (800b8ac <tcp_create_segment+0xdc>)
 800b87e:	f003 fb51 	bl	800ef24 <iprintf>
 800b882:	e7b1      	b.n	800b7e8 <tcp_create_segment+0x18>
    pbuf_free(p);
 800b884:	4630      	mov	r0, r6
 800b886:	f7fc fe71 	bl	800856c <pbuf_free>
    return NULL;
 800b88a:	e7ea      	b.n	800b862 <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b88c:	4b05      	ldr	r3, [pc, #20]	; (800b8a4 <tcp_create_segment+0xd4>)
 800b88e:	22b0      	movs	r2, #176	; 0xb0
 800b890:	4908      	ldr	r1, [pc, #32]	; (800b8b4 <tcp_create_segment+0xe4>)
 800b892:	4806      	ldr	r0, [pc, #24]	; (800b8ac <tcp_create_segment+0xdc>)
 800b894:	f003 fb46 	bl	800ef24 <iprintf>
 800b898:	e7ba      	b.n	800b810 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7fd fb20 	bl	8008ee0 <tcp_seg_free>
    return NULL;
 800b8a0:	2400      	movs	r4, #0
 800b8a2:	e7de      	b.n	800b862 <tcp_create_segment+0x92>
 800b8a4:	080125d8 	.word	0x080125d8
 800b8a8:	080126c8 	.word	0x080126c8
 800b8ac:	0800fe60 	.word	0x0800fe60
 800b8b0:	080126e8 	.word	0x080126e8
 800b8b4:	0801270c 	.word	0x0801270c

0800b8b8 <tcp_output_alloc_header_common>:
{
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	4607      	mov	r7, r0
 800b8be:	460c      	mov	r4, r1
 800b8c0:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b8c2:	3214      	adds	r2, #20
 800b8c4:	4411      	add	r1, r2
 800b8c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b8ca:	b289      	uxth	r1, r1
 800b8cc:	2022      	movs	r0, #34	; 0x22
 800b8ce:	f7fc febd 	bl	800864c <pbuf_alloc>
  if (p != NULL) {
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	b348      	cbz	r0, 800b92a <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b8d6:	f104 0313 	add.w	r3, r4, #19
 800b8da:	8942      	ldrh	r2, [r0, #10]
 800b8dc:	4293      	cmp	r3, r2
 800b8de:	da27      	bge.n	800b930 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800b8e0:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800b8e2:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b8e6:	f7fc f802 	bl	80078ee <lwip_htons>
 800b8ea:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b8ec:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800b8f0:	f7fb fffd 	bl	80078ee <lwip_htons>
 800b8f4:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800b8f6:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b8fa:	4638      	mov	r0, r7
 800b8fc:	f7fb fffc 	bl	80078f8 <lwip_htonl>
 800b900:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b902:	08a4      	lsrs	r4, r4, #2
 800b904:	3405      	adds	r4, #5
 800b906:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800b90a:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800b90e:	b2a0      	uxth	r0, r4
 800b910:	f7fb ffed 	bl	80078ee <lwip_htons>
 800b914:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b916:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800b91a:	f7fb ffe8 	bl	80078ee <lwip_htons>
 800b91e:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	742b      	strb	r3, [r5, #16]
 800b924:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800b926:	74ab      	strb	r3, [r5, #18]
 800b928:	74eb      	strb	r3, [r5, #19]
}
 800b92a:	4630      	mov	r0, r6
 800b92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b930:	4b03      	ldr	r3, [pc, #12]	; (800b940 <tcp_output_alloc_header_common+0x88>)
 800b932:	f240 7223 	movw	r2, #1827	; 0x723
 800b936:	4903      	ldr	r1, [pc, #12]	; (800b944 <tcp_output_alloc_header_common+0x8c>)
 800b938:	4803      	ldr	r0, [pc, #12]	; (800b948 <tcp_output_alloc_header_common+0x90>)
 800b93a:	f003 faf3 	bl	800ef24 <iprintf>
 800b93e:	e7cf      	b.n	800b8e0 <tcp_output_alloc_header_common+0x28>
 800b940:	080125d8 	.word	0x080125d8
 800b944:	08012724 	.word	0x08012724
 800b948:	0800fe60 	.word	0x0800fe60

0800b94c <tcp_output_alloc_header>:
{
 800b94c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b94e:	b085      	sub	sp, #20
 800b950:	460d      	mov	r5, r1
 800b952:	4616      	mov	r6, r2
 800b954:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b956:	4604      	mov	r4, r0
 800b958:	b1a0      	cbz	r0, 800b984 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b95a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b95c:	9303      	str	r3, [sp, #12]
 800b95e:	2310      	movs	r3, #16
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	8b23      	ldrh	r3, [r4, #24]
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	8ae3      	ldrh	r3, [r4, #22]
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	463b      	mov	r3, r7
 800b96c:	4632      	mov	r2, r6
 800b96e:	4629      	mov	r1, r5
 800b970:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b972:	f7ff ffa1 	bl	800b8b8 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800b976:	b118      	cbz	r0, 800b980 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b978:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b97a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b97c:	4413      	add	r3, r2
 800b97e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800b980:	b005      	add	sp, #20
 800b982:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b984:	4b03      	ldr	r3, [pc, #12]	; (800b994 <tcp_output_alloc_header+0x48>)
 800b986:	f240 7242 	movw	r2, #1858	; 0x742
 800b98a:	4903      	ldr	r1, [pc, #12]	; (800b998 <tcp_output_alloc_header+0x4c>)
 800b98c:	4803      	ldr	r0, [pc, #12]	; (800b99c <tcp_output_alloc_header+0x50>)
 800b98e:	f003 fac9 	bl	800ef24 <iprintf>
 800b992:	e7e2      	b.n	800b95a <tcp_output_alloc_header+0xe>
 800b994:	080125d8 	.word	0x080125d8
 800b998:	08012754 	.word	0x08012754
 800b99c:	0800fe60 	.word	0x0800fe60

0800b9a0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	4616      	mov	r6, r2
 800b9a8:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b9aa:	460f      	mov	r7, r1
 800b9ac:	b1c9      	cbz	r1, 800b9e2 <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b9ae:	b374      	cbz	r4, 800ba0e <tcp_output_control_segment+0x6e>
 800b9b0:	7a20      	ldrb	r0, [r4, #8]
 800b9b2:	b9f0      	cbnz	r0, 800b9f2 <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	f002 f947 	bl	800dc48 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b9ba:	4602      	mov	r2, r0
 800b9bc:	b308      	cbz	r0, 800ba02 <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b9be:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b9c0:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b9c2:	9202      	str	r2, [sp, #8]
 800b9c4:	2206      	movs	r2, #6
 800b9c6:	9201      	str	r2, [sp, #4]
 800b9c8:	9100      	str	r1, [sp, #0]
 800b9ca:	462a      	mov	r2, r5
 800b9cc:	4631      	mov	r1, r6
 800b9ce:	4638      	mov	r0, r7
 800b9d0:	f002 fac6 	bl	800df60 <ip4_output_if>
 800b9d4:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b9d6:	4638      	mov	r0, r7
 800b9d8:	f7fc fdc8 	bl	800856c <pbuf_free>
  return err;
}
 800b9dc:	4620      	mov	r0, r4
 800b9de:	b005      	add	sp, #20
 800b9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ba20 <tcp_output_control_segment+0x80>)
 800b9e4:	f240 7287 	movw	r2, #1927	; 0x787
 800b9e8:	490e      	ldr	r1, [pc, #56]	; (800ba24 <tcp_output_control_segment+0x84>)
 800b9ea:	480f      	ldr	r0, [pc, #60]	; (800ba28 <tcp_output_control_segment+0x88>)
 800b9ec:	f003 fa9a 	bl	800ef24 <iprintf>
 800b9f0:	e7dd      	b.n	800b9ae <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800b9f2:	f7fc fcc7 	bl	8008384 <netif_get_by_index>
  if (netif == NULL) {
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d1e0      	bne.n	800b9be <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 800b9fc:	f06f 0403 	mvn.w	r4, #3
 800ba00:	e7e9      	b.n	800b9d6 <tcp_output_control_segment+0x36>
 800ba02:	f06f 0403 	mvn.w	r4, #3
 800ba06:	e7e6      	b.n	800b9d6 <tcp_output_control_segment+0x36>
 800ba08:	f06f 0403 	mvn.w	r4, #3
 800ba0c:	e7e3      	b.n	800b9d6 <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f002 f91a 	bl	800dc48 <ip4_route>
  if (netif == NULL) {
 800ba14:	4602      	mov	r2, r0
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d0f6      	beq.n	800ba08 <tcp_output_control_segment+0x68>
      tos = 0;
 800ba1a:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800ba1c:	23ff      	movs	r3, #255	; 0xff
 800ba1e:	e7d0      	b.n	800b9c2 <tcp_output_control_segment+0x22>
 800ba20:	080125d8 	.word	0x080125d8
 800ba24:	0801277c 	.word	0x0801277c
 800ba28:	0800fe60 	.word	0x0800fe60

0800ba2c <tcp_write>:
{
 800ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba30:	b091      	sub	sp, #68	; 0x44
 800ba32:	9107      	str	r1, [sp, #28]
 800ba34:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba3c:	b1c0      	cbz	r0, 800ba70 <tcp_write+0x44>
 800ba3e:	4692      	mov	sl, r2
 800ba40:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800ba42:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800ba44:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800ba48:	085b      	lsrs	r3, r3, #1
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	bf28      	it	cs
 800ba4e:	4613      	movcs	r3, r2
 800ba50:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	bf08      	it	eq
 800ba56:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ba58:	9b07      	ldr	r3, [sp, #28]
 800ba5a:	b19b      	cbz	r3, 800ba84 <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 800ba5c:	7d03      	ldrb	r3, [r0, #20]
 800ba5e:	2b07      	cmp	r3, #7
 800ba60:	d01a      	beq.n	800ba98 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800ba62:	3b02      	subs	r3, #2
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	d916      	bls.n	800ba98 <tcp_write+0x6c>
    return ERR_CONN;
 800ba6a:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800ba6e:	e203      	b.n	800be78 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba70:	4ba5      	ldr	r3, [pc, #660]	; (800bd08 <tcp_write+0x2dc>)
 800ba72:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ba76:	49a5      	ldr	r1, [pc, #660]	; (800bd0c <tcp_write+0x2e0>)
 800ba78:	48a5      	ldr	r0, [pc, #660]	; (800bd10 <tcp_write+0x2e4>)
 800ba7a:	f003 fa53 	bl	800ef24 <iprintf>
 800ba7e:	f06f 000f 	mvn.w	r0, #15
 800ba82:	e1f9      	b.n	800be78 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ba84:	4ba0      	ldr	r3, [pc, #640]	; (800bd08 <tcp_write+0x2dc>)
 800ba86:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ba8a:	49a2      	ldr	r1, [pc, #648]	; (800bd14 <tcp_write+0x2e8>)
 800ba8c:	48a0      	ldr	r0, [pc, #640]	; (800bd10 <tcp_write+0x2e4>)
 800ba8e:	f003 fa49 	bl	800ef24 <iprintf>
 800ba92:	f06f 000f 	mvn.w	r0, #15
 800ba96:	e1ef      	b.n	800be78 <tcp_write+0x44c>
  } else if (len == 0) {
 800ba98:	f1ba 0f00 	cmp.w	sl, #0
 800ba9c:	d039      	beq.n	800bb12 <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 800ba9e:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800baa2:	4553      	cmp	r3, sl
 800baa4:	d310      	bcc.n	800bac8 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800baa6:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800baaa:	2b08      	cmp	r3, #8
 800baac:	d815      	bhi.n	800bada <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 800baae:	b32b      	cbz	r3, 800bafc <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800bab0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bab4:	bb6b      	cbnz	r3, 800bb12 <tcp_write+0xe6>
 800bab6:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800baba:	b1bb      	cbz	r3, 800baec <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 800babc:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bac0:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800bac4:	464b      	mov	r3, r9
 800bac6:	e02c      	b.n	800bb22 <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bac8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bad0:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800bad4:	f04f 30ff 	mov.w	r0, #4294967295
 800bad8:	e1ce      	b.n	800be78 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bada:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bae2:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800bae6:	f04f 30ff 	mov.w	r0, #4294967295
 800baea:	e1c5      	b.n	800be78 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800baec:	4b86      	ldr	r3, [pc, #536]	; (800bd08 <tcp_write+0x2dc>)
 800baee:	f240 1255 	movw	r2, #341	; 0x155
 800baf2:	4989      	ldr	r1, [pc, #548]	; (800bd18 <tcp_write+0x2ec>)
 800baf4:	4886      	ldr	r0, [pc, #536]	; (800bd10 <tcp_write+0x2e4>)
 800baf6:	f003 fa15 	bl	800ef24 <iprintf>
 800bafa:	e00a      	b.n	800bb12 <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bafc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d04f      	beq.n	800bba4 <tcp_write+0x178>
 800bb04:	4b80      	ldr	r3, [pc, #512]	; (800bd08 <tcp_write+0x2dc>)
 800bb06:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800bb0a:	4984      	ldr	r1, [pc, #528]	; (800bd1c <tcp_write+0x2f0>)
 800bb0c:	4880      	ldr	r0, [pc, #512]	; (800bd10 <tcp_write+0x2e4>)
 800bb0e:	f003 fa09 	bl	800ef24 <iprintf>
  queuelen = pcb->snd_queuelen;
 800bb12:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bb16:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800bb1a:	f1b9 0f00 	cmp.w	r9, #0
 800bb1e:	d047      	beq.n	800bbb0 <tcp_write+0x184>
 800bb20:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bb22:	9309      	str	r3, [sp, #36]	; 0x24
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1fb      	bne.n	800bb22 <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bb2a:	4699      	mov	r9, r3
 800bb2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb2e:	7a9c      	ldrb	r4, [r3, #10]
 800bb30:	00a4      	lsls	r4, r4, #2
 800bb32:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bb36:	891b      	ldrh	r3, [r3, #8]
 800bb38:	4423      	add	r3, r4
 800bb3a:	459b      	cmp	fp, r3
 800bb3c:	db4f      	blt.n	800bbde <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bb3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb40:	891b      	ldrh	r3, [r3, #8]
 800bb42:	ebab 0303 	sub.w	r3, fp, r3
 800bb46:	1b1c      	subs	r4, r3, r4
 800bb48:	b2a3      	uxth	r3, r4
 800bb4a:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800bb4c:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800bb50:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800bb54:	2c00      	cmp	r4, #0
 800bb56:	d05b      	beq.n	800bc10 <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bb58:	429c      	cmp	r4, r3
 800bb5a:	d848      	bhi.n	800bbee <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800bb5c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bb60:	461c      	mov	r4, r3
 800bb62:	4553      	cmp	r3, sl
 800bb64:	bf28      	it	cs
 800bb66:	4654      	movcs	r4, sl
 800bb68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb6a:	4294      	cmp	r4, r2
 800bb6c:	bf28      	it	cs
 800bb6e:	4614      	movcs	r4, r2
 800bb70:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800bb72:	1b1b      	subs	r3, r3, r4
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800bb7a:	1b12      	subs	r2, r2, r4
 800bb7c:	b292      	uxth	r2, r2
 800bb7e:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	f000 8082 	beq.w	800bc8a <tcp_write+0x25e>
 800bb86:	45a2      	cmp	sl, r4
 800bb88:	d139      	bne.n	800bbfe <tcp_write+0x1d2>
 800bb8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 800bb8c:	2c00      	cmp	r4, #0
 800bb8e:	f000 8266 	beq.w	800c05e <tcp_write+0x632>
 800bb92:	46cb      	mov	fp, r9
 800bb94:	2300      	movs	r3, #0
 800bb96:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 800bb98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb9a:	685d      	ldr	r5, [r3, #4]
 800bb9c:	2d00      	cmp	r5, #0
 800bb9e:	f040 8187 	bne.w	800beb0 <tcp_write+0x484>
 800bba2:	e198      	b.n	800bed6 <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bba4:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1ab      	bne.n	800bb04 <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 800bbac:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bbb0:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800bbb4:	2c00      	cmp	r4, #0
 800bbb6:	f040 8094 	bne.w	800bce2 <tcp_write+0x2b6>
  u16_t extendlen = 0;
 800bbba:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800bbbc:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800bbc2:	4699      	mov	r9, r3
  while (pos < len) {
 800bbc4:	45a2      	cmp	sl, r4
 800bbc6:	f240 816e 	bls.w	800bea6 <tcp_write+0x47a>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9306      	str	r3, [sp, #24]
 800bbce:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bbd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	9308      	str	r3, [sp, #32]
 800bbd8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bbdc:	e110      	b.n	800be00 <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bbde:	4b4a      	ldr	r3, [pc, #296]	; (800bd08 <tcp_write+0x2dc>)
 800bbe0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bbe4:	494e      	ldr	r1, [pc, #312]	; (800bd20 <tcp_write+0x2f4>)
 800bbe6:	484a      	ldr	r0, [pc, #296]	; (800bd10 <tcp_write+0x2e4>)
 800bbe8:	f003 f99c 	bl	800ef24 <iprintf>
 800bbec:	e7a7      	b.n	800bb3e <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bbee:	4b46      	ldr	r3, [pc, #280]	; (800bd08 <tcp_write+0x2dc>)
 800bbf0:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bbf4:	494b      	ldr	r1, [pc, #300]	; (800bd24 <tcp_write+0x2f8>)
 800bbf6:	4846      	ldr	r0, [pc, #280]	; (800bd10 <tcp_write+0x2e4>)
 800bbf8:	f003 f994 	bl	800ef24 <iprintf>
 800bbfc:	e7ae      	b.n	800bb5c <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bbfe:	4b42      	ldr	r3, [pc, #264]	; (800bd08 <tcp_write+0x2dc>)
 800bc00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc04:	4948      	ldr	r1, [pc, #288]	; (800bd28 <tcp_write+0x2fc>)
 800bc06:	4842      	ldr	r0, [pc, #264]	; (800bd10 <tcp_write+0x2e4>)
 800bc08:	f003 f98c 	bl	800ef24 <iprintf>
 800bc0c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc0e:	e000      	b.n	800bc12 <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bc10:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bc12:	45a2      	cmp	sl, r4
 800bc14:	d9ba      	bls.n	800bb8c <tcp_write+0x160>
 800bc16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc18:	2a00      	cmp	r2, #0
 800bc1a:	d070      	beq.n	800bcfe <tcp_write+0x2d2>
 800bc1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc1e:	891b      	ldrh	r3, [r3, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d06e      	beq.n	800bd02 <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bc24:	ebaa 0704 	sub.w	r7, sl, r4
 800bc28:	4297      	cmp	r7, r2
 800bc2a:	bfa8      	it	ge
 800bc2c:	4617      	movge	r7, r2
 800bc2e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bc30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc32:	f013 0f01 	tst.w	r3, #1
 800bc36:	d12a      	bne.n	800bc8e <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bc3e:	464a      	mov	r2, r9
 800bc40:	4613      	mov	r3, r2
 800bc42:	6812      	ldr	r2, [r2, #0]
 800bc44:	2a00      	cmp	r2, #0
 800bc46:	d1fb      	bne.n	800bc40 <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bc48:	4691      	mov	r9, r2
 800bc4a:	7b1a      	ldrb	r2, [r3, #12]
 800bc4c:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800bc50:	d105      	bne.n	800bc5e <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bc52:	895a      	ldrh	r2, [r3, #10]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bc58:	9a07      	ldr	r2, [sp, #28]
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d035      	beq.n	800bcca <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bc5e:	2201      	movs	r2, #1
 800bc60:	4629      	mov	r1, r5
 800bc62:	2000      	movs	r0, #0
 800bc64:	f7fc fcf2 	bl	800864c <pbuf_alloc>
 800bc68:	4681      	mov	r9, r0
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	f000 81d6 	beq.w	800c01c <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bc70:	9b07      	ldr	r3, [sp, #28]
 800bc72:	4423      	add	r3, r4
 800bc74:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800bc76:	f7fc fdf1 	bl	800885c <pbuf_clen>
 800bc7a:	4406      	add	r6, r0
 800bc7c:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800bc82:	4425      	add	r5, r4
 800bc84:	940d      	str	r4, [sp, #52]	; 0x34
 800bc86:	b2ac      	uxth	r4, r5
 800bc88:	e79c      	b.n	800bbc4 <tcp_write+0x198>
 800bc8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc8c:	e7c1      	b.n	800bc12 <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bc8e:	2301      	movs	r3, #1
 800bc90:	9302      	str	r3, [sp, #8]
 800bc92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	f8cd 8000 	str.w	r8, [sp]
 800bc9a:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800bc9e:	4629      	mov	r1, r5
 800bca0:	2000      	movs	r0, #0
 800bca2:	f7ff fd39 	bl	800b718 <tcp_pbuf_prealloc>
 800bca6:	4681      	mov	r9, r0
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	f000 81b7 	beq.w	800c01c <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bcae:	462a      	mov	r2, r5
 800bcb0:	9b07      	ldr	r3, [sp, #28]
 800bcb2:	1919      	adds	r1, r3, r4
 800bcb4:	6840      	ldr	r0, [r0, #4]
 800bcb6:	f003 f88a 	bl	800edce <memcpy>
        queuelen += pbuf_clen(concat_p);
 800bcba:	4648      	mov	r0, r9
 800bcbc:	f7fc fdce 	bl	800885c <pbuf_clen>
 800bcc0:	4406      	add	r6, r0
 800bcc2:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcc8:	e7db      	b.n	800bc82 <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bcca:	b90c      	cbnz	r4, 800bcd0 <tcp_write+0x2a4>
          extendlen = seglen;
 800bccc:	950b      	str	r5, [sp, #44]	; 0x2c
 800bcce:	e7d8      	b.n	800bc82 <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bcd0:	4b0d      	ldr	r3, [pc, #52]	; (800bd08 <tcp_write+0x2dc>)
 800bcd2:	f240 2231 	movw	r2, #561	; 0x231
 800bcd6:	4915      	ldr	r1, [pc, #84]	; (800bd2c <tcp_write+0x300>)
 800bcd8:	480d      	ldr	r0, [pc, #52]	; (800bd10 <tcp_write+0x2e4>)
 800bcda:	f003 f923 	bl	800ef24 <iprintf>
          extendlen = seglen;
 800bcde:	950b      	str	r5, [sp, #44]	; 0x2c
 800bce0:	e7cf      	b.n	800bc82 <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bce2:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <tcp_write+0x2dc>)
 800bce4:	f240 224a 	movw	r2, #586	; 0x24a
 800bce8:	4911      	ldr	r1, [pc, #68]	; (800bd30 <tcp_write+0x304>)
 800bcea:	4809      	ldr	r0, [pc, #36]	; (800bd10 <tcp_write+0x2e4>)
 800bcec:	f003 f91a 	bl	800ef24 <iprintf>
  u16_t extendlen = 0;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800bcf4:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800bcf6:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bcf8:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800bcfa:	4699      	mov	r9, r3
 800bcfc:	e762      	b.n	800bbc4 <tcp_write+0x198>
 800bcfe:	940d      	str	r4, [sp, #52]	; 0x34
 800bd00:	e763      	b.n	800bbca <tcp_write+0x19e>
 800bd02:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd04:	940d      	str	r4, [sp, #52]	; 0x34
 800bd06:	e760      	b.n	800bbca <tcp_write+0x19e>
 800bd08:	080125d8 	.word	0x080125d8
 800bd0c:	080127a8 	.word	0x080127a8
 800bd10:	0800fe60 	.word	0x0800fe60
 800bd14:	080127c0 	.word	0x080127c0
 800bd18:	080127f4 	.word	0x080127f4
 800bd1c:	08012830 	.word	0x08012830
 800bd20:	08012864 	.word	0x08012864
 800bd24:	0801287c 	.word	0x0801287c
 800bd28:	0801289c 	.word	0x0801289c
 800bd2c:	080128bc 	.word	0x080128bc
 800bd30:	080128e8 	.word	0x080128e8
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bd34:	9b06      	ldr	r3, [sp, #24]
 800bd36:	fab3 f383 	clz	r3, r3
 800bd3a:	095b      	lsrs	r3, r3, #5
 800bd3c:	9302      	str	r3, [sp, #8]
 800bd3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd40:	9301      	str	r3, [sp, #4]
 800bd42:	f8cd 8000 	str.w	r8, [sp]
 800bd46:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800bd4a:	465a      	mov	r2, fp
 800bd4c:	4629      	mov	r1, r5
 800bd4e:	2036      	movs	r0, #54	; 0x36
 800bd50:	f7ff fce2 	bl	800b718 <tcp_pbuf_prealloc>
 800bd54:	4607      	mov	r7, r0
 800bd56:	2800      	cmp	r0, #0
 800bd58:	f000 8143 	beq.w	800bfe2 <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bd5c:	8943      	ldrh	r3, [r0, #10]
 800bd5e:	42ab      	cmp	r3, r5
 800bd60:	d306      	bcc.n	800bd70 <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bd62:	462a      	mov	r2, r5
 800bd64:	9b07      	ldr	r3, [sp, #28]
 800bd66:	1919      	adds	r1, r3, r4
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f003 f830 	bl	800edce <memcpy>
 800bd6e:	e026      	b.n	800bdbe <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bd70:	4bae      	ldr	r3, [pc, #696]	; (800c02c <tcp_write+0x600>)
 800bd72:	f240 2266 	movw	r2, #614	; 0x266
 800bd76:	49ae      	ldr	r1, [pc, #696]	; (800c030 <tcp_write+0x604>)
 800bd78:	48ae      	ldr	r0, [pc, #696]	; (800c034 <tcp_write+0x608>)
 800bd7a:	f003 f8d3 	bl	800ef24 <iprintf>
 800bd7e:	e7f0      	b.n	800bd62 <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bd80:	4baa      	ldr	r3, [pc, #680]	; (800c02c <tcp_write+0x600>)
 800bd82:	f240 2271 	movw	r2, #625	; 0x271
 800bd86:	49ac      	ldr	r1, [pc, #688]	; (800c038 <tcp_write+0x60c>)
 800bd88:	48aa      	ldr	r0, [pc, #680]	; (800c034 <tcp_write+0x608>)
 800bd8a:	f003 f8cb 	bl	800ef24 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bd8e:	2201      	movs	r2, #1
 800bd90:	4629      	mov	r1, r5
 800bd92:	2036      	movs	r0, #54	; 0x36
 800bd94:	f7fc fc5a 	bl	800864c <pbuf_alloc>
 800bd98:	4681      	mov	r9, r0
 800bd9a:	2800      	cmp	r0, #0
 800bd9c:	f000 8124 	beq.w	800bfe8 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bda0:	9b07      	ldr	r3, [sp, #28]
 800bda2:	4423      	add	r3, r4
 800bda4:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bda6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bdaa:	2100      	movs	r1, #0
 800bdac:	2036      	movs	r0, #54	; 0x36
 800bdae:	f7fc fc4d 	bl	800864c <pbuf_alloc>
 800bdb2:	4607      	mov	r7, r0
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	d032      	beq.n	800be1e <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 800bdb8:	4649      	mov	r1, r9
 800bdba:	f7fc fd77 	bl	80088ac <pbuf_cat>
    queuelen += pbuf_clen(p);
 800bdbe:	4638      	mov	r0, r7
 800bdc0:	f7fc fd4c 	bl	800885c <pbuf_clen>
 800bdc4:	4406      	add	r6, r0
 800bdc6:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bdc8:	2e09      	cmp	r6, #9
 800bdca:	d82e      	bhi.n	800be2a <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bdcc:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	9200      	str	r2, [sp, #0]
 800bdd4:	4423      	add	r3, r4
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	4640      	mov	r0, r8
 800bdda:	f7ff fcf9 	bl	800b7d0 <tcp_create_segment>
 800bdde:	4607      	mov	r7, r0
 800bde0:	2800      	cmp	r0, #0
 800bde2:	f000 8104 	beq.w	800bfee <tcp_write+0x5c2>
    if (queue == NULL) {
 800bde6:	9b06      	ldr	r3, [sp, #24]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d050      	beq.n	800be8e <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bdec:	9b05      	ldr	r3, [sp, #20]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d045      	beq.n	800be7e <tcp_write+0x452>
      prev_seg->next = seg;
 800bdf2:	9b05      	ldr	r3, [sp, #20]
 800bdf4:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800bdf6:	442c      	add	r4, r5
 800bdf8:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800bdfa:	45a2      	cmp	sl, r4
 800bdfc:	d949      	bls.n	800be92 <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bdfe:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800be00:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800be04:	b2ad      	uxth	r5, r5
 800be06:	455d      	cmp	r5, fp
 800be08:	bf28      	it	cs
 800be0a:	465d      	movcs	r5, fp
 800be0c:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800be0e:	9b08      	ldr	r3, [sp, #32]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d18f      	bne.n	800bd34 <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800be14:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d0b8      	beq.n	800bd8e <tcp_write+0x362>
 800be1c:	e7b0      	b.n	800bd80 <tcp_write+0x354>
        pbuf_free(p2);
 800be1e:	4648      	mov	r0, r9
 800be20:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800be24:	f7fc fba2 	bl	800856c <pbuf_free>
        goto memerr;
 800be28:	e004      	b.n	800be34 <tcp_write+0x408>
      pbuf_free(p);
 800be2a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800be2e:	4638      	mov	r0, r7
 800be30:	f7fc fb9c 	bl	800856c <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800be34:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800be38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be3c:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800be40:	f1b9 0f00 	cmp.w	r9, #0
 800be44:	d002      	beq.n	800be4c <tcp_write+0x420>
    pbuf_free(concat_p);
 800be46:	4648      	mov	r0, r9
 800be48:	f7fc fb90 	bl	800856c <pbuf_free>
  if (queue != NULL) {
 800be4c:	9b06      	ldr	r3, [sp, #24]
 800be4e:	b113      	cbz	r3, 800be56 <tcp_write+0x42a>
    tcp_segs_free(queue);
 800be50:	4618      	mov	r0, r3
 800be52:	f7fd f852 	bl	8008efa <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800be56:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	f000 80d8 	beq.w	800c010 <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800be60:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800be64:	2b00      	cmp	r3, #0
 800be66:	f040 80d6 	bne.w	800c016 <tcp_write+0x5ea>
 800be6a:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	f000 80c0 	beq.w	800bff4 <tcp_write+0x5c8>
  return ERR_MEM;
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
}
 800be78:	b011      	add	sp, #68	; 0x44
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800be7e:	4b6b      	ldr	r3, [pc, #428]	; (800c02c <tcp_write+0x600>)
 800be80:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be84:	496d      	ldr	r1, [pc, #436]	; (800c03c <tcp_write+0x610>)
 800be86:	486b      	ldr	r0, [pc, #428]	; (800c034 <tcp_write+0x608>)
 800be88:	f003 f84c 	bl	800ef24 <iprintf>
 800be8c:	e7b1      	b.n	800bdf2 <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800be8e:	9006      	str	r0, [sp, #24]
 800be90:	e7b1      	b.n	800bdf6 <tcp_write+0x3ca>
 800be92:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 800be96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d052      	beq.n	800bf42 <tcp_write+0x516>
 800be9c:	461c      	mov	r4, r3
 800be9e:	46cb      	mov	fp, r9
 800bea0:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bea4:	e678      	b.n	800bb98 <tcp_write+0x16c>
  while (pos < len) {
 800bea6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bea8:	2300      	movs	r3, #0
 800beaa:	9306      	str	r3, [sp, #24]
 800beac:	e7f3      	b.n	800be96 <tcp_write+0x46a>
  if (oversize_used > 0) {
 800beae:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 800beb0:	892b      	ldrh	r3, [r5, #8]
 800beb2:	4423      	add	r3, r4
 800beb4:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 800beb6:	682b      	ldr	r3, [r5, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d1f8      	bne.n	800beae <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800bebc:	896b      	ldrh	r3, [r5, #10]
 800bebe:	6868      	ldr	r0, [r5, #4]
 800bec0:	4622      	mov	r2, r4
 800bec2:	9907      	ldr	r1, [sp, #28]
 800bec4:	4418      	add	r0, r3
 800bec6:	f002 ff82 	bl	800edce <memcpy>
        p->len += oversize_used;
 800beca:	896b      	ldrh	r3, [r5, #10]
 800becc:	4423      	add	r3, r4
 800bece:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1eb      	bne.n	800beae <tcp_write+0x482>
    last_unsent->len += oversize_used;
 800bed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bed8:	8913      	ldrh	r3, [r2, #8]
 800beda:	441c      	add	r4, r3
 800bedc:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 800bede:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bee2:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800bee6:	f1bb 0f00 	cmp.w	fp, #0
 800beea:	f000 80af 	beq.w	800c04c <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 800beee:	4659      	mov	r1, fp
 800bef0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800bef2:	6860      	ldr	r0, [r4, #4]
 800bef4:	f7fc fcda 	bl	80088ac <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800bef8:	8923      	ldrh	r3, [r4, #8]
 800befa:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800befe:	4413      	add	r3, r2
 800bf00:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800bf02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf04:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 800bf08:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800bf0c:	4453      	add	r3, sl
 800bf0e:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 800bf12:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800bf16:	eba3 0a0a 	sub.w	sl, r3, sl
 800bf1a:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800bf1e:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800bf22:	b11e      	cbz	r6, 800bf2c <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bf24:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d045      	beq.n	800bfb8 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bf2c:	2f00      	cmp	r7, #0
 800bf2e:	d06b      	beq.n	800c008 <tcp_write+0x5dc>
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d06a      	beq.n	800c00c <tcp_write+0x5e0>
 800bf36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf38:	f012 0f02 	tst.w	r2, #2
 800bf3c:	d048      	beq.n	800bfd0 <tcp_write+0x5a4>
  return ERR_OK;
 800bf3e:	2000      	movs	r0, #0
 800bf40:	e79a      	b.n	800be78 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 800bf42:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bf46:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800bf4a:	f1b9 0f00 	cmp.w	r9, #0
 800bf4e:	d010      	beq.n	800bf72 <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800bf50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf52:	b11b      	cbz	r3, 800bf5c <tcp_write+0x530>
 800bf54:	46cb      	mov	fp, r9
 800bf56:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bf5a:	e7c8      	b.n	800beee <tcp_write+0x4c2>
 800bf5c:	4b33      	ldr	r3, [pc, #204]	; (800c02c <tcp_write+0x600>)
 800bf5e:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800bf62:	4937      	ldr	r1, [pc, #220]	; (800c040 <tcp_write+0x614>)
 800bf64:	4833      	ldr	r0, [pc, #204]	; (800c034 <tcp_write+0x608>)
 800bf66:	f002 ffdd 	bl	800ef24 <iprintf>
 800bf6a:	46cb      	mov	fp, r9
 800bf6c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bf70:	e7bd      	b.n	800beee <tcp_write+0x4c2>
 800bf72:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bf74:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bf78:	e075      	b.n	800c066 <tcp_write+0x63a>
 800bf7a:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bf7c:	4b2b      	ldr	r3, [pc, #172]	; (800c02c <tcp_write+0x600>)
 800bf7e:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bf82:	4930      	ldr	r1, [pc, #192]	; (800c044 <tcp_write+0x618>)
 800bf84:	482b      	ldr	r0, [pc, #172]	; (800c034 <tcp_write+0x608>)
 800bf86:	f002 ffcd 	bl	800ef24 <iprintf>
 800bf8a:	e076      	b.n	800c07a <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf8c:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800bf8e:	890b      	ldrh	r3, [r1, #8]
 800bf90:	4403      	add	r3, r0
 800bf92:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf94:	6813      	ldr	r3, [r2, #0]
 800bf96:	4611      	mov	r1, r2
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1f7      	bne.n	800bf8c <tcp_write+0x560>
    p->tot_len += extendlen;
 800bf9c:	8913      	ldrh	r3, [r2, #8]
 800bf9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bfa0:	440b      	add	r3, r1
 800bfa2:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800bfa4:	8953      	ldrh	r3, [r2, #10]
 800bfa6:	440b      	add	r3, r1
 800bfa8:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800bfaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfac:	8913      	ldrh	r3, [r2, #8]
 800bfae:	440b      	add	r3, r1
 800bfb0:	8113      	strh	r3, [r2, #8]
 800bfb2:	e7a6      	b.n	800bf02 <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bfb4:	460a      	mov	r2, r1
 800bfb6:	e7f1      	b.n	800bf9c <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bfb8:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1b5      	bne.n	800bf2c <tcp_write+0x500>
 800bfc0:	4b1a      	ldr	r3, [pc, #104]	; (800c02c <tcp_write+0x600>)
 800bfc2:	f240 3212 	movw	r2, #786	; 0x312
 800bfc6:	4920      	ldr	r1, [pc, #128]	; (800c048 <tcp_write+0x61c>)
 800bfc8:	481a      	ldr	r0, [pc, #104]	; (800c034 <tcp_write+0x608>)
 800bfca:	f002 ffab 	bl	800ef24 <iprintf>
 800bfce:	e7ad      	b.n	800bf2c <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bfd0:	899c      	ldrh	r4, [r3, #12]
 800bfd2:	2008      	movs	r0, #8
 800bfd4:	f7fb fc8b 	bl	80078ee <lwip_htons>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	4304      	orrs	r4, r0
 800bfdc:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800bfde:	2000      	movs	r0, #0
 800bfe0:	e74a      	b.n	800be78 <tcp_write+0x44c>
 800bfe2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bfe6:	e725      	b.n	800be34 <tcp_write+0x408>
 800bfe8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bfec:	e722      	b.n	800be34 <tcp_write+0x408>
 800bfee:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bff2:	e71f      	b.n	800be34 <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bff4:	4b0d      	ldr	r3, [pc, #52]	; (800c02c <tcp_write+0x600>)
 800bff6:	f240 3227 	movw	r2, #807	; 0x327
 800bffa:	4913      	ldr	r1, [pc, #76]	; (800c048 <tcp_write+0x61c>)
 800bffc:	480d      	ldr	r0, [pc, #52]	; (800c034 <tcp_write+0x608>)
 800bffe:	f002 ff91 	bl	800ef24 <iprintf>
  return ERR_MEM;
 800c002:	f04f 30ff 	mov.w	r0, #4294967295
 800c006:	e737      	b.n	800be78 <tcp_write+0x44c>
  return ERR_OK;
 800c008:	2000      	movs	r0, #0
 800c00a:	e735      	b.n	800be78 <tcp_write+0x44c>
 800c00c:	2000      	movs	r0, #0
 800c00e:	e733      	b.n	800be78 <tcp_write+0x44c>
  return ERR_MEM;
 800c010:	f04f 30ff 	mov.w	r0, #4294967295
 800c014:	e730      	b.n	800be78 <tcp_write+0x44c>
 800c016:	f04f 30ff 	mov.w	r0, #4294967295
 800c01a:	e72d      	b.n	800be78 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c01c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800c020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c024:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800c028:	e715      	b.n	800be56 <tcp_write+0x42a>
 800c02a:	bf00      	nop
 800c02c:	080125d8 	.word	0x080125d8
 800c030:	08012918 	.word	0x08012918
 800c034:	0800fe60 	.word	0x0800fe60
 800c038:	08012958 	.word	0x08012958
 800c03c:	08012968 	.word	0x08012968
 800c040:	0801297c 	.word	0x0801297c
 800c044:	080129b4 	.word	0x080129b4
 800c048:	080129ec 	.word	0x080129ec
  } else if (extendlen > 0) {
 800c04c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c04e:	b983      	cbnz	r3, 800c072 <tcp_write+0x646>
  if (last_unsent == NULL) {
 800c050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c052:	2b00      	cmp	r3, #0
 800c054:	f47f af55 	bne.w	800bf02 <tcp_write+0x4d6>
    pcb->unsent = queue;
 800c058:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 800c05c:	e754      	b.n	800bf08 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 800c05e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800c062:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 800c066:	2c00      	cmp	r4, #0
 800c068:	d0f2      	beq.n	800c050 <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d084      	beq.n	800bf7a <tcp_write+0x54e>
 800c070:	940b      	str	r4, [sp, #44]	; 0x2c
 800c072:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c074:	685b      	ldr	r3, [r3, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d080      	beq.n	800bf7c <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c07a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07c:	6859      	ldr	r1, [r3, #4]
 800c07e:	680a      	ldr	r2, [r1, #0]
 800c080:	2a00      	cmp	r2, #0
 800c082:	d097      	beq.n	800bfb4 <tcp_write+0x588>
 800c084:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c086:	e782      	b.n	800bf8e <tcp_write+0x562>

0800c088 <tcp_split_unsent_seg>:
{
 800c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c08c:	b083      	sub	sp, #12
 800c08e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c090:	4607      	mov	r7, r0
 800c092:	2800      	cmp	r0, #0
 800c094:	d037      	beq.n	800c106 <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 800c096:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 800c098:	2d00      	cmp	r5, #0
 800c09a:	f000 80b7 	beq.w	800c20c <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 800c09e:	2c00      	cmp	r4, #0
 800c0a0:	d039      	beq.n	800c116 <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 800c0a2:	892b      	ldrh	r3, [r5, #8]
 800c0a4:	42a3      	cmp	r3, r4
 800c0a6:	f240 80b4 	bls.w	800c212 <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c0aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c0ac:	42a3      	cmp	r3, r4
 800c0ae:	d33c      	bcc.n	800c12a <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 800c0b0:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c0b4:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800c0b8:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800c0bc:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c0c0:	ebaa 0604 	sub.w	r6, sl, r4
 800c0c4:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c0c6:	eb06 010b 	add.w	r1, r6, fp
 800c0ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0ce:	b289      	uxth	r1, r1
 800c0d0:	2036      	movs	r0, #54	; 0x36
 800c0d2:	f7fc fabb 	bl	800864c <pbuf_alloc>
  if (p == NULL) {
 800c0d6:	4680      	mov	r8, r0
 800c0d8:	2800      	cmp	r0, #0
 800c0da:	f000 809e 	beq.w	800c21a <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 800c0de:	6868      	ldr	r0, [r5, #4]
 800c0e0:	8903      	ldrh	r3, [r0, #8]
 800c0e2:	892a      	ldrh	r2, [r5, #8]
 800c0e4:	1a9b      	subs	r3, r3, r2
 800c0e6:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c0e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	4632      	mov	r2, r6
 800c0f0:	4459      	add	r1, fp
 800c0f2:	f7fc fcbb 	bl	8008a6c <pbuf_copy_partial>
 800c0f6:	42b0      	cmp	r0, r6
 800c0f8:	d029      	beq.n	800c14e <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	f7fc fa36 	bl	800856c <pbuf_free>
  return ERR_MEM;
 800c100:	f04f 30ff 	mov.w	r0, #4294967295
 800c104:	e086      	b.n	800c214 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c106:	4b46      	ldr	r3, [pc, #280]	; (800c220 <tcp_split_unsent_seg+0x198>)
 800c108:	f240 324b 	movw	r2, #843	; 0x34b
 800c10c:	4945      	ldr	r1, [pc, #276]	; (800c224 <tcp_split_unsent_seg+0x19c>)
 800c10e:	4846      	ldr	r0, [pc, #280]	; (800c228 <tcp_split_unsent_seg+0x1a0>)
 800c110:	f002 ff08 	bl	800ef24 <iprintf>
 800c114:	e7bf      	b.n	800c096 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c116:	4b42      	ldr	r3, [pc, #264]	; (800c220 <tcp_split_unsent_seg+0x198>)
 800c118:	f240 3253 	movw	r2, #851	; 0x353
 800c11c:	4943      	ldr	r1, [pc, #268]	; (800c22c <tcp_split_unsent_seg+0x1a4>)
 800c11e:	4842      	ldr	r0, [pc, #264]	; (800c228 <tcp_split_unsent_seg+0x1a0>)
 800c120:	f002 ff00 	bl	800ef24 <iprintf>
    return ERR_VAL;
 800c124:	f06f 0005 	mvn.w	r0, #5
 800c128:	e074      	b.n	800c214 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c12a:	4b3d      	ldr	r3, [pc, #244]	; (800c220 <tcp_split_unsent_seg+0x198>)
 800c12c:	f240 325b 	movw	r2, #859	; 0x35b
 800c130:	493f      	ldr	r1, [pc, #252]	; (800c230 <tcp_split_unsent_seg+0x1a8>)
 800c132:	483d      	ldr	r0, [pc, #244]	; (800c228 <tcp_split_unsent_seg+0x1a0>)
 800c134:	f002 fef6 	bl	800ef24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c138:	892b      	ldrh	r3, [r5, #8]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1b8      	bne.n	800c0b0 <tcp_split_unsent_seg+0x28>
 800c13e:	4b38      	ldr	r3, [pc, #224]	; (800c220 <tcp_split_unsent_seg+0x198>)
 800c140:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c144:	493b      	ldr	r1, [pc, #236]	; (800c234 <tcp_split_unsent_seg+0x1ac>)
 800c146:	4838      	ldr	r0, [pc, #224]	; (800c228 <tcp_split_unsent_seg+0x1a0>)
 800c148:	f002 feec 	bl	800ef24 <iprintf>
 800c14c:	e7b0      	b.n	800c0b0 <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c14e:	68eb      	ldr	r3, [r5, #12]
 800c150:	8998      	ldrh	r0, [r3, #12]
 800c152:	f7fb fbcc 	bl	80078ee <lwip_htons>
 800c156:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800c158:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c15c:	bf0e      	itee	eq
 800c15e:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c162:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c166:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 800c16a:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 800c16e:	bf1c      	itt	ne
 800c170:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800c174:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c178:	68eb      	ldr	r3, [r5, #12]
 800c17a:	6858      	ldr	r0, [r3, #4]
 800c17c:	f7fb fbbc 	bl	80078f8 <lwip_htonl>
 800c180:	f8cd 9000 	str.w	r9, [sp]
 800c184:	1823      	adds	r3, r4, r0
 800c186:	465a      	mov	r2, fp
 800c188:	4641      	mov	r1, r8
 800c18a:	4638      	mov	r0, r7
 800c18c:	f7ff fb20 	bl	800b7d0 <tcp_create_segment>
  if (seg == NULL) {
 800c190:	4681      	mov	r9, r0
 800c192:	2800      	cmp	r0, #0
 800c194:	d0b1      	beq.n	800c0fa <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c196:	6868      	ldr	r0, [r5, #4]
 800c198:	f7fc fb60 	bl	800885c <pbuf_clen>
 800c19c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c1a0:	1a1b      	subs	r3, r3, r0
 800c1a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c1a6:	6868      	ldr	r0, [r5, #4]
 800c1a8:	eba4 040a 	sub.w	r4, r4, sl
 800c1ac:	b2a4      	uxth	r4, r4
 800c1ae:	8901      	ldrh	r1, [r0, #8]
 800c1b0:	4421      	add	r1, r4
 800c1b2:	b289      	uxth	r1, r1
 800c1b4:	f7fc faf2 	bl	800879c <pbuf_realloc>
  useg->len -= remainder;
 800c1b8:	892b      	ldrh	r3, [r5, #8]
 800c1ba:	441c      	add	r4, r3
 800c1bc:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c1be:	68eb      	ldr	r3, [r5, #12]
 800c1c0:	899c      	ldrh	r4, [r3, #12]
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7fb fb93 	bl	80078ee <lwip_htons>
 800c1c8:	68eb      	ldr	r3, [r5, #12]
 800c1ca:	4304      	orrs	r4, r0
 800c1cc:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c1ce:	6868      	ldr	r0, [r5, #4]
 800c1d0:	f7fc fb44 	bl	800885c <pbuf_clen>
 800c1d4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c1d8:	4418      	add	r0, r3
 800c1da:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c1de:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c1e2:	f7fc fb3b 	bl	800885c <pbuf_clen>
 800c1e6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c1ea:	4418      	add	r0, r3
 800c1ec:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800c1f0:	682b      	ldr	r3, [r5, #0]
 800c1f2:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800c1f6:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800c1fa:	f8d9 3000 	ldr.w	r3, [r9]
 800c1fe:	b10b      	cbz	r3, 800c204 <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 800c200:	2000      	movs	r0, #0
 800c202:	e007      	b.n	800c214 <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 800c204:	2000      	movs	r0, #0
 800c206:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 800c20a:	e003      	b.n	800c214 <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 800c20c:	f04f 30ff 	mov.w	r0, #4294967295
 800c210:	e000      	b.n	800c214 <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 800c212:	2000      	movs	r0, #0
}
 800c214:	b003      	add	sp, #12
 800c216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800c21a:	f04f 30ff 	mov.w	r0, #4294967295
 800c21e:	e7f9      	b.n	800c214 <tcp_split_unsent_seg+0x18c>
 800c220:	080125d8 	.word	0x080125d8
 800c224:	08012a0c 	.word	0x08012a0c
 800c228:	0800fe60 	.word	0x0800fe60
 800c22c:	08012a30 	.word	0x08012a30
 800c230:	08012a54 	.word	0x08012a54
 800c234:	08012a64 	.word	0x08012a64

0800c238 <tcp_enqueue_flags>:
{
 800c238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c23c:	b083      	sub	sp, #12
 800c23e:	4604      	mov	r4, r0
 800c240:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c242:	f011 0703 	ands.w	r7, r1, #3
 800c246:	d048      	beq.n	800c2da <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c248:	2c00      	cmp	r4, #0
 800c24a:	d04e      	beq.n	800c2ea <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800c24c:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c250:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c254:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c258:	4641      	mov	r1, r8
 800c25a:	2036      	movs	r0, #54	; 0x36
 800c25c:	f7fc f9f6 	bl	800864c <pbuf_alloc>
 800c260:	4681      	mov	r9, r0
 800c262:	2800      	cmp	r0, #0
 800c264:	d049      	beq.n	800c2fa <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c266:	8943      	ldrh	r3, [r0, #10]
 800c268:	4543      	cmp	r3, r8
 800c26a:	d34d      	bcc.n	800c308 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c26c:	9600      	str	r6, [sp, #0]
 800c26e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c270:	462a      	mov	r2, r5
 800c272:	4649      	mov	r1, r9
 800c274:	4620      	mov	r0, r4
 800c276:	f7ff faab 	bl	800b7d0 <tcp_create_segment>
 800c27a:	4606      	mov	r6, r0
 800c27c:	2800      	cmp	r0, #0
 800c27e:	d04b      	beq.n	800c318 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c280:	68c3      	ldr	r3, [r0, #12]
 800c282:	f013 0f03 	tst.w	r3, #3
 800c286:	d14e      	bne.n	800c326 <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c288:	8933      	ldrh	r3, [r6, #8]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d153      	bne.n	800c336 <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800c28e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c290:	2b00      	cmp	r3, #0
 800c292:	d058      	beq.n	800c346 <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c294:	461a      	mov	r2, r3
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1fb      	bne.n	800c294 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800c29c:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c2a4:	b117      	cbz	r7, 800c2ac <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800c2a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800c2ac:	f015 0f01 	tst.w	r5, #1
 800c2b0:	d003      	beq.n	800c2ba <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800c2b2:	8b63      	ldrh	r3, [r4, #26]
 800c2b4:	f043 0320 	orr.w	r3, r3, #32
 800c2b8:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c2ba:	6870      	ldr	r0, [r6, #4]
 800c2bc:	f7fc face 	bl	800885c <pbuf_clen>
 800c2c0:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c2c4:	4418      	add	r0, r3
 800c2c6:	b280      	uxth	r0, r0
 800c2c8:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d049      	beq.n	800c364 <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c2d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d039      	beq.n	800c34a <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	e045      	b.n	800c366 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c2da:	4b24      	ldr	r3, [pc, #144]	; (800c36c <tcp_enqueue_flags+0x134>)
 800c2dc:	f240 4211 	movw	r2, #1041	; 0x411
 800c2e0:	4923      	ldr	r1, [pc, #140]	; (800c370 <tcp_enqueue_flags+0x138>)
 800c2e2:	4824      	ldr	r0, [pc, #144]	; (800c374 <tcp_enqueue_flags+0x13c>)
 800c2e4:	f002 fe1e 	bl	800ef24 <iprintf>
 800c2e8:	e7ae      	b.n	800c248 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c2ea:	4b20      	ldr	r3, [pc, #128]	; (800c36c <tcp_enqueue_flags+0x134>)
 800c2ec:	f240 4213 	movw	r2, #1043	; 0x413
 800c2f0:	4921      	ldr	r1, [pc, #132]	; (800c378 <tcp_enqueue_flags+0x140>)
 800c2f2:	4820      	ldr	r0, [pc, #128]	; (800c374 <tcp_enqueue_flags+0x13c>)
 800c2f4:	f002 fe16 	bl	800ef24 <iprintf>
 800c2f8:	e7a8      	b.n	800c24c <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2fa:	8b63      	ldrh	r3, [r4, #26]
 800c2fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c300:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800c302:	f04f 30ff 	mov.w	r0, #4294967295
 800c306:	e02e      	b.n	800c366 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c308:	4b18      	ldr	r3, [pc, #96]	; (800c36c <tcp_enqueue_flags+0x134>)
 800c30a:	f240 4239 	movw	r2, #1081	; 0x439
 800c30e:	491b      	ldr	r1, [pc, #108]	; (800c37c <tcp_enqueue_flags+0x144>)
 800c310:	4818      	ldr	r0, [pc, #96]	; (800c374 <tcp_enqueue_flags+0x13c>)
 800c312:	f002 fe07 	bl	800ef24 <iprintf>
 800c316:	e7a9      	b.n	800c26c <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c318:	8b63      	ldrh	r3, [r4, #26]
 800c31a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c31e:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	e01f      	b.n	800c366 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c326:	4b11      	ldr	r3, [pc, #68]	; (800c36c <tcp_enqueue_flags+0x134>)
 800c328:	f240 4242 	movw	r2, #1090	; 0x442
 800c32c:	4914      	ldr	r1, [pc, #80]	; (800c380 <tcp_enqueue_flags+0x148>)
 800c32e:	4811      	ldr	r0, [pc, #68]	; (800c374 <tcp_enqueue_flags+0x13c>)
 800c330:	f002 fdf8 	bl	800ef24 <iprintf>
 800c334:	e7a8      	b.n	800c288 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c336:	4b0d      	ldr	r3, [pc, #52]	; (800c36c <tcp_enqueue_flags+0x134>)
 800c338:	f240 4243 	movw	r2, #1091	; 0x443
 800c33c:	4911      	ldr	r1, [pc, #68]	; (800c384 <tcp_enqueue_flags+0x14c>)
 800c33e:	480d      	ldr	r0, [pc, #52]	; (800c374 <tcp_enqueue_flags+0x13c>)
 800c340:	f002 fdf0 	bl	800ef24 <iprintf>
 800c344:	e7a3      	b.n	800c28e <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800c346:	66e6      	str	r6, [r4, #108]	; 0x6c
 800c348:	e7a9      	b.n	800c29e <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c34a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c34c:	b10b      	cbz	r3, 800c352 <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800c34e:	2000      	movs	r0, #0
 800c350:	e009      	b.n	800c366 <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c352:	4b06      	ldr	r3, [pc, #24]	; (800c36c <tcp_enqueue_flags+0x134>)
 800c354:	f240 4265 	movw	r2, #1125	; 0x465
 800c358:	490b      	ldr	r1, [pc, #44]	; (800c388 <tcp_enqueue_flags+0x150>)
 800c35a:	4806      	ldr	r0, [pc, #24]	; (800c374 <tcp_enqueue_flags+0x13c>)
 800c35c:	f002 fde2 	bl	800ef24 <iprintf>
  return ERR_OK;
 800c360:	2000      	movs	r0, #0
 800c362:	e000      	b.n	800c366 <tcp_enqueue_flags+0x12e>
 800c364:	2000      	movs	r0, #0
}
 800c366:	b003      	add	sp, #12
 800c368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c36c:	080125d8 	.word	0x080125d8
 800c370:	08012a74 	.word	0x08012a74
 800c374:	0800fe60 	.word	0x0800fe60
 800c378:	08012acc 	.word	0x08012acc
 800c37c:	08012aec 	.word	0x08012aec
 800c380:	08012b28 	.word	0x08012b28
 800c384:	08012b40 	.word	0x08012b40
 800c388:	08012b6c 	.word	0x08012b6c

0800c38c <tcp_send_fin>:
{
 800c38c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c38e:	4605      	mov	r5, r0
 800c390:	b188      	cbz	r0, 800c3b6 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800c392:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c394:	b153      	cbz	r3, 800c3ac <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c396:	461c      	mov	r4, r3
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1fb      	bne.n	800c396 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c39e:	68e3      	ldr	r3, [r4, #12]
 800c3a0:	8998      	ldrh	r0, [r3, #12]
 800c3a2:	f7fb faa4 	bl	80078ee <lwip_htons>
 800c3a6:	f010 0f07 	tst.w	r0, #7
 800c3aa:	d00c      	beq.n	800c3c6 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c3ac:	2101      	movs	r1, #1
 800c3ae:	4628      	mov	r0, r5
 800c3b0:	f7ff ff42 	bl	800c238 <tcp_enqueue_flags>
}
 800c3b4:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c3b6:	4b0b      	ldr	r3, [pc, #44]	; (800c3e4 <tcp_send_fin+0x58>)
 800c3b8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c3bc:	490a      	ldr	r1, [pc, #40]	; (800c3e8 <tcp_send_fin+0x5c>)
 800c3be:	480b      	ldr	r0, [pc, #44]	; (800c3ec <tcp_send_fin+0x60>)
 800c3c0:	f002 fdb0 	bl	800ef24 <iprintf>
 800c3c4:	e7e5      	b.n	800c392 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c3c6:	68e3      	ldr	r3, [r4, #12]
 800c3c8:	899e      	ldrh	r6, [r3, #12]
 800c3ca:	2001      	movs	r0, #1
 800c3cc:	f7fb fa8f 	bl	80078ee <lwip_htons>
 800c3d0:	68e3      	ldr	r3, [r4, #12]
 800c3d2:	4306      	orrs	r6, r0
 800c3d4:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c3d6:	8b6b      	ldrh	r3, [r5, #26]
 800c3d8:	f043 0320 	orr.w	r3, r3, #32
 800c3dc:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800c3de:	2000      	movs	r0, #0
 800c3e0:	e7e8      	b.n	800c3b4 <tcp_send_fin+0x28>
 800c3e2:	bf00      	nop
 800c3e4:	080125d8 	.word	0x080125d8
 800c3e8:	08012b94 	.word	0x08012b94
 800c3ec:	0800fe60 	.word	0x0800fe60

0800c3f0 <tcp_rexmit_rto_prepare>:
{
 800c3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c3f4:	4605      	mov	r5, r0
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	d031      	beq.n	800c45e <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800c3fa:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800c3fc:	2c00      	cmp	r4, #0
 800c3fe:	d036      	beq.n	800c46e <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c400:	6823      	ldr	r3, [r4, #0]
 800c402:	b143      	cbz	r3, 800c416 <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800c404:	4620      	mov	r0, r4
 800c406:	f7ff f949 	bl	800b69c <tcp_output_segment_busy>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d132      	bne.n	800c474 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c40e:	6824      	ldr	r4, [r4, #0]
 800c410:	6823      	ldr	r3, [r4, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d1f6      	bne.n	800c404 <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800c416:	4620      	mov	r0, r4
 800c418:	f7ff f940 	bl	800b69c <tcp_output_segment_busy>
 800c41c:	bb68      	cbnz	r0, 800c47a <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 800c41e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c420:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800c422:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c424:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800c426:	2600      	movs	r6, #0
 800c428:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800c42a:	8b6b      	ldrh	r3, [r5, #26]
 800c42c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c430:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c432:	68e3      	ldr	r3, [r4, #12]
 800c434:	6858      	ldr	r0, [r3, #4]
 800c436:	f7fb fa5f 	bl	80078f8 <lwip_htonl>
 800c43a:	4607      	mov	r7, r0
 800c43c:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800c440:	68e3      	ldr	r3, [r4, #12]
 800c442:	8998      	ldrh	r0, [r3, #12]
 800c444:	f7fb fa53 	bl	80078ee <lwip_htons>
 800c448:	f010 0303 	ands.w	r3, r0, #3
 800c44c:	bf18      	it	ne
 800c44e:	2301      	movne	r3, #1
 800c450:	4447      	add	r7, r8
 800c452:	443b      	add	r3, r7
 800c454:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800c456:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 800c458:	4630      	mov	r0, r6
}
 800c45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c45e:	4b08      	ldr	r3, [pc, #32]	; (800c480 <tcp_rexmit_rto_prepare+0x90>)
 800c460:	f240 6263 	movw	r2, #1635	; 0x663
 800c464:	4907      	ldr	r1, [pc, #28]	; (800c484 <tcp_rexmit_rto_prepare+0x94>)
 800c466:	4808      	ldr	r0, [pc, #32]	; (800c488 <tcp_rexmit_rto_prepare+0x98>)
 800c468:	f002 fd5c 	bl	800ef24 <iprintf>
 800c46c:	e7c5      	b.n	800c3fa <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 800c46e:	f06f 0005 	mvn.w	r0, #5
 800c472:	e7f2      	b.n	800c45a <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800c474:	f06f 0005 	mvn.w	r0, #5
 800c478:	e7ef      	b.n	800c45a <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 800c47a:	f06f 0005 	mvn.w	r0, #5
 800c47e:	e7ec      	b.n	800c45a <tcp_rexmit_rto_prepare+0x6a>
 800c480:	080125d8 	.word	0x080125d8
 800c484:	08012bb0 	.word	0x08012bb0
 800c488:	0800fe60 	.word	0x0800fe60

0800c48c <tcp_rexmit>:
{
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c48e:	4607      	mov	r7, r0
 800c490:	2800      	cmp	r0, #0
 800c492:	d02c      	beq.n	800c4ee <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800c494:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800c496:	2e00      	cmp	r6, #0
 800c498:	d034      	beq.n	800c504 <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7ff f8fe 	bl	800b69c <tcp_output_segment_busy>
 800c4a0:	2800      	cmp	r0, #0
 800c4a2:	d132      	bne.n	800c50a <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800c4a4:	6833      	ldr	r3, [r6, #0]
 800c4a6:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800c4a8:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800c4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c4ae:	b17b      	cbz	r3, 800c4d0 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c4b0:	68db      	ldr	r3, [r3, #12]
 800c4b2:	6858      	ldr	r0, [r3, #4]
 800c4b4:	f7fb fa20 	bl	80078f8 <lwip_htonl>
 800c4b8:	4604      	mov	r4, r0
 800c4ba:	68f3      	ldr	r3, [r6, #12]
 800c4bc:	6858      	ldr	r0, [r3, #4]
 800c4be:	f7fb fa1b 	bl	80078f8 <lwip_htonl>
 800c4c2:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800c4c4:	2c00      	cmp	r4, #0
 800c4c6:	da03      	bge.n	800c4d0 <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 800c4c8:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c4ca:	682b      	ldr	r3, [r5, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1ef      	bne.n	800c4b0 <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 800c4d0:	682b      	ldr	r3, [r5, #0]
 800c4d2:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c4d4:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800c4d6:	6833      	ldr	r3, [r6, #0]
 800c4d8:	b18b      	cbz	r3, 800c4fe <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 800c4da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800c4de:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c4e0:	bf1c      	itt	ne
 800c4e2:	3301      	addne	r3, #1
 800c4e4:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	6378      	str	r0, [r7, #52]	; 0x34
}
 800c4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c4ee:	4b08      	ldr	r3, [pc, #32]	; (800c510 <tcp_rexmit+0x84>)
 800c4f0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c4f4:	4907      	ldr	r1, [pc, #28]	; (800c514 <tcp_rexmit+0x88>)
 800c4f6:	4808      	ldr	r0, [pc, #32]	; (800c518 <tcp_rexmit+0x8c>)
 800c4f8:	f002 fd14 	bl	800ef24 <iprintf>
 800c4fc:	e7ca      	b.n	800c494 <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 800c4fe:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800c502:	e7ea      	b.n	800c4da <tcp_rexmit+0x4e>
    return ERR_VAL;
 800c504:	f06f 0005 	mvn.w	r0, #5
 800c508:	e7f0      	b.n	800c4ec <tcp_rexmit+0x60>
    return ERR_VAL;
 800c50a:	f06f 0005 	mvn.w	r0, #5
 800c50e:	e7ed      	b.n	800c4ec <tcp_rexmit+0x60>
 800c510:	080125d8 	.word	0x080125d8
 800c514:	08012bd4 	.word	0x08012bd4
 800c518:	0800fe60 	.word	0x0800fe60

0800c51c <tcp_rexmit_fast>:
{
 800c51c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c51e:	4604      	mov	r4, r0
 800c520:	b130      	cbz	r0, 800c530 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c522:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c524:	b11b      	cbz	r3, 800c52e <tcp_rexmit_fast+0x12>
 800c526:	8b63      	ldrh	r3, [r4, #26]
 800c528:	f013 0f04 	tst.w	r3, #4
 800c52c:	d008      	beq.n	800c540 <tcp_rexmit_fast+0x24>
}
 800c52e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c530:	4b15      	ldr	r3, [pc, #84]	; (800c588 <tcp_rexmit_fast+0x6c>)
 800c532:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c536:	4915      	ldr	r1, [pc, #84]	; (800c58c <tcp_rexmit_fast+0x70>)
 800c538:	4815      	ldr	r0, [pc, #84]	; (800c590 <tcp_rexmit_fast+0x74>)
 800c53a:	f002 fcf3 	bl	800ef24 <iprintf>
 800c53e:	e7f0      	b.n	800c522 <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff ffa3 	bl	800c48c <tcp_rexmit>
 800c546:	2800      	cmp	r0, #0
 800c548:	d1f1      	bne.n	800c52e <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c54a:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800c54e:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c552:	429a      	cmp	r2, r3
 800c554:	bf28      	it	cs
 800c556:	461a      	movcs	r2, r3
 800c558:	1052      	asrs	r2, r2, #1
 800c55a:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c55e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c560:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800c564:	bf3c      	itt	cc
 800c566:	005a      	lslcc	r2, r3, #1
 800c568:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c56c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c570:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c574:	4413      	add	r3, r2
 800c576:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c57a:	8b63      	ldrh	r3, [r4, #26]
 800c57c:	f043 0304 	orr.w	r3, r3, #4
 800c580:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800c586:	e7d2      	b.n	800c52e <tcp_rexmit_fast+0x12>
 800c588:	080125d8 	.word	0x080125d8
 800c58c:	08012bec 	.word	0x08012bec
 800c590:	0800fe60 	.word	0x0800fe60

0800c594 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c598:	b084      	sub	sp, #16
 800c59a:	4604      	mov	r4, r0
 800c59c:	460e      	mov	r6, r1
 800c59e:	4615      	mov	r5, r2
 800c5a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c5a2:	4698      	mov	r8, r3
 800c5a4:	b32b      	cbz	r3, 800c5f2 <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c5a6:	b367      	cbz	r7, 800c602 <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c5a8:	4630      	mov	r0, r6
 800c5aa:	f7fb f9a5 	bl	80078f8 <lwip_htonl>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	f246 0208 	movw	r2, #24584	; 0x6008
 800c5b4:	9203      	str	r2, [sp, #12]
 800c5b6:	2214      	movs	r2, #20
 800c5b8:	9202      	str	r2, [sp, #8]
 800c5ba:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800c5be:	9201      	str	r2, [sp, #4]
 800c5c0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800c5c4:	9200      	str	r2, [sp, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	f7ff f974 	bl	800b8b8 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c5d0:	4605      	mov	r5, r0
 800c5d2:	b158      	cbz	r0, 800c5ec <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	4601      	mov	r1, r0
 800c5da:	4620      	mov	r0, r4
 800c5dc:	f7ff f876 	bl	800b6cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c5e0:	463b      	mov	r3, r7
 800c5e2:	4642      	mov	r2, r8
 800c5e4:	4629      	mov	r1, r5
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	f7ff f9da 	bl	800b9a0 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c5ec:	b004      	add	sp, #16
 800c5ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c5f2:	4b08      	ldr	r3, [pc, #32]	; (800c614 <tcp_rst+0x80>)
 800c5f4:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c5f8:	4907      	ldr	r1, [pc, #28]	; (800c618 <tcp_rst+0x84>)
 800c5fa:	4808      	ldr	r0, [pc, #32]	; (800c61c <tcp_rst+0x88>)
 800c5fc:	f002 fc92 	bl	800ef24 <iprintf>
 800c600:	e7d1      	b.n	800c5a6 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c602:	4b04      	ldr	r3, [pc, #16]	; (800c614 <tcp_rst+0x80>)
 800c604:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c608:	4905      	ldr	r1, [pc, #20]	; (800c620 <tcp_rst+0x8c>)
 800c60a:	4804      	ldr	r0, [pc, #16]	; (800c61c <tcp_rst+0x88>)
 800c60c:	f002 fc8a 	bl	800ef24 <iprintf>
 800c610:	e7ca      	b.n	800c5a8 <tcp_rst+0x14>
 800c612:	bf00      	nop
 800c614:	080125d8 	.word	0x080125d8
 800c618:	08012c0c 	.word	0x08012c0c
 800c61c:	0800fe60 	.word	0x0800fe60
 800c620:	08012c28 	.word	0x08012c28

0800c624 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c624:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c626:	4604      	mov	r4, r0
 800c628:	b1e0      	cbz	r0, 800c664 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c62a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c62c:	f7fb f964 	bl	80078f8 <lwip_htonl>
 800c630:	4603      	mov	r3, r0
 800c632:	2200      	movs	r2, #0
 800c634:	4611      	mov	r1, r2
 800c636:	4620      	mov	r0, r4
 800c638:	f7ff f988 	bl	800b94c <tcp_output_alloc_header>
  if (p == NULL) {
 800c63c:	4605      	mov	r5, r0
 800c63e:	b1c8      	cbz	r0, 800c674 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c640:	2300      	movs	r3, #0
 800c642:	461a      	mov	r2, r3
 800c644:	4601      	mov	r1, r0
 800c646:	4620      	mov	r0, r4
 800c648:	f7ff f840 	bl	800b6cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c64c:	1d23      	adds	r3, r4, #4
 800c64e:	4622      	mov	r2, r4
 800c650:	4629      	mov	r1, r5
 800c652:	4620      	mov	r0, r4
 800c654:	f7ff f9a4 	bl	800b9a0 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c658:	b198      	cbz	r0, 800c682 <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c65a:	8b63      	ldrh	r3, [r4, #26]
 800c65c:	f043 0303 	orr.w	r3, r3, #3
 800c660:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800c662:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c664:	4b09      	ldr	r3, [pc, #36]	; (800c68c <tcp_send_empty_ack+0x68>)
 800c666:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c66a:	4909      	ldr	r1, [pc, #36]	; (800c690 <tcp_send_empty_ack+0x6c>)
 800c66c:	4809      	ldr	r0, [pc, #36]	; (800c694 <tcp_send_empty_ack+0x70>)
 800c66e:	f002 fc59 	bl	800ef24 <iprintf>
 800c672:	e7da      	b.n	800c62a <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c674:	8b63      	ldrh	r3, [r4, #26]
 800c676:	f043 0303 	orr.w	r3, r3, #3
 800c67a:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800c67c:	f06f 0001 	mvn.w	r0, #1
 800c680:	e7ef      	b.n	800c662 <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c682:	8b63      	ldrh	r3, [r4, #26]
 800c684:	f023 0303 	bic.w	r3, r3, #3
 800c688:	8363      	strh	r3, [r4, #26]
 800c68a:	e7ea      	b.n	800c662 <tcp_send_empty_ack+0x3e>
 800c68c:	080125d8 	.word	0x080125d8
 800c690:	08012c44 	.word	0x08012c44
 800c694:	0800fe60 	.word	0x0800fe60

0800c698 <tcp_output>:
{
 800c698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c69c:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c69e:	4605      	mov	r5, r0
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d03a      	beq.n	800c71a <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c6a4:	7d2b      	ldrb	r3, [r5, #20]
 800c6a6:	2b01      	cmp	r3, #1
 800c6a8:	d03f      	beq.n	800c72a <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 800c6aa:	4b9b      	ldr	r3, [pc, #620]	; (800c918 <tcp_output+0x280>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	42ab      	cmp	r3, r5
 800c6b0:	f000 81b8 	beq.w	800ca24 <tcp_output+0x38c>
  seg = pcb->unsent;
 800c6b4:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800c6b6:	2c00      	cmp	r4, #0
 800c6b8:	d03f      	beq.n	800c73a <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c6ba:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800c6be:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c6c2:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c6c6:	7a28      	ldrb	r0, [r5, #8]
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	d148      	bne.n	800c75e <tcp_output+0xc6>
    return ip_route(src, dst);
 800c6cc:	4650      	mov	r0, sl
 800c6ce:	f001 fabb 	bl	800dc48 <ip4_route>
 800c6d2:	4681      	mov	r9, r0
  if (netif == NULL) {
 800c6d4:	f1b9 0f00 	cmp.w	r9, #0
 800c6d8:	f000 81a6 	beq.w	800ca28 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	b913      	cbnz	r3, 800c6e6 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c6e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c6e4:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c6e6:	42b7      	cmp	r7, r6
 800c6e8:	bf28      	it	cs
 800c6ea:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c6ec:	68e3      	ldr	r3, [r4, #12]
 800c6ee:	6858      	ldr	r0, [r3, #4]
 800c6f0:	f7fb f902 	bl	80078f8 <lwip_htonl>
 800c6f4:	8923      	ldrh	r3, [r4, #8]
 800c6f6:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800c6f8:	1a9b      	subs	r3, r3, r2
 800c6fa:	4403      	add	r3, r0
 800c6fc:	42bb      	cmp	r3, r7
 800c6fe:	d941      	bls.n	800c784 <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c700:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800c704:	42bb      	cmp	r3, r7
 800c706:	d02e      	beq.n	800c766 <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 800c708:	8b6b      	ldrh	r3, [r5, #26]
 800c70a:	f013 0f02 	tst.w	r3, #2
 800c70e:	d018      	beq.n	800c742 <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 800c710:	4628      	mov	r0, r5
 800c712:	f7ff ff87 	bl	800c624 <tcp_send_empty_ack>
 800c716:	4603      	mov	r3, r0
 800c718:	e018      	b.n	800c74c <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c71a:	4b80      	ldr	r3, [pc, #512]	; (800c91c <tcp_output+0x284>)
 800c71c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c720:	497f      	ldr	r1, [pc, #508]	; (800c920 <tcp_output+0x288>)
 800c722:	4880      	ldr	r0, [pc, #512]	; (800c924 <tcp_output+0x28c>)
 800c724:	f002 fbfe 	bl	800ef24 <iprintf>
 800c728:	e7bc      	b.n	800c6a4 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c72a:	4b7c      	ldr	r3, [pc, #496]	; (800c91c <tcp_output+0x284>)
 800c72c:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c730:	497d      	ldr	r1, [pc, #500]	; (800c928 <tcp_output+0x290>)
 800c732:	487c      	ldr	r0, [pc, #496]	; (800c924 <tcp_output+0x28c>)
 800c734:	f002 fbf6 	bl	800ef24 <iprintf>
 800c738:	e7b7      	b.n	800c6aa <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800c73a:	8b6b      	ldrh	r3, [r5, #26]
 800c73c:	f013 0f02 	tst.w	r3, #2
 800c740:	d108      	bne.n	800c754 <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c742:	8b6b      	ldrh	r3, [r5, #26]
 800c744:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c748:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	b005      	add	sp, #20
 800c750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800c754:	4628      	mov	r0, r5
 800c756:	f7ff ff65 	bl	800c624 <tcp_send_empty_ack>
 800c75a:	4603      	mov	r3, r0
 800c75c:	e7f6      	b.n	800c74c <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 800c75e:	f7fb fe11 	bl	8008384 <netif_get_by_index>
 800c762:	4681      	mov	r9, r0
 800c764:	e7b6      	b.n	800c6d4 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c766:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d1cd      	bne.n	800c708 <tcp_output+0x70>
 800c76c:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1c9      	bne.n	800c708 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800c774:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c778:	2201      	movs	r2, #1
 800c77a:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800c77e:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800c782:	e7c1      	b.n	800c708 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800c78a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	f000 8147 	beq.w	800ca20 <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800c792:	4698      	mov	r8, r3
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d1fb      	bne.n	800c792 <tcp_output+0xfa>
 800c79a:	e0d4      	b.n	800c946 <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 800c79c:	4b5f      	ldr	r3, [pc, #380]	; (800c91c <tcp_output+0x284>)
 800c79e:	f240 5236 	movw	r2, #1334	; 0x536
 800c7a2:	4962      	ldr	r1, [pc, #392]	; (800c92c <tcp_output+0x294>)
 800c7a4:	485f      	ldr	r0, [pc, #380]	; (800c924 <tcp_output+0x28c>)
 800c7a6:	f002 fbbd 	bl	800ef24 <iprintf>
 800c7aa:	e0df      	b.n	800c96c <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c7ac:	8911      	ldrh	r1, [r2, #8]
 800c7ae:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800c7b0:	4291      	cmp	r1, r2
 800c7b2:	f080 80e9 	bcs.w	800c988 <tcp_output+0x2f0>
 800c7b6:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800c7ba:	2a00      	cmp	r2, #0
 800c7bc:	f000 80e4 	beq.w	800c988 <tcp_output+0x2f0>
 800c7c0:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800c7c4:	2a08      	cmp	r2, #8
 800c7c6:	f200 80df 	bhi.w	800c988 <tcp_output+0x2f0>
 800c7ca:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c7ce:	f040 80db 	bne.w	800c988 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 800c7d2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1b4      	bne.n	800c742 <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800c7de:	e7b0      	b.n	800c742 <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c7e0:	68e3      	ldr	r3, [r4, #12]
 800c7e2:	899e      	ldrh	r6, [r3, #12]
 800c7e4:	2010      	movs	r0, #16
 800c7e6:	f7fb f882 	bl	80078ee <lwip_htons>
 800c7ea:	68e3      	ldr	r3, [r4, #12]
 800c7ec:	4330      	orrs	r0, r6
 800c7ee:	8198      	strh	r0, [r3, #12]
 800c7f0:	e0ce      	b.n	800c990 <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c7f2:	68e6      	ldr	r6, [r4, #12]
 800c7f4:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c7f6:	f7fb f87f 	bl	80078f8 <lwip_htonl>
 800c7fa:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c7fc:	68e6      	ldr	r6, [r4, #12]
 800c7fe:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800c800:	f7fb f875 	bl	80078ee <lwip_htons>
 800c804:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c806:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800c808:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c80a:	4413      	add	r3, r2
 800c80c:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c80e:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c810:	7aa3      	ldrb	r3, [r4, #10]
 800c812:	f013 0f01 	tst.w	r3, #1
 800c816:	d140      	bne.n	800c89a <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c818:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 800c81a:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800c81e:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c820:	bfbc      	itt	lt
 800c822:	2300      	movlt	r3, #0
 800c824:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 800c826:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d043      	beq.n	800c8b4 <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c82c:	6862      	ldr	r2, [r4, #4]
 800c82e:	68e3      	ldr	r3, [r4, #12]
 800c830:	6851      	ldr	r1, [r2, #4]
 800c832:	1a5b      	subs	r3, r3, r1
 800c834:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c836:	8951      	ldrh	r1, [r2, #10]
 800c838:	1ac9      	subs	r1, r1, r3
 800c83a:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800c83c:	6861      	ldr	r1, [r4, #4]
 800c83e:	890a      	ldrh	r2, [r1, #8]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c844:	6862      	ldr	r2, [r4, #4]
 800c846:	68e3      	ldr	r3, [r4, #12]
 800c848:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800c84a:	2200      	movs	r2, #0
 800c84c:	741a      	strb	r2, [r3, #16]
 800c84e:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c850:	7aa3      	ldrb	r3, [r4, #10]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	f003 0304 	and.w	r3, r3, #4
 800c858:	3314      	adds	r3, #20
 800c85a:	68e2      	ldr	r2, [r4, #12]
 800c85c:	4413      	add	r3, r2
 800c85e:	429e      	cmp	r6, r3
 800c860:	d006      	beq.n	800c870 <tcp_output+0x1d8>
 800c862:	4b2e      	ldr	r3, [pc, #184]	; (800c91c <tcp_output+0x284>)
 800c864:	f240 621c 	movw	r2, #1564	; 0x61c
 800c868:	4931      	ldr	r1, [pc, #196]	; (800c930 <tcp_output+0x298>)
 800c86a:	482e      	ldr	r0, [pc, #184]	; (800c924 <tcp_output+0x28c>)
 800c86c:	f002 fb5a 	bl	800ef24 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c870:	6860      	ldr	r0, [r4, #4]
 800c872:	f8cd 9008 	str.w	r9, [sp, #8]
 800c876:	2306      	movs	r3, #6
 800c878:	9301      	str	r3, [sp, #4]
 800c87a:	7aab      	ldrb	r3, [r5, #10]
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	7aeb      	ldrb	r3, [r5, #11]
 800c880:	4652      	mov	r2, sl
 800c882:	4629      	mov	r1, r5
 800c884:	f001 fb6c 	bl	800df60 <ip4_output_if>
    if (err != ERR_OK) {
 800c888:	4603      	mov	r3, r0
 800c88a:	2800      	cmp	r0, #0
 800c88c:	f000 8086 	beq.w	800c99c <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c890:	8b6a      	ldrh	r2, [r5, #26]
 800c892:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c896:	836a      	strh	r2, [r5, #26]
      return err;
 800c898:	e758      	b.n	800c74c <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c89a:	4652      	mov	r2, sl
 800c89c:	4649      	mov	r1, r9
 800c89e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c8a2:	f7fc fbf1 	bl	8009088 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c8a6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c8aa:	f7fb f825 	bl	80078f8 <lwip_htonl>
 800c8ae:	6170      	str	r0, [r6, #20]
    opts += 1;
 800c8b0:	3618      	adds	r6, #24
 800c8b2:	e7b2      	b.n	800c81a <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 800c8b4:	4b1f      	ldr	r3, [pc, #124]	; (800c934 <tcp_output+0x29c>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c8ba:	68e3      	ldr	r3, [r4, #12]
 800c8bc:	6858      	ldr	r0, [r3, #4]
 800c8be:	f7fb f81b 	bl	80078f8 <lwip_htonl>
 800c8c2:	63a8      	str	r0, [r5, #56]	; 0x38
 800c8c4:	e7b2      	b.n	800c82c <tcp_output+0x194>
        pcb->unacked = seg;
 800c8c6:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 800c8c8:	46a0      	mov	r8, r4
 800c8ca:	e038      	b.n	800c93e <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c8cc:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 800c8d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c8d2:	b1d3      	cbz	r3, 800c90a <tcp_output+0x272>
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	465c      	mov	r4, fp
 800c8d8:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c8da:	68db      	ldr	r3, [r3, #12]
 800c8dc:	6858      	ldr	r0, [r3, #4]
 800c8de:	f7fb f80b 	bl	80078f8 <lwip_htonl>
 800c8e2:	4606      	mov	r6, r0
 800c8e4:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c8e8:	6858      	ldr	r0, [r3, #4]
 800c8ea:	f7fb f805 	bl	80078f8 <lwip_htonl>
 800c8ee:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 800c8f0:	2e00      	cmp	r6, #0
 800c8f2:	da07      	bge.n	800c904 <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 800c8f4:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d1ee      	bne.n	800c8da <tcp_output+0x242>
 800c8fc:	465b      	mov	r3, fp
 800c8fe:	46a3      	mov	fp, r4
 800c900:	461c      	mov	r4, r3
 800c902:	e002      	b.n	800c90a <tcp_output+0x272>
 800c904:	465b      	mov	r3, fp
 800c906:	46a3      	mov	fp, r4
 800c908:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 800c90a:	f8db 3000 	ldr.w	r3, [fp]
 800c90e:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800c910:	f8cb 4000 	str.w	r4, [fp]
 800c914:	e013      	b.n	800c93e <tcp_output+0x2a6>
 800c916:	bf00      	nop
 800c918:	20010810 	.word	0x20010810
 800c91c:	080125d8 	.word	0x080125d8
 800c920:	08012c64 	.word	0x08012c64
 800c924:	0800fe60 	.word	0x0800fe60
 800c928:	08012c7c 	.word	0x08012c7c
 800c92c:	08012ca4 	.word	0x08012ca4
 800c930:	0801265c 	.word	0x0801265c
 800c934:	200107dc 	.word	0x200107dc
      tcp_seg_free(seg);
 800c938:	4620      	mov	r0, r4
 800c93a:	f7fc fad1 	bl	8008ee0 <tcp_seg_free>
    seg = pcb->unsent;
 800c93e:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 800c940:	2c00      	cmp	r4, #0
 800c942:	f43f af49 	beq.w	800c7d8 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c946:	68e3      	ldr	r3, [r4, #12]
 800c948:	6858      	ldr	r0, [r3, #4]
 800c94a:	f7fa ffd5 	bl	80078f8 <lwip_htonl>
 800c94e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c950:	1ac0      	subs	r0, r0, r3
 800c952:	8923      	ldrh	r3, [r4, #8]
 800c954:	4418      	add	r0, r3
  while (seg != NULL &&
 800c956:	42b8      	cmp	r0, r7
 800c958:	f63f af3b 	bhi.w	800c7d2 <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 800c95c:	68e3      	ldr	r3, [r4, #12]
 800c95e:	8998      	ldrh	r0, [r3, #12]
 800c960:	f7fa ffc5 	bl	80078ee <lwip_htons>
 800c964:	f010 0f04 	tst.w	r0, #4
 800c968:	f47f af18 	bne.w	800c79c <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c96c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c96e:	b15b      	cbz	r3, 800c988 <tcp_output+0x2f0>
 800c970:	8b6b      	ldrh	r3, [r5, #26]
 800c972:	f013 0f44 	tst.w	r3, #68	; 0x44
 800c976:	d107      	bne.n	800c988 <tcp_output+0x2f0>
 800c978:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800c97a:	2a00      	cmp	r2, #0
 800c97c:	f43f af1b 	beq.w	800c7b6 <tcp_output+0x11e>
 800c980:	6811      	ldr	r1, [r2, #0]
 800c982:	2900      	cmp	r1, #0
 800c984:	f43f af12 	beq.w	800c7ac <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 800c988:	7d2b      	ldrb	r3, [r5, #20]
 800c98a:	2b02      	cmp	r3, #2
 800c98c:	f47f af28 	bne.w	800c7e0 <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 800c990:	4620      	mov	r0, r4
 800c992:	f7fe fe83 	bl	800b69c <tcp_output_segment_busy>
 800c996:	2800      	cmp	r0, #0
 800c998:	f43f af2b 	beq.w	800c7f2 <tcp_output+0x15a>
    pcb->unsent = seg->next;
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c9a0:	7d2b      	ldrb	r3, [r5, #20]
 800c9a2:	2b02      	cmp	r3, #2
 800c9a4:	d003      	beq.n	800c9ae <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c9a6:	8b6b      	ldrh	r3, [r5, #26]
 800c9a8:	f023 0303 	bic.w	r3, r3, #3
 800c9ac:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c9ae:	68e3      	ldr	r3, [r4, #12]
 800c9b0:	6858      	ldr	r0, [r3, #4]
 800c9b2:	f7fa ffa1 	bl	80078f8 <lwip_htonl>
 800c9b6:	4606      	mov	r6, r0
 800c9b8:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 800c9bc:	68e3      	ldr	r3, [r4, #12]
 800c9be:	8998      	ldrh	r0, [r3, #12]
 800c9c0:	f7fa ff95 	bl	80078ee <lwip_htons>
 800c9c4:	f010 0003 	ands.w	r0, r0, #3
 800c9c8:	bf18      	it	ne
 800c9ca:	2001      	movne	r0, #1
 800c9cc:	445e      	add	r6, fp
 800c9ce:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c9d0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c9d2:	1a1b      	subs	r3, r3, r0
 800c9d4:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800c9d6:	bfb8      	it	lt
 800c9d8:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c9da:	8926      	ldrh	r6, [r4, #8]
 800c9dc:	68e3      	ldr	r3, [r4, #12]
 800c9de:	8998      	ldrh	r0, [r3, #12]
 800c9e0:	f7fa ff85 	bl	80078ee <lwip_htons>
 800c9e4:	f010 0003 	ands.w	r0, r0, #3
 800c9e8:	bf18      	it	ne
 800c9ea:	2001      	movne	r0, #1
 800c9ec:	42f0      	cmn	r0, r6
 800c9ee:	d0a3      	beq.n	800c938 <tcp_output+0x2a0>
      seg->next = NULL;
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800c9f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f43f af65 	beq.w	800c8c6 <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c9fc:	68e3      	ldr	r3, [r4, #12]
 800c9fe:	6858      	ldr	r0, [r3, #4]
 800ca00:	f7fa ff7a 	bl	80078f8 <lwip_htonl>
 800ca04:	4606      	mov	r6, r0
 800ca06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca0a:	6858      	ldr	r0, [r3, #4]
 800ca0c:	f7fa ff74 	bl	80078f8 <lwip_htonl>
 800ca10:	1a36      	subs	r6, r6, r0
 800ca12:	2e00      	cmp	r6, #0
 800ca14:	f6ff af5a 	blt.w	800c8cc <tcp_output+0x234>
          useg->next = seg;
 800ca18:	f8c8 4000 	str.w	r4, [r8]
 800ca1c:	46a0      	mov	r8, r4
 800ca1e:	e78e      	b.n	800c93e <tcp_output+0x2a6>
  useg = pcb->unacked;
 800ca20:	4698      	mov	r8, r3
  while (seg != NULL &&
 800ca22:	e790      	b.n	800c946 <tcp_output+0x2ae>
    return ERR_OK;
 800ca24:	2300      	movs	r3, #0
 800ca26:	e691      	b.n	800c74c <tcp_output+0xb4>
    return ERR_RTE;
 800ca28:	f06f 0303 	mvn.w	r3, #3
 800ca2c:	e68e      	b.n	800c74c <tcp_output+0xb4>
 800ca2e:	bf00      	nop

0800ca30 <tcp_rexmit_rto_commit>:
{
 800ca30:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ca32:	4604      	mov	r4, r0
 800ca34:	b150      	cbz	r0, 800ca4c <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800ca36:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800ca3a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800ca3c:	bf1c      	itt	ne
 800ca3e:	3301      	addne	r3, #1
 800ca40:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff fe27 	bl	800c698 <tcp_output>
}
 800ca4a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800ca4c:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <tcp_rexmit_rto_commit+0x2c>)
 800ca4e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ca52:	4903      	ldr	r1, [pc, #12]	; (800ca60 <tcp_rexmit_rto_commit+0x30>)
 800ca54:	4803      	ldr	r0, [pc, #12]	; (800ca64 <tcp_rexmit_rto_commit+0x34>)
 800ca56:	f002 fa65 	bl	800ef24 <iprintf>
 800ca5a:	e7ec      	b.n	800ca36 <tcp_rexmit_rto_commit+0x6>
 800ca5c:	080125d8 	.word	0x080125d8
 800ca60:	08012cbc 	.word	0x08012cbc
 800ca64:	0800fe60 	.word	0x0800fe60

0800ca68 <tcp_rexmit_rto>:
{
 800ca68:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	b120      	cbz	r0, 800ca78 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ca6e:	4620      	mov	r0, r4
 800ca70:	f7ff fcbe 	bl	800c3f0 <tcp_rexmit_rto_prepare>
 800ca74:	b140      	cbz	r0, 800ca88 <tcp_rexmit_rto+0x20>
}
 800ca76:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ca78:	4b05      	ldr	r3, [pc, #20]	; (800ca90 <tcp_rexmit_rto+0x28>)
 800ca7a:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ca7e:	4905      	ldr	r1, [pc, #20]	; (800ca94 <tcp_rexmit_rto+0x2c>)
 800ca80:	4805      	ldr	r0, [pc, #20]	; (800ca98 <tcp_rexmit_rto+0x30>)
 800ca82:	f002 fa4f 	bl	800ef24 <iprintf>
 800ca86:	e7f2      	b.n	800ca6e <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800ca88:	4620      	mov	r0, r4
 800ca8a:	f7ff ffd1 	bl	800ca30 <tcp_rexmit_rto_commit>
}
 800ca8e:	e7f2      	b.n	800ca76 <tcp_rexmit_rto+0xe>
 800ca90:	080125d8 	.word	0x080125d8
 800ca94:	08012ce0 	.word	0x08012ce0
 800ca98:	0800fe60 	.word	0x0800fe60

0800ca9c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ca9c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ca9e:	4604      	mov	r4, r0
 800caa0:	b1c0      	cbz	r0, 800cad4 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800caa2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800caa4:	3801      	subs	r0, #1
 800caa6:	f7fa ff27 	bl	80078f8 <lwip_htonl>
 800caaa:	4603      	mov	r3, r0
 800caac:	2200      	movs	r2, #0
 800caae:	4611      	mov	r1, r2
 800cab0:	4620      	mov	r0, r4
 800cab2:	f7fe ff4b 	bl	800b94c <tcp_output_alloc_header>
  if (p == NULL) {
 800cab6:	4605      	mov	r5, r0
 800cab8:	b1a0      	cbz	r0, 800cae4 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800caba:	2300      	movs	r3, #0
 800cabc:	461a      	mov	r2, r3
 800cabe:	4601      	mov	r1, r0
 800cac0:	4620      	mov	r0, r4
 800cac2:	f7fe fe03 	bl	800b6cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cac6:	1d23      	adds	r3, r4, #4
 800cac8:	4622      	mov	r2, r4
 800caca:	4629      	mov	r1, r5
 800cacc:	4620      	mov	r0, r4
 800cace:	f7fe ff67 	bl	800b9a0 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cad2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cad4:	4b05      	ldr	r3, [pc, #20]	; (800caec <tcp_keepalive+0x50>)
 800cad6:	f640 0224 	movw	r2, #2084	; 0x824
 800cada:	4905      	ldr	r1, [pc, #20]	; (800caf0 <tcp_keepalive+0x54>)
 800cadc:	4805      	ldr	r0, [pc, #20]	; (800caf4 <tcp_keepalive+0x58>)
 800cade:	f002 fa21 	bl	800ef24 <iprintf>
 800cae2:	e7de      	b.n	800caa2 <tcp_keepalive+0x6>
    return ERR_MEM;
 800cae4:	f04f 30ff 	mov.w	r0, #4294967295
 800cae8:	e7f3      	b.n	800cad2 <tcp_keepalive+0x36>
 800caea:	bf00      	nop
 800caec:	080125d8 	.word	0x080125d8
 800caf0:	08012cfc 	.word	0x08012cfc
 800caf4:	0800fe60 	.word	0x0800fe60

0800caf8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800caf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cafc:	4604      	mov	r4, r0
 800cafe:	2800      	cmp	r0, #0
 800cb00:	d03e      	beq.n	800cb80 <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cb02:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800cb04:	2d00      	cmp	r5, #0
 800cb06:	d043      	beq.n	800cb90 <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cb08:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800cb0c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800cb0e:	bf1c      	itt	ne
 800cb10:	3301      	addne	r3, #1
 800cb12:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cb16:	68eb      	ldr	r3, [r5, #12]
 800cb18:	8998      	ldrh	r0, [r3, #12]
 800cb1a:	f7fa fee8 	bl	80078ee <lwip_htons>
 800cb1e:	f010 0f01 	tst.w	r0, #1
 800cb22:	d002      	beq.n	800cb2a <tcp_zero_window_probe+0x32>
 800cb24:	892b      	ldrh	r3, [r5, #8]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d03a      	beq.n	800cba0 <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cb2a:	68eb      	ldr	r3, [r5, #12]
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	2100      	movs	r1, #0
 800cb32:	4620      	mov	r0, r4
 800cb34:	f7fe ff0a 	bl	800b94c <tcp_output_alloc_header>
  if (p == NULL) {
 800cb38:	4606      	mov	r6, r0
 800cb3a:	b370      	cbz	r0, 800cb9a <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cb3c:	6868      	ldr	r0, [r5, #4]
 800cb3e:	8903      	ldrh	r3, [r0, #8]
 800cb40:	892a      	ldrh	r2, [r5, #8]
 800cb42:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800cb44:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	2201      	movs	r2, #1
 800cb4a:	3114      	adds	r1, #20
 800cb4c:	f7fb ff8e 	bl	8008a6c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cb50:	68eb      	ldr	r3, [r5, #12]
 800cb52:	6858      	ldr	r0, [r3, #4]
 800cb54:	f7fa fed0 	bl	80078f8 <lwip_htonl>
 800cb58:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cb5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cb5c:	1a1b      	subs	r3, r3, r0
 800cb5e:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800cb60:	bfb8      	it	lt
 800cb62:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cb64:	2300      	movs	r3, #0
 800cb66:	461a      	mov	r2, r3
 800cb68:	4631      	mov	r1, r6
 800cb6a:	4620      	mov	r0, r4
 800cb6c:	f7fe fdae 	bl	800b6cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb70:	1d23      	adds	r3, r4, #4
 800cb72:	4622      	mov	r2, r4
 800cb74:	4631      	mov	r1, r6
 800cb76:	4620      	mov	r0, r4
 800cb78:	f7fe ff12 	bl	800b9a0 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cb80:	4b13      	ldr	r3, [pc, #76]	; (800cbd0 <tcp_zero_window_probe+0xd8>)
 800cb82:	f640 024f 	movw	r2, #2127	; 0x84f
 800cb86:	4913      	ldr	r1, [pc, #76]	; (800cbd4 <tcp_zero_window_probe+0xdc>)
 800cb88:	4813      	ldr	r0, [pc, #76]	; (800cbd8 <tcp_zero_window_probe+0xe0>)
 800cb8a:	f002 f9cb 	bl	800ef24 <iprintf>
 800cb8e:	e7b8      	b.n	800cb02 <tcp_zero_window_probe+0xa>
    return ERR_OK;
 800cb90:	2000      	movs	r0, #0
 800cb92:	e7f3      	b.n	800cb7c <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	e7f0      	b.n	800cb7c <tcp_zero_window_probe+0x84>
 800cb9a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9e:	e7ed      	b.n	800cb7c <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cba0:	68eb      	ldr	r3, [r5, #12]
 800cba2:	685b      	ldr	r3, [r3, #4]
 800cba4:	2200      	movs	r2, #0
 800cba6:	4611      	mov	r1, r2
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f7fe fecf 	bl	800b94c <tcp_output_alloc_header>
  if (p == NULL) {
 800cbae:	4606      	mov	r6, r0
 800cbb0:	2800      	cmp	r0, #0
 800cbb2:	d0ef      	beq.n	800cb94 <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 800cbb4:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cbb8:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800cbbc:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800cbc0:	2011      	movs	r0, #17
 800cbc2:	f7fa fe94 	bl	80078ee <lwip_htons>
 800cbc6:	4307      	orrs	r7, r0
 800cbc8:	f8a8 700c 	strh.w	r7, [r8, #12]
 800cbcc:	e7c0      	b.n	800cb50 <tcp_zero_window_probe+0x58>
 800cbce:	bf00      	nop
 800cbd0:	080125d8 	.word	0x080125d8
 800cbd4:	08012d18 	.word	0x08012d18
 800cbd8:	0800fe60 	.word	0x0800fe60

0800cbdc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbde:	4604      	mov	r4, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cbe4:	200a      	movs	r0, #10
 800cbe6:	f7fb f9cf 	bl	8007f88 <memp_malloc>
  if (timeout == NULL) {
 800cbea:	b180      	cbz	r0, 800cc0e <sys_timeout_abs+0x32>
 800cbec:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800cbee:	2300      	movs	r3, #0
 800cbf0:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800cbf2:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800cbf4:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800cbf6:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cbf8:	4b0f      	ldr	r3, [pc, #60]	; (800cc38 <sys_timeout_abs+0x5c>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	b173      	cbz	r3, 800cc1c <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cbfe:	685a      	ldr	r2, [r3, #4]
 800cc00:	1aa2      	subs	r2, r4, r2
 800cc02:	2a00      	cmp	r2, #0
 800cc04:	da0d      	bge.n	800cc22 <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 800cc06:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800cc08:	4b0b      	ldr	r3, [pc, #44]	; (800cc38 <sys_timeout_abs+0x5c>)
 800cc0a:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cc0e:	4b0b      	ldr	r3, [pc, #44]	; (800cc3c <sys_timeout_abs+0x60>)
 800cc10:	22be      	movs	r2, #190	; 0xbe
 800cc12:	490b      	ldr	r1, [pc, #44]	; (800cc40 <sys_timeout_abs+0x64>)
 800cc14:	480b      	ldr	r0, [pc, #44]	; (800cc44 <sys_timeout_abs+0x68>)
 800cc16:	f002 f985 	bl	800ef24 <iprintf>
    return;
 800cc1a:	e7f7      	b.n	800cc0c <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800cc1c:	4b06      	ldr	r3, [pc, #24]	; (800cc38 <sys_timeout_abs+0x5c>)
 800cc1e:	6018      	str	r0, [r3, #0]
    return;
 800cc20:	e7f4      	b.n	800cc0c <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cc22:	4619      	mov	r1, r3
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	b11b      	cbz	r3, 800cc30 <sys_timeout_abs+0x54>
 800cc28:	685a      	ldr	r2, [r3, #4]
 800cc2a:	1aa2      	subs	r2, r4, r2
 800cc2c:	2a00      	cmp	r2, #0
 800cc2e:	daf8      	bge.n	800cc22 <sys_timeout_abs+0x46>
        timeout->next = t->next;
 800cc30:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800cc32:	600d      	str	r5, [r1, #0]
        break;
 800cc34:	e7ea      	b.n	800cc0c <sys_timeout_abs+0x30>
 800cc36:	bf00      	nop
 800cc38:	2001082c 	.word	0x2001082c
 800cc3c:	08012d3c 	.word	0x08012d3c
 800cc40:	08012d70 	.word	0x08012d70
 800cc44:	0800fe60 	.word	0x0800fe60

0800cc48 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cc4c:	6843      	ldr	r3, [r0, #4]
 800cc4e:	4798      	blx	r3

  now = sys_now();
 800cc50:	f7f6 fbbe 	bl	80033d0 <sys_now>
 800cc54:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cc56:	6825      	ldr	r5, [r4, #0]
 800cc58:	4b06      	ldr	r3, [pc, #24]	; (800cc74 <lwip_cyclic_timer+0x2c>)
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cc5e:	eba0 030c 	sub.w	r3, r0, ip
 800cc62:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cc64:	4622      	mov	r2, r4
 800cc66:	4904      	ldr	r1, [pc, #16]	; (800cc78 <lwip_cyclic_timer+0x30>)
 800cc68:	bfb8      	it	lt
 800cc6a:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cc6e:	f7ff ffb5 	bl	800cbdc <sys_timeout_abs>
#endif
  }
}
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	20010828 	.word	0x20010828
 800cc78:	0800cc49 	.word	0x0800cc49

0800cc7c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cc7c:	b570      	push	{r4, r5, r6, lr}
 800cc7e:	4604      	mov	r4, r0
 800cc80:	460d      	mov	r5, r1
 800cc82:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cc84:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800cc88:	d207      	bcs.n	800cc9a <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cc8a:	f7f6 fba1 	bl	80033d0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cc8e:	4632      	mov	r2, r6
 800cc90:	4629      	mov	r1, r5
 800cc92:	4420      	add	r0, r4
 800cc94:	f7ff ffa2 	bl	800cbdc <sys_timeout_abs>
#endif
}
 800cc98:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cc9a:	4b04      	ldr	r3, [pc, #16]	; (800ccac <sys_timeout+0x30>)
 800cc9c:	f240 1229 	movw	r2, #297	; 0x129
 800cca0:	4903      	ldr	r1, [pc, #12]	; (800ccb0 <sys_timeout+0x34>)
 800cca2:	4804      	ldr	r0, [pc, #16]	; (800ccb4 <sys_timeout+0x38>)
 800cca4:	f002 f93e 	bl	800ef24 <iprintf>
 800cca8:	e7ef      	b.n	800cc8a <sys_timeout+0xe>
 800ccaa:	bf00      	nop
 800ccac:	08012d3c 	.word	0x08012d3c
 800ccb0:	08012db0 	.word	0x08012db0
 800ccb4:	0800fe60 	.word	0x0800fe60

0800ccb8 <tcp_timer_needed>:
{
 800ccb8:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ccba:	4b0a      	ldr	r3, [pc, #40]	; (800cce4 <tcp_timer_needed+0x2c>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	b953      	cbnz	r3, 800ccd6 <tcp_timer_needed+0x1e>
 800ccc0:	4b09      	ldr	r3, [pc, #36]	; (800cce8 <tcp_timer_needed+0x30>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	b143      	cbz	r3, 800ccd8 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800ccc6:	4b07      	ldr	r3, [pc, #28]	; (800cce4 <tcp_timer_needed+0x2c>)
 800ccc8:	2201      	movs	r2, #1
 800ccca:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cccc:	2200      	movs	r2, #0
 800ccce:	4907      	ldr	r1, [pc, #28]	; (800ccec <tcp_timer_needed+0x34>)
 800ccd0:	20fa      	movs	r0, #250	; 0xfa
 800ccd2:	f7ff ffd3 	bl	800cc7c <sys_timeout>
}
 800ccd6:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800ccd8:	4b05      	ldr	r3, [pc, #20]	; (800ccf0 <tcp_timer_needed+0x38>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d1f2      	bne.n	800ccc6 <tcp_timer_needed+0xe>
 800cce0:	e7f9      	b.n	800ccd6 <tcp_timer_needed+0x1e>
 800cce2:	bf00      	nop
 800cce4:	20010830 	.word	0x20010830
 800cce8:	200107cc 	.word	0x200107cc
 800ccec:	0800ccf5 	.word	0x0800ccf5
 800ccf0:	200107e4 	.word	0x200107e4

0800ccf4 <tcpip_tcp_timer>:
{
 800ccf4:	b508      	push	{r3, lr}
  tcp_tmr();
 800ccf6:	f7fd f89d 	bl	8009e34 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800ccfa:	4b08      	ldr	r3, [pc, #32]	; (800cd1c <tcpip_tcp_timer+0x28>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	b12b      	cbz	r3, 800cd0c <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cd00:	2200      	movs	r2, #0
 800cd02:	4907      	ldr	r1, [pc, #28]	; (800cd20 <tcpip_tcp_timer+0x2c>)
 800cd04:	20fa      	movs	r0, #250	; 0xfa
 800cd06:	f7ff ffb9 	bl	800cc7c <sys_timeout>
}
 800cd0a:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cd0c:	4b05      	ldr	r3, [pc, #20]	; (800cd24 <tcpip_tcp_timer+0x30>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d1f5      	bne.n	800cd00 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800cd14:	4b04      	ldr	r3, [pc, #16]	; (800cd28 <tcpip_tcp_timer+0x34>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	601a      	str	r2, [r3, #0]
}
 800cd1a:	e7f6      	b.n	800cd0a <tcpip_tcp_timer+0x16>
 800cd1c:	200107cc 	.word	0x200107cc
 800cd20:	0800ccf5 	.word	0x0800ccf5
 800cd24:	200107e4 	.word	0x200107e4
 800cd28:	20010830 	.word	0x20010830

0800cd2c <sys_timeouts_init>:
{
 800cd2c:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cd2e:	4d08      	ldr	r5, [pc, #32]	; (800cd50 <sys_timeouts_init+0x24>)
 800cd30:	4c08      	ldr	r4, [pc, #32]	; (800cd54 <sys_timeouts_init+0x28>)
 800cd32:	f105 0208 	add.w	r2, r5, #8
 800cd36:	4621      	mov	r1, r4
 800cd38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd3c:	f7ff ff9e 	bl	800cc7c <sys_timeout>
 800cd40:	f105 0210 	add.w	r2, r5, #16
 800cd44:	4621      	mov	r1, r4
 800cd46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd4a:	f7ff ff97 	bl	800cc7c <sys_timeout>
}
 800cd4e:	bd38      	pop	{r3, r4, r5, pc}
 800cd50:	08012dfc 	.word	0x08012dfc
 800cd54:	0800cc49 	.word	0x0800cc49

0800cd58 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800cd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800cd5c:	f7f6 fb38 	bl	80033d0 <sys_now>
 800cd60:	4606      	mov	r6, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800cd62:	4c0d      	ldr	r4, [pc, #52]	; (800cd98 <sys_check_timeouts+0x40>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800cd64:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800cd9c <sys_check_timeouts+0x44>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd68:	270a      	movs	r7, #10
    tmptimeout = next_timeout;
 800cd6a:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800cd6c:	b191      	cbz	r1, 800cd94 <sys_check_timeouts+0x3c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cd6e:	684b      	ldr	r3, [r1, #4]
 800cd70:	1af2      	subs	r2, r6, r3
 800cd72:	2a00      	cmp	r2, #0
 800cd74:	db0e      	blt.n	800cd94 <sys_check_timeouts+0x3c>
    next_timeout = tmptimeout->next;
 800cd76:	680a      	ldr	r2, [r1, #0]
 800cd78:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 800cd7a:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800cd7c:	f8d1 900c 	ldr.w	r9, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800cd80:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd84:	4638      	mov	r0, r7
 800cd86:	f7fb f92f 	bl	8007fe8 <memp_free>
    if (handler != NULL) {
 800cd8a:	2d00      	cmp	r5, #0
 800cd8c:	d0ed      	beq.n	800cd6a <sys_check_timeouts+0x12>
      handler(arg);
 800cd8e:	4648      	mov	r0, r9
 800cd90:	47a8      	blx	r5
 800cd92:	e7e9      	b.n	800cd68 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cd94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd98:	2001082c 	.word	0x2001082c
 800cd9c:	20010828 	.word	0x20010828

0800cda0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800cda0:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800cda2:	4b0d      	ldr	r3, [pc, #52]	; (800cdd8 <sys_timeouts_sleeptime+0x38>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	b183      	cbz	r3, 800cdca <sys_timeouts_sleeptime+0x2a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800cda8:	f7f6 fb12 	bl	80033d0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800cdac:	4b0a      	ldr	r3, [pc, #40]	; (800cdd8 <sys_timeouts_sleeptime+0x38>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	685c      	ldr	r4, [r3, #4]
 800cdb2:	1a24      	subs	r4, r4, r0
 800cdb4:	d40c      	bmi.n	800cdd0 <sys_timeouts_sleeptime+0x30>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800cdb6:	2c00      	cmp	r4, #0
 800cdb8:	da0b      	bge.n	800cdd2 <sys_timeouts_sleeptime+0x32>
 800cdba:	4b08      	ldr	r3, [pc, #32]	; (800cddc <sys_timeouts_sleeptime+0x3c>)
 800cdbc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800cdc0:	4907      	ldr	r1, [pc, #28]	; (800cde0 <sys_timeouts_sleeptime+0x40>)
 800cdc2:	4808      	ldr	r0, [pc, #32]	; (800cde4 <sys_timeouts_sleeptime+0x44>)
 800cdc4:	f002 f8ae 	bl	800ef24 <iprintf>
 800cdc8:	e003      	b.n	800cdd2 <sys_timeouts_sleeptime+0x32>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800cdca:	f04f 34ff 	mov.w	r4, #4294967295
 800cdce:	e000      	b.n	800cdd2 <sys_timeouts_sleeptime+0x32>
    return 0;
 800cdd0:	2400      	movs	r4, #0
    return ret;
  }
}
 800cdd2:	4620      	mov	r0, r4
 800cdd4:	bd10      	pop	{r4, pc}
 800cdd6:	bf00      	nop
 800cdd8:	2001082c 	.word	0x2001082c
 800cddc:	08012d3c 	.word	0x08012d3c
 800cde0:	08012de8 	.word	0x08012de8
 800cde4:	0800fe60 	.word	0x0800fe60

0800cde8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cde8:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cdea:	f002 f8b3 	bl	800ef54 <rand>
 800cdee:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800cdf2:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800cdf6:	4b01      	ldr	r3, [pc, #4]	; (800cdfc <udp_init+0x14>)
 800cdf8:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800cdfa:	bd08      	pop	{r3, pc}
 800cdfc:	2000002a 	.word	0x2000002a

0800ce00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ce00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce04:	b085      	sub	sp, #20
 800ce06:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ce08:	4681      	mov	r9, r0
 800ce0a:	b300      	cbz	r0, 800ce4e <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ce0c:	b336      	cbz	r6, 800ce5c <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ce0e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800ce12:	2b07      	cmp	r3, #7
 800ce14:	d929      	bls.n	800ce6a <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ce16:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ce1a:	4b68      	ldr	r3, [pc, #416]	; (800cfbc <udp_input+0x1bc>)
 800ce1c:	6819      	ldr	r1, [r3, #0]
 800ce1e:	6958      	ldr	r0, [r3, #20]
 800ce20:	f001 f8b3 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800ce24:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800ce26:	8820      	ldrh	r0, [r4, #0]
 800ce28:	f7fa fd61 	bl	80078ee <lwip_htons>
 800ce2c:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800ce2e:	8860      	ldrh	r0, [r4, #2]
 800ce30:	f7fa fd5d 	bl	80078ee <lwip_htons>
 800ce34:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce36:	4b62      	ldr	r3, [pc, #392]	; (800cfc0 <udp_input+0x1c0>)
 800ce38:	681c      	ldr	r4, [r3, #0]
 800ce3a:	2c00      	cmp	r4, #0
 800ce3c:	f000 8088 	beq.w	800cf50 <udp_input+0x150>
  uncon_pcb = NULL;
 800ce40:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800ce44:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ce48:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800cfbc <udp_input+0x1bc>
 800ce4c:	e02c      	b.n	800cea8 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800ce4e:	4b5d      	ldr	r3, [pc, #372]	; (800cfc4 <udp_input+0x1c4>)
 800ce50:	22cf      	movs	r2, #207	; 0xcf
 800ce52:	495d      	ldr	r1, [pc, #372]	; (800cfc8 <udp_input+0x1c8>)
 800ce54:	485d      	ldr	r0, [pc, #372]	; (800cfcc <udp_input+0x1cc>)
 800ce56:	f002 f865 	bl	800ef24 <iprintf>
 800ce5a:	e7d7      	b.n	800ce0c <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800ce5c:	4b59      	ldr	r3, [pc, #356]	; (800cfc4 <udp_input+0x1c4>)
 800ce5e:	22d0      	movs	r2, #208	; 0xd0
 800ce60:	495b      	ldr	r1, [pc, #364]	; (800cfd0 <udp_input+0x1d0>)
 800ce62:	485a      	ldr	r0, [pc, #360]	; (800cfcc <udp_input+0x1cc>)
 800ce64:	f002 f85e 	bl	800ef24 <iprintf>
 800ce68:	e7d1      	b.n	800ce0e <udp_input+0xe>
    pbuf_free(p);
 800ce6a:	4648      	mov	r0, r9
 800ce6c:	f7fb fb7e 	bl	800856c <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ce70:	b005      	add	sp, #20
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ce76:	4b53      	ldr	r3, [pc, #332]	; (800cfc4 <udp_input+0x1c4>)
 800ce78:	2288      	movs	r2, #136	; 0x88
 800ce7a:	4956      	ldr	r1, [pc, #344]	; (800cfd4 <udp_input+0x1d4>)
 800ce7c:	4853      	ldr	r0, [pc, #332]	; (800cfcc <udp_input+0x1cc>)
 800ce7e:	f002 f851 	bl	800ef24 <iprintf>
 800ce82:	e016      	b.n	800ceb2 <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce84:	6823      	ldr	r3, [r4, #0]
 800ce86:	b11b      	cbz	r3, 800ce90 <udp_input+0x90>
 800ce88:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d106      	bne.n	800ce9e <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ce90:	7c23      	ldrb	r3, [r4, #16]
 800ce92:	f013 0f04 	tst.w	r3, #4
 800ce96:	d025      	beq.n	800cee4 <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 800ce98:	8aa3      	ldrh	r3, [r4, #20]
 800ce9a:	4553      	cmp	r3, sl
 800ce9c:	d038      	beq.n	800cf10 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce9e:	68e3      	ldr	r3, [r4, #12]
 800cea0:	9403      	str	r4, [sp, #12]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d051      	beq.n	800cf4a <udp_input+0x14a>
 800cea6:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 800cea8:	8a63      	ldrh	r3, [r4, #18]
 800ceaa:	42ab      	cmp	r3, r5
 800ceac:	d1f7      	bne.n	800ce9e <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ceae:	2e00      	cmp	r6, #0
 800ceb0:	d0e1      	beq.n	800ce76 <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ceb2:	7a22      	ldrb	r2, [r4, #8]
 800ceb4:	b13a      	cbz	r2, 800cec6 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ceb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ceba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cebe:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d1eb      	bne.n	800ce9e <udp_input+0x9e>
    if (broadcast != 0) {
 800cec6:	2f00      	cmp	r7, #0
 800cec8:	d0dc      	beq.n	800ce84 <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ceca:	6823      	ldr	r3, [r4, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d0df      	beq.n	800ce90 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ced0:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ced4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ced8:	d0da      	beq.n	800ce90 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ceda:	4053      	eors	r3, r2
 800cedc:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800cede:	4213      	tst	r3, r2
 800cee0:	d1dd      	bne.n	800ce9e <udp_input+0x9e>
 800cee2:	e7d5      	b.n	800ce90 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 800cee4:	f1bb 0f00 	cmp.w	fp, #0
 800cee8:	d010      	beq.n	800cf0c <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ceea:	2f00      	cmp	r7, #0
 800ceec:	d0d4      	beq.n	800ce98 <udp_input+0x98>
 800ceee:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800cef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cef6:	d1cf      	bne.n	800ce98 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800cef8:	6873      	ldr	r3, [r6, #4]
 800cefa:	f8db 2000 	ldr.w	r2, [fp]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d0ca      	beq.n	800ce98 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800cf02:	6822      	ldr	r2, [r4, #0]
 800cf04:	4293      	cmp	r3, r2
 800cf06:	bf08      	it	eq
 800cf08:	46a3      	moveq	fp, r4
 800cf0a:	e7c5      	b.n	800ce98 <udp_input+0x98>
 800cf0c:	46a3      	mov	fp, r4
 800cf0e:	e7c3      	b.n	800ce98 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cf10:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800cf12:	b11b      	cbz	r3, 800cf1c <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800cf14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf18:	4293      	cmp	r3, r2
 800cf1a:	d1c0      	bne.n	800ce9e <udp_input+0x9e>
        if (prev != NULL) {
 800cf1c:	9a03      	ldr	r2, [sp, #12]
 800cf1e:	b12a      	cbz	r2, 800cf2c <udp_input+0x12c>
          prev->next = pcb->next;
 800cf20:	68e3      	ldr	r3, [r4, #12]
 800cf22:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 800cf24:	4b26      	ldr	r3, [pc, #152]	; (800cfc0 <udp_input+0x1c0>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 800cf2a:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cf2c:	2108      	movs	r1, #8
 800cf2e:	4648      	mov	r0, r9
 800cf30:	f7fb fadc 	bl	80084ec <pbuf_remove_header>
 800cf34:	bb08      	cbnz	r0, 800cf7a <udp_input+0x17a>
      if (pcb->recv != NULL) {
 800cf36:	69a5      	ldr	r5, [r4, #24]
 800cf38:	b355      	cbz	r5, 800cf90 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800cf3a:	69e0      	ldr	r0, [r4, #28]
 800cf3c:	f8cd a000 	str.w	sl, [sp]
 800cf40:	4b25      	ldr	r3, [pc, #148]	; (800cfd8 <udp_input+0x1d8>)
 800cf42:	464a      	mov	r2, r9
 800cf44:	4621      	mov	r1, r4
 800cf46:	47a8      	blx	r5
 800cf48:	e792      	b.n	800ce70 <udp_input+0x70>
  if (pcb != NULL) {
 800cf4a:	f1bb 0f00 	cmp.w	fp, #0
 800cf4e:	d133      	bne.n	800cfb8 <udp_input+0x1b8>
  if (for_us) {
 800cf50:	6872      	ldr	r2, [r6, #4]
 800cf52:	4b1a      	ldr	r3, [pc, #104]	; (800cfbc <udp_input+0x1bc>)
 800cf54:	695b      	ldr	r3, [r3, #20]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d12a      	bne.n	800cfb0 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cf5a:	2108      	movs	r1, #8
 800cf5c:	4648      	mov	r0, r9
 800cf5e:	f7fb fac5 	bl	80084ec <pbuf_remove_header>
 800cf62:	b950      	cbnz	r0, 800cf7a <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cf64:	b92f      	cbnz	r7, 800cf72 <udp_input+0x172>
 800cf66:	4b15      	ldr	r3, [pc, #84]	; (800cfbc <udp_input+0x1bc>)
 800cf68:	695b      	ldr	r3, [r3, #20]
 800cf6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf6e:	2be0      	cmp	r3, #224	; 0xe0
 800cf70:	d112      	bne.n	800cf98 <udp_input+0x198>
      pbuf_free(p);
 800cf72:	4648      	mov	r0, r9
 800cf74:	f7fb fafa 	bl	800856c <pbuf_free>
 800cf78:	e77a      	b.n	800ce70 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cf7a:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <udp_input+0x1c4>)
 800cf7c:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cf80:	4916      	ldr	r1, [pc, #88]	; (800cfdc <udp_input+0x1dc>)
 800cf82:	4812      	ldr	r0, [pc, #72]	; (800cfcc <udp_input+0x1cc>)
 800cf84:	f001 ffce 	bl	800ef24 <iprintf>
      pbuf_free(p);
 800cf88:	4648      	mov	r0, r9
 800cf8a:	f7fb faef 	bl	800856c <pbuf_free>
      goto end;
 800cf8e:	e76f      	b.n	800ce70 <udp_input+0x70>
        pbuf_free(p);
 800cf90:	4648      	mov	r0, r9
 800cf92:	f7fb faeb 	bl	800856c <pbuf_free>
        goto end;
 800cf96:	e76b      	b.n	800ce70 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cf98:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <udp_input+0x1bc>)
 800cf9a:	8999      	ldrh	r1, [r3, #12]
 800cf9c:	3108      	adds	r1, #8
 800cf9e:	b209      	sxth	r1, r1
 800cfa0:	4648      	mov	r0, r9
 800cfa2:	f7fb fad7 	bl	8008554 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cfa6:	2103      	movs	r1, #3
 800cfa8:	4648      	mov	r0, r9
 800cfaa:	f000 fe25 	bl	800dbf8 <icmp_dest_unreach>
 800cfae:	e7e0      	b.n	800cf72 <udp_input+0x172>
    pbuf_free(p);
 800cfb0:	4648      	mov	r0, r9
 800cfb2:	f7fb fadb 	bl	800856c <pbuf_free>
  return;
 800cfb6:	e75b      	b.n	800ce70 <udp_input+0x70>
 800cfb8:	465c      	mov	r4, fp
 800cfba:	e7b7      	b.n	800cf2c <udp_input+0x12c>
 800cfbc:	2000aeb8 	.word	0x2000aeb8
 800cfc0:	20010834 	.word	0x20010834
 800cfc4:	08012e14 	.word	0x08012e14
 800cfc8:	08012e44 	.word	0x08012e44
 800cfcc:	0800fe60 	.word	0x0800fe60
 800cfd0:	08012e5c 	.word	0x08012e5c
 800cfd4:	08012e78 	.word	0x08012e78
 800cfd8:	2000aec8 	.word	0x2000aec8
 800cfdc:	08012ea0 	.word	0x08012ea0

0800cfe0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800cfe2:	4d3c      	ldr	r5, [pc, #240]	; (800d0d4 <udp_bind+0xf4>)
 800cfe4:	2900      	cmp	r1, #0
 800cfe6:	bf18      	it	ne
 800cfe8:	460d      	movne	r5, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfea:	b168      	cbz	r0, 800d008 <udp_bind+0x28>
 800cfec:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cfee:	4b3a      	ldr	r3, [pc, #232]	; (800d0d8 <udp_bind+0xf8>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d05c      	beq.n	800d0b0 <udp_bind+0xd0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800cff6:	4298      	cmp	r0, r3
 800cff8:	d05d      	beq.n	800d0b6 <udp_bind+0xd6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cffa:	4619      	mov	r1, r3
 800cffc:	68c9      	ldr	r1, [r1, #12]
 800cffe:	b169      	cbz	r1, 800d01c <udp_bind+0x3c>
    if (pcb == ipcb) {
 800d000:	428c      	cmp	r4, r1
 800d002:	d1fb      	bne.n	800cffc <udp_bind+0x1c>
      rebind = 1;
 800d004:	2701      	movs	r7, #1
 800d006:	e00a      	b.n	800d01e <udp_bind+0x3e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d008:	4b34      	ldr	r3, [pc, #208]	; (800d0dc <udp_bind+0xfc>)
 800d00a:	f240 32b7 	movw	r2, #951	; 0x3b7
 800d00e:	4934      	ldr	r1, [pc, #208]	; (800d0e0 <udp_bind+0x100>)
 800d010:	4834      	ldr	r0, [pc, #208]	; (800d0e4 <udp_bind+0x104>)
 800d012:	f001 ff87 	bl	800ef24 <iprintf>
 800d016:	f06f 000f 	mvn.w	r0, #15
 800d01a:	e056      	b.n	800d0ca <udp_bind+0xea>
  rebind = 0;
 800d01c:	2700      	movs	r7, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800d01e:	2a00      	cmp	r2, #0
 800d020:	d12f      	bne.n	800d082 <udp_bind+0xa2>
 800d022:	4a31      	ldr	r2, [pc, #196]	; (800d0e8 <udp_bind+0x108>)
 800d024:	8810      	ldrh	r0, [r2, #0]
  rebind = 0;
 800d026:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d02a:	f64f 7cff 	movw	ip, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d02e:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800d032:	4560      	cmp	r0, ip
 800d034:	bf1a      	itte	ne
 800d036:	3001      	addne	r0, #1
 800d038:	b280      	uxthne	r0, r0
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800d03a:	4670      	moveq	r0, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d03c:	b1db      	cbz	r3, 800d076 <udp_bind+0x96>
 800d03e:	461a      	mov	r2, r3
    if (pcb->local_port == udp_port) {
 800d040:	8a51      	ldrh	r1, [r2, #18]
 800d042:	4281      	cmp	r1, r0
 800d044:	d00e      	beq.n	800d064 <udp_bind+0x84>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d046:	68d2      	ldr	r2, [r2, #12]
 800d048:	2a00      	cmp	r2, #0
 800d04a:	d1f9      	bne.n	800d040 <udp_bind+0x60>
 800d04c:	4b26      	ldr	r3, [pc, #152]	; (800d0e8 <udp_bind+0x108>)
 800d04e:	8018      	strh	r0, [r3, #0]
  return udp_port;
 800d050:	4b25      	ldr	r3, [pc, #148]	; (800d0e8 <udp_bind+0x108>)
 800d052:	881a      	ldrh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d054:	b325      	cbz	r5, 800d0a0 <udp_bind+0xc0>
 800d056:	682b      	ldr	r3, [r5, #0]
 800d058:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800d05a:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800d05c:	2f00      	cmp	r7, #0
 800d05e:	d02f      	beq.n	800d0c0 <udp_bind+0xe0>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800d060:	2000      	movs	r0, #0
 800d062:	e032      	b.n	800d0ca <udp_bind+0xea>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d064:	3e01      	subs	r6, #1
 800d066:	b2b6      	uxth	r6, r6
 800d068:	2e00      	cmp	r6, #0
 800d06a:	d1e2      	bne.n	800d032 <udp_bind+0x52>
 800d06c:	4b1e      	ldr	r3, [pc, #120]	; (800d0e8 <udp_bind+0x108>)
 800d06e:	8018      	strh	r0, [r3, #0]
      return ERR_USE;
 800d070:	f06f 0007 	mvn.w	r0, #7
 800d074:	e029      	b.n	800d0ca <udp_bind+0xea>
 800d076:	4b1c      	ldr	r3, [pc, #112]	; (800d0e8 <udp_bind+0x108>)
 800d078:	8018      	strh	r0, [r3, #0]
 800d07a:	e7e9      	b.n	800d050 <udp_bind+0x70>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d07c:	68db      	ldr	r3, [r3, #12]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d0e8      	beq.n	800d054 <udp_bind+0x74>
      if (pcb != ipcb) {
 800d082:	429c      	cmp	r4, r3
 800d084:	d0fa      	beq.n	800d07c <udp_bind+0x9c>
          if ((ipcb->local_port == port) &&
 800d086:	8a59      	ldrh	r1, [r3, #18]
 800d088:	4291      	cmp	r1, r2
 800d08a:	d1f7      	bne.n	800d07c <udp_bind+0x9c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800d090:	4288      	cmp	r0, r1
 800d092:	d007      	beq.n	800d0a4 <udp_bind+0xc4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d094:	b149      	cbz	r1, 800d0aa <udp_bind+0xca>
              ip_addr_isany(&ipcb->local_ip))) {
 800d096:	2800      	cmp	r0, #0
 800d098:	d1f0      	bne.n	800d07c <udp_bind+0x9c>
            return ERR_USE;
 800d09a:	f06f 0007 	mvn.w	r0, #7
 800d09e:	e014      	b.n	800d0ca <udp_bind+0xea>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	e7d9      	b.n	800d058 <udp_bind+0x78>
            return ERR_USE;
 800d0a4:	f06f 0007 	mvn.w	r0, #7
 800d0a8:	e00f      	b.n	800d0ca <udp_bind+0xea>
 800d0aa:	f06f 0007 	mvn.w	r0, #7
 800d0ae:	e00c      	b.n	800d0ca <udp_bind+0xea>
  if (port == 0) {
 800d0b0:	b962      	cbnz	r2, 800d0cc <udp_bind+0xec>
  rebind = 0;
 800d0b2:	2700      	movs	r7, #0
 800d0b4:	e7b5      	b.n	800d022 <udp_bind+0x42>
      rebind = 1;
 800d0b6:	2701      	movs	r7, #1
 800d0b8:	e7b1      	b.n	800d01e <udp_bind+0x3e>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
 800d0be:	8262      	strh	r2, [r4, #18]
    pcb->next = udp_pcbs;
 800d0c0:	4b05      	ldr	r3, [pc, #20]	; (800d0d8 <udp_bind+0xf8>)
 800d0c2:	681a      	ldr	r2, [r3, #0]
 800d0c4:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800d0c6:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d0c8:	2000      	movs	r0, #0
}
 800d0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d0cc:	2d00      	cmp	r5, #0
 800d0ce:	d0f4      	beq.n	800d0ba <udp_bind+0xda>
  rebind = 0;
 800d0d0:	2700      	movs	r7, #0
 800d0d2:	e7c0      	b.n	800d056 <udp_bind+0x76>
 800d0d4:	080131e4 	.word	0x080131e4
 800d0d8:	20010834 	.word	0x20010834
 800d0dc:	08012e14 	.word	0x08012e14
 800d0e0:	08012ebc 	.word	0x08012ebc
 800d0e4:	0800fe60 	.word	0x0800fe60
 800d0e8:	2000002a 	.word	0x2000002a

0800d0ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d0ec:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d0ee:	b110      	cbz	r0, 800d0f6 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d0f0:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800d0f2:	61c2      	str	r2, [r0, #28]
}
 800d0f4:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d0f6:	4b04      	ldr	r3, [pc, #16]	; (800d108 <udp_recv+0x1c>)
 800d0f8:	f240 428a 	movw	r2, #1162	; 0x48a
 800d0fc:	4903      	ldr	r1, [pc, #12]	; (800d10c <udp_recv+0x20>)
 800d0fe:	4804      	ldr	r0, [pc, #16]	; (800d110 <udp_recv+0x24>)
 800d100:	f001 ff10 	bl	800ef24 <iprintf>
 800d104:	e7f6      	b.n	800d0f4 <udp_recv+0x8>
 800d106:	bf00      	nop
 800d108:	08012e14 	.word	0x08012e14
 800d10c:	08012ed4 	.word	0x08012ed4
 800d110:	0800fe60 	.word	0x0800fe60

0800d114 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d114:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d116:	b168      	cbz	r0, 800d134 <udp_remove+0x20>
 800d118:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <udp_remove+0x40>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	4283      	cmp	r3, r0
 800d120:	d010      	beq.n	800d144 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d122:	b193      	cbz	r3, 800d14a <udp_remove+0x36>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d124:	461a      	mov	r2, r3
 800d126:	68db      	ldr	r3, [r3, #12]
 800d128:	b17b      	cbz	r3, 800d14a <udp_remove+0x36>
 800d12a:	428b      	cmp	r3, r1
 800d12c:	d1fa      	bne.n	800d124 <udp_remove+0x10>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d12e:	68cb      	ldr	r3, [r1, #12]
 800d130:	60d3      	str	r3, [r2, #12]
        break;
 800d132:	e00a      	b.n	800d14a <udp_remove+0x36>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d134:	4b08      	ldr	r3, [pc, #32]	; (800d158 <udp_remove+0x44>)
 800d136:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d13a:	4908      	ldr	r1, [pc, #32]	; (800d15c <udp_remove+0x48>)
 800d13c:	4808      	ldr	r0, [pc, #32]	; (800d160 <udp_remove+0x4c>)
 800d13e:	f001 fef1 	bl	800ef24 <iprintf>
 800d142:	e005      	b.n	800d150 <udp_remove+0x3c>
    udp_pcbs = udp_pcbs->next;
 800d144:	68c2      	ldr	r2, [r0, #12]
 800d146:	4b03      	ldr	r3, [pc, #12]	; (800d154 <udp_remove+0x40>)
 800d148:	601a      	str	r2, [r3, #0]
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d14a:	2000      	movs	r0, #0
 800d14c:	f7fa ff4c 	bl	8007fe8 <memp_free>
}
 800d150:	bd08      	pop	{r3, pc}
 800d152:	bf00      	nop
 800d154:	20010834 	.word	0x20010834
 800d158:	08012e14 	.word	0x08012e14
 800d15c:	08012eec 	.word	0x08012eec
 800d160:	0800fe60 	.word	0x0800fe60

0800d164 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d164:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d166:	2000      	movs	r0, #0
 800d168:	f7fa ff0e 	bl	8007f88 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d16c:	4604      	mov	r4, r0
 800d16e:	b128      	cbz	r0, 800d17c <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d170:	2220      	movs	r2, #32
 800d172:	2100      	movs	r1, #0
 800d174:	f001 fe39 	bl	800edea <memset>
    pcb->ttl = UDP_TTL;
 800d178:	23ff      	movs	r3, #255	; 0xff
 800d17a:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d17c:	4620      	mov	r0, r4
 800d17e:	bd10      	pop	{r4, pc}

0800d180 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800d180:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d182:	f7ff ffef 	bl	800d164 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800d186:	bd08      	pop	{r3, pc}

0800d188 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d188:	b1a8      	cbz	r0, 800d1b6 <udp_netif_ip_addr_changed+0x2e>
 800d18a:	4602      	mov	r2, r0
 800d18c:	6803      	ldr	r3, [r0, #0]
 800d18e:	b193      	cbz	r3, 800d1b6 <udp_netif_ip_addr_changed+0x2e>
 800d190:	b189      	cbz	r1, 800d1b6 <udp_netif_ip_addr_changed+0x2e>
 800d192:	680b      	ldr	r3, [r1, #0]
 800d194:	b17b      	cbz	r3, 800d1b6 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d196:	4b08      	ldr	r3, [pc, #32]	; (800d1b8 <udp_netif_ip_addr_changed+0x30>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	b163      	cbz	r3, 800d1b6 <udp_netif_ip_addr_changed+0x2e>
{
 800d19c:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d19e:	6810      	ldr	r0, [r2, #0]
 800d1a0:	681c      	ldr	r4, [r3, #0]
 800d1a2:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d1a4:	bf04      	itt	eq
 800d1a6:	6808      	ldreq	r0, [r1, #0]
 800d1a8:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d1f6      	bne.n	800d19e <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800d1b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1b4:	4770      	bx	lr
 800d1b6:	4770      	bx	lr
 800d1b8:	20010834 	.word	0x20010834

0800d1bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d1bc:	b510      	push	{r4, lr}
 800d1be:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d1c0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800d1c4:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <etharp_free_entry+0x30>)
 800d1c6:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800d1ca:	b138      	cbz	r0, 800d1dc <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d1cc:	f7fb f9ce 	bl	800856c <pbuf_free>
    arp_table[i].q = NULL;
 800d1d0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d1d4:	00db      	lsls	r3, r3, #3
 800d1d6:	4a05      	ldr	r2, [pc, #20]	; (800d1ec <etharp_free_entry+0x30>)
 800d1d8:	2100      	movs	r1, #0
 800d1da:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d1dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d1e0:	4802      	ldr	r0, [pc, #8]	; (800d1ec <etharp_free_entry+0x30>)
 800d1e2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d1ea:	bd10      	pop	{r4, pc}
 800d1ec:	20010838 	.word	0x20010838

0800d1f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1f4:	b085      	sub	sp, #20
 800d1f6:	4606      	mov	r6, r0
 800d1f8:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1fa:	4c4f      	ldr	r4, [pc, #316]	; (800d338 <etharp_find_entry+0x148>)
{
 800d1fc:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d1fe:	4699      	mov	r9, r3
 800d200:	9302      	str	r3, [sp, #8]
 800d202:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 800d204:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 800d206:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d208:	4680      	mov	r8, r0
 800d20a:	9003      	str	r0, [sp, #12]
 800d20c:	4682      	mov	sl, r0
 800d20e:	9101      	str	r1, [sp, #4]
 800d210:	e007      	b.n	800d222 <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d212:	f1bc 0f00 	cmp.w	ip, #0
 800d216:	d10e      	bne.n	800d236 <etharp_find_entry+0x46>
 800d218:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d21a:	3301      	adds	r3, #1
 800d21c:	3418      	adds	r4, #24
 800d21e:	2b0a      	cmp	r3, #10
 800d220:	d02e      	beq.n	800d280 <etharp_find_entry+0x90>
 800d222:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 800d226:	4622      	mov	r2, r4
 800d228:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d22c:	2d0a      	cmp	r5, #10
 800d22e:	d0f0      	beq.n	800d212 <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800d230:	f1bc 0f00 	cmp.w	ip, #0
 800d234:	d0f1      	beq.n	800d21a <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d236:	b11e      	cbz	r6, 800d240 <etharp_find_entry+0x50>
 800d238:	6831      	ldr	r1, [r6, #0]
 800d23a:	6850      	ldr	r0, [r2, #4]
 800d23c:	4281      	cmp	r1, r0
 800d23e:	d008      	beq.n	800d252 <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d240:	f1bc 0f01 	cmp.w	ip, #1
 800d244:	d00c      	beq.n	800d260 <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d246:	8a52      	ldrh	r2, [r2, #18]
 800d248:	454a      	cmp	r2, r9
 800d24a:	d3e6      	bcc.n	800d21a <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800d24c:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 800d24e:	46f0      	mov	r8, lr
 800d250:	e7e3      	b.n	800d21a <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d252:	2f00      	cmp	r7, #0
 800d254:	d064      	beq.n	800d320 <etharp_find_entry+0x130>
 800d256:	6891      	ldr	r1, [r2, #8]
 800d258:	42b9      	cmp	r1, r7
 800d25a:	d1f1      	bne.n	800d240 <etharp_find_entry+0x50>
 800d25c:	4675      	mov	r5, lr
 800d25e:	e031      	b.n	800d2c4 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 800d260:	6811      	ldr	r1, [r2, #0]
 800d262:	b129      	cbz	r1, 800d270 <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 800d264:	8a52      	ldrh	r2, [r2, #18]
 800d266:	455a      	cmp	r2, fp
 800d268:	d3d7      	bcc.n	800d21a <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 800d26a:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 800d26c:	46f2      	mov	sl, lr
 800d26e:	e7d4      	b.n	800d21a <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 800d270:	8a52      	ldrh	r2, [r2, #18]
 800d272:	9902      	ldr	r1, [sp, #8]
 800d274:	428a      	cmp	r2, r1
 800d276:	d3d0      	bcc.n	800d21a <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 800d278:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 800d27a:	f8cd e00c 	str.w	lr, [sp, #12]
 800d27e:	e7cc      	b.n	800d21a <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d280:	4650      	mov	r0, sl
 800d282:	9901      	ldr	r1, [sp, #4]
 800d284:	f011 0f02 	tst.w	r1, #2
 800d288:	d14c      	bne.n	800d324 <etharp_find_entry+0x134>
 800d28a:	2d0a      	cmp	r5, #10
 800d28c:	d01e      	beq.n	800d2cc <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d28e:	2d09      	cmp	r5, #9
 800d290:	dc1f      	bgt.n	800d2d2 <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d292:	462c      	mov	r4, r5
 800d294:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800d298:	4a27      	ldr	r2, [pc, #156]	; (800d338 <etharp_find_entry+0x148>)
 800d29a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d29e:	7d1b      	ldrb	r3, [r3, #20]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d135      	bne.n	800d310 <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d2a4:	b136      	cbz	r6, 800d2b4 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d2a6:	6831      	ldr	r1, [r6, #0]
 800d2a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d2ac:	4a22      	ldr	r2, [pc, #136]	; (800d338 <etharp_find_entry+0x148>)
 800d2ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d2b2:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800d2b4:	4b20      	ldr	r3, [pc, #128]	; (800d338 <etharp_find_entry+0x148>)
 800d2b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d2ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d2be:	2100      	movs	r1, #0
 800d2c0:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d2c2:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800d2c4:	4628      	mov	r0, r5
 800d2c6:	b005      	add	sp, #20
 800d2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d2cc:	f011 0f01 	tst.w	r1, #1
 800d2d0:	d02b      	beq.n	800d32a <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 800d2d2:	f1b8 0f09 	cmp.w	r8, #9
 800d2d6:	dc11      	bgt.n	800d2fc <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d2d8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800d2dc:	4a16      	ldr	r2, [pc, #88]	; (800d338 <etharp_find_entry+0x148>)
 800d2de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d2e2:	b133      	cbz	r3, 800d2f2 <etharp_find_entry+0x102>
 800d2e4:	4b15      	ldr	r3, [pc, #84]	; (800d33c <etharp_find_entry+0x14c>)
 800d2e6:	f240 126d 	movw	r2, #365	; 0x16d
 800d2ea:	4915      	ldr	r1, [pc, #84]	; (800d340 <etharp_find_entry+0x150>)
 800d2ec:	4815      	ldr	r0, [pc, #84]	; (800d344 <etharp_find_entry+0x154>)
 800d2ee:	f001 fe19 	bl	800ef24 <iprintf>
    etharp_free_entry(i);
 800d2f2:	4640      	mov	r0, r8
 800d2f4:	f7ff ff62 	bl	800d1bc <etharp_free_entry>
 800d2f8:	4645      	mov	r5, r8
 800d2fa:	e7ca      	b.n	800d292 <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d2fc:	9b03      	ldr	r3, [sp, #12]
 800d2fe:	2b09      	cmp	r3, #9
 800d300:	dd16      	ble.n	800d330 <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d302:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 800d304:	bfc8      	it	gt
 800d306:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d30a:	dcdb      	bgt.n	800d2c4 <etharp_find_entry+0xd4>
 800d30c:	4680      	mov	r8, r0
 800d30e:	e7f0      	b.n	800d2f2 <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d310:	4b0a      	ldr	r3, [pc, #40]	; (800d33c <etharp_find_entry+0x14c>)
 800d312:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d316:	490c      	ldr	r1, [pc, #48]	; (800d348 <etharp_find_entry+0x158>)
 800d318:	480a      	ldr	r0, [pc, #40]	; (800d344 <etharp_find_entry+0x154>)
 800d31a:	f001 fe03 	bl	800ef24 <iprintf>
 800d31e:	e7c1      	b.n	800d2a4 <etharp_find_entry+0xb4>
 800d320:	4675      	mov	r5, lr
 800d322:	e7cf      	b.n	800d2c4 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 800d324:	f04f 35ff 	mov.w	r5, #4294967295
 800d328:	e7cc      	b.n	800d2c4 <etharp_find_entry+0xd4>
 800d32a:	f04f 35ff 	mov.w	r5, #4294967295
 800d32e:	e7c9      	b.n	800d2c4 <etharp_find_entry+0xd4>
 800d330:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d334:	e7dd      	b.n	800d2f2 <etharp_find_entry+0x102>
 800d336:	bf00      	nop
 800d338:	20010838 	.word	0x20010838
 800d33c:	08012f04 	.word	0x08012f04
 800d340:	08012f3c 	.word	0x08012f3c
 800d344:	0800fe60 	.word	0x0800fe60
 800d348:	08012f54 	.word	0x08012f54

0800d34c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d34c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d350:	b082      	sub	sp, #8
 800d352:	460f      	mov	r7, r1
 800d354:	4690      	mov	r8, r2
 800d356:	461d      	mov	r5, r3
 800d358:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d35c:	4681      	mov	r9, r0
 800d35e:	2800      	cmp	r0, #0
 800d360:	d042      	beq.n	800d3e8 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d362:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d366:	211c      	movs	r1, #28
 800d368:	200e      	movs	r0, #14
 800d36a:	f7fb f96f 	bl	800864c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d36e:	4606      	mov	r6, r0
 800d370:	2800      	cmp	r0, #0
 800d372:	d051      	beq.n	800d418 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d374:	8943      	ldrh	r3, [r0, #10]
 800d376:	2b1b      	cmp	r3, #27
 800d378:	d93e      	bls.n	800d3f8 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d37a:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d37c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d380:	f7fa fab5 	bl	80078ee <lwip_htons>
 800d384:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d386:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 800d38a:	2b06      	cmp	r3, #6
 800d38c:	d13c      	bne.n	800d408 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d38e:	682b      	ldr	r3, [r5, #0]
 800d390:	60a3      	str	r3, [r4, #8]
 800d392:	88ab      	ldrh	r3, [r5, #4]
 800d394:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d396:	f8da 3000 	ldr.w	r3, [sl]
 800d39a:	f8c4 3012 	str.w	r3, [r4, #18]
 800d39e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800d3a2:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d3a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d3ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d3b2:	2500      	movs	r5, #0
 800d3b4:	7025      	strb	r5, [r4, #0]
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d3ba:	2308      	movs	r3, #8
 800d3bc:	70a3      	strb	r3, [r4, #2]
 800d3be:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d3c0:	2306      	movs	r3, #6
 800d3c2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d3c4:	2304      	movs	r3, #4
 800d3c6:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d3c8:	f640 0306 	movw	r3, #2054	; 0x806
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	4643      	mov	r3, r8
 800d3d0:	463a      	mov	r2, r7
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	f001 faa9 	bl	800e92c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d3da:	4630      	mov	r0, r6
 800d3dc:	f7fb f8c6 	bl	800856c <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800d3e0:	4628      	mov	r0, r5
}
 800d3e2:	b002      	add	sp, #8
 800d3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d3e8:	4b0d      	ldr	r3, [pc, #52]	; (800d420 <etharp_raw+0xd4>)
 800d3ea:	f240 4257 	movw	r2, #1111	; 0x457
 800d3ee:	490d      	ldr	r1, [pc, #52]	; (800d424 <etharp_raw+0xd8>)
 800d3f0:	480d      	ldr	r0, [pc, #52]	; (800d428 <etharp_raw+0xdc>)
 800d3f2:	f001 fd97 	bl	800ef24 <iprintf>
 800d3f6:	e7b4      	b.n	800d362 <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d3f8:	4b09      	ldr	r3, [pc, #36]	; (800d420 <etharp_raw+0xd4>)
 800d3fa:	f240 4262 	movw	r2, #1122	; 0x462
 800d3fe:	490b      	ldr	r1, [pc, #44]	; (800d42c <etharp_raw+0xe0>)
 800d400:	4809      	ldr	r0, [pc, #36]	; (800d428 <etharp_raw+0xdc>)
 800d402:	f001 fd8f 	bl	800ef24 <iprintf>
 800d406:	e7b8      	b.n	800d37a <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d408:	4b05      	ldr	r3, [pc, #20]	; (800d420 <etharp_raw+0xd4>)
 800d40a:	f240 4269 	movw	r2, #1129	; 0x469
 800d40e:	4908      	ldr	r1, [pc, #32]	; (800d430 <etharp_raw+0xe4>)
 800d410:	4805      	ldr	r0, [pc, #20]	; (800d428 <etharp_raw+0xdc>)
 800d412:	f001 fd87 	bl	800ef24 <iprintf>
 800d416:	e7ba      	b.n	800d38e <etharp_raw+0x42>
    return ERR_MEM;
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	e7e1      	b.n	800d3e2 <etharp_raw+0x96>
 800d41e:	bf00      	nop
 800d420:	08012f04 	.word	0x08012f04
 800d424:	0800fe50 	.word	0x0800fe50
 800d428:	0800fe60 	.word	0x0800fe60
 800d42c:	08012f80 	.word	0x08012f80
 800d430:	08012fb4 	.word	0x08012fb4

0800d434 <etharp_cleanup_netif>:
{
 800d434:	b570      	push	{r4, r5, r6, lr}
 800d436:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d438:	4c08      	ldr	r4, [pc, #32]	; (800d45c <etharp_cleanup_netif+0x28>)
 800d43a:	2500      	movs	r5, #0
 800d43c:	e003      	b.n	800d446 <etharp_cleanup_netif+0x12>
 800d43e:	3501      	adds	r5, #1
 800d440:	3418      	adds	r4, #24
 800d442:	2d0a      	cmp	r5, #10
 800d444:	d009      	beq.n	800d45a <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d446:	7d23      	ldrb	r3, [r4, #20]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d0f8      	beq.n	800d43e <etharp_cleanup_netif+0xa>
 800d44c:	68a3      	ldr	r3, [r4, #8]
 800d44e:	42b3      	cmp	r3, r6
 800d450:	d1f5      	bne.n	800d43e <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 800d452:	4628      	mov	r0, r5
 800d454:	f7ff feb2 	bl	800d1bc <etharp_free_entry>
 800d458:	e7f1      	b.n	800d43e <etharp_cleanup_netif+0xa>
}
 800d45a:	bd70      	pop	{r4, r5, r6, pc}
 800d45c:	20010838 	.word	0x20010838

0800d460 <etharp_input>:
{
 800d460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d464:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d466:	b1a9      	cbz	r1, 800d494 <etharp_input+0x34>
 800d468:	4604      	mov	r4, r0
 800d46a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800d46c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d46e:	882b      	ldrh	r3, [r5, #0]
 800d470:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d474:	d108      	bne.n	800d488 <etharp_input+0x28>
 800d476:	792b      	ldrb	r3, [r5, #4]
 800d478:	2b06      	cmp	r3, #6
 800d47a:	d105      	bne.n	800d488 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d47c:	796b      	ldrb	r3, [r5, #5]
 800d47e:	2b04      	cmp	r3, #4
 800d480:	d102      	bne.n	800d488 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d482:	886b      	ldrh	r3, [r5, #2]
 800d484:	2b08      	cmp	r3, #8
 800d486:	d00d      	beq.n	800d4a4 <etharp_input+0x44>
    pbuf_free(p);
 800d488:	4620      	mov	r0, r4
 800d48a:	f7fb f86f 	bl	800856c <pbuf_free>
}
 800d48e:	b007      	add	sp, #28
 800d490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d494:	4b44      	ldr	r3, [pc, #272]	; (800d5a8 <etharp_input+0x148>)
 800d496:	f240 228a 	movw	r2, #650	; 0x28a
 800d49a:	4944      	ldr	r1, [pc, #272]	; (800d5ac <etharp_input+0x14c>)
 800d49c:	4844      	ldr	r0, [pc, #272]	; (800d5b0 <etharp_input+0x150>)
 800d49e:	f001 fd41 	bl	800ef24 <iprintf>
 800d4a2:	e7f4      	b.n	800d48e <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d4a4:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800d4a8:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d4aa:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d4ac:	684b      	ldr	r3, [r1, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d153      	bne.n	800d55a <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d4b2:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 800d4b6:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d4ba:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d4be:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800d4c2:	2b06      	cmp	r3, #6
 800d4c4:	d155      	bne.n	800d572 <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 800d4c6:	9805      	ldr	r0, [sp, #20]
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d03e      	beq.n	800d54a <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4cc:	4631      	mov	r1, r6
 800d4ce:	f000 fd5c 	bl	800df8a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800d4d2:	2800      	cmp	r0, #0
 800d4d4:	d139      	bne.n	800d54a <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 800d4d6:	9b05      	ldr	r3, [sp, #20]
 800d4d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d4dc:	2be0      	cmp	r3, #224	; 0xe0
 800d4de:	d034      	beq.n	800d54a <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 800d4e0:	4632      	mov	r2, r6
 800d4e2:	4641      	mov	r1, r8
 800d4e4:	a805      	add	r0, sp, #20
 800d4e6:	f7ff fe83 	bl	800d1f0 <etharp_find_entry>
  if (i < 0) {
 800d4ea:	1e03      	subs	r3, r0, #0
 800d4ec:	db2d      	blt.n	800d54a <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d4ee:	4931      	ldr	r1, [pc, #196]	; (800d5b4 <etharp_input+0x154>)
 800d4f0:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 800d4f4:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 800d4f8:	2202      	movs	r2, #2
 800d4fa:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 800d4fe:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d502:	4672      	mov	r2, lr
 800d504:	00d2      	lsls	r2, r2, #3
 800d506:	320c      	adds	r2, #12
 800d508:	eb01 0802 	add.w	r8, r1, r2
 800d50c:	6838      	ldr	r0, [r7, #0]
 800d50e:	5088      	str	r0, [r1, r2]
 800d510:	88ba      	ldrh	r2, [r7, #4]
 800d512:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 800d516:	2200      	movs	r2, #0
 800d518:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 800d51c:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 800d520:	f1b8 0f00 	cmp.w	r8, #0
 800d524:	d011      	beq.n	800d54a <etharp_input+0xea>
    arp_table[i].q = NULL;
 800d526:	4673      	mov	r3, lr
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	460a      	mov	r2, r1
 800d52c:	2100      	movs	r1, #0
 800d52e:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	463b      	mov	r3, r7
 800d538:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800d53c:	4641      	mov	r1, r8
 800d53e:	4630      	mov	r0, r6
 800d540:	f001 f9f4 	bl	800e92c <ethernet_output>
    pbuf_free(p);
 800d544:	4640      	mov	r0, r8
 800d546:	f7fb f811 	bl	800856c <pbuf_free>
  switch (hdr->opcode) {
 800d54a:	88eb      	ldrh	r3, [r5, #6]
 800d54c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d550:	d017      	beq.n	800d582 <etharp_input+0x122>
  pbuf_free(p);
 800d552:	4620      	mov	r0, r4
 800d554:	f7fb f80a 	bl	800856c <pbuf_free>
 800d558:	e799      	b.n	800d48e <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d55a:	f105 0708 	add.w	r7, r5, #8
 800d55e:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d560:	bf19      	ittee	ne
 800d562:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d566:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d56a:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d56e:	46c8      	moveq	r8, r9
 800d570:	e7a5      	b.n	800d4be <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d572:	4b0d      	ldr	r3, [pc, #52]	; (800d5a8 <etharp_input+0x148>)
 800d574:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d578:	490f      	ldr	r1, [pc, #60]	; (800d5b8 <etharp_input+0x158>)
 800d57a:	480d      	ldr	r0, [pc, #52]	; (800d5b0 <etharp_input+0x150>)
 800d57c:	f001 fcd2 	bl	800ef24 <iprintf>
 800d580:	e7a1      	b.n	800d4c6 <etharp_input+0x66>
      if (for_us) {
 800d582:	f1b9 0f00 	cmp.w	r9, #0
 800d586:	d0e4      	beq.n	800d552 <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d588:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 800d58c:	2302      	movs	r3, #2
 800d58e:	9303      	str	r3, [sp, #12]
 800d590:	ab05      	add	r3, sp, #20
 800d592:	9302      	str	r3, [sp, #8]
 800d594:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d596:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	460b      	mov	r3, r1
 800d59c:	463a      	mov	r2, r7
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f7ff fed4 	bl	800d34c <etharp_raw>
 800d5a4:	e7d5      	b.n	800d552 <etharp_input+0xf2>
 800d5a6:	bf00      	nop
 800d5a8:	08012f04 	.word	0x08012f04
 800d5ac:	0800fe50 	.word	0x0800fe50
 800d5b0:	0800fe60 	.word	0x0800fe60
 800d5b4:	20010838 	.word	0x20010838
 800d5b8:	08013018 	.word	0x08013018

0800d5bc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d5bc:	b510      	push	{r4, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d5c2:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800d5c6:	2401      	movs	r4, #1
 800d5c8:	9403      	str	r4, [sp, #12]
 800d5ca:	9102      	str	r1, [sp, #8]
 800d5cc:	4904      	ldr	r1, [pc, #16]	; (800d5e0 <etharp_request+0x24>)
 800d5ce:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d5d0:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d5d2:	9200      	str	r2, [sp, #0]
 800d5d4:	4a03      	ldr	r2, [pc, #12]	; (800d5e4 <etharp_request+0x28>)
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	f7ff feb8 	bl	800d34c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800d5dc:	b004      	add	sp, #16
 800d5de:	bd10      	pop	{r4, pc}
 800d5e0:	080133ec 	.word	0x080133ec
 800d5e4:	080133e4 	.word	0x080133e4

0800d5e8 <etharp_tmr>:
{
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5ea:	4c14      	ldr	r4, [pc, #80]	; (800d63c <etharp_tmr+0x54>)
 800d5ec:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5ee:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5f0:	2604      	movs	r6, #4
 800d5f2:	e008      	b.n	800d606 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d5f4:	2b04      	cmp	r3, #4
 800d5f6:	d91b      	bls.n	800d630 <etharp_tmr+0x48>
        etharp_free_entry(i);
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	f7ff fddf 	bl	800d1bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5fe:	3501      	adds	r5, #1
 800d600:	3418      	adds	r4, #24
 800d602:	2d0a      	cmp	r5, #10
 800d604:	d018      	beq.n	800d638 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 800d606:	4621      	mov	r1, r4
 800d608:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800d60a:	2a00      	cmp	r2, #0
 800d60c:	d0f7      	beq.n	800d5fe <etharp_tmr+0x16>
      arp_table[i].ctime++;
 800d60e:	89e3      	ldrh	r3, [r4, #14]
 800d610:	3301      	adds	r3, #1
 800d612:	b29b      	uxth	r3, r3
 800d614:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d616:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d61a:	d2ed      	bcs.n	800d5f8 <etharp_tmr+0x10>
 800d61c:	2a01      	cmp	r2, #1
 800d61e:	d0e9      	beq.n	800d5f4 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d620:	2a03      	cmp	r2, #3
 800d622:	d003      	beq.n	800d62c <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d624:	2a04      	cmp	r2, #4
 800d626:	d1ea      	bne.n	800d5fe <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d628:	7427      	strb	r7, [r4, #16]
 800d62a:	e7e8      	b.n	800d5fe <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d62c:	7426      	strb	r6, [r4, #16]
 800d62e:	e7e6      	b.n	800d5fe <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d630:	6860      	ldr	r0, [r4, #4]
 800d632:	f7ff ffc3 	bl	800d5bc <etharp_request>
 800d636:	e7e2      	b.n	800d5fe <etharp_tmr+0x16>
}
 800d638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d63a:	bf00      	nop
 800d63c:	2001083c 	.word	0x2001083c

0800d640 <etharp_output_to_arp_index>:
{
 800d640:	b570      	push	{r4, r5, r6, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	4605      	mov	r5, r0
 800d646:	460e      	mov	r6, r1
 800d648:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d64a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d64e:	4b32      	ldr	r3, [pc, #200]	; (800d718 <etharp_output_to_arp_index+0xd8>)
 800d650:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d654:	7d1b      	ldrb	r3, [r3, #20]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d919      	bls.n	800d68e <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d65a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d65e:	4a2e      	ldr	r2, [pc, #184]	; (800d718 <etharp_output_to_arp_index+0xd8>)
 800d660:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d664:	7d1b      	ldrb	r3, [r3, #20]
 800d666:	2b02      	cmp	r3, #2
 800d668:	d019      	beq.n	800d69e <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d66a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d66e:	4b2a      	ldr	r3, [pc, #168]	; (800d718 <etharp_output_to_arp_index+0xd8>)
 800d670:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	f104 030c 	add.w	r3, r4, #12
 800d67e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800d682:	4631      	mov	r1, r6
 800d684:	4628      	mov	r0, r5
 800d686:	f001 f951 	bl	800e92c <ethernet_output>
}
 800d68a:	b004      	add	sp, #16
 800d68c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d68e:	4b23      	ldr	r3, [pc, #140]	; (800d71c <etharp_output_to_arp_index+0xdc>)
 800d690:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d694:	4922      	ldr	r1, [pc, #136]	; (800d720 <etharp_output_to_arp_index+0xe0>)
 800d696:	4823      	ldr	r0, [pc, #140]	; (800d724 <etharp_output_to_arp_index+0xe4>)
 800d698:	f001 fc44 	bl	800ef24 <iprintf>
 800d69c:	e7dd      	b.n	800d65a <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d69e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6a2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6a6:	8a5b      	ldrh	r3, [r3, #18]
 800d6a8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d6ac:	d822      	bhi.n	800d6f4 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d6ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d6b2:	d3da      	bcc.n	800d66a <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d6b4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800d6b8:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d6ba:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d6be:	4a16      	ldr	r2, [pc, #88]	; (800d718 <etharp_output_to_arp_index+0xd8>)
 800d6c0:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d6c8:	3004      	adds	r0, #4
 800d6ca:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d6cc:	9002      	str	r0, [sp, #8]
 800d6ce:	4b16      	ldr	r3, [pc, #88]	; (800d728 <etharp_output_to_arp_index+0xe8>)
 800d6d0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d6d2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	4462      	add	r2, ip
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f7ff fe36 	bl	800d34c <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d1c2      	bne.n	800d66a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d6e4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6e8:	4a0b      	ldr	r2, [pc, #44]	; (800d718 <etharp_output_to_arp_index+0xd8>)
 800d6ea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	751a      	strb	r2, [r3, #20]
 800d6f2:	e7ba      	b.n	800d66a <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d6f4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d6f8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800d6fc:	3104      	adds	r1, #4
 800d6fe:	4628      	mov	r0, r5
 800d700:	f7ff ff5c 	bl	800d5bc <etharp_request>
 800d704:	2800      	cmp	r0, #0
 800d706:	d1b0      	bne.n	800d66a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d708:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d70c:	4a02      	ldr	r2, [pc, #8]	; (800d718 <etharp_output_to_arp_index+0xd8>)
 800d70e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d712:	2203      	movs	r2, #3
 800d714:	751a      	strb	r2, [r3, #20]
 800d716:	e7a8      	b.n	800d66a <etharp_output_to_arp_index+0x2a>
 800d718:	20010838 	.word	0x20010838
 800d71c:	08012f04 	.word	0x08012f04
 800d720:	0801303c 	.word	0x0801303c
 800d724:	0800fe60 	.word	0x0800fe60
 800d728:	080133ec 	.word	0x080133ec

0800d72c <etharp_query>:
{
 800d72c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d730:	b083      	sub	sp, #12
 800d732:	4606      	mov	r6, r0
 800d734:	460d      	mov	r5, r1
 800d736:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d738:	4601      	mov	r1, r0
 800d73a:	6828      	ldr	r0, [r5, #0]
 800d73c:	f000 fc25 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800d740:	2800      	cmp	r0, #0
 800d742:	d16b      	bne.n	800d81c <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 800d744:	682b      	ldr	r3, [r5, #0]
 800d746:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d74a:	2ae0      	cmp	r2, #224	; 0xe0
 800d74c:	d069      	beq.n	800d822 <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d06a      	beq.n	800d828 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d752:	4632      	mov	r2, r6
 800d754:	2101      	movs	r1, #1
 800d756:	4628      	mov	r0, r5
 800d758:	f7ff fd4a 	bl	800d1f0 <etharp_find_entry>
  if (i_err < 0) {
 800d75c:	1e04      	subs	r4, r0, #0
 800d75e:	db2b      	blt.n	800d7b8 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d760:	b2a3      	uxth	r3, r4
 800d762:	2b7e      	cmp	r3, #126	; 0x7e
 800d764:	d82a      	bhi.n	800d7bc <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 800d766:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d768:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d76c:	4b46      	ldr	r3, [pc, #280]	; (800d888 <etharp_query+0x15c>)
 800d76e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d772:	7d1b      	ldrb	r3, [r3, #20]
 800d774:	2b00      	cmp	r3, #0
 800d776:	f040 8082 	bne.w	800d87e <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d77a:	4613      	mov	r3, r2
 800d77c:	4a42      	ldr	r2, [pc, #264]	; (800d888 <etharp_query+0x15c>)
 800d77e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d782:	2201      	movs	r2, #1
 800d784:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 800d786:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800d788:	4629      	mov	r1, r5
 800d78a:	4630      	mov	r0, r6
 800d78c:	f7ff ff16 	bl	800d5bc <etharp_request>
    if (q == NULL) {
 800d790:	b36f      	cbz	r7, 800d7ee <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d792:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d796:	4a3c      	ldr	r2, [pc, #240]	; (800d888 <etharp_query+0x15c>)
 800d798:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d79c:	7d1b      	ldrb	r3, [r3, #20]
 800d79e:	2b01      	cmp	r3, #1
 800d7a0:	d814      	bhi.n	800d7cc <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d123      	bne.n	800d7ee <etharp_query+0xc2>
    while (p) {
 800d7a6:	2f00      	cmp	r7, #0
 800d7a8:	d044      	beq.n	800d834 <etharp_query+0x108>
    p = q;
 800d7aa:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d7ac:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800d890 <etharp_query+0x164>
 800d7b0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800d89c <etharp_query+0x170>
 800d7b4:	4e35      	ldr	r6, [pc, #212]	; (800d88c <etharp_query+0x160>)
 800d7b6:	e023      	b.n	800d800 <etharp_query+0xd4>
    return (err_t)i_err;
 800d7b8:	b260      	sxtb	r0, r4
 800d7ba:	e018      	b.n	800d7ee <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d7bc:	4b34      	ldr	r3, [pc, #208]	; (800d890 <etharp_query+0x164>)
 800d7be:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d7c2:	4934      	ldr	r1, [pc, #208]	; (800d894 <etharp_query+0x168>)
 800d7c4:	4831      	ldr	r0, [pc, #196]	; (800d88c <etharp_query+0x160>)
 800d7c6:	f001 fbad 	bl	800ef24 <iprintf>
 800d7ca:	e7cc      	b.n	800d766 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 800d7cc:	4b32      	ldr	r3, [pc, #200]	; (800d898 <etharp_query+0x16c>)
 800d7ce:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d7d0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d7d4:	4b2c      	ldr	r3, [pc, #176]	; (800d888 <etharp_query+0x15c>)
 800d7d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d7da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7de:	9200      	str	r2, [sp, #0]
 800d7e0:	330c      	adds	r3, #12
 800d7e2:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800d7e6:	4639      	mov	r1, r7
 800d7e8:	4630      	mov	r0, r6
 800d7ea:	f001 f89f 	bl	800e92c <ethernet_output>
}
 800d7ee:	b003      	add	sp, #12
 800d7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 800d7f4:	7b2b      	ldrb	r3, [r5, #12]
 800d7f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d7fa:	d128      	bne.n	800d84e <etharp_query+0x122>
      p = p->next;
 800d7fc:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800d7fe:	b1cd      	cbz	r5, 800d834 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d800:	896a      	ldrh	r2, [r5, #10]
 800d802:	892b      	ldrh	r3, [r5, #8]
 800d804:	429a      	cmp	r2, r3
 800d806:	d1f5      	bne.n	800d7f4 <etharp_query+0xc8>
 800d808:	682b      	ldr	r3, [r5, #0]
 800d80a:	b1e3      	cbz	r3, 800d846 <etharp_query+0x11a>
 800d80c:	464b      	mov	r3, r9
 800d80e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d812:	4641      	mov	r1, r8
 800d814:	4630      	mov	r0, r6
 800d816:	f001 fb85 	bl	800ef24 <iprintf>
 800d81a:	e7eb      	b.n	800d7f4 <etharp_query+0xc8>
    return ERR_ARG;
 800d81c:	f06f 000f 	mvn.w	r0, #15
 800d820:	e7e5      	b.n	800d7ee <etharp_query+0xc2>
 800d822:	f06f 000f 	mvn.w	r0, #15
 800d826:	e7e2      	b.n	800d7ee <etharp_query+0xc2>
 800d828:	f06f 000f 	mvn.w	r0, #15
 800d82c:	e7df      	b.n	800d7ee <etharp_query+0xc2>
      result = ERR_MEM;
 800d82e:	f04f 30ff 	mov.w	r0, #4294967295
 800d832:	e7dc      	b.n	800d7ee <etharp_query+0xc2>
      pbuf_ref(p);
 800d834:	4638      	mov	r0, r7
 800d836:	f7fb f81d 	bl	8008874 <pbuf_ref>
 800d83a:	e00f      	b.n	800d85c <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 800d83c:	4629      	mov	r1, r5
 800d83e:	4630      	mov	r0, r6
 800d840:	f7ff febc 	bl	800d5bc <etharp_request>
    if (q == NULL) {
 800d844:	e7d3      	b.n	800d7ee <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 800d846:	7b2b      	ldrb	r3, [r5, #12]
 800d848:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d84c:	d0f2      	beq.n	800d834 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d84e:	463a      	mov	r2, r7
 800d850:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d854:	200e      	movs	r0, #14
 800d856:	f7fb f957 	bl	8008b08 <pbuf_clone>
 800d85a:	4607      	mov	r7, r0
    if (p != NULL) {
 800d85c:	2f00      	cmp	r7, #0
 800d85e:	d0e6      	beq.n	800d82e <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 800d860:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d864:	4a08      	ldr	r2, [pc, #32]	; (800d888 <etharp_query+0x15c>)
 800d866:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d86a:	b108      	cbz	r0, 800d870 <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 800d86c:	f7fa fe7e 	bl	800856c <pbuf_free>
      arp_table[i].q = p;
 800d870:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d874:	4a04      	ldr	r2, [pc, #16]	; (800d888 <etharp_query+0x15c>)
 800d876:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 800d87a:	2000      	movs	r0, #0
 800d87c:	e7b7      	b.n	800d7ee <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800d87e:	2f00      	cmp	r7, #0
 800d880:	d0dc      	beq.n	800d83c <etharp_query+0x110>
  err_t result = ERR_MEM;
 800d882:	f04f 30ff 	mov.w	r0, #4294967295
 800d886:	e784      	b.n	800d792 <etharp_query+0x66>
 800d888:	20010838 	.word	0x20010838
 800d88c:	0800fe60 	.word	0x0800fe60
 800d890:	08012f04 	.word	0x08012f04
 800d894:	0801306c 	.word	0x0801306c
 800d898:	20010928 	.word	0x20010928
 800d89c:	0801307c 	.word	0x0801307c

0800d8a0 <etharp_output>:
{
 800d8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	460e      	mov	r6, r1
 800d8a6:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d8a8:	4605      	mov	r5, r0
 800d8aa:	2800      	cmp	r0, #0
 800d8ac:	d032      	beq.n	800d914 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d8ae:	2e00      	cmp	r6, #0
 800d8b0:	d038      	beq.n	800d924 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d8b2:	2c00      	cmp	r4, #0
 800d8b4:	d03e      	beq.n	800d934 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d8b6:	4629      	mov	r1, r5
 800d8b8:	6820      	ldr	r0, [r4, #0]
 800d8ba:	f000 fb66 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	f040 8082 	bne.w	800d9c8 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d8c4:	6823      	ldr	r3, [r4, #0]
 800d8c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d8ca:	2ae0      	cmp	r2, #224	; 0xe0
 800d8cc:	d03a      	beq.n	800d944 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d8ce:	686a      	ldr	r2, [r5, #4]
 800d8d0:	405a      	eors	r2, r3
 800d8d2:	68a9      	ldr	r1, [r5, #8]
 800d8d4:	420a      	tst	r2, r1
 800d8d6:	d009      	beq.n	800d8ec <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800d8d8:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d8da:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d004      	beq.n	800d8ec <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d8e2:	68eb      	ldr	r3, [r5, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d07b      	beq.n	800d9e0 <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800d8e8:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d8ec:	4b3e      	ldr	r3, [pc, #248]	; (800d9e8 <etharp_output+0x148>)
 800d8ee:	781a      	ldrb	r2, [r3, #0]
 800d8f0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d8f4:	4b3d      	ldr	r3, [pc, #244]	; (800d9ec <etharp_output+0x14c>)
 800d8f6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d8fa:	7d1b      	ldrb	r3, [r3, #20]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d906      	bls.n	800d90e <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d900:	460b      	mov	r3, r1
 800d902:	493a      	ldr	r1, [pc, #232]	; (800d9ec <etharp_output+0x14c>)
 800d904:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d908:	689b      	ldr	r3, [r3, #8]
 800d90a:	42ab      	cmp	r3, r5
 800d90c:	d030      	beq.n	800d970 <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d90e:	4b37      	ldr	r3, [pc, #220]	; (800d9ec <etharp_output+0x14c>)
{
 800d910:	2000      	movs	r0, #0
 800d912:	e03f      	b.n	800d994 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d914:	4b36      	ldr	r3, [pc, #216]	; (800d9f0 <etharp_output+0x150>)
 800d916:	f240 321e 	movw	r2, #798	; 0x31e
 800d91a:	4936      	ldr	r1, [pc, #216]	; (800d9f4 <etharp_output+0x154>)
 800d91c:	4836      	ldr	r0, [pc, #216]	; (800d9f8 <etharp_output+0x158>)
 800d91e:	f001 fb01 	bl	800ef24 <iprintf>
 800d922:	e7c4      	b.n	800d8ae <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d924:	4b32      	ldr	r3, [pc, #200]	; (800d9f0 <etharp_output+0x150>)
 800d926:	f240 321f 	movw	r2, #799	; 0x31f
 800d92a:	4934      	ldr	r1, [pc, #208]	; (800d9fc <etharp_output+0x15c>)
 800d92c:	4832      	ldr	r0, [pc, #200]	; (800d9f8 <etharp_output+0x158>)
 800d92e:	f001 faf9 	bl	800ef24 <iprintf>
 800d932:	e7be      	b.n	800d8b2 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d934:	4b2e      	ldr	r3, [pc, #184]	; (800d9f0 <etharp_output+0x150>)
 800d936:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d93a:	4931      	ldr	r1, [pc, #196]	; (800da00 <etharp_output+0x160>)
 800d93c:	482e      	ldr	r0, [pc, #184]	; (800d9f8 <etharp_output+0x158>)
 800d93e:	f001 faf1 	bl	800ef24 <iprintf>
 800d942:	e7b8      	b.n	800d8b6 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d944:	2301      	movs	r3, #1
 800d946:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d94a:	2300      	movs	r3, #0
 800d94c:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d950:	235e      	movs	r3, #94	; 0x5e
 800d952:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d956:	7863      	ldrb	r3, [r4, #1]
 800d958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d95c:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d960:	78a3      	ldrb	r3, [r4, #2]
 800d962:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d966:	78e3      	ldrb	r3, [r4, #3]
 800d968:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800d96c:	ab02      	add	r3, sp, #8
 800d96e:	e02c      	b.n	800d9ca <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d970:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d974:	491d      	ldr	r1, [pc, #116]	; (800d9ec <etharp_output+0x14c>)
 800d976:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d97a:	6821      	ldr	r1, [r4, #0]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	4299      	cmp	r1, r3
 800d980:	d1c5      	bne.n	800d90e <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d982:	4631      	mov	r1, r6
 800d984:	4628      	mov	r0, r5
 800d986:	f7ff fe5b 	bl	800d640 <etharp_output_to_arp_index>
 800d98a:	e027      	b.n	800d9dc <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d98c:	3001      	adds	r0, #1
 800d98e:	3318      	adds	r3, #24
 800d990:	280a      	cmp	r0, #10
 800d992:	d013      	beq.n	800d9bc <etharp_output+0x11c>
 800d994:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d996:	f893 c014 	ldrb.w	ip, [r3, #20]
 800d99a:	f1bc 0f01 	cmp.w	ip, #1
 800d99e:	d9f5      	bls.n	800d98c <etharp_output+0xec>
 800d9a0:	6899      	ldr	r1, [r3, #8]
 800d9a2:	42a9      	cmp	r1, r5
 800d9a4:	d1f2      	bne.n	800d98c <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 800d9a6:	6821      	ldr	r1, [r4, #0]
 800d9a8:	685f      	ldr	r7, [r3, #4]
 800d9aa:	42b9      	cmp	r1, r7
 800d9ac:	d1ee      	bne.n	800d98c <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 800d9ae:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <etharp_output+0x148>)
 800d9b0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d9b2:	4631      	mov	r1, r6
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f7ff fe43 	bl	800d640 <etharp_output_to_arp_index>
 800d9ba:	e00f      	b.n	800d9dc <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800d9bc:	4632      	mov	r2, r6
 800d9be:	4621      	mov	r1, r4
 800d9c0:	4628      	mov	r0, r5
 800d9c2:	f7ff feb3 	bl	800d72c <etharp_query>
 800d9c6:	e009      	b.n	800d9dc <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800d9c8:	4b0e      	ldr	r3, [pc, #56]	; (800da04 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d9ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d9ce:	9200      	str	r2, [sp, #0]
 800d9d0:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800d9d4:	4631      	mov	r1, r6
 800d9d6:	4628      	mov	r0, r5
 800d9d8:	f000 ffa8 	bl	800e92c <ethernet_output>
}
 800d9dc:	b005      	add	sp, #20
 800d9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800d9e0:	f06f 0003 	mvn.w	r0, #3
 800d9e4:	e7fa      	b.n	800d9dc <etharp_output+0x13c>
 800d9e6:	bf00      	nop
 800d9e8:	20010928 	.word	0x20010928
 800d9ec:	20010838 	.word	0x20010838
 800d9f0:	08012f04 	.word	0x08012f04
 800d9f4:	0800fe50 	.word	0x0800fe50
 800d9f8:	0800fe60 	.word	0x0800fe60
 800d9fc:	08013098 	.word	0x08013098
 800da00:	08012ff8 	.word	0x08012ff8
 800da04:	080133e4 	.word	0x080133e4

0800da08 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800da08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da0c:	b086      	sub	sp, #24
 800da0e:	4606      	mov	r6, r0
 800da10:	4688      	mov	r8, r1
 800da12:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800da14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da18:	2124      	movs	r1, #36	; 0x24
 800da1a:	2022      	movs	r0, #34	; 0x22
 800da1c:	f7fa fe16 	bl	800864c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800da20:	b3a0      	cbz	r0, 800da8c <icmp_send_response+0x84>
 800da22:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800da24:	8943      	ldrh	r3, [r0, #10]
 800da26:	2b23      	cmp	r3, #35	; 0x23
 800da28:	d933      	bls.n	800da92 <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800da2a:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800da2e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800da30:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800da34:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800da36:	2300      	movs	r3, #0
 800da38:	7123      	strb	r3, [r4, #4]
 800da3a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800da3c:	71a3      	strb	r3, [r4, #6]
 800da3e:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800da40:	686b      	ldr	r3, [r5, #4]
 800da42:	6872      	ldr	r2, [r6, #4]
 800da44:	6816      	ldr	r6, [r2, #0]
 800da46:	6850      	ldr	r0, [r2, #4]
 800da48:	6891      	ldr	r1, [r2, #8]
 800da4a:	68d7      	ldr	r7, [r2, #12]
 800da4c:	609e      	str	r6, [r3, #8]
 800da4e:	60d8      	str	r0, [r3, #12]
 800da50:	6119      	str	r1, [r3, #16]
 800da52:	615f      	str	r7, [r3, #20]
 800da54:	6916      	ldr	r6, [r2, #16]
 800da56:	6950      	ldr	r0, [r2, #20]
 800da58:	6991      	ldr	r1, [r2, #24]
 800da5a:	619e      	str	r6, [r3, #24]
 800da5c:	61d8      	str	r0, [r3, #28]
 800da5e:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800da60:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800da64:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800da66:	a805      	add	r0, sp, #20
 800da68:	f000 f8ee 	bl	800dc48 <ip4_route>
#endif
  if (netif != NULL) {
 800da6c:	b158      	cbz	r0, 800da86 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800da6e:	2100      	movs	r1, #0
 800da70:	70a1      	strb	r1, [r4, #2]
 800da72:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800da74:	9002      	str	r0, [sp, #8]
 800da76:	2301      	movs	r3, #1
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	9100      	str	r1, [sp, #0]
 800da7c:	23ff      	movs	r3, #255	; 0xff
 800da7e:	aa05      	add	r2, sp, #20
 800da80:	4628      	mov	r0, r5
 800da82:	f000 fa6d 	bl	800df60 <ip4_output_if>
  }
  pbuf_free(q);
 800da86:	4628      	mov	r0, r5
 800da88:	f7fa fd70 	bl	800856c <pbuf_free>
}
 800da8c:	b006      	add	sp, #24
 800da8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800da92:	4b04      	ldr	r3, [pc, #16]	; (800daa4 <icmp_send_response+0x9c>)
 800da94:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800da98:	4903      	ldr	r1, [pc, #12]	; (800daa8 <icmp_send_response+0xa0>)
 800da9a:	4804      	ldr	r0, [pc, #16]	; (800daac <icmp_send_response+0xa4>)
 800da9c:	f001 fa42 	bl	800ef24 <iprintf>
 800daa0:	e7c3      	b.n	800da2a <icmp_send_response+0x22>
 800daa2:	bf00      	nop
 800daa4:	080130a4 	.word	0x080130a4
 800daa8:	080130dc 	.word	0x080130dc
 800daac:	0800fe60 	.word	0x0800fe60

0800dab0 <icmp_input>:
{
 800dab0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dab4:	b085      	sub	sp, #20
 800dab6:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800dab8:	4b4a      	ldr	r3, [pc, #296]	; (800dbe4 <icmp_input+0x134>)
 800daba:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800dabc:	783b      	ldrb	r3, [r7, #0]
 800dabe:	f003 030f 	and.w	r3, r3, #15
 800dac2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800dac6:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800dac8:	2c13      	cmp	r4, #19
 800daca:	d915      	bls.n	800daf8 <icmp_input+0x48>
 800dacc:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800dace:	8943      	ldrh	r3, [r0, #10]
 800dad0:	2b03      	cmp	r3, #3
 800dad2:	d911      	bls.n	800daf8 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800dad4:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	2b08      	cmp	r3, #8
 800dada:	d161      	bne.n	800dba0 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dadc:	4b41      	ldr	r3, [pc, #260]	; (800dbe4 <icmp_input+0x134>)
 800dade:	6958      	ldr	r0, [r3, #20]
 800dae0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800dae4:	2be0      	cmp	r3, #224	; 0xe0
 800dae6:	d01a      	beq.n	800db1e <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800dae8:	4b3e      	ldr	r3, [pc, #248]	; (800dbe4 <icmp_input+0x134>)
 800daea:	6819      	ldr	r1, [r3, #0]
 800daec:	f000 fa4d 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800daf0:	b9a8      	cbnz	r0, 800db1e <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800daf2:	892b      	ldrh	r3, [r5, #8]
 800daf4:	2b07      	cmp	r3, #7
 800daf6:	d805      	bhi.n	800db04 <icmp_input+0x54>
  pbuf_free(p);
 800daf8:	4628      	mov	r0, r5
 800dafa:	f7fa fd37 	bl	800856c <pbuf_free>
}
 800dafe:	b005      	add	sp, #20
 800db00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db04:	f108 090e 	add.w	r9, r8, #14
 800db08:	4649      	mov	r1, r9
 800db0a:	4628      	mov	r0, r5
 800db0c:	f7fa fce9 	bl	80084e2 <pbuf_add_header>
 800db10:	2800      	cmp	r0, #0
 800db12:	d03a      	beq.n	800db8a <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800db14:	892a      	ldrh	r2, [r5, #8]
 800db16:	1913      	adds	r3, r2, r4
 800db18:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800db1a:	428a      	cmp	r2, r1
 800db1c:	d903      	bls.n	800db26 <icmp_input+0x76>
  pbuf_free(p);
 800db1e:	4628      	mov	r0, r5
 800db20:	f7fa fd24 	bl	800856c <pbuf_free>
  return;
 800db24:	e7eb      	b.n	800dafe <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800db26:	f44f 7220 	mov.w	r2, #640	; 0x280
 800db2a:	200e      	movs	r0, #14
 800db2c:	f7fa fd8e 	bl	800864c <pbuf_alloc>
        if (r == NULL) {
 800db30:	4604      	mov	r4, r0
 800db32:	2800      	cmp	r0, #0
 800db34:	d0f3      	beq.n	800db1e <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800db36:	8942      	ldrh	r2, [r0, #10]
 800db38:	f108 0308 	add.w	r3, r8, #8
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d313      	bcc.n	800db68 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800db40:	4642      	mov	r2, r8
 800db42:	4639      	mov	r1, r7
 800db44:	6840      	ldr	r0, [r0, #4]
 800db46:	f001 f942 	bl	800edce <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800db4a:	4641      	mov	r1, r8
 800db4c:	4620      	mov	r0, r4
 800db4e:	f7fa fccd 	bl	80084ec <pbuf_remove_header>
 800db52:	b960      	cbnz	r0, 800db6e <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800db54:	4629      	mov	r1, r5
 800db56:	4620      	mov	r0, r4
 800db58:	f7fa fee6 	bl	8008928 <pbuf_copy>
 800db5c:	b988      	cbnz	r0, 800db82 <icmp_input+0xd2>
        pbuf_free(p);
 800db5e:	4628      	mov	r0, r5
 800db60:	f7fa fd04 	bl	800856c <pbuf_free>
        p = r;
 800db64:	4625      	mov	r5, r4
 800db66:	e015      	b.n	800db94 <icmp_input+0xe4>
          pbuf_free(r);
 800db68:	f7fa fd00 	bl	800856c <pbuf_free>
          goto icmperr;
 800db6c:	e7d7      	b.n	800db1e <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800db6e:	4b1e      	ldr	r3, [pc, #120]	; (800dbe8 <icmp_input+0x138>)
 800db70:	22b6      	movs	r2, #182	; 0xb6
 800db72:	491e      	ldr	r1, [pc, #120]	; (800dbec <icmp_input+0x13c>)
 800db74:	481e      	ldr	r0, [pc, #120]	; (800dbf0 <icmp_input+0x140>)
 800db76:	f001 f9d5 	bl	800ef24 <iprintf>
          pbuf_free(r);
 800db7a:	4620      	mov	r0, r4
 800db7c:	f7fa fcf6 	bl	800856c <pbuf_free>
          goto icmperr;
 800db80:	e7cd      	b.n	800db1e <icmp_input+0x6e>
          pbuf_free(r);
 800db82:	4620      	mov	r0, r4
 800db84:	f7fa fcf2 	bl	800856c <pbuf_free>
          goto icmperr;
 800db88:	e7c9      	b.n	800db1e <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db8a:	4649      	mov	r1, r9
 800db8c:	4628      	mov	r0, r5
 800db8e:	f7fa fcad 	bl	80084ec <pbuf_remove_header>
 800db92:	b948      	cbnz	r0, 800dba8 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db94:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800db96:	4641      	mov	r1, r8
 800db98:	4628      	mov	r0, r5
 800db9a:	f7fa fca2 	bl	80084e2 <pbuf_add_header>
 800db9e:	b150      	cbz	r0, 800dbb6 <icmp_input+0x106>
  pbuf_free(p);
 800dba0:	4628      	mov	r0, r5
 800dba2:	f7fa fce3 	bl	800856c <pbuf_free>
  return;
 800dba6:	e7aa      	b.n	800dafe <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800dba8:	4b0f      	ldr	r3, [pc, #60]	; (800dbe8 <icmp_input+0x138>)
 800dbaa:	22c7      	movs	r2, #199	; 0xc7
 800dbac:	4911      	ldr	r1, [pc, #68]	; (800dbf4 <icmp_input+0x144>)
 800dbae:	4810      	ldr	r0, [pc, #64]	; (800dbf0 <icmp_input+0x140>)
 800dbb0:	f001 f9b8 	bl	800ef24 <iprintf>
          goto icmperr;
 800dbb4:	e7b3      	b.n	800db1e <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800dbb6:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800dbb8:	490a      	ldr	r1, [pc, #40]	; (800dbe4 <icmp_input+0x134>)
 800dbba:	694b      	ldr	r3, [r1, #20]
 800dbbc:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800dbbe:	690b      	ldr	r3, [r1, #16]
 800dbc0:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800dbc6:	70a2      	strb	r2, [r4, #2]
 800dbc8:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800dbca:	23ff      	movs	r3, #255	; 0xff
 800dbcc:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800dbce:	7282      	strb	r2, [r0, #10]
 800dbd0:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800dbd2:	9602      	str	r6, [sp, #8]
 800dbd4:	2001      	movs	r0, #1
 800dbd6:	9001      	str	r0, [sp, #4]
 800dbd8:	9200      	str	r2, [sp, #0]
 800dbda:	3114      	adds	r1, #20
 800dbdc:	4628      	mov	r0, r5
 800dbde:	f000 f9bf 	bl	800df60 <ip4_output_if>
        if (ret != ERR_OK) {
 800dbe2:	e7dd      	b.n	800dba0 <icmp_input+0xf0>
 800dbe4:	2000aeb8 	.word	0x2000aeb8
 800dbe8:	080130a4 	.word	0x080130a4
 800dbec:	08013108 	.word	0x08013108
 800dbf0:	0800fe60 	.word	0x0800fe60
 800dbf4:	08013140 	.word	0x08013140

0800dbf8 <icmp_dest_unreach>:
{
 800dbf8:	b508      	push	{r3, lr}
 800dbfa:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800dbfc:	2103      	movs	r1, #3
 800dbfe:	f7ff ff03 	bl	800da08 <icmp_send_response>
}
 800dc02:	bd08      	pop	{r3, pc}

0800dc04 <icmp_time_exceeded>:
{
 800dc04:	b508      	push	{r3, lr}
 800dc06:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800dc08:	210b      	movs	r1, #11
 800dc0a:	f7ff fefd 	bl	800da08 <icmp_send_response>
}
 800dc0e:	bd08      	pop	{r3, pc}

0800dc10 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dc10:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dc12:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dc16:	f013 0f01 	tst.w	r3, #1
 800dc1a:	d00c      	beq.n	800dc36 <ip4_input_accept+0x26>
 800dc1c:	4601      	mov	r1, r0
 800dc1e:	6843      	ldr	r3, [r0, #4]
 800dc20:	b15b      	cbz	r3, 800dc3a <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc22:	4a08      	ldr	r2, [pc, #32]	; (800dc44 <ip4_input_accept+0x34>)
 800dc24:	6950      	ldr	r0, [r2, #20]
 800dc26:	4283      	cmp	r3, r0
 800dc28:	d009      	beq.n	800dc3e <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dc2a:	f000 f9ae 	bl	800df8a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc2e:	3800      	subs	r0, #0
 800dc30:	bf18      	it	ne
 800dc32:	2001      	movne	r0, #1
 800dc34:	e000      	b.n	800dc38 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dc36:	2000      	movs	r0, #0
}
 800dc38:	bd08      	pop	{r3, pc}
  return 0;
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	e7fc      	b.n	800dc38 <ip4_input_accept+0x28>
      return 1;
 800dc3e:	2001      	movs	r0, #1
 800dc40:	e7fa      	b.n	800dc38 <ip4_input_accept+0x28>
 800dc42:	bf00      	nop
 800dc44:	2000aeb8 	.word	0x2000aeb8

0800dc48 <ip4_route>:
{
 800dc48:	b410      	push	{r4}
 800dc4a:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 800dc4c:	4b1a      	ldr	r3, [pc, #104]	; (800dcb8 <ip4_route+0x70>)
 800dc4e:	6818      	ldr	r0, [r3, #0]
 800dc50:	b9a8      	cbnz	r0, 800dc7e <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dc52:	4b1a      	ldr	r3, [pc, #104]	; (800dcbc <ip4_route+0x74>)
 800dc54:	6818      	ldr	r0, [r3, #0]
 800dc56:	b160      	cbz	r0, 800dc72 <ip4_route+0x2a>
 800dc58:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dc5c:	f003 0305 	and.w	r3, r3, #5
 800dc60:	2b05      	cmp	r3, #5
 800dc62:	d124      	bne.n	800dcae <ip4_route+0x66>
 800dc64:	6843      	ldr	r3, [r0, #4]
 800dc66:	b323      	cbz	r3, 800dcb2 <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dc68:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 800dc6c:	2b7f      	cmp	r3, #127	; 0x7f
 800dc6e:	bf08      	it	eq
 800dc70:	2000      	moveq	r0, #0
}
 800dc72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc76:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800dc78:	6800      	ldr	r0, [r0, #0]
 800dc7a:	2800      	cmp	r0, #0
 800dc7c:	d0e9      	beq.n	800dc52 <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc7e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dc82:	f013 0f01 	tst.w	r3, #1
 800dc86:	d0f7      	beq.n	800dc78 <ip4_route+0x30>
 800dc88:	f013 0f04 	tst.w	r3, #4
 800dc8c:	d0f4      	beq.n	800dc78 <ip4_route+0x30>
 800dc8e:	6842      	ldr	r2, [r0, #4]
 800dc90:	2a00      	cmp	r2, #0
 800dc92:	d0f1      	beq.n	800dc78 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dc94:	f8dc 1000 	ldr.w	r1, [ip]
 800dc98:	404a      	eors	r2, r1
 800dc9a:	6884      	ldr	r4, [r0, #8]
 800dc9c:	4222      	tst	r2, r4
 800dc9e:	d0e8      	beq.n	800dc72 <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dca0:	f013 0f02 	tst.w	r3, #2
 800dca4:	d1e8      	bne.n	800dc78 <ip4_route+0x30>
 800dca6:	68c3      	ldr	r3, [r0, #12]
 800dca8:	4299      	cmp	r1, r3
 800dcaa:	d1e5      	bne.n	800dc78 <ip4_route+0x30>
 800dcac:	e7e1      	b.n	800dc72 <ip4_route+0x2a>
    return NULL;
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e7df      	b.n	800dc72 <ip4_route+0x2a>
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	e7dd      	b.n	800dc72 <ip4_route+0x2a>
 800dcb6:	bf00      	nop
 800dcb8:	200107c4 	.word	0x200107c4
 800dcbc:	200107c0 	.word	0x200107c0

0800dcc0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dcc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcc4:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dcc6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800dcca:	f898 3000 	ldrb.w	r3, [r8]
 800dcce:	091a      	lsrs	r2, r3, #4
 800dcd0:	2a04      	cmp	r2, #4
 800dcd2:	d004      	beq.n	800dcde <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dcd4:	f7fa fc4a 	bl	800856c <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800dcd8:	2000      	movs	r0, #0
 800dcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dcde:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dce0:	f003 030f 	and.w	r3, r3, #15
 800dce4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800dce8:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dcea:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800dcee:	f7f9 fdfe 	bl	80078ee <lwip_htons>
 800dcf2:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800dcf4:	8923      	ldrh	r3, [r4, #8]
 800dcf6:	4283      	cmp	r3, r0
 800dcf8:	d860      	bhi.n	800ddbc <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dcfa:	8963      	ldrh	r3, [r4, #10]
 800dcfc:	42ab      	cmp	r3, r5
 800dcfe:	d362      	bcc.n	800ddc6 <ip4_input+0x106>
 800dd00:	8923      	ldrh	r3, [r4, #8]
 800dd02:	42b3      	cmp	r3, r6
 800dd04:	d35f      	bcc.n	800ddc6 <ip4_input+0x106>
 800dd06:	2d13      	cmp	r5, #19
 800dd08:	d95d      	bls.n	800ddc6 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dd0a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dd0e:	4a52      	ldr	r2, [pc, #328]	; (800de58 <ip4_input+0x198>)
 800dd10:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dd12:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800dd16:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dd18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd1c:	2be0      	cmp	r3, #224	; 0xe0
 800dd1e:	d156      	bne.n	800ddce <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dd20:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dd24:	f013 0f01 	tst.w	r3, #1
 800dd28:	d068      	beq.n	800ddfc <ip4_input+0x13c>
 800dd2a:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	bf14      	ite	ne
 800dd30:	463d      	movne	r5, r7
 800dd32:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd34:	4639      	mov	r1, r7
 800dd36:	4b48      	ldr	r3, [pc, #288]	; (800de58 <ip4_input+0x198>)
 800dd38:	6918      	ldr	r0, [r3, #16]
 800dd3a:	f000 f926 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800dd3e:	2800      	cmp	r0, #0
 800dd40:	d162      	bne.n	800de08 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dd42:	4b45      	ldr	r3, [pc, #276]	; (800de58 <ip4_input+0x198>)
 800dd44:	691b      	ldr	r3, [r3, #16]
 800dd46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd4a:	2be0      	cmp	r3, #224	; 0xe0
 800dd4c:	d05c      	beq.n	800de08 <ip4_input+0x148>
  if (netif == NULL) {
 800dd4e:	2d00      	cmp	r5, #0
 800dd50:	d05e      	beq.n	800de10 <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dd52:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800dd56:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	b13b      	cbz	r3, 800dd6e <ip4_input+0xae>
    p = ip4_reass(p);
 800dd5e:	4620      	mov	r0, r4
 800dd60:	f000 fa62 	bl	800e228 <ip4_reass>
    if (p == NULL) {
 800dd64:	4604      	mov	r4, r0
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d0b6      	beq.n	800dcd8 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800dd6a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800dd6e:	4a3a      	ldr	r2, [pc, #232]	; (800de58 <ip4_input+0x198>)
 800dd70:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800dd72:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dd74:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dd78:	f898 3000 	ldrb.w	r3, [r8]
 800dd7c:	f003 030f 	and.w	r3, r3, #15
 800dd80:	009b      	lsls	r3, r3, #2
 800dd82:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dd84:	4649      	mov	r1, r9
 800dd86:	4620      	mov	r0, r4
 800dd88:	f7fa fbb0 	bl	80084ec <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800dd8c:	f898 3009 	ldrb.w	r3, [r8, #9]
 800dd90:	2b06      	cmp	r3, #6
 800dd92:	d04e      	beq.n	800de32 <ip4_input+0x172>
 800dd94:	2b11      	cmp	r3, #17
 800dd96:	d03f      	beq.n	800de18 <ip4_input+0x158>
 800dd98:	2b01      	cmp	r3, #1
 800dd9a:	d04f      	beq.n	800de3c <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dd9c:	4629      	mov	r1, r5
 800dd9e:	4b2e      	ldr	r3, [pc, #184]	; (800de58 <ip4_input+0x198>)
 800dda0:	6958      	ldr	r0, [r3, #20]
 800dda2:	f000 f8f2 	bl	800df8a <ip4_addr_isbroadcast_u32>
 800dda6:	b928      	cbnz	r0, 800ddb4 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dda8:	4b2b      	ldr	r3, [pc, #172]	; (800de58 <ip4_input+0x198>)
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ddb0:	2be0      	cmp	r3, #224	; 0xe0
 800ddb2:	d148      	bne.n	800de46 <ip4_input+0x186>
        pbuf_free(p);
 800ddb4:	4620      	mov	r0, r4
 800ddb6:	f7fa fbd9 	bl	800856c <pbuf_free>
        break;
 800ddba:	e031      	b.n	800de20 <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 800ddbc:	4601      	mov	r1, r0
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	f7fa fcec 	bl	800879c <pbuf_realloc>
 800ddc4:	e799      	b.n	800dcfa <ip4_input+0x3a>
    pbuf_free(p);
 800ddc6:	4620      	mov	r0, r4
 800ddc8:	f7fa fbd0 	bl	800856c <pbuf_free>
    return ERR_OK;
 800ddcc:	e784      	b.n	800dcd8 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800ddce:	4638      	mov	r0, r7
 800ddd0:	f7ff ff1e 	bl	800dc10 <ip4_input_accept>
 800ddd4:	b9a0      	cbnz	r0, 800de00 <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800ddd6:	4b20      	ldr	r3, [pc, #128]	; (800de58 <ip4_input+0x198>)
 800ddd8:	7d1b      	ldrb	r3, [r3, #20]
 800ddda:	2b7f      	cmp	r3, #127	; 0x7f
 800dddc:	d012      	beq.n	800de04 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800ddde:	4b1f      	ldr	r3, [pc, #124]	; (800de5c <ip4_input+0x19c>)
 800dde0:	681d      	ldr	r5, [r3, #0]
 800dde2:	b91d      	cbnz	r5, 800ddec <ip4_input+0x12c>
 800dde4:	e7a6      	b.n	800dd34 <ip4_input+0x74>
 800dde6:	682d      	ldr	r5, [r5, #0]
 800dde8:	2d00      	cmp	r5, #0
 800ddea:	d0a3      	beq.n	800dd34 <ip4_input+0x74>
          if (netif == inp) {
 800ddec:	42af      	cmp	r7, r5
 800ddee:	d0fa      	beq.n	800dde6 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 800ddf0:	4628      	mov	r0, r5
 800ddf2:	f7ff ff0d 	bl	800dc10 <ip4_input_accept>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d0f5      	beq.n	800dde6 <ip4_input+0x126>
 800ddfa:	e79b      	b.n	800dd34 <ip4_input+0x74>
      netif = NULL;
 800ddfc:	2500      	movs	r5, #0
 800ddfe:	e799      	b.n	800dd34 <ip4_input+0x74>
      netif = inp;
 800de00:	463d      	mov	r5, r7
 800de02:	e797      	b.n	800dd34 <ip4_input+0x74>
      netif = NULL;
 800de04:	2500      	movs	r5, #0
 800de06:	e795      	b.n	800dd34 <ip4_input+0x74>
      pbuf_free(p);
 800de08:	4620      	mov	r0, r4
 800de0a:	f7fa fbaf 	bl	800856c <pbuf_free>
      return ERR_OK;
 800de0e:	e763      	b.n	800dcd8 <ip4_input+0x18>
    pbuf_free(p);
 800de10:	4620      	mov	r0, r4
 800de12:	f7fa fbab 	bl	800856c <pbuf_free>
    return ERR_OK;
 800de16:	e75f      	b.n	800dcd8 <ip4_input+0x18>
        udp_input(p, inp);
 800de18:	4639      	mov	r1, r7
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7fe fff0 	bl	800ce00 <udp_input>
  ip_data.current_netif = NULL;
 800de20:	4b0d      	ldr	r3, [pc, #52]	; (800de58 <ip4_input+0x198>)
 800de22:	2200      	movs	r2, #0
 800de24:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800de26:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800de28:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800de2a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800de2c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800de2e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800de30:	e752      	b.n	800dcd8 <ip4_input+0x18>
        tcp_input(p, inp);
 800de32:	4639      	mov	r1, r7
 800de34:	4620      	mov	r0, r4
 800de36:	f7fc fdf5 	bl	800aa24 <tcp_input>
        break;
 800de3a:	e7f1      	b.n	800de20 <ip4_input+0x160>
        icmp_input(p, inp);
 800de3c:	4639      	mov	r1, r7
 800de3e:	4620      	mov	r0, r4
 800de40:	f7ff fe36 	bl	800dab0 <icmp_input>
        break;
 800de44:	e7ec      	b.n	800de20 <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800de46:	4649      	mov	r1, r9
 800de48:	4620      	mov	r0, r4
 800de4a:	f7fa fb83 	bl	8008554 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800de4e:	2102      	movs	r1, #2
 800de50:	4620      	mov	r0, r4
 800de52:	f7ff fed1 	bl	800dbf8 <icmp_dest_unreach>
 800de56:	e7ad      	b.n	800ddb4 <ip4_input+0xf4>
 800de58:	2000aeb8 	.word	0x2000aeb8
 800de5c:	200107c4 	.word	0x200107c4

0800de60 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800de60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de64:	b083      	sub	sp, #12
 800de66:	4604      	mov	r4, r0
 800de68:	460f      	mov	r7, r1
 800de6a:	4616      	mov	r6, r2
 800de6c:	4699      	mov	r9, r3
 800de6e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800de72:	7b82      	ldrb	r2, [r0, #14]
 800de74:	2a01      	cmp	r2, #1
 800de76:	d13f      	bne.n	800def8 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800de78:	2e00      	cmp	r6, #0
 800de7a:	d050      	beq.n	800df1e <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800de7c:	2114      	movs	r1, #20
 800de7e:	4620      	mov	r0, r4
 800de80:	f7fa fb2f 	bl	80084e2 <pbuf_add_header>
 800de84:	2800      	cmp	r0, #0
 800de86:	d158      	bne.n	800df3a <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800de88:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800de8a:	8963      	ldrh	r3, [r4, #10]
 800de8c:	2b13      	cmp	r3, #19
 800de8e:	d93b      	bls.n	800df08 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800de90:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800de94:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800de98:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800de9a:	6833      	ldr	r3, [r6, #0]
 800de9c:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800de9e:	2345      	movs	r3, #69	; 0x45
 800dea0:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800dea2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800dea6:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800dea8:	8920      	ldrh	r0, [r4, #8]
 800deaa:	f7f9 fd20 	bl	80078ee <lwip_htons>
 800deae:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800deb0:	2300      	movs	r3, #0
 800deb2:	71ab      	strb	r3, [r5, #6]
 800deb4:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800deb6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800df5c <ip4_output_if_src+0xfc>
 800deba:	f8b9 0000 	ldrh.w	r0, [r9]
 800debe:	f7f9 fd16 	bl	80078ee <lwip_htons>
 800dec2:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dec4:	f8b9 3000 	ldrh.w	r3, [r9]
 800dec8:	3301      	adds	r3, #1
 800deca:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800dece:	b31f      	cbz	r7, 800df18 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ded4:	2300      	movs	r3, #0
 800ded6:	72ab      	strb	r3, [r5, #10]
 800ded8:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800deda:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800dede:	b113      	cbz	r3, 800dee6 <ip4_output_if_src+0x86>
 800dee0:	8922      	ldrh	r2, [r4, #8]
 800dee2:	429a      	cmp	r2, r3
 800dee4:	d823      	bhi.n	800df2e <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800dee6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800deea:	4632      	mov	r2, r6
 800deec:	4621      	mov	r1, r4
 800deee:	4640      	mov	r0, r8
 800def0:	4798      	blx	r3
}
 800def2:	b003      	add	sp, #12
 800def4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800def8:	4b13      	ldr	r3, [pc, #76]	; (800df48 <ip4_output_if_src+0xe8>)
 800defa:	f44f 7255 	mov.w	r2, #852	; 0x354
 800defe:	4913      	ldr	r1, [pc, #76]	; (800df4c <ip4_output_if_src+0xec>)
 800df00:	4813      	ldr	r0, [pc, #76]	; (800df50 <ip4_output_if_src+0xf0>)
 800df02:	f001 f80f 	bl	800ef24 <iprintf>
 800df06:	e7b7      	b.n	800de78 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800df08:	4b0f      	ldr	r3, [pc, #60]	; (800df48 <ip4_output_if_src+0xe8>)
 800df0a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800df0e:	4911      	ldr	r1, [pc, #68]	; (800df54 <ip4_output_if_src+0xf4>)
 800df10:	480f      	ldr	r0, [pc, #60]	; (800df50 <ip4_output_if_src+0xf0>)
 800df12:	f001 f807 	bl	800ef24 <iprintf>
 800df16:	e7bb      	b.n	800de90 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800df18:	4b0f      	ldr	r3, [pc, #60]	; (800df58 <ip4_output_if_src+0xf8>)
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	e7d9      	b.n	800ded2 <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 800df1e:	8963      	ldrh	r3, [r4, #10]
 800df20:	2b13      	cmp	r3, #19
 800df22:	d90d      	bls.n	800df40 <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800df24:	6863      	ldr	r3, [r4, #4]
 800df26:	691b      	ldr	r3, [r3, #16]
 800df28:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800df2a:	ae01      	add	r6, sp, #4
 800df2c:	e7d5      	b.n	800deda <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800df2e:	4632      	mov	r2, r6
 800df30:	4641      	mov	r1, r8
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fba2 	bl	800e67c <ip4_frag>
 800df38:	e7db      	b.n	800def2 <ip4_output_if_src+0x92>
      return ERR_BUF;
 800df3a:	f06f 0001 	mvn.w	r0, #1
 800df3e:	e7d8      	b.n	800def2 <ip4_output_if_src+0x92>
      return ERR_BUF;
 800df40:	f06f 0001 	mvn.w	r0, #1
 800df44:	e7d5      	b.n	800def2 <ip4_output_if_src+0x92>
 800df46:	bf00      	nop
 800df48:	08013174 	.word	0x08013174
 800df4c:	080131a8 	.word	0x080131a8
 800df50:	0800fe60 	.word	0x0800fe60
 800df54:	080131b4 	.word	0x080131b4
 800df58:	080131e4 	.word	0x080131e4
 800df5c:	2001092a 	.word	0x2001092a

0800df60 <ip4_output_if>:
{
 800df60:	b510      	push	{r4, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 800df66:	4694      	mov	ip, r2
 800df68:	b11a      	cbz	r2, 800df72 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800df6a:	b109      	cbz	r1, 800df70 <ip4_output_if+0x10>
 800df6c:	680a      	ldr	r2, [r1, #0]
 800df6e:	b902      	cbnz	r2, 800df72 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800df70:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800df72:	9402      	str	r4, [sp, #8]
 800df74:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800df78:	9201      	str	r2, [sp, #4]
 800df7a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800df7e:	9200      	str	r2, [sp, #0]
 800df80:	4662      	mov	r2, ip
 800df82:	f7ff ff6d 	bl	800de60 <ip4_output_if_src>
}
 800df86:	b004      	add	sp, #16
 800df88:	bd10      	pop	{r4, pc}

0800df8a <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800df8a:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800df8c:	1e42      	subs	r2, r0, #1
 800df8e:	f112 0f03 	cmn.w	r2, #3
 800df92:	d813      	bhi.n	800dfbc <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800df94:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 800df98:	f010 0002 	ands.w	r0, r0, #2
 800df9c:	d013      	beq.n	800dfc6 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800df9e:	684a      	ldr	r2, [r1, #4]
 800dfa0:	429a      	cmp	r2, r3
 800dfa2:	d00d      	beq.n	800dfc0 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800dfa4:	6889      	ldr	r1, [r1, #8]
 800dfa6:	405a      	eors	r2, r3
 800dfa8:	420a      	tst	r2, r1
 800dfaa:	d10b      	bne.n	800dfc4 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800dfac:	43c8      	mvns	r0, r1
 800dfae:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800dfb2:	4283      	cmp	r3, r0
 800dfb4:	bf14      	ite	ne
 800dfb6:	2000      	movne	r0, #0
 800dfb8:	2001      	moveq	r0, #1
 800dfba:	4770      	bx	lr
    return 1;
 800dfbc:	2001      	movs	r0, #1
 800dfbe:	4770      	bx	lr
    return 0;
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	4770      	bx	lr
    return 0;
 800dfc4:	2000      	movs	r0, #0
  }
}
 800dfc6:	4770      	bx	lr

0800dfc8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800dfc8:	b538      	push	{r3, r4, r5, lr}
 800dfca:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800dfcc:	4b0c      	ldr	r3, [pc, #48]	; (800e000 <ip_reass_dequeue_datagram+0x38>)
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	4283      	cmp	r3, r0
 800dfd2:	d008      	beq.n	800dfe6 <ip_reass_dequeue_datagram+0x1e>
 800dfd4:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dfd6:	b151      	cbz	r1, 800dfee <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800dfd8:	6823      	ldr	r3, [r4, #0]
 800dfda:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800dfdc:	4621      	mov	r1, r4
 800dfde:	2004      	movs	r0, #4
 800dfe0:	f7fa f802 	bl	8007fe8 <memp_free>
}
 800dfe4:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800dfe6:	6802      	ldr	r2, [r0, #0]
 800dfe8:	4b05      	ldr	r3, [pc, #20]	; (800e000 <ip_reass_dequeue_datagram+0x38>)
 800dfea:	601a      	str	r2, [r3, #0]
 800dfec:	e7f6      	b.n	800dfdc <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800dfee:	4b05      	ldr	r3, [pc, #20]	; (800e004 <ip_reass_dequeue_datagram+0x3c>)
 800dff0:	f240 1245 	movw	r2, #325	; 0x145
 800dff4:	4904      	ldr	r1, [pc, #16]	; (800e008 <ip_reass_dequeue_datagram+0x40>)
 800dff6:	4805      	ldr	r0, [pc, #20]	; (800e00c <ip_reass_dequeue_datagram+0x44>)
 800dff8:	f000 ff94 	bl	800ef24 <iprintf>
 800dffc:	e7ec      	b.n	800dfd8 <ip_reass_dequeue_datagram+0x10>
 800dffe:	bf00      	nop
 800e000:	20010930 	.word	0x20010930
 800e004:	080131e8 	.word	0x080131e8
 800e008:	08013224 	.word	0x08013224
 800e00c:	0800fe60 	.word	0x0800fe60

0800e010 <ip_reass_free_complete_datagram>:
{
 800e010:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e014:	4680      	mov	r8, r0
 800e016:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e018:	4281      	cmp	r1, r0
 800e01a:	d017      	beq.n	800e04c <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800e01c:	f1b9 0f00 	cmp.w	r9, #0
 800e020:	d009      	beq.n	800e036 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e022:	f8d9 3000 	ldr.w	r3, [r9]
 800e026:	4543      	cmp	r3, r8
 800e028:	d005      	beq.n	800e036 <ip_reass_free_complete_datagram+0x26>
 800e02a:	4b34      	ldr	r3, [pc, #208]	; (800e0fc <ip_reass_free_complete_datagram+0xec>)
 800e02c:	22ad      	movs	r2, #173	; 0xad
 800e02e:	4934      	ldr	r1, [pc, #208]	; (800e100 <ip_reass_free_complete_datagram+0xf0>)
 800e030:	4834      	ldr	r0, [pc, #208]	; (800e104 <ip_reass_free_complete_datagram+0xf4>)
 800e032:	f000 ff77 	bl	800ef24 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e036:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800e03a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800e03c:	889a      	ldrh	r2, [r3, #4]
 800e03e:	b162      	cbz	r2, 800e05a <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 800e040:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e042:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800e0fc <ip_reass_free_complete_datagram+0xec>
 800e046:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800e114 <ip_reass_free_complete_datagram+0x104>
 800e04a:	e03e      	b.n	800e0ca <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e04c:	4b2b      	ldr	r3, [pc, #172]	; (800e0fc <ip_reass_free_complete_datagram+0xec>)
 800e04e:	22ab      	movs	r2, #171	; 0xab
 800e050:	492d      	ldr	r1, [pc, #180]	; (800e108 <ip_reass_free_complete_datagram+0xf8>)
 800e052:	482c      	ldr	r0, [pc, #176]	; (800e104 <ip_reass_free_complete_datagram+0xf4>)
 800e054:	f000 ff66 	bl	800ef24 <iprintf>
 800e058:	e7e0      	b.n	800e01c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e060:	6873      	ldr	r3, [r6, #4]
 800e062:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e066:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800e06a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e06e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e072:	601a      	str	r2, [r3, #0]
 800e074:	605c      	str	r4, [r3, #4]
 800e076:	6098      	str	r0, [r3, #8]
 800e078:	60d9      	str	r1, [r3, #12]
 800e07a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e07e:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e080:	2101      	movs	r1, #1
 800e082:	4630      	mov	r0, r6
 800e084:	f7ff fdbe 	bl	800dc04 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e088:	4630      	mov	r0, r6
 800e08a:	f7fa fbe7 	bl	800885c <pbuf_clen>
 800e08e:	4604      	mov	r4, r0
    pbuf_free(p);
 800e090:	4630      	mov	r0, r6
 800e092:	f7fa fa6b 	bl	800856c <pbuf_free>
  p = ipr->p;
 800e096:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 800e09a:	2e00      	cmp	r6, #0
 800e09c:	d1d1      	bne.n	800e042 <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 800e09e:	4649      	mov	r1, r9
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	f7ff ff91 	bl	800dfc8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e0a6:	4b19      	ldr	r3, [pc, #100]	; (800e10c <ip_reass_free_complete_datagram+0xfc>)
 800e0a8:	881b      	ldrh	r3, [r3, #0]
 800e0aa:	42a3      	cmp	r3, r4
 800e0ac:	d31f      	bcc.n	800e0ee <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e0ae:	4a17      	ldr	r2, [pc, #92]	; (800e10c <ip_reass_free_complete_datagram+0xfc>)
 800e0b0:	8813      	ldrh	r3, [r2, #0]
 800e0b2:	1b1b      	subs	r3, r3, r4
 800e0b4:	8013      	strh	r3, [r2, #0]
}
 800e0b6:	4620      	mov	r0, r4
 800e0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e0bc:	4425      	add	r5, r4
 800e0be:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7fa fa53 	bl	800856c <pbuf_free>
  while (p != NULL) {
 800e0c6:	2e00      	cmp	r6, #0
 800e0c8:	d0e9      	beq.n	800e09e <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 800e0ca:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800e0cc:	4637      	mov	r7, r6
 800e0ce:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f7fa fbc3 	bl	800885c <pbuf_clen>
 800e0d6:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e0d8:	1823      	adds	r3, r4, r0
 800e0da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0de:	dbed      	blt.n	800e0bc <ip_reass_free_complete_datagram+0xac>
 800e0e0:	465b      	mov	r3, fp
 800e0e2:	22cc      	movs	r2, #204	; 0xcc
 800e0e4:	4651      	mov	r1, sl
 800e0e6:	4807      	ldr	r0, [pc, #28]	; (800e104 <ip_reass_free_complete_datagram+0xf4>)
 800e0e8:	f000 ff1c 	bl	800ef24 <iprintf>
 800e0ec:	e7e6      	b.n	800e0bc <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e0ee:	4b03      	ldr	r3, [pc, #12]	; (800e0fc <ip_reass_free_complete_datagram+0xec>)
 800e0f0:	22d2      	movs	r2, #210	; 0xd2
 800e0f2:	4907      	ldr	r1, [pc, #28]	; (800e110 <ip_reass_free_complete_datagram+0x100>)
 800e0f4:	4803      	ldr	r0, [pc, #12]	; (800e104 <ip_reass_free_complete_datagram+0xf4>)
 800e0f6:	f000 ff15 	bl	800ef24 <iprintf>
 800e0fa:	e7d8      	b.n	800e0ae <ip_reass_free_complete_datagram+0x9e>
 800e0fc:	080131e8 	.word	0x080131e8
 800e100:	0801324c 	.word	0x0801324c
 800e104:	0800fe60 	.word	0x0800fe60
 800e108:	08013240 	.word	0x08013240
 800e10c:	2001092c 	.word	0x2001092c
 800e110:	08013280 	.word	0x08013280
 800e114:	08013260 	.word	0x08013260

0800e118 <ip_reass_remove_oldest_datagram>:
{
 800e118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e11c:	4605      	mov	r5, r0
 800e11e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800e120:	2600      	movs	r6, #0
    r = reassdatagrams;
 800e122:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800e194 <ip_reass_remove_oldest_datagram+0x7c>
 800e126:	e027      	b.n	800e178 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 800e128:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800e12a:	b1d0      	cbz	r0, 800e162 <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800e12c:	f893 901f 	ldrb.w	r9, [r3, #31]
 800e130:	7fc2      	ldrb	r2, [r0, #31]
 800e132:	4591      	cmp	r9, r2
 800e134:	bf98      	it	ls
 800e136:	4661      	movls	r1, ip
 800e138:	4591      	cmp	r9, r2
 800e13a:	bf98      	it	ls
 800e13c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	469c      	mov	ip, r3
 800e142:	b18a      	cbz	r2, 800e168 <ip_reass_remove_oldest_datagram+0x50>
 800e144:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e146:	695a      	ldr	r2, [r3, #20]
 800e148:	4572      	cmp	r2, lr
 800e14a:	d1ed      	bne.n	800e128 <ip_reass_remove_oldest_datagram+0x10>
 800e14c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e150:	699a      	ldr	r2, [r3, #24]
 800e152:	454a      	cmp	r2, r9
 800e154:	d1e8      	bne.n	800e128 <ip_reass_remove_oldest_datagram+0x10>
 800e156:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800e15a:	88aa      	ldrh	r2, [r5, #4]
 800e15c:	4591      	cmp	r9, r2
 800e15e:	d1e3      	bne.n	800e128 <ip_reass_remove_oldest_datagram+0x10>
 800e160:	e7ed      	b.n	800e13e <ip_reass_remove_oldest_datagram+0x26>
 800e162:	4661      	mov	r1, ip
 800e164:	4618      	mov	r0, r3
 800e166:	e7ea      	b.n	800e13e <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 800e168:	b110      	cbz	r0, 800e170 <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e16a:	f7ff ff51 	bl	800e010 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800e16e:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e170:	42be      	cmp	r6, r7
 800e172:	da0b      	bge.n	800e18c <ip_reass_remove_oldest_datagram+0x74>
 800e174:	2c01      	cmp	r4, #1
 800e176:	dd09      	ble.n	800e18c <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 800e178:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800e17c:	b133      	cbz	r3, 800e18c <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e17e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 800e182:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800e184:	4621      	mov	r1, r4
    prev = NULL;
 800e186:	46a4      	mov	ip, r4
    oldest = NULL;
 800e188:	4620      	mov	r0, r4
 800e18a:	e7dc      	b.n	800e146 <ip_reass_remove_oldest_datagram+0x2e>
}
 800e18c:	4630      	mov	r0, r6
 800e18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e192:	bf00      	nop
 800e194:	20010930 	.word	0x20010930

0800e198 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e198:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e19a:	4604      	mov	r4, r0
 800e19c:	b120      	cbz	r0, 800e1a8 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800e19e:	4621      	mov	r1, r4
 800e1a0:	2005      	movs	r0, #5
 800e1a2:	f7f9 ff21 	bl	8007fe8 <memp_free>
}
 800e1a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e1a8:	4b03      	ldr	r3, [pc, #12]	; (800e1b8 <ip_frag_free_pbuf_custom_ref+0x20>)
 800e1aa:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e1ae:	4903      	ldr	r1, [pc, #12]	; (800e1bc <ip_frag_free_pbuf_custom_ref+0x24>)
 800e1b0:	4803      	ldr	r0, [pc, #12]	; (800e1c0 <ip_frag_free_pbuf_custom_ref+0x28>)
 800e1b2:	f000 feb7 	bl	800ef24 <iprintf>
 800e1b6:	e7f2      	b.n	800e19e <ip_frag_free_pbuf_custom_ref+0x6>
 800e1b8:	080131e8 	.word	0x080131e8
 800e1bc:	08010204 	.word	0x08010204
 800e1c0:	0800fe60 	.word	0x0800fe60

0800e1c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e1c4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e1c6:	4604      	mov	r4, r0
 800e1c8:	b138      	cbz	r0, 800e1da <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800e1ca:	6960      	ldr	r0, [r4, #20]
 800e1cc:	b108      	cbz	r0, 800e1d2 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800e1ce:	f7fa f9cd 	bl	800856c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e1d2:	4620      	mov	r0, r4
 800e1d4:	f7ff ffe0 	bl	800e198 <ip_frag_free_pbuf_custom_ref>
}
 800e1d8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e1da:	4b04      	ldr	r3, [pc, #16]	; (800e1ec <ipfrag_free_pbuf_custom+0x28>)
 800e1dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e1e0:	4903      	ldr	r1, [pc, #12]	; (800e1f0 <ipfrag_free_pbuf_custom+0x2c>)
 800e1e2:	4804      	ldr	r0, [pc, #16]	; (800e1f4 <ipfrag_free_pbuf_custom+0x30>)
 800e1e4:	f000 fe9e 	bl	800ef24 <iprintf>
 800e1e8:	e7ef      	b.n	800e1ca <ipfrag_free_pbuf_custom+0x6>
 800e1ea:	bf00      	nop
 800e1ec:	080131e8 	.word	0x080131e8
 800e1f0:	080132a4 	.word	0x080132a4
 800e1f4:	0800fe60 	.word	0x0800fe60

0800e1f8 <ip_reass_tmr>:
{
 800e1f8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800e1fa:	4b0a      	ldr	r3, [pc, #40]	; (800e224 <ip_reass_tmr+0x2c>)
 800e1fc:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800e1fe:	b178      	cbz	r0, 800e220 <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 800e200:	2400      	movs	r4, #0
 800e202:	e004      	b.n	800e20e <ip_reass_tmr+0x16>
      r->timer--;
 800e204:	3b01      	subs	r3, #1
 800e206:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800e208:	4604      	mov	r4, r0
 800e20a:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800e20c:	b140      	cbz	r0, 800e220 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800e20e:	7fc3      	ldrb	r3, [r0, #31]
 800e210:	2b00      	cmp	r3, #0
 800e212:	d1f7      	bne.n	800e204 <ip_reass_tmr+0xc>
      r = r->next;
 800e214:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800e216:	4621      	mov	r1, r4
 800e218:	f7ff fefa 	bl	800e010 <ip_reass_free_complete_datagram>
      r = r->next;
 800e21c:	4628      	mov	r0, r5
 800e21e:	e7f5      	b.n	800e20c <ip_reass_tmr+0x14>
}
 800e220:	bd38      	pop	{r3, r4, r5, pc}
 800e222:	bf00      	nop
 800e224:	20010930 	.word	0x20010930

0800e228 <ip4_reass>:
{
 800e228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e22c:	b083      	sub	sp, #12
 800e22e:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800e230:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e234:	f899 3000 	ldrb.w	r3, [r9]
 800e238:	f003 030f 	and.w	r3, r3, #15
 800e23c:	2b05      	cmp	r3, #5
 800e23e:	d16e      	bne.n	800e31e <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e240:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800e244:	f7f9 fb53 	bl	80078ee <lwip_htons>
 800e248:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e24a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800e24e:	f7f9 fb4e 	bl	80078ee <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e252:	f899 3000 	ldrb.w	r3, [r9]
 800e256:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e25a:	009e      	lsls	r6, r3, #2
 800e25c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e260:	d35d      	bcc.n	800e31e <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 800e262:	1b80      	subs	r0, r0, r6
 800e264:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 800e266:	4628      	mov	r0, r5
 800e268:	f7fa faf8 	bl	800885c <pbuf_clen>
 800e26c:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e26e:	4ba4      	ldr	r3, [pc, #656]	; (800e500 <ip4_reass+0x2d8>)
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	4403      	add	r3, r0
 800e274:	2b0a      	cmp	r3, #10
 800e276:	dc07      	bgt.n	800e288 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e278:	4ba2      	ldr	r3, [pc, #648]	; (800e504 <ip4_reass+0x2dc>)
 800e27a:	681c      	ldr	r4, [r3, #0]
 800e27c:	2c00      	cmp	r4, #0
 800e27e:	f000 81c7 	beq.w	800e610 <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e282:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e286:	e00f      	b.n	800e2a8 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e288:	4601      	mov	r1, r0
 800e28a:	4648      	mov	r0, r9
 800e28c:	f7ff ff44 	bl	800e118 <ip_reass_remove_oldest_datagram>
 800e290:	2800      	cmp	r0, #0
 800e292:	d044      	beq.n	800e31e <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e294:	4b9a      	ldr	r3, [pc, #616]	; (800e500 <ip4_reass+0x2d8>)
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e29a:	2b0a      	cmp	r3, #10
 800e29c:	ddec      	ble.n	800e278 <ip4_reass+0x50>
 800e29e:	e03e      	b.n	800e31e <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e2a0:	6824      	ldr	r4, [r4, #0]
 800e2a2:	2c00      	cmp	r4, #0
 800e2a4:	f000 81b4 	beq.w	800e610 <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e2a8:	6963      	ldr	r3, [r4, #20]
 800e2aa:	4293      	cmp	r3, r2
 800e2ac:	d1f8      	bne.n	800e2a0 <ip4_reass+0x78>
 800e2ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2b2:	69a1      	ldr	r1, [r4, #24]
 800e2b4:	4299      	cmp	r1, r3
 800e2b6:	d1f3      	bne.n	800e2a0 <ip4_reass+0x78>
 800e2b8:	89a1      	ldrh	r1, [r4, #12]
 800e2ba:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800e2be:	4299      	cmp	r1, r3
 800e2c0:	d1ee      	bne.n	800e2a0 <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e2c2:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800e2c6:	f7f9 fb12 	bl	80078ee <lwip_htons>
 800e2ca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d03b      	beq.n	800e34a <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e2d2:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800e2d6:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e2d8:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800e2dc:	f019 0920 	ands.w	r9, r9, #32
 800e2e0:	d107      	bne.n	800e2f2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800e2e2:	19bb      	adds	r3, r7, r6
 800e2e4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e2e6:	429f      	cmp	r7, r3
 800e2e8:	d812      	bhi.n	800e310 <ip4_reass+0xe8>
 800e2ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e2ee:	4293      	cmp	r3, r2
 800e2f0:	d80e      	bhi.n	800e310 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e2f2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e2f6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800e2fa:	f7f9 faf8 	bl	80078ee <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e302:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e306:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800e30a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e30e:	d233      	bcs.n	800e378 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e310:	2c00      	cmp	r4, #0
 800e312:	f000 814c 	beq.w	800e5ae <ip4_reass+0x386>
  if (ipr->p == NULL) {
 800e316:	6863      	ldr	r3, [r4, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	f000 8150 	beq.w	800e5be <ip4_reass+0x396>
  pbuf_free(p);
 800e31e:	4628      	mov	r0, r5
 800e320:	f7fa f924 	bl	800856c <pbuf_free>
  return NULL;
 800e324:	2500      	movs	r5, #0
}
 800e326:	4628      	mov	r0, r5
 800e328:	b003      	add	sp, #12
 800e32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e32e:	4641      	mov	r1, r8
 800e330:	4648      	mov	r0, r9
 800e332:	f7ff fef1 	bl	800e118 <ip_reass_remove_oldest_datagram>
 800e336:	4580      	cmp	r8, r0
 800e338:	dcf1      	bgt.n	800e31e <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e33a:	2004      	movs	r0, #4
 800e33c:	f7f9 fe24 	bl	8007f88 <memp_malloc>
    if (ipr == NULL)
 800e340:	4604      	mov	r4, r0
 800e342:	2800      	cmp	r0, #0
 800e344:	f040 816b 	bne.w	800e61e <ip4_reass+0x3f6>
 800e348:	e7e9      	b.n	800e31e <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e34a:	89e0      	ldrh	r0, [r4, #14]
 800e34c:	f7f9 facf 	bl	80078ee <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e350:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e354:	2800      	cmp	r0, #0
 800e356:	d0bc      	beq.n	800e2d2 <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e358:	f8d9 3000 	ldr.w	r3, [r9]
 800e35c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e360:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e364:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e368:	60a3      	str	r3, [r4, #8]
 800e36a:	60e0      	str	r0, [r4, #12]
 800e36c:	6121      	str	r1, [r4, #16]
 800e36e:	6162      	str	r2, [r4, #20]
 800e370:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e374:	61a3      	str	r3, [r4, #24]
 800e376:	e7ac      	b.n	800e2d2 <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 800e378:	eba0 000b 	sub.w	r0, r0, fp
 800e37c:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e380:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e384:	f7f9 fab3 	bl	80078ee <lwip_htons>
 800e388:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800e38c:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e38e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 800e392:	2300      	movs	r3, #0
 800e394:	f88a 3000 	strb.w	r3, [sl]
 800e398:	f88a 3001 	strb.w	r3, [sl, #1]
 800e39c:	f88a 3002 	strb.w	r3, [sl, #2]
 800e3a0:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 800e3a4:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 800e3a8:	4493      	add	fp, r2
 800e3aa:	fa1f f38b 	uxth.w	r3, fp
 800e3ae:	9301      	str	r3, [sp, #4]
 800e3b0:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d8ab      	bhi.n	800e310 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800e3b8:	6860      	ldr	r0, [r4, #4]
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	f000 8120 	beq.w	800e600 <ip4_reass+0x3d8>
  int valid = 1;
 800e3c0:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	e030      	b.n	800e42a <ip4_reass+0x202>
      iprh->next_pbuf = q;
 800e3c8:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 800e3cc:	f1bc 0f00 	cmp.w	ip, #0
 800e3d0:	d020      	beq.n	800e414 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e3d2:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800e3d6:	428a      	cmp	r2, r1
 800e3d8:	d39d      	bcc.n	800e316 <ip4_reass+0xee>
 800e3da:	889b      	ldrh	r3, [r3, #4]
 800e3dc:	9a01      	ldr	r2, [sp, #4]
 800e3de:	4293      	cmp	r3, r2
 800e3e0:	d399      	bcc.n	800e316 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 800e3e2:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800e3e6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 800e3ea:	428b      	cmp	r3, r1
 800e3ec:	bf18      	it	ne
 800e3ee:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e3f2:	f1b9 0f00 	cmp.w	r9, #0
 800e3f6:	d02f      	beq.n	800e458 <ip4_reass+0x230>
 800e3f8:	7fa3      	ldrb	r3, [r4, #30]
 800e3fa:	f013 0f01 	tst.w	r3, #1
 800e3fe:	d12b      	bne.n	800e458 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e400:	4a3f      	ldr	r2, [pc, #252]	; (800e500 <ip4_reass+0x2d8>)
 800e402:	8813      	ldrh	r3, [r2, #0]
 800e404:	4498      	add	r8, r3
 800e406:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800e40a:	f1b9 0f00 	cmp.w	r9, #0
 800e40e:	d074      	beq.n	800e4fa <ip4_reass+0x2d2>
  return NULL;
 800e410:	2500      	movs	r5, #0
 800e412:	e788      	b.n	800e326 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 800e414:	889b      	ldrh	r3, [r3, #4]
 800e416:	9a01      	ldr	r2, [sp, #4]
 800e418:	4293      	cmp	r3, r2
 800e41a:	f4ff af7c 	bcc.w	800e316 <ip4_reass+0xee>
        ipr->p = new_p;
 800e41e:	6065      	str	r5, [r4, #4]
 800e420:	e7e7      	b.n	800e3f2 <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 800e422:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800e424:	2800      	cmp	r0, #0
 800e426:	f000 80da 	beq.w	800e5de <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e42a:	469c      	mov	ip, r3
 800e42c:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800e42e:	8899      	ldrh	r1, [r3, #4]
 800e430:	428a      	cmp	r2, r1
 800e432:	d3c9      	bcc.n	800e3c8 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800e434:	428a      	cmp	r2, r1
 800e436:	f43f af6e 	beq.w	800e316 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800e43a:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800e43e:	455a      	cmp	r2, fp
 800e440:	f4ff af69 	bcc.w	800e316 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800e444:	f1bc 0f00 	cmp.w	ip, #0
 800e448:	d0eb      	beq.n	800e422 <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800e44a:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800e44e:	4288      	cmp	r0, r1
 800e450:	bf18      	it	ne
 800e452:	f04f 0e00 	movne.w	lr, #0
 800e456:	e7e4      	b.n	800e422 <ip4_reass+0x1fa>
    if (valid) {
 800e458:	f1be 0f00 	cmp.w	lr, #0
 800e45c:	d02f      	beq.n	800e4be <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e45e:	6863      	ldr	r3, [r4, #4]
 800e460:	b343      	cbz	r3, 800e4b4 <ip4_reass+0x28c>
 800e462:	6859      	ldr	r1, [r3, #4]
 800e464:	888b      	ldrh	r3, [r1, #4]
 800e466:	bb43      	cbnz	r3, 800e4ba <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800e468:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800e46c:	b15b      	cbz	r3, 800e486 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800e46e:	4652      	mov	r2, sl
 800e470:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800e474:	88d2      	ldrh	r2, [r2, #6]
 800e476:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d134      	bne.n	800e4e8 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800e47e:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f3      	bne.n	800e46e <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800e486:	458a      	cmp	sl, r1
 800e488:	f040 80e7 	bne.w	800e65a <ip4_reass+0x432>
 800e48c:	4b1e      	ldr	r3, [pc, #120]	; (800e508 <ip4_reass+0x2e0>)
 800e48e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e492:	491e      	ldr	r1, [pc, #120]	; (800e50c <ip4_reass+0x2e4>)
 800e494:	481e      	ldr	r0, [pc, #120]	; (800e510 <ip4_reass+0x2e8>)
 800e496:	f000 fd45 	bl	800ef24 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e49a:	f8da 3000 	ldr.w	r3, [sl]
 800e49e:	b333      	cbz	r3, 800e4ee <ip4_reass+0x2c6>
 800e4a0:	4b19      	ldr	r3, [pc, #100]	; (800e508 <ip4_reass+0x2e0>)
 800e4a2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e4a6:	491b      	ldr	r1, [pc, #108]	; (800e514 <ip4_reass+0x2ec>)
 800e4a8:	4819      	ldr	r0, [pc, #100]	; (800e510 <ip4_reass+0x2e8>)
 800e4aa:	f000 fd3b 	bl	800ef24 <iprintf>
 800e4ae:	f04f 0e01 	mov.w	lr, #1
 800e4b2:	e004      	b.n	800e4be <ip4_reass+0x296>
        valid = 0;
 800e4b4:	f04f 0e00 	mov.w	lr, #0
 800e4b8:	e001      	b.n	800e4be <ip4_reass+0x296>
 800e4ba:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e4be:	f1be 0100 	subs.w	r1, lr, #0
 800e4c2:	bf18      	it	ne
 800e4c4:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e4c6:	4a0e      	ldr	r2, [pc, #56]	; (800e500 <ip4_reass+0x2d8>)
 800e4c8:	8813      	ldrh	r3, [r2, #0]
 800e4ca:	4498      	add	r8, r3
 800e4cc:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800e4d0:	f1b9 0f00 	cmp.w	r9, #0
 800e4d4:	d105      	bne.n	800e4e2 <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800e4d6:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800e4d8:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e4da:	7fa3      	ldrb	r3, [r4, #30]
 800e4dc:	f043 0301 	orr.w	r3, r3, #1
 800e4e0:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e4e2:	b9c9      	cbnz	r1, 800e518 <ip4_reass+0x2f0>
  return NULL;
 800e4e4:	2500      	movs	r5, #0
 800e4e6:	e71e      	b.n	800e326 <ip4_reass+0xfe>
 800e4e8:	f04f 0e00 	mov.w	lr, #0
 800e4ec:	e7e7      	b.n	800e4be <ip4_reass+0x296>
 800e4ee:	f04f 0e01 	mov.w	lr, #1
 800e4f2:	e7e4      	b.n	800e4be <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e4f4:	f04f 0e00 	mov.w	lr, #0
 800e4f8:	e7e1      	b.n	800e4be <ip4_reass+0x296>
  if (is_last) {
 800e4fa:	2100      	movs	r1, #0
 800e4fc:	e7eb      	b.n	800e4d6 <ip4_reass+0x2ae>
 800e4fe:	bf00      	nop
 800e500:	2001092c 	.word	0x2001092c
 800e504:	20010930 	.word	0x20010930
 800e508:	080131e8 	.word	0x080131e8
 800e50c:	080132b0 	.word	0x080132b0
 800e510:	0800fe60 	.word	0x0800fe60
 800e514:	080132c0 	.word	0x080132c0
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e518:	8ba0      	ldrh	r0, [r4, #28]
 800e51a:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e51c:	6863      	ldr	r3, [r4, #4]
 800e51e:	685d      	ldr	r5, [r3, #4]
 800e520:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e522:	68a3      	ldr	r3, [r4, #8]
 800e524:	68e7      	ldr	r7, [r4, #12]
 800e526:	6921      	ldr	r1, [r4, #16]
 800e528:	6962      	ldr	r2, [r4, #20]
 800e52a:	602b      	str	r3, [r5, #0]
 800e52c:	606f      	str	r7, [r5, #4]
 800e52e:	60a9      	str	r1, [r5, #8]
 800e530:	60ea      	str	r2, [r5, #12]
 800e532:	69a3      	ldr	r3, [r4, #24]
 800e534:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e536:	b280      	uxth	r0, r0
 800e538:	f7f9 f9d9 	bl	80078ee <lwip_htons>
 800e53c:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e53e:	2300      	movs	r3, #0
 800e540:	71ab      	strb	r3, [r5, #6]
 800e542:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e544:	72ab      	strb	r3, [r5, #10]
 800e546:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800e548:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800e54a:	b16e      	cbz	r6, 800e568 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 800e54c:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800e550:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800e552:	4641      	mov	r1, r8
 800e554:	4630      	mov	r0, r6
 800e556:	f7f9 ffc9 	bl	80084ec <pbuf_remove_header>
      pbuf_cat(p, r);
 800e55a:	4631      	mov	r1, r6
 800e55c:	4628      	mov	r0, r5
 800e55e:	f7fa f9a5 	bl	80088ac <pbuf_cat>
      r = iprh->next_pbuf;
 800e562:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800e564:	2e00      	cmp	r6, #0
 800e566:	d1f3      	bne.n	800e550 <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 800e568:	4b3d      	ldr	r3, [pc, #244]	; (800e660 <ip4_reass+0x438>)
 800e56a:	6819      	ldr	r1, [r3, #0]
 800e56c:	42a1      	cmp	r1, r4
 800e56e:	d005      	beq.n	800e57c <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e570:	b129      	cbz	r1, 800e57e <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 800e572:	680b      	ldr	r3, [r1, #0]
 800e574:	42a3      	cmp	r3, r4
 800e576:	d002      	beq.n	800e57e <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e578:	4619      	mov	r1, r3
 800e57a:	e7f9      	b.n	800e570 <ip4_reass+0x348>
      ipr_prev = NULL;
 800e57c:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e57e:	4620      	mov	r0, r4
 800e580:	f7ff fd22 	bl	800dfc8 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800e584:	4628      	mov	r0, r5
 800e586:	f7fa f969 	bl	800885c <pbuf_clen>
 800e58a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e58c:	4b35      	ldr	r3, [pc, #212]	; (800e664 <ip4_reass+0x43c>)
 800e58e:	881b      	ldrh	r3, [r3, #0]
 800e590:	4283      	cmp	r3, r0
 800e592:	d304      	bcc.n	800e59e <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e594:	4a33      	ldr	r2, [pc, #204]	; (800e664 <ip4_reass+0x43c>)
 800e596:	8813      	ldrh	r3, [r2, #0]
 800e598:	1b1c      	subs	r4, r3, r4
 800e59a:	8014      	strh	r4, [r2, #0]
    return p;
 800e59c:	e6c3      	b.n	800e326 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e59e:	4b32      	ldr	r3, [pc, #200]	; (800e668 <ip4_reass+0x440>)
 800e5a0:	f240 229b 	movw	r2, #667	; 0x29b
 800e5a4:	4931      	ldr	r1, [pc, #196]	; (800e66c <ip4_reass+0x444>)
 800e5a6:	4832      	ldr	r0, [pc, #200]	; (800e670 <ip4_reass+0x448>)
 800e5a8:	f000 fcbc 	bl	800ef24 <iprintf>
 800e5ac:	e7f2      	b.n	800e594 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e5ae:	4b2e      	ldr	r3, [pc, #184]	; (800e668 <ip4_reass+0x440>)
 800e5b0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e5b4:	492f      	ldr	r1, [pc, #188]	; (800e674 <ip4_reass+0x44c>)
 800e5b6:	482e      	ldr	r0, [pc, #184]	; (800e670 <ip4_reass+0x448>)
 800e5b8:	f000 fcb4 	bl	800ef24 <iprintf>
 800e5bc:	e6ab      	b.n	800e316 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e5be:	4b28      	ldr	r3, [pc, #160]	; (800e660 <ip4_reass+0x438>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	42a3      	cmp	r3, r4
 800e5c4:	d006      	beq.n	800e5d4 <ip4_reass+0x3ac>
 800e5c6:	4b28      	ldr	r3, [pc, #160]	; (800e668 <ip4_reass+0x440>)
 800e5c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e5cc:	492a      	ldr	r1, [pc, #168]	; (800e678 <ip4_reass+0x450>)
 800e5ce:	4828      	ldr	r0, [pc, #160]	; (800e670 <ip4_reass+0x448>)
 800e5d0:	f000 fca8 	bl	800ef24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e5d4:	2100      	movs	r1, #0
 800e5d6:	4620      	mov	r0, r4
 800e5d8:	f7ff fcf6 	bl	800dfc8 <ip_reass_dequeue_datagram>
 800e5dc:	e69f      	b.n	800e31e <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800e5de:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e5e0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e5e4:	455b      	cmp	r3, fp
 800e5e6:	f43f af04 	beq.w	800e3f2 <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e5ea:	f1b9 0f00 	cmp.w	r9, #0
 800e5ee:	d081      	beq.n	800e4f4 <ip4_reass+0x2cc>
 800e5f0:	7fa3      	ldrb	r3, [r4, #30]
 800e5f2:	f013 0f01 	tst.w	r3, #1
 800e5f6:	f43f af03 	beq.w	800e400 <ip4_reass+0x1d8>
 800e5fa:	f04f 0e00 	mov.w	lr, #0
 800e5fe:	e75e      	b.n	800e4be <ip4_reass+0x296>
      ipr->p = new_p;
 800e600:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e602:	f1b9 0f00 	cmp.w	r9, #0
 800e606:	f43f af2a 	beq.w	800e45e <ip4_reass+0x236>
  int valid = 1;
 800e60a:	f04f 0e01 	mov.w	lr, #1
 800e60e:	e6f3      	b.n	800e3f8 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e610:	2004      	movs	r0, #4
 800e612:	f7f9 fcb9 	bl	8007f88 <memp_malloc>
  if (ipr == NULL) {
 800e616:	4604      	mov	r4, r0
 800e618:	2800      	cmp	r0, #0
 800e61a:	f43f ae88 	beq.w	800e32e <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e61e:	2300      	movs	r3, #0
 800e620:	6063      	str	r3, [r4, #4]
 800e622:	60a3      	str	r3, [r4, #8]
 800e624:	60e3      	str	r3, [r4, #12]
 800e626:	6123      	str	r3, [r4, #16]
 800e628:	6163      	str	r3, [r4, #20]
 800e62a:	61a3      	str	r3, [r4, #24]
 800e62c:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800e62e:	230f      	movs	r3, #15
 800e630:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800e632:	4b0b      	ldr	r3, [pc, #44]	; (800e660 <ip4_reass+0x438>)
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800e638:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e63a:	f8d9 3000 	ldr.w	r3, [r9]
 800e63e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e642:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e646:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e64a:	60a3      	str	r3, [r4, #8]
 800e64c:	60e0      	str	r0, [r4, #12]
 800e64e:	6121      	str	r1, [r4, #16]
 800e650:	6162      	str	r2, [r4, #20]
 800e652:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e656:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800e658:	e63b      	b.n	800e2d2 <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800e65a:	f04f 0e01 	mov.w	lr, #1
 800e65e:	e72e      	b.n	800e4be <ip4_reass+0x296>
 800e660:	20010930 	.word	0x20010930
 800e664:	2001092c 	.word	0x2001092c
 800e668:	080131e8 	.word	0x080131e8
 800e66c:	080132e4 	.word	0x080132e4
 800e670:	0800fe60 	.word	0x0800fe60
 800e674:	08013300 	.word	0x08013300
 800e678:	0801330c 	.word	0x0801330c

0800e67c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e680:	b08d      	sub	sp, #52	; 0x34
 800e682:	4605      	mov	r5, r0
 800e684:	9107      	str	r1, [sp, #28]
 800e686:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e688:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800e68a:	3b14      	subs	r3, #20
 800e68c:	bf48      	it	mi
 800e68e:	3307      	addmi	r3, #7
 800e690:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800e694:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e696:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e69a:	f89a 3000 	ldrb.w	r3, [sl]
 800e69e:	f003 030f 	and.w	r3, r3, #15
 800e6a2:	2b05      	cmp	r3, #5
 800e6a4:	f040 80d9 	bne.w	800e85a <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e6a8:	8943      	ldrh	r3, [r0, #10]
 800e6aa:	2b13      	cmp	r3, #19
 800e6ac:	d943      	bls.n	800e736 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e6ae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e6b2:	f7f9 f91c 	bl	80078ee <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800e6b6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800e6ba:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e6bc:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800e6c0:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e6c2:	892b      	ldrh	r3, [r5, #8]
 800e6c4:	3b14      	subs	r3, #20
 800e6c6:	b29b      	uxth	r3, r3
 800e6c8:	9303      	str	r3, [sp, #12]

  while (left) {
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	f000 80c8 	beq.w	800e860 <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e6d0:	9b06      	ldr	r3, [sp, #24]
 800e6d2:	00db      	lsls	r3, r3, #3
 800e6d4:	b29b      	uxth	r3, r3
 800e6d6:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800e6d8:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800e6dc:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e6de:	9b08      	ldr	r3, [sp, #32]
 800e6e0:	9a03      	ldr	r2, [sp, #12]
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	bf28      	it	cs
 800e6e6:	4613      	movcs	r3, r2
 800e6e8:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e6ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e6ee:	2114      	movs	r1, #20
 800e6f0:	200e      	movs	r0, #14
 800e6f2:	f7f9 ffab 	bl	800864c <pbuf_alloc>
    if (rambuf == NULL) {
 800e6f6:	4683      	mov	fp, r0
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	f000 80b3 	beq.w	800e864 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e6fe:	8943      	ldrh	r3, [r0, #10]
 800e700:	2b13      	cmp	r3, #19
 800e702:	d922      	bls.n	800e74a <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e704:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e708:	f8da 2000 	ldr.w	r2, [sl]
 800e70c:	f8da 6004 	ldr.w	r6, [sl, #4]
 800e710:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e714:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e718:	601a      	str	r2, [r3, #0]
 800e71a:	605e      	str	r6, [r3, #4]
 800e71c:	6098      	str	r0, [r3, #8]
 800e71e:	60d9      	str	r1, [r3, #12]
 800e720:	f8da 2010 	ldr.w	r2, [sl, #16]
 800e724:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e726:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e72a:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800e72c:	9b04      	ldr	r3, [sp, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d04e      	beq.n	800e7d0 <ip4_frag+0x154>
    left_to_copy = fragsize;
 800e732:	461e      	mov	r6, r3
 800e734:	e01d      	b.n	800e772 <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e736:	4b4d      	ldr	r3, [pc, #308]	; (800e86c <ip4_frag+0x1f0>)
 800e738:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e73c:	494c      	ldr	r1, [pc, #304]	; (800e870 <ip4_frag+0x1f4>)
 800e73e:	484d      	ldr	r0, [pc, #308]	; (800e874 <ip4_frag+0x1f8>)
 800e740:	f000 fbf0 	bl	800ef24 <iprintf>
 800e744:	f06f 0005 	mvn.w	r0, #5
 800e748:	e07b      	b.n	800e842 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e74a:	4b48      	ldr	r3, [pc, #288]	; (800e86c <ip4_frag+0x1f0>)
 800e74c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e750:	4949      	ldr	r1, [pc, #292]	; (800e878 <ip4_frag+0x1fc>)
 800e752:	4848      	ldr	r0, [pc, #288]	; (800e874 <ip4_frag+0x1f8>)
 800e754:	f000 fbe6 	bl	800ef24 <iprintf>
 800e758:	e7d4      	b.n	800e704 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e75a:	4b44      	ldr	r3, [pc, #272]	; (800e86c <ip4_frag+0x1f0>)
 800e75c:	f240 322d 	movw	r2, #813	; 0x32d
 800e760:	4946      	ldr	r1, [pc, #280]	; (800e87c <ip4_frag+0x200>)
 800e762:	4844      	ldr	r0, [pc, #272]	; (800e874 <ip4_frag+0x1f8>)
 800e764:	f000 fbde 	bl	800ef24 <iprintf>
 800e768:	e009      	b.n	800e77e <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800e76a:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800e76c:	b376      	cbz	r6, 800e7cc <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800e76e:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800e772:	896b      	ldrh	r3, [r5, #10]
 800e774:	eba3 0409 	sub.w	r4, r3, r9
 800e778:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e77a:	454b      	cmp	r3, r9
 800e77c:	d3ed      	bcc.n	800e75a <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e77e:	42b4      	cmp	r4, r6
 800e780:	bf28      	it	cs
 800e782:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800e784:	2c00      	cmp	r4, #0
 800e786:	d0f0      	beq.n	800e76a <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e788:	2005      	movs	r0, #5
 800e78a:	f7f9 fbfd 	bl	8007f88 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800e78e:	4607      	mov	r7, r0
 800e790:	2800      	cmp	r0, #0
 800e792:	d051      	beq.n	800e838 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e794:	9401      	str	r4, [sp, #4]
 800e796:	686b      	ldr	r3, [r5, #4]
 800e798:	444b      	add	r3, r9
 800e79a:	9300      	str	r3, [sp, #0]
 800e79c:	4603      	mov	r3, r0
 800e79e:	2241      	movs	r2, #65	; 0x41
 800e7a0:	4621      	mov	r1, r4
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	f7f9 fe80 	bl	80084a8 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800e7a8:	4680      	mov	r8, r0
 800e7aa:	2800      	cmp	r0, #0
 800e7ac:	d04c      	beq.n	800e848 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f7fa f860 	bl	8008874 <pbuf_ref>
      pcr->original = p;
 800e7b4:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e7b6:	4b32      	ldr	r3, [pc, #200]	; (800e880 <ip4_frag+0x204>)
 800e7b8:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e7ba:	4641      	mov	r1, r8
 800e7bc:	4658      	mov	r0, fp
 800e7be:	f7fa f875 	bl	80088ac <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e7c2:	1b36      	subs	r6, r6, r4
 800e7c4:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800e7c6:	b11e      	cbz	r6, 800e7d0 <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800e7c8:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800e7ca:	e7d0      	b.n	800e76e <ip4_frag+0xf2>
        poff = 0;
 800e7cc:	46b1      	mov	r9, r6
 800e7ce:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e7d0:	44a1      	add	r9, r4
 800e7d2:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e7d6:	9b05      	ldr	r3, [sp, #20]
 800e7d8:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800e7dc:	9b07      	ldr	r3, [sp, #28]
 800e7de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7e0:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800e7e2:	9a03      	ldr	r2, [sp, #12]
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	dd01      	ble.n	800e7ec <ip4_frag+0x170>
 800e7e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e7ea:	b10b      	cbz	r3, 800e7f0 <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e7ec:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e7f0:	f7f9 f87d 	bl	80078ee <lwip_htons>
 800e7f4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e7f6:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e7f8:	9f04      	ldr	r7, [sp, #16]
 800e7fa:	f107 0014 	add.w	r0, r7, #20
 800e7fe:	b280      	uxth	r0, r0
 800e800:	f7f9 f875 	bl	80078ee <lwip_htons>
 800e804:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e806:	2300      	movs	r3, #0
 800e808:	72b3      	strb	r3, [r6, #10]
 800e80a:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e80c:	9807      	ldr	r0, [sp, #28]
 800e80e:	6943      	ldr	r3, [r0, #20]
 800e810:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e812:	4659      	mov	r1, fp
 800e814:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e816:	4658      	mov	r0, fp
 800e818:	f7f9 fea8 	bl	800856c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e81c:	9b03      	ldr	r3, [sp, #12]
 800e81e:	1bdb      	subs	r3, r3, r7
 800e820:	b29a      	uxth	r2, r3
 800e822:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800e824:	9b05      	ldr	r3, [sp, #20]
 800e826:	9906      	ldr	r1, [sp, #24]
 800e828:	440b      	add	r3, r1
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	9305      	str	r3, [sp, #20]
  while (left) {
 800e82e:	2a00      	cmp	r2, #0
 800e830:	f47f af55 	bne.w	800e6de <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e834:	2000      	movs	r0, #0
 800e836:	e004      	b.n	800e842 <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800e838:	4658      	mov	r0, fp
 800e83a:	f7f9 fe97 	bl	800856c <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e842:	b00d      	add	sp, #52	; 0x34
 800e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800e848:	4638      	mov	r0, r7
 800e84a:	f7ff fca5 	bl	800e198 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e84e:	4658      	mov	r0, fp
 800e850:	f7f9 fe8c 	bl	800856c <pbuf_free>
  return ERR_MEM;
 800e854:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800e858:	e7f3      	b.n	800e842 <ip4_frag+0x1c6>
    return ERR_VAL;
 800e85a:	f06f 0005 	mvn.w	r0, #5
 800e85e:	e7f0      	b.n	800e842 <ip4_frag+0x1c6>
  return ERR_OK;
 800e860:	2000      	movs	r0, #0
 800e862:	e7ee      	b.n	800e842 <ip4_frag+0x1c6>
  return ERR_MEM;
 800e864:	f04f 30ff 	mov.w	r0, #4294967295
 800e868:	e7eb      	b.n	800e842 <ip4_frag+0x1c6>
 800e86a:	bf00      	nop
 800e86c:	080131e8 	.word	0x080131e8
 800e870:	0801332c 	.word	0x0801332c
 800e874:	0800fe60 	.word	0x0800fe60
 800e878:	08013348 	.word	0x08013348
 800e87c:	08013368 	.word	0x08013368
 800e880:	0800e1c5 	.word	0x0800e1c5

0800e884 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e884:	b570      	push	{r4, r5, r6, lr}
 800e886:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e888:	8943      	ldrh	r3, [r0, #10]
 800e88a:	2b0e      	cmp	r3, #14
 800e88c:	d91c      	bls.n	800e8c8 <ethernet_input+0x44>
 800e88e:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e890:	7bc3      	ldrb	r3, [r0, #15]
 800e892:	b91b      	cbnz	r3, 800e89c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800e894:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800e898:	3301      	adds	r3, #1
 800e89a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e89c:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e89e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e8a0:	7803      	ldrb	r3, [r0, #0]
 800e8a2:	f013 0f01 	tst.w	r3, #1
 800e8a6:	d00a      	beq.n	800e8be <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d012      	beq.n	800e8d2 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e8ac:	2206      	movs	r2, #6
 800e8ae:	491e      	ldr	r1, [pc, #120]	; (800e928 <ethernet_input+0xa4>)
 800e8b0:	f000 fa7d 	bl	800edae <memcmp>
 800e8b4:	b918      	cbnz	r0, 800e8be <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e8b6:	7b63      	ldrb	r3, [r4, #13]
 800e8b8:	f043 0308 	orr.w	r3, r3, #8
 800e8bc:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800e8be:	2e08      	cmp	r6, #8
 800e8c0:	d012      	beq.n	800e8e8 <ethernet_input+0x64>
 800e8c2:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800e8c6:	d01f      	beq.n	800e908 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f7f9 fe4f 	bl	800856c <pbuf_free>
  return ERR_OK;
}
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e8d2:	7843      	ldrb	r3, [r0, #1]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1f2      	bne.n	800e8be <ethernet_input+0x3a>
 800e8d8:	7883      	ldrb	r3, [r0, #2]
 800e8da:	2b5e      	cmp	r3, #94	; 0x5e
 800e8dc:	d1ef      	bne.n	800e8be <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800e8de:	7b63      	ldrb	r3, [r4, #13]
 800e8e0:	f043 0310 	orr.w	r3, r3, #16
 800e8e4:	7363      	strb	r3, [r4, #13]
 800e8e6:	e7ea      	b.n	800e8be <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e8e8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e8ec:	f013 0f08 	tst.w	r3, #8
 800e8f0:	d0ea      	beq.n	800e8c8 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e8f2:	210e      	movs	r1, #14
 800e8f4:	4620      	mov	r0, r4
 800e8f6:	f7f9 fdf9 	bl	80084ec <pbuf_remove_header>
 800e8fa:	2800      	cmp	r0, #0
 800e8fc:	d1e4      	bne.n	800e8c8 <ethernet_input+0x44>
        ip4_input(p, netif);
 800e8fe:	4629      	mov	r1, r5
 800e900:	4620      	mov	r0, r4
 800e902:	f7ff f9dd 	bl	800dcc0 <ip4_input>
      break;
 800e906:	e7e2      	b.n	800e8ce <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e908:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e90c:	f013 0f08 	tst.w	r3, #8
 800e910:	d0da      	beq.n	800e8c8 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e912:	210e      	movs	r1, #14
 800e914:	4620      	mov	r0, r4
 800e916:	f7f9 fde9 	bl	80084ec <pbuf_remove_header>
 800e91a:	2800      	cmp	r0, #0
 800e91c:	d1d4      	bne.n	800e8c8 <ethernet_input+0x44>
        etharp_input(p, netif);
 800e91e:	4629      	mov	r1, r5
 800e920:	4620      	mov	r0, r4
 800e922:	f7fe fd9d 	bl	800d460 <etharp_input>
      break;
 800e926:	e7d2      	b.n	800e8ce <ethernet_input+0x4a>
 800e928:	080133e4 	.word	0x080133e4

0800e92c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e930:	4605      	mov	r5, r0
 800e932:	460c      	mov	r4, r1
 800e934:	4616      	mov	r6, r2
 800e936:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e938:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800e93c:	f7f8 ffd7 	bl	80078ee <lwip_htons>
 800e940:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e942:	210e      	movs	r1, #14
 800e944:	4620      	mov	r0, r4
 800e946:	f7f9 fdcc 	bl	80084e2 <pbuf_add_header>
 800e94a:	b9e8      	cbnz	r0, 800e988 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e94c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800e94e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e952:	683b      	ldr	r3, [r7, #0]
 800e954:	600b      	str	r3, [r1, #0]
 800e956:	88bb      	ldrh	r3, [r7, #4]
 800e958:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e95a:	6833      	ldr	r3, [r6, #0]
 800e95c:	f8c1 3006 	str.w	r3, [r1, #6]
 800e960:	88b3      	ldrh	r3, [r6, #4]
 800e962:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e964:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e968:	2b06      	cmp	r3, #6
 800e96a:	d105      	bne.n	800e978 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e96c:	69ab      	ldr	r3, [r5, #24]
 800e96e:	4621      	mov	r1, r4
 800e970:	4628      	mov	r0, r5
 800e972:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e978:	4b05      	ldr	r3, [pc, #20]	; (800e990 <ethernet_output+0x64>)
 800e97a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e97e:	4905      	ldr	r1, [pc, #20]	; (800e994 <ethernet_output+0x68>)
 800e980:	4805      	ldr	r0, [pc, #20]	; (800e998 <ethernet_output+0x6c>)
 800e982:	f000 facf 	bl	800ef24 <iprintf>
 800e986:	e7f1      	b.n	800e96c <ethernet_output+0x40>
  return ERR_BUF;
 800e988:	f06f 0001 	mvn.w	r0, #1
 800e98c:	e7f2      	b.n	800e974 <ethernet_output+0x48>
 800e98e:	bf00      	nop
 800e990:	08013378 	.word	0x08013378
 800e994:	080133b0 	.word	0x080133b0
 800e998:	0800fe60 	.word	0x0800fe60

0800e99c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e99c:	b510      	push	{r4, lr}
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4608      	mov	r0, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2104      	movs	r1, #4
 800e9a6:	f7f5 f858 	bl	8003a5a <osMessageQueueNew>
 800e9aa:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e9ac:	fab0 f080 	clz	r0, r0
 800e9b0:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e9b2:	4240      	negs	r0, r0
 800e9b4:	bd10      	pop	{r4, pc}

0800e9b6 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e9b6:	b510      	push	{r4, lr}
 800e9b8:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800e9ba:	6800      	ldr	r0, [r0, #0]
 800e9bc:	f7f5 f916 	bl	8003bec <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800e9c0:	6820      	ldr	r0, [r4, #0]
 800e9c2:	f7f5 f920 	bl	8003c06 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e9c6:	bd10      	pop	{r4, pc}

0800e9c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e9c8:	b500      	push	{lr}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	9101      	str	r1, [sp, #4]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	a901      	add	r1, sp, #4
 800e9d4:	6800      	ldr	r0, [r0, #0]
 800e9d6:	f7f5 f886 	bl	8003ae6 <osMessageQueuePut>
 800e9da:	3800      	subs	r0, #0
 800e9dc:	bf18      	it	ne
 800e9de:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e9e0:	4240      	negs	r0, r0
 800e9e2:	b003      	add	sp, #12
 800e9e4:	f85d fb04 	ldr.w	pc, [sp], #4

0800e9e8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ea:	4606      	mov	r6, r0
 800e9ec:	460f      	mov	r7, r1
 800e9ee:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800e9f0:	f7f4 fe6c 	bl	80036cc <osKernelGetTickCount>
 800e9f4:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800e9f6:	b16d      	cbz	r5, 800ea14 <sys_arch_mbox_fetch+0x2c>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800e9f8:	462b      	mov	r3, r5
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	4639      	mov	r1, r7
 800e9fe:	6830      	ldr	r0, [r6, #0]
 800ea00:	f7f5 f8b3 	bl	8003b6a <osMessageQueueGet>
    if (status == osOK)
 800ea04:	b110      	cbz	r0, 800ea0c <sys_arch_mbox_fetch+0x24>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800ea06:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800ea0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (osKernelGetTickCount() - starttime);
 800ea0c:	f7f4 fe5e 	bl	80036cc <osKernelGetTickCount>
 800ea10:	1b00      	subs	r0, r0, r4
 800ea12:	e7fa      	b.n	800ea0a <sys_arch_mbox_fetch+0x22>
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800ea14:	f04f 33ff 	mov.w	r3, #4294967295
 800ea18:	2200      	movs	r2, #0
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	6830      	ldr	r0, [r6, #0]
 800ea1e:	f7f5 f8a4 	bl	8003b6a <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800ea22:	f7f4 fe53 	bl	80036cc <osKernelGetTickCount>
 800ea26:	1b00      	subs	r0, r0, r4
 800ea28:	e7ef      	b.n	800ea0a <sys_arch_mbox_fetch+0x22>

0800ea2a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800ea2a:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	461a      	mov	r2, r3
 800ea30:	6800      	ldr	r0, [r0, #0]
 800ea32:	f7f5 f89a 	bl	8003b6a <osMessageQueueGet>
 800ea36:	3800      	subs	r0, #0
 800ea38:	bf18      	it	ne
 800ea3a:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800ea3c:	4240      	negs	r0, r0
 800ea3e:	bd08      	pop	{r3, pc}

0800ea40 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800ea40:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800ea42:	3800      	subs	r0, #0
 800ea44:	bf18      	it	ne
 800ea46:	2001      	movne	r0, #1
 800ea48:	4770      	bx	lr

0800ea4a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	6003      	str	r3, [r0, #0]
}
 800ea4e:	4770      	bx	lr

0800ea50 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4604      	mov	r4, r0
 800ea54:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800ea56:	2200      	movs	r2, #0
 800ea58:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ea5c:	f7f4 ff2a 	bl	80038b4 <osSemaphoreNew>
 800ea60:	6020      	str	r0, [r4, #0]
#endif

  if(*sem == NULL)
 800ea62:	b138      	cbz	r0, 800ea74 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ea64:	b10d      	cbz	r5, 800ea6a <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ea66:	2000      	movs	r0, #0
}
 800ea68:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 800ea6a:	2100      	movs	r1, #0
 800ea6c:	f7f4 ff80 	bl	8003970 <osSemaphoreAcquire>
  return ERR_OK;
 800ea70:	2000      	movs	r0, #0
 800ea72:	e7f9      	b.n	800ea68 <sys_sem_new+0x18>
    return ERR_MEM;
 800ea74:	f04f 30ff 	mov.w	r0, #4294967295
 800ea78:	e7f6      	b.n	800ea68 <sys_sem_new+0x18>

0800ea7a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ea7a:	b570      	push	{r4, r5, r6, lr}
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800ea80:	f7f4 fe24 	bl	80036cc <osKernelGetTickCount>
 800ea84:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 800ea86:	b95e      	cbnz	r6, 800eaa0 <sys_arch_sem_wait+0x26>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800ea88:	f04f 36ff 	mov.w	r6, #4294967295
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	6820      	ldr	r0, [r4, #0]
 800ea90:	f7f4 ff6e 	bl	8003970 <osSemaphoreAcquire>
 800ea94:	2800      	cmp	r0, #0
 800ea96:	d1f9      	bne.n	800ea8c <sys_arch_sem_wait+0x12>
    return (osKernelGetTickCount() - starttime);
 800ea98:	f7f4 fe18 	bl	80036cc <osKernelGetTickCount>
 800ea9c:	1b40      	subs	r0, r0, r5
#endif
  }
}
 800ea9e:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800eaa0:	4631      	mov	r1, r6
 800eaa2:	6820      	ldr	r0, [r4, #0]
 800eaa4:	f7f4 ff64 	bl	8003970 <osSemaphoreAcquire>
 800eaa8:	b110      	cbz	r0, 800eab0 <sys_arch_sem_wait+0x36>
      return SYS_ARCH_TIMEOUT;
 800eaaa:	f04f 30ff 	mov.w	r0, #4294967295
 800eaae:	e7f6      	b.n	800ea9e <sys_arch_sem_wait+0x24>
        return (osKernelGetTickCount() - starttime);
 800eab0:	f7f4 fe0c 	bl	80036cc <osKernelGetTickCount>
 800eab4:	1b40      	subs	r0, r0, r5
 800eab6:	e7f2      	b.n	800ea9e <sys_arch_sem_wait+0x24>

0800eab8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800eab8:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	f7f4 ff8c 	bl	80039d8 <osSemaphoreRelease>
}
 800eac0:	bd08      	pop	{r3, pc}

0800eac2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800eac2:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800eac4:	6800      	ldr	r0, [r0, #0]
 800eac6:	f7f4 ffb5 	bl	8003a34 <osSemaphoreDelete>
}
 800eaca:	bd08      	pop	{r3, pc}

0800eacc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800eacc:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800eace:	3800      	subs	r0, #0
 800ead0:	bf18      	it	ne
 800ead2:	2001      	movne	r0, #1
 800ead4:	4770      	bx	lr

0800ead6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800ead6:	2300      	movs	r3, #0
 800ead8:	6003      	str	r3, [r0, #0]
}
 800eada:	4770      	bx	lr

0800eadc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800eadc:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800eade:	2000      	movs	r0, #0
 800eae0:	f7f4 fe58 	bl	8003794 <osMutexNew>
 800eae4:	4b01      	ldr	r3, [pc, #4]	; (800eaec <sys_init+0x10>)
 800eae6:	6018      	str	r0, [r3, #0]
#endif
}
 800eae8:	bd08      	pop	{r3, pc}
 800eaea:	bf00      	nop
 800eaec:	20010934 	.word	0x20010934

0800eaf0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800eaf0:	b510      	push	{r4, lr}
 800eaf2:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	f7f4 fe4d 	bl	8003794 <osMutexNew>
 800eafa:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 800eafc:	fab0 f080 	clz	r0, r0
 800eb00:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800eb02:	4240      	negs	r0, r0
 800eb04:	bd10      	pop	{r4, pc}

0800eb06 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800eb06:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800eb08:	f04f 31ff 	mov.w	r1, #4294967295
 800eb0c:	6800      	ldr	r0, [r0, #0]
 800eb0e:	f7f4 fe81 	bl	8003814 <osMutexAcquire>
#endif
}
 800eb12:	bd08      	pop	{r3, pc}

0800eb14 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800eb14:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800eb16:	6800      	ldr	r0, [r0, #0]
 800eb18:	f7f4 fea8 	bl	800386c <osMutexRelease>
}
 800eb1c:	bd08      	pop	{r3, pc}

0800eb1e <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800eb1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb20:	b08b      	sub	sp, #44	; 0x2c
 800eb22:	4607      	mov	r7, r0
 800eb24:	460c      	mov	r4, r1
 800eb26:	4615      	mov	r5, r2
 800eb28:	461e      	mov	r6, r3
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800eb2a:	2220      	movs	r2, #32
 800eb2c:	2100      	movs	r1, #0
 800eb2e:	a802      	add	r0, sp, #8
 800eb30:	f000 f95b 	bl	800edea <memset>
 800eb34:	9701      	str	r7, [sp, #4]
 800eb36:	9606      	str	r6, [sp, #24]
 800eb38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb3a:	9307      	str	r3, [sp, #28]
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800eb3c:	aa01      	add	r2, sp, #4
 800eb3e:	4629      	mov	r1, r5
 800eb40:	4620      	mov	r0, r4
 800eb42:	f7f4 fdcd 	bl	80036e0 <osThreadNew>
#endif
}
 800eb46:	b00b      	add	sp, #44	; 0x2c
 800eb48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800eb4c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800eb4c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800eb4e:	f04f 31ff 	mov.w	r1, #4294967295
 800eb52:	4b03      	ldr	r3, [pc, #12]	; (800eb60 <sys_arch_protect+0x14>)
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	f7f4 fe5d 	bl	8003814 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	bd08      	pop	{r3, pc}
 800eb5e:	bf00      	nop
 800eb60:	20010934 	.word	0x20010934

0800eb64 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800eb64:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800eb66:	4b02      	ldr	r3, [pc, #8]	; (800eb70 <sys_arch_unprotect+0xc>)
 800eb68:	6818      	ldr	r0, [r3, #0]
 800eb6a:	f7f4 fe7f 	bl	800386c <osMutexRelease>
}
 800eb6e:	bd08      	pop	{r3, pc}
 800eb70:	20010934 	.word	0x20010934

0800eb74 <std>:
 800eb74:	2300      	movs	r3, #0
 800eb76:	b510      	push	{r4, lr}
 800eb78:	4604      	mov	r4, r0
 800eb7a:	e9c0 3300 	strd	r3, r3, [r0]
 800eb7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb82:	6083      	str	r3, [r0, #8]
 800eb84:	8181      	strh	r1, [r0, #12]
 800eb86:	6643      	str	r3, [r0, #100]	; 0x64
 800eb88:	81c2      	strh	r2, [r0, #14]
 800eb8a:	6183      	str	r3, [r0, #24]
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	2208      	movs	r2, #8
 800eb90:	305c      	adds	r0, #92	; 0x5c
 800eb92:	f000 f92a 	bl	800edea <memset>
 800eb96:	4b05      	ldr	r3, [pc, #20]	; (800ebac <std+0x38>)
 800eb98:	6263      	str	r3, [r4, #36]	; 0x24
 800eb9a:	4b05      	ldr	r3, [pc, #20]	; (800ebb0 <std+0x3c>)
 800eb9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb9e:	4b05      	ldr	r3, [pc, #20]	; (800ebb4 <std+0x40>)
 800eba0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eba2:	4b05      	ldr	r3, [pc, #20]	; (800ebb8 <std+0x44>)
 800eba4:	6224      	str	r4, [r4, #32]
 800eba6:	6323      	str	r3, [r4, #48]	; 0x30
 800eba8:	bd10      	pop	{r4, pc}
 800ebaa:	bf00      	nop
 800ebac:	0800f0c5 	.word	0x0800f0c5
 800ebb0:	0800f0e7 	.word	0x0800f0e7
 800ebb4:	0800f11f 	.word	0x0800f11f
 800ebb8:	0800f143 	.word	0x0800f143

0800ebbc <_cleanup_r>:
 800ebbc:	4901      	ldr	r1, [pc, #4]	; (800ebc4 <_cleanup_r+0x8>)
 800ebbe:	f000 b8af 	b.w	800ed20 <_fwalk_reent>
 800ebc2:	bf00      	nop
 800ebc4:	0800f301 	.word	0x0800f301

0800ebc8 <__sfmoreglue>:
 800ebc8:	b570      	push	{r4, r5, r6, lr}
 800ebca:	2268      	movs	r2, #104	; 0x68
 800ebcc:	1e4d      	subs	r5, r1, #1
 800ebce:	4355      	muls	r5, r2
 800ebd0:	460e      	mov	r6, r1
 800ebd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ebd6:	f000 f931 	bl	800ee3c <_malloc_r>
 800ebda:	4604      	mov	r4, r0
 800ebdc:	b140      	cbz	r0, 800ebf0 <__sfmoreglue+0x28>
 800ebde:	2100      	movs	r1, #0
 800ebe0:	e9c0 1600 	strd	r1, r6, [r0]
 800ebe4:	300c      	adds	r0, #12
 800ebe6:	60a0      	str	r0, [r4, #8]
 800ebe8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ebec:	f000 f8fd 	bl	800edea <memset>
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	bd70      	pop	{r4, r5, r6, pc}

0800ebf4 <__sfp_lock_acquire>:
 800ebf4:	4801      	ldr	r0, [pc, #4]	; (800ebfc <__sfp_lock_acquire+0x8>)
 800ebf6:	f000 b8d8 	b.w	800edaa <__retarget_lock_acquire_recursive>
 800ebfa:	bf00      	nop
 800ebfc:	20010939 	.word	0x20010939

0800ec00 <__sfp_lock_release>:
 800ec00:	4801      	ldr	r0, [pc, #4]	; (800ec08 <__sfp_lock_release+0x8>)
 800ec02:	f000 b8d3 	b.w	800edac <__retarget_lock_release_recursive>
 800ec06:	bf00      	nop
 800ec08:	20010939 	.word	0x20010939

0800ec0c <__sinit_lock_acquire>:
 800ec0c:	4801      	ldr	r0, [pc, #4]	; (800ec14 <__sinit_lock_acquire+0x8>)
 800ec0e:	f000 b8cc 	b.w	800edaa <__retarget_lock_acquire_recursive>
 800ec12:	bf00      	nop
 800ec14:	2001093a 	.word	0x2001093a

0800ec18 <__sinit_lock_release>:
 800ec18:	4801      	ldr	r0, [pc, #4]	; (800ec20 <__sinit_lock_release+0x8>)
 800ec1a:	f000 b8c7 	b.w	800edac <__retarget_lock_release_recursive>
 800ec1e:	bf00      	nop
 800ec20:	2001093a 	.word	0x2001093a

0800ec24 <__sinit>:
 800ec24:	b510      	push	{r4, lr}
 800ec26:	4604      	mov	r4, r0
 800ec28:	f7ff fff0 	bl	800ec0c <__sinit_lock_acquire>
 800ec2c:	69a3      	ldr	r3, [r4, #24]
 800ec2e:	b11b      	cbz	r3, 800ec38 <__sinit+0x14>
 800ec30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec34:	f7ff bff0 	b.w	800ec18 <__sinit_lock_release>
 800ec38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ec3c:	6523      	str	r3, [r4, #80]	; 0x50
 800ec3e:	4b13      	ldr	r3, [pc, #76]	; (800ec8c <__sinit+0x68>)
 800ec40:	4a13      	ldr	r2, [pc, #76]	; (800ec90 <__sinit+0x6c>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	62a2      	str	r2, [r4, #40]	; 0x28
 800ec46:	42a3      	cmp	r3, r4
 800ec48:	bf04      	itt	eq
 800ec4a:	2301      	moveq	r3, #1
 800ec4c:	61a3      	streq	r3, [r4, #24]
 800ec4e:	4620      	mov	r0, r4
 800ec50:	f000 f820 	bl	800ec94 <__sfp>
 800ec54:	6060      	str	r0, [r4, #4]
 800ec56:	4620      	mov	r0, r4
 800ec58:	f000 f81c 	bl	800ec94 <__sfp>
 800ec5c:	60a0      	str	r0, [r4, #8]
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 f818 	bl	800ec94 <__sfp>
 800ec64:	2200      	movs	r2, #0
 800ec66:	60e0      	str	r0, [r4, #12]
 800ec68:	2104      	movs	r1, #4
 800ec6a:	6860      	ldr	r0, [r4, #4]
 800ec6c:	f7ff ff82 	bl	800eb74 <std>
 800ec70:	68a0      	ldr	r0, [r4, #8]
 800ec72:	2201      	movs	r2, #1
 800ec74:	2109      	movs	r1, #9
 800ec76:	f7ff ff7d 	bl	800eb74 <std>
 800ec7a:	68e0      	ldr	r0, [r4, #12]
 800ec7c:	2202      	movs	r2, #2
 800ec7e:	2112      	movs	r1, #18
 800ec80:	f7ff ff78 	bl	800eb74 <std>
 800ec84:	2301      	movs	r3, #1
 800ec86:	61a3      	str	r3, [r4, #24]
 800ec88:	e7d2      	b.n	800ec30 <__sinit+0xc>
 800ec8a:	bf00      	nop
 800ec8c:	08013454 	.word	0x08013454
 800ec90:	0800ebbd 	.word	0x0800ebbd

0800ec94 <__sfp>:
 800ec94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec96:	4607      	mov	r7, r0
 800ec98:	f7ff ffac 	bl	800ebf4 <__sfp_lock_acquire>
 800ec9c:	4b1e      	ldr	r3, [pc, #120]	; (800ed18 <__sfp+0x84>)
 800ec9e:	681e      	ldr	r6, [r3, #0]
 800eca0:	69b3      	ldr	r3, [r6, #24]
 800eca2:	b913      	cbnz	r3, 800ecaa <__sfp+0x16>
 800eca4:	4630      	mov	r0, r6
 800eca6:	f7ff ffbd 	bl	800ec24 <__sinit>
 800ecaa:	3648      	adds	r6, #72	; 0x48
 800ecac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ecb0:	3b01      	subs	r3, #1
 800ecb2:	d503      	bpl.n	800ecbc <__sfp+0x28>
 800ecb4:	6833      	ldr	r3, [r6, #0]
 800ecb6:	b30b      	cbz	r3, 800ecfc <__sfp+0x68>
 800ecb8:	6836      	ldr	r6, [r6, #0]
 800ecba:	e7f7      	b.n	800ecac <__sfp+0x18>
 800ecbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ecc0:	b9d5      	cbnz	r5, 800ecf8 <__sfp+0x64>
 800ecc2:	4b16      	ldr	r3, [pc, #88]	; (800ed1c <__sfp+0x88>)
 800ecc4:	60e3      	str	r3, [r4, #12]
 800ecc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ecca:	6665      	str	r5, [r4, #100]	; 0x64
 800eccc:	f000 f86c 	bl	800eda8 <__retarget_lock_init_recursive>
 800ecd0:	f7ff ff96 	bl	800ec00 <__sfp_lock_release>
 800ecd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ecd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ecdc:	6025      	str	r5, [r4, #0]
 800ecde:	61a5      	str	r5, [r4, #24]
 800ece0:	2208      	movs	r2, #8
 800ece2:	4629      	mov	r1, r5
 800ece4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ece8:	f000 f87f 	bl	800edea <memset>
 800ecec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ecf0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecf8:	3468      	adds	r4, #104	; 0x68
 800ecfa:	e7d9      	b.n	800ecb0 <__sfp+0x1c>
 800ecfc:	2104      	movs	r1, #4
 800ecfe:	4638      	mov	r0, r7
 800ed00:	f7ff ff62 	bl	800ebc8 <__sfmoreglue>
 800ed04:	4604      	mov	r4, r0
 800ed06:	6030      	str	r0, [r6, #0]
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	d1d5      	bne.n	800ecb8 <__sfp+0x24>
 800ed0c:	f7ff ff78 	bl	800ec00 <__sfp_lock_release>
 800ed10:	230c      	movs	r3, #12
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	e7ee      	b.n	800ecf4 <__sfp+0x60>
 800ed16:	bf00      	nop
 800ed18:	08013454 	.word	0x08013454
 800ed1c:	ffff0001 	.word	0xffff0001

0800ed20 <_fwalk_reent>:
 800ed20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed24:	4606      	mov	r6, r0
 800ed26:	4688      	mov	r8, r1
 800ed28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ed2c:	2700      	movs	r7, #0
 800ed2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed32:	f1b9 0901 	subs.w	r9, r9, #1
 800ed36:	d505      	bpl.n	800ed44 <_fwalk_reent+0x24>
 800ed38:	6824      	ldr	r4, [r4, #0]
 800ed3a:	2c00      	cmp	r4, #0
 800ed3c:	d1f7      	bne.n	800ed2e <_fwalk_reent+0xe>
 800ed3e:	4638      	mov	r0, r7
 800ed40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed44:	89ab      	ldrh	r3, [r5, #12]
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d907      	bls.n	800ed5a <_fwalk_reent+0x3a>
 800ed4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed4e:	3301      	adds	r3, #1
 800ed50:	d003      	beq.n	800ed5a <_fwalk_reent+0x3a>
 800ed52:	4629      	mov	r1, r5
 800ed54:	4630      	mov	r0, r6
 800ed56:	47c0      	blx	r8
 800ed58:	4307      	orrs	r7, r0
 800ed5a:	3568      	adds	r5, #104	; 0x68
 800ed5c:	e7e9      	b.n	800ed32 <_fwalk_reent+0x12>
	...

0800ed60 <__libc_init_array>:
 800ed60:	b570      	push	{r4, r5, r6, lr}
 800ed62:	4d0d      	ldr	r5, [pc, #52]	; (800ed98 <__libc_init_array+0x38>)
 800ed64:	4c0d      	ldr	r4, [pc, #52]	; (800ed9c <__libc_init_array+0x3c>)
 800ed66:	1b64      	subs	r4, r4, r5
 800ed68:	10a4      	asrs	r4, r4, #2
 800ed6a:	2600      	movs	r6, #0
 800ed6c:	42a6      	cmp	r6, r4
 800ed6e:	d109      	bne.n	800ed84 <__libc_init_array+0x24>
 800ed70:	4d0b      	ldr	r5, [pc, #44]	; (800eda0 <__libc_init_array+0x40>)
 800ed72:	4c0c      	ldr	r4, [pc, #48]	; (800eda4 <__libc_init_array+0x44>)
 800ed74:	f001 f816 	bl	800fda4 <_init>
 800ed78:	1b64      	subs	r4, r4, r5
 800ed7a:	10a4      	asrs	r4, r4, #2
 800ed7c:	2600      	movs	r6, #0
 800ed7e:	42a6      	cmp	r6, r4
 800ed80:	d105      	bne.n	800ed8e <__libc_init_array+0x2e>
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed88:	4798      	blx	r3
 800ed8a:	3601      	adds	r6, #1
 800ed8c:	e7ee      	b.n	800ed6c <__libc_init_array+0xc>
 800ed8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed92:	4798      	blx	r3
 800ed94:	3601      	adds	r6, #1
 800ed96:	e7f2      	b.n	800ed7e <__libc_init_array+0x1e>
 800ed98:	08013544 	.word	0x08013544
 800ed9c:	08013544 	.word	0x08013544
 800eda0:	08013544 	.word	0x08013544
 800eda4:	08013548 	.word	0x08013548

0800eda8 <__retarget_lock_init_recursive>:
 800eda8:	4770      	bx	lr

0800edaa <__retarget_lock_acquire_recursive>:
 800edaa:	4770      	bx	lr

0800edac <__retarget_lock_release_recursive>:
 800edac:	4770      	bx	lr

0800edae <memcmp>:
 800edae:	b510      	push	{r4, lr}
 800edb0:	3901      	subs	r1, #1
 800edb2:	4402      	add	r2, r0
 800edb4:	4290      	cmp	r0, r2
 800edb6:	d101      	bne.n	800edbc <memcmp+0xe>
 800edb8:	2000      	movs	r0, #0
 800edba:	e005      	b.n	800edc8 <memcmp+0x1a>
 800edbc:	7803      	ldrb	r3, [r0, #0]
 800edbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800edc2:	42a3      	cmp	r3, r4
 800edc4:	d001      	beq.n	800edca <memcmp+0x1c>
 800edc6:	1b18      	subs	r0, r3, r4
 800edc8:	bd10      	pop	{r4, pc}
 800edca:	3001      	adds	r0, #1
 800edcc:	e7f2      	b.n	800edb4 <memcmp+0x6>

0800edce <memcpy>:
 800edce:	440a      	add	r2, r1
 800edd0:	4291      	cmp	r1, r2
 800edd2:	f100 33ff 	add.w	r3, r0, #4294967295
 800edd6:	d100      	bne.n	800edda <memcpy+0xc>
 800edd8:	4770      	bx	lr
 800edda:	b510      	push	{r4, lr}
 800eddc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ede0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ede4:	4291      	cmp	r1, r2
 800ede6:	d1f9      	bne.n	800eddc <memcpy+0xe>
 800ede8:	bd10      	pop	{r4, pc}

0800edea <memset>:
 800edea:	4402      	add	r2, r0
 800edec:	4603      	mov	r3, r0
 800edee:	4293      	cmp	r3, r2
 800edf0:	d100      	bne.n	800edf4 <memset+0xa>
 800edf2:	4770      	bx	lr
 800edf4:	f803 1b01 	strb.w	r1, [r3], #1
 800edf8:	e7f9      	b.n	800edee <memset+0x4>
	...

0800edfc <sbrk_aligned>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	4e0e      	ldr	r6, [pc, #56]	; (800ee38 <sbrk_aligned+0x3c>)
 800ee00:	460c      	mov	r4, r1
 800ee02:	6831      	ldr	r1, [r6, #0]
 800ee04:	4605      	mov	r5, r0
 800ee06:	b911      	cbnz	r1, 800ee0e <sbrk_aligned+0x12>
 800ee08:	f000 f94c 	bl	800f0a4 <_sbrk_r>
 800ee0c:	6030      	str	r0, [r6, #0]
 800ee0e:	4621      	mov	r1, r4
 800ee10:	4628      	mov	r0, r5
 800ee12:	f000 f947 	bl	800f0a4 <_sbrk_r>
 800ee16:	1c43      	adds	r3, r0, #1
 800ee18:	d00a      	beq.n	800ee30 <sbrk_aligned+0x34>
 800ee1a:	1cc4      	adds	r4, r0, #3
 800ee1c:	f024 0403 	bic.w	r4, r4, #3
 800ee20:	42a0      	cmp	r0, r4
 800ee22:	d007      	beq.n	800ee34 <sbrk_aligned+0x38>
 800ee24:	1a21      	subs	r1, r4, r0
 800ee26:	4628      	mov	r0, r5
 800ee28:	f000 f93c 	bl	800f0a4 <_sbrk_r>
 800ee2c:	3001      	adds	r0, #1
 800ee2e:	d101      	bne.n	800ee34 <sbrk_aligned+0x38>
 800ee30:	f04f 34ff 	mov.w	r4, #4294967295
 800ee34:	4620      	mov	r0, r4
 800ee36:	bd70      	pop	{r4, r5, r6, pc}
 800ee38:	20010940 	.word	0x20010940

0800ee3c <_malloc_r>:
 800ee3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee40:	1ccd      	adds	r5, r1, #3
 800ee42:	f025 0503 	bic.w	r5, r5, #3
 800ee46:	3508      	adds	r5, #8
 800ee48:	2d0c      	cmp	r5, #12
 800ee4a:	bf38      	it	cc
 800ee4c:	250c      	movcc	r5, #12
 800ee4e:	2d00      	cmp	r5, #0
 800ee50:	4607      	mov	r7, r0
 800ee52:	db01      	blt.n	800ee58 <_malloc_r+0x1c>
 800ee54:	42a9      	cmp	r1, r5
 800ee56:	d905      	bls.n	800ee64 <_malloc_r+0x28>
 800ee58:	230c      	movs	r3, #12
 800ee5a:	603b      	str	r3, [r7, #0]
 800ee5c:	2600      	movs	r6, #0
 800ee5e:	4630      	mov	r0, r6
 800ee60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee64:	4e2e      	ldr	r6, [pc, #184]	; (800ef20 <_malloc_r+0xe4>)
 800ee66:	f000 fab3 	bl	800f3d0 <__malloc_lock>
 800ee6a:	6833      	ldr	r3, [r6, #0]
 800ee6c:	461c      	mov	r4, r3
 800ee6e:	bb34      	cbnz	r4, 800eebe <_malloc_r+0x82>
 800ee70:	4629      	mov	r1, r5
 800ee72:	4638      	mov	r0, r7
 800ee74:	f7ff ffc2 	bl	800edfc <sbrk_aligned>
 800ee78:	1c43      	adds	r3, r0, #1
 800ee7a:	4604      	mov	r4, r0
 800ee7c:	d14d      	bne.n	800ef1a <_malloc_r+0xde>
 800ee7e:	6834      	ldr	r4, [r6, #0]
 800ee80:	4626      	mov	r6, r4
 800ee82:	2e00      	cmp	r6, #0
 800ee84:	d140      	bne.n	800ef08 <_malloc_r+0xcc>
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	4631      	mov	r1, r6
 800ee8a:	4638      	mov	r0, r7
 800ee8c:	eb04 0803 	add.w	r8, r4, r3
 800ee90:	f000 f908 	bl	800f0a4 <_sbrk_r>
 800ee94:	4580      	cmp	r8, r0
 800ee96:	d13a      	bne.n	800ef0e <_malloc_r+0xd2>
 800ee98:	6821      	ldr	r1, [r4, #0]
 800ee9a:	3503      	adds	r5, #3
 800ee9c:	1a6d      	subs	r5, r5, r1
 800ee9e:	f025 0503 	bic.w	r5, r5, #3
 800eea2:	3508      	adds	r5, #8
 800eea4:	2d0c      	cmp	r5, #12
 800eea6:	bf38      	it	cc
 800eea8:	250c      	movcc	r5, #12
 800eeaa:	4629      	mov	r1, r5
 800eeac:	4638      	mov	r0, r7
 800eeae:	f7ff ffa5 	bl	800edfc <sbrk_aligned>
 800eeb2:	3001      	adds	r0, #1
 800eeb4:	d02b      	beq.n	800ef0e <_malloc_r+0xd2>
 800eeb6:	6823      	ldr	r3, [r4, #0]
 800eeb8:	442b      	add	r3, r5
 800eeba:	6023      	str	r3, [r4, #0]
 800eebc:	e00e      	b.n	800eedc <_malloc_r+0xa0>
 800eebe:	6822      	ldr	r2, [r4, #0]
 800eec0:	1b52      	subs	r2, r2, r5
 800eec2:	d41e      	bmi.n	800ef02 <_malloc_r+0xc6>
 800eec4:	2a0b      	cmp	r2, #11
 800eec6:	d916      	bls.n	800eef6 <_malloc_r+0xba>
 800eec8:	1961      	adds	r1, r4, r5
 800eeca:	42a3      	cmp	r3, r4
 800eecc:	6025      	str	r5, [r4, #0]
 800eece:	bf18      	it	ne
 800eed0:	6059      	strne	r1, [r3, #4]
 800eed2:	6863      	ldr	r3, [r4, #4]
 800eed4:	bf08      	it	eq
 800eed6:	6031      	streq	r1, [r6, #0]
 800eed8:	5162      	str	r2, [r4, r5]
 800eeda:	604b      	str	r3, [r1, #4]
 800eedc:	4638      	mov	r0, r7
 800eede:	f104 060b 	add.w	r6, r4, #11
 800eee2:	f000 fa7b 	bl	800f3dc <__malloc_unlock>
 800eee6:	f026 0607 	bic.w	r6, r6, #7
 800eeea:	1d23      	adds	r3, r4, #4
 800eeec:	1af2      	subs	r2, r6, r3
 800eeee:	d0b6      	beq.n	800ee5e <_malloc_r+0x22>
 800eef0:	1b9b      	subs	r3, r3, r6
 800eef2:	50a3      	str	r3, [r4, r2]
 800eef4:	e7b3      	b.n	800ee5e <_malloc_r+0x22>
 800eef6:	6862      	ldr	r2, [r4, #4]
 800eef8:	42a3      	cmp	r3, r4
 800eefa:	bf0c      	ite	eq
 800eefc:	6032      	streq	r2, [r6, #0]
 800eefe:	605a      	strne	r2, [r3, #4]
 800ef00:	e7ec      	b.n	800eedc <_malloc_r+0xa0>
 800ef02:	4623      	mov	r3, r4
 800ef04:	6864      	ldr	r4, [r4, #4]
 800ef06:	e7b2      	b.n	800ee6e <_malloc_r+0x32>
 800ef08:	4634      	mov	r4, r6
 800ef0a:	6876      	ldr	r6, [r6, #4]
 800ef0c:	e7b9      	b.n	800ee82 <_malloc_r+0x46>
 800ef0e:	230c      	movs	r3, #12
 800ef10:	603b      	str	r3, [r7, #0]
 800ef12:	4638      	mov	r0, r7
 800ef14:	f000 fa62 	bl	800f3dc <__malloc_unlock>
 800ef18:	e7a1      	b.n	800ee5e <_malloc_r+0x22>
 800ef1a:	6025      	str	r5, [r4, #0]
 800ef1c:	e7de      	b.n	800eedc <_malloc_r+0xa0>
 800ef1e:	bf00      	nop
 800ef20:	2001093c 	.word	0x2001093c

0800ef24 <iprintf>:
 800ef24:	b40f      	push	{r0, r1, r2, r3}
 800ef26:	4b0a      	ldr	r3, [pc, #40]	; (800ef50 <iprintf+0x2c>)
 800ef28:	b513      	push	{r0, r1, r4, lr}
 800ef2a:	681c      	ldr	r4, [r3, #0]
 800ef2c:	b124      	cbz	r4, 800ef38 <iprintf+0x14>
 800ef2e:	69a3      	ldr	r3, [r4, #24]
 800ef30:	b913      	cbnz	r3, 800ef38 <iprintf+0x14>
 800ef32:	4620      	mov	r0, r4
 800ef34:	f7ff fe76 	bl	800ec24 <__sinit>
 800ef38:	ab05      	add	r3, sp, #20
 800ef3a:	9a04      	ldr	r2, [sp, #16]
 800ef3c:	68a1      	ldr	r1, [r4, #8]
 800ef3e:	9301      	str	r3, [sp, #4]
 800ef40:	4620      	mov	r0, r4
 800ef42:	f000 fac7 	bl	800f4d4 <_vfiprintf_r>
 800ef46:	b002      	add	sp, #8
 800ef48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef4c:	b004      	add	sp, #16
 800ef4e:	4770      	bx	lr
 800ef50:	2000002c 	.word	0x2000002c

0800ef54 <rand>:
 800ef54:	4b16      	ldr	r3, [pc, #88]	; (800efb0 <rand+0x5c>)
 800ef56:	b510      	push	{r4, lr}
 800ef58:	681c      	ldr	r4, [r3, #0]
 800ef5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef5c:	b9b3      	cbnz	r3, 800ef8c <rand+0x38>
 800ef5e:	2018      	movs	r0, #24
 800ef60:	f000 fa2e 	bl	800f3c0 <malloc>
 800ef64:	63a0      	str	r0, [r4, #56]	; 0x38
 800ef66:	b928      	cbnz	r0, 800ef74 <rand+0x20>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	4b12      	ldr	r3, [pc, #72]	; (800efb4 <rand+0x60>)
 800ef6c:	4812      	ldr	r0, [pc, #72]	; (800efb8 <rand+0x64>)
 800ef6e:	214e      	movs	r1, #78	; 0x4e
 800ef70:	f000 f912 	bl	800f198 <__assert_func>
 800ef74:	4a11      	ldr	r2, [pc, #68]	; (800efbc <rand+0x68>)
 800ef76:	4b12      	ldr	r3, [pc, #72]	; (800efc0 <rand+0x6c>)
 800ef78:	e9c0 2300 	strd	r2, r3, [r0]
 800ef7c:	4b11      	ldr	r3, [pc, #68]	; (800efc4 <rand+0x70>)
 800ef7e:	6083      	str	r3, [r0, #8]
 800ef80:	230b      	movs	r3, #11
 800ef82:	8183      	strh	r3, [r0, #12]
 800ef84:	2201      	movs	r2, #1
 800ef86:	2300      	movs	r3, #0
 800ef88:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ef8e:	4a0e      	ldr	r2, [pc, #56]	; (800efc8 <rand+0x74>)
 800ef90:	6920      	ldr	r0, [r4, #16]
 800ef92:	6963      	ldr	r3, [r4, #20]
 800ef94:	490d      	ldr	r1, [pc, #52]	; (800efcc <rand+0x78>)
 800ef96:	4342      	muls	r2, r0
 800ef98:	fb01 2203 	mla	r2, r1, r3, r2
 800ef9c:	fba0 0101 	umull	r0, r1, r0, r1
 800efa0:	1c43      	adds	r3, r0, #1
 800efa2:	eb42 0001 	adc.w	r0, r2, r1
 800efa6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800efaa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800efae:	bd10      	pop	{r4, pc}
 800efb0:	2000002c 	.word	0x2000002c
 800efb4:	08013458 	.word	0x08013458
 800efb8:	0801346f 	.word	0x0801346f
 800efbc:	abcd330e 	.word	0xabcd330e
 800efc0:	e66d1234 	.word	0xe66d1234
 800efc4:	0005deec 	.word	0x0005deec
 800efc8:	5851f42d 	.word	0x5851f42d
 800efcc:	4c957f2d 	.word	0x4c957f2d

0800efd0 <cleanup_glue>:
 800efd0:	b538      	push	{r3, r4, r5, lr}
 800efd2:	460c      	mov	r4, r1
 800efd4:	6809      	ldr	r1, [r1, #0]
 800efd6:	4605      	mov	r5, r0
 800efd8:	b109      	cbz	r1, 800efde <cleanup_glue+0xe>
 800efda:	f7ff fff9 	bl	800efd0 <cleanup_glue>
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efe6:	f000 b9ff 	b.w	800f3e8 <_free_r>
	...

0800efec <_reclaim_reent>:
 800efec:	4b2c      	ldr	r3, [pc, #176]	; (800f0a0 <_reclaim_reent+0xb4>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	4283      	cmp	r3, r0
 800eff2:	b570      	push	{r4, r5, r6, lr}
 800eff4:	4604      	mov	r4, r0
 800eff6:	d051      	beq.n	800f09c <_reclaim_reent+0xb0>
 800eff8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800effa:	b143      	cbz	r3, 800f00e <_reclaim_reent+0x22>
 800effc:	68db      	ldr	r3, [r3, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d14a      	bne.n	800f098 <_reclaim_reent+0xac>
 800f002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f004:	6819      	ldr	r1, [r3, #0]
 800f006:	b111      	cbz	r1, 800f00e <_reclaim_reent+0x22>
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 f9ed 	bl	800f3e8 <_free_r>
 800f00e:	6961      	ldr	r1, [r4, #20]
 800f010:	b111      	cbz	r1, 800f018 <_reclaim_reent+0x2c>
 800f012:	4620      	mov	r0, r4
 800f014:	f000 f9e8 	bl	800f3e8 <_free_r>
 800f018:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f01a:	b111      	cbz	r1, 800f022 <_reclaim_reent+0x36>
 800f01c:	4620      	mov	r0, r4
 800f01e:	f000 f9e3 	bl	800f3e8 <_free_r>
 800f022:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800f024:	b111      	cbz	r1, 800f02c <_reclaim_reent+0x40>
 800f026:	4620      	mov	r0, r4
 800f028:	f000 f9de 	bl	800f3e8 <_free_r>
 800f02c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800f02e:	b111      	cbz	r1, 800f036 <_reclaim_reent+0x4a>
 800f030:	4620      	mov	r0, r4
 800f032:	f000 f9d9 	bl	800f3e8 <_free_r>
 800f036:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f038:	b111      	cbz	r1, 800f040 <_reclaim_reent+0x54>
 800f03a:	4620      	mov	r0, r4
 800f03c:	f000 f9d4 	bl	800f3e8 <_free_r>
 800f040:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f042:	b111      	cbz	r1, 800f04a <_reclaim_reent+0x5e>
 800f044:	4620      	mov	r0, r4
 800f046:	f000 f9cf 	bl	800f3e8 <_free_r>
 800f04a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f04c:	b111      	cbz	r1, 800f054 <_reclaim_reent+0x68>
 800f04e:	4620      	mov	r0, r4
 800f050:	f000 f9ca 	bl	800f3e8 <_free_r>
 800f054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f056:	b111      	cbz	r1, 800f05e <_reclaim_reent+0x72>
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 f9c5 	bl	800f3e8 <_free_r>
 800f05e:	69a3      	ldr	r3, [r4, #24]
 800f060:	b1e3      	cbz	r3, 800f09c <_reclaim_reent+0xb0>
 800f062:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f064:	4620      	mov	r0, r4
 800f066:	4798      	blx	r3
 800f068:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f06a:	b1b9      	cbz	r1, 800f09c <_reclaim_reent+0xb0>
 800f06c:	4620      	mov	r0, r4
 800f06e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f072:	f7ff bfad 	b.w	800efd0 <cleanup_glue>
 800f076:	5949      	ldr	r1, [r1, r5]
 800f078:	b941      	cbnz	r1, 800f08c <_reclaim_reent+0xa0>
 800f07a:	3504      	adds	r5, #4
 800f07c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f07e:	2d80      	cmp	r5, #128	; 0x80
 800f080:	68d9      	ldr	r1, [r3, #12]
 800f082:	d1f8      	bne.n	800f076 <_reclaim_reent+0x8a>
 800f084:	4620      	mov	r0, r4
 800f086:	f000 f9af 	bl	800f3e8 <_free_r>
 800f08a:	e7ba      	b.n	800f002 <_reclaim_reent+0x16>
 800f08c:	680e      	ldr	r6, [r1, #0]
 800f08e:	4620      	mov	r0, r4
 800f090:	f000 f9aa 	bl	800f3e8 <_free_r>
 800f094:	4631      	mov	r1, r6
 800f096:	e7ef      	b.n	800f078 <_reclaim_reent+0x8c>
 800f098:	2500      	movs	r5, #0
 800f09a:	e7ef      	b.n	800f07c <_reclaim_reent+0x90>
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
 800f09e:	bf00      	nop
 800f0a0:	2000002c 	.word	0x2000002c

0800f0a4 <_sbrk_r>:
 800f0a4:	b538      	push	{r3, r4, r5, lr}
 800f0a6:	4d06      	ldr	r5, [pc, #24]	; (800f0c0 <_sbrk_r+0x1c>)
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	4608      	mov	r0, r1
 800f0ae:	602b      	str	r3, [r5, #0]
 800f0b0:	f7f1 fd68 	bl	8000b84 <_sbrk>
 800f0b4:	1c43      	adds	r3, r0, #1
 800f0b6:	d102      	bne.n	800f0be <_sbrk_r+0x1a>
 800f0b8:	682b      	ldr	r3, [r5, #0]
 800f0ba:	b103      	cbz	r3, 800f0be <_sbrk_r+0x1a>
 800f0bc:	6023      	str	r3, [r4, #0]
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
 800f0c0:	20010944 	.word	0x20010944

0800f0c4 <__sread>:
 800f0c4:	b510      	push	{r4, lr}
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0cc:	f000 fcc6 	bl	800fa5c <_read_r>
 800f0d0:	2800      	cmp	r0, #0
 800f0d2:	bfab      	itete	ge
 800f0d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0d6:	89a3      	ldrhlt	r3, [r4, #12]
 800f0d8:	181b      	addge	r3, r3, r0
 800f0da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0de:	bfac      	ite	ge
 800f0e0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0e2:	81a3      	strhlt	r3, [r4, #12]
 800f0e4:	bd10      	pop	{r4, pc}

0800f0e6 <__swrite>:
 800f0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0ea:	461f      	mov	r7, r3
 800f0ec:	898b      	ldrh	r3, [r1, #12]
 800f0ee:	05db      	lsls	r3, r3, #23
 800f0f0:	4605      	mov	r5, r0
 800f0f2:	460c      	mov	r4, r1
 800f0f4:	4616      	mov	r6, r2
 800f0f6:	d505      	bpl.n	800f104 <__swrite+0x1e>
 800f0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	2200      	movs	r2, #0
 800f100:	f000 f94c 	bl	800f39c <_lseek_r>
 800f104:	89a3      	ldrh	r3, [r4, #12]
 800f106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f10a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f10e:	81a3      	strh	r3, [r4, #12]
 800f110:	4632      	mov	r2, r6
 800f112:	463b      	mov	r3, r7
 800f114:	4628      	mov	r0, r5
 800f116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f11a:	f000 b82b 	b.w	800f174 <_write_r>

0800f11e <__sseek>:
 800f11e:	b510      	push	{r4, lr}
 800f120:	460c      	mov	r4, r1
 800f122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f126:	f000 f939 	bl	800f39c <_lseek_r>
 800f12a:	1c43      	adds	r3, r0, #1
 800f12c:	89a3      	ldrh	r3, [r4, #12]
 800f12e:	bf15      	itete	ne
 800f130:	6560      	strne	r0, [r4, #84]	; 0x54
 800f132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f13a:	81a3      	strheq	r3, [r4, #12]
 800f13c:	bf18      	it	ne
 800f13e:	81a3      	strhne	r3, [r4, #12]
 800f140:	bd10      	pop	{r4, pc}

0800f142 <__sclose>:
 800f142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f146:	f000 b845 	b.w	800f1d4 <_close_r>

0800f14a <strncmp>:
 800f14a:	b510      	push	{r4, lr}
 800f14c:	b17a      	cbz	r2, 800f16e <strncmp+0x24>
 800f14e:	4603      	mov	r3, r0
 800f150:	3901      	subs	r1, #1
 800f152:	1884      	adds	r4, r0, r2
 800f154:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f158:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f15c:	4290      	cmp	r0, r2
 800f15e:	d101      	bne.n	800f164 <strncmp+0x1a>
 800f160:	42a3      	cmp	r3, r4
 800f162:	d101      	bne.n	800f168 <strncmp+0x1e>
 800f164:	1a80      	subs	r0, r0, r2
 800f166:	bd10      	pop	{r4, pc}
 800f168:	2800      	cmp	r0, #0
 800f16a:	d1f3      	bne.n	800f154 <strncmp+0xa>
 800f16c:	e7fa      	b.n	800f164 <strncmp+0x1a>
 800f16e:	4610      	mov	r0, r2
 800f170:	e7f9      	b.n	800f166 <strncmp+0x1c>
	...

0800f174 <_write_r>:
 800f174:	b538      	push	{r3, r4, r5, lr}
 800f176:	4d07      	ldr	r5, [pc, #28]	; (800f194 <_write_r+0x20>)
 800f178:	4604      	mov	r4, r0
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	2200      	movs	r2, #0
 800f180:	602a      	str	r2, [r5, #0]
 800f182:	461a      	mov	r2, r3
 800f184:	f7f1 fce5 	bl	8000b52 <_write>
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	d102      	bne.n	800f192 <_write_r+0x1e>
 800f18c:	682b      	ldr	r3, [r5, #0]
 800f18e:	b103      	cbz	r3, 800f192 <_write_r+0x1e>
 800f190:	6023      	str	r3, [r4, #0]
 800f192:	bd38      	pop	{r3, r4, r5, pc}
 800f194:	20010944 	.word	0x20010944

0800f198 <__assert_func>:
 800f198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f19a:	4614      	mov	r4, r2
 800f19c:	461a      	mov	r2, r3
 800f19e:	4b09      	ldr	r3, [pc, #36]	; (800f1c4 <__assert_func+0x2c>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4605      	mov	r5, r0
 800f1a4:	68d8      	ldr	r0, [r3, #12]
 800f1a6:	b14c      	cbz	r4, 800f1bc <__assert_func+0x24>
 800f1a8:	4b07      	ldr	r3, [pc, #28]	; (800f1c8 <__assert_func+0x30>)
 800f1aa:	9100      	str	r1, [sp, #0]
 800f1ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1b0:	4906      	ldr	r1, [pc, #24]	; (800f1cc <__assert_func+0x34>)
 800f1b2:	462b      	mov	r3, r5
 800f1b4:	f000 f8e0 	bl	800f378 <fiprintf>
 800f1b8:	f000 fd22 	bl	800fc00 <abort>
 800f1bc:	4b04      	ldr	r3, [pc, #16]	; (800f1d0 <__assert_func+0x38>)
 800f1be:	461c      	mov	r4, r3
 800f1c0:	e7f3      	b.n	800f1aa <__assert_func+0x12>
 800f1c2:	bf00      	nop
 800f1c4:	2000002c 	.word	0x2000002c
 800f1c8:	080134ca 	.word	0x080134ca
 800f1cc:	080134d7 	.word	0x080134d7
 800f1d0:	08013505 	.word	0x08013505

0800f1d4 <_close_r>:
 800f1d4:	b538      	push	{r3, r4, r5, lr}
 800f1d6:	4d06      	ldr	r5, [pc, #24]	; (800f1f0 <_close_r+0x1c>)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	4604      	mov	r4, r0
 800f1dc:	4608      	mov	r0, r1
 800f1de:	602b      	str	r3, [r5, #0]
 800f1e0:	f7f1 fcc4 	bl	8000b6c <_close>
 800f1e4:	1c43      	adds	r3, r0, #1
 800f1e6:	d102      	bne.n	800f1ee <_close_r+0x1a>
 800f1e8:	682b      	ldr	r3, [r5, #0]
 800f1ea:	b103      	cbz	r3, 800f1ee <_close_r+0x1a>
 800f1ec:	6023      	str	r3, [r4, #0]
 800f1ee:	bd38      	pop	{r3, r4, r5, pc}
 800f1f0:	20010944 	.word	0x20010944

0800f1f4 <__sflush_r>:
 800f1f4:	898a      	ldrh	r2, [r1, #12]
 800f1f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1fa:	4605      	mov	r5, r0
 800f1fc:	0710      	lsls	r0, r2, #28
 800f1fe:	460c      	mov	r4, r1
 800f200:	d458      	bmi.n	800f2b4 <__sflush_r+0xc0>
 800f202:	684b      	ldr	r3, [r1, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	dc05      	bgt.n	800f214 <__sflush_r+0x20>
 800f208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	dc02      	bgt.n	800f214 <__sflush_r+0x20>
 800f20e:	2000      	movs	r0, #0
 800f210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f216:	2e00      	cmp	r6, #0
 800f218:	d0f9      	beq.n	800f20e <__sflush_r+0x1a>
 800f21a:	2300      	movs	r3, #0
 800f21c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f220:	682f      	ldr	r7, [r5, #0]
 800f222:	602b      	str	r3, [r5, #0]
 800f224:	d032      	beq.n	800f28c <__sflush_r+0x98>
 800f226:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f228:	89a3      	ldrh	r3, [r4, #12]
 800f22a:	075a      	lsls	r2, r3, #29
 800f22c:	d505      	bpl.n	800f23a <__sflush_r+0x46>
 800f22e:	6863      	ldr	r3, [r4, #4]
 800f230:	1ac0      	subs	r0, r0, r3
 800f232:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f234:	b10b      	cbz	r3, 800f23a <__sflush_r+0x46>
 800f236:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f238:	1ac0      	subs	r0, r0, r3
 800f23a:	2300      	movs	r3, #0
 800f23c:	4602      	mov	r2, r0
 800f23e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f240:	6a21      	ldr	r1, [r4, #32]
 800f242:	4628      	mov	r0, r5
 800f244:	47b0      	blx	r6
 800f246:	1c43      	adds	r3, r0, #1
 800f248:	89a3      	ldrh	r3, [r4, #12]
 800f24a:	d106      	bne.n	800f25a <__sflush_r+0x66>
 800f24c:	6829      	ldr	r1, [r5, #0]
 800f24e:	291d      	cmp	r1, #29
 800f250:	d82c      	bhi.n	800f2ac <__sflush_r+0xb8>
 800f252:	4a2a      	ldr	r2, [pc, #168]	; (800f2fc <__sflush_r+0x108>)
 800f254:	40ca      	lsrs	r2, r1
 800f256:	07d6      	lsls	r6, r2, #31
 800f258:	d528      	bpl.n	800f2ac <__sflush_r+0xb8>
 800f25a:	2200      	movs	r2, #0
 800f25c:	6062      	str	r2, [r4, #4]
 800f25e:	04d9      	lsls	r1, r3, #19
 800f260:	6922      	ldr	r2, [r4, #16]
 800f262:	6022      	str	r2, [r4, #0]
 800f264:	d504      	bpl.n	800f270 <__sflush_r+0x7c>
 800f266:	1c42      	adds	r2, r0, #1
 800f268:	d101      	bne.n	800f26e <__sflush_r+0x7a>
 800f26a:	682b      	ldr	r3, [r5, #0]
 800f26c:	b903      	cbnz	r3, 800f270 <__sflush_r+0x7c>
 800f26e:	6560      	str	r0, [r4, #84]	; 0x54
 800f270:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f272:	602f      	str	r7, [r5, #0]
 800f274:	2900      	cmp	r1, #0
 800f276:	d0ca      	beq.n	800f20e <__sflush_r+0x1a>
 800f278:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f27c:	4299      	cmp	r1, r3
 800f27e:	d002      	beq.n	800f286 <__sflush_r+0x92>
 800f280:	4628      	mov	r0, r5
 800f282:	f000 f8b1 	bl	800f3e8 <_free_r>
 800f286:	2000      	movs	r0, #0
 800f288:	6360      	str	r0, [r4, #52]	; 0x34
 800f28a:	e7c1      	b.n	800f210 <__sflush_r+0x1c>
 800f28c:	6a21      	ldr	r1, [r4, #32]
 800f28e:	2301      	movs	r3, #1
 800f290:	4628      	mov	r0, r5
 800f292:	47b0      	blx	r6
 800f294:	1c41      	adds	r1, r0, #1
 800f296:	d1c7      	bne.n	800f228 <__sflush_r+0x34>
 800f298:	682b      	ldr	r3, [r5, #0]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d0c4      	beq.n	800f228 <__sflush_r+0x34>
 800f29e:	2b1d      	cmp	r3, #29
 800f2a0:	d001      	beq.n	800f2a6 <__sflush_r+0xb2>
 800f2a2:	2b16      	cmp	r3, #22
 800f2a4:	d101      	bne.n	800f2aa <__sflush_r+0xb6>
 800f2a6:	602f      	str	r7, [r5, #0]
 800f2a8:	e7b1      	b.n	800f20e <__sflush_r+0x1a>
 800f2aa:	89a3      	ldrh	r3, [r4, #12]
 800f2ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2b0:	81a3      	strh	r3, [r4, #12]
 800f2b2:	e7ad      	b.n	800f210 <__sflush_r+0x1c>
 800f2b4:	690f      	ldr	r7, [r1, #16]
 800f2b6:	2f00      	cmp	r7, #0
 800f2b8:	d0a9      	beq.n	800f20e <__sflush_r+0x1a>
 800f2ba:	0793      	lsls	r3, r2, #30
 800f2bc:	680e      	ldr	r6, [r1, #0]
 800f2be:	bf08      	it	eq
 800f2c0:	694b      	ldreq	r3, [r1, #20]
 800f2c2:	600f      	str	r7, [r1, #0]
 800f2c4:	bf18      	it	ne
 800f2c6:	2300      	movne	r3, #0
 800f2c8:	eba6 0807 	sub.w	r8, r6, r7
 800f2cc:	608b      	str	r3, [r1, #8]
 800f2ce:	f1b8 0f00 	cmp.w	r8, #0
 800f2d2:	dd9c      	ble.n	800f20e <__sflush_r+0x1a>
 800f2d4:	6a21      	ldr	r1, [r4, #32]
 800f2d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2d8:	4643      	mov	r3, r8
 800f2da:	463a      	mov	r2, r7
 800f2dc:	4628      	mov	r0, r5
 800f2de:	47b0      	blx	r6
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	dc06      	bgt.n	800f2f2 <__sflush_r+0xfe>
 800f2e4:	89a3      	ldrh	r3, [r4, #12]
 800f2e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2ea:	81a3      	strh	r3, [r4, #12]
 800f2ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f2f0:	e78e      	b.n	800f210 <__sflush_r+0x1c>
 800f2f2:	4407      	add	r7, r0
 800f2f4:	eba8 0800 	sub.w	r8, r8, r0
 800f2f8:	e7e9      	b.n	800f2ce <__sflush_r+0xda>
 800f2fa:	bf00      	nop
 800f2fc:	20400001 	.word	0x20400001

0800f300 <_fflush_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	690b      	ldr	r3, [r1, #16]
 800f304:	4605      	mov	r5, r0
 800f306:	460c      	mov	r4, r1
 800f308:	b913      	cbnz	r3, 800f310 <_fflush_r+0x10>
 800f30a:	2500      	movs	r5, #0
 800f30c:	4628      	mov	r0, r5
 800f30e:	bd38      	pop	{r3, r4, r5, pc}
 800f310:	b118      	cbz	r0, 800f31a <_fflush_r+0x1a>
 800f312:	6983      	ldr	r3, [r0, #24]
 800f314:	b90b      	cbnz	r3, 800f31a <_fflush_r+0x1a>
 800f316:	f7ff fc85 	bl	800ec24 <__sinit>
 800f31a:	4b14      	ldr	r3, [pc, #80]	; (800f36c <_fflush_r+0x6c>)
 800f31c:	429c      	cmp	r4, r3
 800f31e:	d11b      	bne.n	800f358 <_fflush_r+0x58>
 800f320:	686c      	ldr	r4, [r5, #4]
 800f322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d0ef      	beq.n	800f30a <_fflush_r+0xa>
 800f32a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f32c:	07d0      	lsls	r0, r2, #31
 800f32e:	d404      	bmi.n	800f33a <_fflush_r+0x3a>
 800f330:	0599      	lsls	r1, r3, #22
 800f332:	d402      	bmi.n	800f33a <_fflush_r+0x3a>
 800f334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f336:	f7ff fd38 	bl	800edaa <__retarget_lock_acquire_recursive>
 800f33a:	4628      	mov	r0, r5
 800f33c:	4621      	mov	r1, r4
 800f33e:	f7ff ff59 	bl	800f1f4 <__sflush_r>
 800f342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f344:	07da      	lsls	r2, r3, #31
 800f346:	4605      	mov	r5, r0
 800f348:	d4e0      	bmi.n	800f30c <_fflush_r+0xc>
 800f34a:	89a3      	ldrh	r3, [r4, #12]
 800f34c:	059b      	lsls	r3, r3, #22
 800f34e:	d4dd      	bmi.n	800f30c <_fflush_r+0xc>
 800f350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f352:	f7ff fd2b 	bl	800edac <__retarget_lock_release_recursive>
 800f356:	e7d9      	b.n	800f30c <_fflush_r+0xc>
 800f358:	4b05      	ldr	r3, [pc, #20]	; (800f370 <_fflush_r+0x70>)
 800f35a:	429c      	cmp	r4, r3
 800f35c:	d101      	bne.n	800f362 <_fflush_r+0x62>
 800f35e:	68ac      	ldr	r4, [r5, #8]
 800f360:	e7df      	b.n	800f322 <_fflush_r+0x22>
 800f362:	4b04      	ldr	r3, [pc, #16]	; (800f374 <_fflush_r+0x74>)
 800f364:	429c      	cmp	r4, r3
 800f366:	bf08      	it	eq
 800f368:	68ec      	ldreq	r4, [r5, #12]
 800f36a:	e7da      	b.n	800f322 <_fflush_r+0x22>
 800f36c:	08013414 	.word	0x08013414
 800f370:	08013434 	.word	0x08013434
 800f374:	080133f4 	.word	0x080133f4

0800f378 <fiprintf>:
 800f378:	b40e      	push	{r1, r2, r3}
 800f37a:	b503      	push	{r0, r1, lr}
 800f37c:	4601      	mov	r1, r0
 800f37e:	ab03      	add	r3, sp, #12
 800f380:	4805      	ldr	r0, [pc, #20]	; (800f398 <fiprintf+0x20>)
 800f382:	f853 2b04 	ldr.w	r2, [r3], #4
 800f386:	6800      	ldr	r0, [r0, #0]
 800f388:	9301      	str	r3, [sp, #4]
 800f38a:	f000 f8a3 	bl	800f4d4 <_vfiprintf_r>
 800f38e:	b002      	add	sp, #8
 800f390:	f85d eb04 	ldr.w	lr, [sp], #4
 800f394:	b003      	add	sp, #12
 800f396:	4770      	bx	lr
 800f398:	2000002c 	.word	0x2000002c

0800f39c <_lseek_r>:
 800f39c:	b538      	push	{r3, r4, r5, lr}
 800f39e:	4d07      	ldr	r5, [pc, #28]	; (800f3bc <_lseek_r+0x20>)
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	4608      	mov	r0, r1
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	602a      	str	r2, [r5, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	f7f1 fbe8 	bl	8000b80 <_lseek>
 800f3b0:	1c43      	adds	r3, r0, #1
 800f3b2:	d102      	bne.n	800f3ba <_lseek_r+0x1e>
 800f3b4:	682b      	ldr	r3, [r5, #0]
 800f3b6:	b103      	cbz	r3, 800f3ba <_lseek_r+0x1e>
 800f3b8:	6023      	str	r3, [r4, #0]
 800f3ba:	bd38      	pop	{r3, r4, r5, pc}
 800f3bc:	20010944 	.word	0x20010944

0800f3c0 <malloc>:
 800f3c0:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <malloc+0xc>)
 800f3c2:	4601      	mov	r1, r0
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f7ff bd39 	b.w	800ee3c <_malloc_r>
 800f3ca:	bf00      	nop
 800f3cc:	2000002c 	.word	0x2000002c

0800f3d0 <__malloc_lock>:
 800f3d0:	4801      	ldr	r0, [pc, #4]	; (800f3d8 <__malloc_lock+0x8>)
 800f3d2:	f7ff bcea 	b.w	800edaa <__retarget_lock_acquire_recursive>
 800f3d6:	bf00      	nop
 800f3d8:	20010938 	.word	0x20010938

0800f3dc <__malloc_unlock>:
 800f3dc:	4801      	ldr	r0, [pc, #4]	; (800f3e4 <__malloc_unlock+0x8>)
 800f3de:	f7ff bce5 	b.w	800edac <__retarget_lock_release_recursive>
 800f3e2:	bf00      	nop
 800f3e4:	20010938 	.word	0x20010938

0800f3e8 <_free_r>:
 800f3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3ea:	2900      	cmp	r1, #0
 800f3ec:	d044      	beq.n	800f478 <_free_r+0x90>
 800f3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3f2:	9001      	str	r0, [sp, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	f1a1 0404 	sub.w	r4, r1, #4
 800f3fa:	bfb8      	it	lt
 800f3fc:	18e4      	addlt	r4, r4, r3
 800f3fe:	f7ff ffe7 	bl	800f3d0 <__malloc_lock>
 800f402:	4a1e      	ldr	r2, [pc, #120]	; (800f47c <_free_r+0x94>)
 800f404:	9801      	ldr	r0, [sp, #4]
 800f406:	6813      	ldr	r3, [r2, #0]
 800f408:	b933      	cbnz	r3, 800f418 <_free_r+0x30>
 800f40a:	6063      	str	r3, [r4, #4]
 800f40c:	6014      	str	r4, [r2, #0]
 800f40e:	b003      	add	sp, #12
 800f410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f414:	f7ff bfe2 	b.w	800f3dc <__malloc_unlock>
 800f418:	42a3      	cmp	r3, r4
 800f41a:	d908      	bls.n	800f42e <_free_r+0x46>
 800f41c:	6825      	ldr	r5, [r4, #0]
 800f41e:	1961      	adds	r1, r4, r5
 800f420:	428b      	cmp	r3, r1
 800f422:	bf01      	itttt	eq
 800f424:	6819      	ldreq	r1, [r3, #0]
 800f426:	685b      	ldreq	r3, [r3, #4]
 800f428:	1949      	addeq	r1, r1, r5
 800f42a:	6021      	streq	r1, [r4, #0]
 800f42c:	e7ed      	b.n	800f40a <_free_r+0x22>
 800f42e:	461a      	mov	r2, r3
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	b10b      	cbz	r3, 800f438 <_free_r+0x50>
 800f434:	42a3      	cmp	r3, r4
 800f436:	d9fa      	bls.n	800f42e <_free_r+0x46>
 800f438:	6811      	ldr	r1, [r2, #0]
 800f43a:	1855      	adds	r5, r2, r1
 800f43c:	42a5      	cmp	r5, r4
 800f43e:	d10b      	bne.n	800f458 <_free_r+0x70>
 800f440:	6824      	ldr	r4, [r4, #0]
 800f442:	4421      	add	r1, r4
 800f444:	1854      	adds	r4, r2, r1
 800f446:	42a3      	cmp	r3, r4
 800f448:	6011      	str	r1, [r2, #0]
 800f44a:	d1e0      	bne.n	800f40e <_free_r+0x26>
 800f44c:	681c      	ldr	r4, [r3, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	6053      	str	r3, [r2, #4]
 800f452:	4421      	add	r1, r4
 800f454:	6011      	str	r1, [r2, #0]
 800f456:	e7da      	b.n	800f40e <_free_r+0x26>
 800f458:	d902      	bls.n	800f460 <_free_r+0x78>
 800f45a:	230c      	movs	r3, #12
 800f45c:	6003      	str	r3, [r0, #0]
 800f45e:	e7d6      	b.n	800f40e <_free_r+0x26>
 800f460:	6825      	ldr	r5, [r4, #0]
 800f462:	1961      	adds	r1, r4, r5
 800f464:	428b      	cmp	r3, r1
 800f466:	bf04      	itt	eq
 800f468:	6819      	ldreq	r1, [r3, #0]
 800f46a:	685b      	ldreq	r3, [r3, #4]
 800f46c:	6063      	str	r3, [r4, #4]
 800f46e:	bf04      	itt	eq
 800f470:	1949      	addeq	r1, r1, r5
 800f472:	6021      	streq	r1, [r4, #0]
 800f474:	6054      	str	r4, [r2, #4]
 800f476:	e7ca      	b.n	800f40e <_free_r+0x26>
 800f478:	b003      	add	sp, #12
 800f47a:	bd30      	pop	{r4, r5, pc}
 800f47c:	2001093c 	.word	0x2001093c

0800f480 <__sfputc_r>:
 800f480:	6893      	ldr	r3, [r2, #8]
 800f482:	3b01      	subs	r3, #1
 800f484:	2b00      	cmp	r3, #0
 800f486:	b410      	push	{r4}
 800f488:	6093      	str	r3, [r2, #8]
 800f48a:	da08      	bge.n	800f49e <__sfputc_r+0x1e>
 800f48c:	6994      	ldr	r4, [r2, #24]
 800f48e:	42a3      	cmp	r3, r4
 800f490:	db01      	blt.n	800f496 <__sfputc_r+0x16>
 800f492:	290a      	cmp	r1, #10
 800f494:	d103      	bne.n	800f49e <__sfputc_r+0x1e>
 800f496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f49a:	f000 baf1 	b.w	800fa80 <__swbuf_r>
 800f49e:	6813      	ldr	r3, [r2, #0]
 800f4a0:	1c58      	adds	r0, r3, #1
 800f4a2:	6010      	str	r0, [r2, #0]
 800f4a4:	7019      	strb	r1, [r3, #0]
 800f4a6:	4608      	mov	r0, r1
 800f4a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <__sfputs_r>:
 800f4ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4b0:	4606      	mov	r6, r0
 800f4b2:	460f      	mov	r7, r1
 800f4b4:	4614      	mov	r4, r2
 800f4b6:	18d5      	adds	r5, r2, r3
 800f4b8:	42ac      	cmp	r4, r5
 800f4ba:	d101      	bne.n	800f4c0 <__sfputs_r+0x12>
 800f4bc:	2000      	movs	r0, #0
 800f4be:	e007      	b.n	800f4d0 <__sfputs_r+0x22>
 800f4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4c4:	463a      	mov	r2, r7
 800f4c6:	4630      	mov	r0, r6
 800f4c8:	f7ff ffda 	bl	800f480 <__sfputc_r>
 800f4cc:	1c43      	adds	r3, r0, #1
 800f4ce:	d1f3      	bne.n	800f4b8 <__sfputs_r+0xa>
 800f4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4d4 <_vfiprintf_r>:
 800f4d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4d8:	460d      	mov	r5, r1
 800f4da:	b09d      	sub	sp, #116	; 0x74
 800f4dc:	4614      	mov	r4, r2
 800f4de:	4698      	mov	r8, r3
 800f4e0:	4606      	mov	r6, r0
 800f4e2:	b118      	cbz	r0, 800f4ec <_vfiprintf_r+0x18>
 800f4e4:	6983      	ldr	r3, [r0, #24]
 800f4e6:	b90b      	cbnz	r3, 800f4ec <_vfiprintf_r+0x18>
 800f4e8:	f7ff fb9c 	bl	800ec24 <__sinit>
 800f4ec:	4b89      	ldr	r3, [pc, #548]	; (800f714 <_vfiprintf_r+0x240>)
 800f4ee:	429d      	cmp	r5, r3
 800f4f0:	d11b      	bne.n	800f52a <_vfiprintf_r+0x56>
 800f4f2:	6875      	ldr	r5, [r6, #4]
 800f4f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4f6:	07d9      	lsls	r1, r3, #31
 800f4f8:	d405      	bmi.n	800f506 <_vfiprintf_r+0x32>
 800f4fa:	89ab      	ldrh	r3, [r5, #12]
 800f4fc:	059a      	lsls	r2, r3, #22
 800f4fe:	d402      	bmi.n	800f506 <_vfiprintf_r+0x32>
 800f500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f502:	f7ff fc52 	bl	800edaa <__retarget_lock_acquire_recursive>
 800f506:	89ab      	ldrh	r3, [r5, #12]
 800f508:	071b      	lsls	r3, r3, #28
 800f50a:	d501      	bpl.n	800f510 <_vfiprintf_r+0x3c>
 800f50c:	692b      	ldr	r3, [r5, #16]
 800f50e:	b9eb      	cbnz	r3, 800f54c <_vfiprintf_r+0x78>
 800f510:	4629      	mov	r1, r5
 800f512:	4630      	mov	r0, r6
 800f514:	f000 fb06 	bl	800fb24 <__swsetup_r>
 800f518:	b1c0      	cbz	r0, 800f54c <_vfiprintf_r+0x78>
 800f51a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f51c:	07dc      	lsls	r4, r3, #31
 800f51e:	d50e      	bpl.n	800f53e <_vfiprintf_r+0x6a>
 800f520:	f04f 30ff 	mov.w	r0, #4294967295
 800f524:	b01d      	add	sp, #116	; 0x74
 800f526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f52a:	4b7b      	ldr	r3, [pc, #492]	; (800f718 <_vfiprintf_r+0x244>)
 800f52c:	429d      	cmp	r5, r3
 800f52e:	d101      	bne.n	800f534 <_vfiprintf_r+0x60>
 800f530:	68b5      	ldr	r5, [r6, #8]
 800f532:	e7df      	b.n	800f4f4 <_vfiprintf_r+0x20>
 800f534:	4b79      	ldr	r3, [pc, #484]	; (800f71c <_vfiprintf_r+0x248>)
 800f536:	429d      	cmp	r5, r3
 800f538:	bf08      	it	eq
 800f53a:	68f5      	ldreq	r5, [r6, #12]
 800f53c:	e7da      	b.n	800f4f4 <_vfiprintf_r+0x20>
 800f53e:	89ab      	ldrh	r3, [r5, #12]
 800f540:	0598      	lsls	r0, r3, #22
 800f542:	d4ed      	bmi.n	800f520 <_vfiprintf_r+0x4c>
 800f544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f546:	f7ff fc31 	bl	800edac <__retarget_lock_release_recursive>
 800f54a:	e7e9      	b.n	800f520 <_vfiprintf_r+0x4c>
 800f54c:	2300      	movs	r3, #0
 800f54e:	9309      	str	r3, [sp, #36]	; 0x24
 800f550:	2320      	movs	r3, #32
 800f552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f556:	f8cd 800c 	str.w	r8, [sp, #12]
 800f55a:	2330      	movs	r3, #48	; 0x30
 800f55c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f720 <_vfiprintf_r+0x24c>
 800f560:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f564:	f04f 0901 	mov.w	r9, #1
 800f568:	4623      	mov	r3, r4
 800f56a:	469a      	mov	sl, r3
 800f56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f570:	b10a      	cbz	r2, 800f576 <_vfiprintf_r+0xa2>
 800f572:	2a25      	cmp	r2, #37	; 0x25
 800f574:	d1f9      	bne.n	800f56a <_vfiprintf_r+0x96>
 800f576:	ebba 0b04 	subs.w	fp, sl, r4
 800f57a:	d00b      	beq.n	800f594 <_vfiprintf_r+0xc0>
 800f57c:	465b      	mov	r3, fp
 800f57e:	4622      	mov	r2, r4
 800f580:	4629      	mov	r1, r5
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff ff93 	bl	800f4ae <__sfputs_r>
 800f588:	3001      	adds	r0, #1
 800f58a:	f000 80aa 	beq.w	800f6e2 <_vfiprintf_r+0x20e>
 800f58e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f590:	445a      	add	r2, fp
 800f592:	9209      	str	r2, [sp, #36]	; 0x24
 800f594:	f89a 3000 	ldrb.w	r3, [sl]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f000 80a2 	beq.w	800f6e2 <_vfiprintf_r+0x20e>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5a8:	f10a 0a01 	add.w	sl, sl, #1
 800f5ac:	9304      	str	r3, [sp, #16]
 800f5ae:	9307      	str	r3, [sp, #28]
 800f5b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5b4:	931a      	str	r3, [sp, #104]	; 0x68
 800f5b6:	4654      	mov	r4, sl
 800f5b8:	2205      	movs	r2, #5
 800f5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5be:	4858      	ldr	r0, [pc, #352]	; (800f720 <_vfiprintf_r+0x24c>)
 800f5c0:	f7f0 fe26 	bl	8000210 <memchr>
 800f5c4:	9a04      	ldr	r2, [sp, #16]
 800f5c6:	b9d8      	cbnz	r0, 800f600 <_vfiprintf_r+0x12c>
 800f5c8:	06d1      	lsls	r1, r2, #27
 800f5ca:	bf44      	itt	mi
 800f5cc:	2320      	movmi	r3, #32
 800f5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5d2:	0713      	lsls	r3, r2, #28
 800f5d4:	bf44      	itt	mi
 800f5d6:	232b      	movmi	r3, #43	; 0x2b
 800f5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800f5e2:	d015      	beq.n	800f610 <_vfiprintf_r+0x13c>
 800f5e4:	9a07      	ldr	r2, [sp, #28]
 800f5e6:	4654      	mov	r4, sl
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	f04f 0c0a 	mov.w	ip, #10
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5f4:	3b30      	subs	r3, #48	; 0x30
 800f5f6:	2b09      	cmp	r3, #9
 800f5f8:	d94e      	bls.n	800f698 <_vfiprintf_r+0x1c4>
 800f5fa:	b1b0      	cbz	r0, 800f62a <_vfiprintf_r+0x156>
 800f5fc:	9207      	str	r2, [sp, #28]
 800f5fe:	e014      	b.n	800f62a <_vfiprintf_r+0x156>
 800f600:	eba0 0308 	sub.w	r3, r0, r8
 800f604:	fa09 f303 	lsl.w	r3, r9, r3
 800f608:	4313      	orrs	r3, r2
 800f60a:	9304      	str	r3, [sp, #16]
 800f60c:	46a2      	mov	sl, r4
 800f60e:	e7d2      	b.n	800f5b6 <_vfiprintf_r+0xe2>
 800f610:	9b03      	ldr	r3, [sp, #12]
 800f612:	1d19      	adds	r1, r3, #4
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	9103      	str	r1, [sp, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bfbb      	ittet	lt
 800f61c:	425b      	neglt	r3, r3
 800f61e:	f042 0202 	orrlt.w	r2, r2, #2
 800f622:	9307      	strge	r3, [sp, #28]
 800f624:	9307      	strlt	r3, [sp, #28]
 800f626:	bfb8      	it	lt
 800f628:	9204      	strlt	r2, [sp, #16]
 800f62a:	7823      	ldrb	r3, [r4, #0]
 800f62c:	2b2e      	cmp	r3, #46	; 0x2e
 800f62e:	d10c      	bne.n	800f64a <_vfiprintf_r+0x176>
 800f630:	7863      	ldrb	r3, [r4, #1]
 800f632:	2b2a      	cmp	r3, #42	; 0x2a
 800f634:	d135      	bne.n	800f6a2 <_vfiprintf_r+0x1ce>
 800f636:	9b03      	ldr	r3, [sp, #12]
 800f638:	1d1a      	adds	r2, r3, #4
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	9203      	str	r2, [sp, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	bfb8      	it	lt
 800f642:	f04f 33ff 	movlt.w	r3, #4294967295
 800f646:	3402      	adds	r4, #2
 800f648:	9305      	str	r3, [sp, #20]
 800f64a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f730 <_vfiprintf_r+0x25c>
 800f64e:	7821      	ldrb	r1, [r4, #0]
 800f650:	2203      	movs	r2, #3
 800f652:	4650      	mov	r0, sl
 800f654:	f7f0 fddc 	bl	8000210 <memchr>
 800f658:	b140      	cbz	r0, 800f66c <_vfiprintf_r+0x198>
 800f65a:	2340      	movs	r3, #64	; 0x40
 800f65c:	eba0 000a 	sub.w	r0, r0, sl
 800f660:	fa03 f000 	lsl.w	r0, r3, r0
 800f664:	9b04      	ldr	r3, [sp, #16]
 800f666:	4303      	orrs	r3, r0
 800f668:	3401      	adds	r4, #1
 800f66a:	9304      	str	r3, [sp, #16]
 800f66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f670:	482c      	ldr	r0, [pc, #176]	; (800f724 <_vfiprintf_r+0x250>)
 800f672:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f676:	2206      	movs	r2, #6
 800f678:	f7f0 fdca 	bl	8000210 <memchr>
 800f67c:	2800      	cmp	r0, #0
 800f67e:	d03f      	beq.n	800f700 <_vfiprintf_r+0x22c>
 800f680:	4b29      	ldr	r3, [pc, #164]	; (800f728 <_vfiprintf_r+0x254>)
 800f682:	bb1b      	cbnz	r3, 800f6cc <_vfiprintf_r+0x1f8>
 800f684:	9b03      	ldr	r3, [sp, #12]
 800f686:	3307      	adds	r3, #7
 800f688:	f023 0307 	bic.w	r3, r3, #7
 800f68c:	3308      	adds	r3, #8
 800f68e:	9303      	str	r3, [sp, #12]
 800f690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f692:	443b      	add	r3, r7
 800f694:	9309      	str	r3, [sp, #36]	; 0x24
 800f696:	e767      	b.n	800f568 <_vfiprintf_r+0x94>
 800f698:	fb0c 3202 	mla	r2, ip, r2, r3
 800f69c:	460c      	mov	r4, r1
 800f69e:	2001      	movs	r0, #1
 800f6a0:	e7a5      	b.n	800f5ee <_vfiprintf_r+0x11a>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	3401      	adds	r4, #1
 800f6a6:	9305      	str	r3, [sp, #20]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	f04f 0c0a 	mov.w	ip, #10
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6b4:	3a30      	subs	r2, #48	; 0x30
 800f6b6:	2a09      	cmp	r2, #9
 800f6b8:	d903      	bls.n	800f6c2 <_vfiprintf_r+0x1ee>
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d0c5      	beq.n	800f64a <_vfiprintf_r+0x176>
 800f6be:	9105      	str	r1, [sp, #20]
 800f6c0:	e7c3      	b.n	800f64a <_vfiprintf_r+0x176>
 800f6c2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6c6:	4604      	mov	r4, r0
 800f6c8:	2301      	movs	r3, #1
 800f6ca:	e7f0      	b.n	800f6ae <_vfiprintf_r+0x1da>
 800f6cc:	ab03      	add	r3, sp, #12
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	462a      	mov	r2, r5
 800f6d2:	4b16      	ldr	r3, [pc, #88]	; (800f72c <_vfiprintf_r+0x258>)
 800f6d4:	a904      	add	r1, sp, #16
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f3af 8000 	nop.w
 800f6dc:	4607      	mov	r7, r0
 800f6de:	1c78      	adds	r0, r7, #1
 800f6e0:	d1d6      	bne.n	800f690 <_vfiprintf_r+0x1bc>
 800f6e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f6e4:	07d9      	lsls	r1, r3, #31
 800f6e6:	d405      	bmi.n	800f6f4 <_vfiprintf_r+0x220>
 800f6e8:	89ab      	ldrh	r3, [r5, #12]
 800f6ea:	059a      	lsls	r2, r3, #22
 800f6ec:	d402      	bmi.n	800f6f4 <_vfiprintf_r+0x220>
 800f6ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f6f0:	f7ff fb5c 	bl	800edac <__retarget_lock_release_recursive>
 800f6f4:	89ab      	ldrh	r3, [r5, #12]
 800f6f6:	065b      	lsls	r3, r3, #25
 800f6f8:	f53f af12 	bmi.w	800f520 <_vfiprintf_r+0x4c>
 800f6fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f6fe:	e711      	b.n	800f524 <_vfiprintf_r+0x50>
 800f700:	ab03      	add	r3, sp, #12
 800f702:	9300      	str	r3, [sp, #0]
 800f704:	462a      	mov	r2, r5
 800f706:	4b09      	ldr	r3, [pc, #36]	; (800f72c <_vfiprintf_r+0x258>)
 800f708:	a904      	add	r1, sp, #16
 800f70a:	4630      	mov	r0, r6
 800f70c:	f000 f880 	bl	800f810 <_printf_i>
 800f710:	e7e4      	b.n	800f6dc <_vfiprintf_r+0x208>
 800f712:	bf00      	nop
 800f714:	08013414 	.word	0x08013414
 800f718:	08013434 	.word	0x08013434
 800f71c:	080133f4 	.word	0x080133f4
 800f720:	08013506 	.word	0x08013506
 800f724:	08013510 	.word	0x08013510
 800f728:	00000000 	.word	0x00000000
 800f72c:	0800f4af 	.word	0x0800f4af
 800f730:	0801350c 	.word	0x0801350c

0800f734 <_printf_common>:
 800f734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f738:	4616      	mov	r6, r2
 800f73a:	4699      	mov	r9, r3
 800f73c:	688a      	ldr	r2, [r1, #8]
 800f73e:	690b      	ldr	r3, [r1, #16]
 800f740:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f744:	4293      	cmp	r3, r2
 800f746:	bfb8      	it	lt
 800f748:	4613      	movlt	r3, r2
 800f74a:	6033      	str	r3, [r6, #0]
 800f74c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f750:	4607      	mov	r7, r0
 800f752:	460c      	mov	r4, r1
 800f754:	b10a      	cbz	r2, 800f75a <_printf_common+0x26>
 800f756:	3301      	adds	r3, #1
 800f758:	6033      	str	r3, [r6, #0]
 800f75a:	6823      	ldr	r3, [r4, #0]
 800f75c:	0699      	lsls	r1, r3, #26
 800f75e:	bf42      	ittt	mi
 800f760:	6833      	ldrmi	r3, [r6, #0]
 800f762:	3302      	addmi	r3, #2
 800f764:	6033      	strmi	r3, [r6, #0]
 800f766:	6825      	ldr	r5, [r4, #0]
 800f768:	f015 0506 	ands.w	r5, r5, #6
 800f76c:	d106      	bne.n	800f77c <_printf_common+0x48>
 800f76e:	f104 0a19 	add.w	sl, r4, #25
 800f772:	68e3      	ldr	r3, [r4, #12]
 800f774:	6832      	ldr	r2, [r6, #0]
 800f776:	1a9b      	subs	r3, r3, r2
 800f778:	42ab      	cmp	r3, r5
 800f77a:	dc26      	bgt.n	800f7ca <_printf_common+0x96>
 800f77c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f780:	1e13      	subs	r3, r2, #0
 800f782:	6822      	ldr	r2, [r4, #0]
 800f784:	bf18      	it	ne
 800f786:	2301      	movne	r3, #1
 800f788:	0692      	lsls	r2, r2, #26
 800f78a:	d42b      	bmi.n	800f7e4 <_printf_common+0xb0>
 800f78c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f790:	4649      	mov	r1, r9
 800f792:	4638      	mov	r0, r7
 800f794:	47c0      	blx	r8
 800f796:	3001      	adds	r0, #1
 800f798:	d01e      	beq.n	800f7d8 <_printf_common+0xa4>
 800f79a:	6823      	ldr	r3, [r4, #0]
 800f79c:	68e5      	ldr	r5, [r4, #12]
 800f79e:	6832      	ldr	r2, [r6, #0]
 800f7a0:	f003 0306 	and.w	r3, r3, #6
 800f7a4:	2b04      	cmp	r3, #4
 800f7a6:	bf08      	it	eq
 800f7a8:	1aad      	subeq	r5, r5, r2
 800f7aa:	68a3      	ldr	r3, [r4, #8]
 800f7ac:	6922      	ldr	r2, [r4, #16]
 800f7ae:	bf0c      	ite	eq
 800f7b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f7b4:	2500      	movne	r5, #0
 800f7b6:	4293      	cmp	r3, r2
 800f7b8:	bfc4      	itt	gt
 800f7ba:	1a9b      	subgt	r3, r3, r2
 800f7bc:	18ed      	addgt	r5, r5, r3
 800f7be:	2600      	movs	r6, #0
 800f7c0:	341a      	adds	r4, #26
 800f7c2:	42b5      	cmp	r5, r6
 800f7c4:	d11a      	bne.n	800f7fc <_printf_common+0xc8>
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	e008      	b.n	800f7dc <_printf_common+0xa8>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	4652      	mov	r2, sl
 800f7ce:	4649      	mov	r1, r9
 800f7d0:	4638      	mov	r0, r7
 800f7d2:	47c0      	blx	r8
 800f7d4:	3001      	adds	r0, #1
 800f7d6:	d103      	bne.n	800f7e0 <_printf_common+0xac>
 800f7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f7dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7e0:	3501      	adds	r5, #1
 800f7e2:	e7c6      	b.n	800f772 <_printf_common+0x3e>
 800f7e4:	18e1      	adds	r1, r4, r3
 800f7e6:	1c5a      	adds	r2, r3, #1
 800f7e8:	2030      	movs	r0, #48	; 0x30
 800f7ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f7ee:	4422      	add	r2, r4
 800f7f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f7f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f7f8:	3302      	adds	r3, #2
 800f7fa:	e7c7      	b.n	800f78c <_printf_common+0x58>
 800f7fc:	2301      	movs	r3, #1
 800f7fe:	4622      	mov	r2, r4
 800f800:	4649      	mov	r1, r9
 800f802:	4638      	mov	r0, r7
 800f804:	47c0      	blx	r8
 800f806:	3001      	adds	r0, #1
 800f808:	d0e6      	beq.n	800f7d8 <_printf_common+0xa4>
 800f80a:	3601      	adds	r6, #1
 800f80c:	e7d9      	b.n	800f7c2 <_printf_common+0x8e>
	...

0800f810 <_printf_i>:
 800f810:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f814:	7e0f      	ldrb	r7, [r1, #24]
 800f816:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f818:	2f78      	cmp	r7, #120	; 0x78
 800f81a:	4691      	mov	r9, r2
 800f81c:	4680      	mov	r8, r0
 800f81e:	460c      	mov	r4, r1
 800f820:	469a      	mov	sl, r3
 800f822:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f826:	d807      	bhi.n	800f838 <_printf_i+0x28>
 800f828:	2f62      	cmp	r7, #98	; 0x62
 800f82a:	d80a      	bhi.n	800f842 <_printf_i+0x32>
 800f82c:	2f00      	cmp	r7, #0
 800f82e:	f000 80d8 	beq.w	800f9e2 <_printf_i+0x1d2>
 800f832:	2f58      	cmp	r7, #88	; 0x58
 800f834:	f000 80a3 	beq.w	800f97e <_printf_i+0x16e>
 800f838:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f83c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f840:	e03a      	b.n	800f8b8 <_printf_i+0xa8>
 800f842:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f846:	2b15      	cmp	r3, #21
 800f848:	d8f6      	bhi.n	800f838 <_printf_i+0x28>
 800f84a:	a101      	add	r1, pc, #4	; (adr r1, 800f850 <_printf_i+0x40>)
 800f84c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f850:	0800f8a9 	.word	0x0800f8a9
 800f854:	0800f8bd 	.word	0x0800f8bd
 800f858:	0800f839 	.word	0x0800f839
 800f85c:	0800f839 	.word	0x0800f839
 800f860:	0800f839 	.word	0x0800f839
 800f864:	0800f839 	.word	0x0800f839
 800f868:	0800f8bd 	.word	0x0800f8bd
 800f86c:	0800f839 	.word	0x0800f839
 800f870:	0800f839 	.word	0x0800f839
 800f874:	0800f839 	.word	0x0800f839
 800f878:	0800f839 	.word	0x0800f839
 800f87c:	0800f9c9 	.word	0x0800f9c9
 800f880:	0800f8ed 	.word	0x0800f8ed
 800f884:	0800f9ab 	.word	0x0800f9ab
 800f888:	0800f839 	.word	0x0800f839
 800f88c:	0800f839 	.word	0x0800f839
 800f890:	0800f9eb 	.word	0x0800f9eb
 800f894:	0800f839 	.word	0x0800f839
 800f898:	0800f8ed 	.word	0x0800f8ed
 800f89c:	0800f839 	.word	0x0800f839
 800f8a0:	0800f839 	.word	0x0800f839
 800f8a4:	0800f9b3 	.word	0x0800f9b3
 800f8a8:	682b      	ldr	r3, [r5, #0]
 800f8aa:	1d1a      	adds	r2, r3, #4
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	602a      	str	r2, [r5, #0]
 800f8b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f8b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e0a3      	b.n	800fa04 <_printf_i+0x1f4>
 800f8bc:	6820      	ldr	r0, [r4, #0]
 800f8be:	6829      	ldr	r1, [r5, #0]
 800f8c0:	0606      	lsls	r6, r0, #24
 800f8c2:	f101 0304 	add.w	r3, r1, #4
 800f8c6:	d50a      	bpl.n	800f8de <_printf_i+0xce>
 800f8c8:	680e      	ldr	r6, [r1, #0]
 800f8ca:	602b      	str	r3, [r5, #0]
 800f8cc:	2e00      	cmp	r6, #0
 800f8ce:	da03      	bge.n	800f8d8 <_printf_i+0xc8>
 800f8d0:	232d      	movs	r3, #45	; 0x2d
 800f8d2:	4276      	negs	r6, r6
 800f8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f8d8:	485e      	ldr	r0, [pc, #376]	; (800fa54 <_printf_i+0x244>)
 800f8da:	230a      	movs	r3, #10
 800f8dc:	e019      	b.n	800f912 <_printf_i+0x102>
 800f8de:	680e      	ldr	r6, [r1, #0]
 800f8e0:	602b      	str	r3, [r5, #0]
 800f8e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f8e6:	bf18      	it	ne
 800f8e8:	b236      	sxthne	r6, r6
 800f8ea:	e7ef      	b.n	800f8cc <_printf_i+0xbc>
 800f8ec:	682b      	ldr	r3, [r5, #0]
 800f8ee:	6820      	ldr	r0, [r4, #0]
 800f8f0:	1d19      	adds	r1, r3, #4
 800f8f2:	6029      	str	r1, [r5, #0]
 800f8f4:	0601      	lsls	r1, r0, #24
 800f8f6:	d501      	bpl.n	800f8fc <_printf_i+0xec>
 800f8f8:	681e      	ldr	r6, [r3, #0]
 800f8fa:	e002      	b.n	800f902 <_printf_i+0xf2>
 800f8fc:	0646      	lsls	r6, r0, #25
 800f8fe:	d5fb      	bpl.n	800f8f8 <_printf_i+0xe8>
 800f900:	881e      	ldrh	r6, [r3, #0]
 800f902:	4854      	ldr	r0, [pc, #336]	; (800fa54 <_printf_i+0x244>)
 800f904:	2f6f      	cmp	r7, #111	; 0x6f
 800f906:	bf0c      	ite	eq
 800f908:	2308      	moveq	r3, #8
 800f90a:	230a      	movne	r3, #10
 800f90c:	2100      	movs	r1, #0
 800f90e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f912:	6865      	ldr	r5, [r4, #4]
 800f914:	60a5      	str	r5, [r4, #8]
 800f916:	2d00      	cmp	r5, #0
 800f918:	bfa2      	ittt	ge
 800f91a:	6821      	ldrge	r1, [r4, #0]
 800f91c:	f021 0104 	bicge.w	r1, r1, #4
 800f920:	6021      	strge	r1, [r4, #0]
 800f922:	b90e      	cbnz	r6, 800f928 <_printf_i+0x118>
 800f924:	2d00      	cmp	r5, #0
 800f926:	d04d      	beq.n	800f9c4 <_printf_i+0x1b4>
 800f928:	4615      	mov	r5, r2
 800f92a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f92e:	fb03 6711 	mls	r7, r3, r1, r6
 800f932:	5dc7      	ldrb	r7, [r0, r7]
 800f934:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f938:	4637      	mov	r7, r6
 800f93a:	42bb      	cmp	r3, r7
 800f93c:	460e      	mov	r6, r1
 800f93e:	d9f4      	bls.n	800f92a <_printf_i+0x11a>
 800f940:	2b08      	cmp	r3, #8
 800f942:	d10b      	bne.n	800f95c <_printf_i+0x14c>
 800f944:	6823      	ldr	r3, [r4, #0]
 800f946:	07de      	lsls	r6, r3, #31
 800f948:	d508      	bpl.n	800f95c <_printf_i+0x14c>
 800f94a:	6923      	ldr	r3, [r4, #16]
 800f94c:	6861      	ldr	r1, [r4, #4]
 800f94e:	4299      	cmp	r1, r3
 800f950:	bfde      	ittt	le
 800f952:	2330      	movle	r3, #48	; 0x30
 800f954:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f958:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f95c:	1b52      	subs	r2, r2, r5
 800f95e:	6122      	str	r2, [r4, #16]
 800f960:	f8cd a000 	str.w	sl, [sp]
 800f964:	464b      	mov	r3, r9
 800f966:	aa03      	add	r2, sp, #12
 800f968:	4621      	mov	r1, r4
 800f96a:	4640      	mov	r0, r8
 800f96c:	f7ff fee2 	bl	800f734 <_printf_common>
 800f970:	3001      	adds	r0, #1
 800f972:	d14c      	bne.n	800fa0e <_printf_i+0x1fe>
 800f974:	f04f 30ff 	mov.w	r0, #4294967295
 800f978:	b004      	add	sp, #16
 800f97a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f97e:	4835      	ldr	r0, [pc, #212]	; (800fa54 <_printf_i+0x244>)
 800f980:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f984:	6829      	ldr	r1, [r5, #0]
 800f986:	6823      	ldr	r3, [r4, #0]
 800f988:	f851 6b04 	ldr.w	r6, [r1], #4
 800f98c:	6029      	str	r1, [r5, #0]
 800f98e:	061d      	lsls	r5, r3, #24
 800f990:	d514      	bpl.n	800f9bc <_printf_i+0x1ac>
 800f992:	07df      	lsls	r7, r3, #31
 800f994:	bf44      	itt	mi
 800f996:	f043 0320 	orrmi.w	r3, r3, #32
 800f99a:	6023      	strmi	r3, [r4, #0]
 800f99c:	b91e      	cbnz	r6, 800f9a6 <_printf_i+0x196>
 800f99e:	6823      	ldr	r3, [r4, #0]
 800f9a0:	f023 0320 	bic.w	r3, r3, #32
 800f9a4:	6023      	str	r3, [r4, #0]
 800f9a6:	2310      	movs	r3, #16
 800f9a8:	e7b0      	b.n	800f90c <_printf_i+0xfc>
 800f9aa:	6823      	ldr	r3, [r4, #0]
 800f9ac:	f043 0320 	orr.w	r3, r3, #32
 800f9b0:	6023      	str	r3, [r4, #0]
 800f9b2:	2378      	movs	r3, #120	; 0x78
 800f9b4:	4828      	ldr	r0, [pc, #160]	; (800fa58 <_printf_i+0x248>)
 800f9b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f9ba:	e7e3      	b.n	800f984 <_printf_i+0x174>
 800f9bc:	0659      	lsls	r1, r3, #25
 800f9be:	bf48      	it	mi
 800f9c0:	b2b6      	uxthmi	r6, r6
 800f9c2:	e7e6      	b.n	800f992 <_printf_i+0x182>
 800f9c4:	4615      	mov	r5, r2
 800f9c6:	e7bb      	b.n	800f940 <_printf_i+0x130>
 800f9c8:	682b      	ldr	r3, [r5, #0]
 800f9ca:	6826      	ldr	r6, [r4, #0]
 800f9cc:	6961      	ldr	r1, [r4, #20]
 800f9ce:	1d18      	adds	r0, r3, #4
 800f9d0:	6028      	str	r0, [r5, #0]
 800f9d2:	0635      	lsls	r5, r6, #24
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	d501      	bpl.n	800f9dc <_printf_i+0x1cc>
 800f9d8:	6019      	str	r1, [r3, #0]
 800f9da:	e002      	b.n	800f9e2 <_printf_i+0x1d2>
 800f9dc:	0670      	lsls	r0, r6, #25
 800f9de:	d5fb      	bpl.n	800f9d8 <_printf_i+0x1c8>
 800f9e0:	8019      	strh	r1, [r3, #0]
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	6123      	str	r3, [r4, #16]
 800f9e6:	4615      	mov	r5, r2
 800f9e8:	e7ba      	b.n	800f960 <_printf_i+0x150>
 800f9ea:	682b      	ldr	r3, [r5, #0]
 800f9ec:	1d1a      	adds	r2, r3, #4
 800f9ee:	602a      	str	r2, [r5, #0]
 800f9f0:	681d      	ldr	r5, [r3, #0]
 800f9f2:	6862      	ldr	r2, [r4, #4]
 800f9f4:	2100      	movs	r1, #0
 800f9f6:	4628      	mov	r0, r5
 800f9f8:	f7f0 fc0a 	bl	8000210 <memchr>
 800f9fc:	b108      	cbz	r0, 800fa02 <_printf_i+0x1f2>
 800f9fe:	1b40      	subs	r0, r0, r5
 800fa00:	6060      	str	r0, [r4, #4]
 800fa02:	6863      	ldr	r3, [r4, #4]
 800fa04:	6123      	str	r3, [r4, #16]
 800fa06:	2300      	movs	r3, #0
 800fa08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fa0c:	e7a8      	b.n	800f960 <_printf_i+0x150>
 800fa0e:	6923      	ldr	r3, [r4, #16]
 800fa10:	462a      	mov	r2, r5
 800fa12:	4649      	mov	r1, r9
 800fa14:	4640      	mov	r0, r8
 800fa16:	47d0      	blx	sl
 800fa18:	3001      	adds	r0, #1
 800fa1a:	d0ab      	beq.n	800f974 <_printf_i+0x164>
 800fa1c:	6823      	ldr	r3, [r4, #0]
 800fa1e:	079b      	lsls	r3, r3, #30
 800fa20:	d413      	bmi.n	800fa4a <_printf_i+0x23a>
 800fa22:	68e0      	ldr	r0, [r4, #12]
 800fa24:	9b03      	ldr	r3, [sp, #12]
 800fa26:	4298      	cmp	r0, r3
 800fa28:	bfb8      	it	lt
 800fa2a:	4618      	movlt	r0, r3
 800fa2c:	e7a4      	b.n	800f978 <_printf_i+0x168>
 800fa2e:	2301      	movs	r3, #1
 800fa30:	4632      	mov	r2, r6
 800fa32:	4649      	mov	r1, r9
 800fa34:	4640      	mov	r0, r8
 800fa36:	47d0      	blx	sl
 800fa38:	3001      	adds	r0, #1
 800fa3a:	d09b      	beq.n	800f974 <_printf_i+0x164>
 800fa3c:	3501      	adds	r5, #1
 800fa3e:	68e3      	ldr	r3, [r4, #12]
 800fa40:	9903      	ldr	r1, [sp, #12]
 800fa42:	1a5b      	subs	r3, r3, r1
 800fa44:	42ab      	cmp	r3, r5
 800fa46:	dcf2      	bgt.n	800fa2e <_printf_i+0x21e>
 800fa48:	e7eb      	b.n	800fa22 <_printf_i+0x212>
 800fa4a:	2500      	movs	r5, #0
 800fa4c:	f104 0619 	add.w	r6, r4, #25
 800fa50:	e7f5      	b.n	800fa3e <_printf_i+0x22e>
 800fa52:	bf00      	nop
 800fa54:	08013517 	.word	0x08013517
 800fa58:	08013528 	.word	0x08013528

0800fa5c <_read_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4d07      	ldr	r5, [pc, #28]	; (800fa7c <_read_r+0x20>)
 800fa60:	4604      	mov	r4, r0
 800fa62:	4608      	mov	r0, r1
 800fa64:	4611      	mov	r1, r2
 800fa66:	2200      	movs	r2, #0
 800fa68:	602a      	str	r2, [r5, #0]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	f7f1 f864 	bl	8000b38 <_read>
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d102      	bne.n	800fa7a <_read_r+0x1e>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	b103      	cbz	r3, 800fa7a <_read_r+0x1e>
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	bd38      	pop	{r3, r4, r5, pc}
 800fa7c:	20010944 	.word	0x20010944

0800fa80 <__swbuf_r>:
 800fa80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa82:	460e      	mov	r6, r1
 800fa84:	4614      	mov	r4, r2
 800fa86:	4605      	mov	r5, r0
 800fa88:	b118      	cbz	r0, 800fa92 <__swbuf_r+0x12>
 800fa8a:	6983      	ldr	r3, [r0, #24]
 800fa8c:	b90b      	cbnz	r3, 800fa92 <__swbuf_r+0x12>
 800fa8e:	f7ff f8c9 	bl	800ec24 <__sinit>
 800fa92:	4b21      	ldr	r3, [pc, #132]	; (800fb18 <__swbuf_r+0x98>)
 800fa94:	429c      	cmp	r4, r3
 800fa96:	d12b      	bne.n	800faf0 <__swbuf_r+0x70>
 800fa98:	686c      	ldr	r4, [r5, #4]
 800fa9a:	69a3      	ldr	r3, [r4, #24]
 800fa9c:	60a3      	str	r3, [r4, #8]
 800fa9e:	89a3      	ldrh	r3, [r4, #12]
 800faa0:	071a      	lsls	r2, r3, #28
 800faa2:	d52f      	bpl.n	800fb04 <__swbuf_r+0x84>
 800faa4:	6923      	ldr	r3, [r4, #16]
 800faa6:	b36b      	cbz	r3, 800fb04 <__swbuf_r+0x84>
 800faa8:	6923      	ldr	r3, [r4, #16]
 800faaa:	6820      	ldr	r0, [r4, #0]
 800faac:	1ac0      	subs	r0, r0, r3
 800faae:	6963      	ldr	r3, [r4, #20]
 800fab0:	b2f6      	uxtb	r6, r6
 800fab2:	4283      	cmp	r3, r0
 800fab4:	4637      	mov	r7, r6
 800fab6:	dc04      	bgt.n	800fac2 <__swbuf_r+0x42>
 800fab8:	4621      	mov	r1, r4
 800faba:	4628      	mov	r0, r5
 800fabc:	f7ff fc20 	bl	800f300 <_fflush_r>
 800fac0:	bb30      	cbnz	r0, 800fb10 <__swbuf_r+0x90>
 800fac2:	68a3      	ldr	r3, [r4, #8]
 800fac4:	3b01      	subs	r3, #1
 800fac6:	60a3      	str	r3, [r4, #8]
 800fac8:	6823      	ldr	r3, [r4, #0]
 800faca:	1c5a      	adds	r2, r3, #1
 800facc:	6022      	str	r2, [r4, #0]
 800face:	701e      	strb	r6, [r3, #0]
 800fad0:	6963      	ldr	r3, [r4, #20]
 800fad2:	3001      	adds	r0, #1
 800fad4:	4283      	cmp	r3, r0
 800fad6:	d004      	beq.n	800fae2 <__swbuf_r+0x62>
 800fad8:	89a3      	ldrh	r3, [r4, #12]
 800fada:	07db      	lsls	r3, r3, #31
 800fadc:	d506      	bpl.n	800faec <__swbuf_r+0x6c>
 800fade:	2e0a      	cmp	r6, #10
 800fae0:	d104      	bne.n	800faec <__swbuf_r+0x6c>
 800fae2:	4621      	mov	r1, r4
 800fae4:	4628      	mov	r0, r5
 800fae6:	f7ff fc0b 	bl	800f300 <_fflush_r>
 800faea:	b988      	cbnz	r0, 800fb10 <__swbuf_r+0x90>
 800faec:	4638      	mov	r0, r7
 800faee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faf0:	4b0a      	ldr	r3, [pc, #40]	; (800fb1c <__swbuf_r+0x9c>)
 800faf2:	429c      	cmp	r4, r3
 800faf4:	d101      	bne.n	800fafa <__swbuf_r+0x7a>
 800faf6:	68ac      	ldr	r4, [r5, #8]
 800faf8:	e7cf      	b.n	800fa9a <__swbuf_r+0x1a>
 800fafa:	4b09      	ldr	r3, [pc, #36]	; (800fb20 <__swbuf_r+0xa0>)
 800fafc:	429c      	cmp	r4, r3
 800fafe:	bf08      	it	eq
 800fb00:	68ec      	ldreq	r4, [r5, #12]
 800fb02:	e7ca      	b.n	800fa9a <__swbuf_r+0x1a>
 800fb04:	4621      	mov	r1, r4
 800fb06:	4628      	mov	r0, r5
 800fb08:	f000 f80c 	bl	800fb24 <__swsetup_r>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0cb      	beq.n	800faa8 <__swbuf_r+0x28>
 800fb10:	f04f 37ff 	mov.w	r7, #4294967295
 800fb14:	e7ea      	b.n	800faec <__swbuf_r+0x6c>
 800fb16:	bf00      	nop
 800fb18:	08013414 	.word	0x08013414
 800fb1c:	08013434 	.word	0x08013434
 800fb20:	080133f4 	.word	0x080133f4

0800fb24 <__swsetup_r>:
 800fb24:	4b32      	ldr	r3, [pc, #200]	; (800fbf0 <__swsetup_r+0xcc>)
 800fb26:	b570      	push	{r4, r5, r6, lr}
 800fb28:	681d      	ldr	r5, [r3, #0]
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	b125      	cbz	r5, 800fb3a <__swsetup_r+0x16>
 800fb30:	69ab      	ldr	r3, [r5, #24]
 800fb32:	b913      	cbnz	r3, 800fb3a <__swsetup_r+0x16>
 800fb34:	4628      	mov	r0, r5
 800fb36:	f7ff f875 	bl	800ec24 <__sinit>
 800fb3a:	4b2e      	ldr	r3, [pc, #184]	; (800fbf4 <__swsetup_r+0xd0>)
 800fb3c:	429c      	cmp	r4, r3
 800fb3e:	d10f      	bne.n	800fb60 <__swsetup_r+0x3c>
 800fb40:	686c      	ldr	r4, [r5, #4]
 800fb42:	89a3      	ldrh	r3, [r4, #12]
 800fb44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb48:	0719      	lsls	r1, r3, #28
 800fb4a:	d42c      	bmi.n	800fba6 <__swsetup_r+0x82>
 800fb4c:	06dd      	lsls	r5, r3, #27
 800fb4e:	d411      	bmi.n	800fb74 <__swsetup_r+0x50>
 800fb50:	2309      	movs	r3, #9
 800fb52:	6033      	str	r3, [r6, #0]
 800fb54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb58:	81a3      	strh	r3, [r4, #12]
 800fb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb5e:	e03e      	b.n	800fbde <__swsetup_r+0xba>
 800fb60:	4b25      	ldr	r3, [pc, #148]	; (800fbf8 <__swsetup_r+0xd4>)
 800fb62:	429c      	cmp	r4, r3
 800fb64:	d101      	bne.n	800fb6a <__swsetup_r+0x46>
 800fb66:	68ac      	ldr	r4, [r5, #8]
 800fb68:	e7eb      	b.n	800fb42 <__swsetup_r+0x1e>
 800fb6a:	4b24      	ldr	r3, [pc, #144]	; (800fbfc <__swsetup_r+0xd8>)
 800fb6c:	429c      	cmp	r4, r3
 800fb6e:	bf08      	it	eq
 800fb70:	68ec      	ldreq	r4, [r5, #12]
 800fb72:	e7e6      	b.n	800fb42 <__swsetup_r+0x1e>
 800fb74:	0758      	lsls	r0, r3, #29
 800fb76:	d512      	bpl.n	800fb9e <__swsetup_r+0x7a>
 800fb78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb7a:	b141      	cbz	r1, 800fb8e <__swsetup_r+0x6a>
 800fb7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb80:	4299      	cmp	r1, r3
 800fb82:	d002      	beq.n	800fb8a <__swsetup_r+0x66>
 800fb84:	4630      	mov	r0, r6
 800fb86:	f7ff fc2f 	bl	800f3e8 <_free_r>
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	6363      	str	r3, [r4, #52]	; 0x34
 800fb8e:	89a3      	ldrh	r3, [r4, #12]
 800fb90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fb94:	81a3      	strh	r3, [r4, #12]
 800fb96:	2300      	movs	r3, #0
 800fb98:	6063      	str	r3, [r4, #4]
 800fb9a:	6923      	ldr	r3, [r4, #16]
 800fb9c:	6023      	str	r3, [r4, #0]
 800fb9e:	89a3      	ldrh	r3, [r4, #12]
 800fba0:	f043 0308 	orr.w	r3, r3, #8
 800fba4:	81a3      	strh	r3, [r4, #12]
 800fba6:	6923      	ldr	r3, [r4, #16]
 800fba8:	b94b      	cbnz	r3, 800fbbe <__swsetup_r+0x9a>
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbb4:	d003      	beq.n	800fbbe <__swsetup_r+0x9a>
 800fbb6:	4621      	mov	r1, r4
 800fbb8:	4630      	mov	r0, r6
 800fbba:	f000 f84d 	bl	800fc58 <__smakebuf_r>
 800fbbe:	89a0      	ldrh	r0, [r4, #12]
 800fbc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbc4:	f010 0301 	ands.w	r3, r0, #1
 800fbc8:	d00a      	beq.n	800fbe0 <__swsetup_r+0xbc>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	60a3      	str	r3, [r4, #8]
 800fbce:	6963      	ldr	r3, [r4, #20]
 800fbd0:	425b      	negs	r3, r3
 800fbd2:	61a3      	str	r3, [r4, #24]
 800fbd4:	6923      	ldr	r3, [r4, #16]
 800fbd6:	b943      	cbnz	r3, 800fbea <__swsetup_r+0xc6>
 800fbd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbdc:	d1ba      	bne.n	800fb54 <__swsetup_r+0x30>
 800fbde:	bd70      	pop	{r4, r5, r6, pc}
 800fbe0:	0781      	lsls	r1, r0, #30
 800fbe2:	bf58      	it	pl
 800fbe4:	6963      	ldrpl	r3, [r4, #20]
 800fbe6:	60a3      	str	r3, [r4, #8]
 800fbe8:	e7f4      	b.n	800fbd4 <__swsetup_r+0xb0>
 800fbea:	2000      	movs	r0, #0
 800fbec:	e7f7      	b.n	800fbde <__swsetup_r+0xba>
 800fbee:	bf00      	nop
 800fbf0:	2000002c 	.word	0x2000002c
 800fbf4:	08013414 	.word	0x08013414
 800fbf8:	08013434 	.word	0x08013434
 800fbfc:	080133f4 	.word	0x080133f4

0800fc00 <abort>:
 800fc00:	b508      	push	{r3, lr}
 800fc02:	2006      	movs	r0, #6
 800fc04:	f000 f890 	bl	800fd28 <raise>
 800fc08:	2001      	movs	r0, #1
 800fc0a:	f7f0 ff8f 	bl	8000b2c <_exit>

0800fc0e <__swhatbuf_r>:
 800fc0e:	b570      	push	{r4, r5, r6, lr}
 800fc10:	460e      	mov	r6, r1
 800fc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc16:	2900      	cmp	r1, #0
 800fc18:	b096      	sub	sp, #88	; 0x58
 800fc1a:	4614      	mov	r4, r2
 800fc1c:	461d      	mov	r5, r3
 800fc1e:	da08      	bge.n	800fc32 <__swhatbuf_r+0x24>
 800fc20:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fc24:	2200      	movs	r2, #0
 800fc26:	602a      	str	r2, [r5, #0]
 800fc28:	061a      	lsls	r2, r3, #24
 800fc2a:	d410      	bmi.n	800fc4e <__swhatbuf_r+0x40>
 800fc2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc30:	e00e      	b.n	800fc50 <__swhatbuf_r+0x42>
 800fc32:	466a      	mov	r2, sp
 800fc34:	f000 f894 	bl	800fd60 <_fstat_r>
 800fc38:	2800      	cmp	r0, #0
 800fc3a:	dbf1      	blt.n	800fc20 <__swhatbuf_r+0x12>
 800fc3c:	9a01      	ldr	r2, [sp, #4]
 800fc3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fc42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fc46:	425a      	negs	r2, r3
 800fc48:	415a      	adcs	r2, r3
 800fc4a:	602a      	str	r2, [r5, #0]
 800fc4c:	e7ee      	b.n	800fc2c <__swhatbuf_r+0x1e>
 800fc4e:	2340      	movs	r3, #64	; 0x40
 800fc50:	2000      	movs	r0, #0
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	b016      	add	sp, #88	; 0x58
 800fc56:	bd70      	pop	{r4, r5, r6, pc}

0800fc58 <__smakebuf_r>:
 800fc58:	898b      	ldrh	r3, [r1, #12]
 800fc5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fc5c:	079d      	lsls	r5, r3, #30
 800fc5e:	4606      	mov	r6, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	d507      	bpl.n	800fc74 <__smakebuf_r+0x1c>
 800fc64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	6123      	str	r3, [r4, #16]
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	6163      	str	r3, [r4, #20]
 800fc70:	b002      	add	sp, #8
 800fc72:	bd70      	pop	{r4, r5, r6, pc}
 800fc74:	ab01      	add	r3, sp, #4
 800fc76:	466a      	mov	r2, sp
 800fc78:	f7ff ffc9 	bl	800fc0e <__swhatbuf_r>
 800fc7c:	9900      	ldr	r1, [sp, #0]
 800fc7e:	4605      	mov	r5, r0
 800fc80:	4630      	mov	r0, r6
 800fc82:	f7ff f8db 	bl	800ee3c <_malloc_r>
 800fc86:	b948      	cbnz	r0, 800fc9c <__smakebuf_r+0x44>
 800fc88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc8c:	059a      	lsls	r2, r3, #22
 800fc8e:	d4ef      	bmi.n	800fc70 <__smakebuf_r+0x18>
 800fc90:	f023 0303 	bic.w	r3, r3, #3
 800fc94:	f043 0302 	orr.w	r3, r3, #2
 800fc98:	81a3      	strh	r3, [r4, #12]
 800fc9a:	e7e3      	b.n	800fc64 <__smakebuf_r+0xc>
 800fc9c:	4b0d      	ldr	r3, [pc, #52]	; (800fcd4 <__smakebuf_r+0x7c>)
 800fc9e:	62b3      	str	r3, [r6, #40]	; 0x28
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	6020      	str	r0, [r4, #0]
 800fca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fca8:	81a3      	strh	r3, [r4, #12]
 800fcaa:	9b00      	ldr	r3, [sp, #0]
 800fcac:	6163      	str	r3, [r4, #20]
 800fcae:	9b01      	ldr	r3, [sp, #4]
 800fcb0:	6120      	str	r0, [r4, #16]
 800fcb2:	b15b      	cbz	r3, 800fccc <__smakebuf_r+0x74>
 800fcb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fcb8:	4630      	mov	r0, r6
 800fcba:	f000 f863 	bl	800fd84 <_isatty_r>
 800fcbe:	b128      	cbz	r0, 800fccc <__smakebuf_r+0x74>
 800fcc0:	89a3      	ldrh	r3, [r4, #12]
 800fcc2:	f023 0303 	bic.w	r3, r3, #3
 800fcc6:	f043 0301 	orr.w	r3, r3, #1
 800fcca:	81a3      	strh	r3, [r4, #12]
 800fccc:	89a0      	ldrh	r0, [r4, #12]
 800fcce:	4305      	orrs	r5, r0
 800fcd0:	81a5      	strh	r5, [r4, #12]
 800fcd2:	e7cd      	b.n	800fc70 <__smakebuf_r+0x18>
 800fcd4:	0800ebbd 	.word	0x0800ebbd

0800fcd8 <_raise_r>:
 800fcd8:	291f      	cmp	r1, #31
 800fcda:	b538      	push	{r3, r4, r5, lr}
 800fcdc:	4604      	mov	r4, r0
 800fcde:	460d      	mov	r5, r1
 800fce0:	d904      	bls.n	800fcec <_raise_r+0x14>
 800fce2:	2316      	movs	r3, #22
 800fce4:	6003      	str	r3, [r0, #0]
 800fce6:	f04f 30ff 	mov.w	r0, #4294967295
 800fcea:	bd38      	pop	{r3, r4, r5, pc}
 800fcec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fcee:	b112      	cbz	r2, 800fcf6 <_raise_r+0x1e>
 800fcf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fcf4:	b94b      	cbnz	r3, 800fd0a <_raise_r+0x32>
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	f000 f830 	bl	800fd5c <_getpid_r>
 800fcfc:	462a      	mov	r2, r5
 800fcfe:	4601      	mov	r1, r0
 800fd00:	4620      	mov	r0, r4
 800fd02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd06:	f000 b817 	b.w	800fd38 <_kill_r>
 800fd0a:	2b01      	cmp	r3, #1
 800fd0c:	d00a      	beq.n	800fd24 <_raise_r+0x4c>
 800fd0e:	1c59      	adds	r1, r3, #1
 800fd10:	d103      	bne.n	800fd1a <_raise_r+0x42>
 800fd12:	2316      	movs	r3, #22
 800fd14:	6003      	str	r3, [r0, #0]
 800fd16:	2001      	movs	r0, #1
 800fd18:	e7e7      	b.n	800fcea <_raise_r+0x12>
 800fd1a:	2400      	movs	r4, #0
 800fd1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fd20:	4628      	mov	r0, r5
 800fd22:	4798      	blx	r3
 800fd24:	2000      	movs	r0, #0
 800fd26:	e7e0      	b.n	800fcea <_raise_r+0x12>

0800fd28 <raise>:
 800fd28:	4b02      	ldr	r3, [pc, #8]	; (800fd34 <raise+0xc>)
 800fd2a:	4601      	mov	r1, r0
 800fd2c:	6818      	ldr	r0, [r3, #0]
 800fd2e:	f7ff bfd3 	b.w	800fcd8 <_raise_r>
 800fd32:	bf00      	nop
 800fd34:	2000002c 	.word	0x2000002c

0800fd38 <_kill_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4d07      	ldr	r5, [pc, #28]	; (800fd58 <_kill_r+0x20>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4604      	mov	r4, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	4611      	mov	r1, r2
 800fd44:	602b      	str	r3, [r5, #0]
 800fd46:	f7f0 fee9 	bl	8000b1c <_kill>
 800fd4a:	1c43      	adds	r3, r0, #1
 800fd4c:	d102      	bne.n	800fd54 <_kill_r+0x1c>
 800fd4e:	682b      	ldr	r3, [r5, #0]
 800fd50:	b103      	cbz	r3, 800fd54 <_kill_r+0x1c>
 800fd52:	6023      	str	r3, [r4, #0]
 800fd54:	bd38      	pop	{r3, r4, r5, pc}
 800fd56:	bf00      	nop
 800fd58:	20010944 	.word	0x20010944

0800fd5c <_getpid_r>:
 800fd5c:	f7f0 bedc 	b.w	8000b18 <_getpid>

0800fd60 <_fstat_r>:
 800fd60:	b538      	push	{r3, r4, r5, lr}
 800fd62:	4d07      	ldr	r5, [pc, #28]	; (800fd80 <_fstat_r+0x20>)
 800fd64:	2300      	movs	r3, #0
 800fd66:	4604      	mov	r4, r0
 800fd68:	4608      	mov	r0, r1
 800fd6a:	4611      	mov	r1, r2
 800fd6c:	602b      	str	r3, [r5, #0]
 800fd6e:	f7f0 ff00 	bl	8000b72 <_fstat>
 800fd72:	1c43      	adds	r3, r0, #1
 800fd74:	d102      	bne.n	800fd7c <_fstat_r+0x1c>
 800fd76:	682b      	ldr	r3, [r5, #0]
 800fd78:	b103      	cbz	r3, 800fd7c <_fstat_r+0x1c>
 800fd7a:	6023      	str	r3, [r4, #0]
 800fd7c:	bd38      	pop	{r3, r4, r5, pc}
 800fd7e:	bf00      	nop
 800fd80:	20010944 	.word	0x20010944

0800fd84 <_isatty_r>:
 800fd84:	b538      	push	{r3, r4, r5, lr}
 800fd86:	4d06      	ldr	r5, [pc, #24]	; (800fda0 <_isatty_r+0x1c>)
 800fd88:	2300      	movs	r3, #0
 800fd8a:	4604      	mov	r4, r0
 800fd8c:	4608      	mov	r0, r1
 800fd8e:	602b      	str	r3, [r5, #0]
 800fd90:	f7f0 fef4 	bl	8000b7c <_isatty>
 800fd94:	1c43      	adds	r3, r0, #1
 800fd96:	d102      	bne.n	800fd9e <_isatty_r+0x1a>
 800fd98:	682b      	ldr	r3, [r5, #0]
 800fd9a:	b103      	cbz	r3, 800fd9e <_isatty_r+0x1a>
 800fd9c:	6023      	str	r3, [r4, #0]
 800fd9e:	bd38      	pop	{r3, r4, r5, pc}
 800fda0:	20010944 	.word	0x20010944

0800fda4 <_init>:
 800fda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fda6:	bf00      	nop
 800fda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdaa:	bc08      	pop	{r3}
 800fdac:	469e      	mov	lr, r3
 800fdae:	4770      	bx	lr

0800fdb0 <_fini>:
 800fdb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb2:	bf00      	nop
 800fdb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdb6:	bc08      	pop	{r3}
 800fdb8:	469e      	mov	lr, r3
 800fdba:	4770      	bx	lr
