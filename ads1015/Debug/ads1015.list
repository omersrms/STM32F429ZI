
ads1015.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08006610  08006610  00016610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006910  08006910  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000070  08006988  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08006988  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ac0a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017cd  00000000  00000000  0002acaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002c478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002ce00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001644c  00000000  00000000  0002d708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcf2  00000000  00000000  00043b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088893  00000000  00000000  0004f846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d80d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003798  00000000  00000000  000d812c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080065f8 	.word	0x080065f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080065f8 	.word	0x080065f8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08c      	sub	sp, #48	; 0x30
 8000e84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f000 fbad 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 f88f 	bl	8000fac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 f951 	bl	8001134 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e92:	f000 f925 	bl	80010e0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e96:	f000 f8f5 	bl	8001084 <MX_I2C1_Init>

  HAL_StatusTypeDef ret;



HAL_Delay(100);
 8000e9a:	2064      	movs	r0, #100	; 0x64
 8000e9c:	f000 fc14 	bl	80016c8 <HAL_Delay>
 ret =  HAL_I2C_IsDeviceReady(&hi2c1,0x48<<1,1,500);
 8000ea0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2190      	movs	r1, #144	; 0x90
 8000ea8:	483b      	ldr	r0, [pc, #236]	; (8000f98 <main+0x118>)
 8000eaa:	f001 fb1d 	bl	80024e8 <HAL_I2C_IsDeviceReady>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(ret != HAL_OK){
 8000eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d005      	beq.n	8000ec8 <main+0x48>
  	  	HAL_UART_Transmit(&huart2, "\rhata",5,100);
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	2205      	movs	r2, #5
 8000ec0:	4936      	ldr	r1, [pc, #216]	; (8000f9c <main+0x11c>)
 8000ec2:	4837      	ldr	r0, [pc, #220]	; (8000fa0 <main+0x120>)
 8000ec4:	f002 fc51 	bl	800376a <HAL_UART_Transmit>
  	  }
HAL_Delay(100);
 8000ec8:	2064      	movs	r0, #100	; 0x64
 8000eca:	f000 fbfd 	bl	80016c8 <HAL_Delay>


	  // a0 pini okuma -------------------------------------------------------------------

	  //test[0]=0x90;  // ADS1015 address   + R/W bit    0x48<<1  =  0x90
	  test[0]=0x01;  // Address Pointer Register byte
 8000ece:	2301      	movs	r3, #1
 8000ed0:	743b      	strb	r3, [r7, #16]
	  test[1]=0xC1;  // written to the register
 8000ed2:	23c1      	movs	r3, #193	; 0xc1
 8000ed4:	747b      	strb	r3, [r7, #17]
	  test[2]=0x83;  // written to the register
 8000ed6:	2383      	movs	r3, #131	; 0x83
 8000ed8:	74bb      	strb	r3, [r7, #18]

	  HAL_I2C_Master_Transmit(&hi2c1, 0x90,test,3,100);
 8000eda:	f107 0210 	add.w	r2, r7, #16
 8000ede:	2364      	movs	r3, #100	; 0x64
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	2190      	movs	r1, #144	; 0x90
 8000ee6:	482c      	ldr	r0, [pc, #176]	; (8000f98 <main+0x118>)
 8000ee8:	f000 ffda 	bl	8001ea0 <HAL_I2C_Master_Transmit>
	  test[0]=0x00;
 8000eec:	2300      	movs	r3, #0
 8000eee:	743b      	strb	r3, [r7, #16]
	  HAL_I2C_Master_Transmit(&hi2c1, 0x90,test,1,100);
 8000ef0:	f107 0210 	add.w	r2, r7, #16
 8000ef4:	2364      	movs	r3, #100	; 0x64
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2190      	movs	r1, #144	; 0x90
 8000efc:	4826      	ldr	r0, [pc, #152]	; (8000f98 <main+0x118>)
 8000efe:	f000 ffcf 	bl	8001ea0 <HAL_I2C_Master_Transmit>

	  HAL_Delay(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 fbe0 	bl	80016c8 <HAL_Delay>

	  uint8_t r[2];
	  int16_t temp;
	  double son;
	  ret = HAL_I2C_Master_Receive(&hi2c1, 0x90,r,sizeof(r),100);
 8000f08:	f107 020c 	add.w	r2, r7, #12
 8000f0c:	2364      	movs	r3, #100	; 0x64
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2302      	movs	r3, #2
 8000f12:	2190      	movs	r1, #144	; 0x90
 8000f14:	4820      	ldr	r0, [pc, #128]	; (8000f98 <main+0x118>)
 8000f16:	f001 f8c1 	bl	800209c <HAL_I2C_Master_Receive>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	  if(ret != HAL_OK){
 8000f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d005      	beq.n	8000f34 <main+0xb4>
	  	  	HAL_UART_Transmit(&huart2, "\rhata2",6,100);
 8000f28:	2364      	movs	r3, #100	; 0x64
 8000f2a:	2206      	movs	r2, #6
 8000f2c:	491d      	ldr	r1, [pc, #116]	; (8000fa4 <main+0x124>)
 8000f2e:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <main+0x120>)
 8000f30:	f002 fc1b 	bl	800376a <HAL_UART_Transmit>
	  	  }


	  temp = (r[0] << 8 | r[1] );
 8000f34:	7b3b      	ldrb	r3, [r7, #12]
 8000f36:	021b      	lsls	r3, r3, #8
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	7b7b      	ldrb	r3, [r7, #13]
 8000f3c:	b21b      	sxth	r3, r3
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	84bb      	strh	r3, [r7, #36]	; 0x24
	  son=temp*(6.114 / 32768.0);
 8000f42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff faec 	bl	8000524 <__aeabi_i2d>
 8000f4c:	a310      	add	r3, pc, #64	; (adr r3, 8000f90 <main+0x110>)
 8000f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f52:	f7ff fb51 	bl	80005f8 <__aeabi_dmul>
 8000f56:	4602      	mov	r2, r0
 8000f58:	460b      	mov	r3, r1
 8000f5a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  char buf[6];
	  gcvt(son, 6, buf);
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	2006      	movs	r0, #6
 8000f64:	ed97 0b06 	vldr	d0, [r7, #24]
 8000f68:	f002 ff74 	bl	8003e54 <gcvt>

	  HAL_UART_Transmit(&huart2,"\rA0 pin deger:",13,100);
 8000f6c:	2364      	movs	r3, #100	; 0x64
 8000f6e:	220d      	movs	r2, #13
 8000f70:	490d      	ldr	r1, [pc, #52]	; (8000fa8 <main+0x128>)
 8000f72:	480b      	ldr	r0, [pc, #44]	; (8000fa0 <main+0x120>)
 8000f74:	f002 fbf9 	bl	800376a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,buf,6,100);
 8000f78:	1d39      	adds	r1, r7, #4
 8000f7a:	2364      	movs	r3, #100	; 0x64
 8000f7c:	2206      	movs	r2, #6
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <main+0x120>)
 8000f80:	f002 fbf3 	bl	800376a <HAL_UART_Transmit>


	  HAL_Delay(1000);
 8000f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f88:	f000 fb9e 	bl	80016c8 <HAL_Delay>
  {
 8000f8c:	e79f      	b.n	8000ece <main+0x4e>
 8000f8e:	bf00      	nop
 8000f90:	6a7ef9db 	.word	0x6a7ef9db
 8000f94:	3f2874bc 	.word	0x3f2874bc
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	08006610 	.word	0x08006610
 8000fa0:	200000e0 	.word	0x200000e0
 8000fa4:	08006618 	.word	0x08006618
 8000fa8:	08006620 	.word	0x08006620

08000fac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b094      	sub	sp, #80	; 0x50
 8000fb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	f107 0320 	add.w	r3, r7, #32
 8000fb6:	2230      	movs	r2, #48	; 0x30
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f002 ff98 	bl	8003ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <SystemClock_Config+0xd0>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <SystemClock_Config+0xd0>)
 8000fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fde:	6413      	str	r3, [r2, #64]	; 0x40
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <SystemClock_Config+0xd0>)
 8000fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	4b23      	ldr	r3, [pc, #140]	; (8001080 <SystemClock_Config+0xd4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <SystemClock_Config+0xd4>)
 8000ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ffe:	6013      	str	r3, [r2, #0]
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <SystemClock_Config+0xd4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100c:	2302      	movs	r3, #2
 800100e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001010:	2301      	movs	r3, #1
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001014:	2310      	movs	r3, #16
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001018:	2302      	movs	r3, #2
 800101a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101c:	2300      	movs	r3, #0
 800101e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001020:	2310      	movs	r3, #16
 8001022:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001024:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800102a:	2304      	movs	r3, #4
 800102c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800102e:	2307      	movs	r3, #7
 8001030:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0320 	add.w	r3, r7, #32
 8001036:	4618      	mov	r0, r3
 8001038:	f001 feb2 	bl	8002da0 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001042:	f000 f8e5 	bl	8001210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2302      	movs	r3, #2
 800104c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001052:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001056:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2102      	movs	r1, #2
 8001062:	4618      	mov	r0, r3
 8001064:	f002 f914 	bl	8003290 <HAL_RCC_ClockConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800106e:	f000 f8cf 	bl	8001210 <Error_Handler>
  }
}
 8001072:	bf00      	nop
 8001074:	3750      	adds	r7, #80	; 0x50
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40007000 	.word	0x40007000

08001084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <MX_I2C1_Init+0x50>)
 800108a:	4a13      	ldr	r2, [pc, #76]	; (80010d8 <MX_I2C1_Init+0x54>)
 800108c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001090:	4a12      	ldr	r2, [pc, #72]	; (80010dc <MX_I2C1_Init+0x58>)
 8001092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <MX_I2C1_Init+0x50>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <MX_I2C1_Init+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4804      	ldr	r0, [pc, #16]	; (80010d4 <MX_I2C1_Init+0x50>)
 80010c2:	f000 fda9 	bl	8001c18 <HAL_I2C_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010cc:	f000 f8a0 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	2000008c 	.word	0x2000008c
 80010d8:	40005400 	.word	0x40005400
 80010dc:	000186a0 	.word	0x000186a0

080010e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <MX_USART2_UART_Init+0x50>)
 80010e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_USART2_UART_Init+0x4c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001104:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001106:	220c      	movs	r2, #12
 8001108:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <MX_USART2_UART_Init+0x4c>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001112:	2200      	movs	r2, #0
 8001114:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001116:	4805      	ldr	r0, [pc, #20]	; (800112c <MX_USART2_UART_Init+0x4c>)
 8001118:	f002 fada 	bl	80036d0 <HAL_UART_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001122:	f000 f875 	bl	8001210 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200000e0 	.word	0x200000e0
 8001130:	40004400 	.word	0x40004400

08001134 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
 800114e:	4b2d      	ldr	r3, [pc, #180]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a2c      	ldr	r2, [pc, #176]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0304 	orr.w	r3, r3, #4
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0304 	and.w	r3, r3, #4
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a25      	ldr	r2, [pc, #148]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60bb      	str	r3, [r7, #8]
 8001186:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a1e      	ldr	r2, [pc, #120]	; (8001204 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b18      	ldr	r3, [pc, #96]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2120      	movs	r1, #32
 80011be:	4812      	ldr	r0, [pc, #72]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011c0:	f000 fd10 	bl	8001be4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	480c      	ldr	r0, [pc, #48]	; (800120c <MX_GPIO_Init+0xd8>)
 80011dc:	f000 fb7e 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e0:	2320      	movs	r3, #32
 80011e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e4:	2301      	movs	r3, #1
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <MX_GPIO_Init+0xd4>)
 80011f8:	f000 fb70 	bl	80018dc <HAL_GPIO_Init>

}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	; 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020800 	.word	0x40020800

08001210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001214:	b672      	cpsid	i
}
 8001216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001218:	e7fe      	b.n	8001218 <Error_Handler+0x8>
	...

0800121c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	607b      	str	r3, [r7, #4]
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <HAL_MspInit+0x4c>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <HAL_MspInit+0x4c>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <HAL_MspInit+0x4c>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <HAL_MspInit+0x4c>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x4c>)
 8001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124c:	6413      	str	r3, [r2, #64]	; 0x40
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x4c>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001256:	603b      	str	r3, [r7, #0]
 8001258:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800125a:	2007      	movs	r0, #7
 800125c:	f000 fb0a 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40023800 	.word	0x40023800

0800126c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	; (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b4:	2301      	movs	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	; (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f000 fb08 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012da:	6413      	str	r3, [r2, #64]	; 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_UART_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_UART_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001366:	2307      	movs	r3, #7
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_UART_MspInit+0x8c>)
 8001372:	f000 fab3 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40004400 	.word	0x40004400
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001390:	e7fe      	b.n	8001390 <NMI_Handler+0x4>

08001392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001396:	e7fe      	b.n	8001396 <HardFault_Handler+0x4>

08001398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800139c:	e7fe      	b.n	800139c <MemManage_Handler+0x4>

0800139e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013a2:	e7fe      	b.n	80013a2 <BusFault_Handler+0x4>

080013a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <UsageFault_Handler+0x4>

080013aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d8:	f000 f956 	bl	8001688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_kill>:

int _kill(int pid, int sig)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013fa:	f002 fd4f 	bl	8003e9c <__errno>
 80013fe:	4603      	mov	r3, r0
 8001400:	2216      	movs	r2, #22
 8001402:	601a      	str	r2, [r3, #0]
	return -1;
 8001404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001408:	4618      	mov	r0, r3
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_exit>:

void _exit (int status)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ffe7 	bl	80013f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001422:	e7fe      	b.n	8001422 <_exit+0x12>

08001424 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
 8001434:	e00a      	b.n	800144c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001436:	f3af 8000 	nop.w
 800143a:	4601      	mov	r1, r0
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	60ba      	str	r2, [r7, #8]
 8001442:	b2ca      	uxtb	r2, r1
 8001444:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	3301      	adds	r3, #1
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	dbf0      	blt.n	8001436 <_read+0x12>
	}

return len;
 8001454:	687b      	ldr	r3, [r7, #4]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e009      	b.n	8001484 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	3301      	adds	r3, #1
 8001482:	617b      	str	r3, [r7, #20]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	429a      	cmp	r2, r3
 800148a:	dbf1      	blt.n	8001470 <_write+0x12>
	}
	return len;
 800148c:	687b      	ldr	r3, [r7, #4]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3718      	adds	r7, #24
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <_close>:

int _close(int file)
{
 8001496:	b480      	push	{r7}
 8001498:	b083      	sub	sp, #12
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
	return -1;
 800149e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014be:	605a      	str	r2, [r3, #4]
	return 0;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <_isatty>:

int _isatty(int file)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	return 1;
 80014d6:	2301      	movs	r3, #1
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	return 0;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001508:	4a14      	ldr	r2, [pc, #80]	; (800155c <_sbrk+0x5c>)
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <_sbrk+0x60>)
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <_sbrk+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <_sbrk+0x64>)
 800151e:	4a12      	ldr	r2, [pc, #72]	; (8001568 <_sbrk+0x68>)
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <_sbrk+0x64>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4413      	add	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	429a      	cmp	r2, r3
 800152e:	d207      	bcs.n	8001540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001530:	f002 fcb4 	bl	8003e9c <__errno>
 8001534:	4603      	mov	r3, r0
 8001536:	220c      	movs	r2, #12
 8001538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295
 800153e:	e009      	b.n	8001554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001540:	4b08      	ldr	r3, [pc, #32]	; (8001564 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001546:	4b07      	ldr	r3, [pc, #28]	; (8001564 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <_sbrk+0x64>)
 8001550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001552:	68fb      	ldr	r3, [r7, #12]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20018000 	.word	0x20018000
 8001560:	00000400 	.word	0x00000400
 8001564:	20000124 	.word	0x20000124
 8001568:	20000140 	.word	0x20000140

0800156c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <SystemInit+0x20>)
 8001572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001576:	4a05      	ldr	r2, [pc, #20]	; (800158c <SystemInit+0x20>)
 8001578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800157c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001594:	480d      	ldr	r0, [pc, #52]	; (80015cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001596:	490e      	ldr	r1, [pc, #56]	; (80015d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001598:	4a0e      	ldr	r2, [pc, #56]	; (80015d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800159c:	e002      	b.n	80015a4 <LoopCopyDataInit>

0800159e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a2:	3304      	adds	r3, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a8:	d3f9      	bcc.n	800159e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015aa:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015ac:	4c0b      	ldr	r4, [pc, #44]	; (80015dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b0:	e001      	b.n	80015b6 <LoopFillZerobss>

080015b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b4:	3204      	adds	r2, #4

080015b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b8:	d3fb      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015ba:	f7ff ffd7 	bl	800156c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015be:	f002 fc73 	bl	8003ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015c2:	f7ff fc5d 	bl	8000e80 <main>
  bx  lr    
 80015c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015d0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015d4:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 80015d8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015dc:	2000013c 	.word	0x2000013c

080015e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0d      	ldr	r2, [pc, #52]	; (8001624 <HAL_Init+0x40>)
 80015ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_Init+0x40>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a07      	ldr	r2, [pc, #28]	; (8001624 <HAL_Init+0x40>)
 8001606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800160a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800160c:	2003      	movs	r0, #3
 800160e:	f000 f931 	bl	8001874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 f808 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001618:	f7ff fe00 	bl	800121c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x54>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <HAL_InitTick+0x58>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001642:	fbb2 f3f3 	udiv	r3, r2, r3
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f93b 	bl	80018c2 <HAL_SYSTICK_Config>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e00e      	b.n	8001674 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d80a      	bhi.n	8001672 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800165c:	2200      	movs	r2, #0
 800165e:	6879      	ldr	r1, [r7, #4]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f000 f911 	bl	800188a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001668:	4a06      	ldr	r2, [pc, #24]	; (8001684 <HAL_InitTick+0x5c>)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	e000      	b.n	8001674 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
}
 8001674:	4618      	mov	r0, r3
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000000 	.word	0x20000000
 8001680:	20000008 	.word	0x20000008
 8001684:	20000004 	.word	0x20000004

08001688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_IncTick+0x20>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	461a      	mov	r2, r3
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_IncTick+0x24>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4413      	add	r3, r2
 8001698:	4a04      	ldr	r2, [pc, #16]	; (80016ac <HAL_IncTick+0x24>)
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000008 	.word	0x20000008
 80016ac:	20000128 	.word	0x20000128

080016b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return uwTick;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetTick+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000128 	.word	0x20000128

080016c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016d0:	f7ff ffee 	bl	80016b0 <HAL_GetTick>
 80016d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016e0:	d005      	beq.n	80016ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <HAL_Delay+0x44>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	461a      	mov	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016ee:	bf00      	nop
 80016f0:	f7ff ffde 	bl	80016b0 <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d8f7      	bhi.n	80016f0 <HAL_Delay+0x28>
  {
  }
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000008 	.word	0x20000008

08001710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001710:	b480      	push	{r7}
 8001712:	b085      	sub	sp, #20
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001726:	68ba      	ldr	r2, [r7, #8]
 8001728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800172c:	4013      	ands	r3, r2
 800172e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001742:	4a04      	ldr	r2, [pc, #16]	; (8001754 <__NVIC_SetPriorityGrouping+0x44>)
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	60d3      	str	r3, [r2, #12]
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <__NVIC_GetPriorityGrouping+0x18>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	0a1b      	lsrs	r3, r3, #8
 8001762:	f003 0307 	and.w	r3, r3, #7
}
 8001766:	4618      	mov	r0, r3
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	6039      	str	r1, [r7, #0]
 800177e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db0a      	blt.n	800179e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	b2da      	uxtb	r2, r3
 800178c:	490c      	ldr	r1, [pc, #48]	; (80017c0 <__NVIC_SetPriority+0x4c>)
 800178e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001792:	0112      	lsls	r2, r2, #4
 8001794:	b2d2      	uxtb	r2, r2
 8001796:	440b      	add	r3, r1
 8001798:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800179c:	e00a      	b.n	80017b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	4908      	ldr	r1, [pc, #32]	; (80017c4 <__NVIC_SetPriority+0x50>)
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	3b04      	subs	r3, #4
 80017ac:	0112      	lsls	r2, r2, #4
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	440b      	add	r3, r1
 80017b2:	761a      	strb	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000e100 	.word	0xe000e100
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f1c3 0307 	rsb	r3, r3, #7
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	bf28      	it	cs
 80017e6:	2304      	movcs	r3, #4
 80017e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3304      	adds	r3, #4
 80017ee:	2b06      	cmp	r3, #6
 80017f0:	d902      	bls.n	80017f8 <NVIC_EncodePriority+0x30>
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3b03      	subs	r3, #3
 80017f6:	e000      	b.n	80017fa <NVIC_EncodePriority+0x32>
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	401a      	ands	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001810:	f04f 31ff 	mov.w	r1, #4294967295
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa01 f303 	lsl.w	r3, r1, r3
 800181a:	43d9      	mvns	r1, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001820:	4313      	orrs	r3, r2
         );
}
 8001822:	4618      	mov	r0, r3
 8001824:	3724      	adds	r7, #36	; 0x24
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
	...

08001830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001840:	d301      	bcc.n	8001846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001842:	2301      	movs	r3, #1
 8001844:	e00f      	b.n	8001866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <SysTick_Config+0x40>)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	3b01      	subs	r3, #1
 800184c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800184e:	210f      	movs	r1, #15
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f7ff ff8e 	bl	8001774 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	4b05      	ldr	r3, [pc, #20]	; (8001870 <SysTick_Config+0x40>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	4b04      	ldr	r3, [pc, #16]	; (8001870 <SysTick_Config+0x40>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	e000e010 	.word	0xe000e010

08001874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff ff47 	bl	8001710 <__NVIC_SetPriorityGrouping>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188a:	b580      	push	{r7, lr}
 800188c:	b086      	sub	sp, #24
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	60b9      	str	r1, [r7, #8]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800189c:	f7ff ff5c 	bl	8001758 <__NVIC_GetPriorityGrouping>
 80018a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	6978      	ldr	r0, [r7, #20]
 80018a8:	f7ff ff8e 	bl	80017c8 <NVIC_EncodePriority>
 80018ac:	4602      	mov	r2, r0
 80018ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b2:	4611      	mov	r1, r2
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff5d 	bl	8001774 <__NVIC_SetPriority>
}
 80018ba:	bf00      	nop
 80018bc:	3718      	adds	r7, #24
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffb0 	bl	8001830 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e159      	b.n	8001bac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8148 	bne.w	8001ba6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80a2 	beq.w	8001ba6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b57      	ldr	r3, [pc, #348]	; (8001bc4 <HAL_GPIO_Init+0x2e8>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a56      	ldr	r2, [pc, #344]	; (8001bc4 <HAL_GPIO_Init+0x2e8>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_GPIO_Init+0x2e8>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a49      	ldr	r2, [pc, #292]	; (8001bcc <HAL_GPIO_Init+0x2f0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x202>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a48      	ldr	r2, [pc, #288]	; (8001bd0 <HAL_GPIO_Init+0x2f4>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x1fe>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a47      	ldr	r2, [pc, #284]	; (8001bd4 <HAL_GPIO_Init+0x2f8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x1fa>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a46      	ldr	r2, [pc, #280]	; (8001bd8 <HAL_GPIO_Init+0x2fc>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x1f6>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a45      	ldr	r2, [pc, #276]	; (8001bdc <HAL_GPIO_Init+0x300>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x1f2>
 8001aca:	2304      	movs	r3, #4
 8001acc:	e008      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ace:	2307      	movs	r3, #7
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	69fa      	ldr	r2, [r7, #28]
 8001ae2:	f002 0203 	and.w	r2, r2, #3
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	69ba      	ldr	r2, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x2ec>)
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b38      	ldr	r3, [pc, #224]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b52:	4b23      	ldr	r3, [pc, #140]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b76:	4a1a      	ldr	r2, [pc, #104]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7c:	4b18      	ldr	r3, [pc, #96]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	43db      	mvns	r3, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ba0:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_GPIO_Init+0x304>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	61fb      	str	r3, [r7, #28]
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	f67f aea2 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40013800 	.word	0x40013800
 8001bcc:	40020000 	.word	0x40020000
 8001bd0:	40020400 	.word	0x40020400
 8001bd4:	40020800 	.word	0x40020800
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40013c00 	.word	0x40013c00

08001be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf4:	787b      	ldrb	r3, [r7, #1]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d003      	beq.n	8001c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bfa:	887a      	ldrh	r2, [r7, #2]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c00:	e003      	b.n	8001c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	041a      	lsls	r2, r3, #16
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e12b      	b.n	8001e82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d106      	bne.n	8001c44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff fb14 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2224      	movs	r2, #36	; 0x24
 8001c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f022 0201 	bic.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c7c:	f001 fd00 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8001c80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4a81      	ldr	r2, [pc, #516]	; (8001e8c <HAL_I2C_Init+0x274>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d807      	bhi.n	8001c9c <HAL_I2C_Init+0x84>
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	4a80      	ldr	r2, [pc, #512]	; (8001e90 <HAL_I2C_Init+0x278>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	bf94      	ite	ls
 8001c94:	2301      	movls	r3, #1
 8001c96:	2300      	movhi	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	e006      	b.n	8001caa <HAL_I2C_Init+0x92>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4a7d      	ldr	r2, [pc, #500]	; (8001e94 <HAL_I2C_Init+0x27c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	bf94      	ite	ls
 8001ca4:	2301      	movls	r3, #1
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e0e7      	b.n	8001e82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4a78      	ldr	r2, [pc, #480]	; (8001e98 <HAL_I2C_Init+0x280>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0c9b      	lsrs	r3, r3, #18
 8001cbc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_I2C_Init+0x274>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d802      	bhi.n	8001cec <HAL_I2C_Init+0xd4>
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	e009      	b.n	8001d00 <HAL_I2C_Init+0xe8>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	4a69      	ldr	r2, [pc, #420]	; (8001e9c <HAL_I2C_Init+0x284>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6812      	ldr	r2, [r2, #0]
 8001d04:	430b      	orrs	r3, r1
 8001d06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	495c      	ldr	r1, [pc, #368]	; (8001e8c <HAL_I2C_Init+0x274>)
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d819      	bhi.n	8001d54 <HAL_I2C_Init+0x13c>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e59      	subs	r1, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d34:	400b      	ands	r3, r1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d00a      	beq.n	8001d50 <HAL_I2C_Init+0x138>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1e59      	subs	r1, r3, #1
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4e:	e051      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e04f      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_I2C_Init+0x168>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e012      	b.n	8001da6 <HAL_I2C_Init+0x18e>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	0099      	lsls	r1, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x196>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e022      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <HAL_I2C_Init+0x1bc>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e58      	subs	r0, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd2:	e00f      	b.n	8001df4 <HAL_I2C_Init+0x1dc>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	0099      	lsls	r1, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	6809      	ldr	r1, [r1, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6911      	ldr	r1, [r2, #16]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	000186a0 	.word	0x000186a0
 8001e90:	001e847f 	.word	0x001e847f
 8001e94:	003d08ff 	.word	0x003d08ff
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	10624dd3 	.word	0x10624dd3

08001ea0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	460b      	mov	r3, r1
 8001eae:	817b      	strh	r3, [r7, #10]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eb4:	f7ff fbfc 	bl	80016b0 <HAL_GetTick>
 8001eb8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	f040 80e0 	bne.w	8002088 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2319      	movs	r3, #25
 8001ece:	2201      	movs	r2, #1
 8001ed0:	4970      	ldr	r1, [pc, #448]	; (8002094 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 fd86 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e0d3      	b.n	800208a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_I2C_Master_Transmit+0x50>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e0cc      	b.n	800208a <HAL_I2C_Master_Transmit+0x1ea>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d007      	beq.n	8001f16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 0201 	orr.w	r2, r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2221      	movs	r2, #33	; 0x21
 8001f2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2210      	movs	r2, #16
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	893a      	ldrh	r2, [r7, #8]
 8001f46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4a50      	ldr	r2, [pc, #320]	; (8002098 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f58:	8979      	ldrh	r1, [r7, #10]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	f000 fbf0 	bl	8002744 <I2C_MasterRequestWrite>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e08d      	b.n	800208a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f84:	e066      	b.n	8002054 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	6a39      	ldr	r1, [r7, #32]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 fe00 	bl	8002b90 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00d      	beq.n	8001fb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d107      	bne.n	8001fae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e06b      	b.n	800208a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb6:	781a      	ldrb	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fcc:	b29b      	uxth	r3, r3
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d11b      	bne.n	8002028 <HAL_I2C_Master_Transmit+0x188>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d017      	beq.n	8002028 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	b29a      	uxth	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002020:	3b01      	subs	r3, #1
 8002022:	b29a      	uxth	r2, r3
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	6a39      	ldr	r1, [r7, #32]
 800202c:	68f8      	ldr	r0, [r7, #12]
 800202e:	f000 fdf0 	bl	8002c12 <I2C_WaitOnBTFFlagUntilTimeout>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00d      	beq.n	8002054 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203c:	2b04      	cmp	r3, #4
 800203e:	d107      	bne.n	8002050 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800204e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e01a      	b.n	800208a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	d194      	bne.n	8001f86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	e000      	b.n	800208a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002088:	2302      	movs	r3, #2
  }
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	00100002 	.word	0x00100002
 8002098:	ffff0000 	.word	0xffff0000

0800209c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08c      	sub	sp, #48	; 0x30
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	461a      	mov	r2, r3
 80020a8:	460b      	mov	r3, r1
 80020aa:	817b      	strh	r3, [r7, #10]
 80020ac:	4613      	mov	r3, r2
 80020ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020b0:	f7ff fafe 	bl	80016b0 <HAL_GetTick>
 80020b4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b20      	cmp	r3, #32
 80020c0:	f040 820b 	bne.w	80024da <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	2319      	movs	r3, #25
 80020ca:	2201      	movs	r2, #1
 80020cc:	497c      	ldr	r1, [pc, #496]	; (80022c0 <HAL_I2C_Master_Receive+0x224>)
 80020ce:	68f8      	ldr	r0, [r7, #12]
 80020d0:	f000 fc88 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80020da:	2302      	movs	r3, #2
 80020dc:	e1fe      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d101      	bne.n	80020ec <HAL_I2C_Master_Receive+0x50>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e1f7      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d007      	beq.n	8002112 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002120:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2222      	movs	r2, #34	; 0x22
 8002126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2210      	movs	r2, #16
 800212e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	893a      	ldrh	r2, [r7, #8]
 8002142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002148:	b29a      	uxth	r2, r3
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	4a5c      	ldr	r2, [pc, #368]	; (80022c4 <HAL_I2C_Master_Receive+0x228>)
 8002152:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002154:	8979      	ldrh	r1, [r7, #10]
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 fb74 	bl	8002848 <I2C_MasterRequestRead>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e1b8      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216e:	2b00      	cmp	r3, #0
 8002170:	d113      	bne.n	800219a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	623b      	str	r3, [r7, #32]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	623b      	str	r3, [r7, #32]
 8002186:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	e18c      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d11b      	bne.n	80021da <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b2:	2300      	movs	r3, #0
 80021b4:	61fb      	str	r3, [r7, #28]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e16c      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d11b      	bne.n	800221a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021f0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002202:	2300      	movs	r3, #0
 8002204:	61bb      	str	r3, [r7, #24]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	61bb      	str	r3, [r7, #24]
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	e14c      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002228:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002240:	e138      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	2b03      	cmp	r3, #3
 8002248:	f200 80f1 	bhi.w	800242e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	2b01      	cmp	r3, #1
 8002252:	d123      	bne.n	800229c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002256:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f000 fd1b 	bl	8002c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e139      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691a      	ldr	r2, [r3, #16]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	1c5a      	adds	r2, r3, #1
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	855a      	strh	r2, [r3, #42]	; 0x2a
 800229a:	e10b      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d14e      	bne.n	8002342 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	2200      	movs	r2, #0
 80022ac:	4906      	ldr	r1, [pc, #24]	; (80022c8 <HAL_I2C_Master_Receive+0x22c>)
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fb98 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d008      	beq.n	80022cc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e10e      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
 80022be:	bf00      	nop
 80022c0:	00100002 	.word	0x00100002
 80022c4:	ffff0000 	.word	0xffff0000
 80022c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002304:	b29b      	uxth	r3, r3
 8002306:	3b01      	subs	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002340:	e0b8      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002348:	2200      	movs	r2, #0
 800234a:	4966      	ldr	r1, [pc, #408]	; (80024e4 <HAL_I2C_Master_Receive+0x448>)
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fb49 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e0bf      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	2200      	movs	r2, #0
 80023a6:	494f      	ldr	r1, [pc, #316]	; (80024e4 <HAL_I2C_Master_Receive+0x448>)
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 fb1b 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e091      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691a      	ldr	r2, [r3, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	3b01      	subs	r3, #1
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	3b01      	subs	r3, #1
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800242c:	e042      	b.n	80024b4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fc2e 	bl	8002c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e04c      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245e:	3b01      	subs	r3, #1
 8002460:	b29a      	uxth	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800246a:	b29b      	uxth	r3, r3
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b04      	cmp	r3, #4
 8002480:	d118      	bne.n	80024b4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	3b01      	subs	r3, #1
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f47f aec2 	bne.w	8002242 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80024da:	2302      	movs	r3, #2
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3728      	adds	r7, #40	; 0x28
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	00010004 	.word	0x00010004

080024e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b08a      	sub	sp, #40	; 0x28
 80024ec:	af02      	add	r7, sp, #8
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	460b      	mov	r3, r1
 80024f6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff f8da 	bl	80016b0 <HAL_GetTick>
 80024fc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b20      	cmp	r3, #32
 800250c:	f040 8111 	bne.w	8002732 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	2319      	movs	r3, #25
 8002516:	2201      	movs	r2, #1
 8002518:	4988      	ldr	r1, [pc, #544]	; (800273c <HAL_I2C_IsDeviceReady+0x254>)
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fa62 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002526:	2302      	movs	r3, #2
 8002528:	e104      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002530:	2b01      	cmp	r3, #1
 8002532:	d101      	bne.n	8002538 <HAL_I2C_IsDeviceReady+0x50>
 8002534:	2302      	movs	r3, #2
 8002536:	e0fd      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b01      	cmp	r3, #1
 800254c:	d007      	beq.n	800255e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f042 0201 	orr.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800256c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2224      	movs	r2, #36	; 0x24
 8002572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a70      	ldr	r2, [pc, #448]	; (8002740 <HAL_I2C_IsDeviceReady+0x258>)
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002590:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 fa20 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00d      	beq.n	80025c6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b8:	d103      	bne.n	80025c2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025c0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0b6      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025d4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025d6:	f7ff f86b 	bl	80016b0 <HAL_GetTick>
 80025da:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	bf0c      	ite	eq
 80025ea:	2301      	moveq	r3, #1
 80025ec:	2300      	movne	r3, #0
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800260a:	e025      	b.n	8002658 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800260c:	f7ff f850 	bl	80016b0 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d302      	bcc.n	8002622 <HAL_I2C_IsDeviceReady+0x13a>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d103      	bne.n	800262a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	22a0      	movs	r2, #160	; 0xa0
 8002626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	bf0c      	ite	eq
 8002650:	2301      	moveq	r3, #1
 8002652:	2300      	movne	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2ba0      	cmp	r3, #160	; 0xa0
 8002662:	d005      	beq.n	8002670 <HAL_I2C_IsDeviceReady+0x188>
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <HAL_I2C_IsDeviceReady+0x188>
 800266a:	7dbb      	ldrb	r3, [r7, #22]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d0cd      	beq.n	800260c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	695b      	ldr	r3, [r3, #20]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d129      	bne.n	80026da <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002694:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	613b      	str	r3, [r7, #16]
 80026aa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	4921      	ldr	r1, [pc, #132]	; (800273c <HAL_I2C_IsDeviceReady+0x254>)
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 f994 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e036      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2220      	movs	r2, #32
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026d6:	2300      	movs	r3, #0
 80026d8:	e02c      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026f2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2319      	movs	r3, #25
 80026fa:	2201      	movs	r2, #1
 80026fc:	490f      	ldr	r1, [pc, #60]	; (800273c <HAL_I2C_IsDeviceReady+0x254>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 f970 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e012      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3301      	adds	r3, #1
 8002712:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	429a      	cmp	r2, r3
 800271a:	f4ff af32 	bcc.w	8002582 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002732:	2302      	movs	r3, #2
  }
}
 8002734:	4618      	mov	r0, r3
 8002736:	3720      	adds	r7, #32
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	00100002 	.word	0x00100002
 8002740:	ffff0000 	.word	0xffff0000

08002744 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af02      	add	r7, sp, #8
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	603b      	str	r3, [r7, #0]
 8002750:	460b      	mov	r3, r1
 8002752:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d006      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d003      	beq.n	800276e <I2C_MasterRequestWrite+0x2a>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800276c:	d108      	bne.n	8002780 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e00b      	b.n	8002798 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002784:	2b12      	cmp	r3, #18
 8002786:	d107      	bne.n	8002798 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002796:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f91d 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d00d      	beq.n	80027cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027be:	d103      	bne.n	80027c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e035      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027d4:	d108      	bne.n	80027e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027d6:	897b      	ldrh	r3, [r7, #10]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027e4:	611a      	str	r2, [r3, #16]
 80027e6:	e01b      	b.n	8002820 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027e8:	897b      	ldrh	r3, [r7, #10]
 80027ea:	11db      	asrs	r3, r3, #7
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	f003 0306 	and.w	r3, r3, #6
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f063 030f 	orn	r3, r3, #15
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	490e      	ldr	r1, [pc, #56]	; (8002840 <I2C_MasterRequestWrite+0xfc>)
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f943 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e010      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002816:	897b      	ldrh	r3, [r7, #10]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <I2C_MasterRequestWrite+0x100>)
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f933 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e000      	b.n	8002838 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002836:	2300      	movs	r3, #0
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010008 	.word	0x00010008
 8002844:	00010002 	.word	0x00010002

08002848 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	607a      	str	r2, [r7, #4]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	460b      	mov	r3, r1
 8002856:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800286c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d006      	beq.n	8002882 <I2C_MasterRequestRead+0x3a>
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d003      	beq.n	8002882 <I2C_MasterRequestRead+0x3a>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002880:	d108      	bne.n	8002894 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	e00b      	b.n	80028ac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002898:	2b11      	cmp	r3, #17
 800289a:	d107      	bne.n	80028ac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f893 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d103      	bne.n	80028dc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e079      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e8:	d108      	bne.n	80028fc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028ea:	897b      	ldrh	r3, [r7, #10]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	f043 0301 	orr.w	r3, r3, #1
 80028f2:	b2da      	uxtb	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	611a      	str	r2, [r3, #16]
 80028fa:	e05f      	b.n	80029bc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80028fc:	897b      	ldrh	r3, [r7, #10]
 80028fe:	11db      	asrs	r3, r3, #7
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f003 0306 	and.w	r3, r3, #6
 8002906:	b2db      	uxtb	r3, r3
 8002908:	f063 030f 	orn	r3, r3, #15
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4930      	ldr	r1, [pc, #192]	; (80029dc <I2C_MasterRequestRead+0x194>)
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f8b9 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e054      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800292a:	897b      	ldrh	r3, [r7, #10]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4929      	ldr	r1, [pc, #164]	; (80029e0 <I2C_MasterRequestRead+0x198>)
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f8a9 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e044      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	613b      	str	r3, [r7, #16]
 800295e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800296e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f831 	bl	80029e4 <I2C_WaitOnFlagUntilTimeout>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00d      	beq.n	80029a4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002996:	d103      	bne.n	80029a0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e017      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80029a4:	897b      	ldrh	r3, [r7, #10]
 80029a6:	11db      	asrs	r3, r3, #7
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	f003 0306 	and.w	r3, r3, #6
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f063 030e 	orn	r3, r3, #14
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <I2C_MasterRequestRead+0x198>)
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f865 	bl	8002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	00010008 	.word	0x00010008
 80029e0:	00010002 	.word	0x00010002

080029e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	4613      	mov	r3, r2
 80029f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f4:	e025      	b.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d021      	beq.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fe:	f7fe fe57 	bl	80016b0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	683a      	ldr	r2, [r7, #0]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d302      	bcc.n	8002a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d116      	bne.n	8002a42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2200      	movs	r2, #0
 8002a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f043 0220 	orr.w	r2, r3, #32
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e023      	b.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	0c1b      	lsrs	r3, r3, #16
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d10d      	bne.n	8002a68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	43da      	mvns	r2, r3
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4013      	ands	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	bf0c      	ite	eq
 8002a5e:	2301      	moveq	r3, #1
 8002a60:	2300      	movne	r3, #0
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	461a      	mov	r2, r3
 8002a66:	e00c      	b.n	8002a82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	4013      	ands	r3, r2
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	bf0c      	ite	eq
 8002a7a:	2301      	moveq	r3, #1
 8002a7c:	2300      	movne	r3, #0
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	79fb      	ldrb	r3, [r7, #7]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d0b6      	beq.n	80029f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aa0:	e051      	b.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ab0:	d123      	bne.n	8002afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002aca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0204 	orr.w	r2, r3, #4
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e046      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	d021      	beq.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7fe fdd5 	bl	80016b0 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d116      	bne.n	8002b46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e020      	b.n	8002b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	0c1b      	lsrs	r3, r3, #16
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10c      	bne.n	8002b6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	bf14      	ite	ne
 8002b62:	2301      	movne	r3, #1
 8002b64:	2300      	moveq	r3, #0
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	e00b      	b.n	8002b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	43da      	mvns	r2, r3
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	4013      	ands	r3, r2
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	bf14      	ite	ne
 8002b7c:	2301      	movne	r3, #1
 8002b7e:	2300      	moveq	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d18d      	bne.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b9c:	e02d      	b.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f8ce 	bl	8002d40 <I2C_IsAcknowledgeFailed>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e02d      	b.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d021      	beq.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb6:	f7fe fd7b 	bl	80016b0 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	68ba      	ldr	r2, [r7, #8]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d302      	bcc.n	8002bcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d116      	bne.n	8002bfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be6:	f043 0220 	orr.w	r2, r3, #32
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e007      	b.n	8002c0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c04:	2b80      	cmp	r3, #128	; 0x80
 8002c06:	d1ca      	bne.n	8002b9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c1e:	e02d      	b.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f88d 	bl	8002d40 <I2C_IsAcknowledgeFailed>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e02d      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c36:	d021      	beq.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c38:	f7fe fd3a 	bl	80016b0 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	68ba      	ldr	r2, [r7, #8]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d302      	bcc.n	8002c4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d116      	bne.n	8002c7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c68:	f043 0220 	orr.w	r2, r3, #32
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e007      	b.n	8002c8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0304 	and.w	r3, r3, #4
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	d1ca      	bne.n	8002c20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ca0:	e042      	b.n	8002d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b10      	cmp	r3, #16
 8002cae:	d119      	bne.n	8002ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f06f 0210 	mvn.w	r2, #16
 8002cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e029      	b.n	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce4:	f7fe fce4 	bl	80016b0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d302      	bcc.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d116      	bne.n	8002d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2220      	movs	r2, #32
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d14:	f043 0220 	orr.w	r2, r3, #32
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e007      	b.n	8002d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d1b5      	bne.n	8002ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	d11b      	bne.n	8002d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	f043 0204 	orr.w	r2, r3, #4
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e267      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d075      	beq.n	8002eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dbe:	4b88      	ldr	r3, [pc, #544]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	2b04      	cmp	r3, #4
 8002dc8:	d00c      	beq.n	8002de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dca:	4b85      	ldr	r3, [pc, #532]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d112      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dd6:	4b82      	ldr	r3, [pc, #520]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002de2:	d10b      	bne.n	8002dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de4:	4b7e      	ldr	r3, [pc, #504]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d05b      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x108>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d157      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e242      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d106      	bne.n	8002e14 <HAL_RCC_OscConfig+0x74>
 8002e06:	4b76      	ldr	r3, [pc, #472]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a75      	ldr	r2, [pc, #468]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e01d      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x98>
 8002e1e:	4b70      	ldr	r3, [pc, #448]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a6f      	ldr	r2, [pc, #444]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	4b6d      	ldr	r3, [pc, #436]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a6c      	ldr	r2, [pc, #432]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0xb0>
 8002e38:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a65      	ldr	r2, [pc, #404]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e58:	f7fe fc2a 	bl	80016b0 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fc26 	bl	80016b0 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	; 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e207      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	4b5b      	ldr	r3, [pc, #364]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0xc0>
 8002e7e:	e014      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e80:	f7fe fc16 	bl	80016b0 <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e88:	f7fe fc12 	bl	80016b0 <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b64      	cmp	r3, #100	; 0x64
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1f3      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	4b51      	ldr	r3, [pc, #324]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0xe8>
 8002ea6:	e000      	b.n	8002eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d063      	beq.n	8002f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eb6:	4b4a      	ldr	r3, [pc, #296]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec2:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d11c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ece:	4b44      	ldr	r3, [pc, #272]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d116      	bne.n	8002f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eda:	4b41      	ldr	r3, [pc, #260]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d005      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x152>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e1c7      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef2:	4b3b      	ldr	r3, [pc, #236]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	00db      	lsls	r3, r3, #3
 8002f00:	4937      	ldr	r1, [pc, #220]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f06:	e03a      	b.n	8002f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f10:	4b34      	ldr	r3, [pc, #208]	; (8002fe4 <HAL_RCC_OscConfig+0x244>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f16:	f7fe fbcb 	bl	80016b0 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fbc7 	bl	80016b0 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e1a8      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f30:	4b2b      	ldr	r3, [pc, #172]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	4925      	ldr	r1, [pc, #148]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	600b      	str	r3, [r1, #0]
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f52:	4b24      	ldr	r3, [pc, #144]	; (8002fe4 <HAL_RCC_OscConfig+0x244>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7fe fbaa 	bl	80016b0 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f60:	f7fe fba6 	bl	80016b0 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e187      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d036      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f92:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <HAL_RCC_OscConfig+0x248>)
 8002f94:	2201      	movs	r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f98:	f7fe fb8a 	bl	80016b0 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fa0:	f7fe fb86 	bl	80016b0 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e167      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0f0      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x200>
 8002fbe:	e01b      	b.n	8002ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HAL_RCC_OscConfig+0x248>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc6:	f7fe fb73 	bl	80016b0 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fcc:	e00e      	b.n	8002fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fce:	f7fe fb6f 	bl	80016b0 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d907      	bls.n	8002fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e150      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	42470000 	.word	0x42470000
 8002fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fec:	4b88      	ldr	r3, [pc, #544]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d1ea      	bne.n	8002fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8097 	beq.w	8003134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003006:	2300      	movs	r3, #0
 8003008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300a:	4b81      	ldr	r3, [pc, #516]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10f      	bne.n	8003036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	4a7c      	ldr	r2, [pc, #496]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003024:	6413      	str	r3, [r2, #64]	; 0x40
 8003026:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003032:	2301      	movs	r3, #1
 8003034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003036:	4b77      	ldr	r3, [pc, #476]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d118      	bne.n	8003074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003042:	4b74      	ldr	r3, [pc, #464]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a73      	ldr	r2, [pc, #460]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800304e:	f7fe fb2f 	bl	80016b0 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003056:	f7fe fb2b 	bl	80016b0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e10c      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	4b6a      	ldr	r3, [pc, #424]	; (8003214 <HAL_RCC_OscConfig+0x474>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	2b01      	cmp	r3, #1
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x2ea>
 800307c:	4b64      	ldr	r3, [pc, #400]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003080:	4a63      	ldr	r2, [pc, #396]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	; 0x70
 8003088:	e01c      	b.n	80030c4 <HAL_RCC_OscConfig+0x324>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b05      	cmp	r3, #5
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x30c>
 8003092:	4b5f      	ldr	r3, [pc, #380]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	4a5e      	ldr	r2, [pc, #376]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003098:	f043 0304 	orr.w	r3, r3, #4
 800309c:	6713      	str	r3, [r2, #112]	; 0x70
 800309e:	4b5c      	ldr	r3, [pc, #368]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a2:	4a5b      	ldr	r2, [pc, #364]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6713      	str	r3, [r2, #112]	; 0x70
 80030aa:	e00b      	b.n	80030c4 <HAL_RCC_OscConfig+0x324>
 80030ac:	4b58      	ldr	r3, [pc, #352]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	; 0x70
 80030b8:	4b55      	ldr	r3, [pc, #340]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a54      	ldr	r2, [pc, #336]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030be:	f023 0304 	bic.w	r3, r3, #4
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d015      	beq.n	80030f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030cc:	f7fe faf0 	bl	80016b0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d2:	e00a      	b.n	80030ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d4:	f7fe faec 	bl	80016b0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e0cb      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	4b49      	ldr	r3, [pc, #292]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d0ee      	beq.n	80030d4 <HAL_RCC_OscConfig+0x334>
 80030f6:	e014      	b.n	8003122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f8:	f7fe fada 	bl	80016b0 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fe:	e00a      	b.n	8003116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fe fad6 	bl	80016b0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f241 3288 	movw	r2, #5000	; 0x1388
 800310e:	4293      	cmp	r3, r2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0b5      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	4b3e      	ldr	r3, [pc, #248]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1ee      	bne.n	8003100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003122:	7dfb      	ldrb	r3, [r7, #23]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b39      	ldr	r3, [pc, #228]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	4a38      	ldr	r2, [pc, #224]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 800312e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003132:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a1 	beq.w	8003280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d05c      	beq.n	8003204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	2b02      	cmp	r3, #2
 8003150:	d141      	bne.n	80031d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_OscConfig+0x478>)
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003158:	f7fe faaa 	bl	80016b0 <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800315e:	e008      	b.n	8003172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003160:	f7fe faa6 	bl	80016b0 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	2b02      	cmp	r3, #2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e087      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003172:	4b27      	ldr	r3, [pc, #156]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1f0      	bne.n	8003160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318c:	019b      	lsls	r3, r3, #6
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003194:	085b      	lsrs	r3, r3, #1
 8003196:	3b01      	subs	r3, #1
 8003198:	041b      	lsls	r3, r3, #16
 800319a:	431a      	orrs	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	491b      	ldr	r1, [pc, #108]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031a8:	4b1b      	ldr	r3, [pc, #108]	; (8003218 <HAL_RCC_OscConfig+0x478>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe fa7f 	bl	80016b0 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b6:	f7fe fa7b 	bl	80016b0 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e05c      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x416>
 80031d4:	e054      	b.n	8003280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fa68 	bl	80016b0 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fa64 	bl	80016b0 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e045      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x444>
 8003202:	e03d      	b.n	8003280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d107      	bne.n	800321c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e038      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
 8003210:	40023800 	.word	0x40023800
 8003214:	40007000 	.word	0x40007000
 8003218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <HAL_RCC_OscConfig+0x4ec>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d028      	beq.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d121      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d11a      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003254:	4293      	cmp	r3, r2
 8003256:	d111      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	3b01      	subs	r3, #1
 8003266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003268:	429a      	cmp	r2, r3
 800326a:	d107      	bne.n	800327c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800

08003290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0cc      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d90c      	bls.n	80032cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ba:	4b63      	ldr	r3, [pc, #396]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d001      	beq.n	80032cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0b8      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d020      	beq.n	800331a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d005      	beq.n	80032f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e4:	4b59      	ldr	r3, [pc, #356]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	4a58      	ldr	r2, [pc, #352]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0308 	and.w	r3, r3, #8
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032fc:	4b53      	ldr	r3, [pc, #332]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003308:	4b50      	ldr	r3, [pc, #320]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	494d      	ldr	r1, [pc, #308]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	4313      	orrs	r3, r2
 8003318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d044      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d107      	bne.n	800333e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b47      	ldr	r3, [pc, #284]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d119      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e07f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b02      	cmp	r3, #2
 8003344:	d003      	beq.n	800334e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334a:	2b03      	cmp	r3, #3
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b3f      	ldr	r3, [pc, #252]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e06f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e067      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b37      	ldr	r3, [pc, #220]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4934      	ldr	r1, [pc, #208]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003380:	f7fe f996 	bl	80016b0 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe f992 	bl	80016b0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	; 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e04f      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d20c      	bcs.n	80033d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_RCC_ClockConfig+0x1b8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e032      	b.n	800343e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d008      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4916      	ldr	r1, [pc, #88]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	490e      	ldr	r1, [pc, #56]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 8003412:	4313      	orrs	r3, r2
 8003414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003416:	f000 f821 	bl	800345c <HAL_RCC_GetSysClockFreq>
 800341a:	4602      	mov	r2, r0
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_RCC_ClockConfig+0x1bc>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	490a      	ldr	r1, [pc, #40]	; (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 8003428:	5ccb      	ldrb	r3, [r1, r3]
 800342a:	fa22 f303 	lsr.w	r3, r2, r3
 800342e:	4a09      	ldr	r2, [pc, #36]	; (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003432:	4b09      	ldr	r3, [pc, #36]	; (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4618      	mov	r0, r3
 8003438:	f7fe f8f6 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40023c00 	.word	0x40023c00
 800344c:	40023800 	.word	0x40023800
 8003450:	08006630 	.word	0x08006630
 8003454:	20000000 	.word	0x20000000
 8003458:	20000004 	.word	0x20000004

0800345c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800345c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003460:	b094      	sub	sp, #80	; 0x50
 8003462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
 8003468:	2300      	movs	r3, #0
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	2300      	movs	r3, #0
 800346e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003474:	4b79      	ldr	r3, [pc, #484]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b08      	cmp	r3, #8
 800347e:	d00d      	beq.n	800349c <HAL_RCC_GetSysClockFreq+0x40>
 8003480:	2b08      	cmp	r3, #8
 8003482:	f200 80e1 	bhi.w	8003648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003486:	2b00      	cmp	r3, #0
 8003488:	d002      	beq.n	8003490 <HAL_RCC_GetSysClockFreq+0x34>
 800348a:	2b04      	cmp	r3, #4
 800348c:	d003      	beq.n	8003496 <HAL_RCC_GetSysClockFreq+0x3a>
 800348e:	e0db      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003490:	4b73      	ldr	r3, [pc, #460]	; (8003660 <HAL_RCC_GetSysClockFreq+0x204>)
 8003492:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003494:	e0db      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003496:	4b73      	ldr	r3, [pc, #460]	; (8003664 <HAL_RCC_GetSysClockFreq+0x208>)
 8003498:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800349a:	e0d8      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800349c:	4b6f      	ldr	r3, [pc, #444]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034a6:	4b6d      	ldr	r3, [pc, #436]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d063      	beq.n	800357a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b2:	4b6a      	ldr	r3, [pc, #424]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	099b      	lsrs	r3, r3, #6
 80034b8:	2200      	movs	r2, #0
 80034ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80034bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
 80034c6:	2300      	movs	r3, #0
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
 80034ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034ce:	4622      	mov	r2, r4
 80034d0:	462b      	mov	r3, r5
 80034d2:	f04f 0000 	mov.w	r0, #0
 80034d6:	f04f 0100 	mov.w	r1, #0
 80034da:	0159      	lsls	r1, r3, #5
 80034dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034e0:	0150      	lsls	r0, r2, #5
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4621      	mov	r1, r4
 80034e8:	1a51      	subs	r1, r2, r1
 80034ea:	6139      	str	r1, [r7, #16]
 80034ec:	4629      	mov	r1, r5
 80034ee:	eb63 0301 	sbc.w	r3, r3, r1
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003500:	4659      	mov	r1, fp
 8003502:	018b      	lsls	r3, r1, #6
 8003504:	4651      	mov	r1, sl
 8003506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800350a:	4651      	mov	r1, sl
 800350c:	018a      	lsls	r2, r1, #6
 800350e:	4651      	mov	r1, sl
 8003510:	ebb2 0801 	subs.w	r8, r2, r1
 8003514:	4659      	mov	r1, fp
 8003516:	eb63 0901 	sbc.w	r9, r3, r1
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800352a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800352e:	4690      	mov	r8, r2
 8003530:	4699      	mov	r9, r3
 8003532:	4623      	mov	r3, r4
 8003534:	eb18 0303 	adds.w	r3, r8, r3
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	462b      	mov	r3, r5
 800353c:	eb49 0303 	adc.w	r3, r9, r3
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800354e:	4629      	mov	r1, r5
 8003550:	024b      	lsls	r3, r1, #9
 8003552:	4621      	mov	r1, r4
 8003554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003558:	4621      	mov	r1, r4
 800355a:	024a      	lsls	r2, r1, #9
 800355c:	4610      	mov	r0, r2
 800355e:	4619      	mov	r1, r3
 8003560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003562:	2200      	movs	r2, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
 8003566:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800356c:	f7fd fb06 	bl	8000b7c <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4613      	mov	r3, r2
 8003576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003578:	e058      	b.n	800362c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800357a:	4b38      	ldr	r3, [pc, #224]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	099b      	lsrs	r3, r3, #6
 8003580:	2200      	movs	r2, #0
 8003582:	4618      	mov	r0, r3
 8003584:	4611      	mov	r1, r2
 8003586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800358a:	623b      	str	r3, [r7, #32]
 800358c:	2300      	movs	r3, #0
 800358e:	627b      	str	r3, [r7, #36]	; 0x24
 8003590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	f04f 0000 	mov.w	r0, #0
 800359c:	f04f 0100 	mov.w	r1, #0
 80035a0:	0159      	lsls	r1, r3, #5
 80035a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035a6:	0150      	lsls	r0, r2, #5
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4641      	mov	r1, r8
 80035ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035cc:	ebb2 040a 	subs.w	r4, r2, sl
 80035d0:	eb63 050b 	sbc.w	r5, r3, fp
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	00eb      	lsls	r3, r5, #3
 80035de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e2:	00e2      	lsls	r2, r4, #3
 80035e4:	4614      	mov	r4, r2
 80035e6:	461d      	mov	r5, r3
 80035e8:	4643      	mov	r3, r8
 80035ea:	18e3      	adds	r3, r4, r3
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	464b      	mov	r3, r9
 80035f0:	eb45 0303 	adc.w	r3, r5, r3
 80035f4:	607b      	str	r3, [r7, #4]
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003602:	4629      	mov	r1, r5
 8003604:	028b      	lsls	r3, r1, #10
 8003606:	4621      	mov	r1, r4
 8003608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800360c:	4621      	mov	r1, r4
 800360e:	028a      	lsls	r2, r1, #10
 8003610:	4610      	mov	r0, r2
 8003612:	4619      	mov	r1, r3
 8003614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003616:	2200      	movs	r2, #0
 8003618:	61bb      	str	r3, [r7, #24]
 800361a:	61fa      	str	r2, [r7, #28]
 800361c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003620:	f7fd faac 	bl	8000b7c <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4613      	mov	r3, r2
 800362a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800362c:	4b0b      	ldr	r3, [pc, #44]	; (800365c <HAL_RCC_GetSysClockFreq+0x200>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	0c1b      	lsrs	r3, r3, #16
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	3301      	adds	r3, #1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800363c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800363e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003646:	e002      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <HAL_RCC_GetSysClockFreq+0x204>)
 800364a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800364c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003650:	4618      	mov	r0, r3
 8003652:	3750      	adds	r7, #80	; 0x50
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	00f42400 	.word	0x00f42400
 8003664:	007a1200 	.word	0x007a1200

08003668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <HAL_RCC_GetHCLKFreq+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
}
 8003670:	4618      	mov	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20000000 	.word	0x20000000

08003680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003684:	f7ff fff0 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	; (80036a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0a9b      	lsrs	r3, r3, #10
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	08006640 	.word	0x08006640

080036a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036ac:	f7ff ffdc 	bl	8003668 <HAL_RCC_GetHCLKFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	0b5b      	lsrs	r3, r3, #13
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	4903      	ldr	r1, [pc, #12]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40023800 	.word	0x40023800
 80036cc:	08006640 	.word	0x08006640

080036d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e03f      	b.n	8003762 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d106      	bne.n	80036fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd fe00 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	; 0x24
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68da      	ldr	r2, [r3, #12]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003712:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f929 	bl	800396c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003728:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003738:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003748:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08a      	sub	sp, #40	; 0x28
 800376e:	af02      	add	r7, sp, #8
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b20      	cmp	r3, #32
 8003788:	d17c      	bne.n	8003884 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_UART_Transmit+0x2c>
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e075      	b.n	8003886 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_UART_Transmit+0x3e>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e06e      	b.n	8003886 <HAL_UART_Transmit+0x11c>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2221      	movs	r2, #33	; 0x21
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037be:	f7fd ff77 	bl	80016b0 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	88fa      	ldrh	r2, [r7, #6]
 80037ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d8:	d108      	bne.n	80037ec <HAL_UART_Transmit+0x82>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d104      	bne.n	80037ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	61bb      	str	r3, [r7, #24]
 80037ea:	e003      	b.n	80037f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f0:	2300      	movs	r3, #0
 80037f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80037fc:	e02a      	b.n	8003854 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	2180      	movs	r1, #128	; 0x80
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f840 	bl	800388e <UART_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e036      	b.n	8003886 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	461a      	mov	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3302      	adds	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	e007      	b.n	8003846 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	781a      	ldrb	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	3301      	adds	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1cf      	bne.n	80037fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2200      	movs	r2, #0
 8003866:	2140      	movs	r1, #64	; 0x40
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f810 	bl	800388e <UART_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e006      	b.n	8003886 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	e000      	b.n	8003886 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003884:	2302      	movs	r3, #2
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b090      	sub	sp, #64	; 0x40
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	60b9      	str	r1, [r7, #8]
 8003898:	603b      	str	r3, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800389e:	e050      	b.n	8003942 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d04c      	beq.n	8003942 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80038a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d007      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0x30>
 80038ae:	f7fd feff 	bl	80016b0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d241      	bcs.n	8003942 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	330c      	adds	r3, #12
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	330c      	adds	r3, #12
 80038dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038de:	637a      	str	r2, [r7, #52]	; 0x34
 80038e0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038e6:	e841 2300 	strex	r3, r2, [r1]
 80038ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d1e5      	bne.n	80038be <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	3314      	adds	r3, #20
 80038f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	e853 3f00 	ldrex	r3, [r3]
 8003900:	613b      	str	r3, [r7, #16]
   return(result);
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	63bb      	str	r3, [r7, #56]	; 0x38
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3314      	adds	r3, #20
 8003910:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003912:	623a      	str	r2, [r7, #32]
 8003914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003916:	69f9      	ldr	r1, [r7, #28]
 8003918:	6a3a      	ldr	r2, [r7, #32]
 800391a:	e841 2300 	strex	r3, r2, [r1]
 800391e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1e5      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e00f      	b.n	8003962 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4013      	ands	r3, r2
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	429a      	cmp	r2, r3
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	429a      	cmp	r2, r3
 800395e:	d09f      	beq.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3740      	adds	r7, #64	; 0x40
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800396c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003970:	b0c0      	sub	sp, #256	; 0x100
 8003972:	af00      	add	r7, sp, #0
 8003974:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003988:	68d9      	ldr	r1, [r3, #12]
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	ea40 0301 	orr.w	r3, r0, r1
 8003994:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399a:	689a      	ldr	r2, [r3, #8]
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039c4:	f021 010c 	bic.w	r1, r1, #12
 80039c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039d2:	430b      	orrs	r3, r1
 80039d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e6:	6999      	ldr	r1, [r3, #24]
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	ea40 0301 	orr.w	r3, r0, r1
 80039f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b8f      	ldr	r3, [pc, #572]	; (8003c38 <UART_SetConfig+0x2cc>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d005      	beq.n	8003a0c <UART_SetConfig+0xa0>
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4b8d      	ldr	r3, [pc, #564]	; (8003c3c <UART_SetConfig+0x2d0>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d104      	bne.n	8003a16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff fe4c 	bl	80036a8 <HAL_RCC_GetPCLK2Freq>
 8003a10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a14:	e003      	b.n	8003a1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a16:	f7ff fe33 	bl	8003680 <HAL_RCC_GetPCLK1Freq>
 8003a1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a28:	f040 810c 	bne.w	8003c44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a30:	2200      	movs	r2, #0
 8003a32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a3e:	4622      	mov	r2, r4
 8003a40:	462b      	mov	r3, r5
 8003a42:	1891      	adds	r1, r2, r2
 8003a44:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a46:	415b      	adcs	r3, r3
 8003a48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a4e:	4621      	mov	r1, r4
 8003a50:	eb12 0801 	adds.w	r8, r2, r1
 8003a54:	4629      	mov	r1, r5
 8003a56:	eb43 0901 	adc.w	r9, r3, r1
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a6e:	4690      	mov	r8, r2
 8003a70:	4699      	mov	r9, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	eb18 0303 	adds.w	r3, r8, r3
 8003a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	eb49 0303 	adc.w	r3, r9, r3
 8003a82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	18db      	adds	r3, r3, r3
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	eb42 0303 	adc.w	r3, r2, r3
 8003aa6:	657b      	str	r3, [r7, #84]	; 0x54
 8003aa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ab0:	f7fd f864 	bl	8000b7c <__aeabi_uldivmod>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4b61      	ldr	r3, [pc, #388]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003aba:	fba3 2302 	umull	r2, r3, r3, r2
 8003abe:	095b      	lsrs	r3, r3, #5
 8003ac0:	011c      	lsls	r4, r3, #4
 8003ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003acc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ad0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ad4:	4642      	mov	r2, r8
 8003ad6:	464b      	mov	r3, r9
 8003ad8:	1891      	adds	r1, r2, r2
 8003ada:	64b9      	str	r1, [r7, #72]	; 0x48
 8003adc:	415b      	adcs	r3, r3
 8003ade:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ae0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	eb12 0a01 	adds.w	sl, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb43 0b01 	adc.w	fp, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003afc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b04:	4692      	mov	sl, r2
 8003b06:	469b      	mov	fp, r3
 8003b08:	4643      	mov	r3, r8
 8003b0a:	eb1a 0303 	adds.w	r3, sl, r3
 8003b0e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b12:	464b      	mov	r3, r9
 8003b14:	eb4b 0303 	adc.w	r3, fp, r3
 8003b18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b28:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b2c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b30:	460b      	mov	r3, r1
 8003b32:	18db      	adds	r3, r3, r3
 8003b34:	643b      	str	r3, [r7, #64]	; 0x40
 8003b36:	4613      	mov	r3, r2
 8003b38:	eb42 0303 	adc.w	r3, r2, r3
 8003b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b42:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b46:	f7fd f819 	bl	8000b7c <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4b3b      	ldr	r3, [pc, #236]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003b52:	fba3 2301 	umull	r2, r3, r3, r1
 8003b56:	095b      	lsrs	r3, r3, #5
 8003b58:	2264      	movs	r2, #100	; 0x64
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	1acb      	subs	r3, r1, r3
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b66:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003b68:	fba3 2302 	umull	r2, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	005b      	lsls	r3, r3, #1
 8003b70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b74:	441c      	add	r4, r3
 8003b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b80:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b84:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b88:	4642      	mov	r2, r8
 8003b8a:	464b      	mov	r3, r9
 8003b8c:	1891      	adds	r1, r2, r2
 8003b8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b90:	415b      	adcs	r3, r3
 8003b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b98:	4641      	mov	r1, r8
 8003b9a:	1851      	adds	r1, r2, r1
 8003b9c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	414b      	adcs	r3, r1
 8003ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003bb0:	4659      	mov	r1, fp
 8003bb2:	00cb      	lsls	r3, r1, #3
 8003bb4:	4651      	mov	r1, sl
 8003bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bba:	4651      	mov	r1, sl
 8003bbc:	00ca      	lsls	r2, r1, #3
 8003bbe:	4610      	mov	r0, r2
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	189b      	adds	r3, r3, r2
 8003bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bcc:	464b      	mov	r3, r9
 8003bce:	460a      	mov	r2, r1
 8003bd0:	eb42 0303 	adc.w	r3, r2, r3
 8003bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003be4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003be8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bec:	460b      	mov	r3, r1
 8003bee:	18db      	adds	r3, r3, r3
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	eb42 0303 	adc.w	r3, r2, r3
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bfe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003c02:	f7fc ffbb 	bl	8000b7c <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	2164      	movs	r1, #100	; 0x64
 8003c14:	fb01 f303 	mul.w	r3, r1, r3
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	3332      	adds	r3, #50	; 0x32
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <UART_SetConfig+0x2d4>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	f003 0207 	and.w	r2, r3, #7
 8003c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4422      	add	r2, r4
 8003c32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c34:	e105      	b.n	8003e42 <UART_SetConfig+0x4d6>
 8003c36:	bf00      	nop
 8003c38:	40011000 	.word	0x40011000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c4e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c56:	4642      	mov	r2, r8
 8003c58:	464b      	mov	r3, r9
 8003c5a:	1891      	adds	r1, r2, r2
 8003c5c:	6239      	str	r1, [r7, #32]
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
 8003c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c66:	4641      	mov	r1, r8
 8003c68:	1854      	adds	r4, r2, r1
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	eb43 0501 	adc.w	r5, r3, r1
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	00eb      	lsls	r3, r5, #3
 8003c7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c7e:	00e2      	lsls	r2, r4, #3
 8003c80:	4614      	mov	r4, r2
 8003c82:	461d      	mov	r5, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	18e3      	adds	r3, r4, r3
 8003c88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c8c:	464b      	mov	r3, r9
 8003c8e:	eb45 0303 	adc.w	r3, r5, r3
 8003c92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ca2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	008b      	lsls	r3, r1, #2
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	008a      	lsls	r2, r1, #2
 8003cc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cc4:	f7fc ff5a 	bl	8000b7c <__aeabi_uldivmod>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4b60      	ldr	r3, [pc, #384]	; (8003e50 <UART_SetConfig+0x4e4>)
 8003cce:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	011c      	lsls	r4, r3, #4
 8003cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003ce0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003ce4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	1891      	adds	r1, r2, r2
 8003cee:	61b9      	str	r1, [r7, #24]
 8003cf0:	415b      	adcs	r3, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	1851      	adds	r1, r2, r1
 8003cfc:	6139      	str	r1, [r7, #16]
 8003cfe:	4649      	mov	r1, r9
 8003d00:	414b      	adcs	r3, r1
 8003d02:	617b      	str	r3, [r7, #20]
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d10:	4659      	mov	r1, fp
 8003d12:	00cb      	lsls	r3, r1, #3
 8003d14:	4651      	mov	r1, sl
 8003d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	00ca      	lsls	r2, r1, #3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	4619      	mov	r1, r3
 8003d22:	4603      	mov	r3, r0
 8003d24:	4642      	mov	r2, r8
 8003d26:	189b      	adds	r3, r3, r2
 8003d28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	460a      	mov	r2, r1
 8003d30:	eb42 0303 	adc.w	r3, r2, r3
 8003d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d42:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d50:	4649      	mov	r1, r9
 8003d52:	008b      	lsls	r3, r1, #2
 8003d54:	4641      	mov	r1, r8
 8003d56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d5a:	4641      	mov	r1, r8
 8003d5c:	008a      	lsls	r2, r1, #2
 8003d5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d62:	f7fc ff0b 	bl	8000b7c <__aeabi_uldivmod>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <UART_SetConfig+0x4e4>)
 8003d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	2164      	movs	r1, #100	; 0x64
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	3332      	adds	r3, #50	; 0x32
 8003d7e:	4a34      	ldr	r2, [pc, #208]	; (8003e50 <UART_SetConfig+0x4e4>)
 8003d80:	fba2 2303 	umull	r2, r3, r2, r3
 8003d84:	095b      	lsrs	r3, r3, #5
 8003d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d8a:	441c      	add	r4, r3
 8003d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d90:	2200      	movs	r2, #0
 8003d92:	673b      	str	r3, [r7, #112]	; 0x70
 8003d94:	677a      	str	r2, [r7, #116]	; 0x74
 8003d96:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d9a:	4642      	mov	r2, r8
 8003d9c:	464b      	mov	r3, r9
 8003d9e:	1891      	adds	r1, r2, r2
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	415b      	adcs	r3, r3
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003daa:	4641      	mov	r1, r8
 8003dac:	1851      	adds	r1, r2, r1
 8003dae:	6039      	str	r1, [r7, #0]
 8003db0:	4649      	mov	r1, r9
 8003db2:	414b      	adcs	r3, r1
 8003db4:	607b      	str	r3, [r7, #4]
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dc2:	4659      	mov	r1, fp
 8003dc4:	00cb      	lsls	r3, r1, #3
 8003dc6:	4651      	mov	r1, sl
 8003dc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dcc:	4651      	mov	r1, sl
 8003dce:	00ca      	lsls	r2, r1, #3
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4642      	mov	r2, r8
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ddc:	464b      	mov	r3, r9
 8003dde:	460a      	mov	r2, r1
 8003de0:	eb42 0303 	adc.w	r3, r2, r3
 8003de4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	663b      	str	r3, [r7, #96]	; 0x60
 8003df0:	667a      	str	r2, [r7, #100]	; 0x64
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dfe:	4649      	mov	r1, r9
 8003e00:	008b      	lsls	r3, r1, #2
 8003e02:	4641      	mov	r1, r8
 8003e04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e08:	4641      	mov	r1, r8
 8003e0a:	008a      	lsls	r2, r1, #2
 8003e0c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e10:	f7fc feb4 	bl	8000b7c <__aeabi_uldivmod>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4b0d      	ldr	r3, [pc, #52]	; (8003e50 <UART_SetConfig+0x4e4>)
 8003e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e1e:	095b      	lsrs	r3, r3, #5
 8003e20:	2164      	movs	r1, #100	; 0x64
 8003e22:	fb01 f303 	mul.w	r3, r1, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	3332      	adds	r3, #50	; 0x32
 8003e2c:	4a08      	ldr	r2, [pc, #32]	; (8003e50 <UART_SetConfig+0x4e4>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	095b      	lsrs	r3, r3, #5
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4422      	add	r2, r4
 8003e40:	609a      	str	r2, [r3, #8]
}
 8003e42:	bf00      	nop
 8003e44:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e4e:	bf00      	nop
 8003e50:	51eb851f 	.word	0x51eb851f

08003e54 <gcvt>:
 8003e54:	b530      	push	{r4, r5, lr}
 8003e56:	2200      	movs	r2, #0
 8003e58:	b085      	sub	sp, #20
 8003e5a:	460c      	mov	r4, r1
 8003e5c:	4605      	mov	r5, r0
 8003e5e:	2300      	movs	r3, #0
 8003e60:	ec51 0b10 	vmov	r0, r1, d0
 8003e64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8003e68:	f7fc fe38 	bl	8000adc <__aeabi_dcmplt>
 8003e6c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8003e70:	4622      	mov	r2, r4
 8003e72:	b118      	cbz	r0, 8003e7c <gcvt+0x28>
 8003e74:	232d      	movs	r3, #45	; 0x2d
 8003e76:	f802 3b01 	strb.w	r3, [r2], #1
 8003e7a:	3d01      	subs	r5, #1
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	4806      	ldr	r0, [pc, #24]	; (8003e98 <gcvt+0x44>)
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	4629      	mov	r1, r5
 8003e84:	2367      	movs	r3, #103	; 0x67
 8003e86:	6800      	ldr	r0, [r0, #0]
 8003e88:	f000 f8b2 	bl	8003ff0 <_gcvt>
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	bf14      	ite	ne
 8003e90:	4620      	movne	r0, r4
 8003e92:	2000      	moveq	r0, #0
 8003e94:	b005      	add	sp, #20
 8003e96:	bd30      	pop	{r4, r5, pc}
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <__errno>:
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <__errno+0x8>)
 8003e9e:	6818      	ldr	r0, [r3, #0]
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2000000c 	.word	0x2000000c

08003ea8 <__libc_init_array>:
 8003ea8:	b570      	push	{r4, r5, r6, lr}
 8003eaa:	4d0d      	ldr	r5, [pc, #52]	; (8003ee0 <__libc_init_array+0x38>)
 8003eac:	4c0d      	ldr	r4, [pc, #52]	; (8003ee4 <__libc_init_array+0x3c>)
 8003eae:	1b64      	subs	r4, r4, r5
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	2600      	movs	r6, #0
 8003eb4:	42a6      	cmp	r6, r4
 8003eb6:	d109      	bne.n	8003ecc <__libc_init_array+0x24>
 8003eb8:	4d0b      	ldr	r5, [pc, #44]	; (8003ee8 <__libc_init_array+0x40>)
 8003eba:	4c0c      	ldr	r4, [pc, #48]	; (8003eec <__libc_init_array+0x44>)
 8003ebc:	f002 fb9c 	bl	80065f8 <_init>
 8003ec0:	1b64      	subs	r4, r4, r5
 8003ec2:	10a4      	asrs	r4, r4, #2
 8003ec4:	2600      	movs	r6, #0
 8003ec6:	42a6      	cmp	r6, r4
 8003ec8:	d105      	bne.n	8003ed6 <__libc_init_array+0x2e>
 8003eca:	bd70      	pop	{r4, r5, r6, pc}
 8003ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed0:	4798      	blx	r3
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7ee      	b.n	8003eb4 <__libc_init_array+0xc>
 8003ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003eda:	4798      	blx	r3
 8003edc:	3601      	adds	r6, #1
 8003ede:	e7f2      	b.n	8003ec6 <__libc_init_array+0x1e>
 8003ee0:	08006910 	.word	0x08006910
 8003ee4:	08006910 	.word	0x08006910
 8003ee8:	08006910 	.word	0x08006910
 8003eec:	08006914 	.word	0x08006914

08003ef0 <memset>:
 8003ef0:	4402      	add	r2, r0
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d100      	bne.n	8003efa <memset+0xa>
 8003ef8:	4770      	bx	lr
 8003efa:	f803 1b01 	strb.w	r1, [r3], #1
 8003efe:	e7f9      	b.n	8003ef4 <memset+0x4>

08003f00 <print_e>:
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	b087      	sub	sp, #28
 8003f04:	ec43 2b10 	vmov	d0, r2, r3
 8003f08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003f0a:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8003f0e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003f10:	ab04      	add	r3, sp, #16
 8003f12:	9301      	str	r3, [sp, #4]
 8003f14:	ab03      	add	r3, sp, #12
 8003f16:	9300      	str	r3, [sp, #0]
 8003f18:	1c62      	adds	r2, r4, #1
 8003f1a:	ab05      	add	r3, sp, #20
 8003f1c:	460f      	mov	r7, r1
 8003f1e:	2102      	movs	r1, #2
 8003f20:	f000 fe36 	bl	8004b90 <_dtoa_r>
 8003f24:	9a05      	ldr	r2, [sp, #20]
 8003f26:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d105      	bne.n	8003f3a <print_e+0x3a>
 8003f2e:	4601      	mov	r1, r0
 8003f30:	4638      	mov	r0, r7
 8003f32:	f000 fd79 	bl	8004a28 <strcpy>
 8003f36:	b007      	add	sp, #28
 8003f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3a:	463b      	mov	r3, r7
 8003f3c:	7801      	ldrb	r1, [r0, #0]
 8003f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f42:	2c00      	cmp	r4, #0
 8003f44:	bfc8      	it	gt
 8003f46:	2501      	movgt	r5, #1
 8003f48:	212e      	movs	r1, #46	; 0x2e
 8003f4a:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8003f4e:	b10f      	cbz	r7, 8003f54 <print_e+0x54>
 8003f50:	2c00      	cmp	r4, #0
 8003f52:	dc37      	bgt.n	8003fc4 <print_e+0xc4>
 8003f54:	2e67      	cmp	r6, #103	; 0x67
 8003f56:	d046      	beq.n	8003fe6 <print_e+0xe6>
 8003f58:	2e47      	cmp	r6, #71	; 0x47
 8003f5a:	d046      	beq.n	8003fea <print_e+0xea>
 8003f5c:	212e      	movs	r1, #46	; 0x2e
 8003f5e:	2030      	movs	r0, #48	; 0x30
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	dc38      	bgt.n	8003fd6 <print_e+0xd6>
 8003f64:	1e51      	subs	r1, r2, #1
 8003f66:	2900      	cmp	r1, #0
 8003f68:	bfb8      	it	lt
 8003f6a:	f1c2 0201 	rsblt	r2, r2, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	9105      	str	r1, [sp, #20]
 8003f72:	bfac      	ite	ge
 8003f74:	222b      	movge	r2, #43	; 0x2b
 8003f76:	9205      	strlt	r2, [sp, #20]
 8003f78:	f800 6b02 	strb.w	r6, [r0], #2
 8003f7c:	bfa8      	it	ge
 8003f7e:	705a      	strbge	r2, [r3, #1]
 8003f80:	9a05      	ldr	r2, [sp, #20]
 8003f82:	bfbc      	itt	lt
 8003f84:	212d      	movlt	r1, #45	; 0x2d
 8003f86:	7059      	strblt	r1, [r3, #1]
 8003f88:	2a63      	cmp	r2, #99	; 0x63
 8003f8a:	dd0b      	ble.n	8003fa4 <print_e+0xa4>
 8003f8c:	2164      	movs	r1, #100	; 0x64
 8003f8e:	fb92 f1f1 	sdiv	r1, r2, r1
 8003f92:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8003f96:	1cd8      	adds	r0, r3, #3
 8003f98:	709c      	strb	r4, [r3, #2]
 8003f9a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8003f9e:	fb03 2201 	mla	r2, r3, r1, r2
 8003fa2:	9205      	str	r2, [sp, #20]
 8003fa4:	9b05      	ldr	r3, [sp, #20]
 8003fa6:	220a      	movs	r2, #10
 8003fa8:	fb93 f2f2 	sdiv	r2, r3, r2
 8003fac:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8003fb0:	7001      	strb	r1, [r0, #0]
 8003fb2:	f06f 0109 	mvn.w	r1, #9
 8003fb6:	fb01 3302 	mla	r3, r1, r2, r3
 8003fba:	3330      	adds	r3, #48	; 0x30
 8003fbc:	7043      	strb	r3, [r0, #1]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	7083      	strb	r3, [r0, #2]
 8003fc2:	e7b8      	b.n	8003f36 <print_e+0x36>
 8003fc4:	b10d      	cbz	r5, 8003fca <print_e+0xca>
 8003fc6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fca:	7805      	ldrb	r5, [r0, #0]
 8003fcc:	f803 5b01 	strb.w	r5, [r3], #1
 8003fd0:	3c01      	subs	r4, #1
 8003fd2:	2500      	movs	r5, #0
 8003fd4:	e7b9      	b.n	8003f4a <print_e+0x4a>
 8003fd6:	b10d      	cbz	r5, 8003fdc <print_e+0xdc>
 8003fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8003fdc:	f803 0b01 	strb.w	r0, [r3], #1
 8003fe0:	3c01      	subs	r4, #1
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	e7bc      	b.n	8003f60 <print_e+0x60>
 8003fe6:	2665      	movs	r6, #101	; 0x65
 8003fe8:	e7bc      	b.n	8003f64 <print_e+0x64>
 8003fea:	2645      	movs	r6, #69	; 0x45
 8003fec:	e7ba      	b.n	8003f64 <print_e+0x64>
	...

08003ff0 <_gcvt>:
 8003ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff4:	ec55 4b10 	vmov	r4, r5, d0
 8003ff8:	b088      	sub	sp, #32
 8003ffa:	4681      	mov	r9, r0
 8003ffc:	4688      	mov	r8, r1
 8003ffe:	4616      	mov	r6, r2
 8004000:	469a      	mov	sl, r3
 8004002:	ee10 0a10 	vmov	r0, s0
 8004006:	2200      	movs	r2, #0
 8004008:	2300      	movs	r3, #0
 800400a:	4629      	mov	r1, r5
 800400c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800400e:	f7fc fd65 	bl	8000adc <__aeabi_dcmplt>
 8004012:	b110      	cbz	r0, 800401a <_gcvt+0x2a>
 8004014:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004018:	461d      	mov	r5, r3
 800401a:	2200      	movs	r2, #0
 800401c:	2300      	movs	r3, #0
 800401e:	4620      	mov	r0, r4
 8004020:	4629      	mov	r1, r5
 8004022:	f7fc fd51 	bl	8000ac8 <__aeabi_dcmpeq>
 8004026:	b138      	cbz	r0, 8004038 <_gcvt+0x48>
 8004028:	2330      	movs	r3, #48	; 0x30
 800402a:	7033      	strb	r3, [r6, #0]
 800402c:	2300      	movs	r3, #0
 800402e:	7073      	strb	r3, [r6, #1]
 8004030:	4630      	mov	r0, r6
 8004032:	b008      	add	sp, #32
 8004034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004038:	a34b      	add	r3, pc, #300	; (adr r3, 8004168 <_gcvt+0x178>)
 800403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc fd55 	bl	8000af0 <__aeabi_dcmple>
 8004046:	b158      	cbz	r0, 8004060 <_gcvt+0x70>
 8004048:	f108 31ff 	add.w	r1, r8, #4294967295
 800404c:	9100      	str	r1, [sp, #0]
 800404e:	e9cd a701 	strd	sl, r7, [sp, #4]
 8004052:	4622      	mov	r2, r4
 8004054:	462b      	mov	r3, r5
 8004056:	4631      	mov	r1, r6
 8004058:	4648      	mov	r0, r9
 800405a:	f7ff ff51 	bl	8003f00 <print_e>
 800405e:	e7e7      	b.n	8004030 <_gcvt+0x40>
 8004060:	4640      	mov	r0, r8
 8004062:	f000 fc09 	bl	8004878 <_mprec_log10>
 8004066:	4622      	mov	r2, r4
 8004068:	ec51 0b10 	vmov	r0, r1, d0
 800406c:	462b      	mov	r3, r5
 800406e:	f7fc fd3f 	bl	8000af0 <__aeabi_dcmple>
 8004072:	2800      	cmp	r0, #0
 8004074:	d1e8      	bne.n	8004048 <_gcvt+0x58>
 8004076:	ab07      	add	r3, sp, #28
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	ab06      	add	r3, sp, #24
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4642      	mov	r2, r8
 8004080:	ab05      	add	r3, sp, #20
 8004082:	ec45 4b10 	vmov	d0, r4, r5
 8004086:	2102      	movs	r1, #2
 8004088:	4648      	mov	r0, r9
 800408a:	f000 fd81 	bl	8004b90 <_dtoa_r>
 800408e:	9a05      	ldr	r2, [sp, #20]
 8004090:	f242 730f 	movw	r3, #9999	; 0x270f
 8004094:	429a      	cmp	r2, r3
 8004096:	d00e      	beq.n	80040b6 <_gcvt+0xc6>
 8004098:	4633      	mov	r3, r6
 800409a:	44b0      	add	r8, r6
 800409c:	4605      	mov	r5, r0
 800409e:	f810 1b01 	ldrb.w	r1, [r0], #1
 80040a2:	9c05      	ldr	r4, [sp, #20]
 80040a4:	eba8 0203 	sub.w	r2, r8, r3
 80040a8:	b109      	cbz	r1, 80040ae <_gcvt+0xbe>
 80040aa:	2c00      	cmp	r4, #0
 80040ac:	dc08      	bgt.n	80040c0 <_gcvt+0xd0>
 80040ae:	2100      	movs	r1, #0
 80040b0:	f04f 0c30 	mov.w	ip, #48	; 0x30
 80040b4:	e00d      	b.n	80040d2 <_gcvt+0xe2>
 80040b6:	4601      	mov	r1, r0
 80040b8:	4630      	mov	r0, r6
 80040ba:	f000 fcb5 	bl	8004a28 <strcpy>
 80040be:	e7b7      	b.n	8004030 <_gcvt+0x40>
 80040c0:	3c01      	subs	r4, #1
 80040c2:	f803 1b01 	strb.w	r1, [r3], #1
 80040c6:	9405      	str	r4, [sp, #20]
 80040c8:	e7e8      	b.n	800409c <_gcvt+0xac>
 80040ca:	f803 cb01 	strb.w	ip, [r3], #1
 80040ce:	3a01      	subs	r2, #1
 80040d0:	2101      	movs	r1, #1
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	4620      	mov	r0, r4
 80040d6:	dc2a      	bgt.n	800412e <_gcvt+0x13e>
 80040d8:	b101      	cbz	r1, 80040dc <_gcvt+0xec>
 80040da:	9405      	str	r4, [sp, #20]
 80040dc:	b90f      	cbnz	r7, 80040e2 <_gcvt+0xf2>
 80040de:	7829      	ldrb	r1, [r5, #0]
 80040e0:	b311      	cbz	r1, 8004128 <_gcvt+0x138>
 80040e2:	42b3      	cmp	r3, r6
 80040e4:	bf04      	itt	eq
 80040e6:	2130      	moveq	r1, #48	; 0x30
 80040e8:	f803 1b01 	strbeq.w	r1, [r3], #1
 80040ec:	212e      	movs	r1, #46	; 0x2e
 80040ee:	7019      	strb	r1, [r3, #0]
 80040f0:	9905      	ldr	r1, [sp, #20]
 80040f2:	4618      	mov	r0, r3
 80040f4:	2400      	movs	r4, #0
 80040f6:	eba1 0c03 	sub.w	ip, r1, r3
 80040fa:	f04f 0e30 	mov.w	lr, #48	; 0x30
 80040fe:	eb1c 0f00 	cmn.w	ip, r0
 8004102:	d41c      	bmi.n	800413e <_gcvt+0x14e>
 8004104:	2900      	cmp	r1, #0
 8004106:	f1c1 0000 	rsb	r0, r1, #0
 800410a:	bfc8      	it	gt
 800410c:	2000      	movgt	r0, #0
 800410e:	f100 0c01 	add.w	ip, r0, #1
 8004112:	4463      	add	r3, ip
 8004114:	4401      	add	r1, r0
 8004116:	b104      	cbz	r4, 800411a <_gcvt+0x12a>
 8004118:	9105      	str	r1, [sp, #20]
 800411a:	1e69      	subs	r1, r5, #1
 800411c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004120:	b108      	cbz	r0, 8004126 <_gcvt+0x136>
 8004122:	2a00      	cmp	r2, #0
 8004124:	dc0f      	bgt.n	8004146 <_gcvt+0x156>
 8004126:	b9df      	cbnz	r7, 8004160 <_gcvt+0x170>
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	e780      	b.n	8004030 <_gcvt+0x40>
 800412e:	2a00      	cmp	r2, #0
 8004130:	f104 34ff 	add.w	r4, r4, #4294967295
 8004134:	dcc9      	bgt.n	80040ca <_gcvt+0xda>
 8004136:	2900      	cmp	r1, #0
 8004138:	d0d0      	beq.n	80040dc <_gcvt+0xec>
 800413a:	9005      	str	r0, [sp, #20]
 800413c:	e7ce      	b.n	80040dc <_gcvt+0xec>
 800413e:	f800 ef01 	strb.w	lr, [r0, #1]!
 8004142:	2401      	movs	r4, #1
 8004144:	e7db      	b.n	80040fe <_gcvt+0x10e>
 8004146:	f803 0b01 	strb.w	r0, [r3], #1
 800414a:	3a01      	subs	r2, #1
 800414c:	e7e6      	b.n	800411c <_gcvt+0x12c>
 800414e:	f801 5b01 	strb.w	r5, [r1], #1
 8004152:	1a60      	subs	r0, r4, r1
 8004154:	2800      	cmp	r0, #0
 8004156:	dcfa      	bgt.n	800414e <_gcvt+0x15e>
 8004158:	2a00      	cmp	r2, #0
 800415a:	bfa8      	it	ge
 800415c:	189b      	addge	r3, r3, r2
 800415e:	e7e3      	b.n	8004128 <_gcvt+0x138>
 8004160:	4619      	mov	r1, r3
 8004162:	189c      	adds	r4, r3, r2
 8004164:	2530      	movs	r5, #48	; 0x30
 8004166:	e7f4      	b.n	8004152 <_gcvt+0x162>
 8004168:	eb1c432d 	.word	0xeb1c432d
 800416c:	3f1a36e2 	.word	0x3f1a36e2

08004170 <_Balloc>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004174:	4604      	mov	r4, r0
 8004176:	460d      	mov	r5, r1
 8004178:	b976      	cbnz	r6, 8004198 <_Balloc+0x28>
 800417a:	2010      	movs	r0, #16
 800417c:	f001 fb08 	bl	8005790 <malloc>
 8004180:	4602      	mov	r2, r0
 8004182:	6260      	str	r0, [r4, #36]	; 0x24
 8004184:	b920      	cbnz	r0, 8004190 <_Balloc+0x20>
 8004186:	4b18      	ldr	r3, [pc, #96]	; (80041e8 <_Balloc+0x78>)
 8004188:	4818      	ldr	r0, [pc, #96]	; (80041ec <_Balloc+0x7c>)
 800418a:	2166      	movs	r1, #102	; 0x66
 800418c:	f000 fc54 	bl	8004a38 <__assert_func>
 8004190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004194:	6006      	str	r6, [r0, #0]
 8004196:	60c6      	str	r6, [r0, #12]
 8004198:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800419a:	68f3      	ldr	r3, [r6, #12]
 800419c:	b183      	cbz	r3, 80041c0 <_Balloc+0x50>
 800419e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80041a6:	b9b8      	cbnz	r0, 80041d8 <_Balloc+0x68>
 80041a8:	2101      	movs	r1, #1
 80041aa:	fa01 f605 	lsl.w	r6, r1, r5
 80041ae:	1d72      	adds	r2, r6, #5
 80041b0:	0092      	lsls	r2, r2, #2
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 fb7e 	bl	80048b4 <_calloc_r>
 80041b8:	b160      	cbz	r0, 80041d4 <_Balloc+0x64>
 80041ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80041be:	e00e      	b.n	80041de <_Balloc+0x6e>
 80041c0:	2221      	movs	r2, #33	; 0x21
 80041c2:	2104      	movs	r1, #4
 80041c4:	4620      	mov	r0, r4
 80041c6:	f000 fb75 	bl	80048b4 <_calloc_r>
 80041ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041cc:	60f0      	str	r0, [r6, #12]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1e4      	bne.n	800419e <_Balloc+0x2e>
 80041d4:	2000      	movs	r0, #0
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80041de:	2300      	movs	r3, #0
 80041e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80041e4:	e7f7      	b.n	80041d6 <_Balloc+0x66>
 80041e6:	bf00      	nop
 80041e8:	0800664c 	.word	0x0800664c
 80041ec:	08006663 	.word	0x08006663

080041f0 <_Bfree>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80041f4:	4605      	mov	r5, r0
 80041f6:	460c      	mov	r4, r1
 80041f8:	b976      	cbnz	r6, 8004218 <_Bfree+0x28>
 80041fa:	2010      	movs	r0, #16
 80041fc:	f001 fac8 	bl	8005790 <malloc>
 8004200:	4602      	mov	r2, r0
 8004202:	6268      	str	r0, [r5, #36]	; 0x24
 8004204:	b920      	cbnz	r0, 8004210 <_Bfree+0x20>
 8004206:	4b09      	ldr	r3, [pc, #36]	; (800422c <_Bfree+0x3c>)
 8004208:	4809      	ldr	r0, [pc, #36]	; (8004230 <_Bfree+0x40>)
 800420a:	218a      	movs	r1, #138	; 0x8a
 800420c:	f000 fc14 	bl	8004a38 <__assert_func>
 8004210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004214:	6006      	str	r6, [r0, #0]
 8004216:	60c6      	str	r6, [r0, #12]
 8004218:	b13c      	cbz	r4, 800422a <_Bfree+0x3a>
 800421a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800421c:	6862      	ldr	r2, [r4, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004224:	6021      	str	r1, [r4, #0]
 8004226:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800422a:	bd70      	pop	{r4, r5, r6, pc}
 800422c:	0800664c 	.word	0x0800664c
 8004230:	08006663 	.word	0x08006663

08004234 <__multadd>:
 8004234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004238:	690d      	ldr	r5, [r1, #16]
 800423a:	4607      	mov	r7, r0
 800423c:	460c      	mov	r4, r1
 800423e:	461e      	mov	r6, r3
 8004240:	f101 0c14 	add.w	ip, r1, #20
 8004244:	2000      	movs	r0, #0
 8004246:	f8dc 3000 	ldr.w	r3, [ip]
 800424a:	b299      	uxth	r1, r3
 800424c:	fb02 6101 	mla	r1, r2, r1, r6
 8004250:	0c1e      	lsrs	r6, r3, #16
 8004252:	0c0b      	lsrs	r3, r1, #16
 8004254:	fb02 3306 	mla	r3, r2, r6, r3
 8004258:	b289      	uxth	r1, r1
 800425a:	3001      	adds	r0, #1
 800425c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004260:	4285      	cmp	r5, r0
 8004262:	f84c 1b04 	str.w	r1, [ip], #4
 8004266:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800426a:	dcec      	bgt.n	8004246 <__multadd+0x12>
 800426c:	b30e      	cbz	r6, 80042b2 <__multadd+0x7e>
 800426e:	68a3      	ldr	r3, [r4, #8]
 8004270:	42ab      	cmp	r3, r5
 8004272:	dc19      	bgt.n	80042a8 <__multadd+0x74>
 8004274:	6861      	ldr	r1, [r4, #4]
 8004276:	4638      	mov	r0, r7
 8004278:	3101      	adds	r1, #1
 800427a:	f7ff ff79 	bl	8004170 <_Balloc>
 800427e:	4680      	mov	r8, r0
 8004280:	b928      	cbnz	r0, 800428e <__multadd+0x5a>
 8004282:	4602      	mov	r2, r0
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <__multadd+0x84>)
 8004286:	480d      	ldr	r0, [pc, #52]	; (80042bc <__multadd+0x88>)
 8004288:	21b5      	movs	r1, #181	; 0xb5
 800428a:	f000 fbd5 	bl	8004a38 <__assert_func>
 800428e:	6922      	ldr	r2, [r4, #16]
 8004290:	3202      	adds	r2, #2
 8004292:	f104 010c 	add.w	r1, r4, #12
 8004296:	0092      	lsls	r2, r2, #2
 8004298:	300c      	adds	r0, #12
 800429a:	f001 fa81 	bl	80057a0 <memcpy>
 800429e:	4621      	mov	r1, r4
 80042a0:	4638      	mov	r0, r7
 80042a2:	f7ff ffa5 	bl	80041f0 <_Bfree>
 80042a6:	4644      	mov	r4, r8
 80042a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80042ac:	3501      	adds	r5, #1
 80042ae:	615e      	str	r6, [r3, #20]
 80042b0:	6125      	str	r5, [r4, #16]
 80042b2:	4620      	mov	r0, r4
 80042b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042b8:	080066bf 	.word	0x080066bf
 80042bc:	08006663 	.word	0x08006663

080042c0 <__hi0bits>:
 80042c0:	0c03      	lsrs	r3, r0, #16
 80042c2:	041b      	lsls	r3, r3, #16
 80042c4:	b9d3      	cbnz	r3, 80042fc <__hi0bits+0x3c>
 80042c6:	0400      	lsls	r0, r0, #16
 80042c8:	2310      	movs	r3, #16
 80042ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80042ce:	bf04      	itt	eq
 80042d0:	0200      	lsleq	r0, r0, #8
 80042d2:	3308      	addeq	r3, #8
 80042d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80042d8:	bf04      	itt	eq
 80042da:	0100      	lsleq	r0, r0, #4
 80042dc:	3304      	addeq	r3, #4
 80042de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80042e2:	bf04      	itt	eq
 80042e4:	0080      	lsleq	r0, r0, #2
 80042e6:	3302      	addeq	r3, #2
 80042e8:	2800      	cmp	r0, #0
 80042ea:	db05      	blt.n	80042f8 <__hi0bits+0x38>
 80042ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80042f0:	f103 0301 	add.w	r3, r3, #1
 80042f4:	bf08      	it	eq
 80042f6:	2320      	moveq	r3, #32
 80042f8:	4618      	mov	r0, r3
 80042fa:	4770      	bx	lr
 80042fc:	2300      	movs	r3, #0
 80042fe:	e7e4      	b.n	80042ca <__hi0bits+0xa>

08004300 <__lo0bits>:
 8004300:	6803      	ldr	r3, [r0, #0]
 8004302:	f013 0207 	ands.w	r2, r3, #7
 8004306:	4601      	mov	r1, r0
 8004308:	d00b      	beq.n	8004322 <__lo0bits+0x22>
 800430a:	07da      	lsls	r2, r3, #31
 800430c:	d423      	bmi.n	8004356 <__lo0bits+0x56>
 800430e:	0798      	lsls	r0, r3, #30
 8004310:	bf49      	itett	mi
 8004312:	085b      	lsrmi	r3, r3, #1
 8004314:	089b      	lsrpl	r3, r3, #2
 8004316:	2001      	movmi	r0, #1
 8004318:	600b      	strmi	r3, [r1, #0]
 800431a:	bf5c      	itt	pl
 800431c:	600b      	strpl	r3, [r1, #0]
 800431e:	2002      	movpl	r0, #2
 8004320:	4770      	bx	lr
 8004322:	b298      	uxth	r0, r3
 8004324:	b9a8      	cbnz	r0, 8004352 <__lo0bits+0x52>
 8004326:	0c1b      	lsrs	r3, r3, #16
 8004328:	2010      	movs	r0, #16
 800432a:	b2da      	uxtb	r2, r3
 800432c:	b90a      	cbnz	r2, 8004332 <__lo0bits+0x32>
 800432e:	3008      	adds	r0, #8
 8004330:	0a1b      	lsrs	r3, r3, #8
 8004332:	071a      	lsls	r2, r3, #28
 8004334:	bf04      	itt	eq
 8004336:	091b      	lsreq	r3, r3, #4
 8004338:	3004      	addeq	r0, #4
 800433a:	079a      	lsls	r2, r3, #30
 800433c:	bf04      	itt	eq
 800433e:	089b      	lsreq	r3, r3, #2
 8004340:	3002      	addeq	r0, #2
 8004342:	07da      	lsls	r2, r3, #31
 8004344:	d403      	bmi.n	800434e <__lo0bits+0x4e>
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	f100 0001 	add.w	r0, r0, #1
 800434c:	d005      	beq.n	800435a <__lo0bits+0x5a>
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	4770      	bx	lr
 8004352:	4610      	mov	r0, r2
 8004354:	e7e9      	b.n	800432a <__lo0bits+0x2a>
 8004356:	2000      	movs	r0, #0
 8004358:	4770      	bx	lr
 800435a:	2020      	movs	r0, #32
 800435c:	4770      	bx	lr
	...

08004360 <__i2b>:
 8004360:	b510      	push	{r4, lr}
 8004362:	460c      	mov	r4, r1
 8004364:	2101      	movs	r1, #1
 8004366:	f7ff ff03 	bl	8004170 <_Balloc>
 800436a:	4602      	mov	r2, r0
 800436c:	b928      	cbnz	r0, 800437a <__i2b+0x1a>
 800436e:	4b05      	ldr	r3, [pc, #20]	; (8004384 <__i2b+0x24>)
 8004370:	4805      	ldr	r0, [pc, #20]	; (8004388 <__i2b+0x28>)
 8004372:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004376:	f000 fb5f 	bl	8004a38 <__assert_func>
 800437a:	2301      	movs	r3, #1
 800437c:	6144      	str	r4, [r0, #20]
 800437e:	6103      	str	r3, [r0, #16]
 8004380:	bd10      	pop	{r4, pc}
 8004382:	bf00      	nop
 8004384:	080066bf 	.word	0x080066bf
 8004388:	08006663 	.word	0x08006663

0800438c <__multiply>:
 800438c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004390:	4691      	mov	r9, r2
 8004392:	690a      	ldr	r2, [r1, #16]
 8004394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004398:	429a      	cmp	r2, r3
 800439a:	bfb8      	it	lt
 800439c:	460b      	movlt	r3, r1
 800439e:	460c      	mov	r4, r1
 80043a0:	bfbc      	itt	lt
 80043a2:	464c      	movlt	r4, r9
 80043a4:	4699      	movlt	r9, r3
 80043a6:	6927      	ldr	r7, [r4, #16]
 80043a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80043ac:	68a3      	ldr	r3, [r4, #8]
 80043ae:	6861      	ldr	r1, [r4, #4]
 80043b0:	eb07 060a 	add.w	r6, r7, sl
 80043b4:	42b3      	cmp	r3, r6
 80043b6:	b085      	sub	sp, #20
 80043b8:	bfb8      	it	lt
 80043ba:	3101      	addlt	r1, #1
 80043bc:	f7ff fed8 	bl	8004170 <_Balloc>
 80043c0:	b930      	cbnz	r0, 80043d0 <__multiply+0x44>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b44      	ldr	r3, [pc, #272]	; (80044d8 <__multiply+0x14c>)
 80043c6:	4845      	ldr	r0, [pc, #276]	; (80044dc <__multiply+0x150>)
 80043c8:	f240 115d 	movw	r1, #349	; 0x15d
 80043cc:	f000 fb34 	bl	8004a38 <__assert_func>
 80043d0:	f100 0514 	add.w	r5, r0, #20
 80043d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80043d8:	462b      	mov	r3, r5
 80043da:	2200      	movs	r2, #0
 80043dc:	4543      	cmp	r3, r8
 80043de:	d321      	bcc.n	8004424 <__multiply+0x98>
 80043e0:	f104 0314 	add.w	r3, r4, #20
 80043e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80043e8:	f109 0314 	add.w	r3, r9, #20
 80043ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80043f0:	9202      	str	r2, [sp, #8]
 80043f2:	1b3a      	subs	r2, r7, r4
 80043f4:	3a15      	subs	r2, #21
 80043f6:	f022 0203 	bic.w	r2, r2, #3
 80043fa:	3204      	adds	r2, #4
 80043fc:	f104 0115 	add.w	r1, r4, #21
 8004400:	428f      	cmp	r7, r1
 8004402:	bf38      	it	cc
 8004404:	2204      	movcc	r2, #4
 8004406:	9201      	str	r2, [sp, #4]
 8004408:	9a02      	ldr	r2, [sp, #8]
 800440a:	9303      	str	r3, [sp, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	d80c      	bhi.n	800442a <__multiply+0x9e>
 8004410:	2e00      	cmp	r6, #0
 8004412:	dd03      	ble.n	800441c <__multiply+0x90>
 8004414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05a      	beq.n	80044d2 <__multiply+0x146>
 800441c:	6106      	str	r6, [r0, #16]
 800441e:	b005      	add	sp, #20
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	f843 2b04 	str.w	r2, [r3], #4
 8004428:	e7d8      	b.n	80043dc <__multiply+0x50>
 800442a:	f8b3 a000 	ldrh.w	sl, [r3]
 800442e:	f1ba 0f00 	cmp.w	sl, #0
 8004432:	d024      	beq.n	800447e <__multiply+0xf2>
 8004434:	f104 0e14 	add.w	lr, r4, #20
 8004438:	46a9      	mov	r9, r5
 800443a:	f04f 0c00 	mov.w	ip, #0
 800443e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004442:	f8d9 1000 	ldr.w	r1, [r9]
 8004446:	fa1f fb82 	uxth.w	fp, r2
 800444a:	b289      	uxth	r1, r1
 800444c:	fb0a 110b 	mla	r1, sl, fp, r1
 8004450:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004454:	f8d9 2000 	ldr.w	r2, [r9]
 8004458:	4461      	add	r1, ip
 800445a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800445e:	fb0a c20b 	mla	r2, sl, fp, ip
 8004462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004466:	b289      	uxth	r1, r1
 8004468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800446c:	4577      	cmp	r7, lr
 800446e:	f849 1b04 	str.w	r1, [r9], #4
 8004472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004476:	d8e2      	bhi.n	800443e <__multiply+0xb2>
 8004478:	9a01      	ldr	r2, [sp, #4]
 800447a:	f845 c002 	str.w	ip, [r5, r2]
 800447e:	9a03      	ldr	r2, [sp, #12]
 8004480:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004484:	3304      	adds	r3, #4
 8004486:	f1b9 0f00 	cmp.w	r9, #0
 800448a:	d020      	beq.n	80044ce <__multiply+0x142>
 800448c:	6829      	ldr	r1, [r5, #0]
 800448e:	f104 0c14 	add.w	ip, r4, #20
 8004492:	46ae      	mov	lr, r5
 8004494:	f04f 0a00 	mov.w	sl, #0
 8004498:	f8bc b000 	ldrh.w	fp, [ip]
 800449c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80044a0:	fb09 220b 	mla	r2, r9, fp, r2
 80044a4:	4492      	add	sl, r2
 80044a6:	b289      	uxth	r1, r1
 80044a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80044ac:	f84e 1b04 	str.w	r1, [lr], #4
 80044b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80044b4:	f8be 1000 	ldrh.w	r1, [lr]
 80044b8:	0c12      	lsrs	r2, r2, #16
 80044ba:	fb09 1102 	mla	r1, r9, r2, r1
 80044be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80044c2:	4567      	cmp	r7, ip
 80044c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80044c8:	d8e6      	bhi.n	8004498 <__multiply+0x10c>
 80044ca:	9a01      	ldr	r2, [sp, #4]
 80044cc:	50a9      	str	r1, [r5, r2]
 80044ce:	3504      	adds	r5, #4
 80044d0:	e79a      	b.n	8004408 <__multiply+0x7c>
 80044d2:	3e01      	subs	r6, #1
 80044d4:	e79c      	b.n	8004410 <__multiply+0x84>
 80044d6:	bf00      	nop
 80044d8:	080066bf 	.word	0x080066bf
 80044dc:	08006663 	.word	0x08006663

080044e0 <__pow5mult>:
 80044e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044e4:	4615      	mov	r5, r2
 80044e6:	f012 0203 	ands.w	r2, r2, #3
 80044ea:	4606      	mov	r6, r0
 80044ec:	460f      	mov	r7, r1
 80044ee:	d007      	beq.n	8004500 <__pow5mult+0x20>
 80044f0:	4c25      	ldr	r4, [pc, #148]	; (8004588 <__pow5mult+0xa8>)
 80044f2:	3a01      	subs	r2, #1
 80044f4:	2300      	movs	r3, #0
 80044f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80044fa:	f7ff fe9b 	bl	8004234 <__multadd>
 80044fe:	4607      	mov	r7, r0
 8004500:	10ad      	asrs	r5, r5, #2
 8004502:	d03d      	beq.n	8004580 <__pow5mult+0xa0>
 8004504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004506:	b97c      	cbnz	r4, 8004528 <__pow5mult+0x48>
 8004508:	2010      	movs	r0, #16
 800450a:	f001 f941 	bl	8005790 <malloc>
 800450e:	4602      	mov	r2, r0
 8004510:	6270      	str	r0, [r6, #36]	; 0x24
 8004512:	b928      	cbnz	r0, 8004520 <__pow5mult+0x40>
 8004514:	4b1d      	ldr	r3, [pc, #116]	; (800458c <__pow5mult+0xac>)
 8004516:	481e      	ldr	r0, [pc, #120]	; (8004590 <__pow5mult+0xb0>)
 8004518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800451c:	f000 fa8c 	bl	8004a38 <__assert_func>
 8004520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004524:	6004      	str	r4, [r0, #0]
 8004526:	60c4      	str	r4, [r0, #12]
 8004528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800452c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004530:	b94c      	cbnz	r4, 8004546 <__pow5mult+0x66>
 8004532:	f240 2171 	movw	r1, #625	; 0x271
 8004536:	4630      	mov	r0, r6
 8004538:	f7ff ff12 	bl	8004360 <__i2b>
 800453c:	2300      	movs	r3, #0
 800453e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004542:	4604      	mov	r4, r0
 8004544:	6003      	str	r3, [r0, #0]
 8004546:	f04f 0900 	mov.w	r9, #0
 800454a:	07eb      	lsls	r3, r5, #31
 800454c:	d50a      	bpl.n	8004564 <__pow5mult+0x84>
 800454e:	4639      	mov	r1, r7
 8004550:	4622      	mov	r2, r4
 8004552:	4630      	mov	r0, r6
 8004554:	f7ff ff1a 	bl	800438c <__multiply>
 8004558:	4639      	mov	r1, r7
 800455a:	4680      	mov	r8, r0
 800455c:	4630      	mov	r0, r6
 800455e:	f7ff fe47 	bl	80041f0 <_Bfree>
 8004562:	4647      	mov	r7, r8
 8004564:	106d      	asrs	r5, r5, #1
 8004566:	d00b      	beq.n	8004580 <__pow5mult+0xa0>
 8004568:	6820      	ldr	r0, [r4, #0]
 800456a:	b938      	cbnz	r0, 800457c <__pow5mult+0x9c>
 800456c:	4622      	mov	r2, r4
 800456e:	4621      	mov	r1, r4
 8004570:	4630      	mov	r0, r6
 8004572:	f7ff ff0b 	bl	800438c <__multiply>
 8004576:	6020      	str	r0, [r4, #0]
 8004578:	f8c0 9000 	str.w	r9, [r0]
 800457c:	4604      	mov	r4, r0
 800457e:	e7e4      	b.n	800454a <__pow5mult+0x6a>
 8004580:	4638      	mov	r0, r7
 8004582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004586:	bf00      	nop
 8004588:	080067c0 	.word	0x080067c0
 800458c:	0800664c 	.word	0x0800664c
 8004590:	08006663 	.word	0x08006663

08004594 <__lshift>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	460c      	mov	r4, r1
 800459a:	6849      	ldr	r1, [r1, #4]
 800459c:	6923      	ldr	r3, [r4, #16]
 800459e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80045a2:	68a3      	ldr	r3, [r4, #8]
 80045a4:	4607      	mov	r7, r0
 80045a6:	4691      	mov	r9, r2
 80045a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80045ac:	f108 0601 	add.w	r6, r8, #1
 80045b0:	42b3      	cmp	r3, r6
 80045b2:	db0b      	blt.n	80045cc <__lshift+0x38>
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff fddb 	bl	8004170 <_Balloc>
 80045ba:	4605      	mov	r5, r0
 80045bc:	b948      	cbnz	r0, 80045d2 <__lshift+0x3e>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b2a      	ldr	r3, [pc, #168]	; (800466c <__lshift+0xd8>)
 80045c2:	482b      	ldr	r0, [pc, #172]	; (8004670 <__lshift+0xdc>)
 80045c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80045c8:	f000 fa36 	bl	8004a38 <__assert_func>
 80045cc:	3101      	adds	r1, #1
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	e7ee      	b.n	80045b0 <__lshift+0x1c>
 80045d2:	2300      	movs	r3, #0
 80045d4:	f100 0114 	add.w	r1, r0, #20
 80045d8:	f100 0210 	add.w	r2, r0, #16
 80045dc:	4618      	mov	r0, r3
 80045de:	4553      	cmp	r3, sl
 80045e0:	db37      	blt.n	8004652 <__lshift+0xbe>
 80045e2:	6920      	ldr	r0, [r4, #16]
 80045e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80045e8:	f104 0314 	add.w	r3, r4, #20
 80045ec:	f019 091f 	ands.w	r9, r9, #31
 80045f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80045f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80045f8:	d02f      	beq.n	800465a <__lshift+0xc6>
 80045fa:	f1c9 0e20 	rsb	lr, r9, #32
 80045fe:	468a      	mov	sl, r1
 8004600:	f04f 0c00 	mov.w	ip, #0
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	fa02 f209 	lsl.w	r2, r2, r9
 800460a:	ea42 020c 	orr.w	r2, r2, ip
 800460e:	f84a 2b04 	str.w	r2, [sl], #4
 8004612:	f853 2b04 	ldr.w	r2, [r3], #4
 8004616:	4298      	cmp	r0, r3
 8004618:	fa22 fc0e 	lsr.w	ip, r2, lr
 800461c:	d8f2      	bhi.n	8004604 <__lshift+0x70>
 800461e:	1b03      	subs	r3, r0, r4
 8004620:	3b15      	subs	r3, #21
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	3304      	adds	r3, #4
 8004628:	f104 0215 	add.w	r2, r4, #21
 800462c:	4290      	cmp	r0, r2
 800462e:	bf38      	it	cc
 8004630:	2304      	movcc	r3, #4
 8004632:	f841 c003 	str.w	ip, [r1, r3]
 8004636:	f1bc 0f00 	cmp.w	ip, #0
 800463a:	d001      	beq.n	8004640 <__lshift+0xac>
 800463c:	f108 0602 	add.w	r6, r8, #2
 8004640:	3e01      	subs	r6, #1
 8004642:	4638      	mov	r0, r7
 8004644:	612e      	str	r6, [r5, #16]
 8004646:	4621      	mov	r1, r4
 8004648:	f7ff fdd2 	bl	80041f0 <_Bfree>
 800464c:	4628      	mov	r0, r5
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	f842 0f04 	str.w	r0, [r2, #4]!
 8004656:	3301      	adds	r3, #1
 8004658:	e7c1      	b.n	80045de <__lshift+0x4a>
 800465a:	3904      	subs	r1, #4
 800465c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004660:	f841 2f04 	str.w	r2, [r1, #4]!
 8004664:	4298      	cmp	r0, r3
 8004666:	d8f9      	bhi.n	800465c <__lshift+0xc8>
 8004668:	e7ea      	b.n	8004640 <__lshift+0xac>
 800466a:	bf00      	nop
 800466c:	080066bf 	.word	0x080066bf
 8004670:	08006663 	.word	0x08006663

08004674 <__mcmp>:
 8004674:	b530      	push	{r4, r5, lr}
 8004676:	6902      	ldr	r2, [r0, #16]
 8004678:	690c      	ldr	r4, [r1, #16]
 800467a:	1b12      	subs	r2, r2, r4
 800467c:	d10e      	bne.n	800469c <__mcmp+0x28>
 800467e:	f100 0314 	add.w	r3, r0, #20
 8004682:	3114      	adds	r1, #20
 8004684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800468c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004694:	42a5      	cmp	r5, r4
 8004696:	d003      	beq.n	80046a0 <__mcmp+0x2c>
 8004698:	d305      	bcc.n	80046a6 <__mcmp+0x32>
 800469a:	2201      	movs	r2, #1
 800469c:	4610      	mov	r0, r2
 800469e:	bd30      	pop	{r4, r5, pc}
 80046a0:	4283      	cmp	r3, r0
 80046a2:	d3f3      	bcc.n	800468c <__mcmp+0x18>
 80046a4:	e7fa      	b.n	800469c <__mcmp+0x28>
 80046a6:	f04f 32ff 	mov.w	r2, #4294967295
 80046aa:	e7f7      	b.n	800469c <__mcmp+0x28>

080046ac <__mdiff>:
 80046ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b0:	460c      	mov	r4, r1
 80046b2:	4606      	mov	r6, r0
 80046b4:	4611      	mov	r1, r2
 80046b6:	4620      	mov	r0, r4
 80046b8:	4690      	mov	r8, r2
 80046ba:	f7ff ffdb 	bl	8004674 <__mcmp>
 80046be:	1e05      	subs	r5, r0, #0
 80046c0:	d110      	bne.n	80046e4 <__mdiff+0x38>
 80046c2:	4629      	mov	r1, r5
 80046c4:	4630      	mov	r0, r6
 80046c6:	f7ff fd53 	bl	8004170 <_Balloc>
 80046ca:	b930      	cbnz	r0, 80046da <__mdiff+0x2e>
 80046cc:	4b3a      	ldr	r3, [pc, #232]	; (80047b8 <__mdiff+0x10c>)
 80046ce:	4602      	mov	r2, r0
 80046d0:	f240 2132 	movw	r1, #562	; 0x232
 80046d4:	4839      	ldr	r0, [pc, #228]	; (80047bc <__mdiff+0x110>)
 80046d6:	f000 f9af 	bl	8004a38 <__assert_func>
 80046da:	2301      	movs	r3, #1
 80046dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80046e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e4:	bfa4      	itt	ge
 80046e6:	4643      	movge	r3, r8
 80046e8:	46a0      	movge	r8, r4
 80046ea:	4630      	mov	r0, r6
 80046ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80046f0:	bfa6      	itte	ge
 80046f2:	461c      	movge	r4, r3
 80046f4:	2500      	movge	r5, #0
 80046f6:	2501      	movlt	r5, #1
 80046f8:	f7ff fd3a 	bl	8004170 <_Balloc>
 80046fc:	b920      	cbnz	r0, 8004708 <__mdiff+0x5c>
 80046fe:	4b2e      	ldr	r3, [pc, #184]	; (80047b8 <__mdiff+0x10c>)
 8004700:	4602      	mov	r2, r0
 8004702:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004706:	e7e5      	b.n	80046d4 <__mdiff+0x28>
 8004708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800470c:	6926      	ldr	r6, [r4, #16]
 800470e:	60c5      	str	r5, [r0, #12]
 8004710:	f104 0914 	add.w	r9, r4, #20
 8004714:	f108 0514 	add.w	r5, r8, #20
 8004718:	f100 0e14 	add.w	lr, r0, #20
 800471c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004724:	f108 0210 	add.w	r2, r8, #16
 8004728:	46f2      	mov	sl, lr
 800472a:	2100      	movs	r1, #0
 800472c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004734:	fa1f f883 	uxth.w	r8, r3
 8004738:	fa11 f18b 	uxtah	r1, r1, fp
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	eba1 0808 	sub.w	r8, r1, r8
 8004742:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004746:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800474a:	fa1f f888 	uxth.w	r8, r8
 800474e:	1419      	asrs	r1, r3, #16
 8004750:	454e      	cmp	r6, r9
 8004752:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004756:	f84a 3b04 	str.w	r3, [sl], #4
 800475a:	d8e7      	bhi.n	800472c <__mdiff+0x80>
 800475c:	1b33      	subs	r3, r6, r4
 800475e:	3b15      	subs	r3, #21
 8004760:	f023 0303 	bic.w	r3, r3, #3
 8004764:	3304      	adds	r3, #4
 8004766:	3415      	adds	r4, #21
 8004768:	42a6      	cmp	r6, r4
 800476a:	bf38      	it	cc
 800476c:	2304      	movcc	r3, #4
 800476e:	441d      	add	r5, r3
 8004770:	4473      	add	r3, lr
 8004772:	469e      	mov	lr, r3
 8004774:	462e      	mov	r6, r5
 8004776:	4566      	cmp	r6, ip
 8004778:	d30e      	bcc.n	8004798 <__mdiff+0xec>
 800477a:	f10c 0203 	add.w	r2, ip, #3
 800477e:	1b52      	subs	r2, r2, r5
 8004780:	f022 0203 	bic.w	r2, r2, #3
 8004784:	3d03      	subs	r5, #3
 8004786:	45ac      	cmp	ip, r5
 8004788:	bf38      	it	cc
 800478a:	2200      	movcc	r2, #0
 800478c:	441a      	add	r2, r3
 800478e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004792:	b17b      	cbz	r3, 80047b4 <__mdiff+0x108>
 8004794:	6107      	str	r7, [r0, #16]
 8004796:	e7a3      	b.n	80046e0 <__mdiff+0x34>
 8004798:	f856 8b04 	ldr.w	r8, [r6], #4
 800479c:	fa11 f288 	uxtah	r2, r1, r8
 80047a0:	1414      	asrs	r4, r2, #16
 80047a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80047a6:	b292      	uxth	r2, r2
 80047a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80047ac:	f84e 2b04 	str.w	r2, [lr], #4
 80047b0:	1421      	asrs	r1, r4, #16
 80047b2:	e7e0      	b.n	8004776 <__mdiff+0xca>
 80047b4:	3f01      	subs	r7, #1
 80047b6:	e7ea      	b.n	800478e <__mdiff+0xe2>
 80047b8:	080066bf 	.word	0x080066bf
 80047bc:	08006663 	.word	0x08006663

080047c0 <__d2b>:
 80047c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80047c4:	4689      	mov	r9, r1
 80047c6:	2101      	movs	r1, #1
 80047c8:	ec57 6b10 	vmov	r6, r7, d0
 80047cc:	4690      	mov	r8, r2
 80047ce:	f7ff fccf 	bl	8004170 <_Balloc>
 80047d2:	4604      	mov	r4, r0
 80047d4:	b930      	cbnz	r0, 80047e4 <__d2b+0x24>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b25      	ldr	r3, [pc, #148]	; (8004870 <__d2b+0xb0>)
 80047da:	4826      	ldr	r0, [pc, #152]	; (8004874 <__d2b+0xb4>)
 80047dc:	f240 310a 	movw	r1, #778	; 0x30a
 80047e0:	f000 f92a 	bl	8004a38 <__assert_func>
 80047e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80047e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047ec:	bb35      	cbnz	r5, 800483c <__d2b+0x7c>
 80047ee:	2e00      	cmp	r6, #0
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	d028      	beq.n	8004846 <__d2b+0x86>
 80047f4:	4668      	mov	r0, sp
 80047f6:	9600      	str	r6, [sp, #0]
 80047f8:	f7ff fd82 	bl	8004300 <__lo0bits>
 80047fc:	9900      	ldr	r1, [sp, #0]
 80047fe:	b300      	cbz	r0, 8004842 <__d2b+0x82>
 8004800:	9a01      	ldr	r2, [sp, #4]
 8004802:	f1c0 0320 	rsb	r3, r0, #32
 8004806:	fa02 f303 	lsl.w	r3, r2, r3
 800480a:	430b      	orrs	r3, r1
 800480c:	40c2      	lsrs	r2, r0
 800480e:	6163      	str	r3, [r4, #20]
 8004810:	9201      	str	r2, [sp, #4]
 8004812:	9b01      	ldr	r3, [sp, #4]
 8004814:	61a3      	str	r3, [r4, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	bf14      	ite	ne
 800481a:	2202      	movne	r2, #2
 800481c:	2201      	moveq	r2, #1
 800481e:	6122      	str	r2, [r4, #16]
 8004820:	b1d5      	cbz	r5, 8004858 <__d2b+0x98>
 8004822:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004826:	4405      	add	r5, r0
 8004828:	f8c9 5000 	str.w	r5, [r9]
 800482c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004830:	f8c8 0000 	str.w	r0, [r8]
 8004834:	4620      	mov	r0, r4
 8004836:	b003      	add	sp, #12
 8004838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800483c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004840:	e7d5      	b.n	80047ee <__d2b+0x2e>
 8004842:	6161      	str	r1, [r4, #20]
 8004844:	e7e5      	b.n	8004812 <__d2b+0x52>
 8004846:	a801      	add	r0, sp, #4
 8004848:	f7ff fd5a 	bl	8004300 <__lo0bits>
 800484c:	9b01      	ldr	r3, [sp, #4]
 800484e:	6163      	str	r3, [r4, #20]
 8004850:	2201      	movs	r2, #1
 8004852:	6122      	str	r2, [r4, #16]
 8004854:	3020      	adds	r0, #32
 8004856:	e7e3      	b.n	8004820 <__d2b+0x60>
 8004858:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800485c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004860:	f8c9 0000 	str.w	r0, [r9]
 8004864:	6918      	ldr	r0, [r3, #16]
 8004866:	f7ff fd2b 	bl	80042c0 <__hi0bits>
 800486a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800486e:	e7df      	b.n	8004830 <__d2b+0x70>
 8004870:	080066bf 	.word	0x080066bf
 8004874:	08006663 	.word	0x08006663

08004878 <_mprec_log10>:
 8004878:	2817      	cmp	r0, #23
 800487a:	b5d0      	push	{r4, r6, r7, lr}
 800487c:	4604      	mov	r4, r0
 800487e:	dc07      	bgt.n	8004890 <_mprec_log10+0x18>
 8004880:	4809      	ldr	r0, [pc, #36]	; (80048a8 <_mprec_log10+0x30>)
 8004882:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8004886:	e9d4 0100 	ldrd	r0, r1, [r4]
 800488a:	ec41 0b10 	vmov	d0, r0, r1
 800488e:	bdd0      	pop	{r4, r6, r7, pc}
 8004890:	4906      	ldr	r1, [pc, #24]	; (80048ac <_mprec_log10+0x34>)
 8004892:	4f07      	ldr	r7, [pc, #28]	; (80048b0 <_mprec_log10+0x38>)
 8004894:	2000      	movs	r0, #0
 8004896:	2600      	movs	r6, #0
 8004898:	4632      	mov	r2, r6
 800489a:	463b      	mov	r3, r7
 800489c:	f7fb feac 	bl	80005f8 <__aeabi_dmul>
 80048a0:	3c01      	subs	r4, #1
 80048a2:	d1f9      	bne.n	8004898 <_mprec_log10+0x20>
 80048a4:	e7f1      	b.n	800488a <_mprec_log10+0x12>
 80048a6:	bf00      	nop
 80048a8:	080066f8 	.word	0x080066f8
 80048ac:	3ff00000 	.word	0x3ff00000
 80048b0:	40240000 	.word	0x40240000

080048b4 <_calloc_r>:
 80048b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048b6:	fba1 2402 	umull	r2, r4, r1, r2
 80048ba:	b94c      	cbnz	r4, 80048d0 <_calloc_r+0x1c>
 80048bc:	4611      	mov	r1, r2
 80048be:	9201      	str	r2, [sp, #4]
 80048c0:	f000 f82e 	bl	8004920 <_malloc_r>
 80048c4:	9a01      	ldr	r2, [sp, #4]
 80048c6:	4605      	mov	r5, r0
 80048c8:	b930      	cbnz	r0, 80048d8 <_calloc_r+0x24>
 80048ca:	4628      	mov	r0, r5
 80048cc:	b003      	add	sp, #12
 80048ce:	bd30      	pop	{r4, r5, pc}
 80048d0:	220c      	movs	r2, #12
 80048d2:	6002      	str	r2, [r0, #0]
 80048d4:	2500      	movs	r5, #0
 80048d6:	e7f8      	b.n	80048ca <_calloc_r+0x16>
 80048d8:	4621      	mov	r1, r4
 80048da:	f7ff fb09 	bl	8003ef0 <memset>
 80048de:	e7f4      	b.n	80048ca <_calloc_r+0x16>

080048e0 <sbrk_aligned>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4e0e      	ldr	r6, [pc, #56]	; (800491c <sbrk_aligned+0x3c>)
 80048e4:	460c      	mov	r4, r1
 80048e6:	6831      	ldr	r1, [r6, #0]
 80048e8:	4605      	mov	r5, r0
 80048ea:	b911      	cbnz	r1, 80048f2 <sbrk_aligned+0x12>
 80048ec:	f000 f88c 	bl	8004a08 <_sbrk_r>
 80048f0:	6030      	str	r0, [r6, #0]
 80048f2:	4621      	mov	r1, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	f000 f887 	bl	8004a08 <_sbrk_r>
 80048fa:	1c43      	adds	r3, r0, #1
 80048fc:	d00a      	beq.n	8004914 <sbrk_aligned+0x34>
 80048fe:	1cc4      	adds	r4, r0, #3
 8004900:	f024 0403 	bic.w	r4, r4, #3
 8004904:	42a0      	cmp	r0, r4
 8004906:	d007      	beq.n	8004918 <sbrk_aligned+0x38>
 8004908:	1a21      	subs	r1, r4, r0
 800490a:	4628      	mov	r0, r5
 800490c:	f000 f87c 	bl	8004a08 <_sbrk_r>
 8004910:	3001      	adds	r0, #1
 8004912:	d101      	bne.n	8004918 <sbrk_aligned+0x38>
 8004914:	f04f 34ff 	mov.w	r4, #4294967295
 8004918:	4620      	mov	r0, r4
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	20000130 	.word	0x20000130

08004920 <_malloc_r>:
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	1ccd      	adds	r5, r1, #3
 8004926:	f025 0503 	bic.w	r5, r5, #3
 800492a:	3508      	adds	r5, #8
 800492c:	2d0c      	cmp	r5, #12
 800492e:	bf38      	it	cc
 8004930:	250c      	movcc	r5, #12
 8004932:	2d00      	cmp	r5, #0
 8004934:	4607      	mov	r7, r0
 8004936:	db01      	blt.n	800493c <_malloc_r+0x1c>
 8004938:	42a9      	cmp	r1, r5
 800493a:	d905      	bls.n	8004948 <_malloc_r+0x28>
 800493c:	230c      	movs	r3, #12
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	2600      	movs	r6, #0
 8004942:	4630      	mov	r0, r6
 8004944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004948:	4e2e      	ldr	r6, [pc, #184]	; (8004a04 <_malloc_r+0xe4>)
 800494a:	f000 ff37 	bl	80057bc <__malloc_lock>
 800494e:	6833      	ldr	r3, [r6, #0]
 8004950:	461c      	mov	r4, r3
 8004952:	bb34      	cbnz	r4, 80049a2 <_malloc_r+0x82>
 8004954:	4629      	mov	r1, r5
 8004956:	4638      	mov	r0, r7
 8004958:	f7ff ffc2 	bl	80048e0 <sbrk_aligned>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	4604      	mov	r4, r0
 8004960:	d14d      	bne.n	80049fe <_malloc_r+0xde>
 8004962:	6834      	ldr	r4, [r6, #0]
 8004964:	4626      	mov	r6, r4
 8004966:	2e00      	cmp	r6, #0
 8004968:	d140      	bne.n	80049ec <_malloc_r+0xcc>
 800496a:	6823      	ldr	r3, [r4, #0]
 800496c:	4631      	mov	r1, r6
 800496e:	4638      	mov	r0, r7
 8004970:	eb04 0803 	add.w	r8, r4, r3
 8004974:	f000 f848 	bl	8004a08 <_sbrk_r>
 8004978:	4580      	cmp	r8, r0
 800497a:	d13a      	bne.n	80049f2 <_malloc_r+0xd2>
 800497c:	6821      	ldr	r1, [r4, #0]
 800497e:	3503      	adds	r5, #3
 8004980:	1a6d      	subs	r5, r5, r1
 8004982:	f025 0503 	bic.w	r5, r5, #3
 8004986:	3508      	adds	r5, #8
 8004988:	2d0c      	cmp	r5, #12
 800498a:	bf38      	it	cc
 800498c:	250c      	movcc	r5, #12
 800498e:	4629      	mov	r1, r5
 8004990:	4638      	mov	r0, r7
 8004992:	f7ff ffa5 	bl	80048e0 <sbrk_aligned>
 8004996:	3001      	adds	r0, #1
 8004998:	d02b      	beq.n	80049f2 <_malloc_r+0xd2>
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	442b      	add	r3, r5
 800499e:	6023      	str	r3, [r4, #0]
 80049a0:	e00e      	b.n	80049c0 <_malloc_r+0xa0>
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	1b52      	subs	r2, r2, r5
 80049a6:	d41e      	bmi.n	80049e6 <_malloc_r+0xc6>
 80049a8:	2a0b      	cmp	r2, #11
 80049aa:	d916      	bls.n	80049da <_malloc_r+0xba>
 80049ac:	1961      	adds	r1, r4, r5
 80049ae:	42a3      	cmp	r3, r4
 80049b0:	6025      	str	r5, [r4, #0]
 80049b2:	bf18      	it	ne
 80049b4:	6059      	strne	r1, [r3, #4]
 80049b6:	6863      	ldr	r3, [r4, #4]
 80049b8:	bf08      	it	eq
 80049ba:	6031      	streq	r1, [r6, #0]
 80049bc:	5162      	str	r2, [r4, r5]
 80049be:	604b      	str	r3, [r1, #4]
 80049c0:	4638      	mov	r0, r7
 80049c2:	f104 060b 	add.w	r6, r4, #11
 80049c6:	f000 feff 	bl	80057c8 <__malloc_unlock>
 80049ca:	f026 0607 	bic.w	r6, r6, #7
 80049ce:	1d23      	adds	r3, r4, #4
 80049d0:	1af2      	subs	r2, r6, r3
 80049d2:	d0b6      	beq.n	8004942 <_malloc_r+0x22>
 80049d4:	1b9b      	subs	r3, r3, r6
 80049d6:	50a3      	str	r3, [r4, r2]
 80049d8:	e7b3      	b.n	8004942 <_malloc_r+0x22>
 80049da:	6862      	ldr	r2, [r4, #4]
 80049dc:	42a3      	cmp	r3, r4
 80049de:	bf0c      	ite	eq
 80049e0:	6032      	streq	r2, [r6, #0]
 80049e2:	605a      	strne	r2, [r3, #4]
 80049e4:	e7ec      	b.n	80049c0 <_malloc_r+0xa0>
 80049e6:	4623      	mov	r3, r4
 80049e8:	6864      	ldr	r4, [r4, #4]
 80049ea:	e7b2      	b.n	8004952 <_malloc_r+0x32>
 80049ec:	4634      	mov	r4, r6
 80049ee:	6876      	ldr	r6, [r6, #4]
 80049f0:	e7b9      	b.n	8004966 <_malloc_r+0x46>
 80049f2:	230c      	movs	r3, #12
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4638      	mov	r0, r7
 80049f8:	f000 fee6 	bl	80057c8 <__malloc_unlock>
 80049fc:	e7a1      	b.n	8004942 <_malloc_r+0x22>
 80049fe:	6025      	str	r5, [r4, #0]
 8004a00:	e7de      	b.n	80049c0 <_malloc_r+0xa0>
 8004a02:	bf00      	nop
 8004a04:	2000012c 	.word	0x2000012c

08004a08 <_sbrk_r>:
 8004a08:	b538      	push	{r3, r4, r5, lr}
 8004a0a:	4d06      	ldr	r5, [pc, #24]	; (8004a24 <_sbrk_r+0x1c>)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4604      	mov	r4, r0
 8004a10:	4608      	mov	r0, r1
 8004a12:	602b      	str	r3, [r5, #0]
 8004a14:	f7fc fd74 	bl	8001500 <_sbrk>
 8004a18:	1c43      	adds	r3, r0, #1
 8004a1a:	d102      	bne.n	8004a22 <_sbrk_r+0x1a>
 8004a1c:	682b      	ldr	r3, [r5, #0]
 8004a1e:	b103      	cbz	r3, 8004a22 <_sbrk_r+0x1a>
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	bd38      	pop	{r3, r4, r5, pc}
 8004a24:	20000134 	.word	0x20000134

08004a28 <strcpy>:
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a2e:	f803 2b01 	strb.w	r2, [r3], #1
 8004a32:	2a00      	cmp	r2, #0
 8004a34:	d1f9      	bne.n	8004a2a <strcpy+0x2>
 8004a36:	4770      	bx	lr

08004a38 <__assert_func>:
 8004a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <__assert_func+0x2c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4605      	mov	r5, r0
 8004a44:	68d8      	ldr	r0, [r3, #12]
 8004a46:	b14c      	cbz	r4, 8004a5c <__assert_func+0x24>
 8004a48:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <__assert_func+0x30>)
 8004a4a:	9100      	str	r1, [sp, #0]
 8004a4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a50:	4906      	ldr	r1, [pc, #24]	; (8004a6c <__assert_func+0x34>)
 8004a52:	462b      	mov	r3, r5
 8004a54:	f000 fe8a 	bl	800576c <fiprintf>
 8004a58:	f001 fab6 	bl	8005fc8 <abort>
 8004a5c:	4b04      	ldr	r3, [pc, #16]	; (8004a70 <__assert_func+0x38>)
 8004a5e:	461c      	mov	r4, r3
 8004a60:	e7f3      	b.n	8004a4a <__assert_func+0x12>
 8004a62:	bf00      	nop
 8004a64:	2000000c 	.word	0x2000000c
 8004a68:	080067cc 	.word	0x080067cc
 8004a6c:	080067d9 	.word	0x080067d9
 8004a70:	08006807 	.word	0x08006807

08004a74 <quorem>:
 8004a74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a78:	6903      	ldr	r3, [r0, #16]
 8004a7a:	690c      	ldr	r4, [r1, #16]
 8004a7c:	42a3      	cmp	r3, r4
 8004a7e:	4607      	mov	r7, r0
 8004a80:	f2c0 8081 	blt.w	8004b86 <quorem+0x112>
 8004a84:	3c01      	subs	r4, #1
 8004a86:	f101 0814 	add.w	r8, r1, #20
 8004a8a:	f100 0514 	add.w	r5, r0, #20
 8004a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004aa4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004aa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8004aac:	d331      	bcc.n	8004b12 <quorem+0x9e>
 8004aae:	f04f 0e00 	mov.w	lr, #0
 8004ab2:	4640      	mov	r0, r8
 8004ab4:	46ac      	mov	ip, r5
 8004ab6:	46f2      	mov	sl, lr
 8004ab8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004abc:	b293      	uxth	r3, r2
 8004abe:	fb06 e303 	mla	r3, r6, r3, lr
 8004ac2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	ebaa 0303 	sub.w	r3, sl, r3
 8004acc:	f8dc a000 	ldr.w	sl, [ip]
 8004ad0:	0c12      	lsrs	r2, r2, #16
 8004ad2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ad6:	fb06 e202 	mla	r2, r6, r2, lr
 8004ada:	9300      	str	r3, [sp, #0]
 8004adc:	9b00      	ldr	r3, [sp, #0]
 8004ade:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004aec:	f8bd 3000 	ldrh.w	r3, [sp]
 8004af0:	4581      	cmp	r9, r0
 8004af2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004af6:	f84c 3b04 	str.w	r3, [ip], #4
 8004afa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004afe:	d2db      	bcs.n	8004ab8 <quorem+0x44>
 8004b00:	f855 300b 	ldr.w	r3, [r5, fp]
 8004b04:	b92b      	cbnz	r3, 8004b12 <quorem+0x9e>
 8004b06:	9b01      	ldr	r3, [sp, #4]
 8004b08:	3b04      	subs	r3, #4
 8004b0a:	429d      	cmp	r5, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	d32e      	bcc.n	8004b6e <quorem+0xfa>
 8004b10:	613c      	str	r4, [r7, #16]
 8004b12:	4638      	mov	r0, r7
 8004b14:	f7ff fdae 	bl	8004674 <__mcmp>
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	db24      	blt.n	8004b66 <quorem+0xf2>
 8004b1c:	3601      	adds	r6, #1
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f04f 0c00 	mov.w	ip, #0
 8004b24:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b28:	f8d0 e000 	ldr.w	lr, [r0]
 8004b2c:	b293      	uxth	r3, r2
 8004b2e:	ebac 0303 	sub.w	r3, ip, r3
 8004b32:	0c12      	lsrs	r2, r2, #16
 8004b34:	fa13 f38e 	uxtah	r3, r3, lr
 8004b38:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004b3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b46:	45c1      	cmp	r9, r8
 8004b48:	f840 3b04 	str.w	r3, [r0], #4
 8004b4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004b50:	d2e8      	bcs.n	8004b24 <quorem+0xb0>
 8004b52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5a:	b922      	cbnz	r2, 8004b66 <quorem+0xf2>
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	429d      	cmp	r5, r3
 8004b60:	461a      	mov	r2, r3
 8004b62:	d30a      	bcc.n	8004b7a <quorem+0x106>
 8004b64:	613c      	str	r4, [r7, #16]
 8004b66:	4630      	mov	r0, r6
 8004b68:	b003      	add	sp, #12
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	3b04      	subs	r3, #4
 8004b72:	2a00      	cmp	r2, #0
 8004b74:	d1cc      	bne.n	8004b10 <quorem+0x9c>
 8004b76:	3c01      	subs	r4, #1
 8004b78:	e7c7      	b.n	8004b0a <quorem+0x96>
 8004b7a:	6812      	ldr	r2, [r2, #0]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	2a00      	cmp	r2, #0
 8004b80:	d1f0      	bne.n	8004b64 <quorem+0xf0>
 8004b82:	3c01      	subs	r4, #1
 8004b84:	e7eb      	b.n	8004b5e <quorem+0xea>
 8004b86:	2000      	movs	r0, #0
 8004b88:	e7ee      	b.n	8004b68 <quorem+0xf4>
 8004b8a:	0000      	movs	r0, r0
 8004b8c:	0000      	movs	r0, r0
	...

08004b90 <_dtoa_r>:
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	ed2d 8b04 	vpush	{d8-d9}
 8004b98:	ec57 6b10 	vmov	r6, r7, d0
 8004b9c:	b093      	sub	sp, #76	; 0x4c
 8004b9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004ba0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ba4:	9106      	str	r1, [sp, #24]
 8004ba6:	ee10 aa10 	vmov	sl, s0
 8004baa:	4604      	mov	r4, r0
 8004bac:	9209      	str	r2, [sp, #36]	; 0x24
 8004bae:	930c      	str	r3, [sp, #48]	; 0x30
 8004bb0:	46bb      	mov	fp, r7
 8004bb2:	b975      	cbnz	r5, 8004bd2 <_dtoa_r+0x42>
 8004bb4:	2010      	movs	r0, #16
 8004bb6:	f000 fdeb 	bl	8005790 <malloc>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	6260      	str	r0, [r4, #36]	; 0x24
 8004bbe:	b920      	cbnz	r0, 8004bca <_dtoa_r+0x3a>
 8004bc0:	4ba7      	ldr	r3, [pc, #668]	; (8004e60 <_dtoa_r+0x2d0>)
 8004bc2:	21ea      	movs	r1, #234	; 0xea
 8004bc4:	48a7      	ldr	r0, [pc, #668]	; (8004e64 <_dtoa_r+0x2d4>)
 8004bc6:	f7ff ff37 	bl	8004a38 <__assert_func>
 8004bca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004bce:	6005      	str	r5, [r0, #0]
 8004bd0:	60c5      	str	r5, [r0, #12]
 8004bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	b151      	cbz	r1, 8004bee <_dtoa_r+0x5e>
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	604a      	str	r2, [r1, #4]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	4093      	lsls	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
 8004be2:	4620      	mov	r0, r4
 8004be4:	f7ff fb04 	bl	80041f0 <_Bfree>
 8004be8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bea:	2200      	movs	r2, #0
 8004bec:	601a      	str	r2, [r3, #0]
 8004bee:	1e3b      	subs	r3, r7, #0
 8004bf0:	bfaa      	itet	ge
 8004bf2:	2300      	movge	r3, #0
 8004bf4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004bf8:	f8c8 3000 	strge.w	r3, [r8]
 8004bfc:	4b9a      	ldr	r3, [pc, #616]	; (8004e68 <_dtoa_r+0x2d8>)
 8004bfe:	bfbc      	itt	lt
 8004c00:	2201      	movlt	r2, #1
 8004c02:	f8c8 2000 	strlt.w	r2, [r8]
 8004c06:	ea33 030b 	bics.w	r3, r3, fp
 8004c0a:	d11b      	bne.n	8004c44 <_dtoa_r+0xb4>
 8004c0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004c18:	4333      	orrs	r3, r6
 8004c1a:	f000 8592 	beq.w	8005742 <_dtoa_r+0xbb2>
 8004c1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c20:	b963      	cbnz	r3, 8004c3c <_dtoa_r+0xac>
 8004c22:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <_dtoa_r+0x2dc>)
 8004c24:	e022      	b.n	8004c6c <_dtoa_r+0xdc>
 8004c26:	4b92      	ldr	r3, [pc, #584]	; (8004e70 <_dtoa_r+0x2e0>)
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	3308      	adds	r3, #8
 8004c2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	9801      	ldr	r0, [sp, #4]
 8004c32:	b013      	add	sp, #76	; 0x4c
 8004c34:	ecbd 8b04 	vpop	{d8-d9}
 8004c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3c:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <_dtoa_r+0x2dc>)
 8004c3e:	9301      	str	r3, [sp, #4]
 8004c40:	3303      	adds	r3, #3
 8004c42:	e7f3      	b.n	8004c2c <_dtoa_r+0x9c>
 8004c44:	2200      	movs	r2, #0
 8004c46:	2300      	movs	r3, #0
 8004c48:	4650      	mov	r0, sl
 8004c4a:	4659      	mov	r1, fp
 8004c4c:	f7fb ff3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c50:	ec4b ab19 	vmov	d9, sl, fp
 8004c54:	4680      	mov	r8, r0
 8004c56:	b158      	cbz	r0, 8004c70 <_dtoa_r+0xe0>
 8004c58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 856b 	beq.w	800573c <_dtoa_r+0xbac>
 8004c66:	4883      	ldr	r0, [pc, #524]	; (8004e74 <_dtoa_r+0x2e4>)
 8004c68:	6018      	str	r0, [r3, #0]
 8004c6a:	1e43      	subs	r3, r0, #1
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	e7df      	b.n	8004c30 <_dtoa_r+0xa0>
 8004c70:	ec4b ab10 	vmov	d0, sl, fp
 8004c74:	aa10      	add	r2, sp, #64	; 0x40
 8004c76:	a911      	add	r1, sp, #68	; 0x44
 8004c78:	4620      	mov	r0, r4
 8004c7a:	f7ff fda1 	bl	80047c0 <__d2b>
 8004c7e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004c82:	ee08 0a10 	vmov	s16, r0
 8004c86:	2d00      	cmp	r5, #0
 8004c88:	f000 8084 	beq.w	8004d94 <_dtoa_r+0x204>
 8004c8c:	ee19 3a90 	vmov	r3, s19
 8004c90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c94:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c98:	4656      	mov	r6, sl
 8004c9a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c9e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004ca2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004ca6:	4b74      	ldr	r3, [pc, #464]	; (8004e78 <_dtoa_r+0x2e8>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb faeb 	bl	8000288 <__aeabi_dsub>
 8004cb2:	a365      	add	r3, pc, #404	; (adr r3, 8004e48 <_dtoa_r+0x2b8>)
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f7fb fc9e 	bl	80005f8 <__aeabi_dmul>
 8004cbc:	a364      	add	r3, pc, #400	; (adr r3, 8004e50 <_dtoa_r+0x2c0>)
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fae3 	bl	800028c <__adddf3>
 8004cc6:	4606      	mov	r6, r0
 8004cc8:	4628      	mov	r0, r5
 8004cca:	460f      	mov	r7, r1
 8004ccc:	f7fb fc2a 	bl	8000524 <__aeabi_i2d>
 8004cd0:	a361      	add	r3, pc, #388	; (adr r3, 8004e58 <_dtoa_r+0x2c8>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	f7fb fc8f 	bl	80005f8 <__aeabi_dmul>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4630      	mov	r0, r6
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	f7fb fad3 	bl	800028c <__adddf3>
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	460f      	mov	r7, r1
 8004cea:	f7fb ff1f 	bl	8000b2c <__aeabi_d2iz>
 8004cee:	2200      	movs	r2, #0
 8004cf0:	9000      	str	r0, [sp, #0]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	4639      	mov	r1, r7
 8004cf8:	f7fb fef0 	bl	8000adc <__aeabi_dcmplt>
 8004cfc:	b150      	cbz	r0, 8004d14 <_dtoa_r+0x184>
 8004cfe:	9800      	ldr	r0, [sp, #0]
 8004d00:	f7fb fc10 	bl	8000524 <__aeabi_i2d>
 8004d04:	4632      	mov	r2, r6
 8004d06:	463b      	mov	r3, r7
 8004d08:	f7fb fede 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d0c:	b910      	cbnz	r0, 8004d14 <_dtoa_r+0x184>
 8004d0e:	9b00      	ldr	r3, [sp, #0]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	9b00      	ldr	r3, [sp, #0]
 8004d16:	2b16      	cmp	r3, #22
 8004d18:	d85a      	bhi.n	8004dd0 <_dtoa_r+0x240>
 8004d1a:	9a00      	ldr	r2, [sp, #0]
 8004d1c:	4b57      	ldr	r3, [pc, #348]	; (8004e7c <_dtoa_r+0x2ec>)
 8004d1e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	ec51 0b19 	vmov	r0, r1, d9
 8004d2a:	f7fb fed7 	bl	8000adc <__aeabi_dcmplt>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d050      	beq.n	8004dd4 <_dtoa_r+0x244>
 8004d32:	9b00      	ldr	r3, [sp, #0]
 8004d34:	3b01      	subs	r3, #1
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d3c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d3e:	1b5d      	subs	r5, r3, r5
 8004d40:	1e6b      	subs	r3, r5, #1
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	bf45      	ittet	mi
 8004d46:	f1c5 0301 	rsbmi	r3, r5, #1
 8004d4a:	9304      	strmi	r3, [sp, #16]
 8004d4c:	2300      	movpl	r3, #0
 8004d4e:	2300      	movmi	r3, #0
 8004d50:	bf4c      	ite	mi
 8004d52:	9305      	strmi	r3, [sp, #20]
 8004d54:	9304      	strpl	r3, [sp, #16]
 8004d56:	9b00      	ldr	r3, [sp, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	db3d      	blt.n	8004dd8 <_dtoa_r+0x248>
 8004d5c:	9b05      	ldr	r3, [sp, #20]
 8004d5e:	9a00      	ldr	r2, [sp, #0]
 8004d60:	920a      	str	r2, [sp, #40]	; 0x28
 8004d62:	4413      	add	r3, r2
 8004d64:	9305      	str	r3, [sp, #20]
 8004d66:	2300      	movs	r3, #0
 8004d68:	9307      	str	r3, [sp, #28]
 8004d6a:	9b06      	ldr	r3, [sp, #24]
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	f200 8089 	bhi.w	8004e84 <_dtoa_r+0x2f4>
 8004d72:	2b05      	cmp	r3, #5
 8004d74:	bfc4      	itt	gt
 8004d76:	3b04      	subgt	r3, #4
 8004d78:	9306      	strgt	r3, [sp, #24]
 8004d7a:	9b06      	ldr	r3, [sp, #24]
 8004d7c:	f1a3 0302 	sub.w	r3, r3, #2
 8004d80:	bfcc      	ite	gt
 8004d82:	2500      	movgt	r5, #0
 8004d84:	2501      	movle	r5, #1
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	f200 8087 	bhi.w	8004e9a <_dtoa_r+0x30a>
 8004d8c:	e8df f003 	tbb	[pc, r3]
 8004d90:	59383a2d 	.word	0x59383a2d
 8004d94:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004d98:	441d      	add	r5, r3
 8004d9a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	bfc1      	itttt	gt
 8004da2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004da6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004daa:	fa0b f303 	lslgt.w	r3, fp, r3
 8004dae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004db2:	bfda      	itte	le
 8004db4:	f1c3 0320 	rsble	r3, r3, #32
 8004db8:	fa06 f003 	lslle.w	r0, r6, r3
 8004dbc:	4318      	orrgt	r0, r3
 8004dbe:	f7fb fba1 	bl	8000504 <__aeabi_ui2d>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004dca:	3d01      	subs	r5, #1
 8004dcc:	930e      	str	r3, [sp, #56]	; 0x38
 8004dce:	e76a      	b.n	8004ca6 <_dtoa_r+0x116>
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e7b2      	b.n	8004d3a <_dtoa_r+0x1aa>
 8004dd4:	900b      	str	r0, [sp, #44]	; 0x2c
 8004dd6:	e7b1      	b.n	8004d3c <_dtoa_r+0x1ac>
 8004dd8:	9b04      	ldr	r3, [sp, #16]
 8004dda:	9a00      	ldr	r2, [sp, #0]
 8004ddc:	1a9b      	subs	r3, r3, r2
 8004dde:	9304      	str	r3, [sp, #16]
 8004de0:	4253      	negs	r3, r2
 8004de2:	9307      	str	r3, [sp, #28]
 8004de4:	2300      	movs	r3, #0
 8004de6:	930a      	str	r3, [sp, #40]	; 0x28
 8004de8:	e7bf      	b.n	8004d6a <_dtoa_r+0x1da>
 8004dea:	2300      	movs	r3, #0
 8004dec:	9308      	str	r3, [sp, #32]
 8004dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	dc55      	bgt.n	8004ea0 <_dtoa_r+0x310>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8004dfe:	e00c      	b.n	8004e1a <_dtoa_r+0x28a>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e7f3      	b.n	8004dec <_dtoa_r+0x25c>
 8004e04:	2300      	movs	r3, #0
 8004e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e08:	9308      	str	r3, [sp, #32]
 8004e0a:	9b00      	ldr	r3, [sp, #0]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	9302      	str	r3, [sp, #8]
 8004e10:	3301      	adds	r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	9303      	str	r3, [sp, #12]
 8004e16:	bfb8      	it	lt
 8004e18:	2301      	movlt	r3, #1
 8004e1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	6042      	str	r2, [r0, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	f102 0614 	add.w	r6, r2, #20
 8004e26:	429e      	cmp	r6, r3
 8004e28:	6841      	ldr	r1, [r0, #4]
 8004e2a:	d93d      	bls.n	8004ea8 <_dtoa_r+0x318>
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f7ff f99f 	bl	8004170 <_Balloc>
 8004e32:	9001      	str	r0, [sp, #4]
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d13b      	bne.n	8004eb0 <_dtoa_r+0x320>
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <_dtoa_r+0x2f0>)
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004e40:	e6c0      	b.n	8004bc4 <_dtoa_r+0x34>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e7df      	b.n	8004e06 <_dtoa_r+0x276>
 8004e46:	bf00      	nop
 8004e48:	636f4361 	.word	0x636f4361
 8004e4c:	3fd287a7 	.word	0x3fd287a7
 8004e50:	8b60c8b3 	.word	0x8b60c8b3
 8004e54:	3fc68a28 	.word	0x3fc68a28
 8004e58:	509f79fb 	.word	0x509f79fb
 8004e5c:	3fd34413 	.word	0x3fd34413
 8004e60:	0800664c 	.word	0x0800664c
 8004e64:	08006817 	.word	0x08006817
 8004e68:	7ff00000 	.word	0x7ff00000
 8004e6c:	08006811 	.word	0x08006811
 8004e70:	08006808 	.word	0x08006808
 8004e74:	08006816 	.word	0x08006816
 8004e78:	3ff80000 	.word	0x3ff80000
 8004e7c:	080066f8 	.word	0x080066f8
 8004e80:	080066bf 	.word	0x080066bf
 8004e84:	2501      	movs	r5, #1
 8004e86:	2300      	movs	r3, #0
 8004e88:	9306      	str	r3, [sp, #24]
 8004e8a:	9508      	str	r5, [sp, #32]
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004e94:	2200      	movs	r2, #0
 8004e96:	2312      	movs	r3, #18
 8004e98:	e7b0      	b.n	8004dfc <_dtoa_r+0x26c>
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	9308      	str	r3, [sp, #32]
 8004e9e:	e7f5      	b.n	8004e8c <_dtoa_r+0x2fc>
 8004ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ea2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004ea6:	e7b8      	b.n	8004e1a <_dtoa_r+0x28a>
 8004ea8:	3101      	adds	r1, #1
 8004eaa:	6041      	str	r1, [r0, #4]
 8004eac:	0052      	lsls	r2, r2, #1
 8004eae:	e7b8      	b.n	8004e22 <_dtoa_r+0x292>
 8004eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb2:	9a01      	ldr	r2, [sp, #4]
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	9b03      	ldr	r3, [sp, #12]
 8004eb8:	2b0e      	cmp	r3, #14
 8004eba:	f200 809d 	bhi.w	8004ff8 <_dtoa_r+0x468>
 8004ebe:	2d00      	cmp	r5, #0
 8004ec0:	f000 809a 	beq.w	8004ff8 <_dtoa_r+0x468>
 8004ec4:	9b00      	ldr	r3, [sp, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	dd32      	ble.n	8004f30 <_dtoa_r+0x3a0>
 8004eca:	4ab7      	ldr	r2, [pc, #732]	; (80051a8 <_dtoa_r+0x618>)
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ed4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ed8:	9b00      	ldr	r3, [sp, #0]
 8004eda:	05d8      	lsls	r0, r3, #23
 8004edc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004ee0:	d516      	bpl.n	8004f10 <_dtoa_r+0x380>
 8004ee2:	4bb2      	ldr	r3, [pc, #712]	; (80051ac <_dtoa_r+0x61c>)
 8004ee4:	ec51 0b19 	vmov	r0, r1, d9
 8004ee8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eec:	f7fb fcae 	bl	800084c <__aeabi_ddiv>
 8004ef0:	f007 070f 	and.w	r7, r7, #15
 8004ef4:	4682      	mov	sl, r0
 8004ef6:	468b      	mov	fp, r1
 8004ef8:	2503      	movs	r5, #3
 8004efa:	4eac      	ldr	r6, [pc, #688]	; (80051ac <_dtoa_r+0x61c>)
 8004efc:	b957      	cbnz	r7, 8004f14 <_dtoa_r+0x384>
 8004efe:	4642      	mov	r2, r8
 8004f00:	464b      	mov	r3, r9
 8004f02:	4650      	mov	r0, sl
 8004f04:	4659      	mov	r1, fp
 8004f06:	f7fb fca1 	bl	800084c <__aeabi_ddiv>
 8004f0a:	4682      	mov	sl, r0
 8004f0c:	468b      	mov	fp, r1
 8004f0e:	e028      	b.n	8004f62 <_dtoa_r+0x3d2>
 8004f10:	2502      	movs	r5, #2
 8004f12:	e7f2      	b.n	8004efa <_dtoa_r+0x36a>
 8004f14:	07f9      	lsls	r1, r7, #31
 8004f16:	d508      	bpl.n	8004f2a <_dtoa_r+0x39a>
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f20:	f7fb fb6a 	bl	80005f8 <__aeabi_dmul>
 8004f24:	3501      	adds	r5, #1
 8004f26:	4680      	mov	r8, r0
 8004f28:	4689      	mov	r9, r1
 8004f2a:	107f      	asrs	r7, r7, #1
 8004f2c:	3608      	adds	r6, #8
 8004f2e:	e7e5      	b.n	8004efc <_dtoa_r+0x36c>
 8004f30:	f000 809b 	beq.w	800506a <_dtoa_r+0x4da>
 8004f34:	9b00      	ldr	r3, [sp, #0]
 8004f36:	4f9d      	ldr	r7, [pc, #628]	; (80051ac <_dtoa_r+0x61c>)
 8004f38:	425e      	negs	r6, r3
 8004f3a:	4b9b      	ldr	r3, [pc, #620]	; (80051a8 <_dtoa_r+0x618>)
 8004f3c:	f006 020f 	and.w	r2, r6, #15
 8004f40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	ec51 0b19 	vmov	r0, r1, d9
 8004f4c:	f7fb fb54 	bl	80005f8 <__aeabi_dmul>
 8004f50:	1136      	asrs	r6, r6, #4
 8004f52:	4682      	mov	sl, r0
 8004f54:	468b      	mov	fp, r1
 8004f56:	2300      	movs	r3, #0
 8004f58:	2502      	movs	r5, #2
 8004f5a:	2e00      	cmp	r6, #0
 8004f5c:	d17a      	bne.n	8005054 <_dtoa_r+0x4c4>
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1d3      	bne.n	8004f0a <_dtoa_r+0x37a>
 8004f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8082 	beq.w	800506e <_dtoa_r+0x4de>
 8004f6a:	4b91      	ldr	r3, [pc, #580]	; (80051b0 <_dtoa_r+0x620>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	4650      	mov	r0, sl
 8004f70:	4659      	mov	r1, fp
 8004f72:	f7fb fdb3 	bl	8000adc <__aeabi_dcmplt>
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d079      	beq.n	800506e <_dtoa_r+0x4de>
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d076      	beq.n	800506e <_dtoa_r+0x4de>
 8004f80:	9b02      	ldr	r3, [sp, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	dd36      	ble.n	8004ff4 <_dtoa_r+0x464>
 8004f86:	9b00      	ldr	r3, [sp, #0]
 8004f88:	4650      	mov	r0, sl
 8004f8a:	4659      	mov	r1, fp
 8004f8c:	1e5f      	subs	r7, r3, #1
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4b88      	ldr	r3, [pc, #544]	; (80051b4 <_dtoa_r+0x624>)
 8004f92:	f7fb fb31 	bl	80005f8 <__aeabi_dmul>
 8004f96:	9e02      	ldr	r6, [sp, #8]
 8004f98:	4682      	mov	sl, r0
 8004f9a:	468b      	mov	fp, r1
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	4628      	mov	r0, r5
 8004fa0:	f7fb fac0 	bl	8000524 <__aeabi_i2d>
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	465b      	mov	r3, fp
 8004fa8:	f7fb fb26 	bl	80005f8 <__aeabi_dmul>
 8004fac:	4b82      	ldr	r3, [pc, #520]	; (80051b8 <_dtoa_r+0x628>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f7fb f96c 	bl	800028c <__adddf3>
 8004fb4:	46d0      	mov	r8, sl
 8004fb6:	46d9      	mov	r9, fp
 8004fb8:	4682      	mov	sl, r0
 8004fba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004fbe:	2e00      	cmp	r6, #0
 8004fc0:	d158      	bne.n	8005074 <_dtoa_r+0x4e4>
 8004fc2:	4b7e      	ldr	r3, [pc, #504]	; (80051bc <_dtoa_r+0x62c>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4649      	mov	r1, r9
 8004fca:	f7fb f95d 	bl	8000288 <__aeabi_dsub>
 8004fce:	4652      	mov	r2, sl
 8004fd0:	465b      	mov	r3, fp
 8004fd2:	4680      	mov	r8, r0
 8004fd4:	4689      	mov	r9, r1
 8004fd6:	f7fb fd9f 	bl	8000b18 <__aeabi_dcmpgt>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	f040 8295 	bne.w	800550a <_dtoa_r+0x97a>
 8004fe0:	4652      	mov	r2, sl
 8004fe2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	4649      	mov	r1, r9
 8004fea:	f7fb fd77 	bl	8000adc <__aeabi_dcmplt>
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f040 8289 	bne.w	8005506 <_dtoa_r+0x976>
 8004ff4:	ec5b ab19 	vmov	sl, fp, d9
 8004ff8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f2c0 8148 	blt.w	8005290 <_dtoa_r+0x700>
 8005000:	9a00      	ldr	r2, [sp, #0]
 8005002:	2a0e      	cmp	r2, #14
 8005004:	f300 8144 	bgt.w	8005290 <_dtoa_r+0x700>
 8005008:	4b67      	ldr	r3, [pc, #412]	; (80051a8 <_dtoa_r+0x618>)
 800500a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800500e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005014:	2b00      	cmp	r3, #0
 8005016:	f280 80d5 	bge.w	80051c4 <_dtoa_r+0x634>
 800501a:	9b03      	ldr	r3, [sp, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f300 80d1 	bgt.w	80051c4 <_dtoa_r+0x634>
 8005022:	f040 826f 	bne.w	8005504 <_dtoa_r+0x974>
 8005026:	4b65      	ldr	r3, [pc, #404]	; (80051bc <_dtoa_r+0x62c>)
 8005028:	2200      	movs	r2, #0
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	f7fb fae3 	bl	80005f8 <__aeabi_dmul>
 8005032:	4652      	mov	r2, sl
 8005034:	465b      	mov	r3, fp
 8005036:	f7fb fd65 	bl	8000b04 <__aeabi_dcmpge>
 800503a:	9e03      	ldr	r6, [sp, #12]
 800503c:	4637      	mov	r7, r6
 800503e:	2800      	cmp	r0, #0
 8005040:	f040 8245 	bne.w	80054ce <_dtoa_r+0x93e>
 8005044:	9d01      	ldr	r5, [sp, #4]
 8005046:	2331      	movs	r3, #49	; 0x31
 8005048:	f805 3b01 	strb.w	r3, [r5], #1
 800504c:	9b00      	ldr	r3, [sp, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	e240      	b.n	80054d6 <_dtoa_r+0x946>
 8005054:	07f2      	lsls	r2, r6, #31
 8005056:	d505      	bpl.n	8005064 <_dtoa_r+0x4d4>
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	f7fb facc 	bl	80005f8 <__aeabi_dmul>
 8005060:	3501      	adds	r5, #1
 8005062:	2301      	movs	r3, #1
 8005064:	1076      	asrs	r6, r6, #1
 8005066:	3708      	adds	r7, #8
 8005068:	e777      	b.n	8004f5a <_dtoa_r+0x3ca>
 800506a:	2502      	movs	r5, #2
 800506c:	e779      	b.n	8004f62 <_dtoa_r+0x3d2>
 800506e:	9f00      	ldr	r7, [sp, #0]
 8005070:	9e03      	ldr	r6, [sp, #12]
 8005072:	e794      	b.n	8004f9e <_dtoa_r+0x40e>
 8005074:	9901      	ldr	r1, [sp, #4]
 8005076:	4b4c      	ldr	r3, [pc, #304]	; (80051a8 <_dtoa_r+0x618>)
 8005078:	4431      	add	r1, r6
 800507a:	910d      	str	r1, [sp, #52]	; 0x34
 800507c:	9908      	ldr	r1, [sp, #32]
 800507e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005082:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005086:	2900      	cmp	r1, #0
 8005088:	d043      	beq.n	8005112 <_dtoa_r+0x582>
 800508a:	494d      	ldr	r1, [pc, #308]	; (80051c0 <_dtoa_r+0x630>)
 800508c:	2000      	movs	r0, #0
 800508e:	f7fb fbdd 	bl	800084c <__aeabi_ddiv>
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	f7fb f8f7 	bl	8000288 <__aeabi_dsub>
 800509a:	9d01      	ldr	r5, [sp, #4]
 800509c:	4682      	mov	sl, r0
 800509e:	468b      	mov	fp, r1
 80050a0:	4649      	mov	r1, r9
 80050a2:	4640      	mov	r0, r8
 80050a4:	f7fb fd42 	bl	8000b2c <__aeabi_d2iz>
 80050a8:	4606      	mov	r6, r0
 80050aa:	f7fb fa3b 	bl	8000524 <__aeabi_i2d>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4640      	mov	r0, r8
 80050b4:	4649      	mov	r1, r9
 80050b6:	f7fb f8e7 	bl	8000288 <__aeabi_dsub>
 80050ba:	3630      	adds	r6, #48	; 0x30
 80050bc:	f805 6b01 	strb.w	r6, [r5], #1
 80050c0:	4652      	mov	r2, sl
 80050c2:	465b      	mov	r3, fp
 80050c4:	4680      	mov	r8, r0
 80050c6:	4689      	mov	r9, r1
 80050c8:	f7fb fd08 	bl	8000adc <__aeabi_dcmplt>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d163      	bne.n	8005198 <_dtoa_r+0x608>
 80050d0:	4642      	mov	r2, r8
 80050d2:	464b      	mov	r3, r9
 80050d4:	4936      	ldr	r1, [pc, #216]	; (80051b0 <_dtoa_r+0x620>)
 80050d6:	2000      	movs	r0, #0
 80050d8:	f7fb f8d6 	bl	8000288 <__aeabi_dsub>
 80050dc:	4652      	mov	r2, sl
 80050de:	465b      	mov	r3, fp
 80050e0:	f7fb fcfc 	bl	8000adc <__aeabi_dcmplt>
 80050e4:	2800      	cmp	r0, #0
 80050e6:	f040 80b5 	bne.w	8005254 <_dtoa_r+0x6c4>
 80050ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ec:	429d      	cmp	r5, r3
 80050ee:	d081      	beq.n	8004ff4 <_dtoa_r+0x464>
 80050f0:	4b30      	ldr	r3, [pc, #192]	; (80051b4 <_dtoa_r+0x624>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	4650      	mov	r0, sl
 80050f6:	4659      	mov	r1, fp
 80050f8:	f7fb fa7e 	bl	80005f8 <__aeabi_dmul>
 80050fc:	4b2d      	ldr	r3, [pc, #180]	; (80051b4 <_dtoa_r+0x624>)
 80050fe:	4682      	mov	sl, r0
 8005100:	468b      	mov	fp, r1
 8005102:	4640      	mov	r0, r8
 8005104:	4649      	mov	r1, r9
 8005106:	2200      	movs	r2, #0
 8005108:	f7fb fa76 	bl	80005f8 <__aeabi_dmul>
 800510c:	4680      	mov	r8, r0
 800510e:	4689      	mov	r9, r1
 8005110:	e7c6      	b.n	80050a0 <_dtoa_r+0x510>
 8005112:	4650      	mov	r0, sl
 8005114:	4659      	mov	r1, fp
 8005116:	f7fb fa6f 	bl	80005f8 <__aeabi_dmul>
 800511a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800511c:	9d01      	ldr	r5, [sp, #4]
 800511e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005120:	4682      	mov	sl, r0
 8005122:	468b      	mov	fp, r1
 8005124:	4649      	mov	r1, r9
 8005126:	4640      	mov	r0, r8
 8005128:	f7fb fd00 	bl	8000b2c <__aeabi_d2iz>
 800512c:	4606      	mov	r6, r0
 800512e:	f7fb f9f9 	bl	8000524 <__aeabi_i2d>
 8005132:	3630      	adds	r6, #48	; 0x30
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	f7fb f8a4 	bl	8000288 <__aeabi_dsub>
 8005140:	f805 6b01 	strb.w	r6, [r5], #1
 8005144:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005146:	429d      	cmp	r5, r3
 8005148:	4680      	mov	r8, r0
 800514a:	4689      	mov	r9, r1
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	d124      	bne.n	800519c <_dtoa_r+0x60c>
 8005152:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <_dtoa_r+0x630>)
 8005154:	4650      	mov	r0, sl
 8005156:	4659      	mov	r1, fp
 8005158:	f7fb f898 	bl	800028c <__adddf3>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4640      	mov	r0, r8
 8005162:	4649      	mov	r1, r9
 8005164:	f7fb fcd8 	bl	8000b18 <__aeabi_dcmpgt>
 8005168:	2800      	cmp	r0, #0
 800516a:	d173      	bne.n	8005254 <_dtoa_r+0x6c4>
 800516c:	4652      	mov	r2, sl
 800516e:	465b      	mov	r3, fp
 8005170:	4913      	ldr	r1, [pc, #76]	; (80051c0 <_dtoa_r+0x630>)
 8005172:	2000      	movs	r0, #0
 8005174:	f7fb f888 	bl	8000288 <__aeabi_dsub>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4640      	mov	r0, r8
 800517e:	4649      	mov	r1, r9
 8005180:	f7fb fcac 	bl	8000adc <__aeabi_dcmplt>
 8005184:	2800      	cmp	r0, #0
 8005186:	f43f af35 	beq.w	8004ff4 <_dtoa_r+0x464>
 800518a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800518c:	1e6b      	subs	r3, r5, #1
 800518e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005190:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d0f8      	beq.n	800518a <_dtoa_r+0x5fa>
 8005198:	9700      	str	r7, [sp, #0]
 800519a:	e049      	b.n	8005230 <_dtoa_r+0x6a0>
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <_dtoa_r+0x624>)
 800519e:	f7fb fa2b 	bl	80005f8 <__aeabi_dmul>
 80051a2:	4680      	mov	r8, r0
 80051a4:	4689      	mov	r9, r1
 80051a6:	e7bd      	b.n	8005124 <_dtoa_r+0x594>
 80051a8:	080066f8 	.word	0x080066f8
 80051ac:	080066d0 	.word	0x080066d0
 80051b0:	3ff00000 	.word	0x3ff00000
 80051b4:	40240000 	.word	0x40240000
 80051b8:	401c0000 	.word	0x401c0000
 80051bc:	40140000 	.word	0x40140000
 80051c0:	3fe00000 	.word	0x3fe00000
 80051c4:	9d01      	ldr	r5, [sp, #4]
 80051c6:	4656      	mov	r6, sl
 80051c8:	465f      	mov	r7, fp
 80051ca:	4642      	mov	r2, r8
 80051cc:	464b      	mov	r3, r9
 80051ce:	4630      	mov	r0, r6
 80051d0:	4639      	mov	r1, r7
 80051d2:	f7fb fb3b 	bl	800084c <__aeabi_ddiv>
 80051d6:	f7fb fca9 	bl	8000b2c <__aeabi_d2iz>
 80051da:	4682      	mov	sl, r0
 80051dc:	f7fb f9a2 	bl	8000524 <__aeabi_i2d>
 80051e0:	4642      	mov	r2, r8
 80051e2:	464b      	mov	r3, r9
 80051e4:	f7fb fa08 	bl	80005f8 <__aeabi_dmul>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4630      	mov	r0, r6
 80051ee:	4639      	mov	r1, r7
 80051f0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80051f4:	f7fb f848 	bl	8000288 <__aeabi_dsub>
 80051f8:	f805 6b01 	strb.w	r6, [r5], #1
 80051fc:	9e01      	ldr	r6, [sp, #4]
 80051fe:	9f03      	ldr	r7, [sp, #12]
 8005200:	1bae      	subs	r6, r5, r6
 8005202:	42b7      	cmp	r7, r6
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	d135      	bne.n	8005276 <_dtoa_r+0x6e6>
 800520a:	f7fb f83f 	bl	800028c <__adddf3>
 800520e:	4642      	mov	r2, r8
 8005210:	464b      	mov	r3, r9
 8005212:	4606      	mov	r6, r0
 8005214:	460f      	mov	r7, r1
 8005216:	f7fb fc7f 	bl	8000b18 <__aeabi_dcmpgt>
 800521a:	b9d0      	cbnz	r0, 8005252 <_dtoa_r+0x6c2>
 800521c:	4642      	mov	r2, r8
 800521e:	464b      	mov	r3, r9
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fb fc50 	bl	8000ac8 <__aeabi_dcmpeq>
 8005228:	b110      	cbz	r0, 8005230 <_dtoa_r+0x6a0>
 800522a:	f01a 0f01 	tst.w	sl, #1
 800522e:	d110      	bne.n	8005252 <_dtoa_r+0x6c2>
 8005230:	4620      	mov	r0, r4
 8005232:	ee18 1a10 	vmov	r1, s16
 8005236:	f7fe ffdb 	bl	80041f0 <_Bfree>
 800523a:	2300      	movs	r3, #0
 800523c:	9800      	ldr	r0, [sp, #0]
 800523e:	702b      	strb	r3, [r5, #0]
 8005240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005242:	3001      	adds	r0, #1
 8005244:	6018      	str	r0, [r3, #0]
 8005246:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005248:	2b00      	cmp	r3, #0
 800524a:	f43f acf1 	beq.w	8004c30 <_dtoa_r+0xa0>
 800524e:	601d      	str	r5, [r3, #0]
 8005250:	e4ee      	b.n	8004c30 <_dtoa_r+0xa0>
 8005252:	9f00      	ldr	r7, [sp, #0]
 8005254:	462b      	mov	r3, r5
 8005256:	461d      	mov	r5, r3
 8005258:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800525c:	2a39      	cmp	r2, #57	; 0x39
 800525e:	d106      	bne.n	800526e <_dtoa_r+0x6de>
 8005260:	9a01      	ldr	r2, [sp, #4]
 8005262:	429a      	cmp	r2, r3
 8005264:	d1f7      	bne.n	8005256 <_dtoa_r+0x6c6>
 8005266:	9901      	ldr	r1, [sp, #4]
 8005268:	2230      	movs	r2, #48	; 0x30
 800526a:	3701      	adds	r7, #1
 800526c:	700a      	strb	r2, [r1, #0]
 800526e:	781a      	ldrb	r2, [r3, #0]
 8005270:	3201      	adds	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e790      	b.n	8005198 <_dtoa_r+0x608>
 8005276:	4ba6      	ldr	r3, [pc, #664]	; (8005510 <_dtoa_r+0x980>)
 8005278:	2200      	movs	r2, #0
 800527a:	f7fb f9bd 	bl	80005f8 <__aeabi_dmul>
 800527e:	2200      	movs	r2, #0
 8005280:	2300      	movs	r3, #0
 8005282:	4606      	mov	r6, r0
 8005284:	460f      	mov	r7, r1
 8005286:	f7fb fc1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800528a:	2800      	cmp	r0, #0
 800528c:	d09d      	beq.n	80051ca <_dtoa_r+0x63a>
 800528e:	e7cf      	b.n	8005230 <_dtoa_r+0x6a0>
 8005290:	9a08      	ldr	r2, [sp, #32]
 8005292:	2a00      	cmp	r2, #0
 8005294:	f000 80d7 	beq.w	8005446 <_dtoa_r+0x8b6>
 8005298:	9a06      	ldr	r2, [sp, #24]
 800529a:	2a01      	cmp	r2, #1
 800529c:	f300 80ba 	bgt.w	8005414 <_dtoa_r+0x884>
 80052a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	f000 80b2 	beq.w	800540c <_dtoa_r+0x87c>
 80052a8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80052ac:	9e07      	ldr	r6, [sp, #28]
 80052ae:	9d04      	ldr	r5, [sp, #16]
 80052b0:	9a04      	ldr	r2, [sp, #16]
 80052b2:	441a      	add	r2, r3
 80052b4:	9204      	str	r2, [sp, #16]
 80052b6:	9a05      	ldr	r2, [sp, #20]
 80052b8:	2101      	movs	r1, #1
 80052ba:	441a      	add	r2, r3
 80052bc:	4620      	mov	r0, r4
 80052be:	9205      	str	r2, [sp, #20]
 80052c0:	f7ff f84e 	bl	8004360 <__i2b>
 80052c4:	4607      	mov	r7, r0
 80052c6:	2d00      	cmp	r5, #0
 80052c8:	dd0c      	ble.n	80052e4 <_dtoa_r+0x754>
 80052ca:	9b05      	ldr	r3, [sp, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dd09      	ble.n	80052e4 <_dtoa_r+0x754>
 80052d0:	42ab      	cmp	r3, r5
 80052d2:	9a04      	ldr	r2, [sp, #16]
 80052d4:	bfa8      	it	ge
 80052d6:	462b      	movge	r3, r5
 80052d8:	1ad2      	subs	r2, r2, r3
 80052da:	9204      	str	r2, [sp, #16]
 80052dc:	9a05      	ldr	r2, [sp, #20]
 80052de:	1aed      	subs	r5, r5, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	9305      	str	r3, [sp, #20]
 80052e4:	9b07      	ldr	r3, [sp, #28]
 80052e6:	b31b      	cbz	r3, 8005330 <_dtoa_r+0x7a0>
 80052e8:	9b08      	ldr	r3, [sp, #32]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f000 80af 	beq.w	800544e <_dtoa_r+0x8be>
 80052f0:	2e00      	cmp	r6, #0
 80052f2:	dd13      	ble.n	800531c <_dtoa_r+0x78c>
 80052f4:	4639      	mov	r1, r7
 80052f6:	4632      	mov	r2, r6
 80052f8:	4620      	mov	r0, r4
 80052fa:	f7ff f8f1 	bl	80044e0 <__pow5mult>
 80052fe:	ee18 2a10 	vmov	r2, s16
 8005302:	4601      	mov	r1, r0
 8005304:	4607      	mov	r7, r0
 8005306:	4620      	mov	r0, r4
 8005308:	f7ff f840 	bl	800438c <__multiply>
 800530c:	ee18 1a10 	vmov	r1, s16
 8005310:	4680      	mov	r8, r0
 8005312:	4620      	mov	r0, r4
 8005314:	f7fe ff6c 	bl	80041f0 <_Bfree>
 8005318:	ee08 8a10 	vmov	s16, r8
 800531c:	9b07      	ldr	r3, [sp, #28]
 800531e:	1b9a      	subs	r2, r3, r6
 8005320:	d006      	beq.n	8005330 <_dtoa_r+0x7a0>
 8005322:	ee18 1a10 	vmov	r1, s16
 8005326:	4620      	mov	r0, r4
 8005328:	f7ff f8da 	bl	80044e0 <__pow5mult>
 800532c:	ee08 0a10 	vmov	s16, r0
 8005330:	2101      	movs	r1, #1
 8005332:	4620      	mov	r0, r4
 8005334:	f7ff f814 	bl	8004360 <__i2b>
 8005338:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	4606      	mov	r6, r0
 800533e:	f340 8088 	ble.w	8005452 <_dtoa_r+0x8c2>
 8005342:	461a      	mov	r2, r3
 8005344:	4601      	mov	r1, r0
 8005346:	4620      	mov	r0, r4
 8005348:	f7ff f8ca 	bl	80044e0 <__pow5mult>
 800534c:	9b06      	ldr	r3, [sp, #24]
 800534e:	2b01      	cmp	r3, #1
 8005350:	4606      	mov	r6, r0
 8005352:	f340 8081 	ble.w	8005458 <_dtoa_r+0x8c8>
 8005356:	f04f 0800 	mov.w	r8, #0
 800535a:	6933      	ldr	r3, [r6, #16]
 800535c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005360:	6918      	ldr	r0, [r3, #16]
 8005362:	f7fe ffad 	bl	80042c0 <__hi0bits>
 8005366:	f1c0 0020 	rsb	r0, r0, #32
 800536a:	9b05      	ldr	r3, [sp, #20]
 800536c:	4418      	add	r0, r3
 800536e:	f010 001f 	ands.w	r0, r0, #31
 8005372:	f000 8092 	beq.w	800549a <_dtoa_r+0x90a>
 8005376:	f1c0 0320 	rsb	r3, r0, #32
 800537a:	2b04      	cmp	r3, #4
 800537c:	f340 808a 	ble.w	8005494 <_dtoa_r+0x904>
 8005380:	f1c0 001c 	rsb	r0, r0, #28
 8005384:	9b04      	ldr	r3, [sp, #16]
 8005386:	4403      	add	r3, r0
 8005388:	9304      	str	r3, [sp, #16]
 800538a:	9b05      	ldr	r3, [sp, #20]
 800538c:	4403      	add	r3, r0
 800538e:	4405      	add	r5, r0
 8005390:	9305      	str	r3, [sp, #20]
 8005392:	9b04      	ldr	r3, [sp, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	dd07      	ble.n	80053a8 <_dtoa_r+0x818>
 8005398:	ee18 1a10 	vmov	r1, s16
 800539c:	461a      	mov	r2, r3
 800539e:	4620      	mov	r0, r4
 80053a0:	f7ff f8f8 	bl	8004594 <__lshift>
 80053a4:	ee08 0a10 	vmov	s16, r0
 80053a8:	9b05      	ldr	r3, [sp, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	dd05      	ble.n	80053ba <_dtoa_r+0x82a>
 80053ae:	4631      	mov	r1, r6
 80053b0:	461a      	mov	r2, r3
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7ff f8ee 	bl	8004594 <__lshift>
 80053b8:	4606      	mov	r6, r0
 80053ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d06e      	beq.n	800549e <_dtoa_r+0x90e>
 80053c0:	ee18 0a10 	vmov	r0, s16
 80053c4:	4631      	mov	r1, r6
 80053c6:	f7ff f955 	bl	8004674 <__mcmp>
 80053ca:	2800      	cmp	r0, #0
 80053cc:	da67      	bge.n	800549e <_dtoa_r+0x90e>
 80053ce:	9b00      	ldr	r3, [sp, #0]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	ee18 1a10 	vmov	r1, s16
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	220a      	movs	r2, #10
 80053da:	2300      	movs	r3, #0
 80053dc:	4620      	mov	r0, r4
 80053de:	f7fe ff29 	bl	8004234 <__multadd>
 80053e2:	9b08      	ldr	r3, [sp, #32]
 80053e4:	ee08 0a10 	vmov	s16, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 81b1 	beq.w	8005750 <_dtoa_r+0xbc0>
 80053ee:	2300      	movs	r3, #0
 80053f0:	4639      	mov	r1, r7
 80053f2:	220a      	movs	r2, #10
 80053f4:	4620      	mov	r0, r4
 80053f6:	f7fe ff1d 	bl	8004234 <__multadd>
 80053fa:	9b02      	ldr	r3, [sp, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	4607      	mov	r7, r0
 8005400:	f300 808e 	bgt.w	8005520 <_dtoa_r+0x990>
 8005404:	9b06      	ldr	r3, [sp, #24]
 8005406:	2b02      	cmp	r3, #2
 8005408:	dc51      	bgt.n	80054ae <_dtoa_r+0x91e>
 800540a:	e089      	b.n	8005520 <_dtoa_r+0x990>
 800540c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800540e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005412:	e74b      	b.n	80052ac <_dtoa_r+0x71c>
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	1e5e      	subs	r6, r3, #1
 8005418:	9b07      	ldr	r3, [sp, #28]
 800541a:	42b3      	cmp	r3, r6
 800541c:	bfbf      	itttt	lt
 800541e:	9b07      	ldrlt	r3, [sp, #28]
 8005420:	9607      	strlt	r6, [sp, #28]
 8005422:	1af2      	sublt	r2, r6, r3
 8005424:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005426:	bfb6      	itet	lt
 8005428:	189b      	addlt	r3, r3, r2
 800542a:	1b9e      	subge	r6, r3, r6
 800542c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	bfb8      	it	lt
 8005432:	2600      	movlt	r6, #0
 8005434:	2b00      	cmp	r3, #0
 8005436:	bfb7      	itett	lt
 8005438:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800543c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005440:	1a9d      	sublt	r5, r3, r2
 8005442:	2300      	movlt	r3, #0
 8005444:	e734      	b.n	80052b0 <_dtoa_r+0x720>
 8005446:	9e07      	ldr	r6, [sp, #28]
 8005448:	9d04      	ldr	r5, [sp, #16]
 800544a:	9f08      	ldr	r7, [sp, #32]
 800544c:	e73b      	b.n	80052c6 <_dtoa_r+0x736>
 800544e:	9a07      	ldr	r2, [sp, #28]
 8005450:	e767      	b.n	8005322 <_dtoa_r+0x792>
 8005452:	9b06      	ldr	r3, [sp, #24]
 8005454:	2b01      	cmp	r3, #1
 8005456:	dc18      	bgt.n	800548a <_dtoa_r+0x8fa>
 8005458:	f1ba 0f00 	cmp.w	sl, #0
 800545c:	d115      	bne.n	800548a <_dtoa_r+0x8fa>
 800545e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005462:	b993      	cbnz	r3, 800548a <_dtoa_r+0x8fa>
 8005464:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005468:	0d1b      	lsrs	r3, r3, #20
 800546a:	051b      	lsls	r3, r3, #20
 800546c:	b183      	cbz	r3, 8005490 <_dtoa_r+0x900>
 800546e:	9b04      	ldr	r3, [sp, #16]
 8005470:	3301      	adds	r3, #1
 8005472:	9304      	str	r3, [sp, #16]
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	3301      	adds	r3, #1
 8005478:	9305      	str	r3, [sp, #20]
 800547a:	f04f 0801 	mov.w	r8, #1
 800547e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005480:	2b00      	cmp	r3, #0
 8005482:	f47f af6a 	bne.w	800535a <_dtoa_r+0x7ca>
 8005486:	2001      	movs	r0, #1
 8005488:	e76f      	b.n	800536a <_dtoa_r+0x7da>
 800548a:	f04f 0800 	mov.w	r8, #0
 800548e:	e7f6      	b.n	800547e <_dtoa_r+0x8ee>
 8005490:	4698      	mov	r8, r3
 8005492:	e7f4      	b.n	800547e <_dtoa_r+0x8ee>
 8005494:	f43f af7d 	beq.w	8005392 <_dtoa_r+0x802>
 8005498:	4618      	mov	r0, r3
 800549a:	301c      	adds	r0, #28
 800549c:	e772      	b.n	8005384 <_dtoa_r+0x7f4>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dc37      	bgt.n	8005514 <_dtoa_r+0x984>
 80054a4:	9b06      	ldr	r3, [sp, #24]
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	dd34      	ble.n	8005514 <_dtoa_r+0x984>
 80054aa:	9b03      	ldr	r3, [sp, #12]
 80054ac:	9302      	str	r3, [sp, #8]
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	b96b      	cbnz	r3, 80054ce <_dtoa_r+0x93e>
 80054b2:	4631      	mov	r1, r6
 80054b4:	2205      	movs	r2, #5
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7fe febc 	bl	8004234 <__multadd>
 80054bc:	4601      	mov	r1, r0
 80054be:	4606      	mov	r6, r0
 80054c0:	ee18 0a10 	vmov	r0, s16
 80054c4:	f7ff f8d6 	bl	8004674 <__mcmp>
 80054c8:	2800      	cmp	r0, #0
 80054ca:	f73f adbb 	bgt.w	8005044 <_dtoa_r+0x4b4>
 80054ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054d0:	9d01      	ldr	r5, [sp, #4]
 80054d2:	43db      	mvns	r3, r3
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	f04f 0800 	mov.w	r8, #0
 80054da:	4631      	mov	r1, r6
 80054dc:	4620      	mov	r0, r4
 80054de:	f7fe fe87 	bl	80041f0 <_Bfree>
 80054e2:	2f00      	cmp	r7, #0
 80054e4:	f43f aea4 	beq.w	8005230 <_dtoa_r+0x6a0>
 80054e8:	f1b8 0f00 	cmp.w	r8, #0
 80054ec:	d005      	beq.n	80054fa <_dtoa_r+0x96a>
 80054ee:	45b8      	cmp	r8, r7
 80054f0:	d003      	beq.n	80054fa <_dtoa_r+0x96a>
 80054f2:	4641      	mov	r1, r8
 80054f4:	4620      	mov	r0, r4
 80054f6:	f7fe fe7b 	bl	80041f0 <_Bfree>
 80054fa:	4639      	mov	r1, r7
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7fe fe77 	bl	80041f0 <_Bfree>
 8005502:	e695      	b.n	8005230 <_dtoa_r+0x6a0>
 8005504:	2600      	movs	r6, #0
 8005506:	4637      	mov	r7, r6
 8005508:	e7e1      	b.n	80054ce <_dtoa_r+0x93e>
 800550a:	9700      	str	r7, [sp, #0]
 800550c:	4637      	mov	r7, r6
 800550e:	e599      	b.n	8005044 <_dtoa_r+0x4b4>
 8005510:	40240000 	.word	0x40240000
 8005514:	9b08      	ldr	r3, [sp, #32]
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80ca 	beq.w	80056b0 <_dtoa_r+0xb20>
 800551c:	9b03      	ldr	r3, [sp, #12]
 800551e:	9302      	str	r3, [sp, #8]
 8005520:	2d00      	cmp	r5, #0
 8005522:	dd05      	ble.n	8005530 <_dtoa_r+0x9a0>
 8005524:	4639      	mov	r1, r7
 8005526:	462a      	mov	r2, r5
 8005528:	4620      	mov	r0, r4
 800552a:	f7ff f833 	bl	8004594 <__lshift>
 800552e:	4607      	mov	r7, r0
 8005530:	f1b8 0f00 	cmp.w	r8, #0
 8005534:	d05b      	beq.n	80055ee <_dtoa_r+0xa5e>
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	4620      	mov	r0, r4
 800553a:	f7fe fe19 	bl	8004170 <_Balloc>
 800553e:	4605      	mov	r5, r0
 8005540:	b928      	cbnz	r0, 800554e <_dtoa_r+0x9be>
 8005542:	4b87      	ldr	r3, [pc, #540]	; (8005760 <_dtoa_r+0xbd0>)
 8005544:	4602      	mov	r2, r0
 8005546:	f240 21ea 	movw	r1, #746	; 0x2ea
 800554a:	f7ff bb3b 	b.w	8004bc4 <_dtoa_r+0x34>
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	3202      	adds	r2, #2
 8005552:	0092      	lsls	r2, r2, #2
 8005554:	f107 010c 	add.w	r1, r7, #12
 8005558:	300c      	adds	r0, #12
 800555a:	f000 f921 	bl	80057a0 <memcpy>
 800555e:	2201      	movs	r2, #1
 8005560:	4629      	mov	r1, r5
 8005562:	4620      	mov	r0, r4
 8005564:	f7ff f816 	bl	8004594 <__lshift>
 8005568:	9b01      	ldr	r3, [sp, #4]
 800556a:	f103 0901 	add.w	r9, r3, #1
 800556e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005572:	4413      	add	r3, r2
 8005574:	9305      	str	r3, [sp, #20]
 8005576:	f00a 0301 	and.w	r3, sl, #1
 800557a:	46b8      	mov	r8, r7
 800557c:	9304      	str	r3, [sp, #16]
 800557e:	4607      	mov	r7, r0
 8005580:	4631      	mov	r1, r6
 8005582:	ee18 0a10 	vmov	r0, s16
 8005586:	f7ff fa75 	bl	8004a74 <quorem>
 800558a:	4641      	mov	r1, r8
 800558c:	9002      	str	r0, [sp, #8]
 800558e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005592:	ee18 0a10 	vmov	r0, s16
 8005596:	f7ff f86d 	bl	8004674 <__mcmp>
 800559a:	463a      	mov	r2, r7
 800559c:	9003      	str	r0, [sp, #12]
 800559e:	4631      	mov	r1, r6
 80055a0:	4620      	mov	r0, r4
 80055a2:	f7ff f883 	bl	80046ac <__mdiff>
 80055a6:	68c2      	ldr	r2, [r0, #12]
 80055a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80055ac:	4605      	mov	r5, r0
 80055ae:	bb02      	cbnz	r2, 80055f2 <_dtoa_r+0xa62>
 80055b0:	4601      	mov	r1, r0
 80055b2:	ee18 0a10 	vmov	r0, s16
 80055b6:	f7ff f85d 	bl	8004674 <__mcmp>
 80055ba:	4602      	mov	r2, r0
 80055bc:	4629      	mov	r1, r5
 80055be:	4620      	mov	r0, r4
 80055c0:	9207      	str	r2, [sp, #28]
 80055c2:	f7fe fe15 	bl	80041f0 <_Bfree>
 80055c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80055ca:	ea43 0102 	orr.w	r1, r3, r2
 80055ce:	9b04      	ldr	r3, [sp, #16]
 80055d0:	430b      	orrs	r3, r1
 80055d2:	464d      	mov	r5, r9
 80055d4:	d10f      	bne.n	80055f6 <_dtoa_r+0xa66>
 80055d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80055da:	d02a      	beq.n	8005632 <_dtoa_r+0xaa2>
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	dd02      	ble.n	80055e8 <_dtoa_r+0xa58>
 80055e2:	9b02      	ldr	r3, [sp, #8]
 80055e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80055e8:	f88b a000 	strb.w	sl, [fp]
 80055ec:	e775      	b.n	80054da <_dtoa_r+0x94a>
 80055ee:	4638      	mov	r0, r7
 80055f0:	e7ba      	b.n	8005568 <_dtoa_r+0x9d8>
 80055f2:	2201      	movs	r2, #1
 80055f4:	e7e2      	b.n	80055bc <_dtoa_r+0xa2c>
 80055f6:	9b03      	ldr	r3, [sp, #12]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	db04      	blt.n	8005606 <_dtoa_r+0xa76>
 80055fc:	9906      	ldr	r1, [sp, #24]
 80055fe:	430b      	orrs	r3, r1
 8005600:	9904      	ldr	r1, [sp, #16]
 8005602:	430b      	orrs	r3, r1
 8005604:	d122      	bne.n	800564c <_dtoa_r+0xabc>
 8005606:	2a00      	cmp	r2, #0
 8005608:	ddee      	ble.n	80055e8 <_dtoa_r+0xa58>
 800560a:	ee18 1a10 	vmov	r1, s16
 800560e:	2201      	movs	r2, #1
 8005610:	4620      	mov	r0, r4
 8005612:	f7fe ffbf 	bl	8004594 <__lshift>
 8005616:	4631      	mov	r1, r6
 8005618:	ee08 0a10 	vmov	s16, r0
 800561c:	f7ff f82a 	bl	8004674 <__mcmp>
 8005620:	2800      	cmp	r0, #0
 8005622:	dc03      	bgt.n	800562c <_dtoa_r+0xa9c>
 8005624:	d1e0      	bne.n	80055e8 <_dtoa_r+0xa58>
 8005626:	f01a 0f01 	tst.w	sl, #1
 800562a:	d0dd      	beq.n	80055e8 <_dtoa_r+0xa58>
 800562c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005630:	d1d7      	bne.n	80055e2 <_dtoa_r+0xa52>
 8005632:	2339      	movs	r3, #57	; 0x39
 8005634:	f88b 3000 	strb.w	r3, [fp]
 8005638:	462b      	mov	r3, r5
 800563a:	461d      	mov	r5, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005642:	2a39      	cmp	r2, #57	; 0x39
 8005644:	d071      	beq.n	800572a <_dtoa_r+0xb9a>
 8005646:	3201      	adds	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e746      	b.n	80054da <_dtoa_r+0x94a>
 800564c:	2a00      	cmp	r2, #0
 800564e:	dd07      	ble.n	8005660 <_dtoa_r+0xad0>
 8005650:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005654:	d0ed      	beq.n	8005632 <_dtoa_r+0xaa2>
 8005656:	f10a 0301 	add.w	r3, sl, #1
 800565a:	f88b 3000 	strb.w	r3, [fp]
 800565e:	e73c      	b.n	80054da <_dtoa_r+0x94a>
 8005660:	9b05      	ldr	r3, [sp, #20]
 8005662:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005666:	4599      	cmp	r9, r3
 8005668:	d047      	beq.n	80056fa <_dtoa_r+0xb6a>
 800566a:	ee18 1a10 	vmov	r1, s16
 800566e:	2300      	movs	r3, #0
 8005670:	220a      	movs	r2, #10
 8005672:	4620      	mov	r0, r4
 8005674:	f7fe fdde 	bl	8004234 <__multadd>
 8005678:	45b8      	cmp	r8, r7
 800567a:	ee08 0a10 	vmov	s16, r0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	f04f 020a 	mov.w	r2, #10
 8005686:	4641      	mov	r1, r8
 8005688:	4620      	mov	r0, r4
 800568a:	d106      	bne.n	800569a <_dtoa_r+0xb0a>
 800568c:	f7fe fdd2 	bl	8004234 <__multadd>
 8005690:	4680      	mov	r8, r0
 8005692:	4607      	mov	r7, r0
 8005694:	f109 0901 	add.w	r9, r9, #1
 8005698:	e772      	b.n	8005580 <_dtoa_r+0x9f0>
 800569a:	f7fe fdcb 	bl	8004234 <__multadd>
 800569e:	4639      	mov	r1, r7
 80056a0:	4680      	mov	r8, r0
 80056a2:	2300      	movs	r3, #0
 80056a4:	220a      	movs	r2, #10
 80056a6:	4620      	mov	r0, r4
 80056a8:	f7fe fdc4 	bl	8004234 <__multadd>
 80056ac:	4607      	mov	r7, r0
 80056ae:	e7f1      	b.n	8005694 <_dtoa_r+0xb04>
 80056b0:	9b03      	ldr	r3, [sp, #12]
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	9d01      	ldr	r5, [sp, #4]
 80056b6:	ee18 0a10 	vmov	r0, s16
 80056ba:	4631      	mov	r1, r6
 80056bc:	f7ff f9da 	bl	8004a74 <quorem>
 80056c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80056c4:	9b01      	ldr	r3, [sp, #4]
 80056c6:	f805 ab01 	strb.w	sl, [r5], #1
 80056ca:	1aea      	subs	r2, r5, r3
 80056cc:	9b02      	ldr	r3, [sp, #8]
 80056ce:	4293      	cmp	r3, r2
 80056d0:	dd09      	ble.n	80056e6 <_dtoa_r+0xb56>
 80056d2:	ee18 1a10 	vmov	r1, s16
 80056d6:	2300      	movs	r3, #0
 80056d8:	220a      	movs	r2, #10
 80056da:	4620      	mov	r0, r4
 80056dc:	f7fe fdaa 	bl	8004234 <__multadd>
 80056e0:	ee08 0a10 	vmov	s16, r0
 80056e4:	e7e7      	b.n	80056b6 <_dtoa_r+0xb26>
 80056e6:	9b02      	ldr	r3, [sp, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	bfc8      	it	gt
 80056ec:	461d      	movgt	r5, r3
 80056ee:	9b01      	ldr	r3, [sp, #4]
 80056f0:	bfd8      	it	le
 80056f2:	2501      	movle	r5, #1
 80056f4:	441d      	add	r5, r3
 80056f6:	f04f 0800 	mov.w	r8, #0
 80056fa:	ee18 1a10 	vmov	r1, s16
 80056fe:	2201      	movs	r2, #1
 8005700:	4620      	mov	r0, r4
 8005702:	f7fe ff47 	bl	8004594 <__lshift>
 8005706:	4631      	mov	r1, r6
 8005708:	ee08 0a10 	vmov	s16, r0
 800570c:	f7fe ffb2 	bl	8004674 <__mcmp>
 8005710:	2800      	cmp	r0, #0
 8005712:	dc91      	bgt.n	8005638 <_dtoa_r+0xaa8>
 8005714:	d102      	bne.n	800571c <_dtoa_r+0xb8c>
 8005716:	f01a 0f01 	tst.w	sl, #1
 800571a:	d18d      	bne.n	8005638 <_dtoa_r+0xaa8>
 800571c:	462b      	mov	r3, r5
 800571e:	461d      	mov	r5, r3
 8005720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005724:	2a30      	cmp	r2, #48	; 0x30
 8005726:	d0fa      	beq.n	800571e <_dtoa_r+0xb8e>
 8005728:	e6d7      	b.n	80054da <_dtoa_r+0x94a>
 800572a:	9a01      	ldr	r2, [sp, #4]
 800572c:	429a      	cmp	r2, r3
 800572e:	d184      	bne.n	800563a <_dtoa_r+0xaaa>
 8005730:	9b00      	ldr	r3, [sp, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	2331      	movs	r3, #49	; 0x31
 8005738:	7013      	strb	r3, [r2, #0]
 800573a:	e6ce      	b.n	80054da <_dtoa_r+0x94a>
 800573c:	4b09      	ldr	r3, [pc, #36]	; (8005764 <_dtoa_r+0xbd4>)
 800573e:	f7ff ba95 	b.w	8004c6c <_dtoa_r+0xdc>
 8005742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005744:	2b00      	cmp	r3, #0
 8005746:	f47f aa6e 	bne.w	8004c26 <_dtoa_r+0x96>
 800574a:	4b07      	ldr	r3, [pc, #28]	; (8005768 <_dtoa_r+0xbd8>)
 800574c:	f7ff ba8e 	b.w	8004c6c <_dtoa_r+0xdc>
 8005750:	9b02      	ldr	r3, [sp, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	dcae      	bgt.n	80056b4 <_dtoa_r+0xb24>
 8005756:	9b06      	ldr	r3, [sp, #24]
 8005758:	2b02      	cmp	r3, #2
 800575a:	f73f aea8 	bgt.w	80054ae <_dtoa_r+0x91e>
 800575e:	e7a9      	b.n	80056b4 <_dtoa_r+0xb24>
 8005760:	080066bf 	.word	0x080066bf
 8005764:	08006815 	.word	0x08006815
 8005768:	08006808 	.word	0x08006808

0800576c <fiprintf>:
 800576c:	b40e      	push	{r1, r2, r3}
 800576e:	b503      	push	{r0, r1, lr}
 8005770:	4601      	mov	r1, r0
 8005772:	ab03      	add	r3, sp, #12
 8005774:	4805      	ldr	r0, [pc, #20]	; (800578c <fiprintf+0x20>)
 8005776:	f853 2b04 	ldr.w	r2, [r3], #4
 800577a:	6800      	ldr	r0, [r0, #0]
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	f000 f89f 	bl	80058c0 <_vfiprintf_r>
 8005782:	b002      	add	sp, #8
 8005784:	f85d eb04 	ldr.w	lr, [sp], #4
 8005788:	b003      	add	sp, #12
 800578a:	4770      	bx	lr
 800578c:	2000000c 	.word	0x2000000c

08005790 <malloc>:
 8005790:	4b02      	ldr	r3, [pc, #8]	; (800579c <malloc+0xc>)
 8005792:	4601      	mov	r1, r0
 8005794:	6818      	ldr	r0, [r3, #0]
 8005796:	f7ff b8c3 	b.w	8004920 <_malloc_r>
 800579a:	bf00      	nop
 800579c:	2000000c 	.word	0x2000000c

080057a0 <memcpy>:
 80057a0:	440a      	add	r2, r1
 80057a2:	4291      	cmp	r1, r2
 80057a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80057a8:	d100      	bne.n	80057ac <memcpy+0xc>
 80057aa:	4770      	bx	lr
 80057ac:	b510      	push	{r4, lr}
 80057ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057b6:	4291      	cmp	r1, r2
 80057b8:	d1f9      	bne.n	80057ae <memcpy+0xe>
 80057ba:	bd10      	pop	{r4, pc}

080057bc <__malloc_lock>:
 80057bc:	4801      	ldr	r0, [pc, #4]	; (80057c4 <__malloc_lock+0x8>)
 80057be:	f000 bdc3 	b.w	8006348 <__retarget_lock_acquire_recursive>
 80057c2:	bf00      	nop
 80057c4:	20000138 	.word	0x20000138

080057c8 <__malloc_unlock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	; (80057d0 <__malloc_unlock+0x8>)
 80057ca:	f000 bdbe 	b.w	800634a <__retarget_lock_release_recursive>
 80057ce:	bf00      	nop
 80057d0:	20000138 	.word	0x20000138

080057d4 <_free_r>:
 80057d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d044      	beq.n	8005864 <_free_r+0x90>
 80057da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057de:	9001      	str	r0, [sp, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f1a1 0404 	sub.w	r4, r1, #4
 80057e6:	bfb8      	it	lt
 80057e8:	18e4      	addlt	r4, r4, r3
 80057ea:	f7ff ffe7 	bl	80057bc <__malloc_lock>
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <_free_r+0x94>)
 80057f0:	9801      	ldr	r0, [sp, #4]
 80057f2:	6813      	ldr	r3, [r2, #0]
 80057f4:	b933      	cbnz	r3, 8005804 <_free_r+0x30>
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	6014      	str	r4, [r2, #0]
 80057fa:	b003      	add	sp, #12
 80057fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005800:	f7ff bfe2 	b.w	80057c8 <__malloc_unlock>
 8005804:	42a3      	cmp	r3, r4
 8005806:	d908      	bls.n	800581a <_free_r+0x46>
 8005808:	6825      	ldr	r5, [r4, #0]
 800580a:	1961      	adds	r1, r4, r5
 800580c:	428b      	cmp	r3, r1
 800580e:	bf01      	itttt	eq
 8005810:	6819      	ldreq	r1, [r3, #0]
 8005812:	685b      	ldreq	r3, [r3, #4]
 8005814:	1949      	addeq	r1, r1, r5
 8005816:	6021      	streq	r1, [r4, #0]
 8005818:	e7ed      	b.n	80057f6 <_free_r+0x22>
 800581a:	461a      	mov	r2, r3
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	b10b      	cbz	r3, 8005824 <_free_r+0x50>
 8005820:	42a3      	cmp	r3, r4
 8005822:	d9fa      	bls.n	800581a <_free_r+0x46>
 8005824:	6811      	ldr	r1, [r2, #0]
 8005826:	1855      	adds	r5, r2, r1
 8005828:	42a5      	cmp	r5, r4
 800582a:	d10b      	bne.n	8005844 <_free_r+0x70>
 800582c:	6824      	ldr	r4, [r4, #0]
 800582e:	4421      	add	r1, r4
 8005830:	1854      	adds	r4, r2, r1
 8005832:	42a3      	cmp	r3, r4
 8005834:	6011      	str	r1, [r2, #0]
 8005836:	d1e0      	bne.n	80057fa <_free_r+0x26>
 8005838:	681c      	ldr	r4, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	6053      	str	r3, [r2, #4]
 800583e:	4421      	add	r1, r4
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	e7da      	b.n	80057fa <_free_r+0x26>
 8005844:	d902      	bls.n	800584c <_free_r+0x78>
 8005846:	230c      	movs	r3, #12
 8005848:	6003      	str	r3, [r0, #0]
 800584a:	e7d6      	b.n	80057fa <_free_r+0x26>
 800584c:	6825      	ldr	r5, [r4, #0]
 800584e:	1961      	adds	r1, r4, r5
 8005850:	428b      	cmp	r3, r1
 8005852:	bf04      	itt	eq
 8005854:	6819      	ldreq	r1, [r3, #0]
 8005856:	685b      	ldreq	r3, [r3, #4]
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	bf04      	itt	eq
 800585c:	1949      	addeq	r1, r1, r5
 800585e:	6021      	streq	r1, [r4, #0]
 8005860:	6054      	str	r4, [r2, #4]
 8005862:	e7ca      	b.n	80057fa <_free_r+0x26>
 8005864:	b003      	add	sp, #12
 8005866:	bd30      	pop	{r4, r5, pc}
 8005868:	2000012c 	.word	0x2000012c

0800586c <__sfputc_r>:
 800586c:	6893      	ldr	r3, [r2, #8]
 800586e:	3b01      	subs	r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	b410      	push	{r4}
 8005874:	6093      	str	r3, [r2, #8]
 8005876:	da08      	bge.n	800588a <__sfputc_r+0x1e>
 8005878:	6994      	ldr	r4, [r2, #24]
 800587a:	42a3      	cmp	r3, r4
 800587c:	db01      	blt.n	8005882 <__sfputc_r+0x16>
 800587e:	290a      	cmp	r1, #10
 8005880:	d103      	bne.n	800588a <__sfputc_r+0x1e>
 8005882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005886:	f000 badf 	b.w	8005e48 <__swbuf_r>
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	1c58      	adds	r0, r3, #1
 800588e:	6010      	str	r0, [r2, #0]
 8005890:	7019      	strb	r1, [r3, #0]
 8005892:	4608      	mov	r0, r1
 8005894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005898:	4770      	bx	lr

0800589a <__sfputs_r>:
 800589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589c:	4606      	mov	r6, r0
 800589e:	460f      	mov	r7, r1
 80058a0:	4614      	mov	r4, r2
 80058a2:	18d5      	adds	r5, r2, r3
 80058a4:	42ac      	cmp	r4, r5
 80058a6:	d101      	bne.n	80058ac <__sfputs_r+0x12>
 80058a8:	2000      	movs	r0, #0
 80058aa:	e007      	b.n	80058bc <__sfputs_r+0x22>
 80058ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b0:	463a      	mov	r2, r7
 80058b2:	4630      	mov	r0, r6
 80058b4:	f7ff ffda 	bl	800586c <__sfputc_r>
 80058b8:	1c43      	adds	r3, r0, #1
 80058ba:	d1f3      	bne.n	80058a4 <__sfputs_r+0xa>
 80058bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058c0 <_vfiprintf_r>:
 80058c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c4:	460d      	mov	r5, r1
 80058c6:	b09d      	sub	sp, #116	; 0x74
 80058c8:	4614      	mov	r4, r2
 80058ca:	4698      	mov	r8, r3
 80058cc:	4606      	mov	r6, r0
 80058ce:	b118      	cbz	r0, 80058d8 <_vfiprintf_r+0x18>
 80058d0:	6983      	ldr	r3, [r0, #24]
 80058d2:	b90b      	cbnz	r3, 80058d8 <_vfiprintf_r+0x18>
 80058d4:	f000 fc9a 	bl	800620c <__sinit>
 80058d8:	4b89      	ldr	r3, [pc, #548]	; (8005b00 <_vfiprintf_r+0x240>)
 80058da:	429d      	cmp	r5, r3
 80058dc:	d11b      	bne.n	8005916 <_vfiprintf_r+0x56>
 80058de:	6875      	ldr	r5, [r6, #4]
 80058e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058e2:	07d9      	lsls	r1, r3, #31
 80058e4:	d405      	bmi.n	80058f2 <_vfiprintf_r+0x32>
 80058e6:	89ab      	ldrh	r3, [r5, #12]
 80058e8:	059a      	lsls	r2, r3, #22
 80058ea:	d402      	bmi.n	80058f2 <_vfiprintf_r+0x32>
 80058ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058ee:	f000 fd2b 	bl	8006348 <__retarget_lock_acquire_recursive>
 80058f2:	89ab      	ldrh	r3, [r5, #12]
 80058f4:	071b      	lsls	r3, r3, #28
 80058f6:	d501      	bpl.n	80058fc <_vfiprintf_r+0x3c>
 80058f8:	692b      	ldr	r3, [r5, #16]
 80058fa:	b9eb      	cbnz	r3, 8005938 <_vfiprintf_r+0x78>
 80058fc:	4629      	mov	r1, r5
 80058fe:	4630      	mov	r0, r6
 8005900:	f000 faf4 	bl	8005eec <__swsetup_r>
 8005904:	b1c0      	cbz	r0, 8005938 <_vfiprintf_r+0x78>
 8005906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005908:	07dc      	lsls	r4, r3, #31
 800590a:	d50e      	bpl.n	800592a <_vfiprintf_r+0x6a>
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	b01d      	add	sp, #116	; 0x74
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	4b7b      	ldr	r3, [pc, #492]	; (8005b04 <_vfiprintf_r+0x244>)
 8005918:	429d      	cmp	r5, r3
 800591a:	d101      	bne.n	8005920 <_vfiprintf_r+0x60>
 800591c:	68b5      	ldr	r5, [r6, #8]
 800591e:	e7df      	b.n	80058e0 <_vfiprintf_r+0x20>
 8005920:	4b79      	ldr	r3, [pc, #484]	; (8005b08 <_vfiprintf_r+0x248>)
 8005922:	429d      	cmp	r5, r3
 8005924:	bf08      	it	eq
 8005926:	68f5      	ldreq	r5, [r6, #12]
 8005928:	e7da      	b.n	80058e0 <_vfiprintf_r+0x20>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	0598      	lsls	r0, r3, #22
 800592e:	d4ed      	bmi.n	800590c <_vfiprintf_r+0x4c>
 8005930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005932:	f000 fd0a 	bl	800634a <__retarget_lock_release_recursive>
 8005936:	e7e9      	b.n	800590c <_vfiprintf_r+0x4c>
 8005938:	2300      	movs	r3, #0
 800593a:	9309      	str	r3, [sp, #36]	; 0x24
 800593c:	2320      	movs	r3, #32
 800593e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005942:	f8cd 800c 	str.w	r8, [sp, #12]
 8005946:	2330      	movs	r3, #48	; 0x30
 8005948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005b0c <_vfiprintf_r+0x24c>
 800594c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005950:	f04f 0901 	mov.w	r9, #1
 8005954:	4623      	mov	r3, r4
 8005956:	469a      	mov	sl, r3
 8005958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800595c:	b10a      	cbz	r2, 8005962 <_vfiprintf_r+0xa2>
 800595e:	2a25      	cmp	r2, #37	; 0x25
 8005960:	d1f9      	bne.n	8005956 <_vfiprintf_r+0x96>
 8005962:	ebba 0b04 	subs.w	fp, sl, r4
 8005966:	d00b      	beq.n	8005980 <_vfiprintf_r+0xc0>
 8005968:	465b      	mov	r3, fp
 800596a:	4622      	mov	r2, r4
 800596c:	4629      	mov	r1, r5
 800596e:	4630      	mov	r0, r6
 8005970:	f7ff ff93 	bl	800589a <__sfputs_r>
 8005974:	3001      	adds	r0, #1
 8005976:	f000 80aa 	beq.w	8005ace <_vfiprintf_r+0x20e>
 800597a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800597c:	445a      	add	r2, fp
 800597e:	9209      	str	r2, [sp, #36]	; 0x24
 8005980:	f89a 3000 	ldrb.w	r3, [sl]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a2 	beq.w	8005ace <_vfiprintf_r+0x20e>
 800598a:	2300      	movs	r3, #0
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005994:	f10a 0a01 	add.w	sl, sl, #1
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	9307      	str	r3, [sp, #28]
 800599c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059a0:	931a      	str	r3, [sp, #104]	; 0x68
 80059a2:	4654      	mov	r4, sl
 80059a4:	2205      	movs	r2, #5
 80059a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059aa:	4858      	ldr	r0, [pc, #352]	; (8005b0c <_vfiprintf_r+0x24c>)
 80059ac:	f7fa fc18 	bl	80001e0 <memchr>
 80059b0:	9a04      	ldr	r2, [sp, #16]
 80059b2:	b9d8      	cbnz	r0, 80059ec <_vfiprintf_r+0x12c>
 80059b4:	06d1      	lsls	r1, r2, #27
 80059b6:	bf44      	itt	mi
 80059b8:	2320      	movmi	r3, #32
 80059ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059be:	0713      	lsls	r3, r2, #28
 80059c0:	bf44      	itt	mi
 80059c2:	232b      	movmi	r3, #43	; 0x2b
 80059c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c8:	f89a 3000 	ldrb.w	r3, [sl]
 80059cc:	2b2a      	cmp	r3, #42	; 0x2a
 80059ce:	d015      	beq.n	80059fc <_vfiprintf_r+0x13c>
 80059d0:	9a07      	ldr	r2, [sp, #28]
 80059d2:	4654      	mov	r4, sl
 80059d4:	2000      	movs	r0, #0
 80059d6:	f04f 0c0a 	mov.w	ip, #10
 80059da:	4621      	mov	r1, r4
 80059dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059e0:	3b30      	subs	r3, #48	; 0x30
 80059e2:	2b09      	cmp	r3, #9
 80059e4:	d94e      	bls.n	8005a84 <_vfiprintf_r+0x1c4>
 80059e6:	b1b0      	cbz	r0, 8005a16 <_vfiprintf_r+0x156>
 80059e8:	9207      	str	r2, [sp, #28]
 80059ea:	e014      	b.n	8005a16 <_vfiprintf_r+0x156>
 80059ec:	eba0 0308 	sub.w	r3, r0, r8
 80059f0:	fa09 f303 	lsl.w	r3, r9, r3
 80059f4:	4313      	orrs	r3, r2
 80059f6:	9304      	str	r3, [sp, #16]
 80059f8:	46a2      	mov	sl, r4
 80059fa:	e7d2      	b.n	80059a2 <_vfiprintf_r+0xe2>
 80059fc:	9b03      	ldr	r3, [sp, #12]
 80059fe:	1d19      	adds	r1, r3, #4
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	9103      	str	r1, [sp, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bfbb      	ittet	lt
 8005a08:	425b      	neglt	r3, r3
 8005a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0e:	9307      	strge	r3, [sp, #28]
 8005a10:	9307      	strlt	r3, [sp, #28]
 8005a12:	bfb8      	it	lt
 8005a14:	9204      	strlt	r2, [sp, #16]
 8005a16:	7823      	ldrb	r3, [r4, #0]
 8005a18:	2b2e      	cmp	r3, #46	; 0x2e
 8005a1a:	d10c      	bne.n	8005a36 <_vfiprintf_r+0x176>
 8005a1c:	7863      	ldrb	r3, [r4, #1]
 8005a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8005a20:	d135      	bne.n	8005a8e <_vfiprintf_r+0x1ce>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	1d1a      	adds	r2, r3, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	9203      	str	r2, [sp, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfb8      	it	lt
 8005a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a32:	3402      	adds	r4, #2
 8005a34:	9305      	str	r3, [sp, #20]
 8005a36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005b1c <_vfiprintf_r+0x25c>
 8005a3a:	7821      	ldrb	r1, [r4, #0]
 8005a3c:	2203      	movs	r2, #3
 8005a3e:	4650      	mov	r0, sl
 8005a40:	f7fa fbce 	bl	80001e0 <memchr>
 8005a44:	b140      	cbz	r0, 8005a58 <_vfiprintf_r+0x198>
 8005a46:	2340      	movs	r3, #64	; 0x40
 8005a48:	eba0 000a 	sub.w	r0, r0, sl
 8005a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8005a50:	9b04      	ldr	r3, [sp, #16]
 8005a52:	4303      	orrs	r3, r0
 8005a54:	3401      	adds	r4, #1
 8005a56:	9304      	str	r3, [sp, #16]
 8005a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a5c:	482c      	ldr	r0, [pc, #176]	; (8005b10 <_vfiprintf_r+0x250>)
 8005a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a62:	2206      	movs	r2, #6
 8005a64:	f7fa fbbc 	bl	80001e0 <memchr>
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d03f      	beq.n	8005aec <_vfiprintf_r+0x22c>
 8005a6c:	4b29      	ldr	r3, [pc, #164]	; (8005b14 <_vfiprintf_r+0x254>)
 8005a6e:	bb1b      	cbnz	r3, 8005ab8 <_vfiprintf_r+0x1f8>
 8005a70:	9b03      	ldr	r3, [sp, #12]
 8005a72:	3307      	adds	r3, #7
 8005a74:	f023 0307 	bic.w	r3, r3, #7
 8005a78:	3308      	adds	r3, #8
 8005a7a:	9303      	str	r3, [sp, #12]
 8005a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a7e:	443b      	add	r3, r7
 8005a80:	9309      	str	r3, [sp, #36]	; 0x24
 8005a82:	e767      	b.n	8005954 <_vfiprintf_r+0x94>
 8005a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a88:	460c      	mov	r4, r1
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	e7a5      	b.n	80059da <_vfiprintf_r+0x11a>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	3401      	adds	r4, #1
 8005a92:	9305      	str	r3, [sp, #20]
 8005a94:	4619      	mov	r1, r3
 8005a96:	f04f 0c0a 	mov.w	ip, #10
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005aa0:	3a30      	subs	r2, #48	; 0x30
 8005aa2:	2a09      	cmp	r2, #9
 8005aa4:	d903      	bls.n	8005aae <_vfiprintf_r+0x1ee>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d0c5      	beq.n	8005a36 <_vfiprintf_r+0x176>
 8005aaa:	9105      	str	r1, [sp, #20]
 8005aac:	e7c3      	b.n	8005a36 <_vfiprintf_r+0x176>
 8005aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e7f0      	b.n	8005a9a <_vfiprintf_r+0x1da>
 8005ab8:	ab03      	add	r3, sp, #12
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	462a      	mov	r2, r5
 8005abe:	4b16      	ldr	r3, [pc, #88]	; (8005b18 <_vfiprintf_r+0x258>)
 8005ac0:	a904      	add	r1, sp, #16
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f3af 8000 	nop.w
 8005ac8:	4607      	mov	r7, r0
 8005aca:	1c78      	adds	r0, r7, #1
 8005acc:	d1d6      	bne.n	8005a7c <_vfiprintf_r+0x1bc>
 8005ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ad0:	07d9      	lsls	r1, r3, #31
 8005ad2:	d405      	bmi.n	8005ae0 <_vfiprintf_r+0x220>
 8005ad4:	89ab      	ldrh	r3, [r5, #12]
 8005ad6:	059a      	lsls	r2, r3, #22
 8005ad8:	d402      	bmi.n	8005ae0 <_vfiprintf_r+0x220>
 8005ada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005adc:	f000 fc35 	bl	800634a <__retarget_lock_release_recursive>
 8005ae0:	89ab      	ldrh	r3, [r5, #12]
 8005ae2:	065b      	lsls	r3, r3, #25
 8005ae4:	f53f af12 	bmi.w	800590c <_vfiprintf_r+0x4c>
 8005ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005aea:	e711      	b.n	8005910 <_vfiprintf_r+0x50>
 8005aec:	ab03      	add	r3, sp, #12
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	462a      	mov	r2, r5
 8005af2:	4b09      	ldr	r3, [pc, #36]	; (8005b18 <_vfiprintf_r+0x258>)
 8005af4:	a904      	add	r1, sp, #16
 8005af6:	4630      	mov	r0, r6
 8005af8:	f000 f880 	bl	8005bfc <_printf_i>
 8005afc:	e7e4      	b.n	8005ac8 <_vfiprintf_r+0x208>
 8005afe:	bf00      	nop
 8005b00:	080068c8 	.word	0x080068c8
 8005b04:	080068e8 	.word	0x080068e8
 8005b08:	080068a8 	.word	0x080068a8
 8005b0c:	08006872 	.word	0x08006872
 8005b10:	0800687c 	.word	0x0800687c
 8005b14:	00000000 	.word	0x00000000
 8005b18:	0800589b 	.word	0x0800589b
 8005b1c:	08006878 	.word	0x08006878

08005b20 <_printf_common>:
 8005b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b24:	4616      	mov	r6, r2
 8005b26:	4699      	mov	r9, r3
 8005b28:	688a      	ldr	r2, [r1, #8]
 8005b2a:	690b      	ldr	r3, [r1, #16]
 8005b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b30:	4293      	cmp	r3, r2
 8005b32:	bfb8      	it	lt
 8005b34:	4613      	movlt	r3, r2
 8005b36:	6033      	str	r3, [r6, #0]
 8005b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b3c:	4607      	mov	r7, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	b10a      	cbz	r2, 8005b46 <_printf_common+0x26>
 8005b42:	3301      	adds	r3, #1
 8005b44:	6033      	str	r3, [r6, #0]
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	0699      	lsls	r1, r3, #26
 8005b4a:	bf42      	ittt	mi
 8005b4c:	6833      	ldrmi	r3, [r6, #0]
 8005b4e:	3302      	addmi	r3, #2
 8005b50:	6033      	strmi	r3, [r6, #0]
 8005b52:	6825      	ldr	r5, [r4, #0]
 8005b54:	f015 0506 	ands.w	r5, r5, #6
 8005b58:	d106      	bne.n	8005b68 <_printf_common+0x48>
 8005b5a:	f104 0a19 	add.w	sl, r4, #25
 8005b5e:	68e3      	ldr	r3, [r4, #12]
 8005b60:	6832      	ldr	r2, [r6, #0]
 8005b62:	1a9b      	subs	r3, r3, r2
 8005b64:	42ab      	cmp	r3, r5
 8005b66:	dc26      	bgt.n	8005bb6 <_printf_common+0x96>
 8005b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b6c:	1e13      	subs	r3, r2, #0
 8005b6e:	6822      	ldr	r2, [r4, #0]
 8005b70:	bf18      	it	ne
 8005b72:	2301      	movne	r3, #1
 8005b74:	0692      	lsls	r2, r2, #26
 8005b76:	d42b      	bmi.n	8005bd0 <_printf_common+0xb0>
 8005b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c0      	blx	r8
 8005b82:	3001      	adds	r0, #1
 8005b84:	d01e      	beq.n	8005bc4 <_printf_common+0xa4>
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	68e5      	ldr	r5, [r4, #12]
 8005b8a:	6832      	ldr	r2, [r6, #0]
 8005b8c:	f003 0306 	and.w	r3, r3, #6
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	bf08      	it	eq
 8005b94:	1aad      	subeq	r5, r5, r2
 8005b96:	68a3      	ldr	r3, [r4, #8]
 8005b98:	6922      	ldr	r2, [r4, #16]
 8005b9a:	bf0c      	ite	eq
 8005b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ba0:	2500      	movne	r5, #0
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	bfc4      	itt	gt
 8005ba6:	1a9b      	subgt	r3, r3, r2
 8005ba8:	18ed      	addgt	r5, r5, r3
 8005baa:	2600      	movs	r6, #0
 8005bac:	341a      	adds	r4, #26
 8005bae:	42b5      	cmp	r5, r6
 8005bb0:	d11a      	bne.n	8005be8 <_printf_common+0xc8>
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	e008      	b.n	8005bc8 <_printf_common+0xa8>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	4652      	mov	r2, sl
 8005bba:	4649      	mov	r1, r9
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	47c0      	blx	r8
 8005bc0:	3001      	adds	r0, #1
 8005bc2:	d103      	bne.n	8005bcc <_printf_common+0xac>
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bcc:	3501      	adds	r5, #1
 8005bce:	e7c6      	b.n	8005b5e <_printf_common+0x3e>
 8005bd0:	18e1      	adds	r1, r4, r3
 8005bd2:	1c5a      	adds	r2, r3, #1
 8005bd4:	2030      	movs	r0, #48	; 0x30
 8005bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bda:	4422      	add	r2, r4
 8005bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005be4:	3302      	adds	r3, #2
 8005be6:	e7c7      	b.n	8005b78 <_printf_common+0x58>
 8005be8:	2301      	movs	r3, #1
 8005bea:	4622      	mov	r2, r4
 8005bec:	4649      	mov	r1, r9
 8005bee:	4638      	mov	r0, r7
 8005bf0:	47c0      	blx	r8
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	d0e6      	beq.n	8005bc4 <_printf_common+0xa4>
 8005bf6:	3601      	adds	r6, #1
 8005bf8:	e7d9      	b.n	8005bae <_printf_common+0x8e>
	...

08005bfc <_printf_i>:
 8005bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	7e0f      	ldrb	r7, [r1, #24]
 8005c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005c04:	2f78      	cmp	r7, #120	; 0x78
 8005c06:	4691      	mov	r9, r2
 8005c08:	4680      	mov	r8, r0
 8005c0a:	460c      	mov	r4, r1
 8005c0c:	469a      	mov	sl, r3
 8005c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005c12:	d807      	bhi.n	8005c24 <_printf_i+0x28>
 8005c14:	2f62      	cmp	r7, #98	; 0x62
 8005c16:	d80a      	bhi.n	8005c2e <_printf_i+0x32>
 8005c18:	2f00      	cmp	r7, #0
 8005c1a:	f000 80d8 	beq.w	8005dce <_printf_i+0x1d2>
 8005c1e:	2f58      	cmp	r7, #88	; 0x58
 8005c20:	f000 80a3 	beq.w	8005d6a <_printf_i+0x16e>
 8005c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c2c:	e03a      	b.n	8005ca4 <_printf_i+0xa8>
 8005c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c32:	2b15      	cmp	r3, #21
 8005c34:	d8f6      	bhi.n	8005c24 <_printf_i+0x28>
 8005c36:	a101      	add	r1, pc, #4	; (adr r1, 8005c3c <_printf_i+0x40>)
 8005c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c3c:	08005c95 	.word	0x08005c95
 8005c40:	08005ca9 	.word	0x08005ca9
 8005c44:	08005c25 	.word	0x08005c25
 8005c48:	08005c25 	.word	0x08005c25
 8005c4c:	08005c25 	.word	0x08005c25
 8005c50:	08005c25 	.word	0x08005c25
 8005c54:	08005ca9 	.word	0x08005ca9
 8005c58:	08005c25 	.word	0x08005c25
 8005c5c:	08005c25 	.word	0x08005c25
 8005c60:	08005c25 	.word	0x08005c25
 8005c64:	08005c25 	.word	0x08005c25
 8005c68:	08005db5 	.word	0x08005db5
 8005c6c:	08005cd9 	.word	0x08005cd9
 8005c70:	08005d97 	.word	0x08005d97
 8005c74:	08005c25 	.word	0x08005c25
 8005c78:	08005c25 	.word	0x08005c25
 8005c7c:	08005dd7 	.word	0x08005dd7
 8005c80:	08005c25 	.word	0x08005c25
 8005c84:	08005cd9 	.word	0x08005cd9
 8005c88:	08005c25 	.word	0x08005c25
 8005c8c:	08005c25 	.word	0x08005c25
 8005c90:	08005d9f 	.word	0x08005d9f
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	1d1a      	adds	r2, r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	602a      	str	r2, [r5, #0]
 8005c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e0a3      	b.n	8005df0 <_printf_i+0x1f4>
 8005ca8:	6820      	ldr	r0, [r4, #0]
 8005caa:	6829      	ldr	r1, [r5, #0]
 8005cac:	0606      	lsls	r6, r0, #24
 8005cae:	f101 0304 	add.w	r3, r1, #4
 8005cb2:	d50a      	bpl.n	8005cca <_printf_i+0xce>
 8005cb4:	680e      	ldr	r6, [r1, #0]
 8005cb6:	602b      	str	r3, [r5, #0]
 8005cb8:	2e00      	cmp	r6, #0
 8005cba:	da03      	bge.n	8005cc4 <_printf_i+0xc8>
 8005cbc:	232d      	movs	r3, #45	; 0x2d
 8005cbe:	4276      	negs	r6, r6
 8005cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cc4:	485e      	ldr	r0, [pc, #376]	; (8005e40 <_printf_i+0x244>)
 8005cc6:	230a      	movs	r3, #10
 8005cc8:	e019      	b.n	8005cfe <_printf_i+0x102>
 8005cca:	680e      	ldr	r6, [r1, #0]
 8005ccc:	602b      	str	r3, [r5, #0]
 8005cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cd2:	bf18      	it	ne
 8005cd4:	b236      	sxthne	r6, r6
 8005cd6:	e7ef      	b.n	8005cb8 <_printf_i+0xbc>
 8005cd8:	682b      	ldr	r3, [r5, #0]
 8005cda:	6820      	ldr	r0, [r4, #0]
 8005cdc:	1d19      	adds	r1, r3, #4
 8005cde:	6029      	str	r1, [r5, #0]
 8005ce0:	0601      	lsls	r1, r0, #24
 8005ce2:	d501      	bpl.n	8005ce8 <_printf_i+0xec>
 8005ce4:	681e      	ldr	r6, [r3, #0]
 8005ce6:	e002      	b.n	8005cee <_printf_i+0xf2>
 8005ce8:	0646      	lsls	r6, r0, #25
 8005cea:	d5fb      	bpl.n	8005ce4 <_printf_i+0xe8>
 8005cec:	881e      	ldrh	r6, [r3, #0]
 8005cee:	4854      	ldr	r0, [pc, #336]	; (8005e40 <_printf_i+0x244>)
 8005cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8005cf2:	bf0c      	ite	eq
 8005cf4:	2308      	moveq	r3, #8
 8005cf6:	230a      	movne	r3, #10
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cfe:	6865      	ldr	r5, [r4, #4]
 8005d00:	60a5      	str	r5, [r4, #8]
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	bfa2      	ittt	ge
 8005d06:	6821      	ldrge	r1, [r4, #0]
 8005d08:	f021 0104 	bicge.w	r1, r1, #4
 8005d0c:	6021      	strge	r1, [r4, #0]
 8005d0e:	b90e      	cbnz	r6, 8005d14 <_printf_i+0x118>
 8005d10:	2d00      	cmp	r5, #0
 8005d12:	d04d      	beq.n	8005db0 <_printf_i+0x1b4>
 8005d14:	4615      	mov	r5, r2
 8005d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8005d1e:	5dc7      	ldrb	r7, [r0, r7]
 8005d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d24:	4637      	mov	r7, r6
 8005d26:	42bb      	cmp	r3, r7
 8005d28:	460e      	mov	r6, r1
 8005d2a:	d9f4      	bls.n	8005d16 <_printf_i+0x11a>
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d10b      	bne.n	8005d48 <_printf_i+0x14c>
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	07de      	lsls	r6, r3, #31
 8005d34:	d508      	bpl.n	8005d48 <_printf_i+0x14c>
 8005d36:	6923      	ldr	r3, [r4, #16]
 8005d38:	6861      	ldr	r1, [r4, #4]
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	bfde      	ittt	le
 8005d3e:	2330      	movle	r3, #48	; 0x30
 8005d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d48:	1b52      	subs	r2, r2, r5
 8005d4a:	6122      	str	r2, [r4, #16]
 8005d4c:	f8cd a000 	str.w	sl, [sp]
 8005d50:	464b      	mov	r3, r9
 8005d52:	aa03      	add	r2, sp, #12
 8005d54:	4621      	mov	r1, r4
 8005d56:	4640      	mov	r0, r8
 8005d58:	f7ff fee2 	bl	8005b20 <_printf_common>
 8005d5c:	3001      	adds	r0, #1
 8005d5e:	d14c      	bne.n	8005dfa <_printf_i+0x1fe>
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	b004      	add	sp, #16
 8005d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d6a:	4835      	ldr	r0, [pc, #212]	; (8005e40 <_printf_i+0x244>)
 8005d6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005d70:	6829      	ldr	r1, [r5, #0]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d78:	6029      	str	r1, [r5, #0]
 8005d7a:	061d      	lsls	r5, r3, #24
 8005d7c:	d514      	bpl.n	8005da8 <_printf_i+0x1ac>
 8005d7e:	07df      	lsls	r7, r3, #31
 8005d80:	bf44      	itt	mi
 8005d82:	f043 0320 	orrmi.w	r3, r3, #32
 8005d86:	6023      	strmi	r3, [r4, #0]
 8005d88:	b91e      	cbnz	r6, 8005d92 <_printf_i+0x196>
 8005d8a:	6823      	ldr	r3, [r4, #0]
 8005d8c:	f023 0320 	bic.w	r3, r3, #32
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	2310      	movs	r3, #16
 8005d94:	e7b0      	b.n	8005cf8 <_printf_i+0xfc>
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	f043 0320 	orr.w	r3, r3, #32
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	2378      	movs	r3, #120	; 0x78
 8005da0:	4828      	ldr	r0, [pc, #160]	; (8005e44 <_printf_i+0x248>)
 8005da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005da6:	e7e3      	b.n	8005d70 <_printf_i+0x174>
 8005da8:	0659      	lsls	r1, r3, #25
 8005daa:	bf48      	it	mi
 8005dac:	b2b6      	uxthmi	r6, r6
 8005dae:	e7e6      	b.n	8005d7e <_printf_i+0x182>
 8005db0:	4615      	mov	r5, r2
 8005db2:	e7bb      	b.n	8005d2c <_printf_i+0x130>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	6826      	ldr	r6, [r4, #0]
 8005db8:	6961      	ldr	r1, [r4, #20]
 8005dba:	1d18      	adds	r0, r3, #4
 8005dbc:	6028      	str	r0, [r5, #0]
 8005dbe:	0635      	lsls	r5, r6, #24
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	d501      	bpl.n	8005dc8 <_printf_i+0x1cc>
 8005dc4:	6019      	str	r1, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <_printf_i+0x1d2>
 8005dc8:	0670      	lsls	r0, r6, #25
 8005dca:	d5fb      	bpl.n	8005dc4 <_printf_i+0x1c8>
 8005dcc:	8019      	strh	r1, [r3, #0]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	6123      	str	r3, [r4, #16]
 8005dd2:	4615      	mov	r5, r2
 8005dd4:	e7ba      	b.n	8005d4c <_printf_i+0x150>
 8005dd6:	682b      	ldr	r3, [r5, #0]
 8005dd8:	1d1a      	adds	r2, r3, #4
 8005dda:	602a      	str	r2, [r5, #0]
 8005ddc:	681d      	ldr	r5, [r3, #0]
 8005dde:	6862      	ldr	r2, [r4, #4]
 8005de0:	2100      	movs	r1, #0
 8005de2:	4628      	mov	r0, r5
 8005de4:	f7fa f9fc 	bl	80001e0 <memchr>
 8005de8:	b108      	cbz	r0, 8005dee <_printf_i+0x1f2>
 8005dea:	1b40      	subs	r0, r0, r5
 8005dec:	6060      	str	r0, [r4, #4]
 8005dee:	6863      	ldr	r3, [r4, #4]
 8005df0:	6123      	str	r3, [r4, #16]
 8005df2:	2300      	movs	r3, #0
 8005df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005df8:	e7a8      	b.n	8005d4c <_printf_i+0x150>
 8005dfa:	6923      	ldr	r3, [r4, #16]
 8005dfc:	462a      	mov	r2, r5
 8005dfe:	4649      	mov	r1, r9
 8005e00:	4640      	mov	r0, r8
 8005e02:	47d0      	blx	sl
 8005e04:	3001      	adds	r0, #1
 8005e06:	d0ab      	beq.n	8005d60 <_printf_i+0x164>
 8005e08:	6823      	ldr	r3, [r4, #0]
 8005e0a:	079b      	lsls	r3, r3, #30
 8005e0c:	d413      	bmi.n	8005e36 <_printf_i+0x23a>
 8005e0e:	68e0      	ldr	r0, [r4, #12]
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	4298      	cmp	r0, r3
 8005e14:	bfb8      	it	lt
 8005e16:	4618      	movlt	r0, r3
 8005e18:	e7a4      	b.n	8005d64 <_printf_i+0x168>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4640      	mov	r0, r8
 8005e22:	47d0      	blx	sl
 8005e24:	3001      	adds	r0, #1
 8005e26:	d09b      	beq.n	8005d60 <_printf_i+0x164>
 8005e28:	3501      	adds	r5, #1
 8005e2a:	68e3      	ldr	r3, [r4, #12]
 8005e2c:	9903      	ldr	r1, [sp, #12]
 8005e2e:	1a5b      	subs	r3, r3, r1
 8005e30:	42ab      	cmp	r3, r5
 8005e32:	dcf2      	bgt.n	8005e1a <_printf_i+0x21e>
 8005e34:	e7eb      	b.n	8005e0e <_printf_i+0x212>
 8005e36:	2500      	movs	r5, #0
 8005e38:	f104 0619 	add.w	r6, r4, #25
 8005e3c:	e7f5      	b.n	8005e2a <_printf_i+0x22e>
 8005e3e:	bf00      	nop
 8005e40:	08006883 	.word	0x08006883
 8005e44:	08006894 	.word	0x08006894

08005e48 <__swbuf_r>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	460e      	mov	r6, r1
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	4605      	mov	r5, r0
 8005e50:	b118      	cbz	r0, 8005e5a <__swbuf_r+0x12>
 8005e52:	6983      	ldr	r3, [r0, #24]
 8005e54:	b90b      	cbnz	r3, 8005e5a <__swbuf_r+0x12>
 8005e56:	f000 f9d9 	bl	800620c <__sinit>
 8005e5a:	4b21      	ldr	r3, [pc, #132]	; (8005ee0 <__swbuf_r+0x98>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d12b      	bne.n	8005eb8 <__swbuf_r+0x70>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	69a3      	ldr	r3, [r4, #24]
 8005e64:	60a3      	str	r3, [r4, #8]
 8005e66:	89a3      	ldrh	r3, [r4, #12]
 8005e68:	071a      	lsls	r2, r3, #28
 8005e6a:	d52f      	bpl.n	8005ecc <__swbuf_r+0x84>
 8005e6c:	6923      	ldr	r3, [r4, #16]
 8005e6e:	b36b      	cbz	r3, 8005ecc <__swbuf_r+0x84>
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	6820      	ldr	r0, [r4, #0]
 8005e74:	1ac0      	subs	r0, r0, r3
 8005e76:	6963      	ldr	r3, [r4, #20]
 8005e78:	b2f6      	uxtb	r6, r6
 8005e7a:	4283      	cmp	r3, r0
 8005e7c:	4637      	mov	r7, r6
 8005e7e:	dc04      	bgt.n	8005e8a <__swbuf_r+0x42>
 8005e80:	4621      	mov	r1, r4
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 f92e 	bl	80060e4 <_fflush_r>
 8005e88:	bb30      	cbnz	r0, 8005ed8 <__swbuf_r+0x90>
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	60a3      	str	r3, [r4, #8]
 8005e90:	6823      	ldr	r3, [r4, #0]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	6022      	str	r2, [r4, #0]
 8005e96:	701e      	strb	r6, [r3, #0]
 8005e98:	6963      	ldr	r3, [r4, #20]
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	4283      	cmp	r3, r0
 8005e9e:	d004      	beq.n	8005eaa <__swbuf_r+0x62>
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	07db      	lsls	r3, r3, #31
 8005ea4:	d506      	bpl.n	8005eb4 <__swbuf_r+0x6c>
 8005ea6:	2e0a      	cmp	r6, #10
 8005ea8:	d104      	bne.n	8005eb4 <__swbuf_r+0x6c>
 8005eaa:	4621      	mov	r1, r4
 8005eac:	4628      	mov	r0, r5
 8005eae:	f000 f919 	bl	80060e4 <_fflush_r>
 8005eb2:	b988      	cbnz	r0, 8005ed8 <__swbuf_r+0x90>
 8005eb4:	4638      	mov	r0, r7
 8005eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb8:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <__swbuf_r+0x9c>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d101      	bne.n	8005ec2 <__swbuf_r+0x7a>
 8005ebe:	68ac      	ldr	r4, [r5, #8]
 8005ec0:	e7cf      	b.n	8005e62 <__swbuf_r+0x1a>
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <__swbuf_r+0xa0>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	bf08      	it	eq
 8005ec8:	68ec      	ldreq	r4, [r5, #12]
 8005eca:	e7ca      	b.n	8005e62 <__swbuf_r+0x1a>
 8005ecc:	4621      	mov	r1, r4
 8005ece:	4628      	mov	r0, r5
 8005ed0:	f000 f80c 	bl	8005eec <__swsetup_r>
 8005ed4:	2800      	cmp	r0, #0
 8005ed6:	d0cb      	beq.n	8005e70 <__swbuf_r+0x28>
 8005ed8:	f04f 37ff 	mov.w	r7, #4294967295
 8005edc:	e7ea      	b.n	8005eb4 <__swbuf_r+0x6c>
 8005ede:	bf00      	nop
 8005ee0:	080068c8 	.word	0x080068c8
 8005ee4:	080068e8 	.word	0x080068e8
 8005ee8:	080068a8 	.word	0x080068a8

08005eec <__swsetup_r>:
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <__swsetup_r+0xcc>)
 8005eee:	b570      	push	{r4, r5, r6, lr}
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	4606      	mov	r6, r0
 8005ef4:	460c      	mov	r4, r1
 8005ef6:	b125      	cbz	r5, 8005f02 <__swsetup_r+0x16>
 8005ef8:	69ab      	ldr	r3, [r5, #24]
 8005efa:	b913      	cbnz	r3, 8005f02 <__swsetup_r+0x16>
 8005efc:	4628      	mov	r0, r5
 8005efe:	f000 f985 	bl	800620c <__sinit>
 8005f02:	4b2e      	ldr	r3, [pc, #184]	; (8005fbc <__swsetup_r+0xd0>)
 8005f04:	429c      	cmp	r4, r3
 8005f06:	d10f      	bne.n	8005f28 <__swsetup_r+0x3c>
 8005f08:	686c      	ldr	r4, [r5, #4]
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f10:	0719      	lsls	r1, r3, #28
 8005f12:	d42c      	bmi.n	8005f6e <__swsetup_r+0x82>
 8005f14:	06dd      	lsls	r5, r3, #27
 8005f16:	d411      	bmi.n	8005f3c <__swsetup_r+0x50>
 8005f18:	2309      	movs	r3, #9
 8005f1a:	6033      	str	r3, [r6, #0]
 8005f1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f20:	81a3      	strh	r3, [r4, #12]
 8005f22:	f04f 30ff 	mov.w	r0, #4294967295
 8005f26:	e03e      	b.n	8005fa6 <__swsetup_r+0xba>
 8005f28:	4b25      	ldr	r3, [pc, #148]	; (8005fc0 <__swsetup_r+0xd4>)
 8005f2a:	429c      	cmp	r4, r3
 8005f2c:	d101      	bne.n	8005f32 <__swsetup_r+0x46>
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	e7eb      	b.n	8005f0a <__swsetup_r+0x1e>
 8005f32:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <__swsetup_r+0xd8>)
 8005f34:	429c      	cmp	r4, r3
 8005f36:	bf08      	it	eq
 8005f38:	68ec      	ldreq	r4, [r5, #12]
 8005f3a:	e7e6      	b.n	8005f0a <__swsetup_r+0x1e>
 8005f3c:	0758      	lsls	r0, r3, #29
 8005f3e:	d512      	bpl.n	8005f66 <__swsetup_r+0x7a>
 8005f40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f42:	b141      	cbz	r1, 8005f56 <__swsetup_r+0x6a>
 8005f44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	d002      	beq.n	8005f52 <__swsetup_r+0x66>
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	f7ff fc41 	bl	80057d4 <_free_r>
 8005f52:	2300      	movs	r3, #0
 8005f54:	6363      	str	r3, [r4, #52]	; 0x34
 8005f56:	89a3      	ldrh	r3, [r4, #12]
 8005f58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6063      	str	r3, [r4, #4]
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	89a3      	ldrh	r3, [r4, #12]
 8005f68:	f043 0308 	orr.w	r3, r3, #8
 8005f6c:	81a3      	strh	r3, [r4, #12]
 8005f6e:	6923      	ldr	r3, [r4, #16]
 8005f70:	b94b      	cbnz	r3, 8005f86 <__swsetup_r+0x9a>
 8005f72:	89a3      	ldrh	r3, [r4, #12]
 8005f74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7c:	d003      	beq.n	8005f86 <__swsetup_r+0x9a>
 8005f7e:	4621      	mov	r1, r4
 8005f80:	4630      	mov	r0, r6
 8005f82:	f000 fa09 	bl	8006398 <__smakebuf_r>
 8005f86:	89a0      	ldrh	r0, [r4, #12]
 8005f88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f8c:	f010 0301 	ands.w	r3, r0, #1
 8005f90:	d00a      	beq.n	8005fa8 <__swsetup_r+0xbc>
 8005f92:	2300      	movs	r3, #0
 8005f94:	60a3      	str	r3, [r4, #8]
 8005f96:	6963      	ldr	r3, [r4, #20]
 8005f98:	425b      	negs	r3, r3
 8005f9a:	61a3      	str	r3, [r4, #24]
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	b943      	cbnz	r3, 8005fb2 <__swsetup_r+0xc6>
 8005fa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005fa4:	d1ba      	bne.n	8005f1c <__swsetup_r+0x30>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	0781      	lsls	r1, r0, #30
 8005faa:	bf58      	it	pl
 8005fac:	6963      	ldrpl	r3, [r4, #20]
 8005fae:	60a3      	str	r3, [r4, #8]
 8005fb0:	e7f4      	b.n	8005f9c <__swsetup_r+0xb0>
 8005fb2:	2000      	movs	r0, #0
 8005fb4:	e7f7      	b.n	8005fa6 <__swsetup_r+0xba>
 8005fb6:	bf00      	nop
 8005fb8:	2000000c 	.word	0x2000000c
 8005fbc:	080068c8 	.word	0x080068c8
 8005fc0:	080068e8 	.word	0x080068e8
 8005fc4:	080068a8 	.word	0x080068a8

08005fc8 <abort>:
 8005fc8:	b508      	push	{r3, lr}
 8005fca:	2006      	movs	r0, #6
 8005fcc:	f000 fa4c 	bl	8006468 <raise>
 8005fd0:	2001      	movs	r0, #1
 8005fd2:	f7fb fa1d 	bl	8001410 <_exit>
	...

08005fd8 <__sflush_r>:
 8005fd8:	898a      	ldrh	r2, [r1, #12]
 8005fda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fde:	4605      	mov	r5, r0
 8005fe0:	0710      	lsls	r0, r2, #28
 8005fe2:	460c      	mov	r4, r1
 8005fe4:	d458      	bmi.n	8006098 <__sflush_r+0xc0>
 8005fe6:	684b      	ldr	r3, [r1, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	dc05      	bgt.n	8005ff8 <__sflush_r+0x20>
 8005fec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc02      	bgt.n	8005ff8 <__sflush_r+0x20>
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffa:	2e00      	cmp	r6, #0
 8005ffc:	d0f9      	beq.n	8005ff2 <__sflush_r+0x1a>
 8005ffe:	2300      	movs	r3, #0
 8006000:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006004:	682f      	ldr	r7, [r5, #0]
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	d032      	beq.n	8006070 <__sflush_r+0x98>
 800600a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	075a      	lsls	r2, r3, #29
 8006010:	d505      	bpl.n	800601e <__sflush_r+0x46>
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	1ac0      	subs	r0, r0, r3
 8006016:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006018:	b10b      	cbz	r3, 800601e <__sflush_r+0x46>
 800601a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800601c:	1ac0      	subs	r0, r0, r3
 800601e:	2300      	movs	r3, #0
 8006020:	4602      	mov	r2, r0
 8006022:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006024:	6a21      	ldr	r1, [r4, #32]
 8006026:	4628      	mov	r0, r5
 8006028:	47b0      	blx	r6
 800602a:	1c43      	adds	r3, r0, #1
 800602c:	89a3      	ldrh	r3, [r4, #12]
 800602e:	d106      	bne.n	800603e <__sflush_r+0x66>
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	291d      	cmp	r1, #29
 8006034:	d82c      	bhi.n	8006090 <__sflush_r+0xb8>
 8006036:	4a2a      	ldr	r2, [pc, #168]	; (80060e0 <__sflush_r+0x108>)
 8006038:	40ca      	lsrs	r2, r1
 800603a:	07d6      	lsls	r6, r2, #31
 800603c:	d528      	bpl.n	8006090 <__sflush_r+0xb8>
 800603e:	2200      	movs	r2, #0
 8006040:	6062      	str	r2, [r4, #4]
 8006042:	04d9      	lsls	r1, r3, #19
 8006044:	6922      	ldr	r2, [r4, #16]
 8006046:	6022      	str	r2, [r4, #0]
 8006048:	d504      	bpl.n	8006054 <__sflush_r+0x7c>
 800604a:	1c42      	adds	r2, r0, #1
 800604c:	d101      	bne.n	8006052 <__sflush_r+0x7a>
 800604e:	682b      	ldr	r3, [r5, #0]
 8006050:	b903      	cbnz	r3, 8006054 <__sflush_r+0x7c>
 8006052:	6560      	str	r0, [r4, #84]	; 0x54
 8006054:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006056:	602f      	str	r7, [r5, #0]
 8006058:	2900      	cmp	r1, #0
 800605a:	d0ca      	beq.n	8005ff2 <__sflush_r+0x1a>
 800605c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006060:	4299      	cmp	r1, r3
 8006062:	d002      	beq.n	800606a <__sflush_r+0x92>
 8006064:	4628      	mov	r0, r5
 8006066:	f7ff fbb5 	bl	80057d4 <_free_r>
 800606a:	2000      	movs	r0, #0
 800606c:	6360      	str	r0, [r4, #52]	; 0x34
 800606e:	e7c1      	b.n	8005ff4 <__sflush_r+0x1c>
 8006070:	6a21      	ldr	r1, [r4, #32]
 8006072:	2301      	movs	r3, #1
 8006074:	4628      	mov	r0, r5
 8006076:	47b0      	blx	r6
 8006078:	1c41      	adds	r1, r0, #1
 800607a:	d1c7      	bne.n	800600c <__sflush_r+0x34>
 800607c:	682b      	ldr	r3, [r5, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d0c4      	beq.n	800600c <__sflush_r+0x34>
 8006082:	2b1d      	cmp	r3, #29
 8006084:	d001      	beq.n	800608a <__sflush_r+0xb2>
 8006086:	2b16      	cmp	r3, #22
 8006088:	d101      	bne.n	800608e <__sflush_r+0xb6>
 800608a:	602f      	str	r7, [r5, #0]
 800608c:	e7b1      	b.n	8005ff2 <__sflush_r+0x1a>
 800608e:	89a3      	ldrh	r3, [r4, #12]
 8006090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	e7ad      	b.n	8005ff4 <__sflush_r+0x1c>
 8006098:	690f      	ldr	r7, [r1, #16]
 800609a:	2f00      	cmp	r7, #0
 800609c:	d0a9      	beq.n	8005ff2 <__sflush_r+0x1a>
 800609e:	0793      	lsls	r3, r2, #30
 80060a0:	680e      	ldr	r6, [r1, #0]
 80060a2:	bf08      	it	eq
 80060a4:	694b      	ldreq	r3, [r1, #20]
 80060a6:	600f      	str	r7, [r1, #0]
 80060a8:	bf18      	it	ne
 80060aa:	2300      	movne	r3, #0
 80060ac:	eba6 0807 	sub.w	r8, r6, r7
 80060b0:	608b      	str	r3, [r1, #8]
 80060b2:	f1b8 0f00 	cmp.w	r8, #0
 80060b6:	dd9c      	ble.n	8005ff2 <__sflush_r+0x1a>
 80060b8:	6a21      	ldr	r1, [r4, #32]
 80060ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80060bc:	4643      	mov	r3, r8
 80060be:	463a      	mov	r2, r7
 80060c0:	4628      	mov	r0, r5
 80060c2:	47b0      	blx	r6
 80060c4:	2800      	cmp	r0, #0
 80060c6:	dc06      	bgt.n	80060d6 <__sflush_r+0xfe>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060ce:	81a3      	strh	r3, [r4, #12]
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e78e      	b.n	8005ff4 <__sflush_r+0x1c>
 80060d6:	4407      	add	r7, r0
 80060d8:	eba8 0800 	sub.w	r8, r8, r0
 80060dc:	e7e9      	b.n	80060b2 <__sflush_r+0xda>
 80060de:	bf00      	nop
 80060e0:	20400001 	.word	0x20400001

080060e4 <_fflush_r>:
 80060e4:	b538      	push	{r3, r4, r5, lr}
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	4605      	mov	r5, r0
 80060ea:	460c      	mov	r4, r1
 80060ec:	b913      	cbnz	r3, 80060f4 <_fflush_r+0x10>
 80060ee:	2500      	movs	r5, #0
 80060f0:	4628      	mov	r0, r5
 80060f2:	bd38      	pop	{r3, r4, r5, pc}
 80060f4:	b118      	cbz	r0, 80060fe <_fflush_r+0x1a>
 80060f6:	6983      	ldr	r3, [r0, #24]
 80060f8:	b90b      	cbnz	r3, 80060fe <_fflush_r+0x1a>
 80060fa:	f000 f887 	bl	800620c <__sinit>
 80060fe:	4b14      	ldr	r3, [pc, #80]	; (8006150 <_fflush_r+0x6c>)
 8006100:	429c      	cmp	r4, r3
 8006102:	d11b      	bne.n	800613c <_fflush_r+0x58>
 8006104:	686c      	ldr	r4, [r5, #4]
 8006106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d0ef      	beq.n	80060ee <_fflush_r+0xa>
 800610e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006110:	07d0      	lsls	r0, r2, #31
 8006112:	d404      	bmi.n	800611e <_fflush_r+0x3a>
 8006114:	0599      	lsls	r1, r3, #22
 8006116:	d402      	bmi.n	800611e <_fflush_r+0x3a>
 8006118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800611a:	f000 f915 	bl	8006348 <__retarget_lock_acquire_recursive>
 800611e:	4628      	mov	r0, r5
 8006120:	4621      	mov	r1, r4
 8006122:	f7ff ff59 	bl	8005fd8 <__sflush_r>
 8006126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006128:	07da      	lsls	r2, r3, #31
 800612a:	4605      	mov	r5, r0
 800612c:	d4e0      	bmi.n	80060f0 <_fflush_r+0xc>
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	059b      	lsls	r3, r3, #22
 8006132:	d4dd      	bmi.n	80060f0 <_fflush_r+0xc>
 8006134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006136:	f000 f908 	bl	800634a <__retarget_lock_release_recursive>
 800613a:	e7d9      	b.n	80060f0 <_fflush_r+0xc>
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <_fflush_r+0x70>)
 800613e:	429c      	cmp	r4, r3
 8006140:	d101      	bne.n	8006146 <_fflush_r+0x62>
 8006142:	68ac      	ldr	r4, [r5, #8]
 8006144:	e7df      	b.n	8006106 <_fflush_r+0x22>
 8006146:	4b04      	ldr	r3, [pc, #16]	; (8006158 <_fflush_r+0x74>)
 8006148:	429c      	cmp	r4, r3
 800614a:	bf08      	it	eq
 800614c:	68ec      	ldreq	r4, [r5, #12]
 800614e:	e7da      	b.n	8006106 <_fflush_r+0x22>
 8006150:	080068c8 	.word	0x080068c8
 8006154:	080068e8 	.word	0x080068e8
 8006158:	080068a8 	.word	0x080068a8

0800615c <std>:
 800615c:	2300      	movs	r3, #0
 800615e:	b510      	push	{r4, lr}
 8006160:	4604      	mov	r4, r0
 8006162:	e9c0 3300 	strd	r3, r3, [r0]
 8006166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800616a:	6083      	str	r3, [r0, #8]
 800616c:	8181      	strh	r1, [r0, #12]
 800616e:	6643      	str	r3, [r0, #100]	; 0x64
 8006170:	81c2      	strh	r2, [r0, #14]
 8006172:	6183      	str	r3, [r0, #24]
 8006174:	4619      	mov	r1, r3
 8006176:	2208      	movs	r2, #8
 8006178:	305c      	adds	r0, #92	; 0x5c
 800617a:	f7fd feb9 	bl	8003ef0 <memset>
 800617e:	4b05      	ldr	r3, [pc, #20]	; (8006194 <std+0x38>)
 8006180:	6263      	str	r3, [r4, #36]	; 0x24
 8006182:	4b05      	ldr	r3, [pc, #20]	; (8006198 <std+0x3c>)
 8006184:	62a3      	str	r3, [r4, #40]	; 0x28
 8006186:	4b05      	ldr	r3, [pc, #20]	; (800619c <std+0x40>)
 8006188:	62e3      	str	r3, [r4, #44]	; 0x2c
 800618a:	4b05      	ldr	r3, [pc, #20]	; (80061a0 <std+0x44>)
 800618c:	6224      	str	r4, [r4, #32]
 800618e:	6323      	str	r3, [r4, #48]	; 0x30
 8006190:	bd10      	pop	{r4, pc}
 8006192:	bf00      	nop
 8006194:	080064a1 	.word	0x080064a1
 8006198:	080064c3 	.word	0x080064c3
 800619c:	080064fb 	.word	0x080064fb
 80061a0:	0800651f 	.word	0x0800651f

080061a4 <_cleanup_r>:
 80061a4:	4901      	ldr	r1, [pc, #4]	; (80061ac <_cleanup_r+0x8>)
 80061a6:	f000 b8af 	b.w	8006308 <_fwalk_reent>
 80061aa:	bf00      	nop
 80061ac:	080060e5 	.word	0x080060e5

080061b0 <__sfmoreglue>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	2268      	movs	r2, #104	; 0x68
 80061b4:	1e4d      	subs	r5, r1, #1
 80061b6:	4355      	muls	r5, r2
 80061b8:	460e      	mov	r6, r1
 80061ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80061be:	f7fe fbaf 	bl	8004920 <_malloc_r>
 80061c2:	4604      	mov	r4, r0
 80061c4:	b140      	cbz	r0, 80061d8 <__sfmoreglue+0x28>
 80061c6:	2100      	movs	r1, #0
 80061c8:	e9c0 1600 	strd	r1, r6, [r0]
 80061cc:	300c      	adds	r0, #12
 80061ce:	60a0      	str	r0, [r4, #8]
 80061d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80061d4:	f7fd fe8c 	bl	8003ef0 <memset>
 80061d8:	4620      	mov	r0, r4
 80061da:	bd70      	pop	{r4, r5, r6, pc}

080061dc <__sfp_lock_acquire>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__sfp_lock_acquire+0x8>)
 80061de:	f000 b8b3 	b.w	8006348 <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	20000139 	.word	0x20000139

080061e8 <__sfp_lock_release>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__sfp_lock_release+0x8>)
 80061ea:	f000 b8ae 	b.w	800634a <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	20000139 	.word	0x20000139

080061f4 <__sinit_lock_acquire>:
 80061f4:	4801      	ldr	r0, [pc, #4]	; (80061fc <__sinit_lock_acquire+0x8>)
 80061f6:	f000 b8a7 	b.w	8006348 <__retarget_lock_acquire_recursive>
 80061fa:	bf00      	nop
 80061fc:	2000013a 	.word	0x2000013a

08006200 <__sinit_lock_release>:
 8006200:	4801      	ldr	r0, [pc, #4]	; (8006208 <__sinit_lock_release+0x8>)
 8006202:	f000 b8a2 	b.w	800634a <__retarget_lock_release_recursive>
 8006206:	bf00      	nop
 8006208:	2000013a 	.word	0x2000013a

0800620c <__sinit>:
 800620c:	b510      	push	{r4, lr}
 800620e:	4604      	mov	r4, r0
 8006210:	f7ff fff0 	bl	80061f4 <__sinit_lock_acquire>
 8006214:	69a3      	ldr	r3, [r4, #24]
 8006216:	b11b      	cbz	r3, 8006220 <__sinit+0x14>
 8006218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800621c:	f7ff bff0 	b.w	8006200 <__sinit_lock_release>
 8006220:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006224:	6523      	str	r3, [r4, #80]	; 0x50
 8006226:	4b13      	ldr	r3, [pc, #76]	; (8006274 <__sinit+0x68>)
 8006228:	4a13      	ldr	r2, [pc, #76]	; (8006278 <__sinit+0x6c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	62a2      	str	r2, [r4, #40]	; 0x28
 800622e:	42a3      	cmp	r3, r4
 8006230:	bf04      	itt	eq
 8006232:	2301      	moveq	r3, #1
 8006234:	61a3      	streq	r3, [r4, #24]
 8006236:	4620      	mov	r0, r4
 8006238:	f000 f820 	bl	800627c <__sfp>
 800623c:	6060      	str	r0, [r4, #4]
 800623e:	4620      	mov	r0, r4
 8006240:	f000 f81c 	bl	800627c <__sfp>
 8006244:	60a0      	str	r0, [r4, #8]
 8006246:	4620      	mov	r0, r4
 8006248:	f000 f818 	bl	800627c <__sfp>
 800624c:	2200      	movs	r2, #0
 800624e:	60e0      	str	r0, [r4, #12]
 8006250:	2104      	movs	r1, #4
 8006252:	6860      	ldr	r0, [r4, #4]
 8006254:	f7ff ff82 	bl	800615c <std>
 8006258:	68a0      	ldr	r0, [r4, #8]
 800625a:	2201      	movs	r2, #1
 800625c:	2109      	movs	r1, #9
 800625e:	f7ff ff7d 	bl	800615c <std>
 8006262:	68e0      	ldr	r0, [r4, #12]
 8006264:	2202      	movs	r2, #2
 8006266:	2112      	movs	r1, #18
 8006268:	f7ff ff78 	bl	800615c <std>
 800626c:	2301      	movs	r3, #1
 800626e:	61a3      	str	r3, [r4, #24]
 8006270:	e7d2      	b.n	8006218 <__sinit+0xc>
 8006272:	bf00      	nop
 8006274:	08006648 	.word	0x08006648
 8006278:	080061a5 	.word	0x080061a5

0800627c <__sfp>:
 800627c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627e:	4607      	mov	r7, r0
 8006280:	f7ff ffac 	bl	80061dc <__sfp_lock_acquire>
 8006284:	4b1e      	ldr	r3, [pc, #120]	; (8006300 <__sfp+0x84>)
 8006286:	681e      	ldr	r6, [r3, #0]
 8006288:	69b3      	ldr	r3, [r6, #24]
 800628a:	b913      	cbnz	r3, 8006292 <__sfp+0x16>
 800628c:	4630      	mov	r0, r6
 800628e:	f7ff ffbd 	bl	800620c <__sinit>
 8006292:	3648      	adds	r6, #72	; 0x48
 8006294:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006298:	3b01      	subs	r3, #1
 800629a:	d503      	bpl.n	80062a4 <__sfp+0x28>
 800629c:	6833      	ldr	r3, [r6, #0]
 800629e:	b30b      	cbz	r3, 80062e4 <__sfp+0x68>
 80062a0:	6836      	ldr	r6, [r6, #0]
 80062a2:	e7f7      	b.n	8006294 <__sfp+0x18>
 80062a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80062a8:	b9d5      	cbnz	r5, 80062e0 <__sfp+0x64>
 80062aa:	4b16      	ldr	r3, [pc, #88]	; (8006304 <__sfp+0x88>)
 80062ac:	60e3      	str	r3, [r4, #12]
 80062ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80062b2:	6665      	str	r5, [r4, #100]	; 0x64
 80062b4:	f000 f847 	bl	8006346 <__retarget_lock_init_recursive>
 80062b8:	f7ff ff96 	bl	80061e8 <__sfp_lock_release>
 80062bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80062c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80062c4:	6025      	str	r5, [r4, #0]
 80062c6:	61a5      	str	r5, [r4, #24]
 80062c8:	2208      	movs	r2, #8
 80062ca:	4629      	mov	r1, r5
 80062cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80062d0:	f7fd fe0e 	bl	8003ef0 <memset>
 80062d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80062d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80062dc:	4620      	mov	r0, r4
 80062de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e0:	3468      	adds	r4, #104	; 0x68
 80062e2:	e7d9      	b.n	8006298 <__sfp+0x1c>
 80062e4:	2104      	movs	r1, #4
 80062e6:	4638      	mov	r0, r7
 80062e8:	f7ff ff62 	bl	80061b0 <__sfmoreglue>
 80062ec:	4604      	mov	r4, r0
 80062ee:	6030      	str	r0, [r6, #0]
 80062f0:	2800      	cmp	r0, #0
 80062f2:	d1d5      	bne.n	80062a0 <__sfp+0x24>
 80062f4:	f7ff ff78 	bl	80061e8 <__sfp_lock_release>
 80062f8:	230c      	movs	r3, #12
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	e7ee      	b.n	80062dc <__sfp+0x60>
 80062fe:	bf00      	nop
 8006300:	08006648 	.word	0x08006648
 8006304:	ffff0001 	.word	0xffff0001

08006308 <_fwalk_reent>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4606      	mov	r6, r0
 800630e:	4688      	mov	r8, r1
 8006310:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006314:	2700      	movs	r7, #0
 8006316:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800631a:	f1b9 0901 	subs.w	r9, r9, #1
 800631e:	d505      	bpl.n	800632c <_fwalk_reent+0x24>
 8006320:	6824      	ldr	r4, [r4, #0]
 8006322:	2c00      	cmp	r4, #0
 8006324:	d1f7      	bne.n	8006316 <_fwalk_reent+0xe>
 8006326:	4638      	mov	r0, r7
 8006328:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632c:	89ab      	ldrh	r3, [r5, #12]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d907      	bls.n	8006342 <_fwalk_reent+0x3a>
 8006332:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006336:	3301      	adds	r3, #1
 8006338:	d003      	beq.n	8006342 <_fwalk_reent+0x3a>
 800633a:	4629      	mov	r1, r5
 800633c:	4630      	mov	r0, r6
 800633e:	47c0      	blx	r8
 8006340:	4307      	orrs	r7, r0
 8006342:	3568      	adds	r5, #104	; 0x68
 8006344:	e7e9      	b.n	800631a <_fwalk_reent+0x12>

08006346 <__retarget_lock_init_recursive>:
 8006346:	4770      	bx	lr

08006348 <__retarget_lock_acquire_recursive>:
 8006348:	4770      	bx	lr

0800634a <__retarget_lock_release_recursive>:
 800634a:	4770      	bx	lr

0800634c <__swhatbuf_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	460e      	mov	r6, r1
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	2900      	cmp	r1, #0
 8006356:	b096      	sub	sp, #88	; 0x58
 8006358:	4614      	mov	r4, r2
 800635a:	461d      	mov	r5, r3
 800635c:	da08      	bge.n	8006370 <__swhatbuf_r+0x24>
 800635e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	602a      	str	r2, [r5, #0]
 8006366:	061a      	lsls	r2, r3, #24
 8006368:	d410      	bmi.n	800638c <__swhatbuf_r+0x40>
 800636a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800636e:	e00e      	b.n	800638e <__swhatbuf_r+0x42>
 8006370:	466a      	mov	r2, sp
 8006372:	f000 f8fb 	bl	800656c <_fstat_r>
 8006376:	2800      	cmp	r0, #0
 8006378:	dbf1      	blt.n	800635e <__swhatbuf_r+0x12>
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006380:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006384:	425a      	negs	r2, r3
 8006386:	415a      	adcs	r2, r3
 8006388:	602a      	str	r2, [r5, #0]
 800638a:	e7ee      	b.n	800636a <__swhatbuf_r+0x1e>
 800638c:	2340      	movs	r3, #64	; 0x40
 800638e:	2000      	movs	r0, #0
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	b016      	add	sp, #88	; 0x58
 8006394:	bd70      	pop	{r4, r5, r6, pc}
	...

08006398 <__smakebuf_r>:
 8006398:	898b      	ldrh	r3, [r1, #12]
 800639a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800639c:	079d      	lsls	r5, r3, #30
 800639e:	4606      	mov	r6, r0
 80063a0:	460c      	mov	r4, r1
 80063a2:	d507      	bpl.n	80063b4 <__smakebuf_r+0x1c>
 80063a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063a8:	6023      	str	r3, [r4, #0]
 80063aa:	6123      	str	r3, [r4, #16]
 80063ac:	2301      	movs	r3, #1
 80063ae:	6163      	str	r3, [r4, #20]
 80063b0:	b002      	add	sp, #8
 80063b2:	bd70      	pop	{r4, r5, r6, pc}
 80063b4:	ab01      	add	r3, sp, #4
 80063b6:	466a      	mov	r2, sp
 80063b8:	f7ff ffc8 	bl	800634c <__swhatbuf_r>
 80063bc:	9900      	ldr	r1, [sp, #0]
 80063be:	4605      	mov	r5, r0
 80063c0:	4630      	mov	r0, r6
 80063c2:	f7fe faad 	bl	8004920 <_malloc_r>
 80063c6:	b948      	cbnz	r0, 80063dc <__smakebuf_r+0x44>
 80063c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063cc:	059a      	lsls	r2, r3, #22
 80063ce:	d4ef      	bmi.n	80063b0 <__smakebuf_r+0x18>
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	e7e3      	b.n	80063a4 <__smakebuf_r+0xc>
 80063dc:	4b0d      	ldr	r3, [pc, #52]	; (8006414 <__smakebuf_r+0x7c>)
 80063de:	62b3      	str	r3, [r6, #40]	; 0x28
 80063e0:	89a3      	ldrh	r3, [r4, #12]
 80063e2:	6020      	str	r0, [r4, #0]
 80063e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	9b00      	ldr	r3, [sp, #0]
 80063ec:	6163      	str	r3, [r4, #20]
 80063ee:	9b01      	ldr	r3, [sp, #4]
 80063f0:	6120      	str	r0, [r4, #16]
 80063f2:	b15b      	cbz	r3, 800640c <__smakebuf_r+0x74>
 80063f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f8:	4630      	mov	r0, r6
 80063fa:	f000 f8c9 	bl	8006590 <_isatty_r>
 80063fe:	b128      	cbz	r0, 800640c <__smakebuf_r+0x74>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0301 	orr.w	r3, r3, #1
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	89a0      	ldrh	r0, [r4, #12]
 800640e:	4305      	orrs	r5, r0
 8006410:	81a5      	strh	r5, [r4, #12]
 8006412:	e7cd      	b.n	80063b0 <__smakebuf_r+0x18>
 8006414:	080061a5 	.word	0x080061a5

08006418 <_raise_r>:
 8006418:	291f      	cmp	r1, #31
 800641a:	b538      	push	{r3, r4, r5, lr}
 800641c:	4604      	mov	r4, r0
 800641e:	460d      	mov	r5, r1
 8006420:	d904      	bls.n	800642c <_raise_r+0x14>
 8006422:	2316      	movs	r3, #22
 8006424:	6003      	str	r3, [r0, #0]
 8006426:	f04f 30ff 	mov.w	r0, #4294967295
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800642e:	b112      	cbz	r2, 8006436 <_raise_r+0x1e>
 8006430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006434:	b94b      	cbnz	r3, 800644a <_raise_r+0x32>
 8006436:	4620      	mov	r0, r4
 8006438:	f000 f830 	bl	800649c <_getpid_r>
 800643c:	462a      	mov	r2, r5
 800643e:	4601      	mov	r1, r0
 8006440:	4620      	mov	r0, r4
 8006442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006446:	f000 b817 	b.w	8006478 <_kill_r>
 800644a:	2b01      	cmp	r3, #1
 800644c:	d00a      	beq.n	8006464 <_raise_r+0x4c>
 800644e:	1c59      	adds	r1, r3, #1
 8006450:	d103      	bne.n	800645a <_raise_r+0x42>
 8006452:	2316      	movs	r3, #22
 8006454:	6003      	str	r3, [r0, #0]
 8006456:	2001      	movs	r0, #1
 8006458:	e7e7      	b.n	800642a <_raise_r+0x12>
 800645a:	2400      	movs	r4, #0
 800645c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006460:	4628      	mov	r0, r5
 8006462:	4798      	blx	r3
 8006464:	2000      	movs	r0, #0
 8006466:	e7e0      	b.n	800642a <_raise_r+0x12>

08006468 <raise>:
 8006468:	4b02      	ldr	r3, [pc, #8]	; (8006474 <raise+0xc>)
 800646a:	4601      	mov	r1, r0
 800646c:	6818      	ldr	r0, [r3, #0]
 800646e:	f7ff bfd3 	b.w	8006418 <_raise_r>
 8006472:	bf00      	nop
 8006474:	2000000c 	.word	0x2000000c

08006478 <_kill_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4d07      	ldr	r5, [pc, #28]	; (8006498 <_kill_r+0x20>)
 800647c:	2300      	movs	r3, #0
 800647e:	4604      	mov	r4, r0
 8006480:	4608      	mov	r0, r1
 8006482:	4611      	mov	r1, r2
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f7fa ffb3 	bl	80013f0 <_kill>
 800648a:	1c43      	adds	r3, r0, #1
 800648c:	d102      	bne.n	8006494 <_kill_r+0x1c>
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	b103      	cbz	r3, 8006494 <_kill_r+0x1c>
 8006492:	6023      	str	r3, [r4, #0]
 8006494:	bd38      	pop	{r3, r4, r5, pc}
 8006496:	bf00      	nop
 8006498:	20000134 	.word	0x20000134

0800649c <_getpid_r>:
 800649c:	f7fa bfa0 	b.w	80013e0 <_getpid>

080064a0 <__sread>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	460c      	mov	r4, r1
 80064a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a8:	f000 f894 	bl	80065d4 <_read_r>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	bfab      	itete	ge
 80064b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80064b2:	89a3      	ldrhlt	r3, [r4, #12]
 80064b4:	181b      	addge	r3, r3, r0
 80064b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80064ba:	bfac      	ite	ge
 80064bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80064be:	81a3      	strhlt	r3, [r4, #12]
 80064c0:	bd10      	pop	{r4, pc}

080064c2 <__swrite>:
 80064c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c6:	461f      	mov	r7, r3
 80064c8:	898b      	ldrh	r3, [r1, #12]
 80064ca:	05db      	lsls	r3, r3, #23
 80064cc:	4605      	mov	r5, r0
 80064ce:	460c      	mov	r4, r1
 80064d0:	4616      	mov	r6, r2
 80064d2:	d505      	bpl.n	80064e0 <__swrite+0x1e>
 80064d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064d8:	2302      	movs	r3, #2
 80064da:	2200      	movs	r2, #0
 80064dc:	f000 f868 	bl	80065b0 <_lseek_r>
 80064e0:	89a3      	ldrh	r3, [r4, #12]
 80064e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064ea:	81a3      	strh	r3, [r4, #12]
 80064ec:	4632      	mov	r2, r6
 80064ee:	463b      	mov	r3, r7
 80064f0:	4628      	mov	r0, r5
 80064f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064f6:	f000 b817 	b.w	8006528 <_write_r>

080064fa <__sseek>:
 80064fa:	b510      	push	{r4, lr}
 80064fc:	460c      	mov	r4, r1
 80064fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006502:	f000 f855 	bl	80065b0 <_lseek_r>
 8006506:	1c43      	adds	r3, r0, #1
 8006508:	89a3      	ldrh	r3, [r4, #12]
 800650a:	bf15      	itete	ne
 800650c:	6560      	strne	r0, [r4, #84]	; 0x54
 800650e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006516:	81a3      	strheq	r3, [r4, #12]
 8006518:	bf18      	it	ne
 800651a:	81a3      	strhne	r3, [r4, #12]
 800651c:	bd10      	pop	{r4, pc}

0800651e <__sclose>:
 800651e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006522:	f000 b813 	b.w	800654c <_close_r>
	...

08006528 <_write_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d07      	ldr	r5, [pc, #28]	; (8006548 <_write_r+0x20>)
 800652c:	4604      	mov	r4, r0
 800652e:	4608      	mov	r0, r1
 8006530:	4611      	mov	r1, r2
 8006532:	2200      	movs	r2, #0
 8006534:	602a      	str	r2, [r5, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	f7fa ff91 	bl	800145e <_write>
 800653c:	1c43      	adds	r3, r0, #1
 800653e:	d102      	bne.n	8006546 <_write_r+0x1e>
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	b103      	cbz	r3, 8006546 <_write_r+0x1e>
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	20000134 	.word	0x20000134

0800654c <_close_r>:
 800654c:	b538      	push	{r3, r4, r5, lr}
 800654e:	4d06      	ldr	r5, [pc, #24]	; (8006568 <_close_r+0x1c>)
 8006550:	2300      	movs	r3, #0
 8006552:	4604      	mov	r4, r0
 8006554:	4608      	mov	r0, r1
 8006556:	602b      	str	r3, [r5, #0]
 8006558:	f7fa ff9d 	bl	8001496 <_close>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_close_r+0x1a>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_close_r+0x1a>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	20000134 	.word	0x20000134

0800656c <_fstat_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d07      	ldr	r5, [pc, #28]	; (800658c <_fstat_r+0x20>)
 8006570:	2300      	movs	r3, #0
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	f7fa ff98 	bl	80014ae <_fstat>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d102      	bne.n	8006588 <_fstat_r+0x1c>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b103      	cbz	r3, 8006588 <_fstat_r+0x1c>
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	20000134 	.word	0x20000134

08006590 <_isatty_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	; (80065ac <_isatty_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fa ff97 	bl	80014ce <_isatty>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_isatty_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_isatty_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	20000134 	.word	0x20000134

080065b0 <_lseek_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	; (80065d0 <_lseek_r+0x20>)
 80065b4:	4604      	mov	r4, r0
 80065b6:	4608      	mov	r0, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	2200      	movs	r2, #0
 80065bc:	602a      	str	r2, [r5, #0]
 80065be:	461a      	mov	r2, r3
 80065c0:	f7fa ff90 	bl	80014e4 <_lseek>
 80065c4:	1c43      	adds	r3, r0, #1
 80065c6:	d102      	bne.n	80065ce <_lseek_r+0x1e>
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	b103      	cbz	r3, 80065ce <_lseek_r+0x1e>
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	bd38      	pop	{r3, r4, r5, pc}
 80065d0:	20000134 	.word	0x20000134

080065d4 <_read_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d07      	ldr	r5, [pc, #28]	; (80065f4 <_read_r+0x20>)
 80065d8:	4604      	mov	r4, r0
 80065da:	4608      	mov	r0, r1
 80065dc:	4611      	mov	r1, r2
 80065de:	2200      	movs	r2, #0
 80065e0:	602a      	str	r2, [r5, #0]
 80065e2:	461a      	mov	r2, r3
 80065e4:	f7fa ff1e 	bl	8001424 <_read>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_read_r+0x1e>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_read_r+0x1e>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	20000134 	.word	0x20000134

080065f8 <_init>:
 80065f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065fa:	bf00      	nop
 80065fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fe:	bc08      	pop	{r3}
 8006600:	469e      	mov	lr, r3
 8006602:	4770      	bx	lr

08006604 <_fini>:
 8006604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006606:	bf00      	nop
 8006608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800660a:	bc08      	pop	{r3}
 800660c:	469e      	mov	lr, r3
 800660e:	4770      	bx	lr
