
BasicTaskCreation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005448  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c4  080056c4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080056c4  080056c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056cc  080056cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056cc  080056cc  000156cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080056d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013480  20000014  080056e8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013494  080056e8  00023494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013971  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ac0  00000000  00000000  000339b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  00036478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001100  00000000  00000000  000376d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001879f  00000000  00000000  000387d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ba7  00000000  00000000  00050f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997aa  00000000  00000000  00064b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fe2c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d30  00000000  00000000  000fe310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055d0 	.word	0x080055d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080055d0 	.word	0x080055d0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20012ec8 	.word	0x20012ec8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b974 	b.w	8000574 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	4604      	mov	r4, r0
 80002ac:	468e      	mov	lr, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d14d      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d969      	bls.n	800038c <__udivmoddi4+0xe8>
 80002b8:	fab2 f282 	clz	r2, r2
 80002bc:	b152      	cbz	r2, 80002d4 <__udivmoddi4+0x30>
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	f1c2 0120 	rsb	r1, r2, #32
 80002c6:	fa20 f101 	lsr.w	r1, r0, r1
 80002ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ce:	ea41 0e03 	orr.w	lr, r1, r3
 80002d2:	4094      	lsls	r4, r2
 80002d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d8:	0c21      	lsrs	r1, r4, #16
 80002da:	fbbe f6f8 	udiv	r6, lr, r8
 80002de:	fa1f f78c 	uxth.w	r7, ip
 80002e2:	fb08 e316 	mls	r3, r8, r6, lr
 80002e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ea:	fb06 f107 	mul.w	r1, r6, r7
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002fa:	f080 811f 	bcs.w	800053c <__udivmoddi4+0x298>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 811c 	bls.w	800053c <__udivmoddi4+0x298>
 8000304:	3e02      	subs	r6, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a5b      	subs	r3, r3, r1
 800030a:	b2a4      	uxth	r4, r4
 800030c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000310:	fb08 3310 	mls	r3, r8, r0, r3
 8000314:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000318:	fb00 f707 	mul.w	r7, r0, r7
 800031c:	42a7      	cmp	r7, r4
 800031e:	d90a      	bls.n	8000336 <__udivmoddi4+0x92>
 8000320:	eb1c 0404 	adds.w	r4, ip, r4
 8000324:	f100 33ff 	add.w	r3, r0, #4294967295
 8000328:	f080 810a 	bcs.w	8000540 <__udivmoddi4+0x29c>
 800032c:	42a7      	cmp	r7, r4
 800032e:	f240 8107 	bls.w	8000540 <__udivmoddi4+0x29c>
 8000332:	4464      	add	r4, ip
 8000334:	3802      	subs	r0, #2
 8000336:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800033a:	1be4      	subs	r4, r4, r7
 800033c:	2600      	movs	r6, #0
 800033e:	b11d      	cbz	r5, 8000348 <__udivmoddi4+0xa4>
 8000340:	40d4      	lsrs	r4, r2
 8000342:	2300      	movs	r3, #0
 8000344:	e9c5 4300 	strd	r4, r3, [r5]
 8000348:	4631      	mov	r1, r6
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0xc2>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80ef 	beq.w	8000536 <__udivmoddi4+0x292>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x160>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xd4>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80f9 	bhi.w	800056a <__udivmoddi4+0x2c6>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0303 	sbc.w	r3, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	469e      	mov	lr, r3
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e0      	beq.n	8000348 <__udivmoddi4+0xa4>
 8000386:	e9c5 4e00 	strd	r4, lr, [r5]
 800038a:	e7dd      	b.n	8000348 <__udivmoddi4+0xa4>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xec>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f282 	clz	r2, r2
 8000394:	2a00      	cmp	r2, #0
 8000396:	f040 8092 	bne.w	80004be <__udivmoddi4+0x21a>
 800039a:	eba1 010c 	sub.w	r1, r1, ip
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f fe8c 	uxth.w	lr, ip
 80003a6:	2601      	movs	r6, #1
 80003a8:	0c20      	lsrs	r0, r4, #16
 80003aa:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ae:	fb07 1113 	mls	r1, r7, r3, r1
 80003b2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b6:	fb0e f003 	mul.w	r0, lr, r3
 80003ba:	4288      	cmp	r0, r1
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x12c>
 80003be:	eb1c 0101 	adds.w	r1, ip, r1
 80003c2:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c6:	d202      	bcs.n	80003ce <__udivmoddi4+0x12a>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f200 80cb 	bhi.w	8000564 <__udivmoddi4+0x2c0>
 80003ce:	4643      	mov	r3, r8
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d8:	fb07 1110 	mls	r1, r7, r0, r1
 80003dc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003e0:	fb0e fe00 	mul.w	lr, lr, r0
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x156>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x154>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2ca>
 80003f8:	4608      	mov	r0, r1
 80003fa:	eba4 040e 	sub.w	r4, r4, lr
 80003fe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000402:	e79c      	b.n	800033e <__udivmoddi4+0x9a>
 8000404:	f1c6 0720 	rsb	r7, r6, #32
 8000408:	40b3      	lsls	r3, r6
 800040a:	fa22 fc07 	lsr.w	ip, r2, r7
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f407 	lsr.w	r4, r0, r7
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	431c      	orrs	r4, r3
 800041c:	40f9      	lsrs	r1, r7
 800041e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000422:	fa00 f306 	lsl.w	r3, r0, r6
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	0c20      	lsrs	r0, r4, #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fb09 1118 	mls	r1, r9, r8, r1
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	fb08 f00e 	mul.w	r0, r8, lr
 800043c:	4288      	cmp	r0, r1
 800043e:	fa02 f206 	lsl.w	r2, r2, r6
 8000442:	d90b      	bls.n	800045c <__udivmoddi4+0x1b8>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f108 3aff 	add.w	sl, r8, #4294967295
 800044c:	f080 8088 	bcs.w	8000560 <__udivmoddi4+0x2bc>
 8000450:	4288      	cmp	r0, r1
 8000452:	f240 8085 	bls.w	8000560 <__udivmoddi4+0x2bc>
 8000456:	f1a8 0802 	sub.w	r8, r8, #2
 800045a:	4461      	add	r1, ip
 800045c:	1a09      	subs	r1, r1, r0
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb1 f0f9 	udiv	r0, r1, r9
 8000464:	fb09 1110 	mls	r1, r9, r0, r1
 8000468:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000470:	458e      	cmp	lr, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x1e2>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f100 34ff 	add.w	r4, r0, #4294967295
 800047c:	d26c      	bcs.n	8000558 <__udivmoddi4+0x2b4>
 800047e:	458e      	cmp	lr, r1
 8000480:	d96a      	bls.n	8000558 <__udivmoddi4+0x2b4>
 8000482:	3802      	subs	r0, #2
 8000484:	4461      	add	r1, ip
 8000486:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800048a:	fba0 9402 	umull	r9, r4, r0, r2
 800048e:	eba1 010e 	sub.w	r1, r1, lr
 8000492:	42a1      	cmp	r1, r4
 8000494:	46c8      	mov	r8, r9
 8000496:	46a6      	mov	lr, r4
 8000498:	d356      	bcc.n	8000548 <__udivmoddi4+0x2a4>
 800049a:	d053      	beq.n	8000544 <__udivmoddi4+0x2a0>
 800049c:	b15d      	cbz	r5, 80004b6 <__udivmoddi4+0x212>
 800049e:	ebb3 0208 	subs.w	r2, r3, r8
 80004a2:	eb61 010e 	sbc.w	r1, r1, lr
 80004a6:	fa01 f707 	lsl.w	r7, r1, r7
 80004aa:	fa22 f306 	lsr.w	r3, r2, r6
 80004ae:	40f1      	lsrs	r1, r6
 80004b0:	431f      	orrs	r7, r3
 80004b2:	e9c5 7100 	strd	r7, r1, [r5]
 80004b6:	2600      	movs	r6, #0
 80004b8:	4631      	mov	r1, r6
 80004ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	40d8      	lsrs	r0, r3
 80004c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c8:	fa21 f303 	lsr.w	r3, r1, r3
 80004cc:	4091      	lsls	r1, r2
 80004ce:	4301      	orrs	r1, r0
 80004d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d4:	fa1f fe8c 	uxth.w	lr, ip
 80004d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004dc:	fb07 3610 	mls	r6, r7, r0, r3
 80004e0:	0c0b      	lsrs	r3, r1, #16
 80004e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ea:	429e      	cmp	r6, r3
 80004ec:	fa04 f402 	lsl.w	r4, r4, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x260>
 80004f2:	eb1c 0303 	adds.w	r3, ip, r3
 80004f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fa:	d22f      	bcs.n	800055c <__udivmoddi4+0x2b8>
 80004fc:	429e      	cmp	r6, r3
 80004fe:	d92d      	bls.n	800055c <__udivmoddi4+0x2b8>
 8000500:	3802      	subs	r0, #2
 8000502:	4463      	add	r3, ip
 8000504:	1b9b      	subs	r3, r3, r6
 8000506:	b289      	uxth	r1, r1
 8000508:	fbb3 f6f7 	udiv	r6, r3, r7
 800050c:	fb07 3316 	mls	r3, r7, r6, r3
 8000510:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000514:	fb06 f30e 	mul.w	r3, r6, lr
 8000518:	428b      	cmp	r3, r1
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x28a>
 800051c:	eb1c 0101 	adds.w	r1, ip, r1
 8000520:	f106 38ff 	add.w	r8, r6, #4294967295
 8000524:	d216      	bcs.n	8000554 <__udivmoddi4+0x2b0>
 8000526:	428b      	cmp	r3, r1
 8000528:	d914      	bls.n	8000554 <__udivmoddi4+0x2b0>
 800052a:	3e02      	subs	r6, #2
 800052c:	4461      	add	r1, ip
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000534:	e738      	b.n	80003a8 <__udivmoddi4+0x104>
 8000536:	462e      	mov	r6, r5
 8000538:	4628      	mov	r0, r5
 800053a:	e705      	b.n	8000348 <__udivmoddi4+0xa4>
 800053c:	4606      	mov	r6, r0
 800053e:	e6e3      	b.n	8000308 <__udivmoddi4+0x64>
 8000540:	4618      	mov	r0, r3
 8000542:	e6f8      	b.n	8000336 <__udivmoddi4+0x92>
 8000544:	454b      	cmp	r3, r9
 8000546:	d2a9      	bcs.n	800049c <__udivmoddi4+0x1f8>
 8000548:	ebb9 0802 	subs.w	r8, r9, r2
 800054c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000550:	3801      	subs	r0, #1
 8000552:	e7a3      	b.n	800049c <__udivmoddi4+0x1f8>
 8000554:	4646      	mov	r6, r8
 8000556:	e7ea      	b.n	800052e <__udivmoddi4+0x28a>
 8000558:	4620      	mov	r0, r4
 800055a:	e794      	b.n	8000486 <__udivmoddi4+0x1e2>
 800055c:	4640      	mov	r0, r8
 800055e:	e7d1      	b.n	8000504 <__udivmoddi4+0x260>
 8000560:	46d0      	mov	r8, sl
 8000562:	e77b      	b.n	800045c <__udivmoddi4+0x1b8>
 8000564:	3b02      	subs	r3, #2
 8000566:	4461      	add	r1, ip
 8000568:	e732      	b.n	80003d0 <__udivmoddi4+0x12c>
 800056a:	4630      	mov	r0, r6
 800056c:	e709      	b.n	8000382 <__udivmoddi4+0xde>
 800056e:	4464      	add	r4, ip
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x156>

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b088      	sub	sp, #32
 800057c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 f9ab 	bl	80008d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f84b 	bl	800061c <SystemClock_Config>
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter.

  DWT_CTRL |= (1<<0);
 8000586:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <main+0x88>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <main+0x88>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6013      	str	r3, [r2, #0]


  status = xTaskCreate(task1_handler,"Task-1",200,"FROM TASK-1",2,&task1_handle);
 8000592:	f107 0308 	add.w	r3, r7, #8
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <main+0x8c>)
 800059e:	22c8      	movs	r2, #200	; 0xc8
 80005a0:	4919      	ldr	r1, [pc, #100]	; (8000608 <main+0x90>)
 80005a2:	481a      	ldr	r0, [pc, #104]	; (800060c <main+0x94>)
 80005a4:	f001 fd72 	bl	800208c <xTaskCreate>
 80005a8:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d00a      	beq.n	80005c6 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005b4:	f383 8811 	msr	BASEPRI, r3
 80005b8:	f3bf 8f6f 	isb	sy
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005c2:	bf00      	nop
 80005c4:	e7fe      	b.n	80005c4 <main+0x4c>

  status = xTaskCreate(task2_handler,"Task-2",200,"FROM TASK-2",2,&task2_handle);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <main+0x98>)
 80005d0:	22c8      	movs	r2, #200	; 0xc8
 80005d2:	4910      	ldr	r1, [pc, #64]	; (8000614 <main+0x9c>)
 80005d4:	4810      	ldr	r0, [pc, #64]	; (8000618 <main+0xa0>)
 80005d6:	f001 fd59 	bl	800208c <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00a      	beq.n	80005f8 <main+0x80>
        __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
    }
 80005f4:	bf00      	nop
 80005f6:	e7fe      	b.n	80005f6 <main+0x7e>

  // freeRTOS scheduler

  vTaskStartScheduler();
 80005f8:	f001 fee2 	bl	80023c0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x84>
 80005fe:	bf00      	nop
 8000600:	e0001000 	.word	0xe0001000
 8000604:	080055e8 	.word	0x080055e8
 8000608:	080055f4 	.word	0x080055f4
 800060c:	080006dd 	.word	0x080006dd
 8000610:	080055fc 	.word	0x080055fc
 8000614:	08005608 	.word	0x08005608
 8000618:	080006e7 	.word	0x080006e7

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 ffc8 	bl	80055c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <SystemClock_Config+0xb8>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <SystemClock_Config+0xb8>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <SystemClock_Config+0xb8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemClock_Config+0xbc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <SystemClock_Config+0xbc>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <SystemClock_Config+0xbc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000688:	2300      	movs	r3, #0
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 fa45 	bl	8000b20 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800069c:	f000 f83a 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fca8 	bl	8001010 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006c6:	f000 f825 	bl	8000714 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]

	while(1){
 80006e4:	e7fe      	b.n	80006e4 <task1_handler+0x8>

080006e6 <task2_handler>:

	}

}

static void task2_handler(void* parameters){
 80006e6:	b480      	push	{r7}
 80006e8:	b083      	sub	sp, #12
 80006ea:	af00      	add	r7, sp, #0
 80006ec:	6078      	str	r0, [r7, #4]

	while(1){
 80006ee:	e7fe      	b.n	80006ee <task2_handler+0x8>

080006f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a04      	ldr	r2, [pc, #16]	; (8000710 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000702:	f000 f90b 	bl	800091c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000706:	bf00      	nop
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40000800 	.word	0x40000800

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800075e:	f003 f80b 	bl	8003778 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800

08000770 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000780:	2200      	movs	r2, #0
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	201e      	movs	r0, #30
 8000786:	f000 f9a1 	bl	8000acc <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800078a:	201e      	movs	r0, #30
 800078c:	f000 f9ba 	bl	8000b04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <HAL_InitTick+0xa0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a1d      	ldr	r2, [pc, #116]	; (8000810 <HAL_InitTick+0xa0>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_InitTick+0xa0>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007ac:	f107 0210 	add.w	r2, r7, #16
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 fdf6 	bl	80013a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007bc:	f000 fde0 	bl	8001380 <HAL_RCC_GetPCLK1Freq>
 80007c0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c4:	4a13      	ldr	r2, [pc, #76]	; (8000814 <HAL_InitTick+0xa4>)
 80007c6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ca:	0c9b      	lsrs	r3, r3, #18
 80007cc:	3b01      	subs	r3, #1
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <HAL_InitTick+0xa8>)
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <HAL_InitTick+0xac>)
 80007d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_InitTick+0xa8>)
 80007d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007dc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80007de:	4a0e      	ldr	r2, [pc, #56]	; (8000818 <HAL_InitTick+0xa8>)
 80007e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007e2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	; (8000818 <HAL_InitTick+0xa8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ea:	4b0b      	ldr	r3, [pc, #44]	; (8000818 <HAL_InitTick+0xa8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80007f0:	4809      	ldr	r0, [pc, #36]	; (8000818 <HAL_InitTick+0xa8>)
 80007f2:	f000 fe0b 	bl	800140c <HAL_TIM_Base_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d104      	bne.n	8000806 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80007fc:	4806      	ldr	r0, [pc, #24]	; (8000818 <HAL_InitTick+0xa8>)
 80007fe:	f000 fe5f 	bl	80014c0 <HAL_TIM_Base_Start_IT>
 8000802:	4603      	mov	r3, r0
 8000804:	e000      	b.n	8000808 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000806:	2301      	movs	r3, #1
}
 8000808:	4618      	mov	r0, r3
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	431bde83 	.word	0x431bde83
 8000818:	20000030 	.word	0x20000030
 800081c:	40000800 	.word	0x40000800

08000820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000824:	e7fe      	b.n	8000824 <NMI_Handler+0x4>

08000826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082a:	e7fe      	b.n	800082a <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000830:	e7fe      	b.n	8000830 <MemManage_Handler+0x4>

08000832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <UsageFault_Handler+0x4>

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <TIM4_IRQHandler+0x10>)
 8000852:	f000 fe97 	bl	8001584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	20000030 	.word	0x20000030

08000860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <SystemInit+0x20>)
 8000866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <SystemInit+0x20>)
 800086c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088a:	490e      	ldr	r1, [pc, #56]	; (80008c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800088c:	4a0e      	ldr	r2, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800088e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000890:	e002      	b.n	8000898 <LoopCopyDataInit>

08000892 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000892:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000894:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000896:	3304      	adds	r3, #4

08000898 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000898:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800089c:	d3f9      	bcc.n	8000892 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089e:	4a0b      	ldr	r2, [pc, #44]	; (80008cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a0:	4c0b      	ldr	r4, [pc, #44]	; (80008d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a4:	e001      	b.n	80008aa <LoopFillZerobss>

080008a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a8:	3204      	adds	r2, #4

080008aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008ac:	d3fb      	bcc.n	80008a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008ae:	f7ff ffd7 	bl	8000860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b2:	f004 fe43 	bl	800553c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fe5f 	bl	8000578 <main>
  bx  lr    
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80008c8:	080056d4 	.word	0x080056d4
  ldr r2, =_sbss
 80008cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80008d0:	20013494 	.word	0x20013494

080008d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC_IRQHandler>
	...

080008d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008dc:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <HAL_Init+0x40>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <HAL_Init+0x40>)
 80008e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <HAL_Init+0x40>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <HAL_Init+0x40>)
 80008ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <HAL_Init+0x40>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <HAL_Init+0x40>)
 80008fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f8d8 	bl	8000ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f7ff ff32 	bl	8000770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff ff08 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023c00 	.word	0x40023c00

0800091c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_IncTick+0x20>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	461a      	mov	r2, r3
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <HAL_IncTick+0x24>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4413      	add	r3, r2
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_IncTick+0x24>)
 800092e:	6013      	str	r3, [r2, #0]
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	20000008 	.word	0x20000008
 8000940:	20000078 	.word	0x20000078

08000944 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  return uwTick;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <HAL_GetTick+0x14>)
 800094a:	681b      	ldr	r3, [r3, #0]
}
 800094c:	4618      	mov	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	20000078 	.word	0x20000078

0800095c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000978:	4013      	ands	r3, r2
 800097a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000984:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <__NVIC_SetPriorityGrouping+0x44>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a8:	4b04      	ldr	r3, [pc, #16]	; (80009bc <__NVIC_GetPriorityGrouping+0x18>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	0a1b      	lsrs	r3, r3, #8
 80009ae:	f003 0307 	and.w	r3, r3, #7
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00

080009c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	db0b      	blt.n	80009ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	f003 021f 	and.w	r2, r3, #31
 80009d8:	4907      	ldr	r1, [pc, #28]	; (80009f8 <__NVIC_EnableIRQ+0x38>)
 80009da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	2001      	movs	r0, #1
 80009e2:	fa00 f202 	lsl.w	r2, r0, r2
 80009e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f7ff ff4c 	bl	800095c <__NVIC_SetPriorityGrouping>
}
 8000ac4:	bf00      	nop
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b086      	sub	sp, #24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ade:	f7ff ff61 	bl	80009a4 <__NVIC_GetPriorityGrouping>
 8000ae2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	6978      	ldr	r0, [r7, #20]
 8000aea:	f7ff ffb1 	bl	8000a50 <NVIC_EncodePriority>
 8000aee:	4602      	mov	r2, r0
 8000af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff ff80 	bl	80009fc <__NVIC_SetPriority>
}
 8000afc:	bf00      	nop
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}

08000b04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ff54 	bl	80009c0 <__NVIC_EnableIRQ>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d101      	bne.n	8000b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e267      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d075      	beq.n	8000c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b3e:	4b88      	ldr	r3, [pc, #544]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000b40:	689b      	ldr	r3, [r3, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d00c      	beq.n	8000b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b4a:	4b85      	ldr	r3, [pc, #532]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000b4c:	689b      	ldr	r3, [r3, #8]
 8000b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b52:	2b08      	cmp	r3, #8
 8000b54:	d112      	bne.n	8000b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b56:	4b82      	ldr	r3, [pc, #520]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b62:	d10b      	bne.n	8000b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b64:	4b7e      	ldr	r3, [pc, #504]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d05b      	beq.n	8000c28 <HAL_RCC_OscConfig+0x108>
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d157      	bne.n	8000c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	e242      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b84:	d106      	bne.n	8000b94 <HAL_RCC_OscConfig+0x74>
 8000b86:	4b76      	ldr	r3, [pc, #472]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a75      	ldr	r2, [pc, #468]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e01d      	b.n	8000bd0 <HAL_RCC_OscConfig+0xb0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b9c:	d10c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x98>
 8000b9e:	4b70      	ldr	r3, [pc, #448]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a6f      	ldr	r2, [pc, #444]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba8:	6013      	str	r3, [r2, #0]
 8000baa:	4b6d      	ldr	r3, [pc, #436]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4a6c      	ldr	r2, [pc, #432]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bb4:	6013      	str	r3, [r2, #0]
 8000bb6:	e00b      	b.n	8000bd0 <HAL_RCC_OscConfig+0xb0>
 8000bb8:	4b69      	ldr	r3, [pc, #420]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a68      	ldr	r2, [pc, #416]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b66      	ldr	r3, [pc, #408]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a65      	ldr	r2, [pc, #404]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d013      	beq.n	8000c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd8:	f7ff feb4 	bl	8000944 <HAL_GetTick>
 8000bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bde:	e008      	b.n	8000bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000be0:	f7ff feb0 	bl	8000944 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	2b64      	cmp	r3, #100	; 0x64
 8000bec:	d901      	bls.n	8000bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	e207      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf2:	4b5b      	ldr	r3, [pc, #364]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0f0      	beq.n	8000be0 <HAL_RCC_OscConfig+0xc0>
 8000bfe:	e014      	b.n	8000c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c00:	f7ff fea0 	bl	8000944 <HAL_GetTick>
 8000c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c06:	e008      	b.n	8000c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c08:	f7ff fe9c 	bl	8000944 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	2b64      	cmp	r3, #100	; 0x64
 8000c14:	d901      	bls.n	8000c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c16:	2303      	movs	r3, #3
 8000c18:	e1f3      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c1a:	4b51      	ldr	r3, [pc, #324]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d1f0      	bne.n	8000c08 <HAL_RCC_OscConfig+0xe8>
 8000c26:	e000      	b.n	8000c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0302 	and.w	r3, r3, #2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d063      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c36:	4b4a      	ldr	r3, [pc, #296]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	f003 030c 	and.w	r3, r3, #12
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d00b      	beq.n	8000c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c42:	4b47      	ldr	r3, [pc, #284]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d11c      	bne.n	8000c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c4e:	4b44      	ldr	r3, [pc, #272]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d116      	bne.n	8000c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c5a:	4b41      	ldr	r3, [pc, #260]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <HAL_RCC_OscConfig+0x152>
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d001      	beq.n	8000c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e1c7      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c72:	4b3b      	ldr	r3, [pc, #236]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4937      	ldr	r1, [pc, #220]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000c82:	4313      	orrs	r3, r2
 8000c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c86:	e03a      	b.n	8000cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d020      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c90:	4b34      	ldr	r3, [pc, #208]	; (8000d64 <HAL_RCC_OscConfig+0x244>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c96:	f7ff fe55 	bl	8000944 <HAL_GetTick>
 8000c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9c:	e008      	b.n	8000cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c9e:	f7ff fe51 	bl	8000944 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d901      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000cac:	2303      	movs	r3, #3
 8000cae:	e1a8      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cb0:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0f0      	beq.n	8000c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	691b      	ldr	r3, [r3, #16]
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	4925      	ldr	r1, [pc, #148]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	600b      	str	r3, [r1, #0]
 8000cd0:	e015      	b.n	8000cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cd2:	4b24      	ldr	r3, [pc, #144]	; (8000d64 <HAL_RCC_OscConfig+0x244>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fe34 	bl	8000944 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ce0:	f7ff fe30 	bl	8000944 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e187      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d036      	beq.n	8000d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	695b      	ldr	r3, [r3, #20]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d016      	beq.n	8000d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <HAL_RCC_OscConfig+0x248>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d18:	f7ff fe14 	bl	8000944 <HAL_GetTick>
 8000d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d1e:	e008      	b.n	8000d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d20:	f7ff fe10 	bl	8000944 <HAL_GetTick>
 8000d24:	4602      	mov	r2, r0
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	2b02      	cmp	r3, #2
 8000d2c:	d901      	bls.n	8000d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e167      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d32:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_RCC_OscConfig+0x240>)
 8000d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0f0      	beq.n	8000d20 <HAL_RCC_OscConfig+0x200>
 8000d3e:	e01b      	b.n	8000d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d40:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_RCC_OscConfig+0x248>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d46:	f7ff fdfd 	bl	8000944 <HAL_GetTick>
 8000d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d4c:	e00e      	b.n	8000d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d4e:	f7ff fdf9 	bl	8000944 <HAL_GetTick>
 8000d52:	4602      	mov	r2, r0
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	1ad3      	subs	r3, r2, r3
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d907      	bls.n	8000d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	e150      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
 8000d60:	40023800 	.word	0x40023800
 8000d64:	42470000 	.word	0x42470000
 8000d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d6c:	4b88      	ldr	r3, [pc, #544]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1ea      	bne.n	8000d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 8097 	beq.w	8000eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d8a:	4b81      	ldr	r3, [pc, #516]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60bb      	str	r3, [r7, #8]
 8000d9a:	4b7d      	ldr	r3, [pc, #500]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a7c      	ldr	r2, [pc, #496]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b7a      	ldr	r3, [pc, #488]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000db2:	2301      	movs	r3, #1
 8000db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000db6:	4b77      	ldr	r3, [pc, #476]	; (8000f94 <HAL_RCC_OscConfig+0x474>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d118      	bne.n	8000df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dc2:	4b74      	ldr	r3, [pc, #464]	; (8000f94 <HAL_RCC_OscConfig+0x474>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a73      	ldr	r2, [pc, #460]	; (8000f94 <HAL_RCC_OscConfig+0x474>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dce:	f7ff fdb9 	bl	8000944 <HAL_GetTick>
 8000dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd4:	e008      	b.n	8000de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dd6:	f7ff fdb5 	bl	8000944 <HAL_GetTick>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	693b      	ldr	r3, [r7, #16]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d901      	bls.n	8000de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000de4:	2303      	movs	r3, #3
 8000de6:	e10c      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de8:	4b6a      	ldr	r3, [pc, #424]	; (8000f94 <HAL_RCC_OscConfig+0x474>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d0f0      	beq.n	8000dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d106      	bne.n	8000e0a <HAL_RCC_OscConfig+0x2ea>
 8000dfc:	4b64      	ldr	r3, [pc, #400]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e00:	4a63      	ldr	r2, [pc, #396]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e02:	f043 0301 	orr.w	r3, r3, #1
 8000e06:	6713      	str	r3, [r2, #112]	; 0x70
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0x324>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x30c>
 8000e12:	4b5f      	ldr	r3, [pc, #380]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e16:	4a5e      	ldr	r2, [pc, #376]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e1e:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e22:	4a5b      	ldr	r2, [pc, #364]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6713      	str	r3, [r2, #112]	; 0x70
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0x324>
 8000e2c:	4b58      	ldr	r3, [pc, #352]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e30:	4a57      	ldr	r2, [pc, #348]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	6713      	str	r3, [r2, #112]	; 0x70
 8000e38:	4b55      	ldr	r3, [pc, #340]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e3c:	4a54      	ldr	r2, [pc, #336]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e3e:	f023 0304 	bic.w	r3, r3, #4
 8000e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d015      	beq.n	8000e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e4c:	f7ff fd7a 	bl	8000944 <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e52:	e00a      	b.n	8000e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e54:	f7ff fd76 	bl	8000944 <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d901      	bls.n	8000e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000e66:	2303      	movs	r3, #3
 8000e68:	e0cb      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0ee      	beq.n	8000e54 <HAL_RCC_OscConfig+0x334>
 8000e76:	e014      	b.n	8000ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e78:	f7ff fd64 	bl	8000944 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e7e:	e00a      	b.n	8000e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e80:	f7ff fd60 	bl	8000944 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e0b5      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e96:	4b3e      	ldr	r3, [pc, #248]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1ee      	bne.n	8000e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ea2:	7dfb      	ldrb	r3, [r7, #23]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d105      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea8:	4b39      	ldr	r3, [pc, #228]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a38      	ldr	r2, [pc, #224]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80a1 	beq.w	8001000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ebe:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 030c 	and.w	r3, r3, #12
 8000ec6:	2b08      	cmp	r3, #8
 8000ec8:	d05c      	beq.n	8000f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d141      	bne.n	8000f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ed2:	4b31      	ldr	r3, [pc, #196]	; (8000f98 <HAL_RCC_OscConfig+0x478>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fd34 	bl	8000944 <HAL_GetTick>
 8000edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ede:	e008      	b.n	8000ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee0:	f7ff fd30 	bl	8000944 <HAL_GetTick>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d901      	bls.n	8000ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	e087      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f0      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69da      	ldr	r2, [r3, #28]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a1b      	ldr	r3, [r3, #32]
 8000f06:	431a      	orrs	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f14:	085b      	lsrs	r3, r3, #1
 8000f16:	3b01      	subs	r3, #1
 8000f18:	041b      	lsls	r3, r3, #16
 8000f1a:	431a      	orrs	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	061b      	lsls	r3, r3, #24
 8000f22:	491b      	ldr	r1, [pc, #108]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_RCC_OscConfig+0x478>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2e:	f7ff fd09 	bl	8000944 <HAL_GetTick>
 8000f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f36:	f7ff fd05 	bl	8000944 <HAL_GetTick>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e05c      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d0f0      	beq.n	8000f36 <HAL_RCC_OscConfig+0x416>
 8000f54:	e054      	b.n	8001000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <HAL_RCC_OscConfig+0x478>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5c:	f7ff fcf2 	bl	8000944 <HAL_GetTick>
 8000f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f62:	e008      	b.n	8000f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f64:	f7ff fcee 	bl	8000944 <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	1ad3      	subs	r3, r2, r3
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	d901      	bls.n	8000f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e045      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <HAL_RCC_OscConfig+0x470>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1f0      	bne.n	8000f64 <HAL_RCC_OscConfig+0x444>
 8000f82:	e03d      	b.n	8001000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d107      	bne.n	8000f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e038      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40007000 	.word	0x40007000
 8000f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_RCC_OscConfig+0x4ec>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d028      	beq.n	8000ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d121      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d11a      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000fcc:	4013      	ands	r3, r2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d111      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	085b      	lsrs	r3, r3, #1
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d107      	bne.n	8000ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d001      	beq.n	8001000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e000      	b.n	8001002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800

08001010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0cc      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001024:	4b68      	ldr	r3, [pc, #416]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	429a      	cmp	r2, r3
 8001030:	d90c      	bls.n	800104c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001032:	4b65      	ldr	r3, [pc, #404]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800103a:	4b63      	ldr	r3, [pc, #396]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	683a      	ldr	r2, [r7, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d001      	beq.n	800104c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	e0b8      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0302 	and.w	r3, r3, #2
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 0304 	and.w	r3, r3, #4
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001064:	4b59      	ldr	r3, [pc, #356]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	4a58      	ldr	r2, [pc, #352]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800106a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800106e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0308 	and.w	r3, r3, #8
 8001078:	2b00      	cmp	r3, #0
 800107a:	d005      	beq.n	8001088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800107c:	4b53      	ldr	r3, [pc, #332]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	4a52      	ldr	r2, [pc, #328]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001088:	4b50      	ldr	r3, [pc, #320]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	494d      	ldr	r1, [pc, #308]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001096:	4313      	orrs	r3, r2
 8001098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d044      	beq.n	8001130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d107      	bne.n	80010be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ae:	4b47      	ldr	r3, [pc, #284]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d119      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e07f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d003      	beq.n	80010ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d107      	bne.n	80010de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010ce:	4b3f      	ldr	r3, [pc, #252]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d109      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e06f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e067      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f023 0203 	bic.w	r2, r3, #3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4934      	ldr	r1, [pc, #208]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001100:	f7ff fc20 	bl	8000944 <HAL_GetTick>
 8001104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001106:	e00a      	b.n	800111e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001108:	f7ff fc1c 	bl	8000944 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	f241 3288 	movw	r2, #5000	; 0x1388
 8001116:	4293      	cmp	r3, r2
 8001118:	d901      	bls.n	800111e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800111a:	2303      	movs	r3, #3
 800111c:	e04f      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111e:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 020c 	and.w	r2, r3, #12
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	429a      	cmp	r2, r3
 800112e:	d1eb      	bne.n	8001108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d20c      	bcs.n	8001158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001146:	4b20      	ldr	r3, [pc, #128]	; (80011c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	429a      	cmp	r2, r3
 8001152:	d001      	beq.n	8001158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e032      	b.n	80011be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d008      	beq.n	8001176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	4916      	ldr	r1, [pc, #88]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001172:	4313      	orrs	r3, r2
 8001174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0308 	and.w	r3, r3, #8
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001182:	4b12      	ldr	r3, [pc, #72]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	490e      	ldr	r1, [pc, #56]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	4313      	orrs	r3, r2
 8001194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001196:	f000 f821 	bl	80011dc <HAL_RCC_GetSysClockFreq>
 800119a:	4602      	mov	r2, r0
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	091b      	lsrs	r3, r3, #4
 80011a2:	f003 030f 	and.w	r3, r3, #15
 80011a6:	490a      	ldr	r1, [pc, #40]	; (80011d0 <HAL_RCC_ClockConfig+0x1c0>)
 80011a8:	5ccb      	ldrb	r3, [r1, r3]
 80011aa:	fa22 f303 	lsr.w	r3, r2, r3
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_RCC_ClockConfig+0x1c8>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fada 	bl	8000770 <HAL_InitTick>

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00
 80011cc:	40023800 	.word	0x40023800
 80011d0:	0800568c 	.word	0x0800568c
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000004 	.word	0x20000004

080011dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011e0:	b090      	sub	sp, #64	; 0x40
 80011e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
 80011e8:	2300      	movs	r3, #0
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ec:	2300      	movs	r3, #0
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011f4:	4b59      	ldr	r3, [pc, #356]	; (800135c <HAL_RCC_GetSysClockFreq+0x180>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d00d      	beq.n	800121c <HAL_RCC_GetSysClockFreq+0x40>
 8001200:	2b08      	cmp	r3, #8
 8001202:	f200 80a1 	bhi.w	8001348 <HAL_RCC_GetSysClockFreq+0x16c>
 8001206:	2b00      	cmp	r3, #0
 8001208:	d002      	beq.n	8001210 <HAL_RCC_GetSysClockFreq+0x34>
 800120a:	2b04      	cmp	r3, #4
 800120c:	d003      	beq.n	8001216 <HAL_RCC_GetSysClockFreq+0x3a>
 800120e:	e09b      	b.n	8001348 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001210:	4b53      	ldr	r3, [pc, #332]	; (8001360 <HAL_RCC_GetSysClockFreq+0x184>)
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001214:	e09b      	b.n	800134e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <HAL_RCC_GetSysClockFreq+0x188>)
 8001218:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800121a:	e098      	b.n	800134e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800121c:	4b4f      	ldr	r3, [pc, #316]	; (800135c <HAL_RCC_GetSysClockFreq+0x180>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001224:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <HAL_RCC_GetSysClockFreq+0x180>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d028      	beq.n	8001284 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001232:	4b4a      	ldr	r3, [pc, #296]	; (800135c <HAL_RCC_GetSysClockFreq+0x180>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	2200      	movs	r2, #0
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	627a      	str	r2, [r7, #36]	; 0x24
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001244:	2100      	movs	r1, #0
 8001246:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_RCC_GetSysClockFreq+0x188>)
 8001248:	fb03 f201 	mul.w	r2, r3, r1
 800124c:	2300      	movs	r3, #0
 800124e:	fb00 f303 	mul.w	r3, r0, r3
 8001252:	4413      	add	r3, r2
 8001254:	4a43      	ldr	r2, [pc, #268]	; (8001364 <HAL_RCC_GetSysClockFreq+0x188>)
 8001256:	fba0 1202 	umull	r1, r2, r0, r2
 800125a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800125c:	460a      	mov	r2, r1
 800125e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001260:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001262:	4413      	add	r3, r2
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001268:	2200      	movs	r2, #0
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	61fa      	str	r2, [r7, #28]
 800126e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001272:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001276:	f7fe fffd 	bl	8000274 <__aeabi_uldivmod>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4613      	mov	r3, r2
 8001280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001282:	e053      	b.n	800132c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001284:	4b35      	ldr	r3, [pc, #212]	; (800135c <HAL_RCC_GetSysClockFreq+0x180>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	2200      	movs	r2, #0
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	617a      	str	r2, [r7, #20]
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001296:	f04f 0b00 	mov.w	fp, #0
 800129a:	4652      	mov	r2, sl
 800129c:	465b      	mov	r3, fp
 800129e:	f04f 0000 	mov.w	r0, #0
 80012a2:	f04f 0100 	mov.w	r1, #0
 80012a6:	0159      	lsls	r1, r3, #5
 80012a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012ac:	0150      	lsls	r0, r2, #5
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	ebb2 080a 	subs.w	r8, r2, sl
 80012b6:	eb63 090b 	sbc.w	r9, r3, fp
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80012c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80012ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80012ce:	ebb2 0408 	subs.w	r4, r2, r8
 80012d2:	eb63 0509 	sbc.w	r5, r3, r9
 80012d6:	f04f 0200 	mov.w	r2, #0
 80012da:	f04f 0300 	mov.w	r3, #0
 80012de:	00eb      	lsls	r3, r5, #3
 80012e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80012e4:	00e2      	lsls	r2, r4, #3
 80012e6:	4614      	mov	r4, r2
 80012e8:	461d      	mov	r5, r3
 80012ea:	eb14 030a 	adds.w	r3, r4, sl
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	eb45 030b 	adc.w	r3, r5, fp
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001302:	4629      	mov	r1, r5
 8001304:	028b      	lsls	r3, r1, #10
 8001306:	4621      	mov	r1, r4
 8001308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800130c:	4621      	mov	r1, r4
 800130e:	028a      	lsls	r2, r1, #10
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001316:	2200      	movs	r2, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	60fa      	str	r2, [r7, #12]
 800131c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001320:	f7fe ffa8 	bl	8000274 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4613      	mov	r3, r2
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800132c:	4b0b      	ldr	r3, [pc, #44]	; (800135c <HAL_RCC_GetSysClockFreq+0x180>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	0c1b      	lsrs	r3, r3, #16
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	3301      	adds	r3, #1
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800133c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800133e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001340:	fbb2 f3f3 	udiv	r3, r2, r3
 8001344:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001346:	e002      	b.n	800134e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_RCC_GetSysClockFreq+0x184>)
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800134c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001350:	4618      	mov	r0, r3
 8001352:	3740      	adds	r7, #64	; 0x40
 8001354:	46bd      	mov	sp, r7
 8001356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	00f42400 	.word	0x00f42400
 8001364:	017d7840 	.word	0x017d7840

08001368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800136c:	4b03      	ldr	r3, [pc, #12]	; (800137c <HAL_RCC_GetHCLKFreq+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000000 	.word	0x20000000

08001380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001384:	f7ff fff0 	bl	8001368 <HAL_RCC_GetHCLKFreq>
 8001388:	4602      	mov	r2, r0
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	0a9b      	lsrs	r3, r3, #10
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	4903      	ldr	r1, [pc, #12]	; (80013a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001396:	5ccb      	ldrb	r3, [r1, r3]
 8001398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800139c:	4618      	mov	r0, r3
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40023800 	.word	0x40023800
 80013a4:	0800569c 	.word	0x0800569c

080013a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	220f      	movs	r2, #15
 80013b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 0203 	and.w	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_RCC_GetClockConfig+0x5c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	08db      	lsrs	r3, r3, #3
 80013e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013ea:	4b07      	ldr	r3, [pc, #28]	; (8001408 <HAL_RCC_GetClockConfig+0x60>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0207 	and.w	r2, r3, #7
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	601a      	str	r2, [r3, #0]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e041      	b.n	80014a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 f839 	bl	80014aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3304      	adds	r3, #4
 8001448:	4619      	mov	r1, r3
 800144a:	4610      	mov	r0, r2
 800144c:	f000 f9ca 	bl	80017e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2201      	movs	r2, #1
 800145c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2201      	movs	r2, #1
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2201      	movs	r2, #1
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2201      	movs	r2, #1
 8001494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d001      	beq.n	80014d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e044      	b.n	8001562 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	68da      	ldr	r2, [r3, #12]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0201 	orr.w	r2, r2, #1
 80014ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a1e      	ldr	r2, [pc, #120]	; (8001570 <HAL_TIM_Base_Start_IT+0xb0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d018      	beq.n	800152c <HAL_TIM_Base_Start_IT+0x6c>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001502:	d013      	beq.n	800152c <HAL_TIM_Base_Start_IT+0x6c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a1a      	ldr	r2, [pc, #104]	; (8001574 <HAL_TIM_Base_Start_IT+0xb4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d00e      	beq.n	800152c <HAL_TIM_Base_Start_IT+0x6c>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_TIM_Base_Start_IT+0xb8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d009      	beq.n	800152c <HAL_TIM_Base_Start_IT+0x6c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a17      	ldr	r2, [pc, #92]	; (800157c <HAL_TIM_Base_Start_IT+0xbc>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d004      	beq.n	800152c <HAL_TIM_Base_Start_IT+0x6c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a16      	ldr	r2, [pc, #88]	; (8001580 <HAL_TIM_Base_Start_IT+0xc0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d111      	bne.n	8001550 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2b06      	cmp	r3, #6
 800153c:	d010      	beq.n	8001560 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f042 0201 	orr.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800154e:	e007      	b.n	8001560 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40010000 	.word	0x40010000
 8001574:	40000400 	.word	0x40000400
 8001578:	40000800 	.word	0x40000800
 800157c:	40000c00 	.word	0x40000c00
 8001580:	40014000 	.word	0x40014000

08001584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0202 	mvn.w	r2, #2
 80015b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8ee 	bl	80017a8 <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8e0 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8f1 	bl	80017bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d122      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11b      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0204 	mvn.w	r2, #4
 8001604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8c4 	bl	80017a8 <HAL_TIM_IC_CaptureCallback>
 8001620:	e005      	b.n	800162e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f8b6 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f8c7 	bl	80017bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b08      	cmp	r3, #8
 8001640:	d122      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b08      	cmp	r3, #8
 800164e:	d11b      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0208 	mvn.w	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f89a 	bl	80017a8 <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f88c 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f89d 	bl	80017bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b10      	cmp	r3, #16
 8001694:	d122      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d11b      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0210 	mvn.w	r2, #16
 80016ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f870 	bl	80017a8 <HAL_TIM_IC_CaptureCallback>
 80016c8:	e005      	b.n	80016d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f862 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f873 	bl	80017bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0201 	mvn.w	r2, #1
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe fff4 	bl	80006f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d107      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8e2 	bl	80018f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173e:	2b40      	cmp	r3, #64	; 0x40
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b40      	cmp	r3, #64	; 0x40
 800174e:	d107      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f838 	bl	80017d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d10e      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d107      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0220 	mvn.w	r2, #32
 8001784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f8ac 	bl	80018e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a34      	ldr	r2, [pc, #208]	; (80018c8 <TIM_Base_SetConfig+0xe4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d00f      	beq.n	800181c <TIM_Base_SetConfig+0x38>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001802:	d00b      	beq.n	800181c <TIM_Base_SetConfig+0x38>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a31      	ldr	r2, [pc, #196]	; (80018cc <TIM_Base_SetConfig+0xe8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d007      	beq.n	800181c <TIM_Base_SetConfig+0x38>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	4a30      	ldr	r2, [pc, #192]	; (80018d0 <TIM_Base_SetConfig+0xec>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d003      	beq.n	800181c <TIM_Base_SetConfig+0x38>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	4a2f      	ldr	r2, [pc, #188]	; (80018d4 <TIM_Base_SetConfig+0xf0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d108      	bne.n	800182e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4313      	orrs	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a25      	ldr	r2, [pc, #148]	; (80018c8 <TIM_Base_SetConfig+0xe4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01b      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800183c:	d017      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <TIM_Base_SetConfig+0xe8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <TIM_Base_SetConfig+0xec>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00f      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <TIM_Base_SetConfig+0xf0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00b      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <TIM_Base_SetConfig+0xf4>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d007      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1e      	ldr	r2, [pc, #120]	; (80018dc <TIM_Base_SetConfig+0xf8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d003      	beq.n	800186e <TIM_Base_SetConfig+0x8a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <TIM_Base_SetConfig+0xfc>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d108      	bne.n	8001880 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	68fa      	ldr	r2, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	4313      	orrs	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	689a      	ldr	r2, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a08      	ldr	r2, [pc, #32]	; (80018c8 <TIM_Base_SetConfig+0xe4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d103      	bne.n	80018b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	615a      	str	r2, [r3, #20]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40010000 	.word	0x40010000
 80018cc:	40000400 	.word	0x40000400
 80018d0:	40000800 	.word	0x40000800
 80018d4:	40000c00 	.word	0x40000c00
 80018d8:	40014000 	.word	0x40014000
 80018dc:	40014400 	.word	0x40014400
 80018e0:	40014800 	.word	0x40014800

080018e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018ec:	bf00      	nop
 80018ee:	370c      	adds	r7, #12
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f103 0208 	add.w	r2, r3, #8
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f04f 32ff 	mov.w	r2, #4294967295
 8001924:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	f103 0208 	add.w	r2, r3, #8
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f103 0208 	add.w	r2, r3, #8
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001966:	b480      	push	{r7}
 8001968:	b085      	sub	sp, #20
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800197c:	d103      	bne.n	8001986 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	e00c      	b.n	80019a0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3308      	adds	r3, #8
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	e002      	b.n	8001994 <vListInsert+0x2e>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	429a      	cmp	r2, r3
 800199e:	d2f6      	bcs.n	800198e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685a      	ldr	r2, [r3, #4]
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	1c5a      	adds	r2, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6892      	ldr	r2, [r2, #8]
 80019ee:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6852      	ldr	r2, [r2, #4]
 80019f8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d103      	bne.n	8001a0c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001a36:	2301      	movs	r3, #1
 8001a38:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10a      	bne.n	8001a5a <xQueueGenericReset+0x2e>
        __asm volatile
 8001a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a48:	f383 8811 	msr	BASEPRI, r3
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f3bf 8f4f 	dsb	sy
 8001a54:	60fb      	str	r3, [r7, #12]
    }
 8001a56:	bf00      	nop
 8001a58:	e7fe      	b.n	8001a58 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d05d      	beq.n	8001b1c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d059      	beq.n	8001b1c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	2100      	movs	r1, #0
 8001a72:	fba3 2302 	umull	r2, r3, r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d000      	beq.n	8001a7c <xQueueGenericReset+0x50>
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d14c      	bne.n	8001b1c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8001a82:	f001 fef7 	bl	8003874 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	6939      	ldr	r1, [r7, #16]
 8001a90:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	441a      	add	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6939      	ldr	r1, [r7, #16]
 8001ab6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001ab8:	fb01 f303 	mul.w	r3, r1, r3
 8001abc:	441a      	add	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	22ff      	movs	r2, #255	; 0xff
 8001ac6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	22ff      	movs	r2, #255	; 0xff
 8001ace:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d114      	bne.n	8001b02 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d01a      	beq.n	8001b16 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3310      	adds	r3, #16
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 ffdb 	bl	8002aa0 <xTaskRemoveFromEventList>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d012      	beq.n	8001b16 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001af0:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <xQueueGenericReset+0x11c>)
 8001af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f3bf 8f4f 	dsb	sy
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	e009      	b.n	8001b16 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	3310      	adds	r3, #16
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff ff00 	bl	800190c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	3324      	adds	r3, #36	; 0x24
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff fefb 	bl	800190c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8001b16:	f001 fedd 	bl	80038d4 <vPortExitCritical>
 8001b1a:	e001      	b.n	8001b20 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10a      	bne.n	8001b3c <xQueueGenericReset+0x110>
        __asm volatile
 8001b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2a:	f383 8811 	msr	BASEPRI, r3
 8001b2e:	f3bf 8f6f 	isb	sy
 8001b32:	f3bf 8f4f 	dsb	sy
 8001b36:	60bb      	str	r3, [r7, #8]
    }
 8001b38:	bf00      	nop
 8001b3a:	e7fe      	b.n	8001b3a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001b3c:	697b      	ldr	r3, [r7, #20]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	e000ed04 	.word	0xe000ed04

08001b4c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d02e      	beq.n	8001bc2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b64:	2100      	movs	r1, #0
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d000      	beq.n	8001b74 <xQueueGenericCreate+0x28>
 8001b72:	2101      	movs	r1, #1
 8001b74:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d123      	bne.n	8001bc2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8001b82:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8001b86:	d81c      	bhi.n	8001bc2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3350      	adds	r3, #80	; 0x50
 8001b96:	4618      	mov	r0, r3
 8001b98:	f001 ff58 	bl	8003a4c <pvPortMalloc>
 8001b9c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01c      	beq.n	8001bde <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3350      	adds	r3, #80	; 0x50
 8001bac:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001bae:	79fa      	ldrb	r2, [r7, #7]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f814 	bl	8001be8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001bc0:	e00d      	b.n	8001bde <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <xQueueGenericCreate+0x92>
        __asm volatile
 8001bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bcc:	f383 8811 	msr	BASEPRI, r3
 8001bd0:	f3bf 8f6f 	isb	sy
 8001bd4:	f3bf 8f4f 	dsb	sy
 8001bd8:	613b      	str	r3, [r7, #16]
    }
 8001bda:	bf00      	nop
 8001bdc:	e7fe      	b.n	8001bdc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8001bde:	69fb      	ldr	r3, [r7, #28]
    }
 8001be0:	4618      	mov	r0, r3
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	e002      	b.n	8001c0a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001c16:	2101      	movs	r1, #1
 8001c18:	69b8      	ldr	r0, [r7, #24]
 8001c1a:	f7ff ff07 	bl	8001a2c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	68f9      	ldr	r1, [r7, #12]
 8001c2c:	2073      	movs	r0, #115	; 0x73
 8001c2e:	f002 fdd5 	bl	80047dc <SEGGER_SYSVIEW_RecordU32x3>
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08f      	sub	sp, #60	; 0x3c
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8001c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <xQueueReceive+0x30>
        __asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	623b      	str	r3, [r7, #32]
    }
 8001c68:	bf00      	nop
 8001c6a:	e7fe      	b.n	8001c6a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d103      	bne.n	8001c7a <xQueueReceive+0x3e>
 8001c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <xQueueReceive+0x42>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <xQueueReceive+0x44>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10a      	bne.n	8001c9a <xQueueReceive+0x5e>
        __asm volatile
 8001c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c88:	f383 8811 	msr	BASEPRI, r3
 8001c8c:	f3bf 8f6f 	isb	sy
 8001c90:	f3bf 8f4f 	dsb	sy
 8001c94:	61fb      	str	r3, [r7, #28]
    }
 8001c96:	bf00      	nop
 8001c98:	e7fe      	b.n	8001c98 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001c9a:	f001 f913 	bl	8002ec4 <xTaskGetSchedulerState>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <xQueueReceive+0x6e>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <xQueueReceive+0x72>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <xQueueReceive+0x74>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10a      	bne.n	8001cca <xQueueReceive+0x8e>
        __asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	61bb      	str	r3, [r7, #24]
    }
 8001cc6:	bf00      	nop
 8001cc8:	e7fe      	b.n	8001cc8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8001cca:	f001 fdd3 	bl	8003874 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d02f      	beq.n	8001d3a <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cde:	f000 f8bd 	bl	8001e5c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8001ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f003 fae1 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 8001cea:	4604      	mov	r4, r0
 8001cec:	2000      	movs	r0, #0
 8001cee:	f003 fadd 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	9100      	str	r1, [sp, #0]
 8001cfa:	4621      	mov	r1, r4
 8001cfc:	205c      	movs	r0, #92	; 0x5c
 8001cfe:	f002 fde3 	bl	80048c8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	1e5a      	subs	r2, r3, #1
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00f      	beq.n	8001d32 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	3310      	adds	r3, #16
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fec2 	bl	8002aa0 <xTaskRemoveFromEventList>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8001d22:	4b4d      	ldr	r3, [pc, #308]	; (8001e58 <xQueueReceive+0x21c>)
 8001d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	f3bf 8f4f 	dsb	sy
 8001d2e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8001d32:	f001 fdcf 	bl	80038d4 <vPortExitCritical>
                return pdPASS;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e08a      	b.n	8001e50 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d113      	bne.n	8001d68 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8001d40:	f001 fdc8 	bl	80038d4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d46:	4618      	mov	r0, r3
 8001d48:	f003 fab0 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f003 faac 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 8001d54:	4602      	mov	r2, r0
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	9100      	str	r1, [sp, #0]
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	205c      	movs	r0, #92	; 0x5c
 8001d60:	f002 fdb2 	bl	80048c8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8001d64:	2300      	movs	r3, #0
 8001d66:	e073      	b.n	8001e50 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d106      	bne.n	8001d7c <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 ff6c 	bl	8002c50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001d7c:	f001 fdaa 	bl	80038d4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8001d80:	f000 fb80 	bl	8002484 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001d84:	f001 fd76 	bl	8003874 <vPortEnterCritical>
 8001d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d103      	bne.n	8001d9e <xQueueReceive+0x162>
 8001d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001da4:	b25b      	sxtb	r3, r3
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001daa:	d103      	bne.n	8001db4 <xQueueReceive+0x178>
 8001dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001db4:	f001 fd8e 	bl	80038d4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001db8:	1d3a      	adds	r2, r7, #4
 8001dba:	f107 0310 	add.w	r3, r7, #16
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f000 ff5b 	bl	8002c7c <xTaskCheckForTimeOut>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d124      	bne.n	8001e16 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001dcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001dce:	f000 f8bd 	bl	8001f4c <prvIsQueueEmpty>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d018      	beq.n	8001e0a <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dda:	3324      	adds	r3, #36	; 0x24
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4611      	mov	r1, r2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fdf1 	bl	80029c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001de8:	f000 f85e 	bl	8001ea8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001dec:	f000 fb58 	bl	80024a0 <xTaskResumeAll>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f af69 	bne.w	8001cca <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <xQueueReceive+0x21c>)
 8001dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	f3bf 8f6f 	isb	sy
 8001e08:	e75f      	b.n	8001cca <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8001e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e0c:	f000 f84c 	bl	8001ea8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8001e10:	f000 fb46 	bl	80024a0 <xTaskResumeAll>
 8001e14:	e759      	b.n	8001cca <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8001e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e18:	f000 f846 	bl	8001ea8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8001e1c:	f000 fb40 	bl	80024a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e22:	f000 f893 	bl	8001f4c <prvIsQueueEmpty>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f43f af4e 	beq.w	8001cca <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8001e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fa3b 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 8001e36:	4604      	mov	r4, r0
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f003 fa37 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2101      	movs	r1, #1
 8001e44:	9100      	str	r1, [sp, #0]
 8001e46:	4621      	mov	r1, r4
 8001e48:	205c      	movs	r0, #92	; 0x5c
 8001e4a:	f002 fd3d 	bl	80048c8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8001e4e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3734      	adds	r7, #52	; 0x34
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	e000ed04 	.word	0xe000ed04

08001e5c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d018      	beq.n	8001ea0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68da      	ldr	r2, [r3, #12]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	441a      	add	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d303      	bcc.n	8001e90 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68d9      	ldr	r1, [r3, #12]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6838      	ldr	r0, [r7, #0]
 8001e9c:	f003 fb82 	bl	80055a4 <memcpy>
    }
}
 8001ea0:	bf00      	nop
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}

08001ea8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8001eb0:	f001 fce0 	bl	8003874 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001eba:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ebc:	e011      	b.n	8001ee2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d012      	beq.n	8001eec <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3324      	adds	r3, #36	; 0x24
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 fde8 	bl	8002aa0 <xTaskRemoveFromEventList>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001ed6:	f000 ff37 	bl	8002d48 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	dce9      	bgt.n	8001ebe <prvUnlockQueue+0x16>
 8001eea:	e000      	b.n	8001eee <prvUnlockQueue+0x46>
                        break;
 8001eec:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	22ff      	movs	r2, #255	; 0xff
 8001ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001ef6:	f001 fced 	bl	80038d4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001efa:	f001 fcbb 	bl	8003874 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f04:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f06:	e011      	b.n	8001f2c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d012      	beq.n	8001f36 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3310      	adds	r3, #16
 8001f14:	4618      	mov	r0, r3
 8001f16:	f000 fdc3 	bl	8002aa0 <xTaskRemoveFromEventList>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8001f20:	f000 ff12 	bl	8002d48 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8001f24:	7bbb      	ldrb	r3, [r7, #14]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dce9      	bgt.n	8001f08 <prvUnlockQueue+0x60>
 8001f34:	e000      	b.n	8001f38 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8001f36:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	22ff      	movs	r2, #255	; 0xff
 8001f3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8001f40:	f001 fcc8 	bl	80038d4 <vPortExitCritical>
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8001f54:	f001 fc8e 	bl	8003874 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d102      	bne.n	8001f66 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8001f60:	2301      	movs	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	e001      	b.n	8001f6a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8001f6a:	f001 fcb3 	bl	80038d4 <vPortExitCritical>

    return xReturn;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d10a      	bne.n	8001f9e <vQueueAddToRegistry+0x26>
        __asm volatile
 8001f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8c:	f383 8811 	msr	BASEPRI, r3
 8001f90:	f3bf 8f6f 	isb	sy
 8001f94:	f3bf 8f4f 	dsb	sy
 8001f98:	60fb      	str	r3, [r7, #12]
    }
 8001f9a:	bf00      	nop
 8001f9c:	e7fe      	b.n	8001f9c <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d024      	beq.n	8001ff2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e01e      	b.n	8001fec <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8001fae:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <vQueueAddToRegistry+0xa8>)
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d105      	bne.n	8001fca <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <vQueueAddToRegistry+0xa8>)
 8001fc4:	4413      	add	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
                    break;
 8001fc8:	e013      	b.n	8001ff2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10a      	bne.n	8001fe6 <vQueueAddToRegistry+0x6e>
 8001fd0:	4a13      	ldr	r2, [pc, #76]	; (8002020 <vQueueAddToRegistry+0xa8>)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <vQueueAddToRegistry+0xa8>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2b07      	cmp	r3, #7
 8001ff0:	d9dd      	bls.n	8001fae <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d00f      	beq.n	8002018 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4618      	mov	r0, r3
 8002008:	f003 f950 	bl	80052ac <SEGGER_SYSVIEW_ShrinkId>
 800200c:	4601      	mov	r1, r0
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	2071      	movs	r0, #113	; 0x71
 8002014:	f002 fb88 	bl	8004728 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	2000007c 	.word	0x2000007c

08002024 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002034:	f001 fc1e 	bl	8003874 <vPortEnterCritical>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800203e:	b25b      	sxtb	r3, r3
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d103      	bne.n	800204e <vQueueWaitForMessageRestricted+0x2a>
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002054:	b25b      	sxtb	r3, r3
 8002056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205a:	d103      	bne.n	8002064 <vQueueWaitForMessageRestricted+0x40>
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002064:	f001 fc36 	bl	80038d4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206c:	2b00      	cmp	r3, #0
 800206e:	d106      	bne.n	800207e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3324      	adds	r3, #36	; 0x24
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	68b9      	ldr	r1, [r7, #8]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 fcc9 	bl	8002a10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800207e:	6978      	ldr	r0, [r7, #20]
 8002080:	f7ff ff12 	bl	8001ea8 <prvUnlockQueue>
    }
 8002084:	bf00      	nop
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af04      	add	r7, sp, #16
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	4613      	mov	r3, r2
 800209a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4618      	mov	r0, r3
 80020a2:	f001 fcd3 	bl	8003a4c <pvPortMalloc>
 80020a6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00e      	beq.n	80020cc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80020ae:	2058      	movs	r0, #88	; 0x58
 80020b0:	f001 fccc 	bl	8003a4c <pvPortMalloc>
 80020b4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
 80020c2:	e005      	b.n	80020d0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f001 fda1 	bl	8003c0c <vPortFree>
 80020ca:	e001      	b.n	80020d0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d013      	beq.n	80020fe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	2300      	movs	r3, #0
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	9302      	str	r3, [sp, #8]
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	9301      	str	r3, [sp, #4]
 80020e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68b9      	ldr	r1, [r7, #8]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f80e 	bl	800210e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80020f2:	69f8      	ldr	r0, [r7, #28]
 80020f4:	f000 f8b0 	bl	8002258 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80020f8:	2301      	movs	r3, #1
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	e002      	b.n	8002104 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80020fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002102:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002104:	69bb      	ldr	r3, [r7, #24]
    }
 8002106:	4618      	mov	r0, r3
 8002108:	3720      	adds	r7, #32
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b088      	sub	sp, #32
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800211c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	461a      	mov	r2, r3
 8002126:	21a5      	movs	r1, #165	; 0xa5
 8002128:	f003 fa4a 	bl	80055c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002136:	3b01      	subs	r3, #1
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	f023 0307 	bic.w	r3, r3, #7
 8002144:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002154:	f383 8811 	msr	BASEPRI, r3
 8002158:	f3bf 8f6f 	isb	sy
 800215c:	f3bf 8f4f 	dsb	sy
 8002160:	617b      	str	r3, [r7, #20]
    }
 8002162:	bf00      	nop
 8002164:	e7fe      	b.n	8002164 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01f      	beq.n	80021ac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	e012      	b.n	8002198 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	7819      	ldrb	r1, [r3, #0]
 800217a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	3334      	adds	r3, #52	; 0x34
 8002182:	460a      	mov	r2, r1
 8002184:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	4413      	add	r3, r2
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d006      	beq.n	80021a0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3301      	adds	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	2b09      	cmp	r3, #9
 800219c:	d9e9      	bls.n	8002172 <prvInitialiseNewTask+0x64>
 800219e:	e000      	b.n	80021a2 <prvInitialiseNewTask+0x94>
            {
                break;
 80021a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80021a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80021aa:	e003      	b.n	80021b4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80021ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	d90a      	bls.n	80021d0 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80021ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021be:	f383 8811 	msr	BASEPRI, r3
 80021c2:	f3bf 8f6f 	isb	sy
 80021c6:	f3bf 8f4f 	dsb	sy
 80021ca:	613b      	str	r3, [r7, #16]
    }
 80021cc:	bf00      	nop
 80021ce:	e7fe      	b.n	80021ce <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80021d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d901      	bls.n	80021da <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80021d6:	2304      	movs	r3, #4
 80021d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80021e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80021e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e8:	2200      	movs	r2, #0
 80021ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80021ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ee:	3304      	adds	r3, #4
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fbab 	bl	800194c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80021f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f8:	3318      	adds	r3, #24
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff fba6 	bl	800194c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002204:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002208:	f1c3 0205 	rsb	r2, r3, #5
 800220c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800220e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002218:	3350      	adds	r3, #80	; 0x50
 800221a:	2204      	movs	r2, #4
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f003 f9ce 	bl	80055c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002226:	3354      	adds	r3, #84	; 0x54
 8002228:	2201      	movs	r2, #1
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f9c7 	bl	80055c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	69b8      	ldr	r0, [r7, #24]
 8002238:	f001 f972 	bl	8003520 <pxPortInitialiseStack>
 800223c:	4602      	mov	r2, r0
 800223e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002240:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800224a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800224c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800224e:	bf00      	nop
 8002250:	3720      	adds	r7, #32
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002258:	b5b0      	push	{r4, r5, r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002260:	f001 fb08 	bl	8003874 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002264:	4b4f      	ldr	r3, [pc, #316]	; (80023a4 <prvAddNewTaskToReadyList+0x14c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a4e      	ldr	r2, [pc, #312]	; (80023a4 <prvAddNewTaskToReadyList+0x14c>)
 800226c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800226e:	4b4e      	ldr	r3, [pc, #312]	; (80023a8 <prvAddNewTaskToReadyList+0x150>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d109      	bne.n	800228a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002276:	4a4c      	ldr	r2, [pc, #304]	; (80023a8 <prvAddNewTaskToReadyList+0x150>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800227c:	4b49      	ldr	r3, [pc, #292]	; (80023a4 <prvAddNewTaskToReadyList+0x14c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d110      	bne.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002284:	f000 fd84 	bl	8002d90 <prvInitialiseTaskLists>
 8002288:	e00d      	b.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800228a:	4b48      	ldr	r3, [pc, #288]	; (80023ac <prvAddNewTaskToReadyList+0x154>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002292:	4b45      	ldr	r3, [pc, #276]	; (80023a8 <prvAddNewTaskToReadyList+0x150>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	429a      	cmp	r2, r3
 800229e:	d802      	bhi.n	80022a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80022a0:	4a41      	ldr	r2, [pc, #260]	; (80023a8 <prvAddNewTaskToReadyList+0x150>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <prvAddNewTaskToReadyList+0x158>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	4a40      	ldr	r2, [pc, #256]	; (80023b0 <prvAddNewTaskToReadyList+0x158>)
 80022ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <prvAddNewTaskToReadyList+0x158>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <prvAddNewTaskToReadyList+0x94>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f002 fecd 	bl	8005060 <SEGGER_SYSVIEW_OnTaskCreate>
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	461d      	mov	r5, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	461c      	mov	r4, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	1ae3      	subs	r3, r4, r3
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	462b      	mov	r3, r5
 80022e8:	f001 fdae 	bl	8003e48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 ff3a 	bl	8005168 <SEGGER_SYSVIEW_OnTaskStartReady>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <prvAddNewTaskToReadyList+0x15c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	4a2c      	ldr	r2, [pc, #176]	; (80023b4 <prvAddNewTaskToReadyList+0x15c>)
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230a:	492b      	ldr	r1, [pc, #172]	; (80023b8 <prvAddNewTaskToReadyList+0x160>)
 800230c:	4613      	mov	r3, r2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3304      	adds	r3, #4
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68fa      	ldr	r2, [r7, #12]
 8002320:	609a      	str	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	3204      	adds	r2, #4
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	1d1a      	adds	r2, r3, #4
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002340:	4613      	mov	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <prvAddNewTaskToReadyList+0x160>)
 800234a:	441a      	add	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002354:	4918      	ldr	r1, [pc, #96]	; (80023b8 <prvAddNewTaskToReadyList+0x160>)
 8002356:	4613      	mov	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	1c59      	adds	r1, r3, #1
 8002364:	4814      	ldr	r0, [pc, #80]	; (80023b8 <prvAddNewTaskToReadyList+0x160>)
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4403      	add	r3, r0
 8002370:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002372:	f001 faaf 	bl	80038d4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002376:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <prvAddNewTaskToReadyList+0x154>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00e      	beq.n	800239c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800237e:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <prvAddNewTaskToReadyList+0x150>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	429a      	cmp	r2, r3
 800238a:	d207      	bcs.n	800239c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <prvAddNewTaskToReadyList+0x164>)
 800238e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f3bf 8f4f 	dsb	sy
 8002398:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bdb0      	pop	{r4, r5, r7, pc}
 80023a4:	20000194 	.word	0x20000194
 80023a8:	200000bc 	.word	0x200000bc
 80023ac:	200001a0 	.word	0x200001a0
 80023b0:	200001b0 	.word	0x200001b0
 80023b4:	2000019c 	.word	0x2000019c
 80023b8:	200000c0 	.word	0x200000c0
 80023bc:	e000ed04 	.word	0xe000ed04

080023c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <vTaskStartScheduler+0xa4>)
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	2282      	movs	r2, #130	; 0x82
 80023d2:	4925      	ldr	r1, [pc, #148]	; (8002468 <vTaskStartScheduler+0xa8>)
 80023d4:	4825      	ldr	r0, [pc, #148]	; (800246c <vTaskStartScheduler+0xac>)
 80023d6:	f7ff fe59 	bl	800208c <xTaskCreate>
 80023da:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80023e2:	f000 fe19 	bl	8003018 <xTimerCreateTimerTask>
 80023e6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d124      	bne.n	8002438 <vTaskStartScheduler+0x78>
        __asm volatile
 80023ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f2:	f383 8811 	msr	BASEPRI, r3
 80023f6:	f3bf 8f6f 	isb	sy
 80023fa:	f3bf 8f4f 	dsb	sy
 80023fe:	60bb      	str	r3, [r7, #8]
    }
 8002400:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002402:	4b1b      	ldr	r3, [pc, #108]	; (8002470 <vTaskStartScheduler+0xb0>)
 8002404:	f04f 32ff 	mov.w	r2, #4294967295
 8002408:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <vTaskStartScheduler+0xb4>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002410:	4b19      	ldr	r3, [pc, #100]	; (8002478 <vTaskStartScheduler+0xb8>)
 8002412:	2200      	movs	r2, #0
 8002414:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002416:	4b19      	ldr	r3, [pc, #100]	; (800247c <vTaskStartScheduler+0xbc>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	4b12      	ldr	r3, [pc, #72]	; (8002464 <vTaskStartScheduler+0xa4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d102      	bne.n	8002428 <vTaskStartScheduler+0x68>
 8002422:	f002 fe01 	bl	8005028 <SEGGER_SYSVIEW_OnIdle>
 8002426:	e004      	b.n	8002432 <vTaskStartScheduler+0x72>
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <vTaskStartScheduler+0xbc>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f002 fe59 	bl	80050e4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002432:	f001 f8ff 	bl	8003634 <xPortStartScheduler>
 8002436:	e00e      	b.n	8002456 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243e:	d10a      	bne.n	8002456 <vTaskStartScheduler+0x96>
        __asm volatile
 8002440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	607b      	str	r3, [r7, #4]
    }
 8002452:	bf00      	nop
 8002454:	e7fe      	b.n	8002454 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <vTaskStartScheduler+0xc0>)
 8002458:	681b      	ldr	r3, [r3, #0]
}
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200001b8 	.word	0x200001b8
 8002468:	08005610 	.word	0x08005610
 800246c:	08002d61 	.word	0x08002d61
 8002470:	200001b4 	.word	0x200001b4
 8002474:	200001a0 	.word	0x200001a0
 8002478:	20000198 	.word	0x20000198
 800247c:	200000bc 	.word	0x200000bc
 8002480:	2000000c 	.word	0x2000000c

08002484 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002488:	4b04      	ldr	r3, [pc, #16]	; (800249c <vTaskSuspendAll+0x18>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	4a03      	ldr	r2, [pc, #12]	; (800249c <vTaskSuspendAll+0x18>)
 8002490:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002492:	bf00      	nop
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	200001bc 	.word	0x200001bc

080024a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80024ae:	4b73      	ldr	r3, [pc, #460]	; (800267c <xTaskResumeAll+0x1dc>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <xTaskResumeAll+0x2c>
        __asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	607b      	str	r3, [r7, #4]
    }
 80024c8:	bf00      	nop
 80024ca:	e7fe      	b.n	80024ca <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80024cc:	f001 f9d2 	bl	8003874 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <xTaskResumeAll+0x1dc>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	4a69      	ldr	r2, [pc, #420]	; (800267c <xTaskResumeAll+0x1dc>)
 80024d8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80024da:	4b68      	ldr	r3, [pc, #416]	; (800267c <xTaskResumeAll+0x1dc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80c4 	bne.w	800266c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80024e4:	4b66      	ldr	r3, [pc, #408]	; (8002680 <xTaskResumeAll+0x1e0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	f000 80bf 	beq.w	800266c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80024ee:	e08e      	b.n	800260e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024f0:	4b64      	ldr	r3, [pc, #400]	; (8002684 <xTaskResumeAll+0x1e4>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	613b      	str	r3, [r7, #16]
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	6a12      	ldr	r2, [r2, #32]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	6a1b      	ldr	r3, [r3, #32]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	69d2      	ldr	r2, [r2, #28]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3318      	adds	r3, #24
 800251a:	429a      	cmp	r2, r3
 800251c:	d103      	bne.n	8002526 <xTaskResumeAll+0x86>
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	6a1a      	ldr	r2, [r3, #32]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	2200      	movs	r2, #0
 800252a:	629a      	str	r2, [r3, #40]	; 0x28
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	1e5a      	subs	r2, r3, #1
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	68d2      	ldr	r2, [r2, #12]
 8002544:	609a      	str	r2, [r3, #8]
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	6892      	ldr	r2, [r2, #8]
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	3304      	adds	r3, #4
 8002558:	429a      	cmp	r2, r3
 800255a:	d103      	bne.n	8002564 <xTaskResumeAll+0xc4>
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2200      	movs	r2, #0
 8002568:	615a      	str	r2, [r3, #20]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	1e5a      	subs	r2, r3, #1
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	4618      	mov	r0, r3
 8002578:	f002 fdf6 	bl	8005168 <SEGGER_SYSVIEW_OnTaskStartReady>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	2201      	movs	r2, #1
 8002582:	409a      	lsls	r2, r3
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <xTaskResumeAll+0x1e8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4313      	orrs	r3, r2
 800258a:	4a3f      	ldr	r2, [pc, #252]	; (8002688 <xTaskResumeAll+0x1e8>)
 800258c:	6013      	str	r3, [r2, #0]
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002592:	493e      	ldr	r1, [pc, #248]	; (800268c <xTaskResumeAll+0x1ec>)
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	3304      	adds	r3, #4
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	3204      	adds	r2, #4
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	1d1a      	adds	r2, r3, #4
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4a2e      	ldr	r2, [pc, #184]	; (800268c <xTaskResumeAll+0x1ec>)
 80025d2:	441a      	add	r2, r3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025dc:	492b      	ldr	r1, [pc, #172]	; (800268c <xTaskResumeAll+0x1ec>)
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1c59      	adds	r1, r3, #1
 80025ec:	4827      	ldr	r0, [pc, #156]	; (800268c <xTaskResumeAll+0x1ec>)
 80025ee:	4613      	mov	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025fe:	4b24      	ldr	r3, [pc, #144]	; (8002690 <xTaskResumeAll+0x1f0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002604:	429a      	cmp	r2, r3
 8002606:	d302      	bcc.n	800260e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <xTaskResumeAll+0x1f4>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800260e:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <xTaskResumeAll+0x1e4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	f47f af6c 	bne.w	80024f0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800261e:	f000 fc35 	bl	8002e8c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <xTaskResumeAll+0x1f8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d010      	beq.n	8002650 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800262e:	f000 f847 	bl	80026c0 <xTaskIncrementTick>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d002      	beq.n	800263e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <xTaskResumeAll+0x1f4>)
 800263a:	2201      	movs	r2, #1
 800263c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3b01      	subs	r3, #1
 8002642:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f1      	bne.n	800262e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <xTaskResumeAll+0x1f8>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <xTaskResumeAll+0x1f4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d009      	beq.n	800266c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002658:	2301      	movs	r3, #1
 800265a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <xTaskResumeAll+0x1fc>)
 800265e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800266c:	f001 f932 	bl	80038d4 <vPortExitCritical>

    return xAlreadyYielded;
 8002670:	69bb      	ldr	r3, [r7, #24]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	200001bc 	.word	0x200001bc
 8002680:	20000194 	.word	0x20000194
 8002684:	20000154 	.word	0x20000154
 8002688:	2000019c 	.word	0x2000019c
 800268c:	200000c0 	.word	0x200000c0
 8002690:	200000bc 	.word	0x200000bc
 8002694:	200001a8 	.word	0x200001a8
 8002698:	200001a4 	.word	0x200001a4
 800269c:	e000ed04 	.word	0xe000ed04

080026a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80026a6:	4b05      	ldr	r3, [pc, #20]	; (80026bc <xTaskGetTickCount+0x1c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80026ac:	687b      	ldr	r3, [r7, #4]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000198 	.word	0x20000198

080026c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	; 0x28
 80026c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026ca:	4b7f      	ldr	r3, [pc, #508]	; (80028c8 <xTaskIncrementTick+0x208>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 80f0 	bne.w	80028b4 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80026d4:	4b7d      	ldr	r3, [pc, #500]	; (80028cc <xTaskIncrementTick+0x20c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3301      	adds	r3, #1
 80026da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80026dc:	4a7b      	ldr	r2, [pc, #492]	; (80028cc <xTaskIncrementTick+0x20c>)
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d120      	bne.n	800272a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80026e8:	4b79      	ldr	r3, [pc, #484]	; (80028d0 <xTaskIncrementTick+0x210>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <xTaskIncrementTick+0x48>
        __asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	607b      	str	r3, [r7, #4]
    }
 8002704:	bf00      	nop
 8002706:	e7fe      	b.n	8002706 <xTaskIncrementTick+0x46>
 8002708:	4b71      	ldr	r3, [pc, #452]	; (80028d0 <xTaskIncrementTick+0x210>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <xTaskIncrementTick+0x214>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6f      	ldr	r2, [pc, #444]	; (80028d0 <xTaskIncrementTick+0x210>)
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4a6f      	ldr	r2, [pc, #444]	; (80028d4 <xTaskIncrementTick+0x214>)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	4b6e      	ldr	r3, [pc, #440]	; (80028d8 <xTaskIncrementTick+0x218>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3301      	adds	r3, #1
 8002722:	4a6d      	ldr	r2, [pc, #436]	; (80028d8 <xTaskIncrementTick+0x218>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	f000 fbb1 	bl	8002e8c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800272a:	4b6c      	ldr	r3, [pc, #432]	; (80028dc <xTaskIncrementTick+0x21c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a3a      	ldr	r2, [r7, #32]
 8002730:	429a      	cmp	r2, r3
 8002732:	f0c0 80aa 	bcc.w	800288a <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002736:	4b66      	ldr	r3, [pc, #408]	; (80028d0 <xTaskIncrementTick+0x210>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <xTaskIncrementTick+0x21c>)
 8002742:	f04f 32ff 	mov.w	r2, #4294967295
 8002746:	601a      	str	r2, [r3, #0]
                    break;
 8002748:	e09f      	b.n	800288a <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800274a:	4b61      	ldr	r3, [pc, #388]	; (80028d0 <xTaskIncrementTick+0x210>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	429a      	cmp	r2, r3
 8002760:	d203      	bcs.n	800276a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002762:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <xTaskIncrementTick+0x21c>)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002768:	e08f      	b.n	800288a <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	613b      	str	r3, [r7, #16]
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	68d2      	ldr	r2, [r2, #12]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	6892      	ldr	r2, [r2, #8]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	3304      	adds	r3, #4
 800278c:	429a      	cmp	r2, r3
 800278e:	d103      	bne.n	8002798 <xTaskIncrementTick+0xd8>
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	1e5a      	subs	r2, r3, #1
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01e      	beq.n	80027ee <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	6a12      	ldr	r2, [r2, #32]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	69d2      	ldr	r2, [r2, #28]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	3318      	adds	r3, #24
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d103      	bne.n	80027de <xTaskIncrementTick+0x11e>
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6a1a      	ldr	r2, [r3, #32]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2200      	movs	r2, #0
 80027e2:	629a      	str	r2, [r3, #40]	; 0x28
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f002 fcb9 	bl	8005168 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	2201      	movs	r2, #1
 80027fc:	409a      	lsls	r2, r3
 80027fe:	4b38      	ldr	r3, [pc, #224]	; (80028e0 <xTaskIncrementTick+0x220>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	4a36      	ldr	r2, [pc, #216]	; (80028e0 <xTaskIncrementTick+0x220>)
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	4935      	ldr	r1, [pc, #212]	; (80028e4 <xTaskIncrementTick+0x224>)
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	60da      	str	r2, [r3, #12]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	3204      	adds	r2, #4
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	1d1a      	adds	r2, r3, #4
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	609a      	str	r2, [r3, #8]
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4a26      	ldr	r2, [pc, #152]	; (80028e4 <xTaskIncrementTick+0x224>)
 800284c:	441a      	add	r2, r3
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	615a      	str	r2, [r3, #20]
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002856:	4923      	ldr	r1, [pc, #140]	; (80028e4 <xTaskIncrementTick+0x224>)
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1c59      	adds	r1, r3, #1
 8002866:	481f      	ldr	r0, [pc, #124]	; (80028e4 <xTaskIncrementTick+0x224>)
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4403      	add	r3, r0
 8002872:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <xTaskIncrementTick+0x228>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287e:	429a      	cmp	r2, r3
 8002880:	f4ff af59 	bcc.w	8002736 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002884:	2301      	movs	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002888:	e755      	b.n	8002736 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <xTaskIncrementTick+0x228>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	4914      	ldr	r1, [pc, #80]	; (80028e4 <xTaskIncrementTick+0x224>)
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	440b      	add	r3, r1
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d901      	bls.n	80028a6 <xTaskIncrementTick+0x1e6>
                {
                    xSwitchRequired = pdTRUE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <xTaskIncrementTick+0x22c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d007      	beq.n	80028be <xTaskIncrementTick+0x1fe>
                {
                    xSwitchRequired = pdTRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	e004      	b.n	80028be <xTaskIncrementTick+0x1fe>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <xTaskIncrementTick+0x230>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3301      	adds	r3, #1
 80028ba:	4a0d      	ldr	r2, [pc, #52]	; (80028f0 <xTaskIncrementTick+0x230>)
 80028bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3728      	adds	r7, #40	; 0x28
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	200001bc 	.word	0x200001bc
 80028cc:	20000198 	.word	0x20000198
 80028d0:	2000014c 	.word	0x2000014c
 80028d4:	20000150 	.word	0x20000150
 80028d8:	200001ac 	.word	0x200001ac
 80028dc:	200001b4 	.word	0x200001b4
 80028e0:	2000019c 	.word	0x2000019c
 80028e4:	200000c0 	.word	0x200000c0
 80028e8:	200000bc 	.word	0x200000bc
 80028ec:	200001a8 	.word	0x200001a8
 80028f0:	200001a4 	.word	0x200001a4

080028f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <vTaskSwitchContext+0xbc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002902:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <vTaskSwitchContext+0xc0>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002908:	e04d      	b.n	80029a6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800290a:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <vTaskSwitchContext+0xc0>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <vTaskSwitchContext+0xc4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	fab3 f383 	clz	r3, r3
 800291c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800291e:	7afb      	ldrb	r3, [r7, #11]
 8002920:	f1c3 031f 	rsb	r3, r3, #31
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	4925      	ldr	r1, [pc, #148]	; (80029bc <vTaskSwitchContext+0xc8>)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10a      	bne.n	8002950 <vTaskSwitchContext+0x5c>
        __asm volatile
 800293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800293e:	f383 8811 	msr	BASEPRI, r3
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	f3bf 8f4f 	dsb	sy
 800294a:	607b      	str	r3, [r7, #4]
    }
 800294c:	bf00      	nop
 800294e:	e7fe      	b.n	800294e <vTaskSwitchContext+0x5a>
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <vTaskSwitchContext+0xc8>)
 800295c:	4413      	add	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	3308      	adds	r3, #8
 8002972:	429a      	cmp	r2, r3
 8002974:	d104      	bne.n	8002980 <vTaskSwitchContext+0x8c>
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <vTaskSwitchContext+0xcc>)
 8002988:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800298a:	4b0d      	ldr	r3, [pc, #52]	; (80029c0 <vTaskSwitchContext+0xcc>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	4b0d      	ldr	r3, [pc, #52]	; (80029c4 <vTaskSwitchContext+0xd0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d102      	bne.n	800299c <vTaskSwitchContext+0xa8>
 8002996:	f002 fb47 	bl	8005028 <SEGGER_SYSVIEW_OnIdle>
}
 800299a:	e004      	b.n	80029a6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <vTaskSwitchContext+0xcc>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f002 fb9f 	bl	80050e4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029a6:	bf00      	nop
 80029a8:	3718      	adds	r7, #24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	200001bc 	.word	0x200001bc
 80029b4:	200001a8 	.word	0x200001a8
 80029b8:	2000019c 	.word	0x2000019c
 80029bc:	200000c0 	.word	0x200000c0
 80029c0:	200000bc 	.word	0x200000bc
 80029c4:	200001b8 	.word	0x200001b8

080029c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	60fb      	str	r3, [r7, #12]
    }
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80029ee:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <vTaskPlaceOnEventList+0x44>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	3318      	adds	r3, #24
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe ffb5 	bl	8001966 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80029fc:	2101      	movs	r1, #1
 80029fe:	6838      	ldr	r0, [r7, #0]
 8002a00:	f000 fa7e 	bl	8002f00 <prvAddCurrentTaskToDelayedList>
}
 8002a04:	bf00      	nop
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	200000bc 	.word	0x200000bc

08002a10 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10a      	bne.n	8002a38 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	613b      	str	r3, [r7, #16]
    }
 8002a34:	bf00      	nop
 8002a36:	e7fe      	b.n	8002a36 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	4b17      	ldr	r3, [pc, #92]	; (8002a9c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	61da      	str	r2, [r3, #28]
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6892      	ldr	r2, [r2, #8]
 8002a4e:	621a      	str	r2, [r3, #32]
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	3218      	adds	r2, #24
 8002a5a:	605a      	str	r2, [r3, #4]
 8002a5c:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f103 0218 	add.w	r2, r3, #24
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <vTaskPlaceOnEventListRestricted+0x8c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002a80:	f04f 33ff 	mov.w	r3, #4294967295
 8002a84:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8002a86:	2024      	movs	r0, #36	; 0x24
 8002a88:	f001 fdf4 	bl	8004674 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68b8      	ldr	r0, [r7, #8]
 8002a90:	f000 fa36 	bl	8002f00 <prvAddCurrentTaskToDelayedList>
    }
 8002a94:	bf00      	nop
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	200000bc 	.word	0x200000bc

08002aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002ab0:	6a3b      	ldr	r3, [r7, #32]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	60fb      	str	r3, [r7, #12]
    }
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	61fb      	str	r3, [r7, #28]
 8002ad2:	6a3b      	ldr	r3, [r7, #32]
 8002ad4:	69db      	ldr	r3, [r3, #28]
 8002ad6:	6a3a      	ldr	r2, [r7, #32]
 8002ad8:	6a12      	ldr	r2, [r2, #32]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	6a3a      	ldr	r2, [r7, #32]
 8002ae2:	69d2      	ldr	r2, [r2, #28]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	3318      	adds	r3, #24
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d103      	bne.n	8002afa <xTaskRemoveFromEventList+0x5a>
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	6a1a      	ldr	r2, [r3, #32]
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2200      	movs	r2, #0
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	1e5a      	subs	r2, r3, #1
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b0a:	4b4b      	ldr	r3, [pc, #300]	; (8002c38 <xTaskRemoveFromEventList+0x198>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d162      	bne.n	8002bd8 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	6a3b      	ldr	r3, [r7, #32]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	6a3a      	ldr	r2, [r7, #32]
 8002b1e:	68d2      	ldr	r2, [r2, #12]
 8002b20:	609a      	str	r2, [r3, #8]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	6a3a      	ldr	r2, [r7, #32]
 8002b28:	6892      	ldr	r2, [r2, #8]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	685a      	ldr	r2, [r3, #4]
 8002b30:	6a3b      	ldr	r3, [r7, #32]
 8002b32:	3304      	adds	r3, #4
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d103      	bne.n	8002b40 <xTaskRemoveFromEventList+0xa0>
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	605a      	str	r2, [r3, #4]
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	2200      	movs	r2, #0
 8002b44:	615a      	str	r2, [r3, #20]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1e5a      	subs	r2, r3, #1
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f002 fb08 	bl	8005168 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <xTaskRemoveFromEventList+0x19c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	4a35      	ldr	r2, [pc, #212]	; (8002c3c <xTaskRemoveFromEventList+0x19c>)
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	4934      	ldr	r1, [pc, #208]	; (8002c40 <xTaskRemoveFromEventList+0x1a0>)
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	6a3a      	ldr	r2, [r7, #32]
 8002b94:	3204      	adds	r2, #4
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	1d1a      	adds	r2, r3, #4
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4a24      	ldr	r2, [pc, #144]	; (8002c40 <xTaskRemoveFromEventList+0x1a0>)
 8002bae:	441a      	add	r2, r3
 8002bb0:	6a3b      	ldr	r3, [r7, #32]
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb8:	4921      	ldr	r1, [pc, #132]	; (8002c40 <xTaskRemoveFromEventList+0x1a0>)
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1c59      	adds	r1, r3, #1
 8002bc8:	481d      	ldr	r0, [pc, #116]	; (8002c40 <xTaskRemoveFromEventList+0x1a0>)
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4403      	add	r3, r0
 8002bd4:	6019      	str	r1, [r3, #0]
 8002bd6:	e01b      	b.n	8002c10 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	; (8002c44 <xTaskRemoveFromEventList+0x1a4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	61da      	str	r2, [r3, #28]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	621a      	str	r2, [r3, #32]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	3218      	adds	r2, #24
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	f103 0218 	add.w	r2, r3, #24
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <xTaskRemoveFromEventList+0x1a4>)
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
 8002c06:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <xTaskRemoveFromEventList+0x1a4>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	; (8002c44 <xTaskRemoveFromEventList+0x1a4>)
 8002c0e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <xTaskRemoveFromEventList+0x1a8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d905      	bls.n	8002c2a <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8002c22:	4b0a      	ldr	r3, [pc, #40]	; (8002c4c <xTaskRemoveFromEventList+0x1ac>)
 8002c24:	2201      	movs	r2, #1
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e001      	b.n	8002c2e <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3728      	adds	r7, #40	; 0x28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	200001bc 	.word	0x200001bc
 8002c3c:	2000019c 	.word	0x2000019c
 8002c40:	200000c0 	.word	0x200000c0
 8002c44:	20000154 	.word	0x20000154
 8002c48:	200000bc 	.word	0x200000bc
 8002c4c:	200001a8 	.word	0x200001a8

08002c50 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <vTaskInternalSetTimeOutState+0x24>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <vTaskInternalSetTimeOutState+0x28>)
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	605a      	str	r2, [r3, #4]
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	200001ac 	.word	0x200001ac
 8002c78:	20000198 	.word	0x20000198

08002c7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10a      	bne.n	8002ca2 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	613b      	str	r3, [r7, #16]
    }
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	60fb      	str	r3, [r7, #12]
    }
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8002cbe:	f000 fdd9 	bl	8003874 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8002cc2:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <xTaskCheckForTimeOut+0xc4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cda:	d102      	bne.n	8002ce2 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	e026      	b.n	8002d30 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <xTaskCheckForTimeOut+0xc8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d00a      	beq.n	8002d04 <xTaskCheckForTimeOut+0x88>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d305      	bcc.n	8002d04 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e015      	b.n	8002d30 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d20b      	bcs.n	8002d26 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	1ad2      	subs	r2, r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff ff98 	bl	8002c50 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	e004      	b.n	8002d30 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8002d30:	f000 fdd0 	bl	80038d4 <vPortExitCritical>

    return xReturn;
 8002d34:	69fb      	ldr	r3, [r7, #28]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000198 	.word	0x20000198
 8002d44:	200001ac 	.word	0x200001ac

08002d48 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <vTaskMissedYield+0x14>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	200001a8 	.word	0x200001a8

08002d60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d68:	f000 f852 	bl	8002e10 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002d6c:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <prvIdleTask+0x28>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d9f9      	bls.n	8002d68 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <prvIdleTask+0x2c>)
 8002d76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d84:	e7f0      	b.n	8002d68 <prvIdleTask+0x8>
 8002d86:	bf00      	nop
 8002d88:	200000c0 	.word	0x200000c0
 8002d8c:	e000ed04 	.word	0xe000ed04

08002d90 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d96:	2300      	movs	r3, #0
 8002d98:	607b      	str	r3, [r7, #4]
 8002d9a:	e00c      	b.n	8002db6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <prvInitialiseTaskLists+0x60>)
 8002da8:	4413      	add	r3, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fe fdae 	bl	800190c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3301      	adds	r3, #1
 8002db4:	607b      	str	r3, [r7, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d9ef      	bls.n	8002d9c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <prvInitialiseTaskLists+0x64>)
 8002dbe:	f7fe fda5 	bl	800190c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002dc2:	480d      	ldr	r0, [pc, #52]	; (8002df8 <prvInitialiseTaskLists+0x68>)
 8002dc4:	f7fe fda2 	bl	800190c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <prvInitialiseTaskLists+0x6c>)
 8002dca:	f7fe fd9f 	bl	800190c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002dce:	480c      	ldr	r0, [pc, #48]	; (8002e00 <prvInitialiseTaskLists+0x70>)
 8002dd0:	f7fe fd9c 	bl	800190c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002dd4:	480b      	ldr	r0, [pc, #44]	; (8002e04 <prvInitialiseTaskLists+0x74>)
 8002dd6:	f7fe fd99 	bl	800190c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <prvInitialiseTaskLists+0x78>)
 8002ddc:	4a05      	ldr	r2, [pc, #20]	; (8002df4 <prvInitialiseTaskLists+0x64>)
 8002dde:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002de0:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <prvInitialiseTaskLists+0x7c>)
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <prvInitialiseTaskLists+0x68>)
 8002de4:	601a      	str	r2, [r3, #0]
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200000c0 	.word	0x200000c0
 8002df4:	20000124 	.word	0x20000124
 8002df8:	20000138 	.word	0x20000138
 8002dfc:	20000154 	.word	0x20000154
 8002e00:	20000168 	.word	0x20000168
 8002e04:	20000180 	.word	0x20000180
 8002e08:	2000014c 	.word	0x2000014c
 8002e0c:	20000150 	.word	0x20000150

08002e10 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e16:	e019      	b.n	8002e4c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002e18:	f000 fd2c 	bl	8003874 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e1c:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <prvCheckTasksWaitingTermination+0x50>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3304      	adds	r3, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe fdd5 	bl	80019d8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <prvCheckTasksWaitingTermination+0x54>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <prvCheckTasksWaitingTermination+0x54>)
 8002e36:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002e38:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <prvCheckTasksWaitingTermination+0x58>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <prvCheckTasksWaitingTermination+0x58>)
 8002e40:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002e42:	f000 fd47 	bl	80038d4 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f810 	bl	8002e6c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <prvCheckTasksWaitingTermination+0x58>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d1e1      	bne.n	8002e18 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000168 	.word	0x20000168
 8002e64:	20000194 	.word	0x20000194
 8002e68:	2000017c 	.word	0x2000017c

08002e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fec7 	bl	8003c0c <vPortFree>
                vPortFree( pxTCB );
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 fec4 	bl	8003c0c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e90:	4b0a      	ldr	r3, [pc, #40]	; (8002ebc <prvResetNextTaskUnblockTime+0x30>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e9a:	4b09      	ldr	r3, [pc, #36]	; (8002ec0 <prvResetNextTaskUnblockTime+0x34>)
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ea2:	e005      	b.n	8002eb0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <prvResetNextTaskUnblockTime+0x30>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a04      	ldr	r2, [pc, #16]	; (8002ec0 <prvResetNextTaskUnblockTime+0x34>)
 8002eae:	6013      	str	r3, [r2, #0]
}
 8002eb0:	bf00      	nop
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	2000014c 	.word	0x2000014c
 8002ec0:	200001b4 	.word	0x200001b4

08002ec4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8002eca:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <xTaskGetSchedulerState+0x34>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	607b      	str	r3, [r7, #4]
 8002ed6:	e008      	b.n	8002eea <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ed8:	4b08      	ldr	r3, [pc, #32]	; (8002efc <xTaskGetSchedulerState+0x38>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d102      	bne.n	8002ee6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	e001      	b.n	8002eea <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8002eea:	687b      	ldr	r3, [r7, #4]
    }
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	200001a0 	.word	0x200001a0
 8002efc:	200001bc 	.word	0x200001bc

08002f00 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <prvAddCurrentTaskToDelayedList+0xfc>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f10:	4b3b      	ldr	r3, [pc, #236]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fe fd5e 	bl	80019d8 <uxListRemove>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002f22:	4b37      	ldr	r3, [pc, #220]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f28:	2201      	movs	r2, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43da      	mvns	r2, r3
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <prvAddCurrentTaskToDelayedList+0x104>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4013      	ands	r3, r2
 8002f36:	4a33      	ldr	r2, [pc, #204]	; (8003004 <prvAddCurrentTaskToDelayedList+0x104>)
 8002f38:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f40:	d124      	bne.n	8002f8c <prvAddCurrentTaskToDelayedList+0x8c>
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d021      	beq.n	8002f8c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002f48:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	4b2c      	ldr	r3, [pc, #176]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	4b2a      	ldr	r3, [pc, #168]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	6892      	ldr	r2, [r2, #8]
 8002f5e:	60da      	str	r2, [r3, #12]
 8002f60:	4b27      	ldr	r3, [pc, #156]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	3204      	adds	r2, #4
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	4b24      	ldr	r3, [pc, #144]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	1d1a      	adds	r2, r3, #4
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	609a      	str	r2, [r3, #8]
 8002f76:	4b22      	ldr	r3, [pc, #136]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a23      	ldr	r2, [pc, #140]	; (8003008 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f7c:	615a      	str	r2, [r3, #20]
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a20      	ldr	r2, [pc, #128]	; (8003008 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002f8a:	e032      	b.n	8002ff2 <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002f94:	4b1a      	ldr	r3, [pc, #104]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002f9c:	68fa      	ldr	r2, [r7, #12]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d20f      	bcs.n	8002fc4 <prvAddCurrentTaskToDelayedList+0xc4>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8002fa4:	4b16      	ldr	r3, [pc, #88]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4618      	mov	r0, r3
 8002fac:	f002 f91e 	bl	80051ec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fb0:	4b16      	ldr	r3, [pc, #88]	; (800300c <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4b12      	ldr	r3, [pc, #72]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3304      	adds	r3, #4
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f7fe fcd2 	bl	8001966 <vListInsert>
}
 8002fc2:	e016      	b.n	8002ff2 <prvAddCurrentTaskToDelayedList+0xf2>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2104      	movs	r1, #4
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 f90e 	bl	80051ec <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fd0:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <prvAddCurrentTaskToDelayedList+0x110>)
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	; (8003000 <prvAddCurrentTaskToDelayedList+0x100>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	3304      	adds	r3, #4
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4610      	mov	r0, r2
 8002fde:	f7fe fcc2 	bl	8001966 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8002fe2:	4b0c      	ldr	r3, [pc, #48]	; (8003014 <prvAddCurrentTaskToDelayedList+0x114>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d202      	bcs.n	8002ff2 <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 8002fec:	4a09      	ldr	r2, [pc, #36]	; (8003014 <prvAddCurrentTaskToDelayedList+0x114>)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6013      	str	r3, [r2, #0]
}
 8002ff2:	bf00      	nop
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20000198 	.word	0x20000198
 8003000:	200000bc 	.word	0x200000bc
 8003004:	2000019c 	.word	0x2000019c
 8003008:	20000180 	.word	0x20000180
 800300c:	20000150 	.word	0x20000150
 8003010:	2000014c 	.word	0x2000014c
 8003014:	200001b4 	.word	0x200001b4

08003018 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800301e:	2300      	movs	r3, #0
 8003020:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003022:	f000 fa47 	bl	80034b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003026:	4b11      	ldr	r3, [pc, #68]	; (800306c <xTimerCreateTimerTask+0x54>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <xTimerCreateTimerTask+0x58>)
 8003030:	9301      	str	r3, [sp, #4]
 8003032:	2302      	movs	r3, #2
 8003034:	9300      	str	r3, [sp, #0]
 8003036:	2300      	movs	r3, #0
 8003038:	f44f 7282 	mov.w	r2, #260	; 0x104
 800303c:	490d      	ldr	r1, [pc, #52]	; (8003074 <xTimerCreateTimerTask+0x5c>)
 800303e:	480e      	ldr	r0, [pc, #56]	; (8003078 <xTimerCreateTimerTask+0x60>)
 8003040:	f7ff f824 	bl	800208c <xTaskCreate>
 8003044:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10a      	bne.n	8003062 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800304c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003050:	f383 8811 	msr	BASEPRI, r3
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	f3bf 8f4f 	dsb	sy
 800305c:	603b      	str	r3, [r7, #0]
    }
 800305e:	bf00      	nop
 8003060:	e7fe      	b.n	8003060 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003062:	687b      	ldr	r3, [r7, #4]
    }
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	200001f0 	.word	0x200001f0
 8003070:	200001f4 	.word	0x200001f4
 8003074:	08005618 	.word	0x08005618
 8003078:	08003121 	.word	0x08003121

0800307c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800307c:	b580      	push	{r7, lr}
 800307e:	b084      	sub	sp, #16
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003088:	e008      	b.n	800309c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	4413      	add	r3, r2
 8003092:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a1b      	ldr	r3, [r3, #32]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	18d1      	adds	r1, r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 f8dd 	bl	8003268 <prvInsertTimerInActiveList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ea      	bne.n	800308a <prvReloadTimer+0xe>
        }
    }
 80030b4:	bf00      	nop
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <prvProcessExpiredTimer+0x5c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fe fc7d 	bl	80019d8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff ffc3 	bl	800307c <prvReloadTimer>
 80030f6:	e008      	b.n	800310a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80030fe:	f023 0301 	bic.w	r3, r3, #1
 8003102:	b2da      	uxtb	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	4798      	blx	r3
    }
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200001e8 	.word	0x200001e8

08003120 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003128:	f107 0308 	add.w	r3, r7, #8
 800312c:	4618      	mov	r0, r3
 800312e:	f000 f857 	bl	80031e0 <prvGetNextExpireTime>
 8003132:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4619      	mov	r1, r3
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f803 	bl	8003144 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800313e:	f000 f8d5 	bl	80032ec <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003142:	e7f1      	b.n	8003128 <prvTimerTask+0x8>

08003144 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800314e:	f7ff f999 	bl	8002484 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003152:	f107 0308 	add.w	r3, r7, #8
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f866 	bl	8003228 <prvSampleTimeNow>
 800315c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d130      	bne.n	80031c6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <prvProcessTimerOrBlockTask+0x3c>
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	429a      	cmp	r2, r3
 8003170:	d806      	bhi.n	8003180 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003172:	f7ff f995 	bl	80024a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f7ff ffa1 	bl	80030c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800317e:	e024      	b.n	80031ca <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <prvProcessTimerOrBlockTask+0x90>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <prvProcessTimerOrBlockTask+0x50>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <prvProcessTimerOrBlockTask+0x52>
 8003194:	2300      	movs	r3, #0
 8003196:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <prvProcessTimerOrBlockTask+0x94>)
 800319a:	6818      	ldr	r0, [r3, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	4619      	mov	r1, r3
 80031a6:	f7fe ff3d 	bl	8002024 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80031aa:	f7ff f979 	bl	80024a0 <xTaskResumeAll>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <prvProcessTimerOrBlockTask+0x98>)
 80031b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	f3bf 8f6f 	isb	sy
    }
 80031c4:	e001      	b.n	80031ca <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80031c6:	f7ff f96b 	bl	80024a0 <xTaskResumeAll>
    }
 80031ca:	bf00      	nop
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200001ec 	.word	0x200001ec
 80031d8:	200001f0 	.word	0x200001f0
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <prvGetNextExpireTime+0x44>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <prvGetNextExpireTime+0x16>
 80031f2:	2201      	movs	r2, #1
 80031f4:	e000      	b.n	80031f8 <prvGetNextExpireTime+0x18>
 80031f6:	2200      	movs	r2, #0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d105      	bne.n	8003210 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <prvGetNextExpireTime+0x44>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60fb      	str	r3, [r7, #12]
 800320e:	e001      	b.n	8003214 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003214:	68fb      	ldr	r3, [r7, #12]
    }
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	200001e8 	.word	0x200001e8

08003228 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003230:	f7ff fa36 	bl	80026a0 <xTaskGetTickCount>
 8003234:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <prvSampleTimeNow+0x3c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	429a      	cmp	r2, r3
 800323e:	d205      	bcs.n	800324c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003240:	f000 f912 	bl	8003468 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	e002      	b.n	8003252 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003252:	4a04      	ldr	r2, [pc, #16]	; (8003264 <prvSampleTimeNow+0x3c>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003258:	68fb      	ldr	r3, [r7, #12]
    }
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200001f8 	.word	0x200001f8

08003268 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
 8003274:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	68ba      	ldr	r2, [r7, #8]
 800327e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	429a      	cmp	r2, r3
 800328c:	d812      	bhi.n	80032b4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	429a      	cmp	r2, r3
 800329a:	d302      	bcc.n	80032a2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800329c:	2301      	movs	r3, #1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	e01b      	b.n	80032da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <prvInsertTimerInActiveList+0x7c>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3304      	adds	r3, #4
 80032aa:	4619      	mov	r1, r3
 80032ac:	4610      	mov	r0, r2
 80032ae:	f7fe fb5a 	bl	8001966 <vListInsert>
 80032b2:	e012      	b.n	80032da <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d206      	bcs.n	80032ca <prvInsertTimerInActiveList+0x62>
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80032c4:	2301      	movs	r3, #1
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e007      	b.n	80032da <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80032ca:	4b07      	ldr	r3, [pc, #28]	; (80032e8 <prvInsertTimerInActiveList+0x80>)
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	3304      	adds	r3, #4
 80032d2:	4619      	mov	r1, r3
 80032d4:	4610      	mov	r0, r2
 80032d6:	f7fe fb46 	bl	8001966 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80032da:	697b      	ldr	r3, [r7, #20]
    }
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	200001ec 	.word	0x200001ec
 80032e8:	200001e8 	.word	0x200001e8

080032ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80032f2:	e0a6      	b.n	8003442 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f2c0 80a2 	blt.w	8003440 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d004      	beq.n	8003312 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	3304      	adds	r3, #4
 800330c:	4618      	mov	r0, r3
 800330e:	f7fe fb63 	bl	80019d8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003312:	1d3b      	adds	r3, r7, #4
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff87 	bl	8003228 <prvSampleTimeNow>
 800331a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	3b01      	subs	r3, #1
 8003320:	2b08      	cmp	r3, #8
 8003322:	f200 808e 	bhi.w	8003442 <prvProcessReceivedCommands+0x156>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <prvProcessReceivedCommands+0x40>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003351 	.word	0x08003351
 8003334:	080033b9 	.word	0x080033b9
 8003338:	080033cd 	.word	0x080033cd
 800333c:	08003417 	.word	0x08003417
 8003340:	08003351 	.word	0x08003351
 8003344:	08003351 	.word	0x08003351
 8003348:	080033b9 	.word	0x080033b9
 800334c:	080033cd 	.word	0x080033cd
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	18d1      	adds	r1, r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	69f8      	ldr	r0, [r7, #28]
 8003370:	f7ff ff7a 	bl	8003268 <prvInsertTimerInActiveList>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	4413      	add	r3, r2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4619      	mov	r1, r3
 8003394:	69f8      	ldr	r0, [r7, #28]
 8003396:	f7ff fe71 	bl	800307c <prvReloadTimer>
 800339a:	e008      	b.n	80033ae <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	69f8      	ldr	r0, [r7, #28]
 80033b4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80033b6:	e044      	b.n	8003442 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80033ca:	e03a      	b.n	8003442 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10a      	bne.n	8003402 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80033ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	617b      	str	r3, [r7, #20]
    }
 80033fe:	bf00      	nop
 8003400:	e7fe      	b.n	8003400 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	699a      	ldr	r2, [r3, #24]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	18d1      	adds	r1, r2, r3
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	69f8      	ldr	r0, [r7, #28]
 8003410:	f7ff ff2a 	bl	8003268 <prvInsertTimerInActiveList>
                        break;
 8003414:	e015      	b.n	8003442 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d103      	bne.n	800342c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8003424:	69f8      	ldr	r0, [r7, #28]
 8003426:	f000 fbf1 	bl	8003c0c <vPortFree>
 800342a:	e00a      	b.n	8003442 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800343e:	e000      	b.n	8003442 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003440:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003442:	4b08      	ldr	r3, [pc, #32]	; (8003464 <prvProcessReceivedCommands+0x178>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f107 0108 	add.w	r1, r7, #8
 800344a:	2200      	movs	r2, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f7fe fbf5 	bl	8001c3c <xQueueReceive>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	f47f af4d 	bne.w	80032f4 <prvProcessReceivedCommands+0x8>
        }
    }
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	3720      	adds	r7, #32
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	200001f0 	.word	0x200001f0

08003468 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800346e:	e009      	b.n	8003484 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <prvSwitchTimerLists+0x44>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800347a:	f04f 31ff 	mov.w	r1, #4294967295
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	f7ff fe1e 	bl	80030c0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <prvSwitchTimerLists+0x44>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800348e:	4b07      	ldr	r3, [pc, #28]	; (80034ac <prvSwitchTimerLists+0x44>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <prvSwitchTimerLists+0x48>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a04      	ldr	r2, [pc, #16]	; (80034ac <prvSwitchTimerLists+0x44>)
 800349a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800349c:	4a04      	ldr	r2, [pc, #16]	; (80034b0 <prvSwitchTimerLists+0x48>)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6013      	str	r3, [r2, #0]
    }
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200001e8 	.word	0x200001e8
 80034b0:	200001ec 	.word	0x200001ec

080034b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80034b8:	f000 f9dc 	bl	8003874 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <prvCheckForValidListAndQueue+0x54>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d11d      	bne.n	8003500 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80034c4:	4811      	ldr	r0, [pc, #68]	; (800350c <prvCheckForValidListAndQueue+0x58>)
 80034c6:	f7fe fa21 	bl	800190c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80034ca:	4811      	ldr	r0, [pc, #68]	; (8003510 <prvCheckForValidListAndQueue+0x5c>)
 80034cc:	f7fe fa1e 	bl	800190c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <prvCheckForValidListAndQueue+0x60>)
 80034d2:	4a0e      	ldr	r2, [pc, #56]	; (800350c <prvCheckForValidListAndQueue+0x58>)
 80034d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80034d6:	4b10      	ldr	r3, [pc, #64]	; (8003518 <prvCheckForValidListAndQueue+0x64>)
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <prvCheckForValidListAndQueue+0x5c>)
 80034da:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80034dc:	2200      	movs	r2, #0
 80034de:	210c      	movs	r1, #12
 80034e0:	200a      	movs	r0, #10
 80034e2:	f7fe fb33 	bl	8001b4c <xQueueGenericCreate>
 80034e6:	4603      	mov	r3, r0
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <prvCheckForValidListAndQueue+0x54>)
 80034ea:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80034ec:	4b06      	ldr	r3, [pc, #24]	; (8003508 <prvCheckForValidListAndQueue+0x54>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d005      	beq.n	8003500 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80034f4:	4b04      	ldr	r3, [pc, #16]	; (8003508 <prvCheckForValidListAndQueue+0x54>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4908      	ldr	r1, [pc, #32]	; (800351c <prvCheckForValidListAndQueue+0x68>)
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fd3c 	bl	8001f78 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003500:	f000 f9e8 	bl	80038d4 <vPortExitCritical>
    }
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}
 8003508:	200001f0 	.word	0x200001f0
 800350c:	200001c0 	.word	0x200001c0
 8003510:	200001d4 	.word	0x200001d4
 8003514:	200001e8 	.word	0x200001e8
 8003518:	200001ec 	.word	0x200001ec
 800351c:	08005620 	.word	0x08005620

08003520 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	3b04      	subs	r3, #4
 8003530:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003538:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	3b04      	subs	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	3b04      	subs	r3, #4
 800354e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003550:	4a0c      	ldr	r2, [pc, #48]	; (8003584 <pxPortInitialiseStack+0x64>)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b14      	subs	r3, #20
 800355a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b04      	subs	r3, #4
 8003566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f06f 0202 	mvn.w	r2, #2
 800356e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3b20      	subs	r3, #32
 8003574:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	08003589 	.word	0x08003589

08003588 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003592:	4b12      	ldr	r3, [pc, #72]	; (80035dc <prvTaskExitError+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d00a      	beq.n	80035b2 <prvTaskExitError+0x2a>
        __asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	60fb      	str	r3, [r7, #12]
    }
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <prvTaskExitError+0x28>
        __asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	60bb      	str	r3, [r7, #8]
    }
 80035c4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80035c6:	bf00      	nop
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0fc      	beq.n	80035c8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80035ce:	bf00      	nop
 80035d0:	bf00      	nop
 80035d2:	3714      	adds	r7, #20
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	20000010 	.word	0x20000010

080035e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <pxCurrentTCBConst2>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ea:	f380 8809 	msr	PSP, r0
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	4770      	bx	lr
 80035fc:	f3af 8000 	nop.w

08003600 <pxCurrentTCBConst2>:
 8003600:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003608:	4808      	ldr	r0, [pc, #32]	; (800362c <prvPortStartFirstTask+0x24>)
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	6800      	ldr	r0, [r0, #0]
 800360e:	f380 8808 	msr	MSP, r0
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f380 8814 	msr	CONTROL, r0
 800361a:	b662      	cpsie	i
 800361c:	b661      	cpsie	f
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	df00      	svc	0
 8003628:	bf00      	nop
 800362a:	0000      	.short	0x0000
 800362c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003630:	bf00      	nop
 8003632:	bf00      	nop

08003634 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800363a:	4b46      	ldr	r3, [pc, #280]	; (8003754 <xPortStartScheduler+0x120>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a46      	ldr	r2, [pc, #280]	; (8003758 <xPortStartScheduler+0x124>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d10a      	bne.n	800365a <xPortStartScheduler+0x26>
        __asm volatile
 8003644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	613b      	str	r3, [r7, #16]
    }
 8003656:	bf00      	nop
 8003658:	e7fe      	b.n	8003658 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800365a:	4b3e      	ldr	r3, [pc, #248]	; (8003754 <xPortStartScheduler+0x120>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3f      	ldr	r2, [pc, #252]	; (800375c <xPortStartScheduler+0x128>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d10a      	bne.n	800367a <xPortStartScheduler+0x46>
        __asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60fb      	str	r3, [r7, #12]
    }
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <xPortStartScheduler+0x12c>)
 800367c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	b2db      	uxtb	r3, r3
 8003684:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	b2db      	uxtb	r3, r3
 8003698:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800369c:	b2da      	uxtb	r2, r3
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <xPortStartScheduler+0x130>)
 80036a0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036a2:	4b31      	ldr	r3, [pc, #196]	; (8003768 <xPortStartScheduler+0x134>)
 80036a4:	2207      	movs	r2, #7
 80036a6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036a8:	e009      	b.n	80036be <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80036aa:	4b2f      	ldr	r3, [pc, #188]	; (8003768 <xPortStartScheduler+0x134>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	4a2d      	ldr	r2, [pc, #180]	; (8003768 <xPortStartScheduler+0x134>)
 80036b2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036b4:	78fb      	ldrb	r3, [r7, #3]
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d0ef      	beq.n	80036aa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <xPortStartScheduler+0x134>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1c3 0307 	rsb	r3, r3, #7
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d00a      	beq.n	80036ec <xPortStartScheduler+0xb8>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036ec:	4b1e      	ldr	r3, [pc, #120]	; (8003768 <xPortStartScheduler+0x134>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	021b      	lsls	r3, r3, #8
 80036f2:	4a1d      	ldr	r2, [pc, #116]	; (8003768 <xPortStartScheduler+0x134>)
 80036f4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036f6:	4b1c      	ldr	r3, [pc, #112]	; (8003768 <xPortStartScheduler+0x134>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036fe:	4a1a      	ldr	r2, [pc, #104]	; (8003768 <xPortStartScheduler+0x134>)
 8003700:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800370a:	4b18      	ldr	r3, [pc, #96]	; (800376c <xPortStartScheduler+0x138>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a17      	ldr	r2, [pc, #92]	; (800376c <xPortStartScheduler+0x138>)
 8003710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003714:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <xPortStartScheduler+0x138>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a14      	ldr	r2, [pc, #80]	; (800376c <xPortStartScheduler+0x138>)
 800371c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003720:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003722:	f000 f963 	bl	80039ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <xPortStartScheduler+0x13c>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800372c:	f000 f982 	bl	8003a34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003730:	4b10      	ldr	r3, [pc, #64]	; (8003774 <xPortStartScheduler+0x140>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a0f      	ldr	r2, [pc, #60]	; (8003774 <xPortStartScheduler+0x140>)
 8003736:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800373a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800373c:	f7ff ff64 	bl	8003608 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003740:	f7ff f8d8 	bl	80028f4 <vTaskSwitchContext>
    prvTaskExitError();
 8003744:	f7ff ff20 	bl	8003588 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	e000ed00 	.word	0xe000ed00
 8003758:	410fc271 	.word	0x410fc271
 800375c:	410fc270 	.word	0x410fc270
 8003760:	e000e400 	.word	0xe000e400
 8003764:	200001fc 	.word	0x200001fc
 8003768:	20000200 	.word	0x20000200
 800376c:	e000ed20 	.word	0xe000ed20
 8003770:	20000010 	.word	0x20000010
 8003774:	e000ef34 	.word	0xe000ef34

08003778 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003778:	b480      	push	{r7}
 800377a:	b087      	sub	sp, #28
 800377c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <vInitPrioGroupValue+0xe4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a37      	ldr	r2, [pc, #220]	; (8003860 <vInitPrioGroupValue+0xe8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d10a      	bne.n	800379e <vInitPrioGroupValue+0x26>
        __asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	613b      	str	r3, [r7, #16]
    }
 800379a:	bf00      	nop
 800379c:	e7fe      	b.n	800379c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800379e:	4b2f      	ldr	r3, [pc, #188]	; (800385c <vInitPrioGroupValue+0xe4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a30      	ldr	r2, [pc, #192]	; (8003864 <vInitPrioGroupValue+0xec>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d10a      	bne.n	80037be <vInitPrioGroupValue+0x46>
        __asm volatile
 80037a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ac:	f383 8811 	msr	BASEPRI, r3
 80037b0:	f3bf 8f6f 	isb	sy
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	60fb      	str	r3, [r7, #12]
    }
 80037ba:	bf00      	nop
 80037bc:	e7fe      	b.n	80037bc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <vInitPrioGroupValue+0xf0>)
 80037c0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	22ff      	movs	r2, #255	; 0xff
 80037ce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <vInitPrioGroupValue+0xf4>)
 80037e4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80037e6:	4b22      	ldr	r3, [pc, #136]	; (8003870 <vInitPrioGroupValue+0xf8>)
 80037e8:	2207      	movs	r2, #7
 80037ea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80037ec:	e009      	b.n	8003802 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <vInitPrioGroupValue+0xf8>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	4a1e      	ldr	r2, [pc, #120]	; (8003870 <vInitPrioGroupValue+0xf8>)
 80037f6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80037f8:	78fb      	ldrb	r3, [r7, #3]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800380a:	2b80      	cmp	r3, #128	; 0x80
 800380c:	d0ef      	beq.n	80037ee <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800380e:	4b18      	ldr	r3, [pc, #96]	; (8003870 <vInitPrioGroupValue+0xf8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	d00a      	beq.n	8003830 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800381a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	60bb      	str	r3, [r7, #8]
    }
 800382c:	bf00      	nop
 800382e:	e7fe      	b.n	800382e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003830:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <vInitPrioGroupValue+0xf8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	4a0e      	ldr	r2, [pc, #56]	; (8003870 <vInitPrioGroupValue+0xf8>)
 8003838:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800383a:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <vInitPrioGroupValue+0xf8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003842:	4a0b      	ldr	r2, [pc, #44]	; (8003870 <vInitPrioGroupValue+0xf8>)
 8003844:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	b2da      	uxtb	r2, r3
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800384e:	bf00      	nop
 8003850:	371c      	adds	r7, #28
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000ed00 	.word	0xe000ed00
 8003860:	410fc271 	.word	0x410fc271
 8003864:	410fc270 	.word	0x410fc270
 8003868:	e000e400 	.word	0xe000e400
 800386c:	200001fc 	.word	0x200001fc
 8003870:	20000200 	.word	0x20000200

08003874 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
        __asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	607b      	str	r3, [r7, #4]
    }
 800388c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <vPortEnterCritical+0x58>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	3301      	adds	r3, #1
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <vPortEnterCritical+0x58>)
 8003896:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <vPortEnterCritical+0x58>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10f      	bne.n	80038c0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <vPortEnterCritical+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00a      	beq.n	80038c0 <vPortEnterCritical+0x4c>
        __asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	603b      	str	r3, [r7, #0]
    }
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <vPortEnterCritical+0x4a>
    }
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	20000010 	.word	0x20000010
 80038d0:	e000ed04 	.word	0xe000ed04

080038d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80038da:	4b12      	ldr	r3, [pc, #72]	; (8003924 <vPortExitCritical+0x50>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <vPortExitCritical+0x24>
        __asm volatile
 80038e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e6:	f383 8811 	msr	BASEPRI, r3
 80038ea:	f3bf 8f6f 	isb	sy
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	607b      	str	r3, [r7, #4]
    }
 80038f4:	bf00      	nop
 80038f6:	e7fe      	b.n	80038f6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <vPortExitCritical+0x50>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	4a09      	ldr	r2, [pc, #36]	; (8003924 <vPortExitCritical+0x50>)
 8003900:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <vPortExitCritical+0x50>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <vPortExitCritical+0x42>
 800390a:	2300      	movs	r3, #0
 800390c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003914:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	20000010 	.word	0x20000010
	...

08003930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003930:	f3ef 8009 	mrs	r0, PSP
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	4b15      	ldr	r3, [pc, #84]	; (8003990 <pxCurrentTCBConst>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f01e 0f10 	tst.w	lr, #16
 8003940:	bf08      	it	eq
 8003942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394a:	6010      	str	r0, [r2, #0]
 800394c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003950:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003954:	f380 8811 	msr	BASEPRI, r0
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f7fe ffc8 	bl	80028f4 <vTaskSwitchContext>
 8003964:	f04f 0000 	mov.w	r0, #0
 8003968:	f380 8811 	msr	BASEPRI, r0
 800396c:	bc09      	pop	{r0, r3}
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	6808      	ldr	r0, [r1, #0]
 8003972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003976:	f01e 0f10 	tst.w	lr, #16
 800397a:	bf08      	it	eq
 800397c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003980:	f380 8809 	msr	PSP, r0
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	f3af 8000 	nop.w

08003990 <pxCurrentTCBConst>:
 8003990:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003994:	bf00      	nop
 8003996:	bf00      	nop

08003998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
        __asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	607b      	str	r3, [r7, #4]
    }
 80039b0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80039b2:	f001 fabf 	bl	8004f34 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80039b6:	f7fe fe83 	bl	80026c0 <xTaskIncrementTick>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d006      	beq.n	80039ce <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80039c0:	f001 fb16 	bl	8004ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <SysTick_Handler+0x50>)
 80039c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	e001      	b.n	80039d2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80039ce:	f001 faf3 	bl	8004fb8 <SEGGER_SYSVIEW_RecordExitISR>
 80039d2:	2300      	movs	r3, #0
 80039d4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	f383 8811 	msr	BASEPRI, r3
    }
 80039dc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <vPortSetupTimerInterrupt+0x34>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <vPortSetupTimerInterrupt+0x38>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <vPortSetupTimerInterrupt+0x3c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <vPortSetupTimerInterrupt+0x40>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	099b      	lsrs	r3, r3, #6
 8003a08:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <vPortSetupTimerInterrupt+0x44>)
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a0e:	4b04      	ldr	r3, [pc, #16]	; (8003a20 <vPortSetupTimerInterrupt+0x34>)
 8003a10:	2207      	movs	r2, #7
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	e000e010 	.word	0xe000e010
 8003a24:	e000e018 	.word	0xe000e018
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	10624dd3 	.word	0x10624dd3
 8003a30:	e000e014 	.word	0xe000e014

08003a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003a44 <vPortEnableVFP+0x10>
 8003a38:	6801      	ldr	r1, [r0, #0]
 8003a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003a3e:	6001      	str	r1, [r0, #0]
 8003a40:	4770      	bx	lr
 8003a42:	0000      	.short	0x0000
 8003a44:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop

08003a4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003a58:	f7fe fd14 	bl	8002484 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003a5c:	4b65      	ldr	r3, [pc, #404]	; (8003bf4 <pvPortMalloc+0x1a8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003a64:	f000 f934 	bl	8003cd0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a68:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <pvPortMalloc+0x1ac>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 80a7 	bne.w	8003bc4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d02d      	beq.n	8003ad8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d227      	bcs.n	8003ad8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003a88:	2208      	movs	r2, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d021      	beq.n	8003ade <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f023 0307 	bic.w	r3, r3, #7
 8003aa0:	3308      	adds	r3, #8
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d214      	bcs.n	8003ad2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f023 0307 	bic.w	r3, r3, #7
 8003aae:	3308      	adds	r3, #8
 8003ab0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f003 0307 	and.w	r3, r3, #7
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d010      	beq.n	8003ade <pvPortMalloc+0x92>
        __asm volatile
 8003abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac0:	f383 8811 	msr	BASEPRI, r3
 8003ac4:	f3bf 8f6f 	isb	sy
 8003ac8:	f3bf 8f4f 	dsb	sy
 8003acc:	617b      	str	r3, [r7, #20]
    }
 8003ace:	bf00      	nop
 8003ad0:	e7fe      	b.n	8003ad0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ad6:	e002      	b.n	8003ade <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	607b      	str	r3, [r7, #4]
 8003adc:	e000      	b.n	8003ae0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ade:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d06e      	beq.n	8003bc4 <pvPortMalloc+0x178>
 8003ae6:	4b45      	ldr	r3, [pc, #276]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d869      	bhi.n	8003bc4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <pvPortMalloc+0x1b4>)
 8003af2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003af4:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <pvPortMalloc+0x1b4>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003afa:	e004      	b.n	8003b06 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d903      	bls.n	8003b18 <pvPortMalloc+0xcc>
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f1      	bne.n	8003afc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003b18:	4b36      	ldr	r3, [pc, #216]	; (8003bf4 <pvPortMalloc+0x1a8>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d050      	beq.n	8003bc4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2208      	movs	r2, #8
 8003b28:	4413      	add	r3, r2
 8003b2a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	1ad2      	subs	r2, r2, r3
 8003b3c:	2308      	movs	r3, #8
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d91f      	bls.n	8003b84 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4413      	add	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <pvPortMalloc+0x120>
        __asm volatile
 8003b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5a:	f383 8811 	msr	BASEPRI, r3
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f3bf 8f4f 	dsb	sy
 8003b66:	613b      	str	r3, [r7, #16]
    }
 8003b68:	bf00      	nop
 8003b6a:	e7fe      	b.n	8003b6a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	1ad2      	subs	r2, r2, r3
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b7e:	69b8      	ldr	r0, [r7, #24]
 8003b80:	f000 f908 	bl	8003d94 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b84:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003b90:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b92:	4b1a      	ldr	r3, [pc, #104]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	4b1b      	ldr	r3, [pc, #108]	; (8003c04 <pvPortMalloc+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d203      	bcs.n	8003ba6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <pvPortMalloc+0x1b0>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	; (8003c04 <pvPortMalloc+0x1b8>)
 8003ba4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <pvPortMalloc+0x1ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <pvPortMalloc+0x1bc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a11      	ldr	r2, [pc, #68]	; (8003c08 <pvPortMalloc+0x1bc>)
 8003bc2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003bc4:	f7fe fc6c 	bl	80024a0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <pvPortMalloc+0x19c>
        __asm volatile
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	60fb      	str	r3, [r7, #12]
    }
 8003be4:	bf00      	nop
 8003be6:	e7fe      	b.n	8003be6 <pvPortMalloc+0x19a>
    return pvReturn;
 8003be8:	69fb      	ldr	r3, [r7, #28]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3728      	adds	r7, #40	; 0x28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20012e0c 	.word	0x20012e0c
 8003bf8:	20012e20 	.word	0x20012e20
 8003bfc:	20012e10 	.word	0x20012e10
 8003c00:	20012e04 	.word	0x20012e04
 8003c04:	20012e14 	.word	0x20012e14
 8003c08:	20012e18 	.word	0x20012e18

08003c0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d04d      	beq.n	8003cba <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	425b      	negs	r3, r3
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	4413      	add	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	4b24      	ldr	r3, [pc, #144]	; (8003cc4 <vPortFree+0xb8>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <vPortFree+0x44>
        __asm volatile
 8003c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c3e:	f383 8811 	msr	BASEPRI, r3
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	f3bf 8f4f 	dsb	sy
 8003c4a:	60fb      	str	r3, [r7, #12]
    }
 8003c4c:	bf00      	nop
 8003c4e:	e7fe      	b.n	8003c4e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00a      	beq.n	8003c6e <vPortFree+0x62>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	60bb      	str	r3, [r7, #8]
    }
 8003c6a:	bf00      	nop
 8003c6c:	e7fe      	b.n	8003c6c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	4b14      	ldr	r3, [pc, #80]	; (8003cc4 <vPortFree+0xb8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4013      	ands	r3, r2
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01e      	beq.n	8003cba <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d11a      	bne.n	8003cba <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4b0e      	ldr	r3, [pc, #56]	; (8003cc4 <vPortFree+0xb8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	401a      	ands	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003c94:	f7fe fbf6 	bl	8002484 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <vPortFree+0xbc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <vPortFree+0xbc>)
 8003ca4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ca6:	6938      	ldr	r0, [r7, #16]
 8003ca8:	f000 f874 	bl	8003d94 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003cac:	4b07      	ldr	r3, [pc, #28]	; (8003ccc <vPortFree+0xc0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a06      	ldr	r2, [pc, #24]	; (8003ccc <vPortFree+0xc0>)
 8003cb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003cb6:	f7fe fbf3 	bl	80024a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20012e20 	.word	0x20012e20
 8003cc8:	20012e10 	.word	0x20012e10
 8003ccc:	20012e1c 	.word	0x20012e1c

08003cd0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cd6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8003cda:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <prvHeapInit+0xac>)
 8003cde:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00c      	beq.n	8003d04 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3307      	adds	r3, #7
 8003cee:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0307 	bic.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <prvHeapInit+0xac>)
 8003d00:	4413      	add	r3, r2
 8003d02:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d08:	4a1d      	ldr	r2, [pc, #116]	; (8003d80 <prvHeapInit+0xb0>)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003d0e:	4b1c      	ldr	r3, [pc, #112]	; (8003d80 <prvHeapInit+0xb0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	4413      	add	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1a9b      	subs	r3, r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f023 0307 	bic.w	r3, r3, #7
 8003d2a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a15      	ldr	r2, [pc, #84]	; (8003d84 <prvHeapInit+0xb4>)
 8003d30:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003d32:	4b14      	ldr	r3, [pc, #80]	; (8003d84 <prvHeapInit+0xb4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2200      	movs	r2, #0
 8003d38:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003d3a:	4b12      	ldr	r3, [pc, #72]	; (8003d84 <prvHeapInit+0xb4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	1ad2      	subs	r2, r2, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <prvHeapInit+0xb4>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <prvHeapInit+0xb8>)
 8003d5e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	4a09      	ldr	r2, [pc, #36]	; (8003d8c <prvHeapInit+0xbc>)
 8003d66:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d68:	4b09      	ldr	r3, [pc, #36]	; (8003d90 <prvHeapInit+0xc0>)
 8003d6a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d6e:	601a      	str	r2, [r3, #0]
}
 8003d70:	bf00      	nop
 8003d72:	3714      	adds	r7, #20
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr
 8003d7c:	20000204 	.word	0x20000204
 8003d80:	20012e04 	.word	0x20012e04
 8003d84:	20012e0c 	.word	0x20012e0c
 8003d88:	20012e14 	.word	0x20012e14
 8003d8c:	20012e10 	.word	0x20012e10
 8003d90:	20012e20 	.word	0x20012e20

08003d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d9c:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <prvInsertBlockIntoFreeList+0xac>)
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	e002      	b.n	8003da8 <prvInsertBlockIntoFreeList+0x14>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d8f7      	bhi.n	8003da2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d108      	bne.n	8003dd6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	441a      	add	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d118      	bne.n	8003e1c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <prvInsertBlockIntoFreeList+0xb0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d00d      	beq.n	8003e12 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	441a      	add	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e008      	b.n	8003e24 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e12:	4b0c      	ldr	r3, [pc, #48]	; (8003e44 <prvInsertBlockIntoFreeList+0xb0>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e003      	b.n	8003e24 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d002      	beq.n	8003e32 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20012e04 	.word	0x20012e04
 8003e44:	20012e0c 	.word	0x20012e0c

08003e48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af02      	add	r7, sp, #8
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003e56:	2205      	movs	r2, #5
 8003e58:	492b      	ldr	r1, [pc, #172]	; (8003f08 <SYSVIEW_AddTask+0xc0>)
 8003e5a:	68b8      	ldr	r0, [r7, #8]
 8003e5c:	f001 fb92 	bl	8005584 <memcmp>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d04b      	beq.n	8003efe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b07      	cmp	r3, #7
 8003e6c:	d903      	bls.n	8003e76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003e6e:	4828      	ldr	r0, [pc, #160]	; (8003f10 <SYSVIEW_AddTask+0xc8>)
 8003e70:	f001 fb08 	bl	8005484 <SEGGER_SYSVIEW_Warn>
    return;
 8003e74:	e044      	b.n	8003f00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4926      	ldr	r1, [pc, #152]	; (8003f14 <SYSVIEW_AddTask+0xcc>)
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003e8a:	4b20      	ldr	r3, [pc, #128]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	4921      	ldr	r1, [pc, #132]	; (8003f14 <SYSVIEW_AddTask+0xcc>)
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	491b      	ldr	r1, [pc, #108]	; (8003f14 <SYSVIEW_AddTask+0xcc>)
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4916      	ldr	r1, [pc, #88]	; (8003f14 <SYSVIEW_AddTask+0xcc>)
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4413      	add	r3, r2
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	330c      	adds	r3, #12
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4910      	ldr	r1, [pc, #64]	; (8003f14 <SYSVIEW_AddTask+0xcc>)
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	009b      	lsls	r3, r3, #2
 8003eda:	440b      	add	r3, r1
 8003edc:	3310      	adds	r3, #16
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a08      	ldr	r2, [pc, #32]	; (8003f0c <SYSVIEW_AddTask+0xc4>)
 8003eea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68b9      	ldr	r1, [r7, #8]
 8003ef6:	68f8      	ldr	r0, [r7, #12]
 8003ef8:	f000 f80e 	bl	8003f18 <SYSVIEW_SendTaskInfo>
 8003efc:	e000      	b.n	8003f00 <SYSVIEW_AddTask+0xb8>
    return;
 8003efe:	bf00      	nop

}
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	08005628 	.word	0x08005628
 8003f0c:	20012ec4 	.word	0x20012ec4
 8003f10:	08005630 	.word	0x08005630
 8003f14:	20012e24 	.word	0x20012e24

08003f18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003f26:	f107 0314 	add.w	r3, r7, #20
 8003f2a:	2214      	movs	r2, #20
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f001 fb46 	bl	80055c0 <memset>
  TaskInfo.TaskID     = TaskID;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003f48:	f107 0314 	add.w	r3, r7, #20
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fec7 	bl	8004ce0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003f52:	bf00      	nop
 8003f54:	3728      	adds	r7, #40	; 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003f62:	4b26      	ldr	r3, [pc, #152]	; (8003ffc <_DoInit+0xa0>)
 8003f64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003f66:	22a8      	movs	r2, #168	; 0xa8
 8003f68:	2100      	movs	r1, #0
 8003f6a:	6838      	ldr	r0, [r7, #0]
 8003f6c:	f001 fb28 	bl	80055c0 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2203      	movs	r2, #3
 8003f74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2203      	movs	r2, #3
 8003f7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	4a20      	ldr	r2, [pc, #128]	; (8004000 <_DoInit+0xa4>)
 8003f80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	4a1f      	ldr	r2, [pc, #124]	; (8004004 <_DoInit+0xa8>)
 8003f86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2200      	movs	r2, #0
 8003f94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <_DoInit+0xa4>)
 8003fa6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	4a17      	ldr	r2, [pc, #92]	; (8004008 <_DoInit+0xac>)
 8003fac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2210      	movs	r2, #16
 8003fb2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003fc6:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003fca:	2300      	movs	r3, #0
 8003fcc:	607b      	str	r3, [r7, #4]
 8003fce:	e00c      	b.n	8003fea <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f1c3 030f 	rsb	r3, r3, #15
 8003fd6:	4a0d      	ldr	r2, [pc, #52]	; (800400c <_DoInit+0xb0>)
 8003fd8:	5cd1      	ldrb	r1, [r2, r3]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4413      	add	r3, r2
 8003fe0:	460a      	mov	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	607b      	str	r3, [r7, #4]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b0f      	cmp	r3, #15
 8003fee:	d9ef      	bls.n	8003fd0 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003ff0:	f3bf 8f5f 	dmb	sy
}
 8003ff4:	bf00      	nop
 8003ff6:	3708      	adds	r7, #8
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	20012ec8 	.word	0x20012ec8
 8004000:	08005680 	.word	0x08005680
 8004004:	20012f70 	.word	0x20012f70
 8004008:	20013370 	.word	0x20013370
 800400c:	080056a4 	.word	0x080056a4

08004010 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004010:	b580      	push	{r7, lr}
 8004012:	b08c      	sub	sp, #48	; 0x30
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800401c:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <SEGGER_RTT_ReadNoLock+0x108>)
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	6a3b      	ldr	r3, [r7, #32]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <SEGGER_RTT_ReadNoLock+0x1e>
 800402a:	f7ff ff97 	bl	8003f5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	3360      	adds	r3, #96	; 0x60
 800403a:	4a37      	ldr	r2, [pc, #220]	; (8004118 <SEGGER_RTT_ReadNoLock+0x108>)
 800403c:	4413      	add	r3, r2
 800403e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004050:	2300      	movs	r3, #0
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d92b      	bls.n	80040b4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	689a      	ldr	r2, [r3, #8]
 8004060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4293      	cmp	r3, r2
 800406c:	bf28      	it	cs
 800406e:	4613      	movcs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	685a      	ldr	r2, [r3, #4]
 8004076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004078:	4413      	add	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	6939      	ldr	r1, [r7, #16]
 8004080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004082:	f001 fa8f 	bl	80055a4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004086:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	4413      	add	r3, r2
 800408c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4413      	add	r3, r2
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800409e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	4413      	add	r3, r2
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d101      	bne.n	80040b4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	bf28      	it	cs
 80040c4:	4613      	movcs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d019      	beq.n	8004102 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	685a      	ldr	r2, [r3, #4]
 80040d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d4:	4413      	add	r3, r2
 80040d6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	6939      	ldr	r1, [r7, #16]
 80040dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040de:	f001 fa61 	bl	80055a4 <memcpy>
    NumBytesRead += NumBytesRem;
 80040e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	4413      	add	r3, r2
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80040ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	4413      	add	r3, r2
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	1ad3      	subs	r3, r2, r3
 80040f8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80040fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4413      	add	r3, r2
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800410c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004110:	4618      	mov	r0, r3
 8004112:	3730      	adds	r7, #48	; 0x30
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	20012ec8 	.word	0x20012ec8

0800411c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00f      	beq.n	8004152 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8004132:	e002      	b.n	800413a <_EncodeStr+0x1e>
      Len++;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	3301      	adds	r3, #1
 8004138:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f6      	bne.n	8004134 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d901      	bls.n	8004152 <_EncodeStr+0x36>
      Len = Limit;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	2bfe      	cmp	r3, #254	; 0xfe
 8004156:	d806      	bhi.n	8004166 <_EncodeStr+0x4a>
    *pPayload++ = (U8)Len;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	60fa      	str	r2, [r7, #12]
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	e011      	b.n	800418a <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	60fa      	str	r2, [r7, #12]
 800416c:	22ff      	movs	r2, #255	; 0xff
 800416e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	60fa      	str	r2, [r7, #12]
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	0a19      	lsrs	r1, r3, #8
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	60fa      	str	r2, [r7, #12]
 8004186:	b2ca      	uxtb	r2, r1
 8004188:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 800418a:	2300      	movs	r3, #0
 800418c:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800418e:	e00a      	b.n	80041a6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	1c53      	adds	r3, r2, #1
 8004194:	60bb      	str	r3, [r7, #8]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1c59      	adds	r1, r3, #1
 800419a:	60f9      	str	r1, [r7, #12]
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	701a      	strb	r2, [r3, #0]
    n++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d3f0      	bcc.n	8004190 <_EncodeStr+0x74>
  }
  return pPayload;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	3307      	adds	r3, #7
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80041da:	4b35      	ldr	r3, [pc, #212]	; (80042b0 <_HandleIncomingPacket+0xdc>)
 80041dc:	7e1b      	ldrb	r3, [r3, #24]
 80041de:	4618      	mov	r0, r3
 80041e0:	1cfb      	adds	r3, r7, #3
 80041e2:	2201      	movs	r2, #1
 80041e4:	4619      	mov	r1, r3
 80041e6:	f7ff ff13 	bl	8004010 <SEGGER_RTT_ReadNoLock>
 80041ea:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d052      	beq.n	8004298 <_HandleIncomingPacket+0xc4>
    switch (Cmd) {
 80041f2:	78fb      	ldrb	r3, [r7, #3]
 80041f4:	2b80      	cmp	r3, #128	; 0x80
 80041f6:	d031      	beq.n	800425c <_HandleIncomingPacket+0x88>
 80041f8:	2b80      	cmp	r3, #128	; 0x80
 80041fa:	dc40      	bgt.n	800427e <_HandleIncomingPacket+0xaa>
 80041fc:	2b07      	cmp	r3, #7
 80041fe:	dc15      	bgt.n	800422c <_HandleIncomingPacket+0x58>
 8004200:	2b00      	cmp	r3, #0
 8004202:	dd3c      	ble.n	800427e <_HandleIncomingPacket+0xaa>
 8004204:	3b01      	subs	r3, #1
 8004206:	2b06      	cmp	r3, #6
 8004208:	d839      	bhi.n	800427e <_HandleIncomingPacket+0xaa>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <_HandleIncomingPacket+0x3c>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	08004233 	.word	0x08004233
 8004214:	08004239 	.word	0x08004239
 8004218:	0800423f 	.word	0x0800423f
 800421c:	08004245 	.word	0x08004245
 8004220:	0800424b 	.word	0x0800424b
 8004224:	08004251 	.word	0x08004251
 8004228:	08004257 	.word	0x08004257
 800422c:	2b7f      	cmp	r3, #127	; 0x7f
 800422e:	d035      	beq.n	800429c <_HandleIncomingPacket+0xc8>
 8004230:	e025      	b.n	800427e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004232:	f000 fbdb 	bl	80049ec <SEGGER_SYSVIEW_Start>
      break;
 8004236:	e036      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004238:	f000 fc92 	bl	8004b60 <SEGGER_SYSVIEW_Stop>
      break;
 800423c:	e033      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800423e:	f000 fe47 	bl	8004ed0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004242:	e030      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004244:	f000 fe30 	bl	8004ea8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004248:	e02d      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800424a:	f000 fcaf 	bl	8004bac <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800424e:	e02a      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004250:	f001 f8da 	bl	8005408 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004254:	e027      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004256:	f001 f8b9 	bl	80053cc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800425a:	e024      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800425c:	4b14      	ldr	r3, [pc, #80]	; (80042b0 <_HandleIncomingPacket+0xdc>)
 800425e:	7e1b      	ldrb	r3, [r3, #24]
 8004260:	4618      	mov	r0, r3
 8004262:	1cfb      	adds	r3, r7, #3
 8004264:	2201      	movs	r2, #1
 8004266:	4619      	mov	r1, r3
 8004268:	f7ff fed2 	bl	8004010 <SEGGER_RTT_ReadNoLock>
 800426c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <_HandleIncomingPacket+0xcc>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	4618      	mov	r0, r3
 8004278:	f001 f828 	bl	80052cc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800427c:	e010      	b.n	80042a0 <_HandleIncomingPacket+0xcc>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	b25b      	sxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	da0e      	bge.n	80042a4 <_HandleIncomingPacket+0xd0>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <_HandleIncomingPacket+0xdc>)
 8004288:	7e1b      	ldrb	r3, [r3, #24]
 800428a:	4618      	mov	r0, r3
 800428c:	1cfb      	adds	r3, r7, #3
 800428e:	2201      	movs	r2, #1
 8004290:	4619      	mov	r1, r3
 8004292:	f7ff febd 	bl	8004010 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004296:	e005      	b.n	80042a4 <_HandleIncomingPacket+0xd0>
    }
  }
 8004298:	bf00      	nop
 800429a:	e004      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
      break;
 800429c:	bf00      	nop
 800429e:	e002      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
      break;
 80042a0:	bf00      	nop
 80042a2:	e000      	b.n	80042a6 <_HandleIncomingPacket+0xd2>
      break;
 80042a4:	bf00      	nop
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20013380 	.word	0x20013380

080042b4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	; 0x30
 80042b8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80042ba:	2301      	movs	r3, #1
 80042bc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80042be:	1d3b      	adds	r3, r7, #4
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042ce:	e00b      	b.n	80042e8 <_TrySendOverflowPacket+0x34>
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	1c59      	adds	r1, r3, #1
 80042d8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80042da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042de:	b2d2      	uxtb	r2, r2
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e4:	09db      	lsrs	r3, r3, #7
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	2b7f      	cmp	r3, #127	; 0x7f
 80042ec:	d8f0      	bhi.n	80042d0 <_TrySendOverflowPacket+0x1c>
 80042ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f0:	1c5a      	adds	r2, r3, #1
 80042f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80042fe:	4b25      	ldr	r3, [pc, #148]	; (8004394 <_TrySendOverflowPacket+0xe0>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004304:	4b22      	ldr	r3, [pc, #136]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	627b      	str	r3, [r7, #36]	; 0x24
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	623b      	str	r3, [r7, #32]
 8004316:	e00b      	b.n	8004330 <_TrySendOverflowPacket+0x7c>
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	b2da      	uxtb	r2, r3
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	1c59      	adds	r1, r3, #1
 8004320:	6279      	str	r1, [r7, #36]	; 0x24
 8004322:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	09db      	lsrs	r3, r3, #7
 800432e:	623b      	str	r3, [r7, #32]
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b7f      	cmp	r3, #127	; 0x7f
 8004334:	d8f0      	bhi.n	8004318 <_TrySendOverflowPacket+0x64>
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	627a      	str	r2, [r7, #36]	; 0x24
 800433c:	6a3a      	ldr	r2, [r7, #32]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 8004348:	785b      	ldrb	r3, [r3, #1]
 800434a:	4618      	mov	r0, r3
 800434c:	1d3b      	adds	r3, r7, #4
 800434e:	69fa      	ldr	r2, [r7, #28]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	461a      	mov	r2, r3
 8004354:	1d3b      	adds	r3, r7, #4
 8004356:	4619      	mov	r1, r3
 8004358:	f7fb ff42 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800435c:	4603      	mov	r3, r0
 800435e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d009      	beq.n	800437a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004366:	4a0a      	ldr	r2, [pc, #40]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800436c:	4b08      	ldr	r3, [pc, #32]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	4b06      	ldr	r3, [pc, #24]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e004      	b.n	8004384 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800437a:	4b05      	ldr	r3, [pc, #20]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	3301      	adds	r3, #1
 8004380:	4a03      	ldr	r2, [pc, #12]	; (8004390 <_TrySendOverflowPacket+0xdc>)
 8004382:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004384:	693b      	ldr	r3, [r7, #16]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3730      	adds	r7, #48	; 0x30
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20013380 	.word	0x20013380
 8004394:	e0001004 	.word	0xe0001004

08004398 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80043a4:	4b98      	ldr	r3, [pc, #608]	; (8004608 <_SendPacket+0x270>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d010      	beq.n	80043ce <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80043ac:	4b96      	ldr	r3, [pc, #600]	; (8004608 <_SendPacket+0x270>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 812d 	beq.w	8004610 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80043b6:	4b94      	ldr	r3, [pc, #592]	; (8004608 <_SendPacket+0x270>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d109      	bne.n	80043d2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80043be:	f7ff ff79 	bl	80042b4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80043c2:	4b91      	ldr	r3, [pc, #580]	; (8004608 <_SendPacket+0x270>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	f040 8124 	bne.w	8004614 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80043cc:	e001      	b.n	80043d2 <_SendPacket+0x3a>
    goto Send;
 80043ce:	bf00      	nop
 80043d0:	e000      	b.n	80043d4 <_SendPacket+0x3c>
Send:
 80043d2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b1f      	cmp	r3, #31
 80043d8:	d809      	bhi.n	80043ee <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80043da:	4b8b      	ldr	r3, [pc, #556]	; (8004608 <_SendPacket+0x270>)
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	fa22 f303 	lsr.w	r3, r2, r3
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f040 8115 	bne.w	8004618 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b17      	cmp	r3, #23
 80043f2:	d807      	bhi.n	8004404 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3b01      	subs	r3, #1
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	e0c4      	b.n	800458e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b7f      	cmp	r3, #127	; 0x7f
 8004410:	d912      	bls.n	8004438 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	09da      	lsrs	r2, r3, #7
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b01      	subs	r3, #1
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	3a01      	subs	r2, #1
 800442a:	60fa      	str	r2, [r7, #12]
 800442c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004430:	b2da      	uxtb	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	701a      	strb	r2, [r3, #0]
 8004436:	e006      	b.n	8004446 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3b01      	subs	r3, #1
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	b2da      	uxtb	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b7e      	cmp	r3, #126	; 0x7e
 800444a:	d807      	bhi.n	800445c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	b2da      	uxtb	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	701a      	strb	r2, [r3, #0]
 800445a:	e098      	b.n	800458e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004462:	d212      	bcs.n	800448a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	09da      	lsrs	r2, r3, #7
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	3b01      	subs	r3, #1
 800446c:	60fb      	str	r3, [r7, #12]
 800446e:	b2d2      	uxtb	r2, r2
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	b2db      	uxtb	r3, r3
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	3a01      	subs	r2, #1
 800447c:	60fa      	str	r2, [r7, #12]
 800447e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	701a      	strb	r2, [r3, #0]
 8004488:	e081      	b.n	800458e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 21)) {    // Encodes in 3 bytes
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004490:	d21d      	bcs.n	80044ce <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	0b9a      	lsrs	r2, r3, #14
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3b01      	subs	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
 800449c:	b2d2      	uxtb	r2, r2
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	09db      	lsrs	r3, r3, #7
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	3a01      	subs	r2, #1
 80044ac:	60fa      	str	r2, [r7, #12]
 80044ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	3a01      	subs	r2, #1
 80044c0:	60fa      	str	r2, [r7, #12]
 80044c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	701a      	strb	r2, [r3, #0]
 80044cc:	e05f      	b.n	800458e <_SendPacket+0x1f6>
      } else if (EventId < (1u << 28)) {    // Encodes in 4 bytes
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044d4:	d228      	bcs.n	8004528 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	0d5a      	lsrs	r2, r3, #21
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	3b01      	subs	r3, #1
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	b2d2      	uxtb	r2, r2
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	0b9b      	lsrs	r3, r3, #14
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	3a01      	subs	r2, #1
 80044f0:	60fa      	str	r2, [r7, #12]
 80044f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	09db      	lsrs	r3, r3, #7
 8004500:	b2db      	uxtb	r3, r3
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	3a01      	subs	r2, #1
 8004506:	60fa      	str	r2, [r7, #12]
 8004508:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	3a01      	subs	r2, #1
 800451a:	60fa      	str	r2, [r7, #12]
 800451c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004520:	b2da      	uxtb	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	e032      	b.n	800458e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	0f1a      	lsrs	r2, r3, #28
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	3b01      	subs	r3, #1
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	0d5b      	lsrs	r3, r3, #21
 800453c:	b2db      	uxtb	r3, r3
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	3a01      	subs	r2, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004548:	b2da      	uxtb	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0b9b      	lsrs	r3, r3, #14
 8004552:	b2db      	uxtb	r3, r3
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	3a01      	subs	r2, #1
 8004558:	60fa      	str	r2, [r7, #12]
 800455a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	09db      	lsrs	r3, r3, #7
 8004568:	b2db      	uxtb	r3, r3
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	3a01      	subs	r2, #1
 800456e:	60fa      	str	r2, [r7, #12]
 8004570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004574:	b2da      	uxtb	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	3a01      	subs	r2, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004588:	b2da      	uxtb	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800458e:	4b1f      	ldr	r3, [pc, #124]	; (800460c <_SendPacket+0x274>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004594:	4b1c      	ldr	r3, [pc, #112]	; (8004608 <_SendPacket+0x270>)
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	623b      	str	r3, [r7, #32]
 80045a6:	e00b      	b.n	80045c0 <_SendPacket+0x228>
 80045a8:	6a3b      	ldr	r3, [r7, #32]
 80045aa:	b2da      	uxtb	r2, r3
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	1c59      	adds	r1, r3, #1
 80045b0:	6279      	str	r1, [r7, #36]	; 0x24
 80045b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	09db      	lsrs	r3, r3, #7
 80045be:	623b      	str	r3, [r7, #32]
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	2b7f      	cmp	r3, #127	; 0x7f
 80045c4:	d8f0      	bhi.n	80045a8 <_SendPacket+0x210>
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	627a      	str	r2, [r7, #36]	; 0x24
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <_SendPacket+0x270>)
 80045d8:	785b      	ldrb	r3, [r3, #1]
 80045da:	4618      	mov	r0, r3
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	461a      	mov	r2, r3
 80045e4:	68f9      	ldr	r1, [r7, #12]
 80045e6:	f7fb fdfb 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80045ea:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80045f2:	4a05      	ldr	r2, [pc, #20]	; (8004608 <_SendPacket+0x270>)
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	60d3      	str	r3, [r2, #12]
 80045f8:	e00f      	b.n	800461a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80045fa:	4b03      	ldr	r3, [pc, #12]	; (8004608 <_SendPacket+0x270>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	3301      	adds	r3, #1
 8004600:	b2da      	uxtb	r2, r3
 8004602:	4b01      	ldr	r3, [pc, #4]	; (8004608 <_SendPacket+0x270>)
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e008      	b.n	800461a <_SendPacket+0x282>
 8004608:	20013380 	.word	0x20013380
 800460c:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004610:	bf00      	nop
 8004612:	e002      	b.n	800461a <_SendPacket+0x282>
      goto SendDone;
 8004614:	bf00      	nop
 8004616:	e000      	b.n	800461a <_SendPacket+0x282>
      goto SendDone;
 8004618:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <_SendPacket+0x2d4>)
 800461c:	7e1b      	ldrb	r3, [r3, #24]
 800461e:	4619      	mov	r1, r3
 8004620:	4a13      	ldr	r2, [pc, #76]	; (8004670 <_SendPacket+0x2d8>)
 8004622:	460b      	mov	r3, r1
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	440b      	add	r3, r1
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	336c      	adds	r3, #108	; 0x6c
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b0e      	ldr	r3, [pc, #56]	; (800466c <_SendPacket+0x2d4>)
 8004632:	7e1b      	ldrb	r3, [r3, #24]
 8004634:	4618      	mov	r0, r3
 8004636:	490e      	ldr	r1, [pc, #56]	; (8004670 <_SendPacket+0x2d8>)
 8004638:	4603      	mov	r3, r0
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	4403      	add	r3, r0
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	440b      	add	r3, r1
 8004642:	3370      	adds	r3, #112	; 0x70
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d00b      	beq.n	8004662 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800464a:	4b08      	ldr	r3, [pc, #32]	; (800466c <_SendPacket+0x2d4>)
 800464c:	789b      	ldrb	r3, [r3, #2]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d107      	bne.n	8004662 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <_SendPacket+0x2d4>)
 8004654:	2201      	movs	r2, #1
 8004656:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004658:	f7ff fdbc 	bl	80041d4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <_SendPacket+0x2d4>)
 800465e:	2200      	movs	r2, #0
 8004660:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004662:	bf00      	nop
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20013380 	.word	0x20013380
 8004670:	20012ec8 	.word	0x20012ec8

08004674 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800467c:	f3ef 8311 	mrs	r3, BASEPRI
 8004680:	f04f 0120 	mov.w	r1, #32
 8004684:	f381 8811 	msr	BASEPRI, r1
 8004688:	60fb      	str	r3, [r7, #12]
 800468a:	4808      	ldr	r0, [pc, #32]	; (80046ac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800468c:	f7ff fd96 	bl	80041bc <_PreparePacket>
 8004690:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	68b9      	ldr	r1, [r7, #8]
 8004696:	68b8      	ldr	r0, [r7, #8]
 8004698:	f7ff fe7e 	bl	8004398 <_SendPacket>
  RECORD_END();
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f383 8811 	msr	BASEPRI, r3
}
 80046a2:	bf00      	nop
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200133b0 	.word	0x200133b0

080046b0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80046ba:	f3ef 8311 	mrs	r3, BASEPRI
 80046be:	f04f 0120 	mov.w	r1, #32
 80046c2:	f381 8811 	msr	BASEPRI, r1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	4816      	ldr	r0, [pc, #88]	; (8004724 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80046ca:	f7ff fd77 	bl	80041bc <_PreparePacket>
 80046ce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	e00b      	b.n	80046f6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	1c59      	adds	r1, r3, #1
 80046e6:	61f9      	str	r1, [r7, #28]
 80046e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	09db      	lsrs	r3, r3, #7
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b7f      	cmp	r3, #127	; 0x7f
 80046fa:	d8f0      	bhi.n	80046de <SEGGER_SYSVIEW_RecordU32+0x2e>
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	61fa      	str	r2, [r7, #28]
 8004702:	69ba      	ldr	r2, [r7, #24]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	6938      	ldr	r0, [r7, #16]
 8004712:	f7ff fe41 	bl	8004398 <_SendPacket>
  RECORD_END();
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f383 8811 	msr	BASEPRI, r3
}
 800471c:	bf00      	nop
 800471e:	3720      	adds	r7, #32
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	200133b0 	.word	0x200133b0

08004728 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b08c      	sub	sp, #48	; 0x30
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004734:	f3ef 8311 	mrs	r3, BASEPRI
 8004738:	f04f 0120 	mov.w	r1, #32
 800473c:	f381 8811 	msr	BASEPRI, r1
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	4825      	ldr	r0, [pc, #148]	; (80047d8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004744:	f7ff fd3a 	bl	80041bc <_PreparePacket>
 8004748:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	62bb      	str	r3, [r7, #40]	; 0x28
 8004756:	e00b      	b.n	8004770 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	b2da      	uxtb	r2, r3
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	1c59      	adds	r1, r3, #1
 8004760:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004762:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004766:	b2d2      	uxtb	r2, r2
 8004768:	701a      	strb	r2, [r3, #0]
 800476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476c:	09db      	lsrs	r3, r3, #7
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b7f      	cmp	r3, #127	; 0x7f
 8004774:	d8f0      	bhi.n	8004758 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800477c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	623b      	str	r3, [r7, #32]
 800478e:	e00b      	b.n	80047a8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	1c59      	adds	r1, r3, #1
 8004798:	6279      	str	r1, [r7, #36]	; 0x24
 800479a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	09db      	lsrs	r3, r3, #7
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b7f      	cmp	r3, #127	; 0x7f
 80047ac:	d8f0      	bhi.n	8004790 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	627a      	str	r2, [r7, #36]	; 0x24
 80047b4:	6a3a      	ldr	r2, [r7, #32]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	6979      	ldr	r1, [r7, #20]
 80047c2:	69b8      	ldr	r0, [r7, #24]
 80047c4:	f7ff fde8 	bl	8004398 <_SendPacket>
  RECORD_END();
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f383 8811 	msr	BASEPRI, r3
}
 80047ce:	bf00      	nop
 80047d0:	3730      	adds	r7, #48	; 0x30
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	200133b0 	.word	0x200133b0

080047dc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	; 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80047ea:	f3ef 8311 	mrs	r3, BASEPRI
 80047ee:	f04f 0120 	mov.w	r1, #32
 80047f2:	f381 8811 	msr	BASEPRI, r1
 80047f6:	61fb      	str	r3, [r7, #28]
 80047f8:	4832      	ldr	r0, [pc, #200]	; (80048c4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80047fa:	f7ff fcdf 	bl	80041bc <_PreparePacket>
 80047fe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	637b      	str	r3, [r7, #52]	; 0x34
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	633b      	str	r3, [r7, #48]	; 0x30
 800480c:	e00b      	b.n	8004826 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800480e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004810:	b2da      	uxtb	r2, r3
 8004812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004814:	1c59      	adds	r1, r3, #1
 8004816:	6379      	str	r1, [r7, #52]	; 0x34
 8004818:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004822:	09db      	lsrs	r3, r3, #7
 8004824:	633b      	str	r3, [r7, #48]	; 0x30
 8004826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004828:	2b7f      	cmp	r3, #127	; 0x7f
 800482a:	d8f0      	bhi.n	800480e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800482c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	637a      	str	r2, [r7, #52]	; 0x34
 8004832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]
 8004838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
 8004844:	e00b      	b.n	800485e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004848:	b2da      	uxtb	r2, r3
 800484a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004850:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004854:	b2d2      	uxtb	r2, r2
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	09db      	lsrs	r3, r3, #7
 800485c:	62bb      	str	r3, [r7, #40]	; 0x28
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	2b7f      	cmp	r3, #127	; 0x7f
 8004862:	d8f0      	bhi.n	8004846 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486c:	b2d2      	uxtb	r2, r2
 800486e:	701a      	strb	r2, [r3, #0]
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	623b      	str	r3, [r7, #32]
 800487c:	e00b      	b.n	8004896 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1c59      	adds	r1, r3, #1
 8004886:	6279      	str	r1, [r7, #36]	; 0x24
 8004888:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	09db      	lsrs	r3, r3, #7
 8004894:	623b      	str	r3, [r7, #32]
 8004896:	6a3b      	ldr	r3, [r7, #32]
 8004898:	2b7f      	cmp	r3, #127	; 0x7f
 800489a:	d8f0      	bhi.n	800487e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	627a      	str	r2, [r7, #36]	; 0x24
 80048a2:	6a3a      	ldr	r2, [r7, #32]
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	6979      	ldr	r1, [r7, #20]
 80048b0:	69b8      	ldr	r0, [r7, #24]
 80048b2:	f7ff fd71 	bl	8004398 <_SendPacket>
  RECORD_END();
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	f383 8811 	msr	BASEPRI, r3
}
 80048bc:	bf00      	nop
 80048be:	3738      	adds	r7, #56	; 0x38
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	200133b0 	.word	0x200133b0

080048c8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b090      	sub	sp, #64	; 0x40
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
 80048d4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80048d6:	f3ef 8311 	mrs	r3, BASEPRI
 80048da:	f04f 0120 	mov.w	r1, #32
 80048de:	f381 8811 	msr	BASEPRI, r1
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	4840      	ldr	r0, [pc, #256]	; (80049e8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80048e6:	f7ff fc69 	bl	80041bc <_PreparePacket>
 80048ea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048f8:	e00b      	b.n	8004912 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80048fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	1c59      	adds	r1, r3, #1
 8004902:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004904:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004908:	b2d2      	uxtb	r2, r2
 800490a:	701a      	strb	r2, [r3, #0]
 800490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490e:	09db      	lsrs	r3, r3, #7
 8004910:	63bb      	str	r3, [r7, #56]	; 0x38
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	2b7f      	cmp	r3, #127	; 0x7f
 8004916:	d8f0      	bhi.n	80048fa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800491a:	1c5a      	adds	r2, r3, #1
 800491c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800491e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004920:	b2d2      	uxtb	r2, r2
 8004922:	701a      	strb	r2, [r3, #0]
 8004924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004926:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	637b      	str	r3, [r7, #52]	; 0x34
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
 8004930:	e00b      	b.n	800494a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	b2da      	uxtb	r2, r3
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	1c59      	adds	r1, r3, #1
 800493a:	6379      	str	r1, [r7, #52]	; 0x34
 800493c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	701a      	strb	r2, [r3, #0]
 8004944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004946:	09db      	lsrs	r3, r3, #7
 8004948:	633b      	str	r3, [r7, #48]	; 0x30
 800494a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494c:	2b7f      	cmp	r3, #127	; 0x7f
 800494e:	d8f0      	bhi.n	8004932 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004952:	1c5a      	adds	r2, r3, #1
 8004954:	637a      	str	r2, [r7, #52]	; 0x34
 8004956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004958:	b2d2      	uxtb	r2, r2
 800495a:	701a      	strb	r2, [r3, #0]
 800495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	62bb      	str	r3, [r7, #40]	; 0x28
 8004968:	e00b      	b.n	8004982 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	b2da      	uxtb	r2, r3
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	1c59      	adds	r1, r3, #1
 8004972:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004974:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004978:	b2d2      	uxtb	r2, r2
 800497a:	701a      	strb	r2, [r3, #0]
 800497c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800497e:	09db      	lsrs	r3, r3, #7
 8004980:	62bb      	str	r3, [r7, #40]	; 0x28
 8004982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004984:	2b7f      	cmp	r3, #127	; 0x7f
 8004986:	d8f0      	bhi.n	800496a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	1c5a      	adds	r2, r3, #1
 800498c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800498e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
 800499c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800499e:	623b      	str	r3, [r7, #32]
 80049a0:	e00b      	b.n	80049ba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	1c59      	adds	r1, r3, #1
 80049aa:	6279      	str	r1, [r7, #36]	; 0x24
 80049ac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049b0:	b2d2      	uxtb	r2, r2
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	6a3b      	ldr	r3, [r7, #32]
 80049b6:	09db      	lsrs	r3, r3, #7
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	2b7f      	cmp	r3, #127	; 0x7f
 80049be:	d8f0      	bhi.n	80049a2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	627a      	str	r2, [r7, #36]	; 0x24
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	b2d2      	uxtb	r2, r2
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	6979      	ldr	r1, [r7, #20]
 80049d4:	69b8      	ldr	r0, [r7, #24]
 80049d6:	f7ff fcdf 	bl	8004398 <_SendPacket>
  RECORD_END();
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	f383 8811 	msr	BASEPRI, r3
}
 80049e0:	bf00      	nop
 80049e2:	3740      	adds	r7, #64	; 0x40
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	200133b0 	.word	0x200133b0

080049ec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08c      	sub	sp, #48	; 0x30
 80049f0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80049f2:	4b58      	ldr	r3, [pc, #352]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80049f8:	f3ef 8311 	mrs	r3, BASEPRI
 80049fc:	f04f 0120 	mov.w	r1, #32
 8004a00:	f381 8811 	msr	BASEPRI, r1
 8004a04:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004a06:	4b53      	ldr	r3, [pc, #332]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 8004a08:	785b      	ldrb	r3, [r3, #1]
 8004a0a:	220a      	movs	r2, #10
 8004a0c:	4952      	ldr	r1, [pc, #328]	; (8004b58 <SEGGER_SYSVIEW_Start+0x16c>)
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fb fbe6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004a1a:	200a      	movs	r0, #10
 8004a1c:	f7ff fe2a 	bl	8004674 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004a20:	f3ef 8311 	mrs	r3, BASEPRI
 8004a24:	f04f 0120 	mov.w	r1, #32
 8004a28:	f381 8811 	msr	BASEPRI, r1
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	484b      	ldr	r0, [pc, #300]	; (8004b5c <SEGGER_SYSVIEW_Start+0x170>)
 8004a30:	f7ff fbc4 	bl	80041bc <_PreparePacket>
 8004a34:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a3e:	4b45      	ldr	r3, [pc, #276]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a44:	e00b      	b.n	8004a5e <SEGGER_SYSVIEW_Start+0x72>
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	1c59      	adds	r1, r3, #1
 8004a4e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004a50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a54:	b2d2      	uxtb	r2, r2
 8004a56:	701a      	strb	r2, [r3, #0]
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	09db      	lsrs	r3, r3, #7
 8004a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	2b7f      	cmp	r3, #127	; 0x7f
 8004a62:	d8f0      	bhi.n	8004a46 <SEGGER_SYSVIEW_Start+0x5a>
 8004a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a6c:	b2d2      	uxtb	r2, r2
 8004a6e:	701a      	strb	r2, [r3, #0]
 8004a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a72:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	627b      	str	r3, [r7, #36]	; 0x24
 8004a78:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	623b      	str	r3, [r7, #32]
 8004a7e:	e00b      	b.n	8004a98 <SEGGER_SYSVIEW_Start+0xac>
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	6279      	str	r1, [r7, #36]	; 0x24
 8004a8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	09db      	lsrs	r3, r3, #7
 8004a96:	623b      	str	r3, [r7, #32]
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	2b7f      	cmp	r3, #127	; 0x7f
 8004a9c:	d8f0      	bhi.n	8004a80 <SEGGER_SYSVIEW_Start+0x94>
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	627a      	str	r2, [r7, #36]	; 0x24
 8004aa4:	6a3a      	ldr	r2, [r7, #32]
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	701a      	strb	r2, [r3, #0]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	61fb      	str	r3, [r7, #28]
 8004ab2:	4b28      	ldr	r3, [pc, #160]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	61bb      	str	r3, [r7, #24]
 8004ab8:	e00b      	b.n	8004ad2 <SEGGER_SYSVIEW_Start+0xe6>
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	1c59      	adds	r1, r3, #1
 8004ac2:	61f9      	str	r1, [r7, #28]
 8004ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	09db      	lsrs	r3, r3, #7
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad6:	d8f0      	bhi.n	8004aba <SEGGER_SYSVIEW_Start+0xce>
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	61fa      	str	r2, [r7, #28]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	2300      	movs	r3, #0
 8004aee:	613b      	str	r3, [r7, #16]
 8004af0:	e00b      	b.n	8004b0a <SEGGER_SYSVIEW_Start+0x11e>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	6179      	str	r1, [r7, #20]
 8004afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0e:	d8f0      	bhi.n	8004af2 <SEGGER_SYSVIEW_Start+0x106>
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	617a      	str	r2, [r7, #20]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004b20:	2218      	movs	r2, #24
 8004b22:	6839      	ldr	r1, [r7, #0]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fc37 	bl	8004398 <_SendPacket>
      RECORD_END();
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004b30:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <SEGGER_SYSVIEW_Start+0x168>)
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004b3e:	f000 f9c7 	bl	8004ed0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004b42:	f000 f9b1 	bl	8004ea8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004b46:	f000 fc5f 	bl	8005408 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004b4a:	bf00      	nop
 8004b4c:	3730      	adds	r7, #48	; 0x30
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20013380 	.word	0x20013380
 8004b58:	080056b8 	.word	0x080056b8
 8004b5c:	200133b0 	.word	0x200133b0

08004b60 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004b66:	f3ef 8311 	mrs	r3, BASEPRI
 8004b6a:	f04f 0120 	mov.w	r1, #32
 8004b6e:	f381 8811 	msr	BASEPRI, r1
 8004b72:	607b      	str	r3, [r7, #4]
 8004b74:	480b      	ldr	r0, [pc, #44]	; (8004ba4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004b76:	f7ff fb21 	bl	80041bc <_PreparePacket>
 8004b7a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d007      	beq.n	8004b94 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004b84:	220b      	movs	r2, #11
 8004b86:	6839      	ldr	r1, [r7, #0]
 8004b88:	6838      	ldr	r0, [r7, #0]
 8004b8a:	f7ff fc05 	bl	8004398 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f383 8811 	msr	BASEPRI, r3
}
 8004b9a:	bf00      	nop
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200133b0 	.word	0x200133b0
 8004ba8:	20013380 	.word	0x20013380

08004bac <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004bb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004bb6:	f04f 0120 	mov.w	r1, #32
 8004bba:	f381 8811 	msr	BASEPRI, r1
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	4845      	ldr	r0, [pc, #276]	; (8004cd8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004bc2:	f7ff fafb 	bl	80041bc <_PreparePacket>
 8004bc6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd0:	4b42      	ldr	r3, [pc, #264]	; (8004cdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd6:	e00b      	b.n	8004bf0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004be2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]
 8004bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bec:	09db      	lsrs	r3, r3, #7
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	2b7f      	cmp	r3, #127	; 0x7f
 8004bf4:	d8f0      	bhi.n	8004bd8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0a:	4b34      	ldr	r3, [pc, #208]	; (8004cdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	623b      	str	r3, [r7, #32]
 8004c10:	e00b      	b.n	8004c2a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	b2da      	uxtb	r2, r3
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	1c59      	adds	r1, r3, #1
 8004c1a:	6279      	str	r1, [r7, #36]	; 0x24
 8004c1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	09db      	lsrs	r3, r3, #7
 8004c28:	623b      	str	r3, [r7, #32]
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c2e:	d8f0      	bhi.n	8004c12 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	1c5a      	adds	r2, r3, #1
 8004c34:	627a      	str	r2, [r7, #36]	; 0x24
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	61fb      	str	r3, [r7, #28]
 8004c44:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	61bb      	str	r3, [r7, #24]
 8004c4a:	e00b      	b.n	8004c64 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	b2da      	uxtb	r2, r3
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	1c59      	adds	r1, r3, #1
 8004c54:	61f9      	str	r1, [r7, #28]
 8004c56:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	09db      	lsrs	r3, r3, #7
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	2b7f      	cmp	r3, #127	; 0x7f
 8004c68:	d8f0      	bhi.n	8004c4c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	61fa      	str	r2, [r7, #28]
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	b2d2      	uxtb	r2, r2
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	e00b      	b.n	8004c9c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	1c59      	adds	r1, r3, #1
 8004c8c:	6179      	str	r1, [r7, #20]
 8004c8e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c92:	b2d2      	uxtb	r2, r2
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	09db      	lsrs	r3, r3, #7
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004ca0:	d8f0      	bhi.n	8004c84 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	617a      	str	r2, [r7, #20]
 8004ca8:	693a      	ldr	r2, [r7, #16]
 8004caa:	b2d2      	uxtb	r2, r2
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004cb2:	2218      	movs	r2, #24
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	68b8      	ldr	r0, [r7, #8]
 8004cb8:	f7ff fb6e 	bl	8004398 <_SendPacket>
  RECORD_END();
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d002      	beq.n	8004cd0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004cca:	4b04      	ldr	r3, [pc, #16]	; (8004cdc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	4798      	blx	r3
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3730      	adds	r7, #48	; 0x30
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	200133b0 	.word	0x200133b0
 8004cdc:	20013380 	.word	0x20013380

08004ce0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b092      	sub	sp, #72	; 0x48
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004ce8:	f3ef 8311 	mrs	r3, BASEPRI
 8004cec:	f04f 0120 	mov.w	r1, #32
 8004cf0:	f381 8811 	msr	BASEPRI, r1
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	486a      	ldr	r0, [pc, #424]	; (8004ea0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004cf8:	f7ff fa60 	bl	80041bc <_PreparePacket>
 8004cfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	647b      	str	r3, [r7, #68]	; 0x44
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b66      	ldr	r3, [pc, #408]	; (8004ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	643b      	str	r3, [r7, #64]	; 0x40
 8004d12:	e00b      	b.n	8004d2c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d16:	b2da      	uxtb	r2, r3
 8004d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1a:	1c59      	adds	r1, r3, #1
 8004d1c:	6479      	str	r1, [r7, #68]	; 0x44
 8004d1e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d28:	09db      	lsrs	r3, r3, #7
 8004d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d2e:	2b7f      	cmp	r3, #127	; 0x7f
 8004d30:	d8f0      	bhi.n	8004d14 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004d32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	647a      	str	r2, [r7, #68]	; 0x44
 8004d38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d40:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d4c:	e00b      	b.n	8004d66 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d54:	1c59      	adds	r1, r3, #1
 8004d56:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004d58:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d62:	09db      	lsrs	r3, r3, #7
 8004d64:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	2b7f      	cmp	r3, #127	; 0x7f
 8004d6a:	d8f0      	bhi.n	8004d4e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6e:	1c5a      	adds	r2, r3, #1
 8004d70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d7a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	4619      	mov	r1, r3
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff f9c9 	bl	800411c <_EncodeStr>
 8004d8a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004d8c:	2209      	movs	r2, #9
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	6938      	ldr	r0, [r7, #16]
 8004d92:	f7ff fb01 	bl	8004398 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	4b40      	ldr	r3, [pc, #256]	; (8004ea4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	633b      	str	r3, [r7, #48]	; 0x30
 8004daa:	e00b      	b.n	8004dc4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	1c59      	adds	r1, r3, #1
 8004db4:	6379      	str	r1, [r7, #52]	; 0x34
 8004db6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dba:	b2d2      	uxtb	r2, r2
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	09db      	lsrs	r3, r3, #7
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8004dc8:	d8f0      	bhi.n	8004dac <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	637a      	str	r2, [r7, #52]	; 0x34
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dd2:	b2d2      	uxtb	r2, r2
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
 8004de4:	e00b      	b.n	8004dfe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de8:	b2da      	uxtb	r2, r3
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	1c59      	adds	r1, r3, #1
 8004dee:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004df0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	09db      	lsrs	r3, r3, #7
 8004dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	2b7f      	cmp	r3, #127	; 0x7f
 8004e02:	d8f0      	bhi.n	8004de6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	701a      	strb	r2, [r3, #0]
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	623b      	str	r3, [r7, #32]
 8004e1e:	e00b      	b.n	8004e38 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	b2da      	uxtb	r2, r3
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	1c59      	adds	r1, r3, #1
 8004e28:	6279      	str	r1, [r7, #36]	; 0x24
 8004e2a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	6a3b      	ldr	r3, [r7, #32]
 8004e34:	09db      	lsrs	r3, r3, #7
 8004e36:	623b      	str	r3, [r7, #32]
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e3c:	d8f0      	bhi.n	8004e20 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1c5a      	adds	r2, r3, #1
 8004e42:	627a      	str	r2, [r7, #36]	; 0x24
 8004e44:	6a3a      	ldr	r2, [r7, #32]
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	61fb      	str	r3, [r7, #28]
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	e00b      	b.n	8004e70 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	1c59      	adds	r1, r3, #1
 8004e60:	61f9      	str	r1, [r7, #28]
 8004e62:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	09db      	lsrs	r3, r3, #7
 8004e6e:	61bb      	str	r3, [r7, #24]
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	2b7f      	cmp	r3, #127	; 0x7f
 8004e74:	d8f0      	bhi.n	8004e58 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	61fa      	str	r2, [r7, #28]
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004e86:	2215      	movs	r2, #21
 8004e88:	68f9      	ldr	r1, [r7, #12]
 8004e8a:	6938      	ldr	r0, [r7, #16]
 8004e8c:	f7ff fa84 	bl	8004398 <_SendPacket>
  RECORD_END();
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	f383 8811 	msr	BASEPRI, r3
}
 8004e96:	bf00      	nop
 8004e98:	3748      	adds	r7, #72	; 0x48
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200133b0 	.word	0x200133b0
 8004ea4:	20013380 	.word	0x20013380

08004ea8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d008      	beq.n	8004ec6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004ebe:	4b03      	ldr	r3, [pc, #12]	; (8004ecc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	4798      	blx	r3
  }
}
 8004ec6:	bf00      	nop
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20013380 	.word	0x20013380

08004ed0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004ed0:	b590      	push	{r4, r7, lr}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01a      	beq.n	8004f14 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004ede:	4b13      	ldr	r3, [pc, #76]	; (8004f2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004ee8:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4798      	blx	r3
 8004ef0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004ef4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004ef6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	000a      	movs	r2, r1
 8004f04:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004f06:	4613      	mov	r3, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	200d      	movs	r0, #13
 8004f0e:	f7ff fc0b 	bl	8004728 <SEGGER_SYSVIEW_RecordU32x2>
 8004f12:	e006      	b.n	8004f22 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004f14:	4b06      	ldr	r3, [pc, #24]	; (8004f30 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	200c      	movs	r0, #12
 8004f1c:	f7ff fbc8 	bl	80046b0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd90      	pop	{r4, r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20013380 	.word	0x20013380
 8004f30:	e0001004 	.word	0xe0001004

08004f34 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f3a:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3e:	f04f 0120 	mov.w	r1, #32
 8004f42:	f381 8811 	msr	BASEPRI, r1
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	4819      	ldr	r0, [pc, #100]	; (8004fb0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004f4a:	f7ff f937 	bl	80041bc <_PreparePacket>
 8004f4e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e00b      	b.n	8004f80 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	1c59      	adds	r1, r3, #1
 8004f70:	6179      	str	r1, [r7, #20]
 8004f72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	09db      	lsrs	r3, r3, #7
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	2b7f      	cmp	r3, #127	; 0x7f
 8004f84:	d8f0      	bhi.n	8004f68 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	1c5a      	adds	r2, r3, #1
 8004f8a:	617a      	str	r2, [r7, #20]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f96:	2202      	movs	r2, #2
 8004f98:	6879      	ldr	r1, [r7, #4]
 8004f9a:	68b8      	ldr	r0, [r7, #8]
 8004f9c:	f7ff f9fc 	bl	8004398 <_SendPacket>
  RECORD_END();
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f383 8811 	msr	BASEPRI, r3
}
 8004fa6:	bf00      	nop
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	200133b0 	.word	0x200133b0
 8004fb4:	e000ed04 	.word	0xe000ed04

08004fb8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fbe:	f3ef 8311 	mrs	r3, BASEPRI
 8004fc2:	f04f 0120 	mov.w	r1, #32
 8004fc6:	f381 8811 	msr	BASEPRI, r1
 8004fca:	607b      	str	r3, [r7, #4]
 8004fcc:	4807      	ldr	r0, [pc, #28]	; (8004fec <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004fce:	f7ff f8f5 	bl	80041bc <_PreparePacket>
 8004fd2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004fd4:	2203      	movs	r2, #3
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	6838      	ldr	r0, [r7, #0]
 8004fda:	f7ff f9dd 	bl	8004398 <_SendPacket>
  RECORD_END();
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f383 8811 	msr	BASEPRI, r3
}
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	200133b0 	.word	0x200133b0

08004ff0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004ff6:	f3ef 8311 	mrs	r3, BASEPRI
 8004ffa:	f04f 0120 	mov.w	r1, #32
 8004ffe:	f381 8811 	msr	BASEPRI, r1
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	4807      	ldr	r0, [pc, #28]	; (8005024 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005006:	f7ff f8d9 	bl	80041bc <_PreparePacket>
 800500a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800500c:	2212      	movs	r2, #18
 800500e:	6839      	ldr	r1, [r7, #0]
 8005010:	6838      	ldr	r0, [r7, #0]
 8005012:	f7ff f9c1 	bl	8004398 <_SendPacket>
  RECORD_END();
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f383 8811 	msr	BASEPRI, r3
}
 800501c:	bf00      	nop
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	200133b0 	.word	0x200133b0

08005028 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800502e:	f3ef 8311 	mrs	r3, BASEPRI
 8005032:	f04f 0120 	mov.w	r1, #32
 8005036:	f381 8811 	msr	BASEPRI, r1
 800503a:	607b      	str	r3, [r7, #4]
 800503c:	4807      	ldr	r0, [pc, #28]	; (800505c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800503e:	f7ff f8bd 	bl	80041bc <_PreparePacket>
 8005042:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005044:	2211      	movs	r2, #17
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6838      	ldr	r0, [r7, #0]
 800504a:	f7ff f9a5 	bl	8004398 <_SendPacket>
  RECORD_END();
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f383 8811 	msr	BASEPRI, r3
}
 8005054:	bf00      	nop
 8005056:	3708      	adds	r7, #8
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	200133b0 	.word	0x200133b0

08005060 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005068:	f3ef 8311 	mrs	r3, BASEPRI
 800506c:	f04f 0120 	mov.w	r1, #32
 8005070:	f381 8811 	msr	BASEPRI, r1
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	4819      	ldr	r0, [pc, #100]	; (80050dc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005078:	f7ff f8a0 	bl	80041bc <_PreparePacket>
 800507c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005082:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	61fb      	str	r3, [r7, #28]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	e00b      	b.n	80050ae <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	b2da      	uxtb	r2, r3
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	61f9      	str	r1, [r7, #28]
 80050a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	09db      	lsrs	r3, r3, #7
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b7f      	cmp	r3, #127	; 0x7f
 80050b2:	d8f0      	bhi.n	8005096 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	61fa      	str	r2, [r7, #28]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80050c4:	2208      	movs	r2, #8
 80050c6:	68f9      	ldr	r1, [r7, #12]
 80050c8:	6938      	ldr	r0, [r7, #16]
 80050ca:	f7ff f965 	bl	8004398 <_SendPacket>
  RECORD_END();
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f383 8811 	msr	BASEPRI, r3
}
 80050d4:	bf00      	nop
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	200133b0 	.word	0x200133b0
 80050e0:	20013380 	.word	0x20013380

080050e4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80050ec:	f3ef 8311 	mrs	r3, BASEPRI
 80050f0:	f04f 0120 	mov.w	r1, #32
 80050f4:	f381 8811 	msr	BASEPRI, r1
 80050f8:	617b      	str	r3, [r7, #20]
 80050fa:	4819      	ldr	r0, [pc, #100]	; (8005160 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80050fc:	f7ff f85e 	bl	80041bc <_PreparePacket>
 8005100:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005106:	4b17      	ldr	r3, [pc, #92]	; (8005164 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	61bb      	str	r3, [r7, #24]
 8005118:	e00b      	b.n	8005132 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	b2da      	uxtb	r2, r3
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	1c59      	adds	r1, r3, #1
 8005122:	61f9      	str	r1, [r7, #28]
 8005124:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005128:	b2d2      	uxtb	r2, r2
 800512a:	701a      	strb	r2, [r3, #0]
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	09db      	lsrs	r3, r3, #7
 8005130:	61bb      	str	r3, [r7, #24]
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b7f      	cmp	r3, #127	; 0x7f
 8005136:	d8f0      	bhi.n	800511a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	61fa      	str	r2, [r7, #28]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005148:	2204      	movs	r2, #4
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	6938      	ldr	r0, [r7, #16]
 800514e:	f7ff f923 	bl	8004398 <_SendPacket>
  RECORD_END();
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f383 8811 	msr	BASEPRI, r3
}
 8005158:	bf00      	nop
 800515a:	3720      	adds	r7, #32
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	200133b0 	.word	0x200133b0
 8005164:	20013380 	.word	0x20013380

08005168 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b088      	sub	sp, #32
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005170:	f3ef 8311 	mrs	r3, BASEPRI
 8005174:	f04f 0120 	mov.w	r1, #32
 8005178:	f381 8811 	msr	BASEPRI, r1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	4819      	ldr	r0, [pc, #100]	; (80051e4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005180:	f7ff f81c 	bl	80041bc <_PreparePacket>
 8005184:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800518a:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	1ad3      	subs	r3, r2, r3
 8005192:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	61fb      	str	r3, [r7, #28]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e00b      	b.n	80051b6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	b2da      	uxtb	r2, r3
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	1c59      	adds	r1, r3, #1
 80051a6:	61f9      	str	r1, [r7, #28]
 80051a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	09db      	lsrs	r3, r3, #7
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	2b7f      	cmp	r3, #127	; 0x7f
 80051ba:	d8f0      	bhi.n	800519e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	61fa      	str	r2, [r7, #28]
 80051c2:	69ba      	ldr	r2, [r7, #24]
 80051c4:	b2d2      	uxtb	r2, r2
 80051c6:	701a      	strb	r2, [r3, #0]
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80051cc:	2206      	movs	r2, #6
 80051ce:	68f9      	ldr	r1, [r7, #12]
 80051d0:	6938      	ldr	r0, [r7, #16]
 80051d2:	f7ff f8e1 	bl	8004398 <_SendPacket>
  RECORD_END();
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f383 8811 	msr	BASEPRI, r3
}
 80051dc:	bf00      	nop
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	200133b0 	.word	0x200133b0
 80051e8:	20013380 	.word	0x20013380

080051ec <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80051f6:	f3ef 8311 	mrs	r3, BASEPRI
 80051fa:	f04f 0120 	mov.w	r1, #32
 80051fe:	f381 8811 	msr	BASEPRI, r1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	4827      	ldr	r0, [pc, #156]	; (80052a4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8005206:	f7fe ffd9 	bl	80041bc <_PreparePacket>
 800520a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	623b      	str	r3, [r7, #32]
 8005222:	e00b      	b.n	800523c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	b2da      	uxtb	r2, r3
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	1c59      	adds	r1, r3, #1
 800522c:	6279      	str	r1, [r7, #36]	; 0x24
 800522e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005232:	b2d2      	uxtb	r2, r2
 8005234:	701a      	strb	r2, [r3, #0]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	09db      	lsrs	r3, r3, #7
 800523a:	623b      	str	r3, [r7, #32]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	2b7f      	cmp	r3, #127	; 0x7f
 8005240:	d8f0      	bhi.n	8005224 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	627a      	str	r2, [r7, #36]	; 0x24
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	61bb      	str	r3, [r7, #24]
 800525a:	e00b      	b.n	8005274 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	b2da      	uxtb	r2, r3
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	61f9      	str	r1, [r7, #28]
 8005266:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	09db      	lsrs	r3, r3, #7
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	2b7f      	cmp	r3, #127	; 0x7f
 8005278:	d8f0      	bhi.n	800525c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	61fa      	str	r2, [r7, #28]
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800528a:	2207      	movs	r2, #7
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	6938      	ldr	r0, [r7, #16]
 8005290:	f7ff f882 	bl	8004398 <_SendPacket>
  RECORD_END();
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	f383 8811 	msr	BASEPRI, r3
}
 800529a:	bf00      	nop
 800529c:	3728      	adds	r7, #40	; 0x28
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	200133b0 	.word	0x200133b0
 80052a8:	20013380 	.word	0x20013380

080052ac <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80052b4:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	1ad3      	subs	r3, r2, r3
}
 80052bc:	4618      	mov	r0, r3
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20013380 	.word	0x20013380

080052cc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	; 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4603      	mov	r3, r0
 80052d4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80052d6:	4b3b      	ldr	r3, [pc, #236]	; (80053c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d06d      	beq.n	80053ba <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80052de:	4b39      	ldr	r3, [pc, #228]	; (80053c4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80052e4:	2300      	movs	r3, #0
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e8:	e008      	b.n	80052fc <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	3301      	adds	r3, #1
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005300:	429a      	cmp	r2, r3
 8005302:	d3f2      	bcc.n	80052ea <SEGGER_SYSVIEW_SendModule+0x1e>
 8005304:	e000      	b.n	8005308 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005306:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	2b00      	cmp	r3, #0
 800530c:	d055      	beq.n	80053ba <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800530e:	f3ef 8311 	mrs	r3, BASEPRI
 8005312:	f04f 0120 	mov.w	r1, #32
 8005316:	f381 8811 	msr	BASEPRI, r1
 800531a:	617b      	str	r3, [r7, #20]
 800531c:	482a      	ldr	r0, [pc, #168]	; (80053c8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800531e:	f7fe ff4d 	bl	80041bc <_PreparePacket>
 8005322:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	623b      	str	r3, [r7, #32]
 8005330:	e00b      	b.n	800534a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	1c59      	adds	r1, r3, #1
 800533a:	6279      	str	r1, [r7, #36]	; 0x24
 800533c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	701a      	strb	r2, [r3, #0]
 8005344:	6a3b      	ldr	r3, [r7, #32]
 8005346:	09db      	lsrs	r3, r3, #7
 8005348:	623b      	str	r3, [r7, #32]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2b7f      	cmp	r3, #127	; 0x7f
 800534e:	d8f0      	bhi.n	8005332 <SEGGER_SYSVIEW_SendModule+0x66>
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	627a      	str	r2, [r7, #36]	; 0x24
 8005356:	6a3a      	ldr	r2, [r7, #32]
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e00b      	b.n	8005384 <SEGGER_SYSVIEW_SendModule+0xb8>
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	1c59      	adds	r1, r3, #1
 8005374:	61f9      	str	r1, [r7, #28]
 8005376:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	09db      	lsrs	r3, r3, #7
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b7f      	cmp	r3, #127	; 0x7f
 8005388:	d8f0      	bhi.n	800536c <SEGGER_SYSVIEW_SendModule+0xa0>
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	61fa      	str	r2, [r7, #28]
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2280      	movs	r2, #128	; 0x80
 80053a0:	4619      	mov	r1, r3
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7fe feba 	bl	800411c <_EncodeStr>
 80053a8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80053aa:	2216      	movs	r2, #22
 80053ac:	68f9      	ldr	r1, [r7, #12]
 80053ae:	6938      	ldr	r0, [r7, #16]
 80053b0:	f7fe fff2 	bl	8004398 <_SendPacket>
      RECORD_END();
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80053ba:	bf00      	nop
 80053bc:	3730      	adds	r7, #48	; 0x30
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	200133a8 	.word	0x200133a8
 80053c8:	200133b0 	.word	0x200133b0

080053cc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80053d2:	4b0c      	ldr	r3, [pc, #48]	; (8005404 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00f      	beq.n	80053fa <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f2      	bne.n	80053e0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200133a8 	.word	0x200133a8

08005408 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800540e:	f3ef 8311 	mrs	r3, BASEPRI
 8005412:	f04f 0120 	mov.w	r1, #32
 8005416:	f381 8811 	msr	BASEPRI, r1
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	4817      	ldr	r0, [pc, #92]	; (800547c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800541e:	f7fe fecd 	bl	80041bc <_PreparePacket>
 8005422:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	617b      	str	r3, [r7, #20]
 800542c:	4b14      	ldr	r3, [pc, #80]	; (8005480 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	613b      	str	r3, [r7, #16]
 8005432:	e00b      	b.n	800544c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	1c59      	adds	r1, r3, #1
 800543c:	6179      	str	r1, [r7, #20]
 800543e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	09db      	lsrs	r3, r3, #7
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	2b7f      	cmp	r3, #127	; 0x7f
 8005450:	d8f0      	bhi.n	8005434 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	617a      	str	r2, [r7, #20]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005462:	221b      	movs	r2, #27
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	68b8      	ldr	r0, [r7, #8]
 8005468:	f7fe ff96 	bl	8004398 <_SendPacket>
  RECORD_END();
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f383 8811 	msr	BASEPRI, r3
}
 8005472:	bf00      	nop
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	200133b0 	.word	0x200133b0
 8005480:	200133ac 	.word	0x200133ac

08005484 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005484:	b580      	push	{r7, lr}
 8005486:	b08a      	sub	sp, #40	; 0x28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800548c:	f3ef 8311 	mrs	r3, BASEPRI
 8005490:	f04f 0120 	mov.w	r1, #32
 8005494:	f381 8811 	msr	BASEPRI, r1
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	4827      	ldr	r0, [pc, #156]	; (8005538 <SEGGER_SYSVIEW_Warn+0xb4>)
 800549c:	f7fe fe8e 	bl	80041bc <_PreparePacket>
 80054a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80054a2:	2280      	movs	r2, #128	; 0x80
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	6938      	ldr	r0, [r7, #16]
 80054a8:	f7fe fe38 	bl	800411c <_EncodeStr>
 80054ac:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	627b      	str	r3, [r7, #36]	; 0x24
 80054b2:	2301      	movs	r3, #1
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	e00b      	b.n	80054d0 <SEGGER_SYSVIEW_Warn+0x4c>
 80054b8:	6a3b      	ldr	r3, [r7, #32]
 80054ba:	b2da      	uxtb	r2, r3
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	6279      	str	r1, [r7, #36]	; 0x24
 80054c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	6a3b      	ldr	r3, [r7, #32]
 80054cc:	09db      	lsrs	r3, r3, #7
 80054ce:	623b      	str	r3, [r7, #32]
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	2b7f      	cmp	r3, #127	; 0x7f
 80054d4:	d8f0      	bhi.n	80054b8 <SEGGER_SYSVIEW_Warn+0x34>
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	627a      	str	r2, [r7, #36]	; 0x24
 80054dc:	6a3a      	ldr	r2, [r7, #32]
 80054de:	b2d2      	uxtb	r2, r2
 80054e0:	701a      	strb	r2, [r3, #0]
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	2300      	movs	r3, #0
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e00b      	b.n	8005508 <SEGGER_SYSVIEW_Warn+0x84>
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	61f9      	str	r1, [r7, #28]
 80054fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054fe:	b2d2      	uxtb	r2, r2
 8005500:	701a      	strb	r2, [r3, #0]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	09db      	lsrs	r3, r3, #7
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	2b7f      	cmp	r3, #127	; 0x7f
 800550c:	d8f0      	bhi.n	80054f0 <SEGGER_SYSVIEW_Warn+0x6c>
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	61fa      	str	r2, [r7, #28]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800551e:	221a      	movs	r2, #26
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	6938      	ldr	r0, [r7, #16]
 8005524:	f7fe ff38 	bl	8004398 <_SendPacket>
  RECORD_END();
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f383 8811 	msr	BASEPRI, r3
}
 800552e:	bf00      	nop
 8005530:	3728      	adds	r7, #40	; 0x28
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	200133b0 	.word	0x200133b0

0800553c <__libc_init_array>:
 800553c:	b570      	push	{r4, r5, r6, lr}
 800553e:	4d0d      	ldr	r5, [pc, #52]	; (8005574 <__libc_init_array+0x38>)
 8005540:	4c0d      	ldr	r4, [pc, #52]	; (8005578 <__libc_init_array+0x3c>)
 8005542:	1b64      	subs	r4, r4, r5
 8005544:	10a4      	asrs	r4, r4, #2
 8005546:	2600      	movs	r6, #0
 8005548:	42a6      	cmp	r6, r4
 800554a:	d109      	bne.n	8005560 <__libc_init_array+0x24>
 800554c:	4d0b      	ldr	r5, [pc, #44]	; (800557c <__libc_init_array+0x40>)
 800554e:	4c0c      	ldr	r4, [pc, #48]	; (8005580 <__libc_init_array+0x44>)
 8005550:	f000 f83e 	bl	80055d0 <_init>
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	2600      	movs	r6, #0
 800555a:	42a6      	cmp	r6, r4
 800555c:	d105      	bne.n	800556a <__libc_init_array+0x2e>
 800555e:	bd70      	pop	{r4, r5, r6, pc}
 8005560:	f855 3b04 	ldr.w	r3, [r5], #4
 8005564:	4798      	blx	r3
 8005566:	3601      	adds	r6, #1
 8005568:	e7ee      	b.n	8005548 <__libc_init_array+0xc>
 800556a:	f855 3b04 	ldr.w	r3, [r5], #4
 800556e:	4798      	blx	r3
 8005570:	3601      	adds	r6, #1
 8005572:	e7f2      	b.n	800555a <__libc_init_array+0x1e>
 8005574:	080056cc 	.word	0x080056cc
 8005578:	080056cc 	.word	0x080056cc
 800557c:	080056cc 	.word	0x080056cc
 8005580:	080056d0 	.word	0x080056d0

08005584 <memcmp>:
 8005584:	b510      	push	{r4, lr}
 8005586:	3901      	subs	r1, #1
 8005588:	4402      	add	r2, r0
 800558a:	4290      	cmp	r0, r2
 800558c:	d101      	bne.n	8005592 <memcmp+0xe>
 800558e:	2000      	movs	r0, #0
 8005590:	e005      	b.n	800559e <memcmp+0x1a>
 8005592:	7803      	ldrb	r3, [r0, #0]
 8005594:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005598:	42a3      	cmp	r3, r4
 800559a:	d001      	beq.n	80055a0 <memcmp+0x1c>
 800559c:	1b18      	subs	r0, r3, r4
 800559e:	bd10      	pop	{r4, pc}
 80055a0:	3001      	adds	r0, #1
 80055a2:	e7f2      	b.n	800558a <memcmp+0x6>

080055a4 <memcpy>:
 80055a4:	440a      	add	r2, r1
 80055a6:	4291      	cmp	r1, r2
 80055a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055ac:	d100      	bne.n	80055b0 <memcpy+0xc>
 80055ae:	4770      	bx	lr
 80055b0:	b510      	push	{r4, lr}
 80055b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055ba:	4291      	cmp	r1, r2
 80055bc:	d1f9      	bne.n	80055b2 <memcpy+0xe>
 80055be:	bd10      	pop	{r4, pc}

080055c0 <memset>:
 80055c0:	4402      	add	r2, r0
 80055c2:	4603      	mov	r3, r0
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d100      	bne.n	80055ca <memset+0xa>
 80055c8:	4770      	bx	lr
 80055ca:	f803 1b01 	strb.w	r1, [r3], #1
 80055ce:	e7f9      	b.n	80055c4 <memset+0x4>

080055d0 <_init>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr

080055dc <_fini>:
 80055dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055de:	bf00      	nop
 80055e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055e2:	bc08      	pop	{r3}
 80055e4:	469e      	mov	lr, r3
 80055e6:	4770      	bx	lr
