
eth2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ab4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c9c  08010c64  08010c64  00020c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013900  08013900  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08013900  08013900  00023900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013908  08013908  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013908  08013908  00023908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801390c  0801390c  0002390c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08013910  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          00008230  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200082c0  200082c0  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000211c4  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005646  00000000  00000000  00051284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  000568d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001680  00000000  00000000  00058000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000308e5  00000000  00000000  00059680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00026ff6  00000000  00000000  00089f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ececf  00000000  00000000  000b0f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019de2a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067f4  00000000  00000000  0019de7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010c4c 	.word	0x08010c4c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	08010c4c 	.word	0x08010c4c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f000 ff56 	bl	8001458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 f812 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b0:	f000 f8d2 	bl	8000758 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005b4:	f000 f878 	bl	80006a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005b8:	f000 f8a0 	bl	80006fc <MX_USB_OTG_FS_PCD_Init>
  MX_LWIP_Init();
 80005bc:	f004 f81c 	bl	80045f8 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */




  tcp_server_init();
 80005c0:	f000 fb58 	bl	8000c74 <tcp_server_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ethernetif_input(&gnetif);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <main+0x2c>)
 80005c6:	f004 fa7f 	bl	8004ac8 <ethernetif_input>

	  sys_check_timeouts();
 80005ca:	f00c fd19 	bl	800d000 <sys_check_timeouts>
	  ethernetif_input(&gnetif);
 80005ce:	e7f9      	b.n	80005c4 <main+0x20>
 80005d0:	20000604 	.word	0x20000604

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	; 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f00f fac6 	bl	800fb74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	; (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	; (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	; (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000634:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000648:	23a8      	movs	r3, #168	; 0xa8
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fd71 	bl	8003140 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f926 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f002 ffd2 	bl	8003630 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f90f 	bl	80008b4 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_USART3_UART_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART3_UART_Init+0x4c>)
 80006e0:	f003 f9c6 	bl	8003a70 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f8e3 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000ac 	.word	0x200000ac
 80006f8:	40004800 	.word	0x40004800

080006fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000702:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000706:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070a:	2204      	movs	r2, #4
 800070c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000710:	2202      	movs	r2, #2
 8000712:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2202      	movs	r2, #2
 800071e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2201      	movs	r2, #1
 8000724:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000734:	2201      	movs	r2, #1
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000740:	f002 fbe1 	bl	8002f06 <HAL_PCD_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f8b3 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000f0 	.word	0x200000f0

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 031c 	add.w	r3, r7, #28
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
 8000772:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a4b      	ldr	r2, [pc, #300]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000778:	f043 0304 	orr.w	r3, r3, #4
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b49      	ldr	r3, [pc, #292]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61bb      	str	r3, [r7, #24]
 8000788:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	4b45      	ldr	r3, [pc, #276]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a44      	ldr	r2, [pc, #272]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	4b3e      	ldr	r3, [pc, #248]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a3d      	ldr	r2, [pc, #244]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b3b      	ldr	r3, [pc, #236]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
 80007c6:	4b37      	ldr	r3, [pc, #220]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a36      	ldr	r2, [pc, #216]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b30      	ldr	r3, [pc, #192]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a2f      	ldr	r2, [pc, #188]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b2d      	ldr	r3, [pc, #180]	; (80008a4 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b29      	ldr	r3, [pc, #164]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a28      	ldr	r2, [pc, #160]	; (80008a4 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b26      	ldr	r3, [pc, #152]	; (80008a4 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f244 0181 	movw	r1, #16513	; 0x4081
 800081c:	4822      	ldr	r0, [pc, #136]	; (80008a8 <MX_GPIO_Init+0x150>)
 800081e:	f002 fb59 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	4821      	ldr	r0, [pc, #132]	; (80008ac <MX_GPIO_Init+0x154>)
 8000828:	f002 fb54 	bl	8002ed4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800082c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	481b      	ldr	r0, [pc, #108]	; (80008b0 <MX_GPIO_Init+0x158>)
 8000844:	f002 f99a 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000848:	f244 0381 	movw	r3, #16513	; 0x4081
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4811      	ldr	r0, [pc, #68]	; (80008a8 <MX_GPIO_Init+0x150>)
 8000862:	f002 f98b 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000866:	2340      	movs	r3, #64	; 0x40
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	480b      	ldr	r0, [pc, #44]	; (80008ac <MX_GPIO_Init+0x154>)
 800087e:	f002 f97d 	bl	8002b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_GPIO_Init+0x154>)
 8000896:	f002 f971 	bl	8002b7c <HAL_GPIO_Init>

}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	; 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020800 	.word	0x40020800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	; 0x28
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a19      	ldr	r2, [pc, #100]	; (8000994 <HAL_UART_MspInit+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d12c      	bne.n	800098c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b18      	ldr	r3, [pc, #96]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a17      	ldr	r2, [pc, #92]	; (8000998 <HAL_UART_MspInit+0x88>)
 800093c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000958:	f043 0308 	orr.w	r3, r3, #8
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_UART_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0308 	and.w	r3, r3, #8
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800096a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800096e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000978:	2303      	movs	r3, #3
 800097a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800097c:	2307      	movs	r3, #7
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4619      	mov	r1, r3
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_UART_MspInit+0x8c>)
 8000988:	f002 f8f8 	bl	8002b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	; 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004800 	.word	0x40004800
 8000998:	40023800 	.word	0x40023800
 800099c:	40020c00 	.word	0x40020c00

080009a0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80009c0:	d13f      	bne.n	8000a42 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	4a20      	ldr	r2, [pc, #128]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	6313      	str	r3, [r2, #48]	; 0x30
 80009d2:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009de:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80009e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f0:	230a      	movs	r3, #10
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4815      	ldr	r0, [pc, #84]	; (8000a50 <HAL_PCD_MspInit+0xb0>)
 80009fc:	f002 f8be 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	480e      	ldr	r0, [pc, #56]	; (8000a50 <HAL_PCD_MspInit+0xb0>)
 8000a16:	f002 f8b1 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 8000a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 8000a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a24:	6353      	str	r3, [r2, #52]	; 0x34
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_PCD_MspInit+0xac>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3728      	adds	r7, #40	; 0x28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020000 	.word	0x40020000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa0:	f000 fd2c 	bl	80014fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <ETH_IRQHandler+0x10>)
 8000aae:	f001 f97d 	bl	8001dac <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20005120 	.word	0x20005120

08000abc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	return 1;
 8000ac0:	2301      	movs	r3, #1
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_kill>:

int _kill(int pid, int sig)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <_kill+0x20>)
 8000ad8:	2216      	movs	r2, #22
 8000ada:	601a      	str	r2, [r3, #0]
	return -1;
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	200082b0 	.word	0x200082b0

08000af0 <_exit>:

void _exit (int status)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295
 8000afc:	6878      	ldr	r0, [r7, #4]
 8000afe:	f7ff ffe5 	bl	8000acc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b02:	e7fe      	b.n	8000b02 <_exit+0x12>

08000b04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b086      	sub	sp, #24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	60f8      	str	r0, [r7, #12]
 8000b0c:	60b9      	str	r1, [r7, #8]
 8000b0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e00a      	b.n	8000b2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b16:	f3af 8000 	nop.w
 8000b1a:	4601      	mov	r1, r0
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	b2ca      	uxtb	r2, r1
 8000b24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbf0      	blt.n	8000b16 <_read+0x12>
	}

return len;
 8000b34:	687b      	ldr	r3, [r7, #4]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3718      	adds	r7, #24
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e009      	b.n	8000b64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	3301      	adds	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697a      	ldr	r2, [r7, #20]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	dbf1      	blt.n	8000b50 <_write+0x12>
	}
	return len;
 8000b6c:	687b      	ldr	r3, [r7, #4]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <_close>:

int _close(int file)
{
 8000b76:	b480      	push	{r7}
 8000b78:	b083      	sub	sp, #12
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9e:	605a      	str	r2, [r3, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_isatty>:

int _isatty(int file)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb6:	2301      	movs	r3, #1
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d205      	bcs.n	8000c1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <_sbrk+0x6c>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	371c      	adds	r7, #28
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	20030000 	.word	0x20030000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	200005fc 	.word	0x200005fc
 8000c48:	200082c0 	.word	0x200082c0
 8000c4c:	200082b0 	.word	0x200082b0

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8000c7a:	f007 fc0f 	bl	800849c <tcp_new>
 8000c7e:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 169,254,101,42);
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <tcp_server_init+0x4c>)
 8000c82:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 7);
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2207      	movs	r2, #7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f006 fb62 	bl	8007354 <tcp_bind>
 8000c90:	4603      	mov	r3, r0
 8000c92:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8000c94:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8000c9c:	21ff      	movs	r1, #255	; 0xff
 8000c9e:	68f8      	ldr	r0, [r7, #12]
 8000ca0:	f006 fc10 	bl	80074c4 <tcp_listen_with_backlog>
 8000ca4:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8000ca6:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <tcp_server_init+0x50>)
 8000ca8:	68f8      	ldr	r0, [r7, #12]
 8000caa:	f007 fc77 	bl	800859c <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8000cae:	e003      	b.n	8000cb8 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8000cb0:	68f9      	ldr	r1, [r7, #12]
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f004 ff34 	bl	8005b20 <memp_free>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	2a65fea9 	.word	0x2a65fea9
 8000cc4:	08000cc9 	.word	0x08000cc9

08000cc8 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	68b8      	ldr	r0, [r7, #8]
 8000cda:	f007 f9ed 	bl	80080b8 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8000cde:	200c      	movs	r0, #12
 8000ce0:	f004 fd1e 	bl	8005720 <mem_malloc>
 8000ce4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d01f      	beq.n	8000d2c <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	2201      	movs	r2, #1
 8000cf0:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8000d04:	6939      	ldr	r1, [r7, #16]
 8000d06:	68b8      	ldr	r0, [r7, #8]
 8000d08:	f007 fbd0 	bl	80084ac <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8000d0c:	490d      	ldr	r1, [pc, #52]	; (8000d44 <tcp_server_accept+0x7c>)
 8000d0e:	68b8      	ldr	r0, [r7, #8]
 8000d10:	f007 fbde 	bl	80084d0 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <tcp_server_accept+0x80>)
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f007 fc1e 	bl	8008558 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	490b      	ldr	r1, [pc, #44]	; (8000d4c <tcp_server_accept+0x84>)
 8000d20:	68b8      	ldr	r0, [r7, #8]
 8000d22:	f007 fc53 	bl	80085cc <tcp_poll>

    ret_err = ERR_OK;
 8000d26:	2300      	movs	r3, #0
 8000d28:	75fb      	strb	r3, [r7, #23]
 8000d2a:	e005      	b.n	8000d38 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8000d2c:	6939      	ldr	r1, [r7, #16]
 8000d2e:	68b8      	ldr	r0, [r7, #8]
 8000d30:	f000 f965 	bl	8000ffe <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8000d34:	23ff      	movs	r3, #255	; 0xff
 8000d36:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8000d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3718      	adds	r7, #24
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	08000d51 	.word	0x08000d51
 8000d48:	08000e85 	.word	0x08000e85
 8000d4c:	08000ea9 	.word	0x08000ea9

08000d50 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
 8000d5c:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d105      	bne.n	8000d70 <tcp_server_recv+0x20>
 8000d64:	4b43      	ldr	r3, [pc, #268]	; (8000e74 <tcp_server_recv+0x124>)
 8000d66:	22c3      	movs	r2, #195	; 0xc3
 8000d68:	4943      	ldr	r1, [pc, #268]	; (8000e78 <tcp_server_recv+0x128>)
 8000d6a:	4844      	ldr	r0, [pc, #272]	; (8000e7c <tcp_server_recv+0x12c>)
 8000d6c:	f00e ff0a 	bl	800fb84 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d116      	bne.n	8000da8 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d104      	bne.n	8000d92 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8000d88:	69b9      	ldr	r1, [r7, #24]
 8000d8a:	68b8      	ldr	r0, [r7, #8]
 8000d8c:	f000 f937 	bl	8000ffe <tcp_server_connection_close>
 8000d90:	e007      	b.n	8000da2 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8000d92:	493b      	ldr	r1, [pc, #236]	; (8000e80 <tcp_server_recv+0x130>)
 8000d94:	68b8      	ldr	r0, [r7, #8]
 8000d96:	f007 fbbd 	bl	8008514 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8000d9a:	69b9      	ldr	r1, [r7, #24]
 8000d9c:	68b8      	ldr	r0, [r7, #8]
 8000d9e:	f000 f8db 	bl	8000f58 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	77fb      	strb	r3, [r7, #31]
 8000da6:	e05f      	b.n	8000e68 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8000da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d00b      	beq.n	8000dc8 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d005      	beq.n	8000dc2 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8000dbc:	6878      	ldr	r0, [r7, #4]
 8000dbe:	f005 fd25 	bl	800680c <pbuf_free>
    }
    ret_err = err;
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	77fb      	strb	r3, [r7, #31]
 8000dc6:	e04f      	b.n	8000e68 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d110      	bne.n	8000df2 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8000dd6:	69bb      	ldr	r3, [r7, #24]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8000ddc:	4928      	ldr	r1, [pc, #160]	; (8000e80 <tcp_server_recv+0x130>)
 8000dde:	68b8      	ldr	r0, [r7, #8]
 8000de0:	f007 fb98 	bl	8008514 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	68b8      	ldr	r0, [r7, #8]
 8000de8:	f000 f930 	bl	800104c <tcp_server_handle>

    ret_err = ERR_OK;
 8000dec:	2300      	movs	r3, #0
 8000dee:	77fb      	strb	r3, [r7, #31]
 8000df0:	e03a      	b.n	8000e68 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	d115      	bne.n	8000e26 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d107      	bne.n	8000e12 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	687a      	ldr	r2, [r7, #4]
 8000e06:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8000e08:	69b9      	ldr	r1, [r7, #24]
 8000e0a:	68b8      	ldr	r0, [r7, #8]
 8000e0c:	f000 f91e 	bl	800104c <tcp_server_handle>
 8000e10:	e006      	b.n	8000e20 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8000e18:	6879      	ldr	r1, [r7, #4]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f005 fe0e 	bl	8006a3c <pbuf_chain>
    }
    ret_err = ERR_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	77fb      	strb	r3, [r7, #31]
 8000e24:	e020      	b.n	8000e68 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d10e      	bne.n	8000e4c <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	891b      	ldrh	r3, [r3, #8]
 8000e32:	4619      	mov	r1, r3
 8000e34:	68b8      	ldr	r0, [r7, #8]
 8000e36:	f006 fc5b 	bl	80076f0 <tcp_recved>
    es->p = NULL;
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f005 fce3 	bl	800680c <pbuf_free>
    ret_err = ERR_OK;
 8000e46:	2300      	movs	r3, #0
 8000e48:	77fb      	strb	r3, [r7, #31]
 8000e4a:	e00d      	b.n	8000e68 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	891b      	ldrh	r3, [r3, #8]
 8000e50:	4619      	mov	r1, r3
 8000e52:	68b8      	ldr	r0, [r7, #8]
 8000e54:	f006 fc4c 	bl	80076f0 <tcp_recved>
    es->p = NULL;
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f005 fcd4 	bl	800680c <pbuf_free>
    ret_err = ERR_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8000e68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	08010c64 	.word	0x08010c64
 8000e78:	08010c80 	.word	0x08010c80
 8000e7c:	08010c8c 	.word	0x08010c8c
 8000e80:	08000f09 	.word	0x08000f09

08000e84 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8000e9a:	68f8      	ldr	r0, [r7, #12]
 8000e9c:	f004 fada 	bl	8005454 <mem_free>
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d017      	beq.n	8000eec <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d008      	beq.n	8000ed6 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8000ec4:	490f      	ldr	r1, [pc, #60]	; (8000f04 <tcp_server_poll+0x5c>)
 8000ec6:	6838      	ldr	r0, [r7, #0]
 8000ec8:	f007 fb24 	bl	8008514 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8000ecc:	68b9      	ldr	r1, [r7, #8]
 8000ece:	6838      	ldr	r0, [r7, #0]
 8000ed0:	f000 f842 	bl	8000f58 <tcp_server_send>
 8000ed4:	e007      	b.n	8000ee6 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d103      	bne.n	8000ee6 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6838      	ldr	r0, [r7, #0]
 8000ee2:	f000 f88c 	bl	8000ffe <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73fb      	strb	r3, [r7, #15]
 8000eea:	e004      	b.n	8000ef6 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8000eec:	6838      	ldr	r0, [r7, #0]
 8000eee:	f006 fa25 	bl	800733c <tcp_abort>
    ret_err = ERR_ABRT;
 8000ef2:	23f3      	movs	r3, #243	; 0xf3
 8000ef4:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	08000f09 	.word	0x08000f09

08000f08 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	4613      	mov	r3, r2
 8000f14:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d008      	beq.n	8000f3a <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8000f28:	490a      	ldr	r1, [pc, #40]	; (8000f54 <tcp_server_sent+0x4c>)
 8000f2a:	68b8      	ldr	r0, [r7, #8]
 8000f2c:	f007 faf2 	bl	8008514 <tcp_sent>
    tcp_server_send(tpcb, es);
 8000f30:	6979      	ldr	r1, [r7, #20]
 8000f32:	68b8      	ldr	r0, [r7, #8]
 8000f34:	f000 f810 	bl	8000f58 <tcp_server_send>
 8000f38:	e007      	b.n	8000f4a <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d103      	bne.n	8000f4a <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8000f42:	6979      	ldr	r1, [r7, #20]
 8000f44:	68b8      	ldr	r0, [r7, #8]
 8000f46:	f000 f85a 	bl	8000ffe <tcp_server_connection_close>
  }
  return ERR_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3718      	adds	r7, #24
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	08000f09 	.word	0x08000f09

08000f58 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8000f66:	e036      	b.n	8000fd6 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6859      	ldr	r1, [r3, #4]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	895a      	ldrh	r2, [r3, #10]
 8000f76:	2301      	movs	r3, #1
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f00a f9d9 	bl	800b330 <tcp_write>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8000f82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d11d      	bne.n	8000fc6 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	895b      	ldrh	r3, [r3, #10]
 8000f8e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f005 fcd1 	bl	800694c <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8000faa:	6938      	ldr	r0, [r7, #16]
 8000fac:	f005 fc2e 	bl	800680c <pbuf_free>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8000fb4:	7b7b      	ldrb	r3, [r7, #13]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f7      	beq.n	8000faa <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f006 fb96 	bl	80076f0 <tcp_recved>
 8000fc4:	e007      	b.n	8000fd6 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8000fc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fce:	d102      	bne.n	8000fd6 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10b      	bne.n	8000ff6 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d007      	beq.n	8000ff6 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	895a      	ldrh	r2, [r3, #10]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d9b8      	bls.n	8000f68 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f007 fa4e 	bl	80084ac <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f007 fa7e 	bl	8008514 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001018:	2100      	movs	r1, #0
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f007 fa58 	bl	80084d0 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001020:	2100      	movs	r1, #0
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f007 fa98 	bl	8008558 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001028:	2200      	movs	r2, #0
 800102a:	2100      	movs	r1, #0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f007 facd 	bl	80085cc <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d002      	beq.n	800103e <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8001038:	6838      	ldr	r0, [r7, #0]
 800103a:	f004 fa0b 	bl	8005454 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f006 f892 	bl	8007168 <tcp_close>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle (struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b0a0      	sub	sp, #128	; 0x80
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	8b1b      	ldrh	r3, [r3, #24]
 8001064:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8001068:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800106c:	4618      	mov	r0, r3
 800106e:	f00d fd9b 	bl	800eba8 <ip4addr_ntoa>
 8001072:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	781a      	ldrb	r2, [r3, #0]
 8001078:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800107a:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001082:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800108a:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2264      	movs	r2, #100	; 0x64
 8001092:	2100      	movs	r1, #0
 8001094:	4618      	mov	r0, r3
 8001096:	f00e fd6d 	bl	800fb74 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	6859      	ldr	r1, [r3, #4]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	891b      	ldrh	r3, [r3, #8]
 80010a6:	461a      	mov	r2, r3
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f00e fdbf 	bl	800fc30 <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 80010b2:	f107 030c 	add.w	r3, r7, #12
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f89a 	bl	80001f0 <strlen>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	f107 030c 	add.w	r3, r7, #12
 80010c4:	4413      	add	r3, r2
 80010c6:	4a1e      	ldr	r2, [pc, #120]	; (8001140 <tcp_server_handle+0xf4>)
 80010c8:	461d      	mov	r5, r3
 80010ca:	4614      	mov	r4, r2
 80010cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ce:	6028      	str	r0, [r5, #0]
 80010d0:	6069      	str	r1, [r5, #4]
 80010d2:	60aa      	str	r2, [r5, #8]
 80010d4:	60eb      	str	r3, [r5, #12]
 80010d6:	cc03      	ldmia	r4!, {r0, r1}
 80010d8:	6128      	str	r0, [r5, #16]
 80010da:	6169      	str	r1, [r5, #20]
 80010dc:	7823      	ldrb	r3, [r4, #0]
 80010de:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 80010e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	891a      	ldrh	r2, [r3, #8]
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	895b      	ldrh	r3, [r3, #10]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	b29c      	uxth	r4, r3
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f876 	bl	80001f0 <strlen>
 8001104:	4603      	mov	r3, r0
 8001106:	b29a      	uxth	r2, r3
 8001108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	4422      	add	r2, r4
 800110e:	b292      	uxth	r2, r2
 8001110:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff f86a 	bl	80001f0 <strlen>
 800111c:	4602      	mov	r2, r0
 800111e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	b292      	uxth	r2, r2
 8001124:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8001126:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff15 	bl	8000f58 <tcp_server_send>

	pbuf_free(es->p);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	4618      	mov	r0, r3
 8001134:	f005 fb6a 	bl	800680c <pbuf_free>

}
 8001138:	bf00      	nop
 800113a:	3780      	adds	r7, #128	; 0x80
 800113c:	46bd      	mov	sp, r7
 800113e:	bdb0      	pop	{r4, r5, r7, pc}
 8001140:	08010cb4 	.word	0x08010cb4

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	; 800117c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001148:	480d      	ldr	r0, [pc, #52]	; (8001180 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800114a:	490e      	ldr	r1, [pc, #56]	; (8001184 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001150:	e002      	b.n	8001158 <LoopCopyDataInit>

08001152 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001152:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001154:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001156:	3304      	adds	r3, #4

08001158 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001158:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800115c:	d3f9      	bcc.n	8001152 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115e:	4a0b      	ldr	r2, [pc, #44]	; (800118c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001160:	4c0b      	ldr	r4, [pc, #44]	; (8001190 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001164:	e001      	b.n	800116a <LoopFillZerobss>

08001166 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001166:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001168:	3204      	adds	r2, #4

0800116a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800116c:	d3fb      	bcc.n	8001166 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800116e:	f7ff fd6f 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001172:	f00e fcbd 	bl	800faf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fa15 	bl	80005a4 <main>
  bx  lr    
 800117a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800117c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001180:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001184:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001188:	08013910 	.word	0x08013910
  ldr r2, =_sbss
 800118c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001190:	200082c0 	.word	0x200082c0

08001194 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC_IRQHandler>

08001196 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <LAN8742_RegisterBusIO+0x28>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <LAN8742_RegisterBusIO+0x28>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <LAN8742_RegisterBusIO+0x28>
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d102      	bne.n	80011c4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80011be:	f04f 33ff 	mov.w	r3, #4294967295
 80011c2:	e014      	b.n	80011ee <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	691a      	ldr	r2, [r3, #16]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr

080011fa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b086      	sub	sp, #24
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	2300      	movs	r3, #0
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d17c      	bne.n	8001314 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
 8001232:	e01c      	b.n	800126e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f107 0208 	add.w	r2, r7, #8
 800123c:	2112      	movs	r1, #18
 800123e:	6978      	ldr	r0, [r7, #20]
 8001240:	4798      	blx	r3
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	da03      	bge.n	8001250 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001248:	f06f 0304 	mvn.w	r3, #4
 800124c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800124e:	e00b      	b.n	8001268 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f003 031f 	and.w	r3, r3, #31
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	429a      	cmp	r2, r3
 800125a:	d105      	bne.n	8001268 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
         break;
 8001266:	e005      	b.n	8001274 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	2b1f      	cmp	r3, #31
 8001272:	d9df      	bls.n	8001234 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b1f      	cmp	r3, #31
 800127a:	d902      	bls.n	8001282 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800127c:	f06f 0302 	mvn.w	r3, #2
 8001280:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d145      	bne.n	8001314 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6810      	ldr	r0, [r2, #0]
 8001290:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001294:	2100      	movs	r1, #0
 8001296:	4798      	blx	r3
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	db37      	blt.n	800130e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6810      	ldr	r0, [r2, #0]
 80012a6:	f107 0208 	add.w	r2, r7, #8
 80012aa:	2100      	movs	r1, #0
 80012ac:	4798      	blx	r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	db28      	blt.n	8001306 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4798      	blx	r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012be:	e01c      	b.n	80012fa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4798      	blx	r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	461a      	mov	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80012d2:	d80e      	bhi.n	80012f2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	687a      	ldr	r2, [r7, #4]
 80012da:	6810      	ldr	r0, [r2, #0]
 80012dc:	f107 0208 	add.w	r2, r7, #8
 80012e0:	2100      	movs	r1, #0
 80012e2:	4798      	blx	r3
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da07      	bge.n	80012fa <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012ea:	f06f 0304 	mvn.w	r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
                 break;
 80012f0:	e010      	b.n	8001314 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012f2:	f06f 0301 	mvn.w	r3, #1
 80012f6:	613b      	str	r3, [r7, #16]
               break;
 80012f8:	e00c      	b.n	8001314 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d1dd      	bne.n	80012c0 <LAN8742_Init+0xc6>
 8001304:	e006      	b.n	8001314 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001306:	f06f 0304 	mvn.w	r3, #4
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	e002      	b.n	8001314 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800130e:	f06f 0303 	mvn.w	r3, #3
 8001312:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d112      	bne.n	8001340 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4798      	blx	r3
 8001320:	4603      	mov	r3, r0
 8001322:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001324:	bf00      	nop
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	4798      	blx	r3
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001338:	d9f5      	bls.n	8001326 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001340:	693b      	ldr	r3, [r7, #16]
 }
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	6810      	ldr	r0, [r2, #0]
 800135e:	f107 020c 	add.w	r2, r7, #12
 8001362:	2101      	movs	r1, #1
 8001364:	4798      	blx	r3
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	da02      	bge.n	8001372 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800136c:	f06f 0304 	mvn.w	r3, #4
 8001370:	e06e      	b.n	8001450 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	6810      	ldr	r0, [r2, #0]
 800137a:	f107 020c 	add.w	r2, r7, #12
 800137e:	2101      	movs	r1, #1
 8001380:	4798      	blx	r3
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	da02      	bge.n	800138e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001388:	f06f 0304 	mvn.w	r3, #4
 800138c:	e060      	b.n	8001450 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f003 0304 	and.w	r3, r3, #4
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001398:	2301      	movs	r3, #1
 800139a:	e059      	b.n	8001450 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	695b      	ldr	r3, [r3, #20]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6810      	ldr	r0, [r2, #0]
 80013a4:	f107 020c 	add.w	r2, r7, #12
 80013a8:	2100      	movs	r1, #0
 80013aa:	4798      	blx	r3
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da02      	bge.n	80013b8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80013b2:	f06f 0304 	mvn.w	r3, #4
 80013b6:	e04b      	b.n	8001450 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d11b      	bne.n	80013fa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d006      	beq.n	80013da <LAN8742_GetLinkState+0x90>
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013d6:	2302      	movs	r3, #2
 80013d8:	e03a      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e033      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013f2:	2304      	movs	r3, #4
 80013f4:	e02c      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013f6:	2305      	movs	r3, #5
 80013f8:	e02a      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6810      	ldr	r0, [r2, #0]
 8001402:	f107 020c 	add.w	r2, r7, #12
 8001406:	211f      	movs	r1, #31
 8001408:	4798      	blx	r3
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	da02      	bge.n	8001416 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001410:	f06f 0304 	mvn.w	r3, #4
 8001414:	e01c      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d101      	bne.n	8001424 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001420:	2306      	movs	r3, #6
 8001422:	e015      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	f003 031c 	and.w	r3, r3, #28
 800142a:	2b18      	cmp	r3, #24
 800142c:	d101      	bne.n	8001432 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800142e:	2302      	movs	r3, #2
 8001430:	e00e      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f003 031c 	and.w	r3, r3, #28
 8001438:	2b08      	cmp	r3, #8
 800143a:	d101      	bne.n	8001440 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800143c:	2303      	movs	r3, #3
 800143e:	e007      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 031c 	and.w	r3, r3, #28
 8001446:	2b14      	cmp	r3, #20
 8001448:	d101      	bne.n	800144e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800144a:	2304      	movs	r3, #4
 800144c:	e000      	b.n	8001450 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800144e:	2305      	movs	r3, #5
    }				
  }
}
 8001450:	4618      	mov	r0, r3
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_Init+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_Init+0x40>)
 8001462:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001466:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001468:	4b0b      	ldr	r3, [pc, #44]	; (8001498 <HAL_Init+0x40>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0a      	ldr	r2, [pc, #40]	; (8001498 <HAL_Init+0x40>)
 800146e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001472:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001474:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_Init+0x40>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a07      	ldr	r2, [pc, #28]	; (8001498 <HAL_Init+0x40>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001480:	2003      	movs	r0, #3
 8001482:	f000 f94f 	bl	8001724 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001486:	2000      	movs	r0, #0
 8001488:	f000 f808 	bl	800149c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800148c:	f7ff fa18 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40023c00 	.word	0x40023c00

0800149c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x54>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_InitTick+0x58>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4619      	mov	r1, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f967 	bl	800178e <HAL_SYSTICK_Config>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00e      	b.n	80014e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2b0f      	cmp	r3, #15
 80014ce:	d80a      	bhi.n	80014e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d0:	2200      	movs	r2, #0
 80014d2:	6879      	ldr	r1, [r7, #4]
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f000 f92f 	bl	800173a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014dc:	4a06      	ldr	r2, [pc, #24]	; (80014f8 <HAL_InitTick+0x5c>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e000      	b.n	80014e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000008 	.word	0x20000008
 80014f8:	20000004 	.word	0x20000004

080014fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x20>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	461a      	mov	r2, r3
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <HAL_IncTick+0x24>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4413      	add	r3, r2
 800150c:	4a04      	ldr	r2, [pc, #16]	; (8001520 <HAL_IncTick+0x24>)
 800150e:	6013      	str	r3, [r2, #0]
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	20000008 	.word	0x20000008
 8001520:	20000600 	.word	0x20000600

08001524 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  return uwTick;
 8001528:	4b03      	ldr	r3, [pc, #12]	; (8001538 <HAL_GetTick+0x14>)
 800152a:	681b      	ldr	r3, [r3, #0]
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000600 	.word	0x20000600

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff ffee 	bl	8001524 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffde 	bl	8001524 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008

08001584 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4907      	ldr	r1, [pc, #28]	; (8001620 <__NVIC_EnableIRQ+0x38>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000e100 	.word	0xe000e100

08001624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	6039      	str	r1, [r7, #0]
 800162e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	db0a      	blt.n	800164e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	b2da      	uxtb	r2, r3
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <__NVIC_SetPriority+0x4c>)
 800163e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001642:	0112      	lsls	r2, r2, #4
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	440b      	add	r3, r1
 8001648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800164c:	e00a      	b.n	8001664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	b2da      	uxtb	r2, r3
 8001652:	4908      	ldr	r1, [pc, #32]	; (8001674 <__NVIC_SetPriority+0x50>)
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	3b04      	subs	r3, #4
 800165c:	0112      	lsls	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	440b      	add	r3, r1
 8001662:	761a      	strb	r2, [r3, #24]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000e100 	.word	0xe000e100
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001678:	b480      	push	{r7}
 800167a:	b089      	sub	sp, #36	; 0x24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f1c3 0307 	rsb	r3, r3, #7
 8001692:	2b04      	cmp	r3, #4
 8001694:	bf28      	it	cs
 8001696:	2304      	movcs	r3, #4
 8001698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3304      	adds	r3, #4
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d902      	bls.n	80016a8 <NVIC_EncodePriority+0x30>
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3b03      	subs	r3, #3
 80016a6:	e000      	b.n	80016aa <NVIC_EncodePriority+0x32>
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016ac:	f04f 32ff 	mov.w	r2, #4294967295
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43da      	mvns	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c0:	f04f 31ff 	mov.w	r1, #4294967295
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	43d9      	mvns	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	4313      	orrs	r3, r2
         );
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3724      	adds	r7, #36	; 0x24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f0:	d301      	bcc.n	80016f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016f2:	2301      	movs	r3, #1
 80016f4:	e00f      	b.n	8001716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016f6:	4a0a      	ldr	r2, [pc, #40]	; (8001720 <SysTick_Config+0x40>)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016fe:	210f      	movs	r1, #15
 8001700:	f04f 30ff 	mov.w	r0, #4294967295
 8001704:	f7ff ff8e 	bl	8001624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001708:	4b05      	ldr	r3, [pc, #20]	; (8001720 <SysTick_Config+0x40>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <SysTick_Config+0x40>)
 8001710:	2207      	movs	r2, #7
 8001712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	e000e010 	.word	0xe000e010

08001724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff ff29 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	60b9      	str	r1, [r7, #8]
 8001744:	607a      	str	r2, [r7, #4]
 8001746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800174c:	f7ff ff3e 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001750:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	6978      	ldr	r0, [r7, #20]
 8001758:	f7ff ff8e 	bl	8001678 <NVIC_EncodePriority>
 800175c:	4602      	mov	r2, r0
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff5d 	bl	8001624 <__NVIC_SetPriority>
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	4603      	mov	r3, r0
 800177a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	4618      	mov	r0, r3
 8001782:	f7ff ff31 	bl	80015e8 <__NVIC_EnableIRQ>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b082      	sub	sp, #8
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f7ff ffa2 	bl	80016e0 <SysTick_Config>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
	...

080017a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e06c      	b.n	8001894 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d106      	bne.n	80017d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2223      	movs	r2, #35	; 0x23
 80017c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f003 f9ef 	bl	8004bb0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60bb      	str	r3, [r7, #8]
 80017d6:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_ETH_Init+0xf4>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a30      	ldr	r2, [pc, #192]	; (800189c <HAL_ETH_Init+0xf4>)
 80017dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_ETH_Init+0xf4>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017ee:	4b2c      	ldr	r3, [pc, #176]	; (80018a0 <HAL_ETH_Init+0xf8>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <HAL_ETH_Init+0xf8>)
 80017f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017fa:	4b29      	ldr	r3, [pc, #164]	; (80018a0 <HAL_ETH_Init+0xf8>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <HAL_ETH_Init+0xf8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_ETH_Init+0xf8>)
 800180a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001822:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001824:	f7ff fe7e 	bl	8001524 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800182a:	e011      	b.n	8001850 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800182c:	f7ff fe7a 	bl	8001524 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800183a:	d909      	bls.n	8001850 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	22e0      	movs	r2, #224	; 0xe0
 8001848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e021      	b.n	8001894 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1e4      	bne.n	800182c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fee4 	bl	8002630 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 ff8b 	bl	8002784 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 ffe1 	bl	8002836 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	461a      	mov	r2, r3
 800187a:	2100      	movs	r1, #0
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 ff49 	bl	8002714 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2210      	movs	r2, #16
 800188e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40013800 	.word	0x40013800

080018a4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b2:	2b10      	cmp	r3, #16
 80018b4:	d150      	bne.n	8001958 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2223      	movs	r2, #35	; 0x23
 80018ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2204      	movs	r2, #4
 80018c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f000 f9fd 	bl	8001cc4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f042 0208 	orr.w	r2, r2, #8
 80018d8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff fe2a 	bl	800153c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0204 	orr.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001908:	2001      	movs	r0, #1
 800190a:	f7ff fe17 	bl	800153c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f000 fd2a 	bl	8002370 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001932:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800194a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2223      	movs	r2, #35	; 0x23
 8001950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	e000      	b.n	800195a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
  }
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001970:	2b23      	cmp	r3, #35	; 0x23
 8001972:	d14a      	bne.n	8001a0a <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2223      	movs	r2, #35	; 0x23
 8001978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800198e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001992:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	f023 0302 	bic.w	r3, r3, #2
 80019a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019aa:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0204 	bic.w	r2, r2, #4
 80019ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff fdb9 	bl	800153c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 fccc 	bl	8002370 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 0208 	bic.w	r2, r2, #8
 80019e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fda3 	bl	800153c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2210      	movs	r2, #16
 8001a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
  }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d109      	bne.n	8001a3a <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a2c:	f043 0201 	orr.w	r2, r3, #1
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e07c      	b.n	8001b34 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a40:	2b23      	cmp	r3, #35	; 0x23
 8001a42:	d176      	bne.n	8001b32 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001a44:	2200      	movs	r2, #0
 8001a46:	68b9      	ldr	r1, [r7, #8]
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 ff61 	bl	8002910 <ETH_Prepare_Tx_Descriptors>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5a:	f043 0202 	orr.w	r2, r3, #2
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e065      	b.n	8001b34 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a68:	f3bf 8f4f 	dsb	sy
}
 8001a6c:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3206      	adds	r2, #6
 8001a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a80:	1c5a      	adds	r2, r3, #1
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d904      	bls.n	8001a98 <HAL_ETH_Transmit+0x84>
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	1f1a      	subs	r2, r3, #4
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3106      	adds	r1, #6
 8001aa4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001aa8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aac:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8001aae:	f7ff fd39 	bl	8001524 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001ab4:	e037      	b.n	8001b26 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001abe:	695b      	ldr	r3, [r3, #20]
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d011      	beq.n	8001aec <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ace:	f043 0208 	orr.w	r2, r3, #8
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae0:	695a      	ldr	r2, [r3, #20]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e023      	b.n	8001b34 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af2:	d018      	beq.n	8001b26 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001af4:	f7ff fd16 	bl	8001524 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d302      	bcc.n	8001b0a <HAL_ETH_Transmit+0xf6>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d10d      	bne.n	8001b26 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b10:	f043 0204 	orr.w	r2, r3, #4
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001b20:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e006      	b.n	8001b34 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	dbc3      	blt.n	8001ab6 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
  }
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b088      	sub	sp, #32
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e0a8      	b.n	8001cba <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6e:	2b23      	cmp	r3, #35	; 0x23
 8001b70:	d001      	beq.n	8001b76 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0a1      	b.n	8001cba <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	3212      	adds	r2, #18
 8001b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b8c:	f1c3 0304 	rsb	r3, r3, #4
 8001b90:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b92:	e06a      	b.n	8001c6a <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d007      	beq.n	8001bb0 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	699a      	ldr	r2, [r3, #24]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	69da      	ldr	r2, [r3, #28]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <HAL_ETH_ReadData+0x88>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d040      	beq.n	8001c46 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d00c      	beq.n	8001c08 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bf8:	3b04      	subs	r3, #4
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c04:	2301      	movs	r3, #1
 8001c06:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c20:	461a      	mov	r2, r3
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	f003 f99b 	bl	8004f60 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	441a      	add	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2200      	movs	r2, #0
 8001c44:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	61fb      	str	r3, [r7, #28]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	2b03      	cmp	r3, #3
 8001c50:	d902      	bls.n	8001c58 <HAL_ETH_ReadData+0x11c>
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	3b04      	subs	r3, #4
 8001c56:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69fa      	ldr	r2, [r7, #28]
 8001c5c:	3212      	adds	r2, #18
 8001c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c62:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	3301      	adds	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	db06      	blt.n	8001c80 <HAL_ETH_ReadData+0x144>
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d202      	bcs.n	8001c80 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d089      	beq.n	8001b94 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	441a      	add	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 f815 	bl	8001cc4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d108      	bne.n	8001cb8 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3720      	adds	r7, #32
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
	...

08001cc4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b088      	sub	sp, #32
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	3212      	adds	r2, #18
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001cec:	e040      	b.n	8001d70 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d112      	bne.n	8001d1c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 f900 	bl	8004f00 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d102      	bne.n	8001d0c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	74fb      	strb	r3, [r7, #19]
 8001d0a:	e007      	b.n	8001d1c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	461a      	mov	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d1c:	7cfb      	ldrb	r3, [r7, #19]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d026      	beq.n	8001d70 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d103      	bne.n	8001d32 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <ETH_UpdateDescriptor+0xe4>)
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	e003      	b.n	8001d3a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001d38:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d3a:	f3bf 8f5f 	dmb	sy
}
 8001d3e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d902      	bls.n	8001d5e <ETH_UpdateDescriptor+0x9a>
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	3b04      	subs	r3, #4
 8001d5c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	3212      	adds	r2, #18
 8001d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d68:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <ETH_UpdateDescriptor+0xb8>
 8001d76:	7cfb      	ldrb	r3, [r7, #19]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1b8      	bne.n	8001cee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d00c      	beq.n	8001da0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001da0:	bf00      	nop
 8001da2:	3720      	adds	r7, #32
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	800045f8 	.word	0x800045f8

08001dac <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc2:	2b40      	cmp	r3, #64	; 0x40
 8001dc4:	d112      	bne.n	8001dec <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dce:	69db      	ldr	r3, [r3, #28]
 8001dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd4:	2b40      	cmp	r3, #64	; 0x40
 8001dd6:	d109      	bne.n	8001dec <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de0:	461a      	mov	r2, r3
 8001de2:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_ETH_IRQHandler+0x178>)
 8001de4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f000 f8ac 	bl	8001f44 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d113      	bne.n	8001e26 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d10a      	bne.n	8001e26 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e18:	461a      	mov	r2, r3
 8001e1a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001e1e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f000 f885 	bl	8001f30 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e38:	d14c      	bne.n	8001ed4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e42:	69db      	ldr	r3, [r3, #28]
 8001e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4c:	d142      	bne.n	8001ed4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e54:	f043 0208 	orr.w	r2, r3, #8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e70:	d11a      	bne.n	8001ea8 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	; (8001f28 <HAL_ETH_IRQHandler+0x17c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001e98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e9c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	22e0      	movs	r2, #224	; 0xe0
 8001ea2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001ea6:	e012      	b.n	8001ece <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	f248 6380 	movw	r3, #34432	; 0x8680
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	687a      	ldr	r2, [r7, #4]
 8001eba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f248 6380 	movw	r3, #34432	; 0x8680
 8001ecc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f842 	bl	8001f58 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d10e      	bne.n	8001f00 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f83a 	bl	8001f6c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2200      	movs	r2, #0
 8001efc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001f00:	4b0a      	ldr	r3, [pc, #40]	; (8001f2c <HAL_ETH_IRQHandler+0x180>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <HAL_ETH_IRQHandler+0x180>)
 8001f0e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f12:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f833 	bl	8001f80 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	00010040 	.word	0x00010040
 8001f28:	007e2000 	.word	0x007e2000
 8001f2c:	40013c00 	.word	0x40013c00

08001f30 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f003 031c 	and.w	r3, r3, #28
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	02db      	lsls	r3, r3, #11
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	019b      	lsls	r3, r3, #6
 8001fc2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001fe4:	f7ff fa9e 	bl	8001524 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001fea:	e00d      	b.n	8002008 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001fec:	f7ff fa9a 	bl	8001524 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffa:	d301      	bcc.n	8002000 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e010      	b.n	8002022 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1ec      	bne.n	8001fec <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b086      	sub	sp, #24
 800202e:	af00      	add	r7, sp, #0
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 031c 	and.w	r3, r3, #28
 8002046:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	02db      	lsls	r3, r3, #11
 800204c:	b29b      	uxth	r3, r3
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	019b      	lsls	r3, r3, #6
 8002058:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002084:	f7ff fa4e 	bl	8001524 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800208a:	e00d      	b.n	80020a8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800208c:	f7ff fa4a 	bl	8001524 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800209a:	d301      	bcc.n	80020a0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e009      	b.n	80020b4 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ec      	bne.n	800208c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d9      	b.n	8002284 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800213a:	2b00      	cmp	r3, #0
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	bf14      	ite	ne
 8002158:	2301      	movne	r3, #1
 800215a:	2300      	moveq	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf14      	ite	ne
 80021ea:	2301      	movne	r3, #1
 80021ec:	2300      	moveq	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2db      	uxtb	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	0c1b      	lsrs	r3, r3, #16
 8002244:	b29a      	uxth	r2, r3
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf14      	ite	ne
 8002258:	2301      	movne	r3, #1
 800225a:	2300      	moveq	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	461a      	mov	r2, r3
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e00b      	b.n	80022bc <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d105      	bne.n	80022ba <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80022ae:	6839      	ldr	r1, [r7, #0]
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f883 	bl	80023bc <ETH_SetMACConfig>

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f023 031c 	bic.w	r3, r3, #28
 80022da:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80022dc:	f001 fb94 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 80022e0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_ETH_SetMDIOClockRange+0x98>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d908      	bls.n	80022fc <HAL_ETH_SetMDIOClockRange+0x38>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d804      	bhi.n	80022fc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	e027      	b.n	800234c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4a18      	ldr	r2, [pc, #96]	; (8002360 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d908      	bls.n	8002316 <HAL_ETH_SetMDIOClockRange+0x52>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	4a17      	ldr	r2, [pc, #92]	; (8002364 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d204      	bcs.n	8002316 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f043 030c 	orr.w	r3, r3, #12
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	e01a      	b.n	800234c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	4a12      	ldr	r2, [pc, #72]	; (8002364 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d303      	bcc.n	8002326 <HAL_ETH_SetMDIOClockRange+0x62>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d911      	bls.n	800234a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	4a0f      	ldr	r2, [pc, #60]	; (8002368 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d908      	bls.n	8002340 <HAL_ETH_SetMDIOClockRange+0x7c>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d804      	bhi.n	8002340 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f043 0304 	orr.w	r3, r3, #4
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	e005      	b.n	800234c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f043 0310 	orr.w	r3, r3, #16
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e000      	b.n	800234c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800234a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	611a      	str	r2, [r3, #16]
}
 8002354:	bf00      	nop
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	01312cff 	.word	0x01312cff
 8002360:	02160ebf 	.word	0x02160ebf
 8002364:	03938700 	.word	0x03938700
 8002368:	05f5e0ff 	.word	0x05f5e0ff
 800236c:	08f0d17f 	.word	0x08f0d17f

08002370 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002392:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f7ff f8cb 	bl	800153c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023b0:	6193      	str	r3, [r2, #24]
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	4b51      	ldr	r3, [pc, #324]	; (8002518 <ETH_SetMACConfig+0x15c>)
 80023d2:	4013      	ands	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	7c1b      	ldrb	r3, [r3, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <ETH_SetMACConfig+0x28>
 80023de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80023e2:	e000      	b.n	80023e6 <ETH_SetMACConfig+0x2a>
 80023e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	7c5b      	ldrb	r3, [r3, #17]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <ETH_SetMACConfig+0x38>
 80023ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023f2:	e000      	b.n	80023f6 <ETH_SetMACConfig+0x3a>
 80023f4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80023f6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80023fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	7fdb      	ldrb	r3, [r3, #31]
 8002402:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002404:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800240a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	7f92      	ldrb	r2, [r2, #30]
 8002410:	2a00      	cmp	r2, #0
 8002412:	d102      	bne.n	800241a <ETH_SetMACConfig+0x5e>
 8002414:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002418:	e000      	b.n	800241c <ETH_SetMACConfig+0x60>
 800241a:	2200      	movs	r2, #0
                        macconf->Speed |
 800241c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	7f1b      	ldrb	r3, [r3, #28]
 8002422:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002424:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800242a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	791b      	ldrb	r3, [r3, #4]
 8002430:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002432:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	f892 2020 	ldrb.w	r2, [r2, #32]
 800243a:	2a00      	cmp	r2, #0
 800243c:	d102      	bne.n	8002444 <ETH_SetMACConfig+0x88>
 800243e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002442:	e000      	b.n	8002446 <ETH_SetMACConfig+0x8a>
 8002444:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002446:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	7bdb      	ldrb	r3, [r3, #15]
 800244c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800244e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002454:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800245c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800245e:	4313      	orrs	r3, r2
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	4313      	orrs	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff f860 	bl	800153c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80024a2:	2a00      	cmp	r2, #0
 80024a4:	d101      	bne.n	80024aa <ETH_SetMACConfig+0xee>
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	e000      	b.n	80024ac <ETH_SetMACConfig+0xf0>
 80024aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024ac:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80024b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80024ba:	2a01      	cmp	r2, #1
 80024bc:	d101      	bne.n	80024c2 <ETH_SetMACConfig+0x106>
 80024be:	2208      	movs	r2, #8
 80024c0:	e000      	b.n	80024c4 <ETH_SetMACConfig+0x108>
 80024c2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80024c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80024cc:	2a01      	cmp	r2, #1
 80024ce:	d101      	bne.n	80024d4 <ETH_SetMACConfig+0x118>
 80024d0:	2204      	movs	r2, #4
 80024d2:	e000      	b.n	80024d6 <ETH_SetMACConfig+0x11a>
 80024d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80024d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80024de:	2a01      	cmp	r2, #1
 80024e0:	d101      	bne.n	80024e6 <ETH_SetMACConfig+0x12a>
 80024e2:	2202      	movs	r2, #2
 80024e4:	e000      	b.n	80024e8 <ETH_SetMACConfig+0x12c>
 80024e6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80024e8:	4313      	orrs	r3, r2
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002500:	2001      	movs	r0, #1
 8002502:	f7ff f81b 	bl	800153c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	619a      	str	r2, [r3, #24]
}
 800250e:	bf00      	nop
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	ff20810f 	.word	0xff20810f

0800251c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	4b3d      	ldr	r3, [pc, #244]	; (800262c <ETH_SetDMAConfig+0x110>)
 8002536:	4013      	ands	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	7b1b      	ldrb	r3, [r3, #12]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d102      	bne.n	8002548 <ETH_SetDMAConfig+0x2c>
 8002542:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002546:	e000      	b.n	800254a <ETH_SetDMAConfig+0x2e>
 8002548:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	7b5b      	ldrb	r3, [r3, #13]
 800254e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002550:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	7f52      	ldrb	r2, [r2, #29]
 8002556:	2a00      	cmp	r2, #0
 8002558:	d102      	bne.n	8002560 <ETH_SetDMAConfig+0x44>
 800255a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800255e:	e000      	b.n	8002562 <ETH_SetDMAConfig+0x46>
 8002560:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002562:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	7b9b      	ldrb	r3, [r3, #14]
 8002568:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800256a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002570:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	7f1b      	ldrb	r3, [r3, #28]
 8002576:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002578:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	7f9b      	ldrb	r3, [r3, #30]
 800257e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002580:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002586:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800258e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002590:	4313      	orrs	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	4313      	orrs	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025a0:	461a      	mov	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b2:	2001      	movs	r0, #1
 80025b4:	f7fe ffc2 	bl	800153c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c0:	461a      	mov	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	791b      	ldrb	r3, [r3, #4]
 80025ca:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025d0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80025d6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80025dc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025e4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80025e6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ec:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80025ee:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80025f4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6812      	ldr	r2, [r2, #0]
 80025fa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002602:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe ff93 	bl	800153c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6013      	str	r3, [r2, #0]
}
 8002624:	bf00      	nop
 8002626:	3710      	adds	r7, #16
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	f8de3f23 	.word	0xf8de3f23

08002630 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b0a6      	sub	sp, #152	; 0x98
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800263e:	2301      	movs	r3, #1
 8002640:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002644:	2300      	movs	r3, #0
 8002646:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002654:	2300      	movs	r3, #0
 8002656:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800265a:	2301      	movs	r3, #1
 800265c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002660:	2300      	movs	r3, #0
 8002662:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800266c:	2300      	movs	r3, #0
 800266e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002676:	2300      	movs	r3, #0
 8002678:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002680:	2300      	movs	r3, #0
 8002682:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002692:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002696:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800269c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026a8:	4619      	mov	r1, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fe86 	bl	80023bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80026b0:	2301      	movs	r3, #1
 80026b2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80026b4:	2301      	movs	r3, #1
 80026b6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80026be:	2301      	movs	r3, #1
 80026c0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026dc:	2301      	movs	r3, #1
 80026de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026e4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80026ea:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80026f2:	2301      	movs	r3, #1
 80026f4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002700:	f107 0308 	add.w	r3, r7, #8
 8002704:	4619      	mov	r1, r3
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ff08 	bl	800251c <ETH_SetDMAConfig>
}
 800270c:	bf00      	nop
 800270e:	3798      	adds	r7, #152	; 0x98
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002714:	b480      	push	{r7}
 8002716:	b087      	sub	sp, #28
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3305      	adds	r3, #5
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	021b      	lsls	r3, r3, #8
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	3204      	adds	r2, #4
 800272c:	7812      	ldrb	r2, [r2, #0]
 800272e:	4313      	orrs	r3, r2
 8002730:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002732:	68ba      	ldr	r2, [r7, #8]
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <ETH_MACAddressConfig+0x68>)
 8002736:	4413      	add	r3, r2
 8002738:	461a      	mov	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3303      	adds	r3, #3
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	061a      	lsls	r2, r3, #24
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3302      	adds	r3, #2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3301      	adds	r3, #1
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	4313      	orrs	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002762:	68ba      	ldr	r2, [r7, #8]
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <ETH_MACAddressConfig+0x6c>)
 8002766:	4413      	add	r3, r2
 8002768:	461a      	mov	r2, r3
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	6013      	str	r3, [r2, #0]
}
 800276e:	bf00      	nop
 8002770:	371c      	adds	r7, #28
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40028040 	.word	0x40028040
 8002780:	40028044 	.word	0x40028044

08002784 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	e03e      	b.n	8002810 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68d9      	ldr	r1, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4613      	mov	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4413      	add	r3, r2
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	440b      	add	r3, r1
 80027a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	2200      	movs	r2, #0
 80027b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2200      	movs	r2, #0
 80027ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	3206      	adds	r2, #6
 80027c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d80c      	bhi.n	80027f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68d9      	ldr	r1, [r3, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	4613      	mov	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4413      	add	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	440b      	add	r3, r1
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	e004      	b.n	80027fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	461a      	mov	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	3301      	adds	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d9bd      	bls.n	8002792 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	68da      	ldr	r2, [r3, #12]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002828:	611a      	str	r2, [r3, #16]
}
 800282a:	bf00      	nop
 800282c:	3714      	adds	r7, #20
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e046      	b.n	80028d2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	440b      	add	r3, r1
 8002854:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2200      	movs	r2, #0
 8002878:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002880:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002888:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	3212      	adds	r2, #18
 800289e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d80c      	bhi.n	80028c2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6919      	ldr	r1, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	440b      	add	r3, r1
 80028ba:	461a      	mov	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	60da      	str	r2, [r3, #12]
 80028c0:	e004      	b.n	80028cc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	461a      	mov	r2, r3
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	3301      	adds	r3, #1
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b03      	cmp	r3, #3
 80028d6:	d9b5      	bls.n	8002844 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002902:	60da      	str	r2, [r3, #12]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002910:	b480      	push	{r7}
 8002912:	b08d      	sub	sp, #52	; 0x34
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3318      	adds	r3, #24
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800292e:	2300      	movs	r3, #0
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800293a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800294e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002952:	d007      	beq.n	8002964 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	3304      	adds	r3, #4
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002964:	2302      	movs	r3, #2
 8002966:	e103      	b.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002980:	f023 031f 	bic.w	r3, r3, #31
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	6852      	ldr	r2, [r2, #4]
 8002988:	431a      	orrs	r2, r3
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d008      	beq.n	80029ac <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0320 	and.w	r3, r3, #32
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0304 	and.w	r3, r3, #4
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d005      	beq.n	80029e2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80029ee:	f3bf 8f5f 	dmb	sy
}
 80029f2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029fc:	6a3b      	ldr	r3, [r7, #32]
 80029fe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a00:	e084      	b.n	8002b0c <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	e005      	b.n	8002a2e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	3301      	adds	r3, #1
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d902      	bls.n	8002a40 <ETH_Prepare_Tx_Descriptors+0x130>
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	3b04      	subs	r3, #4
 8002a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a48:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002a56:	6a3b      	ldr	r3, [r7, #32]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a62:	d007      	beq.n	8002a74 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a68:	3304      	adds	r3, #4
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	4413      	add	r3, r2
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d029      	beq.n	8002ac8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a80:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a86:	e019      	b.n	8002abc <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002a88:	f3bf 8f5f 	dmb	sy
}
 8002a8c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d902      	bls.n	8002aac <ETH_Prepare_Tx_Descriptors+0x19c>
 8002aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa8:	3b04      	subs	r3, #4
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab8:	3301      	adds	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d3e1      	bcc.n	8002a88 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e053      	b.n	8002b70 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aca:	3301      	adds	r3, #1
 8002acc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002ae6:	f023 031f 	bic.w	r3, r3, #31
 8002aea:	69fa      	ldr	r2, [r7, #28]
 8002aec:	6852      	ldr	r2, [r2, #4]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002afa:	f3bf 8f5f 	dmb	sy
}
 8002afe:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b00:	6a3b      	ldr	r3, [r7, #32]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f47f af76 	bne.w	8002a02 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	e005      	b.n	8002b36 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b46:	6979      	ldr	r1, [r7, #20]
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	440b      	add	r3, r1
 8002b50:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b56:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b58:	b672      	cpsid	i
}
 8002b5a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	1c5a      	adds	r2, r3, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002b6a:	b662      	cpsie	i
}
 8002b6c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3734      	adds	r7, #52	; 0x34
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	; 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b92:	2300      	movs	r3, #0
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	e177      	b.n	8002e88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b98:	2201      	movs	r2, #1
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	f040 8166 	bne.w	8002e82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d005      	beq.n	8002bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d130      	bne.n	8002c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c04:	2201      	movs	r2, #1
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 0201 	and.w	r2, r3, #1
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 0303 	and.w	r3, r3, #3
 8002c38:	2b03      	cmp	r3, #3
 8002c3a:	d017      	beq.n	8002c6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	2203      	movs	r2, #3
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d123      	bne.n	8002cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	08da      	lsrs	r2, r3, #3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3208      	adds	r2, #8
 8002c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	220f      	movs	r2, #15
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	69ba      	ldr	r2, [r7, #24]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	08da      	lsrs	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3208      	adds	r2, #8
 8002cba:	69b9      	ldr	r1, [r7, #24]
 8002cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	2203      	movs	r2, #3
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0203 	and.w	r2, r3, #3
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80c0 	beq.w	8002e82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b66      	ldr	r3, [pc, #408]	; (8002ea0 <HAL_GPIO_Init+0x324>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a65      	ldr	r2, [pc, #404]	; (8002ea0 <HAL_GPIO_Init+0x324>)
 8002d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b63      	ldr	r3, [pc, #396]	; (8002ea0 <HAL_GPIO_Init+0x324>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1e:	4a61      	ldr	r2, [pc, #388]	; (8002ea4 <HAL_GPIO_Init+0x328>)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	220f      	movs	r2, #15
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a58      	ldr	r2, [pc, #352]	; (8002ea8 <HAL_GPIO_Init+0x32c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d037      	beq.n	8002dba <HAL_GPIO_Init+0x23e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a57      	ldr	r2, [pc, #348]	; (8002eac <HAL_GPIO_Init+0x330>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d031      	beq.n	8002db6 <HAL_GPIO_Init+0x23a>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a56      	ldr	r2, [pc, #344]	; (8002eb0 <HAL_GPIO_Init+0x334>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d02b      	beq.n	8002db2 <HAL_GPIO_Init+0x236>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a55      	ldr	r2, [pc, #340]	; (8002eb4 <HAL_GPIO_Init+0x338>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d025      	beq.n	8002dae <HAL_GPIO_Init+0x232>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a54      	ldr	r2, [pc, #336]	; (8002eb8 <HAL_GPIO_Init+0x33c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01f      	beq.n	8002daa <HAL_GPIO_Init+0x22e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a53      	ldr	r2, [pc, #332]	; (8002ebc <HAL_GPIO_Init+0x340>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d019      	beq.n	8002da6 <HAL_GPIO_Init+0x22a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a52      	ldr	r2, [pc, #328]	; (8002ec0 <HAL_GPIO_Init+0x344>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_GPIO_Init+0x226>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a51      	ldr	r2, [pc, #324]	; (8002ec4 <HAL_GPIO_Init+0x348>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00d      	beq.n	8002d9e <HAL_GPIO_Init+0x222>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a50      	ldr	r2, [pc, #320]	; (8002ec8 <HAL_GPIO_Init+0x34c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d007      	beq.n	8002d9a <HAL_GPIO_Init+0x21e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	; (8002ecc <HAL_GPIO_Init+0x350>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d101      	bne.n	8002d96 <HAL_GPIO_Init+0x21a>
 8002d92:	2309      	movs	r3, #9
 8002d94:	e012      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002d96:	230a      	movs	r3, #10
 8002d98:	e010      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	e00e      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002d9e:	2307      	movs	r3, #7
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002da2:	2306      	movs	r3, #6
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x240>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4935      	ldr	r1, [pc, #212]	; (8002ea4 <HAL_GPIO_Init+0x328>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dda:	4b3d      	ldr	r3, [pc, #244]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dfe:	4a34      	ldr	r2, [pc, #208]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e04:	4b32      	ldr	r3, [pc, #200]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e28:	4a29      	ldr	r2, [pc, #164]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e2e:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e52:	4a1f      	ldr	r2, [pc, #124]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e7c:	4a14      	ldr	r2, [pc, #80]	; (8002ed0 <HAL_GPIO_Init+0x354>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f ae84 	bls.w	8002b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40013800 	.word	0x40013800
 8002ea8:	40020000 	.word	0x40020000
 8002eac:	40020400 	.word	0x40020400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	40020c00 	.word	0x40020c00
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40021400 	.word	0x40021400
 8002ec0:	40021800 	.word	0x40021800
 8002ec4:	40021c00 	.word	0x40021c00
 8002ec8:	40022000 	.word	0x40022000
 8002ecc:	40022400 	.word	0x40022400
 8002ed0:	40013c00 	.word	0x40013c00

08002ed4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	460b      	mov	r3, r1
 8002ede:	807b      	strh	r3, [r7, #2]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ee4:	787b      	ldrb	r3, [r7, #1]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ef0:	e003      	b.n	8002efa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	041a      	lsls	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	619a      	str	r2, [r3, #24]
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f08:	b08f      	sub	sp, #60	; 0x3c
 8002f0a:	af0a      	add	r7, sp, #40	; 0x28
 8002f0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e10f      	b.n	8003138 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d106      	bne.n	8002f38 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fd34 	bl	80009a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 f8ad 	bl	80040b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	687e      	ldr	r6, [r7, #4]
 8002f64:	466d      	mov	r5, sp
 8002f66:	f106 0410 	add.w	r4, r6, #16
 8002f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f7a:	1d33      	adds	r3, r6, #4
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	f001 f838 	bl	8003ff4 <USB_CoreInit>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d005      	beq.n	8002f96 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0d0      	b.n	8003138 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 f89b 	bl	80040d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
 8002fa6:	e04a      	b.n	800303e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	333d      	adds	r3, #61	; 0x3d
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002fbc:	7bfa      	ldrb	r2, [r7, #15]
 8002fbe:	6879      	ldr	r1, [r7, #4]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	333c      	adds	r3, #60	; 0x3c
 8002fcc:	7bfa      	ldrb	r2, [r7, #15]
 8002fce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002fd0:	7bfa      	ldrb	r2, [r7, #15]
 8002fd2:	7bfb      	ldrb	r3, [r7, #15]
 8002fd4:	b298      	uxth	r0, r3
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3344      	adds	r3, #68	; 0x44
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002fe8:	7bfa      	ldrb	r2, [r7, #15]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3340      	adds	r3, #64	; 0x40
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ffc:	7bfa      	ldrb	r2, [r7, #15]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3348      	adds	r3, #72	; 0x48
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003010:	7bfa      	ldrb	r2, [r7, #15]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	; 0x4c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003024:	7bfa      	ldrb	r2, [r7, #15]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	3354      	adds	r3, #84	; 0x54
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	7bfb      	ldrb	r3, [r7, #15]
 800303a:	3301      	adds	r3, #1
 800303c:	73fb      	strb	r3, [r7, #15]
 800303e:	7bfa      	ldrb	r2, [r7, #15]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	429a      	cmp	r2, r3
 8003046:	d3af      	bcc.n	8002fa8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003048:	2300      	movs	r3, #0
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e044      	b.n	80030d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800304e:	7bfa      	ldrb	r2, [r7, #15]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003076:	7bfa      	ldrb	r2, [r7, #15]
 8003078:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800307a:	7bfa      	ldrb	r2, [r7, #15]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	00db      	lsls	r3, r3, #3
 8003082:	4413      	add	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003090:	7bfa      	ldrb	r2, [r7, #15]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030a6:	7bfa      	ldrb	r2, [r7, #15]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030bc:	7bfa      	ldrb	r2, [r7, #15]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030d2:	7bfb      	ldrb	r3, [r7, #15]
 80030d4:	3301      	adds	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
 80030d8:	7bfa      	ldrb	r2, [r7, #15]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d3b5      	bcc.n	800304e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	687e      	ldr	r6, [r7, #4]
 80030ea:	466d      	mov	r5, sp
 80030ec:	f106 0410 	add.w	r4, r6, #16
 80030f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003100:	1d33      	adds	r3, r6, #4
 8003102:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003104:	6838      	ldr	r0, [r7, #0]
 8003106:	f001 f833 	bl	8004170 <USB_DevInit>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2202      	movs	r2, #2
 8003114:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e00d      	b.n	8003138 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f001 f9fe 	bl	8004532 <USB_DevDisconnect>

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003140 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e267      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d075      	beq.n	800324a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800315e:	4b88      	ldr	r3, [pc, #544]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b04      	cmp	r3, #4
 8003168:	d00c      	beq.n	8003184 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800316a:	4b85      	ldr	r3, [pc, #532]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003172:	2b08      	cmp	r3, #8
 8003174:	d112      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003176:	4b82      	ldr	r3, [pc, #520]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003182:	d10b      	bne.n	800319c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b7e      	ldr	r3, [pc, #504]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d05b      	beq.n	8003248 <HAL_RCC_OscConfig+0x108>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d157      	bne.n	8003248 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e242      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x74>
 80031a6:	4b76      	ldr	r3, [pc, #472]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a75      	ldr	r2, [pc, #468]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e01d      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x98>
 80031be:	4b70      	ldr	r3, [pc, #448]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a6f      	ldr	r2, [pc, #444]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b6d      	ldr	r3, [pc, #436]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a6c      	ldr	r2, [pc, #432]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e00b      	b.n	80031f0 <HAL_RCC_OscConfig+0xb0>
 80031d8:	4b69      	ldr	r3, [pc, #420]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a68      	ldr	r2, [pc, #416]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031e2:	6013      	str	r3, [r2, #0]
 80031e4:	4b66      	ldr	r3, [pc, #408]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80031ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f8:	f7fe f994 	bl	8001524 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003200:	f7fe f990 	bl	8001524 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b64      	cmp	r3, #100	; 0x64
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e207      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003212:	4b5b      	ldr	r3, [pc, #364]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0xc0>
 800321e:	e014      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe f980 	bl	8001524 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003228:	f7fe f97c 	bl	8001524 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b64      	cmp	r3, #100	; 0x64
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e1f3      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323a:	4b51      	ldr	r3, [pc, #324]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0xe8>
 8003246:	e000      	b.n	800324a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d063      	beq.n	800331e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003256:	4b4a      	ldr	r3, [pc, #296]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00b      	beq.n	800327a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b47      	ldr	r3, [pc, #284]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326a:	2b08      	cmp	r3, #8
 800326c:	d11c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800326e:	4b44      	ldr	r3, [pc, #272]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327a:	4b41      	ldr	r3, [pc, #260]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d005      	beq.n	8003292 <HAL_RCC_OscConfig+0x152>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d001      	beq.n	8003292 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e1c7      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003292:	4b3b      	ldr	r3, [pc, #236]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4937      	ldr	r1, [pc, #220]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032a6:	e03a      	b.n	800331e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d020      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032b0:	4b34      	ldr	r3, [pc, #208]	; (8003384 <HAL_RCC_OscConfig+0x244>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b6:	f7fe f935 	bl	8001524 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032be:	f7fe f931 	bl	8001524 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e1a8      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d0:	4b2b      	ldr	r3, [pc, #172]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b28      	ldr	r3, [pc, #160]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	4925      	ldr	r1, [pc, #148]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
 80032f0:	e015      	b.n	800331e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCC_OscConfig+0x244>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f8:	f7fe f914 	bl	8001524 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003300:	f7fe f910 	bl	8001524 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b02      	cmp	r3, #2
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e187      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003312:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d036      	beq.n	8003398 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_RCC_OscConfig+0x248>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe f8f4 	bl	8001524 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003340:	f7fe f8f0 	bl	8001524 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e167      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003352:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_RCC_OscConfig+0x240>)
 8003354:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f0      	beq.n	8003340 <HAL_RCC_OscConfig+0x200>
 800335e:	e01b      	b.n	8003398 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <HAL_RCC_OscConfig+0x248>)
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003366:	f7fe f8dd 	bl	8001524 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800336c:	e00e      	b.n	800338c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800336e:	f7fe f8d9 	bl	8001524 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d907      	bls.n	800338c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e150      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
 8003380:	40023800 	.word	0x40023800
 8003384:	42470000 	.word	0x42470000
 8003388:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	4b88      	ldr	r3, [pc, #544]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ea      	bne.n	800336e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 8097 	beq.w	80034d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2300      	movs	r3, #0
 80033a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033aa:	4b81      	ldr	r3, [pc, #516]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10f      	bne.n	80033d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b7d      	ldr	r3, [pc, #500]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a7c      	ldr	r2, [pc, #496]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
 80033c6:	4b7a      	ldr	r3, [pc, #488]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d6:	4b77      	ldr	r3, [pc, #476]	; (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033e2:	4b74      	ldr	r3, [pc, #464]	; (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a73      	ldr	r2, [pc, #460]	; (80035b4 <HAL_RCC_OscConfig+0x474>)
 80033e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ee:	f7fe f899 	bl	8001524 <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f6:	f7fe f895 	bl	8001524 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e10c      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	4b6a      	ldr	r3, [pc, #424]	; (80035b4 <HAL_RCC_OscConfig+0x474>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d106      	bne.n	800342a <HAL_RCC_OscConfig+0x2ea>
 800341c:	4b64      	ldr	r3, [pc, #400]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800341e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003420:	4a63      	ldr	r2, [pc, #396]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6713      	str	r3, [r2, #112]	; 0x70
 8003428:	e01c      	b.n	8003464 <HAL_RCC_OscConfig+0x324>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b05      	cmp	r3, #5
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0x30c>
 8003432:	4b5f      	ldr	r3, [pc, #380]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a5e      	ldr	r2, [pc, #376]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	6713      	str	r3, [r2, #112]	; 0x70
 800343e:	4b5c      	ldr	r3, [pc, #368]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	4a5b      	ldr	r2, [pc, #364]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	f043 0301 	orr.w	r3, r3, #1
 8003448:	6713      	str	r3, [r2, #112]	; 0x70
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0x324>
 800344c:	4b58      	ldr	r3, [pc, #352]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003450:	4a57      	ldr	r2, [pc, #348]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003452:	f023 0301 	bic.w	r3, r3, #1
 8003456:	6713      	str	r3, [r2, #112]	; 0x70
 8003458:	4b55      	ldr	r3, [pc, #340]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a54      	ldr	r2, [pc, #336]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d015      	beq.n	8003498 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346c:	f7fe f85a 	bl	8001524 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003472:	e00a      	b.n	800348a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe f856 	bl	8001524 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e0cb      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348a:	4b49      	ldr	r3, [pc, #292]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800348c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0ee      	beq.n	8003474 <HAL_RCC_OscConfig+0x334>
 8003496:	e014      	b.n	80034c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003498:	f7fe f844 	bl	8001524 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034a0:	f7fe f840 	bl	8001524 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0b5      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b6:	4b3e      	ldr	r3, [pc, #248]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1ee      	bne.n	80034a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c8:	4b39      	ldr	r3, [pc, #228]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	4a38      	ldr	r2, [pc, #224]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 80a1 	beq.w	8003620 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034de:	4b34      	ldr	r3, [pc, #208]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d05c      	beq.n	80035a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d141      	bne.n	8003576 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034f2:	4b31      	ldr	r3, [pc, #196]	; (80035b8 <HAL_RCC_OscConfig+0x478>)
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f814 	bl	8001524 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe f810 	bl	8001524 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e087      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003512:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69da      	ldr	r2, [r3, #28]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003534:	085b      	lsrs	r3, r3, #1
 8003536:	3b01      	subs	r3, #1
 8003538:	041b      	lsls	r3, r3, #16
 800353a:	431a      	orrs	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003540:	061b      	lsls	r3, r3, #24
 8003542:	491b      	ldr	r1, [pc, #108]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003544:	4313      	orrs	r3, r2
 8003546:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003548:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_RCC_OscConfig+0x478>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354e:	f7fd ffe9 	bl	8001524 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003556:	f7fd ffe5 	bl	8001524 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e05c      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003568:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x416>
 8003574:	e054      	b.n	8003620 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b10      	ldr	r3, [pc, #64]	; (80035b8 <HAL_RCC_OscConfig+0x478>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fd ffd2 	bl	8001524 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fd ffce 	bl	8001524 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e045      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b06      	ldr	r3, [pc, #24]	; (80035b0 <HAL_RCC_OscConfig+0x470>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x444>
 80035a2:	e03d      	b.n	8003620 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e038      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40007000 	.word	0x40007000
 80035b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x4ec>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d028      	beq.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d121      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d11a      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035ec:	4013      	ands	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d111      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	3b01      	subs	r3, #1
 8003606:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e0cc      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003644:	4b68      	ldr	r3, [pc, #416]	; (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 030f 	and.w	r3, r3, #15
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d90c      	bls.n	800366c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003652:	4b65      	ldr	r3, [pc, #404]	; (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d044      	beq.n	8003750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d119      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d003      	beq.n	80036ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ea:	2b03      	cmp	r3, #3
 80036ec:	d107      	bne.n	80036fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ee:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e06f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fe:	4b3b      	ldr	r3, [pc, #236]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e067      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800370e:	4b37      	ldr	r3, [pc, #220]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f023 0203 	bic.w	r2, r3, #3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	4934      	ldr	r1, [pc, #208]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 800371c:	4313      	orrs	r3, r2
 800371e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003720:	f7fd ff00 	bl	8001524 <HAL_GetTick>
 8003724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	e00a      	b.n	800373e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003728:	f7fd fefc 	bl	8001524 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	f241 3288 	movw	r2, #5000	; 0x1388
 8003736:	4293      	cmp	r3, r2
 8003738:	d901      	bls.n	800373e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e04f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800373e:	4b2b      	ldr	r3, [pc, #172]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 020c 	and.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	429a      	cmp	r2, r3
 800374e:	d1eb      	bne.n	8003728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d20c      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800375e:	4b22      	ldr	r3, [pc, #136]	; (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f821 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	; (80037f0 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_RCC_ClockConfig+0x1c4>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1c8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd fe60 	bl	800149c <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	080136b0 	.word	0x080136b0
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000004 	.word	0x20000004

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b094      	sub	sp, #80	; 0x50
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	2300      	movs	r3, #0
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	2300      	movs	r3, #0
 800380e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b79      	ldr	r3, [pc, #484]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00d      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x40>
 8003820:	2b08      	cmp	r3, #8
 8003822:	f200 80e1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x3a>
 800382e:	e0db      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003834:	e0db      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800383a:	e0d8      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
 800385c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	6139      	str	r1, [r7, #16]
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a0:	4659      	mov	r1, fp
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4651      	mov	r1, sl
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4651      	mov	r1, sl
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4651      	mov	r1, sl
 80038b0:	ebb2 0801 	subs.w	r8, r2, r1
 80038b4:	4659      	mov	r1, fp
 80038b6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ce:	4690      	mov	r8, r2
 80038d0:	4699      	mov	r9, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	eb18 0303 	adds.w	r3, r8, r3
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	462b      	mov	r3, r5
 80038dc:	eb49 0303 	adc.w	r3, r9, r3
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ee:	4629      	mov	r1, r5
 80038f0:	024b      	lsls	r3, r1, #9
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f8:	4621      	mov	r1, r4
 80038fa:	024a      	lsls	r2, r1, #9
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003902:	2200      	movs	r2, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390c:	f7fc fcc8 	bl	80002a0 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	e058      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	4618      	mov	r0, r3
 8003924:	4611      	mov	r1, r2
 8003926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4641      	mov	r1, r8
 800394e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb63 0b01 	sbc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800396c:	ebb2 040a 	subs.w	r4, r2, sl
 8003970:	eb63 050b 	sbc.w	r5, r3, fp
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	464b      	mov	r3, r9
 8003990:	eb45 0303 	adc.w	r3, r5, r3
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b6:	2200      	movs	r2, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	61fa      	str	r2, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	f7fc fc6e 	bl	80002a0 <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80039dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3750      	adds	r7, #80	; 0x50
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	080136c0 	.word	0x080136c0

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	080136c0 	.word	0x080136c0

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03f      	b.n	8003b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fc ff3a 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 f829 	bl	8003b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b10:	b0c0      	sub	sp, #256	; 0x100
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b28:	68d9      	ldr	r1, [r3, #12]
 8003b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	ea40 0301 	orr.w	r3, r0, r1
 8003b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	431a      	orrs	r2, r3
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b64:	f021 010c 	bic.w	r1, r1, #12
 8003b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b72:	430b      	orrs	r3, r1
 8003b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b86:	6999      	ldr	r1, [r3, #24]
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	ea40 0301 	orr.w	r3, r0, r1
 8003b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4b8f      	ldr	r3, [pc, #572]	; (8003dd8 <UART_SetConfig+0x2cc>)
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d005      	beq.n	8003bac <UART_SetConfig+0xa0>
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	4b8d      	ldr	r3, [pc, #564]	; (8003ddc <UART_SetConfig+0x2d0>)
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d104      	bne.n	8003bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bac:	f7ff ff4c 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 8003bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003bb4:	e003      	b.n	8003bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb6:	f7ff ff33 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8003bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc8:	f040 810c 	bne.w	8003de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003bde:	4622      	mov	r2, r4
 8003be0:	462b      	mov	r3, r5
 8003be2:	1891      	adds	r1, r2, r2
 8003be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003be6:	415b      	adcs	r3, r3
 8003be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bee:	4621      	mov	r1, r4
 8003bf0:	eb12 0801 	adds.w	r8, r2, r1
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	eb43 0901 	adc.w	r9, r3, r1
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c0e:	4690      	mov	r8, r2
 8003c10:	4699      	mov	r9, r3
 8003c12:	4623      	mov	r3, r4
 8003c14:	eb18 0303 	adds.w	r3, r8, r3
 8003c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	eb49 0303 	adc.w	r3, r9, r3
 8003c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	18db      	adds	r3, r3, r3
 8003c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c40:	4613      	mov	r3, r2
 8003c42:	eb42 0303 	adc.w	r3, r2, r3
 8003c46:	657b      	str	r3, [r7, #84]	; 0x54
 8003c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003c50:	f7fc fb26 	bl	80002a0 <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4b61      	ldr	r3, [pc, #388]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	011c      	lsls	r4, r3, #4
 8003c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003c74:	4642      	mov	r2, r8
 8003c76:	464b      	mov	r3, r9
 8003c78:	1891      	adds	r1, r2, r2
 8003c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003c7c:	415b      	adcs	r3, r3
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003c84:	4641      	mov	r1, r8
 8003c86:	eb12 0a01 	adds.w	sl, r2, r1
 8003c8a:	4649      	mov	r1, r9
 8003c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8003c90:	f04f 0200 	mov.w	r2, #0
 8003c94:	f04f 0300 	mov.w	r3, #0
 8003c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ca4:	4692      	mov	sl, r2
 8003ca6:	469b      	mov	fp, r3
 8003ca8:	4643      	mov	r3, r8
 8003caa:	eb1a 0303 	adds.w	r3, sl, r3
 8003cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cb2:	464b      	mov	r3, r9
 8003cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	18db      	adds	r3, r3, r3
 8003cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	eb42 0303 	adc.w	r3, r2, r3
 8003cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8003cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003ce6:	f7fc fadb 	bl	80002a0 <__aeabi_uldivmod>
 8003cea:	4602      	mov	r2, r0
 8003cec:	460b      	mov	r3, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4b3b      	ldr	r3, [pc, #236]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2264      	movs	r2, #100	; 0x64
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	1acb      	subs	r3, r1, r3
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003d06:	4b36      	ldr	r3, [pc, #216]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003d08:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0c:	095b      	lsrs	r3, r3, #5
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d14:	441c      	add	r4, r3
 8003d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003d28:	4642      	mov	r2, r8
 8003d2a:	464b      	mov	r3, r9
 8003d2c:	1891      	adds	r1, r2, r2
 8003d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d30:	415b      	adcs	r3, r3
 8003d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d38:	4641      	mov	r1, r8
 8003d3a:	1851      	adds	r1, r2, r1
 8003d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8003d3e:	4649      	mov	r1, r9
 8003d40:	414b      	adcs	r3, r1
 8003d42:	637b      	str	r3, [r7, #52]	; 0x34
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003d50:	4659      	mov	r1, fp
 8003d52:	00cb      	lsls	r3, r1, #3
 8003d54:	4651      	mov	r1, sl
 8003d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d5a:	4651      	mov	r1, sl
 8003d5c:	00ca      	lsls	r2, r1, #3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	4619      	mov	r1, r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	4642      	mov	r2, r8
 8003d66:	189b      	adds	r3, r3, r2
 8003d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d6c:	464b      	mov	r3, r9
 8003d6e:	460a      	mov	r2, r1
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	18db      	adds	r3, r3, r3
 8003d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d92:	4613      	mov	r3, r2
 8003d94:	eb42 0303 	adc.w	r3, r2, r3
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003da2:	f7fc fa7d 	bl	80002a0 <__aeabi_uldivmod>
 8003da6:	4602      	mov	r2, r0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003dac:	fba3 1302 	umull	r1, r3, r3, r2
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	2164      	movs	r1, #100	; 0x64
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	3332      	adds	r3, #50	; 0x32
 8003dbe:	4a08      	ldr	r2, [pc, #32]	; (8003de0 <UART_SetConfig+0x2d4>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	f003 0207 	and.w	r2, r3, #7
 8003dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4422      	add	r2, r4
 8003dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003dd4:	e105      	b.n	8003fe2 <UART_SetConfig+0x4d6>
 8003dd6:	bf00      	nop
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	40011400 	.word	0x40011400
 8003de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003df6:	4642      	mov	r2, r8
 8003df8:	464b      	mov	r3, r9
 8003dfa:	1891      	adds	r1, r2, r2
 8003dfc:	6239      	str	r1, [r7, #32]
 8003dfe:	415b      	adcs	r3, r3
 8003e00:	627b      	str	r3, [r7, #36]	; 0x24
 8003e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e06:	4641      	mov	r1, r8
 8003e08:	1854      	adds	r4, r2, r1
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	eb43 0501 	adc.w	r5, r3, r1
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	00eb      	lsls	r3, r5, #3
 8003e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e1e:	00e2      	lsls	r2, r4, #3
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	4643      	mov	r3, r8
 8003e26:	18e3      	adds	r3, r4, r3
 8003e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	eb45 0303 	adc.w	r3, r5, r3
 8003e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	f04f 0300 	mov.w	r3, #0
 8003e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e52:	4629      	mov	r1, r5
 8003e54:	008b      	lsls	r3, r1, #2
 8003e56:	4621      	mov	r1, r4
 8003e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	008a      	lsls	r2, r1, #2
 8003e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003e64:	f7fc fa1c 	bl	80002a0 <__aeabi_uldivmod>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	4b60      	ldr	r3, [pc, #384]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e72:	095b      	lsrs	r3, r3, #5
 8003e74:	011c      	lsls	r4, r3, #4
 8003e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	1891      	adds	r1, r2, r2
 8003e8e:	61b9      	str	r1, [r7, #24]
 8003e90:	415b      	adcs	r3, r3
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e98:	4641      	mov	r1, r8
 8003e9a:	1851      	adds	r1, r2, r1
 8003e9c:	6139      	str	r1, [r7, #16]
 8003e9e:	4649      	mov	r1, r9
 8003ea0:	414b      	adcs	r3, r1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	00cb      	lsls	r3, r1, #3
 8003eb4:	4651      	mov	r1, sl
 8003eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003eba:	4651      	mov	r1, sl
 8003ebc:	00ca      	lsls	r2, r1, #3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	189b      	adds	r3, r3, r2
 8003ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ecc:	464b      	mov	r3, r9
 8003ece:	460a      	mov	r2, r1
 8003ed0:	eb42 0303 	adc.w	r3, r2, r3
 8003ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003efa:	4641      	mov	r1, r8
 8003efc:	008a      	lsls	r2, r1, #2
 8003efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003f02:	f7fc f9cd 	bl	80002a0 <__aeabi_uldivmod>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4b39      	ldr	r3, [pc, #228]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	2164      	movs	r1, #100	; 0x64
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	3332      	adds	r3, #50	; 0x32
 8003f1e:	4a34      	ldr	r2, [pc, #208]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f2a:	441c      	add	r4, r3
 8003f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f30:	2200      	movs	r2, #0
 8003f32:	673b      	str	r3, [r7, #112]	; 0x70
 8003f34:	677a      	str	r2, [r7, #116]	; 0x74
 8003f36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003f3a:	4642      	mov	r2, r8
 8003f3c:	464b      	mov	r3, r9
 8003f3e:	1891      	adds	r1, r2, r2
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	415b      	adcs	r3, r3
 8003f44:	60fb      	str	r3, [r7, #12]
 8003f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	1851      	adds	r1, r2, r1
 8003f4e:	6039      	str	r1, [r7, #0]
 8003f50:	4649      	mov	r1, r9
 8003f52:	414b      	adcs	r3, r1
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	f04f 0200 	mov.w	r2, #0
 8003f5a:	f04f 0300 	mov.w	r3, #0
 8003f5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f62:	4659      	mov	r1, fp
 8003f64:	00cb      	lsls	r3, r1, #3
 8003f66:	4651      	mov	r1, sl
 8003f68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	00ca      	lsls	r2, r1, #3
 8003f70:	4610      	mov	r0, r2
 8003f72:	4619      	mov	r1, r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	4642      	mov	r2, r8
 8003f78:	189b      	adds	r3, r3, r2
 8003f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f7c:	464b      	mov	r3, r9
 8003f7e:	460a      	mov	r2, r1
 8003f80:	eb42 0303 	adc.w	r3, r2, r3
 8003f84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8003f90:	667a      	str	r2, [r7, #100]	; 0x64
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	008b      	lsls	r3, r1, #2
 8003fa2:	4641      	mov	r1, r8
 8003fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa8:	4641      	mov	r1, r8
 8003faa:	008a      	lsls	r2, r1, #2
 8003fac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003fb0:	f7fc f976 	bl	80002a0 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003fba:	fba3 1302 	umull	r1, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	2164      	movs	r1, #100	; 0x64
 8003fc2:	fb01 f303 	mul.w	r3, r1, r3
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	3332      	adds	r3, #50	; 0x32
 8003fcc:	4a08      	ldr	r2, [pc, #32]	; (8003ff0 <UART_SetConfig+0x4e4>)
 8003fce:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd2:	095b      	lsrs	r3, r3, #5
 8003fd4:	f003 020f 	and.w	r2, r3, #15
 8003fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4422      	add	r2, r4
 8003fe0:	609a      	str	r2, [r3, #8]
}
 8003fe2:	bf00      	nop
 8003fe4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fee:	bf00      	nop
 8003ff0:	51eb851f 	.word	0x51eb851f

08003ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b084      	sub	sp, #16
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	f107 001c 	add.w	r0, r7, #28
 8004002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	2b01      	cmp	r3, #1
 800400a:	d122      	bne.n	8004052 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 faa2 	bl	8004590 <USB_CoreReset>
 800404c:	4603      	mov	r3, r0
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e01a      	b.n	8004088 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 fa96 	bl	8004590 <USB_CoreReset>
 8004064:	4603      	mov	r3, r0
 8004066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
 800407a:	e005      	b.n	8004088 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408a:	2b01      	cmp	r3, #1
 800408c:	d10b      	bne.n	80040a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f043 0206 	orr.w	r2, r3, #6
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f043 0220 	orr.w	r2, r3, #32
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80040b2:	b004      	add	sp, #16
 80040b4:	4770      	bx	lr

080040b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 0201 	bic.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d115      	bne.n	8004126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004106:	2001      	movs	r0, #1
 8004108:	f7fd fa18 	bl	800153c <HAL_Delay>
      ms++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	3301      	adds	r3, #1
 8004110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 fa2e 	bl	8004574 <USB_GetMode>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d01e      	beq.n	800415c <USB_SetCurrentMode+0x84>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b31      	cmp	r3, #49	; 0x31
 8004122:	d9f0      	bls.n	8004106 <USB_SetCurrentMode+0x2e>
 8004124:	e01a      	b.n	800415c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d115      	bne.n	8004158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004138:	2001      	movs	r0, #1
 800413a:	f7fd f9ff 	bl	800153c <HAL_Delay>
      ms++;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	3301      	adds	r3, #1
 8004142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 fa15 	bl	8004574 <USB_GetMode>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <USB_SetCurrentMode+0x84>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b31      	cmp	r3, #49	; 0x31
 8004154:	d9f0      	bls.n	8004138 <USB_SetCurrentMode+0x60>
 8004156:	e001      	b.n	800415c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e005      	b.n	8004168 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2b32      	cmp	r3, #50	; 0x32
 8004160:	d101      	bne.n	8004166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e000      	b.n	8004168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004166:	2300      	movs	r3, #0
}
 8004168:	4618      	mov	r0, r3
 800416a:	3710      	adds	r7, #16
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}

08004170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004170:	b084      	sub	sp, #16
 8004172:	b580      	push	{r7, lr}
 8004174:	b086      	sub	sp, #24
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800417e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004182:	2300      	movs	r3, #0
 8004184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	e009      	b.n	80041a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	3340      	adds	r3, #64	; 0x40
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	2200      	movs	r2, #0
 800419c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	3301      	adds	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b0e      	cmp	r3, #14
 80041a8:	d9f2      	bls.n	8004190 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d11c      	bne.n	80041ea <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041be:	f043 0302 	orr.w	r3, r3, #2
 80041c2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	639a      	str	r2, [r3, #56]	; 0x38
 80041e8:	e00b      	b.n	8004202 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ee:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004208:	461a      	mov	r2, r3
 800420a:	2300      	movs	r3, #0
 800420c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	4619      	mov	r1, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421c:	461a      	mov	r2, r3
 800421e:	680b      	ldr	r3, [r1, #0]
 8004220:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004224:	2b01      	cmp	r3, #1
 8004226:	d10c      	bne.n	8004242 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422a:	2b00      	cmp	r3, #0
 800422c:	d104      	bne.n	8004238 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800422e:	2100      	movs	r1, #0
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f965 	bl	8004500 <USB_SetDevSpeed>
 8004236:	e008      	b.n	800424a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004238:	2101      	movs	r1, #1
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f960 	bl	8004500 <USB_SetDevSpeed>
 8004240:	e003      	b.n	800424a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004242:	2103      	movs	r1, #3
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f95b 	bl	8004500 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800424a:	2110      	movs	r1, #16
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f8f3 	bl	8004438 <USB_FlushTxFifo>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f91f 	bl	80044a0 <USB_FlushRxFifo>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	461a      	mov	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
 8004294:	e043      	b.n	800431e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042ac:	d118      	bne.n	80042e0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d10a      	bne.n	80042ca <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	015a      	lsls	r2, r3, #5
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c0:	461a      	mov	r2, r3
 80042c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	e013      	b.n	80042f2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d6:	461a      	mov	r2, r3
 80042d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e008      	b.n	80042f2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	461a      	mov	r2, r3
 80042ee:	2300      	movs	r3, #0
 80042f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	461a      	mov	r2, r3
 8004312:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004316:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	3301      	adds	r3, #1
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	429a      	cmp	r2, r3
 8004324:	d3b7      	bcc.n	8004296 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004326:	2300      	movs	r3, #0
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e043      	b.n	80043b4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	015a      	lsls	r2, r3, #5
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4413      	add	r3, r2
 8004334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800433e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004342:	d118      	bne.n	8004376 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004356:	461a      	mov	r2, r3
 8004358:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800435c:	6013      	str	r3, [r2, #0]
 800435e:	e013      	b.n	8004388 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436c:	461a      	mov	r2, r3
 800436e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004372:	6013      	str	r3, [r2, #0]
 8004374:	e008      	b.n	8004388 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004382:	461a      	mov	r2, r3
 8004384:	2300      	movs	r3, #0
 8004386:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	461a      	mov	r2, r3
 8004396:	2300      	movs	r3, #0
 8004398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	3301      	adds	r3, #1
 80043b2:	613b      	str	r3, [r7, #16]
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d3b7      	bcc.n	800432c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80043dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80043de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	f043 0210 	orr.w	r2, r3, #16
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	699a      	ldr	r2, [r3, #24]
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <USB_DevInit+0x2c4>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80043fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d005      	beq.n	800440e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	f043 0208 	orr.w	r2, r3, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800440e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004410:	2b01      	cmp	r3, #1
 8004412:	d107      	bne.n	8004424 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800441c:	f043 0304 	orr.w	r3, r3, #4
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004424:	7dfb      	ldrb	r3, [r7, #23]
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004430:	b004      	add	sp, #16
 8004432:	4770      	bx	lr
 8004434:	803c3800 	.word	0x803c3800

08004438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	3301      	adds	r3, #1
 800444a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4a13      	ldr	r2, [pc, #76]	; (800449c <USB_FlushTxFifo+0x64>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e01b      	b.n	8004490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	daf2      	bge.n	8004446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	019b      	lsls	r3, r3, #6
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <USB_FlushTxFifo+0x64>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d901      	bls.n	8004482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e006      	b.n	8004490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	f003 0320 	and.w	r3, r3, #32
 800448a:	2b20      	cmp	r3, #32
 800448c:	d0f0      	beq.n	8004470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	00030d40 	.word	0x00030d40

080044a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3301      	adds	r3, #1
 80044b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a11      	ldr	r2, [pc, #68]	; (80044fc <USB_FlushRxFifo+0x5c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d901      	bls.n	80044be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e018      	b.n	80044f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	daf2      	bge.n	80044ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2210      	movs	r2, #16
 80044ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a08      	ldr	r2, [pc, #32]	; (80044fc <USB_FlushRxFifo+0x5c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d901      	bls.n	80044e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e006      	b.n	80044f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b10      	cmp	r3, #16
 80044ec:	d0f0      	beq.n	80044d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	00030d40 	.word	0x00030d40

08004500 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004532:	b480      	push	{r7}
 8004534:	b085      	sub	sp, #20
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800454c:	f023 0303 	bic.w	r3, r3, #3
 8004550:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004560:	f043 0302 	orr.w	r3, r3, #2
 8004564:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 0301 	and.w	r3, r3, #1
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <USB_CoreReset+0x64>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e01b      	b.n	80045e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	daf2      	bge.n	800459c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	3301      	adds	r3, #1
 80045ca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <USB_CoreReset+0x64>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e006      	b.n	80045e6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d0f0      	beq.n	80045c6 <USB_CoreReset+0x36>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	00030d40 	.word	0x00030d40

080045f8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 169;
 80045fe:	4b8d      	ldr	r3, [pc, #564]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004600:	22a9      	movs	r2, #169	; 0xa9
 8004602:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 254;
 8004604:	4b8b      	ldr	r3, [pc, #556]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004606:	22fe      	movs	r2, #254	; 0xfe
 8004608:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 101;
 800460a:	4b8a      	ldr	r3, [pc, #552]	; (8004834 <MX_LWIP_Init+0x23c>)
 800460c:	2265      	movs	r2, #101	; 0x65
 800460e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 42;
 8004610:	4b88      	ldr	r3, [pc, #544]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004612:	222a      	movs	r2, #42	; 0x2a
 8004614:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004616:	4b88      	ldr	r3, [pc, #544]	; (8004838 <MX_LWIP_Init+0x240>)
 8004618:	22ff      	movs	r2, #255	; 0xff
 800461a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800461c:	4b86      	ldr	r3, [pc, #536]	; (8004838 <MX_LWIP_Init+0x240>)
 800461e:	22ff      	movs	r2, #255	; 0xff
 8004620:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004622:	4b85      	ldr	r3, [pc, #532]	; (8004838 <MX_LWIP_Init+0x240>)
 8004624:	22ff      	movs	r2, #255	; 0xff
 8004626:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004628:	4b83      	ldr	r3, [pc, #524]	; (8004838 <MX_LWIP_Init+0x240>)
 800462a:	2200      	movs	r2, #0
 800462c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 169;
 800462e:	4b83      	ldr	r3, [pc, #524]	; (800483c <MX_LWIP_Init+0x244>)
 8004630:	22a9      	movs	r2, #169	; 0xa9
 8004632:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 254;
 8004634:	4b81      	ldr	r3, [pc, #516]	; (800483c <MX_LWIP_Init+0x244>)
 8004636:	22fe      	movs	r2, #254	; 0xfe
 8004638:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 101;
 800463a:	4b80      	ldr	r3, [pc, #512]	; (800483c <MX_LWIP_Init+0x244>)
 800463c:	2265      	movs	r2, #101	; 0x65
 800463e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004640:	4b7e      	ldr	r3, [pc, #504]	; (800483c <MX_LWIP_Init+0x244>)
 8004642:	2201      	movs	r2, #1
 8004644:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8004646:	f000 fdb5 	bl	80051b4 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800464a:	4b7a      	ldr	r3, [pc, #488]	; (8004834 <MX_LWIP_Init+0x23c>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	061a      	lsls	r2, r3, #24
 8004650:	4b78      	ldr	r3, [pc, #480]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004652:	785b      	ldrb	r3, [r3, #1]
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	431a      	orrs	r2, r3
 8004658:	4b76      	ldr	r3, [pc, #472]	; (8004834 <MX_LWIP_Init+0x23c>)
 800465a:	789b      	ldrb	r3, [r3, #2]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	4313      	orrs	r3, r2
 8004660:	4a74      	ldr	r2, [pc, #464]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004662:	78d2      	ldrb	r2, [r2, #3]
 8004664:	4313      	orrs	r3, r2
 8004666:	061a      	lsls	r2, r3, #24
 8004668:	4b72      	ldr	r3, [pc, #456]	; (8004834 <MX_LWIP_Init+0x23c>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	0619      	lsls	r1, r3, #24
 800466e:	4b71      	ldr	r3, [pc, #452]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	041b      	lsls	r3, r3, #16
 8004674:	4319      	orrs	r1, r3
 8004676:	4b6f      	ldr	r3, [pc, #444]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004678:	789b      	ldrb	r3, [r3, #2]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	430b      	orrs	r3, r1
 800467e:	496d      	ldr	r1, [pc, #436]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004680:	78c9      	ldrb	r1, [r1, #3]
 8004682:	430b      	orrs	r3, r1
 8004684:	021b      	lsls	r3, r3, #8
 8004686:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800468a:	431a      	orrs	r2, r3
 800468c:	4b69      	ldr	r3, [pc, #420]	; (8004834 <MX_LWIP_Init+0x23c>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	0619      	lsls	r1, r3, #24
 8004692:	4b68      	ldr	r3, [pc, #416]	; (8004834 <MX_LWIP_Init+0x23c>)
 8004694:	785b      	ldrb	r3, [r3, #1]
 8004696:	041b      	lsls	r3, r3, #16
 8004698:	4319      	orrs	r1, r3
 800469a:	4b66      	ldr	r3, [pc, #408]	; (8004834 <MX_LWIP_Init+0x23c>)
 800469c:	789b      	ldrb	r3, [r3, #2]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	430b      	orrs	r3, r1
 80046a2:	4964      	ldr	r1, [pc, #400]	; (8004834 <MX_LWIP_Init+0x23c>)
 80046a4:	78c9      	ldrb	r1, [r1, #3]
 80046a6:	430b      	orrs	r3, r1
 80046a8:	0a1b      	lsrs	r3, r3, #8
 80046aa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80046ae:	431a      	orrs	r2, r3
 80046b0:	4b60      	ldr	r3, [pc, #384]	; (8004834 <MX_LWIP_Init+0x23c>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	0619      	lsls	r1, r3, #24
 80046b6:	4b5f      	ldr	r3, [pc, #380]	; (8004834 <MX_LWIP_Init+0x23c>)
 80046b8:	785b      	ldrb	r3, [r3, #1]
 80046ba:	041b      	lsls	r3, r3, #16
 80046bc:	4319      	orrs	r1, r3
 80046be:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <MX_LWIP_Init+0x23c>)
 80046c0:	789b      	ldrb	r3, [r3, #2]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	430b      	orrs	r3, r1
 80046c6:	495b      	ldr	r1, [pc, #364]	; (8004834 <MX_LWIP_Init+0x23c>)
 80046c8:	78c9      	ldrb	r1, [r1, #3]
 80046ca:	430b      	orrs	r3, r1
 80046cc:	0e1b      	lsrs	r3, r3, #24
 80046ce:	4313      	orrs	r3, r2
 80046d0:	4a5b      	ldr	r2, [pc, #364]	; (8004840 <MX_LWIP_Init+0x248>)
 80046d2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80046d4:	4b58      	ldr	r3, [pc, #352]	; (8004838 <MX_LWIP_Init+0x240>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	061a      	lsls	r2, r3, #24
 80046da:	4b57      	ldr	r3, [pc, #348]	; (8004838 <MX_LWIP_Init+0x240>)
 80046dc:	785b      	ldrb	r3, [r3, #1]
 80046de:	041b      	lsls	r3, r3, #16
 80046e0:	431a      	orrs	r2, r3
 80046e2:	4b55      	ldr	r3, [pc, #340]	; (8004838 <MX_LWIP_Init+0x240>)
 80046e4:	789b      	ldrb	r3, [r3, #2]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	4313      	orrs	r3, r2
 80046ea:	4a53      	ldr	r2, [pc, #332]	; (8004838 <MX_LWIP_Init+0x240>)
 80046ec:	78d2      	ldrb	r2, [r2, #3]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	061a      	lsls	r2, r3, #24
 80046f2:	4b51      	ldr	r3, [pc, #324]	; (8004838 <MX_LWIP_Init+0x240>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	0619      	lsls	r1, r3, #24
 80046f8:	4b4f      	ldr	r3, [pc, #316]	; (8004838 <MX_LWIP_Init+0x240>)
 80046fa:	785b      	ldrb	r3, [r3, #1]
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	4319      	orrs	r1, r3
 8004700:	4b4d      	ldr	r3, [pc, #308]	; (8004838 <MX_LWIP_Init+0x240>)
 8004702:	789b      	ldrb	r3, [r3, #2]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	430b      	orrs	r3, r1
 8004708:	494b      	ldr	r1, [pc, #300]	; (8004838 <MX_LWIP_Init+0x240>)
 800470a:	78c9      	ldrb	r1, [r1, #3]
 800470c:	430b      	orrs	r3, r1
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004714:	431a      	orrs	r2, r3
 8004716:	4b48      	ldr	r3, [pc, #288]	; (8004838 <MX_LWIP_Init+0x240>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	0619      	lsls	r1, r3, #24
 800471c:	4b46      	ldr	r3, [pc, #280]	; (8004838 <MX_LWIP_Init+0x240>)
 800471e:	785b      	ldrb	r3, [r3, #1]
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	4319      	orrs	r1, r3
 8004724:	4b44      	ldr	r3, [pc, #272]	; (8004838 <MX_LWIP_Init+0x240>)
 8004726:	789b      	ldrb	r3, [r3, #2]
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	430b      	orrs	r3, r1
 800472c:	4942      	ldr	r1, [pc, #264]	; (8004838 <MX_LWIP_Init+0x240>)
 800472e:	78c9      	ldrb	r1, [r1, #3]
 8004730:	430b      	orrs	r3, r1
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004738:	431a      	orrs	r2, r3
 800473a:	4b3f      	ldr	r3, [pc, #252]	; (8004838 <MX_LWIP_Init+0x240>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	0619      	lsls	r1, r3, #24
 8004740:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <MX_LWIP_Init+0x240>)
 8004742:	785b      	ldrb	r3, [r3, #1]
 8004744:	041b      	lsls	r3, r3, #16
 8004746:	4319      	orrs	r1, r3
 8004748:	4b3b      	ldr	r3, [pc, #236]	; (8004838 <MX_LWIP_Init+0x240>)
 800474a:	789b      	ldrb	r3, [r3, #2]
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	430b      	orrs	r3, r1
 8004750:	4939      	ldr	r1, [pc, #228]	; (8004838 <MX_LWIP_Init+0x240>)
 8004752:	78c9      	ldrb	r1, [r1, #3]
 8004754:	430b      	orrs	r3, r1
 8004756:	0e1b      	lsrs	r3, r3, #24
 8004758:	4313      	orrs	r3, r2
 800475a:	4a3a      	ldr	r2, [pc, #232]	; (8004844 <MX_LWIP_Init+0x24c>)
 800475c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <MX_LWIP_Init+0x244>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	061a      	lsls	r2, r3, #24
 8004764:	4b35      	ldr	r3, [pc, #212]	; (800483c <MX_LWIP_Init+0x244>)
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	4b33      	ldr	r3, [pc, #204]	; (800483c <MX_LWIP_Init+0x244>)
 800476e:	789b      	ldrb	r3, [r3, #2]
 8004770:	021b      	lsls	r3, r3, #8
 8004772:	4313      	orrs	r3, r2
 8004774:	4a31      	ldr	r2, [pc, #196]	; (800483c <MX_LWIP_Init+0x244>)
 8004776:	78d2      	ldrb	r2, [r2, #3]
 8004778:	4313      	orrs	r3, r2
 800477a:	061a      	lsls	r2, r3, #24
 800477c:	4b2f      	ldr	r3, [pc, #188]	; (800483c <MX_LWIP_Init+0x244>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	0619      	lsls	r1, r3, #24
 8004782:	4b2e      	ldr	r3, [pc, #184]	; (800483c <MX_LWIP_Init+0x244>)
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	4319      	orrs	r1, r3
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <MX_LWIP_Init+0x244>)
 800478c:	789b      	ldrb	r3, [r3, #2]
 800478e:	021b      	lsls	r3, r3, #8
 8004790:	430b      	orrs	r3, r1
 8004792:	492a      	ldr	r1, [pc, #168]	; (800483c <MX_LWIP_Init+0x244>)
 8004794:	78c9      	ldrb	r1, [r1, #3]
 8004796:	430b      	orrs	r3, r1
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800479e:	431a      	orrs	r2, r3
 80047a0:	4b26      	ldr	r3, [pc, #152]	; (800483c <MX_LWIP_Init+0x244>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	0619      	lsls	r1, r3, #24
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <MX_LWIP_Init+0x244>)
 80047a8:	785b      	ldrb	r3, [r3, #1]
 80047aa:	041b      	lsls	r3, r3, #16
 80047ac:	4319      	orrs	r1, r3
 80047ae:	4b23      	ldr	r3, [pc, #140]	; (800483c <MX_LWIP_Init+0x244>)
 80047b0:	789b      	ldrb	r3, [r3, #2]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	430b      	orrs	r3, r1
 80047b6:	4921      	ldr	r1, [pc, #132]	; (800483c <MX_LWIP_Init+0x244>)
 80047b8:	78c9      	ldrb	r1, [r1, #3]
 80047ba:	430b      	orrs	r3, r1
 80047bc:	0a1b      	lsrs	r3, r3, #8
 80047be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80047c2:	431a      	orrs	r2, r3
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <MX_LWIP_Init+0x244>)
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	0619      	lsls	r1, r3, #24
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <MX_LWIP_Init+0x244>)
 80047cc:	785b      	ldrb	r3, [r3, #1]
 80047ce:	041b      	lsls	r3, r3, #16
 80047d0:	4319      	orrs	r1, r3
 80047d2:	4b1a      	ldr	r3, [pc, #104]	; (800483c <MX_LWIP_Init+0x244>)
 80047d4:	789b      	ldrb	r3, [r3, #2]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	430b      	orrs	r3, r1
 80047da:	4918      	ldr	r1, [pc, #96]	; (800483c <MX_LWIP_Init+0x244>)
 80047dc:	78c9      	ldrb	r1, [r1, #3]
 80047de:	430b      	orrs	r3, r1
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	4313      	orrs	r3, r2
 80047e4:	4a18      	ldr	r2, [pc, #96]	; (8004848 <MX_LWIP_Init+0x250>)
 80047e6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80047e8:	4b18      	ldr	r3, [pc, #96]	; (800484c <MX_LWIP_Init+0x254>)
 80047ea:	9302      	str	r3, [sp, #8]
 80047ec:	4b18      	ldr	r3, [pc, #96]	; (8004850 <MX_LWIP_Init+0x258>)
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	2300      	movs	r3, #0
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	4b14      	ldr	r3, [pc, #80]	; (8004848 <MX_LWIP_Init+0x250>)
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <MX_LWIP_Init+0x24c>)
 80047f8:	4911      	ldr	r1, [pc, #68]	; (8004840 <MX_LWIP_Init+0x248>)
 80047fa:	4816      	ldr	r0, [pc, #88]	; (8004854 <MX_LWIP_Init+0x25c>)
 80047fc:	f001 f9c2 	bl	8005b84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004800:	4814      	ldr	r0, [pc, #80]	; (8004854 <MX_LWIP_Init+0x25c>)
 8004802:	f001 fb71 	bl	8005ee8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004806:	4b13      	ldr	r3, [pc, #76]	; (8004854 <MX_LWIP_Init+0x25c>)
 8004808:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800480c:	089b      	lsrs	r3, r3, #2
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d003      	beq.n	8004820 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004818:	480e      	ldr	r0, [pc, #56]	; (8004854 <MX_LWIP_Init+0x25c>)
 800481a:	f001 fb75 	bl	8005f08 <netif_set_up>
 800481e:	e002      	b.n	8004826 <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004820:	480c      	ldr	r0, [pc, #48]	; (8004854 <MX_LWIP_Init+0x25c>)
 8004822:	f001 fbdd 	bl	8005fe0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004826:	490c      	ldr	r1, [pc, #48]	; (8004858 <MX_LWIP_Init+0x260>)
 8004828:	480a      	ldr	r0, [pc, #40]	; (8004854 <MX_LWIP_Init+0x25c>)
 800482a:	f001 fc6f 	bl	800610c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800482e:	bf00      	nop
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	20000644 	.word	0x20000644
 8004838:	20000648 	.word	0x20000648
 800483c:	2000064c 	.word	0x2000064c
 8004840:	20000638 	.word	0x20000638
 8004844:	2000063c 	.word	0x2000063c
 8004848:	20000640 	.word	0x20000640
 800484c:	0800f945 	.word	0x0800f945
 8004850:	08004b09 	.word	0x08004b09
 8004854:	20000604 	.word	0x20000604
 8004858:	0800485d 	.word	0x0800485d

0800485c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004864:	bf00      	nop
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800487c:	4b40      	ldr	r3, [pc, #256]	; (8004980 <low_level_init+0x110>)
 800487e:	4a41      	ldr	r2, [pc, #260]	; (8004984 <low_level_init+0x114>)
 8004880:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004882:	2300      	movs	r3, #0
 8004884:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800488a:	23e1      	movs	r3, #225	; 0xe1
 800488c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800488e:	2300      	movs	r3, #0
 8004890:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004892:	2300      	movs	r3, #0
 8004894:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004896:	2300      	movs	r3, #0
 8004898:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800489a:	4a39      	ldr	r2, [pc, #228]	; (8004980 <low_level_init+0x110>)
 800489c:	f107 0308 	add.w	r3, r7, #8
 80048a0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80048a2:	4b37      	ldr	r3, [pc, #220]	; (8004980 <low_level_init+0x110>)
 80048a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048a8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80048aa:	4b35      	ldr	r3, [pc, #212]	; (8004980 <low_level_init+0x110>)
 80048ac:	4a36      	ldr	r2, [pc, #216]	; (8004988 <low_level_init+0x118>)
 80048ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80048b0:	4b33      	ldr	r3, [pc, #204]	; (8004980 <low_level_init+0x110>)
 80048b2:	4a36      	ldr	r2, [pc, #216]	; (800498c <low_level_init+0x11c>)
 80048b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80048b6:	4b32      	ldr	r3, [pc, #200]	; (8004980 <low_level_init+0x110>)
 80048b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80048bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80048be:	4830      	ldr	r0, [pc, #192]	; (8004980 <low_level_init+0x110>)
 80048c0:	f7fc ff72 	bl	80017a8 <HAL_ETH_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80048c8:	2238      	movs	r2, #56	; 0x38
 80048ca:	2100      	movs	r1, #0
 80048cc:	4830      	ldr	r0, [pc, #192]	; (8004990 <low_level_init+0x120>)
 80048ce:	f00b f951 	bl	800fb74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80048d2:	4b2f      	ldr	r3, [pc, #188]	; (8004990 <low_level_init+0x120>)
 80048d4:	2221      	movs	r2, #33	; 0x21
 80048d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80048d8:	4b2d      	ldr	r3, [pc, #180]	; (8004990 <low_level_init+0x120>)
 80048da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80048de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80048e0:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <low_level_init+0x120>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80048e6:	482b      	ldr	r0, [pc, #172]	; (8004994 <low_level_init+0x124>)
 80048e8:	f001 f814 	bl	8005914 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2206      	movs	r2, #6
 80048f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80048f4:	4b22      	ldr	r3, [pc, #136]	; (8004980 <low_level_init+0x110>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004900:	4b1f      	ldr	r3, [pc, #124]	; (8004980 <low_level_init+0x110>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	785a      	ldrb	r2, [r3, #1]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <low_level_init+0x110>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	789a      	ldrb	r2, [r3, #2]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <low_level_init+0x110>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	78da      	ldrb	r2, [r3, #3]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <low_level_init+0x110>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	791a      	ldrb	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004930:	4b13      	ldr	r3, [pc, #76]	; (8004980 <low_level_init+0x110>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	795a      	ldrb	r2, [r3, #5]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004942:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800494a:	f043 030a 	orr.w	r3, r3, #10
 800494e:	b2da      	uxtb	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004956:	4910      	ldr	r1, [pc, #64]	; (8004998 <low_level_init+0x128>)
 8004958:	4810      	ldr	r0, [pc, #64]	; (800499c <low_level_init+0x12c>)
 800495a:	f7fc fc1c 	bl	8001196 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800495e:	480f      	ldr	r0, [pc, #60]	; (800499c <low_level_init+0x12c>)
 8004960:	f7fc fc4b 	bl	80011fa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d103      	bne.n	8004972 <low_level_init+0x102>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa3c 	bl	8004de8 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004970:	e001      	b.n	8004976 <low_level_init+0x106>
    Error_Handler();
 8004972:	f7fb ff9f 	bl	80008b4 <Error_Handler>
}
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20005120 	.word	0x20005120
 8004984:	40028000 	.word	0x40028000
 8004988:	20005080 	.word	0x20005080
 800498c:	20004fe0 	.word	0x20004fe0
 8004990:	200051d0 	.word	0x200051d0
 8004994:	080136c8 	.word	0x080136c8
 8004998:	2000000c 	.word	0x2000000c
 800499c:	20005208 	.word	0x20005208

080049a0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b092      	sub	sp, #72	; 0x48
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80049b8:	f107 030c 	add.w	r3, r7, #12
 80049bc:	2230      	movs	r2, #48	; 0x30
 80049be:	2100      	movs	r1, #0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f00b f8d7 	bl	800fb74 <memset>

  for(q = p; q != NULL; q = q->next)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ca:	e045      	b.n	8004a58 <low_level_output+0xb8>
  {
    if(i >= ETH_TX_DESC_CNT)
 80049cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d902      	bls.n	80049d8 <low_level_output+0x38>
      return ERR_IF;
 80049d2:	f06f 030b 	mvn.w	r3, #11
 80049d6:	e055      	b.n	8004a84 <low_level_output+0xe4>

    Txbuffer[i].buffer = q->payload;
 80049d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049de:	4613      	mov	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3348      	adds	r3, #72	; 0x48
 80049e8:	443b      	add	r3, r7
 80049ea:	3b3c      	subs	r3, #60	; 0x3c
 80049ec:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80049ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f0:	895b      	ldrh	r3, [r3, #10]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049f6:	4613      	mov	r3, r2
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	3348      	adds	r3, #72	; 0x48
 8004a00:	443b      	add	r3, r7
 8004a02:	3b38      	subs	r3, #56	; 0x38
 8004a04:	6019      	str	r1, [r3, #0]

    if(i>0)
 8004a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d011      	beq.n	8004a30 <low_level_output+0x90>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8004a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	f107 000c 	add.w	r0, r7, #12
 8004a14:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a16:	460b      	mov	r3, r1
 8004a18:	005b      	lsls	r3, r3, #1
 8004a1a:	440b      	add	r3, r1
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	18c1      	adds	r1, r0, r3
 8004a20:	4613      	mov	r3, r2
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	3348      	adds	r3, #72	; 0x48
 8004a2a:	443b      	add	r3, r7
 8004a2c:	3b34      	subs	r3, #52	; 0x34
 8004a2e:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8004a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d109      	bne.n	8004a4c <low_level_output+0xac>
    {
      Txbuffer[i].next = NULL;
 8004a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	3348      	adds	r3, #72	; 0x48
 8004a44:	443b      	add	r3, r7
 8004a46:	3b34      	subs	r3, #52	; 0x34
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]
    }

    i++;
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	3301      	adds	r3, #1
 8004a50:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8004a52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	643b      	str	r3, [r7, #64]	; 0x40
 8004a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1b6      	bne.n	80049cc <low_level_output+0x2c>
  }

  TxConfig.Length = p->tot_len;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	891b      	ldrh	r3, [r3, #8]
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <low_level_output+0xec>)
 8004a66:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8004a68:	4a08      	ldr	r2, [pc, #32]	; (8004a8c <low_level_output+0xec>)
 8004a6a:	f107 030c 	add.w	r3, r7, #12
 8004a6e:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8004a70:	4a06      	ldr	r2, [pc, #24]	; (8004a8c <low_level_output+0xec>)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8004a76:	2214      	movs	r2, #20
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <low_level_output+0xec>)
 8004a7a:	4805      	ldr	r0, [pc, #20]	; (8004a90 <low_level_output+0xf0>)
 8004a7c:	f7fc ffca 	bl	8001a14 <HAL_ETH_Transmit>

  return errval;
 8004a80:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3748      	adds	r7, #72	; 0x48
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200051d0 	.word	0x200051d0
 8004a90:	20005120 	.word	0x20005120

08004a94 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8004aa0:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <low_level_input+0x2c>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d105      	bne.n	8004ab4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8004aa8:	f107 030c 	add.w	r3, r7, #12
 8004aac:	4619      	mov	r1, r3
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <low_level_input+0x30>)
 8004ab0:	f7fd f844 	bl	8001b3c <HAL_ETH_ReadData>
  }

  return p;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20004fd8 	.word	0x20004fd8
 8004ac4:	20005120 	.word	0x20005120

08004ac8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f7ff ffdd 	bl	8004a94 <low_level_input>
 8004ada:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	4798      	blx	r3
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d002      	beq.n	8004af8 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f001 fe8a 	bl	800680c <pbuf_free>
      }
    }
  } while(p!=NULL);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1ea      	bne.n	8004ad4 <ethernetif_input+0xc>
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d106      	bne.n	8004b24 <ethernetif_init+0x1c>
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <ethernetif_init+0x48>)
 8004b18:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8004b1c:	490d      	ldr	r1, [pc, #52]	; (8004b54 <ethernetif_init+0x4c>)
 8004b1e:	480e      	ldr	r0, [pc, #56]	; (8004b58 <ethernetif_init+0x50>)
 8004b20:	f00b f830 	bl	800fb84 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2273      	movs	r2, #115	; 0x73
 8004b28:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2274      	movs	r2, #116	; 0x74
 8004b30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a09      	ldr	r2, [pc, #36]	; (8004b5c <ethernetif_init+0x54>)
 8004b38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a08      	ldr	r2, [pc, #32]	; (8004b60 <ethernetif_init+0x58>)
 8004b3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff fe95 	bl	8004870 <low_level_init>

  return ERR_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	08010cd0 	.word	0x08010cd0
 8004b54:	08010cec 	.word	0x08010cec
 8004b58:	08010cfc 	.word	0x08010cfc
 8004b5c:	0800dc91 	.word	0x0800dc91
 8004b60:	080049a1 	.word	0x080049a1

08004b64 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	4808      	ldr	r0, [pc, #32]	; (8004b94 <pbuf_free_custom+0x30>)
 8004b74:	f000 ffb0 	bl	8005ad8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8004b78:	4b07      	ldr	r3, [pc, #28]	; (8004b98 <pbuf_free_custom+0x34>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d105      	bne.n	8004b8c <pbuf_free_custom+0x28>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8004b80:	4b05      	ldr	r3, [pc, #20]	; (8004b98 <pbuf_free_custom+0x34>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
    RxPkt = 1 ;
 8004b86:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <pbuf_free_custom+0x38>)
 8004b88:	2201      	movs	r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	080136c8 	.word	0x080136c8
 8004b98:	20004fd8 	.word	0x20004fd8
 8004b9c:	20004fdc 	.word	0x20004fdc

08004ba0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ba4:	f7fc fcbe 	bl	8001524 <HAL_GetTick>
 8004ba8:	4603      	mov	r3, r0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_ETH_MspInit>:

/* USER CODE END 6 */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08e      	sub	sp, #56	; 0x38
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a59      	ldr	r2, [pc, #356]	; (8004d34 <HAL_ETH_MspInit+0x184>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	f040 80ac 	bne.w	8004d2c <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	623b      	str	r3, [r7, #32]
 8004bd8:	4b57      	ldr	r3, [pc, #348]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	4a56      	ldr	r2, [pc, #344]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004bde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004be2:	6313      	str	r3, [r2, #48]	; 0x30
 8004be4:	4b54      	ldr	r3, [pc, #336]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	623b      	str	r3, [r7, #32]
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf8:	4a4f      	ldr	r2, [pc, #316]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004c00:	4b4d      	ldr	r3, [pc, #308]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c08:	61fb      	str	r3, [r7, #28]
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	61bb      	str	r3, [r7, #24]
 8004c10:	4b49      	ldr	r3, [pc, #292]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c14:	4a48      	ldr	r2, [pc, #288]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c1c:	4b46      	ldr	r3, [pc, #280]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c28:	2300      	movs	r3, #0
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	4b42      	ldr	r3, [pc, #264]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	4a41      	ldr	r2, [pc, #260]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c32:	f043 0304 	orr.w	r3, r3, #4
 8004c36:	6313      	str	r3, [r2, #48]	; 0x30
 8004c38:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
 8004c48:	4b3b      	ldr	r3, [pc, #236]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c4e:	f043 0301 	orr.w	r3, r3, #1
 8004c52:	6313      	str	r3, [r2, #48]	; 0x30
 8004c54:	4b38      	ldr	r3, [pc, #224]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c60:	2300      	movs	r3, #0
 8004c62:	60fb      	str	r3, [r7, #12]
 8004c64:	4b34      	ldr	r3, [pc, #208]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	4a33      	ldr	r2, [pc, #204]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c6a:	f043 0302 	orr.w	r3, r3, #2
 8004c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004c70:	4b31      	ldr	r3, [pc, #196]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]
 8004c80:	4b2d      	ldr	r3, [pc, #180]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c84:	4a2c      	ldr	r2, [pc, #176]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8004c8c:	4b2a      	ldr	r3, [pc, #168]	; (8004d38 <HAL_ETH_MspInit+0x188>)
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c94:	60bb      	str	r3, [r7, #8]
 8004c96:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8004c98:	2332      	movs	r3, #50	; 0x32
 8004c9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004ca8:	230b      	movs	r3, #11
 8004caa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	4822      	ldr	r0, [pc, #136]	; (8004d3c <HAL_ETH_MspInit+0x18c>)
 8004cb4:	f7fd ff62 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8004cb8:	2386      	movs	r3, #134	; 0x86
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cc8:	230b      	movs	r3, #11
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	481b      	ldr	r0, [pc, #108]	; (8004d40 <HAL_ETH_MspInit+0x190>)
 8004cd4:	f7fd ff52 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004cea:	230b      	movs	r3, #11
 8004cec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004cee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	4813      	ldr	r0, [pc, #76]	; (8004d44 <HAL_ETH_MspInit+0x194>)
 8004cf6:	f7fd ff41 	bl	8002b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8004cfa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004cfe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d00:	2302      	movs	r3, #2
 8004d02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d04:	2300      	movs	r3, #0
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004d0c:	230b      	movs	r3, #11
 8004d0e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d14:	4619      	mov	r1, r3
 8004d16:	480c      	ldr	r0, [pc, #48]	; (8004d48 <HAL_ETH_MspInit+0x198>)
 8004d18:	f7fd ff30 	bl	8002b7c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	2100      	movs	r1, #0
 8004d20:	203d      	movs	r0, #61	; 0x3d
 8004d22:	f7fc fd0a 	bl	800173a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004d26:	203d      	movs	r0, #61	; 0x3d
 8004d28:	f7fc fd23 	bl	8001772 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3738      	adds	r7, #56	; 0x38
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40028000 	.word	0x40028000
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40020800 	.word	0x40020800
 8004d40:	40020000 	.word	0x40020000
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40021800 	.word	0x40021800

08004d4c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8004d50:	4802      	ldr	r0, [pc, #8]	; (8004d5c <ETH_PHY_IO_Init+0x10>)
 8004d52:	f7fd fab7 	bl	80022c4 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20005120 	.word	0x20005120

08004d60 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8004d60:	b480      	push	{r7}
 8004d62:	af00      	add	r7, sp, #0
  return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	68f9      	ldr	r1, [r7, #12]
 8004d82:	4807      	ldr	r0, [pc, #28]	; (8004da0 <ETH_PHY_IO_ReadReg+0x30>)
 8004d84:	f7fd f906 	bl	8001f94 <HAL_ETH_ReadPHYRegister>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d92:	e000      	b.n	8004d96 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20005120 	.word	0x20005120

08004da4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	4807      	ldr	r0, [pc, #28]	; (8004dd4 <ETH_PHY_IO_WriteReg+0x30>)
 8004db8:	f7fd f937 	bl	800202a <HAL_ETH_WritePHYRegister>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	e000      	b.n	8004dca <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20005120 	.word	0x20005120

08004dd8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004ddc:	f7fc fba2 	bl	8001524 <HAL_GetTick>
 8004de0:	4603      	mov	r3, r0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <ethernet_link_check_state>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b0a0      	sub	sp, #128	; 0x80
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004df0:	f107 030c 	add.w	r3, r7, #12
 8004df4:	2264      	movs	r2, #100	; 0x64
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f00a febb 	bl	800fb74 <memset>
  int32_t PHYLinkState = 0;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004e02:	2300      	movs	r3, #0
 8004e04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004e06:	2300      	movs	r3, #0
 8004e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8004e0e:	483a      	ldr	r0, [pc, #232]	; (8004ef8 <ethernet_link_check_state+0x110>)
 8004e10:	f7fc fa9b 	bl	800134a <LAN8742_GetLinkState>
 8004e14:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e1c:	089b      	lsrs	r3, r3, #2
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <ethernet_link_check_state+0x5a>
 8004e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	dc09      	bgt.n	8004e42 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8004e2e:	4833      	ldr	r0, [pc, #204]	; (8004efc <ethernet_link_check_state+0x114>)
 8004e30:	f7fc fd97 	bl	8001962 <HAL_ETH_Stop>
    netif_set_down(netif);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f001 f8d3 	bl	8005fe0 <netif_set_down>
    netif_set_link_down(netif);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f001 f936 	bl	80060ac <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8004e40:	e055      	b.n	8004eee <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d14e      	bne.n	8004eee <ethernet_link_check_state+0x106>
 8004e50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	dd4b      	ble.n	8004eee <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8004e56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e58:	3b02      	subs	r3, #2
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d82a      	bhi.n	8004eb4 <ethernet_link_check_state+0xcc>
 8004e5e:	a201      	add	r2, pc, #4	; (adr r2, 8004e64 <ethernet_link_check_state+0x7c>)
 8004e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e64:	08004e75 	.word	0x08004e75
 8004e68:	08004e87 	.word	0x08004e87
 8004e6c:	08004e97 	.word	0x08004e97
 8004e70:	08004ea7 	.word	0x08004ea7
      duplex = ETH_FULLDUPLEX_MODE;
 8004e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e80:	2301      	movs	r3, #1
 8004e82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e84:	e017      	b.n	8004eb6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8004e8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004e90:	2301      	movs	r3, #1
 8004e92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004e94:	e00f      	b.n	8004eb6 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8004e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e9a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004ea4:	e007      	b.n	8004eb6 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8004eb2:	e000      	b.n	8004eb6 <ethernet_link_check_state+0xce>
      break;
 8004eb4:	bf00      	nop
    if(linkchanged)
 8004eb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d018      	beq.n	8004eee <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004ebc:	f107 030c 	add.w	r3, r7, #12
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	480e      	ldr	r0, [pc, #56]	; (8004efc <ethernet_link_check_state+0x114>)
 8004ec4:	f7fd f8fa 	bl	80020bc <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004ec8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eca:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8004ecc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ece:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4809      	ldr	r0, [pc, #36]	; (8004efc <ethernet_link_check_state+0x114>)
 8004ed8:	f7fd f9da 	bl	8002290 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8004edc:	4807      	ldr	r0, [pc, #28]	; (8004efc <ethernet_link_check_state+0x114>)
 8004ede:	f7fc fce1 	bl	80018a4 <HAL_ETH_Start>
      netif_set_up(netif);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f001 f810 	bl	8005f08 <netif_set_up>
      netif_set_link_up(netif);
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f001 f8ab 	bl	8006044 <netif_set_link_up>
}
 8004eee:	bf00      	nop
 8004ef0:	3780      	adds	r7, #128	; 0x80
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20005208 	.word	0x20005208
 8004efc:	20005120 	.word	0x20005120

08004f00 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af02      	add	r7, sp, #8
 8004f06:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */

  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8004f08:	4812      	ldr	r0, [pc, #72]	; (8004f54 <HAL_ETH_RxAllocateCallback+0x54>)
 8004f0a:	f000 fd77 	bl	80059fc <memp_malloc_pool>
 8004f0e:	60f8      	str	r0, [r7, #12]
  if (p)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d014      	beq.n	8004f40 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f103 0220 	add.w	r2, r3, #32
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a0d      	ldr	r2, [pc, #52]	; (8004f58 <HAL_ETH_RxAllocateCallback+0x58>)
 8004f24:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f2e:	9201      	str	r2, [sp, #4]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2241      	movs	r2, #65	; 0x41
 8004f36:	2100      	movs	r1, #0
 8004f38:	2000      	movs	r0, #0
 8004f3a:	f001 faad 	bl	8006498 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8004f3e:	e005      	b.n	8004f4c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_ETH_RxAllocateCallback+0x5c>)
 8004f42:	2201      	movs	r2, #1
 8004f44:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	080136c8 	.word	0x080136c8
 8004f58:	08004b65 	.word	0x08004b65
 8004f5c:	20004fd8 	.word	0x20004fd8

08004f60 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3b20      	subs	r3, #32
 8004f7e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d103      	bne.n	8004fa2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	69fa      	ldr	r2, [r7, #28]
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	e003      	b.n	8004faa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69fa      	ldr	r2, [r7, #28]
 8004fa8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	61fb      	str	r3, [r7, #28]
 8004fb6:	e009      	b.n	8004fcc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	891a      	ldrh	r2, [r3, #8]
 8004fbc:	887b      	ldrh	r3, [r7, #2]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	61fb      	str	r3, [r7, #28]
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f2      	bne.n	8004fb8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8004fd2:	bf00      	nop
 8004fd4:	bf00      	nop
 8004fd6:	3724      	adds	r7, #36	; 0x24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b083      	sub	sp, #12
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8004fea:	88fb      	ldrh	r3, [r7, #6]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	b21a      	sxth	r2, r3
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	b21b      	sxth	r3, r3
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	b21b      	sxth	r3, r3
 8004ffc:	b29b      	uxth	r3, r3
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	061a      	lsls	r2, r3, #24
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	0a1b      	lsrs	r3, r3, #8
 8005024:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	0e1b      	lsrs	r3, r3, #24
 800502e:	4313      	orrs	r3, r2
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800503c:	b480      	push	{r7}
 800503e:	b089      	sub	sp, #36	; 0x24
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00d      	beq.n	800507c <lwip_standard_chksum+0x40>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	dd0a      	ble.n	800507c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8005066:	69fa      	ldr	r2, [r7, #28]
 8005068:	1c53      	adds	r3, r2, #1
 800506a:	61fb      	str	r3, [r7, #28]
 800506c:	f107 030e 	add.w	r3, r7, #14
 8005070:	3301      	adds	r3, #1
 8005072:	7812      	ldrb	r2, [r2, #0]
 8005074:	701a      	strb	r2, [r3, #0]
    len--;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	3b01      	subs	r3, #1
 800507a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 8005080:	e00a      	b.n	8005098 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	1c9a      	adds	r2, r3, #2
 8005086:	61ba      	str	r2, [r7, #24]
 8005088:	881b      	ldrh	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	4413      	add	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    len -= 2;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3b02      	subs	r3, #2
 8005096:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b01      	cmp	r3, #1
 800509c:	dcf1      	bgt.n	8005082 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	dd04      	ble.n	80050ae <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80050a4:	f107 030e 	add.w	r3, r7, #14
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	7812      	ldrb	r2, [r2, #0]
 80050ac:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80050ae:	89fb      	ldrh	r3, [r7, #14]
 80050b0:	461a      	mov	r2, r3
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4413      	add	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	0c1a      	lsrs	r2, r3, #16
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	4413      	add	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	0c1a      	lsrs	r2, r3, #16
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	4413      	add	r3, r2
 80050ce:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d007      	beq.n	80050e6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	021b      	lsls	r3, r3, #8
 80050da:	b29a      	uxth	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	0a1b      	lsrs	r3, r3, #8
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	b29b      	uxth	r3, r3
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3724      	adds	r7, #36	; 0x24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	460b      	mov	r3, r1
 8005100:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8005102:	887b      	ldrh	r3, [r7, #2]
 8005104:	4619      	mov	r1, r3
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f7ff ff98 	bl	800503c <lwip_standard_chksum>
 800510c:	4603      	mov	r3, r0
 800510e:	43db      	mvns	r3, r3
 8005110:	b29b      	uxth	r3, r3
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e02b      	b.n	8005188 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	895b      	ldrh	r3, [r3, #10]
 8005138:	4619      	mov	r1, r3
 800513a:	4610      	mov	r0, r2
 800513c:	f7ff ff7e 	bl	800503c <lwip_standard_chksum>
 8005140:	4603      	mov	r3, r0
 8005142:	461a      	mov	r2, r3
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	4413      	add	r3, r2
 8005148:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	0c1a      	lsrs	r2, r3, #16
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	b29b      	uxth	r3, r3
 8005152:	4413      	add	r3, r2
 8005154:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	895b      	ldrh	r3, [r3, #10]
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00e      	beq.n	8005182 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	bf0c      	ite	eq
 800516a:	2301      	moveq	r3, #1
 800516c:	2300      	movne	r3, #0
 800516e:	b2db      	uxtb	r3, r3
 8005170:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	b29a      	uxth	r2, r3
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	0a1b      	lsrs	r3, r3, #8
 800517c:	b2db      	uxtb	r3, r3
 800517e:	4313      	orrs	r3, r2
 8005180:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1d0      	bne.n	8005130 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	b29a      	uxth	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	0a1b      	lsrs	r3, r3, #8
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	4313      	orrs	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	43db      	mvns	r3, r3
 80051aa:	b29b      	uxth	r3, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80051ba:	2300      	movs	r3, #0
 80051bc:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 80051be:	f000 f8d5 	bl	800536c <mem_init>
  memp_init();
 80051c2:	f000 fbd7 	bl	8005974 <memp_init>
  pbuf_init();
  netif_init();
 80051c6:	f000 fcd5 	bl	8005b74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80051ca:	f007 ff5b 	bl	800d084 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80051ce:	f001 fdbb 	bl	8006d48 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80051d2:	f007 fecd 	bl	800cf70 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	4603      	mov	r3, r0
 80051e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <ptr_to_mem+0x20>)
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	88fb      	ldrh	r3, [r7, #6]
 80051f0:	4413      	add	r3, r2
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20005240 	.word	0x20005240

08005204 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800520c:	4b05      	ldr	r3, [pc, #20]	; (8005224 <mem_to_ptr+0x20>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	b29b      	uxth	r3, r3
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20005240 	.word	0x20005240

08005228 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8005230:	4b45      	ldr	r3, [pc, #276]	; (8005348 <plug_holes+0x120>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	d206      	bcs.n	8005248 <plug_holes+0x20>
 800523a:	4b44      	ldr	r3, [pc, #272]	; (800534c <plug_holes+0x124>)
 800523c:	f240 12df 	movw	r2, #479	; 0x1df
 8005240:	4943      	ldr	r1, [pc, #268]	; (8005350 <plug_holes+0x128>)
 8005242:	4844      	ldr	r0, [pc, #272]	; (8005354 <plug_holes+0x12c>)
 8005244:	f00a fc9e 	bl	800fb84 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8005248:	4b43      	ldr	r3, [pc, #268]	; (8005358 <plug_holes+0x130>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	429a      	cmp	r2, r3
 8005250:	d306      	bcc.n	8005260 <plug_holes+0x38>
 8005252:	4b3e      	ldr	r3, [pc, #248]	; (800534c <plug_holes+0x124>)
 8005254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8005258:	4940      	ldr	r1, [pc, #256]	; (800535c <plug_holes+0x134>)
 800525a:	483e      	ldr	r0, [pc, #248]	; (8005354 <plug_holes+0x12c>)
 800525c:	f00a fc92 	bl	800fb84 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	791b      	ldrb	r3, [r3, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <plug_holes+0x4e>
 8005268:	4b38      	ldr	r3, [pc, #224]	; (800534c <plug_holes+0x124>)
 800526a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800526e:	493c      	ldr	r1, [pc, #240]	; (8005360 <plug_holes+0x138>)
 8005270:	4838      	ldr	r0, [pc, #224]	; (8005354 <plug_holes+0x12c>)
 8005272:	f00a fc87 	bl	800fb84 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800527e:	d906      	bls.n	800528e <plug_holes+0x66>
 8005280:	4b32      	ldr	r3, [pc, #200]	; (800534c <plug_holes+0x124>)
 8005282:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005286:	4937      	ldr	r1, [pc, #220]	; (8005364 <plug_holes+0x13c>)
 8005288:	4832      	ldr	r0, [pc, #200]	; (8005354 <plug_holes+0x12c>)
 800528a:	f00a fc7b 	bl	800fb84 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	881b      	ldrh	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ffa4 	bl	80051e0 <ptr_to_mem>
 8005298:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d024      	beq.n	80052ec <plug_holes+0xc4>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	791b      	ldrb	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d120      	bne.n	80052ec <plug_holes+0xc4>
 80052aa:	4b2b      	ldr	r3, [pc, #172]	; (8005358 <plug_holes+0x130>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d01b      	beq.n	80052ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80052b4:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <plug_holes+0x140>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d102      	bne.n	80052c4 <plug_holes+0x9c>
      lfree = mem;
 80052be:	4a2a      	ldr	r2, [pc, #168]	; (8005368 <plug_holes+0x140>)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	881a      	ldrh	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	881b      	ldrh	r3, [r3, #0]
 80052d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80052d4:	d00a      	beq.n	80052ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f7ff ff80 	bl	80051e0 <ptr_to_mem>
 80052e0:	4604      	mov	r4, r0
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff8e 	bl	8005204 <mem_to_ptr>
 80052e8:	4603      	mov	r3, r0
 80052ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	885b      	ldrh	r3, [r3, #2]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff ff75 	bl	80051e0 <ptr_to_mem>
 80052f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d01f      	beq.n	8005340 <plug_holes+0x118>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	791b      	ldrb	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d11b      	bne.n	8005340 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8005308:	4b17      	ldr	r3, [pc, #92]	; (8005368 <plug_holes+0x140>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	429a      	cmp	r2, r3
 8005310:	d102      	bne.n	8005318 <plug_holes+0xf0>
      lfree = pmem;
 8005312:	4a15      	ldr	r2, [pc, #84]	; (8005368 <plug_holes+0x140>)
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	881a      	ldrh	r2, [r3, #0]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005328:	d00a      	beq.n	8005340 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	881b      	ldrh	r3, [r3, #0]
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff ff56 	bl	80051e0 <ptr_to_mem>
 8005334:	4604      	mov	r4, r0
 8005336:	68b8      	ldr	r0, [r7, #8]
 8005338:	f7ff ff64 	bl	8005204 <mem_to_ptr>
 800533c:	4603      	mov	r3, r0
 800533e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8005340:	bf00      	nop
 8005342:	3714      	adds	r7, #20
 8005344:	46bd      	mov	sp, r7
 8005346:	bd90      	pop	{r4, r7, pc}
 8005348:	20005240 	.word	0x20005240
 800534c:	08010d24 	.word	0x08010d24
 8005350:	08010d54 	.word	0x08010d54
 8005354:	08010d6c 	.word	0x08010d6c
 8005358:	20005244 	.word	0x20005244
 800535c:	08010d94 	.word	0x08010d94
 8005360:	08010db0 	.word	0x08010db0
 8005364:	08010dcc 	.word	0x08010dcc
 8005368:	20005248 	.word	0x20005248

0800536c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8005372:	4b16      	ldr	r3, [pc, #88]	; (80053cc <mem_init+0x60>)
 8005374:	4a16      	ldr	r2, [pc, #88]	; (80053d0 <mem_init+0x64>)
 8005376:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8005378:	4b14      	ldr	r3, [pc, #80]	; (80053cc <mem_init+0x60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005384:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8005392:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005396:	f7ff ff23 	bl	80051e0 <ptr_to_mem>
 800539a:	4603      	mov	r3, r0
 800539c:	4a0d      	ldr	r2, [pc, #52]	; (80053d4 <mem_init+0x68>)
 800539e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <mem_init+0x68>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2201      	movs	r2, #1
 80053a6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80053a8:	4b0a      	ldr	r3, [pc, #40]	; (80053d4 <mem_init+0x68>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80053b0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80053b2:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <mem_init+0x68>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80053ba:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80053bc:	4b03      	ldr	r3, [pc, #12]	; (80053cc <mem_init+0x60>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <mem_init+0x6c>)
 80053c2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20005240 	.word	0x20005240
 80053d0:	30044000 	.word	0x30044000
 80053d4:	20005244 	.word	0x20005244
 80053d8:	20005248 	.word	0x20005248

080053dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ff0d 	bl	8005204 <mem_to_ptr>
 80053ea:	4603      	mov	r3, r0
 80053ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	881b      	ldrh	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7ff fef4 	bl	80051e0 <ptr_to_mem>
 80053f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	885b      	ldrh	r3, [r3, #2]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff feee 	bl	80051e0 <ptr_to_mem>
 8005404:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800540e:	d818      	bhi.n	8005442 <mem_link_valid+0x66>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	885b      	ldrh	r3, [r3, #2]
 8005414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005418:	d813      	bhi.n	8005442 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800541e:	8afa      	ldrh	r2, [r7, #22]
 8005420:	429a      	cmp	r2, r3
 8005422:	d004      	beq.n	800542e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	8afa      	ldrh	r2, [r7, #22]
 800542a:	429a      	cmp	r2, r3
 800542c:	d109      	bne.n	8005442 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800542e:	4b08      	ldr	r3, [pc, #32]	; (8005450 <mem_link_valid+0x74>)
 8005430:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	429a      	cmp	r2, r3
 8005436:	d006      	beq.n	8005446 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	885b      	ldrh	r3, [r3, #2]
 800543c:	8afa      	ldrh	r2, [r7, #22]
 800543e:	429a      	cmp	r2, r3
 8005440:	d001      	beq.n	8005446 <mem_link_valid+0x6a>
    return 0;
 8005442:	2300      	movs	r3, #0
 8005444:	e000      	b.n	8005448 <mem_link_valid+0x6c>
  }
  return 1;
 8005446:	2301      	movs	r3, #1
}
 8005448:	4618      	mov	r0, r3
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	20005244 	.word	0x20005244

08005454 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d04c      	beq.n	80054fc <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f003 0303 	and.w	r3, r3, #3
 8005468:	2b00      	cmp	r3, #0
 800546a:	d007      	beq.n	800547c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800546c:	4b25      	ldr	r3, [pc, #148]	; (8005504 <mem_free+0xb0>)
 800546e:	f240 2273 	movw	r2, #627	; 0x273
 8005472:	4925      	ldr	r1, [pc, #148]	; (8005508 <mem_free+0xb4>)
 8005474:	4825      	ldr	r0, [pc, #148]	; (800550c <mem_free+0xb8>)
 8005476:	f00a fb85 	bl	800fb84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800547a:	e040      	b.n	80054fe <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3b08      	subs	r3, #8
 8005480:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8005482:	4b23      	ldr	r3, [pc, #140]	; (8005510 <mem_free+0xbc>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d306      	bcc.n	800549a <mem_free+0x46>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f103 020c 	add.w	r2, r3, #12
 8005492:	4b20      	ldr	r3, [pc, #128]	; (8005514 <mem_free+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d907      	bls.n	80054aa <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800549a:	4b1a      	ldr	r3, [pc, #104]	; (8005504 <mem_free+0xb0>)
 800549c:	f240 227f 	movw	r2, #639	; 0x27f
 80054a0:	491d      	ldr	r1, [pc, #116]	; (8005518 <mem_free+0xc4>)
 80054a2:	481a      	ldr	r0, [pc, #104]	; (800550c <mem_free+0xb8>)
 80054a4:	f00a fb6e 	bl	800fb84 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054a8:	e029      	b.n	80054fe <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	791b      	ldrb	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80054b2:	4b14      	ldr	r3, [pc, #80]	; (8005504 <mem_free+0xb0>)
 80054b4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80054b8:	4918      	ldr	r1, [pc, #96]	; (800551c <mem_free+0xc8>)
 80054ba:	4814      	ldr	r0, [pc, #80]	; (800550c <mem_free+0xb8>)
 80054bc:	f00a fb62 	bl	800fb84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054c0:	e01d      	b.n	80054fe <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f7ff ff8a 	bl	80053dc <mem_link_valid>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d107      	bne.n	80054de <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <mem_free+0xb0>)
 80054d0:	f240 2295 	movw	r2, #661	; 0x295
 80054d4:	4912      	ldr	r1, [pc, #72]	; (8005520 <mem_free+0xcc>)
 80054d6:	480d      	ldr	r0, [pc, #52]	; (800550c <mem_free+0xb8>)
 80054d8:	f00a fb54 	bl	800fb84 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80054dc:	e00f      	b.n	80054fe <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80054e4:	4b0f      	ldr	r3, [pc, #60]	; (8005524 <mem_free+0xd0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d202      	bcs.n	80054f4 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <mem_free+0xd0>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80054f4:	68f8      	ldr	r0, [r7, #12]
 80054f6:	f7ff fe97 	bl	8005228 <plug_holes>
 80054fa:	e000      	b.n	80054fe <mem_free+0xaa>
    return;
 80054fc:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	08010d24 	.word	0x08010d24
 8005508:	08010df8 	.word	0x08010df8
 800550c:	08010d6c 	.word	0x08010d6c
 8005510:	20005240 	.word	0x20005240
 8005514:	20005244 	.word	0x20005244
 8005518:	08010e1c 	.word	0x08010e1c
 800551c:	08010e38 	.word	0x08010e38
 8005520:	08010e60 	.word	0x08010e60
 8005524:	20005248 	.word	0x20005248

08005528 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	460b      	mov	r3, r1
 8005532:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	3303      	adds	r3, #3
 8005538:	b29b      	uxth	r3, r3
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8005540:	8bfb      	ldrh	r3, [r7, #30]
 8005542:	2b0b      	cmp	r3, #11
 8005544:	d801      	bhi.n	800554a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8005546:	230c      	movs	r3, #12
 8005548:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800554a:	8bfb      	ldrh	r3, [r7, #30]
 800554c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005550:	d803      	bhi.n	800555a <mem_trim+0x32>
 8005552:	8bfa      	ldrh	r2, [r7, #30]
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	429a      	cmp	r2, r3
 8005558:	d201      	bcs.n	800555e <mem_trim+0x36>
    return NULL;
 800555a:	2300      	movs	r3, #0
 800555c:	e0cc      	b.n	80056f8 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800555e:	4b68      	ldr	r3, [pc, #416]	; (8005700 <mem_trim+0x1d8>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	429a      	cmp	r2, r3
 8005566:	d304      	bcc.n	8005572 <mem_trim+0x4a>
 8005568:	4b66      	ldr	r3, [pc, #408]	; (8005704 <mem_trim+0x1dc>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	687a      	ldr	r2, [r7, #4]
 800556e:	429a      	cmp	r2, r3
 8005570:	d306      	bcc.n	8005580 <mem_trim+0x58>
 8005572:	4b65      	ldr	r3, [pc, #404]	; (8005708 <mem_trim+0x1e0>)
 8005574:	f240 22d1 	movw	r2, #721	; 0x2d1
 8005578:	4964      	ldr	r1, [pc, #400]	; (800570c <mem_trim+0x1e4>)
 800557a:	4865      	ldr	r0, [pc, #404]	; (8005710 <mem_trim+0x1e8>)
 800557c:	f00a fb02 	bl	800fb84 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8005580:	4b5f      	ldr	r3, [pc, #380]	; (8005700 <mem_trim+0x1d8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	429a      	cmp	r2, r3
 8005588:	d304      	bcc.n	8005594 <mem_trim+0x6c>
 800558a:	4b5e      	ldr	r3, [pc, #376]	; (8005704 <mem_trim+0x1dc>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	429a      	cmp	r2, r3
 8005592:	d301      	bcc.n	8005598 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	e0af      	b.n	80056f8 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3b08      	subs	r3, #8
 800559c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800559e:	69b8      	ldr	r0, [r7, #24]
 80055a0:	f7ff fe30 	bl	8005204 <mem_to_ptr>
 80055a4:	4603      	mov	r3, r0
 80055a6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	881a      	ldrh	r2, [r3, #0]
 80055ac:	8afb      	ldrh	r3, [r7, #22]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	3b08      	subs	r3, #8
 80055b4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80055b6:	8bfa      	ldrh	r2, [r7, #30]
 80055b8:	8abb      	ldrh	r3, [r7, #20]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d906      	bls.n	80055cc <mem_trim+0xa4>
 80055be:	4b52      	ldr	r3, [pc, #328]	; (8005708 <mem_trim+0x1e0>)
 80055c0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80055c4:	4953      	ldr	r1, [pc, #332]	; (8005714 <mem_trim+0x1ec>)
 80055c6:	4852      	ldr	r0, [pc, #328]	; (8005710 <mem_trim+0x1e8>)
 80055c8:	f00a fadc 	bl	800fb84 <iprintf>
  if (newsize > size) {
 80055cc:	8bfa      	ldrh	r2, [r7, #30]
 80055ce:	8abb      	ldrh	r3, [r7, #20]
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d901      	bls.n	80055d8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80055d4:	2300      	movs	r3, #0
 80055d6:	e08f      	b.n	80056f8 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80055d8:	8bfa      	ldrh	r2, [r7, #30]
 80055da:	8abb      	ldrh	r3, [r7, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d101      	bne.n	80055e4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	e089      	b.n	80056f8 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff fdf9 	bl	80051e0 <ptr_to_mem>
 80055ee:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	791b      	ldrb	r3, [r3, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d13f      	bne.n	8005678 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005600:	d106      	bne.n	8005610 <mem_trim+0xe8>
 8005602:	4b41      	ldr	r3, [pc, #260]	; (8005708 <mem_trim+0x1e0>)
 8005604:	f240 22f5 	movw	r2, #757	; 0x2f5
 8005608:	4943      	ldr	r1, [pc, #268]	; (8005718 <mem_trim+0x1f0>)
 800560a:	4841      	ldr	r0, [pc, #260]	; (8005710 <mem_trim+0x1e8>)
 800560c:	f00a faba 	bl	800fb84 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005616:	8afa      	ldrh	r2, [r7, #22]
 8005618:	8bfb      	ldrh	r3, [r7, #30]
 800561a:	4413      	add	r3, r2
 800561c:	b29b      	uxth	r3, r3
 800561e:	3308      	adds	r3, #8
 8005620:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8005622:	4b3e      	ldr	r3, [pc, #248]	; (800571c <mem_trim+0x1f4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	d106      	bne.n	800563a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800562c:	89fb      	ldrh	r3, [r7, #14]
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff fdd6 	bl	80051e0 <ptr_to_mem>
 8005634:	4603      	mov	r3, r0
 8005636:	4a39      	ldr	r2, [pc, #228]	; (800571c <mem_trim+0x1f4>)
 8005638:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fdcf 	bl	80051e0 <ptr_to_mem>
 8005642:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	2200      	movs	r2, #0
 8005648:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	89ba      	ldrh	r2, [r7, #12]
 800564e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	8afa      	ldrh	r2, [r7, #22]
 8005654:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	89fa      	ldrh	r2, [r7, #14]
 800565a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005664:	d047      	beq.n	80056f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f7ff fdb8 	bl	80051e0 <ptr_to_mem>
 8005670:	4602      	mov	r2, r0
 8005672:	89fb      	ldrh	r3, [r7, #14]
 8005674:	8053      	strh	r3, [r2, #2]
 8005676:	e03e      	b.n	80056f6 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8005678:	8bfb      	ldrh	r3, [r7, #30]
 800567a:	f103 0214 	add.w	r2, r3, #20
 800567e:	8abb      	ldrh	r3, [r7, #20]
 8005680:	429a      	cmp	r2, r3
 8005682:	d838      	bhi.n	80056f6 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8005684:	8afa      	ldrh	r2, [r7, #22]
 8005686:	8bfb      	ldrh	r3, [r7, #30]
 8005688:	4413      	add	r3, r2
 800568a:	b29b      	uxth	r3, r3
 800568c:	3308      	adds	r3, #8
 800568e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	881b      	ldrh	r3, [r3, #0]
 8005694:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005698:	d106      	bne.n	80056a8 <mem_trim+0x180>
 800569a:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <mem_trim+0x1e0>)
 800569c:	f240 3216 	movw	r2, #790	; 0x316
 80056a0:	491d      	ldr	r1, [pc, #116]	; (8005718 <mem_trim+0x1f0>)
 80056a2:	481b      	ldr	r0, [pc, #108]	; (8005710 <mem_trim+0x1e8>)
 80056a4:	f00a fa6e 	bl	800fb84 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80056a8:	89fb      	ldrh	r3, [r7, #14]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff fd98 	bl	80051e0 <ptr_to_mem>
 80056b0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80056b2:	4b1a      	ldr	r3, [pc, #104]	; (800571c <mem_trim+0x1f4>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d202      	bcs.n	80056c2 <mem_trim+0x19a>
      lfree = mem2;
 80056bc:	4a17      	ldr	r2, [pc, #92]	; (800571c <mem_trim+0x1f4>)
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	2200      	movs	r2, #0
 80056c6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	8afa      	ldrh	r2, [r7, #22]
 80056d4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	89fa      	ldrh	r2, [r7, #14]
 80056da:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80056e4:	d007      	beq.n	80056f6 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fd78 	bl	80051e0 <ptr_to_mem>
 80056f0:	4602      	mov	r2, r0
 80056f2:	89fb      	ldrh	r3, [r7, #14]
 80056f4:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 80056f6:	687b      	ldr	r3, [r7, #4]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3720      	adds	r7, #32
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20005240 	.word	0x20005240
 8005704:	20005244 	.word	0x20005244
 8005708:	08010d24 	.word	0x08010d24
 800570c:	08010e94 	.word	0x08010e94
 8005710:	08010d6c 	.word	0x08010d6c
 8005714:	08010eac 	.word	0x08010eac
 8005718:	08010ecc 	.word	0x08010ecc
 800571c:	20005248 	.word	0x20005248

08005720 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b088      	sub	sp, #32
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <mem_malloc+0x14>
    return NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	e0d9      	b.n	80058e8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	3303      	adds	r3, #3
 8005738:	b29b      	uxth	r3, r3
 800573a:	f023 0303 	bic.w	r3, r3, #3
 800573e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8005740:	8bbb      	ldrh	r3, [r7, #28]
 8005742:	2b0b      	cmp	r3, #11
 8005744:	d801      	bhi.n	800574a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8005746:	230c      	movs	r3, #12
 8005748:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800574a:	8bbb      	ldrh	r3, [r7, #28]
 800574c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005750:	d803      	bhi.n	800575a <mem_malloc+0x3a>
 8005752:	8bba      	ldrh	r2, [r7, #28]
 8005754:	88fb      	ldrh	r3, [r7, #6]
 8005756:	429a      	cmp	r2, r3
 8005758:	d201      	bcs.n	800575e <mem_malloc+0x3e>
    return NULL;
 800575a:	2300      	movs	r3, #0
 800575c:	e0c4      	b.n	80058e8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800575e:	4b64      	ldr	r3, [pc, #400]	; (80058f0 <mem_malloc+0x1d0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fd4e 	bl	8005204 <mem_to_ptr>
 8005768:	4603      	mov	r3, r0
 800576a:	83fb      	strh	r3, [r7, #30]
 800576c:	e0b4      	b.n	80058d8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800576e:	8bfb      	ldrh	r3, [r7, #30]
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fd35 	bl	80051e0 <ptr_to_mem>
 8005776:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	791b      	ldrb	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	f040 80a4 	bne.w	80058ca <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	881b      	ldrh	r3, [r3, #0]
 8005786:	461a      	mov	r2, r3
 8005788:	8bfb      	ldrh	r3, [r7, #30]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f1a3 0208 	sub.w	r2, r3, #8
 8005790:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8005792:	429a      	cmp	r2, r3
 8005794:	f0c0 8099 	bcc.w	80058ca <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	461a      	mov	r2, r3
 800579e:	8bfb      	ldrh	r3, [r7, #30]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f1a3 0208 	sub.w	r2, r3, #8
 80057a6:	8bbb      	ldrh	r3, [r7, #28]
 80057a8:	3314      	adds	r3, #20
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d333      	bcc.n	8005816 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80057ae:	8bfa      	ldrh	r2, [r7, #30]
 80057b0:	8bbb      	ldrh	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3308      	adds	r3, #8
 80057b8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80057ba:	8a7b      	ldrh	r3, [r7, #18]
 80057bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80057c0:	d106      	bne.n	80057d0 <mem_malloc+0xb0>
 80057c2:	4b4c      	ldr	r3, [pc, #304]	; (80058f4 <mem_malloc+0x1d4>)
 80057c4:	f240 3287 	movw	r2, #903	; 0x387
 80057c8:	494b      	ldr	r1, [pc, #300]	; (80058f8 <mem_malloc+0x1d8>)
 80057ca:	484c      	ldr	r0, [pc, #304]	; (80058fc <mem_malloc+0x1dc>)
 80057cc:	f00a f9da 	bl	800fb84 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80057d0:	8a7b      	ldrh	r3, [r7, #18]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff fd04 	bl	80051e0 <ptr_to_mem>
 80057d8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	881a      	ldrh	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8bfa      	ldrh	r2, [r7, #30]
 80057ec:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	8a7a      	ldrh	r2, [r7, #18]
 80057f2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2201      	movs	r2, #1
 80057f8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8005802:	d00b      	beq.n	800581c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f7ff fce9 	bl	80051e0 <ptr_to_mem>
 800580e:	4602      	mov	r2, r0
 8005810:	8a7b      	ldrh	r3, [r7, #18]
 8005812:	8053      	strh	r3, [r2, #2]
 8005814:	e002      	b.n	800581c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2201      	movs	r2, #1
 800581a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800581c:	4b34      	ldr	r3, [pc, #208]	; (80058f0 <mem_malloc+0x1d0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	429a      	cmp	r2, r3
 8005824:	d127      	bne.n	8005876 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8005826:	4b32      	ldr	r3, [pc, #200]	; (80058f0 <mem_malloc+0x1d0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800582c:	e005      	b.n	800583a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff fcd4 	bl	80051e0 <ptr_to_mem>
 8005838:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	791b      	ldrb	r3, [r3, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <mem_malloc+0x12c>
 8005842:	4b2f      	ldr	r3, [pc, #188]	; (8005900 <mem_malloc+0x1e0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69ba      	ldr	r2, [r7, #24]
 8005848:	429a      	cmp	r2, r3
 800584a:	d1f0      	bne.n	800582e <mem_malloc+0x10e>
          }
          lfree = cur;
 800584c:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <mem_malloc+0x1d0>)
 800584e:	69bb      	ldr	r3, [r7, #24]
 8005850:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8005852:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <mem_malloc+0x1d0>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <mem_malloc+0x1e0>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d00b      	beq.n	8005876 <mem_malloc+0x156>
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <mem_malloc+0x1d0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <mem_malloc+0x156>
 8005868:	4b22      	ldr	r3, [pc, #136]	; (80058f4 <mem_malloc+0x1d4>)
 800586a:	f240 32b5 	movw	r2, #949	; 0x3b5
 800586e:	4925      	ldr	r1, [pc, #148]	; (8005904 <mem_malloc+0x1e4>)
 8005870:	4822      	ldr	r0, [pc, #136]	; (80058fc <mem_malloc+0x1dc>)
 8005872:	f00a f987 	bl	800fb84 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8005876:	8bba      	ldrh	r2, [r7, #28]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	4413      	add	r3, r2
 800587c:	3308      	adds	r3, #8
 800587e:	4a20      	ldr	r2, [pc, #128]	; (8005900 <mem_malloc+0x1e0>)
 8005880:	6812      	ldr	r2, [r2, #0]
 8005882:	4293      	cmp	r3, r2
 8005884:	d906      	bls.n	8005894 <mem_malloc+0x174>
 8005886:	4b1b      	ldr	r3, [pc, #108]	; (80058f4 <mem_malloc+0x1d4>)
 8005888:	f240 32b9 	movw	r2, #953	; 0x3b9
 800588c:	491e      	ldr	r1, [pc, #120]	; (8005908 <mem_malloc+0x1e8>)
 800588e:	481b      	ldr	r0, [pc, #108]	; (80058fc <mem_malloc+0x1dc>)
 8005890:	f00a f978 	bl	800fb84 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <mem_malloc+0x18c>
 800589e:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <mem_malloc+0x1d4>)
 80058a0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80058a4:	4919      	ldr	r1, [pc, #100]	; (800590c <mem_malloc+0x1ec>)
 80058a6:	4815      	ldr	r0, [pc, #84]	; (80058fc <mem_malloc+0x1dc>)
 80058a8:	f00a f96c 	bl	800fb84 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	f003 0303 	and.w	r3, r3, #3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d006      	beq.n	80058c4 <mem_malloc+0x1a4>
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <mem_malloc+0x1d4>)
 80058b8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80058bc:	4914      	ldr	r1, [pc, #80]	; (8005910 <mem_malloc+0x1f0>)
 80058be:	480f      	ldr	r0, [pc, #60]	; (80058fc <mem_malloc+0x1dc>)
 80058c0:	f00a f960 	bl	800fb84 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	3308      	adds	r3, #8
 80058c8:	e00e      	b.n	80058e8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80058ca:	8bfb      	ldrh	r3, [r7, #30]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff fc87 	bl	80051e0 <ptr_to_mem>
 80058d2:	4603      	mov	r3, r0
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80058d8:	8bfa      	ldrh	r2, [r7, #30]
 80058da:	8bbb      	ldrh	r3, [r7, #28]
 80058dc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80058e0:	429a      	cmp	r2, r3
 80058e2:	f4ff af44 	bcc.w	800576e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	20005248 	.word	0x20005248
 80058f4:	08010d24 	.word	0x08010d24
 80058f8:	08010ecc 	.word	0x08010ecc
 80058fc:	08010d6c 	.word	0x08010d6c
 8005900:	20005244 	.word	0x20005244
 8005904:	08010ee0 	.word	0x08010ee0
 8005908:	08010efc 	.word	0x08010efc
 800590c:	08010f2c 	.word	0x08010f2c
 8005910:	08010f5c 	.word	0x08010f5c

08005914 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8005914:	b480      	push	{r7}
 8005916:	b085      	sub	sp, #20
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	3303      	adds	r3, #3
 800592a:	f023 0303 	bic.w	r3, r3, #3
 800592e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]
 8005934:	e011      	b.n	800595a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4413      	add	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	3301      	adds	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	885b      	ldrh	r3, [r3, #2]
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4293      	cmp	r3, r2
 8005964:	dbe7      	blt.n	8005936 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8005966:	bf00      	nop
 8005968:	bf00      	nop
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800597a:	2300      	movs	r3, #0
 800597c:	80fb      	strh	r3, [r7, #6]
 800597e:	e009      	b.n	8005994 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	4a08      	ldr	r2, [pc, #32]	; (80059a4 <memp_init+0x30>)
 8005984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ffc3 	bl	8005914 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	3301      	adds	r3, #1
 8005992:	80fb      	strh	r3, [r7, #6]
 8005994:	88fb      	ldrh	r3, [r7, #6]
 8005996:	2b08      	cmp	r3, #8
 8005998:	d9f2      	bls.n	8005980 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	08013740 	.word	0x08013740

080059a8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d012      	beq.n	80059e4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6812      	ldr	r2, [r2, #0]
 80059c6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d006      	beq.n	80059e0 <do_memp_malloc_pool+0x38>
 80059d2:	4b07      	ldr	r3, [pc, #28]	; (80059f0 <do_memp_malloc_pool+0x48>)
 80059d4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80059d8:	4906      	ldr	r1, [pc, #24]	; (80059f4 <do_memp_malloc_pool+0x4c>)
 80059da:	4807      	ldr	r0, [pc, #28]	; (80059f8 <do_memp_malloc_pool+0x50>)
 80059dc:	f00a f8d2 	bl	800fb84 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	e000      	b.n	80059e6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	08010f80 	.word	0x08010f80
 80059f4:	08010fb0 	.word	0x08010fb0
 80059f8:	08010fd4 	.word	0x08010fd4

080059fc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d106      	bne.n	8005a18 <memp_malloc_pool+0x1c>
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <memp_malloc_pool+0x38>)
 8005a0c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8005a10:	4909      	ldr	r1, [pc, #36]	; (8005a38 <memp_malloc_pool+0x3c>)
 8005a12:	480a      	ldr	r0, [pc, #40]	; (8005a3c <memp_malloc_pool+0x40>)
 8005a14:	f00a f8b6 	bl	800fb84 <iprintf>
  if (desc == NULL) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <memp_malloc_pool+0x26>
    return NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e003      	b.n	8005a2a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ffc0 	bl	80059a8 <do_memp_malloc_pool>
 8005a28:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3708      	adds	r7, #8
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	08010f80 	.word	0x08010f80
 8005a38:	08010ffc 	.word	0x08010ffc
 8005a3c:	08010fd4 	.word	0x08010fd4

08005a40 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d908      	bls.n	8005a62 <memp_malloc+0x22>
 8005a50:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <memp_malloc+0x3c>)
 8005a52:	f240 1257 	movw	r2, #343	; 0x157
 8005a56:	490a      	ldr	r1, [pc, #40]	; (8005a80 <memp_malloc+0x40>)
 8005a58:	480a      	ldr	r0, [pc, #40]	; (8005a84 <memp_malloc+0x44>)
 8005a5a:	f00a f893 	bl	800fb84 <iprintf>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	e008      	b.n	8005a74 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8005a62:	79fb      	ldrb	r3, [r7, #7]
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <memp_malloc+0x48>)
 8005a66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff ff9c 	bl	80059a8 <do_memp_malloc_pool>
 8005a70:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8005a72:	68fb      	ldr	r3, [r7, #12]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3710      	adds	r7, #16
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	08010f80 	.word	0x08010f80
 8005a80:	08011010 	.word	0x08011010
 8005a84:	08010fd4 	.word	0x08010fd4
 8005a88:	08013740 	.word	0x08013740

08005a8c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f003 0303 	and.w	r3, r3, #3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d006      	beq.n	8005aae <do_memp_free_pool+0x22>
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	; (8005acc <do_memp_free_pool+0x40>)
 8005aa2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8005aa6:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <do_memp_free_pool+0x44>)
 8005aa8:	480a      	ldr	r0, [pc, #40]	; (8005ad4 <do_memp_free_pool+0x48>)
 8005aaa:	f00a f86b 	bl	800fb84 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8005ac4:	bf00      	nop
 8005ac6:	3710      	adds	r7, #16
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	08010f80 	.word	0x08010f80
 8005ad0:	08011030 	.word	0x08011030
 8005ad4:	08010fd4 	.word	0x08010fd4

08005ad8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d106      	bne.n	8005af6 <memp_free_pool+0x1e>
 8005ae8:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <memp_free_pool+0x3c>)
 8005aea:	f240 1295 	movw	r2, #405	; 0x195
 8005aee:	490a      	ldr	r1, [pc, #40]	; (8005b18 <memp_free_pool+0x40>)
 8005af0:	480a      	ldr	r0, [pc, #40]	; (8005b1c <memp_free_pool+0x44>)
 8005af2:	f00a f847 	bl	800fb84 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <memp_free_pool+0x34>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d004      	beq.n	8005b0c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8005b02:	6839      	ldr	r1, [r7, #0]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff ffc1 	bl	8005a8c <do_memp_free_pool>
 8005b0a:	e000      	b.n	8005b0e <memp_free_pool+0x36>
    return;
 8005b0c:	bf00      	nop
}
 8005b0e:	3708      	adds	r7, #8
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	08010f80 	.word	0x08010f80
 8005b18:	08010ffc 	.word	0x08010ffc
 8005b1c:	08010fd4 	.word	0x08010fd4

08005b20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	4603      	mov	r3, r0
 8005b28:	6039      	str	r1, [r7, #0]
 8005b2a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8005b2c:	79fb      	ldrb	r3, [r7, #7]
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d907      	bls.n	8005b42 <memp_free+0x22>
 8005b32:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <memp_free+0x44>)
 8005b34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8005b38:	490b      	ldr	r1, [pc, #44]	; (8005b68 <memp_free+0x48>)
 8005b3a:	480c      	ldr	r0, [pc, #48]	; (8005b6c <memp_free+0x4c>)
 8005b3c:	f00a f822 	bl	800fb84 <iprintf>
 8005b40:	e00c      	b.n	8005b5c <memp_free+0x3c>

  if (mem == NULL) {
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <memp_free+0x50>)
 8005b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ff9a 	bl	8005a8c <do_memp_free_pool>
 8005b58:	e000      	b.n	8005b5c <memp_free+0x3c>
    return;
 8005b5a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	08010f80 	.word	0x08010f80
 8005b68:	08011050 	.word	0x08011050
 8005b6c:	08010fd4 	.word	0x08010fd4
 8005b70:	08013740 	.word	0x08013740

08005b74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d108      	bne.n	8005baa <netif_add+0x26>
 8005b98:	4b57      	ldr	r3, [pc, #348]	; (8005cf8 <netif_add+0x174>)
 8005b9a:	f240 1227 	movw	r2, #295	; 0x127
 8005b9e:	4957      	ldr	r1, [pc, #348]	; (8005cfc <netif_add+0x178>)
 8005ba0:	4857      	ldr	r0, [pc, #348]	; (8005d00 <netif_add+0x17c>)
 8005ba2:	f009 ffef 	bl	800fb84 <iprintf>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	e0a2      	b.n	8005cf0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d108      	bne.n	8005bc2 <netif_add+0x3e>
 8005bb0:	4b51      	ldr	r3, [pc, #324]	; (8005cf8 <netif_add+0x174>)
 8005bb2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8005bb6:	4953      	ldr	r1, [pc, #332]	; (8005d04 <netif_add+0x180>)
 8005bb8:	4851      	ldr	r0, [pc, #324]	; (8005d00 <netif_add+0x17c>)
 8005bba:	f009 ffe3 	bl	800fb84 <iprintf>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	e096      	b.n	8005cf0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8005bc8:	4b4f      	ldr	r3, [pc, #316]	; (8005d08 <netif_add+0x184>)
 8005bca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8005bd2:	4b4d      	ldr	r3, [pc, #308]	; (8005d08 <netif_add+0x184>)
 8005bd4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d101      	bne.n	8005be0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8005bdc:	4b4a      	ldr	r3, [pc, #296]	; (8005d08 <netif_add+0x184>)
 8005bde:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	4a45      	ldr	r2, [pc, #276]	; (8005d0c <netif_add+0x188>)
 8005bf6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6a3a      	ldr	r2, [r7, #32]
 8005c10:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8005c12:	4b3f      	ldr	r3, [pc, #252]	; (8005d10 <netif_add+0x18c>)
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c20:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f000 f913 	bl	8005e54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	4798      	blx	r3
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <netif_add+0xba>
    return NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e058      	b.n	8005cf0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c44:	2bff      	cmp	r3, #255	; 0xff
 8005c46:	d103      	bne.n	8005c50 <netif_add+0xcc>
        netif->num = 0;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005c54:	4b2f      	ldr	r3, [pc, #188]	; (8005d14 <netif_add+0x190>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e02b      	b.n	8005cb4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d106      	bne.n	8005c72 <netif_add+0xee>
 8005c64:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <netif_add+0x174>)
 8005c66:	f240 128b 	movw	r2, #395	; 0x18b
 8005c6a:	492b      	ldr	r1, [pc, #172]	; (8005d18 <netif_add+0x194>)
 8005c6c:	4824      	ldr	r0, [pc, #144]	; (8005d00 <netif_add+0x17c>)
 8005c6e:	f009 ff89 	bl	800fb84 <iprintf>
        num_netifs++;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	3301      	adds	r3, #1
 8005c76:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	2bff      	cmp	r3, #255	; 0xff
 8005c7c:	dd06      	ble.n	8005c8c <netif_add+0x108>
 8005c7e:	4b1e      	ldr	r3, [pc, #120]	; (8005cf8 <netif_add+0x174>)
 8005c80:	f240 128d 	movw	r2, #397	; 0x18d
 8005c84:	4925      	ldr	r1, [pc, #148]	; (8005d1c <netif_add+0x198>)
 8005c86:	481e      	ldr	r0, [pc, #120]	; (8005d00 <netif_add+0x17c>)
 8005c88:	f009 ff7c 	bl	800fb84 <iprintf>
        if (netif2->num == netif->num) {
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d108      	bne.n	8005cae <netif_add+0x12a>
          netif->num++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8005cac:	e005      	b.n	8005cba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	617b      	str	r3, [r7, #20]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1d0      	bne.n	8005c5c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1be      	bne.n	8005c3e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cc6:	2bfe      	cmp	r3, #254	; 0xfe
 8005cc8:	d103      	bne.n	8005cd2 <netif_add+0x14e>
    netif_num = 0;
 8005cca:	4b11      	ldr	r3, [pc, #68]	; (8005d10 <netif_add+0x18c>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	e006      	b.n	8005ce0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <netif_add+0x18c>)
 8005cde:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	; (8005d14 <netif_add+0x190>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8005ce8:	4a0a      	ldr	r2, [pc, #40]	; (8005d14 <netif_add+0x190>)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8005cee:	68fb      	ldr	r3, [r7, #12]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	0801106c 	.word	0x0801106c
 8005cfc:	08011100 	.word	0x08011100
 8005d00:	080110bc 	.word	0x080110bc
 8005d04:	0801111c 	.word	0x0801111c
 8005d08:	080137a4 	.word	0x080137a4
 8005d0c:	0800612f 	.word	0x0800612f
 8005d10:	20008140 	.word	0x20008140
 8005d14:	20008138 	.word	0x20008138
 8005d18:	08011140 	.word	0x08011140
 8005d1c:	08011154 	.word	0x08011154

08005d20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f002 fdf3 	bl	8008918 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f007 fb2f 	bl	800d398 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8005d3a:	bf00      	nop
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
	...

08005d44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b086      	sub	sp, #24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	60f8      	str	r0, [r7, #12]
 8005d4c:	60b9      	str	r1, [r7, #8]
 8005d4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <netif_do_set_ipaddr+0x20>
 8005d56:	4b1d      	ldr	r3, [pc, #116]	; (8005dcc <netif_do_set_ipaddr+0x88>)
 8005d58:	f240 12cb 	movw	r2, #459	; 0x1cb
 8005d5c:	491c      	ldr	r1, [pc, #112]	; (8005dd0 <netif_do_set_ipaddr+0x8c>)
 8005d5e:	481d      	ldr	r0, [pc, #116]	; (8005dd4 <netif_do_set_ipaddr+0x90>)
 8005d60:	f009 ff10 	bl	800fb84 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d106      	bne.n	8005d78 <netif_do_set_ipaddr+0x34>
 8005d6a:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <netif_do_set_ipaddr+0x88>)
 8005d6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8005d70:	4917      	ldr	r1, [pc, #92]	; (8005dd0 <netif_do_set_ipaddr+0x8c>)
 8005d72:	4818      	ldr	r0, [pc, #96]	; (8005dd4 <netif_do_set_ipaddr+0x90>)
 8005d74:	f009 ff06 	bl	800fb84 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d01c      	beq.n	8005dc0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7ff ffbf 	bl	8005d20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <netif_do_set_ipaddr+0x6a>
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	e000      	b.n	8005db0 <netif_do_set_ipaddr+0x6c>
 8005dae:	2300      	movs	r3, #0
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8005db4:	2101      	movs	r1, #1
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 f8d2 	bl	8005f60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	0801106c 	.word	0x0801106c
 8005dd0:	08011184 	.word	0x08011184
 8005dd4:	080110bc 	.word	0x080110bc

08005dd8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3308      	adds	r3, #8
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d00a      	beq.n	8005e08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d002      	beq.n	8005dfe <netif_do_set_netmask+0x26>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	e000      	b.n	8005e00 <netif_do_set_netmask+0x28>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8005e04:	2301      	movs	r3, #1
 8005e06:	e000      	b.n	8005e0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	60b9      	str	r1, [r7, #8]
 8005e20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	330c      	adds	r3, #12
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d00a      	beq.n	8005e46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d002      	beq.n	8005e3c <netif_do_set_gw+0x26>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	e000      	b.n	8005e3e <netif_do_set_gw+0x28>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8005e62:	2300      	movs	r3, #0
 8005e64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8005e70:	4b1c      	ldr	r3, [pc, #112]	; (8005ee4 <netif_set_addr+0x90>)
 8005e72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8005e7a:	4b1a      	ldr	r3, [pc, #104]	; (8005ee4 <netif_set_addr+0x90>)
 8005e7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8005e84:	4b17      	ldr	r3, [pc, #92]	; (8005ee4 <netif_set_addr+0x90>)
 8005e86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <netif_set_addr+0x42>
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d101      	bne.n	8005e9a <netif_set_addr+0x46>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <netif_set_addr+0x48>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d006      	beq.n	8005eb2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005ea4:	f107 0310 	add.w	r3, r7, #16
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68b9      	ldr	r1, [r7, #8]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f7ff ff49 	bl	8005d44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8005eb2:	69fa      	ldr	r2, [r7, #28]
 8005eb4:	6879      	ldr	r1, [r7, #4]
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f7ff ff8e 	bl	8005dd8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	6839      	ldr	r1, [r7, #0]
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ffa8 	bl	8005e16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8005ecc:	f107 0310 	add.w	r3, r7, #16
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	68b9      	ldr	r1, [r7, #8]
 8005ed4:	68f8      	ldr	r0, [r7, #12]
 8005ed6:	f7ff ff35 	bl	8005d44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8005eda:	bf00      	nop
 8005edc:	3720      	adds	r7, #32
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	080137a4 	.word	0x080137a4

08005ee8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8005ef0:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <netif_set_default+0x1c>)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	2000813c 	.word	0x2000813c

08005f08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d107      	bne.n	8005f26 <netif_set_up+0x1e>
 8005f16:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <netif_set_up+0x4c>)
 8005f18:	f44f 7254 	mov.w	r2, #848	; 0x350
 8005f1c:	490e      	ldr	r1, [pc, #56]	; (8005f58 <netif_set_up+0x50>)
 8005f1e:	480f      	ldr	r0, [pc, #60]	; (8005f5c <netif_set_up+0x54>)
 8005f20:	f009 fe30 	bl	800fb84 <iprintf>
 8005f24:	e013      	b.n	8005f4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10c      	bne.n	8005f4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	b2da      	uxtb	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8005f46:	2103      	movs	r1, #3
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 f809 	bl	8005f60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	0801106c 	.word	0x0801106c
 8005f58:	080111f4 	.word	0x080111f4
 8005f5c:	080110bc 	.word	0x080110bc

08005f60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	460b      	mov	r3, r1
 8005f6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <netif_issue_reports+0x20>
 8005f72:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <netif_issue_reports+0x74>)
 8005f74:	f240 326d 	movw	r2, #877	; 0x36d
 8005f78:	4917      	ldr	r1, [pc, #92]	; (8005fd8 <netif_issue_reports+0x78>)
 8005f7a:	4818      	ldr	r0, [pc, #96]	; (8005fdc <netif_issue_reports+0x7c>)
 8005f7c:	f009 fe02 	bl	800fb84 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d01e      	beq.n	8005fcc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d017      	beq.n	8005fcc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005f9c:	78fb      	ldrb	r3, [r7, #3]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00e      	beq.n	8005fce <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f008 f951 	bl	800e26c <etharp_request>
 8005fca:	e000      	b.n	8005fce <netif_issue_reports+0x6e>
    return;
 8005fcc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	0801106c 	.word	0x0801106c
 8005fd8:	08011210 	.word	0x08011210
 8005fdc:	080110bc 	.word	0x080110bc

08005fe0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <netif_set_down+0x1e>
 8005fee:	4b12      	ldr	r3, [pc, #72]	; (8006038 <netif_set_down+0x58>)
 8005ff0:	f240 329b 	movw	r2, #923	; 0x39b
 8005ff4:	4911      	ldr	r1, [pc, #68]	; (800603c <netif_set_down+0x5c>)
 8005ff6:	4812      	ldr	r0, [pc, #72]	; (8006040 <netif_set_down+0x60>)
 8005ff8:	f009 fdc4 	bl	800fb84 <iprintf>
 8005ffc:	e019      	b.n	8006032 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006004:	f003 0301 	and.w	r3, r3, #1
 8006008:	2b00      	cmp	r3, #0
 800600a:	d012      	beq.n	8006032 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f007 fcdb 	bl	800d9e8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8006032:	3708      	adds	r7, #8
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}
 8006038:	0801106c 	.word	0x0801106c
 800603c:	08011234 	.word	0x08011234
 8006040:	080110bc 	.word	0x080110bc

08006044 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d107      	bne.n	8006062 <netif_set_link_up+0x1e>
 8006052:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <netif_set_link_up+0x5c>)
 8006054:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8006058:	4912      	ldr	r1, [pc, #72]	; (80060a4 <netif_set_link_up+0x60>)
 800605a:	4813      	ldr	r0, [pc, #76]	; (80060a8 <netif_set_link_up+0x64>)
 800605c:	f009 fd92 	bl	800fb84 <iprintf>
 8006060:	e01b      	b.n	800609a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d114      	bne.n	800609a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006076:	f043 0304 	orr.w	r3, r3, #4
 800607a:	b2da      	uxtb	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8006082:	2103      	movs	r1, #3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f7ff ff6b 	bl	8005f60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <netif_set_link_up+0x56>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	0801106c 	.word	0x0801106c
 80060a4:	08011254 	.word	0x08011254
 80060a8:	080110bc 	.word	0x080110bc

080060ac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d107      	bne.n	80060ca <netif_set_link_down+0x1e>
 80060ba:	4b11      	ldr	r3, [pc, #68]	; (8006100 <netif_set_link_down+0x54>)
 80060bc:	f240 4206 	movw	r2, #1030	; 0x406
 80060c0:	4910      	ldr	r1, [pc, #64]	; (8006104 <netif_set_link_down+0x58>)
 80060c2:	4811      	ldr	r0, [pc, #68]	; (8006108 <netif_set_link_down+0x5c>)
 80060c4:	f009 fd5e 	bl	800fb84 <iprintf>
 80060c8:	e017      	b.n	80060fa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d010      	beq.n	80060fa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80060de:	f023 0304 	bic.w	r3, r3, #4
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <netif_set_link_down+0x4e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	0801106c 	.word	0x0801106c
 8006104:	08011278 	.word	0x08011278
 8006108:	080110bc 	.word	0x080110bc

0800610c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d002      	beq.n	8006122 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	683a      	ldr	r2, [r7, #0]
 8006120:	61da      	str	r2, [r3, #28]
  }
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800612e:	b480      	push	{r7}
 8006130:	b085      	sub	sp, #20
 8006132:	af00      	add	r7, sp, #0
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800613a:	f06f 030b 	mvn.w	r3, #11
}
 800613e:	4618      	mov	r0, r3
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
	...

0800614c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	4603      	mov	r3, r0
 8006154:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800615c:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <netif_get_by_index+0x48>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	e00c      	b.n	800617e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800616a:	3301      	adds	r3, #1
 800616c:	b2db      	uxtb	r3, r3
 800616e:	79fa      	ldrb	r2, [r7, #7]
 8006170:	429a      	cmp	r2, r3
 8006172:	d101      	bne.n	8006178 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	e006      	b.n	8006186 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	60fb      	str	r3, [r7, #12]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d1ef      	bne.n	8006164 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20008138 	.word	0x20008138

08006198 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800619e:	4b0c      	ldr	r3, [pc, #48]	; (80061d0 <pbuf_free_ooseq+0x38>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <pbuf_free_ooseq+0x3c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	e00a      	b.n	80061c2 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f002 fbed 	bl	8008994 <tcp_free_ooseq>
      return;
 80061ba:	e005      	b.n	80061c8 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	607b      	str	r3, [r7, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f1      	bne.n	80061ac <pbuf_free_ooseq+0x14>
    }
  }
}
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	20008141 	.word	0x20008141
 80061d4:	20008150 	.word	0x20008150

080061d8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80061d8:	b480      	push	{r7}
 80061da:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80061dc:	4b03      	ldr	r3, [pc, #12]	; (80061ec <pbuf_pool_is_empty+0x14>)
 80061de:	2201      	movs	r2, #1
 80061e0:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80061e2:	bf00      	nop
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20008141 	.word	0x20008141

080061f0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	4611      	mov	r1, r2
 80061fc:	461a      	mov	r2, r3
 80061fe:	460b      	mov	r3, r1
 8006200:	80fb      	strh	r3, [r7, #6]
 8006202:	4613      	mov	r3, r2
 8006204:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	88fa      	ldrh	r2, [r7, #6]
 8006216:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	88ba      	ldrh	r2, [r7, #4]
 800621c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800621e:	8b3b      	ldrh	r3, [r7, #24]
 8006220:	b2da      	uxtb	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	7f3a      	ldrb	r2, [r7, #28]
 800622a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2200      	movs	r2, #0
 8006236:	73da      	strb	r2, [r3, #15]
}
 8006238:	bf00      	nop
 800623a:	3714      	adds	r7, #20
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08c      	sub	sp, #48	; 0x30
 8006248:	af02      	add	r7, sp, #8
 800624a:	4603      	mov	r3, r0
 800624c:	71fb      	strb	r3, [r7, #7]
 800624e:	460b      	mov	r3, r1
 8006250:	80bb      	strh	r3, [r7, #4]
 8006252:	4613      	mov	r3, r2
 8006254:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8006256:	79fb      	ldrb	r3, [r7, #7]
 8006258:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800625a:	887b      	ldrh	r3, [r7, #2]
 800625c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006260:	d07f      	beq.n	8006362 <pbuf_alloc+0x11e>
 8006262:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8006266:	f300 80c8 	bgt.w	80063fa <pbuf_alloc+0x1b6>
 800626a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800626e:	d010      	beq.n	8006292 <pbuf_alloc+0x4e>
 8006270:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8006274:	f300 80c1 	bgt.w	80063fa <pbuf_alloc+0x1b6>
 8006278:	2b01      	cmp	r3, #1
 800627a:	d002      	beq.n	8006282 <pbuf_alloc+0x3e>
 800627c:	2b41      	cmp	r3, #65	; 0x41
 800627e:	f040 80bc 	bne.w	80063fa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8006282:	887a      	ldrh	r2, [r7, #2]
 8006284:	88bb      	ldrh	r3, [r7, #4]
 8006286:	4619      	mov	r1, r3
 8006288:	2000      	movs	r0, #0
 800628a:	f000 f8d1 	bl	8006430 <pbuf_alloc_reference>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8006290:	e0bd      	b.n	800640e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800629a:	88bb      	ldrh	r3, [r7, #4]
 800629c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800629e:	2008      	movs	r0, #8
 80062a0:	f7ff fbce 	bl	8005a40 <memp_malloc>
 80062a4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80062ac:	f7ff ff94 	bl	80061d8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <pbuf_alloc+0x78>
            pbuf_free(p);
 80062b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80062b8:	f000 faa8 	bl	800680c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80062bc:	2300      	movs	r3, #0
 80062be:	e0a7      	b.n	8006410 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80062c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062c2:	3303      	adds	r3, #3
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f023 0303 	bic.w	r3, r3, #3
 80062ca:	b29b      	uxth	r3, r3
 80062cc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	8b7a      	ldrh	r2, [r7, #26]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bf28      	it	cs
 80062d8:	4613      	movcs	r3, r2
 80062da:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80062dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062de:	3310      	adds	r3, #16
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4413      	add	r3, r2
 80062e4:	3303      	adds	r3, #3
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	4618      	mov	r0, r3
 80062ec:	89f9      	ldrh	r1, [r7, #14]
 80062ee:	8b7a      	ldrh	r2, [r7, #26]
 80062f0:	2300      	movs	r3, #0
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	887b      	ldrh	r3, [r7, #2]
 80062f6:	9300      	str	r3, [sp, #0]
 80062f8:	460b      	mov	r3, r1
 80062fa:	4601      	mov	r1, r0
 80062fc:	6938      	ldr	r0, [r7, #16]
 80062fe:	f7ff ff77 	bl	80061f0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d006      	beq.n	800631c <pbuf_alloc+0xd8>
 800630e:	4b42      	ldr	r3, [pc, #264]	; (8006418 <pbuf_alloc+0x1d4>)
 8006310:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006314:	4941      	ldr	r1, [pc, #260]	; (800641c <pbuf_alloc+0x1d8>)
 8006316:	4842      	ldr	r0, [pc, #264]	; (8006420 <pbuf_alloc+0x1dc>)
 8006318:	f009 fc34 	bl	800fb84 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800631c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800631e:	3303      	adds	r3, #3
 8006320:	f023 0303 	bic.w	r3, r3, #3
 8006324:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8006328:	d106      	bne.n	8006338 <pbuf_alloc+0xf4>
 800632a:	4b3b      	ldr	r3, [pc, #236]	; (8006418 <pbuf_alloc+0x1d4>)
 800632c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8006330:	493c      	ldr	r1, [pc, #240]	; (8006424 <pbuf_alloc+0x1e0>)
 8006332:	483b      	ldr	r0, [pc, #236]	; (8006420 <pbuf_alloc+0x1dc>)
 8006334:	f009 fc26 	bl	800fb84 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	627b      	str	r3, [r7, #36]	; 0x24
 8006342:	e002      	b.n	800634a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800634e:	8b7a      	ldrh	r2, [r7, #26]
 8006350:	89fb      	ldrh	r3, [r7, #14]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800635a:	8b7b      	ldrh	r3, [r7, #26]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d19e      	bne.n	800629e <pbuf_alloc+0x5a>
      break;
 8006360:	e055      	b.n	800640e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8006362:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006364:	3303      	adds	r3, #3
 8006366:	b29b      	uxth	r3, r3
 8006368:	f023 0303 	bic.w	r3, r3, #3
 800636c:	b29a      	uxth	r2, r3
 800636e:	88bb      	ldrh	r3, [r7, #4]
 8006370:	3303      	adds	r3, #3
 8006372:	b29b      	uxth	r3, r3
 8006374:	f023 0303 	bic.w	r3, r3, #3
 8006378:	b29b      	uxth	r3, r3
 800637a:	4413      	add	r3, r2
 800637c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800637e:	8b3b      	ldrh	r3, [r7, #24]
 8006380:	3310      	adds	r3, #16
 8006382:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8006384:	8b3a      	ldrh	r2, [r7, #24]
 8006386:	88bb      	ldrh	r3, [r7, #4]
 8006388:	3303      	adds	r3, #3
 800638a:	f023 0303 	bic.w	r3, r3, #3
 800638e:	429a      	cmp	r2, r3
 8006390:	d306      	bcc.n	80063a0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8006392:	8afa      	ldrh	r2, [r7, #22]
 8006394:	88bb      	ldrh	r3, [r7, #4]
 8006396:	3303      	adds	r3, #3
 8006398:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d201      	bcs.n	80063a4 <pbuf_alloc+0x160>
        return NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	e035      	b.n	8006410 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80063a4:	8afb      	ldrh	r3, [r7, #22]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff f9ba 	bl	8005720 <mem_malloc>
 80063ac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <pbuf_alloc+0x174>
        return NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	e02b      	b.n	8006410 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80063b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80063ba:	3310      	adds	r3, #16
 80063bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063be:	4413      	add	r3, r2
 80063c0:	3303      	adds	r3, #3
 80063c2:	f023 0303 	bic.w	r3, r3, #3
 80063c6:	4618      	mov	r0, r3
 80063c8:	88b9      	ldrh	r1, [r7, #4]
 80063ca:	88ba      	ldrh	r2, [r7, #4]
 80063cc:	2300      	movs	r3, #0
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	887b      	ldrh	r3, [r7, #2]
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	460b      	mov	r3, r1
 80063d6:	4601      	mov	r1, r0
 80063d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063da:	f7ff ff09 	bl	80061f0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <pbuf_alloc+0x1c8>
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <pbuf_alloc+0x1d4>)
 80063ec:	f44f 7291 	mov.w	r2, #290	; 0x122
 80063f0:	490d      	ldr	r1, [pc, #52]	; (8006428 <pbuf_alloc+0x1e4>)
 80063f2:	480b      	ldr	r0, [pc, #44]	; (8006420 <pbuf_alloc+0x1dc>)
 80063f4:	f009 fbc6 	bl	800fb84 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80063f8:	e008      	b.n	800640c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <pbuf_alloc+0x1d4>)
 80063fc:	f240 1227 	movw	r2, #295	; 0x127
 8006400:	490a      	ldr	r1, [pc, #40]	; (800642c <pbuf_alloc+0x1e8>)
 8006402:	4807      	ldr	r0, [pc, #28]	; (8006420 <pbuf_alloc+0x1dc>)
 8006404:	f009 fbbe 	bl	800fb84 <iprintf>
      return NULL;
 8006408:	2300      	movs	r3, #0
 800640a:	e001      	b.n	8006410 <pbuf_alloc+0x1cc>
      break;
 800640c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006410:	4618      	mov	r0, r3
 8006412:	3728      	adds	r7, #40	; 0x28
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	0801129c 	.word	0x0801129c
 800641c:	080112cc 	.word	0x080112cc
 8006420:	080112fc 	.word	0x080112fc
 8006424:	08011324 	.word	0x08011324
 8006428:	08011358 	.word	0x08011358
 800642c:	08011384 	.word	0x08011384

08006430 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af02      	add	r7, sp, #8
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
 800643c:	4613      	mov	r3, r2
 800643e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8006440:	883b      	ldrh	r3, [r7, #0]
 8006442:	2b41      	cmp	r3, #65	; 0x41
 8006444:	d009      	beq.n	800645a <pbuf_alloc_reference+0x2a>
 8006446:	883b      	ldrh	r3, [r7, #0]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d006      	beq.n	800645a <pbuf_alloc_reference+0x2a>
 800644c:	4b0f      	ldr	r3, [pc, #60]	; (800648c <pbuf_alloc_reference+0x5c>)
 800644e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8006452:	490f      	ldr	r1, [pc, #60]	; (8006490 <pbuf_alloc_reference+0x60>)
 8006454:	480f      	ldr	r0, [pc, #60]	; (8006494 <pbuf_alloc_reference+0x64>)
 8006456:	f009 fb95 	bl	800fb84 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800645a:	2007      	movs	r0, #7
 800645c:	f7ff faf0 	bl	8005a40 <memp_malloc>
 8006460:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8006468:	2300      	movs	r3, #0
 800646a:	e00b      	b.n	8006484 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800646c:	8879      	ldrh	r1, [r7, #2]
 800646e:	887a      	ldrh	r2, [r7, #2]
 8006470:	2300      	movs	r3, #0
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	883b      	ldrh	r3, [r7, #0]
 8006476:	9300      	str	r3, [sp, #0]
 8006478:	460b      	mov	r3, r1
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff feb7 	bl	80061f0 <pbuf_init_alloced_pbuf>
  return p;
 8006482:	68fb      	ldr	r3, [r7, #12]
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	0801129c 	.word	0x0801129c
 8006490:	080113a0 	.word	0x080113a0
 8006494:	080112fc 	.word	0x080112fc

08006498 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b088      	sub	sp, #32
 800649c:	af02      	add	r7, sp, #8
 800649e:	607b      	str	r3, [r7, #4]
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	460b      	mov	r3, r1
 80064a6:	81bb      	strh	r3, [r7, #12]
 80064a8:	4613      	mov	r3, r2
 80064aa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80064b0:	8a7b      	ldrh	r3, [r7, #18]
 80064b2:	3303      	adds	r3, #3
 80064b4:	f023 0203 	bic.w	r2, r3, #3
 80064b8:	89bb      	ldrh	r3, [r7, #12]
 80064ba:	441a      	add	r2, r3
 80064bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064be:	429a      	cmp	r2, r3
 80064c0:	d901      	bls.n	80064c6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	e018      	b.n	80064f8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80064c6:	6a3b      	ldr	r3, [r7, #32]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d007      	beq.n	80064dc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80064cc:	8a7b      	ldrh	r3, [r7, #18]
 80064ce:	3303      	adds	r3, #3
 80064d0:	f023 0303 	bic.w	r3, r3, #3
 80064d4:	6a3a      	ldr	r2, [r7, #32]
 80064d6:	4413      	add	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	e001      	b.n	80064e0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	89b9      	ldrh	r1, [r7, #12]
 80064e4:	89ba      	ldrh	r2, [r7, #12]
 80064e6:	2302      	movs	r3, #2
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	897b      	ldrh	r3, [r7, #10]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	460b      	mov	r3, r1
 80064f0:	6979      	ldr	r1, [r7, #20]
 80064f2:	f7ff fe7d 	bl	80061f0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80064f6:	687b      	ldr	r3, [r7, #4]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	460b      	mov	r3, r1
 800650a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d106      	bne.n	8006520 <pbuf_realloc+0x20>
 8006512:	4b3a      	ldr	r3, [pc, #232]	; (80065fc <pbuf_realloc+0xfc>)
 8006514:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006518:	4939      	ldr	r1, [pc, #228]	; (8006600 <pbuf_realloc+0x100>)
 800651a:	483a      	ldr	r0, [pc, #232]	; (8006604 <pbuf_realloc+0x104>)
 800651c:	f009 fb32 	bl	800fb84 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	891b      	ldrh	r3, [r3, #8]
 8006524:	887a      	ldrh	r2, [r7, #2]
 8006526:	429a      	cmp	r2, r3
 8006528:	d263      	bcs.n	80065f2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	891a      	ldrh	r2, [r3, #8]
 800652e:	887b      	ldrh	r3, [r7, #2]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8006534:	887b      	ldrh	r3, [r7, #2]
 8006536:	817b      	strh	r3, [r7, #10]
  q = p;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800653c:	e018      	b.n	8006570 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	895b      	ldrh	r3, [r3, #10]
 8006542:	897a      	ldrh	r2, [r7, #10]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	891a      	ldrh	r2, [r3, #8]
 800654c:	893b      	ldrh	r3, [r7, #8]
 800654e:	1ad3      	subs	r3, r2, r3
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d106      	bne.n	8006570 <pbuf_realloc+0x70>
 8006562:	4b26      	ldr	r3, [pc, #152]	; (80065fc <pbuf_realloc+0xfc>)
 8006564:	f240 12af 	movw	r2, #431	; 0x1af
 8006568:	4927      	ldr	r1, [pc, #156]	; (8006608 <pbuf_realloc+0x108>)
 800656a:	4826      	ldr	r0, [pc, #152]	; (8006604 <pbuf_realloc+0x104>)
 800656c:	f009 fb0a 	bl	800fb84 <iprintf>
  while (rem_len > q->len) {
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	895b      	ldrh	r3, [r3, #10]
 8006574:	897a      	ldrh	r2, [r7, #10]
 8006576:	429a      	cmp	r2, r3
 8006578:	d8e1      	bhi.n	800653e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	7b1b      	ldrb	r3, [r3, #12]
 800657e:	f003 030f 	and.w	r3, r3, #15
 8006582:	2b00      	cmp	r3, #0
 8006584:	d121      	bne.n	80065ca <pbuf_realloc+0xca>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	895b      	ldrh	r3, [r3, #10]
 800658a:	897a      	ldrh	r2, [r7, #10]
 800658c:	429a      	cmp	r2, r3
 800658e:	d01c      	beq.n	80065ca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	7b5b      	ldrb	r3, [r3, #13]
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d116      	bne.n	80065ca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	897b      	ldrh	r3, [r7, #10]
 80065a8:	4413      	add	r3, r2
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	4619      	mov	r1, r3
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f7fe ffba 	bl	8005528 <mem_trim>
 80065b4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d106      	bne.n	80065ca <pbuf_realloc+0xca>
 80065bc:	4b0f      	ldr	r3, [pc, #60]	; (80065fc <pbuf_realloc+0xfc>)
 80065be:	f240 12bd 	movw	r2, #445	; 0x1bd
 80065c2:	4912      	ldr	r1, [pc, #72]	; (800660c <pbuf_realloc+0x10c>)
 80065c4:	480f      	ldr	r0, [pc, #60]	; (8006604 <pbuf_realloc+0x104>)
 80065c6:	f009 fadd 	bl	800fb84 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	897a      	ldrh	r2, [r7, #10]
 80065ce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	895a      	ldrh	r2, [r3, #10]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d004      	beq.n	80065ea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 f911 	bl	800680c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e000      	b.n	80065f4 <pbuf_realloc+0xf4>
    return;
 80065f2:	bf00      	nop

}
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	0801129c 	.word	0x0801129c
 8006600:	080113b4 	.word	0x080113b4
 8006604:	080112fc 	.word	0x080112fc
 8006608:	080113cc 	.word	0x080113cc
 800660c:	080113e4 	.word	0x080113e4

08006610 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	4613      	mov	r3, r2
 800661c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d106      	bne.n	8006632 <pbuf_add_header_impl+0x22>
 8006624:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <pbuf_add_header_impl+0xc4>)
 8006626:	f240 12df 	movw	r2, #479	; 0x1df
 800662a:	492b      	ldr	r1, [pc, #172]	; (80066d8 <pbuf_add_header_impl+0xc8>)
 800662c:	482b      	ldr	r0, [pc, #172]	; (80066dc <pbuf_add_header_impl+0xcc>)
 800662e:	f009 faa9 	bl	800fb84 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d003      	beq.n	8006640 <pbuf_add_header_impl+0x30>
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800663e:	d301      	bcc.n	8006644 <pbuf_add_header_impl+0x34>
    return 1;
 8006640:	2301      	movs	r3, #1
 8006642:	e043      	b.n	80066cc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <pbuf_add_header_impl+0x3e>
    return 0;
 800664a:	2300      	movs	r3, #0
 800664c:	e03e      	b.n	80066cc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	891a      	ldrh	r2, [r3, #8]
 8006656:	8a7b      	ldrh	r3, [r7, #18]
 8006658:	4413      	add	r3, r2
 800665a:	b29b      	uxth	r3, r3
 800665c:	8a7a      	ldrh	r2, [r7, #18]
 800665e:	429a      	cmp	r2, r3
 8006660:	d901      	bls.n	8006666 <pbuf_add_header_impl+0x56>
    return 1;
 8006662:	2301      	movs	r3, #1
 8006664:	e032      	b.n	80066cc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	7b1b      	ldrb	r3, [r3, #12]
 800666a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800666c:	8a3b      	ldrh	r3, [r7, #16]
 800666e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00c      	beq.n	8006690 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	425b      	negs	r3, r3
 800667e:	4413      	add	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3310      	adds	r3, #16
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	429a      	cmp	r2, r3
 800668a:	d20d      	bcs.n	80066a8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800668c:	2301      	movs	r3, #1
 800668e:	e01d      	b.n	80066cc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d006      	beq.n	80066a4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	425b      	negs	r3, r3
 800669e:	4413      	add	r3, r2
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	e001      	b.n	80066a8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e011      	b.n	80066cc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	895a      	ldrh	r2, [r3, #10]
 80066b2:	8a7b      	ldrh	r3, [r7, #18]
 80066b4:	4413      	add	r3, r2
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	891a      	ldrh	r2, [r3, #8]
 80066c0:	8a7b      	ldrh	r3, [r7, #18]
 80066c2:	4413      	add	r3, r2
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	811a      	strh	r2, [r3, #8]


  return 0;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	0801129c 	.word	0x0801129c
 80066d8:	08011400 	.word	0x08011400
 80066dc:	080112fc 	.word	0x080112fc

080066e0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80066ea:	2200      	movs	r2, #0
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff ff8e 	bl	8006610 <pbuf_add_header_impl>
 80066f4:	4603      	mov	r3, r0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
	...

08006700 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <pbuf_remove_header+0x1e>
 8006710:	4b20      	ldr	r3, [pc, #128]	; (8006794 <pbuf_remove_header+0x94>)
 8006712:	f240 224b 	movw	r2, #587	; 0x24b
 8006716:	4920      	ldr	r1, [pc, #128]	; (8006798 <pbuf_remove_header+0x98>)
 8006718:	4820      	ldr	r0, [pc, #128]	; (800679c <pbuf_remove_header+0x9c>)
 800671a:	f009 fa33 	bl	800fb84 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <pbuf_remove_header+0x2c>
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800672a:	d301      	bcc.n	8006730 <pbuf_remove_header+0x30>
    return 1;
 800672c:	2301      	movs	r3, #1
 800672e:	e02c      	b.n	800678a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <pbuf_remove_header+0x3a>
    return 0;
 8006736:	2300      	movs	r3, #0
 8006738:	e027      	b.n	800678a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	895b      	ldrh	r3, [r3, #10]
 8006742:	89fa      	ldrh	r2, [r7, #14]
 8006744:	429a      	cmp	r2, r3
 8006746:	d908      	bls.n	800675a <pbuf_remove_header+0x5a>
 8006748:	4b12      	ldr	r3, [pc, #72]	; (8006794 <pbuf_remove_header+0x94>)
 800674a:	f240 2255 	movw	r2, #597	; 0x255
 800674e:	4914      	ldr	r1, [pc, #80]	; (80067a0 <pbuf_remove_header+0xa0>)
 8006750:	4812      	ldr	r0, [pc, #72]	; (800679c <pbuf_remove_header+0x9c>)
 8006752:	f009 fa17 	bl	800fb84 <iprintf>
 8006756:	2301      	movs	r3, #1
 8006758:	e017      	b.n	800678a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685a      	ldr	r2, [r3, #4]
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	441a      	add	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	895a      	ldrh	r2, [r3, #10]
 8006770:	89fb      	ldrh	r3, [r7, #14]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	891a      	ldrh	r2, [r3, #8]
 800677e:	89fb      	ldrh	r3, [r7, #14]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	b29a      	uxth	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3710      	adds	r7, #16
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	0801129c 	.word	0x0801129c
 8006798:	08011400 	.word	0x08011400
 800679c:	080112fc 	.word	0x080112fc
 80067a0:	0801140c 	.word	0x0801140c

080067a4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	460b      	mov	r3, r1
 80067ae:	807b      	strh	r3, [r7, #2]
 80067b0:	4613      	mov	r3, r2
 80067b2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80067b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	da08      	bge.n	80067ce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80067bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067c0:	425b      	negs	r3, r3
 80067c2:	4619      	mov	r1, r3
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f7ff ff9b 	bl	8006700 <pbuf_remove_header>
 80067ca:	4603      	mov	r3, r0
 80067cc:	e007      	b.n	80067de <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80067ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067d2:	787a      	ldrb	r2, [r7, #1]
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff ff1a 	bl	8006610 <pbuf_add_header_impl>
 80067dc:	4603      	mov	r3, r0
  }
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b082      	sub	sp, #8
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80067f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067f6:	2201      	movs	r2, #1
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7ff ffd2 	bl	80067a4 <pbuf_header_impl>
 8006800:	4603      	mov	r3, r0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d106      	bne.n	800682e <pbuf_free+0x22>
 8006820:	4b38      	ldr	r3, [pc, #224]	; (8006904 <pbuf_free+0xf8>)
 8006822:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8006826:	4938      	ldr	r1, [pc, #224]	; (8006908 <pbuf_free+0xfc>)
 8006828:	4838      	ldr	r0, [pc, #224]	; (800690c <pbuf_free+0x100>)
 800682a:	f009 f9ab 	bl	800fb84 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800682e:	2300      	movs	r3, #0
 8006830:	e063      	b.n	80068fa <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8006836:	e05c      	b.n	80068f2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	7b9b      	ldrb	r3, [r3, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d106      	bne.n	800684e <pbuf_free+0x42>
 8006840:	4b30      	ldr	r3, [pc, #192]	; (8006904 <pbuf_free+0xf8>)
 8006842:	f240 22f1 	movw	r2, #753	; 0x2f1
 8006846:	4932      	ldr	r1, [pc, #200]	; (8006910 <pbuf_free+0x104>)
 8006848:	4830      	ldr	r0, [pc, #192]	; (800690c <pbuf_free+0x100>)
 800684a:	f009 f99b 	bl	800fb84 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	7b9b      	ldrb	r3, [r3, #14]
 8006852:	3b01      	subs	r3, #1
 8006854:	b2da      	uxtb	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	739a      	strb	r2, [r3, #14]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7b9b      	ldrb	r3, [r3, #14]
 800685e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8006860:	7dbb      	ldrb	r3, [r7, #22]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d143      	bne.n	80068ee <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	7b1b      	ldrb	r3, [r3, #12]
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	7b5b      	ldrb	r3, [r3, #13]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d011      	beq.n	80068a6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <pbuf_free+0x90>
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <pbuf_free+0xf8>)
 8006890:	f240 22ff 	movw	r2, #767	; 0x2ff
 8006894:	491f      	ldr	r1, [pc, #124]	; (8006914 <pbuf_free+0x108>)
 8006896:	481d      	ldr	r0, [pc, #116]	; (800690c <pbuf_free+0x100>)
 8006898:	f009 f974 	bl	800fb84 <iprintf>
        pc->custom_free_function(p);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
 80068a4:	e01d      	b.n	80068e2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d104      	bne.n	80068b6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80068ac:	6879      	ldr	r1, [r7, #4]
 80068ae:	2008      	movs	r0, #8
 80068b0:	f7ff f936 	bl	8005b20 <memp_free>
 80068b4:	e015      	b.n	80068e2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80068b6:	7bfb      	ldrb	r3, [r7, #15]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d104      	bne.n	80068c6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	2007      	movs	r0, #7
 80068c0:	f7ff f92e 	bl	8005b20 <memp_free>
 80068c4:	e00d      	b.n	80068e2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d103      	bne.n	80068d4 <pbuf_free+0xc8>
          mem_free(p);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fe fdc1 	bl	8005454 <mem_free>
 80068d2:	e006      	b.n	80068e2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80068d4:	4b0b      	ldr	r3, [pc, #44]	; (8006904 <pbuf_free+0xf8>)
 80068d6:	f240 320f 	movw	r2, #783	; 0x30f
 80068da:	490f      	ldr	r1, [pc, #60]	; (8006918 <pbuf_free+0x10c>)
 80068dc:	480b      	ldr	r0, [pc, #44]	; (800690c <pbuf_free+0x100>)
 80068de:	f009 f951 	bl	800fb84 <iprintf>
        }
      }
      count++;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
 80068e4:	3301      	adds	r3, #1
 80068e6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	607b      	str	r3, [r7, #4]
 80068ec:	e001      	b.n	80068f2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d19f      	bne.n	8006838 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80068f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	0801129c 	.word	0x0801129c
 8006908:	08011400 	.word	0x08011400
 800690c:	080112fc 	.word	0x080112fc
 8006910:	0801142c 	.word	0x0801142c
 8006914:	08011444 	.word	0x08011444
 8006918:	08011468 	.word	0x08011468

0800691c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8006928:	e005      	b.n	8006936 <pbuf_clen+0x1a>
    ++len;
 800692a:	89fb      	ldrh	r3, [r7, #14]
 800692c:	3301      	adds	r3, #1
 800692e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1f6      	bne.n	800692a <pbuf_clen+0xe>
  }
  return len;
 800693c:	89fb      	ldrh	r3, [r7, #14]
}
 800693e:	4618      	mov	r0, r3
 8006940:	3714      	adds	r7, #20
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr
	...

0800694c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	7b9b      	ldrb	r3, [r3, #14]
 800695e:	3301      	adds	r3, #1
 8006960:	b2da      	uxtb	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	7b9b      	ldrb	r3, [r3, #14]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d106      	bne.n	800697c <pbuf_ref+0x30>
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <pbuf_ref+0x38>)
 8006970:	f240 3242 	movw	r2, #834	; 0x342
 8006974:	4904      	ldr	r1, [pc, #16]	; (8006988 <pbuf_ref+0x3c>)
 8006976:	4805      	ldr	r0, [pc, #20]	; (800698c <pbuf_ref+0x40>)
 8006978:	f009 f904 	bl	800fb84 <iprintf>
  }
}
 800697c:	bf00      	nop
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	0801129c 	.word	0x0801129c
 8006988:	0801147c 	.word	0x0801147c
 800698c:	080112fc 	.word	0x080112fc

08006990 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d002      	beq.n	80069a6 <pbuf_cat+0x16>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d107      	bne.n	80069b6 <pbuf_cat+0x26>
 80069a6:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <pbuf_cat+0x98>)
 80069a8:	f240 3259 	movw	r2, #857	; 0x359
 80069ac:	491f      	ldr	r1, [pc, #124]	; (8006a2c <pbuf_cat+0x9c>)
 80069ae:	4820      	ldr	r0, [pc, #128]	; (8006a30 <pbuf_cat+0xa0>)
 80069b0:	f009 f8e8 	bl	800fb84 <iprintf>
 80069b4:	e034      	b.n	8006a20 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e00a      	b.n	80069d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	891a      	ldrh	r2, [r3, #8]
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	891b      	ldrh	r3, [r3, #8]
 80069c4:	4413      	add	r3, r2
 80069c6:	b29a      	uxth	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1f0      	bne.n	80069bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	891a      	ldrh	r2, [r3, #8]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	895b      	ldrh	r3, [r3, #10]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d006      	beq.n	80069f4 <pbuf_cat+0x64>
 80069e6:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <pbuf_cat+0x98>)
 80069e8:	f240 3262 	movw	r2, #866	; 0x362
 80069ec:	4911      	ldr	r1, [pc, #68]	; (8006a34 <pbuf_cat+0xa4>)
 80069ee:	4810      	ldr	r0, [pc, #64]	; (8006a30 <pbuf_cat+0xa0>)
 80069f0:	f009 f8c8 	bl	800fb84 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d006      	beq.n	8006a0a <pbuf_cat+0x7a>
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <pbuf_cat+0x98>)
 80069fe:	f240 3263 	movw	r2, #867	; 0x363
 8006a02:	490d      	ldr	r1, [pc, #52]	; (8006a38 <pbuf_cat+0xa8>)
 8006a04:	480a      	ldr	r0, [pc, #40]	; (8006a30 <pbuf_cat+0xa0>)
 8006a06:	f009 f8bd 	bl	800fb84 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	891a      	ldrh	r2, [r3, #8]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	891b      	ldrh	r3, [r3, #8]
 8006a12:	4413      	add	r3, r2
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	0801129c 	.word	0x0801129c
 8006a2c:	08011490 	.word	0x08011490
 8006a30:	080112fc 	.word	0x080112fc
 8006a34:	080114c8 	.word	0x080114c8
 8006a38:	080114f8 	.word	0x080114f8

08006a3c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff ffa1 	bl	8006990 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8006a4e:	6838      	ldr	r0, [r7, #0]
 8006a50:	f7ff ff7c 	bl	800694c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8006a54:	bf00      	nop
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d008      	beq.n	8006a86 <pbuf_copy+0x2a>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <pbuf_copy+0x2a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	891a      	ldrh	r2, [r3, #8]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	891b      	ldrh	r3, [r3, #8]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d209      	bcs.n	8006a9a <pbuf_copy+0x3e>
 8006a86:	4b57      	ldr	r3, [pc, #348]	; (8006be4 <pbuf_copy+0x188>)
 8006a88:	f240 32c9 	movw	r2, #969	; 0x3c9
 8006a8c:	4956      	ldr	r1, [pc, #344]	; (8006be8 <pbuf_copy+0x18c>)
 8006a8e:	4857      	ldr	r0, [pc, #348]	; (8006bec <pbuf_copy+0x190>)
 8006a90:	f009 f878 	bl	800fb84 <iprintf>
 8006a94:	f06f 030f 	mvn.w	r3, #15
 8006a98:	e09f      	b.n	8006bda <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	895b      	ldrh	r3, [r3, #10]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	1ad2      	subs	r2, r2, r3
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	895b      	ldrh	r3, [r3, #10]
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	1acb      	subs	r3, r1, r3
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d306      	bcc.n	8006ac0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	895b      	ldrh	r3, [r3, #10]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e005      	b.n	8006acc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	895b      	ldrh	r3, [r3, #10]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	685a      	ldr	r2, [r3, #4]
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	18d0      	adds	r0, r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685a      	ldr	r2, [r3, #4]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	4413      	add	r3, r2
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f009 f83a 	bl	800fb58 <memcpy>
    offset_to += len;
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	895b      	ldrh	r3, [r3, #10]
 8006af8:	461a      	mov	r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d906      	bls.n	8006b0e <pbuf_copy+0xb2>
 8006b00:	4b38      	ldr	r3, [pc, #224]	; (8006be4 <pbuf_copy+0x188>)
 8006b02:	f240 32d9 	movw	r2, #985	; 0x3d9
 8006b06:	493a      	ldr	r1, [pc, #232]	; (8006bf0 <pbuf_copy+0x194>)
 8006b08:	4838      	ldr	r0, [pc, #224]	; (8006bec <pbuf_copy+0x190>)
 8006b0a:	f009 f83b 	bl	800fb84 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	895b      	ldrh	r3, [r3, #10]
 8006b12:	461a      	mov	r2, r3
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d906      	bls.n	8006b28 <pbuf_copy+0xcc>
 8006b1a:	4b32      	ldr	r3, [pc, #200]	; (8006be4 <pbuf_copy+0x188>)
 8006b1c:	f240 32da 	movw	r2, #986	; 0x3da
 8006b20:	4934      	ldr	r1, [pc, #208]	; (8006bf4 <pbuf_copy+0x198>)
 8006b22:	4832      	ldr	r0, [pc, #200]	; (8006bec <pbuf_copy+0x190>)
 8006b24:	f009 f82e 	bl	800fb84 <iprintf>
    if (offset_from >= p_from->len) {
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	895b      	ldrh	r3, [r3, #10]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d304      	bcc.n	8006b3e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	895b      	ldrh	r3, [r3, #10]
 8006b42:	461a      	mov	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d114      	bne.n	8006b74 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d10c      	bne.n	8006b74 <pbuf_copy+0x118>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <pbuf_copy+0x118>
 8006b60:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <pbuf_copy+0x188>)
 8006b62:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8006b66:	4924      	ldr	r1, [pc, #144]	; (8006bf8 <pbuf_copy+0x19c>)
 8006b68:	4820      	ldr	r0, [pc, #128]	; (8006bec <pbuf_copy+0x190>)
 8006b6a:	f009 f80b 	bl	800fb84 <iprintf>
 8006b6e:	f06f 030f 	mvn.w	r3, #15
 8006b72:	e032      	b.n	8006bda <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d013      	beq.n	8006ba2 <pbuf_copy+0x146>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	895a      	ldrh	r2, [r3, #10]
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	891b      	ldrh	r3, [r3, #8]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d10d      	bne.n	8006ba2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d009      	beq.n	8006ba2 <pbuf_copy+0x146>
 8006b8e:	4b15      	ldr	r3, [pc, #84]	; (8006be4 <pbuf_copy+0x188>)
 8006b90:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8006b94:	4919      	ldr	r1, [pc, #100]	; (8006bfc <pbuf_copy+0x1a0>)
 8006b96:	4815      	ldr	r0, [pc, #84]	; (8006bec <pbuf_copy+0x190>)
 8006b98:	f008 fff4 	bl	800fb84 <iprintf>
 8006b9c:	f06f 0305 	mvn.w	r3, #5
 8006ba0:	e01b      	b.n	8006bda <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d013      	beq.n	8006bd0 <pbuf_copy+0x174>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	895a      	ldrh	r2, [r3, #10]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	891b      	ldrh	r3, [r3, #8]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d10d      	bne.n	8006bd0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d009      	beq.n	8006bd0 <pbuf_copy+0x174>
 8006bbc:	4b09      	ldr	r3, [pc, #36]	; (8006be4 <pbuf_copy+0x188>)
 8006bbe:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8006bc2:	490e      	ldr	r1, [pc, #56]	; (8006bfc <pbuf_copy+0x1a0>)
 8006bc4:	4809      	ldr	r0, [pc, #36]	; (8006bec <pbuf_copy+0x190>)
 8006bc6:	f008 ffdd 	bl	800fb84 <iprintf>
 8006bca:	f06f 0305 	mvn.w	r3, #5
 8006bce:	e004      	b.n	8006bda <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f47f af61 	bne.w	8006a9a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3718      	adds	r7, #24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	0801129c 	.word	0x0801129c
 8006be8:	08011544 	.word	0x08011544
 8006bec:	080112fc 	.word	0x080112fc
 8006bf0:	08011574 	.word	0x08011574
 8006bf4:	0801158c 	.word	0x0801158c
 8006bf8:	080115a8 	.word	0x080115a8
 8006bfc:	080115b8 	.word	0x080115b8

08006c00 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b088      	sub	sp, #32
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	460b      	mov	r3, r1
 8006c10:	80fb      	strh	r3, [r7, #6]
 8006c12:	4613      	mov	r3, r2
 8006c14:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d108      	bne.n	8006c36 <pbuf_copy_partial+0x36>
 8006c24:	4b2b      	ldr	r3, [pc, #172]	; (8006cd4 <pbuf_copy_partial+0xd4>)
 8006c26:	f240 420a 	movw	r2, #1034	; 0x40a
 8006c2a:	492b      	ldr	r1, [pc, #172]	; (8006cd8 <pbuf_copy_partial+0xd8>)
 8006c2c:	482b      	ldr	r0, [pc, #172]	; (8006cdc <pbuf_copy_partial+0xdc>)
 8006c2e:	f008 ffa9 	bl	800fb84 <iprintf>
 8006c32:	2300      	movs	r3, #0
 8006c34:	e04a      	b.n	8006ccc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d108      	bne.n	8006c4e <pbuf_copy_partial+0x4e>
 8006c3c:	4b25      	ldr	r3, [pc, #148]	; (8006cd4 <pbuf_copy_partial+0xd4>)
 8006c3e:	f240 420b 	movw	r2, #1035	; 0x40b
 8006c42:	4927      	ldr	r1, [pc, #156]	; (8006ce0 <pbuf_copy_partial+0xe0>)
 8006c44:	4825      	ldr	r0, [pc, #148]	; (8006cdc <pbuf_copy_partial+0xdc>)
 8006c46:	f008 ff9d 	bl	800fb84 <iprintf>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e03e      	b.n	8006ccc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	e034      	b.n	8006cbe <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8006c54:	88bb      	ldrh	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00a      	beq.n	8006c70 <pbuf_copy_partial+0x70>
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	895b      	ldrh	r3, [r3, #10]
 8006c5e:	88ba      	ldrh	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d305      	bcc.n	8006c70 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	895b      	ldrh	r3, [r3, #10]
 8006c68:	88ba      	ldrh	r2, [r7, #4]
 8006c6a:	1ad3      	subs	r3, r2, r3
 8006c6c:	80bb      	strh	r3, [r7, #4]
 8006c6e:	e023      	b.n	8006cb8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	895a      	ldrh	r2, [r3, #10]
 8006c74:	88bb      	ldrh	r3, [r7, #4]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8006c7a:	8b3a      	ldrh	r2, [r7, #24]
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d901      	bls.n	8006c86 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8006c82:	88fb      	ldrh	r3, [r7, #6]
 8006c84:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8006c86:	8b7b      	ldrh	r3, [r7, #26]
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	18d0      	adds	r0, r2, r3
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	88bb      	ldrh	r3, [r7, #4]
 8006c92:	4413      	add	r3, r2
 8006c94:	8b3a      	ldrh	r2, [r7, #24]
 8006c96:	4619      	mov	r1, r3
 8006c98:	f008 ff5e 	bl	800fb58 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8006c9c:	8afa      	ldrh	r2, [r7, #22]
 8006c9e:	8b3b      	ldrh	r3, [r7, #24]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8006ca4:	8b7a      	ldrh	r2, [r7, #26]
 8006ca6:	8b3b      	ldrh	r3, [r7, #24]
 8006ca8:	4413      	add	r3, r2
 8006caa:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8006cac:	88fa      	ldrh	r2, [r7, #6]
 8006cae:	8b3b      	ldrh	r3, [r7, #24]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	61fb      	str	r3, [r7, #28]
 8006cbe:	88fb      	ldrh	r3, [r7, #6]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <pbuf_copy_partial+0xca>
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d1c4      	bne.n	8006c54 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8006cca:	8afb      	ldrh	r3, [r7, #22]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3720      	adds	r7, #32
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	0801129c 	.word	0x0801129c
 8006cd8:	080115e4 	.word	0x080115e4
 8006cdc:	080112fc 	.word	0x080112fc
 8006ce0:	08011604 	.word	0x08011604

08006ce4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	4603      	mov	r3, r0
 8006cec:	603a      	str	r2, [r7, #0]
 8006cee:	71fb      	strb	r3, [r7, #7]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	8919      	ldrh	r1, [r3, #8]
 8006cf8:	88ba      	ldrh	r2, [r7, #4]
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff faa1 	bl	8006244 <pbuf_alloc>
 8006d02:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <pbuf_clone+0x2a>
    return NULL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	e011      	b.n	8006d32 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8006d0e:	6839      	ldr	r1, [r7, #0]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff fea3 	bl	8006a5c <pbuf_copy>
 8006d16:	4603      	mov	r3, r0
 8006d18:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8006d1a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d006      	beq.n	8006d30 <pbuf_clone+0x4c>
 8006d22:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <pbuf_clone+0x58>)
 8006d24:	f240 5224 	movw	r2, #1316	; 0x524
 8006d28:	4905      	ldr	r1, [pc, #20]	; (8006d40 <pbuf_clone+0x5c>)
 8006d2a:	4806      	ldr	r0, [pc, #24]	; (8006d44 <pbuf_clone+0x60>)
 8006d2c:	f008 ff2a 	bl	800fb84 <iprintf>
  return q;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	0801129c 	.word	0x0801129c
 8006d40:	08011710 	.word	0x08011710
 8006d44:	080112fc 	.word	0x080112fc

08006d48 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8006d4c:	f008 ff32 	bl	800fbb4 <rand>
 8006d50:	4603      	mov	r3, r0
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	4b01      	ldr	r3, [pc, #4]	; (8006d68 <tcp_init+0x20>)
 8006d62:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8006d64:	bf00      	nop
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	20000020 	.word	0x20000020

08006d6c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7d1b      	ldrb	r3, [r3, #20]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d105      	bne.n	8006d88 <tcp_free+0x1c>
 8006d7c:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <tcp_free+0x2c>)
 8006d7e:	22d4      	movs	r2, #212	; 0xd4
 8006d80:	4906      	ldr	r1, [pc, #24]	; (8006d9c <tcp_free+0x30>)
 8006d82:	4807      	ldr	r0, [pc, #28]	; (8006da0 <tcp_free+0x34>)
 8006d84:	f008 fefe 	bl	800fb84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	f7fe fec8 	bl	8005b20 <memp_free>
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	0801179c 	.word	0x0801179c
 8006d9c:	080117cc 	.word	0x080117cc
 8006da0:	080117e0 	.word	0x080117e0

08006da4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	7d1b      	ldrb	r3, [r3, #20]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d105      	bne.n	8006dc0 <tcp_free_listen+0x1c>
 8006db4:	4b06      	ldr	r3, [pc, #24]	; (8006dd0 <tcp_free_listen+0x2c>)
 8006db6:	22df      	movs	r2, #223	; 0xdf
 8006db8:	4906      	ldr	r1, [pc, #24]	; (8006dd4 <tcp_free_listen+0x30>)
 8006dba:	4807      	ldr	r0, [pc, #28]	; (8006dd8 <tcp_free_listen+0x34>)
 8006dbc:	f008 fee2 	bl	800fb84 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8006dc0:	6879      	ldr	r1, [r7, #4]
 8006dc2:	2002      	movs	r0, #2
 8006dc4:	f7fe feac 	bl	8005b20 <memp_free>
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	0801179c 	.word	0x0801179c
 8006dd4:	08011808 	.word	0x08011808
 8006dd8:	080117e0 	.word	0x080117e0

08006ddc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8006de0:	f001 f85c 	bl	8007e9c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8006de4:	4b07      	ldr	r3, [pc, #28]	; (8006e04 <tcp_tmr+0x28>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	3301      	adds	r3, #1
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <tcp_tmr+0x28>)
 8006dee:	701a      	strb	r2, [r3, #0]
 8006df0:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <tcp_tmr+0x28>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8006dfc:	f000 fd0e 	bl	800781c <tcp_slowtmr>
  }
}
 8006e00:	bf00      	nop
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20008159 	.word	0x20008159

08006e08 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <tcp_remove_listener+0x1c>
 8006e18:	4b0d      	ldr	r3, [pc, #52]	; (8006e50 <tcp_remove_listener+0x48>)
 8006e1a:	22ff      	movs	r2, #255	; 0xff
 8006e1c:	490d      	ldr	r1, [pc, #52]	; (8006e54 <tcp_remove_listener+0x4c>)
 8006e1e:	480e      	ldr	r0, [pc, #56]	; (8006e58 <tcp_remove_listener+0x50>)
 8006e20:	f008 feb0 	bl	800fb84 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	60fb      	str	r3, [r7, #12]
 8006e28:	e00a      	b.n	8006e40 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d102      	bne.n	8006e3a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	68db      	ldr	r3, [r3, #12]
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f1      	bne.n	8006e2a <tcp_remove_listener+0x22>
    }
  }
}
 8006e46:	bf00      	nop
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}
 8006e50:	0801179c 	.word	0x0801179c
 8006e54:	08011824 	.word	0x08011824
 8006e58:	080117e0 	.word	0x080117e0

08006e5c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <tcp_listen_closed+0x1c>
 8006e6a:	4b14      	ldr	r3, [pc, #80]	; (8006ebc <tcp_listen_closed+0x60>)
 8006e6c:	f240 1211 	movw	r2, #273	; 0x111
 8006e70:	4913      	ldr	r1, [pc, #76]	; (8006ec0 <tcp_listen_closed+0x64>)
 8006e72:	4814      	ldr	r0, [pc, #80]	; (8006ec4 <tcp_listen_closed+0x68>)
 8006e74:	f008 fe86 	bl	800fb84 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7d1b      	ldrb	r3, [r3, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d006      	beq.n	8006e8e <tcp_listen_closed+0x32>
 8006e80:	4b0e      	ldr	r3, [pc, #56]	; (8006ebc <tcp_listen_closed+0x60>)
 8006e82:	f44f 7289 	mov.w	r2, #274	; 0x112
 8006e86:	4910      	ldr	r1, [pc, #64]	; (8006ec8 <tcp_listen_closed+0x6c>)
 8006e88:	480e      	ldr	r0, [pc, #56]	; (8006ec4 <tcp_listen_closed+0x68>)
 8006e8a:	f008 fe7b 	bl	800fb84 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006e8e:	2301      	movs	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	e00b      	b.n	8006eac <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8006e94:	4a0d      	ldr	r2, [pc, #52]	; (8006ecc <tcp_listen_closed+0x70>)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	6879      	ldr	r1, [r7, #4]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7ff ffb1 	bl	8006e08 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	d9f0      	bls.n	8006e94 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8006eb2:	bf00      	nop
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	0801179c 	.word	0x0801179c
 8006ec0:	0801184c 	.word	0x0801184c
 8006ec4:	080117e0 	.word	0x080117e0
 8006ec8:	08011858 	.word	0x08011858
 8006ecc:	0801377c 	.word	0x0801377c

08006ed0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8006ed0:	b5b0      	push	{r4, r5, r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af04      	add	r7, sp, #16
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d106      	bne.n	8006ef0 <tcp_close_shutdown+0x20>
 8006ee2:	4b63      	ldr	r3, [pc, #396]	; (8007070 <tcp_close_shutdown+0x1a0>)
 8006ee4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ee8:	4962      	ldr	r1, [pc, #392]	; (8007074 <tcp_close_shutdown+0x1a4>)
 8006eea:	4863      	ldr	r0, [pc, #396]	; (8007078 <tcp_close_shutdown+0x1a8>)
 8006eec:	f008 fe4a 	bl	800fb84 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d066      	beq.n	8006fc4 <tcp_close_shutdown+0xf4>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7d1b      	ldrb	r3, [r3, #20]
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d003      	beq.n	8006f06 <tcp_close_shutdown+0x36>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7d1b      	ldrb	r3, [r3, #20]
 8006f02:	2b07      	cmp	r3, #7
 8006f04:	d15e      	bne.n	8006fc4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d104      	bne.n	8006f18 <tcp_close_shutdown+0x48>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f12:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006f16:	d055      	beq.n	8006fc4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8b5b      	ldrh	r3, [r3, #26]
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d106      	bne.n	8006f32 <tcp_close_shutdown+0x62>
 8006f24:	4b52      	ldr	r3, [pc, #328]	; (8007070 <tcp_close_shutdown+0x1a0>)
 8006f26:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8006f2a:	4954      	ldr	r1, [pc, #336]	; (800707c <tcp_close_shutdown+0x1ac>)
 8006f2c:	4852      	ldr	r0, [pc, #328]	; (8007078 <tcp_close_shutdown+0x1a8>)
 8006f2e:	f008 fe29 	bl	800fb84 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006f3a:	687d      	ldr	r5, [r7, #4]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	8ad2      	ldrh	r2, [r2, #22]
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	8b09      	ldrh	r1, [r1, #24]
 8006f48:	9102      	str	r1, [sp, #8]
 8006f4a:	9201      	str	r2, [sp, #4]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	462b      	mov	r3, r5
 8006f50:	4622      	mov	r2, r4
 8006f52:	4601      	mov	r1, r0
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f005 fd89 	bl	800ca6c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fb66 	bl	800862c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8006f60:	4b47      	ldr	r3, [pc, #284]	; (8007080 <tcp_close_shutdown+0x1b0>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d105      	bne.n	8006f76 <tcp_close_shutdown+0xa6>
 8006f6a:	4b45      	ldr	r3, [pc, #276]	; (8007080 <tcp_close_shutdown+0x1b0>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4a43      	ldr	r2, [pc, #268]	; (8007080 <tcp_close_shutdown+0x1b0>)
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	e013      	b.n	8006f9e <tcp_close_shutdown+0xce>
 8006f76:	4b42      	ldr	r3, [pc, #264]	; (8007080 <tcp_close_shutdown+0x1b0>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e00c      	b.n	8006f98 <tcp_close_shutdown+0xc8>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d104      	bne.n	8006f92 <tcp_close_shutdown+0xc2>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	60da      	str	r2, [r3, #12]
 8006f90:	e005      	b.n	8006f9e <tcp_close_shutdown+0xce>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d1ef      	bne.n	8006f7e <tcp_close_shutdown+0xae>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	60da      	str	r2, [r3, #12]
 8006fa4:	4b37      	ldr	r3, [pc, #220]	; (8007084 <tcp_close_shutdown+0x1b4>)
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8006faa:	4b37      	ldr	r3, [pc, #220]	; (8007088 <tcp_close_shutdown+0x1b8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d102      	bne.n	8006fba <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8006fb4:	f003 fffe 	bl	800afb4 <tcp_trigger_input_pcb_close>
 8006fb8:	e002      	b.n	8006fc0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fed6 	bl	8006d6c <tcp_free>
      }
      return ERR_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	e050      	b.n	8007066 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	7d1b      	ldrb	r3, [r3, #20]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d03b      	beq.n	8007044 <tcp_close_shutdown+0x174>
 8006fcc:	2b02      	cmp	r3, #2
 8006fce:	dc44      	bgt.n	800705a <tcp_close_shutdown+0x18a>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d002      	beq.n	8006fda <tcp_close_shutdown+0x10a>
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d02a      	beq.n	800702e <tcp_close_shutdown+0x15e>
 8006fd8:	e03f      	b.n	800705a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	8adb      	ldrh	r3, [r3, #22]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d021      	beq.n	8007026 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8006fe2:	4b2a      	ldr	r3, [pc, #168]	; (800708c <tcp_close_shutdown+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d105      	bne.n	8006ff8 <tcp_close_shutdown+0x128>
 8006fec:	4b27      	ldr	r3, [pc, #156]	; (800708c <tcp_close_shutdown+0x1bc>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	4a26      	ldr	r2, [pc, #152]	; (800708c <tcp_close_shutdown+0x1bc>)
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e013      	b.n	8007020 <tcp_close_shutdown+0x150>
 8006ff8:	4b24      	ldr	r3, [pc, #144]	; (800708c <tcp_close_shutdown+0x1bc>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	60bb      	str	r3, [r7, #8]
 8006ffe:	e00c      	b.n	800701a <tcp_close_shutdown+0x14a>
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d104      	bne.n	8007014 <tcp_close_shutdown+0x144>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68da      	ldr	r2, [r3, #12]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	e005      	b.n	8007020 <tcp_close_shutdown+0x150>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	68db      	ldr	r3, [r3, #12]
 8007018:	60bb      	str	r3, [r7, #8]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1ef      	bne.n	8007000 <tcp_close_shutdown+0x130>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fea0 	bl	8006d6c <tcp_free>
      break;
 800702c:	e01a      	b.n	8007064 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff ff14 	bl	8006e5c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007034:	6879      	ldr	r1, [r7, #4]
 8007036:	4816      	ldr	r0, [pc, #88]	; (8007090 <tcp_close_shutdown+0x1c0>)
 8007038:	f001 fb48 	bl	80086cc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff feb1 	bl	8006da4 <tcp_free_listen>
      break;
 8007042:	e00f      	b.n	8007064 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007044:	6879      	ldr	r1, [r7, #4]
 8007046:	480e      	ldr	r0, [pc, #56]	; (8007080 <tcp_close_shutdown+0x1b0>)
 8007048:	f001 fb40 	bl	80086cc <tcp_pcb_remove>
 800704c:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <tcp_close_shutdown+0x1b4>)
 800704e:	2201      	movs	r2, #1
 8007050:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff fe8a 	bl	8006d6c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8007058:	e004      	b.n	8007064 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f81a 	bl	8007094 <tcp_close_shutdown_fin>
 8007060:	4603      	mov	r3, r0
 8007062:	e000      	b.n	8007066 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bdb0      	pop	{r4, r5, r7, pc}
 800706e:	bf00      	nop
 8007070:	0801179c 	.word	0x0801179c
 8007074:	08011870 	.word	0x08011870
 8007078:	080117e0 	.word	0x080117e0
 800707c:	08011890 	.word	0x08011890
 8007080:	20008150 	.word	0x20008150
 8007084:	20008158 	.word	0x20008158
 8007088:	20008190 	.word	0x20008190
 800708c:	20008148 	.word	0x20008148
 8007090:	2000814c 	.word	0x2000814c

08007094 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b084      	sub	sp, #16
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d106      	bne.n	80070b0 <tcp_close_shutdown_fin+0x1c>
 80070a2:	4b2e      	ldr	r3, [pc, #184]	; (800715c <tcp_close_shutdown_fin+0xc8>)
 80070a4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80070a8:	492d      	ldr	r1, [pc, #180]	; (8007160 <tcp_close_shutdown_fin+0xcc>)
 80070aa:	482e      	ldr	r0, [pc, #184]	; (8007164 <tcp_close_shutdown_fin+0xd0>)
 80070ac:	f008 fd6a 	bl	800fb84 <iprintf>

  switch (pcb->state) {
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	7d1b      	ldrb	r3, [r3, #20]
 80070b4:	2b07      	cmp	r3, #7
 80070b6:	d020      	beq.n	80070fa <tcp_close_shutdown_fin+0x66>
 80070b8:	2b07      	cmp	r3, #7
 80070ba:	dc2b      	bgt.n	8007114 <tcp_close_shutdown_fin+0x80>
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d002      	beq.n	80070c6 <tcp_close_shutdown_fin+0x32>
 80070c0:	2b04      	cmp	r3, #4
 80070c2:	d00d      	beq.n	80070e0 <tcp_close_shutdown_fin+0x4c>
 80070c4:	e026      	b.n	8007114 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f004 fdde 	bl	800bc88 <tcp_send_fin>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d11f      	bne.n	8007118 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2205      	movs	r2, #5
 80070dc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070de:	e01b      	b.n	8007118 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f004 fdd1 	bl	800bc88 <tcp_send_fin>
 80070e6:	4603      	mov	r3, r0
 80070e8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80070ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d114      	bne.n	800711c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2205      	movs	r2, #5
 80070f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80070f8:	e010      	b.n	800711c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f004 fdc4 	bl	800bc88 <tcp_send_fin>
 8007100:	4603      	mov	r3, r0
 8007102:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8007104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2209      	movs	r2, #9
 8007110:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007112:	e005      	b.n	8007120 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e01c      	b.n	8007152 <tcp_close_shutdown_fin+0xbe>
      break;
 8007118:	bf00      	nop
 800711a:	e002      	b.n	8007122 <tcp_close_shutdown_fin+0x8e>
      break;
 800711c:	bf00      	nop
 800711e:	e000      	b.n	8007122 <tcp_close_shutdown_fin+0x8e>
      break;
 8007120:	bf00      	nop
  }

  if (err == ERR_OK) {
 8007122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d103      	bne.n	8007132 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f004 feea 	bl	800bf04 <tcp_output>
 8007130:	e00d      	b.n	800714e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8007132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713a:	d108      	bne.n	800714e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	8b5b      	ldrh	r3, [r3, #26]
 8007140:	f043 0308 	orr.w	r3, r3, #8
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800714a:	2300      	movs	r3, #0
 800714c:	e001      	b.n	8007152 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800714e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3710      	adds	r7, #16
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	0801179c 	.word	0x0801179c
 8007160:	0801184c 	.word	0x0801184c
 8007164:	080117e0 	.word	0x080117e0

08007168 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d109      	bne.n	800718a <tcp_close+0x22>
 8007176:	4b0f      	ldr	r3, [pc, #60]	; (80071b4 <tcp_close+0x4c>)
 8007178:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800717c:	490e      	ldr	r1, [pc, #56]	; (80071b8 <tcp_close+0x50>)
 800717e:	480f      	ldr	r0, [pc, #60]	; (80071bc <tcp_close+0x54>)
 8007180:	f008 fd00 	bl	800fb84 <iprintf>
 8007184:	f06f 030f 	mvn.w	r3, #15
 8007188:	e00f      	b.n	80071aa <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	7d1b      	ldrb	r3, [r3, #20]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d006      	beq.n	80071a0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	8b5b      	ldrh	r3, [r3, #26]
 8007196:	f043 0310 	orr.w	r3, r3, #16
 800719a:	b29a      	uxth	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80071a0:	2101      	movs	r1, #1
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f7ff fe94 	bl	8006ed0 <tcp_close_shutdown>
 80071a8:	4603      	mov	r3, r0
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	0801179c 	.word	0x0801179c
 80071b8:	080118ac 	.word	0x080118ac
 80071bc:	080117e0 	.word	0x080117e0

080071c0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08e      	sub	sp, #56	; 0x38
 80071c4:	af04      	add	r7, sp, #16
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d107      	bne.n	80071e0 <tcp_abandon+0x20>
 80071d0:	4b52      	ldr	r3, [pc, #328]	; (800731c <tcp_abandon+0x15c>)
 80071d2:	f240 223d 	movw	r2, #573	; 0x23d
 80071d6:	4952      	ldr	r1, [pc, #328]	; (8007320 <tcp_abandon+0x160>)
 80071d8:	4852      	ldr	r0, [pc, #328]	; (8007324 <tcp_abandon+0x164>)
 80071da:	f008 fcd3 	bl	800fb84 <iprintf>
 80071de:	e099      	b.n	8007314 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	7d1b      	ldrb	r3, [r3, #20]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d106      	bne.n	80071f6 <tcp_abandon+0x36>
 80071e8:	4b4c      	ldr	r3, [pc, #304]	; (800731c <tcp_abandon+0x15c>)
 80071ea:	f44f 7210 	mov.w	r2, #576	; 0x240
 80071ee:	494e      	ldr	r1, [pc, #312]	; (8007328 <tcp_abandon+0x168>)
 80071f0:	484c      	ldr	r0, [pc, #304]	; (8007324 <tcp_abandon+0x164>)
 80071f2:	f008 fcc7 	bl	800fb84 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	7d1b      	ldrb	r3, [r3, #20]
 80071fa:	2b0a      	cmp	r3, #10
 80071fc:	d107      	bne.n	800720e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	484a      	ldr	r0, [pc, #296]	; (800732c <tcp_abandon+0x16c>)
 8007202:	f001 fa63 	bl	80086cc <tcp_pcb_remove>
    tcp_free(pcb);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fdb0 	bl	8006d6c <tcp_free>
 800720c:	e082      	b.n	8007314 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007228:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	7d1b      	ldrb	r3, [r3, #20]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d126      	bne.n	8007286 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8adb      	ldrh	r3, [r3, #22]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02e      	beq.n	800729e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007240:	4b3b      	ldr	r3, [pc, #236]	; (8007330 <tcp_abandon+0x170>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	429a      	cmp	r2, r3
 8007248:	d105      	bne.n	8007256 <tcp_abandon+0x96>
 800724a:	4b39      	ldr	r3, [pc, #228]	; (8007330 <tcp_abandon+0x170>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4a37      	ldr	r2, [pc, #220]	; (8007330 <tcp_abandon+0x170>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	e013      	b.n	800727e <tcp_abandon+0xbe>
 8007256:	4b36      	ldr	r3, [pc, #216]	; (8007330 <tcp_abandon+0x170>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	e00c      	b.n	8007278 <tcp_abandon+0xb8>
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	429a      	cmp	r2, r3
 8007266:	d104      	bne.n	8007272 <tcp_abandon+0xb2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	60da      	str	r2, [r3, #12]
 8007270:	e005      	b.n	800727e <tcp_abandon+0xbe>
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1ef      	bne.n	800725e <tcp_abandon+0x9e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2200      	movs	r2, #0
 8007282:	60da      	str	r2, [r3, #12]
 8007284:	e00b      	b.n	800729e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	8adb      	ldrh	r3, [r3, #22]
 800728e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	4828      	ldr	r0, [pc, #160]	; (8007334 <tcp_abandon+0x174>)
 8007294:	f001 fa1a 	bl	80086cc <tcp_pcb_remove>
 8007298:	4b27      	ldr	r3, [pc, #156]	; (8007338 <tcp_abandon+0x178>)
 800729a:	2201      	movs	r2, #1
 800729c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d004      	beq.n	80072b0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fed6 	bl	800805c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 fecd 	bl	800805c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d004      	beq.n	80072d4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fec4 	bl	800805c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	3304      	adds	r3, #4
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	8b12      	ldrh	r2, [r2, #24]
 80072e4:	9202      	str	r2, [sp, #8]
 80072e6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80072e8:	9201      	str	r2, [sp, #4]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	460b      	mov	r3, r1
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	69b9      	ldr	r1, [r7, #24]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f005 fbba 	bl	800ca6c <tcp_rst>
    }
    last_state = pcb->state;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	7d1b      	ldrb	r3, [r3, #20]
 80072fc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7ff fd34 	bl	8006d6c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <tcp_abandon+0x154>
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f06f 010c 	mvn.w	r1, #12
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	4798      	blx	r3
  }
}
 8007314:	3728      	adds	r7, #40	; 0x28
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	0801179c 	.word	0x0801179c
 8007320:	080118e0 	.word	0x080118e0
 8007324:	080117e0 	.word	0x080117e0
 8007328:	080118fc 	.word	0x080118fc
 800732c:	20008154 	.word	0x20008154
 8007330:	20008148 	.word	0x20008148
 8007334:	20008150 	.word	0x20008150
 8007338:	20008158 	.word	0x20008158

0800733c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8007344:	2101      	movs	r1, #1
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ff3a 	bl	80071c0 <tcp_abandon>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	4613      	mov	r3, r2
 8007360:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8007362:	2304      	movs	r3, #4
 8007364:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800736c:	4b3e      	ldr	r3, [pc, #248]	; (8007468 <tcp_bind+0x114>)
 800736e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <tcp_bind+0x36>
 8007376:	4b3d      	ldr	r3, [pc, #244]	; (800746c <tcp_bind+0x118>)
 8007378:	f240 22a9 	movw	r2, #681	; 0x2a9
 800737c:	493c      	ldr	r1, [pc, #240]	; (8007470 <tcp_bind+0x11c>)
 800737e:	483d      	ldr	r0, [pc, #244]	; (8007474 <tcp_bind+0x120>)
 8007380:	f008 fc00 	bl	800fb84 <iprintf>
 8007384:	f06f 030f 	mvn.w	r3, #15
 8007388:	e06a      	b.n	8007460 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	7d1b      	ldrb	r3, [r3, #20]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d009      	beq.n	80073a6 <tcp_bind+0x52>
 8007392:	4b36      	ldr	r3, [pc, #216]	; (800746c <tcp_bind+0x118>)
 8007394:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007398:	4937      	ldr	r1, [pc, #220]	; (8007478 <tcp_bind+0x124>)
 800739a:	4836      	ldr	r0, [pc, #216]	; (8007474 <tcp_bind+0x120>)
 800739c:	f008 fbf2 	bl	800fb84 <iprintf>
 80073a0:	f06f 0305 	mvn.w	r3, #5
 80073a4:	e05c      	b.n	8007460 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80073ac:	f000 f9f0 	bl	8007790 <tcp_new_port>
 80073b0:	4603      	mov	r3, r0
 80073b2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d135      	bne.n	8007426 <tcp_bind+0xd2>
      return ERR_BUF;
 80073ba:	f06f 0301 	mvn.w	r3, #1
 80073be:	e04f      	b.n	8007460 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80073c0:	2300      	movs	r3, #0
 80073c2:	61fb      	str	r3, [r7, #28]
 80073c4:	e02b      	b.n	800741e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80073c6:	4a2d      	ldr	r2, [pc, #180]	; (800747c <tcp_bind+0x128>)
 80073c8:	69fb      	ldr	r3, [r7, #28]
 80073ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	61bb      	str	r3, [r7, #24]
 80073d2:	e01e      	b.n	8007412 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	8adb      	ldrh	r3, [r3, #22]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d116      	bne.n	800740c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80073de:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d010      	beq.n	8007406 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d00c      	beq.n	8007406 <tcp_bind+0xb2>
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d009      	beq.n	8007406 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d005      	beq.n	8007406 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8007402:	429a      	cmp	r2, r3
 8007404:	d102      	bne.n	800740c <tcp_bind+0xb8>
              return ERR_USE;
 8007406:	f06f 0307 	mvn.w	r3, #7
 800740a:	e029      	b.n	8007460 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1dd      	bne.n	80073d4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	3301      	adds	r3, #1
 800741c:	61fb      	str	r3, [r7, #28]
 800741e:	69fa      	ldr	r2, [r7, #28]
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	429a      	cmp	r2, r3
 8007424:	dbcf      	blt.n	80073c6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00c      	beq.n	8007446 <tcp_bind+0xf2>
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d008      	beq.n	8007446 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <tcp_bind+0xec>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	e000      	b.n	8007442 <tcp_bind+0xee>
 8007440:	2300      	movs	r3, #0
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	88fa      	ldrh	r2, [r7, #6]
 800744a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800744c:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <tcp_bind+0x12c>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	60da      	str	r2, [r3, #12]
 8007454:	4a0a      	ldr	r2, [pc, #40]	; (8007480 <tcp_bind+0x12c>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	f005 fcc9 	bl	800cdf0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3720      	adds	r7, #32
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	080137a4 	.word	0x080137a4
 800746c:	0801179c 	.word	0x0801179c
 8007470:	08011930 	.word	0x08011930
 8007474:	080117e0 	.word	0x080117e0
 8007478:	08011948 	.word	0x08011948
 800747c:	0801377c 	.word	0x0801377c
 8007480:	20008148 	.word	0x20008148

08007484 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	4613      	mov	r3, r2
 8007490:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d106      	bne.n	80074a6 <tcp_accept_null+0x22>
 8007498:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <tcp_accept_null+0x34>)
 800749a:	f240 320f 	movw	r2, #783	; 0x30f
 800749e:	4907      	ldr	r1, [pc, #28]	; (80074bc <tcp_accept_null+0x38>)
 80074a0:	4807      	ldr	r0, [pc, #28]	; (80074c0 <tcp_accept_null+0x3c>)
 80074a2:	f008 fb6f 	bl	800fb84 <iprintf>

  tcp_abort(pcb);
 80074a6:	68b8      	ldr	r0, [r7, #8]
 80074a8:	f7ff ff48 	bl	800733c <tcp_abort>

  return ERR_ABRT;
 80074ac:	f06f 030c 	mvn.w	r3, #12
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	0801179c 	.word	0x0801179c
 80074bc:	08011970 	.word	0x08011970
 80074c0:	080117e0 	.word	0x080117e0

080074c4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b082      	sub	sp, #8
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	460b      	mov	r3, r1
 80074ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	2200      	movs	r2, #0
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f806 	bl	80074e8 <tcp_listen_with_backlog_and_err>
 80074dc:	4603      	mov	r3, r0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	460b      	mov	r3, r1
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d109      	bne.n	8007514 <tcp_listen_with_backlog_and_err+0x2c>
 8007500:	4b47      	ldr	r3, [pc, #284]	; (8007620 <tcp_listen_with_backlog_and_err+0x138>)
 8007502:	f240 3259 	movw	r2, #857	; 0x359
 8007506:	4947      	ldr	r1, [pc, #284]	; (8007624 <tcp_listen_with_backlog_and_err+0x13c>)
 8007508:	4847      	ldr	r0, [pc, #284]	; (8007628 <tcp_listen_with_backlog_and_err+0x140>)
 800750a:	f008 fb3b 	bl	800fb84 <iprintf>
 800750e:	23f0      	movs	r3, #240	; 0xf0
 8007510:	76fb      	strb	r3, [r7, #27]
 8007512:	e079      	b.n	8007608 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	7d1b      	ldrb	r3, [r3, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d009      	beq.n	8007530 <tcp_listen_with_backlog_and_err+0x48>
 800751c:	4b40      	ldr	r3, [pc, #256]	; (8007620 <tcp_listen_with_backlog_and_err+0x138>)
 800751e:	f240 325a 	movw	r2, #858	; 0x35a
 8007522:	4942      	ldr	r1, [pc, #264]	; (800762c <tcp_listen_with_backlog_and_err+0x144>)
 8007524:	4840      	ldr	r0, [pc, #256]	; (8007628 <tcp_listen_with_backlog_and_err+0x140>)
 8007526:	f008 fb2d 	bl	800fb84 <iprintf>
 800752a:	23f1      	movs	r3, #241	; 0xf1
 800752c:	76fb      	strb	r3, [r7, #27]
 800752e:	e06b      	b.n	8007608 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	7d1b      	ldrb	r3, [r3, #20]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d104      	bne.n	8007542 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800753c:	23f7      	movs	r3, #247	; 0xf7
 800753e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007540:	e062      	b.n	8007608 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8007542:	2002      	movs	r0, #2
 8007544:	f7fe fa7c 	bl	8005a40 <memp_malloc>
 8007548:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8007550:	23ff      	movs	r3, #255	; 0xff
 8007552:	76fb      	strb	r3, [r7, #27]
    goto done;
 8007554:	e058      	b.n	8007608 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	691a      	ldr	r2, [r3, #16]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	8ada      	ldrh	r2, [r3, #22]
 8007562:	69fb      	ldr	r3, [r7, #28]
 8007564:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	2201      	movs	r2, #1
 800756a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	7d5a      	ldrb	r2, [r3, #21]
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	7a5a      	ldrb	r2, [r3, #9]
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	2200      	movs	r2, #0
 8007580:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	7ada      	ldrb	r2, [r3, #11]
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	7a9a      	ldrb	r2, [r3, #10]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8adb      	ldrh	r3, [r3, #22]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d021      	beq.n	80075e6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80075a2:	4b23      	ldr	r3, [pc, #140]	; (8007630 <tcp_listen_with_backlog_and_err+0x148>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d105      	bne.n	80075b8 <tcp_listen_with_backlog_and_err+0xd0>
 80075ac:	4b20      	ldr	r3, [pc, #128]	; (8007630 <tcp_listen_with_backlog_and_err+0x148>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	4a1f      	ldr	r2, [pc, #124]	; (8007630 <tcp_listen_with_backlog_and_err+0x148>)
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	e013      	b.n	80075e0 <tcp_listen_with_backlog_and_err+0xf8>
 80075b8:	4b1d      	ldr	r3, [pc, #116]	; (8007630 <tcp_listen_with_backlog_and_err+0x148>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	617b      	str	r3, [r7, #20]
 80075be:	e00c      	b.n	80075da <tcp_listen_with_backlog_and_err+0xf2>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d104      	bne.n	80075d4 <tcp_listen_with_backlog_and_err+0xec>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	60da      	str	r2, [r3, #12]
 80075d2:	e005      	b.n	80075e0 <tcp_listen_with_backlog_and_err+0xf8>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1ef      	bne.n	80075c0 <tcp_listen_with_backlog_and_err+0xd8>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7ff fbc0 	bl	8006d6c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4a11      	ldr	r2, [pc, #68]	; (8007634 <tcp_listen_with_backlog_and_err+0x14c>)
 80075f0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80075f2:	4b11      	ldr	r3, [pc, #68]	; (8007638 <tcp_listen_with_backlog_and_err+0x150>)
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	60da      	str	r2, [r3, #12]
 80075fa:	4a0f      	ldr	r2, [pc, #60]	; (8007638 <tcp_listen_with_backlog_and_err+0x150>)
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	6013      	str	r3, [r2, #0]
 8007600:	f005 fbf6 	bl	800cdf0 <tcp_timer_needed>
  res = ERR_OK;
 8007604:	2300      	movs	r3, #0
 8007606:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d002      	beq.n	8007614 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	7efa      	ldrb	r2, [r7, #27]
 8007612:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8007614:	69fb      	ldr	r3, [r7, #28]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	0801179c 	.word	0x0801179c
 8007624:	08011990 	.word	0x08011990
 8007628:	080117e0 	.word	0x080117e0
 800762c:	080119c0 	.word	0x080119c0
 8007630:	20008148 	.word	0x20008148
 8007634:	08007485 	.word	0x08007485
 8007638:	2000814c 	.word	0x2000814c

0800763c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d106      	bne.n	8007658 <tcp_update_rcv_ann_wnd+0x1c>
 800764a:	4b25      	ldr	r3, [pc, #148]	; (80076e0 <tcp_update_rcv_ann_wnd+0xa4>)
 800764c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8007650:	4924      	ldr	r1, [pc, #144]	; (80076e4 <tcp_update_rcv_ann_wnd+0xa8>)
 8007652:	4825      	ldr	r0, [pc, #148]	; (80076e8 <tcp_update_rcv_ann_wnd+0xac>)
 8007654:	f008 fa96 	bl	800fb84 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007660:	4413      	add	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800766c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007670:	bf28      	it	cs
 8007672:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8007676:	b292      	uxth	r2, r2
 8007678:	4413      	add	r3, r2
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	1ad3      	subs	r3, r2, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	db08      	blt.n	8007694 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	1ad3      	subs	r3, r2, r3
 8007692:	e020      	b.n	80076d6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	dd03      	ble.n	80076aa <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80076a8:	e014      	b.n	80076d4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076bc:	d306      	bcc.n	80076cc <tcp_update_rcv_ann_wnd+0x90>
 80076be:	4b08      	ldr	r3, [pc, #32]	; (80076e0 <tcp_update_rcv_ann_wnd+0xa4>)
 80076c0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80076c4:	4909      	ldr	r1, [pc, #36]	; (80076ec <tcp_update_rcv_ann_wnd+0xb0>)
 80076c6:	4808      	ldr	r0, [pc, #32]	; (80076e8 <tcp_update_rcv_ann_wnd+0xac>)
 80076c8:	f008 fa5c 	bl	800fb84 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80076d4:	2300      	movs	r3, #0
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	0801179c 	.word	0x0801179c
 80076e4:	080119f8 	.word	0x080119f8
 80076e8:	080117e0 	.word	0x080117e0
 80076ec:	08011a1c 	.word	0x08011a1c

080076f0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	460b      	mov	r3, r1
 80076fa:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d107      	bne.n	8007712 <tcp_recved+0x22>
 8007702:	4b1f      	ldr	r3, [pc, #124]	; (8007780 <tcp_recved+0x90>)
 8007704:	f240 32cf 	movw	r2, #975	; 0x3cf
 8007708:	491e      	ldr	r1, [pc, #120]	; (8007784 <tcp_recved+0x94>)
 800770a:	481f      	ldr	r0, [pc, #124]	; (8007788 <tcp_recved+0x98>)
 800770c:	f008 fa3a 	bl	800fb84 <iprintf>
 8007710:	e032      	b.n	8007778 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	7d1b      	ldrb	r3, [r3, #20]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d106      	bne.n	8007728 <tcp_recved+0x38>
 800771a:	4b19      	ldr	r3, [pc, #100]	; (8007780 <tcp_recved+0x90>)
 800771c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8007720:	491a      	ldr	r1, [pc, #104]	; (800778c <tcp_recved+0x9c>)
 8007722:	4819      	ldr	r0, [pc, #100]	; (8007788 <tcp_recved+0x98>)
 8007724:	f008 fa2e 	bl	800fb84 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800772c:	887b      	ldrh	r3, [r7, #2]
 800772e:	4413      	add	r3, r2
 8007730:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8007732:	89fb      	ldrh	r3, [r7, #14]
 8007734:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007738:	d804      	bhi.n	8007744 <tcp_recved+0x54>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800773e:	89fa      	ldrh	r2, [r7, #14]
 8007740:	429a      	cmp	r2, r3
 8007742:	d204      	bcs.n	800774e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800774a:	851a      	strh	r2, [r3, #40]	; 0x28
 800774c:	e002      	b.n	8007754 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	89fa      	ldrh	r2, [r7, #14]
 8007752:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff71 	bl	800763c <tcp_update_rcv_ann_wnd>
 800775a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8007762:	d309      	bcc.n	8007778 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	8b5b      	ldrh	r3, [r3, #26]
 8007768:	f043 0302 	orr.w	r3, r3, #2
 800776c:	b29a      	uxth	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f004 fbc6 	bl	800bf04 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8007778:	3710      	adds	r7, #16
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	0801179c 	.word	0x0801179c
 8007784:	08011a38 	.word	0x08011a38
 8007788:	080117e0 	.word	0x080117e0
 800778c:	08011a50 	.word	0x08011a50

08007790 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8007796:	2300      	movs	r3, #0
 8007798:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800779a:	4b1e      	ldr	r3, [pc, #120]	; (8007814 <tcp_new_port+0x84>)
 800779c:	881b      	ldrh	r3, [r3, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	4b1c      	ldr	r3, [pc, #112]	; (8007814 <tcp_new_port+0x84>)
 80077a4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80077a6:	4b1b      	ldr	r3, [pc, #108]	; (8007814 <tcp_new_port+0x84>)
 80077a8:	881b      	ldrh	r3, [r3, #0]
 80077aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d103      	bne.n	80077ba <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80077b2:	4b18      	ldr	r3, [pc, #96]	; (8007814 <tcp_new_port+0x84>)
 80077b4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80077b8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077ba:	2300      	movs	r3, #0
 80077bc:	71fb      	strb	r3, [r7, #7]
 80077be:	e01e      	b.n	80077fe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077c0:	79fb      	ldrb	r3, [r7, #7]
 80077c2:	4a15      	ldr	r2, [pc, #84]	; (8007818 <tcp_new_port+0x88>)
 80077c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	603b      	str	r3, [r7, #0]
 80077cc:	e011      	b.n	80077f2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	8ada      	ldrh	r2, [r3, #22]
 80077d2:	4b10      	ldr	r3, [pc, #64]	; (8007814 <tcp_new_port+0x84>)
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d108      	bne.n	80077ec <tcp_new_port+0x5c>
        n++;
 80077da:	88bb      	ldrh	r3, [r7, #4]
 80077dc:	3301      	adds	r3, #1
 80077de:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80077e0:	88bb      	ldrh	r3, [r7, #4]
 80077e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077e6:	d3d8      	bcc.n	800779a <tcp_new_port+0xa>
          return 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	e00d      	b.n	8007808 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	603b      	str	r3, [r7, #0]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1ea      	bne.n	80077ce <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	3301      	adds	r3, #1
 80077fc:	71fb      	strb	r3, [r7, #7]
 80077fe:	79fb      	ldrb	r3, [r7, #7]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d9dd      	bls.n	80077c0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8007804:	4b03      	ldr	r3, [pc, #12]	; (8007814 <tcp_new_port+0x84>)
 8007806:	881b      	ldrh	r3, [r3, #0]
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	20000020 	.word	0x20000020
 8007818:	0801377c 	.word	0x0801377c

0800781c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800781c:	b5b0      	push	{r4, r5, r7, lr}
 800781e:	b090      	sub	sp, #64	; 0x40
 8007820:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8007828:	4b94      	ldr	r3, [pc, #592]	; (8007a7c <tcp_slowtmr+0x260>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a93      	ldr	r2, [pc, #588]	; (8007a7c <tcp_slowtmr+0x260>)
 8007830:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8007832:	4b93      	ldr	r3, [pc, #588]	; (8007a80 <tcp_slowtmr+0x264>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	3301      	adds	r3, #1
 8007838:	b2da      	uxtb	r2, r3
 800783a:	4b91      	ldr	r3, [pc, #580]	; (8007a80 <tcp_slowtmr+0x264>)
 800783c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800783e:	2300      	movs	r3, #0
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8007842:	4b90      	ldr	r3, [pc, #576]	; (8007a84 <tcp_slowtmr+0x268>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8007848:	e29f      	b.n	8007d8a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800784a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784c:	7d1b      	ldrb	r3, [r3, #20]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d106      	bne.n	8007860 <tcp_slowtmr+0x44>
 8007852:	4b8d      	ldr	r3, [pc, #564]	; (8007a88 <tcp_slowtmr+0x26c>)
 8007854:	f240 42be 	movw	r2, #1214	; 0x4be
 8007858:	498c      	ldr	r1, [pc, #560]	; (8007a8c <tcp_slowtmr+0x270>)
 800785a:	488d      	ldr	r0, [pc, #564]	; (8007a90 <tcp_slowtmr+0x274>)
 800785c:	f008 f992 	bl	800fb84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007862:	7d1b      	ldrb	r3, [r3, #20]
 8007864:	2b01      	cmp	r3, #1
 8007866:	d106      	bne.n	8007876 <tcp_slowtmr+0x5a>
 8007868:	4b87      	ldr	r3, [pc, #540]	; (8007a88 <tcp_slowtmr+0x26c>)
 800786a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800786e:	4989      	ldr	r1, [pc, #548]	; (8007a94 <tcp_slowtmr+0x278>)
 8007870:	4887      	ldr	r0, [pc, #540]	; (8007a90 <tcp_slowtmr+0x274>)
 8007872:	f008 f987 	bl	800fb84 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	7d1b      	ldrb	r3, [r3, #20]
 800787a:	2b0a      	cmp	r3, #10
 800787c:	d106      	bne.n	800788c <tcp_slowtmr+0x70>
 800787e:	4b82      	ldr	r3, [pc, #520]	; (8007a88 <tcp_slowtmr+0x26c>)
 8007880:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8007884:	4984      	ldr	r1, [pc, #528]	; (8007a98 <tcp_slowtmr+0x27c>)
 8007886:	4882      	ldr	r0, [pc, #520]	; (8007a90 <tcp_slowtmr+0x274>)
 8007888:	f008 f97c 	bl	800fb84 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788e:	7f9a      	ldrb	r2, [r3, #30]
 8007890:	4b7b      	ldr	r3, [pc, #492]	; (8007a80 <tcp_slowtmr+0x264>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d105      	bne.n	80078a4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800789c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80078a2:	e272      	b.n	8007d8a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80078a4:	4b76      	ldr	r3, [pc, #472]	; (8007a80 <tcp_slowtmr+0x264>)
 80078a6:	781a      	ldrb	r2, [r3, #0]
 80078a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078aa:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80078b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ba:	7d1b      	ldrb	r3, [r3, #20]
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d10a      	bne.n	80078d6 <tcp_slowtmr+0xba>
 80078c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078c6:	2b05      	cmp	r3, #5
 80078c8:	d905      	bls.n	80078d6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80078ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078ce:	3301      	adds	r3, #1
 80078d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078d4:	e11e      	b.n	8007b14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80078dc:	2b0b      	cmp	r3, #11
 80078de:	d905      	bls.n	80078ec <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80078e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078e4:	3301      	adds	r3, #1
 80078e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80078ea:	e113      	b.n	8007b14 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80078ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ee:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d075      	beq.n	80079e2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80078f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d006      	beq.n	800790c <tcp_slowtmr+0xf0>
 80078fe:	4b62      	ldr	r3, [pc, #392]	; (8007a88 <tcp_slowtmr+0x26c>)
 8007900:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8007904:	4965      	ldr	r1, [pc, #404]	; (8007a9c <tcp_slowtmr+0x280>)
 8007906:	4862      	ldr	r0, [pc, #392]	; (8007a90 <tcp_slowtmr+0x274>)
 8007908:	f008 f93c 	bl	800fb84 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800790c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800790e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007910:	2b00      	cmp	r3, #0
 8007912:	d106      	bne.n	8007922 <tcp_slowtmr+0x106>
 8007914:	4b5c      	ldr	r3, [pc, #368]	; (8007a88 <tcp_slowtmr+0x26c>)
 8007916:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800791a:	4961      	ldr	r1, [pc, #388]	; (8007aa0 <tcp_slowtmr+0x284>)
 800791c:	485c      	ldr	r0, [pc, #368]	; (8007a90 <tcp_slowtmr+0x274>)
 800791e:	f008 f931 	bl	800fb84 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8007922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007924:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8007928:	2b0b      	cmp	r3, #11
 800792a:	d905      	bls.n	8007938 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800792c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007930:	3301      	adds	r3, #1
 8007932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007936:	e0ed      	b.n	8007b14 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8007938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800793e:	3b01      	subs	r3, #1
 8007940:	4a58      	ldr	r2, [pc, #352]	; (8007aa4 <tcp_slowtmr+0x288>)
 8007942:	5cd3      	ldrb	r3, [r2, r3]
 8007944:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8007946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007948:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800794c:	7c7a      	ldrb	r2, [r7, #17]
 800794e:	429a      	cmp	r2, r3
 8007950:	d907      	bls.n	8007962 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007958:	3301      	adds	r3, #1
 800795a:	b2da      	uxtb	r2, r3
 800795c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800795e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8007962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007964:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007968:	7c7a      	ldrb	r2, [r7, #17]
 800796a:	429a      	cmp	r2, r3
 800796c:	f200 80d2 	bhi.w	8007b14 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8007970:	2301      	movs	r3, #1
 8007972:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8007974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007976:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800797a:	2b00      	cmp	r3, #0
 800797c:	d108      	bne.n	8007990 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800797e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007980:	f005 f968 	bl	800cc54 <tcp_zero_window_probe>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d014      	beq.n	80079b4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800798a:	2300      	movs	r3, #0
 800798c:	623b      	str	r3, [r7, #32]
 800798e:	e011      	b.n	80079b4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8007990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007992:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007996:	4619      	mov	r1, r3
 8007998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800799a:	f004 f82d 	bl	800b9f8 <tcp_split_unsent_seg>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d107      	bne.n	80079b4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80079a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80079a6:	f004 faad 	bl	800bf04 <tcp_output>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f000 80ac 	beq.w	8007b14 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80079bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80079c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079ca:	2b06      	cmp	r3, #6
 80079cc:	f200 80a2 	bhi.w	8007b14 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80079d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80079d6:	3301      	adds	r3, #1
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80079e0:	e098      	b.n	8007b14 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80079e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	db0f      	blt.n	8007a0c <tcp_slowtmr+0x1f0>
 80079ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079ee:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80079f2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d008      	beq.n	8007a0c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80079fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3301      	adds	r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	b21a      	sxth	r2, r3
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	db7b      	blt.n	8007b14 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8007a1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007a1e:	f004 fd63 	bl	800c4e8 <tcp_rexmit_rto_prepare>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <tcp_slowtmr+0x21c>
 8007a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d171      	bne.n	8007b14 <tcp_slowtmr+0x2f8>
 8007a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d06d      	beq.n	8007b14 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	7d1b      	ldrb	r3, [r3, #20]
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d03a      	beq.n	8007ab6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8007a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a46:	2b0c      	cmp	r3, #12
 8007a48:	bf28      	it	cs
 8007a4a:	230c      	movcs	r3, #12
 8007a4c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007a54:	10db      	asrs	r3, r3, #3
 8007a56:	b21b      	sxth	r3, r3
 8007a58:	461a      	mov	r2, r3
 8007a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007a60:	4413      	add	r3, r2
 8007a62:	7efa      	ldrb	r2, [r7, #27]
 8007a64:	4910      	ldr	r1, [pc, #64]	; (8007aa8 <tcp_slowtmr+0x28c>)
 8007a66:	5c8a      	ldrb	r2, [r1, r2]
 8007a68:	4093      	lsls	r3, r2
 8007a6a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007a72:	4293      	cmp	r3, r2
 8007a74:	dc1a      	bgt.n	8007aac <tcp_slowtmr+0x290>
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	b21a      	sxth	r2, r3
 8007a7a:	e019      	b.n	8007ab0 <tcp_slowtmr+0x294>
 8007a7c:	20008144 	.word	0x20008144
 8007a80:	2000815a 	.word	0x2000815a
 8007a84:	20008150 	.word	0x20008150
 8007a88:	0801179c 	.word	0x0801179c
 8007a8c:	08011ae0 	.word	0x08011ae0
 8007a90:	080117e0 	.word	0x080117e0
 8007a94:	08011b0c 	.word	0x08011b0c
 8007a98:	08011b38 	.word	0x08011b38
 8007a9c:	08011b68 	.word	0x08011b68
 8007aa0:	08011b9c 	.word	0x08011b9c
 8007aa4:	08013774 	.word	0x08013774
 8007aa8:	08013764 	.word	0x08013764
 8007aac:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	2200      	movs	r2, #0
 8007aba:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	bf28      	it	cs
 8007acc:	4613      	movcs	r3, r2
 8007ace:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8007ad0:	8a7b      	ldrh	r3, [r7, #18]
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d206      	bcs.n	8007afc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8007b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8007b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b10:	f004 fd5a 	bl	800c5c8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8007b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b16:	7d1b      	ldrb	r3, [r3, #20]
 8007b18:	2b06      	cmp	r3, #6
 8007b1a:	d111      	bne.n	8007b40 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8007b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b1e:	8b5b      	ldrh	r3, [r3, #26]
 8007b20:	f003 0310 	and.w	r3, r3, #16
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b28:	4b9d      	ldr	r3, [pc, #628]	; (8007da0 <tcp_slowtmr+0x584>)
 8007b2a:	681a      	ldr	r2, [r3, #0]
 8007b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b2e:	6a1b      	ldr	r3, [r3, #32]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b28      	cmp	r3, #40	; 0x28
 8007b34:	d904      	bls.n	8007b40 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8007b36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b42:	7a5b      	ldrb	r3, [r3, #9]
 8007b44:	f003 0308 	and.w	r3, r3, #8
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d04c      	beq.n	8007be6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8007b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b4e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d003      	beq.n	8007b5c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8007b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b56:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8007b58:	2b07      	cmp	r3, #7
 8007b5a:	d144      	bne.n	8007be6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b5c:	4b90      	ldr	r3, [pc, #576]	; (8007da0 <tcp_slowtmr+0x584>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8007b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b6c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8007b70:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8007b74:	498b      	ldr	r1, [pc, #556]	; (8007da4 <tcp_slowtmr+0x588>)
 8007b76:	fba1 1303 	umull	r1, r3, r1, r3
 8007b7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d90a      	bls.n	8007b96 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8007b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b84:	3301      	adds	r3, #1
 8007b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8007b8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b8e:	3301      	adds	r3, #1
 8007b90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b94:	e027      	b.n	8007be6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b96:	4b82      	ldr	r3, [pc, #520]	; (8007da0 <tcp_slowtmr+0x584>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007bac:	4618      	mov	r0, r3
 8007bae:	4b7e      	ldr	r3, [pc, #504]	; (8007da8 <tcp_slowtmr+0x58c>)
 8007bb0:	fb00 f303 	mul.w	r3, r0, r3
 8007bb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8007bb6:	497b      	ldr	r1, [pc, #492]	; (8007da4 <tcp_slowtmr+0x588>)
 8007bb8:	fba1 1303 	umull	r1, r3, r1, r3
 8007bbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d911      	bls.n	8007be6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8007bc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007bc4:	f005 f806 	bl	800cbd4 <tcp_keepalive>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8007bce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d107      	bne.n	8007be6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8007bdc:	3301      	adds	r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d011      	beq.n	8007c12 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8007bee:	4b6c      	ldr	r3, [pc, #432]	; (8007da0 <tcp_slowtmr+0x584>)
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	1ad2      	subs	r2, r2, r3
 8007bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8007bfe:	4619      	mov	r1, r3
 8007c00:	460b      	mov	r3, r1
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	440b      	add	r3, r1
 8007c06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d302      	bcc.n	8007c12 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8007c0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c0e:	f000 fec1 	bl	8008994 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	7d1b      	ldrb	r3, [r3, #20]
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d10b      	bne.n	8007c32 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c1a:	4b61      	ldr	r3, [pc, #388]	; (8007da0 <tcp_slowtmr+0x584>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c20:	6a1b      	ldr	r3, [r3, #32]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b28      	cmp	r3, #40	; 0x28
 8007c26:	d904      	bls.n	8007c32 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8007c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8007c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c34:	7d1b      	ldrb	r3, [r3, #20]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	d10b      	bne.n	8007c52 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c3a:	4b59      	ldr	r3, [pc, #356]	; (8007da0 <tcp_slowtmr+0x584>)
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	6a1b      	ldr	r3, [r3, #32]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2bf0      	cmp	r3, #240	; 0xf0
 8007c46:	d904      	bls.n	8007c52 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8007c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007c52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d060      	beq.n	8007d1c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8007c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8007c62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007c64:	f000 fce2 	bl	800862c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d010      	beq.n	8007c90 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <tcp_slowtmr+0x590>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d106      	bne.n	8007c86 <tcp_slowtmr+0x46a>
 8007c78:	4b4d      	ldr	r3, [pc, #308]	; (8007db0 <tcp_slowtmr+0x594>)
 8007c7a:	f240 526d 	movw	r2, #1389	; 0x56d
 8007c7e:	494d      	ldr	r1, [pc, #308]	; (8007db4 <tcp_slowtmr+0x598>)
 8007c80:	484d      	ldr	r0, [pc, #308]	; (8007db8 <tcp_slowtmr+0x59c>)
 8007c82:	f007 ff7f 	bl	800fb84 <iprintf>
        prev->next = pcb->next;
 8007c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8c:	60da      	str	r2, [r3, #12]
 8007c8e:	e00f      	b.n	8007cb0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007c90:	4b46      	ldr	r3, [pc, #280]	; (8007dac <tcp_slowtmr+0x590>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d006      	beq.n	8007ca8 <tcp_slowtmr+0x48c>
 8007c9a:	4b45      	ldr	r3, [pc, #276]	; (8007db0 <tcp_slowtmr+0x594>)
 8007c9c:	f240 5271 	movw	r2, #1393	; 0x571
 8007ca0:	4946      	ldr	r1, [pc, #280]	; (8007dbc <tcp_slowtmr+0x5a0>)
 8007ca2:	4845      	ldr	r0, [pc, #276]	; (8007db8 <tcp_slowtmr+0x59c>)
 8007ca4:	f007 ff6e 	bl	800fb84 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	4a3f      	ldr	r2, [pc, #252]	; (8007dac <tcp_slowtmr+0x590>)
 8007cae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8007cb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d013      	beq.n	8007ce0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007cc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	3304      	adds	r3, #4
 8007cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc8:	8ad2      	ldrh	r2, [r2, #22]
 8007cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ccc:	8b09      	ldrh	r1, [r1, #24]
 8007cce:	9102      	str	r1, [sp, #8]
 8007cd0:	9201      	str	r2, [sp, #4]
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	4601      	mov	r1, r0
 8007cda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cdc:	f004 fec6 	bl	800ca6c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8007ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8007ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce8:	7d1b      	ldrb	r3, [r3, #20]
 8007cea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8007cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8007cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf2:	68db      	ldr	r3, [r3, #12]
 8007cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007cf6:	6838      	ldr	r0, [r7, #0]
 8007cf8:	f7ff f838 	bl	8006d6c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8007cfc:	4b30      	ldr	r3, [pc, #192]	; (8007dc0 <tcp_slowtmr+0x5a4>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <tcp_slowtmr+0x4f6>
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f06f 010c 	mvn.w	r1, #12
 8007d0e:	68b8      	ldr	r0, [r7, #8]
 8007d10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8007d12:	4b2b      	ldr	r3, [pc, #172]	; (8007dc0 <tcp_slowtmr+0x5a4>)
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d037      	beq.n	8007d8a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8007d1a:	e590      	b.n	800783e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	7f1b      	ldrb	r3, [r3, #28]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8007d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d34:	7f1a      	ldrb	r2, [r3, #28]
 8007d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d38:	7f5b      	ldrb	r3, [r3, #29]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d325      	bcc.n	8007d8a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8007d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d40:	2200      	movs	r2, #0
 8007d42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8007d44:	4b1e      	ldr	r3, [pc, #120]	; (8007dc0 <tcp_slowtmr+0x5a4>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8007d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00b      	beq.n	8007d6c <tcp_slowtmr+0x550>
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d5c:	6912      	ldr	r2, [r2, #16]
 8007d5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d60:	4610      	mov	r0, r2
 8007d62:	4798      	blx	r3
 8007d64:	4603      	mov	r3, r0
 8007d66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007d6a:	e002      	b.n	8007d72 <tcp_slowtmr+0x556>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8007d72:	4b13      	ldr	r3, [pc, #76]	; (8007dc0 <tcp_slowtmr+0x5a4>)
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d000      	beq.n	8007d7c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8007d7a:	e560      	b.n	800783e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8007d7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d102      	bne.n	8007d8a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8007d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d86:	f004 f8bd 	bl	800bf04 <tcp_output>
  while (pcb != NULL) {
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f47f ad5c 	bne.w	800784a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8007d92:	2300      	movs	r3, #0
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8007d96:	4b0b      	ldr	r3, [pc, #44]	; (8007dc4 <tcp_slowtmr+0x5a8>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007d9c:	e067      	b.n	8007e6e <tcp_slowtmr+0x652>
 8007d9e:	bf00      	nop
 8007da0:	20008144 	.word	0x20008144
 8007da4:	10624dd3 	.word	0x10624dd3
 8007da8:	000124f8 	.word	0x000124f8
 8007dac:	20008150 	.word	0x20008150
 8007db0:	0801179c 	.word	0x0801179c
 8007db4:	08011bd4 	.word	0x08011bd4
 8007db8:	080117e0 	.word	0x080117e0
 8007dbc:	08011c00 	.word	0x08011c00
 8007dc0:	20008158 	.word	0x20008158
 8007dc4:	20008154 	.word	0x20008154
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	7d1b      	ldrb	r3, [r3, #20]
 8007dcc:	2b0a      	cmp	r3, #10
 8007dce:	d006      	beq.n	8007dde <tcp_slowtmr+0x5c2>
 8007dd0:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <tcp_slowtmr+0x664>)
 8007dd2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8007dd6:	492b      	ldr	r1, [pc, #172]	; (8007e84 <tcp_slowtmr+0x668>)
 8007dd8:	482b      	ldr	r0, [pc, #172]	; (8007e88 <tcp_slowtmr+0x66c>)
 8007dda:	f007 fed3 	bl	800fb84 <iprintf>
    pcb_remove = 0;
 8007dde:	2300      	movs	r3, #0
 8007de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007de4:	4b29      	ldr	r3, [pc, #164]	; (8007e8c <tcp_slowtmr+0x670>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dea:	6a1b      	ldr	r3, [r3, #32]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2bf0      	cmp	r3, #240	; 0xf0
 8007df0:	d904      	bls.n	8007dfc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8007df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007df6:	3301      	adds	r3, #1
 8007df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8007dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d02f      	beq.n	8007e64 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8007e04:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e06:	f000 fc11 	bl	800862c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d010      	beq.n	8007e32 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007e10:	4b1f      	ldr	r3, [pc, #124]	; (8007e90 <tcp_slowtmr+0x674>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d106      	bne.n	8007e28 <tcp_slowtmr+0x60c>
 8007e1a:	4b19      	ldr	r3, [pc, #100]	; (8007e80 <tcp_slowtmr+0x664>)
 8007e1c:	f240 52af 	movw	r2, #1455	; 0x5af
 8007e20:	491c      	ldr	r1, [pc, #112]	; (8007e94 <tcp_slowtmr+0x678>)
 8007e22:	4819      	ldr	r0, [pc, #100]	; (8007e88 <tcp_slowtmr+0x66c>)
 8007e24:	f007 feae 	bl	800fb84 <iprintf>
        prev->next = pcb->next;
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2e:	60da      	str	r2, [r3, #12]
 8007e30:	e00f      	b.n	8007e52 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007e32:	4b17      	ldr	r3, [pc, #92]	; (8007e90 <tcp_slowtmr+0x674>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d006      	beq.n	8007e4a <tcp_slowtmr+0x62e>
 8007e3c:	4b10      	ldr	r3, [pc, #64]	; (8007e80 <tcp_slowtmr+0x664>)
 8007e3e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8007e42:	4915      	ldr	r1, [pc, #84]	; (8007e98 <tcp_slowtmr+0x67c>)
 8007e44:	4810      	ldr	r0, [pc, #64]	; (8007e88 <tcp_slowtmr+0x66c>)
 8007e46:	f007 fe9d 	bl	800fb84 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4c:	68db      	ldr	r3, [r3, #12]
 8007e4e:	4a10      	ldr	r2, [pc, #64]	; (8007e90 <tcp_slowtmr+0x674>)
 8007e50:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8007e5c:	69f8      	ldr	r0, [r7, #28]
 8007e5e:	f7fe ff85 	bl	8006d6c <tcp_free>
 8007e62:	e004      	b.n	8007e6e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8007e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e66:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8007e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1a9      	bne.n	8007dc8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop
 8007e78:	3730      	adds	r7, #48	; 0x30
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	0801179c 	.word	0x0801179c
 8007e84:	08011c2c 	.word	0x08011c2c
 8007e88:	080117e0 	.word	0x080117e0
 8007e8c:	20008144 	.word	0x20008144
 8007e90:	20008154 	.word	0x20008154
 8007e94:	08011c5c 	.word	0x08011c5c
 8007e98:	08011c84 	.word	0x08011c84

08007e9c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8007ea2:	4b2d      	ldr	r3, [pc, #180]	; (8007f58 <tcp_fasttmr+0xbc>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	b2da      	uxtb	r2, r3
 8007eaa:	4b2b      	ldr	r3, [pc, #172]	; (8007f58 <tcp_fasttmr+0xbc>)
 8007eac:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8007eae:	4b2b      	ldr	r3, [pc, #172]	; (8007f5c <tcp_fasttmr+0xc0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8007eb4:	e048      	b.n	8007f48 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7f9a      	ldrb	r2, [r3, #30]
 8007eba:	4b27      	ldr	r3, [pc, #156]	; (8007f58 <tcp_fasttmr+0xbc>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d03f      	beq.n	8007f42 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8007ec2:	4b25      	ldr	r3, [pc, #148]	; (8007f58 <tcp_fasttmr+0xbc>)
 8007ec4:	781a      	ldrb	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	8b5b      	ldrh	r3, [r3, #26]
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d010      	beq.n	8007ef8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	8b5b      	ldrh	r3, [r3, #26]
 8007eda:	f043 0302 	orr.w	r3, r3, #2
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f004 f80d 	bl	800bf04 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	8b5b      	ldrh	r3, [r3, #26]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8b5b      	ldrh	r3, [r3, #26]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d009      	beq.n	8007f18 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	8b5b      	ldrh	r3, [r3, #26]
 8007f08:	f023 0308 	bic.w	r3, r3, #8
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f7ff f8be 	bl	8007094 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00a      	beq.n	8007f3c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8007f26:	4b0e      	ldr	r3, [pc, #56]	; (8007f60 <tcp_fasttmr+0xc4>)
 8007f28:	2200      	movs	r2, #0
 8007f2a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f819 	bl	8007f64 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007f32:	4b0b      	ldr	r3, [pc, #44]	; (8007f60 <tcp_fasttmr+0xc4>)
 8007f34:	781b      	ldrb	r3, [r3, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d000      	beq.n	8007f3c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8007f3a:	e7b8      	b.n	8007eae <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	607b      	str	r3, [r7, #4]
 8007f40:	e002      	b.n	8007f48 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1b3      	bne.n	8007eb6 <tcp_fasttmr+0x1a>
    }
  }
}
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	2000815a 	.word	0x2000815a
 8007f5c:	20008150 	.word	0x20008150
 8007f60:	20008158 	.word	0x20008158

08007f64 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8007f64:	b590      	push	{r4, r7, lr}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d109      	bne.n	8007f86 <tcp_process_refused_data+0x22>
 8007f72:	4b37      	ldr	r3, [pc, #220]	; (8008050 <tcp_process_refused_data+0xec>)
 8007f74:	f240 6209 	movw	r2, #1545	; 0x609
 8007f78:	4936      	ldr	r1, [pc, #216]	; (8008054 <tcp_process_refused_data+0xf0>)
 8007f7a:	4837      	ldr	r0, [pc, #220]	; (8008058 <tcp_process_refused_data+0xf4>)
 8007f7c:	f007 fe02 	bl	800fb84 <iprintf>
 8007f80:	f06f 030f 	mvn.w	r3, #15
 8007f84:	e060      	b.n	8008048 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f8a:	7b5b      	ldrb	r3, [r3, #13]
 8007f8c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f92:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00b      	beq.n	8007fbc <tcp_process_refused_data+0x58>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6918      	ldr	r0, [r3, #16]
 8007fae:	2300      	movs	r3, #0
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	47a0      	blx	r4
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]
 8007fba:	e007      	b.n	8007fcc <tcp_process_refused_data+0x68>
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	68ba      	ldr	r2, [r7, #8]
 8007fc0:	6879      	ldr	r1, [r7, #4]
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f000 f8c2 	bl	800814c <tcp_recv_null>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8007fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d12a      	bne.n	800802a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8007fd4:	7bbb      	ldrb	r3, [r7, #14]
 8007fd6:	f003 0320 	and.w	r3, r3, #32
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d033      	beq.n	8008046 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007fe6:	d005      	beq.n	8007ff4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fec:	3301      	adds	r3, #1
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <tcp_process_refused_data+0xb2>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6918      	ldr	r0, [r3, #16]
 8008008:	2300      	movs	r3, #0
 800800a:	2200      	movs	r2, #0
 800800c:	6879      	ldr	r1, [r7, #4]
 800800e:	47a0      	blx	r4
 8008010:	4603      	mov	r3, r0
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e001      	b.n	800801a <tcp_process_refused_data+0xb6>
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800801a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801e:	f113 0f0d 	cmn.w	r3, #13
 8008022:	d110      	bne.n	8008046 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8008024:	f06f 030c 	mvn.w	r3, #12
 8008028:	e00e      	b.n	8008048 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800802a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800802e:	f113 0f0d 	cmn.w	r3, #13
 8008032:	d102      	bne.n	800803a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8008034:	f06f 030c 	mvn.w	r3, #12
 8008038:	e006      	b.n	8008048 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8008040:	f06f 0304 	mvn.w	r3, #4
 8008044:	e000      	b.n	8008048 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	bd90      	pop	{r4, r7, pc}
 8008050:	0801179c 	.word	0x0801179c
 8008054:	08011cac 	.word	0x08011cac
 8008058:	080117e0 	.word	0x080117e0

0800805c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8008064:	e007      	b.n	8008076 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f80a 	bl	8008086 <tcp_seg_free>
    seg = next;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1f4      	bne.n	8008066 <tcp_segs_free+0xa>
  }
}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008086:	b580      	push	{r7, lr}
 8008088:	b082      	sub	sp, #8
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d004      	beq.n	80080a6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fe fbb3 	bl	800680c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	2003      	movs	r0, #3
 80080aa:	f7fd fd39 	bl	8005b20 <memp_free>
  }
}
 80080ae:	bf00      	nop
 80080b0:	3708      	adds	r7, #8
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
	...

080080b8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b082      	sub	sp, #8
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
 80080c0:	460b      	mov	r3, r1
 80080c2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d107      	bne.n	80080da <tcp_setprio+0x22>
 80080ca:	4b07      	ldr	r3, [pc, #28]	; (80080e8 <tcp_setprio+0x30>)
 80080cc:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 80080d0:	4906      	ldr	r1, [pc, #24]	; (80080ec <tcp_setprio+0x34>)
 80080d2:	4807      	ldr	r0, [pc, #28]	; (80080f0 <tcp_setprio+0x38>)
 80080d4:	f007 fd56 	bl	800fb84 <iprintf>
 80080d8:	e002      	b.n	80080e0 <tcp_setprio+0x28>

  pcb->prio = prio;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	78fa      	ldrb	r2, [r7, #3]
 80080de:	755a      	strb	r2, [r3, #21]
}
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	0801179c 	.word	0x0801179c
 80080ec:	08011cd4 	.word	0x08011cd4
 80080f0:	080117e0 	.word	0x080117e0

080080f4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <tcp_seg_copy+0x1c>
 8008102:	4b0f      	ldr	r3, [pc, #60]	; (8008140 <tcp_seg_copy+0x4c>)
 8008104:	f240 6282 	movw	r2, #1666	; 0x682
 8008108:	490e      	ldr	r1, [pc, #56]	; (8008144 <tcp_seg_copy+0x50>)
 800810a:	480f      	ldr	r0, [pc, #60]	; (8008148 <tcp_seg_copy+0x54>)
 800810c:	f007 fd3a 	bl	800fb84 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008110:	2003      	movs	r0, #3
 8008112:	f7fd fc95 	bl	8005a40 <memp_malloc>
 8008116:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d101      	bne.n	8008122 <tcp_seg_copy+0x2e>
    return NULL;
 800811e:	2300      	movs	r3, #0
 8008120:	e00a      	b.n	8008138 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008122:	2210      	movs	r2, #16
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	68f8      	ldr	r0, [r7, #12]
 8008128:	f007 fd16 	bl	800fb58 <memcpy>
  pbuf_ref(cseg->p);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	4618      	mov	r0, r3
 8008132:	f7fe fc0b 	bl	800694c <pbuf_ref>
  return cseg;
 8008136:	68fb      	ldr	r3, [r7, #12]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3710      	adds	r7, #16
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	0801179c 	.word	0x0801179c
 8008144:	08011cf0 	.word	0x08011cf0
 8008148:	080117e0 	.word	0x080117e0

0800814c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d109      	bne.n	8008174 <tcp_recv_null+0x28>
 8008160:	4b12      	ldr	r3, [pc, #72]	; (80081ac <tcp_recv_null+0x60>)
 8008162:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008166:	4912      	ldr	r1, [pc, #72]	; (80081b0 <tcp_recv_null+0x64>)
 8008168:	4812      	ldr	r0, [pc, #72]	; (80081b4 <tcp_recv_null+0x68>)
 800816a:	f007 fd0b 	bl	800fb84 <iprintf>
 800816e:	f06f 030f 	mvn.w	r3, #15
 8008172:	e016      	b.n	80081a2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d009      	beq.n	800818e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	891b      	ldrh	r3, [r3, #8]
 800817e:	4619      	mov	r1, r3
 8008180:	68b8      	ldr	r0, [r7, #8]
 8008182:	f7ff fab5 	bl	80076f0 <tcp_recved>
    pbuf_free(p);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7fe fb40 	bl	800680c <pbuf_free>
 800818c:	e008      	b.n	80081a0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800818e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d104      	bne.n	80081a0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8008196:	68b8      	ldr	r0, [r7, #8]
 8008198:	f7fe ffe6 	bl	8007168 <tcp_close>
 800819c:	4603      	mov	r3, r0
 800819e:	e000      	b.n	80081a2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3710      	adds	r7, #16
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	0801179c 	.word	0x0801179c
 80081b0:	08011d0c 	.word	0x08011d0c
 80081b4:	080117e0 	.word	0x080117e0

080081b8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b086      	sub	sp, #24
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80081c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	db01      	blt.n	80081ce <tcp_kill_prio+0x16>
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	e000      	b.n	80081d0 <tcp_kill_prio+0x18>
 80081ce:	237f      	movs	r3, #127	; 0x7f
 80081d0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80081d2:	7afb      	ldrb	r3, [r7, #11]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d034      	beq.n	8008242 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80081d8:	7afb      	ldrb	r3, [r7, #11]
 80081da:	3b01      	subs	r3, #1
 80081dc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081e6:	4b19      	ldr	r3, [pc, #100]	; (800824c <tcp_kill_prio+0x94>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	e01f      	b.n	800822e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	7d5b      	ldrb	r3, [r3, #21]
 80081f2:	7afa      	ldrb	r2, [r7, #11]
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d80c      	bhi.n	8008212 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80081fc:	7afa      	ldrb	r2, [r7, #11]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d112      	bne.n	8008228 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008202:	4b13      	ldr	r3, [pc, #76]	; (8008250 <tcp_kill_prio+0x98>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	429a      	cmp	r2, r3
 8008210:	d80a      	bhi.n	8008228 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8008212:	4b0f      	ldr	r3, [pc, #60]	; (8008250 <tcp_kill_prio+0x98>)
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	7d5b      	ldrb	r3, [r3, #21]
 8008226:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	617b      	str	r3, [r7, #20]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1dc      	bne.n	80081ee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d004      	beq.n	8008244 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800823a:	6938      	ldr	r0, [r7, #16]
 800823c:	f7ff f87e 	bl	800733c <tcp_abort>
 8008240:	e000      	b.n	8008244 <tcp_kill_prio+0x8c>
    return;
 8008242:	bf00      	nop
  }
}
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20008150 	.word	0x20008150
 8008250:	20008144 	.word	0x20008144

08008254 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	4603      	mov	r3, r0
 800825c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800825e:	79fb      	ldrb	r3, [r7, #7]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d009      	beq.n	8008278 <tcp_kill_state+0x24>
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	2b09      	cmp	r3, #9
 8008268:	d006      	beq.n	8008278 <tcp_kill_state+0x24>
 800826a:	4b1a      	ldr	r3, [pc, #104]	; (80082d4 <tcp_kill_state+0x80>)
 800826c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008270:	4919      	ldr	r1, [pc, #100]	; (80082d8 <tcp_kill_state+0x84>)
 8008272:	481a      	ldr	r0, [pc, #104]	; (80082dc <tcp_kill_state+0x88>)
 8008274:	f007 fc86 	bl	800fb84 <iprintf>

  inactivity = 0;
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800827c:	2300      	movs	r3, #0
 800827e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008280:	4b17      	ldr	r3, [pc, #92]	; (80082e0 <tcp_kill_state+0x8c>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e017      	b.n	80082b8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	7d1b      	ldrb	r3, [r3, #20]
 800828c:	79fa      	ldrb	r2, [r7, #7]
 800828e:	429a      	cmp	r2, r3
 8008290:	d10f      	bne.n	80082b2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008292:	4b14      	ldr	r3, [pc, #80]	; (80082e4 <tcp_kill_state+0x90>)
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d807      	bhi.n	80082b2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80082a2:	4b10      	ldr	r3, [pc, #64]	; (80082e4 <tcp_kill_state+0x90>)
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	68db      	ldr	r3, [r3, #12]
 80082b6:	617b      	str	r3, [r7, #20]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e4      	bne.n	8008288 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80082c4:	2100      	movs	r1, #0
 80082c6:	6938      	ldr	r0, [r7, #16]
 80082c8:	f7fe ff7a 	bl	80071c0 <tcp_abandon>
  }
}
 80082cc:	bf00      	nop
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	0801179c 	.word	0x0801179c
 80082d8:	08011d28 	.word	0x08011d28
 80082dc:	080117e0 	.word	0x080117e0
 80082e0:	20008150 	.word	0x20008150
 80082e4:	20008144 	.word	0x20008144

080082e8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80082ee:	2300      	movs	r3, #0
 80082f0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80082f2:	2300      	movs	r3, #0
 80082f4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082f6:	4b12      	ldr	r3, [pc, #72]	; (8008340 <tcp_kill_timewait+0x58>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e012      	b.n	8008324 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082fe:	4b11      	ldr	r3, [pc, #68]	; (8008344 <tcp_kill_timewait+0x5c>)
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	429a      	cmp	r2, r3
 800830c:	d807      	bhi.n	800831e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800830e:	4b0d      	ldr	r3, [pc, #52]	; (8008344 <tcp_kill_timewait+0x5c>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	60fb      	str	r3, [r7, #12]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1e9      	bne.n	80082fe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8008330:	68b8      	ldr	r0, [r7, #8]
 8008332:	f7ff f803 	bl	800733c <tcp_abort>
  }
}
 8008336:	bf00      	nop
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	20008154 	.word	0x20008154
 8008344:	20008144 	.word	0x20008144

08008348 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800834e:	4b10      	ldr	r3, [pc, #64]	; (8008390 <tcp_handle_closepend+0x48>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8008354:	e014      	b.n	8008380 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	8b5b      	ldrh	r3, [r3, #26]
 8008360:	f003 0308 	and.w	r3, r3, #8
 8008364:	2b00      	cmp	r3, #0
 8008366:	d009      	beq.n	800837c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	8b5b      	ldrh	r3, [r3, #26]
 800836c:	f023 0308 	bic.w	r3, r3, #8
 8008370:	b29a      	uxth	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f7fe fe8c 	bl	8007094 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1e7      	bne.n	8008356 <tcp_handle_closepend+0xe>
  }
}
 8008386:	bf00      	nop
 8008388:	bf00      	nop
 800838a:	3708      	adds	r7, #8
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20008150 	.word	0x20008150

08008394 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	4603      	mov	r3, r0
 800839c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800839e:	2001      	movs	r0, #1
 80083a0:	f7fd fb4e 	bl	8005a40 <memp_malloc>
 80083a4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d126      	bne.n	80083fa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80083ac:	f7ff ffcc 	bl	8008348 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80083b0:	f7ff ff9a 	bl	80082e8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083b4:	2001      	movs	r0, #1
 80083b6:	f7fd fb43 	bl	8005a40 <memp_malloc>
 80083ba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d11b      	bne.n	80083fa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80083c2:	2009      	movs	r0, #9
 80083c4:	f7ff ff46 	bl	8008254 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083c8:	2001      	movs	r0, #1
 80083ca:	f7fd fb39 	bl	8005a40 <memp_malloc>
 80083ce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d111      	bne.n	80083fa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80083d6:	2008      	movs	r0, #8
 80083d8:	f7ff ff3c 	bl	8008254 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083dc:	2001      	movs	r0, #1
 80083de:	f7fd fb2f 	bl	8005a40 <memp_malloc>
 80083e2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d107      	bne.n	80083fa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	4618      	mov	r0, r3
 80083ee:	f7ff fee3 	bl	80081b8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80083f2:	2001      	movs	r0, #1
 80083f4:	f7fd fb24 	bl	8005a40 <memp_malloc>
 80083f8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d03f      	beq.n	8008480 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008400:	229c      	movs	r2, #156	; 0x9c
 8008402:	2100      	movs	r1, #0
 8008404:	68f8      	ldr	r0, [r7, #12]
 8008406:	f007 fbb5 	bl	800fb74 <memset>
    pcb->prio = prio;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	79fa      	ldrb	r2, [r7, #7]
 800840e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8008416:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008420:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	22ff      	movs	r2, #255	; 0xff
 800842e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008436:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2206      	movs	r2, #6
 800843c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2206      	movs	r2, #6
 8008444:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800844c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2201      	movs	r2, #1
 8008452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008456:	4b0d      	ldr	r3, [pc, #52]	; (800848c <tcp_alloc+0xf8>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <tcp_alloc+0xfc>)
 8008460:	781a      	ldrb	r2, [r3, #0]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800846c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4a08      	ldr	r2, [pc, #32]	; (8008494 <tcp_alloc+0x100>)
 8008474:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4a07      	ldr	r2, [pc, #28]	; (8008498 <tcp_alloc+0x104>)
 800847c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8008480:	68fb      	ldr	r3, [r7, #12]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20008144 	.word	0x20008144
 8008490:	2000815a 	.word	0x2000815a
 8008494:	0800814d 	.word	0x0800814d
 8008498:	006ddd00 	.word	0x006ddd00

0800849c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80084a0:	2040      	movs	r0, #64	; 0x40
 80084a2:	f7ff ff77 	bl	8008394 <tcp_alloc>
 80084a6:	4603      	mov	r3, r0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	bd80      	pop	{r7, pc}

080084ac <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	611a      	str	r2, [r3, #16]
  }
}
 80084c2:	bf00      	nop
 80084c4:	370c      	adds	r7, #12
 80084c6:	46bd      	mov	sp, r7
 80084c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084cc:	4770      	bx	lr
	...

080084d0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d00e      	beq.n	80084fe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7d1b      	ldrb	r3, [r3, #20]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d106      	bne.n	80084f6 <tcp_recv+0x26>
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <tcp_recv+0x38>)
 80084ea:	f240 72df 	movw	r2, #2015	; 0x7df
 80084ee:	4907      	ldr	r1, [pc, #28]	; (800850c <tcp_recv+0x3c>)
 80084f0:	4807      	ldr	r0, [pc, #28]	; (8008510 <tcp_recv+0x40>)
 80084f2:	f007 fb47 	bl	800fb84 <iprintf>
    pcb->recv = recv;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	683a      	ldr	r2, [r7, #0]
 80084fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80084fe:	bf00      	nop
 8008500:	3708      	adds	r7, #8
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	0801179c 	.word	0x0801179c
 800850c:	08011d38 	.word	0x08011d38
 8008510:	080117e0 	.word	0x080117e0

08008514 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7d1b      	ldrb	r3, [r3, #20]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d106      	bne.n	800853a <tcp_sent+0x26>
 800852c:	4b07      	ldr	r3, [pc, #28]	; (800854c <tcp_sent+0x38>)
 800852e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008532:	4907      	ldr	r1, [pc, #28]	; (8008550 <tcp_sent+0x3c>)
 8008534:	4807      	ldr	r0, [pc, #28]	; (8008554 <tcp_sent+0x40>)
 8008536:	f007 fb25 	bl	800fb84 <iprintf>
    pcb->sent = sent;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	683a      	ldr	r2, [r7, #0]
 800853e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	0801179c 	.word	0x0801179c
 8008550:	08011d60 	.word	0x08011d60
 8008554:	080117e0 	.word	0x080117e0

08008558 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b082      	sub	sp, #8
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00e      	beq.n	8008586 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	7d1b      	ldrb	r3, [r3, #20]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d106      	bne.n	800857e <tcp_err+0x26>
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <tcp_err+0x38>)
 8008572:	f640 020d 	movw	r2, #2061	; 0x80d
 8008576:	4907      	ldr	r1, [pc, #28]	; (8008594 <tcp_err+0x3c>)
 8008578:	4807      	ldr	r0, [pc, #28]	; (8008598 <tcp_err+0x40>)
 800857a:	f007 fb03 	bl	800fb84 <iprintf>
    pcb->errf = err;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8008586:	bf00      	nop
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	0801179c 	.word	0x0801179c
 8008594:	08011d88 	.word	0x08011d88
 8008598:	080117e0 	.word	0x080117e0

0800859c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <tcp_accept+0x22>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	7d1b      	ldrb	r3, [r3, #20]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d104      	bne.n	80085be <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	619a      	str	r2, [r3, #24]
  }
}
 80085be:	bf00      	nop
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
	...

080085cc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d107      	bne.n	80085f0 <tcp_poll+0x24>
 80085e0:	4b0e      	ldr	r3, [pc, #56]	; (800861c <tcp_poll+0x50>)
 80085e2:	f640 023d 	movw	r2, #2109	; 0x83d
 80085e6:	490e      	ldr	r1, [pc, #56]	; (8008620 <tcp_poll+0x54>)
 80085e8:	480e      	ldr	r0, [pc, #56]	; (8008624 <tcp_poll+0x58>)
 80085ea:	f007 facb 	bl	800fb84 <iprintf>
 80085ee:	e011      	b.n	8008614 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	7d1b      	ldrb	r3, [r3, #20]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d106      	bne.n	8008606 <tcp_poll+0x3a>
 80085f8:	4b08      	ldr	r3, [pc, #32]	; (800861c <tcp_poll+0x50>)
 80085fa:	f640 023e 	movw	r2, #2110	; 0x83e
 80085fe:	490a      	ldr	r1, [pc, #40]	; (8008628 <tcp_poll+0x5c>)
 8008600:	4808      	ldr	r0, [pc, #32]	; (8008624 <tcp_poll+0x58>)
 8008602:	f007 fabf 	bl	800fb84 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	68ba      	ldr	r2, [r7, #8]
 800860a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	79fa      	ldrb	r2, [r7, #7]
 8008612:	775a      	strb	r2, [r3, #29]
}
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	0801179c 	.word	0x0801179c
 8008620:	08011db0 	.word	0x08011db0
 8008624:	080117e0 	.word	0x080117e0
 8008628:	08011dc8 	.word	0x08011dc8

0800862c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <tcp_pcb_purge+0x1e>
 800863a:	4b21      	ldr	r3, [pc, #132]	; (80086c0 <tcp_pcb_purge+0x94>)
 800863c:	f640 0251 	movw	r2, #2129	; 0x851
 8008640:	4920      	ldr	r1, [pc, #128]	; (80086c4 <tcp_pcb_purge+0x98>)
 8008642:	4821      	ldr	r0, [pc, #132]	; (80086c8 <tcp_pcb_purge+0x9c>)
 8008644:	f007 fa9e 	bl	800fb84 <iprintf>
 8008648:	e037      	b.n	80086ba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7d1b      	ldrb	r3, [r3, #20]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d033      	beq.n	80086ba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8008656:	2b0a      	cmp	r3, #10
 8008658:	d02f      	beq.n	80086ba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800865e:	2b01      	cmp	r3, #1
 8008660:	d02b      	beq.n	80086ba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe f8cc 	bl	800680c <pbuf_free>
      pcb->refused_data = NULL;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2200      	movs	r2, #0
 8008678:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867e:	2b00      	cmp	r3, #0
 8008680:	d002      	beq.n	8008688 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f986 	bl	8008994 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800868e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008694:	4618      	mov	r0, r3
 8008696:	f7ff fce1 	bl	800805c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869e:	4618      	mov	r0, r3
 80086a0:	f7ff fcdc 	bl	800805c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80086ba:	3708      	adds	r7, #8
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	0801179c 	.word	0x0801179c
 80086c4:	08011de8 	.word	0x08011de8
 80086c8:	080117e0 	.word	0x080117e0

080086cc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d106      	bne.n	80086ea <tcp_pcb_remove+0x1e>
 80086dc:	4b3e      	ldr	r3, [pc, #248]	; (80087d8 <tcp_pcb_remove+0x10c>)
 80086de:	f640 0283 	movw	r2, #2179	; 0x883
 80086e2:	493e      	ldr	r1, [pc, #248]	; (80087dc <tcp_pcb_remove+0x110>)
 80086e4:	483e      	ldr	r0, [pc, #248]	; (80087e0 <tcp_pcb_remove+0x114>)
 80086e6:	f007 fa4d 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <tcp_pcb_remove+0x32>
 80086f0:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <tcp_pcb_remove+0x10c>)
 80086f2:	f640 0284 	movw	r2, #2180	; 0x884
 80086f6:	493b      	ldr	r1, [pc, #236]	; (80087e4 <tcp_pcb_remove+0x118>)
 80086f8:	4839      	ldr	r0, [pc, #228]	; (80087e0 <tcp_pcb_remove+0x114>)
 80086fa:	f007 fa43 	bl	800fb84 <iprintf>

  TCP_RMV(pcblist, pcb);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d105      	bne.n	8008714 <tcp_pcb_remove+0x48>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	68da      	ldr	r2, [r3, #12]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	601a      	str	r2, [r3, #0]
 8008712:	e013      	b.n	800873c <tcp_pcb_remove+0x70>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	e00c      	b.n	8008736 <tcp_pcb_remove+0x6a>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	683a      	ldr	r2, [r7, #0]
 8008722:	429a      	cmp	r2, r3
 8008724:	d104      	bne.n	8008730 <tcp_pcb_remove+0x64>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68da      	ldr	r2, [r3, #12]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	60da      	str	r2, [r3, #12]
 800872e:	e005      	b.n	800873c <tcp_pcb_remove+0x70>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	60fb      	str	r3, [r7, #12]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1ef      	bne.n	800871c <tcp_pcb_remove+0x50>
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	2200      	movs	r2, #0
 8008740:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8008742:	6838      	ldr	r0, [r7, #0]
 8008744:	f7ff ff72 	bl	800862c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	7d1b      	ldrb	r3, [r3, #20]
 800874c:	2b0a      	cmp	r3, #10
 800874e:	d013      	beq.n	8008778 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8008754:	2b01      	cmp	r3, #1
 8008756:	d00f      	beq.n	8008778 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	8b5b      	ldrh	r3, [r3, #26]
 800875c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8008760:	2b00      	cmp	r3, #0
 8008762:	d009      	beq.n	8008778 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	8b5b      	ldrh	r3, [r3, #26]
 8008768:	f043 0302 	orr.w	r3, r3, #2
 800876c:	b29a      	uxth	r2, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008772:	6838      	ldr	r0, [r7, #0]
 8008774:	f003 fbc6 	bl	800bf04 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	7d1b      	ldrb	r3, [r3, #20]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d020      	beq.n	80087c2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d006      	beq.n	8008796 <tcp_pcb_remove+0xca>
 8008788:	4b13      	ldr	r3, [pc, #76]	; (80087d8 <tcp_pcb_remove+0x10c>)
 800878a:	f640 0293 	movw	r2, #2195	; 0x893
 800878e:	4916      	ldr	r1, [pc, #88]	; (80087e8 <tcp_pcb_remove+0x11c>)
 8008790:	4813      	ldr	r0, [pc, #76]	; (80087e0 <tcp_pcb_remove+0x114>)
 8008792:	f007 f9f7 	bl	800fb84 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800879a:	2b00      	cmp	r3, #0
 800879c:	d006      	beq.n	80087ac <tcp_pcb_remove+0xe0>
 800879e:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <tcp_pcb_remove+0x10c>)
 80087a0:	f640 0294 	movw	r2, #2196	; 0x894
 80087a4:	4911      	ldr	r1, [pc, #68]	; (80087ec <tcp_pcb_remove+0x120>)
 80087a6:	480e      	ldr	r0, [pc, #56]	; (80087e0 <tcp_pcb_remove+0x114>)
 80087a8:	f007 f9ec 	bl	800fb84 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d006      	beq.n	80087c2 <tcp_pcb_remove+0xf6>
 80087b4:	4b08      	ldr	r3, [pc, #32]	; (80087d8 <tcp_pcb_remove+0x10c>)
 80087b6:	f640 0296 	movw	r2, #2198	; 0x896
 80087ba:	490d      	ldr	r1, [pc, #52]	; (80087f0 <tcp_pcb_remove+0x124>)
 80087bc:	4808      	ldr	r0, [pc, #32]	; (80087e0 <tcp_pcb_remove+0x114>)
 80087be:	f007 f9e1 	bl	800fb84 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	2200      	movs	r2, #0
 80087cc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80087ce:	bf00      	nop
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	0801179c 	.word	0x0801179c
 80087dc:	08011e04 	.word	0x08011e04
 80087e0:	080117e0 	.word	0x080117e0
 80087e4:	08011e20 	.word	0x08011e20
 80087e8:	08011e40 	.word	0x08011e40
 80087ec:	08011e58 	.word	0x08011e58
 80087f0:	08011e74 	.word	0x08011e74

080087f4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b082      	sub	sp, #8
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d106      	bne.n	8008810 <tcp_next_iss+0x1c>
 8008802:	4b0a      	ldr	r3, [pc, #40]	; (800882c <tcp_next_iss+0x38>)
 8008804:	f640 02af 	movw	r2, #2223	; 0x8af
 8008808:	4909      	ldr	r1, [pc, #36]	; (8008830 <tcp_next_iss+0x3c>)
 800880a:	480a      	ldr	r0, [pc, #40]	; (8008834 <tcp_next_iss+0x40>)
 800880c:	f007 f9ba 	bl	800fb84 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008810:	4b09      	ldr	r3, [pc, #36]	; (8008838 <tcp_next_iss+0x44>)
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	4b09      	ldr	r3, [pc, #36]	; (800883c <tcp_next_iss+0x48>)
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4413      	add	r3, r2
 800881a:	4a07      	ldr	r2, [pc, #28]	; (8008838 <tcp_next_iss+0x44>)
 800881c:	6013      	str	r3, [r2, #0]
  return iss;
 800881e:	4b06      	ldr	r3, [pc, #24]	; (8008838 <tcp_next_iss+0x44>)
 8008820:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	0801179c 	.word	0x0801179c
 8008830:	08011e8c 	.word	0x08011e8c
 8008834:	080117e0 	.word	0x080117e0
 8008838:	20000024 	.word	0x20000024
 800883c:	20008144 	.word	0x20008144

08008840 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
 800884c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d106      	bne.n	8008862 <tcp_eff_send_mss_netif+0x22>
 8008854:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <tcp_eff_send_mss_netif+0x68>)
 8008856:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800885a:	4914      	ldr	r1, [pc, #80]	; (80088ac <tcp_eff_send_mss_netif+0x6c>)
 800885c:	4814      	ldr	r0, [pc, #80]	; (80088b0 <tcp_eff_send_mss_netif+0x70>)
 800885e:	f007 f991 	bl	800fb84 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	e019      	b.n	80088a0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008870:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8008872:	8afb      	ldrh	r3, [r7, #22]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d012      	beq.n	800889e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8008878:	2328      	movs	r3, #40	; 0x28
 800887a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800887c:	8afa      	ldrh	r2, [r7, #22]
 800887e:	8abb      	ldrh	r3, [r7, #20]
 8008880:	429a      	cmp	r2, r3
 8008882:	d904      	bls.n	800888e <tcp_eff_send_mss_netif+0x4e>
 8008884:	8afa      	ldrh	r2, [r7, #22]
 8008886:	8abb      	ldrh	r3, [r7, #20]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	b29b      	uxth	r3, r3
 800888c:	e000      	b.n	8008890 <tcp_eff_send_mss_netif+0x50>
 800888e:	2300      	movs	r3, #0
 8008890:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8008892:	8a7a      	ldrh	r2, [r7, #18]
 8008894:	89fb      	ldrh	r3, [r7, #14]
 8008896:	4293      	cmp	r3, r2
 8008898:	bf28      	it	cs
 800889a:	4613      	movcs	r3, r2
 800889c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800889e:	89fb      	ldrh	r3, [r7, #14]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3718      	adds	r7, #24
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	0801179c 	.word	0x0801179c
 80088ac:	08011ea8 	.word	0x08011ea8
 80088b0:	080117e0 	.word	0x080117e0

080088b4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d119      	bne.n	80088fc <tcp_netif_ip_addr_changed_pcblist+0x48>
 80088c8:	4b10      	ldr	r3, [pc, #64]	; (800890c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80088ca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80088ce:	4910      	ldr	r1, [pc, #64]	; (8008910 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80088d0:	4810      	ldr	r0, [pc, #64]	; (8008914 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80088d2:	f007 f957 	bl	800fb84 <iprintf>

  while (pcb != NULL) {
 80088d6:	e011      	b.n	80088fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d108      	bne.n	80088f6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7fe fd26 	bl	800733c <tcp_abort>
      pcb = next;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	e002      	b.n	80088fc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	68db      	ldr	r3, [r3, #12]
 80088fa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1ea      	bne.n	80088d8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8008902:	bf00      	nop
 8008904:	bf00      	nop
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	0801179c 	.word	0x0801179c
 8008910:	08011ed0 	.word	0x08011ed0
 8008914:	080117e0 	.word	0x080117e0

08008918 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d02a      	beq.n	800897e <tcp_netif_ip_addr_changed+0x66>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d026      	beq.n	800897e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008930:	4b15      	ldr	r3, [pc, #84]	; (8008988 <tcp_netif_ip_addr_changed+0x70>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f7ff ffbc 	bl	80088b4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800893c:	4b13      	ldr	r3, [pc, #76]	; (800898c <tcp_netif_ip_addr_changed+0x74>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7ff ffb6 	bl	80088b4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d017      	beq.n	800897e <tcp_netif_ip_addr_changed+0x66>
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d013      	beq.n	800897e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <tcp_netif_ip_addr_changed+0x78>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60fb      	str	r3, [r7, #12]
 800895c:	e00c      	b.n	8008978 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	429a      	cmp	r2, r3
 8008968:	d103      	bne.n	8008972 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	60fb      	str	r3, [r7, #12]
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1ef      	bne.n	800895e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800897e:	bf00      	nop
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20008150 	.word	0x20008150
 800898c:	20008148 	.word	0x20008148
 8008990:	2000814c 	.word	0x2000814c

08008994 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d007      	beq.n	80089b4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff fb57 	bl	800805c <tcp_segs_free>
    pcb->ooseq = NULL;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80089b4:	bf00      	nop
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80089bc:	b590      	push	{r4, r7, lr}
 80089be:	b08d      	sub	sp, #52	; 0x34
 80089c0:	af04      	add	r7, sp, #16
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <tcp_input+0x1c>
 80089cc:	4b9b      	ldr	r3, [pc, #620]	; (8008c3c <tcp_input+0x280>)
 80089ce:	2283      	movs	r2, #131	; 0x83
 80089d0:	499b      	ldr	r1, [pc, #620]	; (8008c40 <tcp_input+0x284>)
 80089d2:	489c      	ldr	r0, [pc, #624]	; (8008c44 <tcp_input+0x288>)
 80089d4:	f007 f8d6 	bl	800fb84 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	4a9a      	ldr	r2, [pc, #616]	; (8008c48 <tcp_input+0x28c>)
 80089de:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	895b      	ldrh	r3, [r3, #10]
 80089e4:	2b13      	cmp	r3, #19
 80089e6:	f240 83d1 	bls.w	800918c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80089ea:	4b98      	ldr	r3, [pc, #608]	; (8008c4c <tcp_input+0x290>)
 80089ec:	695b      	ldr	r3, [r3, #20]
 80089ee:	4a97      	ldr	r2, [pc, #604]	; (8008c4c <tcp_input+0x290>)
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	4611      	mov	r1, r2
 80089f4:	4618      	mov	r0, r3
 80089f6:	f006 f895 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f040 83c7 	bne.w	8009190 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a02:	4b92      	ldr	r3, [pc, #584]	; (8008c4c <tcp_input+0x290>)
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a0a:	2be0      	cmp	r3, #224	; 0xe0
 8008a0c:	f000 83c0 	beq.w	8009190 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8008a10:	4b8d      	ldr	r3, [pc, #564]	; (8008c48 <tcp_input+0x28c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	899b      	ldrh	r3, [r3, #12]
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fc fae1 	bl	8004fe0 <lwip_htons>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	0b1b      	lsrs	r3, r3, #12
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a2a:	7cbb      	ldrb	r3, [r7, #18]
 8008a2c:	2b13      	cmp	r3, #19
 8008a2e:	f240 83b1 	bls.w	8009194 <tcp_input+0x7d8>
 8008a32:	7cbb      	ldrb	r3, [r7, #18]
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	891b      	ldrh	r3, [r3, #8]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	f200 83aa 	bhi.w	8009194 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8008a40:	7cbb      	ldrb	r3, [r7, #18]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	3b14      	subs	r3, #20
 8008a46:	b29a      	uxth	r2, r3
 8008a48:	4b81      	ldr	r3, [pc, #516]	; (8008c50 <tcp_input+0x294>)
 8008a4a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8008a4c:	4b81      	ldr	r3, [pc, #516]	; (8008c54 <tcp_input+0x298>)
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	895a      	ldrh	r2, [r3, #10]
 8008a56:	7cbb      	ldrb	r3, [r7, #18]
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d309      	bcc.n	8008a72 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8008a5e:	4b7c      	ldr	r3, [pc, #496]	; (8008c50 <tcp_input+0x294>)
 8008a60:	881a      	ldrh	r2, [r3, #0]
 8008a62:	4b7d      	ldr	r3, [pc, #500]	; (8008c58 <tcp_input+0x29c>)
 8008a64:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8008a66:	7cbb      	ldrb	r3, [r7, #18]
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7fd fe48 	bl	8006700 <pbuf_remove_header>
 8008a70:	e04e      	b.n	8008b10 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d105      	bne.n	8008a86 <tcp_input+0xca>
 8008a7a:	4b70      	ldr	r3, [pc, #448]	; (8008c3c <tcp_input+0x280>)
 8008a7c:	22c2      	movs	r2, #194	; 0xc2
 8008a7e:	4977      	ldr	r1, [pc, #476]	; (8008c5c <tcp_input+0x2a0>)
 8008a80:	4870      	ldr	r0, [pc, #448]	; (8008c44 <tcp_input+0x288>)
 8008a82:	f007 f87f 	bl	800fb84 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8008a86:	2114      	movs	r1, #20
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fd fe39 	bl	8006700 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	895a      	ldrh	r2, [r3, #10]
 8008a92:	4b71      	ldr	r3, [pc, #452]	; (8008c58 <tcp_input+0x29c>)
 8008a94:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8008a96:	4b6e      	ldr	r3, [pc, #440]	; (8008c50 <tcp_input+0x294>)
 8008a98:	881a      	ldrh	r2, [r3, #0]
 8008a9a:	4b6f      	ldr	r3, [pc, #444]	; (8008c58 <tcp_input+0x29c>)
 8008a9c:	881b      	ldrh	r3, [r3, #0]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8008aa2:	4b6d      	ldr	r3, [pc, #436]	; (8008c58 <tcp_input+0x29c>)
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f7fd fe29 	bl	8006700 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	895b      	ldrh	r3, [r3, #10]
 8008ab4:	8a3a      	ldrh	r2, [r7, #16]
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	f200 836e 	bhi.w	8009198 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	4a64      	ldr	r2, [pc, #400]	; (8008c54 <tcp_input+0x298>)
 8008ac4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	8a3a      	ldrh	r2, [r7, #16]
 8008acc:	4611      	mov	r1, r2
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd fe16 	bl	8006700 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	891a      	ldrh	r2, [r3, #8]
 8008ad8:	8a3b      	ldrh	r3, [r7, #16]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	895b      	ldrh	r3, [r3, #10]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d005      	beq.n	8008af6 <tcp_input+0x13a>
 8008aea:	4b54      	ldr	r3, [pc, #336]	; (8008c3c <tcp_input+0x280>)
 8008aec:	22df      	movs	r2, #223	; 0xdf
 8008aee:	495c      	ldr	r1, [pc, #368]	; (8008c60 <tcp_input+0x2a4>)
 8008af0:	4854      	ldr	r0, [pc, #336]	; (8008c44 <tcp_input+0x288>)
 8008af2:	f007 f847 	bl	800fb84 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	891a      	ldrh	r2, [r3, #8]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	891b      	ldrh	r3, [r3, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d005      	beq.n	8008b10 <tcp_input+0x154>
 8008b04:	4b4d      	ldr	r3, [pc, #308]	; (8008c3c <tcp_input+0x280>)
 8008b06:	22e0      	movs	r2, #224	; 0xe0
 8008b08:	4956      	ldr	r1, [pc, #344]	; (8008c64 <tcp_input+0x2a8>)
 8008b0a:	484e      	ldr	r0, [pc, #312]	; (8008c44 <tcp_input+0x288>)
 8008b0c:	f007 f83a 	bl	800fb84 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008b10:	4b4d      	ldr	r3, [pc, #308]	; (8008c48 <tcp_input+0x28c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	4a4b      	ldr	r2, [pc, #300]	; (8008c48 <tcp_input+0x28c>)
 8008b1a:	6814      	ldr	r4, [r2, #0]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7fc fa5f 	bl	8004fe0 <lwip_htons>
 8008b22:	4603      	mov	r3, r0
 8008b24:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008b26:	4b48      	ldr	r3, [pc, #288]	; (8008c48 <tcp_input+0x28c>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	885b      	ldrh	r3, [r3, #2]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	4a46      	ldr	r2, [pc, #280]	; (8008c48 <tcp_input+0x28c>)
 8008b30:	6814      	ldr	r4, [r2, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fc fa54 	bl	8004fe0 <lwip_htons>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008b3c:	4b42      	ldr	r3, [pc, #264]	; (8008c48 <tcp_input+0x28c>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4a41      	ldr	r2, [pc, #260]	; (8008c48 <tcp_input+0x28c>)
 8008b44:	6814      	ldr	r4, [r2, #0]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fc fa5f 	bl	800500a <lwip_htonl>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	6063      	str	r3, [r4, #4]
 8008b50:	6863      	ldr	r3, [r4, #4]
 8008b52:	4a45      	ldr	r2, [pc, #276]	; (8008c68 <tcp_input+0x2ac>)
 8008b54:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008b56:	4b3c      	ldr	r3, [pc, #240]	; (8008c48 <tcp_input+0x28c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	4a3a      	ldr	r2, [pc, #232]	; (8008c48 <tcp_input+0x28c>)
 8008b5e:	6814      	ldr	r4, [r2, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7fc fa52 	bl	800500a <lwip_htonl>
 8008b66:	4603      	mov	r3, r0
 8008b68:	60a3      	str	r3, [r4, #8]
 8008b6a:	68a3      	ldr	r3, [r4, #8]
 8008b6c:	4a3f      	ldr	r2, [pc, #252]	; (8008c6c <tcp_input+0x2b0>)
 8008b6e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008b70:	4b35      	ldr	r3, [pc, #212]	; (8008c48 <tcp_input+0x28c>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	89db      	ldrh	r3, [r3, #14]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	4a33      	ldr	r2, [pc, #204]	; (8008c48 <tcp_input+0x28c>)
 8008b7a:	6814      	ldr	r4, [r2, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fc fa2f 	bl	8004fe0 <lwip_htons>
 8008b82:	4603      	mov	r3, r0
 8008b84:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8008b86:	4b30      	ldr	r3, [pc, #192]	; (8008c48 <tcp_input+0x28c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	899b      	ldrh	r3, [r3, #12]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fc fa26 	bl	8004fe0 <lwip_htons>
 8008b94:	4603      	mov	r3, r0
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b9c:	b2da      	uxtb	r2, r3
 8008b9e:	4b34      	ldr	r3, [pc, #208]	; (8008c70 <tcp_input+0x2b4>)
 8008ba0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	891a      	ldrh	r2, [r3, #8]
 8008ba6:	4b33      	ldr	r3, [pc, #204]	; (8008c74 <tcp_input+0x2b8>)
 8008ba8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8008baa:	4b31      	ldr	r3, [pc, #196]	; (8008c70 <tcp_input+0x2b4>)
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	f003 0303 	and.w	r3, r3, #3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00c      	beq.n	8008bd0 <tcp_input+0x214>
    tcplen++;
 8008bb6:	4b2f      	ldr	r3, [pc, #188]	; (8008c74 <tcp_input+0x2b8>)
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	4b2d      	ldr	r3, [pc, #180]	; (8008c74 <tcp_input+0x2b8>)
 8008bc0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	891a      	ldrh	r2, [r3, #8]
 8008bc6:	4b2b      	ldr	r3, [pc, #172]	; (8008c74 <tcp_input+0x2b8>)
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	f200 82e6 	bhi.w	800919c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008bd4:	4b28      	ldr	r3, [pc, #160]	; (8008c78 <tcp_input+0x2bc>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	61fb      	str	r3, [r7, #28]
 8008bda:	e09d      	b.n	8008d18 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	7d1b      	ldrb	r3, [r3, #20]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d105      	bne.n	8008bf0 <tcp_input+0x234>
 8008be4:	4b15      	ldr	r3, [pc, #84]	; (8008c3c <tcp_input+0x280>)
 8008be6:	22fb      	movs	r2, #251	; 0xfb
 8008be8:	4924      	ldr	r1, [pc, #144]	; (8008c7c <tcp_input+0x2c0>)
 8008bea:	4816      	ldr	r0, [pc, #88]	; (8008c44 <tcp_input+0x288>)
 8008bec:	f006 ffca 	bl	800fb84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	7d1b      	ldrb	r3, [r3, #20]
 8008bf4:	2b0a      	cmp	r3, #10
 8008bf6:	d105      	bne.n	8008c04 <tcp_input+0x248>
 8008bf8:	4b10      	ldr	r3, [pc, #64]	; (8008c3c <tcp_input+0x280>)
 8008bfa:	22fc      	movs	r2, #252	; 0xfc
 8008bfc:	4920      	ldr	r1, [pc, #128]	; (8008c80 <tcp_input+0x2c4>)
 8008bfe:	4811      	ldr	r0, [pc, #68]	; (8008c44 <tcp_input+0x288>)
 8008c00:	f006 ffc0 	bl	800fb84 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008c04:	69fb      	ldr	r3, [r7, #28]
 8008c06:	7d1b      	ldrb	r3, [r3, #20]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d105      	bne.n	8008c18 <tcp_input+0x25c>
 8008c0c:	4b0b      	ldr	r3, [pc, #44]	; (8008c3c <tcp_input+0x280>)
 8008c0e:	22fd      	movs	r2, #253	; 0xfd
 8008c10:	491c      	ldr	r1, [pc, #112]	; (8008c84 <tcp_input+0x2c8>)
 8008c12:	480c      	ldr	r0, [pc, #48]	; (8008c44 <tcp_input+0x288>)
 8008c14:	f006 ffb6 	bl	800fb84 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	7a1b      	ldrb	r3, [r3, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d033      	beq.n	8008c88 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	7a1a      	ldrb	r2, [r3, #8]
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <tcp_input+0x290>)
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d029      	beq.n	8008c88 <tcp_input+0x2cc>
      prev = pcb;
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	61bb      	str	r3, [r7, #24]
      continue;
 8008c38:	e06b      	b.n	8008d12 <tcp_input+0x356>
 8008c3a:	bf00      	nop
 8008c3c:	08011f04 	.word	0x08011f04
 8008c40:	08011f38 	.word	0x08011f38
 8008c44:	08011f50 	.word	0x08011f50
 8008c48:	2000816c 	.word	0x2000816c
 8008c4c:	20005228 	.word	0x20005228
 8008c50:	20008170 	.word	0x20008170
 8008c54:	20008174 	.word	0x20008174
 8008c58:	20008172 	.word	0x20008172
 8008c5c:	08011f78 	.word	0x08011f78
 8008c60:	08011f88 	.word	0x08011f88
 8008c64:	08011f94 	.word	0x08011f94
 8008c68:	2000817c 	.word	0x2000817c
 8008c6c:	20008180 	.word	0x20008180
 8008c70:	20008188 	.word	0x20008188
 8008c74:	20008186 	.word	0x20008186
 8008c78:	20008150 	.word	0x20008150
 8008c7c:	08011fb4 	.word	0x08011fb4
 8008c80:	08011fdc 	.word	0x08011fdc
 8008c84:	08012008 	.word	0x08012008
    }

    if (pcb->remote_port == tcphdr->src &&
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	8b1a      	ldrh	r2, [r3, #24]
 8008c8c:	4b72      	ldr	r3, [pc, #456]	; (8008e58 <tcp_input+0x49c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d13a      	bne.n	8008d0e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	8ada      	ldrh	r2, [r3, #22]
 8008c9c:	4b6e      	ldr	r3, [pc, #440]	; (8008e58 <tcp_input+0x49c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	885b      	ldrh	r3, [r3, #2]
 8008ca2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d132      	bne.n	8008d0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	685a      	ldr	r2, [r3, #4]
 8008cac:	4b6b      	ldr	r3, [pc, #428]	; (8008e5c <tcp_input+0x4a0>)
 8008cae:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d12c      	bne.n	8008d0e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b68      	ldr	r3, [pc, #416]	; (8008e5c <tcp_input+0x4a0>)
 8008cba:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d126      	bne.n	8008d0e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	429a      	cmp	r2, r3
 8008cc8:	d106      	bne.n	8008cd8 <tcp_input+0x31c>
 8008cca:	4b65      	ldr	r3, [pc, #404]	; (8008e60 <tcp_input+0x4a4>)
 8008ccc:	f240 120d 	movw	r2, #269	; 0x10d
 8008cd0:	4964      	ldr	r1, [pc, #400]	; (8008e64 <tcp_input+0x4a8>)
 8008cd2:	4865      	ldr	r0, [pc, #404]	; (8008e68 <tcp_input+0x4ac>)
 8008cd4:	f006 ff56 	bl	800fb84 <iprintf>
      if (prev != NULL) {
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d00a      	beq.n	8008cf4 <tcp_input+0x338>
        prev->next = pcb->next;
 8008cde:	69fb      	ldr	r3, [r7, #28]
 8008ce0:	68da      	ldr	r2, [r3, #12]
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8008ce6:	4b61      	ldr	r3, [pc, #388]	; (8008e6c <tcp_input+0x4b0>)
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8008cee:	4a5f      	ldr	r2, [pc, #380]	; (8008e6c <tcp_input+0x4b0>)
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d111      	bne.n	8008d22 <tcp_input+0x366>
 8008cfe:	4b58      	ldr	r3, [pc, #352]	; (8008e60 <tcp_input+0x4a4>)
 8008d00:	f240 1215 	movw	r2, #277	; 0x115
 8008d04:	495a      	ldr	r1, [pc, #360]	; (8008e70 <tcp_input+0x4b4>)
 8008d06:	4858      	ldr	r0, [pc, #352]	; (8008e68 <tcp_input+0x4ac>)
 8008d08:	f006 ff3c 	bl	800fb84 <iprintf>
      break;
 8008d0c:	e009      	b.n	8008d22 <tcp_input+0x366>
    }
    prev = pcb;
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	61fb      	str	r3, [r7, #28]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	f47f af5e 	bne.w	8008bdc <tcp_input+0x220>
 8008d20:	e000      	b.n	8008d24 <tcp_input+0x368>
      break;
 8008d22:	bf00      	nop
  }

  if (pcb == NULL) {
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f040 80aa 	bne.w	8008e80 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d2c:	4b51      	ldr	r3, [pc, #324]	; (8008e74 <tcp_input+0x4b8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	61fb      	str	r3, [r7, #28]
 8008d32:	e03f      	b.n	8008db4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	7d1b      	ldrb	r3, [r3, #20]
 8008d38:	2b0a      	cmp	r3, #10
 8008d3a:	d006      	beq.n	8008d4a <tcp_input+0x38e>
 8008d3c:	4b48      	ldr	r3, [pc, #288]	; (8008e60 <tcp_input+0x4a4>)
 8008d3e:	f240 121f 	movw	r2, #287	; 0x11f
 8008d42:	494d      	ldr	r1, [pc, #308]	; (8008e78 <tcp_input+0x4bc>)
 8008d44:	4848      	ldr	r0, [pc, #288]	; (8008e68 <tcp_input+0x4ac>)
 8008d46:	f006 ff1d 	bl	800fb84 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	7a1b      	ldrb	r3, [r3, #8]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008d52:	69fb      	ldr	r3, [r7, #28]
 8008d54:	7a1a      	ldrb	r2, [r3, #8]
 8008d56:	4b41      	ldr	r3, [pc, #260]	; (8008e5c <tcp_input+0x4a0>)
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d5e:	3301      	adds	r3, #1
 8008d60:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d122      	bne.n	8008dac <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	8b1a      	ldrh	r2, [r3, #24]
 8008d6a:	4b3b      	ldr	r3, [pc, #236]	; (8008e58 <tcp_input+0x49c>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d11b      	bne.n	8008dae <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8008d76:	69fb      	ldr	r3, [r7, #28]
 8008d78:	8ada      	ldrh	r2, [r3, #22]
 8008d7a:	4b37      	ldr	r3, [pc, #220]	; (8008e58 <tcp_input+0x49c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	885b      	ldrh	r3, [r3, #2]
 8008d80:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d113      	bne.n	8008dae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	685a      	ldr	r2, [r3, #4]
 8008d8a:	4b34      	ldr	r3, [pc, #208]	; (8008e5c <tcp_input+0x4a0>)
 8008d8c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d10d      	bne.n	8008dae <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	4b31      	ldr	r3, [pc, #196]	; (8008e5c <tcp_input+0x4a0>)
 8008d98:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d107      	bne.n	8008dae <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8008d9e:	69f8      	ldr	r0, [r7, #28]
 8008da0:	f000 fb56 	bl	8009450 <tcp_timewait_input>
        }
        pbuf_free(p);
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7fd fd31 	bl	800680c <pbuf_free>
        return;
 8008daa:	e1fd      	b.n	80091a8 <tcp_input+0x7ec>
        continue;
 8008dac:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dae:	69fb      	ldr	r3, [r7, #28]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	61fb      	str	r3, [r7, #28]
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1bc      	bne.n	8008d34 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dbe:	4b2f      	ldr	r3, [pc, #188]	; (8008e7c <tcp_input+0x4c0>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	617b      	str	r3, [r7, #20]
 8008dc4:	e02a      	b.n	8008e1c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	7a1b      	ldrb	r3, [r3, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00c      	beq.n	8008de8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	7a1a      	ldrb	r2, [r3, #8]
 8008dd2:	4b22      	ldr	r3, [pc, #136]	; (8008e5c <tcp_input+0x4a0>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008dda:	3301      	adds	r3, #1
 8008ddc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d002      	beq.n	8008de8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	61bb      	str	r3, [r7, #24]
        continue;
 8008de6:	e016      	b.n	8008e16 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	8ada      	ldrh	r2, [r3, #22]
 8008dec:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <tcp_input+0x49c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	885b      	ldrh	r3, [r3, #2]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d10c      	bne.n	8008e12 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	681a      	ldr	r2, [r3, #0]
 8008dfc:	4b17      	ldr	r3, [pc, #92]	; (8008e5c <tcp_input+0x4a0>)
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d00f      	beq.n	8008e24 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00d      	beq.n	8008e26 <tcp_input+0x46a>
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d009      	beq.n	8008e26 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d1d1      	bne.n	8008dc6 <tcp_input+0x40a>
 8008e22:	e000      	b.n	8008e26 <tcp_input+0x46a>
            break;
 8008e24:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d029      	beq.n	8008e80 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8008e3a:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <tcp_input+0x4c0>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8008e42:	4a0e      	ldr	r2, [pc, #56]	; (8008e7c <tcp_input+0x4c0>)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8008e48:	6978      	ldr	r0, [r7, #20]
 8008e4a:	f000 fa03 	bl	8009254 <tcp_listen_input>
      }
      pbuf_free(p);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7fd fcdc 	bl	800680c <pbuf_free>
      return;
 8008e54:	e1a8      	b.n	80091a8 <tcp_input+0x7ec>
 8008e56:	bf00      	nop
 8008e58:	2000816c 	.word	0x2000816c
 8008e5c:	20005228 	.word	0x20005228
 8008e60:	08011f04 	.word	0x08011f04
 8008e64:	08012030 	.word	0x08012030
 8008e68:	08011f50 	.word	0x08011f50
 8008e6c:	20008150 	.word	0x20008150
 8008e70:	0801205c 	.word	0x0801205c
 8008e74:	20008154 	.word	0x20008154
 8008e78:	08012088 	.word	0x08012088
 8008e7c:	2000814c 	.word	0x2000814c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 8158 	beq.w	8009138 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8008e88:	4b95      	ldr	r3, [pc, #596]	; (80090e0 <tcp_input+0x724>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	891a      	ldrh	r2, [r3, #8]
 8008e92:	4b93      	ldr	r3, [pc, #588]	; (80090e0 <tcp_input+0x724>)
 8008e94:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8008e96:	4a92      	ldr	r2, [pc, #584]	; (80090e0 <tcp_input+0x724>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8008e9c:	4b91      	ldr	r3, [pc, #580]	; (80090e4 <tcp_input+0x728>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a8f      	ldr	r2, [pc, #572]	; (80090e0 <tcp_input+0x724>)
 8008ea2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8008ea4:	4b90      	ldr	r3, [pc, #576]	; (80090e8 <tcp_input+0x72c>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8008eaa:	4b90      	ldr	r3, [pc, #576]	; (80090ec <tcp_input+0x730>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8008eb0:	4b8f      	ldr	r3, [pc, #572]	; (80090f0 <tcp_input+0x734>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8008eb6:	4b8f      	ldr	r3, [pc, #572]	; (80090f4 <tcp_input+0x738>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	f003 0308 	and.w	r3, r3, #8
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d006      	beq.n	8008ed0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	7b5b      	ldrb	r3, [r3, #13]
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d017      	beq.n	8008f08 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008ed8:	69f8      	ldr	r0, [r7, #28]
 8008eda:	f7ff f843 	bl	8007f64 <tcp_process_refused_data>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f113 0f0d 	cmn.w	r3, #13
 8008ee4:	d007      	beq.n	8008ef6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008ee6:	69fb      	ldr	r3, [r7, #28]
 8008ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008eee:	4b82      	ldr	r3, [pc, #520]	; (80090f8 <tcp_input+0x73c>)
 8008ef0:	881b      	ldrh	r3, [r3, #0]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	f040 80e3 	bne.w	80090c6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8008f00:	69f8      	ldr	r0, [r7, #28]
 8008f02:	f003 fe05 	bl	800cb10 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8008f06:	e0de      	b.n	80090c6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8008f08:	4a7c      	ldr	r2, [pc, #496]	; (80090fc <tcp_input+0x740>)
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8008f0e:	69f8      	ldr	r0, [r7, #28]
 8008f10:	f000 fb18 	bl	8009544 <tcp_process>
 8008f14:	4603      	mov	r3, r0
 8008f16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8008f18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f1c:	f113 0f0d 	cmn.w	r3, #13
 8008f20:	f000 80d3 	beq.w	80090ca <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8008f24:	4b71      	ldr	r3, [pc, #452]	; (80090ec <tcp_input+0x730>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d015      	beq.n	8008f5c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <tcp_input+0x590>
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f40:	69fa      	ldr	r2, [r7, #28]
 8008f42:	6912      	ldr	r2, [r2, #16]
 8008f44:	f06f 010d 	mvn.w	r1, #13
 8008f48:	4610      	mov	r0, r2
 8008f4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f4c:	69f9      	ldr	r1, [r7, #28]
 8008f4e:	486c      	ldr	r0, [pc, #432]	; (8009100 <tcp_input+0x744>)
 8008f50:	f7ff fbbc 	bl	80086cc <tcp_pcb_remove>
        tcp_free(pcb);
 8008f54:	69f8      	ldr	r0, [r7, #28]
 8008f56:	f7fd ff09 	bl	8006d6c <tcp_free>
 8008f5a:	e0da      	b.n	8009112 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8008f60:	4b63      	ldr	r3, [pc, #396]	; (80090f0 <tcp_input+0x734>)
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d01d      	beq.n	8008fa4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8008f68:	4b61      	ldr	r3, [pc, #388]	; (80090f0 <tcp_input+0x734>)
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8008f6e:	69fb      	ldr	r3, [r7, #28]
 8008f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00a      	beq.n	8008f8e <tcp_input+0x5d2>
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	6910      	ldr	r0, [r2, #16]
 8008f82:	89fa      	ldrh	r2, [r7, #14]
 8008f84:	69f9      	ldr	r1, [r7, #28]
 8008f86:	4798      	blx	r3
 8008f88:	4603      	mov	r3, r0
 8008f8a:	74fb      	strb	r3, [r7, #19]
 8008f8c:	e001      	b.n	8008f92 <tcp_input+0x5d6>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8008f92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f96:	f113 0f0d 	cmn.w	r3, #13
 8008f9a:	f000 8098 	beq.w	80090ce <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8008f9e:	4b54      	ldr	r3, [pc, #336]	; (80090f0 <tcp_input+0x734>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8008fa4:	69f8      	ldr	r0, [r7, #28]
 8008fa6:	f000 f915 	bl	80091d4 <tcp_input_delayed_close>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8090 	bne.w	80090d2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8008fb2:	4b4d      	ldr	r3, [pc, #308]	; (80090e8 <tcp_input+0x72c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d041      	beq.n	800903e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d006      	beq.n	8008fd0 <tcp_input+0x614>
 8008fc2:	4b50      	ldr	r3, [pc, #320]	; (8009104 <tcp_input+0x748>)
 8008fc4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8008fc8:	494f      	ldr	r1, [pc, #316]	; (8009108 <tcp_input+0x74c>)
 8008fca:	4850      	ldr	r0, [pc, #320]	; (800910c <tcp_input+0x750>)
 8008fcc:	f006 fdda 	bl	800fb84 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	8b5b      	ldrh	r3, [r3, #26]
 8008fd4:	f003 0310 	and.w	r3, r3, #16
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d008      	beq.n	8008fee <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8008fdc:	4b42      	ldr	r3, [pc, #264]	; (80090e8 <tcp_input+0x72c>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd fc13 	bl	800680c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8008fe6:	69f8      	ldr	r0, [r7, #28]
 8008fe8:	f7fe f9a8 	bl	800733c <tcp_abort>
            goto aborted;
 8008fec:	e091      	b.n	8009112 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00c      	beq.n	8009012 <tcp_input+0x656>
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	6918      	ldr	r0, [r3, #16]
 8009002:	4b39      	ldr	r3, [pc, #228]	; (80090e8 <tcp_input+0x72c>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	2300      	movs	r3, #0
 8009008:	69f9      	ldr	r1, [r7, #28]
 800900a:	47a0      	blx	r4
 800900c:	4603      	mov	r3, r0
 800900e:	74fb      	strb	r3, [r7, #19]
 8009010:	e008      	b.n	8009024 <tcp_input+0x668>
 8009012:	4b35      	ldr	r3, [pc, #212]	; (80090e8 <tcp_input+0x72c>)
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	2300      	movs	r3, #0
 8009018:	69f9      	ldr	r1, [r7, #28]
 800901a:	2000      	movs	r0, #0
 800901c:	f7ff f896 	bl	800814c <tcp_recv_null>
 8009020:	4603      	mov	r3, r0
 8009022:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8009024:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009028:	f113 0f0d 	cmn.w	r3, #13
 800902c:	d053      	beq.n	80090d6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800902e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d003      	beq.n	800903e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8009036:	4b2c      	ldr	r3, [pc, #176]	; (80090e8 <tcp_input+0x72c>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800903e:	4b2b      	ldr	r3, [pc, #172]	; (80090ec <tcp_input+0x730>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	f003 0320 	and.w	r3, r3, #32
 8009046:	2b00      	cmp	r3, #0
 8009048:	d030      	beq.n	80090ac <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800904a:	69fb      	ldr	r3, [r7, #28]
 800904c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009056:	7b5a      	ldrb	r2, [r3, #13]
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800905c:	f042 0220 	orr.w	r2, r2, #32
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	735a      	strb	r2, [r3, #13]
 8009064:	e022      	b.n	80090ac <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800906e:	d005      	beq.n	800907c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009074:	3301      	adds	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00b      	beq.n	800909e <tcp_input+0x6e2>
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	6918      	ldr	r0, [r3, #16]
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	69f9      	ldr	r1, [r7, #28]
 8009096:	47a0      	blx	r4
 8009098:	4603      	mov	r3, r0
 800909a:	74fb      	strb	r3, [r7, #19]
 800909c:	e001      	b.n	80090a2 <tcp_input+0x6e6>
 800909e:	2300      	movs	r3, #0
 80090a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80090a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090a6:	f113 0f0d 	cmn.w	r3, #13
 80090aa:	d016      	beq.n	80090da <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80090ac:	4b13      	ldr	r3, [pc, #76]	; (80090fc <tcp_input+0x740>)
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80090b2:	69f8      	ldr	r0, [r7, #28]
 80090b4:	f000 f88e 	bl	80091d4 <tcp_input_delayed_close>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d128      	bne.n	8009110 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80090be:	69f8      	ldr	r0, [r7, #28]
 80090c0:	f002 ff20 	bl	800bf04 <tcp_output>
 80090c4:	e025      	b.n	8009112 <tcp_input+0x756>
        goto aborted;
 80090c6:	bf00      	nop
 80090c8:	e023      	b.n	8009112 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80090ca:	bf00      	nop
 80090cc:	e021      	b.n	8009112 <tcp_input+0x756>
              goto aborted;
 80090ce:	bf00      	nop
 80090d0:	e01f      	b.n	8009112 <tcp_input+0x756>
          goto aborted;
 80090d2:	bf00      	nop
 80090d4:	e01d      	b.n	8009112 <tcp_input+0x756>
            goto aborted;
 80090d6:	bf00      	nop
 80090d8:	e01b      	b.n	8009112 <tcp_input+0x756>
              goto aborted;
 80090da:	bf00      	nop
 80090dc:	e019      	b.n	8009112 <tcp_input+0x756>
 80090de:	bf00      	nop
 80090e0:	2000815c 	.word	0x2000815c
 80090e4:	2000816c 	.word	0x2000816c
 80090e8:	2000818c 	.word	0x2000818c
 80090ec:	20008189 	.word	0x20008189
 80090f0:	20008184 	.word	0x20008184
 80090f4:	20008188 	.word	0x20008188
 80090f8:	20008186 	.word	0x20008186
 80090fc:	20008190 	.word	0x20008190
 8009100:	20008150 	.word	0x20008150
 8009104:	08011f04 	.word	0x08011f04
 8009108:	080120b8 	.word	0x080120b8
 800910c:	08011f50 	.word	0x08011f50
          goto aborted;
 8009110:	bf00      	nop
    tcp_input_pcb = NULL;
 8009112:	4b27      	ldr	r3, [pc, #156]	; (80091b0 <tcp_input+0x7f4>)
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8009118:	4b26      	ldr	r3, [pc, #152]	; (80091b4 <tcp_input+0x7f8>)
 800911a:	2200      	movs	r2, #0
 800911c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800911e:	4b26      	ldr	r3, [pc, #152]	; (80091b8 <tcp_input+0x7fc>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d03f      	beq.n	80091a6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8009126:	4b24      	ldr	r3, [pc, #144]	; (80091b8 <tcp_input+0x7fc>)
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	4618      	mov	r0, r3
 800912c:	f7fd fb6e 	bl	800680c <pbuf_free>
      inseg.p = NULL;
 8009130:	4b21      	ldr	r3, [pc, #132]	; (80091b8 <tcp_input+0x7fc>)
 8009132:	2200      	movs	r2, #0
 8009134:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8009136:	e036      	b.n	80091a6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009138:	4b20      	ldr	r3, [pc, #128]	; (80091bc <tcp_input+0x800>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	899b      	ldrh	r3, [r3, #12]
 800913e:	b29b      	uxth	r3, r3
 8009140:	4618      	mov	r0, r3
 8009142:	f7fb ff4d 	bl	8004fe0 <lwip_htons>
 8009146:	4603      	mov	r3, r0
 8009148:	b2db      	uxtb	r3, r3
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	d118      	bne.n	8009184 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009152:	4b1b      	ldr	r3, [pc, #108]	; (80091c0 <tcp_input+0x804>)
 8009154:	6819      	ldr	r1, [r3, #0]
 8009156:	4b1b      	ldr	r3, [pc, #108]	; (80091c4 <tcp_input+0x808>)
 8009158:	881b      	ldrh	r3, [r3, #0]
 800915a:	461a      	mov	r2, r3
 800915c:	4b1a      	ldr	r3, [pc, #104]	; (80091c8 <tcp_input+0x80c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <tcp_input+0x800>)
 8009164:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009166:	885b      	ldrh	r3, [r3, #2]
 8009168:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800916a:	4a14      	ldr	r2, [pc, #80]	; (80091bc <tcp_input+0x800>)
 800916c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800916e:	8812      	ldrh	r2, [r2, #0]
 8009170:	b292      	uxth	r2, r2
 8009172:	9202      	str	r2, [sp, #8]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	4b15      	ldr	r3, [pc, #84]	; (80091cc <tcp_input+0x810>)
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	4b15      	ldr	r3, [pc, #84]	; (80091d0 <tcp_input+0x814>)
 800917c:	4602      	mov	r2, r0
 800917e:	2000      	movs	r0, #0
 8009180:	f003 fc74 	bl	800ca6c <tcp_rst>
    pbuf_free(p);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f7fd fb41 	bl	800680c <pbuf_free>
  return;
 800918a:	e00c      	b.n	80091a6 <tcp_input+0x7ea>
    goto dropped;
 800918c:	bf00      	nop
 800918e:	e006      	b.n	800919e <tcp_input+0x7e2>
    goto dropped;
 8009190:	bf00      	nop
 8009192:	e004      	b.n	800919e <tcp_input+0x7e2>
    goto dropped;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <tcp_input+0x7e2>
      goto dropped;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <tcp_input+0x7e2>
      goto dropped;
 800919c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f7fd fb34 	bl	800680c <pbuf_free>
 80091a4:	e000      	b.n	80091a8 <tcp_input+0x7ec>
  return;
 80091a6:	bf00      	nop
}
 80091a8:	3724      	adds	r7, #36	; 0x24
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd90      	pop	{r4, r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20008190 	.word	0x20008190
 80091b4:	2000818c 	.word	0x2000818c
 80091b8:	2000815c 	.word	0x2000815c
 80091bc:	2000816c 	.word	0x2000816c
 80091c0:	20008180 	.word	0x20008180
 80091c4:	20008186 	.word	0x20008186
 80091c8:	2000817c 	.word	0x2000817c
 80091cc:	20005238 	.word	0x20005238
 80091d0:	2000523c 	.word	0x2000523c

080091d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d106      	bne.n	80091f0 <tcp_input_delayed_close+0x1c>
 80091e2:	4b17      	ldr	r3, [pc, #92]	; (8009240 <tcp_input_delayed_close+0x6c>)
 80091e4:	f240 225a 	movw	r2, #602	; 0x25a
 80091e8:	4916      	ldr	r1, [pc, #88]	; (8009244 <tcp_input_delayed_close+0x70>)
 80091ea:	4817      	ldr	r0, [pc, #92]	; (8009248 <tcp_input_delayed_close+0x74>)
 80091ec:	f006 fcca 	bl	800fb84 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80091f0:	4b16      	ldr	r3, [pc, #88]	; (800924c <tcp_input_delayed_close+0x78>)
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01c      	beq.n	8009236 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	8b5b      	ldrh	r3, [r3, #26]
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	d10d      	bne.n	8009224 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920e:	2b00      	cmp	r3, #0
 8009210:	d008      	beq.n	8009224 <tcp_input_delayed_close+0x50>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6912      	ldr	r2, [r2, #16]
 800921c:	f06f 010e 	mvn.w	r1, #14
 8009220:	4610      	mov	r0, r2
 8009222:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009224:	6879      	ldr	r1, [r7, #4]
 8009226:	480a      	ldr	r0, [pc, #40]	; (8009250 <tcp_input_delayed_close+0x7c>)
 8009228:	f7ff fa50 	bl	80086cc <tcp_pcb_remove>
    tcp_free(pcb);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f7fd fd9d 	bl	8006d6c <tcp_free>
    return 1;
 8009232:	2301      	movs	r3, #1
 8009234:	e000      	b.n	8009238 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8009236:	2300      	movs	r3, #0
}
 8009238:	4618      	mov	r0, r3
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	08011f04 	.word	0x08011f04
 8009244:	080120d4 	.word	0x080120d4
 8009248:	08011f50 	.word	0x08011f50
 800924c:	20008189 	.word	0x20008189
 8009250:	20008150 	.word	0x20008150

08009254 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b08b      	sub	sp, #44	; 0x2c
 8009258:	af04      	add	r7, sp, #16
 800925a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800925c:	4b6f      	ldr	r3, [pc, #444]	; (800941c <tcp_listen_input+0x1c8>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 80d2 	bne.w	800940e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d106      	bne.n	800927e <tcp_listen_input+0x2a>
 8009270:	4b6b      	ldr	r3, [pc, #428]	; (8009420 <tcp_listen_input+0x1cc>)
 8009272:	f240 2281 	movw	r2, #641	; 0x281
 8009276:	496b      	ldr	r1, [pc, #428]	; (8009424 <tcp_listen_input+0x1d0>)
 8009278:	486b      	ldr	r0, [pc, #428]	; (8009428 <tcp_listen_input+0x1d4>)
 800927a:	f006 fc83 	bl	800fb84 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800927e:	4b67      	ldr	r3, [pc, #412]	; (800941c <tcp_listen_input+0x1c8>)
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	f003 0310 	and.w	r3, r3, #16
 8009286:	2b00      	cmp	r3, #0
 8009288:	d019      	beq.n	80092be <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800928a:	4b68      	ldr	r3, [pc, #416]	; (800942c <tcp_listen_input+0x1d8>)
 800928c:	6819      	ldr	r1, [r3, #0]
 800928e:	4b68      	ldr	r3, [pc, #416]	; (8009430 <tcp_listen_input+0x1dc>)
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	4b67      	ldr	r3, [pc, #412]	; (8009434 <tcp_listen_input+0x1e0>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800929a:	4b67      	ldr	r3, [pc, #412]	; (8009438 <tcp_listen_input+0x1e4>)
 800929c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800929e:	885b      	ldrh	r3, [r3, #2]
 80092a0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80092a2:	4a65      	ldr	r2, [pc, #404]	; (8009438 <tcp_listen_input+0x1e4>)
 80092a4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80092a6:	8812      	ldrh	r2, [r2, #0]
 80092a8:	b292      	uxth	r2, r2
 80092aa:	9202      	str	r2, [sp, #8]
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	4b63      	ldr	r3, [pc, #396]	; (800943c <tcp_listen_input+0x1e8>)
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4b63      	ldr	r3, [pc, #396]	; (8009440 <tcp_listen_input+0x1ec>)
 80092b4:	4602      	mov	r2, r0
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f003 fbd8 	bl	800ca6c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80092bc:	e0a9      	b.n	8009412 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80092be:	4b57      	ldr	r3, [pc, #348]	; (800941c <tcp_listen_input+0x1c8>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f000 80a3 	beq.w	8009412 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	7d5b      	ldrb	r3, [r3, #21]
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff f85f 	bl	8008394 <tcp_alloc>
 80092d6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d111      	bne.n	8009302 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00a      	beq.n	80092fc <tcp_listen_input+0xa8>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	699b      	ldr	r3, [r3, #24]
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	6910      	ldr	r0, [r2, #16]
 80092ee:	f04f 32ff 	mov.w	r2, #4294967295
 80092f2:	2100      	movs	r1, #0
 80092f4:	4798      	blx	r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	73bb      	strb	r3, [r7, #14]
      return;
 80092fa:	e08b      	b.n	8009414 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092fc:	23f0      	movs	r3, #240	; 0xf0
 80092fe:	73bb      	strb	r3, [r7, #14]
      return;
 8009300:	e088      	b.n	8009414 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8009302:	4b50      	ldr	r3, [pc, #320]	; (8009444 <tcp_listen_input+0x1f0>)
 8009304:	695a      	ldr	r2, [r3, #20]
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800930a:	4b4e      	ldr	r3, [pc, #312]	; (8009444 <tcp_listen_input+0x1f0>)
 800930c:	691a      	ldr	r2, [r3, #16]
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	8ada      	ldrh	r2, [r3, #22]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800931a:	4b47      	ldr	r3, [pc, #284]	; (8009438 <tcp_listen_input+0x1e4>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	881b      	ldrh	r3, [r3, #0]
 8009320:	b29a      	uxth	r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	2203      	movs	r2, #3
 800932a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800932c:	4b41      	ldr	r3, [pc, #260]	; (8009434 <tcp_listen_input+0x1e0>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800933e:	6978      	ldr	r0, [r7, #20]
 8009340:	f7ff fa58 	bl	80087f4 <tcp_next_iss>
 8009344:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	693a      	ldr	r2, [r7, #16]
 800934a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	693a      	ldr	r2, [r7, #16]
 8009350:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800935e:	4b35      	ldr	r3, [pc, #212]	; (8009434 <tcp_listen_input+0x1e0>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	1e5a      	subs	r2, r3, #1
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	7a5b      	ldrb	r3, [r3, #9]
 800937a:	f003 030c 	and.w	r3, r3, #12
 800937e:	b2da      	uxtb	r2, r3
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	7a1a      	ldrb	r2, [r3, #8]
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800938c:	4b2e      	ldr	r3, [pc, #184]	; (8009448 <tcp_listen_input+0x1f4>)
 800938e:	681a      	ldr	r2, [r3, #0]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	60da      	str	r2, [r3, #12]
 8009394:	4a2c      	ldr	r2, [pc, #176]	; (8009448 <tcp_listen_input+0x1f4>)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6013      	str	r3, [r2, #0]
 800939a:	f003 fd29 	bl	800cdf0 <tcp_timer_needed>
 800939e:	4b2b      	ldr	r3, [pc, #172]	; (800944c <tcp_listen_input+0x1f8>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80093a4:	6978      	ldr	r0, [r7, #20]
 80093a6:	f001 fd8f 	bl	800aec8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80093aa:	4b23      	ldr	r3, [pc, #140]	; (8009438 <tcp_listen_input+0x1e4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	89db      	ldrh	r3, [r3, #14]
 80093b0:	b29a      	uxth	r2, r3
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	3304      	adds	r3, #4
 80093cc:	4618      	mov	r0, r3
 80093ce:	f005 f913 	bl	800e5f8 <ip4_route>
 80093d2:	4601      	mov	r1, r0
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	3304      	adds	r3, #4
 80093d8:	461a      	mov	r2, r3
 80093da:	4620      	mov	r0, r4
 80093dc:	f7ff fa30 	bl	8008840 <tcp_eff_send_mss_netif>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80093e8:	2112      	movs	r1, #18
 80093ea:	6978      	ldr	r0, [r7, #20]
 80093ec:	f002 fc9c 	bl	800bd28 <tcp_enqueue_flags>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80093f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d004      	beq.n	8009406 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80093fc:	2100      	movs	r1, #0
 80093fe:	6978      	ldr	r0, [r7, #20]
 8009400:	f7fd fede 	bl	80071c0 <tcp_abandon>
      return;
 8009404:	e006      	b.n	8009414 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f002 fd7c 	bl	800bf04 <tcp_output>
  return;
 800940c:	e001      	b.n	8009412 <tcp_listen_input+0x1be>
    return;
 800940e:	bf00      	nop
 8009410:	e000      	b.n	8009414 <tcp_listen_input+0x1c0>
  return;
 8009412:	bf00      	nop
}
 8009414:	371c      	adds	r7, #28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd90      	pop	{r4, r7, pc}
 800941a:	bf00      	nop
 800941c:	20008188 	.word	0x20008188
 8009420:	08011f04 	.word	0x08011f04
 8009424:	080120fc 	.word	0x080120fc
 8009428:	08011f50 	.word	0x08011f50
 800942c:	20008180 	.word	0x20008180
 8009430:	20008186 	.word	0x20008186
 8009434:	2000817c 	.word	0x2000817c
 8009438:	2000816c 	.word	0x2000816c
 800943c:	20005238 	.word	0x20005238
 8009440:	2000523c 	.word	0x2000523c
 8009444:	20005228 	.word	0x20005228
 8009448:	20008150 	.word	0x20008150
 800944c:	20008158 	.word	0x20008158

08009450 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b086      	sub	sp, #24
 8009454:	af04      	add	r7, sp, #16
 8009456:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8009458:	4b2f      	ldr	r3, [pc, #188]	; (8009518 <tcp_timewait_input+0xc8>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b00      	cmp	r3, #0
 8009462:	d153      	bne.n	800950c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d106      	bne.n	8009478 <tcp_timewait_input+0x28>
 800946a:	4b2c      	ldr	r3, [pc, #176]	; (800951c <tcp_timewait_input+0xcc>)
 800946c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8009470:	492b      	ldr	r1, [pc, #172]	; (8009520 <tcp_timewait_input+0xd0>)
 8009472:	482c      	ldr	r0, [pc, #176]	; (8009524 <tcp_timewait_input+0xd4>)
 8009474:	f006 fb86 	bl	800fb84 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8009478:	4b27      	ldr	r3, [pc, #156]	; (8009518 <tcp_timewait_input+0xc8>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d02a      	beq.n	80094da <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8009484:	4b28      	ldr	r3, [pc, #160]	; (8009528 <tcp_timewait_input+0xd8>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b00      	cmp	r3, #0
 8009490:	db2d      	blt.n	80094ee <tcp_timewait_input+0x9e>
 8009492:	4b25      	ldr	r3, [pc, #148]	; (8009528 <tcp_timewait_input+0xd8>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800949e:	440b      	add	r3, r1
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	dc23      	bgt.n	80094ee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094a6:	4b21      	ldr	r3, [pc, #132]	; (800952c <tcp_timewait_input+0xdc>)
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	4b21      	ldr	r3, [pc, #132]	; (8009530 <tcp_timewait_input+0xe0>)
 80094ac:	881b      	ldrh	r3, [r3, #0]
 80094ae:	461a      	mov	r2, r3
 80094b0:	4b1d      	ldr	r3, [pc, #116]	; (8009528 <tcp_timewait_input+0xd8>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094b6:	4b1f      	ldr	r3, [pc, #124]	; (8009534 <tcp_timewait_input+0xe4>)
 80094b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094ba:	885b      	ldrh	r3, [r3, #2]
 80094bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80094be:	4a1d      	ldr	r2, [pc, #116]	; (8009534 <tcp_timewait_input+0xe4>)
 80094c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80094c2:	8812      	ldrh	r2, [r2, #0]
 80094c4:	b292      	uxth	r2, r2
 80094c6:	9202      	str	r2, [sp, #8]
 80094c8:	9301      	str	r3, [sp, #4]
 80094ca:	4b1b      	ldr	r3, [pc, #108]	; (8009538 <tcp_timewait_input+0xe8>)
 80094cc:	9300      	str	r3, [sp, #0]
 80094ce:	4b1b      	ldr	r3, [pc, #108]	; (800953c <tcp_timewait_input+0xec>)
 80094d0:	4602      	mov	r2, r0
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f003 faca 	bl	800ca6c <tcp_rst>
      return;
 80094d8:	e01b      	b.n	8009512 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <tcp_timewait_input+0xc8>)
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d003      	beq.n	80094ee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80094e6:	4b16      	ldr	r3, [pc, #88]	; (8009540 <tcp_timewait_input+0xf0>)
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80094ee:	4b10      	ldr	r3, [pc, #64]	; (8009530 <tcp_timewait_input+0xe0>)
 80094f0:	881b      	ldrh	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00c      	beq.n	8009510 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	8b5b      	ldrh	r3, [r3, #26]
 80094fa:	f043 0302 	orr.w	r3, r3, #2
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f002 fcfd 	bl	800bf04 <tcp_output>
  }
  return;
 800950a:	e001      	b.n	8009510 <tcp_timewait_input+0xc0>
    return;
 800950c:	bf00      	nop
 800950e:	e000      	b.n	8009512 <tcp_timewait_input+0xc2>
  return;
 8009510:	bf00      	nop
}
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20008188 	.word	0x20008188
 800951c:	08011f04 	.word	0x08011f04
 8009520:	0801211c 	.word	0x0801211c
 8009524:	08011f50 	.word	0x08011f50
 8009528:	2000817c 	.word	0x2000817c
 800952c:	20008180 	.word	0x20008180
 8009530:	20008186 	.word	0x20008186
 8009534:	2000816c 	.word	0x2000816c
 8009538:	20005238 	.word	0x20005238
 800953c:	2000523c 	.word	0x2000523c
 8009540:	20008144 	.word	0x20008144

08009544 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8009544:	b590      	push	{r4, r7, lr}
 8009546:	b08d      	sub	sp, #52	; 0x34
 8009548:	af04      	add	r7, sp, #16
 800954a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8009550:	2300      	movs	r3, #0
 8009552:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d106      	bne.n	8009568 <tcp_process+0x24>
 800955a:	4b9d      	ldr	r3, [pc, #628]	; (80097d0 <tcp_process+0x28c>)
 800955c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009560:	499c      	ldr	r1, [pc, #624]	; (80097d4 <tcp_process+0x290>)
 8009562:	489d      	ldr	r0, [pc, #628]	; (80097d8 <tcp_process+0x294>)
 8009564:	f006 fb0e 	bl	800fb84 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8009568:	4b9c      	ldr	r3, [pc, #624]	; (80097dc <tcp_process+0x298>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	d04e      	beq.n	8009612 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	7d1b      	ldrb	r3, [r3, #20]
 8009578:	2b02      	cmp	r3, #2
 800957a:	d108      	bne.n	800958e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009580:	4b97      	ldr	r3, [pc, #604]	; (80097e0 <tcp_process+0x29c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	429a      	cmp	r2, r3
 8009586:	d123      	bne.n	80095d0 <tcp_process+0x8c>
        acceptable = 1;
 8009588:	2301      	movs	r3, #1
 800958a:	76fb      	strb	r3, [r7, #27]
 800958c:	e020      	b.n	80095d0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009592:	4b94      	ldr	r3, [pc, #592]	; (80097e4 <tcp_process+0x2a0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	429a      	cmp	r2, r3
 8009598:	d102      	bne.n	80095a0 <tcp_process+0x5c>
        acceptable = 1;
 800959a:	2301      	movs	r3, #1
 800959c:	76fb      	strb	r3, [r7, #27]
 800959e:	e017      	b.n	80095d0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80095a0:	4b90      	ldr	r3, [pc, #576]	; (80097e4 <tcp_process+0x2a0>)
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	db10      	blt.n	80095d0 <tcp_process+0x8c>
 80095ae:	4b8d      	ldr	r3, [pc, #564]	; (80097e4 <tcp_process+0x2a0>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80095ba:	440b      	add	r3, r1
 80095bc:	1ad3      	subs	r3, r2, r3
 80095be:	2b00      	cmp	r3, #0
 80095c0:	dc06      	bgt.n	80095d0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	8b5b      	ldrh	r3, [r3, #26]
 80095c6:	f043 0302 	orr.w	r3, r3, #2
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80095d0:	7efb      	ldrb	r3, [r7, #27]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d01b      	beq.n	800960e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	7d1b      	ldrb	r3, [r3, #20]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <tcp_process+0xa8>
 80095de:	4b7c      	ldr	r3, [pc, #496]	; (80097d0 <tcp_process+0x28c>)
 80095e0:	f44f 724e 	mov.w	r2, #824	; 0x338
 80095e4:	4980      	ldr	r1, [pc, #512]	; (80097e8 <tcp_process+0x2a4>)
 80095e6:	487c      	ldr	r0, [pc, #496]	; (80097d8 <tcp_process+0x294>)
 80095e8:	f006 facc 	bl	800fb84 <iprintf>
      recv_flags |= TF_RESET;
 80095ec:	4b7f      	ldr	r3, [pc, #508]	; (80097ec <tcp_process+0x2a8>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	f043 0308 	orr.w	r3, r3, #8
 80095f4:	b2da      	uxtb	r2, r3
 80095f6:	4b7d      	ldr	r3, [pc, #500]	; (80097ec <tcp_process+0x2a8>)
 80095f8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	8b5b      	ldrh	r3, [r3, #26]
 80095fe:	f023 0301 	bic.w	r3, r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8009608:	f06f 030d 	mvn.w	r3, #13
 800960c:	e37a      	b.n	8009d04 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800960e:	2300      	movs	r3, #0
 8009610:	e378      	b.n	8009d04 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8009612:	4b72      	ldr	r3, [pc, #456]	; (80097dc <tcp_process+0x298>)
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	f003 0302 	and.w	r3, r3, #2
 800961a:	2b00      	cmp	r3, #0
 800961c:	d010      	beq.n	8009640 <tcp_process+0xfc>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7d1b      	ldrb	r3, [r3, #20]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d00c      	beq.n	8009640 <tcp_process+0xfc>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	7d1b      	ldrb	r3, [r3, #20]
 800962a:	2b03      	cmp	r3, #3
 800962c:	d008      	beq.n	8009640 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	8b5b      	ldrh	r3, [r3, #26]
 8009632:	f043 0302 	orr.w	r3, r3, #2
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800963c:	2300      	movs	r3, #0
 800963e:	e361      	b.n	8009d04 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8b5b      	ldrh	r3, [r3, #26]
 8009644:	f003 0310 	and.w	r3, r3, #16
 8009648:	2b00      	cmp	r3, #0
 800964a:	d103      	bne.n	8009654 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800964c:	4b68      	ldr	r3, [pc, #416]	; (80097f0 <tcp_process+0x2ac>)
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f001 fc2f 	bl	800aec8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7d1b      	ldrb	r3, [r3, #20]
 800966e:	3b02      	subs	r3, #2
 8009670:	2b07      	cmp	r3, #7
 8009672:	f200 8337 	bhi.w	8009ce4 <tcp_process+0x7a0>
 8009676:	a201      	add	r2, pc, #4	; (adr r2, 800967c <tcp_process+0x138>)
 8009678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800967c:	0800969d 	.word	0x0800969d
 8009680:	080098cd 	.word	0x080098cd
 8009684:	08009a45 	.word	0x08009a45
 8009688:	08009a6f 	.word	0x08009a6f
 800968c:	08009b93 	.word	0x08009b93
 8009690:	08009a45 	.word	0x08009a45
 8009694:	08009c1f 	.word	0x08009c1f
 8009698:	08009caf 	.word	0x08009caf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800969c:	4b4f      	ldr	r3, [pc, #316]	; (80097dc <tcp_process+0x298>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	f003 0310 	and.w	r3, r3, #16
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80e4 	beq.w	8009872 <tcp_process+0x32e>
 80096aa:	4b4c      	ldr	r3, [pc, #304]	; (80097dc <tcp_process+0x298>)
 80096ac:	781b      	ldrb	r3, [r3, #0]
 80096ae:	f003 0302 	and.w	r3, r3, #2
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	f000 80dd 	beq.w	8009872 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	4b48      	ldr	r3, [pc, #288]	; (80097e0 <tcp_process+0x29c>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	f040 80d5 	bne.w	8009872 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80096c8:	4b46      	ldr	r3, [pc, #280]	; (80097e4 <tcp_process+0x2a0>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	1c5a      	adds	r2, r3, #1
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80096da:	4b41      	ldr	r3, [pc, #260]	; (80097e0 <tcp_process+0x29c>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80096e2:	4b44      	ldr	r3, [pc, #272]	; (80097f4 <tcp_process+0x2b0>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	89db      	ldrh	r3, [r3, #14]
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80096fc:	4b39      	ldr	r3, [pc, #228]	; (80097e4 <tcp_process+0x2a0>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	1e5a      	subs	r2, r3, #1
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2204      	movs	r2, #4
 800970a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	4618      	mov	r0, r3
 8009716:	f004 ff6f 	bl	800e5f8 <ip4_route>
 800971a:	4601      	mov	r1, r0
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	3304      	adds	r3, #4
 8009720:	461a      	mov	r2, r3
 8009722:	4620      	mov	r0, r4
 8009724:	f7ff f88c 	bl	8008840 <tcp_eff_send_mss_netif>
 8009728:	4603      	mov	r3, r0
 800972a:	461a      	mov	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009734:	009a      	lsls	r2, r3, #2
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800973a:	005b      	lsls	r3, r3, #1
 800973c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009740:	428b      	cmp	r3, r1
 8009742:	bf38      	it	cc
 8009744:	460b      	movcc	r3, r1
 8009746:	429a      	cmp	r2, r3
 8009748:	d204      	bcs.n	8009754 <tcp_process+0x210>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800974e:	009b      	lsls	r3, r3, #2
 8009750:	b29b      	uxth	r3, r3
 8009752:	e00d      	b.n	8009770 <tcp_process+0x22c>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009758:	005b      	lsls	r3, r3, #1
 800975a:	f241 121c 	movw	r2, #4380	; 0x111c
 800975e:	4293      	cmp	r3, r2
 8009760:	d904      	bls.n	800976c <tcp_process+0x228>
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009766:	005b      	lsls	r3, r3, #1
 8009768:	b29b      	uxth	r3, r3
 800976a:	e001      	b.n	8009770 <tcp_process+0x22c>
 800976c:	f241 131c 	movw	r3, #4380	; 0x111c
 8009770:	687a      	ldr	r2, [r7, #4]
 8009772:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800977c:	2b00      	cmp	r3, #0
 800977e:	d106      	bne.n	800978e <tcp_process+0x24a>
 8009780:	4b13      	ldr	r3, [pc, #76]	; (80097d0 <tcp_process+0x28c>)
 8009782:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8009786:	491c      	ldr	r1, [pc, #112]	; (80097f8 <tcp_process+0x2b4>)
 8009788:	4813      	ldr	r0, [pc, #76]	; (80097d8 <tcp_process+0x294>)
 800978a:	f006 f9fb 	bl	800fb84 <iprintf>
        --pcb->snd_queuelen;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009794:	3b01      	subs	r3, #1
 8009796:	b29a      	uxth	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d12a      	bne.n	8009800 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097ae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d106      	bne.n	80097c4 <tcp_process+0x280>
 80097b6:	4b06      	ldr	r3, [pc, #24]	; (80097d0 <tcp_process+0x28c>)
 80097b8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80097bc:	490f      	ldr	r1, [pc, #60]	; (80097fc <tcp_process+0x2b8>)
 80097be:	4806      	ldr	r0, [pc, #24]	; (80097d8 <tcp_process+0x294>)
 80097c0:	f006 f9e0 	bl	800fb84 <iprintf>
          pcb->unsent = rseg->next;
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80097cc:	e01c      	b.n	8009808 <tcp_process+0x2c4>
 80097ce:	bf00      	nop
 80097d0:	08011f04 	.word	0x08011f04
 80097d4:	0801213c 	.word	0x0801213c
 80097d8:	08011f50 	.word	0x08011f50
 80097dc:	20008188 	.word	0x20008188
 80097e0:	20008180 	.word	0x20008180
 80097e4:	2000817c 	.word	0x2000817c
 80097e8:	08012158 	.word	0x08012158
 80097ec:	20008189 	.word	0x20008189
 80097f0:	20008144 	.word	0x20008144
 80097f4:	2000816c 	.word	0x2000816c
 80097f8:	08012178 	.word	0x08012178
 80097fc:	08012190 	.word	0x08012190
        } else {
          pcb->unacked = rseg->next;
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8009808:	69f8      	ldr	r0, [r7, #28]
 800980a:	f7fe fc3c 	bl	8008086 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009812:	2b00      	cmp	r3, #0
 8009814:	d104      	bne.n	8009820 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800981c:	861a      	strh	r2, [r3, #48]	; 0x30
 800981e:	e006      	b.n	800982e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00a      	beq.n	800984e <tcp_process+0x30a>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	6910      	ldr	r0, [r2, #16]
 8009842:	2200      	movs	r2, #0
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	4798      	blx	r3
 8009848:	4603      	mov	r3, r0
 800984a:	76bb      	strb	r3, [r7, #26]
 800984c:	e001      	b.n	8009852 <tcp_process+0x30e>
 800984e:	2300      	movs	r3, #0
 8009850:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8009852:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009856:	f113 0f0d 	cmn.w	r3, #13
 800985a:	d102      	bne.n	8009862 <tcp_process+0x31e>
          return ERR_ABRT;
 800985c:	f06f 030c 	mvn.w	r3, #12
 8009860:	e250      	b.n	8009d04 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8b5b      	ldrh	r3, [r3, #26]
 8009866:	f043 0302 	orr.w	r3, r3, #2
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8009870:	e23a      	b.n	8009ce8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8009872:	4b98      	ldr	r3, [pc, #608]	; (8009ad4 <tcp_process+0x590>)
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	f003 0310 	and.w	r3, r3, #16
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8234 	beq.w	8009ce8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009880:	4b95      	ldr	r3, [pc, #596]	; (8009ad8 <tcp_process+0x594>)
 8009882:	6819      	ldr	r1, [r3, #0]
 8009884:	4b95      	ldr	r3, [pc, #596]	; (8009adc <tcp_process+0x598>)
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	4b95      	ldr	r3, [pc, #596]	; (8009ae0 <tcp_process+0x59c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009890:	4b94      	ldr	r3, [pc, #592]	; (8009ae4 <tcp_process+0x5a0>)
 8009892:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009894:	885b      	ldrh	r3, [r3, #2]
 8009896:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009898:	4a92      	ldr	r2, [pc, #584]	; (8009ae4 <tcp_process+0x5a0>)
 800989a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800989c:	8812      	ldrh	r2, [r2, #0]
 800989e:	b292      	uxth	r2, r2
 80098a0:	9202      	str	r2, [sp, #8]
 80098a2:	9301      	str	r3, [sp, #4]
 80098a4:	4b90      	ldr	r3, [pc, #576]	; (8009ae8 <tcp_process+0x5a4>)
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	4b90      	ldr	r3, [pc, #576]	; (8009aec <tcp_process+0x5a8>)
 80098aa:	4602      	mov	r2, r0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f003 f8dd 	bl	800ca6c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098b8:	2b05      	cmp	r3, #5
 80098ba:	f200 8215 	bhi.w	8009ce8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f002 fea7 	bl	800c618 <tcp_rexmit_rto>
      break;
 80098ca:	e20d      	b.n	8009ce8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80098cc:	4b81      	ldr	r3, [pc, #516]	; (8009ad4 <tcp_process+0x590>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	f000 80a1 	beq.w	8009a1c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80098da:	4b7f      	ldr	r3, [pc, #508]	; (8009ad8 <tcp_process+0x594>)
 80098dc:	681a      	ldr	r2, [r3, #0]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	3b01      	subs	r3, #1
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	db7e      	blt.n	80099e8 <tcp_process+0x4a4>
 80098ea:	4b7b      	ldr	r3, [pc, #492]	; (8009ad8 <tcp_process+0x594>)
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dc77      	bgt.n	80099e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2204      	movs	r2, #4
 80098fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8009906:	23fa      	movs	r3, #250	; 0xfa
 8009908:	76bb      	strb	r3, [r7, #26]
 800990a:	e01d      	b.n	8009948 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009910:	699b      	ldr	r3, [r3, #24]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d106      	bne.n	8009924 <tcp_process+0x3e0>
 8009916:	4b76      	ldr	r3, [pc, #472]	; (8009af0 <tcp_process+0x5ac>)
 8009918:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800991c:	4975      	ldr	r1, [pc, #468]	; (8009af4 <tcp_process+0x5b0>)
 800991e:	4876      	ldr	r0, [pc, #472]	; (8009af8 <tcp_process+0x5b4>)
 8009920:	f006 f930 	bl	800fb84 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00a      	beq.n	8009944 <tcp_process+0x400>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	6910      	ldr	r0, [r2, #16]
 8009938:	2200      	movs	r2, #0
 800993a:	6879      	ldr	r1, [r7, #4]
 800993c:	4798      	blx	r3
 800993e:	4603      	mov	r3, r0
 8009940:	76bb      	strb	r3, [r7, #26]
 8009942:	e001      	b.n	8009948 <tcp_process+0x404>
 8009944:	23f0      	movs	r3, #240	; 0xf0
 8009946:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8009948:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00a      	beq.n	8009966 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8009950:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8009954:	f113 0f0d 	cmn.w	r3, #13
 8009958:	d002      	beq.n	8009960 <tcp_process+0x41c>
              tcp_abort(pcb);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7fd fcee 	bl	800733c <tcp_abort>
            }
            return ERR_ABRT;
 8009960:	f06f 030c 	mvn.w	r3, #12
 8009964:	e1ce      	b.n	8009d04 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fae0 	bl	8009f2c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800996c:	4b63      	ldr	r3, [pc, #396]	; (8009afc <tcp_process+0x5b8>)
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d005      	beq.n	8009980 <tcp_process+0x43c>
            recv_acked--;
 8009974:	4b61      	ldr	r3, [pc, #388]	; (8009afc <tcp_process+0x5b8>)
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	3b01      	subs	r3, #1
 800997a:	b29a      	uxth	r2, r3
 800997c:	4b5f      	ldr	r3, [pc, #380]	; (8009afc <tcp_process+0x5b8>)
 800997e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009984:	009a      	lsls	r2, r3, #2
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800998a:	005b      	lsls	r3, r3, #1
 800998c:	f241 111c 	movw	r1, #4380	; 0x111c
 8009990:	428b      	cmp	r3, r1
 8009992:	bf38      	it	cc
 8009994:	460b      	movcc	r3, r1
 8009996:	429a      	cmp	r2, r3
 8009998:	d204      	bcs.n	80099a4 <tcp_process+0x460>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	e00d      	b.n	80099c0 <tcp_process+0x47c>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d904      	bls.n	80099bc <tcp_process+0x478>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	e001      	b.n	80099c0 <tcp_process+0x47c>
 80099bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80099c6:	4b4e      	ldr	r3, [pc, #312]	; (8009b00 <tcp_process+0x5bc>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	f003 0320 	and.w	r3, r3, #32
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d037      	beq.n	8009a42 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	8b5b      	ldrh	r3, [r3, #26]
 80099d6:	f043 0302 	orr.w	r3, r3, #2
 80099da:	b29a      	uxth	r2, r3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2207      	movs	r2, #7
 80099e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80099e6:	e02c      	b.n	8009a42 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099e8:	4b3b      	ldr	r3, [pc, #236]	; (8009ad8 <tcp_process+0x594>)
 80099ea:	6819      	ldr	r1, [r3, #0]
 80099ec:	4b3b      	ldr	r3, [pc, #236]	; (8009adc <tcp_process+0x598>)
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b3b      	ldr	r3, [pc, #236]	; (8009ae0 <tcp_process+0x59c>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80099f8:	4b3a      	ldr	r3, [pc, #232]	; (8009ae4 <tcp_process+0x5a0>)
 80099fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80099fc:	885b      	ldrh	r3, [r3, #2]
 80099fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009a00:	4a38      	ldr	r2, [pc, #224]	; (8009ae4 <tcp_process+0x5a0>)
 8009a02:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8009a04:	8812      	ldrh	r2, [r2, #0]
 8009a06:	b292      	uxth	r2, r2
 8009a08:	9202      	str	r2, [sp, #8]
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	4b36      	ldr	r3, [pc, #216]	; (8009ae8 <tcp_process+0x5a4>)
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	4b36      	ldr	r3, [pc, #216]	; (8009aec <tcp_process+0x5a8>)
 8009a12:	4602      	mov	r2, r0
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f003 f829 	bl	800ca6c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8009a1a:	e167      	b.n	8009cec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009a1c:	4b2d      	ldr	r3, [pc, #180]	; (8009ad4 <tcp_process+0x590>)
 8009a1e:	781b      	ldrb	r3, [r3, #0]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 8161 	beq.w	8009cec <tcp_process+0x7a8>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a2e:	1e5a      	subs	r2, r3, #1
 8009a30:	4b2b      	ldr	r3, [pc, #172]	; (8009ae0 <tcp_process+0x59c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	f040 8159 	bne.w	8009cec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f002 fe0e 	bl	800c65c <tcp_rexmit>
      break;
 8009a40:	e154      	b.n	8009cec <tcp_process+0x7a8>
 8009a42:	e153      	b.n	8009cec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fa71 	bl	8009f2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009a4a:	4b2d      	ldr	r3, [pc, #180]	; (8009b00 <tcp_process+0x5bc>)
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	f003 0320 	and.w	r3, r3, #32
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f000 814c 	beq.w	8009cf0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	8b5b      	ldrh	r3, [r3, #26]
 8009a5c:	f043 0302 	orr.w	r3, r3, #2
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2207      	movs	r2, #7
 8009a6a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8009a6c:	e140      	b.n	8009cf0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 fa5c 	bl	8009f2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009a74:	4b22      	ldr	r3, [pc, #136]	; (8009b00 <tcp_process+0x5bc>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	f003 0320 	and.w	r3, r3, #32
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d071      	beq.n	8009b64 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a80:	4b14      	ldr	r3, [pc, #80]	; (8009ad4 <tcp_process+0x590>)
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	f003 0310 	and.w	r3, r3, #16
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d060      	beq.n	8009b4e <tcp_process+0x60a>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009a90:	4b11      	ldr	r3, [pc, #68]	; (8009ad8 <tcp_process+0x594>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d15a      	bne.n	8009b4e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d156      	bne.n	8009b4e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	8b5b      	ldrh	r3, [r3, #26]
 8009aa4:	f043 0302 	orr.w	r3, r3, #2
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7fe fdbc 	bl	800862c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8009ab4:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <tcp_process+0x5c0>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d105      	bne.n	8009aca <tcp_process+0x586>
 8009abe:	4b11      	ldr	r3, [pc, #68]	; (8009b04 <tcp_process+0x5c0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	4a0f      	ldr	r2, [pc, #60]	; (8009b04 <tcp_process+0x5c0>)
 8009ac6:	6013      	str	r3, [r2, #0]
 8009ac8:	e02e      	b.n	8009b28 <tcp_process+0x5e4>
 8009aca:	4b0e      	ldr	r3, [pc, #56]	; (8009b04 <tcp_process+0x5c0>)
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	e027      	b.n	8009b22 <tcp_process+0x5de>
 8009ad2:	bf00      	nop
 8009ad4:	20008188 	.word	0x20008188
 8009ad8:	20008180 	.word	0x20008180
 8009adc:	20008186 	.word	0x20008186
 8009ae0:	2000817c 	.word	0x2000817c
 8009ae4:	2000816c 	.word	0x2000816c
 8009ae8:	20005238 	.word	0x20005238
 8009aec:	2000523c 	.word	0x2000523c
 8009af0:	08011f04 	.word	0x08011f04
 8009af4:	080121a4 	.word	0x080121a4
 8009af8:	08011f50 	.word	0x08011f50
 8009afc:	20008184 	.word	0x20008184
 8009b00:	20008189 	.word	0x20008189
 8009b04:	20008150 	.word	0x20008150
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d104      	bne.n	8009b1c <tcp_process+0x5d8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	60da      	str	r2, [r3, #12]
 8009b1a:	e005      	b.n	8009b28 <tcp_process+0x5e4>
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1ef      	bne.n	8009b08 <tcp_process+0x5c4>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	60da      	str	r2, [r3, #12]
 8009b2e:	4b77      	ldr	r3, [pc, #476]	; (8009d0c <tcp_process+0x7c8>)
 8009b30:	2201      	movs	r2, #1
 8009b32:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	220a      	movs	r2, #10
 8009b38:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8009b3a:	4b75      	ldr	r3, [pc, #468]	; (8009d10 <tcp_process+0x7cc>)
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	60da      	str	r2, [r3, #12]
 8009b42:	4a73      	ldr	r2, [pc, #460]	; (8009d10 <tcp_process+0x7cc>)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6013      	str	r3, [r2, #0]
 8009b48:	f003 f952 	bl	800cdf0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8009b4c:	e0d2      	b.n	8009cf4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	8b5b      	ldrh	r3, [r3, #26]
 8009b52:	f043 0302 	orr.w	r3, r3, #2
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2208      	movs	r2, #8
 8009b60:	751a      	strb	r2, [r3, #20]
      break;
 8009b62:	e0c7      	b.n	8009cf4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b64:	4b6b      	ldr	r3, [pc, #428]	; (8009d14 <tcp_process+0x7d0>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80c1 	beq.w	8009cf4 <tcp_process+0x7b0>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009b76:	4b68      	ldr	r3, [pc, #416]	; (8009d18 <tcp_process+0x7d4>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	f040 80ba 	bne.w	8009cf4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 80b5 	bne.w	8009cf4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2206      	movs	r2, #6
 8009b8e:	751a      	strb	r2, [r3, #20]
      break;
 8009b90:	e0b0      	b.n	8009cf4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f9ca 	bl	8009f2c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8009b98:	4b60      	ldr	r3, [pc, #384]	; (8009d1c <tcp_process+0x7d8>)
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	f003 0320 	and.w	r3, r3, #32
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 80a9 	beq.w	8009cf8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	8b5b      	ldrh	r3, [r3, #26]
 8009baa:	f043 0302 	orr.w	r3, r3, #2
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7fe fd39 	bl	800862c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009bba:	4b59      	ldr	r3, [pc, #356]	; (8009d20 <tcp_process+0x7dc>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d105      	bne.n	8009bd0 <tcp_process+0x68c>
 8009bc4:	4b56      	ldr	r3, [pc, #344]	; (8009d20 <tcp_process+0x7dc>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	4a55      	ldr	r2, [pc, #340]	; (8009d20 <tcp_process+0x7dc>)
 8009bcc:	6013      	str	r3, [r2, #0]
 8009bce:	e013      	b.n	8009bf8 <tcp_process+0x6b4>
 8009bd0:	4b53      	ldr	r3, [pc, #332]	; (8009d20 <tcp_process+0x7dc>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	613b      	str	r3, [r7, #16]
 8009bd6:	e00c      	b.n	8009bf2 <tcp_process+0x6ae>
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d104      	bne.n	8009bec <tcp_process+0x6a8>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	60da      	str	r2, [r3, #12]
 8009bea:	e005      	b.n	8009bf8 <tcp_process+0x6b4>
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1ef      	bne.n	8009bd8 <tcp_process+0x694>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	60da      	str	r2, [r3, #12]
 8009bfe:	4b43      	ldr	r3, [pc, #268]	; (8009d0c <tcp_process+0x7c8>)
 8009c00:	2201      	movs	r2, #1
 8009c02:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	220a      	movs	r2, #10
 8009c08:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c0a:	4b41      	ldr	r3, [pc, #260]	; (8009d10 <tcp_process+0x7cc>)
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	60da      	str	r2, [r3, #12]
 8009c12:	4a3f      	ldr	r2, [pc, #252]	; (8009d10 <tcp_process+0x7cc>)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6013      	str	r3, [r2, #0]
 8009c18:	f003 f8ea 	bl	800cdf0 <tcp_timer_needed>
      }
      break;
 8009c1c:	e06c      	b.n	8009cf8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f984 	bl	8009f2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009c24:	4b3b      	ldr	r3, [pc, #236]	; (8009d14 <tcp_process+0x7d0>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	f003 0310 	and.w	r3, r3, #16
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d065      	beq.n	8009cfc <tcp_process+0x7b8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009c34:	4b38      	ldr	r3, [pc, #224]	; (8009d18 <tcp_process+0x7d4>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d15f      	bne.n	8009cfc <tcp_process+0x7b8>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d15b      	bne.n	8009cfc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f7fe fcf1 	bl	800862c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009c4a:	4b35      	ldr	r3, [pc, #212]	; (8009d20 <tcp_process+0x7dc>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	687a      	ldr	r2, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d105      	bne.n	8009c60 <tcp_process+0x71c>
 8009c54:	4b32      	ldr	r3, [pc, #200]	; (8009d20 <tcp_process+0x7dc>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	4a31      	ldr	r2, [pc, #196]	; (8009d20 <tcp_process+0x7dc>)
 8009c5c:	6013      	str	r3, [r2, #0]
 8009c5e:	e013      	b.n	8009c88 <tcp_process+0x744>
 8009c60:	4b2f      	ldr	r3, [pc, #188]	; (8009d20 <tcp_process+0x7dc>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	60fb      	str	r3, [r7, #12]
 8009c66:	e00c      	b.n	8009c82 <tcp_process+0x73e>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d104      	bne.n	8009c7c <tcp_process+0x738>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	60da      	str	r2, [r3, #12]
 8009c7a:	e005      	b.n	8009c88 <tcp_process+0x744>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1ef      	bne.n	8009c68 <tcp_process+0x724>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	60da      	str	r2, [r3, #12]
 8009c8e:	4b1f      	ldr	r3, [pc, #124]	; (8009d0c <tcp_process+0x7c8>)
 8009c90:	2201      	movs	r2, #1
 8009c92:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	220a      	movs	r2, #10
 8009c98:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8009c9a:	4b1d      	ldr	r3, [pc, #116]	; (8009d10 <tcp_process+0x7cc>)
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60da      	str	r2, [r3, #12]
 8009ca2:	4a1b      	ldr	r2, [pc, #108]	; (8009d10 <tcp_process+0x7cc>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	f003 f8a2 	bl	800cdf0 <tcp_timer_needed>
      }
      break;
 8009cac:	e026      	b.n	8009cfc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f93c 	bl	8009f2c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009cb4:	4b17      	ldr	r3, [pc, #92]	; (8009d14 <tcp_process+0x7d0>)
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	f003 0310 	and.w	r3, r3, #16
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d01f      	beq.n	8009d00 <tcp_process+0x7bc>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009cc4:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <tcp_process+0x7d4>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	d119      	bne.n	8009d00 <tcp_process+0x7bc>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d115      	bne.n	8009d00 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8009cd4:	4b11      	ldr	r3, [pc, #68]	; (8009d1c <tcp_process+0x7d8>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	f043 0310 	orr.w	r3, r3, #16
 8009cdc:	b2da      	uxtb	r2, r3
 8009cde:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <tcp_process+0x7d8>)
 8009ce0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8009ce2:	e00d      	b.n	8009d00 <tcp_process+0x7bc>
    default:
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e00c      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e00a      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009cec:	bf00      	nop
 8009cee:	e008      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009cf0:	bf00      	nop
 8009cf2:	e006      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009cf4:	bf00      	nop
 8009cf6:	e004      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009cf8:	bf00      	nop
 8009cfa:	e002      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009cfc:	bf00      	nop
 8009cfe:	e000      	b.n	8009d02 <tcp_process+0x7be>
      break;
 8009d00:	bf00      	nop
  }
  return ERR_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3724      	adds	r7, #36	; 0x24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd90      	pop	{r4, r7, pc}
 8009d0c:	20008158 	.word	0x20008158
 8009d10:	20008154 	.word	0x20008154
 8009d14:	20008188 	.word	0x20008188
 8009d18:	20008180 	.word	0x20008180
 8009d1c:	20008189 	.word	0x20008189
 8009d20:	20008150 	.word	0x20008150

08009d24 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8009d24:	b590      	push	{r4, r7, lr}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d106      	bne.n	8009d42 <tcp_oos_insert_segment+0x1e>
 8009d34:	4b3b      	ldr	r3, [pc, #236]	; (8009e24 <tcp_oos_insert_segment+0x100>)
 8009d36:	f240 421f 	movw	r2, #1055	; 0x41f
 8009d3a:	493b      	ldr	r1, [pc, #236]	; (8009e28 <tcp_oos_insert_segment+0x104>)
 8009d3c:	483b      	ldr	r0, [pc, #236]	; (8009e2c <tcp_oos_insert_segment+0x108>)
 8009d3e:	f005 ff21 	bl	800fb84 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	899b      	ldrh	r3, [r3, #12]
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7fb f948 	bl	8004fe0 <lwip_htons>
 8009d50:	4603      	mov	r3, r0
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d028      	beq.n	8009dae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8009d5c:	6838      	ldr	r0, [r7, #0]
 8009d5e:	f7fe f97d 	bl	800805c <tcp_segs_free>
    next = NULL;
 8009d62:	2300      	movs	r3, #0
 8009d64:	603b      	str	r3, [r7, #0]
 8009d66:	e056      	b.n	8009e16 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	68db      	ldr	r3, [r3, #12]
 8009d6c:	899b      	ldrh	r3, [r3, #12]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fb f935 	bl	8004fe0 <lwip_htons>
 8009d76:	4603      	mov	r3, r0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	f003 0301 	and.w	r3, r3, #1
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00d      	beq.n	8009d9e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	899b      	ldrh	r3, [r3, #12]
 8009d88:	b29c      	uxth	r4, r3
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	f7fb f928 	bl	8004fe0 <lwip_htons>
 8009d90:	4603      	mov	r3, r0
 8009d92:	461a      	mov	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	4322      	orrs	r2, r4
 8009d9a:	b292      	uxth	r2, r2
 8009d9c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7fe f96c 	bl	8008086 <tcp_seg_free>
    while (next &&
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00e      	beq.n	8009dd2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	891b      	ldrh	r3, [r3, #8]
 8009db8:	461a      	mov	r2, r3
 8009dba:	4b1d      	ldr	r3, [pc, #116]	; (8009e30 <tcp_oos_insert_segment+0x10c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	441a      	add	r2, r3
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	685b      	ldr	r3, [r3, #4]
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	8909      	ldrh	r1, [r1, #8]
 8009dca:	440b      	add	r3, r1
 8009dcc:	1ad3      	subs	r3, r2, r3
    while (next &&
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	daca      	bge.n	8009d68 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01e      	beq.n	8009e16 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	891b      	ldrh	r3, [r3, #8]
 8009ddc:	461a      	mov	r2, r3
 8009dde:	4b14      	ldr	r3, [pc, #80]	; (8009e30 <tcp_oos_insert_segment+0x10c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	441a      	add	r2, r3
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	68db      	ldr	r3, [r3, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	1ad3      	subs	r3, r2, r3
    if (next &&
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	dd12      	ble.n	8009e16 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	68db      	ldr	r3, [r3, #12]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	4b0d      	ldr	r3, [pc, #52]	; (8009e30 <tcp_oos_insert_segment+0x10c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	891b      	ldrh	r3, [r3, #8]
 8009e0e:	4619      	mov	r1, r3
 8009e10:	4610      	mov	r0, r2
 8009e12:	f7fc fb75 	bl	8006500 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	683a      	ldr	r2, [r7, #0]
 8009e1a:	601a      	str	r2, [r3, #0]
}
 8009e1c:	bf00      	nop
 8009e1e:	3714      	adds	r7, #20
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd90      	pop	{r4, r7, pc}
 8009e24:	08011f04 	.word	0x08011f04
 8009e28:	080121c4 	.word	0x080121c4
 8009e2c:	08011f50 	.word	0x08011f50
 8009e30:	2000817c 	.word	0x2000817c

08009e34 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8009e34:	b5b0      	push	{r4, r5, r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8009e42:	e03e      	b.n	8009ec2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fc fd62 	bl	800691c <pbuf_clen>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009e62:	8a7a      	ldrh	r2, [r7, #18]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d906      	bls.n	8009e76 <tcp_free_acked_segments+0x42>
 8009e68:	4b2a      	ldr	r3, [pc, #168]	; (8009f14 <tcp_free_acked_segments+0xe0>)
 8009e6a:	f240 4257 	movw	r2, #1111	; 0x457
 8009e6e:	492a      	ldr	r1, [pc, #168]	; (8009f18 <tcp_free_acked_segments+0xe4>)
 8009e70:	482a      	ldr	r0, [pc, #168]	; (8009f1c <tcp_free_acked_segments+0xe8>)
 8009e72:	f005 fe87 	bl	800fb84 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8009e7c:	8a7b      	ldrh	r3, [r7, #18]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	891a      	ldrh	r2, [r3, #8]
 8009e8c:	4b24      	ldr	r3, [pc, #144]	; (8009f20 <tcp_free_acked_segments+0xec>)
 8009e8e:	881b      	ldrh	r3, [r3, #0]
 8009e90:	4413      	add	r3, r2
 8009e92:	b29a      	uxth	r2, r3
 8009e94:	4b22      	ldr	r3, [pc, #136]	; (8009f20 <tcp_free_acked_segments+0xec>)
 8009e96:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8009e98:	6978      	ldr	r0, [r7, #20]
 8009e9a:	f7fe f8f4 	bl	8008086 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00c      	beq.n	8009ec2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d109      	bne.n	8009ec2 <tcp_free_acked_segments+0x8e>
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <tcp_free_acked_segments+0x8e>
 8009eb4:	4b17      	ldr	r3, [pc, #92]	; (8009f14 <tcp_free_acked_segments+0xe0>)
 8009eb6:	f240 4261 	movw	r2, #1121	; 0x461
 8009eba:	491a      	ldr	r1, [pc, #104]	; (8009f24 <tcp_free_acked_segments+0xf0>)
 8009ebc:	4817      	ldr	r0, [pc, #92]	; (8009f1c <tcp_free_acked_segments+0xe8>)
 8009ebe:	f005 fe61 	bl	800fb84 <iprintf>
  while (seg_list != NULL &&
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d020      	beq.n	8009f0a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fb f89b 	bl	800500a <lwip_htonl>
 8009ed4:	4604      	mov	r4, r0
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	891b      	ldrh	r3, [r3, #8]
 8009eda:	461d      	mov	r5, r3
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	68db      	ldr	r3, [r3, #12]
 8009ee0:	899b      	ldrh	r3, [r3, #12]
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fb f87b 	bl	8004fe0 <lwip_htons>
 8009eea:	4603      	mov	r3, r0
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <tcp_free_acked_segments+0xc6>
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e000      	b.n	8009efc <tcp_free_acked_segments+0xc8>
 8009efa:	2300      	movs	r3, #0
 8009efc:	442b      	add	r3, r5
 8009efe:	18e2      	adds	r2, r4, r3
 8009f00:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <tcp_free_acked_segments+0xf4>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	dd9c      	ble.n	8009e44 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bdb0      	pop	{r4, r5, r7, pc}
 8009f14:	08011f04 	.word	0x08011f04
 8009f18:	080121ec 	.word	0x080121ec
 8009f1c:	08011f50 	.word	0x08011f50
 8009f20:	20008184 	.word	0x20008184
 8009f24:	08012214 	.word	0x08012214
 8009f28:	20008180 	.word	0x20008180

08009f2c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8009f2c:	b5b0      	push	{r4, r5, r7, lr}
 8009f2e:	b094      	sub	sp, #80	; 0x50
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d106      	bne.n	8009f4c <tcp_receive+0x20>
 8009f3e:	4b91      	ldr	r3, [pc, #580]	; (800a184 <tcp_receive+0x258>)
 8009f40:	f240 427b 	movw	r2, #1147	; 0x47b
 8009f44:	4990      	ldr	r1, [pc, #576]	; (800a188 <tcp_receive+0x25c>)
 8009f46:	4891      	ldr	r0, [pc, #580]	; (800a18c <tcp_receive+0x260>)
 8009f48:	f005 fe1c 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	7d1b      	ldrb	r3, [r3, #20]
 8009f50:	2b03      	cmp	r3, #3
 8009f52:	d806      	bhi.n	8009f62 <tcp_receive+0x36>
 8009f54:	4b8b      	ldr	r3, [pc, #556]	; (800a184 <tcp_receive+0x258>)
 8009f56:	f240 427c 	movw	r2, #1148	; 0x47c
 8009f5a:	498d      	ldr	r1, [pc, #564]	; (800a190 <tcp_receive+0x264>)
 8009f5c:	488b      	ldr	r0, [pc, #556]	; (800a18c <tcp_receive+0x260>)
 8009f5e:	f005 fe11 	bl	800fb84 <iprintf>

  if (flags & TCP_ACK) {
 8009f62:	4b8c      	ldr	r3, [pc, #560]	; (800a194 <tcp_receive+0x268>)
 8009f64:	781b      	ldrb	r3, [r3, #0]
 8009f66:	f003 0310 	and.w	r3, r3, #16
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 8264 	beq.w	800a438 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f76:	461a      	mov	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7c:	4413      	add	r3, r2
 8009f7e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f84:	4b84      	ldr	r3, [pc, #528]	; (800a198 <tcp_receive+0x26c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	db1b      	blt.n	8009fc6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f92:	4b81      	ldr	r3, [pc, #516]	; (800a198 <tcp_receive+0x26c>)
 8009f94:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d106      	bne.n	8009fa8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f9e:	4b7f      	ldr	r3, [pc, #508]	; (800a19c <tcp_receive+0x270>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	db0e      	blt.n	8009fc6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009fac:	4b7b      	ldr	r3, [pc, #492]	; (800a19c <tcp_receive+0x270>)
 8009fae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d125      	bne.n	800a000 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009fb4:	4b7a      	ldr	r3, [pc, #488]	; (800a1a0 <tcp_receive+0x274>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	89db      	ldrh	r3, [r3, #14]
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d91c      	bls.n	800a000 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009fc6:	4b76      	ldr	r3, [pc, #472]	; (800a1a0 <tcp_receive+0x274>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	89db      	ldrh	r3, [r3, #14]
 8009fcc:	b29a      	uxth	r2, r3
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d205      	bcs.n	8009ff0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8009ff0:	4b69      	ldr	r3, [pc, #420]	; (800a198 <tcp_receive+0x26c>)
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009ff8:	4b68      	ldr	r3, [pc, #416]	; (800a19c <tcp_receive+0x270>)
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a000:	4b66      	ldr	r3, [pc, #408]	; (800a19c <tcp_receive+0x270>)
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dc58      	bgt.n	800a0c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800a00e:	4b65      	ldr	r3, [pc, #404]	; (800a1a4 <tcp_receive+0x278>)
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d14b      	bne.n	800a0ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800a020:	4413      	add	r3, r2
 800a022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a024:	429a      	cmp	r2, r3
 800a026:	d142      	bne.n	800a0ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a02e:	2b00      	cmp	r3, #0
 800a030:	db3d      	blt.n	800a0ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a036:	4b59      	ldr	r3, [pc, #356]	; (800a19c <tcp_receive+0x270>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d137      	bne.n	800a0ae <tcp_receive+0x182>
              found_dupack = 1;
 800a03e:	2301      	movs	r3, #1
 800a040:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a048:	2bff      	cmp	r3, #255	; 0xff
 800a04a:	d007      	beq.n	800a05c <tcp_receive+0x130>
                ++pcb->dupacks;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a052:	3301      	adds	r3, #1
 800a054:	b2da      	uxtb	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a062:	2b03      	cmp	r3, #3
 800a064:	d91b      	bls.n	800a09e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a070:	4413      	add	r3, r2
 800a072:	b29a      	uxth	r2, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a07a:	429a      	cmp	r2, r3
 800a07c:	d30a      	bcc.n	800a094 <tcp_receive+0x168>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a088:	4413      	add	r3, r2
 800a08a:	b29a      	uxth	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a092:	e004      	b.n	800a09e <tcp_receive+0x172>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a09a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d902      	bls.n	800a0ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f002 fb43 	bl	800c734 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800a0ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	f040 8161 	bne.w	800a378 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a0be:	e15b      	b.n	800a378 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a0c0:	4b36      	ldr	r3, [pc, #216]	; (800a19c <tcp_receive+0x270>)
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f2c0 814e 	blt.w	800a36e <tcp_receive+0x442>
 800a0d2:	4b32      	ldr	r3, [pc, #200]	; (800a19c <tcp_receive+0x270>)
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0da:	1ad3      	subs	r3, r2, r3
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	f300 8146 	bgt.w	800a36e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	8b5b      	ldrh	r3, [r3, #26]
 800a0e6:	f003 0304 	and.w	r3, r3, #4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d010      	beq.n	800a110 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	8b5b      	ldrh	r3, [r3, #26]
 800a0f2:	f023 0304 	bic.w	r3, r3, #4
 800a0f6:	b29a      	uxth	r2, r3
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a11e:	10db      	asrs	r3, r3, #3
 800a120:	b21b      	sxth	r3, r3
 800a122:	b29a      	uxth	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	4413      	add	r3, r2
 800a12e:	b29b      	uxth	r3, r3
 800a130:	b21a      	sxth	r2, r3
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a138:	4b18      	ldr	r3, [pc, #96]	; (800a19c <tcp_receive+0x270>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a142:	b29b      	uxth	r3, r3
 800a144:	1ad3      	subs	r3, r2, r3
 800a146:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800a150:	4b12      	ldr	r3, [pc, #72]	; (800a19c <tcp_receive+0x270>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	7d1b      	ldrb	r3, [r3, #20]
 800a15c:	2b03      	cmp	r3, #3
 800a15e:	f240 8097 	bls.w	800a290 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a16e:	429a      	cmp	r2, r3
 800a170:	d245      	bcs.n	800a1fe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	8b5b      	ldrh	r3, [r3, #26]
 800a176:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d014      	beq.n	800a1a8 <tcp_receive+0x27c>
 800a17e:	2301      	movs	r3, #1
 800a180:	e013      	b.n	800a1aa <tcp_receive+0x27e>
 800a182:	bf00      	nop
 800a184:	08011f04 	.word	0x08011f04
 800a188:	08012234 	.word	0x08012234
 800a18c:	08011f50 	.word	0x08011f50
 800a190:	08012250 	.word	0x08012250
 800a194:	20008188 	.word	0x20008188
 800a198:	2000817c 	.word	0x2000817c
 800a19c:	20008180 	.word	0x20008180
 800a1a0:	2000816c 	.word	0x2000816c
 800a1a4:	20008186 	.word	0x20008186
 800a1a8:	2302      	movs	r3, #2
 800a1aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a1ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800a1b2:	b29a      	uxth	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a1b8:	fb12 f303 	smulbb	r3, r2, r3
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a1c0:	4293      	cmp	r3, r2
 800a1c2:	bf28      	it	cs
 800a1c4:	4613      	movcs	r3, r2
 800a1c6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1d0:	4413      	add	r3, r2
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d309      	bcc.n	800a1f2 <tcp_receive+0x2c6>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a1e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a1e6:	4413      	add	r3, r2
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a1f0:	e04e      	b.n	800a290 <tcp_receive+0x364>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a1f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a1fc:	e048      	b.n	800a290 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a204:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a206:	4413      	add	r3, r2
 800a208:	b29a      	uxth	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a210:	429a      	cmp	r2, r3
 800a212:	d309      	bcc.n	800a228 <tcp_receive+0x2fc>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a21a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a21c:	4413      	add	r3, r2
 800a21e:	b29a      	uxth	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a226:	e004      	b.n	800a232 <tcp_receive+0x306>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a22e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a23e:	429a      	cmp	r2, r3
 800a240:	d326      	bcc.n	800a290 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	b29a      	uxth	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a262:	4413      	add	r3, r2
 800a264:	b29a      	uxth	r2, r3
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d30a      	bcc.n	800a286 <tcp_receive+0x35a>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a27a:	4413      	add	r3, r2
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800a284:	e004      	b.n	800a290 <tcp_receive+0x364>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a28c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a298:	4a98      	ldr	r2, [pc, #608]	; (800a4fc <tcp_receive+0x5d0>)
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7ff fdca 	bl	8009e34 <tcp_free_acked_segments>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ae:	4a94      	ldr	r2, [pc, #592]	; (800a500 <tcp_receive+0x5d4>)
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f7ff fdbf 	bl	8009e34 <tcp_free_acked_segments>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d104      	bne.n	800a2ce <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2ca:	861a      	strh	r2, [r3, #48]	; 0x30
 800a2cc:	e002      	b.n	800a2d4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d103      	bne.n	800a2ea <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a2f0:	4b84      	ldr	r3, [pc, #528]	; (800a504 <tcp_receive+0x5d8>)
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	b29a      	uxth	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	8b5b      	ldrh	r3, [r3, #26]
 800a302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a306:	2b00      	cmp	r3, #0
 800a308:	d035      	beq.n	800a376 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d118      	bne.n	800a344 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a316:	2b00      	cmp	r3, #0
 800a318:	d00c      	beq.n	800a334 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	4618      	mov	r0, r3
 800a328:	f7fa fe6f 	bl	800500a <lwip_htonl>
 800a32c:	4603      	mov	r3, r0
 800a32e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc20      	bgt.n	800a376 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	8b5b      	ldrh	r3, [r3, #26]
 800a338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a342:	e018      	b.n	800a376 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4618      	mov	r0, r3
 800a352:	f7fa fe5a 	bl	800500a <lwip_htonl>
 800a356:	4603      	mov	r3, r0
 800a358:	1ae3      	subs	r3, r4, r3
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	dc0b      	bgt.n	800a376 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	8b5b      	ldrh	r3, [r3, #26]
 800a362:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a366:	b29a      	uxth	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a36c:	e003      	b.n	800a376 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f002 fbce 	bl	800cb10 <tcp_send_empty_ack>
 800a374:	e000      	b.n	800a378 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a376:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d05b      	beq.n	800a438 <tcp_receive+0x50c>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a384:	4b60      	ldr	r3, [pc, #384]	; (800a508 <tcp_receive+0x5dc>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	1ad3      	subs	r3, r2, r3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	da54      	bge.n	800a438 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a38e:	4b5f      	ldr	r3, [pc, #380]	; (800a50c <tcp_receive+0x5e0>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	b29a      	uxth	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a398:	b29b      	uxth	r3, r3
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800a3a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3ac:	10db      	asrs	r3, r3, #3
 800a3ae:	b21b      	sxth	r3, r3
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a3c0:	b29a      	uxth	r2, r3
 800a3c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3c6:	4413      	add	r3, r2
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	b21a      	sxth	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800a3d0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	da05      	bge.n	800a3e4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800a3d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a3dc:	425b      	negs	r3, r3
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800a3e4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a3ee:	109b      	asrs	r3, r3, #2
 800a3f0:	b21b      	sxth	r3, r3
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a402:	b29a      	uxth	r2, r3
 800a404:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a408:	4413      	add	r3, r2
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	b21a      	sxth	r2, r3
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a418:	10db      	asrs	r3, r3, #3
 800a41a:	b21b      	sxth	r3, r3
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a424:	b29b      	uxth	r3, r3
 800a426:	4413      	add	r3, r2
 800a428:	b29b      	uxth	r3, r3
 800a42a:	b21a      	sxth	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a438:	4b35      	ldr	r3, [pc, #212]	; (800a510 <tcp_receive+0x5e4>)
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 84e2 	beq.w	800ae06 <tcp_receive+0xeda>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7d1b      	ldrb	r3, [r3, #20]
 800a446:	2b06      	cmp	r3, #6
 800a448:	f200 84dd 	bhi.w	800ae06 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a450:	4b30      	ldr	r3, [pc, #192]	; (800a514 <tcp_receive+0x5e8>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	3b01      	subs	r3, #1
 800a458:	2b00      	cmp	r3, #0
 800a45a:	f2c0 808f 	blt.w	800a57c <tcp_receive+0x650>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a462:	4b2b      	ldr	r3, [pc, #172]	; (800a510 <tcp_receive+0x5e4>)
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	4619      	mov	r1, r3
 800a468:	4b2a      	ldr	r3, [pc, #168]	; (800a514 <tcp_receive+0x5e8>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	440b      	add	r3, r1
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	3301      	adds	r3, #1
 800a472:	2b00      	cmp	r3, #0
 800a474:	f300 8082 	bgt.w	800a57c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800a478:	4b27      	ldr	r3, [pc, #156]	; (800a518 <tcp_receive+0x5ec>)
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a482:	4b24      	ldr	r3, [pc, #144]	; (800a514 <tcp_receive+0x5e8>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a48a:	4b23      	ldr	r3, [pc, #140]	; (800a518 <tcp_receive+0x5ec>)
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d106      	bne.n	800a4a0 <tcp_receive+0x574>
 800a492:	4b22      	ldr	r3, [pc, #136]	; (800a51c <tcp_receive+0x5f0>)
 800a494:	f240 5294 	movw	r2, #1428	; 0x594
 800a498:	4921      	ldr	r1, [pc, #132]	; (800a520 <tcp_receive+0x5f4>)
 800a49a:	4822      	ldr	r0, [pc, #136]	; (800a524 <tcp_receive+0x5f8>)
 800a49c:	f005 fb72 	bl	800fb84 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d906      	bls.n	800a4b8 <tcp_receive+0x58c>
 800a4aa:	4b1c      	ldr	r3, [pc, #112]	; (800a51c <tcp_receive+0x5f0>)
 800a4ac:	f240 5295 	movw	r2, #1429	; 0x595
 800a4b0:	491d      	ldr	r1, [pc, #116]	; (800a528 <tcp_receive+0x5fc>)
 800a4b2:	481c      	ldr	r0, [pc, #112]	; (800a524 <tcp_receive+0x5f8>)
 800a4b4:	f005 fb66 	bl	800fb84 <iprintf>
      off = (u16_t)off32;
 800a4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a4be:	4b16      	ldr	r3, [pc, #88]	; (800a518 <tcp_receive+0x5ec>)
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	891b      	ldrh	r3, [r3, #8]
 800a4c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d906      	bls.n	800a4da <tcp_receive+0x5ae>
 800a4cc:	4b13      	ldr	r3, [pc, #76]	; (800a51c <tcp_receive+0x5f0>)
 800a4ce:	f240 5297 	movw	r2, #1431	; 0x597
 800a4d2:	4916      	ldr	r1, [pc, #88]	; (800a52c <tcp_receive+0x600>)
 800a4d4:	4813      	ldr	r0, [pc, #76]	; (800a524 <tcp_receive+0x5f8>)
 800a4d6:	f005 fb55 	bl	800fb84 <iprintf>
      inseg.len -= off;
 800a4da:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <tcp_receive+0x5ec>)
 800a4dc:	891a      	ldrh	r2, [r3, #8]
 800a4de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <tcp_receive+0x5ec>)
 800a4e8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <tcp_receive+0x5ec>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	891a      	ldrh	r2, [r3, #8]
 800a4f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4f4:	1ad3      	subs	r3, r2, r3
 800a4f6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800a4f8:	e02a      	b.n	800a550 <tcp_receive+0x624>
 800a4fa:	bf00      	nop
 800a4fc:	0801226c 	.word	0x0801226c
 800a500:	08012274 	.word	0x08012274
 800a504:	20008184 	.word	0x20008184
 800a508:	20008180 	.word	0x20008180
 800a50c:	20008144 	.word	0x20008144
 800a510:	20008186 	.word	0x20008186
 800a514:	2000817c 	.word	0x2000817c
 800a518:	2000815c 	.word	0x2000815c
 800a51c:	08011f04 	.word	0x08011f04
 800a520:	0801227c 	.word	0x0801227c
 800a524:	08011f50 	.word	0x08011f50
 800a528:	0801228c 	.word	0x0801228c
 800a52c:	0801229c 	.word	0x0801229c
        off -= p->len;
 800a530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a532:	895b      	ldrh	r3, [r3, #10]
 800a534:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a538:	1ad3      	subs	r3, r2, r3
 800a53a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800a53e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a540:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a542:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800a544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a546:	2200      	movs	r2, #0
 800a548:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800a54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800a550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a552:	895b      	ldrh	r3, [r3, #10]
 800a554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a558:	429a      	cmp	r2, r3
 800a55a:	d8e9      	bhi.n	800a530 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800a55c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a560:	4619      	mov	r1, r3
 800a562:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a564:	f7fc f8cc 	bl	8006700 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56c:	4a91      	ldr	r2, [pc, #580]	; (800a7b4 <tcp_receive+0x888>)
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	4b91      	ldr	r3, [pc, #580]	; (800a7b8 <tcp_receive+0x88c>)
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	4a8f      	ldr	r2, [pc, #572]	; (800a7b4 <tcp_receive+0x888>)
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a57a:	e00d      	b.n	800a598 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a57c:	4b8d      	ldr	r3, [pc, #564]	; (800a7b4 <tcp_receive+0x888>)
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a584:	1ad3      	subs	r3, r2, r3
 800a586:	2b00      	cmp	r3, #0
 800a588:	da06      	bge.n	800a598 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	8b5b      	ldrh	r3, [r3, #26]
 800a58e:	f043 0302 	orr.w	r3, r3, #2
 800a592:	b29a      	uxth	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a598:	4b86      	ldr	r3, [pc, #536]	; (800a7b4 <tcp_receive+0x888>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a0:	1ad3      	subs	r3, r2, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f2c0 842a 	blt.w	800adfc <tcp_receive+0xed0>
 800a5a8:	4b82      	ldr	r3, [pc, #520]	; (800a7b4 <tcp_receive+0x888>)
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a5b4:	440b      	add	r3, r1
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f300 841e 	bgt.w	800adfc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5c4:	4b7b      	ldr	r3, [pc, #492]	; (800a7b4 <tcp_receive+0x888>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	f040 829a 	bne.w	800ab02 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800a5ce:	4b7a      	ldr	r3, [pc, #488]	; (800a7b8 <tcp_receive+0x88c>)
 800a5d0:	891c      	ldrh	r4, [r3, #8]
 800a5d2:	4b79      	ldr	r3, [pc, #484]	; (800a7b8 <tcp_receive+0x88c>)
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	899b      	ldrh	r3, [r3, #12]
 800a5d8:	b29b      	uxth	r3, r3
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fa fd00 	bl	8004fe0 <lwip_htons>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d001      	beq.n	800a5f0 <tcp_receive+0x6c4>
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e000      	b.n	800a5f2 <tcp_receive+0x6c6>
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	4423      	add	r3, r4
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	4b71      	ldr	r3, [pc, #452]	; (800a7bc <tcp_receive+0x890>)
 800a5f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a5fe:	4b6f      	ldr	r3, [pc, #444]	; (800a7bc <tcp_receive+0x890>)
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	429a      	cmp	r2, r3
 800a604:	d275      	bcs.n	800a6f2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a606:	4b6c      	ldr	r3, [pc, #432]	; (800a7b8 <tcp_receive+0x88c>)
 800a608:	68db      	ldr	r3, [r3, #12]
 800a60a:	899b      	ldrh	r3, [r3, #12]
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa fce6 	bl	8004fe0 <lwip_htons>
 800a614:	4603      	mov	r3, r0
 800a616:	b2db      	uxtb	r3, r3
 800a618:	f003 0301 	and.w	r3, r3, #1
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d01f      	beq.n	800a660 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a620:	4b65      	ldr	r3, [pc, #404]	; (800a7b8 <tcp_receive+0x88c>)
 800a622:	68db      	ldr	r3, [r3, #12]
 800a624:	899b      	ldrh	r3, [r3, #12]
 800a626:	b29b      	uxth	r3, r3
 800a628:	b21b      	sxth	r3, r3
 800a62a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a62e:	b21c      	sxth	r4, r3
 800a630:	4b61      	ldr	r3, [pc, #388]	; (800a7b8 <tcp_receive+0x88c>)
 800a632:	68db      	ldr	r3, [r3, #12]
 800a634:	899b      	ldrh	r3, [r3, #12]
 800a636:	b29b      	uxth	r3, r3
 800a638:	4618      	mov	r0, r3
 800a63a:	f7fa fcd1 	bl	8004fe0 <lwip_htons>
 800a63e:	4603      	mov	r3, r0
 800a640:	b2db      	uxtb	r3, r3
 800a642:	b29b      	uxth	r3, r3
 800a644:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800a648:	b29b      	uxth	r3, r3
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fa fcc8 	bl	8004fe0 <lwip_htons>
 800a650:	4603      	mov	r3, r0
 800a652:	b21b      	sxth	r3, r3
 800a654:	4323      	orrs	r3, r4
 800a656:	b21a      	sxth	r2, r3
 800a658:	4b57      	ldr	r3, [pc, #348]	; (800a7b8 <tcp_receive+0x88c>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	b292      	uxth	r2, r2
 800a65e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a664:	4b54      	ldr	r3, [pc, #336]	; (800a7b8 <tcp_receive+0x88c>)
 800a666:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a668:	4b53      	ldr	r3, [pc, #332]	; (800a7b8 <tcp_receive+0x88c>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	899b      	ldrh	r3, [r3, #12]
 800a66e:	b29b      	uxth	r3, r3
 800a670:	4618      	mov	r0, r3
 800a672:	f7fa fcb5 	bl	8004fe0 <lwip_htons>
 800a676:	4603      	mov	r3, r0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <tcp_receive+0x762>
            inseg.len -= 1;
 800a682:	4b4d      	ldr	r3, [pc, #308]	; (800a7b8 <tcp_receive+0x88c>)
 800a684:	891b      	ldrh	r3, [r3, #8]
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	4b4b      	ldr	r3, [pc, #300]	; (800a7b8 <tcp_receive+0x88c>)
 800a68c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800a68e:	4b4a      	ldr	r3, [pc, #296]	; (800a7b8 <tcp_receive+0x88c>)
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	4a49      	ldr	r2, [pc, #292]	; (800a7b8 <tcp_receive+0x88c>)
 800a694:	8912      	ldrh	r2, [r2, #8]
 800a696:	4611      	mov	r1, r2
 800a698:	4618      	mov	r0, r3
 800a69a:	f7fb ff31 	bl	8006500 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a69e:	4b46      	ldr	r3, [pc, #280]	; (800a7b8 <tcp_receive+0x88c>)
 800a6a0:	891c      	ldrh	r4, [r3, #8]
 800a6a2:	4b45      	ldr	r3, [pc, #276]	; (800a7b8 <tcp_receive+0x88c>)
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	899b      	ldrh	r3, [r3, #12]
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fa fc98 	bl	8004fe0 <lwip_htons>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0303 	and.w	r3, r3, #3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d001      	beq.n	800a6c0 <tcp_receive+0x794>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e000      	b.n	800a6c2 <tcp_receive+0x796>
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4423      	add	r3, r4
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	4b3d      	ldr	r3, [pc, #244]	; (800a7bc <tcp_receive+0x890>)
 800a6c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a6ca:	4b3c      	ldr	r3, [pc, #240]	; (800a7bc <tcp_receive+0x890>)
 800a6cc:	881b      	ldrh	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	4b38      	ldr	r3, [pc, #224]	; (800a7b4 <tcp_receive+0x888>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	441a      	add	r2, r3
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800a6de:	440b      	add	r3, r1
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d006      	beq.n	800a6f2 <tcp_receive+0x7c6>
 800a6e4:	4b36      	ldr	r3, [pc, #216]	; (800a7c0 <tcp_receive+0x894>)
 800a6e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a6ea:	4936      	ldr	r1, [pc, #216]	; (800a7c4 <tcp_receive+0x898>)
 800a6ec:	4836      	ldr	r0, [pc, #216]	; (800a7c8 <tcp_receive+0x89c>)
 800a6ee:	f005 fa49 	bl	800fb84 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f000 80e7 	beq.w	800a8ca <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a6fc:	4b2e      	ldr	r3, [pc, #184]	; (800a7b8 <tcp_receive+0x88c>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	899b      	ldrh	r3, [r3, #12]
 800a702:	b29b      	uxth	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7fa fc6b 	bl	8004fe0 <lwip_htons>
 800a70a:	4603      	mov	r3, r0
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d010      	beq.n	800a738 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800a716:	e00a      	b.n	800a72e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a71c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7fd fcac 	bl	8008086 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a732:	2b00      	cmp	r3, #0
 800a734:	d1f0      	bne.n	800a718 <tcp_receive+0x7ec>
 800a736:	e0c8      	b.n	800a8ca <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800a73e:	e052      	b.n	800a7e6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a742:	68db      	ldr	r3, [r3, #12]
 800a744:	899b      	ldrh	r3, [r3, #12]
 800a746:	b29b      	uxth	r3, r3
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fa fc49 	bl	8004fe0 <lwip_htons>
 800a74e:	4603      	mov	r3, r0
 800a750:	b2db      	uxtb	r3, r3
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d03d      	beq.n	800a7d6 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a75a:	4b17      	ldr	r3, [pc, #92]	; (800a7b8 <tcp_receive+0x88c>)
 800a75c:	68db      	ldr	r3, [r3, #12]
 800a75e:	899b      	ldrh	r3, [r3, #12]
 800a760:	b29b      	uxth	r3, r3
 800a762:	4618      	mov	r0, r3
 800a764:	f7fa fc3c 	bl	8004fe0 <lwip_htons>
 800a768:	4603      	mov	r3, r0
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a770:	2b00      	cmp	r3, #0
 800a772:	d130      	bne.n	800a7d6 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a774:	4b10      	ldr	r3, [pc, #64]	; (800a7b8 <tcp_receive+0x88c>)
 800a776:	68db      	ldr	r3, [r3, #12]
 800a778:	899b      	ldrh	r3, [r3, #12]
 800a77a:	b29c      	uxth	r4, r3
 800a77c:	2001      	movs	r0, #1
 800a77e:	f7fa fc2f 	bl	8004fe0 <lwip_htons>
 800a782:	4603      	mov	r3, r0
 800a784:	461a      	mov	r2, r3
 800a786:	4b0c      	ldr	r3, [pc, #48]	; (800a7b8 <tcp_receive+0x88c>)
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	4322      	orrs	r2, r4
 800a78c:	b292      	uxth	r2, r2
 800a78e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a790:	4b09      	ldr	r3, [pc, #36]	; (800a7b8 <tcp_receive+0x88c>)
 800a792:	891c      	ldrh	r4, [r3, #8]
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <tcp_receive+0x88c>)
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	899b      	ldrh	r3, [r3, #12]
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fa fc1f 	bl	8004fe0 <lwip_htons>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	b2db      	uxtb	r3, r3
 800a7a6:	f003 0303 	and.w	r3, r3, #3
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00e      	beq.n	800a7cc <tcp_receive+0x8a0>
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e00d      	b.n	800a7ce <tcp_receive+0x8a2>
 800a7b2:	bf00      	nop
 800a7b4:	2000817c 	.word	0x2000817c
 800a7b8:	2000815c 	.word	0x2000815c
 800a7bc:	20008186 	.word	0x20008186
 800a7c0:	08011f04 	.word	0x08011f04
 800a7c4:	080122ac 	.word	0x080122ac
 800a7c8:	08011f50 	.word	0x08011f50
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	4423      	add	r3, r4
 800a7d0:	b29a      	uxth	r2, r3
 800a7d2:	4b98      	ldr	r3, [pc, #608]	; (800aa34 <tcp_receive+0xb08>)
 800a7d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 800a7da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800a7e0:	6938      	ldr	r0, [r7, #16]
 800a7e2:	f7fd fc50 	bl	8008086 <tcp_seg_free>
            while (next &&
 800a7e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00e      	beq.n	800a80a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a7ec:	4b91      	ldr	r3, [pc, #580]	; (800aa34 <tcp_receive+0xb08>)
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	4b91      	ldr	r3, [pc, #580]	; (800aa38 <tcp_receive+0xb0c>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	441a      	add	r2, r3
 800a7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a800:	8909      	ldrh	r1, [r1, #8]
 800a802:	440b      	add	r3, r1
 800a804:	1ad3      	subs	r3, r2, r3
            while (next &&
 800a806:	2b00      	cmp	r3, #0
 800a808:	da9a      	bge.n	800a740 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800a80a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d059      	beq.n	800a8c4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800a810:	4b88      	ldr	r3, [pc, #544]	; (800aa34 <tcp_receive+0xb08>)
 800a812:	881b      	ldrh	r3, [r3, #0]
 800a814:	461a      	mov	r2, r3
 800a816:	4b88      	ldr	r3, [pc, #544]	; (800aa38 <tcp_receive+0xb0c>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	441a      	add	r2, r3
 800a81c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a81e:	68db      	ldr	r3, [r3, #12]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	1ad3      	subs	r3, r2, r3
            if (next &&
 800a824:	2b00      	cmp	r3, #0
 800a826:	dd4d      	ble.n	800a8c4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	b29a      	uxth	r2, r3
 800a830:	4b81      	ldr	r3, [pc, #516]	; (800aa38 <tcp_receive+0xb0c>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	b29b      	uxth	r3, r3
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	b29a      	uxth	r2, r3
 800a83a:	4b80      	ldr	r3, [pc, #512]	; (800aa3c <tcp_receive+0xb10>)
 800a83c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a83e:	4b7f      	ldr	r3, [pc, #508]	; (800aa3c <tcp_receive+0xb10>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	899b      	ldrh	r3, [r3, #12]
 800a844:	b29b      	uxth	r3, r3
 800a846:	4618      	mov	r0, r3
 800a848:	f7fa fbca 	bl	8004fe0 <lwip_htons>
 800a84c:	4603      	mov	r3, r0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	f003 0302 	and.w	r3, r3, #2
 800a854:	2b00      	cmp	r3, #0
 800a856:	d005      	beq.n	800a864 <tcp_receive+0x938>
                inseg.len -= 1;
 800a858:	4b78      	ldr	r3, [pc, #480]	; (800aa3c <tcp_receive+0xb10>)
 800a85a:	891b      	ldrh	r3, [r3, #8]
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b29a      	uxth	r2, r3
 800a860:	4b76      	ldr	r3, [pc, #472]	; (800aa3c <tcp_receive+0xb10>)
 800a862:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800a864:	4b75      	ldr	r3, [pc, #468]	; (800aa3c <tcp_receive+0xb10>)
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	4a74      	ldr	r2, [pc, #464]	; (800aa3c <tcp_receive+0xb10>)
 800a86a:	8912      	ldrh	r2, [r2, #8]
 800a86c:	4611      	mov	r1, r2
 800a86e:	4618      	mov	r0, r3
 800a870:	f7fb fe46 	bl	8006500 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a874:	4b71      	ldr	r3, [pc, #452]	; (800aa3c <tcp_receive+0xb10>)
 800a876:	891c      	ldrh	r4, [r3, #8]
 800a878:	4b70      	ldr	r3, [pc, #448]	; (800aa3c <tcp_receive+0xb10>)
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	899b      	ldrh	r3, [r3, #12]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	4618      	mov	r0, r3
 800a882:	f7fa fbad 	bl	8004fe0 <lwip_htons>
 800a886:	4603      	mov	r3, r0
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	f003 0303 	and.w	r3, r3, #3
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <tcp_receive+0x96a>
 800a892:	2301      	movs	r3, #1
 800a894:	e000      	b.n	800a898 <tcp_receive+0x96c>
 800a896:	2300      	movs	r3, #0
 800a898:	4423      	add	r3, r4
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	4b65      	ldr	r3, [pc, #404]	; (800aa34 <tcp_receive+0xb08>)
 800a89e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a8a0:	4b64      	ldr	r3, [pc, #400]	; (800aa34 <tcp_receive+0xb08>)
 800a8a2:	881b      	ldrh	r3, [r3, #0]
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	4b64      	ldr	r3, [pc, #400]	; (800aa38 <tcp_receive+0xb0c>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	441a      	add	r2, r3
 800a8ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d006      	beq.n	800a8c4 <tcp_receive+0x998>
 800a8b6:	4b62      	ldr	r3, [pc, #392]	; (800aa40 <tcp_receive+0xb14>)
 800a8b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a8bc:	4961      	ldr	r1, [pc, #388]	; (800aa44 <tcp_receive+0xb18>)
 800a8be:	4862      	ldr	r0, [pc, #392]	; (800aa48 <tcp_receive+0xb1c>)
 800a8c0:	f005 f960 	bl	800fb84 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800a8ca:	4b5a      	ldr	r3, [pc, #360]	; (800aa34 <tcp_receive+0xb08>)
 800a8cc:	881b      	ldrh	r3, [r3, #0]
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	4b59      	ldr	r3, [pc, #356]	; (800aa38 <tcp_receive+0xb0c>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	441a      	add	r2, r3
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8de:	4b55      	ldr	r3, [pc, #340]	; (800aa34 <tcp_receive+0xb08>)
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d206      	bcs.n	800a8f4 <tcp_receive+0x9c8>
 800a8e6:	4b56      	ldr	r3, [pc, #344]	; (800aa40 <tcp_receive+0xb14>)
 800a8e8:	f240 6207 	movw	r2, #1543	; 0x607
 800a8ec:	4957      	ldr	r1, [pc, #348]	; (800aa4c <tcp_receive+0xb20>)
 800a8ee:	4856      	ldr	r0, [pc, #344]	; (800aa48 <tcp_receive+0xb1c>)
 800a8f0:	f005 f948 	bl	800fb84 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a8f8:	4b4e      	ldr	r3, [pc, #312]	; (800aa34 <tcp_receive+0xb08>)
 800a8fa:	881b      	ldrh	r3, [r3, #0]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7fc fe99 	bl	800763c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800a90a:	4b4c      	ldr	r3, [pc, #304]	; (800aa3c <tcp_receive+0xb10>)
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	891b      	ldrh	r3, [r3, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d006      	beq.n	800a922 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800a914:	4b49      	ldr	r3, [pc, #292]	; (800aa3c <tcp_receive+0xb10>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	4a4d      	ldr	r2, [pc, #308]	; (800aa50 <tcp_receive+0xb24>)
 800a91a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800a91c:	4b47      	ldr	r3, [pc, #284]	; (800aa3c <tcp_receive+0xb10>)
 800a91e:	2200      	movs	r2, #0
 800a920:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a922:	4b46      	ldr	r3, [pc, #280]	; (800aa3c <tcp_receive+0xb10>)
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	899b      	ldrh	r3, [r3, #12]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7fa fb58 	bl	8004fe0 <lwip_htons>
 800a930:	4603      	mov	r3, r0
 800a932:	b2db      	uxtb	r3, r3
 800a934:	f003 0301 	and.w	r3, r3, #1
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 80b8 	beq.w	800aaae <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800a93e:	4b45      	ldr	r3, [pc, #276]	; (800aa54 <tcp_receive+0xb28>)
 800a940:	781b      	ldrb	r3, [r3, #0]
 800a942:	f043 0320 	orr.w	r3, r3, #32
 800a946:	b2da      	uxtb	r2, r3
 800a948:	4b42      	ldr	r3, [pc, #264]	; (800aa54 <tcp_receive+0xb28>)
 800a94a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800a94c:	e0af      	b.n	800aaae <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a952:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a958:	68db      	ldr	r3, [r3, #12]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	4a36      	ldr	r2, [pc, #216]	; (800aa38 <tcp_receive+0xb0c>)
 800a95e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	891b      	ldrh	r3, [r3, #8]
 800a964:	461c      	mov	r4, r3
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	68db      	ldr	r3, [r3, #12]
 800a96a:	899b      	ldrh	r3, [r3, #12]
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fa fb36 	bl	8004fe0 <lwip_htons>
 800a974:	4603      	mov	r3, r0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0303 	and.w	r3, r3, #3
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <tcp_receive+0xa58>
 800a980:	2301      	movs	r3, #1
 800a982:	e000      	b.n	800a986 <tcp_receive+0xa5a>
 800a984:	2300      	movs	r3, #0
 800a986:	191a      	adds	r2, r3, r4
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	441a      	add	r2, r3
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a996:	461c      	mov	r4, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	891b      	ldrh	r3, [r3, #8]
 800a99c:	461d      	mov	r5, r3
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	899b      	ldrh	r3, [r3, #12]
 800a9a4:	b29b      	uxth	r3, r3
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fa fb1a 	bl	8004fe0 <lwip_htons>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <tcp_receive+0xa90>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <tcp_receive+0xa92>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	442b      	add	r3, r5
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	d206      	bcs.n	800a9d2 <tcp_receive+0xaa6>
 800a9c4:	4b1e      	ldr	r3, [pc, #120]	; (800aa40 <tcp_receive+0xb14>)
 800a9c6:	f240 622b 	movw	r2, #1579	; 0x62b
 800a9ca:	4923      	ldr	r1, [pc, #140]	; (800aa58 <tcp_receive+0xb2c>)
 800a9cc:	481e      	ldr	r0, [pc, #120]	; (800aa48 <tcp_receive+0xb1c>)
 800a9ce:	f005 f8d9 	bl	800fb84 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	891b      	ldrh	r3, [r3, #8]
 800a9d6:	461c      	mov	r4, r3
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	899b      	ldrh	r3, [r3, #12]
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7fa fafd 	bl	8004fe0 <lwip_htons>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f003 0303 	and.w	r3, r3, #3
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d001      	beq.n	800a9f6 <tcp_receive+0xaca>
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e000      	b.n	800a9f8 <tcp_receive+0xacc>
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	1919      	adds	r1, r3, r4
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a9fe:	b28b      	uxth	r3, r1
 800aa00:	1ad3      	subs	r3, r2, r3
 800aa02:	b29a      	uxth	r2, r3
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f7fc fe17 	bl	800763c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	891b      	ldrh	r3, [r3, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d028      	beq.n	800aa6a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800aa18:	4b0d      	ldr	r3, [pc, #52]	; (800aa50 <tcp_receive+0xb24>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01d      	beq.n	800aa5c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800aa20:	4b0b      	ldr	r3, [pc, #44]	; (800aa50 <tcp_receive+0xb24>)
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	f7fb ffb0 	bl	8006990 <pbuf_cat>
 800aa30:	e018      	b.n	800aa64 <tcp_receive+0xb38>
 800aa32:	bf00      	nop
 800aa34:	20008186 	.word	0x20008186
 800aa38:	2000817c 	.word	0x2000817c
 800aa3c:	2000815c 	.word	0x2000815c
 800aa40:	08011f04 	.word	0x08011f04
 800aa44:	080122e4 	.word	0x080122e4
 800aa48:	08011f50 	.word	0x08011f50
 800aa4c:	08012320 	.word	0x08012320
 800aa50:	2000818c 	.word	0x2000818c
 800aa54:	20008189 	.word	0x20008189
 800aa58:	08012340 	.word	0x08012340
            } else {
              recv_data = cseg->p;
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	4a70      	ldr	r2, [pc, #448]	; (800ac24 <tcp_receive+0xcf8>)
 800aa62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2200      	movs	r2, #0
 800aa68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	899b      	ldrh	r3, [r3, #12]
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	4618      	mov	r0, r3
 800aa74:	f7fa fab4 	bl	8004fe0 <lwip_htons>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 0301 	and.w	r3, r3, #1
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00d      	beq.n	800aaa0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800aa84:	4b68      	ldr	r3, [pc, #416]	; (800ac28 <tcp_receive+0xcfc>)
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	f043 0320 	orr.w	r3, r3, #32
 800aa8c:	b2da      	uxtb	r2, r3
 800aa8e:	4b66      	ldr	r3, [pc, #408]	; (800ac28 <tcp_receive+0xcfc>)
 800aa90:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	7d1b      	ldrb	r3, [r3, #20]
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d102      	bne.n	800aaa0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2207      	movs	r2, #7
 800aa9e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800aaa8:	68b8      	ldr	r0, [r7, #8]
 800aaaa:	f7fd faec 	bl	8008086 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d008      	beq.n	800aac8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800aac2:	429a      	cmp	r2, r3
 800aac4:	f43f af43 	beq.w	800a94e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	8b5b      	ldrh	r3, [r3, #26]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d00e      	beq.n	800aaf2 <tcp_receive+0xbc6>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	8b5b      	ldrh	r3, [r3, #26]
 800aad8:	f023 0301 	bic.w	r3, r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	835a      	strh	r2, [r3, #26]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	8b5b      	ldrh	r3, [r3, #26]
 800aae6:	f043 0302 	orr.w	r3, r3, #2
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800aaf0:	e188      	b.n	800ae04 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	8b5b      	ldrh	r3, [r3, #26]
 800aaf6:	f043 0301 	orr.w	r3, r3, #1
 800aafa:	b29a      	uxth	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800ab00:	e180      	b.n	800ae04 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d106      	bne.n	800ab18 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800ab0a:	4848      	ldr	r0, [pc, #288]	; (800ac2c <tcp_receive+0xd00>)
 800ab0c:	f7fd faf2 	bl	80080f4 <tcp_seg_copy>
 800ab10:	4602      	mov	r2, r0
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	675a      	str	r2, [r3, #116]	; 0x74
 800ab16:	e16d      	b.n	800adf4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ab20:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab22:	e157      	b.n	800add4 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	4b41      	ldr	r3, [pc, #260]	; (800ac30 <tcp_receive+0xd04>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d11d      	bne.n	800ab6e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800ab32:	4b3e      	ldr	r3, [pc, #248]	; (800ac2c <tcp_receive+0xd00>)
 800ab34:	891a      	ldrh	r2, [r3, #8]
 800ab36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab38:	891b      	ldrh	r3, [r3, #8]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	f240 814f 	bls.w	800adde <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab40:	483a      	ldr	r0, [pc, #232]	; (800ac2c <tcp_receive+0xd00>)
 800ab42:	f7fd fad7 	bl	80080f4 <tcp_seg_copy>
 800ab46:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	f000 8149 	beq.w	800ade2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800ab50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <tcp_receive+0xc32>
                    prev->next = cseg;
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	697a      	ldr	r2, [r7, #20]
 800ab5a:	601a      	str	r2, [r3, #0]
 800ab5c:	e002      	b.n	800ab64 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	697a      	ldr	r2, [r7, #20]
 800ab62:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800ab64:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab66:	6978      	ldr	r0, [r7, #20]
 800ab68:	f7ff f8dc 	bl	8009d24 <tcp_oos_insert_segment>
                }
                break;
 800ab6c:	e139      	b.n	800ade2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800ab6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d117      	bne.n	800aba4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800ab74:	4b2e      	ldr	r3, [pc, #184]	; (800ac30 <tcp_receive+0xd04>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	1ad3      	subs	r3, r2, r3
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	da57      	bge.n	800ac34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800ab84:	4829      	ldr	r0, [pc, #164]	; (800ac2c <tcp_receive+0xd00>)
 800ab86:	f7fd fab5 	bl	80080f4 <tcp_seg_copy>
 800ab8a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800ab8c:	69bb      	ldr	r3, [r7, #24]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	f000 8129 	beq.w	800ade6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800ab9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab9c:	69b8      	ldr	r0, [r7, #24]
 800ab9e:	f7ff f8c1 	bl	8009d24 <tcp_oos_insert_segment>
                  }
                  break;
 800aba2:	e120      	b.n	800ade6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800aba4:	4b22      	ldr	r3, [pc, #136]	; (800ac30 <tcp_receive+0xd04>)
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	3b01      	subs	r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	db3e      	blt.n	800ac34 <tcp_receive+0xd08>
 800abb6:	4b1e      	ldr	r3, [pc, #120]	; (800ac30 <tcp_receive+0xd04>)
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	685b      	ldr	r3, [r3, #4]
 800abc0:	1ad3      	subs	r3, r2, r3
 800abc2:	3301      	adds	r3, #1
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dc35      	bgt.n	800ac34 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800abc8:	4818      	ldr	r0, [pc, #96]	; (800ac2c <tcp_receive+0xd00>)
 800abca:	f7fd fa93 	bl	80080f4 <tcp_seg_copy>
 800abce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f000 8109 	beq.w	800adea <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800abd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abe0:	8912      	ldrh	r2, [r2, #8]
 800abe2:	441a      	add	r2, r3
 800abe4:	4b12      	ldr	r3, [pc, #72]	; (800ac30 <tcp_receive+0xd04>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd12      	ble.n	800ac14 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800abee:	4b10      	ldr	r3, [pc, #64]	; (800ac30 <tcp_receive+0xd04>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	b29a      	uxth	r2, r3
 800abf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	685b      	ldr	r3, [r3, #4]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	1ad3      	subs	r3, r2, r3
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800ac04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	891b      	ldrh	r3, [r3, #8]
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4610      	mov	r0, r2
 800ac10:	f7fb fc76 	bl	8006500 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800ac14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac16:	69fa      	ldr	r2, [r7, #28]
 800ac18:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800ac1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac1c:	69f8      	ldr	r0, [r7, #28]
 800ac1e:	f7ff f881 	bl	8009d24 <tcp_oos_insert_segment>
                  }
                  break;
 800ac22:	e0e2      	b.n	800adea <tcp_receive+0xebe>
 800ac24:	2000818c 	.word	0x2000818c
 800ac28:	20008189 	.word	0x20008189
 800ac2c:	2000815c 	.word	0x2000815c
 800ac30:	2000817c 	.word	0x2000817c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800ac34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac36:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800ac38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f040 80c6 	bne.w	800adce <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800ac42:	4b80      	ldr	r3, [pc, #512]	; (800ae44 <tcp_receive+0xf18>)
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f340 80bd 	ble.w	800adce <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	899b      	ldrh	r3, [r3, #12]
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fa f9bf 	bl	8004fe0 <lwip_htons>
 800ac62:	4603      	mov	r3, r0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	f040 80bf 	bne.w	800adee <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800ac70:	4875      	ldr	r0, [pc, #468]	; (800ae48 <tcp_receive+0xf1c>)
 800ac72:	f7fd fa3f 	bl	80080f4 <tcp_seg_copy>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	f000 80b6 	beq.w	800adf2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800ac86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac8e:	8912      	ldrh	r2, [r2, #8]
 800ac90:	441a      	add	r2, r3
 800ac92:	4b6c      	ldr	r3, [pc, #432]	; (800ae44 <tcp_receive+0xf18>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dd12      	ble.n	800acc2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800ac9c:	4b69      	ldr	r3, [pc, #420]	; (800ae44 <tcp_receive+0xf18>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	68db      	ldr	r3, [r3, #12]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	b29a      	uxth	r2, r3
 800acae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800acb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb4:	685a      	ldr	r2, [r3, #4]
 800acb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acb8:	891b      	ldrh	r3, [r3, #8]
 800acba:	4619      	mov	r1, r3
 800acbc:	4610      	mov	r0, r2
 800acbe:	f7fb fc1f 	bl	8006500 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800acc2:	4b62      	ldr	r3, [pc, #392]	; (800ae4c <tcp_receive+0xf20>)
 800acc4:	881b      	ldrh	r3, [r3, #0]
 800acc6:	461a      	mov	r2, r3
 800acc8:	4b5e      	ldr	r3, [pc, #376]	; (800ae44 <tcp_receive+0xf18>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	441a      	add	r2, r3
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800acd6:	440b      	add	r3, r1
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f340 8089 	ble.w	800adf2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800ace0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68db      	ldr	r3, [r3, #12]
 800ace6:	899b      	ldrh	r3, [r3, #12]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	4618      	mov	r0, r3
 800acec:	f7fa f978 	bl	8004fe0 <lwip_htons>
 800acf0:	4603      	mov	r3, r0
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d022      	beq.n	800ad42 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	68db      	ldr	r3, [r3, #12]
 800ad02:	899b      	ldrh	r3, [r3, #12]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	b21b      	sxth	r3, r3
 800ad08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad0c:	b21c      	sxth	r4, r3
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7fa f961 	bl	8004fe0 <lwip_htons>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fa f958 	bl	8004fe0 <lwip_htons>
 800ad30:	4603      	mov	r3, r0
 800ad32:	b21b      	sxth	r3, r3
 800ad34:	4323      	orrs	r3, r4
 800ad36:	b21a      	sxth	r2, r3
 800ad38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	68db      	ldr	r3, [r3, #12]
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad46:	b29a      	uxth	r2, r3
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad4c:	4413      	add	r3, r2
 800ad4e:	b299      	uxth	r1, r3
 800ad50:	4b3c      	ldr	r3, [pc, #240]	; (800ae44 <tcp_receive+0xf18>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	1a8a      	subs	r2, r1, r2
 800ad5c:	b292      	uxth	r2, r2
 800ad5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	891b      	ldrh	r3, [r3, #8]
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7fb fbc6 	bl	8006500 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800ad74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	891c      	ldrh	r4, [r3, #8]
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68db      	ldr	r3, [r3, #12]
 800ad80:	899b      	ldrh	r3, [r3, #12]
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	4618      	mov	r0, r3
 800ad86:	f7fa f92b 	bl	8004fe0 <lwip_htons>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	f003 0303 	and.w	r3, r3, #3
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d001      	beq.n	800ad9a <tcp_receive+0xe6e>
 800ad96:	2301      	movs	r3, #1
 800ad98:	e000      	b.n	800ad9c <tcp_receive+0xe70>
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	4423      	add	r3, r4
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	4b2a      	ldr	r3, [pc, #168]	; (800ae4c <tcp_receive+0xf20>)
 800ada2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ada4:	4b29      	ldr	r3, [pc, #164]	; (800ae4c <tcp_receive+0xf20>)
 800ada6:	881b      	ldrh	r3, [r3, #0]
 800ada8:	461a      	mov	r2, r3
 800adaa:	4b26      	ldr	r3, [pc, #152]	; (800ae44 <tcp_receive+0xf18>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	441a      	add	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800adb8:	440b      	add	r3, r1
 800adba:	429a      	cmp	r2, r3
 800adbc:	d019      	beq.n	800adf2 <tcp_receive+0xec6>
 800adbe:	4b24      	ldr	r3, [pc, #144]	; (800ae50 <tcp_receive+0xf24>)
 800adc0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800adc4:	4923      	ldr	r1, [pc, #140]	; (800ae54 <tcp_receive+0xf28>)
 800adc6:	4824      	ldr	r0, [pc, #144]	; (800ae58 <tcp_receive+0xf2c>)
 800adc8:	f004 fedc 	bl	800fb84 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800adcc:	e011      	b.n	800adf2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800adce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	63bb      	str	r3, [r7, #56]	; 0x38
 800add4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add6:	2b00      	cmp	r3, #0
 800add8:	f47f aea4 	bne.w	800ab24 <tcp_receive+0xbf8>
 800addc:	e00a      	b.n	800adf4 <tcp_receive+0xec8>
                break;
 800adde:	bf00      	nop
 800ade0:	e008      	b.n	800adf4 <tcp_receive+0xec8>
                break;
 800ade2:	bf00      	nop
 800ade4:	e006      	b.n	800adf4 <tcp_receive+0xec8>
                  break;
 800ade6:	bf00      	nop
 800ade8:	e004      	b.n	800adf4 <tcp_receive+0xec8>
                  break;
 800adea:	bf00      	nop
 800adec:	e002      	b.n	800adf4 <tcp_receive+0xec8>
                  break;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <tcp_receive+0xec8>
                break;
 800adf2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f001 fe8b 	bl	800cb10 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800adfa:	e003      	b.n	800ae04 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f001 fe87 	bl	800cb10 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ae02:	e01a      	b.n	800ae3a <tcp_receive+0xf0e>
 800ae04:	e019      	b.n	800ae3a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800ae06:	4b0f      	ldr	r3, [pc, #60]	; (800ae44 <tcp_receive+0xf18>)
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	db0a      	blt.n	800ae2a <tcp_receive+0xefe>
 800ae14:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <tcp_receive+0xf18>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	6879      	ldr	r1, [r7, #4]
 800ae1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ae20:	440b      	add	r3, r1
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	3301      	adds	r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd07      	ble.n	800ae3a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	8b5b      	ldrh	r3, [r3, #26]
 800ae2e:	f043 0302 	orr.w	r3, r3, #2
 800ae32:	b29a      	uxth	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ae38:	e7ff      	b.n	800ae3a <tcp_receive+0xf0e>
 800ae3a:	bf00      	nop
 800ae3c:	3750      	adds	r7, #80	; 0x50
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bdb0      	pop	{r4, r5, r7, pc}
 800ae42:	bf00      	nop
 800ae44:	2000817c 	.word	0x2000817c
 800ae48:	2000815c 	.word	0x2000815c
 800ae4c:	20008186 	.word	0x20008186
 800ae50:	08011f04 	.word	0x08011f04
 800ae54:	080122ac 	.word	0x080122ac
 800ae58:	08011f50 	.word	0x08011f50

0800ae5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ae62:	4b15      	ldr	r3, [pc, #84]	; (800aeb8 <tcp_get_next_optbyte+0x5c>)
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	b291      	uxth	r1, r2
 800ae6a:	4a13      	ldr	r2, [pc, #76]	; (800aeb8 <tcp_get_next_optbyte+0x5c>)
 800ae6c:	8011      	strh	r1, [r2, #0]
 800ae6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800ae70:	4b12      	ldr	r3, [pc, #72]	; (800aebc <tcp_get_next_optbyte+0x60>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d004      	beq.n	800ae82 <tcp_get_next_optbyte+0x26>
 800ae78:	4b11      	ldr	r3, [pc, #68]	; (800aec0 <tcp_get_next_optbyte+0x64>)
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	88fa      	ldrh	r2, [r7, #6]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d208      	bcs.n	800ae94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800ae82:	4b10      	ldr	r3, [pc, #64]	; (800aec4 <tcp_get_next_optbyte+0x68>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3314      	adds	r3, #20
 800ae88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800ae8a:	88fb      	ldrh	r3, [r7, #6]
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	4413      	add	r3, r2
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	e00b      	b.n	800aeac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800ae94:	88fb      	ldrh	r3, [r7, #6]
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <tcp_get_next_optbyte+0x64>)
 800ae9a:	881b      	ldrh	r3, [r3, #0]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800aea2:	4b06      	ldr	r3, [pc, #24]	; (800aebc <tcp_get_next_optbyte+0x60>)
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	797b      	ldrb	r3, [r7, #5]
 800aea8:	4413      	add	r3, r2
 800aeaa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr
 800aeb8:	20008178 	.word	0x20008178
 800aebc:	20008174 	.word	0x20008174
 800aec0:	20008172 	.word	0x20008172
 800aec4:	2000816c 	.word	0x2000816c

0800aec8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d106      	bne.n	800aee4 <tcp_parseopt+0x1c>
 800aed6:	4b32      	ldr	r3, [pc, #200]	; (800afa0 <tcp_parseopt+0xd8>)
 800aed8:	f240 727d 	movw	r2, #1917	; 0x77d
 800aedc:	4931      	ldr	r1, [pc, #196]	; (800afa4 <tcp_parseopt+0xdc>)
 800aede:	4832      	ldr	r0, [pc, #200]	; (800afa8 <tcp_parseopt+0xe0>)
 800aee0:	f004 fe50 	bl	800fb84 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800aee4:	4b31      	ldr	r3, [pc, #196]	; (800afac <tcp_parseopt+0xe4>)
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d055      	beq.n	800af98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800aeec:	4b30      	ldr	r3, [pc, #192]	; (800afb0 <tcp_parseopt+0xe8>)
 800aeee:	2200      	movs	r2, #0
 800aef0:	801a      	strh	r2, [r3, #0]
 800aef2:	e045      	b.n	800af80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800aef4:	f7ff ffb2 	bl	800ae5c <tcp_get_next_optbyte>
 800aef8:	4603      	mov	r3, r0
 800aefa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d006      	beq.n	800af10 <tcp_parseopt+0x48>
 800af02:	2b02      	cmp	r3, #2
 800af04:	dc2b      	bgt.n	800af5e <tcp_parseopt+0x96>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d041      	beq.n	800af8e <tcp_parseopt+0xc6>
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d127      	bne.n	800af5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800af0e:	e037      	b.n	800af80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800af10:	f7ff ffa4 	bl	800ae5c <tcp_get_next_optbyte>
 800af14:	4603      	mov	r3, r0
 800af16:	2b04      	cmp	r3, #4
 800af18:	d13b      	bne.n	800af92 <tcp_parseopt+0xca>
 800af1a:	4b25      	ldr	r3, [pc, #148]	; (800afb0 <tcp_parseopt+0xe8>)
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	3301      	adds	r3, #1
 800af20:	4a22      	ldr	r2, [pc, #136]	; (800afac <tcp_parseopt+0xe4>)
 800af22:	8812      	ldrh	r2, [r2, #0]
 800af24:	4293      	cmp	r3, r2
 800af26:	da34      	bge.n	800af92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800af28:	f7ff ff98 	bl	800ae5c <tcp_get_next_optbyte>
 800af2c:	4603      	mov	r3, r0
 800af2e:	b29b      	uxth	r3, r3
 800af30:	021b      	lsls	r3, r3, #8
 800af32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800af34:	f7ff ff92 	bl	800ae5c <tcp_get_next_optbyte>
 800af38:	4603      	mov	r3, r0
 800af3a:	b29a      	uxth	r2, r3
 800af3c:	89bb      	ldrh	r3, [r7, #12]
 800af3e:	4313      	orrs	r3, r2
 800af40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800af42:	89bb      	ldrh	r3, [r7, #12]
 800af44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800af48:	d804      	bhi.n	800af54 <tcp_parseopt+0x8c>
 800af4a:	89bb      	ldrh	r3, [r7, #12]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <tcp_parseopt+0x8c>
 800af50:	89ba      	ldrh	r2, [r7, #12]
 800af52:	e001      	b.n	800af58 <tcp_parseopt+0x90>
 800af54:	f44f 7206 	mov.w	r2, #536	; 0x218
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800af5c:	e010      	b.n	800af80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800af5e:	f7ff ff7d 	bl	800ae5c <tcp_get_next_optbyte>
 800af62:	4603      	mov	r3, r0
 800af64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800af66:	7afb      	ldrb	r3, [r7, #11]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d914      	bls.n	800af96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800af6c:	7afb      	ldrb	r3, [r7, #11]
 800af6e:	b29a      	uxth	r2, r3
 800af70:	4b0f      	ldr	r3, [pc, #60]	; (800afb0 <tcp_parseopt+0xe8>)
 800af72:	881b      	ldrh	r3, [r3, #0]
 800af74:	4413      	add	r3, r2
 800af76:	b29b      	uxth	r3, r3
 800af78:	3b02      	subs	r3, #2
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	4b0c      	ldr	r3, [pc, #48]	; (800afb0 <tcp_parseopt+0xe8>)
 800af7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <tcp_parseopt+0xe8>)
 800af82:	881a      	ldrh	r2, [r3, #0]
 800af84:	4b09      	ldr	r3, [pc, #36]	; (800afac <tcp_parseopt+0xe4>)
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d3b3      	bcc.n	800aef4 <tcp_parseopt+0x2c>
 800af8c:	e004      	b.n	800af98 <tcp_parseopt+0xd0>
          return;
 800af8e:	bf00      	nop
 800af90:	e002      	b.n	800af98 <tcp_parseopt+0xd0>
            return;
 800af92:	bf00      	nop
 800af94:	e000      	b.n	800af98 <tcp_parseopt+0xd0>
            return;
 800af96:	bf00      	nop
      }
    }
  }
}
 800af98:	3710      	adds	r7, #16
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	08011f04 	.word	0x08011f04
 800afa4:	08012368 	.word	0x08012368
 800afa8:	08011f50 	.word	0x08011f50
 800afac:	20008170 	.word	0x20008170
 800afb0:	20008178 	.word	0x20008178

0800afb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800afb8:	4b05      	ldr	r3, [pc, #20]	; (800afd0 <tcp_trigger_input_pcb_close+0x1c>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f043 0310 	orr.w	r3, r3, #16
 800afc0:	b2da      	uxtb	r2, r3
 800afc2:	4b03      	ldr	r3, [pc, #12]	; (800afd0 <tcp_trigger_input_pcb_close+0x1c>)
 800afc4:	701a      	strb	r2, [r3, #0]
}
 800afc6:	bf00      	nop
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	20008189 	.word	0x20008189

0800afd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00a      	beq.n	800affc <tcp_route+0x28>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	7a1b      	ldrb	r3, [r3, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d006      	beq.n	800affc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	7a1b      	ldrb	r3, [r3, #8]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fb f8aa 	bl	800614c <netif_get_by_index>
 800aff8:	4603      	mov	r3, r0
 800affa:	e003      	b.n	800b004 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f003 fafb 	bl	800e5f8 <ip4_route>
 800b002:	4603      	mov	r3, r0
  }
}
 800b004:	4618      	mov	r0, r3
 800b006:	3710      	adds	r7, #16
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd80      	pop	{r7, pc}

0800b00c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800b00c:	b590      	push	{r4, r7, lr}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	603b      	str	r3, [r7, #0]
 800b018:	4613      	mov	r3, r2
 800b01a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d105      	bne.n	800b02e <tcp_create_segment+0x22>
 800b022:	4b44      	ldr	r3, [pc, #272]	; (800b134 <tcp_create_segment+0x128>)
 800b024:	22a3      	movs	r2, #163	; 0xa3
 800b026:	4944      	ldr	r1, [pc, #272]	; (800b138 <tcp_create_segment+0x12c>)
 800b028:	4844      	ldr	r0, [pc, #272]	; (800b13c <tcp_create_segment+0x130>)
 800b02a:	f004 fdab 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d105      	bne.n	800b040 <tcp_create_segment+0x34>
 800b034:	4b3f      	ldr	r3, [pc, #252]	; (800b134 <tcp_create_segment+0x128>)
 800b036:	22a4      	movs	r2, #164	; 0xa4
 800b038:	4941      	ldr	r1, [pc, #260]	; (800b140 <tcp_create_segment+0x134>)
 800b03a:	4840      	ldr	r0, [pc, #256]	; (800b13c <tcp_create_segment+0x130>)
 800b03c:	f004 fda2 	bl	800fb84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 0304 	and.w	r3, r3, #4
 800b04c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b04e:	2003      	movs	r0, #3
 800b050:	f7fa fcf6 	bl	8005a40 <memp_malloc>
 800b054:	6138      	str	r0, [r7, #16]
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800b05c:	68b8      	ldr	r0, [r7, #8]
 800b05e:	f7fb fbd5 	bl	800680c <pbuf_free>
    return NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	e061      	b.n	800b12a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b06c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	68ba      	ldr	r2, [r7, #8]
 800b078:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	891a      	ldrh	r2, [r3, #8]
 800b07e:	7dfb      	ldrb	r3, [r7, #23]
 800b080:	b29b      	uxth	r3, r3
 800b082:	429a      	cmp	r2, r3
 800b084:	d205      	bcs.n	800b092 <tcp_create_segment+0x86>
 800b086:	4b2b      	ldr	r3, [pc, #172]	; (800b134 <tcp_create_segment+0x128>)
 800b088:	22b0      	movs	r2, #176	; 0xb0
 800b08a:	492e      	ldr	r1, [pc, #184]	; (800b144 <tcp_create_segment+0x138>)
 800b08c:	482b      	ldr	r0, [pc, #172]	; (800b13c <tcp_create_segment+0x130>)
 800b08e:	f004 fd79 	bl	800fb84 <iprintf>
  seg->len = p->tot_len - optlen;
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	891a      	ldrh	r2, [r3, #8]
 800b096:	7dfb      	ldrb	r3, [r7, #23]
 800b098:	b29b      	uxth	r3, r3
 800b09a:	1ad3      	subs	r3, r2, r3
 800b09c:	b29a      	uxth	r2, r3
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b0a2:	2114      	movs	r1, #20
 800b0a4:	68b8      	ldr	r0, [r7, #8]
 800b0a6:	f7fb fb1b 	bl	80066e0 <pbuf_add_header>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d004      	beq.n	800b0ba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800b0b0:	6938      	ldr	r0, [r7, #16]
 800b0b2:	f7fc ffe8 	bl	8008086 <tcp_seg_free>
    return NULL;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	e037      	b.n	800b12a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	685a      	ldr	r2, [r3, #4]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8ada      	ldrh	r2, [r3, #22]
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	68dc      	ldr	r4, [r3, #12]
 800b0cc:	4610      	mov	r0, r2
 800b0ce:	f7f9 ff87 	bl	8004fe0 <lwip_htons>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8b1a      	ldrh	r2, [r3, #24]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	68dc      	ldr	r4, [r3, #12]
 800b0de:	4610      	mov	r0, r2
 800b0e0:	f7f9 ff7e 	bl	8004fe0 <lwip_htons>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	68dc      	ldr	r4, [r3, #12]
 800b0ec:	6838      	ldr	r0, [r7, #0]
 800b0ee:	f7f9 ff8c 	bl	800500a <lwip_htonl>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b0f6:	7dfb      	ldrb	r3, [r7, #23]
 800b0f8:	089b      	lsrs	r3, r3, #2
 800b0fa:	b2db      	uxtb	r3, r3
 800b0fc:	b29b      	uxth	r3, r3
 800b0fe:	3305      	adds	r3, #5
 800b100:	b29b      	uxth	r3, r3
 800b102:	031b      	lsls	r3, r3, #12
 800b104:	b29a      	uxth	r2, r3
 800b106:	79fb      	ldrb	r3, [r7, #7]
 800b108:	b29b      	uxth	r3, r3
 800b10a:	4313      	orrs	r3, r2
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	68dc      	ldr	r4, [r3, #12]
 800b112:	4610      	mov	r0, r2
 800b114:	f7f9 ff64 	bl	8004fe0 <lwip_htons>
 800b118:	4603      	mov	r3, r0
 800b11a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	68db      	ldr	r3, [r3, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	749a      	strb	r2, [r3, #18]
 800b124:	2200      	movs	r2, #0
 800b126:	74da      	strb	r2, [r3, #19]
  return seg;
 800b128:	693b      	ldr	r3, [r7, #16]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	371c      	adds	r7, #28
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd90      	pop	{r4, r7, pc}
 800b132:	bf00      	nop
 800b134:	08012384 	.word	0x08012384
 800b138:	080123b8 	.word	0x080123b8
 800b13c:	080123d8 	.word	0x080123d8
 800b140:	08012400 	.word	0x08012400
 800b144:	08012424 	.word	0x08012424

0800b148 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	607b      	str	r3, [r7, #4]
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]
 800b154:	460b      	mov	r3, r1
 800b156:	81bb      	strh	r3, [r7, #12]
 800b158:	4613      	mov	r3, r2
 800b15a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800b15c:	89bb      	ldrh	r3, [r7, #12]
 800b15e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d105      	bne.n	800b172 <tcp_pbuf_prealloc+0x2a>
 800b166:	4b30      	ldr	r3, [pc, #192]	; (800b228 <tcp_pbuf_prealloc+0xe0>)
 800b168:	22e8      	movs	r2, #232	; 0xe8
 800b16a:	4930      	ldr	r1, [pc, #192]	; (800b22c <tcp_pbuf_prealloc+0xe4>)
 800b16c:	4830      	ldr	r0, [pc, #192]	; (800b230 <tcp_pbuf_prealloc+0xe8>)
 800b16e:	f004 fd09 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d105      	bne.n	800b184 <tcp_pbuf_prealloc+0x3c>
 800b178:	4b2b      	ldr	r3, [pc, #172]	; (800b228 <tcp_pbuf_prealloc+0xe0>)
 800b17a:	22e9      	movs	r2, #233	; 0xe9
 800b17c:	492d      	ldr	r1, [pc, #180]	; (800b234 <tcp_pbuf_prealloc+0xec>)
 800b17e:	482c      	ldr	r0, [pc, #176]	; (800b230 <tcp_pbuf_prealloc+0xe8>)
 800b180:	f004 fd00 	bl	800fb84 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800b184:	89ba      	ldrh	r2, [r7, #12]
 800b186:	897b      	ldrh	r3, [r7, #10]
 800b188:	429a      	cmp	r2, r3
 800b18a:	d221      	bcs.n	800b1d0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b18c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b190:	f003 0302 	and.w	r3, r3, #2
 800b194:	2b00      	cmp	r3, #0
 800b196:	d111      	bne.n	800b1bc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	8b5b      	ldrh	r3, [r3, #26]
 800b19c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d115      	bne.n	800b1d0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800b1a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d007      	beq.n	800b1bc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b1bc:	89bb      	ldrh	r3, [r7, #12]
 800b1be:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800b1c2:	f023 0203 	bic.w	r2, r3, #3
 800b1c6:	897b      	ldrh	r3, [r7, #10]
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	bf28      	it	cs
 800b1cc:	4613      	movcs	r3, r2
 800b1ce:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b1d0:	8af9      	ldrh	r1, [r7, #22]
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7fb f833 	bl	8006244 <pbuf_alloc>
 800b1de:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	e019      	b.n	800b21e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d006      	beq.n	800b200 <tcp_pbuf_prealloc+0xb8>
 800b1f2:	4b0d      	ldr	r3, [pc, #52]	; (800b228 <tcp_pbuf_prealloc+0xe0>)
 800b1f4:	f240 120b 	movw	r2, #267	; 0x10b
 800b1f8:	490f      	ldr	r1, [pc, #60]	; (800b238 <tcp_pbuf_prealloc+0xf0>)
 800b1fa:	480d      	ldr	r0, [pc, #52]	; (800b230 <tcp_pbuf_prealloc+0xe8>)
 800b1fc:	f004 fcc2 	bl	800fb84 <iprintf>
  *oversize = p->len - length;
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	895a      	ldrh	r2, [r3, #10]
 800b204:	89bb      	ldrh	r3, [r7, #12]
 800b206:	1ad3      	subs	r3, r2, r3
 800b208:	b29a      	uxth	r2, r3
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	89ba      	ldrh	r2, [r7, #12]
 800b212:	811a      	strh	r2, [r3, #8]
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	891a      	ldrh	r2, [r3, #8]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	815a      	strh	r2, [r3, #10]
  return p;
 800b21c:	693b      	ldr	r3, [r7, #16]
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3718      	adds	r7, #24
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
 800b226:	bf00      	nop
 800b228:	08012384 	.word	0x08012384
 800b22c:	0801243c 	.word	0x0801243c
 800b230:	080123d8 	.word	0x080123d8
 800b234:	08012460 	.word	0x08012460
 800b238:	08012480 	.word	0x08012480

0800b23c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	460b      	mov	r3, r1
 800b246:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d106      	bne.n	800b25c <tcp_write_checks+0x20>
 800b24e:	4b33      	ldr	r3, [pc, #204]	; (800b31c <tcp_write_checks+0xe0>)
 800b250:	f240 1233 	movw	r2, #307	; 0x133
 800b254:	4932      	ldr	r1, [pc, #200]	; (800b320 <tcp_write_checks+0xe4>)
 800b256:	4833      	ldr	r0, [pc, #204]	; (800b324 <tcp_write_checks+0xe8>)
 800b258:	f004 fc94 	bl	800fb84 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	7d1b      	ldrb	r3, [r3, #20]
 800b260:	2b04      	cmp	r3, #4
 800b262:	d00e      	beq.n	800b282 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800b268:	2b07      	cmp	r3, #7
 800b26a:	d00a      	beq.n	800b282 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800b270:	2b02      	cmp	r3, #2
 800b272:	d006      	beq.n	800b282 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d002      	beq.n	800b282 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800b27c:	f06f 030a 	mvn.w	r3, #10
 800b280:	e048      	b.n	800b314 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800b282:	887b      	ldrh	r3, [r7, #2]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d101      	bne.n	800b28c <tcp_write_checks+0x50>
    return ERR_OK;
 800b288:	2300      	movs	r3, #0
 800b28a:	e043      	b.n	800b314 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b292:	887a      	ldrh	r2, [r7, #2]
 800b294:	429a      	cmp	r2, r3
 800b296:	d909      	bls.n	800b2ac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	8b5b      	ldrh	r3, [r3, #26]
 800b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2a6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2aa:	e033      	b.n	800b314 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2b2:	2b08      	cmp	r3, #8
 800b2b4:	d909      	bls.n	800b2ca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	8b5b      	ldrh	r3, [r3, #26]
 800b2ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	e024      	b.n	800b314 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d00f      	beq.n	800b2f4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d11a      	bne.n	800b312 <tcp_write_checks+0xd6>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d116      	bne.n	800b312 <tcp_write_checks+0xd6>
 800b2e4:	4b0d      	ldr	r3, [pc, #52]	; (800b31c <tcp_write_checks+0xe0>)
 800b2e6:	f240 1255 	movw	r2, #341	; 0x155
 800b2ea:	490f      	ldr	r1, [pc, #60]	; (800b328 <tcp_write_checks+0xec>)
 800b2ec:	480d      	ldr	r0, [pc, #52]	; (800b324 <tcp_write_checks+0xe8>)
 800b2ee:	f004 fc49 	bl	800fb84 <iprintf>
 800b2f2:	e00e      	b.n	800b312 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d103      	bne.n	800b304 <tcp_write_checks+0xc8>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <tcp_write_checks+0xd6>
 800b304:	4b05      	ldr	r3, [pc, #20]	; (800b31c <tcp_write_checks+0xe0>)
 800b306:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b30a:	4908      	ldr	r1, [pc, #32]	; (800b32c <tcp_write_checks+0xf0>)
 800b30c:	4805      	ldr	r0, [pc, #20]	; (800b324 <tcp_write_checks+0xe8>)
 800b30e:	f004 fc39 	bl	800fb84 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	08012384 	.word	0x08012384
 800b320:	08012494 	.word	0x08012494
 800b324:	080123d8 	.word	0x080123d8
 800b328:	080124b4 	.word	0x080124b4
 800b32c:	080124f0 	.word	0x080124f0

0800b330 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800b330:	b590      	push	{r4, r7, lr}
 800b332:	b09b      	sub	sp, #108	; 0x6c
 800b334:	af04      	add	r7, sp, #16
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	4611      	mov	r1, r2
 800b33c:	461a      	mov	r2, r3
 800b33e:	460b      	mov	r3, r1
 800b340:	80fb      	strh	r3, [r7, #6]
 800b342:	4613      	mov	r3, r2
 800b344:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800b346:	2300      	movs	r3, #0
 800b348:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	653b      	str	r3, [r7, #80]	; 0x50
 800b34e:	2300      	movs	r3, #0
 800b350:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b352:	2300      	movs	r3, #0
 800b354:	64bb      	str	r3, [r7, #72]	; 0x48
 800b356:	2300      	movs	r3, #0
 800b358:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800b35a:	2300      	movs	r3, #0
 800b35c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800b36a:	2300      	movs	r3, #0
 800b36c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d109      	bne.n	800b38c <tcp_write+0x5c>
 800b378:	4ba4      	ldr	r3, [pc, #656]	; (800b60c <tcp_write+0x2dc>)
 800b37a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b37e:	49a4      	ldr	r1, [pc, #656]	; (800b610 <tcp_write+0x2e0>)
 800b380:	48a4      	ldr	r0, [pc, #656]	; (800b614 <tcp_write+0x2e4>)
 800b382:	f004 fbff 	bl	800fb84 <iprintf>
 800b386:	f06f 030f 	mvn.w	r3, #15
 800b38a:	e32a      	b.n	800b9e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	b29a      	uxth	r2, r3
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b39a:	4293      	cmp	r3, r2
 800b39c:	bf28      	it	cs
 800b39e:	4613      	movcs	r3, r2
 800b3a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800b3a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d102      	bne.n	800b3ae <tcp_write+0x7e>
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b3ac:	e000      	b.n	800b3b0 <tcp_write+0x80>
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d109      	bne.n	800b3cc <tcp_write+0x9c>
 800b3b8:	4b94      	ldr	r3, [pc, #592]	; (800b60c <tcp_write+0x2dc>)
 800b3ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b3be:	4996      	ldr	r1, [pc, #600]	; (800b618 <tcp_write+0x2e8>)
 800b3c0:	4894      	ldr	r0, [pc, #592]	; (800b614 <tcp_write+0x2e4>)
 800b3c2:	f004 fbdf 	bl	800fb84 <iprintf>
 800b3c6:	f06f 030f 	mvn.w	r3, #15
 800b3ca:	e30a      	b.n	800b9e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800b3cc:	88fb      	ldrh	r3, [r7, #6]
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	68f8      	ldr	r0, [r7, #12]
 800b3d2:	f7ff ff33 	bl	800b23c <tcp_write_checks>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800b3dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d002      	beq.n	800b3ea <tcp_write+0xba>
    return err;
 800b3e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800b3e8:	e2fb      	b.n	800b9e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b3f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	f000 80f6 	beq.w	800b5f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b408:	653b      	str	r3, [r7, #80]	; 0x50
 800b40a:	e002      	b.n	800b412 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800b40c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d1f8      	bne.n	800b40c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b41c:	7a9b      	ldrb	r3, [r3, #10]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	b29b      	uxth	r3, r3
 800b422:	f003 0304 	and.w	r3, r3, #4
 800b426:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b428:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b42a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b42c:	891b      	ldrh	r3, [r3, #8]
 800b42e:	4619      	mov	r1, r3
 800b430:	8c3b      	ldrh	r3, [r7, #32]
 800b432:	440b      	add	r3, r1
 800b434:	429a      	cmp	r2, r3
 800b436:	da06      	bge.n	800b446 <tcp_write+0x116>
 800b438:	4b74      	ldr	r3, [pc, #464]	; (800b60c <tcp_write+0x2dc>)
 800b43a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b43e:	4977      	ldr	r1, [pc, #476]	; (800b61c <tcp_write+0x2ec>)
 800b440:	4874      	ldr	r0, [pc, #464]	; (800b614 <tcp_write+0x2e4>)
 800b442:	f004 fb9f 	bl	800fb84 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b448:	891a      	ldrh	r2, [r3, #8]
 800b44a:	8c3b      	ldrh	r3, [r7, #32]
 800b44c:	4413      	add	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b45c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800b45e:	8a7b      	ldrh	r3, [r7, #18]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d026      	beq.n	800b4b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b464:	8a7b      	ldrh	r3, [r7, #18]
 800b466:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b468:	429a      	cmp	r2, r3
 800b46a:	d206      	bcs.n	800b47a <tcp_write+0x14a>
 800b46c:	4b67      	ldr	r3, [pc, #412]	; (800b60c <tcp_write+0x2dc>)
 800b46e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b472:	496b      	ldr	r1, [pc, #428]	; (800b620 <tcp_write+0x2f0>)
 800b474:	4867      	ldr	r0, [pc, #412]	; (800b614 <tcp_write+0x2e4>)
 800b476:	f004 fb85 	bl	800fb84 <iprintf>
      seg = last_unsent;
 800b47a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b47c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b47e:	8a7b      	ldrh	r3, [r7, #18]
 800b480:	88fa      	ldrh	r2, [r7, #6]
 800b482:	4293      	cmp	r3, r2
 800b484:	bf28      	it	cs
 800b486:	4613      	movcs	r3, r2
 800b488:	b29b      	uxth	r3, r3
 800b48a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b48c:	4293      	cmp	r3, r2
 800b48e:	bf28      	it	cs
 800b490:	4613      	movcs	r3, r2
 800b492:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800b494:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b49a:	4413      	add	r3, r2
 800b49c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800b4a0:	8a7a      	ldrh	r2, [r7, #18]
 800b4a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4a4:	1ad3      	subs	r3, r2, r3
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800b4aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b4ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b4b2:	8a7b      	ldrh	r3, [r7, #18]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d00b      	beq.n	800b4d0 <tcp_write+0x1a0>
 800b4b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4bc:	88fb      	ldrh	r3, [r7, #6]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d006      	beq.n	800b4d0 <tcp_write+0x1a0>
 800b4c2:	4b52      	ldr	r3, [pc, #328]	; (800b60c <tcp_write+0x2dc>)
 800b4c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b4c8:	4956      	ldr	r1, [pc, #344]	; (800b624 <tcp_write+0x2f4>)
 800b4ca:	4852      	ldr	r0, [pc, #328]	; (800b614 <tcp_write+0x2e4>)
 800b4cc:	f004 fb5a 	bl	800fb84 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b4d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b4d4:	88fb      	ldrh	r3, [r7, #6]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	f080 8167 	bcs.w	800b7aa <tcp_write+0x47a>
 800b4dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f000 8163 	beq.w	800b7aa <tcp_write+0x47a>
 800b4e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4e6:	891b      	ldrh	r3, [r3, #8]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 815e 	beq.w	800b7aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b4ee:	88fa      	ldrh	r2, [r7, #6]
 800b4f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b4f4:	1ad2      	subs	r2, r2, r3
 800b4f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b4f8:	4293      	cmp	r3, r2
 800b4fa:	bfa8      	it	ge
 800b4fc:	4613      	movge	r3, r2
 800b4fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800b500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b502:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b504:	797b      	ldrb	r3, [r7, #5]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d027      	beq.n	800b55e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b50e:	f107 0012 	add.w	r0, r7, #18
 800b512:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b514:	8bf9      	ldrh	r1, [r7, #30]
 800b516:	2301      	movs	r3, #1
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	797b      	ldrb	r3, [r7, #5]
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	4603      	mov	r3, r0
 800b524:	2000      	movs	r0, #0
 800b526:	f7ff fe0f 	bl	800b148 <tcp_pbuf_prealloc>
 800b52a:	6578      	str	r0, [r7, #84]	; 0x54
 800b52c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f000 8225 	beq.w	800b97e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b536:	6858      	ldr	r0, [r3, #4]
 800b538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	4413      	add	r3, r2
 800b540:	8bfa      	ldrh	r2, [r7, #30]
 800b542:	4619      	mov	r1, r3
 800b544:	f004 fb08 	bl	800fb58 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800b548:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b54a:	f7fb f9e7 	bl	800691c <pbuf_clen>
 800b54e:	4603      	mov	r3, r0
 800b550:	461a      	mov	r2, r3
 800b552:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b556:	4413      	add	r3, r2
 800b558:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b55c:	e041      	b.n	800b5e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b55e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	637b      	str	r3, [r7, #52]	; 0x34
 800b564:	e002      	b.n	800b56c <tcp_write+0x23c>
 800b566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	637b      	str	r3, [r7, #52]	; 0x34
 800b56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1f8      	bne.n	800b566 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b576:	7b1b      	ldrb	r3, [r3, #12]
 800b578:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d115      	bne.n	800b5ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b586:	8952      	ldrh	r2, [r2, #10]
 800b588:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b58a:	68ba      	ldr	r2, [r7, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d10d      	bne.n	800b5ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b590:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b594:	2b00      	cmp	r3, #0
 800b596:	d006      	beq.n	800b5a6 <tcp_write+0x276>
 800b598:	4b1c      	ldr	r3, [pc, #112]	; (800b60c <tcp_write+0x2dc>)
 800b59a:	f240 2231 	movw	r2, #561	; 0x231
 800b59e:	4922      	ldr	r1, [pc, #136]	; (800b628 <tcp_write+0x2f8>)
 800b5a0:	481c      	ldr	r0, [pc, #112]	; (800b614 <tcp_write+0x2e4>)
 800b5a2:	f004 faef 	bl	800fb84 <iprintf>
          extendlen = seglen;
 800b5a6:	8bfb      	ldrh	r3, [r7, #30]
 800b5a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b5aa:	e01a      	b.n	800b5e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b5ac:	8bfb      	ldrh	r3, [r7, #30]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	2000      	movs	r0, #0
 800b5b4:	f7fa fe46 	bl	8006244 <pbuf_alloc>
 800b5b8:	6578      	str	r0, [r7, #84]	; 0x54
 800b5ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f000 81e0 	beq.w	800b982 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b5c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b5c6:	68ba      	ldr	r2, [r7, #8]
 800b5c8:	441a      	add	r2, r3
 800b5ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800b5ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b5d0:	f7fb f9a4 	bl	800691c <pbuf_clen>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	461a      	mov	r2, r3
 800b5d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b5dc:	4413      	add	r3, r2
 800b5de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800b5e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b5e6:	8bfb      	ldrh	r3, [r7, #30]
 800b5e8:	4413      	add	r3, r2
 800b5ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b5ee:	e0dc      	b.n	800b7aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	f000 80d7 	beq.w	800b7aa <tcp_write+0x47a>
 800b5fc:	4b03      	ldr	r3, [pc, #12]	; (800b60c <tcp_write+0x2dc>)
 800b5fe:	f240 224a 	movw	r2, #586	; 0x24a
 800b602:	490a      	ldr	r1, [pc, #40]	; (800b62c <tcp_write+0x2fc>)
 800b604:	4803      	ldr	r0, [pc, #12]	; (800b614 <tcp_write+0x2e4>)
 800b606:	f004 fabd 	bl	800fb84 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800b60a:	e0ce      	b.n	800b7aa <tcp_write+0x47a>
 800b60c:	08012384 	.word	0x08012384
 800b610:	08012524 	.word	0x08012524
 800b614:	080123d8 	.word	0x080123d8
 800b618:	0801253c 	.word	0x0801253c
 800b61c:	08012570 	.word	0x08012570
 800b620:	08012588 	.word	0x08012588
 800b624:	080125a8 	.word	0x080125a8
 800b628:	080125c8 	.word	0x080125c8
 800b62c:	080125f4 	.word	0x080125f4
    struct pbuf *p;
    u16_t left = len - pos;
 800b630:	88fa      	ldrh	r2, [r7, #6]
 800b632:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800b63a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b63e:	b29b      	uxth	r3, r3
 800b640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b646:	8b7a      	ldrh	r2, [r7, #26]
 800b648:	8bbb      	ldrh	r3, [r7, #28]
 800b64a:	4293      	cmp	r3, r2
 800b64c:	bf28      	it	cs
 800b64e:	4613      	movcs	r3, r2
 800b650:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b652:	797b      	ldrb	r3, [r7, #5]
 800b654:	f003 0301 	and.w	r3, r3, #1
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d036      	beq.n	800b6ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b65c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b660:	b29a      	uxth	r2, r3
 800b662:	8b3b      	ldrh	r3, [r7, #24]
 800b664:	4413      	add	r3, r2
 800b666:	b299      	uxth	r1, r3
 800b668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	bf0c      	ite	eq
 800b66e:	2301      	moveq	r3, #1
 800b670:	2300      	movne	r3, #0
 800b672:	b2db      	uxtb	r3, r3
 800b674:	f107 0012 	add.w	r0, r7, #18
 800b678:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b67a:	9302      	str	r3, [sp, #8]
 800b67c:	797b      	ldrb	r3, [r7, #5]
 800b67e:	9301      	str	r3, [sp, #4]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	4603      	mov	r3, r0
 800b686:	2036      	movs	r0, #54	; 0x36
 800b688:	f7ff fd5e 	bl	800b148 <tcp_pbuf_prealloc>
 800b68c:	6338      	str	r0, [r7, #48]	; 0x30
 800b68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b690:	2b00      	cmp	r3, #0
 800b692:	f000 8178 	beq.w	800b986 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b698:	895b      	ldrh	r3, [r3, #10]
 800b69a:	8b3a      	ldrh	r2, [r7, #24]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d906      	bls.n	800b6ae <tcp_write+0x37e>
 800b6a0:	4b8c      	ldr	r3, [pc, #560]	; (800b8d4 <tcp_write+0x5a4>)
 800b6a2:	f240 2266 	movw	r2, #614	; 0x266
 800b6a6:	498c      	ldr	r1, [pc, #560]	; (800b8d8 <tcp_write+0x5a8>)
 800b6a8:	488c      	ldr	r0, [pc, #560]	; (800b8dc <tcp_write+0x5ac>)
 800b6aa:	f004 fa6b 	bl	800fb84 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b6b6:	18d0      	adds	r0, r2, r3
 800b6b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6bc:	68ba      	ldr	r2, [r7, #8]
 800b6be:	4413      	add	r3, r2
 800b6c0:	8b3a      	ldrh	r2, [r7, #24]
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	f004 fa48 	bl	800fb58 <memcpy>
 800b6c8:	e02f      	b.n	800b72a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b6ca:	8a7b      	ldrh	r3, [r7, #18]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d006      	beq.n	800b6de <tcp_write+0x3ae>
 800b6d0:	4b80      	ldr	r3, [pc, #512]	; (800b8d4 <tcp_write+0x5a4>)
 800b6d2:	f240 2271 	movw	r2, #625	; 0x271
 800b6d6:	4982      	ldr	r1, [pc, #520]	; (800b8e0 <tcp_write+0x5b0>)
 800b6d8:	4880      	ldr	r0, [pc, #512]	; (800b8dc <tcp_write+0x5ac>)
 800b6da:	f004 fa53 	bl	800fb84 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b6de:	8b3b      	ldrh	r3, [r7, #24]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	4619      	mov	r1, r3
 800b6e4:	2036      	movs	r0, #54	; 0x36
 800b6e6:	f7fa fdad 	bl	8006244 <pbuf_alloc>
 800b6ea:	6178      	str	r0, [r7, #20]
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	f000 814b 	beq.w	800b98a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b6f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	441a      	add	r2, r3
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b700:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b704:	b29b      	uxth	r3, r3
 800b706:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b70a:	4619      	mov	r1, r3
 800b70c:	2036      	movs	r0, #54	; 0x36
 800b70e:	f7fa fd99 	bl	8006244 <pbuf_alloc>
 800b712:	6338      	str	r0, [r7, #48]	; 0x30
 800b714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b716:	2b00      	cmp	r3, #0
 800b718:	d103      	bne.n	800b722 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800b71a:	6978      	ldr	r0, [r7, #20]
 800b71c:	f7fb f876 	bl	800680c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800b720:	e136      	b.n	800b990 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800b722:	6979      	ldr	r1, [r7, #20]
 800b724:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b726:	f7fb f933 	bl	8006990 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800b72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b72c:	f7fb f8f6 	bl	800691c <pbuf_clen>
 800b730:	4603      	mov	r3, r0
 800b732:	461a      	mov	r2, r3
 800b734:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b738:	4413      	add	r3, r2
 800b73a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b73e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b742:	2b09      	cmp	r3, #9
 800b744:	d903      	bls.n	800b74e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800b746:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b748:	f7fb f860 	bl	800680c <pbuf_free>
      goto memerr;
 800b74c:	e120      	b.n	800b990 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b752:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b756:	441a      	add	r2, r3
 800b758:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	4613      	mov	r3, r2
 800b760:	2200      	movs	r2, #0
 800b762:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff fc51 	bl	800b00c <tcp_create_segment>
 800b76a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800b76c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 810d 	beq.w	800b98e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800b774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b776:	2b00      	cmp	r3, #0
 800b778:	d102      	bne.n	800b780 <tcp_write+0x450>
      queue = seg;
 800b77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b77c:	647b      	str	r3, [r7, #68]	; 0x44
 800b77e:	e00c      	b.n	800b79a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <tcp_write+0x464>
 800b786:	4b53      	ldr	r3, [pc, #332]	; (800b8d4 <tcp_write+0x5a4>)
 800b788:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b78c:	4955      	ldr	r1, [pc, #340]	; (800b8e4 <tcp_write+0x5b4>)
 800b78e:	4853      	ldr	r0, [pc, #332]	; (800b8dc <tcp_write+0x5ac>)
 800b790:	f004 f9f8 	bl	800fb84 <iprintf>
      prev_seg->next = seg;
 800b794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b796:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b798:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800b79a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b79c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800b79e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7a2:	8b3b      	ldrh	r3, [r7, #24]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800b7aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800b7ae:	88fb      	ldrh	r3, [r7, #6]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	f4ff af3d 	bcc.w	800b630 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800b7b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d02c      	beq.n	800b816 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800b7bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7c2:	e01e      	b.n	800b802 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 800b7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c6:	891a      	ldrh	r2, [r3, #8]
 800b7c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7ca:	4413      	add	r3, r2
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800b7d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d110      	bne.n	800b7fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7e0:	8952      	ldrh	r2, [r2, #10]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b7e6:	68b9      	ldr	r1, [r7, #8]
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f004 f9b5 	bl	800fb58 <memcpy>
        p->len += oversize_used;
 800b7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7f0:	895a      	ldrh	r2, [r3, #10]
 800b7f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b7fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1dd      	bne.n	800b7c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 800b808:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b80a:	891a      	ldrh	r2, [r3, #8]
 800b80c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b80e:	4413      	add	r3, r2
 800b810:	b29a      	uxth	r2, r3
 800b812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b814:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800b816:	8a7a      	ldrh	r2, [r7, #18]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800b81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b820:	2b00      	cmp	r3, #0
 800b822:	d018      	beq.n	800b856 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b826:	2b00      	cmp	r3, #0
 800b828:	d106      	bne.n	800b838 <tcp_write+0x508>
 800b82a:	4b2a      	ldr	r3, [pc, #168]	; (800b8d4 <tcp_write+0x5a4>)
 800b82c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b830:	492d      	ldr	r1, [pc, #180]	; (800b8e8 <tcp_write+0x5b8>)
 800b832:	482a      	ldr	r0, [pc, #168]	; (800b8dc <tcp_write+0x5ac>)
 800b834:	f004 f9a6 	bl	800fb84 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800b838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fb f8a6 	bl	8006990 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b846:	891a      	ldrh	r2, [r3, #8]
 800b848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b84a:	891b      	ldrh	r3, [r3, #8]
 800b84c:	4413      	add	r3, r2
 800b84e:	b29a      	uxth	r2, r3
 800b850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b852:	811a      	strh	r2, [r3, #8]
 800b854:	e037      	b.n	800b8c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 800b856:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d034      	beq.n	800b8c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b85c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d003      	beq.n	800b86a <tcp_write+0x53a>
 800b862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <tcp_write+0x548>
 800b86a:	4b1a      	ldr	r3, [pc, #104]	; (800b8d4 <tcp_write+0x5a4>)
 800b86c:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b870:	491e      	ldr	r1, [pc, #120]	; (800b8ec <tcp_write+0x5bc>)
 800b872:	481a      	ldr	r0, [pc, #104]	; (800b8dc <tcp_write+0x5ac>)
 800b874:	f004 f986 	bl	800fb84 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b878:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b87e:	e009      	b.n	800b894 <tcp_write+0x564>
      p->tot_len += extendlen;
 800b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b882:	891a      	ldrh	r2, [r3, #8]
 800b884:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b886:	4413      	add	r3, r2
 800b888:	b29a      	uxth	r2, r3
 800b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b88c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	62bb      	str	r3, [r7, #40]	; 0x28
 800b894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f1      	bne.n	800b880 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	891a      	ldrh	r2, [r3, #8]
 800b8a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8a2:	4413      	add	r3, r2
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800b8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8ac:	895a      	ldrh	r2, [r3, #10]
 800b8ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8b0:	4413      	add	r3, r2
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ba:	891a      	ldrh	r2, [r3, #8]
 800b8bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b8be:	4413      	add	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800b8c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d111      	bne.n	800b8f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8d0:	66da      	str	r2, [r3, #108]	; 0x6c
 800b8d2:	e010      	b.n	800b8f6 <tcp_write+0x5c6>
 800b8d4:	08012384 	.word	0x08012384
 800b8d8:	08012624 	.word	0x08012624
 800b8dc:	080123d8 	.word	0x080123d8
 800b8e0:	08012664 	.word	0x08012664
 800b8e4:	08012674 	.word	0x08012674
 800b8e8:	08012688 	.word	0x08012688
 800b8ec:	080126c0 	.word	0x080126c0
  } else {
    last_unsent->next = queue;
 800b8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b8f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b8fa:	88fb      	ldrh	r3, [r7, #6]
 800b8fc:	441a      	add	r2, r3
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800b908:	88fb      	ldrh	r3, [r7, #6]
 800b90a:	1ad3      	subs	r3, r2, r3
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800b91a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b924:	2b00      	cmp	r3, #0
 800b926:	d00e      	beq.n	800b946 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10a      	bne.n	800b946 <tcp_write+0x616>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <tcp_write+0x616>
 800b938:	4b2c      	ldr	r3, [pc, #176]	; (800b9ec <tcp_write+0x6bc>)
 800b93a:	f240 3212 	movw	r2, #786	; 0x312
 800b93e:	492c      	ldr	r1, [pc, #176]	; (800b9f0 <tcp_write+0x6c0>)
 800b940:	482c      	ldr	r0, [pc, #176]	; (800b9f4 <tcp_write+0x6c4>)
 800b942:	f004 f91f 	bl	800fb84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d016      	beq.n	800b97a <tcp_write+0x64a>
 800b94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94e:	68db      	ldr	r3, [r3, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d012      	beq.n	800b97a <tcp_write+0x64a>
 800b954:	797b      	ldrb	r3, [r7, #5]
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d10d      	bne.n	800b97a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	899b      	ldrh	r3, [r3, #12]
 800b964:	b29c      	uxth	r4, r3
 800b966:	2008      	movs	r0, #8
 800b968:	f7f9 fb3a 	bl	8004fe0 <lwip_htons>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	4322      	orrs	r2, r4
 800b976:	b292      	uxth	r2, r2
 800b978:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800b97a:	2300      	movs	r3, #0
 800b97c:	e031      	b.n	800b9e2 <tcp_write+0x6b2>
          goto memerr;
 800b97e:	bf00      	nop
 800b980:	e006      	b.n	800b990 <tcp_write+0x660>
            goto memerr;
 800b982:	bf00      	nop
 800b984:	e004      	b.n	800b990 <tcp_write+0x660>
        goto memerr;
 800b986:	bf00      	nop
 800b988:	e002      	b.n	800b990 <tcp_write+0x660>
        goto memerr;
 800b98a:	bf00      	nop
 800b98c:	e000      	b.n	800b990 <tcp_write+0x660>
      goto memerr;
 800b98e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	8b5b      	ldrh	r3, [r3, #26]
 800b994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b998:	b29a      	uxth	r2, r3
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800b99e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d002      	beq.n	800b9aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 800b9a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800b9a6:	f7fa ff31 	bl	800680c <pbuf_free>
  }
  if (queue != NULL) {
 800b9aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 800b9b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800b9b2:	f7fc fb53 	bl	800805c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d00e      	beq.n	800b9de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10a      	bne.n	800b9de <tcp_write+0x6ae>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d106      	bne.n	800b9de <tcp_write+0x6ae>
 800b9d0:	4b06      	ldr	r3, [pc, #24]	; (800b9ec <tcp_write+0x6bc>)
 800b9d2:	f240 3227 	movw	r2, #807	; 0x327
 800b9d6:	4906      	ldr	r1, [pc, #24]	; (800b9f0 <tcp_write+0x6c0>)
 800b9d8:	4806      	ldr	r0, [pc, #24]	; (800b9f4 <tcp_write+0x6c4>)
 800b9da:	f004 f8d3 	bl	800fb84 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800b9de:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	375c      	adds	r7, #92	; 0x5c
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd90      	pop	{r4, r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	08012384 	.word	0x08012384
 800b9f0:	080126f8 	.word	0x080126f8
 800b9f4:	080123d8 	.word	0x080123d8

0800b9f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800b9f8:	b590      	push	{r4, r7, lr}
 800b9fa:	b08b      	sub	sp, #44	; 0x2c
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ba04:	2300      	movs	r3, #0
 800ba06:	61fb      	str	r3, [r7, #28]
 800ba08:	2300      	movs	r3, #0
 800ba0a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d106      	bne.n	800ba24 <tcp_split_unsent_seg+0x2c>
 800ba16:	4b95      	ldr	r3, [pc, #596]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba18:	f240 324b 	movw	r2, #843	; 0x34b
 800ba1c:	4994      	ldr	r1, [pc, #592]	; (800bc70 <tcp_split_unsent_seg+0x278>)
 800ba1e:	4895      	ldr	r0, [pc, #596]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba20:	f004 f8b0 	bl	800fb84 <iprintf>

  useg = pcb->unsent;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba28:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ba30:	f04f 33ff 	mov.w	r3, #4294967295
 800ba34:	e116      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ba36:	887b      	ldrh	r3, [r7, #2]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d109      	bne.n	800ba50 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ba3c:	4b8b      	ldr	r3, [pc, #556]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba3e:	f240 3253 	movw	r2, #851	; 0x353
 800ba42:	498d      	ldr	r1, [pc, #564]	; (800bc78 <tcp_split_unsent_seg+0x280>)
 800ba44:	488b      	ldr	r0, [pc, #556]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba46:	f004 f89d 	bl	800fb84 <iprintf>
    return ERR_VAL;
 800ba4a:	f06f 0305 	mvn.w	r3, #5
 800ba4e:	e109      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	891b      	ldrh	r3, [r3, #8]
 800ba54:	887a      	ldrh	r2, [r7, #2]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d301      	bcc.n	800ba5e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e102      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ba62:	887a      	ldrh	r2, [r7, #2]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d906      	bls.n	800ba76 <tcp_split_unsent_seg+0x7e>
 800ba68:	4b80      	ldr	r3, [pc, #512]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba6a:	f240 325b 	movw	r2, #859	; 0x35b
 800ba6e:	4983      	ldr	r1, [pc, #524]	; (800bc7c <tcp_split_unsent_seg+0x284>)
 800ba70:	4880      	ldr	r0, [pc, #512]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba72:	f004 f887 	bl	800fb84 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	891b      	ldrh	r3, [r3, #8]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d106      	bne.n	800ba8c <tcp_split_unsent_seg+0x94>
 800ba7e:	4b7b      	ldr	r3, [pc, #492]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800ba80:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ba84:	497e      	ldr	r1, [pc, #504]	; (800bc80 <tcp_split_unsent_seg+0x288>)
 800ba86:	487b      	ldr	r0, [pc, #492]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800ba88:	f004 f87c 	bl	800fb84 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	7a9b      	ldrb	r3, [r3, #10]
 800ba90:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ba92:	7bfb      	ldrb	r3, [r7, #15]
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	f003 0304 	and.w	r3, r3, #4
 800ba9c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	891a      	ldrh	r2, [r3, #8]
 800baa2:	887b      	ldrh	r3, [r7, #2]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800baa8:	7bbb      	ldrb	r3, [r7, #14]
 800baaa:	b29a      	uxth	r2, r3
 800baac:	89bb      	ldrh	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bab6:	4619      	mov	r1, r3
 800bab8:	2036      	movs	r0, #54	; 0x36
 800baba:	f7fa fbc3 	bl	8006244 <pbuf_alloc>
 800babe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	f000 80b7 	beq.w	800bc36 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800bac8:	697b      	ldr	r3, [r7, #20]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	891a      	ldrh	r2, [r3, #8]
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	891b      	ldrh	r3, [r3, #8]
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	887b      	ldrh	r3, [r7, #2]
 800bad8:	4413      	add	r3, r2
 800bada:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	6858      	ldr	r0, [r3, #4]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	7bbb      	ldrb	r3, [r7, #14]
 800bae6:	18d1      	adds	r1, r2, r3
 800bae8:	897b      	ldrh	r3, [r7, #10]
 800baea:	89ba      	ldrh	r2, [r7, #12]
 800baec:	f7fb f888 	bl	8006c00 <pbuf_copy_partial>
 800baf0:	4603      	mov	r3, r0
 800baf2:	461a      	mov	r2, r3
 800baf4:	89bb      	ldrh	r3, [r7, #12]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	f040 809f 	bne.w	800bc3a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	899b      	ldrh	r3, [r3, #12]
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	4618      	mov	r0, r3
 800bb06:	f7f9 fa6b 	bl	8004fe0 <lwip_htons>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb12:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800bb14:	2300      	movs	r3, #0
 800bb16:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800bb18:	7efb      	ldrb	r3, [r7, #27]
 800bb1a:	f003 0308 	and.w	r3, r3, #8
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d007      	beq.n	800bb32 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800bb22:	7efb      	ldrb	r3, [r7, #27]
 800bb24:	f023 0308 	bic.w	r3, r3, #8
 800bb28:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800bb2a:	7ebb      	ldrb	r3, [r7, #26]
 800bb2c:	f043 0308 	orr.w	r3, r3, #8
 800bb30:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800bb32:	7efb      	ldrb	r3, [r7, #27]
 800bb34:	f003 0301 	and.w	r3, r3, #1
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d007      	beq.n	800bb4c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800bb3c:	7efb      	ldrb	r3, [r7, #27]
 800bb3e:	f023 0301 	bic.w	r3, r3, #1
 800bb42:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800bb44:	7ebb      	ldrb	r3, [r7, #26]
 800bb46:	f043 0301 	orr.w	r3, r3, #1
 800bb4a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f9 fa59 	bl	800500a <lwip_htonl>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	887b      	ldrh	r3, [r7, #2]
 800bb5c:	18d1      	adds	r1, r2, r3
 800bb5e:	7eba      	ldrb	r2, [r7, #26]
 800bb60:	7bfb      	ldrb	r3, [r7, #15]
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	460b      	mov	r3, r1
 800bb66:	6939      	ldr	r1, [r7, #16]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7ff fa4f 	bl	800b00c <tcp_create_segment>
 800bb6e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d063      	beq.n	800bc3e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	685b      	ldr	r3, [r3, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7fa fece 	bl	800691c <pbuf_clen>
 800bb80:	4603      	mov	r3, r0
 800bb82:	461a      	mov	r2, r3
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bb8a:	1a9b      	subs	r3, r3, r2
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	6858      	ldr	r0, [r3, #4]
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	891a      	ldrh	r2, [r3, #8]
 800bb9e:	89bb      	ldrh	r3, [r7, #12]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	4619      	mov	r1, r3
 800bba6:	f7fa fcab 	bl	8006500 <pbuf_realloc>
  useg->len -= remainder;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	891a      	ldrh	r2, [r3, #8]
 800bbae:	89bb      	ldrh	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	b29a      	uxth	r2, r3
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	899b      	ldrh	r3, [r3, #12]
 800bbbe:	b29c      	uxth	r4, r3
 800bbc0:	7efb      	ldrb	r3, [r7, #27]
 800bbc2:	b29b      	uxth	r3, r3
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f7f9 fa0b 	bl	8004fe0 <lwip_htons>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	461a      	mov	r2, r3
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	4322      	orrs	r2, r4
 800bbd4:	b292      	uxth	r2, r2
 800bbd6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800bbd8:	697b      	ldr	r3, [r7, #20]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fa fe9d 	bl	800691c <pbuf_clen>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bbec:	4413      	add	r3, r2
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fa fe8e 	bl	800691c <pbuf_clen>
 800bc00:	4603      	mov	r3, r0
 800bc02:	461a      	mov	r2, r3
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bc0a:	4413      	add	r3, r2
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	69fa      	ldr	r2, [r7, #28]
 800bc20:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800bc22:	69fb      	ldr	r3, [r7, #28]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d103      	bne.n	800bc32 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	e016      	b.n	800bc64 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800bc36:	bf00      	nop
 800bc38:	e002      	b.n	800bc40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc3a:	bf00      	nop
 800bc3c:	e000      	b.n	800bc40 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800bc3e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d006      	beq.n	800bc54 <tcp_split_unsent_seg+0x25c>
 800bc46:	4b09      	ldr	r3, [pc, #36]	; (800bc6c <tcp_split_unsent_seg+0x274>)
 800bc48:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800bc4c:	490d      	ldr	r1, [pc, #52]	; (800bc84 <tcp_split_unsent_seg+0x28c>)
 800bc4e:	4809      	ldr	r0, [pc, #36]	; (800bc74 <tcp_split_unsent_seg+0x27c>)
 800bc50:	f003 ff98 	bl	800fb84 <iprintf>
  if (p != NULL) {
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d002      	beq.n	800bc60 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800bc5a:	6938      	ldr	r0, [r7, #16]
 800bc5c:	f7fa fdd6 	bl	800680c <pbuf_free>
  }

  return ERR_MEM;
 800bc60:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3724      	adds	r7, #36	; 0x24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd90      	pop	{r4, r7, pc}
 800bc6c:	08012384 	.word	0x08012384
 800bc70:	08012718 	.word	0x08012718
 800bc74:	080123d8 	.word	0x080123d8
 800bc78:	0801273c 	.word	0x0801273c
 800bc7c:	08012760 	.word	0x08012760
 800bc80:	08012770 	.word	0x08012770
 800bc84:	08012780 	.word	0x08012780

0800bc88 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800bc88:	b590      	push	{r4, r7, lr}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <tcp_send_fin+0x1c>
 800bc96:	4b21      	ldr	r3, [pc, #132]	; (800bd1c <tcp_send_fin+0x94>)
 800bc98:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800bc9c:	4920      	ldr	r1, [pc, #128]	; (800bd20 <tcp_send_fin+0x98>)
 800bc9e:	4821      	ldr	r0, [pc, #132]	; (800bd24 <tcp_send_fin+0x9c>)
 800bca0:	f003 ff70 	bl	800fb84 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d02e      	beq.n	800bd0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb0:	60fb      	str	r3, [r7, #12]
 800bcb2:	e002      	b.n	800bcba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d1f8      	bne.n	800bcb4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	899b      	ldrh	r3, [r3, #12]
 800bcc8:	b29b      	uxth	r3, r3
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7f9 f988 	bl	8004fe0 <lwip_htons>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	b2db      	uxtb	r3, r3
 800bcd4:	f003 0307 	and.w	r3, r3, #7
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d116      	bne.n	800bd0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	899b      	ldrh	r3, [r3, #12]
 800bce2:	b29c      	uxth	r4, r3
 800bce4:	2001      	movs	r0, #1
 800bce6:	f7f9 f97b 	bl	8004fe0 <lwip_htons>
 800bcea:	4603      	mov	r3, r0
 800bcec:	461a      	mov	r2, r3
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	68db      	ldr	r3, [r3, #12]
 800bcf2:	4322      	orrs	r2, r4
 800bcf4:	b292      	uxth	r2, r2
 800bcf6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	8b5b      	ldrh	r3, [r3, #26]
 800bcfc:	f043 0320 	orr.w	r3, r3, #32
 800bd00:	b29a      	uxth	r2, r3
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800bd06:	2300      	movs	r3, #0
 800bd08:	e004      	b.n	800bd14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800bd0a:	2101      	movs	r1, #1
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 f80b 	bl	800bd28 <tcp_enqueue_flags>
 800bd12:	4603      	mov	r3, r0
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	bd90      	pop	{r4, r7, pc}
 800bd1c:	08012384 	.word	0x08012384
 800bd20:	0801278c 	.word	0x0801278c
 800bd24:	080123d8 	.word	0x080123d8

0800bd28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b08a      	sub	sp, #40	; 0x28
 800bd2c:	af02      	add	r7, sp, #8
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	460b      	mov	r3, r1
 800bd32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800bd34:	2300      	movs	r3, #0
 800bd36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d106      	bne.n	800bd54 <tcp_enqueue_flags+0x2c>
 800bd46:	4b67      	ldr	r3, [pc, #412]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800bd48:	f240 4211 	movw	r2, #1041	; 0x411
 800bd4c:	4966      	ldr	r1, [pc, #408]	; (800bee8 <tcp_enqueue_flags+0x1c0>)
 800bd4e:	4867      	ldr	r0, [pc, #412]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bd50:	f003 ff18 	bl	800fb84 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d106      	bne.n	800bd68 <tcp_enqueue_flags+0x40>
 800bd5a:	4b62      	ldr	r3, [pc, #392]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800bd5c:	f240 4213 	movw	r2, #1043	; 0x413
 800bd60:	4963      	ldr	r1, [pc, #396]	; (800bef0 <tcp_enqueue_flags+0x1c8>)
 800bd62:	4862      	ldr	r0, [pc, #392]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bd64:	f003 ff0e 	bl	800fb84 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d001      	beq.n	800bd76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800bd72:	2301      	movs	r3, #1
 800bd74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800bd76:	7ffb      	ldrb	r3, [r7, #31]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	b2db      	uxtb	r3, r3
 800bd7c:	f003 0304 	and.w	r3, r3, #4
 800bd80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bd82:	7dfb      	ldrb	r3, [r7, #23]
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	2036      	movs	r0, #54	; 0x36
 800bd8e:	f7fa fa59 	bl	8006244 <pbuf_alloc>
 800bd92:	6138      	str	r0, [r7, #16]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	8b5b      	ldrh	r3, [r3, #26]
 800bd9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bda8:	f04f 33ff 	mov.w	r3, #4294967295
 800bdac:	e095      	b.n	800beda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	895a      	ldrh	r2, [r3, #10]
 800bdb2:	7dfb      	ldrb	r3, [r7, #23]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d206      	bcs.n	800bdc8 <tcp_enqueue_flags+0xa0>
 800bdba:	4b4a      	ldr	r3, [pc, #296]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800bdbc:	f240 4239 	movw	r2, #1081	; 0x439
 800bdc0:	494c      	ldr	r1, [pc, #304]	; (800bef4 <tcp_enqueue_flags+0x1cc>)
 800bdc2:	484a      	ldr	r0, [pc, #296]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bdc4:	f003 fede 	bl	800fb84 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	7ffb      	ldrb	r3, [r7, #31]
 800bdd0:	9300      	str	r3, [sp, #0]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	6939      	ldr	r1, [r7, #16]
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f7ff f918 	bl	800b00c <tcp_create_segment>
 800bddc:	60f8      	str	r0, [r7, #12]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d109      	bne.n	800bdf8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	8b5b      	ldrh	r3, [r3, #26]
 800bde8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800bdf2:	f04f 33ff 	mov.w	r3, #4294967295
 800bdf6:	e070      	b.n	800beda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	68db      	ldr	r3, [r3, #12]
 800bdfc:	f003 0303 	and.w	r3, r3, #3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d006      	beq.n	800be12 <tcp_enqueue_flags+0xea>
 800be04:	4b37      	ldr	r3, [pc, #220]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800be06:	f240 4242 	movw	r2, #1090	; 0x442
 800be0a:	493b      	ldr	r1, [pc, #236]	; (800bef8 <tcp_enqueue_flags+0x1d0>)
 800be0c:	4837      	ldr	r0, [pc, #220]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800be0e:	f003 feb9 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	891b      	ldrh	r3, [r3, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d006      	beq.n	800be28 <tcp_enqueue_flags+0x100>
 800be1a:	4b32      	ldr	r3, [pc, #200]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800be1c:	f240 4243 	movw	r2, #1091	; 0x443
 800be20:	4936      	ldr	r1, [pc, #216]	; (800befc <tcp_enqueue_flags+0x1d4>)
 800be22:	4832      	ldr	r0, [pc, #200]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800be24:	f003 feae 	bl	800fb84 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d103      	bne.n	800be38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	68fa      	ldr	r2, [r7, #12]
 800be34:	66da      	str	r2, [r3, #108]	; 0x6c
 800be36:	e00d      	b.n	800be54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be3c:	61bb      	str	r3, [r7, #24]
 800be3e:	e002      	b.n	800be46 <tcp_enqueue_flags+0x11e>
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1f8      	bne.n	800be40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800be4e:	69bb      	ldr	r3, [r7, #24]
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800be5c:	78fb      	ldrb	r3, [r7, #3]
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b00      	cmp	r3, #0
 800be64:	d104      	bne.n	800be70 <tcp_enqueue_flags+0x148>
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	f003 0301 	and.w	r3, r3, #1
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d004      	beq.n	800be7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be74:	1c5a      	adds	r2, r3, #1
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800be7a:	78fb      	ldrb	r3, [r7, #3]
 800be7c:	f003 0301 	and.w	r3, r3, #1
 800be80:	2b00      	cmp	r3, #0
 800be82:	d006      	beq.n	800be92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	8b5b      	ldrh	r3, [r3, #26]
 800be88:	f043 0320 	orr.w	r3, r3, #32
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	4618      	mov	r0, r3
 800be98:	f7fa fd40 	bl	800691c <pbuf_clen>
 800be9c:	4603      	mov	r3, r0
 800be9e:	461a      	mov	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800bea6:	4413      	add	r3, r2
 800bea8:	b29a      	uxth	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00e      	beq.n	800bed8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10a      	bne.n	800bed8 <tcp_enqueue_flags+0x1b0>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <tcp_enqueue_flags+0x1b0>
 800beca:	4b06      	ldr	r3, [pc, #24]	; (800bee4 <tcp_enqueue_flags+0x1bc>)
 800becc:	f240 4265 	movw	r2, #1125	; 0x465
 800bed0:	490b      	ldr	r1, [pc, #44]	; (800bf00 <tcp_enqueue_flags+0x1d8>)
 800bed2:	4806      	ldr	r0, [pc, #24]	; (800beec <tcp_enqueue_flags+0x1c4>)
 800bed4:	f003 fe56 	bl	800fb84 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3720      	adds	r7, #32
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	08012384 	.word	0x08012384
 800bee8:	080127a8 	.word	0x080127a8
 800beec:	080123d8 	.word	0x080123d8
 800bef0:	08012800 	.word	0x08012800
 800bef4:	08012820 	.word	0x08012820
 800bef8:	0801285c 	.word	0x0801285c
 800befc:	08012874 	.word	0x08012874
 800bf00:	080128a0 	.word	0x080128a0

0800bf04 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b08a      	sub	sp, #40	; 0x28
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <tcp_output+0x1c>
 800bf12:	4b8a      	ldr	r3, [pc, #552]	; (800c13c <tcp_output+0x238>)
 800bf14:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bf18:	4989      	ldr	r1, [pc, #548]	; (800c140 <tcp_output+0x23c>)
 800bf1a:	488a      	ldr	r0, [pc, #552]	; (800c144 <tcp_output+0x240>)
 800bf1c:	f003 fe32 	bl	800fb84 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	7d1b      	ldrb	r3, [r3, #20]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d106      	bne.n	800bf36 <tcp_output+0x32>
 800bf28:	4b84      	ldr	r3, [pc, #528]	; (800c13c <tcp_output+0x238>)
 800bf2a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bf2e:	4986      	ldr	r1, [pc, #536]	; (800c148 <tcp_output+0x244>)
 800bf30:	4884      	ldr	r0, [pc, #528]	; (800c144 <tcp_output+0x240>)
 800bf32:	f003 fe27 	bl	800fb84 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800bf36:	4b85      	ldr	r3, [pc, #532]	; (800c14c <tcp_output+0x248>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	687a      	ldr	r2, [r7, #4]
 800bf3c:	429a      	cmp	r2, r3
 800bf3e:	d101      	bne.n	800bf44 <tcp_output+0x40>
    return ERR_OK;
 800bf40:	2300      	movs	r3, #0
 800bf42:	e1ce      	b.n	800c2e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bf50:	4293      	cmp	r3, r2
 800bf52:	bf28      	it	cs
 800bf54:	4613      	movcs	r3, r2
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800bf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10b      	bne.n	800bf7e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	8b5b      	ldrh	r3, [r3, #26]
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 81aa 	beq.w	800c2c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fdcb 	bl	800cb10 <tcp_send_empty_ack>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	e1b1      	b.n	800c2e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bf7e:	6879      	ldr	r1, [r7, #4]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	3304      	adds	r3, #4
 800bf84:	461a      	mov	r2, r3
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	f7ff f824 	bl	800afd4 <tcp_route>
 800bf8c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d102      	bne.n	800bf9a <tcp_output+0x96>
    return ERR_RTE;
 800bf94:	f06f 0303 	mvn.w	r3, #3
 800bf98:	e1a3      	b.n	800c2e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <tcp_output+0xa4>
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d111      	bne.n	800bfcc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <tcp_output+0xb0>
 800bfae:	697b      	ldr	r3, [r7, #20]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	e000      	b.n	800bfb6 <tcp_output+0xb2>
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d102      	bne.n	800bfc4 <tcp_output+0xc0>
      return ERR_RTE;
 800bfbe:	f06f 0303 	mvn.w	r3, #3
 800bfc2:	e18e      	b.n	800c2e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7f9 f819 	bl	800500a <lwip_htonl>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfe2:	8912      	ldrh	r2, [r2, #8]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d227      	bcs.n	800c03c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bff2:	461a      	mov	r2, r3
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d114      	bne.n	800c024 <tcp_output+0x120>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d110      	bne.n	800c024 <tcp_output+0x120>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10b      	bne.n	800c024 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	8b5b      	ldrh	r3, [r3, #26]
 800c028:	f003 0302 	and.w	r3, r3, #2
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	f000 814d 	beq.w	800c2cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fd6c 	bl	800cb10 <tcp_send_empty_ack>
 800c038:	4603      	mov	r3, r0
 800c03a:	e152      	b.n	800c2e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c048:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800c04a:	6a3b      	ldr	r3, [r7, #32]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 811c 	beq.w	800c28a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800c052:	e002      	b.n	800c05a <tcp_output+0x156>
 800c054:	6a3b      	ldr	r3, [r7, #32]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	623b      	str	r3, [r7, #32]
 800c05a:	6a3b      	ldr	r3, [r7, #32]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1f8      	bne.n	800c054 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800c062:	e112      	b.n	800c28a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800c064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	899b      	ldrh	r3, [r3, #12]
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f8 ffb7 	bl	8004fe0 <lwip_htons>
 800c072:	4603      	mov	r3, r0
 800c074:	b2db      	uxtb	r3, r3
 800c076:	f003 0304 	and.w	r3, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d006      	beq.n	800c08c <tcp_output+0x188>
 800c07e:	4b2f      	ldr	r3, [pc, #188]	; (800c13c <tcp_output+0x238>)
 800c080:	f240 5236 	movw	r2, #1334	; 0x536
 800c084:	4932      	ldr	r1, [pc, #200]	; (800c150 <tcp_output+0x24c>)
 800c086:	482f      	ldr	r0, [pc, #188]	; (800c144 <tcp_output+0x240>)
 800c088:	f003 fd7c 	bl	800fb84 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01f      	beq.n	800c0d4 <tcp_output+0x1d0>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	8b5b      	ldrh	r3, [r3, #26]
 800c098:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d119      	bne.n	800c0d4 <tcp_output+0x1d0>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00b      	beq.n	800c0c0 <tcp_output+0x1bc>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d110      	bne.n	800c0d4 <tcp_output+0x1d0>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0b6:	891a      	ldrh	r2, [r3, #8]
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d209      	bcs.n	800c0d4 <tcp_output+0x1d0>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <tcp_output+0x1d0>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c0d0:	2b08      	cmp	r3, #8
 800c0d2:	d901      	bls.n	800c0d8 <tcp_output+0x1d4>
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	e000      	b.n	800c0da <tcp_output+0x1d6>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d106      	bne.n	800c0ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8b5b      	ldrh	r3, [r3, #26]
 800c0e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	f000 80e4 	beq.w	800c2b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	7d1b      	ldrb	r3, [r3, #20]
 800c0f0:	2b02      	cmp	r3, #2
 800c0f2:	d00d      	beq.n	800c110 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	899b      	ldrh	r3, [r3, #12]
 800c0fa:	b29c      	uxth	r4, r3
 800c0fc:	2010      	movs	r0, #16
 800c0fe:	f7f8 ff6f 	bl	8004fe0 <lwip_htons>
 800c102:	4603      	mov	r3, r0
 800c104:	461a      	mov	r2, r3
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	4322      	orrs	r2, r4
 800c10c:	b292      	uxth	r2, r2
 800c10e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800c110:	697a      	ldr	r2, [r7, #20]
 800c112:	6879      	ldr	r1, [r7, #4]
 800c114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c116:	f000 f909 	bl	800c32c <tcp_output_segment>
 800c11a:	4603      	mov	r3, r0
 800c11c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800c11e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d016      	beq.n	800c154 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	8b5b      	ldrh	r3, [r3, #26]
 800c12a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c12e:	b29a      	uxth	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	835a      	strh	r2, [r3, #26]
      return err;
 800c134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c138:	e0d3      	b.n	800c2e2 <tcp_output+0x3de>
 800c13a:	bf00      	nop
 800c13c:	08012384 	.word	0x08012384
 800c140:	080128c8 	.word	0x080128c8
 800c144:	080123d8 	.word	0x080123d8
 800c148:	080128e0 	.word	0x080128e0
 800c14c:	20008190 	.word	0x20008190
 800c150:	08012908 	.word	0x08012908
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800c154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	7d1b      	ldrb	r3, [r3, #20]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d006      	beq.n	800c172 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	8b5b      	ldrh	r3, [r3, #26]
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	b29a      	uxth	r2, r3
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	4618      	mov	r0, r3
 800c17a:	f7f8 ff46 	bl	800500a <lwip_htonl>
 800c17e:	4604      	mov	r4, r0
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	891b      	ldrh	r3, [r3, #8]
 800c184:	461d      	mov	r5, r3
 800c186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	899b      	ldrh	r3, [r3, #12]
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	4618      	mov	r0, r3
 800c190:	f7f8 ff26 	bl	8004fe0 <lwip_htons>
 800c194:	4603      	mov	r3, r0
 800c196:	b2db      	uxtb	r3, r3
 800c198:	f003 0303 	and.w	r3, r3, #3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <tcp_output+0x2a0>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <tcp_output+0x2a2>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	442b      	add	r3, r5
 800c1a8:	4423      	add	r3, r4
 800c1aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	da02      	bge.n	800c1be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800c1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c0:	891b      	ldrh	r3, [r3, #8]
 800c1c2:	461c      	mov	r4, r3
 800c1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	899b      	ldrh	r3, [r3, #12]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f7f8 ff07 	bl	8004fe0 <lwip_htons>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 0303 	and.w	r3, r3, #3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d001      	beq.n	800c1e2 <tcp_output+0x2de>
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e000      	b.n	800c1e4 <tcp_output+0x2e0>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4423      	add	r3, r4
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d049      	beq.n	800c27e <tcp_output+0x37a>
      seg->next = NULL;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d105      	bne.n	800c204 <tcp_output+0x300>
        pcb->unacked = seg;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	623b      	str	r3, [r7, #32]
 800c202:	e03f      	b.n	800c284 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f8 fefd 	bl	800500a <lwip_htonl>
 800c210:	4604      	mov	r4, r0
 800c212:	6a3b      	ldr	r3, [r7, #32]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	4618      	mov	r0, r3
 800c21a:	f7f8 fef6 	bl	800500a <lwip_htonl>
 800c21e:	4603      	mov	r3, r0
 800c220:	1ae3      	subs	r3, r4, r3
 800c222:	2b00      	cmp	r3, #0
 800c224:	da24      	bge.n	800c270 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	3370      	adds	r3, #112	; 0x70
 800c22a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c22c:	e002      	b.n	800c234 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d011      	beq.n	800c260 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	4618      	mov	r0, r3
 800c246:	f7f8 fee0 	bl	800500a <lwip_htonl>
 800c24a:	4604      	mov	r4, r0
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	4618      	mov	r0, r3
 800c254:	f7f8 fed9 	bl	800500a <lwip_htonl>
 800c258:	4603      	mov	r3, r0
 800c25a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	dbe6      	blt.n	800c22e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800c260:	69fb      	ldr	r3, [r7, #28]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c266:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800c268:	69fb      	ldr	r3, [r7, #28]
 800c26a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c26c:	601a      	str	r2, [r3, #0]
 800c26e:	e009      	b.n	800c284 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c274:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800c276:	6a3b      	ldr	r3, [r7, #32]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	623b      	str	r3, [r7, #32]
 800c27c:	e002      	b.n	800c284 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800c27e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c280:	f7fb ff01 	bl	8008086 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c288:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d012      	beq.n	800c2b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	68db      	ldr	r3, [r3, #12]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	4618      	mov	r0, r3
 800c298:	f7f8 feb7 	bl	800500a <lwip_htonl>
 800c29c:	4602      	mov	r2, r0
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a6:	8912      	ldrh	r2, [r2, #8]
 800c2a8:	4413      	add	r3, r2
  while (seg != NULL &&
 800c2aa:	69ba      	ldr	r2, [r7, #24]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	f4bf aed9 	bcs.w	800c064 <tcp_output+0x160>
 800c2b2:	e000      	b.n	800c2b6 <tcp_output+0x3b2>
      break;
 800c2b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d108      	bne.n	800c2d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800c2c6:	e004      	b.n	800c2d2 <tcp_output+0x3ce>
    goto output_done;
 800c2c8:	bf00      	nop
 800c2ca:	e002      	b.n	800c2d2 <tcp_output+0x3ce>
    goto output_done;
 800c2cc:	bf00      	nop
 800c2ce:	e000      	b.n	800c2d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800c2d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	8b5b      	ldrh	r3, [r3, #26]
 800c2d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2da:	b29a      	uxth	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3728      	adds	r7, #40	; 0x28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ea:	bf00      	nop

0800c2ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d106      	bne.n	800c308 <tcp_output_segment_busy+0x1c>
 800c2fa:	4b09      	ldr	r3, [pc, #36]	; (800c320 <tcp_output_segment_busy+0x34>)
 800c2fc:	f240 529a 	movw	r2, #1434	; 0x59a
 800c300:	4908      	ldr	r1, [pc, #32]	; (800c324 <tcp_output_segment_busy+0x38>)
 800c302:	4809      	ldr	r0, [pc, #36]	; (800c328 <tcp_output_segment_busy+0x3c>)
 800c304:	f003 fc3e 	bl	800fb84 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	7b9b      	ldrb	r3, [r3, #14]
 800c30e:	2b01      	cmp	r3, #1
 800c310:	d001      	beq.n	800c316 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800c312:	2301      	movs	r3, #1
 800c314:	e000      	b.n	800c318 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800c316:	2300      	movs	r3, #0
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3708      	adds	r7, #8
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	08012384 	.word	0x08012384
 800c324:	08012920 	.word	0x08012920
 800c328:	080123d8 	.word	0x080123d8

0800c32c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800c32c:	b5b0      	push	{r4, r5, r7, lr}
 800c32e:	b08c      	sub	sp, #48	; 0x30
 800c330:	af04      	add	r7, sp, #16
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d106      	bne.n	800c34c <tcp_output_segment+0x20>
 800c33e:	4b63      	ldr	r3, [pc, #396]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c340:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800c344:	4962      	ldr	r1, [pc, #392]	; (800c4d0 <tcp_output_segment+0x1a4>)
 800c346:	4863      	ldr	r0, [pc, #396]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c348:	f003 fc1c 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <tcp_output_segment+0x34>
 800c352:	4b5e      	ldr	r3, [pc, #376]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c354:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800c358:	495f      	ldr	r1, [pc, #380]	; (800c4d8 <tcp_output_segment+0x1ac>)
 800c35a:	485e      	ldr	r0, [pc, #376]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c35c:	f003 fc12 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d106      	bne.n	800c374 <tcp_output_segment+0x48>
 800c366:	4b59      	ldr	r3, [pc, #356]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c368:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800c36c:	495b      	ldr	r1, [pc, #364]	; (800c4dc <tcp_output_segment+0x1b0>)
 800c36e:	4859      	ldr	r0, [pc, #356]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c370:	f003 fc08 	bl	800fb84 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff ffb9 	bl	800c2ec <tcp_output_segment_busy>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d001      	beq.n	800c384 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800c380:	2300      	movs	r3, #0
 800c382:	e09f      	b.n	800c4c4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	68dc      	ldr	r4, [r3, #12]
 800c38c:	4610      	mov	r0, r2
 800c38e:	f7f8 fe3c 	bl	800500a <lwip_htonl>
 800c392:	4603      	mov	r3, r0
 800c394:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	68dc      	ldr	r4, [r3, #12]
 800c39e:	4610      	mov	r0, r2
 800c3a0:	f7f8 fe1e 	bl	8004fe0 <lwip_htons>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ac:	68ba      	ldr	r2, [r7, #8]
 800c3ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c3b0:	441a      	add	r2, r3
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	3314      	adds	r3, #20
 800c3bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	7a9b      	ldrb	r3, [r3, #10]
 800c3c2:	f003 0301 	and.w	r3, r3, #1
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d015      	beq.n	800c3f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	3304      	adds	r3, #4
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c3d6:	f7fc fa33 	bl	8008840 <tcp_eff_send_mss_netif>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c3de:	8b7b      	ldrh	r3, [r7, #26]
 800c3e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	f7f8 fe10 	bl	800500a <lwip_htonl>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 800c3f0:	69fb      	ldr	r3, [r7, #28]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	da02      	bge.n	800c406 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2200      	movs	r2, #0
 800c404:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d10c      	bne.n	800c428 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800c40e:	4b34      	ldr	r3, [pc, #208]	; (800c4e0 <tcp_output_segment+0x1b4>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	4618      	mov	r0, r3
 800c41e:	f7f8 fdf4 	bl	800500a <lwip_htonl>
 800c422:	4602      	mov	r2, r0
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	1ad3      	subs	r3, r2, r3
 800c434:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	685b      	ldr	r3, [r3, #4]
 800c43a:	8959      	ldrh	r1, [r3, #10]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	8b3a      	ldrh	r2, [r7, #24]
 800c442:	1a8a      	subs	r2, r1, r2
 800c444:	b292      	uxth	r2, r2
 800c446:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	8919      	ldrh	r1, [r3, #8]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	685b      	ldr	r3, [r3, #4]
 800c452:	8b3a      	ldrh	r2, [r7, #24]
 800c454:	1a8a      	subs	r2, r1, r2
 800c456:	b292      	uxth	r2, r2
 800c458:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	68d2      	ldr	r2, [r2, #12]
 800c462:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	741a      	strb	r2, [r3, #16]
 800c46c:	2200      	movs	r2, #0
 800c46e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68db      	ldr	r3, [r3, #12]
 800c474:	f103 0214 	add.w	r2, r3, #20
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	7a9b      	ldrb	r3, [r3, #10]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	f003 0304 	and.w	r3, r3, #4
 800c482:	4413      	add	r3, r2
 800c484:	69fa      	ldr	r2, [r7, #28]
 800c486:	429a      	cmp	r2, r3
 800c488:	d006      	beq.n	800c498 <tcp_output_segment+0x16c>
 800c48a:	4b10      	ldr	r3, [pc, #64]	; (800c4cc <tcp_output_segment+0x1a0>)
 800c48c:	f240 621c 	movw	r2, #1564	; 0x61c
 800c490:	4914      	ldr	r1, [pc, #80]	; (800c4e4 <tcp_output_segment+0x1b8>)
 800c492:	4810      	ldr	r0, [pc, #64]	; (800c4d4 <tcp_output_segment+0x1a8>)
 800c494:	f003 fb76 	bl	800fb84 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6858      	ldr	r0, [r3, #4]
 800c49c:	68b9      	ldr	r1, [r7, #8]
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	1d1c      	adds	r4, r3, #4
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	7add      	ldrb	r5, [r3, #11]
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	7a9b      	ldrb	r3, [r3, #10]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	9202      	str	r2, [sp, #8]
 800c4ae:	2206      	movs	r2, #6
 800c4b0:	9201      	str	r2, [sp, #4]
 800c4b2:	9300      	str	r3, [sp, #0]
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	4622      	mov	r2, r4
 800c4b8:	f002 fa5c 	bl	800e974 <ip4_output_if>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800c4c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3720      	adds	r7, #32
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bdb0      	pop	{r4, r5, r7, pc}
 800c4cc:	08012384 	.word	0x08012384
 800c4d0:	08012948 	.word	0x08012948
 800c4d4:	080123d8 	.word	0x080123d8
 800c4d8:	08012968 	.word	0x08012968
 800c4dc:	08012988 	.word	0x08012988
 800c4e0:	20008144 	.word	0x20008144
 800c4e4:	080129ac 	.word	0x080129ac

0800c4e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800c4e8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d106      	bne.n	800c504 <tcp_rexmit_rto_prepare+0x1c>
 800c4f6:	4b31      	ldr	r3, [pc, #196]	; (800c5bc <tcp_rexmit_rto_prepare+0xd4>)
 800c4f8:	f240 6263 	movw	r2, #1635	; 0x663
 800c4fc:	4930      	ldr	r1, [pc, #192]	; (800c5c0 <tcp_rexmit_rto_prepare+0xd8>)
 800c4fe:	4831      	ldr	r0, [pc, #196]	; (800c5c4 <tcp_rexmit_rto_prepare+0xdc>)
 800c500:	f003 fb40 	bl	800fb84 <iprintf>

  if (pcb->unacked == NULL) {
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800c50c:	f06f 0305 	mvn.w	r3, #5
 800c510:	e050      	b.n	800c5b4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c516:	60fb      	str	r3, [r7, #12]
 800c518:	e00b      	b.n	800c532 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800c51a:	68f8      	ldr	r0, [r7, #12]
 800c51c:	f7ff fee6 	bl	800c2ec <tcp_output_segment_busy>
 800c520:	4603      	mov	r3, r0
 800c522:	2b00      	cmp	r3, #0
 800c524:	d002      	beq.n	800c52c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800c526:	f06f 0305 	mvn.w	r3, #5
 800c52a:	e043      	b.n	800c5b4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	60fb      	str	r3, [r7, #12]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1ef      	bne.n	800c51a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f7ff fed6 	bl	800c2ec <tcp_output_segment_busy>
 800c540:	4603      	mov	r3, r0
 800c542:	2b00      	cmp	r3, #0
 800c544:	d002      	beq.n	800c54c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800c546:	f06f 0305 	mvn.w	r3, #5
 800c54a:	e033      	b.n	800c5b4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	8b5b      	ldrh	r3, [r3, #26]
 800c566:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	4618      	mov	r0, r3
 800c578:	f7f8 fd47 	bl	800500a <lwip_htonl>
 800c57c:	4604      	mov	r4, r0
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	891b      	ldrh	r3, [r3, #8]
 800c582:	461d      	mov	r5, r3
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	68db      	ldr	r3, [r3, #12]
 800c588:	899b      	ldrh	r3, [r3, #12]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	4618      	mov	r0, r3
 800c58e:	f7f8 fd27 	bl	8004fe0 <lwip_htons>
 800c592:	4603      	mov	r3, r0
 800c594:	b2db      	uxtb	r3, r3
 800c596:	f003 0303 	and.w	r3, r3, #3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d001      	beq.n	800c5a2 <tcp_rexmit_rto_prepare+0xba>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	e000      	b.n	800c5a4 <tcp_rexmit_rto_prepare+0xbc>
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	442b      	add	r3, r5
 800c5a6:	18e2      	adds	r2, r4, r3
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800c5b2:	2300      	movs	r3, #0
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3710      	adds	r7, #16
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bdb0      	pop	{r4, r5, r7, pc}
 800c5bc:	08012384 	.word	0x08012384
 800c5c0:	080129c0 	.word	0x080129c0
 800c5c4:	080123d8 	.word	0x080123d8

0800c5c8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b082      	sub	sp, #8
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d106      	bne.n	800c5e4 <tcp_rexmit_rto_commit+0x1c>
 800c5d6:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <tcp_rexmit_rto_commit+0x44>)
 800c5d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c5dc:	490c      	ldr	r1, [pc, #48]	; (800c610 <tcp_rexmit_rto_commit+0x48>)
 800c5de:	480d      	ldr	r0, [pc, #52]	; (800c614 <tcp_rexmit_rto_commit+0x4c>)
 800c5e0:	f003 fad0 	bl	800fb84 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5ea:	2bff      	cmp	r3, #255	; 0xff
 800c5ec:	d007      	beq.n	800c5fe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f7ff fc80 	bl	800bf04 <tcp_output>
}
 800c604:	bf00      	nop
 800c606:	3708      	adds	r7, #8
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}
 800c60c:	08012384 	.word	0x08012384
 800c610:	080129e4 	.word	0x080129e4
 800c614:	080123d8 	.word	0x080123d8

0800c618 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d106      	bne.n	800c634 <tcp_rexmit_rto+0x1c>
 800c626:	4b0a      	ldr	r3, [pc, #40]	; (800c650 <tcp_rexmit_rto+0x38>)
 800c628:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c62c:	4909      	ldr	r1, [pc, #36]	; (800c654 <tcp_rexmit_rto+0x3c>)
 800c62e:	480a      	ldr	r0, [pc, #40]	; (800c658 <tcp_rexmit_rto+0x40>)
 800c630:	f003 faa8 	bl	800fb84 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7ff ff57 	bl	800c4e8 <tcp_rexmit_rto_prepare>
 800c63a:	4603      	mov	r3, r0
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d102      	bne.n	800c646 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f7ff ffc1 	bl	800c5c8 <tcp_rexmit_rto_commit>
  }
}
 800c646:	bf00      	nop
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}
 800c64e:	bf00      	nop
 800c650:	08012384 	.word	0x08012384
 800c654:	08012a08 	.word	0x08012a08
 800c658:	080123d8 	.word	0x080123d8

0800c65c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800c65c:	b590      	push	{r4, r7, lr}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d106      	bne.n	800c678 <tcp_rexmit+0x1c>
 800c66a:	4b2f      	ldr	r3, [pc, #188]	; (800c728 <tcp_rexmit+0xcc>)
 800c66c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c670:	492e      	ldr	r1, [pc, #184]	; (800c72c <tcp_rexmit+0xd0>)
 800c672:	482f      	ldr	r0, [pc, #188]	; (800c730 <tcp_rexmit+0xd4>)
 800c674:	f003 fa86 	bl	800fb84 <iprintf>

  if (pcb->unacked == NULL) {
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d102      	bne.n	800c686 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800c680:	f06f 0305 	mvn.w	r3, #5
 800c684:	e04c      	b.n	800c720 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800c68c:	68b8      	ldr	r0, [r7, #8]
 800c68e:	f7ff fe2d 	bl	800c2ec <tcp_output_segment_busy>
 800c692:	4603      	mov	r3, r0
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800c698:	f06f 0305 	mvn.w	r3, #5
 800c69c:	e040      	b.n	800c720 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	336c      	adds	r3, #108	; 0x6c
 800c6aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6ac:	e002      	b.n	800c6b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d011      	beq.n	800c6e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7f8 fca0 	bl	800500a <lwip_htonl>
 800c6ca:	4604      	mov	r4, r0
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7f8 fc99 	bl	800500a <lwip_htonl>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	dbe6      	blt.n	800c6ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	68ba      	ldr	r2, [r7, #8]
 800c6ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d103      	bne.n	800c6fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c704:	2bff      	cmp	r3, #255	; 0xff
 800c706:	d007      	beq.n	800c718 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c70e:	3301      	adds	r3, #1
 800c710:	b2da      	uxtb	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800c71e:	2300      	movs	r3, #0
}
 800c720:	4618      	mov	r0, r3
 800c722:	3714      	adds	r7, #20
 800c724:	46bd      	mov	sp, r7
 800c726:	bd90      	pop	{r4, r7, pc}
 800c728:	08012384 	.word	0x08012384
 800c72c:	08012a24 	.word	0x08012a24
 800c730:	080123d8 	.word	0x080123d8

0800c734 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d106      	bne.n	800c750 <tcp_rexmit_fast+0x1c>
 800c742:	4b2a      	ldr	r3, [pc, #168]	; (800c7ec <tcp_rexmit_fast+0xb8>)
 800c744:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c748:	4929      	ldr	r1, [pc, #164]	; (800c7f0 <tcp_rexmit_fast+0xbc>)
 800c74a:	482a      	ldr	r0, [pc, #168]	; (800c7f4 <tcp_rexmit_fast+0xc0>)
 800c74c:	f003 fa1a 	bl	800fb84 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	2b00      	cmp	r3, #0
 800c756:	d044      	beq.n	800c7e2 <tcp_rexmit_fast+0xae>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8b5b      	ldrh	r3, [r3, #26]
 800c75c:	f003 0304 	and.w	r3, r3, #4
 800c760:	2b00      	cmp	r3, #0
 800c762:	d13e      	bne.n	800c7e2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c764:	6878      	ldr	r0, [r7, #4]
 800c766:	f7ff ff79 	bl	800c65c <tcp_rexmit>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d138      	bne.n	800c7e2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c77c:	4293      	cmp	r3, r2
 800c77e:	bf28      	it	cs
 800c780:	4613      	movcs	r3, r2
 800c782:	b29b      	uxth	r3, r3
 800c784:	0fda      	lsrs	r2, r3, #31
 800c786:	4413      	add	r3, r2
 800c788:	105b      	asrs	r3, r3, #1
 800c78a:	b29a      	uxth	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800c798:	461a      	mov	r2, r3
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c79e:	005b      	lsls	r3, r3, #1
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d206      	bcs.n	800c7b2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7a8:	005b      	lsls	r3, r3, #1
 800c7aa:	b29a      	uxth	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7bc:	4619      	mov	r1, r3
 800c7be:	0049      	lsls	r1, r1, #1
 800c7c0:	440b      	add	r3, r1
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	4413      	add	r3, r2
 800c7c6:	b29a      	uxth	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	8b5b      	ldrh	r3, [r3, #26]
 800c7d2:	f043 0304 	orr.w	r3, r3, #4
 800c7d6:	b29a      	uxth	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800c7e2:	bf00      	nop
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	08012384 	.word	0x08012384
 800c7f0:	08012a3c 	.word	0x08012a3c
 800c7f4:	080123d8 	.word	0x080123d8

0800c7f8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b086      	sub	sp, #24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	60f8      	str	r0, [r7, #12]
 800c800:	607b      	str	r3, [r7, #4]
 800c802:	460b      	mov	r3, r1
 800c804:	817b      	strh	r3, [r7, #10]
 800c806:	4613      	mov	r3, r2
 800c808:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800c80a:	897a      	ldrh	r2, [r7, #10]
 800c80c:	893b      	ldrh	r3, [r7, #8]
 800c80e:	4413      	add	r3, r2
 800c810:	b29b      	uxth	r3, r3
 800c812:	3314      	adds	r3, #20
 800c814:	b29b      	uxth	r3, r3
 800c816:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c81a:	4619      	mov	r1, r3
 800c81c:	2022      	movs	r0, #34	; 0x22
 800c81e:	f7f9 fd11 	bl	8006244 <pbuf_alloc>
 800c822:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d04d      	beq.n	800c8c6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800c82a:	897b      	ldrh	r3, [r7, #10]
 800c82c:	3313      	adds	r3, #19
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	8952      	ldrh	r2, [r2, #10]
 800c832:	4293      	cmp	r3, r2
 800c834:	db06      	blt.n	800c844 <tcp_output_alloc_header_common+0x4c>
 800c836:	4b26      	ldr	r3, [pc, #152]	; (800c8d0 <tcp_output_alloc_header_common+0xd8>)
 800c838:	f240 7223 	movw	r2, #1827	; 0x723
 800c83c:	4925      	ldr	r1, [pc, #148]	; (800c8d4 <tcp_output_alloc_header_common+0xdc>)
 800c83e:	4826      	ldr	r0, [pc, #152]	; (800c8d8 <tcp_output_alloc_header_common+0xe0>)
 800c840:	f003 f9a0 	bl	800fb84 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800c84a:	8c3b      	ldrh	r3, [r7, #32]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f8 fbc7 	bl	8004fe0 <lwip_htons>
 800c852:	4603      	mov	r3, r0
 800c854:	461a      	mov	r2, r3
 800c856:	693b      	ldr	r3, [r7, #16]
 800c858:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800c85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7f8 fbbf 	bl	8004fe0 <lwip_htons>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7f8 fbca 	bl	800500a <lwip_htonl>
 800c876:	4602      	mov	r2, r0
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800c87c:	897b      	ldrh	r3, [r7, #10]
 800c87e:	089b      	lsrs	r3, r3, #2
 800c880:	b29b      	uxth	r3, r3
 800c882:	3305      	adds	r3, #5
 800c884:	b29b      	uxth	r3, r3
 800c886:	031b      	lsls	r3, r3, #12
 800c888:	b29a      	uxth	r2, r3
 800c88a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c88e:	b29b      	uxth	r3, r3
 800c890:	4313      	orrs	r3, r2
 800c892:	b29b      	uxth	r3, r3
 800c894:	4618      	mov	r0, r3
 800c896:	f7f8 fba3 	bl	8004fe0 <lwip_htons>
 800c89a:	4603      	mov	r3, r0
 800c89c:	461a      	mov	r2, r3
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800c8a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f7f8 fb9b 	bl	8004fe0 <lwip_htons>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	741a      	strb	r2, [r3, #16]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	749a      	strb	r2, [r3, #18]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800c8c6:	697b      	ldr	r3, [r7, #20]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3718      	adds	r7, #24
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}
 800c8d0:	08012384 	.word	0x08012384
 800c8d4:	08012a5c 	.word	0x08012a5c
 800c8d8:	080123d8 	.word	0x080123d8

0800c8dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800c8dc:	b5b0      	push	{r4, r5, r7, lr}
 800c8de:	b08a      	sub	sp, #40	; 0x28
 800c8e0:	af04      	add	r7, sp, #16
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	607b      	str	r3, [r7, #4]
 800c8e6:	460b      	mov	r3, r1
 800c8e8:	817b      	strh	r3, [r7, #10]
 800c8ea:	4613      	mov	r3, r2
 800c8ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d106      	bne.n	800c902 <tcp_output_alloc_header+0x26>
 800c8f4:	4b15      	ldr	r3, [pc, #84]	; (800c94c <tcp_output_alloc_header+0x70>)
 800c8f6:	f240 7242 	movw	r2, #1858	; 0x742
 800c8fa:	4915      	ldr	r1, [pc, #84]	; (800c950 <tcp_output_alloc_header+0x74>)
 800c8fc:	4815      	ldr	r0, [pc, #84]	; (800c954 <tcp_output_alloc_header+0x78>)
 800c8fe:	f003 f941 	bl	800fb84 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	8adb      	ldrh	r3, [r3, #22]
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	8b12      	ldrh	r2, [r2, #24]
 800c90e:	68f9      	ldr	r1, [r7, #12]
 800c910:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800c912:	893d      	ldrh	r5, [r7, #8]
 800c914:	897c      	ldrh	r4, [r7, #10]
 800c916:	9103      	str	r1, [sp, #12]
 800c918:	2110      	movs	r1, #16
 800c91a:	9102      	str	r1, [sp, #8]
 800c91c:	9201      	str	r2, [sp, #4]
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	462a      	mov	r2, r5
 800c924:	4621      	mov	r1, r4
 800c926:	f7ff ff67 	bl	800c7f8 <tcp_output_alloc_header_common>
 800c92a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d006      	beq.n	800c940 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800c93a:	441a      	add	r2, r3
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800c940:	697b      	ldr	r3, [r7, #20]
}
 800c942:	4618      	mov	r0, r3
 800c944:	3718      	adds	r7, #24
 800c946:	46bd      	mov	sp, r7
 800c948:	bdb0      	pop	{r4, r5, r7, pc}
 800c94a:	bf00      	nop
 800c94c:	08012384 	.word	0x08012384
 800c950:	08012a8c 	.word	0x08012a8c
 800c954:	080123d8 	.word	0x080123d8

0800c958 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	4611      	mov	r1, r2
 800c964:	461a      	mov	r2, r3
 800c966:	460b      	mov	r3, r1
 800c968:	71fb      	strb	r3, [r7, #7]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800c972:	68bb      	ldr	r3, [r7, #8]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d106      	bne.n	800c986 <tcp_output_fill_options+0x2e>
 800c978:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <tcp_output_fill_options+0x70>)
 800c97a:	f240 7256 	movw	r2, #1878	; 0x756
 800c97e:	4913      	ldr	r1, [pc, #76]	; (800c9cc <tcp_output_fill_options+0x74>)
 800c980:	4813      	ldr	r0, [pc, #76]	; (800c9d0 <tcp_output_fill_options+0x78>)
 800c982:	f003 f8ff 	bl	800fb84 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	685b      	ldr	r3, [r3, #4]
 800c98a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	3314      	adds	r3, #20
 800c990:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800c992:	69bb      	ldr	r3, [r7, #24]
 800c994:	f103 0214 	add.w	r2, r3, #20
 800c998:	8bfb      	ldrh	r3, [r7, #30]
 800c99a:	009b      	lsls	r3, r3, #2
 800c99c:	4619      	mov	r1, r3
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	f003 0304 	and.w	r3, r3, #4
 800c9a6:	440b      	add	r3, r1
 800c9a8:	4413      	add	r3, r2
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	429a      	cmp	r2, r3
 800c9ae:	d006      	beq.n	800c9be <tcp_output_fill_options+0x66>
 800c9b0:	4b05      	ldr	r3, [pc, #20]	; (800c9c8 <tcp_output_fill_options+0x70>)
 800c9b2:	f240 7275 	movw	r2, #1909	; 0x775
 800c9b6:	4907      	ldr	r1, [pc, #28]	; (800c9d4 <tcp_output_fill_options+0x7c>)
 800c9b8:	4805      	ldr	r0, [pc, #20]	; (800c9d0 <tcp_output_fill_options+0x78>)
 800c9ba:	f003 f8e3 	bl	800fb84 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800c9be:	bf00      	nop
 800c9c0:	3720      	adds	r7, #32
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	08012384 	.word	0x08012384
 800c9cc:	08012ab4 	.word	0x08012ab4
 800c9d0:	080123d8 	.word	0x080123d8
 800c9d4:	080129ac 	.word	0x080129ac

0800c9d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b08a      	sub	sp, #40	; 0x28
 800c9dc:	af04      	add	r7, sp, #16
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
 800c9e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d106      	bne.n	800c9fa <tcp_output_control_segment+0x22>
 800c9ec:	4b1c      	ldr	r3, [pc, #112]	; (800ca60 <tcp_output_control_segment+0x88>)
 800c9ee:	f240 7287 	movw	r2, #1927	; 0x787
 800c9f2:	491c      	ldr	r1, [pc, #112]	; (800ca64 <tcp_output_control_segment+0x8c>)
 800c9f4:	481c      	ldr	r0, [pc, #112]	; (800ca68 <tcp_output_control_segment+0x90>)
 800c9f6:	f003 f8c5 	bl	800fb84 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f7fe fae8 	bl	800afd4 <tcp_route>
 800ca04:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d102      	bne.n	800ca12 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800ca0c:	23fc      	movs	r3, #252	; 0xfc
 800ca0e:	75fb      	strb	r3, [r7, #23]
 800ca10:	e01c      	b.n	800ca4c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d006      	beq.n	800ca26 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	7adb      	ldrb	r3, [r3, #11]
 800ca1c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	7a9b      	ldrb	r3, [r3, #10]
 800ca22:	757b      	strb	r3, [r7, #21]
 800ca24:	e003      	b.n	800ca2e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800ca26:	23ff      	movs	r3, #255	; 0xff
 800ca28:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ca2e:	7dba      	ldrb	r2, [r7, #22]
 800ca30:	693b      	ldr	r3, [r7, #16]
 800ca32:	9302      	str	r3, [sp, #8]
 800ca34:	2306      	movs	r3, #6
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	7d7b      	ldrb	r3, [r7, #21]
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	683a      	ldr	r2, [r7, #0]
 800ca40:	6879      	ldr	r1, [r7, #4]
 800ca42:	68b8      	ldr	r0, [r7, #8]
 800ca44:	f001 ff96 	bl	800e974 <ip4_output_if>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ca4c:	68b8      	ldr	r0, [r7, #8]
 800ca4e:	f7f9 fedd 	bl	800680c <pbuf_free>
  return err;
 800ca52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	08012384 	.word	0x08012384
 800ca64:	08012adc 	.word	0x08012adc
 800ca68:	080123d8 	.word	0x080123d8

0800ca6c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800ca6c:	b590      	push	{r4, r7, lr}
 800ca6e:	b08b      	sub	sp, #44	; 0x2c
 800ca70:	af04      	add	r7, sp, #16
 800ca72:	60f8      	str	r0, [r7, #12]
 800ca74:	60b9      	str	r1, [r7, #8]
 800ca76:	607a      	str	r2, [r7, #4]
 800ca78:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d106      	bne.n	800ca8e <tcp_rst+0x22>
 800ca80:	4b1f      	ldr	r3, [pc, #124]	; (800cb00 <tcp_rst+0x94>)
 800ca82:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800ca86:	491f      	ldr	r1, [pc, #124]	; (800cb04 <tcp_rst+0x98>)
 800ca88:	481f      	ldr	r0, [pc, #124]	; (800cb08 <tcp_rst+0x9c>)
 800ca8a:	f003 f87b 	bl	800fb84 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800ca8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d106      	bne.n	800caa2 <tcp_rst+0x36>
 800ca94:	4b1a      	ldr	r3, [pc, #104]	; (800cb00 <tcp_rst+0x94>)
 800ca96:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800ca9a:	491c      	ldr	r1, [pc, #112]	; (800cb0c <tcp_rst+0xa0>)
 800ca9c:	481a      	ldr	r0, [pc, #104]	; (800cb08 <tcp_rst+0x9c>)
 800ca9e:	f003 f871 	bl	800fb84 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800caa2:	2300      	movs	r3, #0
 800caa4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800caa6:	f246 0308 	movw	r3, #24584	; 0x6008
 800caaa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800caac:	7dfb      	ldrb	r3, [r7, #23]
 800caae:	b29c      	uxth	r4, r3
 800cab0:	68b8      	ldr	r0, [r7, #8]
 800cab2:	f7f8 faaa 	bl	800500a <lwip_htonl>
 800cab6:	4602      	mov	r2, r0
 800cab8:	8abb      	ldrh	r3, [r7, #20]
 800caba:	9303      	str	r3, [sp, #12]
 800cabc:	2314      	movs	r3, #20
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800cac2:	9301      	str	r3, [sp, #4]
 800cac4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cac6:	9300      	str	r3, [sp, #0]
 800cac8:	4613      	mov	r3, r2
 800caca:	2200      	movs	r2, #0
 800cacc:	4621      	mov	r1, r4
 800cace:	6878      	ldr	r0, [r7, #4]
 800cad0:	f7ff fe92 	bl	800c7f8 <tcp_output_alloc_header_common>
 800cad4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800cad6:	693b      	ldr	r3, [r7, #16]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00c      	beq.n	800caf6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	2200      	movs	r2, #0
 800cae0:	6939      	ldr	r1, [r7, #16]
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f7ff ff38 	bl	800c958 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800cae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caea:	683a      	ldr	r2, [r7, #0]
 800caec:	6939      	ldr	r1, [r7, #16]
 800caee:	68f8      	ldr	r0, [r7, #12]
 800caf0:	f7ff ff72 	bl	800c9d8 <tcp_output_control_segment>
 800caf4:	e000      	b.n	800caf8 <tcp_rst+0x8c>
    return;
 800caf6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800caf8:	371c      	adds	r7, #28
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd90      	pop	{r4, r7, pc}
 800cafe:	bf00      	nop
 800cb00:	08012384 	.word	0x08012384
 800cb04:	08012b08 	.word	0x08012b08
 800cb08:	080123d8 	.word	0x080123d8
 800cb0c:	08012b24 	.word	0x08012b24

0800cb10 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d106      	bne.n	800cb34 <tcp_send_empty_ack+0x24>
 800cb26:	4b28      	ldr	r3, [pc, #160]	; (800cbc8 <tcp_send_empty_ack+0xb8>)
 800cb28:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800cb2c:	4927      	ldr	r1, [pc, #156]	; (800cbcc <tcp_send_empty_ack+0xbc>)
 800cb2e:	4828      	ldr	r0, [pc, #160]	; (800cbd0 <tcp_send_empty_ack+0xc0>)
 800cb30:	f003 f828 	bl	800fb84 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800cb34:	7dfb      	ldrb	r3, [r7, #23]
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f003 0304 	and.w	r3, r3, #4
 800cb3e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800cb40:	7d7b      	ldrb	r3, [r7, #21]
 800cb42:	b29c      	uxth	r4, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7f8 fa5e 	bl	800500a <lwip_htonl>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2200      	movs	r2, #0
 800cb52:	4621      	mov	r1, r4
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f7ff fec1 	bl	800c8dc <tcp_output_alloc_header>
 800cb5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d109      	bne.n	800cb76 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	8b5b      	ldrh	r3, [r3, #26]
 800cb66:	f043 0303 	orr.w	r3, r3, #3
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800cb70:	f06f 0301 	mvn.w	r3, #1
 800cb74:	e023      	b.n	800cbbe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800cb76:	7dbb      	ldrb	r3, [r7, #22]
 800cb78:	7dfa      	ldrb	r2, [r7, #23]
 800cb7a:	6939      	ldr	r1, [r7, #16]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7ff feeb 	bl	800c958 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb82:	687a      	ldr	r2, [r7, #4]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	3304      	adds	r3, #4
 800cb88:	6939      	ldr	r1, [r7, #16]
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f7ff ff24 	bl	800c9d8 <tcp_output_control_segment>
 800cb90:	4603      	mov	r3, r0
 800cb92:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800cb94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d007      	beq.n	800cbac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	8b5b      	ldrh	r3, [r3, #26]
 800cba0:	f043 0303 	orr.w	r3, r3, #3
 800cba4:	b29a      	uxth	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	835a      	strh	r2, [r3, #26]
 800cbaa:	e006      	b.n	800cbba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	8b5b      	ldrh	r3, [r3, #26]
 800cbb0:	f023 0303 	bic.w	r3, r3, #3
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800cbba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd90      	pop	{r4, r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	08012384 	.word	0x08012384
 800cbcc:	08012b40 	.word	0x08012b40
 800cbd0:	080123d8 	.word	0x080123d8

0800cbd4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800cbd4:	b590      	push	{r4, r7, lr}
 800cbd6:	b087      	sub	sp, #28
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cbdc:	2300      	movs	r3, #0
 800cbde:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d106      	bne.n	800cbf4 <tcp_keepalive+0x20>
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <tcp_keepalive+0x74>)
 800cbe8:	f640 0224 	movw	r2, #2084	; 0x824
 800cbec:	4917      	ldr	r1, [pc, #92]	; (800cc4c <tcp_keepalive+0x78>)
 800cbee:	4818      	ldr	r0, [pc, #96]	; (800cc50 <tcp_keepalive+0x7c>)
 800cbf0:	f002 ffc8 	bl	800fb84 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800cbf4:	7dfb      	ldrb	r3, [r7, #23]
 800cbf6:	b29c      	uxth	r4, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbfc:	3b01      	subs	r3, #1
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7f8 fa03 	bl	800500a <lwip_htonl>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2200      	movs	r2, #0
 800cc08:	4621      	mov	r1, r4
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f7ff fe66 	bl	800c8dc <tcp_output_alloc_header>
 800cc10:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800cc18:	f04f 33ff 	mov.w	r3, #4294967295
 800cc1c:	e010      	b.n	800cc40 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	2200      	movs	r2, #0
 800cc22:	6939      	ldr	r1, [r7, #16]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f7ff fe97 	bl	800c958 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	6939      	ldr	r1, [r7, #16]
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fed0 	bl	800c9d8 <tcp_output_control_segment>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cc3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	371c      	adds	r7, #28
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}
 800cc48:	08012384 	.word	0x08012384
 800cc4c:	08012b60 	.word	0x08012b60
 800cc50:	080123d8 	.word	0x080123d8

0800cc54 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800cc54:	b590      	push	{r4, r7, lr}
 800cc56:	b08b      	sub	sp, #44	; 0x2c
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <tcp_zero_window_probe+0x22>
 800cc68:	4b4c      	ldr	r3, [pc, #304]	; (800cd9c <tcp_zero_window_probe+0x148>)
 800cc6a:	f640 024f 	movw	r2, #2127	; 0x84f
 800cc6e:	494c      	ldr	r1, [pc, #304]	; (800cda0 <tcp_zero_window_probe+0x14c>)
 800cc70:	484c      	ldr	r0, [pc, #304]	; (800cda4 <tcp_zero_window_probe+0x150>)
 800cc72:	f002 ff87 	bl	800fb84 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc7a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800cc7c:	6a3b      	ldr	r3, [r7, #32]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d101      	bne.n	800cc86 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	e086      	b.n	800cd94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc8c:	2bff      	cmp	r3, #255	; 0xff
 800cc8e:	d007      	beq.n	800cca0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800cc96:	3301      	adds	r3, #1
 800cc98:	b2da      	uxtb	r2, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cca0:	6a3b      	ldr	r3, [r7, #32]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	899b      	ldrh	r3, [r3, #12]
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7f8 f999 	bl	8004fe0 <lwip_htons>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d005      	beq.n	800ccc6 <tcp_zero_window_probe+0x72>
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	891b      	ldrh	r3, [r3, #8]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d101      	bne.n	800ccc6 <tcp_zero_window_probe+0x72>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	e000      	b.n	800ccc8 <tcp_zero_window_probe+0x74>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ccca:	7ffb      	ldrb	r3, [r7, #31]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	bf0c      	ite	eq
 800ccd0:	2301      	moveq	r3, #1
 800ccd2:	2300      	movne	r3, #0
 800ccd4:	b2db      	uxtb	r3, r3
 800ccd6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ccd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccdc:	b299      	uxth	r1, r3
 800ccde:	6a3b      	ldr	r3, [r7, #32]
 800cce0:	68db      	ldr	r3, [r3, #12]
 800cce2:	685b      	ldr	r3, [r3, #4]
 800cce4:	8bba      	ldrh	r2, [r7, #28]
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fdf8 	bl	800c8dc <tcp_output_alloc_header>
 800ccec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ccee:	69bb      	ldr	r3, [r7, #24]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ccf4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf8:	e04c      	b.n	800cd94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ccfa:	69bb      	ldr	r3, [r7, #24]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800cd00:	7ffb      	ldrb	r3, [r7, #31]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d011      	beq.n	800cd2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	899b      	ldrh	r3, [r3, #12]
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	b21b      	sxth	r3, r3
 800cd0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd12:	b21c      	sxth	r4, r3
 800cd14:	2011      	movs	r0, #17
 800cd16:	f7f8 f963 	bl	8004fe0 <lwip_htons>
 800cd1a:	4603      	mov	r3, r0
 800cd1c:	b21b      	sxth	r3, r3
 800cd1e:	4323      	orrs	r3, r4
 800cd20:	b21b      	sxth	r3, r3
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	819a      	strh	r2, [r3, #12]
 800cd28:	e010      	b.n	800cd4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	685b      	ldr	r3, [r3, #4]
 800cd2e:	3314      	adds	r3, #20
 800cd30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	6858      	ldr	r0, [r3, #4]
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	685b      	ldr	r3, [r3, #4]
 800cd3a:	891a      	ldrh	r2, [r3, #8]
 800cd3c:	6a3b      	ldr	r3, [r7, #32]
 800cd3e:	891b      	ldrh	r3, [r3, #8]
 800cd40:	1ad3      	subs	r3, r2, r3
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	2201      	movs	r2, #1
 800cd46:	6939      	ldr	r1, [r7, #16]
 800cd48:	f7f9 ff5a 	bl	8006c00 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	685b      	ldr	r3, [r3, #4]
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f8 f959 	bl	800500a <lwip_htonl>
 800cd58:	4603      	mov	r3, r0
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	1ad3      	subs	r3, r2, r3
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	da02      	bge.n	800cd70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cd70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd74:	2200      	movs	r2, #0
 800cd76:	69b9      	ldr	r1, [r7, #24]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff fded 	bl	800c958 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	3304      	adds	r3, #4
 800cd84:	69b9      	ldr	r1, [r7, #24]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f7ff fe26 	bl	800c9d8 <tcp_output_control_segment>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800cd90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	372c      	adds	r7, #44	; 0x2c
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd90      	pop	{r4, r7, pc}
 800cd9c:	08012384 	.word	0x08012384
 800cda0:	08012b7c 	.word	0x08012b7c
 800cda4:	080123d8 	.word	0x080123d8

0800cda8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b082      	sub	sp, #8
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800cdb0:	f7fa f814 	bl	8006ddc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cdb4:	4b0a      	ldr	r3, [pc, #40]	; (800cde0 <tcpip_tcp_timer+0x38>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d103      	bne.n	800cdc4 <tcpip_tcp_timer+0x1c>
 800cdbc:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <tcpip_tcp_timer+0x3c>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d005      	beq.n	800cdd0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4908      	ldr	r1, [pc, #32]	; (800cde8 <tcpip_tcp_timer+0x40>)
 800cdc8:	20fa      	movs	r0, #250	; 0xfa
 800cdca:	f000 f8f3 	bl	800cfb4 <sys_timeout>
 800cdce:	e003      	b.n	800cdd8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800cdd0:	4b06      	ldr	r3, [pc, #24]	; (800cdec <tcpip_tcp_timer+0x44>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
  }
}
 800cdd6:	bf00      	nop
 800cdd8:	bf00      	nop
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20008150 	.word	0x20008150
 800cde4:	20008154 	.word	0x20008154
 800cde8:	0800cda9 	.word	0x0800cda9
 800cdec:	2000819c 	.word	0x2000819c

0800cdf0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cdf4:	4b0a      	ldr	r3, [pc, #40]	; (800ce20 <tcp_timer_needed+0x30>)
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10f      	bne.n	800ce1c <tcp_timer_needed+0x2c>
 800cdfc:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <tcp_timer_needed+0x34>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d103      	bne.n	800ce0c <tcp_timer_needed+0x1c>
 800ce04:	4b08      	ldr	r3, [pc, #32]	; (800ce28 <tcp_timer_needed+0x38>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d007      	beq.n	800ce1c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800ce0c:	4b04      	ldr	r3, [pc, #16]	; (800ce20 <tcp_timer_needed+0x30>)
 800ce0e:	2201      	movs	r2, #1
 800ce10:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800ce12:	2200      	movs	r2, #0
 800ce14:	4905      	ldr	r1, [pc, #20]	; (800ce2c <tcp_timer_needed+0x3c>)
 800ce16:	20fa      	movs	r0, #250	; 0xfa
 800ce18:	f000 f8cc 	bl	800cfb4 <sys_timeout>
  }
}
 800ce1c:	bf00      	nop
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000819c 	.word	0x2000819c
 800ce24:	20008150 	.word	0x20008150
 800ce28:	20008154 	.word	0x20008154
 800ce2c:	0800cda9 	.word	0x0800cda9

0800ce30 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800ce3c:	2006      	movs	r0, #6
 800ce3e:	f7f8 fdff 	bl	8005a40 <memp_malloc>
 800ce42:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ce44:	693b      	ldr	r3, [r7, #16]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d109      	bne.n	800ce5e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d151      	bne.n	800cef4 <sys_timeout_abs+0xc4>
 800ce50:	4b2a      	ldr	r3, [pc, #168]	; (800cefc <sys_timeout_abs+0xcc>)
 800ce52:	22be      	movs	r2, #190	; 0xbe
 800ce54:	492a      	ldr	r1, [pc, #168]	; (800cf00 <sys_timeout_abs+0xd0>)
 800ce56:	482b      	ldr	r0, [pc, #172]	; (800cf04 <sys_timeout_abs+0xd4>)
 800ce58:	f002 fe94 	bl	800fb84 <iprintf>
    return;
 800ce5c:	e04a      	b.n	800cef4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	2200      	movs	r2, #0
 800ce62:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	68fa      	ldr	r2, [r7, #12]
 800ce74:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ce76:	4b24      	ldr	r3, [pc, #144]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d103      	bne.n	800ce86 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ce7e:	4a22      	ldr	r2, [pc, #136]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ce80:	693b      	ldr	r3, [r7, #16]
 800ce82:	6013      	str	r3, [r2, #0]
    return;
 800ce84:	e037      	b.n	800cef6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	685a      	ldr	r2, [r3, #4]
 800ce8a:	4b1f      	ldr	r3, [pc, #124]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	1ad3      	subs	r3, r2, r3
 800ce92:	0fdb      	lsrs	r3, r3, #31
 800ce94:	f003 0301 	and.w	r3, r3, #1
 800ce98:	b2db      	uxtb	r3, r3
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d007      	beq.n	800ceae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ce9e:	4b1a      	ldr	r3, [pc, #104]	; (800cf08 <sys_timeout_abs+0xd8>)
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800cea6:	4a18      	ldr	r2, [pc, #96]	; (800cf08 <sys_timeout_abs+0xd8>)
 800cea8:	693b      	ldr	r3, [r7, #16]
 800ceaa:	6013      	str	r3, [r2, #0]
 800ceac:	e023      	b.n	800cef6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ceae:	4b16      	ldr	r3, [pc, #88]	; (800cf08 <sys_timeout_abs+0xd8>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	617b      	str	r3, [r7, #20]
 800ceb4:	e01a      	b.n	800ceec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00b      	beq.n	800ced6 <sys_timeout_abs+0xa6>
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	685b      	ldr	r3, [r3, #4]
 800cec8:	1ad3      	subs	r3, r2, r3
 800ceca:	0fdb      	lsrs	r3, r3, #31
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d007      	beq.n	800cee6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	693a      	ldr	r2, [r7, #16]
 800cee2:	601a      	str	r2, [r3, #0]
        break;
 800cee4:	e007      	b.n	800cef6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	617b      	str	r3, [r7, #20]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d1e1      	bne.n	800ceb6 <sys_timeout_abs+0x86>
 800cef2:	e000      	b.n	800cef6 <sys_timeout_abs+0xc6>
    return;
 800cef4:	bf00      	nop
      }
    }
  }
}
 800cef6:	3718      	adds	r7, #24
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	08012ba0 	.word	0x08012ba0
 800cf00:	08012bd4 	.word	0x08012bd4
 800cf04:	08012c14 	.word	0x08012c14
 800cf08:	20008194 	.word	0x20008194

0800cf0c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	4798      	blx	r3

  now = sys_now();
 800cf1e:	f7f7 fe3f 	bl	8004ba0 <sys_now>
 800cf22:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	4b0f      	ldr	r3, [pc, #60]	; (800cf68 <lwip_cyclic_timer+0x5c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	4413      	add	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cf30:	68fa      	ldr	r2, [r7, #12]
 800cf32:	693b      	ldr	r3, [r7, #16]
 800cf34:	1ad3      	subs	r3, r2, r3
 800cf36:	0fdb      	lsrs	r3, r3, #31
 800cf38:	f003 0301 	and.w	r3, r3, #1
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d009      	beq.n	800cf56 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	4413      	add	r3, r2
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	4907      	ldr	r1, [pc, #28]	; (800cf6c <lwip_cyclic_timer+0x60>)
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7ff ff6e 	bl	800ce30 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800cf54:	e004      	b.n	800cf60 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	4904      	ldr	r1, [pc, #16]	; (800cf6c <lwip_cyclic_timer+0x60>)
 800cf5a:	68f8      	ldr	r0, [r7, #12]
 800cf5c:	f7ff ff68 	bl	800ce30 <sys_timeout_abs>
}
 800cf60:	bf00      	nop
 800cf62:	3718      	adds	r7, #24
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20008198 	.word	0x20008198
 800cf6c:	0800cf0d 	.word	0x0800cf0d

0800cf70 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf76:	2301      	movs	r3, #1
 800cf78:	607b      	str	r3, [r7, #4]
 800cf7a:	e00e      	b.n	800cf9a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800cf7c:	4a0b      	ldr	r2, [pc, #44]	; (800cfac <sys_timeouts_init+0x3c>)
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	4a08      	ldr	r2, [pc, #32]	; (800cfac <sys_timeouts_init+0x3c>)
 800cf8a:	4413      	add	r3, r2
 800cf8c:	461a      	mov	r2, r3
 800cf8e:	4908      	ldr	r1, [pc, #32]	; (800cfb0 <sys_timeouts_init+0x40>)
 800cf90:	f000 f810 	bl	800cfb4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	3301      	adds	r3, #1
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b02      	cmp	r3, #2
 800cf9e:	d9ed      	bls.n	800cf7c <sys_timeouts_init+0xc>
  }
}
 800cfa0:	bf00      	nop
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	0801378c 	.word	0x0801378c
 800cfb0:	0800cf0d 	.word	0x0800cf0d

0800cfb4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b086      	sub	sp, #24
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfc6:	d306      	bcc.n	800cfd6 <sys_timeout+0x22>
 800cfc8:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <sys_timeout+0x40>)
 800cfca:	f240 1229 	movw	r2, #297	; 0x129
 800cfce:	490a      	ldr	r1, [pc, #40]	; (800cff8 <sys_timeout+0x44>)
 800cfd0:	480a      	ldr	r0, [pc, #40]	; (800cffc <sys_timeout+0x48>)
 800cfd2:	f002 fdd7 	bl	800fb84 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cfd6:	f7f7 fde3 	bl	8004ba0 <sys_now>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	6978      	ldr	r0, [r7, #20]
 800cfe8:	f7ff ff22 	bl	800ce30 <sys_timeout_abs>
#endif
}
 800cfec:	bf00      	nop
 800cfee:	3718      	adds	r7, #24
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	08012ba0 	.word	0x08012ba0
 800cff8:	08012c3c 	.word	0x08012c3c
 800cffc:	08012c14 	.word	0x08012c14

0800d000 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800d006:	f7f7 fdcb 	bl	8004ba0 <sys_now>
 800d00a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800d00c:	4b1a      	ldr	r3, [pc, #104]	; (800d078 <sys_check_timeouts+0x78>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	b2db      	uxtb	r3, r3
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <sys_check_timeouts+0x1a>
 800d016:	f7f9 f8bf 	bl	8006198 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <sys_check_timeouts+0x7c>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d022      	beq.n	800d06c <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	68fa      	ldr	r2, [r7, #12]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	0fdb      	lsrs	r3, r3, #31
 800d030:	f003 0301 	and.w	r3, r3, #1
 800d034:	b2db      	uxtb	r3, r3
 800d036:	2b00      	cmp	r3, #0
 800d038:	d11a      	bne.n	800d070 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	4a0f      	ldr	r2, [pc, #60]	; (800d07c <sys_check_timeouts+0x7c>)
 800d040:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	4a0b      	ldr	r2, [pc, #44]	; (800d080 <sys_check_timeouts+0x80>)
 800d054:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800d056:	68b9      	ldr	r1, [r7, #8]
 800d058:	2006      	movs	r0, #6
 800d05a:	f7f8 fd61 	bl	8005b20 <memp_free>
    if (handler != NULL) {
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0d3      	beq.n	800d00c <sys_check_timeouts+0xc>
      handler(arg);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6838      	ldr	r0, [r7, #0]
 800d068:	4798      	blx	r3
  do {
 800d06a:	e7cf      	b.n	800d00c <sys_check_timeouts+0xc>
      return;
 800d06c:	bf00      	nop
 800d06e:	e000      	b.n	800d072 <sys_check_timeouts+0x72>
      return;
 800d070:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}
 800d078:	20008141 	.word	0x20008141
 800d07c:	20008194 	.word	0x20008194
 800d080:	20008198 	.word	0x20008198

0800d084 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d088:	f002 fd94 	bl	800fbb4 <rand>
 800d08c:	4603      	mov	r3, r0
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d094:	b29b      	uxth	r3, r3
 800d096:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d09a:	b29a      	uxth	r2, r3
 800d09c:	4b01      	ldr	r3, [pc, #4]	; (800d0a4 <udp_init+0x20>)
 800d09e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d0a0:	bf00      	nop
 800d0a2:	bd80      	pop	{r7, pc}
 800d0a4:	20000028 	.word	0x20000028

0800d0a8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	4613      	mov	r3, r2
 800d0b4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d105      	bne.n	800d0c8 <udp_input_local_match+0x20>
 800d0bc:	4b27      	ldr	r3, [pc, #156]	; (800d15c <udp_input_local_match+0xb4>)
 800d0be:	2287      	movs	r2, #135	; 0x87
 800d0c0:	4927      	ldr	r1, [pc, #156]	; (800d160 <udp_input_local_match+0xb8>)
 800d0c2:	4828      	ldr	r0, [pc, #160]	; (800d164 <udp_input_local_match+0xbc>)
 800d0c4:	f002 fd5e 	bl	800fb84 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d105      	bne.n	800d0da <udp_input_local_match+0x32>
 800d0ce:	4b23      	ldr	r3, [pc, #140]	; (800d15c <udp_input_local_match+0xb4>)
 800d0d0:	2288      	movs	r2, #136	; 0x88
 800d0d2:	4925      	ldr	r1, [pc, #148]	; (800d168 <udp_input_local_match+0xc0>)
 800d0d4:	4823      	ldr	r0, [pc, #140]	; (800d164 <udp_input_local_match+0xbc>)
 800d0d6:	f002 fd55 	bl	800fb84 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	7a1b      	ldrb	r3, [r3, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00b      	beq.n	800d0fa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	7a1a      	ldrb	r2, [r3, #8]
 800d0e6:	4b21      	ldr	r3, [pc, #132]	; (800d16c <udp_input_local_match+0xc4>)
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0ee:	3301      	adds	r3, #1
 800d0f0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d001      	beq.n	800d0fa <udp_input_local_match+0x52>
    return 0;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	e02b      	b.n	800d152 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800d0fa:	79fb      	ldrb	r3, [r7, #7]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d018      	beq.n	800d132 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d013      	beq.n	800d12e <udp_input_local_match+0x86>
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00f      	beq.n	800d12e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d10e:	4b17      	ldr	r3, [pc, #92]	; (800d16c <udp_input_local_match+0xc4>)
 800d110:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800d112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d116:	d00a      	beq.n	800d12e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681a      	ldr	r2, [r3, #0]
 800d11c:	4b13      	ldr	r3, [pc, #76]	; (800d16c <udp_input_local_match+0xc4>)
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	405a      	eors	r2, r3
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	3308      	adds	r3, #8
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d110      	bne.n	800d150 <udp_input_local_match+0xa8>
          return 1;
 800d12e:	2301      	movs	r3, #1
 800d130:	e00f      	b.n	800d152 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d009      	beq.n	800d14c <udp_input_local_match+0xa4>
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d005      	beq.n	800d14c <udp_input_local_match+0xa4>
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	4b09      	ldr	r3, [pc, #36]	; (800d16c <udp_input_local_match+0xc4>)
 800d146:	695b      	ldr	r3, [r3, #20]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d101      	bne.n	800d150 <udp_input_local_match+0xa8>
        return 1;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e000      	b.n	800d152 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800d150:	2300      	movs	r3, #0
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	08012c88 	.word	0x08012c88
 800d160:	08012cb8 	.word	0x08012cb8
 800d164:	08012cdc 	.word	0x08012cdc
 800d168:	08012d04 	.word	0x08012d04
 800d16c:	20005228 	.word	0x20005228

0800d170 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800d170:	b590      	push	{r4, r7, lr}
 800d172:	b08d      	sub	sp, #52	; 0x34
 800d174:	af02      	add	r7, sp, #8
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d105      	bne.n	800d190 <udp_input+0x20>
 800d184:	4b7c      	ldr	r3, [pc, #496]	; (800d378 <udp_input+0x208>)
 800d186:	22cf      	movs	r2, #207	; 0xcf
 800d188:	497c      	ldr	r1, [pc, #496]	; (800d37c <udp_input+0x20c>)
 800d18a:	487d      	ldr	r0, [pc, #500]	; (800d380 <udp_input+0x210>)
 800d18c:	f002 fcfa 	bl	800fb84 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d105      	bne.n	800d1a2 <udp_input+0x32>
 800d196:	4b78      	ldr	r3, [pc, #480]	; (800d378 <udp_input+0x208>)
 800d198:	22d0      	movs	r2, #208	; 0xd0
 800d19a:	497a      	ldr	r1, [pc, #488]	; (800d384 <udp_input+0x214>)
 800d19c:	4878      	ldr	r0, [pc, #480]	; (800d380 <udp_input+0x210>)
 800d19e:	f002 fcf1 	bl	800fb84 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	895b      	ldrh	r3, [r3, #10]
 800d1a6:	2b07      	cmp	r3, #7
 800d1a8:	d803      	bhi.n	800d1b2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f7f9 fb2e 	bl	800680c <pbuf_free>
    goto end;
 800d1b0:	e0de      	b.n	800d370 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800d1b8:	4b73      	ldr	r3, [pc, #460]	; (800d388 <udp_input+0x218>)
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	4a72      	ldr	r2, [pc, #456]	; (800d388 <udp_input+0x218>)
 800d1be:	6812      	ldr	r2, [r2, #0]
 800d1c0:	4611      	mov	r1, r2
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f001 fcae 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7f7 ff04 	bl	8004fe0 <lwip_htons>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	885b      	ldrh	r3, [r3, #2]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f7f7 fefc 	bl	8004fe0 <lwip_htons>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1f8:	4b64      	ldr	r3, [pc, #400]	; (800d38c <udp_input+0x21c>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	627b      	str	r3, [r7, #36]	; 0x24
 800d1fe:	e054      	b.n	800d2aa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	8a5b      	ldrh	r3, [r3, #18]
 800d204:	89fa      	ldrh	r2, [r7, #14]
 800d206:	429a      	cmp	r2, r3
 800d208:	d14a      	bne.n	800d2a0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800d20a:	7cfb      	ldrb	r3, [r7, #19]
 800d20c:	461a      	mov	r2, r3
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d212:	f7ff ff49 	bl	800d0a8 <udp_input_local_match>
 800d216:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d041      	beq.n	800d2a0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800d21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21e:	7c1b      	ldrb	r3, [r3, #16]
 800d220:	f003 0304 	and.w	r3, r3, #4
 800d224:	2b00      	cmp	r3, #0
 800d226:	d11d      	bne.n	800d264 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800d22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d230:	61fb      	str	r3, [r7, #28]
 800d232:	e017      	b.n	800d264 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800d234:	7cfb      	ldrb	r3, [r7, #19]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d014      	beq.n	800d264 <udp_input+0xf4>
 800d23a:	4b53      	ldr	r3, [pc, #332]	; (800d388 <udp_input+0x218>)
 800d23c:	695b      	ldr	r3, [r3, #20]
 800d23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d242:	d10f      	bne.n	800d264 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	681a      	ldr	r2, [r3, #0]
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	3304      	adds	r3, #4
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d008      	beq.n	800d264 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800d252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d254:	681a      	ldr	r2, [r3, #0]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	3304      	adds	r3, #4
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d101      	bne.n	800d264 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800d260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d262:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800d264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d266:	8a9b      	ldrh	r3, [r3, #20]
 800d268:	8a3a      	ldrh	r2, [r7, #16]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d118      	bne.n	800d2a0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d270:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800d272:	2b00      	cmp	r3, #0
 800d274:	d005      	beq.n	800d282 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	685a      	ldr	r2, [r3, #4]
 800d27a:	4b43      	ldr	r3, [pc, #268]	; (800d388 <udp_input+0x218>)
 800d27c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800d27e:	429a      	cmp	r2, r3
 800d280:	d10e      	bne.n	800d2a0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d014      	beq.n	800d2b2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	68da      	ldr	r2, [r3, #12]
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800d290:	4b3e      	ldr	r3, [pc, #248]	; (800d38c <udp_input+0x21c>)
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800d298:	4a3c      	ldr	r2, [pc, #240]	; (800d38c <udp_input+0x21c>)
 800d29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d29c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800d29e:	e008      	b.n	800d2b2 <udp_input+0x142>
      }
    }

    prev = pcb;
 800d2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2a6:	68db      	ldr	r3, [r3, #12]
 800d2a8:	627b      	str	r3, [r7, #36]	; 0x24
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d1a7      	bne.n	800d200 <udp_input+0x90>
 800d2b0:	e000      	b.n	800d2b4 <udp_input+0x144>
        break;
 800d2b2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <udp_input+0x14e>
    pcb = uncon_pcb;
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800d2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <udp_input+0x15a>
    for_us = 1;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	76fb      	strb	r3, [r7, #27]
 800d2c8:	e00a      	b.n	800d2e0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	681a      	ldr	r2, [r3, #0]
 800d2d0:	4b2d      	ldr	r3, [pc, #180]	; (800d388 <udp_input+0x218>)
 800d2d2:	695b      	ldr	r3, [r3, #20]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	bf0c      	ite	eq
 800d2d8:	2301      	moveq	r3, #1
 800d2da:	2300      	movne	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800d2e0:	7efb      	ldrb	r3, [r7, #27]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d041      	beq.n	800d36a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800d2e6:	2108      	movs	r1, #8
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f7f9 fa09 	bl	8006700 <pbuf_remove_header>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00a      	beq.n	800d30a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800d2f4:	4b20      	ldr	r3, [pc, #128]	; (800d378 <udp_input+0x208>)
 800d2f6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800d2fa:	4925      	ldr	r1, [pc, #148]	; (800d390 <udp_input+0x220>)
 800d2fc:	4820      	ldr	r0, [pc, #128]	; (800d380 <udp_input+0x210>)
 800d2fe:	f002 fc41 	bl	800fb84 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7f9 fa82 	bl	800680c <pbuf_free>
      goto end;
 800d308:	e032      	b.n	800d370 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d012      	beq.n	800d336 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d00a      	beq.n	800d32e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800d318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31a:	699c      	ldr	r4, [r3, #24]
 800d31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d31e:	69d8      	ldr	r0, [r3, #28]
 800d320:	8a3b      	ldrh	r3, [r7, #16]
 800d322:	9300      	str	r3, [sp, #0]
 800d324:	4b1b      	ldr	r3, [pc, #108]	; (800d394 <udp_input+0x224>)
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d32a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800d32c:	e021      	b.n	800d372 <udp_input+0x202>
        pbuf_free(p);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f7f9 fa6c 	bl	800680c <pbuf_free>
        goto end;
 800d334:	e01c      	b.n	800d370 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800d336:	7cfb      	ldrb	r3, [r7, #19]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d112      	bne.n	800d362 <udp_input+0x1f2>
 800d33c:	4b12      	ldr	r3, [pc, #72]	; (800d388 <udp_input+0x218>)
 800d33e:	695b      	ldr	r3, [r3, #20]
 800d340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d344:	2be0      	cmp	r3, #224	; 0xe0
 800d346:	d00c      	beq.n	800d362 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800d348:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <udp_input+0x218>)
 800d34a:	899b      	ldrh	r3, [r3, #12]
 800d34c:	3308      	adds	r3, #8
 800d34e:	b29b      	uxth	r3, r3
 800d350:	b21b      	sxth	r3, r3
 800d352:	4619      	mov	r1, r3
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f7f9 fa46 	bl	80067e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800d35a:	2103      	movs	r1, #3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f001 f8b7 	bl	800e4d0 <icmp_dest_unreach>
      pbuf_free(p);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f7f9 fa52 	bl	800680c <pbuf_free>
  return;
 800d368:	e003      	b.n	800d372 <udp_input+0x202>
    pbuf_free(p);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7f9 fa4e 	bl	800680c <pbuf_free>
  return;
 800d370:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800d372:	372c      	adds	r7, #44	; 0x2c
 800d374:	46bd      	mov	sp, r7
 800d376:	bd90      	pop	{r4, r7, pc}
 800d378:	08012c88 	.word	0x08012c88
 800d37c:	08012d2c 	.word	0x08012d2c
 800d380:	08012cdc 	.word	0x08012cdc
 800d384:	08012d44 	.word	0x08012d44
 800d388:	20005228 	.word	0x20005228
 800d38c:	200081a0 	.word	0x200081a0
 800d390:	08012d60 	.word	0x08012d60
 800d394:	20005238 	.word	0x20005238

0800d398 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d398:	b480      	push	{r7}
 800d39a:	b085      	sub	sp, #20
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
 800d3a0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01e      	beq.n	800d3e6 <udp_netif_ip_addr_changed+0x4e>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d01a      	beq.n	800d3e6 <udp_netif_ip_addr_changed+0x4e>
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d017      	beq.n	800d3e6 <udp_netif_ip_addr_changed+0x4e>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d013      	beq.n	800d3e6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d3be:	4b0d      	ldr	r3, [pc, #52]	; (800d3f4 <udp_netif_ip_addr_changed+0x5c>)
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	e00c      	b.n	800d3e0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d103      	bne.n	800d3da <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1ef      	bne.n	800d3c6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800d3e6:	bf00      	nop
 800d3e8:	3714      	adds	r7, #20
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	200081a0 	.word	0x200081a0

0800d3f8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b082      	sub	sp, #8
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d400:	4915      	ldr	r1, [pc, #84]	; (800d458 <etharp_free_entry+0x60>)
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	4613      	mov	r3, r2
 800d406:	005b      	lsls	r3, r3, #1
 800d408:	4413      	add	r3, r2
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	440b      	add	r3, r1
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d013      	beq.n	800d43c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d414:	4910      	ldr	r1, [pc, #64]	; (800d458 <etharp_free_entry+0x60>)
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	4613      	mov	r3, r2
 800d41a:	005b      	lsls	r3, r3, #1
 800d41c:	4413      	add	r3, r2
 800d41e:	00db      	lsls	r3, r3, #3
 800d420:	440b      	add	r3, r1
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4618      	mov	r0, r3
 800d426:	f7f9 f9f1 	bl	800680c <pbuf_free>
    arp_table[i].q = NULL;
 800d42a:	490b      	ldr	r1, [pc, #44]	; (800d458 <etharp_free_entry+0x60>)
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	4613      	mov	r3, r2
 800d430:	005b      	lsls	r3, r3, #1
 800d432:	4413      	add	r3, r2
 800d434:	00db      	lsls	r3, r3, #3
 800d436:	440b      	add	r3, r1
 800d438:	2200      	movs	r2, #0
 800d43a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d43c:	4906      	ldr	r1, [pc, #24]	; (800d458 <etharp_free_entry+0x60>)
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	4613      	mov	r3, r2
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	4413      	add	r3, r2
 800d446:	00db      	lsls	r3, r3, #3
 800d448:	440b      	add	r3, r1
 800d44a:	3314      	adds	r3, #20
 800d44c:	2200      	movs	r2, #0
 800d44e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	200081a4 	.word	0x200081a4

0800d45c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d462:	2300      	movs	r3, #0
 800d464:	607b      	str	r3, [r7, #4]
 800d466:	e096      	b.n	800d596 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d468:	494f      	ldr	r1, [pc, #316]	; (800d5a8 <etharp_tmr+0x14c>)
 800d46a:	687a      	ldr	r2, [r7, #4]
 800d46c:	4613      	mov	r3, r2
 800d46e:	005b      	lsls	r3, r3, #1
 800d470:	4413      	add	r3, r2
 800d472:	00db      	lsls	r3, r3, #3
 800d474:	440b      	add	r3, r1
 800d476:	3314      	adds	r3, #20
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d47c:	78fb      	ldrb	r3, [r7, #3]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f000 8086 	beq.w	800d590 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d484:	4948      	ldr	r1, [pc, #288]	; (800d5a8 <etharp_tmr+0x14c>)
 800d486:	687a      	ldr	r2, [r7, #4]
 800d488:	4613      	mov	r3, r2
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	4413      	add	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	440b      	add	r3, r1
 800d492:	3312      	adds	r3, #18
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	3301      	adds	r3, #1
 800d498:	b298      	uxth	r0, r3
 800d49a:	4943      	ldr	r1, [pc, #268]	; (800d5a8 <etharp_tmr+0x14c>)
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	005b      	lsls	r3, r3, #1
 800d4a2:	4413      	add	r3, r2
 800d4a4:	00db      	lsls	r3, r3, #3
 800d4a6:	440b      	add	r3, r1
 800d4a8:	3312      	adds	r3, #18
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d4ae:	493e      	ldr	r1, [pc, #248]	; (800d5a8 <etharp_tmr+0x14c>)
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	4413      	add	r3, r2
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	440b      	add	r3, r1
 800d4bc:	3312      	adds	r3, #18
 800d4be:	881b      	ldrh	r3, [r3, #0]
 800d4c0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d4c4:	d215      	bcs.n	800d4f2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d4c6:	4938      	ldr	r1, [pc, #224]	; (800d5a8 <etharp_tmr+0x14c>)
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	005b      	lsls	r3, r3, #1
 800d4ce:	4413      	add	r3, r2
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3314      	adds	r3, #20
 800d4d6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	d10e      	bne.n	800d4fa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d4dc:	4932      	ldr	r1, [pc, #200]	; (800d5a8 <etharp_tmr+0x14c>)
 800d4de:	687a      	ldr	r2, [r7, #4]
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	005b      	lsls	r3, r3, #1
 800d4e4:	4413      	add	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	440b      	add	r3, r1
 800d4ea:	3312      	adds	r3, #18
 800d4ec:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d4ee:	2b04      	cmp	r3, #4
 800d4f0:	d903      	bls.n	800d4fa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff ff80 	bl	800d3f8 <etharp_free_entry>
 800d4f8:	e04a      	b.n	800d590 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d4fa:	492b      	ldr	r1, [pc, #172]	; (800d5a8 <etharp_tmr+0x14c>)
 800d4fc:	687a      	ldr	r2, [r7, #4]
 800d4fe:	4613      	mov	r3, r2
 800d500:	005b      	lsls	r3, r3, #1
 800d502:	4413      	add	r3, r2
 800d504:	00db      	lsls	r3, r3, #3
 800d506:	440b      	add	r3, r1
 800d508:	3314      	adds	r3, #20
 800d50a:	781b      	ldrb	r3, [r3, #0]
 800d50c:	2b03      	cmp	r3, #3
 800d50e:	d10a      	bne.n	800d526 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d510:	4925      	ldr	r1, [pc, #148]	; (800d5a8 <etharp_tmr+0x14c>)
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	4613      	mov	r3, r2
 800d516:	005b      	lsls	r3, r3, #1
 800d518:	4413      	add	r3, r2
 800d51a:	00db      	lsls	r3, r3, #3
 800d51c:	440b      	add	r3, r1
 800d51e:	3314      	adds	r3, #20
 800d520:	2204      	movs	r2, #4
 800d522:	701a      	strb	r2, [r3, #0]
 800d524:	e034      	b.n	800d590 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d526:	4920      	ldr	r1, [pc, #128]	; (800d5a8 <etharp_tmr+0x14c>)
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	440b      	add	r3, r1
 800d534:	3314      	adds	r3, #20
 800d536:	781b      	ldrb	r3, [r3, #0]
 800d538:	2b04      	cmp	r3, #4
 800d53a:	d10a      	bne.n	800d552 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d53c:	491a      	ldr	r1, [pc, #104]	; (800d5a8 <etharp_tmr+0x14c>)
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	4613      	mov	r3, r2
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	4413      	add	r3, r2
 800d546:	00db      	lsls	r3, r3, #3
 800d548:	440b      	add	r3, r1
 800d54a:	3314      	adds	r3, #20
 800d54c:	2202      	movs	r2, #2
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e01e      	b.n	800d590 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d552:	4915      	ldr	r1, [pc, #84]	; (800d5a8 <etharp_tmr+0x14c>)
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	4613      	mov	r3, r2
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	4413      	add	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	440b      	add	r3, r1
 800d560:	3314      	adds	r3, #20
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d113      	bne.n	800d590 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d568:	490f      	ldr	r1, [pc, #60]	; (800d5a8 <etharp_tmr+0x14c>)
 800d56a:	687a      	ldr	r2, [r7, #4]
 800d56c:	4613      	mov	r3, r2
 800d56e:	005b      	lsls	r3, r3, #1
 800d570:	4413      	add	r3, r2
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	440b      	add	r3, r1
 800d576:	3308      	adds	r3, #8
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	4613      	mov	r3, r2
 800d57e:	005b      	lsls	r3, r3, #1
 800d580:	4413      	add	r3, r2
 800d582:	00db      	lsls	r3, r3, #3
 800d584:	4a08      	ldr	r2, [pc, #32]	; (800d5a8 <etharp_tmr+0x14c>)
 800d586:	4413      	add	r3, r2
 800d588:	3304      	adds	r3, #4
 800d58a:	4619      	mov	r1, r3
 800d58c:	f000 fe6e 	bl	800e26c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	3301      	adds	r3, #1
 800d594:	607b      	str	r3, [r7, #4]
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2b09      	cmp	r3, #9
 800d59a:	f77f af65 	ble.w	800d468 <etharp_tmr+0xc>
      }
    }
  }
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	200081a4 	.word	0x200081a4

0800d5ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b08a      	sub	sp, #40	; 0x28
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	60f8      	str	r0, [r7, #12]
 800d5b4:	460b      	mov	r3, r1
 800d5b6:	607a      	str	r2, [r7, #4]
 800d5b8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d5ba:	230a      	movs	r3, #10
 800d5bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d5be:	230a      	movs	r3, #10
 800d5c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d5c2:	230a      	movs	r3, #10
 800d5c4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d5ca:	230a      	movs	r3, #10
 800d5cc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	83bb      	strh	r3, [r7, #28]
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	837b      	strh	r3, [r7, #26]
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5da:	2300      	movs	r3, #0
 800d5dc:	843b      	strh	r3, [r7, #32]
 800d5de:	e0ae      	b.n	800d73e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d5e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d5e4:	49a6      	ldr	r1, [pc, #664]	; (800d880 <etharp_find_entry+0x2d4>)
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	005b      	lsls	r3, r3, #1
 800d5ea:	4413      	add	r3, r2
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	440b      	add	r3, r1
 800d5f0:	3314      	adds	r3, #20
 800d5f2:	781b      	ldrb	r3, [r3, #0]
 800d5f4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d5f6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d5fa:	2b0a      	cmp	r3, #10
 800d5fc:	d105      	bne.n	800d60a <etharp_find_entry+0x5e>
 800d5fe:	7dfb      	ldrb	r3, [r7, #23]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d102      	bne.n	800d60a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d604:	8c3b      	ldrh	r3, [r7, #32]
 800d606:	847b      	strh	r3, [r7, #34]	; 0x22
 800d608:	e095      	b.n	800d736 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d60a:	7dfb      	ldrb	r3, [r7, #23]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f000 8092 	beq.w	800d736 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d612:	7dfb      	ldrb	r3, [r7, #23]
 800d614:	2b01      	cmp	r3, #1
 800d616:	d009      	beq.n	800d62c <etharp_find_entry+0x80>
 800d618:	7dfb      	ldrb	r3, [r7, #23]
 800d61a:	2b01      	cmp	r3, #1
 800d61c:	d806      	bhi.n	800d62c <etharp_find_entry+0x80>
 800d61e:	4b99      	ldr	r3, [pc, #612]	; (800d884 <etharp_find_entry+0x2d8>)
 800d620:	f240 1223 	movw	r2, #291	; 0x123
 800d624:	4998      	ldr	r1, [pc, #608]	; (800d888 <etharp_find_entry+0x2dc>)
 800d626:	4899      	ldr	r0, [pc, #612]	; (800d88c <etharp_find_entry+0x2e0>)
 800d628:	f002 faac 	bl	800fb84 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d020      	beq.n	800d674 <etharp_find_entry+0xc8>
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6819      	ldr	r1, [r3, #0]
 800d636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d63a:	4891      	ldr	r0, [pc, #580]	; (800d880 <etharp_find_entry+0x2d4>)
 800d63c:	4613      	mov	r3, r2
 800d63e:	005b      	lsls	r3, r3, #1
 800d640:	4413      	add	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4403      	add	r3, r0
 800d646:	3304      	adds	r3, #4
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4299      	cmp	r1, r3
 800d64c:	d112      	bne.n	800d674 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d00c      	beq.n	800d66e <etharp_find_entry+0xc2>
 800d654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d658:	4989      	ldr	r1, [pc, #548]	; (800d880 <etharp_find_entry+0x2d4>)
 800d65a:	4613      	mov	r3, r2
 800d65c:	005b      	lsls	r3, r3, #1
 800d65e:	4413      	add	r3, r2
 800d660:	00db      	lsls	r3, r3, #3
 800d662:	440b      	add	r3, r1
 800d664:	3308      	adds	r3, #8
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d102      	bne.n	800d674 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d66e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d672:	e100      	b.n	800d876 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d674:	7dfb      	ldrb	r3, [r7, #23]
 800d676:	2b01      	cmp	r3, #1
 800d678:	d140      	bne.n	800d6fc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d67a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d67e:	4980      	ldr	r1, [pc, #512]	; (800d880 <etharp_find_entry+0x2d4>)
 800d680:	4613      	mov	r3, r2
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	4413      	add	r3, r2
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	440b      	add	r3, r1
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d01a      	beq.n	800d6c6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d694:	497a      	ldr	r1, [pc, #488]	; (800d880 <etharp_find_entry+0x2d4>)
 800d696:	4613      	mov	r3, r2
 800d698:	005b      	lsls	r3, r3, #1
 800d69a:	4413      	add	r3, r2
 800d69c:	00db      	lsls	r3, r3, #3
 800d69e:	440b      	add	r3, r1
 800d6a0:	3312      	adds	r3, #18
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	8bba      	ldrh	r2, [r7, #28]
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d845      	bhi.n	800d736 <etharp_find_entry+0x18a>
            old_queue = i;
 800d6aa:	8c3b      	ldrh	r3, [r7, #32]
 800d6ac:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d6ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6b2:	4973      	ldr	r1, [pc, #460]	; (800d880 <etharp_find_entry+0x2d4>)
 800d6b4:	4613      	mov	r3, r2
 800d6b6:	005b      	lsls	r3, r3, #1
 800d6b8:	4413      	add	r3, r2
 800d6ba:	00db      	lsls	r3, r3, #3
 800d6bc:	440b      	add	r3, r1
 800d6be:	3312      	adds	r3, #18
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	83bb      	strh	r3, [r7, #28]
 800d6c4:	e037      	b.n	800d736 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d6c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6ca:	496d      	ldr	r1, [pc, #436]	; (800d880 <etharp_find_entry+0x2d4>)
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	005b      	lsls	r3, r3, #1
 800d6d0:	4413      	add	r3, r2
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	440b      	add	r3, r1
 800d6d6:	3312      	adds	r3, #18
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	8b7a      	ldrh	r2, [r7, #26]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d82a      	bhi.n	800d736 <etharp_find_entry+0x18a>
            old_pending = i;
 800d6e0:	8c3b      	ldrh	r3, [r7, #32]
 800d6e2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d6e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d6e8:	4965      	ldr	r1, [pc, #404]	; (800d880 <etharp_find_entry+0x2d4>)
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	005b      	lsls	r3, r3, #1
 800d6ee:	4413      	add	r3, r2
 800d6f0:	00db      	lsls	r3, r3, #3
 800d6f2:	440b      	add	r3, r1
 800d6f4:	3312      	adds	r3, #18
 800d6f6:	881b      	ldrh	r3, [r3, #0]
 800d6f8:	837b      	strh	r3, [r7, #26]
 800d6fa:	e01c      	b.n	800d736 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d6fc:	7dfb      	ldrb	r3, [r7, #23]
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d919      	bls.n	800d736 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d706:	495e      	ldr	r1, [pc, #376]	; (800d880 <etharp_find_entry+0x2d4>)
 800d708:	4613      	mov	r3, r2
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	4413      	add	r3, r2
 800d70e:	00db      	lsls	r3, r3, #3
 800d710:	440b      	add	r3, r1
 800d712:	3312      	adds	r3, #18
 800d714:	881b      	ldrh	r3, [r3, #0]
 800d716:	8b3a      	ldrh	r2, [r7, #24]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d80c      	bhi.n	800d736 <etharp_find_entry+0x18a>
            old_stable = i;
 800d71c:	8c3b      	ldrh	r3, [r7, #32]
 800d71e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d724:	4956      	ldr	r1, [pc, #344]	; (800d880 <etharp_find_entry+0x2d4>)
 800d726:	4613      	mov	r3, r2
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	4413      	add	r3, r2
 800d72c:	00db      	lsls	r3, r3, #3
 800d72e:	440b      	add	r3, r1
 800d730:	3312      	adds	r3, #18
 800d732:	881b      	ldrh	r3, [r3, #0]
 800d734:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d736:	8c3b      	ldrh	r3, [r7, #32]
 800d738:	3301      	adds	r3, #1
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	843b      	strh	r3, [r7, #32]
 800d73e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d742:	2b09      	cmp	r3, #9
 800d744:	f77f af4c 	ble.w	800d5e0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d748:	7afb      	ldrb	r3, [r7, #11]
 800d74a:	f003 0302 	and.w	r3, r3, #2
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d108      	bne.n	800d764 <etharp_find_entry+0x1b8>
 800d752:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d756:	2b0a      	cmp	r3, #10
 800d758:	d107      	bne.n	800d76a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d75a:	7afb      	ldrb	r3, [r7, #11]
 800d75c:	f003 0301 	and.w	r3, r3, #1
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d764:	f04f 33ff 	mov.w	r3, #4294967295
 800d768:	e085      	b.n	800d876 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d76a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d76e:	2b09      	cmp	r3, #9
 800d770:	dc02      	bgt.n	800d778 <etharp_find_entry+0x1cc>
    i = empty;
 800d772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d774:	843b      	strh	r3, [r7, #32]
 800d776:	e039      	b.n	800d7ec <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d778:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d77c:	2b09      	cmp	r3, #9
 800d77e:	dc14      	bgt.n	800d7aa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d782:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d784:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d788:	493d      	ldr	r1, [pc, #244]	; (800d880 <etharp_find_entry+0x2d4>)
 800d78a:	4613      	mov	r3, r2
 800d78c:	005b      	lsls	r3, r3, #1
 800d78e:	4413      	add	r3, r2
 800d790:	00db      	lsls	r3, r3, #3
 800d792:	440b      	add	r3, r1
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d018      	beq.n	800d7cc <etharp_find_entry+0x220>
 800d79a:	4b3a      	ldr	r3, [pc, #232]	; (800d884 <etharp_find_entry+0x2d8>)
 800d79c:	f240 126d 	movw	r2, #365	; 0x16d
 800d7a0:	493b      	ldr	r1, [pc, #236]	; (800d890 <etharp_find_entry+0x2e4>)
 800d7a2:	483a      	ldr	r0, [pc, #232]	; (800d88c <etharp_find_entry+0x2e0>)
 800d7a4:	f002 f9ee 	bl	800fb84 <iprintf>
 800d7a8:	e010      	b.n	800d7cc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d7aa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	dc02      	bgt.n	800d7b8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d7b2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d7b4:	843b      	strh	r3, [r7, #32]
 800d7b6:	e009      	b.n	800d7cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d7b8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d7bc:	2b09      	cmp	r3, #9
 800d7be:	dc02      	bgt.n	800d7c6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d7c0:	8bfb      	ldrh	r3, [r7, #30]
 800d7c2:	843b      	strh	r3, [r7, #32]
 800d7c4:	e002      	b.n	800d7cc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d7c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ca:	e054      	b.n	800d876 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d7cc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7d0:	2b09      	cmp	r3, #9
 800d7d2:	dd06      	ble.n	800d7e2 <etharp_find_entry+0x236>
 800d7d4:	4b2b      	ldr	r3, [pc, #172]	; (800d884 <etharp_find_entry+0x2d8>)
 800d7d6:	f240 127f 	movw	r2, #383	; 0x17f
 800d7da:	492e      	ldr	r1, [pc, #184]	; (800d894 <etharp_find_entry+0x2e8>)
 800d7dc:	482b      	ldr	r0, [pc, #172]	; (800d88c <etharp_find_entry+0x2e0>)
 800d7de:	f002 f9d1 	bl	800fb84 <iprintf>
    etharp_free_entry(i);
 800d7e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff fe06 	bl	800d3f8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d7ec:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7f0:	2b09      	cmp	r3, #9
 800d7f2:	dd06      	ble.n	800d802 <etharp_find_entry+0x256>
 800d7f4:	4b23      	ldr	r3, [pc, #140]	; (800d884 <etharp_find_entry+0x2d8>)
 800d7f6:	f240 1283 	movw	r2, #387	; 0x183
 800d7fa:	4926      	ldr	r1, [pc, #152]	; (800d894 <etharp_find_entry+0x2e8>)
 800d7fc:	4823      	ldr	r0, [pc, #140]	; (800d88c <etharp_find_entry+0x2e0>)
 800d7fe:	f002 f9c1 	bl	800fb84 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d802:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d806:	491e      	ldr	r1, [pc, #120]	; (800d880 <etharp_find_entry+0x2d4>)
 800d808:	4613      	mov	r3, r2
 800d80a:	005b      	lsls	r3, r3, #1
 800d80c:	4413      	add	r3, r2
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	440b      	add	r3, r1
 800d812:	3314      	adds	r3, #20
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d006      	beq.n	800d828 <etharp_find_entry+0x27c>
 800d81a:	4b1a      	ldr	r3, [pc, #104]	; (800d884 <etharp_find_entry+0x2d8>)
 800d81c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d820:	491d      	ldr	r1, [pc, #116]	; (800d898 <etharp_find_entry+0x2ec>)
 800d822:	481a      	ldr	r0, [pc, #104]	; (800d88c <etharp_find_entry+0x2e0>)
 800d824:	f002 f9ae 	bl	800fb84 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00b      	beq.n	800d846 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d82e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6819      	ldr	r1, [r3, #0]
 800d836:	4812      	ldr	r0, [pc, #72]	; (800d880 <etharp_find_entry+0x2d4>)
 800d838:	4613      	mov	r3, r2
 800d83a:	005b      	lsls	r3, r3, #1
 800d83c:	4413      	add	r3, r2
 800d83e:	00db      	lsls	r3, r3, #3
 800d840:	4403      	add	r3, r0
 800d842:	3304      	adds	r3, #4
 800d844:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d846:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d84a:	490d      	ldr	r1, [pc, #52]	; (800d880 <etharp_find_entry+0x2d4>)
 800d84c:	4613      	mov	r3, r2
 800d84e:	005b      	lsls	r3, r3, #1
 800d850:	4413      	add	r3, r2
 800d852:	00db      	lsls	r3, r3, #3
 800d854:	440b      	add	r3, r1
 800d856:	3312      	adds	r3, #18
 800d858:	2200      	movs	r2, #0
 800d85a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d85c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d860:	4907      	ldr	r1, [pc, #28]	; (800d880 <etharp_find_entry+0x2d4>)
 800d862:	4613      	mov	r3, r2
 800d864:	005b      	lsls	r3, r3, #1
 800d866:	4413      	add	r3, r2
 800d868:	00db      	lsls	r3, r3, #3
 800d86a:	440b      	add	r3, r1
 800d86c:	3308      	adds	r3, #8
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d872:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d876:	4618      	mov	r0, r3
 800d878:	3728      	adds	r7, #40	; 0x28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}
 800d87e:	bf00      	nop
 800d880:	200081a4 	.word	0x200081a4
 800d884:	08012fec 	.word	0x08012fec
 800d888:	08013024 	.word	0x08013024
 800d88c:	08013064 	.word	0x08013064
 800d890:	0801308c 	.word	0x0801308c
 800d894:	080130a4 	.word	0x080130a4
 800d898:	080130b8 	.word	0x080130b8

0800d89c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b088      	sub	sp, #32
 800d8a0:	af02      	add	r7, sp, #8
 800d8a2:	60f8      	str	r0, [r7, #12]
 800d8a4:	60b9      	str	r1, [r7, #8]
 800d8a6:	607a      	str	r2, [r7, #4]
 800d8a8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d8b0:	2b06      	cmp	r3, #6
 800d8b2:	d006      	beq.n	800d8c2 <etharp_update_arp_entry+0x26>
 800d8b4:	4b48      	ldr	r3, [pc, #288]	; (800d9d8 <etharp_update_arp_entry+0x13c>)
 800d8b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d8ba:	4948      	ldr	r1, [pc, #288]	; (800d9dc <etharp_update_arp_entry+0x140>)
 800d8bc:	4848      	ldr	r0, [pc, #288]	; (800d9e0 <etharp_update_arp_entry+0x144>)
 800d8be:	f002 f961 	bl	800fb84 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d012      	beq.n	800d8ee <etharp_update_arp_entry+0x52>
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00e      	beq.n	800d8ee <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8d0:	68bb      	ldr	r3, [r7, #8]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68f9      	ldr	r1, [r7, #12]
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f001 f924 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800d8dc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d105      	bne.n	800d8ee <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d8ea:	2be0      	cmp	r3, #224	; 0xe0
 800d8ec:	d102      	bne.n	800d8f4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d8ee:	f06f 030f 	mvn.w	r3, #15
 800d8f2:	e06c      	b.n	800d9ce <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800d8f4:	78fb      	ldrb	r3, [r7, #3]
 800d8f6:	68fa      	ldr	r2, [r7, #12]
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	68b8      	ldr	r0, [r7, #8]
 800d8fc:	f7ff fe56 	bl	800d5ac <etharp_find_entry>
 800d900:	4603      	mov	r3, r0
 800d902:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800d904:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	da02      	bge.n	800d912 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800d90c:	8afb      	ldrh	r3, [r7, #22]
 800d90e:	b25b      	sxtb	r3, r3
 800d910:	e05d      	b.n	800d9ce <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d912:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d916:	4933      	ldr	r1, [pc, #204]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d918:	4613      	mov	r3, r2
 800d91a:	005b      	lsls	r3, r3, #1
 800d91c:	4413      	add	r3, r2
 800d91e:	00db      	lsls	r3, r3, #3
 800d920:	440b      	add	r3, r1
 800d922:	3314      	adds	r3, #20
 800d924:	2202      	movs	r2, #2
 800d926:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800d928:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d92c:	492d      	ldr	r1, [pc, #180]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d92e:	4613      	mov	r3, r2
 800d930:	005b      	lsls	r3, r3, #1
 800d932:	4413      	add	r3, r2
 800d934:	00db      	lsls	r3, r3, #3
 800d936:	440b      	add	r3, r1
 800d938:	3308      	adds	r3, #8
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d93e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d942:	4613      	mov	r3, r2
 800d944:	005b      	lsls	r3, r3, #1
 800d946:	4413      	add	r3, r2
 800d948:	00db      	lsls	r3, r3, #3
 800d94a:	3308      	adds	r3, #8
 800d94c:	4a25      	ldr	r2, [pc, #148]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d94e:	4413      	add	r3, r2
 800d950:	3304      	adds	r3, #4
 800d952:	2206      	movs	r2, #6
 800d954:	6879      	ldr	r1, [r7, #4]
 800d956:	4618      	mov	r0, r3
 800d958:	f002 f8fe 	bl	800fb58 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800d95c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d960:	4920      	ldr	r1, [pc, #128]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d962:	4613      	mov	r3, r2
 800d964:	005b      	lsls	r3, r3, #1
 800d966:	4413      	add	r3, r2
 800d968:	00db      	lsls	r3, r3, #3
 800d96a:	440b      	add	r3, r1
 800d96c:	3312      	adds	r3, #18
 800d96e:	2200      	movs	r2, #0
 800d970:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800d972:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d976:	491b      	ldr	r1, [pc, #108]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d978:	4613      	mov	r3, r2
 800d97a:	005b      	lsls	r3, r3, #1
 800d97c:	4413      	add	r3, r2
 800d97e:	00db      	lsls	r3, r3, #3
 800d980:	440b      	add	r3, r1
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d021      	beq.n	800d9cc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800d988:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d98c:	4915      	ldr	r1, [pc, #84]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d98e:	4613      	mov	r3, r2
 800d990:	005b      	lsls	r3, r3, #1
 800d992:	4413      	add	r3, r2
 800d994:	00db      	lsls	r3, r3, #3
 800d996:	440b      	add	r3, r1
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800d99c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d9a0:	4910      	ldr	r1, [pc, #64]	; (800d9e4 <etharp_update_arp_entry+0x148>)
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	005b      	lsls	r3, r3, #1
 800d9a6:	4413      	add	r3, r2
 800d9a8:	00db      	lsls	r3, r3, #3
 800d9aa:	440b      	add	r3, r1
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d9b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d9ba:	9300      	str	r3, [sp, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	6939      	ldr	r1, [r7, #16]
 800d9c0:	68f8      	ldr	r0, [r7, #12]
 800d9c2:	f002 f84d 	bl	800fa60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800d9c6:	6938      	ldr	r0, [r7, #16]
 800d9c8:	f7f8 ff20 	bl	800680c <pbuf_free>
  }
  return ERR_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	08012fec 	.word	0x08012fec
 800d9dc:	080130e4 	.word	0x080130e4
 800d9e0:	08013064 	.word	0x08013064
 800d9e4:	200081a4 	.word	0x200081a4

0800d9e8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	e01e      	b.n	800da34 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800d9f6:	4913      	ldr	r1, [pc, #76]	; (800da44 <etharp_cleanup_netif+0x5c>)
 800d9f8:	68fa      	ldr	r2, [r7, #12]
 800d9fa:	4613      	mov	r3, r2
 800d9fc:	005b      	lsls	r3, r3, #1
 800d9fe:	4413      	add	r3, r2
 800da00:	00db      	lsls	r3, r3, #3
 800da02:	440b      	add	r3, r1
 800da04:	3314      	adds	r3, #20
 800da06:	781b      	ldrb	r3, [r3, #0]
 800da08:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800da0a:	7afb      	ldrb	r3, [r7, #11]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d00e      	beq.n	800da2e <etharp_cleanup_netif+0x46>
 800da10:	490c      	ldr	r1, [pc, #48]	; (800da44 <etharp_cleanup_netif+0x5c>)
 800da12:	68fa      	ldr	r2, [r7, #12]
 800da14:	4613      	mov	r3, r2
 800da16:	005b      	lsls	r3, r3, #1
 800da18:	4413      	add	r3, r2
 800da1a:	00db      	lsls	r3, r3, #3
 800da1c:	440b      	add	r3, r1
 800da1e:	3308      	adds	r3, #8
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	687a      	ldr	r2, [r7, #4]
 800da24:	429a      	cmp	r2, r3
 800da26:	d102      	bne.n	800da2e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	f7ff fce5 	bl	800d3f8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	3301      	adds	r3, #1
 800da32:	60fb      	str	r3, [r7, #12]
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2b09      	cmp	r3, #9
 800da38:	dddd      	ble.n	800d9f6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800da3a:	bf00      	nop
 800da3c:	bf00      	nop
 800da3e:	3710      	adds	r7, #16
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}
 800da44:	200081a4 	.word	0x200081a4

0800da48 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800da48:	b5b0      	push	{r4, r5, r7, lr}
 800da4a:	b08a      	sub	sp, #40	; 0x28
 800da4c:	af04      	add	r7, sp, #16
 800da4e:	6078      	str	r0, [r7, #4]
 800da50:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d107      	bne.n	800da68 <etharp_input+0x20>
 800da58:	4b3d      	ldr	r3, [pc, #244]	; (800db50 <etharp_input+0x108>)
 800da5a:	f240 228a 	movw	r2, #650	; 0x28a
 800da5e:	493d      	ldr	r1, [pc, #244]	; (800db54 <etharp_input+0x10c>)
 800da60:	483d      	ldr	r0, [pc, #244]	; (800db58 <etharp_input+0x110>)
 800da62:	f002 f88f 	bl	800fb84 <iprintf>
 800da66:	e06f      	b.n	800db48 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	685b      	ldr	r3, [r3, #4]
 800da6c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	881b      	ldrh	r3, [r3, #0]
 800da72:	b29b      	uxth	r3, r3
 800da74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da78:	d10c      	bne.n	800da94 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800da7e:	2b06      	cmp	r3, #6
 800da80:	d108      	bne.n	800da94 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800da86:	2b04      	cmp	r3, #4
 800da88:	d104      	bne.n	800da94 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	885b      	ldrh	r3, [r3, #2]
 800da8e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800da90:	2b08      	cmp	r3, #8
 800da92:	d003      	beq.n	800da9c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800da94:	6878      	ldr	r0, [r7, #4]
 800da96:	f7f8 feb9 	bl	800680c <pbuf_free>
    return;
 800da9a:	e055      	b.n	800db48 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	330e      	adds	r3, #14
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	3318      	adds	r3, #24
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	3304      	adds	r3, #4
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d102      	bne.n	800dabc <etharp_input+0x74>
    for_us = 0;
 800dab6:	2300      	movs	r3, #0
 800dab8:	75fb      	strb	r3, [r7, #23]
 800daba:	e009      	b.n	800dad0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	3304      	adds	r3, #4
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	429a      	cmp	r2, r3
 800dac6:	bf0c      	ite	eq
 800dac8:	2301      	moveq	r3, #1
 800daca:	2300      	movne	r3, #0
 800dacc:	b2db      	uxtb	r3, r3
 800dace:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	f103 0208 	add.w	r2, r3, #8
 800dad6:	7dfb      	ldrb	r3, [r7, #23]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <etharp_input+0x98>
 800dadc:	2301      	movs	r3, #1
 800dade:	e000      	b.n	800dae2 <etharp_input+0x9a>
 800dae0:	2302      	movs	r3, #2
 800dae2:	f107 010c 	add.w	r1, r7, #12
 800dae6:	6838      	ldr	r0, [r7, #0]
 800dae8:	f7ff fed8 	bl	800d89c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800daec:	693b      	ldr	r3, [r7, #16]
 800daee:	88db      	ldrh	r3, [r3, #6]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800daf6:	d003      	beq.n	800db00 <etharp_input+0xb8>
 800daf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dafc:	d01e      	beq.n	800db3c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dafe:	e020      	b.n	800db42 <etharp_input+0xfa>
      if (for_us) {
 800db00:	7dfb      	ldrb	r3, [r7, #23]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d01c      	beq.n	800db40 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800db20:	2102      	movs	r1, #2
 800db22:	9103      	str	r1, [sp, #12]
 800db24:	f107 010c 	add.w	r1, r7, #12
 800db28:	9102      	str	r1, [sp, #8]
 800db2a:	9201      	str	r2, [sp, #4]
 800db2c:	9300      	str	r3, [sp, #0]
 800db2e:	462b      	mov	r3, r5
 800db30:	4622      	mov	r2, r4
 800db32:	4601      	mov	r1, r0
 800db34:	6838      	ldr	r0, [r7, #0]
 800db36:	f000 faeb 	bl	800e110 <etharp_raw>
      break;
 800db3a:	e001      	b.n	800db40 <etharp_input+0xf8>
      break;
 800db3c:	bf00      	nop
 800db3e:	e000      	b.n	800db42 <etharp_input+0xfa>
      break;
 800db40:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f7f8 fe62 	bl	800680c <pbuf_free>
}
 800db48:	3718      	adds	r7, #24
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bdb0      	pop	{r4, r5, r7, pc}
 800db4e:	bf00      	nop
 800db50:	08012fec 	.word	0x08012fec
 800db54:	0801313c 	.word	0x0801313c
 800db58:	08013064 	.word	0x08013064

0800db5c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800db5c:	b580      	push	{r7, lr}
 800db5e:	b086      	sub	sp, #24
 800db60:	af02      	add	r7, sp, #8
 800db62:	60f8      	str	r0, [r7, #12]
 800db64:	60b9      	str	r1, [r7, #8]
 800db66:	4613      	mov	r3, r2
 800db68:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800db6a:	79fa      	ldrb	r2, [r7, #7]
 800db6c:	4944      	ldr	r1, [pc, #272]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800db6e:	4613      	mov	r3, r2
 800db70:	005b      	lsls	r3, r3, #1
 800db72:	4413      	add	r3, r2
 800db74:	00db      	lsls	r3, r3, #3
 800db76:	440b      	add	r3, r1
 800db78:	3314      	adds	r3, #20
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d806      	bhi.n	800db8e <etharp_output_to_arp_index+0x32>
 800db80:	4b40      	ldr	r3, [pc, #256]	; (800dc84 <etharp_output_to_arp_index+0x128>)
 800db82:	f240 22ee 	movw	r2, #750	; 0x2ee
 800db86:	4940      	ldr	r1, [pc, #256]	; (800dc88 <etharp_output_to_arp_index+0x12c>)
 800db88:	4840      	ldr	r0, [pc, #256]	; (800dc8c <etharp_output_to_arp_index+0x130>)
 800db8a:	f001 fffb 	bl	800fb84 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800db8e:	79fa      	ldrb	r2, [r7, #7]
 800db90:	493b      	ldr	r1, [pc, #236]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800db92:	4613      	mov	r3, r2
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	4413      	add	r3, r2
 800db98:	00db      	lsls	r3, r3, #3
 800db9a:	440b      	add	r3, r1
 800db9c:	3314      	adds	r3, #20
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	d153      	bne.n	800dc4c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dba4:	79fa      	ldrb	r2, [r7, #7]
 800dba6:	4936      	ldr	r1, [pc, #216]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dba8:	4613      	mov	r3, r2
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	4413      	add	r3, r2
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	440b      	add	r3, r1
 800dbb2:	3312      	adds	r3, #18
 800dbb4:	881b      	ldrh	r3, [r3, #0]
 800dbb6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dbba:	d919      	bls.n	800dbf0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dbbc:	79fa      	ldrb	r2, [r7, #7]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	005b      	lsls	r3, r3, #1
 800dbc2:	4413      	add	r3, r2
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	4a2e      	ldr	r2, [pc, #184]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dbc8:	4413      	add	r3, r2
 800dbca:	3304      	adds	r3, #4
 800dbcc:	4619      	mov	r1, r3
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f000 fb4c 	bl	800e26c <etharp_request>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d138      	bne.n	800dc4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dbda:	79fa      	ldrb	r2, [r7, #7]
 800dbdc:	4928      	ldr	r1, [pc, #160]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dbde:	4613      	mov	r3, r2
 800dbe0:	005b      	lsls	r3, r3, #1
 800dbe2:	4413      	add	r3, r2
 800dbe4:	00db      	lsls	r3, r3, #3
 800dbe6:	440b      	add	r3, r1
 800dbe8:	3314      	adds	r3, #20
 800dbea:	2203      	movs	r2, #3
 800dbec:	701a      	strb	r2, [r3, #0]
 800dbee:	e02d      	b.n	800dc4c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dbf0:	79fa      	ldrb	r2, [r7, #7]
 800dbf2:	4923      	ldr	r1, [pc, #140]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	005b      	lsls	r3, r3, #1
 800dbf8:	4413      	add	r3, r2
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	440b      	add	r3, r1
 800dbfe:	3312      	adds	r3, #18
 800dc00:	881b      	ldrh	r3, [r3, #0]
 800dc02:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dc06:	d321      	bcc.n	800dc4c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dc08:	79fa      	ldrb	r2, [r7, #7]
 800dc0a:	4613      	mov	r3, r2
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	4413      	add	r3, r2
 800dc10:	00db      	lsls	r3, r3, #3
 800dc12:	4a1b      	ldr	r2, [pc, #108]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dc14:	4413      	add	r3, r2
 800dc16:	1d19      	adds	r1, r3, #4
 800dc18:	79fa      	ldrb	r2, [r7, #7]
 800dc1a:	4613      	mov	r3, r2
 800dc1c:	005b      	lsls	r3, r3, #1
 800dc1e:	4413      	add	r3, r2
 800dc20:	00db      	lsls	r3, r3, #3
 800dc22:	3308      	adds	r3, #8
 800dc24:	4a16      	ldr	r2, [pc, #88]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dc26:	4413      	add	r3, r2
 800dc28:	3304      	adds	r3, #4
 800dc2a:	461a      	mov	r2, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f000 fafb 	bl	800e228 <etharp_request_dst>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d109      	bne.n	800dc4c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dc38:	79fa      	ldrb	r2, [r7, #7]
 800dc3a:	4911      	ldr	r1, [pc, #68]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	4413      	add	r3, r2
 800dc42:	00db      	lsls	r3, r3, #3
 800dc44:	440b      	add	r3, r1
 800dc46:	3314      	adds	r3, #20
 800dc48:	2203      	movs	r2, #3
 800dc4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800dc52:	79fa      	ldrb	r2, [r7, #7]
 800dc54:	4613      	mov	r3, r2
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	00db      	lsls	r3, r3, #3
 800dc5c:	3308      	adds	r3, #8
 800dc5e:	4a08      	ldr	r2, [pc, #32]	; (800dc80 <etharp_output_to_arp_index+0x124>)
 800dc60:	4413      	add	r3, r2
 800dc62:	3304      	adds	r3, #4
 800dc64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dc68:	9200      	str	r2, [sp, #0]
 800dc6a:	460a      	mov	r2, r1
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f001 fef6 	bl	800fa60 <ethernet_output>
 800dc74:	4603      	mov	r3, r0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3710      	adds	r7, #16
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	200081a4 	.word	0x200081a4
 800dc84:	08012fec 	.word	0x08012fec
 800dc88:	0801315c 	.word	0x0801315c
 800dc8c:	08013064 	.word	0x08013064

0800dc90 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08a      	sub	sp, #40	; 0x28
 800dc94:	af02      	add	r7, sp, #8
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	60b9      	str	r1, [r7, #8]
 800dc9a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d106      	bne.n	800dcb4 <etharp_output+0x24>
 800dca6:	4b73      	ldr	r3, [pc, #460]	; (800de74 <etharp_output+0x1e4>)
 800dca8:	f240 321e 	movw	r2, #798	; 0x31e
 800dcac:	4972      	ldr	r1, [pc, #456]	; (800de78 <etharp_output+0x1e8>)
 800dcae:	4873      	ldr	r0, [pc, #460]	; (800de7c <etharp_output+0x1ec>)
 800dcb0:	f001 ff68 	bl	800fb84 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d106      	bne.n	800dcc8 <etharp_output+0x38>
 800dcba:	4b6e      	ldr	r3, [pc, #440]	; (800de74 <etharp_output+0x1e4>)
 800dcbc:	f240 321f 	movw	r2, #799	; 0x31f
 800dcc0:	496f      	ldr	r1, [pc, #444]	; (800de80 <etharp_output+0x1f0>)
 800dcc2:	486e      	ldr	r0, [pc, #440]	; (800de7c <etharp_output+0x1ec>)
 800dcc4:	f001 ff5e 	bl	800fb84 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d106      	bne.n	800dcdc <etharp_output+0x4c>
 800dcce:	4b69      	ldr	r3, [pc, #420]	; (800de74 <etharp_output+0x1e4>)
 800dcd0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dcd4:	496b      	ldr	r1, [pc, #428]	; (800de84 <etharp_output+0x1f4>)
 800dcd6:	4869      	ldr	r0, [pc, #420]	; (800de7c <etharp_output+0x1ec>)
 800dcd8:	f001 ff54 	bl	800fb84 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	68f9      	ldr	r1, [r7, #12]
 800dce2:	4618      	mov	r0, r3
 800dce4:	f000 ff1e 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800dce8:	4603      	mov	r3, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800dcee:	4b66      	ldr	r3, [pc, #408]	; (800de88 <etharp_output+0x1f8>)
 800dcf0:	61fb      	str	r3, [r7, #28]
 800dcf2:	e0af      	b.n	800de54 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcfc:	2be0      	cmp	r3, #224	; 0xe0
 800dcfe:	d118      	bne.n	800dd32 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800dd00:	2301      	movs	r3, #1
 800dd02:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800dd04:	2300      	movs	r3, #0
 800dd06:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800dd08:	235e      	movs	r3, #94	; 0x5e
 800dd0a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	3302      	adds	r3, #2
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	3303      	adds	r3, #3
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800dd2a:	f107 0310 	add.w	r3, r7, #16
 800dd2e:	61fb      	str	r3, [r7, #28]
 800dd30:	e090      	b.n	800de54 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3304      	adds	r3, #4
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	405a      	eors	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3308      	adds	r3, #8
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4013      	ands	r3, r2
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d012      	beq.n	800dd70 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800dd50:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800dd54:	4293      	cmp	r3, r2
 800dd56:	d00b      	beq.n	800dd70 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	330c      	adds	r3, #12
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d003      	beq.n	800dd6a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	330c      	adds	r3, #12
 800dd66:	61bb      	str	r3, [r7, #24]
 800dd68:	e002      	b.n	800dd70 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800dd6a:	f06f 0303 	mvn.w	r3, #3
 800dd6e:	e07d      	b.n	800de6c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dd70:	4b46      	ldr	r3, [pc, #280]	; (800de8c <etharp_output+0x1fc>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	4619      	mov	r1, r3
 800dd76:	4a46      	ldr	r2, [pc, #280]	; (800de90 <etharp_output+0x200>)
 800dd78:	460b      	mov	r3, r1
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	440b      	add	r3, r1
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	4413      	add	r3, r2
 800dd82:	3314      	adds	r3, #20
 800dd84:	781b      	ldrb	r3, [r3, #0]
 800dd86:	2b01      	cmp	r3, #1
 800dd88:	d925      	bls.n	800ddd6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800dd8a:	4b40      	ldr	r3, [pc, #256]	; (800de8c <etharp_output+0x1fc>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	4a3f      	ldr	r2, [pc, #252]	; (800de90 <etharp_output+0x200>)
 800dd92:	460b      	mov	r3, r1
 800dd94:	005b      	lsls	r3, r3, #1
 800dd96:	440b      	add	r3, r1
 800dd98:	00db      	lsls	r3, r3, #3
 800dd9a:	4413      	add	r3, r2
 800dd9c:	3308      	adds	r3, #8
 800dd9e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800dda0:	68fa      	ldr	r2, [r7, #12]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d117      	bne.n	800ddd6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800dda6:	69bb      	ldr	r3, [r7, #24]
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	4b38      	ldr	r3, [pc, #224]	; (800de8c <etharp_output+0x1fc>)
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	4937      	ldr	r1, [pc, #220]	; (800de90 <etharp_output+0x200>)
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	4403      	add	r3, r0
 800ddb8:	00db      	lsls	r3, r3, #3
 800ddba:	440b      	add	r3, r1
 800ddbc:	3304      	adds	r3, #4
 800ddbe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d108      	bne.n	800ddd6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ddc4:	4b31      	ldr	r3, [pc, #196]	; (800de8c <etharp_output+0x1fc>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	461a      	mov	r2, r3
 800ddca:	68b9      	ldr	r1, [r7, #8]
 800ddcc:	68f8      	ldr	r0, [r7, #12]
 800ddce:	f7ff fec5 	bl	800db5c <etharp_output_to_arp_index>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	e04a      	b.n	800de6c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	75fb      	strb	r3, [r7, #23]
 800ddda:	e031      	b.n	800de40 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800dddc:	7dfa      	ldrb	r2, [r7, #23]
 800ddde:	492c      	ldr	r1, [pc, #176]	; (800de90 <etharp_output+0x200>)
 800dde0:	4613      	mov	r3, r2
 800dde2:	005b      	lsls	r3, r3, #1
 800dde4:	4413      	add	r3, r2
 800dde6:	00db      	lsls	r3, r3, #3
 800dde8:	440b      	add	r3, r1
 800ddea:	3314      	adds	r3, #20
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d923      	bls.n	800de3a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800ddf2:	7dfa      	ldrb	r2, [r7, #23]
 800ddf4:	4926      	ldr	r1, [pc, #152]	; (800de90 <etharp_output+0x200>)
 800ddf6:	4613      	mov	r3, r2
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	4413      	add	r3, r2
 800ddfc:	00db      	lsls	r3, r3, #3
 800ddfe:	440b      	add	r3, r1
 800de00:	3308      	adds	r3, #8
 800de02:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	429a      	cmp	r2, r3
 800de08:	d117      	bne.n	800de3a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	6819      	ldr	r1, [r3, #0]
 800de0e:	7dfa      	ldrb	r2, [r7, #23]
 800de10:	481f      	ldr	r0, [pc, #124]	; (800de90 <etharp_output+0x200>)
 800de12:	4613      	mov	r3, r2
 800de14:	005b      	lsls	r3, r3, #1
 800de16:	4413      	add	r3, r2
 800de18:	00db      	lsls	r3, r3, #3
 800de1a:	4403      	add	r3, r0
 800de1c:	3304      	adds	r3, #4
 800de1e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800de20:	4299      	cmp	r1, r3
 800de22:	d10a      	bne.n	800de3a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800de24:	4a19      	ldr	r2, [pc, #100]	; (800de8c <etharp_output+0x1fc>)
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800de2a:	7dfb      	ldrb	r3, [r7, #23]
 800de2c:	461a      	mov	r2, r3
 800de2e:	68b9      	ldr	r1, [r7, #8]
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff fe93 	bl	800db5c <etharp_output_to_arp_index>
 800de36:	4603      	mov	r3, r0
 800de38:	e018      	b.n	800de6c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800de3a:	7dfb      	ldrb	r3, [r7, #23]
 800de3c:	3301      	adds	r3, #1
 800de3e:	75fb      	strb	r3, [r7, #23]
 800de40:	7dfb      	ldrb	r3, [r7, #23]
 800de42:	2b09      	cmp	r3, #9
 800de44:	d9ca      	bls.n	800dddc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	69b9      	ldr	r1, [r7, #24]
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f000 f822 	bl	800de94 <etharp_query>
 800de50:	4603      	mov	r3, r0
 800de52:	e00b      	b.n	800de6c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800de5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800de5e:	9300      	str	r3, [sp, #0]
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	68b9      	ldr	r1, [r7, #8]
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f001 fdfb 	bl	800fa60 <ethernet_output>
 800de6a:	4603      	mov	r3, r0
}
 800de6c:	4618      	mov	r0, r3
 800de6e:	3720      	adds	r7, #32
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	08012fec 	.word	0x08012fec
 800de78:	0801313c 	.word	0x0801313c
 800de7c:	08013064 	.word	0x08013064
 800de80:	0801318c 	.word	0x0801318c
 800de84:	0801312c 	.word	0x0801312c
 800de88:	080137a8 	.word	0x080137a8
 800de8c:	20008294 	.word	0x20008294
 800de90:	200081a4 	.word	0x200081a4

0800de94 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b08c      	sub	sp, #48	; 0x30
 800de98:	af02      	add	r7, sp, #8
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	3326      	adds	r3, #38	; 0x26
 800dea4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800dea6:	23ff      	movs	r3, #255	; 0xff
 800dea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800deac:	2300      	movs	r3, #0
 800deae:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800deb0:	68bb      	ldr	r3, [r7, #8]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68f9      	ldr	r1, [r7, #12]
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fe34 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d10c      	bne.n	800dedc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800deca:	2be0      	cmp	r3, #224	; 0xe0
 800decc:	d006      	beq.n	800dedc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d102      	bne.n	800dee2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800dedc:	f06f 030f 	mvn.w	r3, #15
 800dee0:	e101      	b.n	800e0e6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	2101      	movs	r1, #1
 800dee6:	68b8      	ldr	r0, [r7, #8]
 800dee8:	f7ff fb60 	bl	800d5ac <etharp_find_entry>
 800deec:	4603      	mov	r3, r0
 800deee:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800def0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800def4:	2b00      	cmp	r3, #0
 800def6:	da02      	bge.n	800defe <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800def8:	8a7b      	ldrh	r3, [r7, #18]
 800defa:	b25b      	sxtb	r3, r3
 800defc:	e0f3      	b.n	800e0e6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800defe:	8a7b      	ldrh	r3, [r7, #18]
 800df00:	2b7e      	cmp	r3, #126	; 0x7e
 800df02:	d906      	bls.n	800df12 <etharp_query+0x7e>
 800df04:	4b7a      	ldr	r3, [pc, #488]	; (800e0f0 <etharp_query+0x25c>)
 800df06:	f240 32c1 	movw	r2, #961	; 0x3c1
 800df0a:	497a      	ldr	r1, [pc, #488]	; (800e0f4 <etharp_query+0x260>)
 800df0c:	487a      	ldr	r0, [pc, #488]	; (800e0f8 <etharp_query+0x264>)
 800df0e:	f001 fe39 	bl	800fb84 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800df12:	8a7b      	ldrh	r3, [r7, #18]
 800df14:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800df16:	7c7a      	ldrb	r2, [r7, #17]
 800df18:	4978      	ldr	r1, [pc, #480]	; (800e0fc <etharp_query+0x268>)
 800df1a:	4613      	mov	r3, r2
 800df1c:	005b      	lsls	r3, r3, #1
 800df1e:	4413      	add	r3, r2
 800df20:	00db      	lsls	r3, r3, #3
 800df22:	440b      	add	r3, r1
 800df24:	3314      	adds	r3, #20
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d115      	bne.n	800df58 <etharp_query+0xc4>
    is_new_entry = 1;
 800df2c:	2301      	movs	r3, #1
 800df2e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800df30:	7c7a      	ldrb	r2, [r7, #17]
 800df32:	4972      	ldr	r1, [pc, #456]	; (800e0fc <etharp_query+0x268>)
 800df34:	4613      	mov	r3, r2
 800df36:	005b      	lsls	r3, r3, #1
 800df38:	4413      	add	r3, r2
 800df3a:	00db      	lsls	r3, r3, #3
 800df3c:	440b      	add	r3, r1
 800df3e:	3314      	adds	r3, #20
 800df40:	2201      	movs	r2, #1
 800df42:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800df44:	7c7a      	ldrb	r2, [r7, #17]
 800df46:	496d      	ldr	r1, [pc, #436]	; (800e0fc <etharp_query+0x268>)
 800df48:	4613      	mov	r3, r2
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	4413      	add	r3, r2
 800df4e:	00db      	lsls	r3, r3, #3
 800df50:	440b      	add	r3, r1
 800df52:	3308      	adds	r3, #8
 800df54:	68fa      	ldr	r2, [r7, #12]
 800df56:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800df58:	7c7a      	ldrb	r2, [r7, #17]
 800df5a:	4968      	ldr	r1, [pc, #416]	; (800e0fc <etharp_query+0x268>)
 800df5c:	4613      	mov	r3, r2
 800df5e:	005b      	lsls	r3, r3, #1
 800df60:	4413      	add	r3, r2
 800df62:	00db      	lsls	r3, r3, #3
 800df64:	440b      	add	r3, r1
 800df66:	3314      	adds	r3, #20
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d011      	beq.n	800df92 <etharp_query+0xfe>
 800df6e:	7c7a      	ldrb	r2, [r7, #17]
 800df70:	4962      	ldr	r1, [pc, #392]	; (800e0fc <etharp_query+0x268>)
 800df72:	4613      	mov	r3, r2
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	4413      	add	r3, r2
 800df78:	00db      	lsls	r3, r3, #3
 800df7a:	440b      	add	r3, r1
 800df7c:	3314      	adds	r3, #20
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	2b01      	cmp	r3, #1
 800df82:	d806      	bhi.n	800df92 <etharp_query+0xfe>
 800df84:	4b5a      	ldr	r3, [pc, #360]	; (800e0f0 <etharp_query+0x25c>)
 800df86:	f240 32cd 	movw	r2, #973	; 0x3cd
 800df8a:	495d      	ldr	r1, [pc, #372]	; (800e100 <etharp_query+0x26c>)
 800df8c:	485a      	ldr	r0, [pc, #360]	; (800e0f8 <etharp_query+0x264>)
 800df8e:	f001 fdf9 	bl	800fb84 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800df92:	6a3b      	ldr	r3, [r7, #32]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d102      	bne.n	800df9e <etharp_query+0x10a>
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d10c      	bne.n	800dfb8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800df9e:	68b9      	ldr	r1, [r7, #8]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 f963 	bl	800e26c <etharp_request>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d102      	bne.n	800dfb8 <etharp_query+0x124>
      return result;
 800dfb2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dfb6:	e096      	b.n	800e0e6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d106      	bne.n	800dfcc <etharp_query+0x138>
 800dfbe:	4b4c      	ldr	r3, [pc, #304]	; (800e0f0 <etharp_query+0x25c>)
 800dfc0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800dfc4:	494f      	ldr	r1, [pc, #316]	; (800e104 <etharp_query+0x270>)
 800dfc6:	484c      	ldr	r0, [pc, #304]	; (800e0f8 <etharp_query+0x264>)
 800dfc8:	f001 fddc 	bl	800fb84 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800dfcc:	7c7a      	ldrb	r2, [r7, #17]
 800dfce:	494b      	ldr	r1, [pc, #300]	; (800e0fc <etharp_query+0x268>)
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	005b      	lsls	r3, r3, #1
 800dfd4:	4413      	add	r3, r2
 800dfd6:	00db      	lsls	r3, r3, #3
 800dfd8:	440b      	add	r3, r1
 800dfda:	3314      	adds	r3, #20
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d917      	bls.n	800e012 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800dfe2:	4a49      	ldr	r2, [pc, #292]	; (800e108 <etharp_query+0x274>)
 800dfe4:	7c7b      	ldrb	r3, [r7, #17]
 800dfe6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800dfe8:	7c7a      	ldrb	r2, [r7, #17]
 800dfea:	4613      	mov	r3, r2
 800dfec:	005b      	lsls	r3, r3, #1
 800dfee:	4413      	add	r3, r2
 800dff0:	00db      	lsls	r3, r3, #3
 800dff2:	3308      	adds	r3, #8
 800dff4:	4a41      	ldr	r2, [pc, #260]	; (800e0fc <etharp_query+0x268>)
 800dff6:	4413      	add	r3, r2
 800dff8:	3304      	adds	r3, #4
 800dffa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dffe:	9200      	str	r2, [sp, #0]
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	6879      	ldr	r1, [r7, #4]
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f001 fd2b 	bl	800fa60 <ethernet_output>
 800e00a:	4603      	mov	r3, r0
 800e00c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e010:	e067      	b.n	800e0e2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e012:	7c7a      	ldrb	r2, [r7, #17]
 800e014:	4939      	ldr	r1, [pc, #228]	; (800e0fc <etharp_query+0x268>)
 800e016:	4613      	mov	r3, r2
 800e018:	005b      	lsls	r3, r3, #1
 800e01a:	4413      	add	r3, r2
 800e01c:	00db      	lsls	r3, r3, #3
 800e01e:	440b      	add	r3, r1
 800e020:	3314      	adds	r3, #20
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d15c      	bne.n	800e0e2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e028:	2300      	movs	r3, #0
 800e02a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e030:	e01c      	b.n	800e06c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e032:	69fb      	ldr	r3, [r7, #28]
 800e034:	895a      	ldrh	r2, [r3, #10]
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	891b      	ldrh	r3, [r3, #8]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d10a      	bne.n	800e054 <etharp_query+0x1c0>
 800e03e:	69fb      	ldr	r3, [r7, #28]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d006      	beq.n	800e054 <etharp_query+0x1c0>
 800e046:	4b2a      	ldr	r3, [pc, #168]	; (800e0f0 <etharp_query+0x25c>)
 800e048:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e04c:	492f      	ldr	r1, [pc, #188]	; (800e10c <etharp_query+0x278>)
 800e04e:	482a      	ldr	r0, [pc, #168]	; (800e0f8 <etharp_query+0x264>)
 800e050:	f001 fd98 	bl	800fb84 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	7b1b      	ldrb	r3, [r3, #12]
 800e058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d002      	beq.n	800e066 <etharp_query+0x1d2>
        copy_needed = 1;
 800e060:	2301      	movs	r3, #1
 800e062:	61bb      	str	r3, [r7, #24]
        break;
 800e064:	e005      	b.n	800e072 <etharp_query+0x1de>
      }
      p = p->next;
 800e066:	69fb      	ldr	r3, [r7, #28]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e06c:	69fb      	ldr	r3, [r7, #28]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d1df      	bne.n	800e032 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d007      	beq.n	800e088 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e07e:	200e      	movs	r0, #14
 800e080:	f7f8 fe30 	bl	8006ce4 <pbuf_clone>
 800e084:	61f8      	str	r0, [r7, #28]
 800e086:	e004      	b.n	800e092 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e08c:	69f8      	ldr	r0, [r7, #28]
 800e08e:	f7f8 fc5d 	bl	800694c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e092:	69fb      	ldr	r3, [r7, #28]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d021      	beq.n	800e0dc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e098:	7c7a      	ldrb	r2, [r7, #17]
 800e09a:	4918      	ldr	r1, [pc, #96]	; (800e0fc <etharp_query+0x268>)
 800e09c:	4613      	mov	r3, r2
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	4413      	add	r3, r2
 800e0a2:	00db      	lsls	r3, r3, #3
 800e0a4:	440b      	add	r3, r1
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d00a      	beq.n	800e0c2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e0ac:	7c7a      	ldrb	r2, [r7, #17]
 800e0ae:	4913      	ldr	r1, [pc, #76]	; (800e0fc <etharp_query+0x268>)
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	005b      	lsls	r3, r3, #1
 800e0b4:	4413      	add	r3, r2
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	440b      	add	r3, r1
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7f8 fba5 	bl	800680c <pbuf_free>
      }
      arp_table[i].q = p;
 800e0c2:	7c7a      	ldrb	r2, [r7, #17]
 800e0c4:	490d      	ldr	r1, [pc, #52]	; (800e0fc <etharp_query+0x268>)
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	005b      	lsls	r3, r3, #1
 800e0ca:	4413      	add	r3, r2
 800e0cc:	00db      	lsls	r3, r3, #3
 800e0ce:	440b      	add	r3, r1
 800e0d0:	69fa      	ldr	r2, [r7, #28]
 800e0d2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0da:	e002      	b.n	800e0e2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e0dc:	23ff      	movs	r3, #255	; 0xff
 800e0de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e0e2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3728      	adds	r7, #40	; 0x28
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08012fec 	.word	0x08012fec
 800e0f4:	08013198 	.word	0x08013198
 800e0f8:	08013064 	.word	0x08013064
 800e0fc:	200081a4 	.word	0x200081a4
 800e100:	080131a8 	.word	0x080131a8
 800e104:	0801318c 	.word	0x0801318c
 800e108:	20008294 	.word	0x20008294
 800e10c:	080131d0 	.word	0x080131d0

0800e110 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b08a      	sub	sp, #40	; 0x28
 800e114:	af02      	add	r7, sp, #8
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	607a      	str	r2, [r7, #4]
 800e11c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e11e:	2300      	movs	r3, #0
 800e120:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d106      	bne.n	800e136 <etharp_raw+0x26>
 800e128:	4b3a      	ldr	r3, [pc, #232]	; (800e214 <etharp_raw+0x104>)
 800e12a:	f240 4257 	movw	r2, #1111	; 0x457
 800e12e:	493a      	ldr	r1, [pc, #232]	; (800e218 <etharp_raw+0x108>)
 800e130:	483a      	ldr	r0, [pc, #232]	; (800e21c <etharp_raw+0x10c>)
 800e132:	f001 fd27 	bl	800fb84 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e136:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e13a:	211c      	movs	r1, #28
 800e13c:	200e      	movs	r0, #14
 800e13e:	f7f8 f881 	bl	8006244 <pbuf_alloc>
 800e142:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e144:	69bb      	ldr	r3, [r7, #24]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d102      	bne.n	800e150 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e14a:	f04f 33ff 	mov.w	r3, #4294967295
 800e14e:	e05d      	b.n	800e20c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e150:	69bb      	ldr	r3, [r7, #24]
 800e152:	895b      	ldrh	r3, [r3, #10]
 800e154:	2b1b      	cmp	r3, #27
 800e156:	d806      	bhi.n	800e166 <etharp_raw+0x56>
 800e158:	4b2e      	ldr	r3, [pc, #184]	; (800e214 <etharp_raw+0x104>)
 800e15a:	f240 4262 	movw	r2, #1122	; 0x462
 800e15e:	4930      	ldr	r1, [pc, #192]	; (800e220 <etharp_raw+0x110>)
 800e160:	482e      	ldr	r0, [pc, #184]	; (800e21c <etharp_raw+0x10c>)
 800e162:	f001 fd0f 	bl	800fb84 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e166:	69bb      	ldr	r3, [r7, #24]
 800e168:	685b      	ldr	r3, [r3, #4]
 800e16a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e16c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e16e:	4618      	mov	r0, r3
 800e170:	f7f6 ff36 	bl	8004fe0 <lwip_htons>
 800e174:	4603      	mov	r3, r0
 800e176:	461a      	mov	r2, r3
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e182:	2b06      	cmp	r3, #6
 800e184:	d006      	beq.n	800e194 <etharp_raw+0x84>
 800e186:	4b23      	ldr	r3, [pc, #140]	; (800e214 <etharp_raw+0x104>)
 800e188:	f240 4269 	movw	r2, #1129	; 0x469
 800e18c:	4925      	ldr	r1, [pc, #148]	; (800e224 <etharp_raw+0x114>)
 800e18e:	4823      	ldr	r0, [pc, #140]	; (800e21c <etharp_raw+0x10c>)
 800e190:	f001 fcf8 	bl	800fb84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	3308      	adds	r3, #8
 800e198:	2206      	movs	r2, #6
 800e19a:	6839      	ldr	r1, [r7, #0]
 800e19c:	4618      	mov	r0, r3
 800e19e:	f001 fcdb 	bl	800fb58 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	3312      	adds	r3, #18
 800e1a6:	2206      	movs	r2, #6
 800e1a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f001 fcd4 	bl	800fb58 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	330e      	adds	r3, #14
 800e1b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1b6:	6812      	ldr	r2, [r2, #0]
 800e1b8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	3318      	adds	r3, #24
 800e1be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c0:	6812      	ldr	r2, [r2, #0]
 800e1c2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	f042 0201 	orr.w	r2, r2, #1
 800e1d0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f042 0208 	orr.w	r2, r2, #8
 800e1da:	709a      	strb	r2, [r3, #2]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e1e0:	697b      	ldr	r3, [r7, #20]
 800e1e2:	2206      	movs	r2, #6
 800e1e4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e1ec:	f640 0306 	movw	r3, #2054	; 0x806
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	69b9      	ldr	r1, [r7, #24]
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f001 fc31 	bl	800fa60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e1fe:	69b8      	ldr	r0, [r7, #24]
 800e200:	f7f8 fb04 	bl	800680c <pbuf_free>
  p = NULL;
 800e204:	2300      	movs	r3, #0
 800e206:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e208:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3720      	adds	r7, #32
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}
 800e214:	08012fec 	.word	0x08012fec
 800e218:	0801313c 	.word	0x0801313c
 800e21c:	08013064 	.word	0x08013064
 800e220:	080131ec 	.word	0x080131ec
 800e224:	08013220 	.word	0x08013220

0800e228 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b088      	sub	sp, #32
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e244:	2201      	movs	r2, #1
 800e246:	9203      	str	r2, [sp, #12]
 800e248:	68ba      	ldr	r2, [r7, #8]
 800e24a:	9202      	str	r2, [sp, #8]
 800e24c:	4a06      	ldr	r2, [pc, #24]	; (800e268 <etharp_request_dst+0x40>)
 800e24e:	9201      	str	r2, [sp, #4]
 800e250:	9300      	str	r3, [sp, #0]
 800e252:	4603      	mov	r3, r0
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	68f8      	ldr	r0, [r7, #12]
 800e258:	f7ff ff5a 	bl	800e110 <etharp_raw>
 800e25c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	080137b0 	.word	0x080137b0

0800e26c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e276:	4a05      	ldr	r2, [pc, #20]	; (800e28c <etharp_request+0x20>)
 800e278:	6839      	ldr	r1, [r7, #0]
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ffd4 	bl	800e228 <etharp_request_dst>
 800e280:	4603      	mov	r3, r0
}
 800e282:	4618      	mov	r0, r3
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	080137a8 	.word	0x080137a8

0800e290 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08e      	sub	sp, #56	; 0x38
 800e294:	af04      	add	r7, sp, #16
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e29a:	4b87      	ldr	r3, [pc, #540]	; (800e4b8 <icmp_input+0x228>)
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	f003 030f 	and.w	r3, r3, #15
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e2b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e2b2:	2b13      	cmp	r3, #19
 800e2b4:	f240 80e8 	bls.w	800e488 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	895b      	ldrh	r3, [r3, #10]
 800e2bc:	2b03      	cmp	r3, #3
 800e2be:	f240 80e5 	bls.w	800e48c <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e2cc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	f000 80d2 	beq.w	800e47a <icmp_input+0x1ea>
 800e2d6:	2b08      	cmp	r3, #8
 800e2d8:	f040 80d2 	bne.w	800e480 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e2dc:	4b77      	ldr	r3, [pc, #476]	; (800e4bc <icmp_input+0x22c>)
 800e2de:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e2e0:	4b75      	ldr	r3, [pc, #468]	; (800e4b8 <icmp_input+0x228>)
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2e8:	2be0      	cmp	r3, #224	; 0xe0
 800e2ea:	f000 80d6 	beq.w	800e49a <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e2ee:	4b72      	ldr	r3, [pc, #456]	; (800e4b8 <icmp_input+0x228>)
 800e2f0:	695b      	ldr	r3, [r3, #20]
 800e2f2:	4a71      	ldr	r2, [pc, #452]	; (800e4b8 <icmp_input+0x228>)
 800e2f4:	6812      	ldr	r2, [r2, #0]
 800e2f6:	4611      	mov	r1, r2
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f000 fc13 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	f040 80cc 	bne.w	800e49e <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	891b      	ldrh	r3, [r3, #8]
 800e30a:	2b07      	cmp	r3, #7
 800e30c:	f240 80c0 	bls.w	800e490 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 800e310:	6878      	ldr	r0, [r7, #4]
 800e312:	f7f6 ff02 	bl	800511a <inet_chksum_pbuf>
 800e316:	4603      	mov	r3, r0
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f7f8 fa75 	bl	800680c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 800e322:	e0c5      	b.n	800e4b0 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e324:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e326:	330e      	adds	r3, #14
 800e328:	4619      	mov	r1, r3
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f7f8 f9d8 	bl	80066e0 <pbuf_add_header>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d04b      	beq.n	800e3ce <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	891a      	ldrh	r2, [r3, #8]
 800e33a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e33c:	4413      	add	r3, r2
 800e33e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	891b      	ldrh	r3, [r3, #8]
 800e344:	8b7a      	ldrh	r2, [r7, #26]
 800e346:	429a      	cmp	r2, r3
 800e348:	f0c0 80ab 	bcc.w	800e4a2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e34c:	8b7b      	ldrh	r3, [r7, #26]
 800e34e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e352:	4619      	mov	r1, r3
 800e354:	200e      	movs	r0, #14
 800e356:	f7f7 ff75 	bl	8006244 <pbuf_alloc>
 800e35a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e35c:	697b      	ldr	r3, [r7, #20]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	f000 80a1 	beq.w	800e4a6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e364:	697b      	ldr	r3, [r7, #20]
 800e366:	895b      	ldrh	r3, [r3, #10]
 800e368:	461a      	mov	r2, r3
 800e36a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e36c:	3308      	adds	r3, #8
 800e36e:	429a      	cmp	r2, r3
 800e370:	d203      	bcs.n	800e37a <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e372:	6978      	ldr	r0, [r7, #20]
 800e374:	f7f8 fa4a 	bl	800680c <pbuf_free>
          goto icmperr;
 800e378:	e096      	b.n	800e4a8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e382:	4618      	mov	r0, r3
 800e384:	f001 fbe8 	bl	800fb58 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e38a:	4619      	mov	r1, r3
 800e38c:	6978      	ldr	r0, [r7, #20]
 800e38e:	f7f8 f9b7 	bl	8006700 <pbuf_remove_header>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d009      	beq.n	800e3ac <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e398:	4b49      	ldr	r3, [pc, #292]	; (800e4c0 <icmp_input+0x230>)
 800e39a:	22b6      	movs	r2, #182	; 0xb6
 800e39c:	4949      	ldr	r1, [pc, #292]	; (800e4c4 <icmp_input+0x234>)
 800e39e:	484a      	ldr	r0, [pc, #296]	; (800e4c8 <icmp_input+0x238>)
 800e3a0:	f001 fbf0 	bl	800fb84 <iprintf>
          pbuf_free(r);
 800e3a4:	6978      	ldr	r0, [r7, #20]
 800e3a6:	f7f8 fa31 	bl	800680c <pbuf_free>
          goto icmperr;
 800e3aa:	e07d      	b.n	800e4a8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e3ac:	6879      	ldr	r1, [r7, #4]
 800e3ae:	6978      	ldr	r0, [r7, #20]
 800e3b0:	f7f8 fb54 	bl	8006a5c <pbuf_copy>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d003      	beq.n	800e3c2 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e3ba:	6978      	ldr	r0, [r7, #20]
 800e3bc:	f7f8 fa26 	bl	800680c <pbuf_free>
          goto icmperr;
 800e3c0:	e072      	b.n	800e4a8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f7f8 fa22 	bl	800680c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	607b      	str	r3, [r7, #4]
 800e3cc:	e00f      	b.n	800e3ee <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e3ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3d0:	330e      	adds	r3, #14
 800e3d2:	4619      	mov	r1, r3
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7f8 f993 	bl	8006700 <pbuf_remove_header>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d006      	beq.n	800e3ee <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e3e0:	4b37      	ldr	r3, [pc, #220]	; (800e4c0 <icmp_input+0x230>)
 800e3e2:	22c7      	movs	r2, #199	; 0xc7
 800e3e4:	4939      	ldr	r1, [pc, #228]	; (800e4cc <icmp_input+0x23c>)
 800e3e6:	4838      	ldr	r0, [pc, #224]	; (800e4c8 <icmp_input+0x238>)
 800e3e8:	f001 fbcc 	bl	800fb84 <iprintf>
          goto icmperr;
 800e3ec:	e05c      	b.n	800e4a8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	685b      	ldr	r3, [r3, #4]
 800e3f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e3f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f7f8 f971 	bl	80066e0 <pbuf_add_header>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d13c      	bne.n	800e47e <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	685b      	ldr	r3, [r3, #4]
 800e408:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e412:	4b29      	ldr	r3, [pc, #164]	; (800e4b8 <icmp_input+0x228>)
 800e414:	691a      	ldr	r2, [r3, #16]
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	2200      	movs	r2, #0
 800e41e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	885b      	ldrh	r3, [r3, #2]
 800e424:	b29b      	uxth	r3, r3
 800e426:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d907      	bls.n	800e43e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	885b      	ldrh	r3, [r3, #2]
 800e432:	b29b      	uxth	r3, r3
 800e434:	3309      	adds	r3, #9
 800e436:	b29a      	uxth	r2, r3
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	805a      	strh	r2, [r3, #2]
 800e43c:	e006      	b.n	800e44c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	885b      	ldrh	r3, [r3, #2]
 800e442:	b29b      	uxth	r3, r3
 800e444:	3308      	adds	r3, #8
 800e446:	b29a      	uxth	r2, r3
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	22ff      	movs	r2, #255	; 0xff
 800e450:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	2200      	movs	r2, #0
 800e456:	729a      	strb	r2, [r3, #10]
 800e458:	2200      	movs	r2, #0
 800e45a:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	9302      	str	r3, [sp, #8]
 800e460:	2301      	movs	r3, #1
 800e462:	9301      	str	r3, [sp, #4]
 800e464:	2300      	movs	r3, #0
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	23ff      	movs	r3, #255	; 0xff
 800e46a:	2200      	movs	r2, #0
 800e46c:	69f9      	ldr	r1, [r7, #28]
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa80 	bl	800e974 <ip4_output_if>
 800e474:	4603      	mov	r3, r0
 800e476:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e478:	e001      	b.n	800e47e <icmp_input+0x1ee>
      break;
 800e47a:	bf00      	nop
 800e47c:	e000      	b.n	800e480 <icmp_input+0x1f0>
      break;
 800e47e:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7f8 f9c3 	bl	800680c <pbuf_free>
  return;
 800e486:	e013      	b.n	800e4b0 <icmp_input+0x220>
    goto lenerr;
 800e488:	bf00      	nop
 800e48a:	e002      	b.n	800e492 <icmp_input+0x202>
    goto lenerr;
 800e48c:	bf00      	nop
 800e48e:	e000      	b.n	800e492 <icmp_input+0x202>
        goto lenerr;
 800e490:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7f8 f9ba 	bl	800680c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e498:	e00a      	b.n	800e4b0 <icmp_input+0x220>
        goto icmperr;
 800e49a:	bf00      	nop
 800e49c:	e004      	b.n	800e4a8 <icmp_input+0x218>
        goto icmperr;
 800e49e:	bf00      	nop
 800e4a0:	e002      	b.n	800e4a8 <icmp_input+0x218>
          goto icmperr;
 800e4a2:	bf00      	nop
 800e4a4:	e000      	b.n	800e4a8 <icmp_input+0x218>
          goto icmperr;
 800e4a6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f7f8 f9af 	bl	800680c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e4ae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e4b0:	3728      	adds	r7, #40	; 0x28
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	20005228 	.word	0x20005228
 800e4bc:	2000523c 	.word	0x2000523c
 800e4c0:	08013264 	.word	0x08013264
 800e4c4:	0801329c 	.word	0x0801329c
 800e4c8:	080132d4 	.word	0x080132d4
 800e4cc:	080132fc 	.word	0x080132fc

0800e4d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e4dc:	78fb      	ldrb	r3, [r7, #3]
 800e4de:	461a      	mov	r2, r3
 800e4e0:	2103      	movs	r1, #3
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 f814 	bl	800e510 <icmp_send_response>
}
 800e4e8:	bf00      	nop
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	460b      	mov	r3, r1
 800e4fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e4fc:	78fb      	ldrb	r3, [r7, #3]
 800e4fe:	461a      	mov	r2, r3
 800e500:	210b      	movs	r1, #11
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f804 	bl	800e510 <icmp_send_response>
}
 800e508:	bf00      	nop
 800e50a:	3708      	adds	r7, #8
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b08c      	sub	sp, #48	; 0x30
 800e514:	af04      	add	r7, sp, #16
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	460b      	mov	r3, r1
 800e51a:	70fb      	strb	r3, [r7, #3]
 800e51c:	4613      	mov	r3, r2
 800e51e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e520:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e524:	2124      	movs	r1, #36	; 0x24
 800e526:	2022      	movs	r0, #34	; 0x22
 800e528:	f7f7 fe8c 	bl	8006244 <pbuf_alloc>
 800e52c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d056      	beq.n	800e5e2 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	895b      	ldrh	r3, [r3, #10]
 800e538:	2b23      	cmp	r3, #35	; 0x23
 800e53a:	d806      	bhi.n	800e54a <icmp_send_response+0x3a>
 800e53c:	4b2b      	ldr	r3, [pc, #172]	; (800e5ec <icmp_send_response+0xdc>)
 800e53e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e542:	492b      	ldr	r1, [pc, #172]	; (800e5f0 <icmp_send_response+0xe0>)
 800e544:	482b      	ldr	r0, [pc, #172]	; (800e5f4 <icmp_send_response+0xe4>)
 800e546:	f001 fb1d 	bl	800fb84 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e550:	69fb      	ldr	r3, [r7, #28]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e556:	697b      	ldr	r3, [r7, #20]
 800e558:	78fa      	ldrb	r2, [r7, #3]
 800e55a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e55c:	697b      	ldr	r3, [r7, #20]
 800e55e:	78ba      	ldrb	r2, [r7, #2]
 800e560:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	2200      	movs	r2, #0
 800e566:	711a      	strb	r2, [r3, #4]
 800e568:	2200      	movs	r2, #0
 800e56a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	2200      	movs	r2, #0
 800e570:	719a      	strb	r2, [r3, #6]
 800e572:	2200      	movs	r2, #0
 800e574:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e576:	69fb      	ldr	r3, [r7, #28]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	f103 0008 	add.w	r0, r3, #8
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	221c      	movs	r2, #28
 800e584:	4619      	mov	r1, r3
 800e586:	f001 fae7 	bl	800fb58 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	68db      	ldr	r3, [r3, #12]
 800e58e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e590:	f107 030c 	add.w	r3, r7, #12
 800e594:	4618      	mov	r0, r3
 800e596:	f000 f82f 	bl	800e5f8 <ip4_route>
 800e59a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d01b      	beq.n	800e5da <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	2200      	movs	r2, #0
 800e5a6:	709a      	strb	r2, [r3, #2]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	895b      	ldrh	r3, [r3, #10]
 800e5b0:	4619      	mov	r1, r3
 800e5b2:	6978      	ldr	r0, [r7, #20]
 800e5b4:	f7f6 fd9f 	bl	80050f6 <inet_chksum>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e5c0:	f107 020c 	add.w	r2, r7, #12
 800e5c4:	693b      	ldr	r3, [r7, #16]
 800e5c6:	9302      	str	r3, [sp, #8]
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	9301      	str	r3, [sp, #4]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	9300      	str	r3, [sp, #0]
 800e5d0:	23ff      	movs	r3, #255	; 0xff
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	69f8      	ldr	r0, [r7, #28]
 800e5d6:	f000 f9cd 	bl	800e974 <ip4_output_if>
  }
  pbuf_free(q);
 800e5da:	69f8      	ldr	r0, [r7, #28]
 800e5dc:	f7f8 f916 	bl	800680c <pbuf_free>
 800e5e0:	e000      	b.n	800e5e4 <icmp_send_response+0xd4>
    return;
 800e5e2:	bf00      	nop
}
 800e5e4:	3720      	adds	r7, #32
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	08013264 	.word	0x08013264
 800e5f0:	08013330 	.word	0x08013330
 800e5f4:	080132d4 	.word	0x080132d4

0800e5f8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e600:	4b33      	ldr	r3, [pc, #204]	; (800e6d0 <ip4_route+0xd8>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	e036      	b.n	800e676 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e60e:	f003 0301 	and.w	r3, r3, #1
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b00      	cmp	r3, #0
 800e616:	d02b      	beq.n	800e670 <ip4_route+0x78>
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e61e:	089b      	lsrs	r3, r3, #2
 800e620:	f003 0301 	and.w	r3, r3, #1
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d022      	beq.n	800e670 <ip4_route+0x78>
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	3304      	adds	r3, #4
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d01d      	beq.n	800e670 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	3304      	adds	r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	405a      	eors	r2, r3
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	3308      	adds	r3, #8
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4013      	ands	r3, r2
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d101      	bne.n	800e650 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	e038      	b.n	800e6c2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e656:	f003 0302 	and.w	r3, r3, #2
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d108      	bne.n	800e670 <ip4_route+0x78>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	330c      	adds	r3, #12
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d101      	bne.n	800e670 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	e028      	b.n	800e6c2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	60fb      	str	r3, [r7, #12]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d1c5      	bne.n	800e608 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e67c:	4b15      	ldr	r3, [pc, #84]	; (800e6d4 <ip4_route+0xdc>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d01a      	beq.n	800e6ba <ip4_route+0xc2>
 800e684:	4b13      	ldr	r3, [pc, #76]	; (800e6d4 <ip4_route+0xdc>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e68c:	f003 0301 	and.w	r3, r3, #1
 800e690:	2b00      	cmp	r3, #0
 800e692:	d012      	beq.n	800e6ba <ip4_route+0xc2>
 800e694:	4b0f      	ldr	r3, [pc, #60]	; (800e6d4 <ip4_route+0xdc>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e69c:	f003 0304 	and.w	r3, r3, #4
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00a      	beq.n	800e6ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6a4:	4b0b      	ldr	r3, [pc, #44]	; (800e6d4 <ip4_route+0xdc>)
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3304      	adds	r3, #4
 800e6aa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d004      	beq.n	800e6ba <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	2b7f      	cmp	r3, #127	; 0x7f
 800e6b8:	d101      	bne.n	800e6be <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	e001      	b.n	800e6c2 <ip4_route+0xca>
  }

  return netif_default;
 800e6be:	4b05      	ldr	r3, [pc, #20]	; (800e6d4 <ip4_route+0xdc>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	20008138 	.word	0x20008138
 800e6d4:	2000813c 	.word	0x2000813c

0800e6d8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b082      	sub	sp, #8
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6e6:	f003 0301 	and.w	r3, r3, #1
 800e6ea:	b2db      	uxtb	r3, r3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d016      	beq.n	800e71e <ip4_input_accept+0x46>
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	3304      	adds	r3, #4
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d011      	beq.n	800e71e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e6fa:	4b0b      	ldr	r3, [pc, #44]	; (800e728 <ip4_input_accept+0x50>)
 800e6fc:	695a      	ldr	r2, [r3, #20]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	3304      	adds	r3, #4
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	429a      	cmp	r2, r3
 800e706:	d008      	beq.n	800e71a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e708:	4b07      	ldr	r3, [pc, #28]	; (800e728 <ip4_input_accept+0x50>)
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	6879      	ldr	r1, [r7, #4]
 800e70e:	4618      	mov	r0, r3
 800e710:	f000 fa08 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e714:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e71a:	2301      	movs	r3, #1
 800e71c:	e000      	b.n	800e720 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e71e:	2300      	movs	r3, #0
}
 800e720:	4618      	mov	r0, r3
 800e722:	3708      	adds	r7, #8
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}
 800e728:	20005228 	.word	0x20005228

0800e72c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b086      	sub	sp, #24
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	091b      	lsrs	r3, r3, #4
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b04      	cmp	r3, #4
 800e746:	d004      	beq.n	800e752 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f7f8 f85f 	bl	800680c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	e107      	b.n	800e962 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	f003 030f 	and.w	r3, r3, #15
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	885b      	ldrh	r3, [r3, #2]
 800e766:	b29b      	uxth	r3, r3
 800e768:	4618      	mov	r0, r3
 800e76a:	f7f6 fc39 	bl	8004fe0 <lwip_htons>
 800e76e:	4603      	mov	r3, r0
 800e770:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	891b      	ldrh	r3, [r3, #8]
 800e776:	89ba      	ldrh	r2, [r7, #12]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d204      	bcs.n	800e786 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800e77c:	89bb      	ldrh	r3, [r7, #12]
 800e77e:	4619      	mov	r1, r3
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f7f7 febd 	bl	8006500 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	895b      	ldrh	r3, [r3, #10]
 800e78a:	89fa      	ldrh	r2, [r7, #14]
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d807      	bhi.n	800e7a0 <ip4_input+0x74>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	891b      	ldrh	r3, [r3, #8]
 800e794:	89ba      	ldrh	r2, [r7, #12]
 800e796:	429a      	cmp	r2, r3
 800e798:	d802      	bhi.n	800e7a0 <ip4_input+0x74>
 800e79a:	89fb      	ldrh	r3, [r7, #14]
 800e79c:	2b13      	cmp	r3, #19
 800e79e:	d804      	bhi.n	800e7aa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e7a0:	6878      	ldr	r0, [r7, #4]
 800e7a2:	f7f8 f833 	bl	800680c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	e0db      	b.n	800e962 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	4a6f      	ldr	r2, [pc, #444]	; (800e96c <ip4_input+0x240>)
 800e7b0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	68db      	ldr	r3, [r3, #12]
 800e7b6:	4a6d      	ldr	r2, [pc, #436]	; (800e96c <ip4_input+0x240>)
 800e7b8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e7ba:	4b6c      	ldr	r3, [pc, #432]	; (800e96c <ip4_input+0x240>)
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e7c2:	2be0      	cmp	r3, #224	; 0xe0
 800e7c4:	d112      	bne.n	800e7ec <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d007      	beq.n	800e7e6 <ip4_input+0xba>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	3304      	adds	r3, #4
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d002      	beq.n	800e7e6 <ip4_input+0xba>
      netif = inp;
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	613b      	str	r3, [r7, #16]
 800e7e4:	e02a      	b.n	800e83c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	613b      	str	r3, [r7, #16]
 800e7ea:	e027      	b.n	800e83c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e7ec:	6838      	ldr	r0, [r7, #0]
 800e7ee:	f7ff ff73 	bl	800e6d8 <ip4_input_accept>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d002      	beq.n	800e7fe <ip4_input+0xd2>
      netif = inp;
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	613b      	str	r3, [r7, #16]
 800e7fc:	e01e      	b.n	800e83c <ip4_input+0x110>
    } else {
      netif = NULL;
 800e7fe:	2300      	movs	r3, #0
 800e800:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e802:	4b5a      	ldr	r3, [pc, #360]	; (800e96c <ip4_input+0x240>)
 800e804:	695b      	ldr	r3, [r3, #20]
 800e806:	b2db      	uxtb	r3, r3
 800e808:	2b7f      	cmp	r3, #127	; 0x7f
 800e80a:	d017      	beq.n	800e83c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e80c:	4b58      	ldr	r3, [pc, #352]	; (800e970 <ip4_input+0x244>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	613b      	str	r3, [r7, #16]
 800e812:	e00e      	b.n	800e832 <ip4_input+0x106>
          if (netif == inp) {
 800e814:	693a      	ldr	r2, [r7, #16]
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d006      	beq.n	800e82a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e81c:	6938      	ldr	r0, [r7, #16]
 800e81e:	f7ff ff5b 	bl	800e6d8 <ip4_input_accept>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d108      	bne.n	800e83a <ip4_input+0x10e>
 800e828:	e000      	b.n	800e82c <ip4_input+0x100>
            continue;
 800e82a:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	613b      	str	r3, [r7, #16]
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d1ed      	bne.n	800e814 <ip4_input+0xe8>
 800e838:	e000      	b.n	800e83c <ip4_input+0x110>
            break;
 800e83a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e83c:	4b4b      	ldr	r3, [pc, #300]	; (800e96c <ip4_input+0x240>)
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	6839      	ldr	r1, [r7, #0]
 800e842:	4618      	mov	r0, r3
 800e844:	f000 f96e 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e848:	4603      	mov	r3, r0
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d105      	bne.n	800e85a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e84e:	4b47      	ldr	r3, [pc, #284]	; (800e96c <ip4_input+0x240>)
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e856:	2be0      	cmp	r3, #224	; 0xe0
 800e858:	d104      	bne.n	800e864 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7f7 ffd6 	bl	800680c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e860:	2300      	movs	r3, #0
 800e862:	e07e      	b.n	800e962 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d104      	bne.n	800e874 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e86a:	6878      	ldr	r0, [r7, #4]
 800e86c:	f7f7 ffce 	bl	800680c <pbuf_free>
    return ERR_OK;
 800e870:	2300      	movs	r3, #0
 800e872:	e076      	b.n	800e962 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e874:	697b      	ldr	r3, [r7, #20]
 800e876:	88db      	ldrh	r3, [r3, #6]
 800e878:	b29b      	uxth	r3, r3
 800e87a:	461a      	mov	r2, r3
 800e87c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e880:	4013      	ands	r3, r2
 800e882:	2b00      	cmp	r3, #0
 800e884:	d00b      	beq.n	800e89e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e886:	6878      	ldr	r0, [r7, #4]
 800e888:	f000 fd22 	bl	800f2d0 <ip4_reass>
 800e88c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d101      	bne.n	800e898 <ip4_input+0x16c>
      return ERR_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	e064      	b.n	800e962 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e89e:	4a33      	ldr	r2, [pc, #204]	; (800e96c <ip4_input+0x240>)
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e8a4:	4a31      	ldr	r2, [pc, #196]	; (800e96c <ip4_input+0x240>)
 800e8a6:	683b      	ldr	r3, [r7, #0]
 800e8a8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e8aa:	4a30      	ldr	r2, [pc, #192]	; (800e96c <ip4_input+0x240>)
 800e8ac:	697b      	ldr	r3, [r7, #20]
 800e8ae:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	f003 030f 	and.w	r3, r3, #15
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	009b      	lsls	r3, r3, #2
 800e8bc:	b2db      	uxtb	r3, r3
 800e8be:	b29a      	uxth	r2, r3
 800e8c0:	4b2a      	ldr	r3, [pc, #168]	; (800e96c <ip4_input+0x240>)
 800e8c2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800e8c4:	89fb      	ldrh	r3, [r7, #14]
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7f7 ff19 	bl	8006700 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800e8ce:	697b      	ldr	r3, [r7, #20]
 800e8d0:	7a5b      	ldrb	r3, [r3, #9]
 800e8d2:	2b11      	cmp	r3, #17
 800e8d4:	d006      	beq.n	800e8e4 <ip4_input+0x1b8>
 800e8d6:	2b11      	cmp	r3, #17
 800e8d8:	dc13      	bgt.n	800e902 <ip4_input+0x1d6>
 800e8da:	2b01      	cmp	r3, #1
 800e8dc:	d00c      	beq.n	800e8f8 <ip4_input+0x1cc>
 800e8de:	2b06      	cmp	r3, #6
 800e8e0:	d005      	beq.n	800e8ee <ip4_input+0x1c2>
 800e8e2:	e00e      	b.n	800e902 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800e8e4:	6839      	ldr	r1, [r7, #0]
 800e8e6:	6878      	ldr	r0, [r7, #4]
 800e8e8:	f7fe fc42 	bl	800d170 <udp_input>
        break;
 800e8ec:	e026      	b.n	800e93c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800e8ee:	6839      	ldr	r1, [r7, #0]
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f7fa f863 	bl	80089bc <tcp_input>
        break;
 800e8f6:	e021      	b.n	800e93c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800e8f8:	6839      	ldr	r1, [r7, #0]
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7ff fcc8 	bl	800e290 <icmp_input>
        break;
 800e900:	e01c      	b.n	800e93c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e902:	4b1a      	ldr	r3, [pc, #104]	; (800e96c <ip4_input+0x240>)
 800e904:	695b      	ldr	r3, [r3, #20]
 800e906:	6939      	ldr	r1, [r7, #16]
 800e908:	4618      	mov	r0, r3
 800e90a:	f000 f90b 	bl	800eb24 <ip4_addr_isbroadcast_u32>
 800e90e:	4603      	mov	r3, r0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10f      	bne.n	800e934 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e914:	4b15      	ldr	r3, [pc, #84]	; (800e96c <ip4_input+0x240>)
 800e916:	695b      	ldr	r3, [r3, #20]
 800e918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800e91c:	2be0      	cmp	r3, #224	; 0xe0
 800e91e:	d009      	beq.n	800e934 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800e920:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800e924:	4619      	mov	r1, r3
 800e926:	6878      	ldr	r0, [r7, #4]
 800e928:	f7f7 ff5d 	bl	80067e6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800e92c:	2102      	movs	r1, #2
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7ff fdce 	bl	800e4d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f7f7 ff69 	bl	800680c <pbuf_free>
        break;
 800e93a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800e93c:	4b0b      	ldr	r3, [pc, #44]	; (800e96c <ip4_input+0x240>)
 800e93e:	2200      	movs	r2, #0
 800e940:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800e942:	4b0a      	ldr	r3, [pc, #40]	; (800e96c <ip4_input+0x240>)
 800e944:	2200      	movs	r2, #0
 800e946:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800e948:	4b08      	ldr	r3, [pc, #32]	; (800e96c <ip4_input+0x240>)
 800e94a:	2200      	movs	r2, #0
 800e94c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800e94e:	4b07      	ldr	r3, [pc, #28]	; (800e96c <ip4_input+0x240>)
 800e950:	2200      	movs	r2, #0
 800e952:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800e954:	4b05      	ldr	r3, [pc, #20]	; (800e96c <ip4_input+0x240>)
 800e956:	2200      	movs	r2, #0
 800e958:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800e95a:	4b04      	ldr	r3, [pc, #16]	; (800e96c <ip4_input+0x240>)
 800e95c:	2200      	movs	r2, #0
 800e95e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800e960:	2300      	movs	r3, #0
}
 800e962:	4618      	mov	r0, r3
 800e964:	3718      	adds	r7, #24
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	20005228 	.word	0x20005228
 800e970:	20008138 	.word	0x20008138

0800e974 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08a      	sub	sp, #40	; 0x28
 800e978:	af04      	add	r7, sp, #16
 800e97a:	60f8      	str	r0, [r7, #12]
 800e97c:	60b9      	str	r1, [r7, #8]
 800e97e:	607a      	str	r2, [r7, #4]
 800e980:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800e982:	68bb      	ldr	r3, [r7, #8]
 800e984:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d009      	beq.n	800e9a0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d003      	beq.n	800e99a <ip4_output_if+0x26>
 800e992:	68bb      	ldr	r3, [r7, #8]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d102      	bne.n	800e9a0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800e99a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99c:	3304      	adds	r3, #4
 800e99e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800e9a0:	78fa      	ldrb	r2, [r7, #3]
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	9302      	str	r3, [sp, #8]
 800e9a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e9aa:	9301      	str	r3, [sp, #4]
 800e9ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e9b0:	9300      	str	r3, [sp, #0]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	6979      	ldr	r1, [r7, #20]
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f000 f805 	bl	800e9c8 <ip4_output_if_src>
 800e9be:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	3718      	adds	r7, #24
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	bd80      	pop	{r7, pc}

0800e9c8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b088      	sub	sp, #32
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
 800e9d4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	7b9b      	ldrb	r3, [r3, #14]
 800e9da:	2b01      	cmp	r3, #1
 800e9dc:	d006      	beq.n	800e9ec <ip4_output_if_src+0x24>
 800e9de:	4b4b      	ldr	r3, [pc, #300]	; (800eb0c <ip4_output_if_src+0x144>)
 800e9e0:	f44f 7255 	mov.w	r2, #852	; 0x354
 800e9e4:	494a      	ldr	r1, [pc, #296]	; (800eb10 <ip4_output_if_src+0x148>)
 800e9e6:	484b      	ldr	r0, [pc, #300]	; (800eb14 <ip4_output_if_src+0x14c>)
 800e9e8:	f001 f8cc 	bl	800fb84 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d060      	beq.n	800eab4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800e9f2:	2314      	movs	r3, #20
 800e9f4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800e9f6:	2114      	movs	r1, #20
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7f7 fe71 	bl	80066e0 <pbuf_add_header>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ea04:	f06f 0301 	mvn.w	r3, #1
 800ea08:	e07c      	b.n	800eb04 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	685b      	ldr	r3, [r3, #4]
 800ea0e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	895b      	ldrh	r3, [r3, #10]
 800ea14:	2b13      	cmp	r3, #19
 800ea16:	d806      	bhi.n	800ea26 <ip4_output_if_src+0x5e>
 800ea18:	4b3c      	ldr	r3, [pc, #240]	; (800eb0c <ip4_output_if_src+0x144>)
 800ea1a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800ea1e:	493e      	ldr	r1, [pc, #248]	; (800eb18 <ip4_output_if_src+0x150>)
 800ea20:	483c      	ldr	r0, [pc, #240]	; (800eb14 <ip4_output_if_src+0x14c>)
 800ea22:	f001 f8af 	bl	800fb84 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	78fa      	ldrb	r2, [r7, #3]
 800ea2a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ea2c:	69fb      	ldr	r3, [r7, #28]
 800ea2e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ea32:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	69fb      	ldr	r3, [r7, #28]
 800ea3a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ea3c:	8b7b      	ldrh	r3, [r7, #26]
 800ea3e:	089b      	lsrs	r3, r3, #2
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	b2db      	uxtb	r3, r3
 800ea44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea48:	b2da      	uxtb	r2, r3
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ea54:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	891b      	ldrh	r3, [r3, #8]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7f6 fac0 	bl	8004fe0 <lwip_htons>
 800ea60:	4603      	mov	r3, r0
 800ea62:	461a      	mov	r2, r3
 800ea64:	69fb      	ldr	r3, [r7, #28]
 800ea66:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ea68:	69fb      	ldr	r3, [r7, #28]
 800ea6a:	2200      	movs	r2, #0
 800ea6c:	719a      	strb	r2, [r3, #6]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ea72:	4b2a      	ldr	r3, [pc, #168]	; (800eb1c <ip4_output_if_src+0x154>)
 800ea74:	881b      	ldrh	r3, [r3, #0]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7f6 fab2 	bl	8004fe0 <lwip_htons>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	461a      	mov	r2, r3
 800ea80:	69fb      	ldr	r3, [r7, #28]
 800ea82:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ea84:	4b25      	ldr	r3, [pc, #148]	; (800eb1c <ip4_output_if_src+0x154>)
 800ea86:	881b      	ldrh	r3, [r3, #0]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	b29a      	uxth	r2, r3
 800ea8c:	4b23      	ldr	r3, [pc, #140]	; (800eb1c <ip4_output_if_src+0x154>)
 800ea8e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d104      	bne.n	800eaa0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ea96:	4b22      	ldr	r3, [pc, #136]	; (800eb20 <ip4_output_if_src+0x158>)
 800ea98:	681a      	ldr	r2, [r3, #0]
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	60da      	str	r2, [r3, #12]
 800ea9e:	e003      	b.n	800eaa8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	69fb      	ldr	r3, [r7, #28]
 800eaa6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2200      	movs	r2, #0
 800eaac:	729a      	strb	r2, [r3, #10]
 800eaae:	2200      	movs	r2, #0
 800eab0:	72da      	strb	r2, [r3, #11]
 800eab2:	e00f      	b.n	800ead4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	895b      	ldrh	r3, [r3, #10]
 800eab8:	2b13      	cmp	r3, #19
 800eaba:	d802      	bhi.n	800eac2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eabc:	f06f 0301 	mvn.w	r3, #1
 800eac0:	e020      	b.n	800eb04 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	691b      	ldr	r3, [r3, #16]
 800eacc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800eace:	f107 0314 	add.w	r3, r7, #20
 800ead2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ead4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ead6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00c      	beq.n	800eaf6 <ip4_output_if_src+0x12e>
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	891a      	ldrh	r2, [r3, #8]
 800eae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eae2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d906      	bls.n	800eaf6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800eae8:	687a      	ldr	r2, [r7, #4]
 800eaea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eaec:	68f8      	ldr	r0, [r7, #12]
 800eaee:	f000 fde3 	bl	800f6b8 <ip4_frag>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	e006      	b.n	800eb04 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800eaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	68f9      	ldr	r1, [r7, #12]
 800eafe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb00:	4798      	blx	r3
 800eb02:	4603      	mov	r3, r0
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3720      	adds	r7, #32
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	0801335c 	.word	0x0801335c
 800eb10:	08013390 	.word	0x08013390
 800eb14:	0801339c 	.word	0x0801339c
 800eb18:	080133c4 	.word	0x080133c4
 800eb1c:	20008296 	.word	0x20008296
 800eb20:	080137a4 	.word	0x080137a4

0800eb24 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb38:	d002      	beq.n	800eb40 <ip4_addr_isbroadcast_u32+0x1c>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d101      	bne.n	800eb44 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800eb40:	2301      	movs	r3, #1
 800eb42:	e02a      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eb4a:	f003 0302 	and.w	r3, r3, #2
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d101      	bne.n	800eb56 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	e021      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	3304      	adds	r3, #4
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	687a      	ldr	r2, [r7, #4]
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d101      	bne.n	800eb66 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800eb62:	2300      	movs	r3, #0
 800eb64:	e019      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	3304      	adds	r3, #4
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	405a      	eors	r2, r3
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	3308      	adds	r3, #8
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4013      	ands	r3, r2
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d10d      	bne.n	800eb98 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	43da      	mvns	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	3308      	adds	r3, #8
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d101      	bne.n	800eb98 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800eb94:	2301      	movs	r3, #1
 800eb96:	e000      	b.n	800eb9a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800eb98:	2300      	movs	r3, #0
  }
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3714      	adds	r7, #20
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba4:	4770      	bx	lr
	...

0800eba8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 800ebb0:	2210      	movs	r2, #16
 800ebb2:	4904      	ldr	r1, [pc, #16]	; (800ebc4 <ip4addr_ntoa+0x1c>)
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 f807 	bl	800ebc8 <ip4addr_ntoa_r>
 800ebba:	4603      	mov	r3, r0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	20008298 	.word	0x20008298

0800ebc8 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b08d      	sub	sp, #52	; 0x34
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	60f8      	str	r0, [r7, #12]
 800ebd0:	60b9      	str	r1, [r7, #8]
 800ebd2:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	61bb      	str	r3, [r7, #24]

  rp = buf;
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 800ebe2:	f107 0318 	add.w	r3, r7, #24
 800ebe6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebee:	e058      	b.n	800eca2 <ip4addr_ntoa_r+0xda>
    i = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	781a      	ldrb	r2, [r3, #0]
 800ebfa:	4b32      	ldr	r3, [pc, #200]	; (800ecc4 <ip4addr_ntoa_r+0xfc>)
 800ebfc:	fba3 1302 	umull	r1, r3, r3, r2
 800ec00:	08d9      	lsrs	r1, r3, #3
 800ec02:	460b      	mov	r3, r1
 800ec04:	009b      	lsls	r3, r3, #2
 800ec06:	440b      	add	r3, r1
 800ec08:	005b      	lsls	r3, r3, #1
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 800ec0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	4a2c      	ldr	r2, [pc, #176]	; (800ecc4 <ip4addr_ntoa_r+0xfc>)
 800ec14:	fba2 2303 	umull	r2, r3, r2, r3
 800ec18:	08db      	lsrs	r3, r3, #3
 800ec1a:	b2da      	uxtb	r2, r3
 800ec1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 800ec20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec24:	1c5a      	adds	r2, r3, #1
 800ec26:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	7ffb      	ldrb	r3, [r7, #31]
 800ec2e:	3330      	adds	r3, #48	; 0x30
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	f101 0330 	add.w	r3, r1, #48	; 0x30
 800ec36:	443b      	add	r3, r7
 800ec38:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 800ec3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d1d8      	bne.n	800ebf6 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 800ec44:	e011      	b.n	800ec6a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	1c5a      	adds	r2, r3, #1
 800ec4a:	623a      	str	r2, [r7, #32]
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	429a      	cmp	r2, r3
 800ec50:	dc01      	bgt.n	800ec56 <ip4addr_ntoa_r+0x8e>
        return NULL;
 800ec52:	2300      	movs	r3, #0
 800ec54:	e030      	b.n	800ecb8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 800ec56:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ec5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec5c:	1c59      	adds	r1, r3, #1
 800ec5e:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ec60:	3230      	adds	r2, #48	; 0x30
 800ec62:	443a      	add	r2, r7
 800ec64:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 800ec68:	701a      	strb	r2, [r3, #0]
    while (i--) {
 800ec6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec6e:	1e5a      	subs	r2, r3, #1
 800ec70:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e6      	bne.n	800ec46 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 800ec78:	6a3b      	ldr	r3, [r7, #32]
 800ec7a:	1c5a      	adds	r2, r3, #1
 800ec7c:	623a      	str	r2, [r7, #32]
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	dc01      	bgt.n	800ec88 <ip4addr_ntoa_r+0xc0>
      return NULL;
 800ec84:	2300      	movs	r3, #0
 800ec86:	e017      	b.n	800ecb8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8a:	1c5a      	adds	r2, r3, #1
 800ec8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec8e:	222e      	movs	r2, #46	; 0x2e
 800ec90:	701a      	strb	r2, [r3, #0]
    ap++;
 800ec92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec94:	3301      	adds	r3, #1
 800ec96:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 800ec98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d9a2      	bls.n	800ebf0 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 800ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecac:	3b01      	subs	r3, #1
 800ecae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ecb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	701a      	strb	r2, [r3, #0]
  return buf;
 800ecb6:	68bb      	ldr	r3, [r7, #8]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3734      	adds	r7, #52	; 0x34
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	cccccccd 	.word	0xcccccccd

0800ecc8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ecd2:	4b12      	ldr	r3, [pc, #72]	; (800ed1c <ip_reass_tmr+0x54>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ecd8:	e018      	b.n	800ed0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	7fdb      	ldrb	r3, [r3, #31]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d00b      	beq.n	800ecfa <ip_reass_tmr+0x32>
      r->timer--;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	7fdb      	ldrb	r3, [r3, #31]
 800ece6:	3b01      	subs	r3, #1
 800ece8:	b2da      	uxtb	r2, r3
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	e008      	b.n	800ed0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ed04:	68b9      	ldr	r1, [r7, #8]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 f80a 	bl	800ed20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1e3      	bne.n	800ecda <ip_reass_tmr+0x12>
    }
  }
}
 800ed12:	bf00      	nop
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	200082a8 	.word	0x200082a8

0800ed20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b088      	sub	sp, #32
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d105      	bne.n	800ed42 <ip_reass_free_complete_datagram+0x22>
 800ed36:	4b45      	ldr	r3, [pc, #276]	; (800ee4c <ip_reass_free_complete_datagram+0x12c>)
 800ed38:	22ab      	movs	r2, #171	; 0xab
 800ed3a:	4945      	ldr	r1, [pc, #276]	; (800ee50 <ip_reass_free_complete_datagram+0x130>)
 800ed3c:	4845      	ldr	r0, [pc, #276]	; (800ee54 <ip_reass_free_complete_datagram+0x134>)
 800ed3e:	f000 ff21 	bl	800fb84 <iprintf>
  if (prev != NULL) {
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d00a      	beq.n	800ed5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	687a      	ldr	r2, [r7, #4]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d005      	beq.n	800ed5e <ip_reass_free_complete_datagram+0x3e>
 800ed52:	4b3e      	ldr	r3, [pc, #248]	; (800ee4c <ip_reass_free_complete_datagram+0x12c>)
 800ed54:	22ad      	movs	r2, #173	; 0xad
 800ed56:	4940      	ldr	r1, [pc, #256]	; (800ee58 <ip_reass_free_complete_datagram+0x138>)
 800ed58:	483e      	ldr	r0, [pc, #248]	; (800ee54 <ip_reass_free_complete_datagram+0x134>)
 800ed5a:	f000 ff13 	bl	800fb84 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	889b      	ldrh	r3, [r3, #4]
 800ed6a:	b29b      	uxth	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d12a      	bne.n	800edc6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ed7e:	69bb      	ldr	r3, [r7, #24]
 800ed80:	6858      	ldr	r0, [r3, #4]
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3308      	adds	r3, #8
 800ed86:	2214      	movs	r2, #20
 800ed88:	4619      	mov	r1, r3
 800ed8a:	f000 fee5 	bl	800fb58 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ed8e:	2101      	movs	r1, #1
 800ed90:	69b8      	ldr	r0, [r7, #24]
 800ed92:	f7ff fbad 	bl	800e4f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ed96:	69b8      	ldr	r0, [r7, #24]
 800ed98:	f7f7 fdc0 	bl	800691c <pbuf_clen>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800eda0:	8bfa      	ldrh	r2, [r7, #30]
 800eda2:	8a7b      	ldrh	r3, [r7, #18]
 800eda4:	4413      	add	r3, r2
 800eda6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edaa:	db05      	blt.n	800edb8 <ip_reass_free_complete_datagram+0x98>
 800edac:	4b27      	ldr	r3, [pc, #156]	; (800ee4c <ip_reass_free_complete_datagram+0x12c>)
 800edae:	22bc      	movs	r2, #188	; 0xbc
 800edb0:	492a      	ldr	r1, [pc, #168]	; (800ee5c <ip_reass_free_complete_datagram+0x13c>)
 800edb2:	4828      	ldr	r0, [pc, #160]	; (800ee54 <ip_reass_free_complete_datagram+0x134>)
 800edb4:	f000 fee6 	bl	800fb84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800edb8:	8bfa      	ldrh	r2, [r7, #30]
 800edba:	8a7b      	ldrh	r3, [r7, #18]
 800edbc:	4413      	add	r3, r2
 800edbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800edc0:	69b8      	ldr	r0, [r7, #24]
 800edc2:	f7f7 fd23 	bl	800680c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	685b      	ldr	r3, [r3, #4]
 800edca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800edcc:	e01f      	b.n	800ee0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	685b      	ldr	r3, [r3, #4]
 800edd2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800edde:	68f8      	ldr	r0, [r7, #12]
 800ede0:	f7f7 fd9c 	bl	800691c <pbuf_clen>
 800ede4:	4603      	mov	r3, r0
 800ede6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ede8:	8bfa      	ldrh	r2, [r7, #30]
 800edea:	8a7b      	ldrh	r3, [r7, #18]
 800edec:	4413      	add	r3, r2
 800edee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edf2:	db05      	blt.n	800ee00 <ip_reass_free_complete_datagram+0xe0>
 800edf4:	4b15      	ldr	r3, [pc, #84]	; (800ee4c <ip_reass_free_complete_datagram+0x12c>)
 800edf6:	22cc      	movs	r2, #204	; 0xcc
 800edf8:	4918      	ldr	r1, [pc, #96]	; (800ee5c <ip_reass_free_complete_datagram+0x13c>)
 800edfa:	4816      	ldr	r0, [pc, #88]	; (800ee54 <ip_reass_free_complete_datagram+0x134>)
 800edfc:	f000 fec2 	bl	800fb84 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ee00:	8bfa      	ldrh	r2, [r7, #30]
 800ee02:	8a7b      	ldrh	r3, [r7, #18]
 800ee04:	4413      	add	r3, r2
 800ee06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f7f7 fcff 	bl	800680c <pbuf_free>
  while (p != NULL) {
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d1dc      	bne.n	800edce <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ee14:	6839      	ldr	r1, [r7, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 f8c2 	bl	800efa0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ee1c:	4b10      	ldr	r3, [pc, #64]	; (800ee60 <ip_reass_free_complete_datagram+0x140>)
 800ee1e:	881b      	ldrh	r3, [r3, #0]
 800ee20:	8bfa      	ldrh	r2, [r7, #30]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d905      	bls.n	800ee32 <ip_reass_free_complete_datagram+0x112>
 800ee26:	4b09      	ldr	r3, [pc, #36]	; (800ee4c <ip_reass_free_complete_datagram+0x12c>)
 800ee28:	22d2      	movs	r2, #210	; 0xd2
 800ee2a:	490e      	ldr	r1, [pc, #56]	; (800ee64 <ip_reass_free_complete_datagram+0x144>)
 800ee2c:	4809      	ldr	r0, [pc, #36]	; (800ee54 <ip_reass_free_complete_datagram+0x134>)
 800ee2e:	f000 fea9 	bl	800fb84 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ee32:	4b0b      	ldr	r3, [pc, #44]	; (800ee60 <ip_reass_free_complete_datagram+0x140>)
 800ee34:	881a      	ldrh	r2, [r3, #0]
 800ee36:	8bfb      	ldrh	r3, [r7, #30]
 800ee38:	1ad3      	subs	r3, r2, r3
 800ee3a:	b29a      	uxth	r2, r3
 800ee3c:	4b08      	ldr	r3, [pc, #32]	; (800ee60 <ip_reass_free_complete_datagram+0x140>)
 800ee3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ee40:	8bfb      	ldrh	r3, [r7, #30]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3720      	adds	r7, #32
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	080133f4 	.word	0x080133f4
 800ee50:	08013430 	.word	0x08013430
 800ee54:	0801343c 	.word	0x0801343c
 800ee58:	08013464 	.word	0x08013464
 800ee5c:	08013478 	.word	0x08013478
 800ee60:	200082ac 	.word	0x200082ac
 800ee64:	08013498 	.word	0x08013498

0800ee68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08a      	sub	sp, #40	; 0x28
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ee72:	2300      	movs	r3, #0
 800ee74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ee76:	2300      	movs	r3, #0
 800ee78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ee86:	4b28      	ldr	r3, [pc, #160]	; (800ef28 <ip_reass_remove_oldest_datagram+0xc0>)
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ee8c:	e030      	b.n	800eef0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ee8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee90:	695a      	ldr	r2, [r3, #20]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d10c      	bne.n	800eeb4 <ip_reass_remove_oldest_datagram+0x4c>
 800ee9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee9c:	699a      	ldr	r2, [r3, #24]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	691b      	ldr	r3, [r3, #16]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d106      	bne.n	800eeb4 <ip_reass_remove_oldest_datagram+0x4c>
 800eea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eea8:	899a      	ldrh	r2, [r3, #12]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	889b      	ldrh	r3, [r3, #4]
 800eeae:	b29b      	uxth	r3, r3
 800eeb0:	429a      	cmp	r2, r3
 800eeb2:	d014      	beq.n	800eede <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	3301      	adds	r3, #1
 800eeb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eeba:	6a3b      	ldr	r3, [r7, #32]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d104      	bne.n	800eeca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eec4:	69fb      	ldr	r3, [r7, #28]
 800eec6:	61bb      	str	r3, [r7, #24]
 800eec8:	e009      	b.n	800eede <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800eeca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eecc:	7fda      	ldrb	r2, [r3, #31]
 800eece:	6a3b      	ldr	r3, [r7, #32]
 800eed0:	7fdb      	ldrb	r3, [r3, #31]
 800eed2:	429a      	cmp	r2, r3
 800eed4:	d803      	bhi.n	800eede <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800eed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eeda:	69fb      	ldr	r3, [r7, #28]
 800eedc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800eede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800eee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eee8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d1cb      	bne.n	800ee8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800eef6:	6a3b      	ldr	r3, [r7, #32]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d008      	beq.n	800ef0e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800eefc:	69b9      	ldr	r1, [r7, #24]
 800eefe:	6a38      	ldr	r0, [r7, #32]
 800ef00:	f7ff ff0e 	bl	800ed20 <ip_reass_free_complete_datagram>
 800ef04:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ef06:	697a      	ldr	r2, [r7, #20]
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	da02      	bge.n	800ef1c <ip_reass_remove_oldest_datagram+0xb4>
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	dcac      	bgt.n	800ee76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ef1c:	697b      	ldr	r3, [r7, #20]
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3728      	adds	r7, #40	; 0x28
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
 800ef26:	bf00      	nop
 800ef28:	200082a8 	.word	0x200082a8

0800ef2c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef36:	2004      	movs	r0, #4
 800ef38:	f7f6 fd82 	bl	8005a40 <memp_malloc>
 800ef3c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d110      	bne.n	800ef66 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ef44:	6839      	ldr	r1, [r7, #0]
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f7ff ff8e 	bl	800ee68 <ip_reass_remove_oldest_datagram>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	4293      	cmp	r3, r2
 800ef52:	dc03      	bgt.n	800ef5c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef54:	2004      	movs	r0, #4
 800ef56:	f7f6 fd73 	bl	8005a40 <memp_malloc>
 800ef5a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	e016      	b.n	800ef94 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ef66:	2220      	movs	r2, #32
 800ef68:	2100      	movs	r1, #0
 800ef6a:	68f8      	ldr	r0, [r7, #12]
 800ef6c:	f000 fe02 	bl	800fb74 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	220f      	movs	r2, #15
 800ef74:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ef76:	4b09      	ldr	r3, [pc, #36]	; (800ef9c <ip_reass_enqueue_new_datagram+0x70>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ef7e:	4a07      	ldr	r2, [pc, #28]	; (800ef9c <ip_reass_enqueue_new_datagram+0x70>)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	3308      	adds	r3, #8
 800ef88:	2214      	movs	r2, #20
 800ef8a:	6879      	ldr	r1, [r7, #4]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f000 fde3 	bl	800fb58 <memcpy>
  return ipr;
 800ef92:	68fb      	ldr	r3, [r7, #12]
}
 800ef94:	4618      	mov	r0, r3
 800ef96:	3710      	adds	r7, #16
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	bd80      	pop	{r7, pc}
 800ef9c:	200082a8 	.word	0x200082a8

0800efa0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800efaa:	4b10      	ldr	r3, [pc, #64]	; (800efec <ip_reass_dequeue_datagram+0x4c>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	429a      	cmp	r2, r3
 800efb2:	d104      	bne.n	800efbe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4a0c      	ldr	r2, [pc, #48]	; (800efec <ip_reass_dequeue_datagram+0x4c>)
 800efba:	6013      	str	r3, [r2, #0]
 800efbc:	e00d      	b.n	800efda <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d106      	bne.n	800efd2 <ip_reass_dequeue_datagram+0x32>
 800efc4:	4b0a      	ldr	r3, [pc, #40]	; (800eff0 <ip_reass_dequeue_datagram+0x50>)
 800efc6:	f240 1245 	movw	r2, #325	; 0x145
 800efca:	490a      	ldr	r1, [pc, #40]	; (800eff4 <ip_reass_dequeue_datagram+0x54>)
 800efcc:	480a      	ldr	r0, [pc, #40]	; (800eff8 <ip_reass_dequeue_datagram+0x58>)
 800efce:	f000 fdd9 	bl	800fb84 <iprintf>
    prev->next = ipr->next;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681a      	ldr	r2, [r3, #0]
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	2004      	movs	r0, #4
 800efde:	f7f6 fd9f 	bl	8005b20 <memp_free>
}
 800efe2:	bf00      	nop
 800efe4:	3708      	adds	r7, #8
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	200082a8 	.word	0x200082a8
 800eff0:	080133f4 	.word	0x080133f4
 800eff4:	080134bc 	.word	0x080134bc
 800eff8:	0801343c 	.word	0x0801343c

0800effc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b08c      	sub	sp, #48	; 0x30
 800f000:	af00      	add	r7, sp, #0
 800f002:	60f8      	str	r0, [r7, #12]
 800f004:	60b9      	str	r1, [r7, #8]
 800f006:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f008:	2300      	movs	r3, #0
 800f00a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f00c:	2301      	movs	r3, #1
 800f00e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	685b      	ldr	r3, [r3, #4]
 800f014:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	885b      	ldrh	r3, [r3, #2]
 800f01a:	b29b      	uxth	r3, r3
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7f5 ffdf 	bl	8004fe0 <lwip_htons>
 800f022:	4603      	mov	r3, r0
 800f024:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f026:	69fb      	ldr	r3, [r7, #28]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 030f 	and.w	r3, r3, #15
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f034:	7e7b      	ldrb	r3, [r7, #25]
 800f036:	b29b      	uxth	r3, r3
 800f038:	8b7a      	ldrh	r2, [r7, #26]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d202      	bcs.n	800f044 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f03e:	f04f 33ff 	mov.w	r3, #4294967295
 800f042:	e135      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f044:	7e7b      	ldrb	r3, [r7, #25]
 800f046:	b29b      	uxth	r3, r3
 800f048:	8b7a      	ldrh	r2, [r7, #26]
 800f04a:	1ad3      	subs	r3, r2, r3
 800f04c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f04e:	69fb      	ldr	r3, [r7, #28]
 800f050:	88db      	ldrh	r3, [r3, #6]
 800f052:	b29b      	uxth	r3, r3
 800f054:	4618      	mov	r0, r3
 800f056:	f7f5 ffc3 	bl	8004fe0 <lwip_htons>
 800f05a:	4603      	mov	r3, r0
 800f05c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f060:	b29b      	uxth	r3, r3
 800f062:	00db      	lsls	r3, r3, #3
 800f064:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f06e:	2200      	movs	r2, #0
 800f070:	701a      	strb	r2, [r3, #0]
 800f072:	2200      	movs	r2, #0
 800f074:	705a      	strb	r2, [r3, #1]
 800f076:	2200      	movs	r2, #0
 800f078:	709a      	strb	r2, [r3, #2]
 800f07a:	2200      	movs	r2, #0
 800f07c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f080:	8afa      	ldrh	r2, [r7, #22]
 800f082:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f084:	8afa      	ldrh	r2, [r7, #22]
 800f086:	8b7b      	ldrh	r3, [r7, #26]
 800f088:	4413      	add	r3, r2
 800f08a:	b29a      	uxth	r2, r3
 800f08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f08e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	88db      	ldrh	r3, [r3, #6]
 800f094:	b29b      	uxth	r3, r3
 800f096:	8afa      	ldrh	r2, [r7, #22]
 800f098:	429a      	cmp	r2, r3
 800f09a:	d902      	bls.n	800f0a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f09c:	f04f 33ff 	mov.w	r3, #4294967295
 800f0a0:	e106      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0a8:	e068      	b.n	800f17c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b2:	889b      	ldrh	r3, [r3, #4]
 800f0b4:	b29a      	uxth	r2, r3
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	889b      	ldrh	r3, [r3, #4]
 800f0ba:	b29b      	uxth	r3, r3
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d235      	bcs.n	800f12c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d020      	beq.n	800f10e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ce:	889b      	ldrh	r3, [r3, #4]
 800f0d0:	b29a      	uxth	r2, r3
 800f0d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0d4:	88db      	ldrh	r3, [r3, #6]
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d307      	bcc.n	800f0ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	88db      	ldrh	r3, [r3, #6]
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	889b      	ldrh	r3, [r3, #4]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d902      	bls.n	800f0f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f0:	e0de      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	88db      	ldrh	r3, [r3, #6]
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f100:	889b      	ldrh	r3, [r3, #4]
 800f102:	b29b      	uxth	r3, r3
 800f104:	429a      	cmp	r2, r3
 800f106:	d03d      	beq.n	800f184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f108:	2300      	movs	r3, #0
 800f10a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f10c:	e03a      	b.n	800f184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f10e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f110:	88db      	ldrh	r3, [r3, #6]
 800f112:	b29a      	uxth	r2, r3
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	889b      	ldrh	r3, [r3, #4]
 800f118:	b29b      	uxth	r3, r3
 800f11a:	429a      	cmp	r2, r3
 800f11c:	d902      	bls.n	800f124 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f11e:	f04f 33ff 	mov.w	r3, #4294967295
 800f122:	e0c5      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	68ba      	ldr	r2, [r7, #8]
 800f128:	605a      	str	r2, [r3, #4]
      break;
 800f12a:	e02b      	b.n	800f184 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	889b      	ldrh	r3, [r3, #4]
 800f130:	b29a      	uxth	r2, r3
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	889b      	ldrh	r3, [r3, #4]
 800f136:	b29b      	uxth	r3, r3
 800f138:	429a      	cmp	r2, r3
 800f13a:	d102      	bne.n	800f142 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f13c:	f04f 33ff 	mov.w	r3, #4294967295
 800f140:	e0b6      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f144:	889b      	ldrh	r3, [r3, #4]
 800f146:	b29a      	uxth	r2, r3
 800f148:	693b      	ldr	r3, [r7, #16]
 800f14a:	88db      	ldrh	r3, [r3, #6]
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	429a      	cmp	r2, r3
 800f150:	d202      	bcs.n	800f158 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f152:	f04f 33ff 	mov.w	r3, #4294967295
 800f156:	e0ab      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d009      	beq.n	800f172 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f160:	88db      	ldrh	r3, [r3, #6]
 800f162:	b29a      	uxth	r2, r3
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	889b      	ldrh	r3, [r3, #4]
 800f168:	b29b      	uxth	r3, r3
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d001      	beq.n	800f172 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f16e:	2300      	movs	r3, #0
 800f170:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f178:	693b      	ldr	r3, [r7, #16]
 800f17a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d193      	bne.n	800f0aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f182:	e000      	b.n	800f186 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f184:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d12d      	bne.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d01c      	beq.n	800f1cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f194:	88db      	ldrh	r3, [r3, #6]
 800f196:	b29a      	uxth	r2, r3
 800f198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19a:	889b      	ldrh	r3, [r3, #4]
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d906      	bls.n	800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f1a2:	4b45      	ldr	r3, [pc, #276]	; (800f2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f1a8:	4944      	ldr	r1, [pc, #272]	; (800f2bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f1aa:	4845      	ldr	r0, [pc, #276]	; (800f2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1ac:	f000 fcea 	bl	800fb84 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b8:	88db      	ldrh	r3, [r3, #6]
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1be:	889b      	ldrh	r3, [r3, #4]
 800f1c0:	b29b      	uxth	r3, r3
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d010      	beq.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	623b      	str	r3, [r7, #32]
 800f1ca:	e00d      	b.n	800f1e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d006      	beq.n	800f1e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f1d4:	4b38      	ldr	r3, [pc, #224]	; (800f2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1d6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800f1da:	493a      	ldr	r1, [pc, #232]	; (800f2c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f1dc:	4838      	ldr	r0, [pc, #224]	; (800f2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1de:	f000 fcd1 	bl	800fb84 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	68ba      	ldr	r2, [r7, #8]
 800f1e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d105      	bne.n	800f1fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	7f9b      	ldrb	r3, [r3, #30]
 800f1f2:	f003 0301 	and.w	r3, r3, #1
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d059      	beq.n	800f2ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f1fa:	6a3b      	ldr	r3, [r7, #32]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d04f      	beq.n	800f2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d006      	beq.n	800f216 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	685b      	ldr	r3, [r3, #4]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	889b      	ldrh	r3, [r3, #4]
 800f210:	b29b      	uxth	r3, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	d002      	beq.n	800f21c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	623b      	str	r3, [r7, #32]
 800f21a:	e041      	b.n	800f2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f226:	e012      	b.n	800f24e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f230:	88db      	ldrh	r3, [r3, #6]
 800f232:	b29a      	uxth	r2, r3
 800f234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f236:	889b      	ldrh	r3, [r3, #4]
 800f238:	b29b      	uxth	r3, r3
 800f23a:	429a      	cmp	r2, r3
 800f23c:	d002      	beq.n	800f244 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	623b      	str	r3, [r7, #32]
            break;
 800f242:	e007      	b.n	800f254 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f246:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f250:	2b00      	cmp	r3, #0
 800f252:	d1e9      	bne.n	800f228 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d022      	beq.n	800f2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	685b      	ldr	r3, [r3, #4]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d106      	bne.n	800f270 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f262:	4b15      	ldr	r3, [pc, #84]	; (800f2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f264:	f240 12df 	movw	r2, #479	; 0x1df
 800f268:	4917      	ldr	r1, [pc, #92]	; (800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f26a:	4815      	ldr	r0, [pc, #84]	; (800f2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f26c:	f000 fc8a 	bl	800fb84 <iprintf>
          LWIP_ASSERT("sanity check",
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	685b      	ldr	r3, [r3, #4]
 800f276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f278:	429a      	cmp	r2, r3
 800f27a:	d106      	bne.n	800f28a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f27c:	4b0e      	ldr	r3, [pc, #56]	; (800f2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f27e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f282:	4911      	ldr	r1, [pc, #68]	; (800f2c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f284:	480e      	ldr	r0, [pc, #56]	; (800f2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f286:	f000 fc7d 	bl	800fb84 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d006      	beq.n	800f2a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f292:	4b09      	ldr	r3, [pc, #36]	; (800f2b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f294:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800f298:	490c      	ldr	r1, [pc, #48]	; (800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f29a:	4809      	ldr	r0, [pc, #36]	; (800f2c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f29c:	f000 fc72 	bl	800fb84 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f2a0:	6a3b      	ldr	r3, [r7, #32]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	bf14      	ite	ne
 800f2a6:	2301      	movne	r3, #1
 800f2a8:	2300      	moveq	r3, #0
 800f2aa:	b2db      	uxtb	r3, r3
 800f2ac:	e000      	b.n	800f2b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f2ae:	2300      	movs	r3, #0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3730      	adds	r7, #48	; 0x30
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	080133f4 	.word	0x080133f4
 800f2bc:	080134d8 	.word	0x080134d8
 800f2c0:	0801343c 	.word	0x0801343c
 800f2c4:	080134f8 	.word	0x080134f8
 800f2c8:	08013530 	.word	0x08013530
 800f2cc:	08013540 	.word	0x08013540

0800f2d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b08e      	sub	sp, #56	; 0x38
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	f003 030f 	and.w	r3, r3, #15
 800f2e6:	b2db      	uxtb	r3, r3
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	2b14      	cmp	r3, #20
 800f2ee:	f040 8171 	bne.w	800f5d4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f4:	88db      	ldrh	r3, [r3, #6]
 800f2f6:	b29b      	uxth	r3, r3
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7f5 fe71 	bl	8004fe0 <lwip_htons>
 800f2fe:	4603      	mov	r3, r0
 800f300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f304:	b29b      	uxth	r3, r3
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	885b      	ldrh	r3, [r3, #2]
 800f30e:	b29b      	uxth	r3, r3
 800f310:	4618      	mov	r0, r3
 800f312:	f7f5 fe65 	bl	8004fe0 <lwip_htons>
 800f316:	4603      	mov	r3, r0
 800f318:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	f003 030f 	and.w	r3, r3, #15
 800f322:	b2db      	uxtb	r3, r3
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f32a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f32e:	b29b      	uxth	r3, r3
 800f330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f332:	429a      	cmp	r2, r3
 800f334:	f0c0 8150 	bcc.w	800f5d8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f338:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f33c:	b29b      	uxth	r3, r3
 800f33e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7f7 fae9 	bl	800691c <pbuf_clen>
 800f34a:	4603      	mov	r3, r0
 800f34c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f34e:	4b8c      	ldr	r3, [pc, #560]	; (800f580 <ip4_reass+0x2b0>)
 800f350:	881b      	ldrh	r3, [r3, #0]
 800f352:	461a      	mov	r2, r3
 800f354:	8c3b      	ldrh	r3, [r7, #32]
 800f356:	4413      	add	r3, r2
 800f358:	2b0a      	cmp	r3, #10
 800f35a:	dd10      	ble.n	800f37e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f35c:	8c3b      	ldrh	r3, [r7, #32]
 800f35e:	4619      	mov	r1, r3
 800f360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f362:	f7ff fd81 	bl	800ee68 <ip_reass_remove_oldest_datagram>
 800f366:	4603      	mov	r3, r0
 800f368:	2b00      	cmp	r3, #0
 800f36a:	f000 8137 	beq.w	800f5dc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f36e:	4b84      	ldr	r3, [pc, #528]	; (800f580 <ip4_reass+0x2b0>)
 800f370:	881b      	ldrh	r3, [r3, #0]
 800f372:	461a      	mov	r2, r3
 800f374:	8c3b      	ldrh	r3, [r7, #32]
 800f376:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f378:	2b0a      	cmp	r3, #10
 800f37a:	f300 812f 	bgt.w	800f5dc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f37e:	4b81      	ldr	r3, [pc, #516]	; (800f584 <ip4_reass+0x2b4>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	633b      	str	r3, [r7, #48]	; 0x30
 800f384:	e015      	b.n	800f3b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	695a      	ldr	r2, [r3, #20]
 800f38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	429a      	cmp	r2, r3
 800f390:	d10c      	bne.n	800f3ac <ip4_reass+0xdc>
 800f392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f394:	699a      	ldr	r2, [r3, #24]
 800f396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f398:	691b      	ldr	r3, [r3, #16]
 800f39a:	429a      	cmp	r2, r3
 800f39c:	d106      	bne.n	800f3ac <ip4_reass+0xdc>
 800f39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a0:	899a      	ldrh	r2, [r3, #12]
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	889b      	ldrh	r3, [r3, #4]
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d006      	beq.n	800f3ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	633b      	str	r3, [r7, #48]	; 0x30
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1e6      	bne.n	800f386 <ip4_reass+0xb6>
 800f3b8:	e000      	b.n	800f3bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f3ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f3bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d109      	bne.n	800f3d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f3c2:	8c3b      	ldrh	r3, [r7, #32]
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3c8:	f7ff fdb0 	bl	800ef2c <ip_reass_enqueue_new_datagram>
 800f3cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d11c      	bne.n	800f40e <ip4_reass+0x13e>
      goto nullreturn;
 800f3d4:	e105      	b.n	800f5e2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d8:	88db      	ldrh	r3, [r3, #6]
 800f3da:	b29b      	uxth	r3, r3
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7f5 fdff 	bl	8004fe0 <lwip_htons>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d110      	bne.n	800f40e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	89db      	ldrh	r3, [r3, #14]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7f5 fdf5 	bl	8004fe0 <lwip_htons>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d006      	beq.n	800f40e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f402:	3308      	adds	r3, #8
 800f404:	2214      	movs	r2, #20
 800f406:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f408:	4618      	mov	r0, r3
 800f40a:	f000 fba5 	bl	800fb58 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f40e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f410:	88db      	ldrh	r3, [r3, #6]
 800f412:	b29b      	uxth	r3, r3
 800f414:	f003 0320 	and.w	r3, r3, #32
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bf0c      	ite	eq
 800f41c:	2301      	moveq	r3, #1
 800f41e:	2300      	movne	r3, #0
 800f420:	b2db      	uxtb	r3, r3
 800f422:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f424:	69fb      	ldr	r3, [r7, #28]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00e      	beq.n	800f448 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f42a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f42c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f42e:	4413      	add	r3, r2
 800f430:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f432:	8b7a      	ldrh	r2, [r7, #26]
 800f434:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f436:	429a      	cmp	r2, r3
 800f438:	f0c0 80a0 	bcc.w	800f57c <ip4_reass+0x2ac>
 800f43c:	8b7b      	ldrh	r3, [r7, #26]
 800f43e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f442:	4293      	cmp	r3, r2
 800f444:	f200 809a 	bhi.w	800f57c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f448:	69fa      	ldr	r2, [r7, #28]
 800f44a:	6879      	ldr	r1, [r7, #4]
 800f44c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f44e:	f7ff fdd5 	bl	800effc <ip_reass_chain_frag_into_datagram_and_validate>
 800f452:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f454:	697b      	ldr	r3, [r7, #20]
 800f456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f45a:	f000 809b 	beq.w	800f594 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f45e:	4b48      	ldr	r3, [pc, #288]	; (800f580 <ip4_reass+0x2b0>)
 800f460:	881a      	ldrh	r2, [r3, #0]
 800f462:	8c3b      	ldrh	r3, [r7, #32]
 800f464:	4413      	add	r3, r2
 800f466:	b29a      	uxth	r2, r3
 800f468:	4b45      	ldr	r3, [pc, #276]	; (800f580 <ip4_reass+0x2b0>)
 800f46a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00d      	beq.n	800f48e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f472:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f474:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f476:	4413      	add	r3, r2
 800f478:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47c:	8a7a      	ldrh	r2, [r7, #18]
 800f47e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f482:	7f9b      	ldrb	r3, [r3, #30]
 800f484:	f043 0301 	orr.w	r3, r3, #1
 800f488:	b2da      	uxtb	r2, r3
 800f48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f48c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d171      	bne.n	800f578 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f496:	8b9b      	ldrh	r3, [r3, #28]
 800f498:	3314      	adds	r3, #20
 800f49a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	685b      	ldr	r3, [r3, #4]
 800f4ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b0:	3308      	adds	r3, #8
 800f4b2:	2214      	movs	r2, #20
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4b8:	f000 fb4e 	bl	800fb58 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4bc:	8a3b      	ldrh	r3, [r7, #16]
 800f4be:	4618      	mov	r0, r3
 800f4c0:	f7f5 fd8e 	bl	8004fe0 <lwip_htons>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	2200      	movs	r2, #0
 800f4d0:	719a      	strb	r2, [r3, #6]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	2200      	movs	r2, #0
 800f4da:	729a      	strb	r2, [r3, #10]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f4e6:	e00d      	b.n	800f504 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f4ee:	2114      	movs	r1, #20
 800f4f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f4f2:	f7f7 f905 	bl	8006700 <pbuf_remove_header>
      pbuf_cat(p, r);
 800f4f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7f7 fa49 	bl	8006990 <pbuf_cat>
      r = iprh->next_pbuf;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f506:	2b00      	cmp	r3, #0
 800f508:	d1ee      	bne.n	800f4e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f50a:	4b1e      	ldr	r3, [pc, #120]	; (800f584 <ip4_reass+0x2b4>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f510:	429a      	cmp	r2, r3
 800f512:	d102      	bne.n	800f51a <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f514:	2300      	movs	r3, #0
 800f516:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f518:	e010      	b.n	800f53c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f51a:	4b1a      	ldr	r3, [pc, #104]	; (800f584 <ip4_reass+0x2b4>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f520:	e007      	b.n	800f532 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f528:	429a      	cmp	r2, r3
 800f52a:	d006      	beq.n	800f53a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d1f4      	bne.n	800f522 <ip4_reass+0x252>
 800f538:	e000      	b.n	800f53c <ip4_reass+0x26c>
          break;
 800f53a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f53c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f53e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f540:	f7ff fd2e 	bl	800efa0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f7f7 f9e9 	bl	800691c <pbuf_clen>
 800f54a:	4603      	mov	r3, r0
 800f54c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f54e:	4b0c      	ldr	r3, [pc, #48]	; (800f580 <ip4_reass+0x2b0>)
 800f550:	881b      	ldrh	r3, [r3, #0]
 800f552:	8c3a      	ldrh	r2, [r7, #32]
 800f554:	429a      	cmp	r2, r3
 800f556:	d906      	bls.n	800f566 <ip4_reass+0x296>
 800f558:	4b0b      	ldr	r3, [pc, #44]	; (800f588 <ip4_reass+0x2b8>)
 800f55a:	f240 229b 	movw	r2, #667	; 0x29b
 800f55e:	490b      	ldr	r1, [pc, #44]	; (800f58c <ip4_reass+0x2bc>)
 800f560:	480b      	ldr	r0, [pc, #44]	; (800f590 <ip4_reass+0x2c0>)
 800f562:	f000 fb0f 	bl	800fb84 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f566:	4b06      	ldr	r3, [pc, #24]	; (800f580 <ip4_reass+0x2b0>)
 800f568:	881a      	ldrh	r2, [r3, #0]
 800f56a:	8c3b      	ldrh	r3, [r7, #32]
 800f56c:	1ad3      	subs	r3, r2, r3
 800f56e:	b29a      	uxth	r2, r3
 800f570:	4b03      	ldr	r3, [pc, #12]	; (800f580 <ip4_reass+0x2b0>)
 800f572:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	e038      	b.n	800f5ea <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f578:	2300      	movs	r3, #0
 800f57a:	e036      	b.n	800f5ea <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800f57c:	bf00      	nop
 800f57e:	e00a      	b.n	800f596 <ip4_reass+0x2c6>
 800f580:	200082ac 	.word	0x200082ac
 800f584:	200082a8 	.word	0x200082a8
 800f588:	080133f4 	.word	0x080133f4
 800f58c:	08013564 	.word	0x08013564
 800f590:	0801343c 	.word	0x0801343c
    goto nullreturn_ipr;
 800f594:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d106      	bne.n	800f5aa <ip4_reass+0x2da>
 800f59c:	4b15      	ldr	r3, [pc, #84]	; (800f5f4 <ip4_reass+0x324>)
 800f59e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f5a2:	4915      	ldr	r1, [pc, #84]	; (800f5f8 <ip4_reass+0x328>)
 800f5a4:	4815      	ldr	r0, [pc, #84]	; (800f5fc <ip4_reass+0x32c>)
 800f5a6:	f000 faed 	bl	800fb84 <iprintf>
  if (ipr->p == NULL) {
 800f5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5ac:	685b      	ldr	r3, [r3, #4]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d116      	bne.n	800f5e0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f5b2:	4b13      	ldr	r3, [pc, #76]	; (800f600 <ip4_reass+0x330>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d006      	beq.n	800f5ca <ip4_reass+0x2fa>
 800f5bc:	4b0d      	ldr	r3, [pc, #52]	; (800f5f4 <ip4_reass+0x324>)
 800f5be:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f5c2:	4910      	ldr	r1, [pc, #64]	; (800f604 <ip4_reass+0x334>)
 800f5c4:	480d      	ldr	r0, [pc, #52]	; (800f5fc <ip4_reass+0x32c>)
 800f5c6:	f000 fadd 	bl	800fb84 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5ce:	f7ff fce7 	bl	800efa0 <ip_reass_dequeue_datagram>
 800f5d2:	e006      	b.n	800f5e2 <ip4_reass+0x312>
    goto nullreturn;
 800f5d4:	bf00      	nop
 800f5d6:	e004      	b.n	800f5e2 <ip4_reass+0x312>
    goto nullreturn;
 800f5d8:	bf00      	nop
 800f5da:	e002      	b.n	800f5e2 <ip4_reass+0x312>
      goto nullreturn;
 800f5dc:	bf00      	nop
 800f5de:	e000      	b.n	800f5e2 <ip4_reass+0x312>
  }

nullreturn:
 800f5e0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f7f7 f912 	bl	800680c <pbuf_free>
  return NULL;
 800f5e8:	2300      	movs	r3, #0
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3738      	adds	r7, #56	; 0x38
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}
 800f5f2:	bf00      	nop
 800f5f4:	080133f4 	.word	0x080133f4
 800f5f8:	08013580 	.word	0x08013580
 800f5fc:	0801343c 	.word	0x0801343c
 800f600:	200082a8 	.word	0x200082a8
 800f604:	0801358c 	.word	0x0801358c

0800f608 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f60c:	2005      	movs	r0, #5
 800f60e:	f7f6 fa17 	bl	8005a40 <memp_malloc>
 800f612:	4603      	mov	r3, r0
}
 800f614:	4618      	mov	r0, r3
 800f616:	bd80      	pop	{r7, pc}

0800f618 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d106      	bne.n	800f634 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f626:	4b07      	ldr	r3, [pc, #28]	; (800f644 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f628:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f62c:	4906      	ldr	r1, [pc, #24]	; (800f648 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f62e:	4807      	ldr	r0, [pc, #28]	; (800f64c <ip_frag_free_pbuf_custom_ref+0x34>)
 800f630:	f000 faa8 	bl	800fb84 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	2005      	movs	r0, #5
 800f638:	f7f6 fa72 	bl	8005b20 <memp_free>
}
 800f63c:	bf00      	nop
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	080133f4 	.word	0x080133f4
 800f648:	080135ac 	.word	0x080135ac
 800f64c:	0801343c 	.word	0x0801343c

0800f650 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d106      	bne.n	800f670 <ipfrag_free_pbuf_custom+0x20>
 800f662:	4b11      	ldr	r3, [pc, #68]	; (800f6a8 <ipfrag_free_pbuf_custom+0x58>)
 800f664:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f668:	4910      	ldr	r1, [pc, #64]	; (800f6ac <ipfrag_free_pbuf_custom+0x5c>)
 800f66a:	4811      	ldr	r0, [pc, #68]	; (800f6b0 <ipfrag_free_pbuf_custom+0x60>)
 800f66c:	f000 fa8a 	bl	800fb84 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	429a      	cmp	r2, r3
 800f676:	d006      	beq.n	800f686 <ipfrag_free_pbuf_custom+0x36>
 800f678:	4b0b      	ldr	r3, [pc, #44]	; (800f6a8 <ipfrag_free_pbuf_custom+0x58>)
 800f67a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f67e:	490d      	ldr	r1, [pc, #52]	; (800f6b4 <ipfrag_free_pbuf_custom+0x64>)
 800f680:	480b      	ldr	r0, [pc, #44]	; (800f6b0 <ipfrag_free_pbuf_custom+0x60>)
 800f682:	f000 fa7f 	bl	800fb84 <iprintf>
  if (pcr->original != NULL) {
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	695b      	ldr	r3, [r3, #20]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d004      	beq.n	800f698 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	695b      	ldr	r3, [r3, #20]
 800f692:	4618      	mov	r0, r3
 800f694:	f7f7 f8ba 	bl	800680c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7ff ffbd 	bl	800f618 <ip_frag_free_pbuf_custom_ref>
}
 800f69e:	bf00      	nop
 800f6a0:	3710      	adds	r7, #16
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	080133f4 	.word	0x080133f4
 800f6ac:	080135b8 	.word	0x080135b8
 800f6b0:	0801343c 	.word	0x0801343c
 800f6b4:	080135c4 	.word	0x080135c4

0800f6b8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b094      	sub	sp, #80	; 0x50
 800f6bc:	af02      	add	r7, sp, #8
 800f6be:	60f8      	str	r0, [r7, #12]
 800f6c0:	60b9      	str	r1, [r7, #8]
 800f6c2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f6ce:	3b14      	subs	r3, #20
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da00      	bge.n	800f6d6 <ip4_frag+0x1e>
 800f6d4:	3307      	adds	r3, #7
 800f6d6:	10db      	asrs	r3, r3, #3
 800f6d8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f6da:	2314      	movs	r3, #20
 800f6dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	685b      	ldr	r3, [r3, #4]
 800f6e2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6e6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	f003 030f 	and.w	r3, r3, #15
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	2b14      	cmp	r3, #20
 800f6f8:	d002      	beq.n	800f700 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f6fa:	f06f 0305 	mvn.w	r3, #5
 800f6fe:	e110      	b.n	800f922 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	895b      	ldrh	r3, [r3, #10]
 800f704:	2b13      	cmp	r3, #19
 800f706:	d809      	bhi.n	800f71c <ip4_frag+0x64>
 800f708:	4b88      	ldr	r3, [pc, #544]	; (800f92c <ip4_frag+0x274>)
 800f70a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f70e:	4988      	ldr	r1, [pc, #544]	; (800f930 <ip4_frag+0x278>)
 800f710:	4888      	ldr	r0, [pc, #544]	; (800f934 <ip4_frag+0x27c>)
 800f712:	f000 fa37 	bl	800fb84 <iprintf>
 800f716:	f06f 0305 	mvn.w	r3, #5
 800f71a:	e102      	b.n	800f922 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71e:	88db      	ldrh	r3, [r3, #6]
 800f720:	b29b      	uxth	r3, r3
 800f722:	4618      	mov	r0, r3
 800f724:	f7f5 fc5c 	bl	8004fe0 <lwip_htons>
 800f728:	4603      	mov	r3, r0
 800f72a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f72c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f72e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f732:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f736:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f73c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	891b      	ldrh	r3, [r3, #8]
 800f742:	3b14      	subs	r3, #20
 800f744:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f748:	e0e1      	b.n	800f90e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f74a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f74c:	00db      	lsls	r3, r3, #3
 800f74e:	b29b      	uxth	r3, r3
 800f750:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f754:	4293      	cmp	r3, r2
 800f756:	bf28      	it	cs
 800f758:	4613      	movcs	r3, r2
 800f75a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f75c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f760:	2114      	movs	r1, #20
 800f762:	200e      	movs	r0, #14
 800f764:	f7f6 fd6e 	bl	8006244 <pbuf_alloc>
 800f768:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	f000 80d5 	beq.w	800f91c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f774:	895b      	ldrh	r3, [r3, #10]
 800f776:	2b13      	cmp	r3, #19
 800f778:	d806      	bhi.n	800f788 <ip4_frag+0xd0>
 800f77a:	4b6c      	ldr	r3, [pc, #432]	; (800f92c <ip4_frag+0x274>)
 800f77c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800f780:	496d      	ldr	r1, [pc, #436]	; (800f938 <ip4_frag+0x280>)
 800f782:	486c      	ldr	r0, [pc, #432]	; (800f934 <ip4_frag+0x27c>)
 800f784:	f000 f9fe 	bl	800fb84 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	2214      	movs	r2, #20
 800f78e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f790:	4618      	mov	r0, r3
 800f792:	f000 f9e1 	bl	800fb58 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f79c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f79e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f7a2:	e064      	b.n	800f86e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	895a      	ldrh	r2, [r3, #10]
 800f7a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f7aa:	1ad3      	subs	r3, r2, r3
 800f7ac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	895b      	ldrh	r3, [r3, #10]
 800f7b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d906      	bls.n	800f7c6 <ip4_frag+0x10e>
 800f7b8:	4b5c      	ldr	r3, [pc, #368]	; (800f92c <ip4_frag+0x274>)
 800f7ba:	f240 322d 	movw	r2, #813	; 0x32d
 800f7be:	495f      	ldr	r1, [pc, #380]	; (800f93c <ip4_frag+0x284>)
 800f7c0:	485c      	ldr	r0, [pc, #368]	; (800f934 <ip4_frag+0x27c>)
 800f7c2:	f000 f9df 	bl	800fb84 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f7c6:	8bfa      	ldrh	r2, [r7, #30]
 800f7c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7cc:	4293      	cmp	r3, r2
 800f7ce:	bf28      	it	cs
 800f7d0:	4613      	movcs	r3, r2
 800f7d2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f7d6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d105      	bne.n	800f7ea <ip4_frag+0x132>
        poff = 0;
 800f7de:	2300      	movs	r3, #0
 800f7e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	60fb      	str	r3, [r7, #12]
        continue;
 800f7e8:	e041      	b.n	800f86e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f7ea:	f7ff ff0d 	bl	800f608 <ip_frag_alloc_pbuf_custom_ref>
 800f7ee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f7f0:	69bb      	ldr	r3, [r7, #24]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d103      	bne.n	800f7fe <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f7f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f7f8:	f7f7 f808 	bl	800680c <pbuf_free>
        goto memerr;
 800f7fc:	e08f      	b.n	800f91e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f7fe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f806:	4413      	add	r3, r2
 800f808:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f80c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f810:	9201      	str	r2, [sp, #4]
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	4603      	mov	r3, r0
 800f816:	2241      	movs	r2, #65	; 0x41
 800f818:	2000      	movs	r0, #0
 800f81a:	f7f6 fe3d 	bl	8006498 <pbuf_alloced_custom>
 800f81e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d106      	bne.n	800f834 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f826:	69b8      	ldr	r0, [r7, #24]
 800f828:	f7ff fef6 	bl	800f618 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f82c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f82e:	f7f6 ffed 	bl	800680c <pbuf_free>
        goto memerr;
 800f832:	e074      	b.n	800f91e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f7f7 f889 	bl	800694c <pbuf_ref>
      pcr->original = p;
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	68fa      	ldr	r2, [r7, #12]
 800f83e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	4a3f      	ldr	r2, [pc, #252]	; (800f940 <ip4_frag+0x288>)
 800f844:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f846:	6979      	ldr	r1, [r7, #20]
 800f848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f84a:	f7f7 f8a1 	bl	8006990 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f84e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f852:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f85c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f860:	2b00      	cmp	r3, #0
 800f862:	d004      	beq.n	800f86e <ip4_frag+0x1b6>
        poff = 0;
 800f864:	2300      	movs	r3, #0
 800f866:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f86e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f872:	2b00      	cmp	r3, #0
 800f874:	d196      	bne.n	800f7a4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f876:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f878:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f87c:	4413      	add	r3, r2
 800f87e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f884:	f1a3 0213 	sub.w	r2, r3, #19
 800f888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f88c:	429a      	cmp	r2, r3
 800f88e:	bfcc      	ite	gt
 800f890:	2301      	movgt	r3, #1
 800f892:	2300      	movle	r3, #0
 800f894:	b2db      	uxtb	r3, r3
 800f896:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f898:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f89c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8a0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f8a2:	6a3b      	ldr	r3, [r7, #32]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d002      	beq.n	800f8ae <ip4_frag+0x1f6>
 800f8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d003      	beq.n	800f8b6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f8ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f8b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	f7f5 fb91 	bl	8004fe0 <lwip_htons>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	461a      	mov	r2, r3
 800f8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f8c6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8c8:	3314      	adds	r3, #20
 800f8ca:	b29b      	uxth	r3, r3
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7f5 fb87 	bl	8004fe0 <lwip_htons>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8d8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8dc:	2200      	movs	r2, #0
 800f8de:	729a      	strb	r2, [r3, #10]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	695b      	ldr	r3, [r3, #20]
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f8ec:	68b8      	ldr	r0, [r7, #8]
 800f8ee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f8f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8f2:	f7f6 ff8b 	bl	800680c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f8f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8fc:	1ad3      	subs	r3, r2, r3
 800f8fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f902:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f906:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f908:	4413      	add	r3, r2
 800f90a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f90e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f912:	2b00      	cmp	r3, #0
 800f914:	f47f af19 	bne.w	800f74a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f918:	2300      	movs	r3, #0
 800f91a:	e002      	b.n	800f922 <ip4_frag+0x26a>
      goto memerr;
 800f91c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f91e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f922:	4618      	mov	r0, r3
 800f924:	3748      	adds	r7, #72	; 0x48
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	080133f4 	.word	0x080133f4
 800f930:	080135d0 	.word	0x080135d0
 800f934:	0801343c 	.word	0x0801343c
 800f938:	080135ec 	.word	0x080135ec
 800f93c:	0801360c 	.word	0x0801360c
 800f940:	0800f651 	.word	0x0800f651

0800f944 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b086      	sub	sp, #24
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f94e:	230e      	movs	r3, #14
 800f950:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	895b      	ldrh	r3, [r3, #10]
 800f956:	2b0e      	cmp	r3, #14
 800f958:	d96e      	bls.n	800fa38 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	7bdb      	ldrb	r3, [r3, #15]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f968:	3301      	adds	r3, #1
 800f96a:	b2da      	uxtb	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	7b1a      	ldrb	r2, [r3, #12]
 800f97a:	7b5b      	ldrb	r3, [r3, #13]
 800f97c:	021b      	lsls	r3, r3, #8
 800f97e:	4313      	orrs	r3, r2
 800f980:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	f003 0301 	and.w	r3, r3, #1
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d023      	beq.n	800f9d6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	781b      	ldrb	r3, [r3, #0]
 800f992:	2b01      	cmp	r3, #1
 800f994:	d10f      	bne.n	800f9b6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	785b      	ldrb	r3, [r3, #1]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d11b      	bne.n	800f9d6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f99e:	693b      	ldr	r3, [r7, #16]
 800f9a0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9a2:	2b5e      	cmp	r3, #94	; 0x5e
 800f9a4:	d117      	bne.n	800f9d6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	7b5b      	ldrb	r3, [r3, #13]
 800f9aa:	f043 0310 	orr.w	r3, r3, #16
 800f9ae:	b2da      	uxtb	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	735a      	strb	r2, [r3, #13]
 800f9b4:	e00f      	b.n	800f9d6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	2206      	movs	r2, #6
 800f9ba:	4928      	ldr	r1, [pc, #160]	; (800fa5c <ethernet_input+0x118>)
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f000 f8bb 	bl	800fb38 <memcmp>
 800f9c2:	4603      	mov	r3, r0
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d106      	bne.n	800f9d6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	7b5b      	ldrb	r3, [r3, #13]
 800f9cc:	f043 0308 	orr.w	r3, r3, #8
 800f9d0:	b2da      	uxtb	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f9d6:	89fb      	ldrh	r3, [r7, #14]
 800f9d8:	2b08      	cmp	r3, #8
 800f9da:	d003      	beq.n	800f9e4 <ethernet_input+0xa0>
 800f9dc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f9e0:	d014      	beq.n	800fa0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f9e2:	e032      	b.n	800fa4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f9ea:	f003 0308 	and.w	r3, r3, #8
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d024      	beq.n	800fa3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800f9f2:	8afb      	ldrh	r3, [r7, #22]
 800f9f4:	4619      	mov	r1, r3
 800f9f6:	6878      	ldr	r0, [r7, #4]
 800f9f8:	f7f6 fe82 	bl	8006700 <pbuf_remove_header>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d11e      	bne.n	800fa40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fa02:	6839      	ldr	r1, [r7, #0]
 800fa04:	6878      	ldr	r0, [r7, #4]
 800fa06:	f7fe fe91 	bl	800e72c <ip4_input>
      break;
 800fa0a:	e013      	b.n	800fa34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa12:	f003 0308 	and.w	r3, r3, #8
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d014      	beq.n	800fa44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa1a:	8afb      	ldrh	r3, [r7, #22]
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	6878      	ldr	r0, [r7, #4]
 800fa20:	f7f6 fe6e 	bl	8006700 <pbuf_remove_header>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d10e      	bne.n	800fa48 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f7fe f80b 	bl	800da48 <etharp_input>
      break;
 800fa32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fa34:	2300      	movs	r3, #0
 800fa36:	e00c      	b.n	800fa52 <ethernet_input+0x10e>
    goto free_and_return;
 800fa38:	bf00      	nop
 800fa3a:	e006      	b.n	800fa4a <ethernet_input+0x106>
        goto free_and_return;
 800fa3c:	bf00      	nop
 800fa3e:	e004      	b.n	800fa4a <ethernet_input+0x106>
        goto free_and_return;
 800fa40:	bf00      	nop
 800fa42:	e002      	b.n	800fa4a <ethernet_input+0x106>
        goto free_and_return;
 800fa44:	bf00      	nop
 800fa46:	e000      	b.n	800fa4a <ethernet_input+0x106>
        goto free_and_return;
 800fa48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fa4a:	6878      	ldr	r0, [r7, #4]
 800fa4c:	f7f6 fede 	bl	800680c <pbuf_free>
  return ERR_OK;
 800fa50:	2300      	movs	r3, #0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3718      	adds	r7, #24
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	080137a8 	.word	0x080137a8

0800fa60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b086      	sub	sp, #24
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
 800fa6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fa6e:	8c3b      	ldrh	r3, [r7, #32]
 800fa70:	4618      	mov	r0, r3
 800fa72:	f7f5 fab5 	bl	8004fe0 <lwip_htons>
 800fa76:	4603      	mov	r3, r0
 800fa78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fa7a:	210e      	movs	r1, #14
 800fa7c:	68b8      	ldr	r0, [r7, #8]
 800fa7e:	f7f6 fe2f 	bl	80066e0 <pbuf_add_header>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d125      	bne.n	800fad4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	685b      	ldr	r3, [r3, #4]
 800fa8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800fa8e:	693b      	ldr	r3, [r7, #16]
 800fa90:	8afa      	ldrh	r2, [r7, #22]
 800fa92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800fa94:	693b      	ldr	r3, [r7, #16]
 800fa96:	2206      	movs	r2, #6
 800fa98:	6839      	ldr	r1, [r7, #0]
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f000 f85c 	bl	800fb58 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	3306      	adds	r3, #6
 800faa4:	2206      	movs	r2, #6
 800faa6:	6879      	ldr	r1, [r7, #4]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f000 f855 	bl	800fb58 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fab4:	2b06      	cmp	r3, #6
 800fab6:	d006      	beq.n	800fac6 <ethernet_output+0x66>
 800fab8:	4b0a      	ldr	r3, [pc, #40]	; (800fae4 <ethernet_output+0x84>)
 800faba:	f44f 7299 	mov.w	r2, #306	; 0x132
 800fabe:	490a      	ldr	r1, [pc, #40]	; (800fae8 <ethernet_output+0x88>)
 800fac0:	480a      	ldr	r0, [pc, #40]	; (800faec <ethernet_output+0x8c>)
 800fac2:	f000 f85f 	bl	800fb84 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	699b      	ldr	r3, [r3, #24]
 800faca:	68b9      	ldr	r1, [r7, #8]
 800facc:	68f8      	ldr	r0, [r7, #12]
 800face:	4798      	blx	r3
 800fad0:	4603      	mov	r3, r0
 800fad2:	e002      	b.n	800fada <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800fad4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800fad6:	f06f 0301 	mvn.w	r3, #1
}
 800fada:	4618      	mov	r0, r3
 800fadc:	3718      	adds	r7, #24
 800fade:	46bd      	mov	sp, r7
 800fae0:	bd80      	pop	{r7, pc}
 800fae2:	bf00      	nop
 800fae4:	0801361c 	.word	0x0801361c
 800fae8:	08013654 	.word	0x08013654
 800faec:	08013688 	.word	0x08013688

0800faf0 <__libc_init_array>:
 800faf0:	b570      	push	{r4, r5, r6, lr}
 800faf2:	4d0d      	ldr	r5, [pc, #52]	; (800fb28 <__libc_init_array+0x38>)
 800faf4:	4c0d      	ldr	r4, [pc, #52]	; (800fb2c <__libc_init_array+0x3c>)
 800faf6:	1b64      	subs	r4, r4, r5
 800faf8:	10a4      	asrs	r4, r4, #2
 800fafa:	2600      	movs	r6, #0
 800fafc:	42a6      	cmp	r6, r4
 800fafe:	d109      	bne.n	800fb14 <__libc_init_array+0x24>
 800fb00:	4d0b      	ldr	r5, [pc, #44]	; (800fb30 <__libc_init_array+0x40>)
 800fb02:	4c0c      	ldr	r4, [pc, #48]	; (800fb34 <__libc_init_array+0x44>)
 800fb04:	f001 f8a2 	bl	8010c4c <_init>
 800fb08:	1b64      	subs	r4, r4, r5
 800fb0a:	10a4      	asrs	r4, r4, #2
 800fb0c:	2600      	movs	r6, #0
 800fb0e:	42a6      	cmp	r6, r4
 800fb10:	d105      	bne.n	800fb1e <__libc_init_array+0x2e>
 800fb12:	bd70      	pop	{r4, r5, r6, pc}
 800fb14:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb18:	4798      	blx	r3
 800fb1a:	3601      	adds	r6, #1
 800fb1c:	e7ee      	b.n	800fafc <__libc_init_array+0xc>
 800fb1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb22:	4798      	blx	r3
 800fb24:	3601      	adds	r6, #1
 800fb26:	e7f2      	b.n	800fb0e <__libc_init_array+0x1e>
 800fb28:	08013908 	.word	0x08013908
 800fb2c:	08013908 	.word	0x08013908
 800fb30:	08013908 	.word	0x08013908
 800fb34:	0801390c 	.word	0x0801390c

0800fb38 <memcmp>:
 800fb38:	b510      	push	{r4, lr}
 800fb3a:	3901      	subs	r1, #1
 800fb3c:	4402      	add	r2, r0
 800fb3e:	4290      	cmp	r0, r2
 800fb40:	d101      	bne.n	800fb46 <memcmp+0xe>
 800fb42:	2000      	movs	r0, #0
 800fb44:	e005      	b.n	800fb52 <memcmp+0x1a>
 800fb46:	7803      	ldrb	r3, [r0, #0]
 800fb48:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fb4c:	42a3      	cmp	r3, r4
 800fb4e:	d001      	beq.n	800fb54 <memcmp+0x1c>
 800fb50:	1b18      	subs	r0, r3, r4
 800fb52:	bd10      	pop	{r4, pc}
 800fb54:	3001      	adds	r0, #1
 800fb56:	e7f2      	b.n	800fb3e <memcmp+0x6>

0800fb58 <memcpy>:
 800fb58:	440a      	add	r2, r1
 800fb5a:	4291      	cmp	r1, r2
 800fb5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb60:	d100      	bne.n	800fb64 <memcpy+0xc>
 800fb62:	4770      	bx	lr
 800fb64:	b510      	push	{r4, lr}
 800fb66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb6e:	4291      	cmp	r1, r2
 800fb70:	d1f9      	bne.n	800fb66 <memcpy+0xe>
 800fb72:	bd10      	pop	{r4, pc}

0800fb74 <memset>:
 800fb74:	4402      	add	r2, r0
 800fb76:	4603      	mov	r3, r0
 800fb78:	4293      	cmp	r3, r2
 800fb7a:	d100      	bne.n	800fb7e <memset+0xa>
 800fb7c:	4770      	bx	lr
 800fb7e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb82:	e7f9      	b.n	800fb78 <memset+0x4>

0800fb84 <iprintf>:
 800fb84:	b40f      	push	{r0, r1, r2, r3}
 800fb86:	4b0a      	ldr	r3, [pc, #40]	; (800fbb0 <iprintf+0x2c>)
 800fb88:	b513      	push	{r0, r1, r4, lr}
 800fb8a:	681c      	ldr	r4, [r3, #0]
 800fb8c:	b124      	cbz	r4, 800fb98 <iprintf+0x14>
 800fb8e:	69a3      	ldr	r3, [r4, #24]
 800fb90:	b913      	cbnz	r3, 800fb98 <iprintf+0x14>
 800fb92:	4620      	mov	r0, r4
 800fb94:	f000 f8d6 	bl	800fd44 <__sinit>
 800fb98:	ab05      	add	r3, sp, #20
 800fb9a:	9a04      	ldr	r2, [sp, #16]
 800fb9c:	68a1      	ldr	r1, [r4, #8]
 800fb9e:	9301      	str	r3, [sp, #4]
 800fba0:	4620      	mov	r0, r4
 800fba2:	f000 fa93 	bl	80100cc <_vfiprintf_r>
 800fba6:	b002      	add	sp, #8
 800fba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbac:	b004      	add	sp, #16
 800fbae:	4770      	bx	lr
 800fbb0:	2000002c 	.word	0x2000002c

0800fbb4 <rand>:
 800fbb4:	4b16      	ldr	r3, [pc, #88]	; (800fc10 <rand+0x5c>)
 800fbb6:	b510      	push	{r4, lr}
 800fbb8:	681c      	ldr	r4, [r3, #0]
 800fbba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fbbc:	b9b3      	cbnz	r3, 800fbec <rand+0x38>
 800fbbe:	2018      	movs	r0, #24
 800fbc0:	f000 f972 	bl	800fea8 <malloc>
 800fbc4:	63a0      	str	r0, [r4, #56]	; 0x38
 800fbc6:	b928      	cbnz	r0, 800fbd4 <rand+0x20>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	4b12      	ldr	r3, [pc, #72]	; (800fc14 <rand+0x60>)
 800fbcc:	4812      	ldr	r0, [pc, #72]	; (800fc18 <rand+0x64>)
 800fbce:	214e      	movs	r1, #78	; 0x4e
 800fbd0:	f000 f842 	bl	800fc58 <__assert_func>
 800fbd4:	4a11      	ldr	r2, [pc, #68]	; (800fc1c <rand+0x68>)
 800fbd6:	4b12      	ldr	r3, [pc, #72]	; (800fc20 <rand+0x6c>)
 800fbd8:	e9c0 2300 	strd	r2, r3, [r0]
 800fbdc:	4b11      	ldr	r3, [pc, #68]	; (800fc24 <rand+0x70>)
 800fbde:	6083      	str	r3, [r0, #8]
 800fbe0:	230b      	movs	r3, #11
 800fbe2:	8183      	strh	r3, [r0, #12]
 800fbe4:	2201      	movs	r2, #1
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fbec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800fbee:	4a0e      	ldr	r2, [pc, #56]	; (800fc28 <rand+0x74>)
 800fbf0:	6920      	ldr	r0, [r4, #16]
 800fbf2:	6963      	ldr	r3, [r4, #20]
 800fbf4:	490d      	ldr	r1, [pc, #52]	; (800fc2c <rand+0x78>)
 800fbf6:	4342      	muls	r2, r0
 800fbf8:	fb01 2203 	mla	r2, r1, r3, r2
 800fbfc:	fba0 0101 	umull	r0, r1, r0, r1
 800fc00:	1c43      	adds	r3, r0, #1
 800fc02:	eb42 0001 	adc.w	r0, r2, r1
 800fc06:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800fc0a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800fc0e:	bd10      	pop	{r4, pc}
 800fc10:	2000002c 	.word	0x2000002c
 800fc14:	080137bc 	.word	0x080137bc
 800fc18:	080137d3 	.word	0x080137d3
 800fc1c:	abcd330e 	.word	0xabcd330e
 800fc20:	e66d1234 	.word	0xe66d1234
 800fc24:	0005deec 	.word	0x0005deec
 800fc28:	5851f42d 	.word	0x5851f42d
 800fc2c:	4c957f2d 	.word	0x4c957f2d

0800fc30 <strncpy>:
 800fc30:	b510      	push	{r4, lr}
 800fc32:	3901      	subs	r1, #1
 800fc34:	4603      	mov	r3, r0
 800fc36:	b132      	cbz	r2, 800fc46 <strncpy+0x16>
 800fc38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fc3c:	f803 4b01 	strb.w	r4, [r3], #1
 800fc40:	3a01      	subs	r2, #1
 800fc42:	2c00      	cmp	r4, #0
 800fc44:	d1f7      	bne.n	800fc36 <strncpy+0x6>
 800fc46:	441a      	add	r2, r3
 800fc48:	2100      	movs	r1, #0
 800fc4a:	4293      	cmp	r3, r2
 800fc4c:	d100      	bne.n	800fc50 <strncpy+0x20>
 800fc4e:	bd10      	pop	{r4, pc}
 800fc50:	f803 1b01 	strb.w	r1, [r3], #1
 800fc54:	e7f9      	b.n	800fc4a <strncpy+0x1a>
	...

0800fc58 <__assert_func>:
 800fc58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fc5a:	4614      	mov	r4, r2
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	4b09      	ldr	r3, [pc, #36]	; (800fc84 <__assert_func+0x2c>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	4605      	mov	r5, r0
 800fc64:	68d8      	ldr	r0, [r3, #12]
 800fc66:	b14c      	cbz	r4, 800fc7c <__assert_func+0x24>
 800fc68:	4b07      	ldr	r3, [pc, #28]	; (800fc88 <__assert_func+0x30>)
 800fc6a:	9100      	str	r1, [sp, #0]
 800fc6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fc70:	4906      	ldr	r1, [pc, #24]	; (800fc8c <__assert_func+0x34>)
 800fc72:	462b      	mov	r3, r5
 800fc74:	f000 f8e4 	bl	800fe40 <fiprintf>
 800fc78:	f000 fe12 	bl	80108a0 <abort>
 800fc7c:	4b04      	ldr	r3, [pc, #16]	; (800fc90 <__assert_func+0x38>)
 800fc7e:	461c      	mov	r4, r3
 800fc80:	e7f3      	b.n	800fc6a <__assert_func+0x12>
 800fc82:	bf00      	nop
 800fc84:	2000002c 	.word	0x2000002c
 800fc88:	0801382e 	.word	0x0801382e
 800fc8c:	0801383b 	.word	0x0801383b
 800fc90:	08013869 	.word	0x08013869

0800fc94 <std>:
 800fc94:	2300      	movs	r3, #0
 800fc96:	b510      	push	{r4, lr}
 800fc98:	4604      	mov	r4, r0
 800fc9a:	e9c0 3300 	strd	r3, r3, [r0]
 800fc9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fca2:	6083      	str	r3, [r0, #8]
 800fca4:	8181      	strh	r1, [r0, #12]
 800fca6:	6643      	str	r3, [r0, #100]	; 0x64
 800fca8:	81c2      	strh	r2, [r0, #14]
 800fcaa:	6183      	str	r3, [r0, #24]
 800fcac:	4619      	mov	r1, r3
 800fcae:	2208      	movs	r2, #8
 800fcb0:	305c      	adds	r0, #92	; 0x5c
 800fcb2:	f7ff ff5f 	bl	800fb74 <memset>
 800fcb6:	4b05      	ldr	r3, [pc, #20]	; (800fccc <std+0x38>)
 800fcb8:	6263      	str	r3, [r4, #36]	; 0x24
 800fcba:	4b05      	ldr	r3, [pc, #20]	; (800fcd0 <std+0x3c>)
 800fcbc:	62a3      	str	r3, [r4, #40]	; 0x28
 800fcbe:	4b05      	ldr	r3, [pc, #20]	; (800fcd4 <std+0x40>)
 800fcc0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fcc2:	4b05      	ldr	r3, [pc, #20]	; (800fcd8 <std+0x44>)
 800fcc4:	6224      	str	r4, [r4, #32]
 800fcc6:	6323      	str	r3, [r4, #48]	; 0x30
 800fcc8:	bd10      	pop	{r4, pc}
 800fcca:	bf00      	nop
 800fccc:	08010675 	.word	0x08010675
 800fcd0:	08010697 	.word	0x08010697
 800fcd4:	080106cf 	.word	0x080106cf
 800fcd8:	080106f3 	.word	0x080106f3

0800fcdc <_cleanup_r>:
 800fcdc:	4901      	ldr	r1, [pc, #4]	; (800fce4 <_cleanup_r+0x8>)
 800fcde:	f000 b8c1 	b.w	800fe64 <_fwalk_reent>
 800fce2:	bf00      	nop
 800fce4:	080109dd 	.word	0x080109dd

0800fce8 <__sfmoreglue>:
 800fce8:	b570      	push	{r4, r5, r6, lr}
 800fcea:	2268      	movs	r2, #104	; 0x68
 800fcec:	1e4d      	subs	r5, r1, #1
 800fcee:	4355      	muls	r5, r2
 800fcf0:	460e      	mov	r6, r1
 800fcf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fcf6:	f000 f94b 	bl	800ff90 <_malloc_r>
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	b140      	cbz	r0, 800fd10 <__sfmoreglue+0x28>
 800fcfe:	2100      	movs	r1, #0
 800fd00:	e9c0 1600 	strd	r1, r6, [r0]
 800fd04:	300c      	adds	r0, #12
 800fd06:	60a0      	str	r0, [r4, #8]
 800fd08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd0c:	f7ff ff32 	bl	800fb74 <memset>
 800fd10:	4620      	mov	r0, r4
 800fd12:	bd70      	pop	{r4, r5, r6, pc}

0800fd14 <__sfp_lock_acquire>:
 800fd14:	4801      	ldr	r0, [pc, #4]	; (800fd1c <__sfp_lock_acquire+0x8>)
 800fd16:	f000 b8c5 	b.w	800fea4 <__retarget_lock_acquire_recursive>
 800fd1a:	bf00      	nop
 800fd1c:	200082b5 	.word	0x200082b5

0800fd20 <__sfp_lock_release>:
 800fd20:	4801      	ldr	r0, [pc, #4]	; (800fd28 <__sfp_lock_release+0x8>)
 800fd22:	f000 b8c0 	b.w	800fea6 <__retarget_lock_release_recursive>
 800fd26:	bf00      	nop
 800fd28:	200082b5 	.word	0x200082b5

0800fd2c <__sinit_lock_acquire>:
 800fd2c:	4801      	ldr	r0, [pc, #4]	; (800fd34 <__sinit_lock_acquire+0x8>)
 800fd2e:	f000 b8b9 	b.w	800fea4 <__retarget_lock_acquire_recursive>
 800fd32:	bf00      	nop
 800fd34:	200082b6 	.word	0x200082b6

0800fd38 <__sinit_lock_release>:
 800fd38:	4801      	ldr	r0, [pc, #4]	; (800fd40 <__sinit_lock_release+0x8>)
 800fd3a:	f000 b8b4 	b.w	800fea6 <__retarget_lock_release_recursive>
 800fd3e:	bf00      	nop
 800fd40:	200082b6 	.word	0x200082b6

0800fd44 <__sinit>:
 800fd44:	b510      	push	{r4, lr}
 800fd46:	4604      	mov	r4, r0
 800fd48:	f7ff fff0 	bl	800fd2c <__sinit_lock_acquire>
 800fd4c:	69a3      	ldr	r3, [r4, #24]
 800fd4e:	b11b      	cbz	r3, 800fd58 <__sinit+0x14>
 800fd50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd54:	f7ff bff0 	b.w	800fd38 <__sinit_lock_release>
 800fd58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fd5c:	6523      	str	r3, [r4, #80]	; 0x50
 800fd5e:	4b13      	ldr	r3, [pc, #76]	; (800fdac <__sinit+0x68>)
 800fd60:	4a13      	ldr	r2, [pc, #76]	; (800fdb0 <__sinit+0x6c>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	62a2      	str	r2, [r4, #40]	; 0x28
 800fd66:	42a3      	cmp	r3, r4
 800fd68:	bf04      	itt	eq
 800fd6a:	2301      	moveq	r3, #1
 800fd6c:	61a3      	streq	r3, [r4, #24]
 800fd6e:	4620      	mov	r0, r4
 800fd70:	f000 f820 	bl	800fdb4 <__sfp>
 800fd74:	6060      	str	r0, [r4, #4]
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 f81c 	bl	800fdb4 <__sfp>
 800fd7c:	60a0      	str	r0, [r4, #8]
 800fd7e:	4620      	mov	r0, r4
 800fd80:	f000 f818 	bl	800fdb4 <__sfp>
 800fd84:	2200      	movs	r2, #0
 800fd86:	60e0      	str	r0, [r4, #12]
 800fd88:	2104      	movs	r1, #4
 800fd8a:	6860      	ldr	r0, [r4, #4]
 800fd8c:	f7ff ff82 	bl	800fc94 <std>
 800fd90:	68a0      	ldr	r0, [r4, #8]
 800fd92:	2201      	movs	r2, #1
 800fd94:	2109      	movs	r1, #9
 800fd96:	f7ff ff7d 	bl	800fc94 <std>
 800fd9a:	68e0      	ldr	r0, [r4, #12]
 800fd9c:	2202      	movs	r2, #2
 800fd9e:	2112      	movs	r1, #18
 800fda0:	f7ff ff78 	bl	800fc94 <std>
 800fda4:	2301      	movs	r3, #1
 800fda6:	61a3      	str	r3, [r4, #24]
 800fda8:	e7d2      	b.n	800fd50 <__sinit+0xc>
 800fdaa:	bf00      	nop
 800fdac:	080137b8 	.word	0x080137b8
 800fdb0:	0800fcdd 	.word	0x0800fcdd

0800fdb4 <__sfp>:
 800fdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdb6:	4607      	mov	r7, r0
 800fdb8:	f7ff ffac 	bl	800fd14 <__sfp_lock_acquire>
 800fdbc:	4b1e      	ldr	r3, [pc, #120]	; (800fe38 <__sfp+0x84>)
 800fdbe:	681e      	ldr	r6, [r3, #0]
 800fdc0:	69b3      	ldr	r3, [r6, #24]
 800fdc2:	b913      	cbnz	r3, 800fdca <__sfp+0x16>
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f7ff ffbd 	bl	800fd44 <__sinit>
 800fdca:	3648      	adds	r6, #72	; 0x48
 800fdcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fdd0:	3b01      	subs	r3, #1
 800fdd2:	d503      	bpl.n	800fddc <__sfp+0x28>
 800fdd4:	6833      	ldr	r3, [r6, #0]
 800fdd6:	b30b      	cbz	r3, 800fe1c <__sfp+0x68>
 800fdd8:	6836      	ldr	r6, [r6, #0]
 800fdda:	e7f7      	b.n	800fdcc <__sfp+0x18>
 800fddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fde0:	b9d5      	cbnz	r5, 800fe18 <__sfp+0x64>
 800fde2:	4b16      	ldr	r3, [pc, #88]	; (800fe3c <__sfp+0x88>)
 800fde4:	60e3      	str	r3, [r4, #12]
 800fde6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fdea:	6665      	str	r5, [r4, #100]	; 0x64
 800fdec:	f000 f859 	bl	800fea2 <__retarget_lock_init_recursive>
 800fdf0:	f7ff ff96 	bl	800fd20 <__sfp_lock_release>
 800fdf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fdf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fdfc:	6025      	str	r5, [r4, #0]
 800fdfe:	61a5      	str	r5, [r4, #24]
 800fe00:	2208      	movs	r2, #8
 800fe02:	4629      	mov	r1, r5
 800fe04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe08:	f7ff feb4 	bl	800fb74 <memset>
 800fe0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe14:	4620      	mov	r0, r4
 800fe16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe18:	3468      	adds	r4, #104	; 0x68
 800fe1a:	e7d9      	b.n	800fdd0 <__sfp+0x1c>
 800fe1c:	2104      	movs	r1, #4
 800fe1e:	4638      	mov	r0, r7
 800fe20:	f7ff ff62 	bl	800fce8 <__sfmoreglue>
 800fe24:	4604      	mov	r4, r0
 800fe26:	6030      	str	r0, [r6, #0]
 800fe28:	2800      	cmp	r0, #0
 800fe2a:	d1d5      	bne.n	800fdd8 <__sfp+0x24>
 800fe2c:	f7ff ff78 	bl	800fd20 <__sfp_lock_release>
 800fe30:	230c      	movs	r3, #12
 800fe32:	603b      	str	r3, [r7, #0]
 800fe34:	e7ee      	b.n	800fe14 <__sfp+0x60>
 800fe36:	bf00      	nop
 800fe38:	080137b8 	.word	0x080137b8
 800fe3c:	ffff0001 	.word	0xffff0001

0800fe40 <fiprintf>:
 800fe40:	b40e      	push	{r1, r2, r3}
 800fe42:	b503      	push	{r0, r1, lr}
 800fe44:	4601      	mov	r1, r0
 800fe46:	ab03      	add	r3, sp, #12
 800fe48:	4805      	ldr	r0, [pc, #20]	; (800fe60 <fiprintf+0x20>)
 800fe4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe4e:	6800      	ldr	r0, [r0, #0]
 800fe50:	9301      	str	r3, [sp, #4]
 800fe52:	f000 f93b 	bl	80100cc <_vfiprintf_r>
 800fe56:	b002      	add	sp, #8
 800fe58:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe5c:	b003      	add	sp, #12
 800fe5e:	4770      	bx	lr
 800fe60:	2000002c 	.word	0x2000002c

0800fe64 <_fwalk_reent>:
 800fe64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fe68:	4606      	mov	r6, r0
 800fe6a:	4688      	mov	r8, r1
 800fe6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fe70:	2700      	movs	r7, #0
 800fe72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe76:	f1b9 0901 	subs.w	r9, r9, #1
 800fe7a:	d505      	bpl.n	800fe88 <_fwalk_reent+0x24>
 800fe7c:	6824      	ldr	r4, [r4, #0]
 800fe7e:	2c00      	cmp	r4, #0
 800fe80:	d1f7      	bne.n	800fe72 <_fwalk_reent+0xe>
 800fe82:	4638      	mov	r0, r7
 800fe84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe88:	89ab      	ldrh	r3, [r5, #12]
 800fe8a:	2b01      	cmp	r3, #1
 800fe8c:	d907      	bls.n	800fe9e <_fwalk_reent+0x3a>
 800fe8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe92:	3301      	adds	r3, #1
 800fe94:	d003      	beq.n	800fe9e <_fwalk_reent+0x3a>
 800fe96:	4629      	mov	r1, r5
 800fe98:	4630      	mov	r0, r6
 800fe9a:	47c0      	blx	r8
 800fe9c:	4307      	orrs	r7, r0
 800fe9e:	3568      	adds	r5, #104	; 0x68
 800fea0:	e7e9      	b.n	800fe76 <_fwalk_reent+0x12>

0800fea2 <__retarget_lock_init_recursive>:
 800fea2:	4770      	bx	lr

0800fea4 <__retarget_lock_acquire_recursive>:
 800fea4:	4770      	bx	lr

0800fea6 <__retarget_lock_release_recursive>:
 800fea6:	4770      	bx	lr

0800fea8 <malloc>:
 800fea8:	4b02      	ldr	r3, [pc, #8]	; (800feb4 <malloc+0xc>)
 800feaa:	4601      	mov	r1, r0
 800feac:	6818      	ldr	r0, [r3, #0]
 800feae:	f000 b86f 	b.w	800ff90 <_malloc_r>
 800feb2:	bf00      	nop
 800feb4:	2000002c 	.word	0x2000002c

0800feb8 <_free_r>:
 800feb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800feba:	2900      	cmp	r1, #0
 800febc:	d044      	beq.n	800ff48 <_free_r+0x90>
 800febe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fec2:	9001      	str	r0, [sp, #4]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f1a1 0404 	sub.w	r4, r1, #4
 800feca:	bfb8      	it	lt
 800fecc:	18e4      	addlt	r4, r4, r3
 800fece:	f000 fe39 	bl	8010b44 <__malloc_lock>
 800fed2:	4a1e      	ldr	r2, [pc, #120]	; (800ff4c <_free_r+0x94>)
 800fed4:	9801      	ldr	r0, [sp, #4]
 800fed6:	6813      	ldr	r3, [r2, #0]
 800fed8:	b933      	cbnz	r3, 800fee8 <_free_r+0x30>
 800feda:	6063      	str	r3, [r4, #4]
 800fedc:	6014      	str	r4, [r2, #0]
 800fede:	b003      	add	sp, #12
 800fee0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fee4:	f000 be34 	b.w	8010b50 <__malloc_unlock>
 800fee8:	42a3      	cmp	r3, r4
 800feea:	d908      	bls.n	800fefe <_free_r+0x46>
 800feec:	6825      	ldr	r5, [r4, #0]
 800feee:	1961      	adds	r1, r4, r5
 800fef0:	428b      	cmp	r3, r1
 800fef2:	bf01      	itttt	eq
 800fef4:	6819      	ldreq	r1, [r3, #0]
 800fef6:	685b      	ldreq	r3, [r3, #4]
 800fef8:	1949      	addeq	r1, r1, r5
 800fefa:	6021      	streq	r1, [r4, #0]
 800fefc:	e7ed      	b.n	800feda <_free_r+0x22>
 800fefe:	461a      	mov	r2, r3
 800ff00:	685b      	ldr	r3, [r3, #4]
 800ff02:	b10b      	cbz	r3, 800ff08 <_free_r+0x50>
 800ff04:	42a3      	cmp	r3, r4
 800ff06:	d9fa      	bls.n	800fefe <_free_r+0x46>
 800ff08:	6811      	ldr	r1, [r2, #0]
 800ff0a:	1855      	adds	r5, r2, r1
 800ff0c:	42a5      	cmp	r5, r4
 800ff0e:	d10b      	bne.n	800ff28 <_free_r+0x70>
 800ff10:	6824      	ldr	r4, [r4, #0]
 800ff12:	4421      	add	r1, r4
 800ff14:	1854      	adds	r4, r2, r1
 800ff16:	42a3      	cmp	r3, r4
 800ff18:	6011      	str	r1, [r2, #0]
 800ff1a:	d1e0      	bne.n	800fede <_free_r+0x26>
 800ff1c:	681c      	ldr	r4, [r3, #0]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	6053      	str	r3, [r2, #4]
 800ff22:	4421      	add	r1, r4
 800ff24:	6011      	str	r1, [r2, #0]
 800ff26:	e7da      	b.n	800fede <_free_r+0x26>
 800ff28:	d902      	bls.n	800ff30 <_free_r+0x78>
 800ff2a:	230c      	movs	r3, #12
 800ff2c:	6003      	str	r3, [r0, #0]
 800ff2e:	e7d6      	b.n	800fede <_free_r+0x26>
 800ff30:	6825      	ldr	r5, [r4, #0]
 800ff32:	1961      	adds	r1, r4, r5
 800ff34:	428b      	cmp	r3, r1
 800ff36:	bf04      	itt	eq
 800ff38:	6819      	ldreq	r1, [r3, #0]
 800ff3a:	685b      	ldreq	r3, [r3, #4]
 800ff3c:	6063      	str	r3, [r4, #4]
 800ff3e:	bf04      	itt	eq
 800ff40:	1949      	addeq	r1, r1, r5
 800ff42:	6021      	streq	r1, [r4, #0]
 800ff44:	6054      	str	r4, [r2, #4]
 800ff46:	e7ca      	b.n	800fede <_free_r+0x26>
 800ff48:	b003      	add	sp, #12
 800ff4a:	bd30      	pop	{r4, r5, pc}
 800ff4c:	200082b8 	.word	0x200082b8

0800ff50 <sbrk_aligned>:
 800ff50:	b570      	push	{r4, r5, r6, lr}
 800ff52:	4e0e      	ldr	r6, [pc, #56]	; (800ff8c <sbrk_aligned+0x3c>)
 800ff54:	460c      	mov	r4, r1
 800ff56:	6831      	ldr	r1, [r6, #0]
 800ff58:	4605      	mov	r5, r0
 800ff5a:	b911      	cbnz	r1, 800ff62 <sbrk_aligned+0x12>
 800ff5c:	f000 fb7a 	bl	8010654 <_sbrk_r>
 800ff60:	6030      	str	r0, [r6, #0]
 800ff62:	4621      	mov	r1, r4
 800ff64:	4628      	mov	r0, r5
 800ff66:	f000 fb75 	bl	8010654 <_sbrk_r>
 800ff6a:	1c43      	adds	r3, r0, #1
 800ff6c:	d00a      	beq.n	800ff84 <sbrk_aligned+0x34>
 800ff6e:	1cc4      	adds	r4, r0, #3
 800ff70:	f024 0403 	bic.w	r4, r4, #3
 800ff74:	42a0      	cmp	r0, r4
 800ff76:	d007      	beq.n	800ff88 <sbrk_aligned+0x38>
 800ff78:	1a21      	subs	r1, r4, r0
 800ff7a:	4628      	mov	r0, r5
 800ff7c:	f000 fb6a 	bl	8010654 <_sbrk_r>
 800ff80:	3001      	adds	r0, #1
 800ff82:	d101      	bne.n	800ff88 <sbrk_aligned+0x38>
 800ff84:	f04f 34ff 	mov.w	r4, #4294967295
 800ff88:	4620      	mov	r0, r4
 800ff8a:	bd70      	pop	{r4, r5, r6, pc}
 800ff8c:	200082bc 	.word	0x200082bc

0800ff90 <_malloc_r>:
 800ff90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff94:	1ccd      	adds	r5, r1, #3
 800ff96:	f025 0503 	bic.w	r5, r5, #3
 800ff9a:	3508      	adds	r5, #8
 800ff9c:	2d0c      	cmp	r5, #12
 800ff9e:	bf38      	it	cc
 800ffa0:	250c      	movcc	r5, #12
 800ffa2:	2d00      	cmp	r5, #0
 800ffa4:	4607      	mov	r7, r0
 800ffa6:	db01      	blt.n	800ffac <_malloc_r+0x1c>
 800ffa8:	42a9      	cmp	r1, r5
 800ffaa:	d905      	bls.n	800ffb8 <_malloc_r+0x28>
 800ffac:	230c      	movs	r3, #12
 800ffae:	603b      	str	r3, [r7, #0]
 800ffb0:	2600      	movs	r6, #0
 800ffb2:	4630      	mov	r0, r6
 800ffb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffb8:	4e2e      	ldr	r6, [pc, #184]	; (8010074 <_malloc_r+0xe4>)
 800ffba:	f000 fdc3 	bl	8010b44 <__malloc_lock>
 800ffbe:	6833      	ldr	r3, [r6, #0]
 800ffc0:	461c      	mov	r4, r3
 800ffc2:	bb34      	cbnz	r4, 8010012 <_malloc_r+0x82>
 800ffc4:	4629      	mov	r1, r5
 800ffc6:	4638      	mov	r0, r7
 800ffc8:	f7ff ffc2 	bl	800ff50 <sbrk_aligned>
 800ffcc:	1c43      	adds	r3, r0, #1
 800ffce:	4604      	mov	r4, r0
 800ffd0:	d14d      	bne.n	801006e <_malloc_r+0xde>
 800ffd2:	6834      	ldr	r4, [r6, #0]
 800ffd4:	4626      	mov	r6, r4
 800ffd6:	2e00      	cmp	r6, #0
 800ffd8:	d140      	bne.n	801005c <_malloc_r+0xcc>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	4631      	mov	r1, r6
 800ffde:	4638      	mov	r0, r7
 800ffe0:	eb04 0803 	add.w	r8, r4, r3
 800ffe4:	f000 fb36 	bl	8010654 <_sbrk_r>
 800ffe8:	4580      	cmp	r8, r0
 800ffea:	d13a      	bne.n	8010062 <_malloc_r+0xd2>
 800ffec:	6821      	ldr	r1, [r4, #0]
 800ffee:	3503      	adds	r5, #3
 800fff0:	1a6d      	subs	r5, r5, r1
 800fff2:	f025 0503 	bic.w	r5, r5, #3
 800fff6:	3508      	adds	r5, #8
 800fff8:	2d0c      	cmp	r5, #12
 800fffa:	bf38      	it	cc
 800fffc:	250c      	movcc	r5, #12
 800fffe:	4629      	mov	r1, r5
 8010000:	4638      	mov	r0, r7
 8010002:	f7ff ffa5 	bl	800ff50 <sbrk_aligned>
 8010006:	3001      	adds	r0, #1
 8010008:	d02b      	beq.n	8010062 <_malloc_r+0xd2>
 801000a:	6823      	ldr	r3, [r4, #0]
 801000c:	442b      	add	r3, r5
 801000e:	6023      	str	r3, [r4, #0]
 8010010:	e00e      	b.n	8010030 <_malloc_r+0xa0>
 8010012:	6822      	ldr	r2, [r4, #0]
 8010014:	1b52      	subs	r2, r2, r5
 8010016:	d41e      	bmi.n	8010056 <_malloc_r+0xc6>
 8010018:	2a0b      	cmp	r2, #11
 801001a:	d916      	bls.n	801004a <_malloc_r+0xba>
 801001c:	1961      	adds	r1, r4, r5
 801001e:	42a3      	cmp	r3, r4
 8010020:	6025      	str	r5, [r4, #0]
 8010022:	bf18      	it	ne
 8010024:	6059      	strne	r1, [r3, #4]
 8010026:	6863      	ldr	r3, [r4, #4]
 8010028:	bf08      	it	eq
 801002a:	6031      	streq	r1, [r6, #0]
 801002c:	5162      	str	r2, [r4, r5]
 801002e:	604b      	str	r3, [r1, #4]
 8010030:	4638      	mov	r0, r7
 8010032:	f104 060b 	add.w	r6, r4, #11
 8010036:	f000 fd8b 	bl	8010b50 <__malloc_unlock>
 801003a:	f026 0607 	bic.w	r6, r6, #7
 801003e:	1d23      	adds	r3, r4, #4
 8010040:	1af2      	subs	r2, r6, r3
 8010042:	d0b6      	beq.n	800ffb2 <_malloc_r+0x22>
 8010044:	1b9b      	subs	r3, r3, r6
 8010046:	50a3      	str	r3, [r4, r2]
 8010048:	e7b3      	b.n	800ffb2 <_malloc_r+0x22>
 801004a:	6862      	ldr	r2, [r4, #4]
 801004c:	42a3      	cmp	r3, r4
 801004e:	bf0c      	ite	eq
 8010050:	6032      	streq	r2, [r6, #0]
 8010052:	605a      	strne	r2, [r3, #4]
 8010054:	e7ec      	b.n	8010030 <_malloc_r+0xa0>
 8010056:	4623      	mov	r3, r4
 8010058:	6864      	ldr	r4, [r4, #4]
 801005a:	e7b2      	b.n	800ffc2 <_malloc_r+0x32>
 801005c:	4634      	mov	r4, r6
 801005e:	6876      	ldr	r6, [r6, #4]
 8010060:	e7b9      	b.n	800ffd6 <_malloc_r+0x46>
 8010062:	230c      	movs	r3, #12
 8010064:	603b      	str	r3, [r7, #0]
 8010066:	4638      	mov	r0, r7
 8010068:	f000 fd72 	bl	8010b50 <__malloc_unlock>
 801006c:	e7a1      	b.n	800ffb2 <_malloc_r+0x22>
 801006e:	6025      	str	r5, [r4, #0]
 8010070:	e7de      	b.n	8010030 <_malloc_r+0xa0>
 8010072:	bf00      	nop
 8010074:	200082b8 	.word	0x200082b8

08010078 <__sfputc_r>:
 8010078:	6893      	ldr	r3, [r2, #8]
 801007a:	3b01      	subs	r3, #1
 801007c:	2b00      	cmp	r3, #0
 801007e:	b410      	push	{r4}
 8010080:	6093      	str	r3, [r2, #8]
 8010082:	da08      	bge.n	8010096 <__sfputc_r+0x1e>
 8010084:	6994      	ldr	r4, [r2, #24]
 8010086:	42a3      	cmp	r3, r4
 8010088:	db01      	blt.n	801008e <__sfputc_r+0x16>
 801008a:	290a      	cmp	r1, #10
 801008c:	d103      	bne.n	8010096 <__sfputc_r+0x1e>
 801008e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010092:	f000 bb33 	b.w	80106fc <__swbuf_r>
 8010096:	6813      	ldr	r3, [r2, #0]
 8010098:	1c58      	adds	r0, r3, #1
 801009a:	6010      	str	r0, [r2, #0]
 801009c:	7019      	strb	r1, [r3, #0]
 801009e:	4608      	mov	r0, r1
 80100a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100a4:	4770      	bx	lr

080100a6 <__sfputs_r>:
 80100a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100a8:	4606      	mov	r6, r0
 80100aa:	460f      	mov	r7, r1
 80100ac:	4614      	mov	r4, r2
 80100ae:	18d5      	adds	r5, r2, r3
 80100b0:	42ac      	cmp	r4, r5
 80100b2:	d101      	bne.n	80100b8 <__sfputs_r+0x12>
 80100b4:	2000      	movs	r0, #0
 80100b6:	e007      	b.n	80100c8 <__sfputs_r+0x22>
 80100b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100bc:	463a      	mov	r2, r7
 80100be:	4630      	mov	r0, r6
 80100c0:	f7ff ffda 	bl	8010078 <__sfputc_r>
 80100c4:	1c43      	adds	r3, r0, #1
 80100c6:	d1f3      	bne.n	80100b0 <__sfputs_r+0xa>
 80100c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080100cc <_vfiprintf_r>:
 80100cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d0:	460d      	mov	r5, r1
 80100d2:	b09d      	sub	sp, #116	; 0x74
 80100d4:	4614      	mov	r4, r2
 80100d6:	4698      	mov	r8, r3
 80100d8:	4606      	mov	r6, r0
 80100da:	b118      	cbz	r0, 80100e4 <_vfiprintf_r+0x18>
 80100dc:	6983      	ldr	r3, [r0, #24]
 80100de:	b90b      	cbnz	r3, 80100e4 <_vfiprintf_r+0x18>
 80100e0:	f7ff fe30 	bl	800fd44 <__sinit>
 80100e4:	4b89      	ldr	r3, [pc, #548]	; (801030c <_vfiprintf_r+0x240>)
 80100e6:	429d      	cmp	r5, r3
 80100e8:	d11b      	bne.n	8010122 <_vfiprintf_r+0x56>
 80100ea:	6875      	ldr	r5, [r6, #4]
 80100ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80100ee:	07d9      	lsls	r1, r3, #31
 80100f0:	d405      	bmi.n	80100fe <_vfiprintf_r+0x32>
 80100f2:	89ab      	ldrh	r3, [r5, #12]
 80100f4:	059a      	lsls	r2, r3, #22
 80100f6:	d402      	bmi.n	80100fe <_vfiprintf_r+0x32>
 80100f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80100fa:	f7ff fed3 	bl	800fea4 <__retarget_lock_acquire_recursive>
 80100fe:	89ab      	ldrh	r3, [r5, #12]
 8010100:	071b      	lsls	r3, r3, #28
 8010102:	d501      	bpl.n	8010108 <_vfiprintf_r+0x3c>
 8010104:	692b      	ldr	r3, [r5, #16]
 8010106:	b9eb      	cbnz	r3, 8010144 <_vfiprintf_r+0x78>
 8010108:	4629      	mov	r1, r5
 801010a:	4630      	mov	r0, r6
 801010c:	f000 fb5a 	bl	80107c4 <__swsetup_r>
 8010110:	b1c0      	cbz	r0, 8010144 <_vfiprintf_r+0x78>
 8010112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010114:	07dc      	lsls	r4, r3, #31
 8010116:	d50e      	bpl.n	8010136 <_vfiprintf_r+0x6a>
 8010118:	f04f 30ff 	mov.w	r0, #4294967295
 801011c:	b01d      	add	sp, #116	; 0x74
 801011e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010122:	4b7b      	ldr	r3, [pc, #492]	; (8010310 <_vfiprintf_r+0x244>)
 8010124:	429d      	cmp	r5, r3
 8010126:	d101      	bne.n	801012c <_vfiprintf_r+0x60>
 8010128:	68b5      	ldr	r5, [r6, #8]
 801012a:	e7df      	b.n	80100ec <_vfiprintf_r+0x20>
 801012c:	4b79      	ldr	r3, [pc, #484]	; (8010314 <_vfiprintf_r+0x248>)
 801012e:	429d      	cmp	r5, r3
 8010130:	bf08      	it	eq
 8010132:	68f5      	ldreq	r5, [r6, #12]
 8010134:	e7da      	b.n	80100ec <_vfiprintf_r+0x20>
 8010136:	89ab      	ldrh	r3, [r5, #12]
 8010138:	0598      	lsls	r0, r3, #22
 801013a:	d4ed      	bmi.n	8010118 <_vfiprintf_r+0x4c>
 801013c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801013e:	f7ff feb2 	bl	800fea6 <__retarget_lock_release_recursive>
 8010142:	e7e9      	b.n	8010118 <_vfiprintf_r+0x4c>
 8010144:	2300      	movs	r3, #0
 8010146:	9309      	str	r3, [sp, #36]	; 0x24
 8010148:	2320      	movs	r3, #32
 801014a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801014e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010152:	2330      	movs	r3, #48	; 0x30
 8010154:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010318 <_vfiprintf_r+0x24c>
 8010158:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801015c:	f04f 0901 	mov.w	r9, #1
 8010160:	4623      	mov	r3, r4
 8010162:	469a      	mov	sl, r3
 8010164:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010168:	b10a      	cbz	r2, 801016e <_vfiprintf_r+0xa2>
 801016a:	2a25      	cmp	r2, #37	; 0x25
 801016c:	d1f9      	bne.n	8010162 <_vfiprintf_r+0x96>
 801016e:	ebba 0b04 	subs.w	fp, sl, r4
 8010172:	d00b      	beq.n	801018c <_vfiprintf_r+0xc0>
 8010174:	465b      	mov	r3, fp
 8010176:	4622      	mov	r2, r4
 8010178:	4629      	mov	r1, r5
 801017a:	4630      	mov	r0, r6
 801017c:	f7ff ff93 	bl	80100a6 <__sfputs_r>
 8010180:	3001      	adds	r0, #1
 8010182:	f000 80aa 	beq.w	80102da <_vfiprintf_r+0x20e>
 8010186:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010188:	445a      	add	r2, fp
 801018a:	9209      	str	r2, [sp, #36]	; 0x24
 801018c:	f89a 3000 	ldrb.w	r3, [sl]
 8010190:	2b00      	cmp	r3, #0
 8010192:	f000 80a2 	beq.w	80102da <_vfiprintf_r+0x20e>
 8010196:	2300      	movs	r3, #0
 8010198:	f04f 32ff 	mov.w	r2, #4294967295
 801019c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80101a0:	f10a 0a01 	add.w	sl, sl, #1
 80101a4:	9304      	str	r3, [sp, #16]
 80101a6:	9307      	str	r3, [sp, #28]
 80101a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101ac:	931a      	str	r3, [sp, #104]	; 0x68
 80101ae:	4654      	mov	r4, sl
 80101b0:	2205      	movs	r2, #5
 80101b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101b6:	4858      	ldr	r0, [pc, #352]	; (8010318 <_vfiprintf_r+0x24c>)
 80101b8:	f7f0 f822 	bl	8000200 <memchr>
 80101bc:	9a04      	ldr	r2, [sp, #16]
 80101be:	b9d8      	cbnz	r0, 80101f8 <_vfiprintf_r+0x12c>
 80101c0:	06d1      	lsls	r1, r2, #27
 80101c2:	bf44      	itt	mi
 80101c4:	2320      	movmi	r3, #32
 80101c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ca:	0713      	lsls	r3, r2, #28
 80101cc:	bf44      	itt	mi
 80101ce:	232b      	movmi	r3, #43	; 0x2b
 80101d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101d4:	f89a 3000 	ldrb.w	r3, [sl]
 80101d8:	2b2a      	cmp	r3, #42	; 0x2a
 80101da:	d015      	beq.n	8010208 <_vfiprintf_r+0x13c>
 80101dc:	9a07      	ldr	r2, [sp, #28]
 80101de:	4654      	mov	r4, sl
 80101e0:	2000      	movs	r0, #0
 80101e2:	f04f 0c0a 	mov.w	ip, #10
 80101e6:	4621      	mov	r1, r4
 80101e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101ec:	3b30      	subs	r3, #48	; 0x30
 80101ee:	2b09      	cmp	r3, #9
 80101f0:	d94e      	bls.n	8010290 <_vfiprintf_r+0x1c4>
 80101f2:	b1b0      	cbz	r0, 8010222 <_vfiprintf_r+0x156>
 80101f4:	9207      	str	r2, [sp, #28]
 80101f6:	e014      	b.n	8010222 <_vfiprintf_r+0x156>
 80101f8:	eba0 0308 	sub.w	r3, r0, r8
 80101fc:	fa09 f303 	lsl.w	r3, r9, r3
 8010200:	4313      	orrs	r3, r2
 8010202:	9304      	str	r3, [sp, #16]
 8010204:	46a2      	mov	sl, r4
 8010206:	e7d2      	b.n	80101ae <_vfiprintf_r+0xe2>
 8010208:	9b03      	ldr	r3, [sp, #12]
 801020a:	1d19      	adds	r1, r3, #4
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	9103      	str	r1, [sp, #12]
 8010210:	2b00      	cmp	r3, #0
 8010212:	bfbb      	ittet	lt
 8010214:	425b      	neglt	r3, r3
 8010216:	f042 0202 	orrlt.w	r2, r2, #2
 801021a:	9307      	strge	r3, [sp, #28]
 801021c:	9307      	strlt	r3, [sp, #28]
 801021e:	bfb8      	it	lt
 8010220:	9204      	strlt	r2, [sp, #16]
 8010222:	7823      	ldrb	r3, [r4, #0]
 8010224:	2b2e      	cmp	r3, #46	; 0x2e
 8010226:	d10c      	bne.n	8010242 <_vfiprintf_r+0x176>
 8010228:	7863      	ldrb	r3, [r4, #1]
 801022a:	2b2a      	cmp	r3, #42	; 0x2a
 801022c:	d135      	bne.n	801029a <_vfiprintf_r+0x1ce>
 801022e:	9b03      	ldr	r3, [sp, #12]
 8010230:	1d1a      	adds	r2, r3, #4
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	9203      	str	r2, [sp, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	bfb8      	it	lt
 801023a:	f04f 33ff 	movlt.w	r3, #4294967295
 801023e:	3402      	adds	r4, #2
 8010240:	9305      	str	r3, [sp, #20]
 8010242:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010328 <_vfiprintf_r+0x25c>
 8010246:	7821      	ldrb	r1, [r4, #0]
 8010248:	2203      	movs	r2, #3
 801024a:	4650      	mov	r0, sl
 801024c:	f7ef ffd8 	bl	8000200 <memchr>
 8010250:	b140      	cbz	r0, 8010264 <_vfiprintf_r+0x198>
 8010252:	2340      	movs	r3, #64	; 0x40
 8010254:	eba0 000a 	sub.w	r0, r0, sl
 8010258:	fa03 f000 	lsl.w	r0, r3, r0
 801025c:	9b04      	ldr	r3, [sp, #16]
 801025e:	4303      	orrs	r3, r0
 8010260:	3401      	adds	r4, #1
 8010262:	9304      	str	r3, [sp, #16]
 8010264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010268:	482c      	ldr	r0, [pc, #176]	; (801031c <_vfiprintf_r+0x250>)
 801026a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801026e:	2206      	movs	r2, #6
 8010270:	f7ef ffc6 	bl	8000200 <memchr>
 8010274:	2800      	cmp	r0, #0
 8010276:	d03f      	beq.n	80102f8 <_vfiprintf_r+0x22c>
 8010278:	4b29      	ldr	r3, [pc, #164]	; (8010320 <_vfiprintf_r+0x254>)
 801027a:	bb1b      	cbnz	r3, 80102c4 <_vfiprintf_r+0x1f8>
 801027c:	9b03      	ldr	r3, [sp, #12]
 801027e:	3307      	adds	r3, #7
 8010280:	f023 0307 	bic.w	r3, r3, #7
 8010284:	3308      	adds	r3, #8
 8010286:	9303      	str	r3, [sp, #12]
 8010288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801028a:	443b      	add	r3, r7
 801028c:	9309      	str	r3, [sp, #36]	; 0x24
 801028e:	e767      	b.n	8010160 <_vfiprintf_r+0x94>
 8010290:	fb0c 3202 	mla	r2, ip, r2, r3
 8010294:	460c      	mov	r4, r1
 8010296:	2001      	movs	r0, #1
 8010298:	e7a5      	b.n	80101e6 <_vfiprintf_r+0x11a>
 801029a:	2300      	movs	r3, #0
 801029c:	3401      	adds	r4, #1
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	4619      	mov	r1, r3
 80102a2:	f04f 0c0a 	mov.w	ip, #10
 80102a6:	4620      	mov	r0, r4
 80102a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102ac:	3a30      	subs	r2, #48	; 0x30
 80102ae:	2a09      	cmp	r2, #9
 80102b0:	d903      	bls.n	80102ba <_vfiprintf_r+0x1ee>
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d0c5      	beq.n	8010242 <_vfiprintf_r+0x176>
 80102b6:	9105      	str	r1, [sp, #20]
 80102b8:	e7c3      	b.n	8010242 <_vfiprintf_r+0x176>
 80102ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80102be:	4604      	mov	r4, r0
 80102c0:	2301      	movs	r3, #1
 80102c2:	e7f0      	b.n	80102a6 <_vfiprintf_r+0x1da>
 80102c4:	ab03      	add	r3, sp, #12
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	462a      	mov	r2, r5
 80102ca:	4b16      	ldr	r3, [pc, #88]	; (8010324 <_vfiprintf_r+0x258>)
 80102cc:	a904      	add	r1, sp, #16
 80102ce:	4630      	mov	r0, r6
 80102d0:	f3af 8000 	nop.w
 80102d4:	4607      	mov	r7, r0
 80102d6:	1c78      	adds	r0, r7, #1
 80102d8:	d1d6      	bne.n	8010288 <_vfiprintf_r+0x1bc>
 80102da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80102dc:	07d9      	lsls	r1, r3, #31
 80102de:	d405      	bmi.n	80102ec <_vfiprintf_r+0x220>
 80102e0:	89ab      	ldrh	r3, [r5, #12]
 80102e2:	059a      	lsls	r2, r3, #22
 80102e4:	d402      	bmi.n	80102ec <_vfiprintf_r+0x220>
 80102e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80102e8:	f7ff fddd 	bl	800fea6 <__retarget_lock_release_recursive>
 80102ec:	89ab      	ldrh	r3, [r5, #12]
 80102ee:	065b      	lsls	r3, r3, #25
 80102f0:	f53f af12 	bmi.w	8010118 <_vfiprintf_r+0x4c>
 80102f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102f6:	e711      	b.n	801011c <_vfiprintf_r+0x50>
 80102f8:	ab03      	add	r3, sp, #12
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	462a      	mov	r2, r5
 80102fe:	4b09      	ldr	r3, [pc, #36]	; (8010324 <_vfiprintf_r+0x258>)
 8010300:	a904      	add	r1, sp, #16
 8010302:	4630      	mov	r0, r6
 8010304:	f000 f880 	bl	8010408 <_printf_i>
 8010308:	e7e4      	b.n	80102d4 <_vfiprintf_r+0x208>
 801030a:	bf00      	nop
 801030c:	0801388c 	.word	0x0801388c
 8010310:	080138ac 	.word	0x080138ac
 8010314:	0801386c 	.word	0x0801386c
 8010318:	080138cc 	.word	0x080138cc
 801031c:	080138d6 	.word	0x080138d6
 8010320:	00000000 	.word	0x00000000
 8010324:	080100a7 	.word	0x080100a7
 8010328:	080138d2 	.word	0x080138d2

0801032c <_printf_common>:
 801032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010330:	4616      	mov	r6, r2
 8010332:	4699      	mov	r9, r3
 8010334:	688a      	ldr	r2, [r1, #8]
 8010336:	690b      	ldr	r3, [r1, #16]
 8010338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801033c:	4293      	cmp	r3, r2
 801033e:	bfb8      	it	lt
 8010340:	4613      	movlt	r3, r2
 8010342:	6033      	str	r3, [r6, #0]
 8010344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010348:	4607      	mov	r7, r0
 801034a:	460c      	mov	r4, r1
 801034c:	b10a      	cbz	r2, 8010352 <_printf_common+0x26>
 801034e:	3301      	adds	r3, #1
 8010350:	6033      	str	r3, [r6, #0]
 8010352:	6823      	ldr	r3, [r4, #0]
 8010354:	0699      	lsls	r1, r3, #26
 8010356:	bf42      	ittt	mi
 8010358:	6833      	ldrmi	r3, [r6, #0]
 801035a:	3302      	addmi	r3, #2
 801035c:	6033      	strmi	r3, [r6, #0]
 801035e:	6825      	ldr	r5, [r4, #0]
 8010360:	f015 0506 	ands.w	r5, r5, #6
 8010364:	d106      	bne.n	8010374 <_printf_common+0x48>
 8010366:	f104 0a19 	add.w	sl, r4, #25
 801036a:	68e3      	ldr	r3, [r4, #12]
 801036c:	6832      	ldr	r2, [r6, #0]
 801036e:	1a9b      	subs	r3, r3, r2
 8010370:	42ab      	cmp	r3, r5
 8010372:	dc26      	bgt.n	80103c2 <_printf_common+0x96>
 8010374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010378:	1e13      	subs	r3, r2, #0
 801037a:	6822      	ldr	r2, [r4, #0]
 801037c:	bf18      	it	ne
 801037e:	2301      	movne	r3, #1
 8010380:	0692      	lsls	r2, r2, #26
 8010382:	d42b      	bmi.n	80103dc <_printf_common+0xb0>
 8010384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010388:	4649      	mov	r1, r9
 801038a:	4638      	mov	r0, r7
 801038c:	47c0      	blx	r8
 801038e:	3001      	adds	r0, #1
 8010390:	d01e      	beq.n	80103d0 <_printf_common+0xa4>
 8010392:	6823      	ldr	r3, [r4, #0]
 8010394:	68e5      	ldr	r5, [r4, #12]
 8010396:	6832      	ldr	r2, [r6, #0]
 8010398:	f003 0306 	and.w	r3, r3, #6
 801039c:	2b04      	cmp	r3, #4
 801039e:	bf08      	it	eq
 80103a0:	1aad      	subeq	r5, r5, r2
 80103a2:	68a3      	ldr	r3, [r4, #8]
 80103a4:	6922      	ldr	r2, [r4, #16]
 80103a6:	bf0c      	ite	eq
 80103a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80103ac:	2500      	movne	r5, #0
 80103ae:	4293      	cmp	r3, r2
 80103b0:	bfc4      	itt	gt
 80103b2:	1a9b      	subgt	r3, r3, r2
 80103b4:	18ed      	addgt	r5, r5, r3
 80103b6:	2600      	movs	r6, #0
 80103b8:	341a      	adds	r4, #26
 80103ba:	42b5      	cmp	r5, r6
 80103bc:	d11a      	bne.n	80103f4 <_printf_common+0xc8>
 80103be:	2000      	movs	r0, #0
 80103c0:	e008      	b.n	80103d4 <_printf_common+0xa8>
 80103c2:	2301      	movs	r3, #1
 80103c4:	4652      	mov	r2, sl
 80103c6:	4649      	mov	r1, r9
 80103c8:	4638      	mov	r0, r7
 80103ca:	47c0      	blx	r8
 80103cc:	3001      	adds	r0, #1
 80103ce:	d103      	bne.n	80103d8 <_printf_common+0xac>
 80103d0:	f04f 30ff 	mov.w	r0, #4294967295
 80103d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103d8:	3501      	adds	r5, #1
 80103da:	e7c6      	b.n	801036a <_printf_common+0x3e>
 80103dc:	18e1      	adds	r1, r4, r3
 80103de:	1c5a      	adds	r2, r3, #1
 80103e0:	2030      	movs	r0, #48	; 0x30
 80103e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80103e6:	4422      	add	r2, r4
 80103e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80103ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80103f0:	3302      	adds	r3, #2
 80103f2:	e7c7      	b.n	8010384 <_printf_common+0x58>
 80103f4:	2301      	movs	r3, #1
 80103f6:	4622      	mov	r2, r4
 80103f8:	4649      	mov	r1, r9
 80103fa:	4638      	mov	r0, r7
 80103fc:	47c0      	blx	r8
 80103fe:	3001      	adds	r0, #1
 8010400:	d0e6      	beq.n	80103d0 <_printf_common+0xa4>
 8010402:	3601      	adds	r6, #1
 8010404:	e7d9      	b.n	80103ba <_printf_common+0x8e>
	...

08010408 <_printf_i>:
 8010408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801040c:	7e0f      	ldrb	r7, [r1, #24]
 801040e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010410:	2f78      	cmp	r7, #120	; 0x78
 8010412:	4691      	mov	r9, r2
 8010414:	4680      	mov	r8, r0
 8010416:	460c      	mov	r4, r1
 8010418:	469a      	mov	sl, r3
 801041a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801041e:	d807      	bhi.n	8010430 <_printf_i+0x28>
 8010420:	2f62      	cmp	r7, #98	; 0x62
 8010422:	d80a      	bhi.n	801043a <_printf_i+0x32>
 8010424:	2f00      	cmp	r7, #0
 8010426:	f000 80d8 	beq.w	80105da <_printf_i+0x1d2>
 801042a:	2f58      	cmp	r7, #88	; 0x58
 801042c:	f000 80a3 	beq.w	8010576 <_printf_i+0x16e>
 8010430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010438:	e03a      	b.n	80104b0 <_printf_i+0xa8>
 801043a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801043e:	2b15      	cmp	r3, #21
 8010440:	d8f6      	bhi.n	8010430 <_printf_i+0x28>
 8010442:	a101      	add	r1, pc, #4	; (adr r1, 8010448 <_printf_i+0x40>)
 8010444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010448:	080104a1 	.word	0x080104a1
 801044c:	080104b5 	.word	0x080104b5
 8010450:	08010431 	.word	0x08010431
 8010454:	08010431 	.word	0x08010431
 8010458:	08010431 	.word	0x08010431
 801045c:	08010431 	.word	0x08010431
 8010460:	080104b5 	.word	0x080104b5
 8010464:	08010431 	.word	0x08010431
 8010468:	08010431 	.word	0x08010431
 801046c:	08010431 	.word	0x08010431
 8010470:	08010431 	.word	0x08010431
 8010474:	080105c1 	.word	0x080105c1
 8010478:	080104e5 	.word	0x080104e5
 801047c:	080105a3 	.word	0x080105a3
 8010480:	08010431 	.word	0x08010431
 8010484:	08010431 	.word	0x08010431
 8010488:	080105e3 	.word	0x080105e3
 801048c:	08010431 	.word	0x08010431
 8010490:	080104e5 	.word	0x080104e5
 8010494:	08010431 	.word	0x08010431
 8010498:	08010431 	.word	0x08010431
 801049c:	080105ab 	.word	0x080105ab
 80104a0:	682b      	ldr	r3, [r5, #0]
 80104a2:	1d1a      	adds	r2, r3, #4
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	602a      	str	r2, [r5, #0]
 80104a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104b0:	2301      	movs	r3, #1
 80104b2:	e0a3      	b.n	80105fc <_printf_i+0x1f4>
 80104b4:	6820      	ldr	r0, [r4, #0]
 80104b6:	6829      	ldr	r1, [r5, #0]
 80104b8:	0606      	lsls	r6, r0, #24
 80104ba:	f101 0304 	add.w	r3, r1, #4
 80104be:	d50a      	bpl.n	80104d6 <_printf_i+0xce>
 80104c0:	680e      	ldr	r6, [r1, #0]
 80104c2:	602b      	str	r3, [r5, #0]
 80104c4:	2e00      	cmp	r6, #0
 80104c6:	da03      	bge.n	80104d0 <_printf_i+0xc8>
 80104c8:	232d      	movs	r3, #45	; 0x2d
 80104ca:	4276      	negs	r6, r6
 80104cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80104d0:	485e      	ldr	r0, [pc, #376]	; (801064c <_printf_i+0x244>)
 80104d2:	230a      	movs	r3, #10
 80104d4:	e019      	b.n	801050a <_printf_i+0x102>
 80104d6:	680e      	ldr	r6, [r1, #0]
 80104d8:	602b      	str	r3, [r5, #0]
 80104da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80104de:	bf18      	it	ne
 80104e0:	b236      	sxthne	r6, r6
 80104e2:	e7ef      	b.n	80104c4 <_printf_i+0xbc>
 80104e4:	682b      	ldr	r3, [r5, #0]
 80104e6:	6820      	ldr	r0, [r4, #0]
 80104e8:	1d19      	adds	r1, r3, #4
 80104ea:	6029      	str	r1, [r5, #0]
 80104ec:	0601      	lsls	r1, r0, #24
 80104ee:	d501      	bpl.n	80104f4 <_printf_i+0xec>
 80104f0:	681e      	ldr	r6, [r3, #0]
 80104f2:	e002      	b.n	80104fa <_printf_i+0xf2>
 80104f4:	0646      	lsls	r6, r0, #25
 80104f6:	d5fb      	bpl.n	80104f0 <_printf_i+0xe8>
 80104f8:	881e      	ldrh	r6, [r3, #0]
 80104fa:	4854      	ldr	r0, [pc, #336]	; (801064c <_printf_i+0x244>)
 80104fc:	2f6f      	cmp	r7, #111	; 0x6f
 80104fe:	bf0c      	ite	eq
 8010500:	2308      	moveq	r3, #8
 8010502:	230a      	movne	r3, #10
 8010504:	2100      	movs	r1, #0
 8010506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801050a:	6865      	ldr	r5, [r4, #4]
 801050c:	60a5      	str	r5, [r4, #8]
 801050e:	2d00      	cmp	r5, #0
 8010510:	bfa2      	ittt	ge
 8010512:	6821      	ldrge	r1, [r4, #0]
 8010514:	f021 0104 	bicge.w	r1, r1, #4
 8010518:	6021      	strge	r1, [r4, #0]
 801051a:	b90e      	cbnz	r6, 8010520 <_printf_i+0x118>
 801051c:	2d00      	cmp	r5, #0
 801051e:	d04d      	beq.n	80105bc <_printf_i+0x1b4>
 8010520:	4615      	mov	r5, r2
 8010522:	fbb6 f1f3 	udiv	r1, r6, r3
 8010526:	fb03 6711 	mls	r7, r3, r1, r6
 801052a:	5dc7      	ldrb	r7, [r0, r7]
 801052c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010530:	4637      	mov	r7, r6
 8010532:	42bb      	cmp	r3, r7
 8010534:	460e      	mov	r6, r1
 8010536:	d9f4      	bls.n	8010522 <_printf_i+0x11a>
 8010538:	2b08      	cmp	r3, #8
 801053a:	d10b      	bne.n	8010554 <_printf_i+0x14c>
 801053c:	6823      	ldr	r3, [r4, #0]
 801053e:	07de      	lsls	r6, r3, #31
 8010540:	d508      	bpl.n	8010554 <_printf_i+0x14c>
 8010542:	6923      	ldr	r3, [r4, #16]
 8010544:	6861      	ldr	r1, [r4, #4]
 8010546:	4299      	cmp	r1, r3
 8010548:	bfde      	ittt	le
 801054a:	2330      	movle	r3, #48	; 0x30
 801054c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010550:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010554:	1b52      	subs	r2, r2, r5
 8010556:	6122      	str	r2, [r4, #16]
 8010558:	f8cd a000 	str.w	sl, [sp]
 801055c:	464b      	mov	r3, r9
 801055e:	aa03      	add	r2, sp, #12
 8010560:	4621      	mov	r1, r4
 8010562:	4640      	mov	r0, r8
 8010564:	f7ff fee2 	bl	801032c <_printf_common>
 8010568:	3001      	adds	r0, #1
 801056a:	d14c      	bne.n	8010606 <_printf_i+0x1fe>
 801056c:	f04f 30ff 	mov.w	r0, #4294967295
 8010570:	b004      	add	sp, #16
 8010572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010576:	4835      	ldr	r0, [pc, #212]	; (801064c <_printf_i+0x244>)
 8010578:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801057c:	6829      	ldr	r1, [r5, #0]
 801057e:	6823      	ldr	r3, [r4, #0]
 8010580:	f851 6b04 	ldr.w	r6, [r1], #4
 8010584:	6029      	str	r1, [r5, #0]
 8010586:	061d      	lsls	r5, r3, #24
 8010588:	d514      	bpl.n	80105b4 <_printf_i+0x1ac>
 801058a:	07df      	lsls	r7, r3, #31
 801058c:	bf44      	itt	mi
 801058e:	f043 0320 	orrmi.w	r3, r3, #32
 8010592:	6023      	strmi	r3, [r4, #0]
 8010594:	b91e      	cbnz	r6, 801059e <_printf_i+0x196>
 8010596:	6823      	ldr	r3, [r4, #0]
 8010598:	f023 0320 	bic.w	r3, r3, #32
 801059c:	6023      	str	r3, [r4, #0]
 801059e:	2310      	movs	r3, #16
 80105a0:	e7b0      	b.n	8010504 <_printf_i+0xfc>
 80105a2:	6823      	ldr	r3, [r4, #0]
 80105a4:	f043 0320 	orr.w	r3, r3, #32
 80105a8:	6023      	str	r3, [r4, #0]
 80105aa:	2378      	movs	r3, #120	; 0x78
 80105ac:	4828      	ldr	r0, [pc, #160]	; (8010650 <_printf_i+0x248>)
 80105ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80105b2:	e7e3      	b.n	801057c <_printf_i+0x174>
 80105b4:	0659      	lsls	r1, r3, #25
 80105b6:	bf48      	it	mi
 80105b8:	b2b6      	uxthmi	r6, r6
 80105ba:	e7e6      	b.n	801058a <_printf_i+0x182>
 80105bc:	4615      	mov	r5, r2
 80105be:	e7bb      	b.n	8010538 <_printf_i+0x130>
 80105c0:	682b      	ldr	r3, [r5, #0]
 80105c2:	6826      	ldr	r6, [r4, #0]
 80105c4:	6961      	ldr	r1, [r4, #20]
 80105c6:	1d18      	adds	r0, r3, #4
 80105c8:	6028      	str	r0, [r5, #0]
 80105ca:	0635      	lsls	r5, r6, #24
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	d501      	bpl.n	80105d4 <_printf_i+0x1cc>
 80105d0:	6019      	str	r1, [r3, #0]
 80105d2:	e002      	b.n	80105da <_printf_i+0x1d2>
 80105d4:	0670      	lsls	r0, r6, #25
 80105d6:	d5fb      	bpl.n	80105d0 <_printf_i+0x1c8>
 80105d8:	8019      	strh	r1, [r3, #0]
 80105da:	2300      	movs	r3, #0
 80105dc:	6123      	str	r3, [r4, #16]
 80105de:	4615      	mov	r5, r2
 80105e0:	e7ba      	b.n	8010558 <_printf_i+0x150>
 80105e2:	682b      	ldr	r3, [r5, #0]
 80105e4:	1d1a      	adds	r2, r3, #4
 80105e6:	602a      	str	r2, [r5, #0]
 80105e8:	681d      	ldr	r5, [r3, #0]
 80105ea:	6862      	ldr	r2, [r4, #4]
 80105ec:	2100      	movs	r1, #0
 80105ee:	4628      	mov	r0, r5
 80105f0:	f7ef fe06 	bl	8000200 <memchr>
 80105f4:	b108      	cbz	r0, 80105fa <_printf_i+0x1f2>
 80105f6:	1b40      	subs	r0, r0, r5
 80105f8:	6060      	str	r0, [r4, #4]
 80105fa:	6863      	ldr	r3, [r4, #4]
 80105fc:	6123      	str	r3, [r4, #16]
 80105fe:	2300      	movs	r3, #0
 8010600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010604:	e7a8      	b.n	8010558 <_printf_i+0x150>
 8010606:	6923      	ldr	r3, [r4, #16]
 8010608:	462a      	mov	r2, r5
 801060a:	4649      	mov	r1, r9
 801060c:	4640      	mov	r0, r8
 801060e:	47d0      	blx	sl
 8010610:	3001      	adds	r0, #1
 8010612:	d0ab      	beq.n	801056c <_printf_i+0x164>
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	079b      	lsls	r3, r3, #30
 8010618:	d413      	bmi.n	8010642 <_printf_i+0x23a>
 801061a:	68e0      	ldr	r0, [r4, #12]
 801061c:	9b03      	ldr	r3, [sp, #12]
 801061e:	4298      	cmp	r0, r3
 8010620:	bfb8      	it	lt
 8010622:	4618      	movlt	r0, r3
 8010624:	e7a4      	b.n	8010570 <_printf_i+0x168>
 8010626:	2301      	movs	r3, #1
 8010628:	4632      	mov	r2, r6
 801062a:	4649      	mov	r1, r9
 801062c:	4640      	mov	r0, r8
 801062e:	47d0      	blx	sl
 8010630:	3001      	adds	r0, #1
 8010632:	d09b      	beq.n	801056c <_printf_i+0x164>
 8010634:	3501      	adds	r5, #1
 8010636:	68e3      	ldr	r3, [r4, #12]
 8010638:	9903      	ldr	r1, [sp, #12]
 801063a:	1a5b      	subs	r3, r3, r1
 801063c:	42ab      	cmp	r3, r5
 801063e:	dcf2      	bgt.n	8010626 <_printf_i+0x21e>
 8010640:	e7eb      	b.n	801061a <_printf_i+0x212>
 8010642:	2500      	movs	r5, #0
 8010644:	f104 0619 	add.w	r6, r4, #25
 8010648:	e7f5      	b.n	8010636 <_printf_i+0x22e>
 801064a:	bf00      	nop
 801064c:	080138dd 	.word	0x080138dd
 8010650:	080138ee 	.word	0x080138ee

08010654 <_sbrk_r>:
 8010654:	b538      	push	{r3, r4, r5, lr}
 8010656:	4d06      	ldr	r5, [pc, #24]	; (8010670 <_sbrk_r+0x1c>)
 8010658:	2300      	movs	r3, #0
 801065a:	4604      	mov	r4, r0
 801065c:	4608      	mov	r0, r1
 801065e:	602b      	str	r3, [r5, #0]
 8010660:	f7f0 fabe 	bl	8000be0 <_sbrk>
 8010664:	1c43      	adds	r3, r0, #1
 8010666:	d102      	bne.n	801066e <_sbrk_r+0x1a>
 8010668:	682b      	ldr	r3, [r5, #0]
 801066a:	b103      	cbz	r3, 801066e <_sbrk_r+0x1a>
 801066c:	6023      	str	r3, [r4, #0]
 801066e:	bd38      	pop	{r3, r4, r5, pc}
 8010670:	200082b0 	.word	0x200082b0

08010674 <__sread>:
 8010674:	b510      	push	{r4, lr}
 8010676:	460c      	mov	r4, r1
 8010678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801067c:	f000 fa6e 	bl	8010b5c <_read_r>
 8010680:	2800      	cmp	r0, #0
 8010682:	bfab      	itete	ge
 8010684:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010686:	89a3      	ldrhlt	r3, [r4, #12]
 8010688:	181b      	addge	r3, r3, r0
 801068a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801068e:	bfac      	ite	ge
 8010690:	6563      	strge	r3, [r4, #84]	; 0x54
 8010692:	81a3      	strhlt	r3, [r4, #12]
 8010694:	bd10      	pop	{r4, pc}

08010696 <__swrite>:
 8010696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801069a:	461f      	mov	r7, r3
 801069c:	898b      	ldrh	r3, [r1, #12]
 801069e:	05db      	lsls	r3, r3, #23
 80106a0:	4605      	mov	r5, r0
 80106a2:	460c      	mov	r4, r1
 80106a4:	4616      	mov	r6, r2
 80106a6:	d505      	bpl.n	80106b4 <__swrite+0x1e>
 80106a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ac:	2302      	movs	r3, #2
 80106ae:	2200      	movs	r2, #0
 80106b0:	f000 f9d0 	bl	8010a54 <_lseek_r>
 80106b4:	89a3      	ldrh	r3, [r4, #12]
 80106b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106be:	81a3      	strh	r3, [r4, #12]
 80106c0:	4632      	mov	r2, r6
 80106c2:	463b      	mov	r3, r7
 80106c4:	4628      	mov	r0, r5
 80106c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ca:	f000 b869 	b.w	80107a0 <_write_r>

080106ce <__sseek>:
 80106ce:	b510      	push	{r4, lr}
 80106d0:	460c      	mov	r4, r1
 80106d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106d6:	f000 f9bd 	bl	8010a54 <_lseek_r>
 80106da:	1c43      	adds	r3, r0, #1
 80106dc:	89a3      	ldrh	r3, [r4, #12]
 80106de:	bf15      	itete	ne
 80106e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80106e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106ea:	81a3      	strheq	r3, [r4, #12]
 80106ec:	bf18      	it	ne
 80106ee:	81a3      	strhne	r3, [r4, #12]
 80106f0:	bd10      	pop	{r4, pc}

080106f2 <__sclose>:
 80106f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106f6:	f000 b8db 	b.w	80108b0 <_close_r>
	...

080106fc <__swbuf_r>:
 80106fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fe:	460e      	mov	r6, r1
 8010700:	4614      	mov	r4, r2
 8010702:	4605      	mov	r5, r0
 8010704:	b118      	cbz	r0, 801070e <__swbuf_r+0x12>
 8010706:	6983      	ldr	r3, [r0, #24]
 8010708:	b90b      	cbnz	r3, 801070e <__swbuf_r+0x12>
 801070a:	f7ff fb1b 	bl	800fd44 <__sinit>
 801070e:	4b21      	ldr	r3, [pc, #132]	; (8010794 <__swbuf_r+0x98>)
 8010710:	429c      	cmp	r4, r3
 8010712:	d12b      	bne.n	801076c <__swbuf_r+0x70>
 8010714:	686c      	ldr	r4, [r5, #4]
 8010716:	69a3      	ldr	r3, [r4, #24]
 8010718:	60a3      	str	r3, [r4, #8]
 801071a:	89a3      	ldrh	r3, [r4, #12]
 801071c:	071a      	lsls	r2, r3, #28
 801071e:	d52f      	bpl.n	8010780 <__swbuf_r+0x84>
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	b36b      	cbz	r3, 8010780 <__swbuf_r+0x84>
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	6820      	ldr	r0, [r4, #0]
 8010728:	1ac0      	subs	r0, r0, r3
 801072a:	6963      	ldr	r3, [r4, #20]
 801072c:	b2f6      	uxtb	r6, r6
 801072e:	4283      	cmp	r3, r0
 8010730:	4637      	mov	r7, r6
 8010732:	dc04      	bgt.n	801073e <__swbuf_r+0x42>
 8010734:	4621      	mov	r1, r4
 8010736:	4628      	mov	r0, r5
 8010738:	f000 f950 	bl	80109dc <_fflush_r>
 801073c:	bb30      	cbnz	r0, 801078c <__swbuf_r+0x90>
 801073e:	68a3      	ldr	r3, [r4, #8]
 8010740:	3b01      	subs	r3, #1
 8010742:	60a3      	str	r3, [r4, #8]
 8010744:	6823      	ldr	r3, [r4, #0]
 8010746:	1c5a      	adds	r2, r3, #1
 8010748:	6022      	str	r2, [r4, #0]
 801074a:	701e      	strb	r6, [r3, #0]
 801074c:	6963      	ldr	r3, [r4, #20]
 801074e:	3001      	adds	r0, #1
 8010750:	4283      	cmp	r3, r0
 8010752:	d004      	beq.n	801075e <__swbuf_r+0x62>
 8010754:	89a3      	ldrh	r3, [r4, #12]
 8010756:	07db      	lsls	r3, r3, #31
 8010758:	d506      	bpl.n	8010768 <__swbuf_r+0x6c>
 801075a:	2e0a      	cmp	r6, #10
 801075c:	d104      	bne.n	8010768 <__swbuf_r+0x6c>
 801075e:	4621      	mov	r1, r4
 8010760:	4628      	mov	r0, r5
 8010762:	f000 f93b 	bl	80109dc <_fflush_r>
 8010766:	b988      	cbnz	r0, 801078c <__swbuf_r+0x90>
 8010768:	4638      	mov	r0, r7
 801076a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801076c:	4b0a      	ldr	r3, [pc, #40]	; (8010798 <__swbuf_r+0x9c>)
 801076e:	429c      	cmp	r4, r3
 8010770:	d101      	bne.n	8010776 <__swbuf_r+0x7a>
 8010772:	68ac      	ldr	r4, [r5, #8]
 8010774:	e7cf      	b.n	8010716 <__swbuf_r+0x1a>
 8010776:	4b09      	ldr	r3, [pc, #36]	; (801079c <__swbuf_r+0xa0>)
 8010778:	429c      	cmp	r4, r3
 801077a:	bf08      	it	eq
 801077c:	68ec      	ldreq	r4, [r5, #12]
 801077e:	e7ca      	b.n	8010716 <__swbuf_r+0x1a>
 8010780:	4621      	mov	r1, r4
 8010782:	4628      	mov	r0, r5
 8010784:	f000 f81e 	bl	80107c4 <__swsetup_r>
 8010788:	2800      	cmp	r0, #0
 801078a:	d0cb      	beq.n	8010724 <__swbuf_r+0x28>
 801078c:	f04f 37ff 	mov.w	r7, #4294967295
 8010790:	e7ea      	b.n	8010768 <__swbuf_r+0x6c>
 8010792:	bf00      	nop
 8010794:	0801388c 	.word	0x0801388c
 8010798:	080138ac 	.word	0x080138ac
 801079c:	0801386c 	.word	0x0801386c

080107a0 <_write_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d07      	ldr	r5, [pc, #28]	; (80107c0 <_write_r+0x20>)
 80107a4:	4604      	mov	r4, r0
 80107a6:	4608      	mov	r0, r1
 80107a8:	4611      	mov	r1, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	602a      	str	r2, [r5, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	f7f0 f9c5 	bl	8000b3e <_write>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d102      	bne.n	80107be <_write_r+0x1e>
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	b103      	cbz	r3, 80107be <_write_r+0x1e>
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	200082b0 	.word	0x200082b0

080107c4 <__swsetup_r>:
 80107c4:	4b32      	ldr	r3, [pc, #200]	; (8010890 <__swsetup_r+0xcc>)
 80107c6:	b570      	push	{r4, r5, r6, lr}
 80107c8:	681d      	ldr	r5, [r3, #0]
 80107ca:	4606      	mov	r6, r0
 80107cc:	460c      	mov	r4, r1
 80107ce:	b125      	cbz	r5, 80107da <__swsetup_r+0x16>
 80107d0:	69ab      	ldr	r3, [r5, #24]
 80107d2:	b913      	cbnz	r3, 80107da <__swsetup_r+0x16>
 80107d4:	4628      	mov	r0, r5
 80107d6:	f7ff fab5 	bl	800fd44 <__sinit>
 80107da:	4b2e      	ldr	r3, [pc, #184]	; (8010894 <__swsetup_r+0xd0>)
 80107dc:	429c      	cmp	r4, r3
 80107de:	d10f      	bne.n	8010800 <__swsetup_r+0x3c>
 80107e0:	686c      	ldr	r4, [r5, #4]
 80107e2:	89a3      	ldrh	r3, [r4, #12]
 80107e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107e8:	0719      	lsls	r1, r3, #28
 80107ea:	d42c      	bmi.n	8010846 <__swsetup_r+0x82>
 80107ec:	06dd      	lsls	r5, r3, #27
 80107ee:	d411      	bmi.n	8010814 <__swsetup_r+0x50>
 80107f0:	2309      	movs	r3, #9
 80107f2:	6033      	str	r3, [r6, #0]
 80107f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107f8:	81a3      	strh	r3, [r4, #12]
 80107fa:	f04f 30ff 	mov.w	r0, #4294967295
 80107fe:	e03e      	b.n	801087e <__swsetup_r+0xba>
 8010800:	4b25      	ldr	r3, [pc, #148]	; (8010898 <__swsetup_r+0xd4>)
 8010802:	429c      	cmp	r4, r3
 8010804:	d101      	bne.n	801080a <__swsetup_r+0x46>
 8010806:	68ac      	ldr	r4, [r5, #8]
 8010808:	e7eb      	b.n	80107e2 <__swsetup_r+0x1e>
 801080a:	4b24      	ldr	r3, [pc, #144]	; (801089c <__swsetup_r+0xd8>)
 801080c:	429c      	cmp	r4, r3
 801080e:	bf08      	it	eq
 8010810:	68ec      	ldreq	r4, [r5, #12]
 8010812:	e7e6      	b.n	80107e2 <__swsetup_r+0x1e>
 8010814:	0758      	lsls	r0, r3, #29
 8010816:	d512      	bpl.n	801083e <__swsetup_r+0x7a>
 8010818:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801081a:	b141      	cbz	r1, 801082e <__swsetup_r+0x6a>
 801081c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010820:	4299      	cmp	r1, r3
 8010822:	d002      	beq.n	801082a <__swsetup_r+0x66>
 8010824:	4630      	mov	r0, r6
 8010826:	f7ff fb47 	bl	800feb8 <_free_r>
 801082a:	2300      	movs	r3, #0
 801082c:	6363      	str	r3, [r4, #52]	; 0x34
 801082e:	89a3      	ldrh	r3, [r4, #12]
 8010830:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010834:	81a3      	strh	r3, [r4, #12]
 8010836:	2300      	movs	r3, #0
 8010838:	6063      	str	r3, [r4, #4]
 801083a:	6923      	ldr	r3, [r4, #16]
 801083c:	6023      	str	r3, [r4, #0]
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	f043 0308 	orr.w	r3, r3, #8
 8010844:	81a3      	strh	r3, [r4, #12]
 8010846:	6923      	ldr	r3, [r4, #16]
 8010848:	b94b      	cbnz	r3, 801085e <__swsetup_r+0x9a>
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010854:	d003      	beq.n	801085e <__swsetup_r+0x9a>
 8010856:	4621      	mov	r1, r4
 8010858:	4630      	mov	r0, r6
 801085a:	f000 f933 	bl	8010ac4 <__smakebuf_r>
 801085e:	89a0      	ldrh	r0, [r4, #12]
 8010860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010864:	f010 0301 	ands.w	r3, r0, #1
 8010868:	d00a      	beq.n	8010880 <__swsetup_r+0xbc>
 801086a:	2300      	movs	r3, #0
 801086c:	60a3      	str	r3, [r4, #8]
 801086e:	6963      	ldr	r3, [r4, #20]
 8010870:	425b      	negs	r3, r3
 8010872:	61a3      	str	r3, [r4, #24]
 8010874:	6923      	ldr	r3, [r4, #16]
 8010876:	b943      	cbnz	r3, 801088a <__swsetup_r+0xc6>
 8010878:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801087c:	d1ba      	bne.n	80107f4 <__swsetup_r+0x30>
 801087e:	bd70      	pop	{r4, r5, r6, pc}
 8010880:	0781      	lsls	r1, r0, #30
 8010882:	bf58      	it	pl
 8010884:	6963      	ldrpl	r3, [r4, #20]
 8010886:	60a3      	str	r3, [r4, #8]
 8010888:	e7f4      	b.n	8010874 <__swsetup_r+0xb0>
 801088a:	2000      	movs	r0, #0
 801088c:	e7f7      	b.n	801087e <__swsetup_r+0xba>
 801088e:	bf00      	nop
 8010890:	2000002c 	.word	0x2000002c
 8010894:	0801388c 	.word	0x0801388c
 8010898:	080138ac 	.word	0x080138ac
 801089c:	0801386c 	.word	0x0801386c

080108a0 <abort>:
 80108a0:	b508      	push	{r3, lr}
 80108a2:	2006      	movs	r0, #6
 80108a4:	f000 f994 	bl	8010bd0 <raise>
 80108a8:	2001      	movs	r0, #1
 80108aa:	f7f0 f921 	bl	8000af0 <_exit>
	...

080108b0 <_close_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	4d06      	ldr	r5, [pc, #24]	; (80108cc <_close_r+0x1c>)
 80108b4:	2300      	movs	r3, #0
 80108b6:	4604      	mov	r4, r0
 80108b8:	4608      	mov	r0, r1
 80108ba:	602b      	str	r3, [r5, #0]
 80108bc:	f7f0 f95b 	bl	8000b76 <_close>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_close_r+0x1a>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_close_r+0x1a>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	200082b0 	.word	0x200082b0

080108d0 <__sflush_r>:
 80108d0:	898a      	ldrh	r2, [r1, #12]
 80108d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108d6:	4605      	mov	r5, r0
 80108d8:	0710      	lsls	r0, r2, #28
 80108da:	460c      	mov	r4, r1
 80108dc:	d458      	bmi.n	8010990 <__sflush_r+0xc0>
 80108de:	684b      	ldr	r3, [r1, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	dc05      	bgt.n	80108f0 <__sflush_r+0x20>
 80108e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	dc02      	bgt.n	80108f0 <__sflush_r+0x20>
 80108ea:	2000      	movs	r0, #0
 80108ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108f2:	2e00      	cmp	r6, #0
 80108f4:	d0f9      	beq.n	80108ea <__sflush_r+0x1a>
 80108f6:	2300      	movs	r3, #0
 80108f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108fc:	682f      	ldr	r7, [r5, #0]
 80108fe:	602b      	str	r3, [r5, #0]
 8010900:	d032      	beq.n	8010968 <__sflush_r+0x98>
 8010902:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010904:	89a3      	ldrh	r3, [r4, #12]
 8010906:	075a      	lsls	r2, r3, #29
 8010908:	d505      	bpl.n	8010916 <__sflush_r+0x46>
 801090a:	6863      	ldr	r3, [r4, #4]
 801090c:	1ac0      	subs	r0, r0, r3
 801090e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010910:	b10b      	cbz	r3, 8010916 <__sflush_r+0x46>
 8010912:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010914:	1ac0      	subs	r0, r0, r3
 8010916:	2300      	movs	r3, #0
 8010918:	4602      	mov	r2, r0
 801091a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801091c:	6a21      	ldr	r1, [r4, #32]
 801091e:	4628      	mov	r0, r5
 8010920:	47b0      	blx	r6
 8010922:	1c43      	adds	r3, r0, #1
 8010924:	89a3      	ldrh	r3, [r4, #12]
 8010926:	d106      	bne.n	8010936 <__sflush_r+0x66>
 8010928:	6829      	ldr	r1, [r5, #0]
 801092a:	291d      	cmp	r1, #29
 801092c:	d82c      	bhi.n	8010988 <__sflush_r+0xb8>
 801092e:	4a2a      	ldr	r2, [pc, #168]	; (80109d8 <__sflush_r+0x108>)
 8010930:	40ca      	lsrs	r2, r1
 8010932:	07d6      	lsls	r6, r2, #31
 8010934:	d528      	bpl.n	8010988 <__sflush_r+0xb8>
 8010936:	2200      	movs	r2, #0
 8010938:	6062      	str	r2, [r4, #4]
 801093a:	04d9      	lsls	r1, r3, #19
 801093c:	6922      	ldr	r2, [r4, #16]
 801093e:	6022      	str	r2, [r4, #0]
 8010940:	d504      	bpl.n	801094c <__sflush_r+0x7c>
 8010942:	1c42      	adds	r2, r0, #1
 8010944:	d101      	bne.n	801094a <__sflush_r+0x7a>
 8010946:	682b      	ldr	r3, [r5, #0]
 8010948:	b903      	cbnz	r3, 801094c <__sflush_r+0x7c>
 801094a:	6560      	str	r0, [r4, #84]	; 0x54
 801094c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801094e:	602f      	str	r7, [r5, #0]
 8010950:	2900      	cmp	r1, #0
 8010952:	d0ca      	beq.n	80108ea <__sflush_r+0x1a>
 8010954:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010958:	4299      	cmp	r1, r3
 801095a:	d002      	beq.n	8010962 <__sflush_r+0x92>
 801095c:	4628      	mov	r0, r5
 801095e:	f7ff faab 	bl	800feb8 <_free_r>
 8010962:	2000      	movs	r0, #0
 8010964:	6360      	str	r0, [r4, #52]	; 0x34
 8010966:	e7c1      	b.n	80108ec <__sflush_r+0x1c>
 8010968:	6a21      	ldr	r1, [r4, #32]
 801096a:	2301      	movs	r3, #1
 801096c:	4628      	mov	r0, r5
 801096e:	47b0      	blx	r6
 8010970:	1c41      	adds	r1, r0, #1
 8010972:	d1c7      	bne.n	8010904 <__sflush_r+0x34>
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d0c4      	beq.n	8010904 <__sflush_r+0x34>
 801097a:	2b1d      	cmp	r3, #29
 801097c:	d001      	beq.n	8010982 <__sflush_r+0xb2>
 801097e:	2b16      	cmp	r3, #22
 8010980:	d101      	bne.n	8010986 <__sflush_r+0xb6>
 8010982:	602f      	str	r7, [r5, #0]
 8010984:	e7b1      	b.n	80108ea <__sflush_r+0x1a>
 8010986:	89a3      	ldrh	r3, [r4, #12]
 8010988:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801098c:	81a3      	strh	r3, [r4, #12]
 801098e:	e7ad      	b.n	80108ec <__sflush_r+0x1c>
 8010990:	690f      	ldr	r7, [r1, #16]
 8010992:	2f00      	cmp	r7, #0
 8010994:	d0a9      	beq.n	80108ea <__sflush_r+0x1a>
 8010996:	0793      	lsls	r3, r2, #30
 8010998:	680e      	ldr	r6, [r1, #0]
 801099a:	bf08      	it	eq
 801099c:	694b      	ldreq	r3, [r1, #20]
 801099e:	600f      	str	r7, [r1, #0]
 80109a0:	bf18      	it	ne
 80109a2:	2300      	movne	r3, #0
 80109a4:	eba6 0807 	sub.w	r8, r6, r7
 80109a8:	608b      	str	r3, [r1, #8]
 80109aa:	f1b8 0f00 	cmp.w	r8, #0
 80109ae:	dd9c      	ble.n	80108ea <__sflush_r+0x1a>
 80109b0:	6a21      	ldr	r1, [r4, #32]
 80109b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109b4:	4643      	mov	r3, r8
 80109b6:	463a      	mov	r2, r7
 80109b8:	4628      	mov	r0, r5
 80109ba:	47b0      	blx	r6
 80109bc:	2800      	cmp	r0, #0
 80109be:	dc06      	bgt.n	80109ce <__sflush_r+0xfe>
 80109c0:	89a3      	ldrh	r3, [r4, #12]
 80109c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109c6:	81a3      	strh	r3, [r4, #12]
 80109c8:	f04f 30ff 	mov.w	r0, #4294967295
 80109cc:	e78e      	b.n	80108ec <__sflush_r+0x1c>
 80109ce:	4407      	add	r7, r0
 80109d0:	eba8 0800 	sub.w	r8, r8, r0
 80109d4:	e7e9      	b.n	80109aa <__sflush_r+0xda>
 80109d6:	bf00      	nop
 80109d8:	20400001 	.word	0x20400001

080109dc <_fflush_r>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	690b      	ldr	r3, [r1, #16]
 80109e0:	4605      	mov	r5, r0
 80109e2:	460c      	mov	r4, r1
 80109e4:	b913      	cbnz	r3, 80109ec <_fflush_r+0x10>
 80109e6:	2500      	movs	r5, #0
 80109e8:	4628      	mov	r0, r5
 80109ea:	bd38      	pop	{r3, r4, r5, pc}
 80109ec:	b118      	cbz	r0, 80109f6 <_fflush_r+0x1a>
 80109ee:	6983      	ldr	r3, [r0, #24]
 80109f0:	b90b      	cbnz	r3, 80109f6 <_fflush_r+0x1a>
 80109f2:	f7ff f9a7 	bl	800fd44 <__sinit>
 80109f6:	4b14      	ldr	r3, [pc, #80]	; (8010a48 <_fflush_r+0x6c>)
 80109f8:	429c      	cmp	r4, r3
 80109fa:	d11b      	bne.n	8010a34 <_fflush_r+0x58>
 80109fc:	686c      	ldr	r4, [r5, #4]
 80109fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d0ef      	beq.n	80109e6 <_fflush_r+0xa>
 8010a06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a08:	07d0      	lsls	r0, r2, #31
 8010a0a:	d404      	bmi.n	8010a16 <_fflush_r+0x3a>
 8010a0c:	0599      	lsls	r1, r3, #22
 8010a0e:	d402      	bmi.n	8010a16 <_fflush_r+0x3a>
 8010a10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a12:	f7ff fa47 	bl	800fea4 <__retarget_lock_acquire_recursive>
 8010a16:	4628      	mov	r0, r5
 8010a18:	4621      	mov	r1, r4
 8010a1a:	f7ff ff59 	bl	80108d0 <__sflush_r>
 8010a1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a20:	07da      	lsls	r2, r3, #31
 8010a22:	4605      	mov	r5, r0
 8010a24:	d4e0      	bmi.n	80109e8 <_fflush_r+0xc>
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	059b      	lsls	r3, r3, #22
 8010a2a:	d4dd      	bmi.n	80109e8 <_fflush_r+0xc>
 8010a2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a2e:	f7ff fa3a 	bl	800fea6 <__retarget_lock_release_recursive>
 8010a32:	e7d9      	b.n	80109e8 <_fflush_r+0xc>
 8010a34:	4b05      	ldr	r3, [pc, #20]	; (8010a4c <_fflush_r+0x70>)
 8010a36:	429c      	cmp	r4, r3
 8010a38:	d101      	bne.n	8010a3e <_fflush_r+0x62>
 8010a3a:	68ac      	ldr	r4, [r5, #8]
 8010a3c:	e7df      	b.n	80109fe <_fflush_r+0x22>
 8010a3e:	4b04      	ldr	r3, [pc, #16]	; (8010a50 <_fflush_r+0x74>)
 8010a40:	429c      	cmp	r4, r3
 8010a42:	bf08      	it	eq
 8010a44:	68ec      	ldreq	r4, [r5, #12]
 8010a46:	e7da      	b.n	80109fe <_fflush_r+0x22>
 8010a48:	0801388c 	.word	0x0801388c
 8010a4c:	080138ac 	.word	0x080138ac
 8010a50:	0801386c 	.word	0x0801386c

08010a54 <_lseek_r>:
 8010a54:	b538      	push	{r3, r4, r5, lr}
 8010a56:	4d07      	ldr	r5, [pc, #28]	; (8010a74 <_lseek_r+0x20>)
 8010a58:	4604      	mov	r4, r0
 8010a5a:	4608      	mov	r0, r1
 8010a5c:	4611      	mov	r1, r2
 8010a5e:	2200      	movs	r2, #0
 8010a60:	602a      	str	r2, [r5, #0]
 8010a62:	461a      	mov	r2, r3
 8010a64:	f7f0 f8ae 	bl	8000bc4 <_lseek>
 8010a68:	1c43      	adds	r3, r0, #1
 8010a6a:	d102      	bne.n	8010a72 <_lseek_r+0x1e>
 8010a6c:	682b      	ldr	r3, [r5, #0]
 8010a6e:	b103      	cbz	r3, 8010a72 <_lseek_r+0x1e>
 8010a70:	6023      	str	r3, [r4, #0]
 8010a72:	bd38      	pop	{r3, r4, r5, pc}
 8010a74:	200082b0 	.word	0x200082b0

08010a78 <__swhatbuf_r>:
 8010a78:	b570      	push	{r4, r5, r6, lr}
 8010a7a:	460e      	mov	r6, r1
 8010a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a80:	2900      	cmp	r1, #0
 8010a82:	b096      	sub	sp, #88	; 0x58
 8010a84:	4614      	mov	r4, r2
 8010a86:	461d      	mov	r5, r3
 8010a88:	da08      	bge.n	8010a9c <__swhatbuf_r+0x24>
 8010a8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	602a      	str	r2, [r5, #0]
 8010a92:	061a      	lsls	r2, r3, #24
 8010a94:	d410      	bmi.n	8010ab8 <__swhatbuf_r+0x40>
 8010a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a9a:	e00e      	b.n	8010aba <__swhatbuf_r+0x42>
 8010a9c:	466a      	mov	r2, sp
 8010a9e:	f000 f8b3 	bl	8010c08 <_fstat_r>
 8010aa2:	2800      	cmp	r0, #0
 8010aa4:	dbf1      	blt.n	8010a8a <__swhatbuf_r+0x12>
 8010aa6:	9a01      	ldr	r2, [sp, #4]
 8010aa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010aac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010ab0:	425a      	negs	r2, r3
 8010ab2:	415a      	adcs	r2, r3
 8010ab4:	602a      	str	r2, [r5, #0]
 8010ab6:	e7ee      	b.n	8010a96 <__swhatbuf_r+0x1e>
 8010ab8:	2340      	movs	r3, #64	; 0x40
 8010aba:	2000      	movs	r0, #0
 8010abc:	6023      	str	r3, [r4, #0]
 8010abe:	b016      	add	sp, #88	; 0x58
 8010ac0:	bd70      	pop	{r4, r5, r6, pc}
	...

08010ac4 <__smakebuf_r>:
 8010ac4:	898b      	ldrh	r3, [r1, #12]
 8010ac6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ac8:	079d      	lsls	r5, r3, #30
 8010aca:	4606      	mov	r6, r0
 8010acc:	460c      	mov	r4, r1
 8010ace:	d507      	bpl.n	8010ae0 <__smakebuf_r+0x1c>
 8010ad0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010ad4:	6023      	str	r3, [r4, #0]
 8010ad6:	6123      	str	r3, [r4, #16]
 8010ad8:	2301      	movs	r3, #1
 8010ada:	6163      	str	r3, [r4, #20]
 8010adc:	b002      	add	sp, #8
 8010ade:	bd70      	pop	{r4, r5, r6, pc}
 8010ae0:	ab01      	add	r3, sp, #4
 8010ae2:	466a      	mov	r2, sp
 8010ae4:	f7ff ffc8 	bl	8010a78 <__swhatbuf_r>
 8010ae8:	9900      	ldr	r1, [sp, #0]
 8010aea:	4605      	mov	r5, r0
 8010aec:	4630      	mov	r0, r6
 8010aee:	f7ff fa4f 	bl	800ff90 <_malloc_r>
 8010af2:	b948      	cbnz	r0, 8010b08 <__smakebuf_r+0x44>
 8010af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010af8:	059a      	lsls	r2, r3, #22
 8010afa:	d4ef      	bmi.n	8010adc <__smakebuf_r+0x18>
 8010afc:	f023 0303 	bic.w	r3, r3, #3
 8010b00:	f043 0302 	orr.w	r3, r3, #2
 8010b04:	81a3      	strh	r3, [r4, #12]
 8010b06:	e7e3      	b.n	8010ad0 <__smakebuf_r+0xc>
 8010b08:	4b0d      	ldr	r3, [pc, #52]	; (8010b40 <__smakebuf_r+0x7c>)
 8010b0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b0c:	89a3      	ldrh	r3, [r4, #12]
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b14:	81a3      	strh	r3, [r4, #12]
 8010b16:	9b00      	ldr	r3, [sp, #0]
 8010b18:	6163      	str	r3, [r4, #20]
 8010b1a:	9b01      	ldr	r3, [sp, #4]
 8010b1c:	6120      	str	r0, [r4, #16]
 8010b1e:	b15b      	cbz	r3, 8010b38 <__smakebuf_r+0x74>
 8010b20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010b24:	4630      	mov	r0, r6
 8010b26:	f000 f881 	bl	8010c2c <_isatty_r>
 8010b2a:	b128      	cbz	r0, 8010b38 <__smakebuf_r+0x74>
 8010b2c:	89a3      	ldrh	r3, [r4, #12]
 8010b2e:	f023 0303 	bic.w	r3, r3, #3
 8010b32:	f043 0301 	orr.w	r3, r3, #1
 8010b36:	81a3      	strh	r3, [r4, #12]
 8010b38:	89a0      	ldrh	r0, [r4, #12]
 8010b3a:	4305      	orrs	r5, r0
 8010b3c:	81a5      	strh	r5, [r4, #12]
 8010b3e:	e7cd      	b.n	8010adc <__smakebuf_r+0x18>
 8010b40:	0800fcdd 	.word	0x0800fcdd

08010b44 <__malloc_lock>:
 8010b44:	4801      	ldr	r0, [pc, #4]	; (8010b4c <__malloc_lock+0x8>)
 8010b46:	f7ff b9ad 	b.w	800fea4 <__retarget_lock_acquire_recursive>
 8010b4a:	bf00      	nop
 8010b4c:	200082b4 	.word	0x200082b4

08010b50 <__malloc_unlock>:
 8010b50:	4801      	ldr	r0, [pc, #4]	; (8010b58 <__malloc_unlock+0x8>)
 8010b52:	f7ff b9a8 	b.w	800fea6 <__retarget_lock_release_recursive>
 8010b56:	bf00      	nop
 8010b58:	200082b4 	.word	0x200082b4

08010b5c <_read_r>:
 8010b5c:	b538      	push	{r3, r4, r5, lr}
 8010b5e:	4d07      	ldr	r5, [pc, #28]	; (8010b7c <_read_r+0x20>)
 8010b60:	4604      	mov	r4, r0
 8010b62:	4608      	mov	r0, r1
 8010b64:	4611      	mov	r1, r2
 8010b66:	2200      	movs	r2, #0
 8010b68:	602a      	str	r2, [r5, #0]
 8010b6a:	461a      	mov	r2, r3
 8010b6c:	f7ef ffca 	bl	8000b04 <_read>
 8010b70:	1c43      	adds	r3, r0, #1
 8010b72:	d102      	bne.n	8010b7a <_read_r+0x1e>
 8010b74:	682b      	ldr	r3, [r5, #0]
 8010b76:	b103      	cbz	r3, 8010b7a <_read_r+0x1e>
 8010b78:	6023      	str	r3, [r4, #0]
 8010b7a:	bd38      	pop	{r3, r4, r5, pc}
 8010b7c:	200082b0 	.word	0x200082b0

08010b80 <_raise_r>:
 8010b80:	291f      	cmp	r1, #31
 8010b82:	b538      	push	{r3, r4, r5, lr}
 8010b84:	4604      	mov	r4, r0
 8010b86:	460d      	mov	r5, r1
 8010b88:	d904      	bls.n	8010b94 <_raise_r+0x14>
 8010b8a:	2316      	movs	r3, #22
 8010b8c:	6003      	str	r3, [r0, #0]
 8010b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8010b92:	bd38      	pop	{r3, r4, r5, pc}
 8010b94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010b96:	b112      	cbz	r2, 8010b9e <_raise_r+0x1e>
 8010b98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010b9c:	b94b      	cbnz	r3, 8010bb2 <_raise_r+0x32>
 8010b9e:	4620      	mov	r0, r4
 8010ba0:	f000 f830 	bl	8010c04 <_getpid_r>
 8010ba4:	462a      	mov	r2, r5
 8010ba6:	4601      	mov	r1, r0
 8010ba8:	4620      	mov	r0, r4
 8010baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bae:	f000 b817 	b.w	8010be0 <_kill_r>
 8010bb2:	2b01      	cmp	r3, #1
 8010bb4:	d00a      	beq.n	8010bcc <_raise_r+0x4c>
 8010bb6:	1c59      	adds	r1, r3, #1
 8010bb8:	d103      	bne.n	8010bc2 <_raise_r+0x42>
 8010bba:	2316      	movs	r3, #22
 8010bbc:	6003      	str	r3, [r0, #0]
 8010bbe:	2001      	movs	r0, #1
 8010bc0:	e7e7      	b.n	8010b92 <_raise_r+0x12>
 8010bc2:	2400      	movs	r4, #0
 8010bc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010bc8:	4628      	mov	r0, r5
 8010bca:	4798      	blx	r3
 8010bcc:	2000      	movs	r0, #0
 8010bce:	e7e0      	b.n	8010b92 <_raise_r+0x12>

08010bd0 <raise>:
 8010bd0:	4b02      	ldr	r3, [pc, #8]	; (8010bdc <raise+0xc>)
 8010bd2:	4601      	mov	r1, r0
 8010bd4:	6818      	ldr	r0, [r3, #0]
 8010bd6:	f7ff bfd3 	b.w	8010b80 <_raise_r>
 8010bda:	bf00      	nop
 8010bdc:	2000002c 	.word	0x2000002c

08010be0 <_kill_r>:
 8010be0:	b538      	push	{r3, r4, r5, lr}
 8010be2:	4d07      	ldr	r5, [pc, #28]	; (8010c00 <_kill_r+0x20>)
 8010be4:	2300      	movs	r3, #0
 8010be6:	4604      	mov	r4, r0
 8010be8:	4608      	mov	r0, r1
 8010bea:	4611      	mov	r1, r2
 8010bec:	602b      	str	r3, [r5, #0]
 8010bee:	f7ef ff6d 	bl	8000acc <_kill>
 8010bf2:	1c43      	adds	r3, r0, #1
 8010bf4:	d102      	bne.n	8010bfc <_kill_r+0x1c>
 8010bf6:	682b      	ldr	r3, [r5, #0]
 8010bf8:	b103      	cbz	r3, 8010bfc <_kill_r+0x1c>
 8010bfa:	6023      	str	r3, [r4, #0]
 8010bfc:	bd38      	pop	{r3, r4, r5, pc}
 8010bfe:	bf00      	nop
 8010c00:	200082b0 	.word	0x200082b0

08010c04 <_getpid_r>:
 8010c04:	f7ef bf5a 	b.w	8000abc <_getpid>

08010c08 <_fstat_r>:
 8010c08:	b538      	push	{r3, r4, r5, lr}
 8010c0a:	4d07      	ldr	r5, [pc, #28]	; (8010c28 <_fstat_r+0x20>)
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	4604      	mov	r4, r0
 8010c10:	4608      	mov	r0, r1
 8010c12:	4611      	mov	r1, r2
 8010c14:	602b      	str	r3, [r5, #0]
 8010c16:	f7ef ffba 	bl	8000b8e <_fstat>
 8010c1a:	1c43      	adds	r3, r0, #1
 8010c1c:	d102      	bne.n	8010c24 <_fstat_r+0x1c>
 8010c1e:	682b      	ldr	r3, [r5, #0]
 8010c20:	b103      	cbz	r3, 8010c24 <_fstat_r+0x1c>
 8010c22:	6023      	str	r3, [r4, #0]
 8010c24:	bd38      	pop	{r3, r4, r5, pc}
 8010c26:	bf00      	nop
 8010c28:	200082b0 	.word	0x200082b0

08010c2c <_isatty_r>:
 8010c2c:	b538      	push	{r3, r4, r5, lr}
 8010c2e:	4d06      	ldr	r5, [pc, #24]	; (8010c48 <_isatty_r+0x1c>)
 8010c30:	2300      	movs	r3, #0
 8010c32:	4604      	mov	r4, r0
 8010c34:	4608      	mov	r0, r1
 8010c36:	602b      	str	r3, [r5, #0]
 8010c38:	f7ef ffb9 	bl	8000bae <_isatty>
 8010c3c:	1c43      	adds	r3, r0, #1
 8010c3e:	d102      	bne.n	8010c46 <_isatty_r+0x1a>
 8010c40:	682b      	ldr	r3, [r5, #0]
 8010c42:	b103      	cbz	r3, 8010c46 <_isatty_r+0x1a>
 8010c44:	6023      	str	r3, [r4, #0]
 8010c46:	bd38      	pop	{r3, r4, r5, pc}
 8010c48:	200082b0 	.word	0x200082b0

08010c4c <_init>:
 8010c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c4e:	bf00      	nop
 8010c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c52:	bc08      	pop	{r3}
 8010c54:	469e      	mov	lr, r3
 8010c56:	4770      	bx	lr

08010c58 <_fini>:
 8010c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c5a:	bf00      	nop
 8010c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c5e:	bc08      	pop	{r3}
 8010c60:	469e      	mov	lr, r3
 8010c62:	4770      	bx	lr
