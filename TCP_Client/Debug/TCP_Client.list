
TCP_Client.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8b0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021e0  0800ba60  0800ba60  0001ba60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc40  0800dc40  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc40  0800dc40  0001dc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc48  0800dc48  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc48  0800dc48  0001dc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc4c  0800dc4c  0001dc4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800dc50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002008c  2**0
                  CONTENTS
 10 .bss          0000aaa0  2000008c  2000008c  0002008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000ab2c  2000ab2c  0002008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000338cd  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006e8e  00000000  00000000  00053989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a08  00000000  00000000  0005a818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002480  00000000  00000000  0005c220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031244  00000000  00000000  0005e6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003736c  00000000  00000000  0008f8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5401  00000000  00000000  000c6c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bc051  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055c8  00000000  00000000  001bc0a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0002316f  00000000  00000000  001c166c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ba48 	.word	0x0800ba48

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	0800ba48 	.word	0x0800ba48

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b500      	push	{lr}
 8000596:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000598:	2230      	movs	r2, #48	; 0x30
 800059a:	2100      	movs	r1, #0
 800059c:	a808      	add	r0, sp, #32
 800059e:	f00a f847 	bl	800a630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a2:	2300      	movs	r3, #0
 80005a4:	9303      	str	r3, [sp, #12]
 80005a6:	9304      	str	r3, [sp, #16]
 80005a8:	9305      	str	r3, [sp, #20]
 80005aa:	9306      	str	r3, [sp, #24]
 80005ac:	9307      	str	r3, [sp, #28]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <SystemClock_Config+0xa0>)
 80005b2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80005b4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005b8:	6411      	str	r1, [r2, #64]	; 0x40
 80005ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005bc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80005c0:	9201      	str	r2, [sp, #4]
 80005c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	9302      	str	r3, [sp, #8]
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <SystemClock_Config+0xa4>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d6:	9302      	str	r3, [sp, #8]
 80005d8:	9b02      	ldr	r3, [sp, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005da:	2301      	movs	r3, #1
 80005dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005de:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005e2:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005ec:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ee:	2204      	movs	r2, #4
 80005f0:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f2:	22a8      	movs	r2, #168	; 0xa8
 80005f4:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f6:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f8:	2307      	movs	r3, #7
 80005fa:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	a808      	add	r0, sp, #32
 80005fe:	f001 fd4b 	bl	8002098 <HAL_RCC_OscConfig>
 8000602:	b998      	cbnz	r0, 800062c <SystemClock_Config+0x98>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000614:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061a:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061c:	2105      	movs	r1, #5
 800061e:	a803      	add	r0, sp, #12
 8000620:	f001 ffa0 	bl	8002564 <HAL_RCC_ClockConfig>
 8000624:	b920      	cbnz	r0, 8000630 <SystemClock_Config+0x9c>
  {
    Error_Handler();
  }
}
 8000626:	b015      	add	sp, #84	; 0x54
 8000628:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800062c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800062e:	e7fe      	b.n	800062e <SystemClock_Config+0x9a>
 8000630:	b672      	cpsid	i
 8000632:	e7fe      	b.n	8000632 <SystemClock_Config+0x9e>
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <main>:
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 8000640:	f000 fca6 	bl	8000f90 <HAL_Init>
  SystemClock_Config();
 8000644:	f7ff ffa6 	bl	8000594 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	2400      	movs	r4, #0
 800064a:	9409      	str	r4, [sp, #36]	; 0x24
 800064c:	940a      	str	r4, [sp, #40]	; 0x28
 800064e:	940b      	str	r4, [sp, #44]	; 0x2c
 8000650:	940c      	str	r4, [sp, #48]	; 0x30
 8000652:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000654:	9401      	str	r4, [sp, #4]
 8000656:	4b6a      	ldr	r3, [pc, #424]	; (8000800 <main+0x1c4>)
 8000658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800065a:	f042 0204 	orr.w	r2, r2, #4
 800065e:	631a      	str	r2, [r3, #48]	; 0x30
 8000660:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000662:	f002 0204 	and.w	r2, r2, #4
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800066a:	9402      	str	r4, [sp, #8]
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
 8000674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000676:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800067a:	9202      	str	r2, [sp, #8]
 800067c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	9403      	str	r4, [sp, #12]
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f002 0201 	and.w	r2, r2, #1
 800068e:	9203      	str	r2, [sp, #12]
 8000690:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	9404      	str	r4, [sp, #16]
 8000694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000696:	f042 0202 	orr.w	r2, r2, #2
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	f002 0202 	and.w	r2, r2, #2
 80006a2:	9204      	str	r2, [sp, #16]
 80006a4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006a6:	9405      	str	r4, [sp, #20]
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	f042 0208 	orr.w	r2, r2, #8
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
 80006b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b2:	f002 0208 	and.w	r2, r2, #8
 80006b6:	9205      	str	r2, [sp, #20]
 80006b8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ba:	9406      	str	r4, [sp, #24]
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006c2:	631a      	str	r2, [r3, #48]	; 0x30
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006ca:	9306      	str	r3, [sp, #24]
 80006cc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ce:	4f4d      	ldr	r7, [pc, #308]	; (8000804 <main+0x1c8>)
 80006d0:	4622      	mov	r2, r4
 80006d2:	f244 0181 	movw	r1, #16513	; 0x4081
 80006d6:	4638      	mov	r0, r7
 80006d8:	f001 fc40 	bl	8001f5c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006dc:	4d4a      	ldr	r5, [pc, #296]	; (8000808 <main+0x1cc>)
 80006de:	4622      	mov	r2, r4
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	4628      	mov	r0, r5
 80006e4:	f001 fc3a 	bl	8001f5c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ec:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006f6:	a909      	add	r1, sp, #36	; 0x24
 80006f8:	4844      	ldr	r0, [pc, #272]	; (800080c <main+0x1d0>)
 80006fa:	f001 fb1b 	bl	8001d34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006fe:	f244 0381 	movw	r3, #16513	; 0x4081
 8000702:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000704:	2601      	movs	r6, #1
 8000706:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070c:	a909      	add	r1, sp, #36	; 0x24
 800070e:	4638      	mov	r0, r7
 8000710:	f001 fb10 	bl	8001d34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800071e:	a909      	add	r1, sp, #36	; 0x24
 8000720:	4628      	mov	r0, r5
 8000722:	f001 fb07 	bl	8001d34 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000726:	2380      	movs	r3, #128	; 0x80
 8000728:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800072e:	a909      	add	r1, sp, #36	; 0x24
 8000730:	4628      	mov	r0, r5
 8000732:	f001 faff 	bl	8001d34 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8000736:	4836      	ldr	r0, [pc, #216]	; (8000810 <main+0x1d4>)
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <main+0x1d8>)
 800073a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800073c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000740:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000748:	230c      	movs	r3, #12
 800074a:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800074e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000750:	f002 fb20 	bl	8002d94 <HAL_UART_Init>
 8000754:	2800      	cmp	r0, #0
 8000756:	d149      	bne.n	80007ec <main+0x1b0>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000758:	482f      	ldr	r0, [pc, #188]	; (8000818 <main+0x1dc>)
 800075a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800075e:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000760:	2304      	movs	r3, #4
 8000762:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000764:	2202      	movs	r2, #2
 8000766:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076c:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800076e:	2201      	movs	r2, #1
 8000770:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000772:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000774:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000776:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000778:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800077a:	f001 fbf5 	bl	8001f68 <HAL_PCD_Init>
 800077e:	2800      	cmp	r0, #0
 8000780:	d136      	bne.n	80007f0 <main+0x1b4>
  MX_LWIP_Init();
 8000782:	f002 fd0d 	bl	80031a0 <MX_LWIP_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	2300      	movs	r3, #0
 8000788:	9309      	str	r3, [sp, #36]	; 0x24
 800078a:	930a      	str	r3, [sp, #40]	; 0x28
 800078c:	930b      	str	r3, [sp, #44]	; 0x2c
 800078e:	930c      	str	r3, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000790:	9307      	str	r3, [sp, #28]
 8000792:	9308      	str	r3, [sp, #32]
  htim1.Instance = TIM1;
 8000794:	4821      	ldr	r0, [pc, #132]	; (800081c <main+0x1e0>)
 8000796:	4a22      	ldr	r2, [pc, #136]	; (8000820 <main+0x1e4>)
 8000798:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 24000-1;
 800079a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800079e:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 80007a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007a6:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a8:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 80007aa:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ac:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007ae:	f002 f93b 	bl	8002a28 <HAL_TIM_Base_Init>
 80007b2:	b9f8      	cbnz	r0, 80007f4 <main+0x1b8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ba:	a909      	add	r1, sp, #36	; 0x24
 80007bc:	4817      	ldr	r0, [pc, #92]	; (800081c <main+0x1e0>)
 80007be:	f002 f96c 	bl	8002a9a <HAL_TIM_ConfigClockSource>
 80007c2:	b9c8      	cbnz	r0, 80007f8 <main+0x1bc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	9307      	str	r3, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007c8:	9308      	str	r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ca:	a907      	add	r1, sp, #28
 80007cc:	4813      	ldr	r0, [pc, #76]	; (800081c <main+0x1e0>)
 80007ce:	f002 fa19 	bl	8002c04 <HAL_TIMEx_MasterConfigSynchronization>
 80007d2:	b998      	cbnz	r0, 80007fc <main+0x1c0>
  HAL_TIM_Base_Start_IT(&htim1);
 80007d4:	4811      	ldr	r0, [pc, #68]	; (800081c <main+0x1e0>)
 80007d6:	f001 ff9d 	bl	8002714 <HAL_TIM_Base_Start_IT>
  tcp_client_init();
 80007da:	f000 fa8d 	bl	8000cf8 <tcp_client_init>
ethernetif_input(&gnetif);
 80007de:	4c11      	ldr	r4, [pc, #68]	; (8000824 <main+0x1e8>)
 80007e0:	4620      	mov	r0, r4
 80007e2:	f002 fdcd 	bl	8003380 <ethernetif_input>
sys_check_timeouts();
 80007e6:	f008 f933 	bl	8008a50 <sys_check_timeouts>
  while (1)
 80007ea:	e7f9      	b.n	80007e0 <main+0x1a4>
 80007ec:	b672      	cpsid	i
  while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0x1b2>
 80007f0:	b672      	cpsid	i
 80007f2:	e7fe      	b.n	80007f2 <main+0x1b6>
 80007f4:	b672      	cpsid	i
 80007f6:	e7fe      	b.n	80007f6 <main+0x1ba>
 80007f8:	b672      	cpsid	i
 80007fa:	e7fe      	b.n	80007fa <main+0x1be>
 80007fc:	b672      	cpsid	i
 80007fe:	e7fe      	b.n	80007fe <main+0x1c2>
 8000800:	40023800 	.word	0x40023800
 8000804:	40020400 	.word	0x40020400
 8000808:	40021800 	.word	0x40021800
 800080c:	40020800 	.word	0x40020800
 8000810:	200005fc 	.word	0x200005fc
 8000814:	40004800 	.word	0x40004800
 8000818:	200000a8 	.word	0x200000a8
 800081c:	200005b4 	.word	0x200005b4
 8000820:	40010000 	.word	0x40010000
 8000824:	20000660 	.word	0x20000660

08000828 <Error_Handler>:
 8000828:	b672      	cpsid	i
 800082a:	e7fe      	b.n	800082a <Error_Handler+0x2>

0800082c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800082c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082e:	2100      	movs	r1, #0
 8000830:	9100      	str	r1, [sp, #0]
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <HAL_MspInit+0x34>)
 8000834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800083a:	645a      	str	r2, [r3, #68]	; 0x44
 800083c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800083e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	9101      	str	r1, [sp, #4]
 8000848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800084a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800084e:	641a      	str	r2, [r3, #64]	; 0x40
 8000850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000856:	9301      	str	r3, [sp, #4]
 8000858:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085a:	b002      	add	sp, #8
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000864:	6802      	ldr	r2, [r0, #0]
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000868:	429a      	cmp	r2, r3
 800086a:	d000      	beq.n	800086e <HAL_TIM_Base_MspInit+0xa>
 800086c:	4770      	bx	lr
{
 800086e:	b500      	push	{lr}
 8000870:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000872:	2100      	movs	r1, #0
 8000874:	9101      	str	r1, [sp, #4]
 8000876:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 800087a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800087c:	f042 0201 	orr.w	r2, r2, #1
 8000880:	645a      	str	r2, [r3, #68]	; 0x44
 8000882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000884:	f003 0301 	and.w	r3, r3, #1
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	9b01      	ldr	r3, [sp, #4]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800088c:	460a      	mov	r2, r1
 800088e:	2019      	movs	r0, #25
 8000890:	f000 fbd0 	bl	8001034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000894:	2019      	movs	r0, #25
 8000896:	f000 fc03 	bl	80010a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800089a:	b003      	add	sp, #12
 800089c:	f85d fb04 	ldr.w	pc, [sp], #4
 80008a0:	40010000 	.word	0x40010000

080008a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a4:	b500      	push	{lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	2300      	movs	r3, #0
 80008aa:	9303      	str	r3, [sp, #12]
 80008ac:	9304      	str	r3, [sp, #16]
 80008ae:	9305      	str	r3, [sp, #20]
 80008b0:	9306      	str	r3, [sp, #24]
 80008b2:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 80008b4:	6802      	ldr	r2, [r0, #0]
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0x68>)
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d002      	beq.n	80008c2 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008bc:	b009      	add	sp, #36	; 0x24
 80008be:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 80008c2:	2100      	movs	r1, #0
 80008c4:	9101      	str	r1, [sp, #4]
 80008c6:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008d0:	641a      	str	r2, [r3, #64]	; 0x40
 80008d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008dc:	9102      	str	r1, [sp, #8]
 80008de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e0:	f042 0208 	orr.w	r2, r2, #8
 80008e4:	631a      	str	r2, [r3, #48]	; 0x30
 80008e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e8:	f003 0308 	and.w	r3, r3, #8
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008f4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008fe:	2307      	movs	r3, #7
 8000900:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000902:	a903      	add	r1, sp, #12
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <HAL_UART_MspInit+0x6c>)
 8000906:	f001 fa15 	bl	8001d34 <HAL_GPIO_Init>
}
 800090a:	e7d7      	b.n	80008bc <HAL_UART_MspInit+0x18>
 800090c:	40004800 	.word	0x40004800
 8000910:	40020c00 	.word	0x40020c00

08000914 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000914:	b570      	push	{r4, r5, r6, lr}
 8000916:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	2300      	movs	r3, #0
 800091a:	9303      	str	r3, [sp, #12]
 800091c:	9304      	str	r3, [sp, #16]
 800091e:	9305      	str	r3, [sp, #20]
 8000920:	9306      	str	r3, [sp, #24]
 8000922:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8000924:	6803      	ldr	r3, [r0, #0]
 8000926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800092a:	d001      	beq.n	8000930 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800092c:	b008      	add	sp, #32
 800092e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	2500      	movs	r5, #0
 8000932:	9501      	str	r5, [sp, #4]
 8000934:	4c17      	ldr	r4, [pc, #92]	; (8000994 <HAL_PCD_MspInit+0x80>)
 8000936:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6323      	str	r3, [r4, #48]	; 0x30
 800093e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000948:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800094c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094e:	2302      	movs	r3, #2
 8000950:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000956:	230a      	movs	r3, #10
 8000958:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	4e0f      	ldr	r6, [pc, #60]	; (8000998 <HAL_PCD_MspInit+0x84>)
 800095c:	a903      	add	r1, sp, #12
 800095e:	4630      	mov	r0, r6
 8000960:	f001 f9e8 	bl	8001d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000968:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800096e:	a903      	add	r1, sp, #12
 8000970:	4630      	mov	r0, r6
 8000972:	f001 f9df 	bl	8001d34 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800097c:	6363      	str	r3, [r4, #52]	; 0x34
 800097e:	9502      	str	r5, [sp, #8]
 8000980:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000982:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000986:	6463      	str	r3, [r4, #68]	; 0x44
 8000988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800098a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098e:	9302      	str	r3, [sp, #8]
 8000990:	9b02      	ldr	r3, [sp, #8]
}
 8000992:	e7cb      	b.n	800092c <HAL_PCD_MspInit+0x18>
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800099c:	e7fe      	b.n	800099c <NMI_Handler>

0800099e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <HardFault_Handler>

080009a0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <MemManage_Handler>

080009a2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler>

080009a4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler>

080009a6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	4770      	bx	lr

080009ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 fb09 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bd08      	pop	{r3, pc}

080009b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009b4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b6:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM1_UP_TIM10_IRQHandler+0xc>)
 80009b8:	f001 fef4 	bl	80027a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009bc:	bd08      	pop	{r3, pc}
 80009be:	bf00      	nop
 80009c0:	200005b4 	.word	0x200005b4

080009c4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009c6:	4802      	ldr	r0, [pc, #8]	; (80009d0 <ETH_IRQHandler+0xc>)
 80009c8:	f001 f822 	bl	8001a10 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009cc:	bd08      	pop	{r3, pc}
 80009ce:	bf00      	nop
 80009d0:	2000083c 	.word	0x2000083c

080009d4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80009d4:	2001      	movs	r0, #1
 80009d6:	4770      	bx	lr

080009d8 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <_kill+0xc>)
 80009da:	2216      	movs	r2, #22
 80009dc:	601a      	str	r2, [r3, #0]
	return -1;
}
 80009de:	f04f 30ff 	mov.w	r0, #4294967295
 80009e2:	4770      	bx	lr
 80009e4:	2000ab1c 	.word	0x2000ab1c

080009e8 <_exit>:
	errno = EINVAL;
 80009e8:	4b01      	ldr	r3, [pc, #4]	; (80009f0 <_exit+0x8>)
 80009ea:	2216      	movs	r2, #22
 80009ec:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80009ee:	e7fe      	b.n	80009ee <_exit+0x6>
 80009f0:	2000ab1c 	.word	0x2000ab1c

080009f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009f4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	1e16      	subs	r6, r2, #0
 80009f8:	dd07      	ble.n	8000a0a <_read+0x16>
 80009fa:	460c      	mov	r4, r1
 80009fc:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 80009fe:	f3af 8000 	nop.w
 8000a02:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a06:	42a5      	cmp	r5, r4
 8000a08:	d1f9      	bne.n	80009fe <_read+0xa>
	}

return len;
}
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	bd70      	pop	{r4, r5, r6, pc}

08000a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a0e:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a10:	1e16      	subs	r6, r2, #0
 8000a12:	dd07      	ble.n	8000a24 <_write+0x16>
 8000a14:	460c      	mov	r4, r1
 8000a16:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000a18:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000a1c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a20:	42a5      	cmp	r5, r4
 8000a22:	d1f9      	bne.n	8000a18 <_write+0xa>
	}
	return len;
}
 8000a24:	4630      	mov	r0, r6
 8000a26:	bd70      	pop	{r4, r5, r6, pc}

08000a28 <_close>:

int _close(int file)
{
	return -1;
}
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr

08000a2e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a34:	2000      	movs	r0, #0
 8000a36:	4770      	bx	lr

08000a38 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a38:	2001      	movs	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	4770      	bx	lr

08000a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a40:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a42:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <_sbrk+0x34>)
 8000a44:	6812      	ldr	r2, [r2, #0]
 8000a46:	b152      	cbz	r2, 8000a5e <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <_sbrk+0x34>)
 8000a4a:	6810      	ldr	r0, [r2, #0]
 8000a4c:	4403      	add	r3, r0
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <_sbrk+0x38>)
 8000a50:	490a      	ldr	r1, [pc, #40]	; (8000a7c <_sbrk+0x3c>)
 8000a52:	1a52      	subs	r2, r2, r1
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d806      	bhi.n	8000a66 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <_sbrk+0x34>)
 8000a5a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a5c:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000a5e:	4a05      	ldr	r2, [pc, #20]	; (8000a74 <_sbrk+0x34>)
 8000a60:	4907      	ldr	r1, [pc, #28]	; (8000a80 <_sbrk+0x40>)
 8000a62:	6011      	str	r1, [r2, #0]
 8000a64:	e7f0      	b.n	8000a48 <_sbrk+0x8>
    errno = ENOMEM;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <_sbrk+0x44>)
 8000a68:	220c      	movs	r2, #12
 8000a6a:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000640 	.word	0x20000640
 8000a78:	20030000 	.word	0x20030000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	2000ab30 	.word	0x2000ab30
 8000a84:	2000ab1c 	.word	0x2000ab1c

08000a88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a88:	4a03      	ldr	r2, [pc, #12]	; (8000a98 <SystemInit+0x10>)
 8000a8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000a8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <tcp_client_connection_close>:
  }
}


static void tcp_client_connection_close(struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	460d      	mov	r5, r1

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	f004 f892 	bl	8004bcc <tcp_arg>
  tcp_sent(tpcb, NULL);
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f004 f8ac 	bl	8004c08 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4620      	mov	r0, r4
 8000ab4:	f004 f88e 	bl	8004bd4 <tcp_recv>
  tcp_err(tpcb, NULL);
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4620      	mov	r0, r4
 8000abc:	f004 f8be 	bl	8004c3c <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	f004 f8d3 	bl	8004c70 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8000aca:	b115      	cbz	r5, 8000ad2 <tcp_client_connection_close+0x36>
  {
    mem_free(es);
 8000acc:	4628      	mov	r0, r5
 8000ace:	f002 fe85 	bl	80037dc <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	f004 fcea 	bl	80054ac <tcp_close>
}
 8000ad8:	bd38      	pop	{r3, r4, r5, pc}
	...

08000adc <tcp_client_connected>:
{
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	460c      	mov	r4, r1
  es = (struct tcp_client_struct *)mem_malloc(sizeof(struct tcp_client_struct));
 8000ae2:	200c      	movs	r0, #12
 8000ae4:	f002 fff6 	bl	8003ad4 <mem_malloc>
  if (es != NULL)
 8000ae8:	b338      	cbz	r0, 8000b3a <tcp_client_connected+0x5e>
 8000aea:	4606      	mov	r6, r0
    es->state = ES_CONNECTED;
 8000aec:	2301      	movs	r3, #1
 8000aee:	7003      	strb	r3, [r0, #0]
    es->pcb = newpcb;
 8000af0:	6044      	str	r4, [r0, #4]
    es->retries = 0;
 8000af2:	2500      	movs	r5, #0
 8000af4:	7045      	strb	r5, [r0, #1]
    es->p = NULL;
 8000af6:	6085      	str	r5, [r0, #8]
    tcp_arg(newpcb, es);
 8000af8:	4601      	mov	r1, r0
 8000afa:	4620      	mov	r0, r4
 8000afc:	f004 f866 	bl	8004bcc <tcp_arg>
    tcp_recv(newpcb, tcp_client_recv);
 8000b00:	4911      	ldr	r1, [pc, #68]	; (8000b48 <tcp_client_connected+0x6c>)
 8000b02:	4620      	mov	r0, r4
 8000b04:	f004 f866 	bl	8004bd4 <tcp_recv>
    tcp_poll(newpcb, tcp_client_poll, 0);
 8000b08:	462a      	mov	r2, r5
 8000b0a:	4910      	ldr	r1, [pc, #64]	; (8000b4c <tcp_client_connected+0x70>)
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f004 f8af 	bl	8004c70 <tcp_poll>
    tcp_sent(newpcb, tcp_client_sent);
 8000b12:	490f      	ldr	r1, [pc, #60]	; (8000b50 <tcp_client_connected+0x74>)
 8000b14:	4620      	mov	r0, r4
 8000b16:	f004 f877 	bl	8004c08 <tcp_sent>
/* Handle the incoming TCP Data */

static void tcp_client_handle (struct tcp_pcb *tpcb, struct tcp_client_struct *es)
{
	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8000b1a:	6863      	ldr	r3, [r4, #4]
 8000b1c:	9301      	str	r3, [sp, #4]
	uint16_t inPort = tpcb->remote_port;

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8000b1e:	a801      	add	r0, sp, #4
 8000b20:	f009 f838 	bl	8009b94 <ip4addr_ntoa>

//	esTx->state = es->state;
//	esTx->pcb = es->pcb;
//	esTx->p = es->p;

	esTx = es;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <tcp_client_connected+0x78>)
 8000b26:	601e      	str	r6, [r3, #0]
	pcbTx = tpcb;
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <tcp_client_connected+0x7c>)
 8000b2a:	601c      	str	r4, [r3, #0]

	counter++;
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <tcp_client_connected+0x80>)
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	3301      	adds	r3, #1
 8000b32:	6013      	str	r3, [r2, #0]
    ret_err = ERR_OK;
 8000b34:	4628      	mov	r0, r5
}
 8000b36:	b002      	add	sp, #8
 8000b38:	bd70      	pop	{r4, r5, r6, pc}
    tcp_client_connection_close(newpcb, es);
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f7ff ffad 	bl	8000a9c <tcp_client_connection_close>
    ret_err = ERR_MEM;
 8000b42:	f04f 30ff 	mov.w	r0, #4294967295
 8000b46:	e7f6      	b.n	8000b36 <tcp_client_connected+0x5a>
 8000b48:	08000bb5 	.word	0x08000bb5
 8000b4c:	08000b85 	.word	0x08000b85
 8000b50:	08000b61 	.word	0x08000b61
 8000b54:	20000648 	.word	0x20000648
 8000b58:	2000064c 	.word	0x2000064c
 8000b5c:	20000644 	.word	0x20000644

08000b60 <tcp_client_sent>:
  es->retries = 0;
 8000b60:	2200      	movs	r2, #0
 8000b62:	7042      	strb	r2, [r0, #1]
  if(es->p != NULL)
 8000b64:	6882      	ldr	r2, [r0, #8]
 8000b66:	b10a      	cbz	r2, 8000b6c <tcp_client_sent+0xc>
}
 8000b68:	2000      	movs	r0, #0
 8000b6a:	4770      	bx	lr
{
 8000b6c:	b508      	push	{r3, lr}
 8000b6e:	460b      	mov	r3, r1
    if(es->state == ES_CLOSING)
 8000b70:	7802      	ldrb	r2, [r0, #0]
 8000b72:	2a03      	cmp	r2, #3
 8000b74:	d001      	beq.n	8000b7a <tcp_client_sent+0x1a>
}
 8000b76:	2000      	movs	r0, #0
 8000b78:	bd08      	pop	{r3, pc}
      tcp_client_connection_close(tpcb, es);
 8000b7a:	4601      	mov	r1, r0
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff8d 	bl	8000a9c <tcp_client_connection_close>
 8000b82:	e7f8      	b.n	8000b76 <tcp_client_sent+0x16>

08000b84 <tcp_client_poll>:
{
 8000b84:	b508      	push	{r3, lr}
 8000b86:	460b      	mov	r3, r1
  if (es != NULL)
 8000b88:	b170      	cbz	r0, 8000ba8 <tcp_client_poll+0x24>
 8000b8a:	4601      	mov	r1, r0
    if (es->p != NULL)
 8000b8c:	6882      	ldr	r2, [r0, #8]
 8000b8e:	b10a      	cbz	r2, 8000b94 <tcp_client_poll+0x10>
    ret_err = ERR_OK;
 8000b90:	2000      	movs	r0, #0
}
 8000b92:	bd08      	pop	{r3, pc}
      if(es->state == ES_CLOSING)
 8000b94:	7802      	ldrb	r2, [r0, #0]
 8000b96:	2a03      	cmp	r2, #3
 8000b98:	d001      	beq.n	8000b9e <tcp_client_poll+0x1a>
    ret_err = ERR_OK;
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	e7f9      	b.n	8000b92 <tcp_client_poll+0xe>
        tcp_client_connection_close(tpcb, es);
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff ff7c 	bl	8000a9c <tcp_client_connection_close>
    ret_err = ERR_OK;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e7f4      	b.n	8000b92 <tcp_client_poll+0xe>
    tcp_abort(tpcb);
 8000ba8:	4608      	mov	r0, r1
 8000baa:	f004 fa89 	bl	80050c0 <tcp_abort>
    ret_err = ERR_ABRT;
 8000bae:	f06f 000c 	mvn.w	r0, #12
 8000bb2:	e7ee      	b.n	8000b92 <tcp_client_poll+0xe>

08000bb4 <tcp_client_recv>:
{
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	460f      	mov	r7, r1
 8000bba:	4615      	mov	r5, r2
 8000bbc:	461c      	mov	r4, r3
  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000bbe:	4606      	mov	r6, r0
 8000bc0:	b180      	cbz	r0, 8000be4 <tcp_client_recv+0x30>
  if (p == NULL)
 8000bc2:	b1b5      	cbz	r5, 8000bf2 <tcp_client_recv+0x3e>
  else if(err != ERR_OK)
 8000bc4:	bb0c      	cbnz	r4, 8000c0a <tcp_client_recv+0x56>
  else if(es->state == ES_CONNECTED)
 8000bc6:	7833      	ldrb	r3, [r6, #0]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d025      	beq.n	8000c18 <tcp_client_recv+0x64>
    tcp_recved(tpcb, p->tot_len);
 8000bcc:	8929      	ldrh	r1, [r5, #8]
 8000bce:	4638      	mov	r0, r7
 8000bd0:	f003 ff84 	bl	8004adc <tcp_recved>
    es->p = NULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60b3      	str	r3, [r6, #8]
    pbuf_free(p);
 8000bd8:	4628      	mov	r0, r5
 8000bda:	f003 fb8b 	bl	80042f4 <pbuf_free>
    ret_err = ERR_OK;
 8000bde:	4620      	mov	r0, r4
}
 8000be0:	b003      	add	sp, #12
 8000be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("arg != NULL",arg != NULL);
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <tcp_client_recv+0x94>)
 8000be6:	22e0      	movs	r2, #224	; 0xe0
 8000be8:	4918      	ldr	r1, [pc, #96]	; (8000c4c <tcp_client_recv+0x98>)
 8000bea:	4819      	ldr	r0, [pc, #100]	; (8000c50 <tcp_client_recv+0x9c>)
 8000bec:	f009 fd28 	bl	800a640 <iprintf>
 8000bf0:	e7e7      	b.n	8000bc2 <tcp_client_recv+0xe>
    es->state = ES_CLOSING;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	7033      	strb	r3, [r6, #0]
    if(es->p == NULL)
 8000bf6:	68b3      	ldr	r3, [r6, #8]
 8000bf8:	b10b      	cbz	r3, 8000bfe <tcp_client_recv+0x4a>
    ret_err = ERR_OK;
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	e7f0      	b.n	8000be0 <tcp_client_recv+0x2c>
       tcp_client_connection_close(tpcb, es);
 8000bfe:	4631      	mov	r1, r6
 8000c00:	4638      	mov	r0, r7
 8000c02:	f7ff ff4b 	bl	8000a9c <tcp_client_connection_close>
    ret_err = ERR_OK;
 8000c06:	2000      	movs	r0, #0
 8000c08:	e7ea      	b.n	8000be0 <tcp_client_recv+0x2c>
      es->p = NULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60b3      	str	r3, [r6, #8]
      pbuf_free(p);
 8000c0e:	4628      	mov	r0, r5
 8000c10:	f003 fb70 	bl	80042f4 <pbuf_free>
    ret_err = err;
 8000c14:	4620      	mov	r0, r4
 8000c16:	e7e3      	b.n	8000be0 <tcp_client_recv+0x2c>
    es->p = p;
 8000c18:	60b5      	str	r5, [r6, #8]
    tcp_recved(tpcb, p->tot_len);
 8000c1a:	8929      	ldrh	r1, [r5, #8]
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f003 ff5d 	bl	8004adc <tcp_recved>
	ip4_addr_t inIP = tpcb->remote_ip;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	9301      	str	r3, [sp, #4]
	char *remIP = ipaddr_ntoa(&inIP);
 8000c26:	a801      	add	r0, sp, #4
 8000c28:	f008 ffb4 	bl	8009b94 <ip4addr_ntoa>
	esTx = es;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <tcp_client_recv+0xa0>)
 8000c2e:	601e      	str	r6, [r3, #0]
	pcbTx = tpcb;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <tcp_client_recv+0xa4>)
 8000c32:	601f      	str	r7, [r3, #0]
	counter++;
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <tcp_client_recv+0xa8>)
 8000c36:	6813      	ldr	r3, [r2, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]
    pbuf_free(p);
 8000c3c:	4628      	mov	r0, r5
 8000c3e:	f003 fb59 	bl	80042f4 <pbuf_free>
    ret_err = ERR_OK;
 8000c42:	4620      	mov	r0, r4
 8000c44:	e7cc      	b.n	8000be0 <tcp_client_recv+0x2c>
 8000c46:	bf00      	nop
 8000c48:	0800ba78 	.word	0x0800ba78
 8000c4c:	0800ba94 	.word	0x0800ba94
 8000c50:	0800baa0 	.word	0x0800baa0
 8000c54:	20000648 	.word	0x20000648
 8000c58:	2000064c 	.word	0x2000064c
 8000c5c:	20000644 	.word	0x20000644

08000c60 <HAL_TIM_PeriodElapsedCallback>:
{
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	b09b      	sub	sp, #108	; 0x6c
	int len = sprintf (buf, "Sending TCPclient Message %d\n", counter);
 8000c64:	4c20      	ldr	r4, [pc, #128]	; (8000ce8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	4920      	ldr	r1, [pc, #128]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c6a:	a801      	add	r0, sp, #4
 8000c6c:	f009 fd3e 	bl	800a6ec <siprintf>
	if (counter !=0)
 8000c70:	6823      	ldr	r3, [r4, #0]
 8000c72:	b90b      	cbnz	r3, 8000c78 <HAL_TIM_PeriodElapsedCallback+0x18>
}
 8000c74:	b01b      	add	sp, #108	; 0x6c
 8000c76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		esTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL);
 8000c78:	b284      	uxth	r4, r0
 8000c7a:	4e1d      	ldr	r6, [pc, #116]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000c7c:	6835      	ldr	r5, [r6, #0]
 8000c7e:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8000c82:	4621      	mov	r1, r4
 8000c84:	2036      	movs	r0, #54	; 0x36
 8000c86:	f003 fb9f 	bl	80043c8 <pbuf_alloc>
 8000c8a:	60a8      	str	r0, [r5, #8]
		pbuf_take(esTx->p, (char*)buf, len);
 8000c8c:	6833      	ldr	r3, [r6, #0]
 8000c8e:	4622      	mov	r2, r4
 8000c90:	a901      	add	r1, sp, #4
 8000c92:	6898      	ldr	r0, [r3, #8]
 8000c94:	f003 fdda 	bl	800484c <pbuf_take>
		tcp_client_send(pcbTx, esTx);
 8000c98:	4b16      	ldr	r3, [pc, #88]	; (8000cf4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000c9a:	681d      	ldr	r5, [r3, #0]
 8000c9c:	6836      	ldr	r6, [r6, #0]
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000c9e:	2701      	movs	r7, #1
 8000ca0:	e009      	b.n	8000cb6 <HAL_TIM_PeriodElapsedCallback+0x56>
      es->p = ptr->next;
 8000ca2:	6820      	ldr	r0, [r4, #0]
 8000ca4:	60b0      	str	r0, [r6, #8]
      if(es->p != NULL)
 8000ca6:	b108      	cbz	r0, 8000cac <HAL_TIM_PeriodElapsedCallback+0x4c>
        pbuf_ref(es->p);
 8000ca8:	f003 fc8a 	bl	80045c0 <pbuf_ref>
        freed = pbuf_free(ptr);
 8000cac:	4620      	mov	r0, r4
 8000cae:	f003 fb21 	bl	80042f4 <pbuf_free>
      while(freed == 0);
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d0fa      	beq.n	8000cac <HAL_TIM_PeriodElapsedCallback+0x4c>
         (es->p != NULL) &&
 8000cb6:	68b4      	ldr	r4, [r6, #8]
  while ((wr_err == ERR_OK) &&
 8000cb8:	b174      	cbz	r4, 8000cd8 <HAL_TIM_PeriodElapsedCallback+0x78>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8000cba:	8962      	ldrh	r2, [r4, #10]
         (es->p != NULL) &&
 8000cbc:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d309      	bcc.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x78>
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8000cc4:	463b      	mov	r3, r7
 8000cc6:	6861      	ldr	r1, [r4, #4]
 8000cc8:	4628      	mov	r0, r5
 8000cca:	f006 fd2b 	bl	8007724 <tcp_write>
    if (wr_err == ERR_OK)
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d0e7      	beq.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x42>
   else if(wr_err == ERR_MEM)
 8000cd2:	f1b0 3fff 	cmp.w	r0, #4294967295
 8000cd6:	d005      	beq.n	8000ce4 <HAL_TIM_PeriodElapsedCallback+0x84>
		pbuf_free(esTx->p);
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6898      	ldr	r0, [r3, #8]
 8000cde:	f003 fb09 	bl	80042f4 <pbuf_free>
}
 8000ce2:	e7c7      	b.n	8000c74 <HAL_TIM_PeriodElapsedCallback+0x14>
     es->p = ptr;
 8000ce4:	60b4      	str	r4, [r6, #8]
 8000ce6:	e7f7      	b.n	8000cd8 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000ce8:	20000644 	.word	0x20000644
 8000cec:	0800bac8 	.word	0x0800bac8
 8000cf0:	20000648 	.word	0x20000648
 8000cf4:	2000064c 	.word	0x2000064c

08000cf8 <tcp_client_init>:
{
 8000cf8:	b500      	push	{lr}
 8000cfa:	b083      	sub	sp, #12
	tpcb = tcp_new();
 8000cfc:	f004 fb0c 	bl	8005318 <tcp_new>
	IP_ADDR4(&destIPADDR, 169, 254, 101, 255);
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <tcp_client_init+0x1c>)
 8000d02:	9301      	str	r3, [sp, #4]
	tcp_connect(tpcb, &destIPADDR, 24, tcp_client_connected);
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <tcp_client_init+0x20>)
 8000d06:	2218      	movs	r2, #24
 8000d08:	a901      	add	r1, sp, #4
 8000d0a:	f004 f811 	bl	8004d30 <tcp_connect>
}
 8000d0e:	b003      	add	sp, #12
 8000d10:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d14:	ff65fea9 	.word	0xff65fea9
 8000d18:	08000add 	.word	0x08000add

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d46:	f7ff fe9f 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f009 fc15 	bl	800a578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fc75 	bl	800063c <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8000d60:	0800dc50 	.word	0x0800dc50
  ldr r2, =_sbss
 8000d64:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8000d68:	2000ab2c 	.word	0x2000ab2c

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>

08000d6e <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d6e:	b188      	cbz	r0, 8000d94 <LAN8742_RegisterBusIO+0x26>
 8000d70:	68ca      	ldr	r2, [r1, #12]
 8000d72:	b192      	cbz	r2, 8000d9a <LAN8742_RegisterBusIO+0x2c>
 8000d74:	688a      	ldr	r2, [r1, #8]
 8000d76:	b19a      	cbz	r2, 8000da0 <LAN8742_RegisterBusIO+0x32>
 8000d78:	690a      	ldr	r2, [r1, #16]
 8000d7a:	b1a2      	cbz	r2, 8000da6 <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d7c:	680a      	ldr	r2, [r1, #0]
 8000d7e:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d80:	684a      	ldr	r2, [r1, #4]
 8000d82:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d84:	68ca      	ldr	r2, [r1, #12]
 8000d86:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d88:	688a      	ldr	r2, [r1, #8]
 8000d8a:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d8c:	690a      	ldr	r2, [r1, #16]
 8000d8e:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000d90:	2000      	movs	r0, #0
 8000d92:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000d94:	f04f 30ff 	mov.w	r0, #4294967295
 8000d98:	4770      	bx	lr
 8000d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9e:	4770      	bx	lr
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	4770      	bx	lr
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000daa:	4770      	bx	lr

08000dac <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000db8:	6844      	ldr	r4, [r0, #4]
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	d149      	bne.n	8000e52 <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000dbe:	6883      	ldr	r3, [r0, #8]
 8000dc0:	b103      	cbz	r3, 8000dc4 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000dc2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000dc8:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000dca:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000dcc:	f06f 0804 	mvn.w	r8, #4
 8000dd0:	e003      	b.n	8000dda <LAN8742_Init+0x2e>
 8000dd2:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000dd4:	3401      	adds	r4, #1
 8000dd6:	2c20      	cmp	r4, #32
 8000dd8:	d033      	beq.n	8000e42 <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000dda:	696b      	ldr	r3, [r5, #20]
 8000ddc:	aa01      	add	r2, sp, #4
 8000dde:	4631      	mov	r1, r6
 8000de0:	4620      	mov	r0, r4
 8000de2:	4798      	blx	r3
 8000de4:	2800      	cmp	r0, #0
 8000de6:	dbf4      	blt.n	8000dd2 <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000de8:	9b01      	ldr	r3, [sp, #4]
 8000dea:	f003 031f 	and.w	r3, r3, #31
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d1f0      	bne.n	8000dd4 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000df2:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000df4:	692b      	ldr	r3, [r5, #16]
 8000df6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4620      	mov	r0, r4
 8000dfe:	4798      	blx	r3
 8000e00:	2800      	cmp	r0, #0
 8000e02:	db36      	blt.n	8000e72 <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000e04:	696b      	ldr	r3, [r5, #20]
 8000e06:	aa01      	add	r2, sp, #4
 8000e08:	2100      	movs	r1, #0
 8000e0a:	6828      	ldr	r0, [r5, #0]
 8000e0c:	4798      	blx	r3
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	db32      	blt.n	8000e78 <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000e12:	69ab      	ldr	r3, [r5, #24]
 8000e14:	4798      	blx	r3
 8000e16:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e18:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000e1a:	9b01      	ldr	r3, [sp, #4]
 8000e1c:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000e20:	d017      	beq.n	8000e52 <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000e22:	69ab      	ldr	r3, [r5, #24]
 8000e24:	4798      	blx	r3
 8000e26:	1b00      	subs	r0, r0, r4
 8000e28:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000e2c:	d827      	bhi.n	8000e7e <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000e2e:	696b      	ldr	r3, [r5, #20]
 8000e30:	aa01      	add	r2, sp, #4
 8000e32:	4631      	mov	r1, r6
 8000e34:	6828      	ldr	r0, [r5, #0]
 8000e36:	4798      	blx	r3
 8000e38:	2800      	cmp	r0, #0
 8000e3a:	daee      	bge.n	8000e1a <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e3c:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e40:	e013      	b.n	8000e6a <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e42:	682c      	ldr	r4, [r5, #0]
 8000e44:	2c1f      	cmp	r4, #31
 8000e46:	d902      	bls.n	8000e4e <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e48:	f06f 0702 	mvn.w	r7, #2
 8000e4c:	e00d      	b.n	8000e6a <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000e4e:	b967      	cbnz	r7, 8000e6a <LAN8742_Init+0xbe>
 8000e50:	e7d0      	b.n	8000df4 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000e52:	69ab      	ldr	r3, [r5, #24]
 8000e54:	4798      	blx	r3
 8000e56:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e58:	69ab      	ldr	r3, [r5, #24]
 8000e5a:	4798      	blx	r3
 8000e5c:	1b03      	subs	r3, r0, r4
 8000e5e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e62:	d9f9      	bls.n	8000e58 <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	606b      	str	r3, [r5, #4]
 8000e68:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000e6a:	4638      	mov	r0, r7
 8000e6c:	b002      	add	sp, #8
 8000e6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e72:	f06f 0703 	mvn.w	r7, #3
 8000e76:	e7f8      	b.n	8000e6a <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000e78:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000e7c:	e7f5      	b.n	8000e6a <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e7e:	f06f 0701 	mvn.w	r7, #1
 8000e82:	e7f2      	b.n	8000e6a <LAN8742_Init+0xbe>

08000e84 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e84:	b510      	push	{r4, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	4604      	mov	r4, r0
  uint32_t readval = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e8e:	6943      	ldr	r3, [r0, #20]
 8000e90:	aa01      	add	r2, sp, #4
 8000e92:	2101      	movs	r1, #1
 8000e94:	6800      	ldr	r0, [r0, #0]
 8000e96:	4798      	blx	r3
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	db39      	blt.n	8000f10 <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e9c:	6963      	ldr	r3, [r4, #20]
 8000e9e:	aa01      	add	r2, sp, #4
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	6820      	ldr	r0, [r4, #0]
 8000ea4:	4798      	blx	r3
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	db35      	blt.n	8000f16 <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000eaa:	9b01      	ldr	r3, [sp, #4]
 8000eac:	f013 0f04 	tst.w	r3, #4
 8000eb0:	d034      	beq.n	8000f1c <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000eb2:	6963      	ldr	r3, [r4, #20]
 8000eb4:	aa01      	add	r2, sp, #4
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	6820      	ldr	r0, [r4, #0]
 8000eba:	4798      	blx	r3
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	db30      	blt.n	8000f22 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000ec0:	9b01      	ldr	r3, [sp, #4]
 8000ec2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ec6:	d10d      	bne.n	8000ee4 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000ec8:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000ecc:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000ed0:	d02a      	beq.n	8000f28 <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000ed2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000ed6:	d129      	bne.n	8000f2c <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ed8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000edc:	bf14      	ite	ne
 8000ede:	2004      	movne	r0, #4
 8000ee0:	2005      	moveq	r0, #5
 8000ee2:	e01c      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ee4:	6963      	ldr	r3, [r4, #20]
 8000ee6:	aa01      	add	r2, sp, #4
 8000ee8:	211f      	movs	r1, #31
 8000eea:	6820      	ldr	r0, [r4, #0]
 8000eec:	4798      	blx	r3
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	db1e      	blt.n	8000f30 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ef2:	9b01      	ldr	r3, [sp, #4]
 8000ef4:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ef8:	d01d      	beq.n	8000f36 <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000efa:	f003 031c 	and.w	r3, r3, #28
 8000efe:	2b18      	cmp	r3, #24
 8000f00:	d01b      	beq.n	8000f3a <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f02:	2b08      	cmp	r3, #8
 8000f04:	d01b      	beq.n	8000f3e <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f06:	2b14      	cmp	r3, #20
 8000f08:	bf0c      	ite	eq
 8000f0a:	2004      	moveq	r0, #4
 8000f0c:	2005      	movne	r0, #5
 8000f0e:	e006      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000f10:	f06f 0004 	mvn.w	r0, #4
 8000f14:	e003      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000f16:	f06f 0004 	mvn.w	r0, #4
 8000f1a:	e000      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000f1c:	2001      	movs	r0, #1
    }				
  }
}
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 8000f22:	f06f 0004 	mvn.w	r0, #4
 8000f26:	e7fa      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f28:	2002      	movs	r0, #2
 8000f2a:	e7f8      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	e7f6      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 8000f30:	f06f 0004 	mvn.w	r0, #4
 8000f34:	e7f3      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f36:	2006      	movs	r0, #6
 8000f38:	e7f1      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	e7ef      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f3e:	2003      	movs	r0, #3
 8000f40:	e7ed      	b.n	8000f1e <LAN8742_GetLinkState+0x9a>
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b510      	push	{r4, lr}
 8000f46:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <HAL_InitTick+0x40>)
 8000f4a:	7818      	ldrb	r0, [r3, #0]
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <HAL_InitTick+0x44>)
 8000f56:	6810      	ldr	r0, [r2, #0]
 8000f58:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f5c:	f000 f8ae 	bl	80010bc <HAL_SYSTICK_Config>
 8000f60:	b968      	cbnz	r0, 8000f7e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	2c0f      	cmp	r4, #15
 8000f64:	d901      	bls.n	8000f6a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f66:	2001      	movs	r0, #1
 8000f68:	e00a      	b.n	8000f80 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f72:	f000 f85f 	bl	8001034 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <HAL_InitTick+0x48>)
 8000f78:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000f7e:	2001      	movs	r0, #1
}
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	20000008 	.word	0x20000008

08000f90 <HAL_Init>:
{
 8000f90:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_Init+0x30>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f9a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fa2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000faa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f82f 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f7ff ffc6 	bl	8000f44 <HAL_InitTick>
  HAL_MspInit();
 8000fb8:	f7ff fc38 	bl	800082c <HAL_MspInit>
}
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	bd08      	pop	{r3, pc}
 8000fc0:	40023c00 	.word	0x40023c00

08000fc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_IncTick+0x10>)
 8000fc6:	6811      	ldr	r1, [r2, #0]
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_IncTick+0x14>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	440b      	add	r3, r1
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000650 	.word	0x20000650
 8000fd8:	20000004 	.word	0x20000004

08000fdc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000fdc:	4b01      	ldr	r3, [pc, #4]	; (8000fe4 <HAL_GetTick+0x8>)
 8000fde:	6818      	ldr	r0, [r3, #0]
}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	20000650 	.word	0x20000650

08000fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe8:	b538      	push	{r3, r4, r5, lr}
 8000fea:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000fec:	f7ff fff6 	bl	8000fdc <HAL_GetTick>
 8000ff0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000ff6:	d002      	beq.n	8000ffe <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <HAL_Delay+0x24>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffe:	f7ff ffed 	bl	8000fdc <HAL_GetTick>
 8001002:	1b40      	subs	r0, r0, r5
 8001004:	42a0      	cmp	r0, r4
 8001006:	d3fa      	bcc.n	8000ffe <HAL_Delay+0x16>
  {
  }
}
 8001008:	bd38      	pop	{r3, r4, r5, pc}
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004

08001010 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001012:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001014:	0203      	lsls	r3, r0, #8
 8001016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800101a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800101e:	0412      	lsls	r2, r2, #16
 8001020:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800102c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001034:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <HAL_NVIC_SetPriority+0x64>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103e:	f1c3 0c07 	rsb	ip, r3, #7
 8001042:	f1bc 0f04 	cmp.w	ip, #4
 8001046:	bf28      	it	cs
 8001048:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104c:	f103 0e04 	add.w	lr, r3, #4
 8001050:	f1be 0f06 	cmp.w	lr, #6
 8001054:	bf8c      	ite	hi
 8001056:	3b03      	subhi	r3, #3
 8001058:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105a:	f04f 3eff 	mov.w	lr, #4294967295
 800105e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001062:	ea21 010c 	bic.w	r1, r1, ip
 8001066:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001068:	fa0e f303 	lsl.w	r3, lr, r3
 800106c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001070:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001072:	2800      	cmp	r0, #0
 8001074:	db09      	blt.n	800108a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001076:	0109      	lsls	r1, r1, #4
 8001078:	b2c9      	uxtb	r1, r1
 800107a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800107e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001082:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001086:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	f000 000f 	and.w	r0, r0, #15
 800108e:	0109      	lsls	r1, r1, #4
 8001090:	b2c9      	uxtb	r1, r1
 8001092:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_NVIC_SetPriority+0x68>)
 8001094:	5419      	strb	r1, [r3, r0]
 8001096:	e7f6      	b.n	8001086 <HAL_NVIC_SetPriority+0x52>
 8001098:	e000ed00 	.word	0xe000ed00
 800109c:	e000ed14 	.word	0xe000ed14

080010a0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010a0:	2800      	cmp	r0, #0
 80010a2:	db08      	blt.n	80010b6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a4:	0942      	lsrs	r2, r0, #5
 80010a6:	f000 001f 	and.w	r0, r0, #31
 80010aa:	2301      	movs	r3, #1
 80010ac:	fa03 f000 	lsl.w	r0, r3, r0
 80010b0:	4b01      	ldr	r3, [pc, #4]	; (80010b8 <HAL_NVIC_EnableIRQ+0x18>)
 80010b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100

080010bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010bc:	3801      	subs	r0, #1
 80010be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010c2:	d20b      	bcs.n	80010dc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80010c8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <HAL_SYSTICK_Config+0x24>)
 80010cc:	21f0      	movs	r1, #240	; 0xf0
 80010ce:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d2:	2000      	movs	r0, #0
 80010d4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	2207      	movs	r2, #7
 80010d8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010da:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010dc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80010e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010e8:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 80010ee:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80010f0:	f107 0312 	add.w	r3, r7, #18
 80010f4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80010f8:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 80010fa:	2d00      	cmp	r5, #0
 80010fc:	d035      	beq.n	800116a <ETH_UpdateDescriptor+0x86>
 80010fe:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001100:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001104:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001170 <ETH_UpdateDescriptor+0x8c>
 8001108:	e01a      	b.n	8001140 <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 800110a:	a801      	add	r0, sp, #4
 800110c:	f002 fae4 	bl	80036d8 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001110:	9b01      	ldr	r3, [sp, #4]
 8001112:	b1f3      	cbz	r3, 8001152 <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001114:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001116:	60a3      	str	r3, [r4, #8]
 8001118:	e015      	b.n	8001146 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800111a:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800111e:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001122:	6823      	ldr	r3, [r4, #0]
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800112a:	1c7b      	adds	r3, r7, #1
 800112c:	2b03      	cmp	r3, #3
 800112e:	bf8c      	ite	hi
 8001130:	3f03      	subhi	r7, #3
 8001132:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001134:	f107 0312 	add.w	r3, r7, #18
 8001138:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 800113c:	3d01      	subs	r5, #1
 800113e:	d009      	beq.n	8001154 <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001140:	6a23      	ldr	r3, [r4, #32]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0e1      	beq.n	800110a <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 8001146:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1e6      	bne.n	800111a <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800114c:	f8c4 8004 	str.w	r8, [r4, #4]
 8001150:	e7e5      	b.n	800111e <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 8001152:	b905      	cbnz	r5, 8001156 <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001154:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001156:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8001158:	42ab      	cmp	r3, r5
 800115a:	d006      	beq.n	800116a <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800115c:	6833      	ldr	r3, [r6, #0]
 800115e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001166:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001168:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 800116a:	b003      	add	sp, #12
 800116c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001170:	800045f8 	.word	0x800045f8

08001174 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001178:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800117a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800117e:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001182:	681c      	ldr	r4, [r3, #0]
 8001184:	2c00      	cmp	r4, #0
 8001186:	f2c0 80ad 	blt.w	80012e4 <ETH_Prepare_Tx_Descriptors+0x170>
 800118a:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800118c:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 8001190:	2c00      	cmp	r4, #0
 8001192:	f040 80a9 	bne.w	80012e8 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8001196:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001198:	6825      	ldr	r5, [r4, #0]
 800119a:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800119c:	685e      	ldr	r6, [r3, #4]
 800119e:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 80011a2:	f026 061f 	bic.w	r6, r6, #31
 80011a6:	6865      	ldr	r5, [r4, #4]
 80011a8:	4335      	orrs	r5, r6
 80011aa:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80011ac:	680d      	ldr	r5, [r1, #0]
 80011ae:	f015 0f01 	tst.w	r5, #1
 80011b2:	d005      	beq.n	80011c0 <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80011b4:	681e      	ldr	r6, [r3, #0]
 80011b6:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 80011ba:	694d      	ldr	r5, [r1, #20]
 80011bc:	4335      	orrs	r5, r6
 80011be:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80011c0:	680d      	ldr	r5, [r1, #0]
 80011c2:	f015 0f20 	tst.w	r5, #32
 80011c6:	d005      	beq.n	80011d4 <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80011c8:	681e      	ldr	r6, [r3, #0]
 80011ca:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 80011ce:	690d      	ldr	r5, [r1, #16]
 80011d0:	4335      	orrs	r5, r6
 80011d2:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80011d4:	6809      	ldr	r1, [r1, #0]
 80011d6:	f011 0f04 	tst.w	r1, #4
 80011da:	d003      	beq.n	80011e4 <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80011dc:	6819      	ldr	r1, [r3, #0]
 80011de:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80011e2:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80011e4:	6819      	ldr	r1, [r3, #0]
 80011e6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80011ea:	6019      	str	r1, [r3, #0]
 80011ec:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80011f0:	6819      	ldr	r1, [r3, #0]
 80011f2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80011f6:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80011f8:	68a1      	ldr	r1, [r4, #8]
 80011fa:	2900      	cmp	r1, #0
 80011fc:	d053      	beq.n	80012a6 <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80011fe:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 8001200:	2601      	movs	r6, #1
 8001202:	e02c      	b.n	800125e <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 800120a:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800120c:	1c6b      	adds	r3, r5, #1
 800120e:	2b03      	cmp	r3, #3
 8001210:	bf8c      	ite	hi
 8001212:	3d03      	subhi	r5, #3
 8001214:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001216:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 800121a:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800121e:	6819      	ldr	r1, [r3, #0]
 8001220:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001224:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	2900      	cmp	r1, #0
 800122a:	db24      	blt.n	8001276 <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800122c:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 8001230:	bb09      	cbnz	r1, 8001276 <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001232:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001234:	6821      	ldr	r1, [r4, #0]
 8001236:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001238:	6859      	ldr	r1, [r3, #4]
 800123a:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800123e:	f021 011f 	bic.w	r1, r1, #31
 8001242:	6862      	ldr	r2, [r4, #4]
 8001244:	4311      	orrs	r1, r2
 8001246:	6059      	str	r1, [r3, #4]
 8001248:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800124c:	6819      	ldr	r1, [r3, #0]
 800124e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001252:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 8001254:	f106 0e01 	add.w	lr, r6, #1
 8001258:	68a1      	ldr	r1, [r4, #8]
 800125a:	b331      	cbz	r1, 80012aa <ETH_Prepare_Tx_Descriptors+0x136>
 800125c:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 8001264:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8001266:	f1b8 0f00 	cmp.w	r8, #0
 800126a:	d0cb      	beq.n	8001204 <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001272:	6019      	str	r1, [r3, #0]
 8001274:	e7ca      	b.n	800120c <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001276:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800127a:	2e00      	cmp	r6, #0
 800127c:	d037      	beq.n	80012ee <ETH_Prepare_Tx_Descriptors+0x17a>
 800127e:	2100      	movs	r1, #0
 8001280:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001284:	6813      	ldr	r3, [r2, #0]
 8001286:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800128a:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 800128c:	1c7b      	adds	r3, r7, #1
 800128e:	2b03      	cmp	r3, #3
 8001290:	bf8c      	ite	hi
 8001292:	3f03      	subhi	r7, #3
 8001294:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001296:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 800129a:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 800129c:	3101      	adds	r1, #1
 800129e:	428e      	cmp	r6, r1
 80012a0:	d1ee      	bne.n	8001280 <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 80012a2:	2002      	movs	r0, #2
 80012a4:	e021      	b.n	80012ea <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80012a6:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 80012a8:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 80012aa:	f1b8 0f00 	cmp.w	r8, #0
 80012ae:	d014      	beq.n	80012da <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012b6:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80012be:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80012c0:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 80012c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80012c6:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 80012c8:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80012ca:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80012cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012ce:	3301      	adds	r3, #1
 80012d0:	441e      	add	r6, r3
 80012d2:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80012d4:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80012d6:	2000      	movs	r0, #0
 80012d8:	e007      	b.n	80012ea <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e7e9      	b.n	80012b8 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 80012e4:	2002      	movs	r0, #2
 80012e6:	e000      	b.n	80012ea <ETH_Prepare_Tx_Descriptors+0x176>
 80012e8:	2002      	movs	r0, #2
}
 80012ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 80012ee:	2002      	movs	r0, #2
 80012f0:	e7fb      	b.n	80012ea <ETH_Prepare_Tx_Descriptors+0x176>
	...

080012f4 <ETH_SetMACConfig>:
{
 80012f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012f8:	4605      	mov	r5, r0
 80012fa:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 80012fc:	6801      	ldr	r1, [r0, #0]
 80012fe:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001300:	4e3b      	ldr	r6, [pc, #236]	; (80013f0 <ETH_SetMACConfig+0xfc>)
 8001302:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001304:	7c23      	ldrb	r3, [r4, #16]
 8001306:	2b00      	cmp	r3, #0
 8001308:	bf0c      	ite	eq
 800130a:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 800130e:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001312:	7c63      	ldrb	r3, [r4, #17]
 8001314:	2b00      	cmp	r3, #0
 8001316:	bf0c      	ite	eq
 8001318:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 800131c:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001320:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001324:	68a3      	ldr	r3, [r4, #8]
 8001326:	6962      	ldr	r2, [r4, #20]
 8001328:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800132a:	7fa2      	ldrb	r2, [r4, #30]
 800132c:	2a00      	cmp	r2, #0
 800132e:	bf0c      	ite	eq
 8001330:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8001334:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001336:	f894 901c 	ldrb.w	r9, [r4, #28]
 800133a:	69a2      	ldr	r2, [r4, #24]
 800133c:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800133e:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001340:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001344:	2a00      	cmp	r2, #0
 8001346:	bf0c      	ite	eq
 8001348:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 800134c:	f04f 0a00 	movne.w	sl, #0
 8001350:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001352:	4313      	orrs	r3, r2
 8001354:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001358:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 800135c:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001360:	7be7      	ldrb	r7, [r4, #15]
 8001362:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001366:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 800136a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 800136e:	4333      	orrs	r3, r6
 8001370:	ea43 030e 	orr.w	r3, r3, lr
 8001374:	ea43 030c 	orr.w	r3, r3, ip
 8001378:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800137a:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800137e:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001384:	2001      	movs	r0, #1
 8001386:	f7ff fe2f 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 800138e:	6828      	ldr	r0, [r5, #0]
 8001390:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001392:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 8001396:	0409      	lsls	r1, r1, #16
 8001398:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800139a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800139c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf0c      	ite	eq
 80013a4:	2380      	moveq	r3, #128	; 0x80
 80013a6:	2300      	movne	r3, #0
 80013a8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80013aa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80013ae:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013b0:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 80013b4:	2901      	cmp	r1, #1
 80013b6:	bf0c      	ite	eq
 80013b8:	2108      	moveq	r1, #8
 80013ba:	2100      	movne	r1, #0
 80013bc:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013be:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	bf0c      	ite	eq
 80013c6:	2304      	moveq	r3, #4
 80013c8:	2300      	movne	r3, #0
 80013ca:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80013cc:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 80013d0:	2901      	cmp	r1, #1
 80013d2:	bf0c      	ite	eq
 80013d4:	2102      	moveq	r1, #2
 80013d6:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d8:	4313      	orrs	r3, r2
 80013da:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80013dc:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 80013de:	682b      	ldr	r3, [r5, #0]
 80013e0:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e2:	2001      	movs	r0, #1
 80013e4:	f7ff fe00 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013e8:	682b      	ldr	r3, [r5, #0]
 80013ea:	619c      	str	r4, [r3, #24]
}
 80013ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013f0:	ff20810f 	.word	0xff20810f

080013f4 <ETH_SetDMAConfig>:
{
 80013f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013f6:	4605      	mov	r5, r0
 80013f8:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013fa:	6802      	ldr	r2, [r0, #0]
 80013fc:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001400:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001402:	482c      	ldr	r0, [pc, #176]	; (80014b4 <ETH_SetDMAConfig+0xc0>)
 8001404:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001406:	7b0b      	ldrb	r3, [r1, #12]
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001410:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001412:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001416:	7f4b      	ldrb	r3, [r1, #29]
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001420:	2100      	movne	r1, #0
 8001422:	6963      	ldr	r3, [r4, #20]
 8001424:	6a27      	ldr	r7, [r4, #32]
 8001426:	433b      	orrs	r3, r7
 8001428:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800142c:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001430:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001434:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001438:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800143c:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8001440:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001444:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 8001448:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800144c:	4303      	orrs	r3, r0
 800144e:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001450:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001452:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001456:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145e:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff fdc1 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001466:	682b      	ldr	r3, [r5, #0]
 8001468:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800146c:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800146e:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001470:	68a3      	ldr	r3, [r4, #8]
 8001472:	69a1      	ldr	r1, [r4, #24]
 8001474:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001476:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800147a:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 800147e:	6921      	ldr	r1, [r4, #16]
 8001480:	430b      	orrs	r3, r1
 8001482:	6821      	ldr	r1, [r4, #0]
 8001484:	430b      	orrs	r3, r1
 8001486:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001488:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800148c:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800148e:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001492:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001496:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800149a:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014a4:	2001      	movs	r0, #1
 80014a6:	f7ff fd9f 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014aa:	682b      	ldr	r3, [r5, #0]
 80014ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b0:	601c      	str	r4, [r3, #0]
}
 80014b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014b4:	f8de3f23 	.word	0xf8de3f23

080014b8 <ETH_FlushTransmitFIFO>:
{
 80014b8:	b510      	push	{r4, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80014c2:	6803      	ldr	r3, [r0, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c8:	699a      	ldr	r2, [r3, #24]
 80014ca:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014ce:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 80014d0:	6803      	ldr	r3, [r0, #0]
 80014d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fd84 	bl	8000fe8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	9a01      	ldr	r2, [sp, #4]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	619a      	str	r2, [r3, #24]
}
 80014ea:	b002      	add	sp, #8
 80014ec:	bd10      	pop	{r4, pc}
	...

080014f0 <HAL_ETH_Init>:
  if (heth == NULL)
 80014f0:	2800      	cmp	r0, #0
 80014f2:	f000 8109 	beq.w	8001708 <HAL_ETH_Init+0x218>
{
 80014f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f8:	b0a7      	sub	sp, #156	; 0x9c
 80014fa:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014fc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001500:	2b00      	cmp	r3, #0
 8001502:	d034      	beq.n	800156e <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	9301      	str	r3, [sp, #4]
 8001508:	4b80      	ldr	r3, [pc, #512]	; (800170c <HAL_ETH_Init+0x21c>)
 800150a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800150c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
 8001512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001518:	9301      	str	r3, [sp, #4]
 800151a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800151c:	4b7c      	ldr	r3, [pc, #496]	; (8001710 <HAL_ETH_Init+0x220>)
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001524:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	68a9      	ldr	r1, [r5, #8]
 800152a:	430a      	orrs	r2, r1
 800152c:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 800152e:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	f042 0201 	orr.w	r2, r2, #1
 800153c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800153e:	f7ff fd4d 	bl	8000fdc <HAL_GetTick>
 8001542:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800154a:	681c      	ldr	r4, [r3, #0]
 800154c:	f014 0401 	ands.w	r4, r4, #1
 8001550:	d013      	beq.n	800157a <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001552:	f7ff fd43 	bl	8000fdc <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 800155c:	d9f2      	bls.n	8001544 <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800155e:	2304      	movs	r3, #4
 8001560:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 8001564:	23e0      	movs	r3, #224	; 0xe0
 8001566:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 800156a:	2001      	movs	r0, #1
 800156c:	e0ca      	b.n	8001704 <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 800156e:	2323      	movs	r3, #35	; 0x23
 8001570:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 8001574:	f001 ff2c 	bl	80033d0 <HAL_ETH_MspInit>
 8001578:	e7c4      	b.n	8001504 <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 800157a:	2701      	movs	r7, #1
 800157c:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001580:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001584:	2600      	movs	r6, #0
 8001586:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001588:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800158c:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001590:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001594:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001598:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800159c:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015a0:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80015a2:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80015a6:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015a8:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015ac:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015ae:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015b2:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015ba:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c0:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015c2:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015c6:	a90d      	add	r1, sp, #52	; 0x34
 80015c8:	4628      	mov	r0, r5
 80015ca:	f7ff fe93 	bl	80012f4 <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015ce:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015d2:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015d6:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015da:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015de:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015e0:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015e4:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015e8:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015ea:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80015ee:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80015f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f6:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80015f8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fc:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001604:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001608:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800160a:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800160c:	a902      	add	r1, sp, #8
 800160e:	4628      	mov	r0, r5
 8001610:	f7ff fef0 	bl	80013f4 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001614:	f105 0c18 	add.w	ip, r5, #24
 8001618:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800161a:	4630      	mov	r0, r6
 800161c:	e00a      	b.n	8001634 <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800161e:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8001622:	68ee      	ldr	r6, [r5, #12]
 8001624:	4476      	add	r6, lr
 8001626:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001628:	58d1      	ldr	r1, [r2, r3]
 800162a:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800162e:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001630:	3328      	adds	r3, #40	; 0x28
 8001632:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001634:	68ea      	ldr	r2, [r5, #12]
 8001636:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001638:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800163a:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800163c:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800163e:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001640:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001644:	58d6      	ldr	r6, [r2, r3]
 8001646:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800164a:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800164c:	1e7e      	subs	r6, r7, #1
 800164e:	2e02      	cmp	r6, #2
 8001650:	d9e5      	bls.n	800161e <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001652:	68ee      	ldr	r6, [r5, #12]
 8001654:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001656:	58d1      	ldr	r1, [r2, r3]
 8001658:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800165c:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800165e:	2f03      	cmp	r7, #3
 8001660:	d9e6      	bls.n	8001630 <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	68ea      	ldr	r2, [r5, #12]
 800166a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800166e:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001670:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001674:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001676:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001678:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800167c:	f244 57f8 	movw	r7, #17912	; 0x45f8
 8001680:	e006      	b.n	8001690 <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001682:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8001686:	692a      	ldr	r2, [r5, #16]
 8001688:	4472      	add	r2, lr
 800168a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800168c:	3428      	adds	r4, #40	; 0x28
 800168e:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 8001690:	692a      	ldr	r2, [r5, #16]
 8001692:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001694:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001696:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001698:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800169a:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800169c:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800169e:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016a0:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80016a4:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016ae:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016b2:	1e42      	subs	r2, r0, #1
 80016b4:	2a02      	cmp	r2, #2
 80016b6:	d9e4      	bls.n	8001682 <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016b8:	692a      	ldr	r2, [r5, #16]
 80016ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016bc:	2803      	cmp	r0, #3
 80016be:	d9e5      	bls.n	800168c <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80016c0:	2000      	movs	r0, #0
 80016c2:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80016c4:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80016c6:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80016c8:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80016ca:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	692a      	ldr	r2, [r5, #16]
 80016d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d4:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80016d6:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016d8:	7951      	ldrb	r1, [r2, #5]
 80016da:	7913      	ldrb	r3, [r2, #4]
 80016dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016e0:	490c      	ldr	r1, [pc, #48]	; (8001714 <HAL_ETH_Init+0x224>)
 80016e2:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80016e4:	78d4      	ldrb	r4, [r2, #3]
 80016e6:	7893      	ldrb	r3, [r2, #2]
 80016e8:	041b      	lsls	r3, r3, #16
 80016ea:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80016ee:	7814      	ldrb	r4, [r2, #0]
 80016f0:	4323      	orrs	r3, r4
 80016f2:	7852      	ldrb	r2, [r2, #1]
 80016f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80016f8:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80016fa:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80016fe:	2310      	movs	r3, #16
 8001700:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001704:	b027      	add	sp, #156	; 0x9c
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001708:	2001      	movs	r0, #1
}
 800170a:	4770      	bx	lr
 800170c:	40023800 	.word	0x40023800
 8001710:	40013800 	.word	0x40013800
 8001714:	40028000 	.word	0x40028000

08001718 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001718:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800171c:	2b10      	cmp	r3, #16
 800171e:	d001      	beq.n	8001724 <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 8001720:	2001      	movs	r0, #1
}
 8001722:	4770      	bx	lr
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001728:	2523      	movs	r5, #35	; 0x23
 800172a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800172e:	2304      	movs	r3, #4
 8001730:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001732:	f7ff fcd7 	bl	80010e4 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	6813      	ldr	r3, [r2, #0]
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff fc4f 	bl	8000fe8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800174a:	6823      	ldr	r3, [r4, #0]
 800174c:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800174e:	6822      	ldr	r2, [r4, #0]
 8001750:	6813      	ldr	r3, [r2, #0]
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800175c:	2001      	movs	r0, #1
 800175e:	f7ff fc43 	bl	8000fe8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001766:	4620      	mov	r0, r4
 8001768:	f7ff fea6 	bl	80014b8 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800176c:	6823      	ldr	r3, [r4, #0]
 800176e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001772:	699a      	ldr	r2, [r3, #24]
 8001774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001778:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001780:	699a      	ldr	r2, [r3, #24]
 8001782:	f042 0202 	orr.w	r2, r2, #2
 8001786:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001788:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 800178c:	2000      	movs	r0, #0
}
 800178e:	bd70      	pop	{r4, r5, r6, pc}

08001790 <HAL_ETH_Stop>:
{
 8001790:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001792:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001796:	2b23      	cmp	r3, #35	; 0x23
 8001798:	d001      	beq.n	800179e <HAL_ETH_Stop+0xe>
    return HAL_ERROR;
 800179a:	2001      	movs	r0, #1
}
 800179c:	bd38      	pop	{r3, r4, r5, pc}
 800179e:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80017a0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017a4:	6803      	ldr	r3, [r0, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	699a      	ldr	r2, [r3, #24]
 80017ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017b0:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017b2:	6803      	ldr	r3, [r0, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b8:	699a      	ldr	r2, [r3, #24]
 80017ba:	f022 0202 	bic.w	r2, r2, #2
 80017be:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017c0:	6802      	ldr	r2, [r0, #0]
 80017c2:	6813      	ldr	r3, [r2, #0]
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017ca:	6803      	ldr	r3, [r0, #0]
 80017cc:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ce:	2001      	movs	r0, #1
 80017d0:	f7ff fc0a 	bl	8000fe8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff fe6d 	bl	80014b8 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80017de:	6822      	ldr	r2, [r4, #0]
 80017e0:	6813      	ldr	r3, [r2, #0]
 80017e2:	f023 0308 	bic.w	r3, r3, #8
 80017e6:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017e8:	6823      	ldr	r3, [r4, #0]
 80017ea:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fbfb 	bl	8000fe8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	601d      	str	r5, [r3, #0]
    heth->gState = HAL_ETH_STATE_READY;
 80017f6:	2310      	movs	r3, #16
 80017f8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 80017fc:	2000      	movs	r0, #0
 80017fe:	e7cd      	b.n	800179c <HAL_ETH_Stop+0xc>

08001800 <HAL_ETH_Transmit>:
{
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001804:	b131      	cbz	r1, 8001814 <HAL_ETH_Transmit+0x14>
 8001806:	4615      	mov	r5, r2
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001808:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800180c:	2b23      	cmp	r3, #35	; 0x23
 800180e:	d009      	beq.n	8001824 <HAL_ETH_Transmit+0x24>
    return HAL_ERROR;
 8001810:	2001      	movs	r0, #1
}
 8001812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001814:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001818:	f043 0301 	orr.w	r3, r3, #1
 800181c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001820:	2001      	movs	r0, #1
 8001822:	e7f6      	b.n	8001812 <HAL_ETH_Transmit+0x12>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8001824:	2200      	movs	r2, #0
 8001826:	4620      	mov	r0, r4
 8001828:	f7ff fca4 	bl	8001174 <ETH_Prepare_Tx_Descriptors>
 800182c:	2800      	cmp	r0, #0
 800182e:	d135      	bne.n	800189c <HAL_ETH_Transmit+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001830:	f3bf 8f4f 	dsb	sy
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8001834:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001836:	1d9a      	adds	r2, r3, #6
 8001838:	f854 6022 	ldr.w	r6, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	2a03      	cmp	r2, #3
 8001840:	bf92      	itee	ls
 8001842:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001844:	3b03      	subhi	r3, #3
 8001846:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800184c:	3206      	adds	r2, #6
 800184e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8001852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001856:	605a      	str	r2, [r3, #4]
    tickstart = HAL_GetTick();
 8001858:	f7ff fbc0 	bl	8000fdc <HAL_GetTick>
 800185c:	4607      	mov	r7, r0
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800185e:	6833      	ldr	r3, [r6, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	da30      	bge.n	80018c6 <HAL_ETH_Transmit+0xc6>
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8001864:	6823      	ldr	r3, [r4, #0]
 8001866:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800186a:	6952      	ldr	r2, [r2, #20]
 800186c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001870:	d11c      	bne.n	80018ac <HAL_ETH_Transmit+0xac>
      if (Timeout != HAL_MAX_DELAY)
 8001872:	f1b5 3fff 	cmp.w	r5, #4294967295
 8001876:	d0f2      	beq.n	800185e <HAL_ETH_Transmit+0x5e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001878:	f7ff fbb0 	bl	8000fdc <HAL_GetTick>
 800187c:	1bc0      	subs	r0, r0, r7
 800187e:	42a8      	cmp	r0, r5
 8001880:	d801      	bhi.n	8001886 <HAL_ETH_Transmit+0x86>
 8001882:	2d00      	cmp	r5, #0
 8001884:	d1eb      	bne.n	800185e <HAL_ETH_Transmit+0x5e>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8001886:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001892:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001896:	6033      	str	r3, [r6, #0]
          return HAL_ERROR;
 8001898:	2001      	movs	r0, #1
 800189a:	e7ba      	b.n	8001812 <HAL_ETH_Transmit+0x12>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800189c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80018a0:	f043 0302 	orr.w	r3, r3, #2
 80018a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 80018a8:	2001      	movs	r0, #1
 80018aa:	e7b2      	b.n	8001812 <HAL_ETH_Transmit+0x12>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80018ac:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80018b0:	f042 0208 	orr.w	r2, r2, #8
 80018b4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80018b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7a5      	b.n	8001812 <HAL_ETH_Transmit+0x12>
    return HAL_OK;
 80018c6:	2000      	movs	r0, #0
 80018c8:	e7a3      	b.n	8001812 <HAL_ETH_Transmit+0x12>

080018ca <HAL_ETH_ReadData>:
{
 80018ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018ce:	b085      	sub	sp, #20
 80018d0:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 80018d2:	9103      	str	r1, [sp, #12]
 80018d4:	b1e1      	cbz	r1, 8001910 <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018d6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80018da:	2b23      	cmp	r3, #35	; 0x23
 80018dc:	d17e      	bne.n	80019dc <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 80018de:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018e0:	f107 0312 	add.w	r3, r7, #18
 80018e4:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018e8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80018ea:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018ee:	6822      	ldr	r2, [r4, #0]
 80018f0:	2a00      	cmp	r2, #0
 80018f2:	f2c0 8083 	blt.w	80019fc <HAL_ETH_ReadData+0x132>
 80018f6:	f1bb 0f00 	cmp.w	fp, #0
 80018fa:	d066      	beq.n	80019ca <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 80018fc:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001900:	f100 0380 	add.w	r3, r0, #128	; 0x80
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 800190a:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 800190c:	46c1      	mov	r9, r8
 800190e:	e037      	b.n	8001980 <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001910:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800191c:	2001      	movs	r0, #1
 800191e:	e05e      	b.n	80019de <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 8001926:	bf1c      	itt	ne
 8001928:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800192c:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001930:	6823      	ldr	r3, [r4, #0]
 8001932:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001936:	d134      	bne.n	80019a2 <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 8001938:	696e      	ldr	r6, [r5, #20]
 800193a:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800193c:	68a2      	ldr	r2, [r4, #8]
 800193e:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001940:	b2b3      	uxth	r3, r6
 8001942:	9901      	ldr	r1, [sp, #4]
 8001944:	9802      	ldr	r0, [sp, #8]
 8001946:	f001 feed 	bl	8003724 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 800194a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800194c:	3301      	adds	r3, #1
 800194e:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001950:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001952:	4433      	add	r3, r6
 8001954:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001956:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	2b03      	cmp	r3, #3
 800195e:	bf8c      	ite	hi
 8001960:	3f03      	subhi	r7, #3
 8001962:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001964:	f107 0312 	add.w	r3, r7, #18
 8001968:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 800196c:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db1f      	blt.n	80019b6 <HAL_ETH_ReadData+0xec>
 8001976:	45c3      	cmp	fp, r8
 8001978:	d01c      	beq.n	80019b4 <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 800197a:	f1ba 0f00 	cmp.w	sl, #0
 800197e:	d131      	bne.n	80019e4 <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001986:	d003      	beq.n	8001990 <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001988:	69a3      	ldr	r3, [r4, #24]
 800198a:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800198c:	69e3      	ldr	r3, [r4, #28]
 800198e:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001996:	d1c3      	bne.n	8001920 <HAL_ETH_ReadData+0x56>
 8001998:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1c0      	bne.n	8001920 <HAL_ETH_ReadData+0x56>
 800199e:	46ca      	mov	sl, r9
 80019a0:	e7db      	b.n	800195a <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80019a2:	6826      	ldr	r6, [r4, #0]
 80019a4:	f3c6 460d 	ubfx	r6, r6, #16, #14
 80019a8:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80019aa:	6823      	ldr	r3, [r4, #0]
 80019ac:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 80019ae:	f04f 0a01 	mov.w	sl, #1
 80019b2:	e7c3      	b.n	800193c <HAL_ETH_ReadData+0x72>
    desccnt++;
 80019b4:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019b6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80019b8:	4443      	add	r3, r8
 80019ba:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019bc:	b93b      	cbnz	r3, 80019ce <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80019be:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 80019c2:	f1ba 0f00 	cmp.w	sl, #0
 80019c6:	d00a      	beq.n	80019de <HAL_ETH_ReadData+0x114>
 80019c8:	e012      	b.n	80019f0 <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 80019ca:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 80019ce:	4628      	mov	r0, r5
 80019d0:	f7ff fb88 	bl	80010e4 <ETH_UpdateDescriptor>
 80019d4:	e7f3      	b.n	80019be <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 80019d6:	f04f 0a00 	mov.w	sl, #0
 80019da:	e7f8      	b.n	80019ce <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 80019dc:	2001      	movs	r0, #1
}
 80019de:	b005      	add	sp, #20
 80019e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019e4:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80019e6:	4443      	add	r3, r8
 80019e8:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80019ee:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 80019f0:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80019f2:	9a03      	ldr	r2, [sp, #12]
 80019f4:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 80019f6:	2000      	movs	r0, #0
 80019f8:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 80019fa:	e7f0      	b.n	80019de <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ea      	bne.n	80019d6 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 8001a00:	2001      	movs	r0, #1
 8001a02:	e7ec      	b.n	80019de <HAL_ETH_ReadData+0x114>

08001a04 <HAL_ETH_TxCpltCallback>:
}
 8001a04:	4770      	bx	lr

08001a06 <HAL_ETH_RxCpltCallback>:
}
 8001a06:	4770      	bx	lr

08001a08 <HAL_ETH_ErrorCallback>:
}
 8001a08:	4770      	bx	lr

08001a0a <HAL_ETH_PMTCallback>:
}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_ETH_WakeUpCallback>:
}
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ETH_IRQHandler>:
{
 8001a10:	b510      	push	{r4, lr}
 8001a12:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a14:	6803      	ldr	r3, [r0, #0]
 8001a16:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a1a:	6952      	ldr	r2, [r2, #20]
 8001a1c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a20:	d005      	beq.n	8001a2e <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a22:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a26:	69d2      	ldr	r2, [r2, #28]
 8001a28:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a2c:	d147      	bne.n	8001abe <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a2e:	6823      	ldr	r3, [r4, #0]
 8001a30:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a34:	6952      	ldr	r2, [r2, #20]
 8001a36:	f012 0f01 	tst.w	r2, #1
 8001a3a:	d005      	beq.n	8001a48 <HAL_ETH_IRQHandler+0x38>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a3c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a40:	69d2      	ldr	r2, [r2, #28]
 8001a42:	f012 0f01 	tst.w	r2, #1
 8001a46:	d141      	bne.n	8001acc <HAL_ETH_IRQHandler+0xbc>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a4e:	6952      	ldr	r2, [r2, #20]
 8001a50:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a54:	d028      	beq.n	8001aa8 <HAL_ETH_IRQHandler+0x98>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a56:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a5a:	69d2      	ldr	r2, [r2, #28]
 8001a5c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a60:	d022      	beq.n	8001aa8 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a62:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001a66:	f042 0208 	orr.w	r2, r2, #8
 8001a6a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a6e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a72:	6952      	ldr	r2, [r2, #20]
 8001a74:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001a78:	d031      	beq.n	8001ade <HAL_ETH_IRQHandler+0xce>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001a84:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001a88:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001a8c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a90:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001a94:	69da      	ldr	r2, [r3, #28]
 8001a96:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001a9a:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001a9c:	23e0      	movs	r3, #224	; 0xe0
 8001a9e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f7ff ffb0 	bl	8001a08 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001aa8:	6823      	ldr	r3, [r4, #0]
 8001aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aac:	f012 0f08 	tst.w	r2, #8
 8001ab0:	d11f      	bne.n	8001af2 <HAL_ETH_IRQHandler+0xe2>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_ETH_IRQHandler+0x10c>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001aba:	d126      	bne.n	8001b0a <HAL_ETH_IRQHandler+0xfa>
}
 8001abc:	bd10      	pop	{r4, pc}
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_ETH_IRQHandler+0x110>)
 8001ac4:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001ac6:	f7ff ff9e 	bl	8001a06 <HAL_ETH_RxCpltCallback>
 8001aca:	e7b0      	b.n	8001a2e <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad0:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001ad4:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	f7ff ff94 	bl	8001a04 <HAL_ETH_TxCpltCallback>
 8001adc:	e7b4      	b.n	8001a48 <HAL_ETH_IRQHandler+0x38>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	f248 6180 	movw	r1, #34432	; 0x8680
 8001ae8:	400a      	ands	r2, r1
 8001aea:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001aee:	6159      	str	r1, [r3, #20]
 8001af0:	e7d7      	b.n	8001aa2 <HAL_ETH_IRQHandler+0x92>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001af8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001afc:	4620      	mov	r0, r4
 8001afe:	f7ff ff84 	bl	8001a0a <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b02:	2300      	movs	r3, #0
 8001b04:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001b08:	e7d3      	b.n	8001ab2 <HAL_ETH_IRQHandler+0xa2>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_ETH_IRQHandler+0x10c>)
 8001b0c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b10:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001b12:	4620      	mov	r0, r4
 8001b14:	f7ff ff7a 	bl	8001a0c <HAL_ETH_WakeUpCallback>
}
 8001b18:	e7d0      	b.n	8001abc <HAL_ETH_IRQHandler+0xac>
 8001b1a:	bf00      	nop
 8001b1c:	40013c00 	.word	0x40013c00
 8001b20:	00010040 	.word	0x00010040

08001b24 <HAL_ETH_ReadPHYRegister>:
{
 8001b24:	b570      	push	{r4, r5, r6, lr}
 8001b26:	4604      	mov	r4, r0
 8001b28:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b2a:	6805      	ldr	r5, [r0, #0]
 8001b2c:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b2e:	0192      	lsls	r2, r2, #6
 8001b30:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b34:	f000 021c 	and.w	r2, r0, #28
 8001b38:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b3a:	02cb      	lsls	r3, r1, #11
 8001b3c:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b3e:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b40:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001b44:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001b46:	f7ff fa49 	bl	8000fdc <HAL_GetTick>
 8001b4a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b4c:	f7ff fa46 	bl	8000fdc <HAL_GetTick>
 8001b50:	1b40      	subs	r0, r0, r5
 8001b52:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b56:	d209      	bcs.n	8001b6c <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b5c:	f011 0f01 	tst.w	r1, #1
 8001b60:	d1f4      	bne.n	8001b4c <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b62:	6953      	ldr	r3, [r2, #20]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001b68:	2000      	movs	r0, #0
}
 8001b6a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	e7fc      	b.n	8001b6a <HAL_ETH_ReadPHYRegister+0x46>

08001b70 <HAL_ETH_WritePHYRegister>:
{
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b74:	6805      	ldr	r5, [r0, #0]
 8001b76:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b78:	0192      	lsls	r2, r2, #6
 8001b7a:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b7e:	f000 001c 	and.w	r0, r0, #28
 8001b82:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b84:	02ca      	lsls	r2, r1, #11
 8001b86:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b88:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b8a:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001b96:	f7ff fa21 	bl	8000fdc <HAL_GetTick>
 8001b9a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b9c:	f7ff fa1e 	bl	8000fdc <HAL_GetTick>
 8001ba0:	1b40      	subs	r0, r0, r5
 8001ba2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001ba6:	d206      	bcs.n	8001bb6 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ba8:	6823      	ldr	r3, [r4, #0]
 8001baa:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bac:	f013 0f01 	tst.w	r3, #1
 8001bb0:	d1f4      	bne.n	8001b9c <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001bb6:	2001      	movs	r0, #1
}
 8001bb8:	bd38      	pop	{r3, r4, r5, pc}

08001bba <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001bba:	2900      	cmp	r1, #0
 8001bbc:	d06f      	beq.n	8001c9e <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bbe:	6802      	ldr	r2, [r0, #0]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001bc6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bca:	6802      	ldr	r2, [r0, #0]
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001bd2:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bd4:	6802      	ldr	r2, [r0, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001bdc:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001be0:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001be4:	6802      	ldr	r2, [r0, #0]
 8001be6:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001be8:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bec:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001bf6:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001bfa:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001bfc:	6802      	ldr	r2, [r0, #0]
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001c04:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c06:	6802      	ldr	r2, [r0, #0]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c0e:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c10:	6802      	ldr	r2, [r0, #0]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c18:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c1a:	6802      	ldr	r2, [r0, #0]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001c22:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001c26:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c28:	6802      	ldr	r2, [r0, #0]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001c30:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001c34:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c3e:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c48:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c4a:	6802      	ldr	r2, [r0, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001c52:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c54:	6802      	ldr	r2, [r0, #0]
 8001c56:	6992      	ldr	r2, [r2, #24]
 8001c58:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c5c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c60:	6802      	ldr	r2, [r0, #0]
 8001c62:	6992      	ldr	r2, [r2, #24]
 8001c64:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001c68:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c6c:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001c70:	6802      	ldr	r2, [r0, #0]
 8001c72:	6992      	ldr	r2, [r2, #24]
 8001c74:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001c78:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	6992      	ldr	r2, [r2, #24]
 8001c7e:	0c12      	lsrs	r2, r2, #16
 8001c80:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001c82:	6802      	ldr	r2, [r0, #0]
 8001c84:	6992      	ldr	r2, [r2, #24]
 8001c86:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001c8a:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c8e:	6802      	ldr	r2, [r0, #0]
 8001c90:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001c92:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001c96:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001c9a:	2000      	movs	r0, #0
 8001c9c:	4770      	bx	lr
    return HAL_ERROR;
 8001c9e:	2001      	movs	r0, #1
}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001ca2:	b151      	cbz	r1, 8001cba <HAL_ETH_SetMACConfig+0x18>
{
 8001ca4:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001ca6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d001      	beq.n	8001cb2 <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001cae:	2001      	movs	r0, #1
}
 8001cb0:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001cb2:	f7ff fb1f 	bl	80012f4 <ETH_SetMACConfig>
    return HAL_OK;
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e7fa      	b.n	8001cb0 <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
}
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_ETH_SetMDIOClockRange>:
{
 8001cc0:	b538      	push	{r3, r4, r5, lr}
 8001cc2:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001cc4:	6803      	ldr	r3, [r0, #0]
 8001cc6:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cc8:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001ccc:	f000 fcfc 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001cd0:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001cd2:	4403      	add	r3, r0
 8001cd4:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d204      	bcs.n	8001ce4 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001cda:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001cde:	682b      	ldr	r3, [r5, #0]
 8001ce0:	611c      	str	r4, [r3, #16]
}
 8001ce2:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001ce4:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001ce6:	4403      	add	r3, r0
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	; (8001d20 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d802      	bhi.n	8001cf4 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001cee:	f044 040c 	orr.w	r4, r4, #12
 8001cf2:	e7f4      	b.n	8001cde <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001cf6:	4403      	add	r3, r0
 8001cf8:	4a0b      	ldr	r2, [pc, #44]	; (8001d28 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d3ef      	bcc.n	8001cde <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001d00:	4403      	add	r3, r0
 8001d02:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001d04:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d06:	bf94      	ite	ls
 8001d08:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d0c:	f044 0410 	orrhi.w	r4, r4, #16
 8001d10:	e7e5      	b.n	8001cde <HAL_ETH_SetMDIOClockRange+0x1e>
 8001d12:	bf00      	nop
 8001d14:	feced300 	.word	0xfeced300
 8001d18:	00e4e1c0 	.word	0x00e4e1c0
 8001d1c:	fde9f140 	.word	0xfde9f140
 8001d20:	017d783f 	.word	0x017d783f
 8001d24:	fc6c7900 	.word	0xfc6c7900
 8001d28:	02625a00 	.word	0x02625a00
 8001d2c:	fa0a1f00 	.word	0xfa0a1f00
 8001d30:	02faf07f 	.word	0x02faf07f

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d3c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	4d82      	ldr	r5, [pc, #520]	; (8001f48 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d40:	4c82      	ldr	r4, [pc, #520]	; (8001f4c <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d42:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001f54 <HAL_GPIO_Init+0x220>
 8001d46:	e04d      	b.n	8001de4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001d48:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d4a:	f04f 0903 	mov.w	r9, #3
 8001d4e:	fa09 f902 	lsl.w	r9, r9, r2
 8001d52:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d56:	68cf      	ldr	r7, [r1, #12]
 8001d58:	4097      	lsls	r7, r2
 8001d5a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001d5e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d60:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d62:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d66:	684f      	ldr	r7, [r1, #4]
 8001d68:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001d6c:	409f      	lsls	r7, r3
 8001d6e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d72:	6047      	str	r7, [r0, #4]
 8001d74:	e046      	b.n	8001e04 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d76:	f04f 0e00 	mov.w	lr, #0
 8001d7a:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001d7e:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d82:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001d86:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8c:	684e      	ldr	r6, [r1, #4]
 8001d8e:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001d92:	bf0c      	ite	eq
 8001d94:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d98:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001d9c:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001d9e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da0:	684e      	ldr	r6, [r1, #4]
 8001da2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001da6:	bf0c      	ite	eq
 8001da8:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dac:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001db0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001db2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001db4:	684e      	ldr	r6, [r1, #4]
 8001db6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001dba:	bf0c      	ite	eq
 8001dbc:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dc0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001dc4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc8:	684e      	ldr	r6, [r1, #4]
 8001dca:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001dce:	bf0c      	ite	eq
 8001dd0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dd4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001dd8:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dda:	3301      	adds	r3, #1
 8001ddc:	3202      	adds	r2, #2
 8001dde:	2b10      	cmp	r3, #16
 8001de0:	f000 80af 	beq.w	8001f42 <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001de4:	f04f 0e01 	mov.w	lr, #1
 8001de8:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dec:	680f      	ldr	r7, [r1, #0]
 8001dee:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001df2:	ea3e 0607 	bics.w	r6, lr, r7
 8001df6:	d1f0      	bne.n	8001dda <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df8:	684f      	ldr	r7, [r1, #4]
 8001dfa:	f007 0703 	and.w	r7, r7, #3
 8001dfe:	3f01      	subs	r7, #1
 8001e00:	2f01      	cmp	r7, #1
 8001e02:	d9a1      	bls.n	8001d48 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e04:	684f      	ldr	r7, [r1, #4]
 8001e06:	f007 0703 	and.w	r7, r7, #3
 8001e0a:	2f03      	cmp	r7, #3
 8001e0c:	d027      	beq.n	8001e5e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001e0e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e10:	f04f 0e03 	mov.w	lr, #3
 8001e14:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e18:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	688f      	ldr	r7, [r1, #8]
 8001e1e:	4097      	lsls	r7, r2
 8001e20:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001e24:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e26:	684f      	ldr	r7, [r1, #4]
 8001e28:	f007 0703 	and.w	r7, r7, #3
 8001e2c:	2f02      	cmp	r7, #2
 8001e2e:	d116      	bne.n	8001e5e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001e30:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001e34:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001e38:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3c:	f003 0907 	and.w	r9, r3, #7
 8001e40:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e44:	f04f 0a0f 	mov.w	sl, #15
 8001e48:	fa0a fa09 	lsl.w	sl, sl, r9
 8001e4c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e50:	690f      	ldr	r7, [r1, #16]
 8001e52:	fa07 f709 	lsl.w	r7, r7, r9
 8001e56:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001e5a:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001e5e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e60:	f04f 0e03 	mov.w	lr, #3
 8001e64:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e68:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6c:	684f      	ldr	r7, [r1, #4]
 8001e6e:	f007 0703 	and.w	r7, r7, #3
 8001e72:	4097      	lsls	r7, r2
 8001e74:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001e78:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7a:	684f      	ldr	r7, [r1, #4]
 8001e7c:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001e80:	d0ab      	beq.n	8001dda <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e82:	2700      	movs	r7, #0
 8001e84:	9701      	str	r7, [sp, #4]
 8001e86:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e88:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001e8c:	646f      	str	r7, [r5, #68]	; 0x44
 8001e8e:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001e90:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001e94:	9701      	str	r7, [sp, #4]
 8001e96:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e98:	f023 0703 	bic.w	r7, r3, #3
 8001e9c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ea0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001ea4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea8:	f003 0e03 	and.w	lr, r3, #3
 8001eac:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001eb0:	f04f 0e0f 	mov.w	lr, #15
 8001eb4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001eb8:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ebc:	4e24      	ldr	r6, [pc, #144]	; (8001f50 <HAL_GPIO_Init+0x21c>)
 8001ebe:	42b0      	cmp	r0, r6
 8001ec0:	f43f af59 	beq.w	8001d76 <HAL_GPIO_Init+0x42>
 8001ec4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ec8:	42b0      	cmp	r0, r6
 8001eca:	d022      	beq.n	8001f12 <HAL_GPIO_Init+0x1de>
 8001ecc:	4540      	cmp	r0, r8
 8001ece:	d023      	beq.n	8001f18 <HAL_GPIO_Init+0x1e4>
 8001ed0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001ed4:	42b0      	cmp	r0, r6
 8001ed6:	d022      	beq.n	8001f1e <HAL_GPIO_Init+0x1ea>
 8001ed8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001edc:	42b0      	cmp	r0, r6
 8001ede:	d021      	beq.n	8001f24 <HAL_GPIO_Init+0x1f0>
 8001ee0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001ee4:	42b0      	cmp	r0, r6
 8001ee6:	d020      	beq.n	8001f2a <HAL_GPIO_Init+0x1f6>
 8001ee8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001eec:	42b0      	cmp	r0, r6
 8001eee:	d01f      	beq.n	8001f30 <HAL_GPIO_Init+0x1fc>
 8001ef0:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001f58 <HAL_GPIO_Init+0x224>
 8001ef4:	4570      	cmp	r0, lr
 8001ef6:	d01e      	beq.n	8001f36 <HAL_GPIO_Init+0x202>
 8001ef8:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001efc:	4570      	cmp	r0, lr
 8001efe:	d01d      	beq.n	8001f3c <HAL_GPIO_Init+0x208>
 8001f00:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001f04:	4570      	cmp	r0, lr
 8001f06:	bf0c      	ite	eq
 8001f08:	f04f 0e09 	moveq.w	lr, #9
 8001f0c:	f04f 0e0a 	movne.w	lr, #10
 8001f10:	e733      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f12:	f04f 0e01 	mov.w	lr, #1
 8001f16:	e730      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f18:	f04f 0e02 	mov.w	lr, #2
 8001f1c:	e72d      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f1e:	f04f 0e03 	mov.w	lr, #3
 8001f22:	e72a      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f24:	f04f 0e04 	mov.w	lr, #4
 8001f28:	e727      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f2a:	f04f 0e05 	mov.w	lr, #5
 8001f2e:	e724      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f30:	f04f 0e06 	mov.w	lr, #6
 8001f34:	e721      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f36:	f04f 0e07 	mov.w	lr, #7
 8001f3a:	e71e      	b.n	8001d7a <HAL_GPIO_Init+0x46>
 8001f3c:	f04f 0e08 	mov.w	lr, #8
 8001f40:	e71b      	b.n	8001d7a <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001f42:	b003      	add	sp, #12
 8001f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40013c00 	.word	0x40013c00
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40020800 	.word	0x40020800
 8001f58:	40021c00 	.word	0x40021c00

08001f5c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	b10a      	cbz	r2, 8001f62 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5e:	6181      	str	r1, [r0, #24]
 8001f60:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	0409      	lsls	r1, r1, #16
 8001f64:	6181      	str	r1, [r0, #24]
  }
}
 8001f66:	4770      	bx	lr

08001f68 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f6c:	2800      	cmp	r0, #0
 8001f6e:	f000 8090 	beq.w	8002092 <HAL_PCD_Init+0x12a>
 8001f72:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f74:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f76:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001f7a:	b33b      	cbz	r3, 8001fcc <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f84:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001f88:	bf04      	itt	eq
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f8e:	6828      	ldr	r0, [r5, #0]
 8001f90:	f000 ff9d 	bl	8002ece <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f94:	462c      	mov	r4, r5
 8001f96:	f854 6b10 	ldr.w	r6, [r4], #16
 8001f9a:	46ec      	mov	ip, sp
 8001f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fac:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fb0:	1d2b      	adds	r3, r5, #4
 8001fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f000 ff45 	bl	8002e44 <USB_CoreInit>
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b158      	cbz	r0, 8001fd6 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fc4:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	b00a      	add	sp, #40	; 0x28
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001fcc:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001fd0:	f7fe fca0 	bl	8000914 <HAL_PCD_MspInit>
 8001fd4:	e7d2      	b.n	8001f7c <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	6828      	ldr	r0, [r5, #0]
 8001fda:	f000 ff7e 	bl	8002eda <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fde:	6868      	ldr	r0, [r5, #4]
 8001fe0:	b398      	cbz	r0, 800204a <HAL_PCD_Init+0xe2>
 8001fe2:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001fe4:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fe8:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001fea:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001fee:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001ff2:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001ff6:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffa:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ffe:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8002002:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002004:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002006:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800200a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800200e:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	3301      	adds	r3, #1
 8002012:	b2db      	uxtb	r3, r3
 8002014:	4283      	cmp	r3, r0
 8002016:	d3e8      	bcc.n	8001fea <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8002018:	2200      	movs	r2, #0
 800201a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800201e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002022:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8002026:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800202a:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 800202e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002032:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002036:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800203a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800203e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002042:	3401      	adds	r4, #1
 8002044:	b2e4      	uxtb	r4, r4
 8002046:	4284      	cmp	r4, r0
 8002048:	d3e7      	bcc.n	800201a <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204a:	462c      	mov	r4, r5
 800204c:	f854 6b10 	ldr.w	r6, [r4], #16
 8002050:	46ec      	mov	ip, sp
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800205e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002062:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002066:	1d2b      	adds	r3, r5, #4
 8002068:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206a:	4630      	mov	r0, r6
 800206c:	f000 ffbc 	bl	8002fe8 <USB_DevInit>
 8002070:	4604      	mov	r4, r0
 8002072:	b120      	cbz	r0, 800207e <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002074:	2302      	movs	r3, #2
 8002076:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 800207a:	2401      	movs	r4, #1
 800207c:	e7a3      	b.n	8001fc6 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002084:	2301      	movs	r3, #1
 8002086:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800208a:	6828      	ldr	r0, [r5, #0]
 800208c:	f001 f878 	bl	8003180 <USB_DevDisconnect>
  return HAL_OK;
 8002090:	e799      	b.n	8001fc6 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8002092:	2401      	movs	r4, #1
 8002094:	e797      	b.n	8001fc6 <HAL_PCD_Init+0x5e>
	...

08002098 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002098:	2800      	cmp	r0, #0
 800209a:	f000 81e1 	beq.w	8002460 <HAL_RCC_OscConfig+0x3c8>
{
 800209e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	f013 0f01 	tst.w	r3, #1
 80020ac:	d03b      	beq.n	8002126 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020ae:	4b9f      	ldr	r3, [pc, #636]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d02c      	beq.n	8002114 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ba:	4b9c      	ldr	r3, [pc, #624]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d021      	beq.n	800210a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020c6:	6863      	ldr	r3, [r4, #4]
 80020c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020cc:	d04f      	beq.n	800216e <HAL_RCC_OscConfig+0xd6>
 80020ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d2:	d052      	beq.n	800217a <HAL_RCC_OscConfig+0xe2>
 80020d4:	4b95      	ldr	r3, [pc, #596]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020e6:	6863      	ldr	r3, [r4, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d050      	beq.n	800218e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ec:	f7fe ff76 	bl	8000fdc <HAL_GetTick>
 80020f0:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f2:	4e8e      	ldr	r6, [pc, #568]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80020f4:	6833      	ldr	r3, [r6, #0]
 80020f6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020fa:	d114      	bne.n	8002126 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020fc:	f7fe ff6e 	bl	8000fdc <HAL_GetTick>
 8002100:	1b40      	subs	r0, r0, r5
 8002102:	2864      	cmp	r0, #100	; 0x64
 8002104:	d9f6      	bls.n	80020f4 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8002106:	2003      	movs	r0, #3
 8002108:	e1b1      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800210a:	4b88      	ldr	r3, [pc, #544]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002112:	d0d8      	beq.n	80020c6 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002114:	4b85      	ldr	r3, [pc, #532]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800211c:	d003      	beq.n	8002126 <HAL_RCC_OscConfig+0x8e>
 800211e:	6863      	ldr	r3, [r4, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 819f 	beq.w	8002464 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	f013 0f02 	tst.w	r3, #2
 800212c:	d054      	beq.n	80021d8 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800212e:	4b7f      	ldr	r3, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f013 0f0c 	tst.w	r3, #12
 8002136:	d03e      	beq.n	80021b6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002138:	4b7c      	ldr	r3, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002140:	2b08      	cmp	r3, #8
 8002142:	d033      	beq.n	80021ac <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002144:	68e3      	ldr	r3, [r4, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d068      	beq.n	800221c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800214a:	4b79      	ldr	r3, [pc, #484]	; (8002330 <HAL_RCC_OscConfig+0x298>)
 800214c:	2201      	movs	r2, #1
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002150:	f7fe ff44 	bl	8000fdc <HAL_GetTick>
 8002154:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002156:	4e75      	ldr	r6, [pc, #468]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002158:	6833      	ldr	r3, [r6, #0]
 800215a:	f013 0f02 	tst.w	r3, #2
 800215e:	d154      	bne.n	800220a <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002160:	f7fe ff3c 	bl	8000fdc <HAL_GetTick>
 8002164:	1b40      	subs	r0, r0, r5
 8002166:	2802      	cmp	r0, #2
 8002168:	d9f6      	bls.n	8002158 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800216a:	2003      	movs	r0, #3
 800216c:	e17f      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800216e:	4a6f      	ldr	r2, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e7b5      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e>
 800217a:	4b6c      	ldr	r3, [pc, #432]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e7ab      	b.n	80020e6 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 800218e:	f7fe ff25 	bl	8000fdc <HAL_GetTick>
 8002192:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002194:	4e65      	ldr	r6, [pc, #404]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002196:	6833      	ldr	r3, [r6, #0]
 8002198:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800219c:	d0c3      	beq.n	8002126 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800219e:	f7fe ff1d 	bl	8000fdc <HAL_GetTick>
 80021a2:	1b40      	subs	r0, r0, r5
 80021a4:	2864      	cmp	r0, #100	; 0x64
 80021a6:	d9f6      	bls.n	8002196 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80021a8:	2003      	movs	r0, #3
 80021aa:	e160      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ac:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80021b4:	d1c6      	bne.n	8002144 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f013 0f02 	tst.w	r3, #2
 80021be:	d003      	beq.n	80021c8 <HAL_RCC_OscConfig+0x130>
 80021c0:	68e3      	ldr	r3, [r4, #12]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	f040 8150 	bne.w	8002468 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4a58      	ldr	r2, [pc, #352]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80021ca:	6813      	ldr	r3, [r2, #0]
 80021cc:	6921      	ldr	r1, [r4, #16]
 80021ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80021d6:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d8:	6823      	ldr	r3, [r4, #0]
 80021da:	f013 0f08 	tst.w	r3, #8
 80021de:	d042      	beq.n	8002266 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021e0:	6963      	ldr	r3, [r4, #20]
 80021e2:	b36b      	cbz	r3, 8002240 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e4:	4b52      	ldr	r3, [pc, #328]	; (8002330 <HAL_RCC_OscConfig+0x298>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7fe fef6 	bl	8000fdc <HAL_GetTick>
 80021f0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f2:	4e4e      	ldr	r6, [pc, #312]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80021f4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80021f6:	f013 0f02 	tst.w	r3, #2
 80021fa:	d134      	bne.n	8002266 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021fc:	f7fe feee 	bl	8000fdc <HAL_GetTick>
 8002200:	1b40      	subs	r0, r0, r5
 8002202:	2802      	cmp	r0, #2
 8002204:	d9f6      	bls.n	80021f4 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8002206:	2003      	movs	r0, #3
 8002208:	e131      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4a48      	ldr	r2, [pc, #288]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800220c:	6813      	ldr	r3, [r2, #0]
 800220e:	6921      	ldr	r1, [r4, #16]
 8002210:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002214:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e7dd      	b.n	80021d8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800221c:	4b44      	ldr	r3, [pc, #272]	; (8002330 <HAL_RCC_OscConfig+0x298>)
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002222:	f7fe fedb 	bl	8000fdc <HAL_GetTick>
 8002226:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002228:	4e40      	ldr	r6, [pc, #256]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800222a:	6833      	ldr	r3, [r6, #0]
 800222c:	f013 0f02 	tst.w	r3, #2
 8002230:	d0d2      	beq.n	80021d8 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002232:	f7fe fed3 	bl	8000fdc <HAL_GetTick>
 8002236:	1b40      	subs	r0, r0, r5
 8002238:	2802      	cmp	r0, #2
 800223a:	d9f6      	bls.n	800222a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	e116      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_RCC_OscConfig+0x298>)
 8002242:	2200      	movs	r2, #0
 8002244:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002248:	f7fe fec8 	bl	8000fdc <HAL_GetTick>
 800224c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800224e:	4e37      	ldr	r6, [pc, #220]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002250:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002252:	f013 0f02 	tst.w	r3, #2
 8002256:	d006      	beq.n	8002266 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002258:	f7fe fec0 	bl	8000fdc <HAL_GetTick>
 800225c:	1b40      	subs	r0, r0, r5
 800225e:	2802      	cmp	r0, #2
 8002260:	d9f6      	bls.n	8002250 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 8002262:	2003      	movs	r0, #3
 8002264:	e103      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002266:	6823      	ldr	r3, [r4, #0]
 8002268:	f013 0f04 	tst.w	r3, #4
 800226c:	d076      	beq.n	800235c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <HAL_RCC_OscConfig+0x294>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002276:	d133      	bne.n	80022e0 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002278:	2300      	movs	r3, #0
 800227a:	9301      	str	r3, [sp, #4]
 800227c:	4b2b      	ldr	r3, [pc, #172]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800227e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002280:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228c:	9301      	str	r3, [sp, #4]
 800228e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002290:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <HAL_RCC_OscConfig+0x29c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f413 7f80 	tst.w	r3, #256	; 0x100
 800229a:	d023      	beq.n	80022e4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800229c:	68a3      	ldr	r3, [r4, #8]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d034      	beq.n	800230c <HAL_RCC_OscConfig+0x274>
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	d038      	beq.n	8002318 <HAL_RCC_OscConfig+0x280>
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_RCC_OscConfig+0x294>)
 80022a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	671a      	str	r2, [r3, #112]	; 0x70
 80022b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022b8:	68a3      	ldr	r3, [r4, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d03c      	beq.n	8002338 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7fe fe8d 	bl	8000fdc <HAL_GetTick>
 80022c2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c4:	4f19      	ldr	r7, [pc, #100]	; (800232c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022cc:	f013 0f02 	tst.w	r3, #2
 80022d0:	d143      	bne.n	800235a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d2:	f7fe fe83 	bl	8000fdc <HAL_GetTick>
 80022d6:	1b80      	subs	r0, r0, r6
 80022d8:	4540      	cmp	r0, r8
 80022da:	d9f6      	bls.n	80022ca <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 80022dc:	2003      	movs	r0, #3
 80022de:	e0c6      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 80022e0:	2500      	movs	r5, #0
 80022e2:	e7d6      	b.n	8002292 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e4:	4a13      	ldr	r2, [pc, #76]	; (8002334 <HAL_RCC_OscConfig+0x29c>)
 80022e6:	6813      	ldr	r3, [r2, #0]
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80022ee:	f7fe fe75 	bl	8000fdc <HAL_GetTick>
 80022f2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4f0f      	ldr	r7, [pc, #60]	; (8002334 <HAL_RCC_OscConfig+0x29c>)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022fc:	d1ce      	bne.n	800229c <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fe:	f7fe fe6d 	bl	8000fdc <HAL_GetTick>
 8002302:	1b80      	subs	r0, r0, r6
 8002304:	2802      	cmp	r0, #2
 8002306:	d9f6      	bls.n	80022f6 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8002308:	2003      	movs	r0, #3
 800230a:	e0b0      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800230e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e7cf      	b.n	80022b8 <HAL_RCC_OscConfig+0x220>
 8002318:	4b04      	ldr	r3, [pc, #16]	; (800232c <HAL_RCC_OscConfig+0x294>)
 800231a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800231c:	f042 0204 	orr.w	r2, r2, #4
 8002320:	671a      	str	r2, [r3, #112]	; 0x70
 8002322:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002324:	f042 0201 	orr.w	r2, r2, #1
 8002328:	671a      	str	r2, [r3, #112]	; 0x70
 800232a:	e7c5      	b.n	80022b8 <HAL_RCC_OscConfig+0x220>
 800232c:	40023800 	.word	0x40023800
 8002330:	42470000 	.word	0x42470000
 8002334:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002338:	f7fe fe50 	bl	8000fdc <HAL_GetTick>
 800233c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233e:	4f52      	ldr	r7, [pc, #328]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002346:	f013 0f02 	tst.w	r3, #2
 800234a:	d006      	beq.n	800235a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7fe fe46 	bl	8000fdc <HAL_GetTick>
 8002350:	1b80      	subs	r0, r0, r6
 8002352:	4540      	cmp	r0, r8
 8002354:	d9f6      	bls.n	8002344 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002356:	2003      	movs	r0, #3
 8002358:	e089      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800235a:	b9ed      	cbnz	r5, 8002398 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800235c:	69a3      	ldr	r3, [r4, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 8084 	beq.w	800246c <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002364:	4a48      	ldr	r2, [pc, #288]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 8002366:	6892      	ldr	r2, [r2, #8]
 8002368:	f002 020c 	and.w	r2, r2, #12
 800236c:	2a08      	cmp	r2, #8
 800236e:	d051      	beq.n	8002414 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002370:	2b02      	cmp	r3, #2
 8002372:	d017      	beq.n	80023a4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <HAL_RCC_OscConfig+0x3f4>)
 8002376:	2200      	movs	r2, #0
 8002378:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fe2f 	bl	8000fdc <HAL_GetTick>
 800237e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002380:	4d41      	ldr	r5, [pc, #260]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 8002382:	682b      	ldr	r3, [r5, #0]
 8002384:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002388:	d042      	beq.n	8002410 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fe27 	bl	8000fdc <HAL_GetTick>
 800238e:	1b00      	subs	r0, r0, r4
 8002390:	2802      	cmp	r0, #2
 8002392:	d9f6      	bls.n	8002382 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8002394:	2003      	movs	r0, #3
 8002396:	e06a      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002398:	4a3b      	ldr	r2, [pc, #236]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 800239a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	; 0x40
 80023a2:	e7db      	b.n	800235c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80023a4:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x3f4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023aa:	f7fe fe17 	bl	8000fdc <HAL_GetTick>
 80023ae:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	4e35      	ldr	r6, [pc, #212]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 80023b2:	6833      	ldr	r3, [r6, #0]
 80023b4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023b8:	d006      	beq.n	80023c8 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ba:	f7fe fe0f 	bl	8000fdc <HAL_GetTick>
 80023be:	1b40      	subs	r0, r0, r5
 80023c0:	2802      	cmp	r0, #2
 80023c2:	d9f6      	bls.n	80023b2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 80023c4:	2003      	movs	r0, #3
 80023c6:	e052      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c8:	69e3      	ldr	r3, [r4, #28]
 80023ca:	6a22      	ldr	r2, [r4, #32]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80023d0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80023d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80023d6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80023da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023dc:	0852      	lsrs	r2, r2, #1
 80023de:	3a01      	subs	r2, #1
 80023e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80023e4:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 80023e6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80023e8:	4b28      	ldr	r3, [pc, #160]	; (800248c <HAL_RCC_OscConfig+0x3f4>)
 80023ea:	2201      	movs	r2, #1
 80023ec:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023ee:	f7fe fdf5 	bl	8000fdc <HAL_GetTick>
 80023f2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f4:	4d24      	ldr	r5, [pc, #144]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 80023f6:	682b      	ldr	r3, [r5, #0]
 80023f8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023fc:	d106      	bne.n	800240c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fe:	f7fe fded 	bl	8000fdc <HAL_GetTick>
 8002402:	1b00      	subs	r0, r0, r4
 8002404:	2802      	cmp	r0, #2
 8002406:	d9f6      	bls.n	80023f6 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002408:	2003      	movs	r0, #3
 800240a:	e030      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800240c:	2000      	movs	r0, #0
 800240e:	e02e      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
 8002410:	2000      	movs	r0, #0
 8002412:	e02c      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002414:	2b01      	cmp	r3, #1
 8002416:	d02d      	beq.n	8002474 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002418:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCC_OscConfig+0x3f0>)
 800241a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002420:	69e2      	ldr	r2, [r4, #28]
 8002422:	4291      	cmp	r1, r2
 8002424:	d128      	bne.n	8002478 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002426:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	6a21      	ldr	r1, [r4, #32]
 800242c:	428a      	cmp	r2, r1
 800242e:	d125      	bne.n	800247c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002430:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002432:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002436:	401a      	ands	r2, r3
 8002438:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800243c:	d120      	bne.n	8002480 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002442:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002444:	0852      	lsrs	r2, r2, #1
 8002446:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002448:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800244c:	d11a      	bne.n	8002484 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800244e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002450:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002454:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002458:	bf14      	ite	ne
 800245a:	2001      	movne	r0, #1
 800245c:	2000      	moveq	r0, #0
 800245e:	e006      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
}
 8002462:	4770      	bx	lr
        return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
 8002466:	e002      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
 800246a:	e000      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 800246c:	2000      	movs	r0, #0
}
 800246e:	b002      	add	sp, #8
 8002470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8002474:	2001      	movs	r0, #1
 8002476:	e7fa      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 8002478:	2001      	movs	r0, #1
 800247a:	e7f8      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
 800247c:	2001      	movs	r0, #1
 800247e:	e7f6      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
 8002480:	2001      	movs	r0, #1
 8002482:	e7f4      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
 8002484:	2001      	movs	r0, #1
 8002486:	e7f2      	b.n	800246e <HAL_RCC_OscConfig+0x3d6>
 8002488:	40023800 	.word	0x40023800
 800248c:	42470000 	.word	0x42470000

08002490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002490:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002492:	4b31      	ldr	r3, [pc, #196]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d057      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0xbe>
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d157      	bne.n	8002552 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a2:	4b2d      	ldr	r3, [pc, #180]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024b0:	d02a      	beq.n	8002508 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80024ba:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80024be:	ebb1 000c 	subs.w	r0, r1, ip
 80024c2:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80024c6:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80024ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024ce:	0181      	lsls	r1, r0, #6
 80024d0:	1a09      	subs	r1, r1, r0
 80024d2:	eb63 030e 	sbc.w	r3, r3, lr
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024dc:	00c9      	lsls	r1, r1, #3
 80024de:	eb11 0c0c 	adds.w	ip, r1, ip
 80024e2:	f143 0300 	adc.w	r3, r3, #0
 80024e6:	0259      	lsls	r1, r3, #9
 80024e8:	2300      	movs	r3, #0
 80024ea:	ea4f 204c 	mov.w	r0, ip, lsl #9
 80024ee:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 80024f2:	f7fd fecd 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80024fe:	3301      	adds	r3, #1
 8002500:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002502:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002506:	e025      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002508:	4b13      	ldr	r3, [pc, #76]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc8>)
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002510:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002514:	ebb1 000c 	subs.w	r0, r1, ip
 8002518:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800251c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002520:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002524:	0181      	lsls	r1, r0, #6
 8002526:	1a09      	subs	r1, r1, r0
 8002528:	eb63 030e 	sbc.w	r3, r3, lr
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002532:	00c9      	lsls	r1, r1, #3
 8002534:	eb11 0c0c 	adds.w	ip, r1, ip
 8002538:	f143 0300 	adc.w	r3, r3, #0
 800253c:	0299      	lsls	r1, r3, #10
 800253e:	2300      	movs	r3, #0
 8002540:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002544:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002548:	f7fd fea2 	bl	8000290 <__aeabi_uldivmod>
 800254c:	e7d3      	b.n	80024f6 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002550:	e000      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8002552:	4803      	ldr	r0, [pc, #12]	; (8002560 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002554:	bd08      	pop	{r3, pc}
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800
 800255c:	007a1200 	.word	0x007a1200
 8002560:	00f42400 	.word	0x00f42400

08002564 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002564:	2800      	cmp	r0, #0
 8002566:	f000 809d 	beq.w	80026a4 <HAL_RCC_ClockConfig+0x140>
{
 800256a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800256e:	460d      	mov	r5, r1
 8002570:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002572:	4b50      	ldr	r3, [pc, #320]	; (80026b4 <HAL_RCC_ClockConfig+0x150>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	428b      	cmp	r3, r1
 800257c:	d208      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	b2cb      	uxtb	r3, r1
 8002580:	4a4c      	ldr	r2, [pc, #304]	; (80026b4 <HAL_RCC_ClockConfig+0x150>)
 8002582:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002584:	6813      	ldr	r3, [r2, #0]
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	428b      	cmp	r3, r1
 800258c:	f040 808c 	bne.w	80026a8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	f013 0f02 	tst.w	r3, #2
 8002596:	d017      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	f013 0f04 	tst.w	r3, #4
 800259c:	d004      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800259e:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 80025a0:	6893      	ldr	r3, [r2, #8]
 80025a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025a6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	f013 0f08 	tst.w	r3, #8
 80025ae:	d004      	beq.n	80025ba <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b0:	4a41      	ldr	r2, [pc, #260]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 80025b2:	6893      	ldr	r3, [r2, #8]
 80025b4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025b8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ba:	4a3f      	ldr	r2, [pc, #252]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 80025bc:	6893      	ldr	r3, [r2, #8]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	68a1      	ldr	r1, [r4, #8]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f013 0f01 	tst.w	r3, #1
 80025ce:	d032      	beq.n	8002636 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d0:	6862      	ldr	r2, [r4, #4]
 80025d2:	2a01      	cmp	r2, #1
 80025d4:	d021      	beq.n	800261a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	1e93      	subs	r3, r2, #2
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d925      	bls.n	8002628 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f013 0f02 	tst.w	r3, #2
 80025e4:	d062      	beq.n	80026ac <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4934      	ldr	r1, [pc, #208]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 80025e8:	688b      	ldr	r3, [r1, #8]
 80025ea:	f023 0303 	bic.w	r3, r3, #3
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80025f2:	f7fe fcf3 	bl	8000fdc <HAL_GetTick>
 80025f6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f8:	4f2f      	ldr	r7, [pc, #188]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025fa:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	6862      	ldr	r2, [r4, #4]
 8002606:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800260a:	d014      	beq.n	8002636 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260c:	f7fe fce6 	bl	8000fdc <HAL_GetTick>
 8002610:	1b80      	subs	r0, r0, r6
 8002612:	4540      	cmp	r0, r8
 8002614:	d9f3      	bls.n	80025fe <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002616:	2003      	movs	r0, #3
 8002618:	e042      	b.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002622:	d1e0      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002624:	2001      	movs	r0, #1
 8002626:	e03b      	b.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002628:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002630:	d1d9      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002632:	2001      	movs	r0, #1
 8002634:	e034      	b.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002636:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_ClockConfig+0x150>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	42ab      	cmp	r3, r5
 8002640:	d907      	bls.n	8002652 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002642:	b2ea      	uxtb	r2, r5
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_ClockConfig+0x150>)
 8002646:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	42ab      	cmp	r3, r5
 8002650:	d12e      	bne.n	80026b0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	f013 0f04 	tst.w	r3, #4
 8002658:	d006      	beq.n	8002668 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265a:	4a17      	ldr	r2, [pc, #92]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 800265c:	6893      	ldr	r3, [r2, #8]
 800265e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002662:	68e1      	ldr	r1, [r4, #12]
 8002664:	430b      	orrs	r3, r1
 8002666:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	6823      	ldr	r3, [r4, #0]
 800266a:	f013 0f08 	tst.w	r3, #8
 800266e:	d007      	beq.n	8002680 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 8002672:	6893      	ldr	r3, [r2, #8]
 8002674:	6921      	ldr	r1, [r4, #16]
 8002676:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800267a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800267e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002680:	f7ff ff06 	bl	8002490 <HAL_RCC_GetSysClockFreq>
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCC_ClockConfig+0x154>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800268c:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <HAL_RCC_ClockConfig+0x158>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	40d8      	lsrs	r0, r3
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <HAL_RCC_ClockConfig+0x15c>)
 8002694:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002696:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_ClockConfig+0x160>)
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	f7fe fc53 	bl	8000f44 <HAL_InitTick>
  return HAL_OK;
 800269e:	2000      	movs	r0, #0
}
 80026a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	4770      	bx	lr
      return HAL_ERROR;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7f9      	b.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80026ac:	2001      	movs	r0, #1
 80026ae:	e7f7      	b.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
 80026b2:	e7f5      	b.n	80026a0 <HAL_RCC_ClockConfig+0x13c>
 80026b4:	40023c00 	.word	0x40023c00
 80026b8:	40023800 	.word	0x40023800
 80026bc:	0800ba60 	.word	0x0800ba60
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000008 	.word	0x20000008

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80026c8:	4b01      	ldr	r3, [pc, #4]	; (80026d0 <HAL_RCC_GetHCLKFreq+0x8>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000000 	.word	0x20000000

080026d4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026d4:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026dc:	4a03      	ldr	r2, [pc, #12]	; (80026ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80026de:	5cd3      	ldrb	r3, [r2, r3]
 80026e0:	4a03      	ldr	r2, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026e2:	6810      	ldr	r0, [r2, #0]
}
 80026e4:	40d8      	lsrs	r0, r3
 80026e6:	4770      	bx	lr
 80026e8:	40023800 	.word	0x40023800
 80026ec:	0800ba70 	.word	0x0800ba70
 80026f0:	20000000 	.word	0x20000000

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026f4:	4b04      	ldr	r3, [pc, #16]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026fc:	4a03      	ldr	r2, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x18>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	4a03      	ldr	r2, [pc, #12]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002702:	6810      	ldr	r0, [r2, #0]
}
 8002704:	40d8      	lsrs	r0, r3
 8002706:	4770      	bx	lr
 8002708:	40023800 	.word	0x40023800
 800270c:	0800ba70 	.word	0x0800ba70
 8002710:	20000000 	.word	0x20000000

08002714 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002714:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b01      	cmp	r3, #1
 800271c:	d137      	bne.n	800278e <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002724:	6802      	ldr	r2, [r0, #0]
 8002726:	68d3      	ldr	r3, [r2, #12]
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272e:	6803      	ldr	r3, [r0, #0]
 8002730:	4a19      	ldr	r2, [pc, #100]	; (8002798 <HAL_TIM_Base_Start_IT+0x84>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d020      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d01d      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 800273c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002740:	4293      	cmp	r3, r2
 8002742:	d019      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 8002744:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002748:	4293      	cmp	r3, r2
 800274a:	d015      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 800274c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002750:	4293      	cmp	r3, r2
 8002752:	d011      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 8002754:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002758:	4293      	cmp	r3, r2
 800275a:	d00d      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 800275c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002760:	4293      	cmp	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
 8002764:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002768:	4293      	cmp	r3, r2
 800276a:	d005      	beq.n	8002778 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f042 0201 	orr.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002774:	2000      	movs	r0, #0
 8002776:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800277e:	2a06      	cmp	r2, #6
 8002780:	d007      	beq.n	8002792 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	f042 0201 	orr.w	r2, r2, #1
 8002788:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800278a:	2000      	movs	r0, #0
 800278c:	4770      	bx	lr
    return HAL_ERROR;
 800278e:	2001      	movs	r0, #1
 8002790:	4770      	bx	lr
  return HAL_OK;
 8002792:	2000      	movs	r0, #0
}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40010000 	.word	0x40010000

0800279c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800279e:	4770      	bx	lr

080027a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a0:	4770      	bx	lr

080027a2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027a2:	4770      	bx	lr

080027a4 <HAL_TIM_IRQHandler>:
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	f012 0f02 	tst.w	r2, #2
 80027b0:	d011      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	f012 0f02 	tst.w	r2, #2
 80027b8:	d00d      	beq.n	80027d6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027ba:	f06f 0202 	mvn.w	r2, #2
 80027be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027c0:	2301      	movs	r3, #1
 80027c2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	6803      	ldr	r3, [r0, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f013 0f03 	tst.w	r3, #3
 80027cc:	d070      	beq.n	80028b0 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	f7ff ffe6 	bl	800279e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	2300      	movs	r3, #0
 80027d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	f012 0f04 	tst.w	r2, #4
 80027de:	d012      	beq.n	8002806 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	f012 0f04 	tst.w	r2, #4
 80027e6:	d00e      	beq.n	8002806 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027e8:	f06f 0204 	mvn.w	r2, #4
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ee:	2302      	movs	r3, #2
 80027f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027f2:	6823      	ldr	r3, [r4, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80027fa:	d05f      	beq.n	80028bc <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff ffce 	bl	800279e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	2300      	movs	r3, #0
 8002804:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	f012 0f08 	tst.w	r2, #8
 800280e:	d012      	beq.n	8002836 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	f012 0f08 	tst.w	r2, #8
 8002816:	d00e      	beq.n	8002836 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002818:	f06f 0208 	mvn.w	r2, #8
 800281c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281e:	2304      	movs	r3, #4
 8002820:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f013 0f03 	tst.w	r3, #3
 800282a:	d04e      	beq.n	80028ca <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800282c:	4620      	mov	r0, r4
 800282e:	f7ff ffb6 	bl	800279e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	2300      	movs	r3, #0
 8002834:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002836:	6823      	ldr	r3, [r4, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	f012 0f10 	tst.w	r2, #16
 800283e:	d012      	beq.n	8002866 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	f012 0f10 	tst.w	r2, #16
 8002846:	d00e      	beq.n	8002866 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002848:	f06f 0210 	mvn.w	r2, #16
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800284e:	2308      	movs	r3, #8
 8002850:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f413 7f40 	tst.w	r3, #768	; 0x300
 800285a:	d03d      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 800285c:	4620      	mov	r0, r4
 800285e:	f7ff ff9e 	bl	800279e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002862:	2300      	movs	r3, #0
 8002864:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002866:	6823      	ldr	r3, [r4, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	f012 0f01 	tst.w	r2, #1
 800286e:	d003      	beq.n	8002878 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002870:	68da      	ldr	r2, [r3, #12]
 8002872:	f012 0f01 	tst.w	r2, #1
 8002876:	d136      	bne.n	80028e6 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002888:	d134      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002892:	d003      	beq.n	800289c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	f012 0f40 	tst.w	r2, #64	; 0x40
 800289a:	d132      	bne.n	8002902 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	f012 0f20 	tst.w	r2, #32
 80028a4:	d003      	beq.n	80028ae <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028a6:	68da      	ldr	r2, [r3, #12]
 80028a8:	f012 0f20 	tst.w	r2, #32
 80028ac:	d130      	bne.n	8002910 <HAL_TIM_IRQHandler+0x16c>
}
 80028ae:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b0:	f7ff ff74 	bl	800279c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff ff73 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80028ba:	e78a      	b.n	80027d2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028bc:	4620      	mov	r0, r4
 80028be:	f7ff ff6d 	bl	800279c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7ff ff6c 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80028c8:	e79b      	b.n	8002802 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff ff66 	bl	800279c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff ff65 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80028d6:	e7ac      	b.n	8002832 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028d8:	4620      	mov	r0, r4
 80028da:	f7ff ff5f 	bl	800279c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028de:	4620      	mov	r0, r4
 80028e0:	f7ff ff5e 	bl	80027a0 <HAL_TIM_PWM_PulseFinishedCallback>
 80028e4:	e7bd      	b.n	8002862 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e6:	f06f 0201 	mvn.w	r2, #1
 80028ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7fe f9b7 	bl	8000c60 <HAL_TIM_PeriodElapsedCallback>
 80028f2:	e7c1      	b.n	8002878 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80028fa:	4620      	mov	r0, r4
 80028fc:	f000 f9c7 	bl	8002c8e <HAL_TIMEx_BreakCallback>
 8002900:	e7c3      	b.n	800288a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002902:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002906:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002908:	4620      	mov	r0, r4
 800290a:	f7ff ff4a 	bl	80027a2 <HAL_TIM_TriggerCallback>
 800290e:	e7c5      	b.n	800289c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002910:	f06f 0220 	mvn.w	r2, #32
 8002914:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002916:	4620      	mov	r0, r4
 8002918:	f000 f9b8 	bl	8002c8c <HAL_TIMEx_CommutCallback>
}
 800291c:	e7c7      	b.n	80028ae <HAL_TIM_IRQHandler+0x10a>
	...

08002920 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002920:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002922:	4a40      	ldr	r2, [pc, #256]	; (8002a24 <TIM_Base_SetConfig+0x104>)
 8002924:	4290      	cmp	r0, r2
 8002926:	d05d      	beq.n	80029e4 <TIM_Base_SetConfig+0xc4>
 8002928:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800292c:	d031      	beq.n	8002992 <TIM_Base_SetConfig+0x72>
 800292e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002932:	4290      	cmp	r0, r2
 8002934:	d051      	beq.n	80029da <TIM_Base_SetConfig+0xba>
 8002936:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800293a:	4290      	cmp	r0, r2
 800293c:	d06d      	beq.n	8002a1a <TIM_Base_SetConfig+0xfa>
 800293e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002942:	4290      	cmp	r0, r2
 8002944:	d064      	beq.n	8002a10 <TIM_Base_SetConfig+0xf0>
 8002946:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800294a:	4290      	cmp	r0, r2
 800294c:	d033      	beq.n	80029b6 <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800294e:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002952:	4290      	cmp	r0, r2
 8002954:	d021      	beq.n	800299a <TIM_Base_SetConfig+0x7a>
 8002956:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800295a:	4290      	cmp	r0, r2
 800295c:	d01d      	beq.n	800299a <TIM_Base_SetConfig+0x7a>
 800295e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002962:	4290      	cmp	r0, r2
 8002964:	d019      	beq.n	800299a <TIM_Base_SetConfig+0x7a>
 8002966:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 800296a:	4290      	cmp	r0, r2
 800296c:	d015      	beq.n	800299a <TIM_Base_SetConfig+0x7a>
 800296e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002972:	4290      	cmp	r0, r2
 8002974:	d011      	beq.n	800299a <TIM_Base_SetConfig+0x7a>
 8002976:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800297a:	4290      	cmp	r0, r2
 800297c:	d00d      	beq.n	800299a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800297e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002982:	694a      	ldr	r2, [r1, #20]
 8002984:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002986:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002988:	688b      	ldr	r3, [r1, #8]
 800298a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800298c:	680b      	ldr	r3, [r1, #0]
 800298e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002990:	e03b      	b.n	8002a0a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002996:	684a      	ldr	r2, [r1, #4]
 8002998:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800299e:	68ca      	ldr	r2, [r1, #12]
 80029a0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029a6:	694a      	ldr	r2, [r1, #20]
 80029a8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029aa:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ac:	688b      	ldr	r3, [r1, #8]
 80029ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029b0:	680b      	ldr	r3, [r1, #0]
 80029b2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b4:	e029      	b.n	8002a0a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029ba:	684a      	ldr	r2, [r1, #4]
 80029bc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c2:	68ca      	ldr	r2, [r1, #12]
 80029c4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ca:	694a      	ldr	r2, [r1, #20]
 80029cc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029ce:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d0:	688b      	ldr	r3, [r1, #8]
 80029d2:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80029d4:	680b      	ldr	r3, [r1, #0]
 80029d6:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029d8:	e015      	b.n	8002a06 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029de:	684a      	ldr	r2, [r1, #4]
 80029e0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e2:	e7da      	b.n	800299a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029e8:	684a      	ldr	r2, [r1, #4]
 80029ea:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029f0:	68ca      	ldr	r2, [r1, #12]
 80029f2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	694a      	ldr	r2, [r1, #20]
 80029fa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80029fc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029fe:	688b      	ldr	r3, [r1, #8]
 8002a00:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a02:	680b      	ldr	r3, [r1, #0]
 8002a04:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a06:	690b      	ldr	r3, [r1, #16]
 8002a08:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	6143      	str	r3, [r0, #20]
}
 8002a0e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a14:	684a      	ldr	r2, [r1, #4]
 8002a16:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a18:	e7bf      	b.n	800299a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a1e:	684a      	ldr	r2, [r1, #4]
 8002a20:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a22:	e7ba      	b.n	800299a <TIM_Base_SetConfig+0x7a>
 8002a24:	40010000 	.word	0x40010000

08002a28 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002a28:	b340      	cbz	r0, 8002a7c <HAL_TIM_Base_Init+0x54>
{
 8002a2a:	b510      	push	{r4, lr}
 8002a2c:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002a2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002a32:	b1f3      	cbz	r3, 8002a72 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	f851 0b04 	ldr.w	r0, [r1], #4
 8002a40:	f7ff ff6e 	bl	8002920 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a44:	2301      	movs	r3, #1
 8002a46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002a4e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002a52:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002a56:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a62:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002a66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002a6e:	2000      	movs	r0, #0
}
 8002a70:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002a72:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002a76:	f7fd fef5 	bl	8000864 <HAL_TIM_Base_MspInit>
 8002a7a:	e7db      	b.n	8002a34 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	4770      	bx	lr

08002a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a80:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a82:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a84:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002a8e:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a92:	6082      	str	r2, [r0, #8]
}
 8002a94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002a9a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	f000 80ae 	beq.w	8002c00 <HAL_TIM_ConfigClockSource+0x166>
{
 8002aa4:	b570      	push	{r4, r5, r6, lr}
 8002aa6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002ab4:	6802      	ldr	r2, [r0, #0]
 8002ab6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ab8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002abc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002ac0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ac2:	680b      	ldr	r3, [r1, #0]
 8002ac4:	2b60      	cmp	r3, #96	; 0x60
 8002ac6:	d060      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0xf0>
 8002ac8:	d83d      	bhi.n	8002b46 <HAL_TIM_ConfigClockSource+0xac>
 8002aca:	2b40      	cmp	r3, #64	; 0x40
 8002acc:	d079      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0x128>
 8002ace:	d91c      	bls.n	8002b0a <HAL_TIM_ConfigClockSource+0x70>
 8002ad0:	2b50      	cmp	r3, #80	; 0x50
 8002ad2:	d136      	bne.n	8002b42 <HAL_TIM_ConfigClockSource+0xa8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ad4:	6803      	ldr	r3, [r0, #0]
 8002ad6:	6848      	ldr	r0, [r1, #4]
 8002ad8:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ada:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002adc:	6a1a      	ldr	r2, [r3, #32]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ae6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aea:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aee:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002af2:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002af4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002af6:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002af8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002afa:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b00:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002b04:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b06:	2000      	movs	r0, #0
}
 8002b08:	e012      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002b0a:	2b20      	cmp	r3, #32
 8002b0c:	d002      	beq.n	8002b14 <HAL_TIM_ConfigClockSource+0x7a>
 8002b0e:	d90b      	bls.n	8002b28 <HAL_TIM_ConfigClockSource+0x8e>
 8002b10:	2b30      	cmp	r3, #48	; 0x30
 8002b12:	d114      	bne.n	8002b3e <HAL_TIM_ConfigClockSource+0xa4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b14:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002b16:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b18:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8002b22:	608b      	str	r3, [r1, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b24:	2000      	movs	r0, #0
}
 8002b26:	e003      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002b28:	f033 0210 	bics.w	r2, r3, #16
 8002b2c:	d0f2      	beq.n	8002b14 <HAL_TIM_ConfigClockSource+0x7a>
 8002b2e:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	2301      	movs	r3, #1
 8002b32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002b36:	2300      	movs	r3, #0
 8002b38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7f6      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7f4      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4a:	d055      	beq.n	8002bf8 <HAL_TIM_ConfigClockSource+0x15e>
 8002b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b50:	d10c      	bne.n	8002b6c <HAL_TIM_ConfigClockSource+0xd2>
      TIM_ETR_SetConfig(htim->Instance,
 8002b52:	68cb      	ldr	r3, [r1, #12]
 8002b54:	684a      	ldr	r2, [r1, #4]
 8002b56:	6889      	ldr	r1, [r1, #8]
 8002b58:	6800      	ldr	r0, [r0, #0]
 8002b5a:	f7ff ff91 	bl	8002a80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b5e:	6822      	ldr	r2, [r4, #0]
 8002b60:	6893      	ldr	r3, [r2, #8]
 8002b62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b66:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	2000      	movs	r0, #0
      break;
 8002b6a:	e7e1      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002b6c:	2b70      	cmp	r3, #112	; 0x70
 8002b6e:	d145      	bne.n	8002bfc <HAL_TIM_ConfigClockSource+0x162>
      TIM_ETR_SetConfig(htim->Instance,
 8002b70:	68cb      	ldr	r3, [r1, #12]
 8002b72:	684a      	ldr	r2, [r1, #4]
 8002b74:	6889      	ldr	r1, [r1, #8]
 8002b76:	6800      	ldr	r0, [r0, #0]
 8002b78:	f7ff ff82 	bl	8002a80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b7c:	6822      	ldr	r2, [r4, #0]
 8002b7e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002b84:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b86:	2000      	movs	r0, #0
      break;
 8002b88:	e7d2      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b8a:	6803      	ldr	r3, [r0, #0]
 8002b8c:	684d      	ldr	r5, [r1, #4]
 8002b8e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b90:	6a18      	ldr	r0, [r3, #32]
 8002b92:	f020 0010 	bic.w	r0, r0, #16
 8002b96:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b98:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002b9a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b9c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ba0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002bac:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bae:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bb0:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002bb2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bb8:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002bbc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2000      	movs	r0, #0
}
 8002bc0:	e7b6      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc2:	6803      	ldr	r3, [r0, #0]
 8002bc4:	6848      	ldr	r0, [r1, #4]
 8002bc6:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002bc8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bca:	6a1a      	ldr	r2, [r3, #32]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bd2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bd4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bd8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bdc:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8002be0:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002be4:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8002be8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bee:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002bf2:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf4:	2000      	movs	r0, #0
}
 8002bf6:	e79b      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
  HAL_StatusTypeDef status = HAL_OK;
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	e799      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	e797      	b.n	8002b30 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8002c00:	2002      	movs	r0, #2
}
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d03b      	beq.n	8002c84 <HAL_TIMEx_MasterConfigSynchronization+0x80>
{
 8002c0c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	2302      	movs	r3, #2
 8002c16:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c1a:	6804      	ldr	r4, [r0, #0]
 8002c1c:	6863      	ldr	r3, [r4, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c1e:	68a2      	ldr	r2, [r4, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c24:	680d      	ldr	r5, [r1, #0]
 8002c26:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c28:	6063      	str	r3, [r4, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2a:	6803      	ldr	r3, [r0, #0]
 8002c2c:	4c16      	ldr	r4, [pc, #88]	; (8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
 8002c2e:	42a3      	cmp	r3, r4
 8002c30:	d01a      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c36:	d017      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c38:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d013      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c40:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d00f      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c48:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c4c:	42a3      	cmp	r3, r4
 8002c4e:	d00b      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c50:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	d007      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c58:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8002c5c:	42a3      	cmp	r3, r4
 8002c5e:	d003      	beq.n	8002c68 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8002c60:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002c64:	42a3      	cmp	r3, r4
 8002c66:	d104      	bne.n	8002c72 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6c:	6849      	ldr	r1, [r1, #4]
 8002c6e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c72:	2301      	movs	r3, #1
 8002c74:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c78:	2300      	movs	r3, #0
 8002c7a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002c7e:	4618      	mov	r0, r3
}
 8002c80:	bc30      	pop	{r4, r5}
 8002c82:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002c84:	2002      	movs	r0, #2
}
 8002c86:	4770      	bx	lr
 8002c88:	40010000 	.word	0x40010000

08002c8c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c8c:	4770      	bx	lr

08002c8e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c8e:	4770      	bx	lr

08002c90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	b538      	push	{r3, r4, r5, lr}
 8002c92:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c94:	6802      	ldr	r2, [r0, #0]
 8002c96:	6913      	ldr	r3, [r2, #16]
 8002c98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c9c:	68c1      	ldr	r1, [r0, #12]
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002ca2:	6801      	ldr	r1, [r0, #0]
 8002ca4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002ca6:	6883      	ldr	r3, [r0, #8]
 8002ca8:	6900      	ldr	r0, [r0, #16]
 8002caa:	4303      	orrs	r3, r0
 8002cac:	6960      	ldr	r0, [r4, #20]
 8002cae:	4303      	orrs	r3, r0
 8002cb0:	69e0      	ldr	r0, [r4, #28]
 8002cb2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002cb4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002cb8:	f022 020c 	bic.w	r2, r2, #12
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cc0:	6822      	ldr	r2, [r4, #0]
 8002cc2:	6953      	ldr	r3, [r2, #20]
 8002cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc8:	69a1      	ldr	r1, [r4, #24]
 8002cca:	430b      	orrs	r3, r1
 8002ccc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <UART_SetConfig+0xfc>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d006      	beq.n	8002ce4 <UART_SetConfig+0x54>
 8002cd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d002      	beq.n	8002ce4 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7ff fcf9 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8002ce2:	e001      	b.n	8002ce8 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ce4:	f7ff fd06 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce8:	69e3      	ldr	r3, [r4, #28]
 8002cea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cee:	d024      	beq.n	8002d3a <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	1803      	adds	r3, r0, r0
 8002cf4:	4149      	adcs	r1, r1
 8002cf6:	181b      	adds	r3, r3, r0
 8002cf8:	f141 0100 	adc.w	r1, r1, #0
 8002cfc:	00c9      	lsls	r1, r1, #3
 8002cfe:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	1818      	adds	r0, r3, r0
 8002d06:	6863      	ldr	r3, [r4, #4]
 8002d08:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002d0c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002d10:	f141 0100 	adc.w	r1, r1, #0
 8002d14:	f7fd fabc 	bl	8000290 <__aeabi_uldivmod>
 8002d18:	6821      	ldr	r1, [r4, #0]
 8002d1a:	4a1d      	ldr	r2, [pc, #116]	; (8002d90 <UART_SetConfig+0x100>)
 8002d1c:	fba2 4300 	umull	r4, r3, r2, r0
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2464      	movs	r4, #100	; 0x64
 8002d24:	fb04 0013 	mls	r0, r4, r3, r0
 8002d28:	0100      	lsls	r0, r0, #4
 8002d2a:	3032      	adds	r0, #50	; 0x32
 8002d2c:	fba2 2000 	umull	r2, r0, r2, r0
 8002d30:	011b      	lsls	r3, r3, #4
 8002d32:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002d36:	6088      	str	r0, [r1, #8]
  }
}
 8002d38:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	1802      	adds	r2, r0, r0
 8002d3e:	eb43 0103 	adc.w	r1, r3, r3
 8002d42:	1812      	adds	r2, r2, r0
 8002d44:	f141 0100 	adc.w	r1, r1, #0
 8002d48:	00c9      	lsls	r1, r1, #3
 8002d4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d4e:	00d2      	lsls	r2, r2, #3
 8002d50:	1810      	adds	r0, r2, r0
 8002d52:	f141 0100 	adc.w	r1, r1, #0
 8002d56:	6862      	ldr	r2, [r4, #4]
 8002d58:	1892      	adds	r2, r2, r2
 8002d5a:	415b      	adcs	r3, r3
 8002d5c:	f7fd fa98 	bl	8000290 <__aeabi_uldivmod>
 8002d60:	4d0b      	ldr	r5, [pc, #44]	; (8002d90 <UART_SetConfig+0x100>)
 8002d62:	fba5 3200 	umull	r3, r2, r5, r0
 8002d66:	0951      	lsrs	r1, r2, #5
 8002d68:	2364      	movs	r3, #100	; 0x64
 8002d6a:	fb03 0311 	mls	r3, r3, r1, r0
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	3332      	adds	r3, #50	; 0x32
 8002d72:	fba5 2303 	umull	r2, r3, r5, r3
 8002d76:	6820      	ldr	r0, [r4, #0]
 8002d78:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002d7c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002d86:	4413      	add	r3, r2
 8002d88:	6083      	str	r3, [r0, #8]
 8002d8a:	e7d5      	b.n	8002d38 <UART_SetConfig+0xa8>
 8002d8c:	40011000 	.word	0x40011000
 8002d90:	51eb851f 	.word	0x51eb851f

08002d94 <HAL_UART_Init>:
  if (huart == NULL)
 8002d94:	b358      	cbz	r0, 8002dee <HAL_UART_Init+0x5a>
{
 8002d96:	b510      	push	{r4, lr}
 8002d98:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d9e:	b30b      	cbz	r3, 8002de4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002da0:	2324      	movs	r3, #36	; 0x24
 8002da2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002da6:	6822      	ldr	r2, [r4, #0]
 8002da8:	68d3      	ldr	r3, [r2, #12]
 8002daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002dae:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff ff6d 	bl	8002c90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db6:	6822      	ldr	r2, [r4, #0]
 8002db8:	6913      	ldr	r3, [r2, #16]
 8002dba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002dbe:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc0:	6822      	ldr	r2, [r4, #0]
 8002dc2:	6953      	ldr	r3, [r2, #20]
 8002dc4:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002dc8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002dca:	6822      	ldr	r2, [r4, #0]
 8002dcc:	68d3      	ldr	r3, [r2, #12]
 8002dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dd2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	2320      	movs	r3, #32
 8002dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002de2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002de4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002de8:	f7fd fd5c 	bl	80008a4 <HAL_UART_MspInit>
 8002dec:	e7d8      	b.n	8002da0 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002dee:	2001      	movs	r0, #1
}
 8002df0:	4770      	bx	lr
	...

08002df4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002df4:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002df6:	2300      	movs	r3, #0
 8002df8:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002dfa:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <USB_CoreReset+0x4c>)
    count++;
 8002dfc:	9b01      	ldr	r3, [sp, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002e02:	9b01      	ldr	r3, [sp, #4]
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d815      	bhi.n	8002e34 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e08:	6903      	ldr	r3, [r0, #16]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	daf6      	bge.n	8002dfc <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002e12:	6903      	ldr	r3, [r0, #16]
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002e1a:	4a09      	ldr	r2, [pc, #36]	; (8002e40 <USB_CoreReset+0x4c>)
    count++;
 8002e1c:	9b01      	ldr	r3, [sp, #4]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002e22:	9b01      	ldr	r3, [sp, #4]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d808      	bhi.n	8002e3a <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002e28:	6903      	ldr	r3, [r0, #16]
 8002e2a:	f013 0f01 	tst.w	r3, #1
 8002e2e:	d1f5      	bne.n	8002e1c <USB_CoreReset+0x28>

  return HAL_OK;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e000      	b.n	8002e36 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002e34:	2003      	movs	r0, #3
}
 8002e36:	b002      	add	sp, #8
 8002e38:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002e3a:	2003      	movs	r0, #3
 8002e3c:	e7fb      	b.n	8002e36 <USB_CoreReset+0x42>
 8002e3e:	bf00      	nop
 8002e40:	00030d40 	.word	0x00030d40

08002e44 <USB_CoreInit>:
{
 8002e44:	b084      	sub	sp, #16
 8002e46:	b510      	push	{r4, lr}
 8002e48:	4604      	mov	r4, r0
 8002e4a:	a803      	add	r0, sp, #12
 8002e4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e50:	9b08      	ldr	r3, [sp, #32]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d11f      	bne.n	8002e96 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e5e:	68e3      	ldr	r3, [r4, #12]
 8002e60:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e68:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e6a:	68e3      	ldr	r3, [r4, #12]
 8002e6c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e70:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d009      	beq.n	8002e8c <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7ff ffbb 	bl	8002df4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002e7e:	9b06      	ldr	r3, [sp, #24]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d01b      	beq.n	8002ebc <USB_CoreInit+0x78>
}
 8002e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e88:	b004      	add	sp, #16
 8002e8a:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e8c:	68e3      	ldr	r3, [r4, #12]
 8002e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e92:	60e3      	str	r3, [r4, #12]
 8002e94:	e7f0      	b.n	8002e78 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e96:	68e3      	ldr	r3, [r4, #12]
 8002e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e9c:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7ff ffa8 	bl	8002df4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002ea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ea6:	b923      	cbnz	r3, 8002eb2 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	63a3      	str	r3, [r4, #56]	; 0x38
 8002eb0:	e7e5      	b.n	8002e7e <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb8:	63a3      	str	r3, [r4, #56]	; 0x38
 8002eba:	e7e0      	b.n	8002e7e <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ebc:	68a3      	ldr	r3, [r4, #8]
 8002ebe:	f043 0306 	orr.w	r3, r3, #6
 8002ec2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ec4:	68a3      	ldr	r3, [r4, #8]
 8002ec6:	f043 0320 	orr.w	r3, r3, #32
 8002eca:	60a3      	str	r3, [r4, #8]
 8002ecc:	e7da      	b.n	8002e84 <USB_CoreInit+0x40>

08002ece <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002ece:	6883      	ldr	r3, [r0, #8]
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	6083      	str	r3, [r0, #8]
}
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	4770      	bx	lr

08002eda <USB_SetCurrentMode>:
{
 8002eda:	b570      	push	{r4, r5, r6, lr}
 8002edc:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ede:	68c3      	ldr	r3, [r0, #12]
 8002ee0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002ee4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002ee6:	2901      	cmp	r1, #1
 8002ee8:	d015      	beq.n	8002f16 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8002eea:	bb29      	cbnz	r1, 8002f38 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002eec:	68c3      	ldr	r3, [r0, #12]
 8002eee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ef2:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002ef4:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002ef6:	2601      	movs	r6, #1
 8002ef8:	4630      	mov	r0, r6
 8002efa:	f7fe f875 	bl	8000fe8 <HAL_Delay>
      ms++;
 8002efe:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002f00:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f02:	f013 0f01 	tst.w	r3, #1
 8002f06:	d001      	beq.n	8002f0c <USB_SetCurrentMode+0x32>
 8002f08:	2c32      	cmp	r4, #50	; 0x32
 8002f0a:	d1f5      	bne.n	8002ef8 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002f0c:	2c32      	cmp	r4, #50	; 0x32
 8002f0e:	bf14      	ite	ne
 8002f10:	2000      	movne	r0, #0
 8002f12:	2001      	moveq	r0, #1
}
 8002f14:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f16:	68c3      	ldr	r3, [r0, #12]
 8002f18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f1c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002f1e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002f20:	2601      	movs	r6, #1
 8002f22:	4630      	mov	r0, r6
 8002f24:	f7fe f860 	bl	8000fe8 <HAL_Delay>
      ms++;
 8002f28:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002f2a:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f2c:	f013 0f01 	tst.w	r3, #1
 8002f30:	d1ec      	bne.n	8002f0c <USB_SetCurrentMode+0x32>
 8002f32:	2c32      	cmp	r4, #50	; 0x32
 8002f34:	d1f5      	bne.n	8002f22 <USB_SetCurrentMode+0x48>
 8002f36:	e7e9      	b.n	8002f0c <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8002f38:	2001      	movs	r0, #1
 8002f3a:	e7eb      	b.n	8002f14 <USB_SetCurrentMode+0x3a>

08002f3c <USB_FlushTxFifo>:
{
 8002f3c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f42:	4a11      	ldr	r2, [pc, #68]	; (8002f88 <USB_FlushTxFifo+0x4c>)
    count++;
 8002f44:	9b01      	ldr	r3, [sp, #4]
 8002f46:	3301      	adds	r3, #1
 8002f48:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f4a:	9b01      	ldr	r3, [sp, #4]
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d815      	bhi.n	8002f7c <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f50:	6903      	ldr	r3, [r0, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	daf6      	bge.n	8002f44 <USB_FlushTxFifo+0x8>
  count = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002f5a:	0189      	lsls	r1, r1, #6
 8002f5c:	f041 0120 	orr.w	r1, r1, #32
 8002f60:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8002f62:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <USB_FlushTxFifo+0x4c>)
    count++;
 8002f64:	9b01      	ldr	r3, [sp, #4]
 8002f66:	3301      	adds	r3, #1
 8002f68:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f6a:	9b01      	ldr	r3, [sp, #4]
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d808      	bhi.n	8002f82 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f70:	6903      	ldr	r3, [r0, #16]
 8002f72:	f013 0f20 	tst.w	r3, #32
 8002f76:	d1f5      	bne.n	8002f64 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002f78:	2000      	movs	r0, #0
 8002f7a:	e000      	b.n	8002f7e <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002f7c:	2003      	movs	r0, #3
}
 8002f7e:	b002      	add	sp, #8
 8002f80:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002f82:	2003      	movs	r0, #3
 8002f84:	e7fb      	b.n	8002f7e <USB_FlushTxFifo+0x42>
 8002f86:	bf00      	nop
 8002f88:	00030d40 	.word	0x00030d40

08002f8c <USB_FlushRxFifo>:
{
 8002f8c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f92:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <USB_FlushRxFifo+0x48>)
    count++;
 8002f94:	9b01      	ldr	r3, [sp, #4]
 8002f96:	3301      	adds	r3, #1
 8002f98:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002f9a:	9b01      	ldr	r3, [sp, #4]
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d813      	bhi.n	8002fc8 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002fa0:	6903      	ldr	r3, [r0, #16]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	daf6      	bge.n	8002f94 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002faa:	2310      	movs	r3, #16
 8002fac:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002fae:	4a09      	ldr	r2, [pc, #36]	; (8002fd4 <USB_FlushRxFifo+0x48>)
    count++;
 8002fb0:	9b01      	ldr	r3, [sp, #4]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002fb6:	9b01      	ldr	r3, [sp, #4]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d808      	bhi.n	8002fce <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002fbc:	6903      	ldr	r3, [r0, #16]
 8002fbe:	f013 0f10 	tst.w	r3, #16
 8002fc2:	d1f5      	bne.n	8002fb0 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e000      	b.n	8002fca <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002fc8:	2003      	movs	r0, #3
}
 8002fca:	b002      	add	sp, #8
 8002fcc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002fce:	2003      	movs	r0, #3
 8002fd0:	e7fb      	b.n	8002fca <USB_FlushRxFifo+0x3e>
 8002fd2:	bf00      	nop
 8002fd4:	00030d40 	.word	0x00030d40

08002fd8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002fd8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002fdc:	4319      	orrs	r1, r3
 8002fde:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	4770      	bx	lr
	...

08002fe8 <USB_DevInit>:
{
 8002fe8:	b084      	sub	sp, #16
 8002fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fee:	4604      	mov	r4, r0
 8002ff0:	a809      	add	r0, sp, #36	; 0x24
 8002ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002ff6:	460d      	mov	r5, r1
 8002ff8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002ffa:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003002:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8003006:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003008:	3301      	adds	r3, #1
 800300a:	2b0f      	cmp	r3, #15
 800300c:	d1f7      	bne.n	8002ffe <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 800300e:	bb26      	cbnz	r6, 800305a <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003010:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800301c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800301e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003022:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003024:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003026:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800302a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800302c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800302e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003032:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800303a:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 800303e:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003042:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003046:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003048:	2b01      	cmp	r3, #1
 800304a:	d114      	bne.n	8003076 <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 800304c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800304e:	b96b      	cbnz	r3, 800306c <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003050:	2100      	movs	r1, #0
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff ffc0 	bl	8002fd8 <USB_SetDevSpeed>
 8003058:	e011      	b.n	800307e <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800305a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800305c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003060:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003062:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003064:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003068:	63a3      	str	r3, [r4, #56]	; 0x38
 800306a:	e7e3      	b.n	8003034 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800306c:	2101      	movs	r1, #1
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff ffb2 	bl	8002fd8 <USB_SetDevSpeed>
 8003074:	e003      	b.n	800307e <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003076:	2103      	movs	r1, #3
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff ffad 	bl	8002fd8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800307e:	2110      	movs	r1, #16
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff ff5b 	bl	8002f3c <USB_FlushTxFifo>
 8003086:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003088:	4620      	mov	r0, r4
 800308a:	f7ff ff7f 	bl	8002f8c <USB_FlushRxFifo>
 800308e:	ea48 0800 	orr.w	r8, r8, r0
 8003092:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 8003096:	bf14      	ite	ne
 8003098:	f04f 0e01 	movne.w	lr, #1
 800309c:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030a4:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030a6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a8:	2d00      	cmp	r5, #0
 80030aa:	d03f      	beq.n	800312c <USB_DevInit+0x144>
 80030ac:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 80030b0:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 80030b2:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030b4:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030b8:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030bc:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 80030c0:	e00a      	b.n	80030d8 <USB_DevInit+0xf0>
      if (i == 0U)
 80030c2:	b182      	cbz	r2, 80030e6 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030c4:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030c8:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030cc:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030d0:	3201      	adds	r2, #1
 80030d2:	3320      	adds	r3, #32
 80030d4:	4295      	cmp	r5, r2
 80030d6:	d009      	beq.n	80030ec <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030d8:	4619      	mov	r1, r3
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	2800      	cmp	r0, #0
 80030de:	dbf0      	blt.n	80030c2 <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 80030e0:	f8c3 c000 	str.w	ip, [r3]
 80030e4:	e7f0      	b.n	80030c8 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030e6:	f8c3 a000 	str.w	sl, [r3]
 80030ea:	e7ed      	b.n	80030c8 <USB_DevInit+0xe0>
 80030ec:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030f0:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80030f2:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80030f4:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80030f8:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030fc:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8003100:	e00a      	b.n	8003118 <USB_DevInit+0x130>
      if (i == 0U)
 8003102:	b182      	cbz	r2, 8003126 <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003104:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003108:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800310c:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003110:	3201      	adds	r2, #1
 8003112:	3320      	adds	r3, #32
 8003114:	4295      	cmp	r5, r2
 8003116:	d009      	beq.n	800312c <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003118:	4619      	mov	r1, r3
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	2800      	cmp	r0, #0
 800311e:	dbf0      	blt.n	8003102 <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003120:	f8c3 c000 	str.w	ip, [r3]
 8003124:	e7f0      	b.n	8003108 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003126:	f8c3 a000 	str.w	sl, [r3]
 800312a:	e7ed      	b.n	8003108 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003132:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003138:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800313c:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 800313e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003140:	b91b      	cbnz	r3, 800314a <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003142:	69a3      	ldr	r3, [r4, #24]
 8003144:	f043 0310 	orr.w	r3, r3, #16
 8003148:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800314a:	69a2      	ldr	r2, [r4, #24]
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <USB_DevInit+0x194>)
 800314e:	4313      	orrs	r3, r2
 8003150:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8003152:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003154:	b11b      	cbz	r3, 800315e <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003156:	69a3      	ldr	r3, [r4, #24]
 8003158:	f043 0308 	orr.w	r3, r3, #8
 800315c:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 800315e:	2e01      	cmp	r6, #1
 8003160:	d004      	beq.n	800316c <USB_DevInit+0x184>
}
 8003162:	4670      	mov	r0, lr
 8003164:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003168:	b004      	add	sp, #16
 800316a:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800316c:	69a3      	ldr	r3, [r4, #24]
 800316e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003172:	f043 0304 	orr.w	r3, r3, #4
 8003176:	61a3      	str	r3, [r4, #24]
 8003178:	e7f3      	b.n	8003162 <USB_DevInit+0x17a>
 800317a:	bf00      	nop
 800317c:	803c3800 	.word	0x803c3800

08003180 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003180:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003184:	f023 0303 	bic.w	r3, r3, #3
 8003188:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800318c:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003190:	f043 0302 	orr.w	r3, r3, #2
 8003194:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003198:	2000      	movs	r0, #0
 800319a:	4770      	bx	lr

0800319c <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800319c:	4770      	bx	lr
	...

080031a0 <MX_LWIP_Init>:
{
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 80031a4:	4e2c      	ldr	r6, [pc, #176]	; (8003258 <MX_LWIP_Init+0xb8>)
 80031a6:	20a9      	movs	r0, #169	; 0xa9
 80031a8:	7030      	strb	r0, [r6, #0]
  IP_ADDRESS[1] = 254;
 80031aa:	21fe      	movs	r1, #254	; 0xfe
 80031ac:	7071      	strb	r1, [r6, #1]
  IP_ADDRESS[2] = 101;
 80031ae:	2265      	movs	r2, #101	; 0x65
 80031b0:	70b2      	strb	r2, [r6, #2]
  IP_ADDRESS[3] = 255;
 80031b2:	23ff      	movs	r3, #255	; 0xff
 80031b4:	70f3      	strb	r3, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 80031b6:	4d29      	ldr	r5, [pc, #164]	; (800325c <MX_LWIP_Init+0xbc>)
 80031b8:	702b      	strb	r3, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 80031ba:	706b      	strb	r3, [r5, #1]
  NETMASK_ADDRESS[2] = 0;
 80031bc:	2700      	movs	r7, #0
 80031be:	70af      	strb	r7, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 80031c0:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 80031c2:	4c27      	ldr	r4, [pc, #156]	; (8003260 <MX_LWIP_Init+0xc0>)
 80031c4:	7020      	strb	r0, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 80031c6:	7061      	strb	r1, [r4, #1]
  GATEWAY_ADDRESS[2] = 101;
 80031c8:	70a2      	strb	r2, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 80031ca:	2301      	movs	r3, #1
 80031cc:	70e3      	strb	r3, [r4, #3]
  lwip_init();
 80031ce:	f000 fad5 	bl	800377c <lwip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80031d2:	7833      	ldrb	r3, [r6, #0]
 80031d4:	7872      	ldrb	r2, [r6, #1]
 80031d6:	f896 c003 	ldrb.w	ip, [r6, #3]
 80031da:	78b0      	ldrb	r0, [r6, #2]
 80031dc:	4921      	ldr	r1, [pc, #132]	; (8003264 <MX_LWIP_Init+0xc4>)
 80031de:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80031e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80031e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031ea:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80031ec:	782b      	ldrb	r3, [r5, #0]
 80031ee:	7868      	ldrb	r0, [r5, #1]
 80031f0:	78ee      	ldrb	r6, [r5, #3]
 80031f2:	78ad      	ldrb	r5, [r5, #2]
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <MX_LWIP_Init+0xc8>)
 80031f6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 80031fa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80031fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003202:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003204:	7820      	ldrb	r0, [r4, #0]
 8003206:	7865      	ldrb	r5, [r4, #1]
 8003208:	78e6      	ldrb	r6, [r4, #3]
 800320a:	78a4      	ldrb	r4, [r4, #2]
 800320c:	4b17      	ldr	r3, [pc, #92]	; (800326c <MX_LWIP_Init+0xcc>)
 800320e:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8003212:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003216:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800321a:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800321c:	4c14      	ldr	r4, [pc, #80]	; (8003270 <MX_LWIP_Init+0xd0>)
 800321e:	4815      	ldr	r0, [pc, #84]	; (8003274 <MX_LWIP_Init+0xd4>)
 8003220:	9002      	str	r0, [sp, #8]
 8003222:	4815      	ldr	r0, [pc, #84]	; (8003278 <MX_LWIP_Init+0xd8>)
 8003224:	9001      	str	r0, [sp, #4]
 8003226:	9700      	str	r7, [sp, #0]
 8003228:	4620      	mov	r0, r4
 800322a:	f000 fe51 	bl	8003ed0 <netif_add>
  netif_set_default(&gnetif);
 800322e:	4620      	mov	r0, r4
 8003230:	f000 fee6 	bl	8004000 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8003234:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003238:	f013 0f04 	tst.w	r3, #4
 800323c:	d008      	beq.n	8003250 <MX_LWIP_Init+0xb0>
    netif_set_up(&gnetif);
 800323e:	4620      	mov	r0, r4
 8003240:	f000 fee4 	bl	800400c <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8003244:	490d      	ldr	r1, [pc, #52]	; (800327c <MX_LWIP_Init+0xdc>)
 8003246:	480a      	ldr	r0, [pc, #40]	; (8003270 <MX_LWIP_Init+0xd0>)
 8003248:	f000 ff60 	bl	800410c <netif_set_link_callback>
}
 800324c:	b005      	add	sp, #20
 800324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8003250:	4807      	ldr	r0, [pc, #28]	; (8003270 <MX_LWIP_Init+0xd0>)
 8003252:	f000 fef9 	bl	8004048 <netif_set_down>
 8003256:	e7f5      	b.n	8003244 <MX_LWIP_Init+0xa4>
 8003258:	20000658 	.word	0x20000658
 800325c:	2000065c 	.word	0x2000065c
 8003260:	20000654 	.word	0x20000654
 8003264:	20000698 	.word	0x20000698
 8003268:	2000069c 	.word	0x2000069c
 800326c:	20000694 	.word	0x20000694
 8003270:	20000660 	.word	0x20000660
 8003274:	0800a461 	.word	0x0800a461
 8003278:	080035a9 	.word	0x080035a9
 800327c:	0800319d 	.word	0x0800319d

08003280 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003280:	2000      	movs	r0, #0
 8003282:	4770      	bx	lr

08003284 <low_level_output>:
{
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	b08c      	sub	sp, #48	; 0x30
 8003288:	460d      	mov	r5, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800328a:	2230      	movs	r2, #48	; 0x30
 800328c:	2100      	movs	r1, #0
 800328e:	4668      	mov	r0, sp
 8003290:	f007 f9ce 	bl	800a630 <memset>
  for(q = p; q != NULL; q = q->next)
 8003294:	b32d      	cbz	r5, 80032e2 <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 8003296:	686b      	ldr	r3, [r5, #4]
 8003298:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 800329a:	896b      	ldrh	r3, [r5, #10]
 800329c:	9301      	str	r3, [sp, #4]
    if(i>0)
 800329e:	ac03      	add	r4, sp, #12
  for(q = p; q != NULL; q = q->next)
 80032a0:	4629      	mov	r1, r5
    Txbuffer[i].len = q->len;
 80032a2:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 80032a4:	2600      	movs	r6, #0
 80032a6:	e002      	b.n	80032ae <low_level_output+0x2a>
 80032a8:	340c      	adds	r4, #12
 80032aa:	3301      	adds	r3, #1
{
 80032ac:	4611      	mov	r1, r2
    if(q->next == NULL)
 80032ae:	680a      	ldr	r2, [r1, #0]
 80032b0:	b192      	cbz	r2, 80032d8 <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d021      	beq.n	80032fa <low_level_output+0x76>
    Txbuffer[i].buffer = q->payload;
 80032b6:	6851      	ldr	r1, [r2, #4]
 80032b8:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80032bc:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80032c0:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
 80032c4:	f840 1c30 	str.w	r1, [r0, #-48]
    Txbuffer[i].len = q->len;
 80032c8:	8951      	ldrh	r1, [r2, #10]
 80032ca:	f840 1c2c 	str.w	r1, [r0, #-44]
    if(i>0)
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0ea      	beq.n	80032a8 <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 80032d2:	f844 4c04 	str.w	r4, [r4, #-4]
 80032d6:	e7e7      	b.n	80032a8 <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 80032d8:	f844 6c04 	str.w	r6, [r4, #-4]
  for(q = p; q != NULL; q = q->next)
 80032dc:	680a      	ldr	r2, [r1, #0]
 80032de:	2a00      	cmp	r2, #0
 80032e0:	d1e7      	bne.n	80032b2 <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 80032e2:	4908      	ldr	r1, [pc, #32]	; (8003304 <low_level_output+0x80>)
 80032e4:	892b      	ldrh	r3, [r5, #8]
 80032e6:	604b      	str	r3, [r1, #4]
  TxConfig.TxBuffer = Txbuffer;
 80032e8:	f8c1 d008 	str.w	sp, [r1, #8]
  TxConfig.pData = p;
 80032ec:	634d      	str	r5, [r1, #52]	; 0x34
  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80032ee:	2214      	movs	r2, #20
 80032f0:	4805      	ldr	r0, [pc, #20]	; (8003308 <low_level_output+0x84>)
 80032f2:	f7fe fa85 	bl	8001800 <HAL_ETH_Transmit>
  return errval;
 80032f6:	2000      	movs	r0, #0
 80032f8:	e001      	b.n	80032fe <low_level_output+0x7a>
      return ERR_IF;
 80032fa:	f06f 000b 	mvn.w	r0, #11
}
 80032fe:	b00c      	add	sp, #48	; 0x30
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	bf00      	nop
 8003304:	20000804 	.word	0x20000804
 8003308:	2000083c 	.word	0x2000083c

0800330c <pbuf_free_custom>:
{
 800330c:	b508      	push	{r3, lr}
 800330e:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003310:	4805      	ldr	r0, [pc, #20]	; (8003328 <pbuf_free_custom+0x1c>)
 8003312:	f000 fd1b 	bl	8003d4c <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <pbuf_free_custom+0x20>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d000      	beq.n	8003320 <pbuf_free_custom+0x14>
}
 800331e:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 8003320:	4b02      	ldr	r3, [pc, #8]	; (800332c <pbuf_free_custom+0x20>)
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
}
 8003326:	e7fa      	b.n	800331e <pbuf_free_custom+0x12>
 8003328:	0800bb14 	.word	0x0800bb14
 800332c:	20000800 	.word	0x20000800

08003330 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003330:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003332:	f7fd fe53 	bl	8000fdc <HAL_GetTick>
}
 8003336:	bd08      	pop	{r3, pc}

08003338 <ETH_PHY_IO_Init>:
{
 8003338:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 800333a:	4802      	ldr	r0, [pc, #8]	; (8003344 <ETH_PHY_IO_Init+0xc>)
 800333c:	f7fe fcc0 	bl	8001cc0 <HAL_ETH_SetMDIOClockRange>
}
 8003340:	2000      	movs	r0, #0
 8003342:	bd08      	pop	{r3, pc}
 8003344:	2000083c 	.word	0x2000083c

08003348 <ETH_PHY_IO_ReadReg>:
{
 8003348:	b508      	push	{r3, lr}
 800334a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800334c:	460a      	mov	r2, r1
 800334e:	4601      	mov	r1, r0
 8003350:	4803      	ldr	r0, [pc, #12]	; (8003360 <ETH_PHY_IO_ReadReg+0x18>)
 8003352:	f7fe fbe7 	bl	8001b24 <HAL_ETH_ReadPHYRegister>
 8003356:	3800      	subs	r0, #0
 8003358:	bf18      	it	ne
 800335a:	2001      	movne	r0, #1
}
 800335c:	4240      	negs	r0, r0
 800335e:	bd08      	pop	{r3, pc}
 8003360:	2000083c 	.word	0x2000083c

08003364 <ETH_PHY_IO_WriteReg>:
{
 8003364:	b508      	push	{r3, lr}
 8003366:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8003368:	460a      	mov	r2, r1
 800336a:	4601      	mov	r1, r0
 800336c:	4803      	ldr	r0, [pc, #12]	; (800337c <ETH_PHY_IO_WriteReg+0x18>)
 800336e:	f7fe fbff 	bl	8001b70 <HAL_ETH_WritePHYRegister>
 8003372:	3800      	subs	r0, #0
 8003374:	bf18      	it	ne
 8003376:	2001      	movne	r0, #1
}
 8003378:	4240      	negs	r0, r0
 800337a:	bd08      	pop	{r3, pc}
 800337c:	2000083c 	.word	0x2000083c

08003380 <ethernetif_input>:
{
 8003380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	4605      	mov	r5, r0
  struct pbuf *p = NULL;
 8003388:	2700      	movs	r7, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 800338a:	4e0d      	ldr	r6, [pc, #52]	; (80033c0 <ethernetif_input+0x40>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 800338c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80033c4 <ethernetif_input+0x44>
 8003390:	e00a      	b.n	80033a8 <ethernetif_input+0x28>
 8003392:	a901      	add	r1, sp, #4
 8003394:	4640      	mov	r0, r8
 8003396:	f7fe fa98 	bl	80018ca <HAL_ETH_ReadData>
  return p;
 800339a:	9c01      	ldr	r4, [sp, #4]
    if (p != NULL)
 800339c:	b144      	cbz	r4, 80033b0 <ethernetif_input+0x30>
      if (netif->input( p, netif) != ERR_OK )
 800339e:	692b      	ldr	r3, [r5, #16]
 80033a0:	4629      	mov	r1, r5
 80033a2:	4620      	mov	r0, r4
 80033a4:	4798      	blx	r3
 80033a6:	b930      	cbnz	r0, 80033b6 <ethernetif_input+0x36>
  struct pbuf *p = NULL;
 80033a8:	9701      	str	r7, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 80033aa:	7833      	ldrb	r3, [r6, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d0f0      	beq.n	8003392 <ethernetif_input+0x12>
}
 80033b0:	b002      	add	sp, #8
 80033b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pbuf_free(p);
 80033b6:	4620      	mov	r0, r4
 80033b8:	f000 ff9c 	bl	80042f4 <pbuf_free>
  } while(p!=NULL);
 80033bc:	e7f4      	b.n	80033a8 <ethernetif_input+0x28>
 80033be:	bf00      	nop
 80033c0:	20000800 	.word	0x20000800
 80033c4:	2000083c 	.word	0x2000083c

080033c8 <sys_now>:
{
 80033c8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80033ca:	f7fd fe07 	bl	8000fdc <HAL_GetTick>
}
 80033ce:	bd08      	pop	{r3, pc}

080033d0 <HAL_ETH_MspInit>:
{
 80033d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d2:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d4:	2300      	movs	r3, #0
 80033d6:	9307      	str	r3, [sp, #28]
 80033d8:	9308      	str	r3, [sp, #32]
 80033da:	9309      	str	r3, [sp, #36]	; 0x24
 80033dc:	930a      	str	r3, [sp, #40]	; 0x28
 80033de:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80033e0:	6802      	ldr	r2, [r0, #0]
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <HAL_ETH_MspInit+0x118>)
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_ETH_MspInit+0x1c>
}
 80033e8:	b00d      	add	sp, #52	; 0x34
 80033ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 80033ec:	2400      	movs	r4, #0
 80033ee:	9400      	str	r4, [sp, #0]
 80033f0:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 80033f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033f6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
 80033fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033fe:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003402:	9200      	str	r2, [sp, #0]
 8003404:	9a00      	ldr	r2, [sp, #0]
 8003406:	9401      	str	r4, [sp, #4]
 8003408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800340e:	631a      	str	r2, [r3, #48]	; 0x30
 8003410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003412:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003416:	9201      	str	r2, [sp, #4]
 8003418:	9a01      	ldr	r2, [sp, #4]
 800341a:	9402      	str	r4, [sp, #8]
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
 8003424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003426:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800342a:	9202      	str	r2, [sp, #8]
 800342c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800342e:	9403      	str	r4, [sp, #12]
 8003430:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003432:	f042 0204 	orr.w	r2, r2, #4
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
 8003438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343a:	f002 0204 	and.w	r2, r2, #4
 800343e:	9203      	str	r2, [sp, #12]
 8003440:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	9404      	str	r4, [sp, #16]
 8003444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
 800344c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344e:	f002 0201 	and.w	r2, r2, #1
 8003452:	9204      	str	r2, [sp, #16]
 8003454:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003456:	9405      	str	r4, [sp, #20]
 8003458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345a:	f042 0202 	orr.w	r2, r2, #2
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
 8003460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003462:	f002 0202 	and.w	r2, r2, #2
 8003466:	9205      	str	r2, [sp, #20]
 8003468:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800346a:	9406      	str	r4, [sp, #24]
 800346c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800346e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347a:	9306      	str	r3, [sp, #24]
 800347c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800347e:	2332      	movs	r3, #50	; 0x32
 8003480:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2702      	movs	r7, #2
 8003484:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003486:	2603      	movs	r6, #3
 8003488:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800348a:	250b      	movs	r5, #11
 800348c:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800348e:	a907      	add	r1, sp, #28
 8003490:	4816      	ldr	r0, [pc, #88]	; (80034ec <HAL_ETH_MspInit+0x11c>)
 8003492:	f7fe fc4f 	bl	8001d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003496:	2386      	movs	r3, #134	; 0x86
 8003498:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034a0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a2:	a907      	add	r1, sp, #28
 80034a4:	4812      	ldr	r0, [pc, #72]	; (80034f0 <HAL_ETH_MspInit+0x120>)
 80034a6:	f7fe fc45 	bl	8001d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80034aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ae:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034b6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80034b8:	a907      	add	r1, sp, #28
 80034ba:	480e      	ldr	r0, [pc, #56]	; (80034f4 <HAL_ETH_MspInit+0x124>)
 80034bc:	f7fe fc3a 	bl	8001d34 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80034c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80034c4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ca:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034cc:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034ce:	a907      	add	r1, sp, #28
 80034d0:	4809      	ldr	r0, [pc, #36]	; (80034f8 <HAL_ETH_MspInit+0x128>)
 80034d2:	f7fe fc2f 	bl	8001d34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80034d6:	4622      	mov	r2, r4
 80034d8:	4621      	mov	r1, r4
 80034da:	203d      	movs	r0, #61	; 0x3d
 80034dc:	f7fd fdaa 	bl	8001034 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80034e0:	203d      	movs	r0, #61	; 0x3d
 80034e2:	f7fd fddd 	bl	80010a0 <HAL_NVIC_EnableIRQ>
}
 80034e6:	e77f      	b.n	80033e8 <HAL_ETH_MspInit+0x18>
 80034e8:	40028000 	.word	0x40028000
 80034ec:	40020800 	.word	0x40020800
 80034f0:	40020000 	.word	0x40020000
 80034f4:	40020400 	.word	0x40020400
 80034f8:	40021800 	.word	0x40021800

080034fc <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	b09b      	sub	sp, #108	; 0x6c
 8003500:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003502:	2264      	movs	r2, #100	; 0x64
 8003504:	2100      	movs	r1, #0
 8003506:	a801      	add	r0, sp, #4
 8003508:	f007 f892 	bl	800a630 <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800350c:	4824      	ldr	r0, [pc, #144]	; (80035a0 <ethernet_link_check_state+0xa4>)
 800350e:	f7fd fcb9 	bl	8000e84 <LAN8742_GetLinkState>

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003512:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003516:	f013 0f04 	tst.w	r3, #4
 800351a:	d010      	beq.n	800353e <ethernet_link_check_state+0x42>
 800351c:	2801      	cmp	r0, #1
 800351e:	dd04      	ble.n	800352a <ethernet_link_check_state+0x2e>
  {
    HAL_ETH_Stop(&heth);
    netif_set_down(netif);
    netif_set_link_down(netif);
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003520:	f013 0f04 	tst.w	r3, #4
 8003524:	d010      	beq.n	8003548 <ethernet_link_check_state+0x4c>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8003526:	b01b      	add	sp, #108	; 0x6c
 8003528:	bdf0      	pop	{r4, r5, r6, r7, pc}
    HAL_ETH_Stop(&heth);
 800352a:	481e      	ldr	r0, [pc, #120]	; (80035a4 <ethernet_link_check_state+0xa8>)
 800352c:	f7fe f930 	bl	8001790 <HAL_ETH_Stop>
    netif_set_down(netif);
 8003530:	4620      	mov	r0, r4
 8003532:	f000 fd89 	bl	8004048 <netif_set_down>
    netif_set_link_down(netif);
 8003536:	4620      	mov	r0, r4
 8003538:	f000 fdca 	bl	80040d0 <netif_set_link_down>
 800353c:	e7f3      	b.n	8003526 <ethernet_link_check_state+0x2a>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800353e:	f013 0f04 	tst.w	r3, #4
 8003542:	d1f0      	bne.n	8003526 <ethernet_link_check_state+0x2a>
 8003544:	2801      	cmp	r0, #1
 8003546:	ddee      	ble.n	8003526 <ethernet_link_check_state+0x2a>
    switch (PHYLinkState)
 8003548:	1e83      	subs	r3, r0, #2
 800354a:	2b03      	cmp	r3, #3
 800354c:	d8eb      	bhi.n	8003526 <ethernet_link_check_state+0x2a>
 800354e:	e8df f003 	tbb	[pc, r3]
 8003552:	021d      	.short	0x021d
 8003554:	1a22      	.short	0x1a22
 8003556:	2500      	movs	r5, #0
 8003558:	f44f 4780 	mov.w	r7, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800355c:	4e11      	ldr	r6, [pc, #68]	; (80035a4 <ethernet_link_check_state+0xa8>)
 800355e:	a901      	add	r1, sp, #4
 8003560:	4630      	mov	r0, r6
 8003562:	f7fe fb2a 	bl	8001bba <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003566:	9507      	str	r5, [sp, #28]
      MACConf.Speed = speed;
 8003568:	9706      	str	r7, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800356a:	a901      	add	r1, sp, #4
 800356c:	4630      	mov	r0, r6
 800356e:	f7fe fb98 	bl	8001ca2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8003572:	4630      	mov	r0, r6
 8003574:	f7fe f8d0 	bl	8001718 <HAL_ETH_Start>
      netif_set_up(netif);
 8003578:	4620      	mov	r0, r4
 800357a:	f000 fd47 	bl	800400c <netif_set_up>
      netif_set_link_up(netif);
 800357e:	4620      	mov	r0, r4
 8003580:	f000 fd82 	bl	8004088 <netif_set_link_up>
 8003584:	e7cf      	b.n	8003526 <ethernet_link_check_state+0x2a>
      duplex = ETH_HALFDUPLEX_MODE;
 8003586:	2500      	movs	r5, #0
      speed = ETH_SPEED_10M;
 8003588:	462f      	mov	r7, r5
      break;
 800358a:	e7e7      	b.n	800355c <ethernet_link_check_state+0x60>
      duplex = ETH_FULLDUPLEX_MODE;
 800358c:	f44f 6500 	mov.w	r5, #2048	; 0x800
      speed = ETH_SPEED_100M;
 8003590:	f44f 4780 	mov.w	r7, #16384	; 0x4000
 8003594:	e7e2      	b.n	800355c <ethernet_link_check_state+0x60>
      duplex = ETH_FULLDUPLEX_MODE;
 8003596:	f44f 6500 	mov.w	r5, #2048	; 0x800
      speed = ETH_SPEED_10M;
 800359a:	2700      	movs	r7, #0
 800359c:	e7de      	b.n	800355c <ethernet_link_check_state+0x60>
 800359e:	bf00      	nop
 80035a0:	200007e0 	.word	0x200007e0
 80035a4:	2000083c 	.word	0x2000083c

080035a8 <ethernetif_init>:
{
 80035a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ac:	b082      	sub	sp, #8
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80035ae:	4604      	mov	r4, r0
 80035b0:	2800      	cmp	r0, #0
 80035b2:	d06c      	beq.n	800368e <ethernetif_init+0xe6>
  netif->name[0] = IFNAME0;
 80035b4:	2373      	movs	r3, #115	; 0x73
 80035b6:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80035ba:	2374      	movs	r3, #116	; 0x74
 80035bc:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 80035c0:	4b38      	ldr	r3, [pc, #224]	; (80036a4 <ethernetif_init+0xfc>)
 80035c2:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <ethernetif_init+0x100>)
 80035c6:	61a3      	str	r3, [r4, #24]
  heth.Instance = ETH;
 80035c8:	4d38      	ldr	r5, [pc, #224]	; (80036ac <ethernetif_init+0x104>)
 80035ca:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <ethernetif_init+0x108>)
 80035cc:	602b      	str	r3, [r5, #0]
  MACAddr[0] = 0x00;
 80035ce:	2600      	movs	r6, #0
 80035d0:	f88d 6000 	strb.w	r6, [sp]
  MACAddr[1] = 0x80;
 80035d4:	2380      	movs	r3, #128	; 0x80
 80035d6:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 80035da:	23e1      	movs	r3, #225	; 0xe1
 80035dc:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 80035e0:	f88d 6003 	strb.w	r6, [sp, #3]
  MACAddr[4] = 0x00;
 80035e4:	f88d 6004 	strb.w	r6, [sp, #4]
  MACAddr[5] = 0x00;
 80035e8:	f88d 6005 	strb.w	r6, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80035ec:	f8c5 d004 	str.w	sp, [r5, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80035f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80035f4:	60ab      	str	r3, [r5, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80035f6:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <ethernetif_init+0x10c>)
 80035f8:	60eb      	str	r3, [r5, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80035fa:	4b2f      	ldr	r3, [pc, #188]	; (80036b8 <ethernetif_init+0x110>)
 80035fc:	612b      	str	r3, [r5, #16]
  heth.Init.RxBuffLen = 1536;
 80035fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003602:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003604:	4628      	mov	r0, r5
 8003606:	f7fd ff73 	bl	80014f0 <HAL_ETH_Init>
 800360a:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800360c:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 80036d4 <ethernetif_init+0x12c>
 8003610:	2234      	movs	r2, #52	; 0x34
 8003612:	4631      	mov	r1, r6
 8003614:	f108 0004 	add.w	r0, r8, #4
 8003618:	f007 f80a 	bl	800a630 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800361c:	2321      	movs	r3, #33	; 0x21
 800361e:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003622:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003626:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800362a:	4824      	ldr	r0, [pc, #144]	; (80036bc <ethernetif_init+0x114>)
 800362c:	f000 fb3a 	bl	8003ca4 <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003630:	2306      	movs	r3, #6
 8003632:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003636:	686b      	ldr	r3, [r5, #4]
 8003638:	781a      	ldrb	r2, [r3, #0]
 800363a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800363e:	785a      	ldrb	r2, [r3, #1]
 8003640:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003644:	789a      	ldrb	r2, [r3, #2]
 8003646:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800364a:	78da      	ldrb	r2, [r3, #3]
 800364c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003650:	791a      	ldrb	r2, [r3, #4]
 8003652:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003656:	795b      	ldrb	r3, [r3, #5]
 8003658:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 800365c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8003660:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003662:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003666:	f043 030a 	orr.w	r3, r3, #10
 800366a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800366e:	4d14      	ldr	r5, [pc, #80]	; (80036c0 <ethernetif_init+0x118>)
 8003670:	4914      	ldr	r1, [pc, #80]	; (80036c4 <ethernetif_init+0x11c>)
 8003672:	4628      	mov	r0, r5
 8003674:	f7fd fb7b 	bl	8000d6e <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003678:	4628      	mov	r0, r5
 800367a:	f7fd fb97 	bl	8000dac <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800367e:	b977      	cbnz	r7, 800369e <ethernetif_init+0xf6>
  ethernet_link_check_state(netif);
 8003680:	4620      	mov	r0, r4
 8003682:	f7ff ff3b 	bl	80034fc <ethernet_link_check_state>
}
 8003686:	2000      	movs	r0, #0
 8003688:	b002      	add	sp, #8
 800368a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <ethernetif_init+0x120>)
 8003690:	f240 126b 	movw	r2, #363	; 0x16b
 8003694:	490d      	ldr	r1, [pc, #52]	; (80036cc <ethernetif_init+0x124>)
 8003696:	480e      	ldr	r0, [pc, #56]	; (80036d0 <ethernetif_init+0x128>)
 8003698:	f006 ffd2 	bl	800a640 <iprintf>
 800369c:	e78a      	b.n	80035b4 <ethernetif_init+0xc>
    Error_Handler();
 800369e:	f7fd f8c3 	bl	8000828 <Error_Handler>
 80036a2:	e7f0      	b.n	8003686 <ethernetif_init+0xde>
 80036a4:	080093bd 	.word	0x080093bd
 80036a8:	08003285 	.word	0x08003285
 80036ac:	2000083c 	.word	0x2000083c
 80036b0:	40028000 	.word	0x40028000
 80036b4:	20000740 	.word	0x20000740
 80036b8:	200006a0 	.word	0x200006a0
 80036bc:	0800bb14 	.word	0x0800bb14
 80036c0:	200007e0 	.word	0x200007e0
 80036c4:	2000000c 	.word	0x2000000c
 80036c8:	0800bae8 	.word	0x0800bae8
 80036cc:	0800bb04 	.word	0x0800bb04
 80036d0:	0800baa0 	.word	0x0800baa0
 80036d4:	20000804 	.word	0x20000804

080036d8 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80036d8:	b510      	push	{r4, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80036de:	480e      	ldr	r0, [pc, #56]	; (8003718 <HAL_ETH_RxAllocateCallback+0x40>)
 80036e0:	f000 fb04 	bl	8003cec <memp_malloc_pool>
  if (p)
 80036e4:	b188      	cbz	r0, 800370a <HAL_ETH_RxAllocateCallback+0x32>
 80036e6:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80036e8:	f100 0220 	add.w	r2, r0, #32
 80036ec:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80036ee:	4a0b      	ldr	r2, [pc, #44]	; (800371c <HAL_ETH_RxAllocateCallback+0x44>)
 80036f0:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80036f2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80036f6:	9201      	str	r2, [sp, #4]
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	9200      	str	r2, [sp, #0]
 80036fc:	2241      	movs	r2, #65	; 0x41
 80036fe:	2100      	movs	r1, #0
 8003700:	4608      	mov	r0, r1
 8003702:	f000 fd95 	bl	8004230 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003706:	b002      	add	sp, #8
 8003708:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 800370a:	4b05      	ldr	r3, [pc, #20]	; (8003720 <HAL_ETH_RxAllocateCallback+0x48>)
 800370c:	2201      	movs	r2, #1
 800370e:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	6023      	str	r3, [r4, #0]
}
 8003714:	e7f7      	b.n	8003706 <HAL_ETH_RxAllocateCallback+0x2e>
 8003716:	bf00      	nop
 8003718:	0800bb14 	.word	0x0800bb14
 800371c:	0800330d 	.word	0x0800330d
 8003720:	20000800 	.word	0x20000800

08003724 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003724:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003726:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 800372a:	2500      	movs	r5, #0
 800372c:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003730:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 8003734:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 8003738:	6802      	ldr	r2, [r0, #0]
 800373a:	b162      	cbz	r2, 8003756 <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800373c:	680a      	ldr	r2, [r1, #0]
 800373e:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 8003740:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003742:	6802      	ldr	r2, [r0, #0]
 8003744:	b12a      	cbz	r2, 8003752 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8003746:	8911      	ldrh	r1, [r2, #8]
 8003748:	4419      	add	r1, r3
 800374a:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	2a00      	cmp	r2, #0
 8003750:	d1f9      	bne.n	8003746 <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003752:	bc30      	pop	{r4, r5}
 8003754:	4770      	bx	lr
    *ppStart = p;
 8003756:	6004      	str	r4, [r0, #0]
 8003758:	e7f2      	b.n	8003740 <HAL_ETH_RxLinkCallback+0x1c>

0800375a <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 800375a:	0a03      	lsrs	r3, r0, #8
 800375c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8003760:	b280      	uxth	r0, r0
 8003762:	4770      	bx	lr

08003764 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8003764:	0e03      	lsrs	r3, r0, #24
 8003766:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800376a:	0202      	lsls	r2, r0, #8
 800376c:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8003770:	4313      	orrs	r3, r2
 8003772:	0a00      	lsrs	r0, r0, #8
 8003774:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 8003778:	4318      	orrs	r0, r3
 800377a:	4770      	bx	lr

0800377c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800377c:	b508      	push	{r3, lr}
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800377e:	f000 f80b 	bl	8003798 <mem_init>
  memp_init();
 8003782:	f000 faa5 	bl	8003cd0 <memp_init>
  pbuf_init();
  netif_init();
 8003786:	f000 fb71 	bl	8003e6c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800378a:	f005 f98f 	bl	8008aac <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800378e:	f001 f947 	bl	8004a20 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003792:	f005 f947 	bl	8008a24 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003796:	bd08      	pop	{r3, pc}

08003798 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <mem_init+0x34>)
 800379a:	f023 0303 	bic.w	r3, r3, #3
 800379e:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <mem_init+0x38>)
 80037a0:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80037a2:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80037a6:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 80037a8:	2200      	movs	r2, #0
 80037aa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80037ac:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 80037ae:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80037b0:	4a08      	ldr	r2, [pc, #32]	; (80037d4 <mem_init+0x3c>)
 80037b2:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 80037b4:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80037b8:	2001      	movs	r0, #1
 80037ba:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 80037be:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 80037c2:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80037c6:	4a04      	ldr	r2, [pc, #16]	; (80037d8 <mem_init+0x40>)
 80037c8:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 80037ca:	4770      	bx	lr
 80037cc:	2000529b 	.word	0x2000529b
 80037d0:	20005290 	.word	0x20005290
 80037d4:	20005294 	.word	0x20005294
 80037d8:	2000528c 	.word	0x2000528c

080037dc <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80037dc:	2800      	cmp	r0, #0
 80037de:	f000 80ad 	beq.w	800393c <mem_free+0x160>
{
 80037e2:	b538      	push	{r3, r4, r5, lr}
 80037e4:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80037e6:	f010 0f03 	tst.w	r0, #3
 80037ea:	d169      	bne.n	80038c0 <mem_free+0xe4>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80037ec:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <mem_free+0x164>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	42ab      	cmp	r3, r5
 80037f6:	d86b      	bhi.n	80038d0 <mem_free+0xf4>
 80037f8:	4a52      	ldr	r2, [pc, #328]	; (8003944 <mem_free+0x168>)
 80037fa:	6812      	ldr	r2, [r2, #0]
 80037fc:	f100 010c 	add.w	r1, r0, #12
 8003800:	428a      	cmp	r2, r1
 8003802:	d365      	bcc.n	80038d0 <mem_free+0xf4>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003804:	f810 1c04 	ldrb.w	r1, [r0, #-4]
 8003808:	2900      	cmp	r1, #0
 800380a:	d069      	beq.n	80038e0 <mem_free+0x104>
  nmem = ptr_to_mem(mem->next);
 800380c:	f830 1c08 	ldrh.w	r1, [r0, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003810:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8003814:	f200 808a 	bhi.w	800392c <mem_free+0x150>
  pmem = ptr_to_mem(mem->prev);
 8003818:	f830 cc06 	ldrh.w	ip, [r0, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800381c:	f5bc 5f20 	cmp.w	ip, #10240	; 0x2800
 8003820:	f200 8084 	bhi.w	800392c <mem_free+0x150>
  return (mem_size_t)((u8_t *)mem - ram);
 8003824:	1ae8      	subs	r0, r5, r3
 8003826:	b280      	uxth	r0, r0
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003828:	4584      	cmp	ip, r0
 800382a:	d003      	beq.n	8003834 <mem_free+0x58>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800382c:	f833 c00c 	ldrh.w	ip, [r3, ip]
 8003830:	4584      	cmp	ip, r0
 8003832:	d17b      	bne.n	800392c <mem_free+0x150>
  return (struct mem *)(void *)&ram[ptr];
 8003834:	440b      	add	r3, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d002      	beq.n	8003840 <mem_free+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800383a:	885b      	ldrh	r3, [r3, #2]
 800383c:	4283      	cmp	r3, r0
 800383e:	d175      	bne.n	800392c <mem_free+0x150>
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  /* mem is now unused. */
  mem->used = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	f804 3c04 	strb.w	r3, [r4, #-4]

  if (mem < lfree) {
 8003846:	4b40      	ldr	r3, [pc, #256]	; (8003948 <mem_free+0x16c>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	42ab      	cmp	r3, r5
 800384c:	d901      	bls.n	8003852 <mem_free+0x76>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800384e:	4b3e      	ldr	r3, [pc, #248]	; (8003948 <mem_free+0x16c>)
 8003850:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003852:	42aa      	cmp	r2, r5
 8003854:	d94c      	bls.n	80038f0 <mem_free+0x114>
  return (struct mem *)(void *)&ram[ptr];
 8003856:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <mem_free+0x164>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800385e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003860:	4295      	cmp	r5, r2
 8003862:	d015      	beq.n	8003890 <mem_free+0xb4>
 8003864:	7910      	ldrb	r0, [r2, #4]
 8003866:	b998      	cbnz	r0, 8003890 <mem_free+0xb4>
 8003868:	4836      	ldr	r0, [pc, #216]	; (8003944 <mem_free+0x168>)
 800386a:	6800      	ldr	r0, [r0, #0]
 800386c:	4290      	cmp	r0, r2
 800386e:	d00f      	beq.n	8003890 <mem_free+0xb4>
    if (lfree == nmem) {
 8003870:	4835      	ldr	r0, [pc, #212]	; (8003948 <mem_free+0x16c>)
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	4290      	cmp	r0, r2
      lfree = mem;
 8003876:	bf04      	itt	eq
 8003878:	4a33      	ldreq	r2, [pc, #204]	; (8003948 <mem_free+0x16c>)
 800387a:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 800387c:	5a5a      	ldrh	r2, [r3, r1]
 800387e:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003882:	5a5a      	ldrh	r2, [r3, r1]
 8003884:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003888:	d002      	beq.n	8003890 <mem_free+0xb4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800388a:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800388c:	1ae9      	subs	r1, r5, r3
 800388e:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8003890:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8003894:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8003896:	4295      	cmp	r5, r2
 8003898:	d021      	beq.n	80038de <mem_free+0x102>
 800389a:	7910      	ldrb	r0, [r2, #4]
 800389c:	b9f8      	cbnz	r0, 80038de <mem_free+0x102>
    if (lfree == mem) {
 800389e:	482a      	ldr	r0, [pc, #168]	; (8003948 <mem_free+0x16c>)
 80038a0:	6800      	ldr	r0, [r0, #0]
 80038a2:	4285      	cmp	r5, r0
      lfree = pmem;
 80038a4:	bf04      	itt	eq
 80038a6:	4828      	ldreq	r0, [pc, #160]	; (8003948 <mem_free+0x16c>)
 80038a8:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 80038aa:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80038ae:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80038b0:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80038b4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 80038b8:	d011      	beq.n	80038de <mem_free+0x102>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80038ba:	4413      	add	r3, r2
 80038bc:	8059      	strh	r1, [r3, #2]
  plug_holes(mem);
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80038be:	e00e      	b.n	80038de <mem_free+0x102>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80038c0:	4b22      	ldr	r3, [pc, #136]	; (800394c <mem_free+0x170>)
 80038c2:	f240 2273 	movw	r2, #627	; 0x273
 80038c6:	4922      	ldr	r1, [pc, #136]	; (8003950 <mem_free+0x174>)
 80038c8:	4822      	ldr	r0, [pc, #136]	; (8003954 <mem_free+0x178>)
 80038ca:	f006 feb9 	bl	800a640 <iprintf>
    return;
 80038ce:	e006      	b.n	80038de <mem_free+0x102>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80038d0:	4b1e      	ldr	r3, [pc, #120]	; (800394c <mem_free+0x170>)
 80038d2:	f240 227f 	movw	r2, #639	; 0x27f
 80038d6:	4920      	ldr	r1, [pc, #128]	; (8003958 <mem_free+0x17c>)
 80038d8:	481e      	ldr	r0, [pc, #120]	; (8003954 <mem_free+0x178>)
 80038da:	f006 feb1 	bl	800a640 <iprintf>
}
 80038de:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80038e0:	4b1a      	ldr	r3, [pc, #104]	; (800394c <mem_free+0x170>)
 80038e2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80038e6:	491d      	ldr	r1, [pc, #116]	; (800395c <mem_free+0x180>)
 80038e8:	481a      	ldr	r0, [pc, #104]	; (8003954 <mem_free+0x178>)
 80038ea:	f006 fea9 	bl	800a640 <iprintf>
    return;
 80038ee:	e7f6      	b.n	80038de <mem_free+0x102>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80038f0:	4b16      	ldr	r3, [pc, #88]	; (800394c <mem_free+0x170>)
 80038f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80038f6:	491a      	ldr	r1, [pc, #104]	; (8003960 <mem_free+0x184>)
 80038f8:	4816      	ldr	r0, [pc, #88]	; (8003954 <mem_free+0x178>)
 80038fa:	f006 fea1 	bl	800a640 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80038fe:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8003902:	b133      	cbz	r3, 8003912 <mem_free+0x136>
 8003904:	4b11      	ldr	r3, [pc, #68]	; (800394c <mem_free+0x170>)
 8003906:	f240 12e1 	movw	r2, #481	; 0x1e1
 800390a:	4916      	ldr	r1, [pc, #88]	; (8003964 <mem_free+0x188>)
 800390c:	4811      	ldr	r0, [pc, #68]	; (8003954 <mem_free+0x178>)
 800390e:	f006 fe97 	bl	800a640 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003912:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8003916:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800391a:	d99c      	bls.n	8003856 <mem_free+0x7a>
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <mem_free+0x170>)
 800391e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003922:	4911      	ldr	r1, [pc, #68]	; (8003968 <mem_free+0x18c>)
 8003924:	480b      	ldr	r0, [pc, #44]	; (8003954 <mem_free+0x178>)
 8003926:	f006 fe8b 	bl	800a640 <iprintf>
 800392a:	e794      	b.n	8003856 <mem_free+0x7a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <mem_free+0x170>)
 800392e:	f240 2295 	movw	r2, #661	; 0x295
 8003932:	490e      	ldr	r1, [pc, #56]	; (800396c <mem_free+0x190>)
 8003934:	4807      	ldr	r0, [pc, #28]	; (8003954 <mem_free+0x178>)
 8003936:	f006 fe83 	bl	800a640 <iprintf>
    return;
 800393a:	e7d0      	b.n	80038de <mem_free+0x102>
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20005290 	.word	0x20005290
 8003944:	20005294 	.word	0x20005294
 8003948:	2000528c 	.word	0x2000528c
 800394c:	0800bb20 	.word	0x0800bb20
 8003950:	0800bb50 	.word	0x0800bb50
 8003954:	0800baa0 	.word	0x0800baa0
 8003958:	0800bb74 	.word	0x0800bb74
 800395c:	0800bb90 	.word	0x0800bb90
 8003960:	0800bbb8 	.word	0x0800bbb8
 8003964:	0800bbd4 	.word	0x0800bbd4
 8003968:	0800bbf0 	.word	0x0800bbf0
 800396c:	0800bc1c 	.word	0x0800bc1c

08003970 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003974:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003976:	1ccc      	adds	r4, r1, #3
 8003978:	f024 0403 	bic.w	r4, r4, #3
 800397c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800397e:	2c0b      	cmp	r4, #11
 8003980:	d904      	bls.n	800398c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003982:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8003986:	d902      	bls.n	800398e <mem_trim+0x1e>
    return NULL;
 8003988:	2500      	movs	r5, #0
 800398a:	e016      	b.n	80039ba <mem_trim+0x4a>
    newsize = MIN_SIZE_ALIGNED;
 800398c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800398e:	42a1      	cmp	r1, r4
 8003990:	f200 808e 	bhi.w	8003ab0 <mem_trim+0x140>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003994:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <mem_trim+0x144>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	42ab      	cmp	r3, r5
 800399a:	d803      	bhi.n	80039a4 <mem_trim+0x34>
 800399c:	4a46      	ldr	r2, [pc, #280]	; (8003ab8 <mem_trim+0x148>)
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	42aa      	cmp	r2, r5
 80039a2:	d811      	bhi.n	80039c8 <mem_trim+0x58>
 80039a4:	4b45      	ldr	r3, [pc, #276]	; (8003abc <mem_trim+0x14c>)
 80039a6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80039aa:	4945      	ldr	r1, [pc, #276]	; (8003ac0 <mem_trim+0x150>)
 80039ac:	4845      	ldr	r0, [pc, #276]	; (8003ac4 <mem_trim+0x154>)
 80039ae:	f006 fe47 	bl	800a640 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80039b2:	4b40      	ldr	r3, [pc, #256]	; (8003ab4 <mem_trim+0x144>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	42ab      	cmp	r3, r5
 80039b8:	d902      	bls.n	80039c0 <mem_trim+0x50>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80039ba:	4628      	mov	r0, r5
 80039bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80039c0:	4a3d      	ldr	r2, [pc, #244]	; (8003ab8 <mem_trim+0x148>)
 80039c2:	6812      	ldr	r2, [r2, #0]
 80039c4:	42aa      	cmp	r2, r5
 80039c6:	d9f8      	bls.n	80039ba <mem_trim+0x4a>
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80039c8:	f1a5 0608 	sub.w	r6, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 80039cc:	1af3      	subs	r3, r6, r3
 80039ce:	b29e      	uxth	r6, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80039d0:	f835 7c08 	ldrh.w	r7, [r5, #-8]
 80039d4:	f1a7 0308 	sub.w	r3, r7, #8
 80039d8:	1b9b      	subs	r3, r3, r6
 80039da:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80039dc:	42a3      	cmp	r3, r4
 80039de:	d326      	bcc.n	8003a2e <mem_trim+0xbe>
  if (newsize == size) {
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	d0ea      	beq.n	80039ba <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 80039e4:	4a33      	ldr	r2, [pc, #204]	; (8003ab4 <mem_trim+0x144>)
 80039e6:	f8d2 9000 	ldr.w	r9, [r2]
 80039ea:	eb09 0807 	add.w	r8, r9, r7
  if (mem2->used == 0) {
 80039ee:	f898 2004 	ldrb.w	r2, [r8, #4]
 80039f2:	2a00      	cmp	r2, #0
 80039f4:	d132      	bne.n	8003a5c <mem_trim+0xec>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80039f6:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 80039fa:	d021      	beq.n	8003a40 <mem_trim+0xd0>
    next = mem2->next;
 80039fc:	f839 0007 	ldrh.w	r0, [r9, r7]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003a00:	3408      	adds	r4, #8
 8003a02:	4434      	add	r4, r6
 8003a04:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8003a06:	4b30      	ldr	r3, [pc, #192]	; (8003ac8 <mem_trim+0x158>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4543      	cmp	r3, r8
 8003a0c:	d020      	beq.n	8003a50 <mem_trim+0xe0>
  return (struct mem *)(void *)&ram[ptr];
 8003a0e:	4b29      	ldr	r3, [pc, #164]	; (8003ab4 <mem_trim+0x144>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 8003a14:	2100      	movs	r1, #0
 8003a16:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8003a18:	5318      	strh	r0, [r3, r4]
    mem2->prev = ptr;
 8003a1a:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8003a1c:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003a20:	5b1a      	ldrh	r2, [r3, r4]
 8003a22:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003a26:	d0c8      	beq.n	80039ba <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003a28:	4413      	add	r3, r2
 8003a2a:	805c      	strh	r4, [r3, #2]
 8003a2c:	e7c5      	b.n	80039ba <mem_trim+0x4a>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003a2e:	4b23      	ldr	r3, [pc, #140]	; (8003abc <mem_trim+0x14c>)
 8003a30:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003a34:	4925      	ldr	r1, [pc, #148]	; (8003acc <mem_trim+0x15c>)
 8003a36:	4823      	ldr	r0, [pc, #140]	; (8003ac4 <mem_trim+0x154>)
 8003a38:	f006 fe02 	bl	800a640 <iprintf>
    return NULL;
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	e7bc      	b.n	80039ba <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003a40:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <mem_trim+0x14c>)
 8003a42:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003a46:	4922      	ldr	r1, [pc, #136]	; (8003ad0 <mem_trim+0x160>)
 8003a48:	481e      	ldr	r0, [pc, #120]	; (8003ac4 <mem_trim+0x154>)
 8003a4a:	f006 fdf9 	bl	800a640 <iprintf>
 8003a4e:	e7d5      	b.n	80039fc <mem_trim+0x8c>
  return (struct mem *)(void *)&ram[ptr];
 8003a50:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <mem_trim+0x144>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 8003a56:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <mem_trim+0x158>)
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	e7d8      	b.n	8003a0e <mem_trim+0x9e>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003a5c:	f104 0214 	add.w	r2, r4, #20
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d8aa      	bhi.n	80039ba <mem_trim+0x4a>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003a64:	3408      	adds	r4, #8
 8003a66:	4434      	add	r4, r6
 8003a68:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003a6a:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8003a6e:	d017      	beq.n	8003aa0 <mem_trim+0x130>
  return (struct mem *)(void *)&ram[ptr];
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <mem_trim+0x144>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8003a76:	4914      	ldr	r1, [pc, #80]	; (8003ac8 <mem_trim+0x158>)
 8003a78:	6809      	ldr	r1, [r1, #0]
 8003a7a:	4291      	cmp	r1, r2
      lfree = mem2;
 8003a7c:	bf84      	itt	hi
 8003a7e:	4912      	ldrhi	r1, [pc, #72]	; (8003ac8 <mem_trim+0x158>)
 8003a80:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8003a82:	2100      	movs	r1, #0
 8003a84:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8003a86:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8003a8a:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8003a8c:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8003a8e:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003a92:	5b1a      	ldrh	r2, [r3, r4]
 8003a94:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003a98:	d08f      	beq.n	80039ba <mem_trim+0x4a>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003a9a:	4413      	add	r3, r2
 8003a9c:	805c      	strh	r4, [r3, #2]
 8003a9e:	e78c      	b.n	80039ba <mem_trim+0x4a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003aa0:	4b06      	ldr	r3, [pc, #24]	; (8003abc <mem_trim+0x14c>)
 8003aa2:	f240 3216 	movw	r2, #790	; 0x316
 8003aa6:	490a      	ldr	r1, [pc, #40]	; (8003ad0 <mem_trim+0x160>)
 8003aa8:	4806      	ldr	r0, [pc, #24]	; (8003ac4 <mem_trim+0x154>)
 8003aaa:	f006 fdc9 	bl	800a640 <iprintf>
 8003aae:	e7df      	b.n	8003a70 <mem_trim+0x100>
    return NULL;
 8003ab0:	2500      	movs	r5, #0
 8003ab2:	e782      	b.n	80039ba <mem_trim+0x4a>
 8003ab4:	20005290 	.word	0x20005290
 8003ab8:	20005294 	.word	0x20005294
 8003abc:	0800bb20 	.word	0x0800bb20
 8003ac0:	0800bc50 	.word	0x0800bc50
 8003ac4:	0800baa0 	.word	0x0800baa0
 8003ac8:	2000528c 	.word	0x2000528c
 8003acc:	0800bc68 	.word	0x0800bc68
 8003ad0:	0800bc88 	.word	0x0800bc88

08003ad4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	f000 8093 	beq.w	8003c00 <mem_malloc+0x12c>
{
 8003ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003adc:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003ade:	3003      	adds	r0, #3
 8003ae0:	f020 0003 	bic.w	r0, r0, #3
 8003ae4:	b280      	uxth	r0, r0
  if (size < MIN_SIZE_ALIGNED) {
 8003ae6:	280b      	cmp	r0, #11
 8003ae8:	d904      	bls.n	8003af4 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003aea:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8003aee:	d902      	bls.n	8003af6 <mem_malloc+0x22>
    return NULL;
 8003af0:	2000      	movs	r0, #0
 8003af2:	e084      	b.n	8003bfe <mem_malloc+0x12a>
    size = MIN_SIZE_ALIGNED;
 8003af4:	200c      	movs	r0, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003af6:	4283      	cmp	r3, r0
 8003af8:	f200 8084 	bhi.w	8003c04 <mem_malloc+0x130>
  return (mem_size_t)((u8_t *)mem - ram);
 8003afc:	4b46      	ldr	r3, [pc, #280]	; (8003c18 <mem_malloc+0x144>)
 8003afe:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003b00:	4b46      	ldr	r3, [pc, #280]	; (8003c1c <mem_malloc+0x148>)
  return (mem_size_t)((u8_t *)mem - ram);
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	1a64      	subs	r4, r4, r1
 8003b06:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003b08:	4623      	mov	r3, r4
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	f5c0 5c20 	rsb	ip, r0, #10240	; 0x2800
 8003b10:	4564      	cmp	r4, ip
 8003b12:	d279      	bcs.n	8003c08 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003b14:	f06f 0707 	mvn.w	r7, #7
 8003b18:	e036      	b.n	8003b88 <mem_malloc+0xb4>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <mem_malloc+0x14c>)
 8003b1c:	f240 3287 	movw	r2, #903	; 0x387
 8003b20:	4940      	ldr	r1, [pc, #256]	; (8003c24 <mem_malloc+0x150>)
 8003b22:	4841      	ldr	r0, [pc, #260]	; (8003c28 <mem_malloc+0x154>)
 8003b24:	f006 fd8c 	bl	800a640 <iprintf>
 8003b28:	e042      	b.n	8003bb0 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003b2e:	4b3b      	ldr	r3, [pc, #236]	; (8003c1c <mem_malloc+0x148>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	42ab      	cmp	r3, r5
 8003b34:	d053      	beq.n	8003bde <mem_malloc+0x10a>
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003b36:	3608      	adds	r6, #8
 8003b38:	442e      	add	r6, r5
 8003b3a:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <mem_malloc+0x158>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	42b3      	cmp	r3, r6
 8003b40:	d305      	bcc.n	8003b4e <mem_malloc+0x7a>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003b42:	f015 0f03 	tst.w	r5, #3
 8003b46:	d10a      	bne.n	8003b5e <mem_malloc+0x8a>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8003b48:	f105 0008 	add.w	r0, r5, #8
 8003b4c:	e057      	b.n	8003bfe <mem_malloc+0x12a>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <mem_malloc+0x14c>)
 8003b50:	f240 32b9 	movw	r2, #953	; 0x3b9
 8003b54:	4936      	ldr	r1, [pc, #216]	; (8003c30 <mem_malloc+0x15c>)
 8003b56:	4834      	ldr	r0, [pc, #208]	; (8003c28 <mem_malloc+0x154>)
 8003b58:	f006 fd72 	bl	800a640 <iprintf>
 8003b5c:	e7f1      	b.n	8003b42 <mem_malloc+0x6e>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003b5e:	4e30      	ldr	r6, [pc, #192]	; (8003c20 <mem_malloc+0x14c>)
 8003b60:	4c31      	ldr	r4, [pc, #196]	; (8003c28 <mem_malloc+0x154>)
 8003b62:	4633      	mov	r3, r6
 8003b64:	f240 32bb 	movw	r2, #955	; 0x3bb
 8003b68:	4932      	ldr	r1, [pc, #200]	; (8003c34 <mem_malloc+0x160>)
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f006 fd68 	bl	800a640 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8003b70:	4633      	mov	r3, r6
 8003b72:	f240 32bd 	movw	r2, #957	; 0x3bd
 8003b76:	4930      	ldr	r1, [pc, #192]	; (8003c38 <mem_malloc+0x164>)
 8003b78:	4620      	mov	r0, r4
 8003b7a:	f006 fd61 	bl	800a640 <iprintf>
 8003b7e:	e7e3      	b.n	8003b48 <mem_malloc+0x74>
         ptr = ptr_to_mem(ptr)->next) {
 8003b80:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003b82:	4623      	mov	r3, r4
 8003b84:	4564      	cmp	r4, ip
 8003b86:	d239      	bcs.n	8003bfc <mem_malloc+0x128>
  return (struct mem *)(void *)&ram[ptr];
 8003b88:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 8003b8a:	792a      	ldrb	r2, [r5, #4]
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d1f7      	bne.n	8003b80 <mem_malloc+0xac>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003b90:	5aca      	ldrh	r2, [r1, r3]
 8003b92:	1afb      	subs	r3, r7, r3
 8003b94:	4413      	add	r3, r2
      if ((!mem->used) &&
 8003b96:	42b3      	cmp	r3, r6
 8003b98:	d3f2      	bcc.n	8003b80 <mem_malloc+0xac>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003b9a:	f106 0214 	add.w	r2, r6, #20
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d3c3      	bcc.n	8003b2a <mem_malloc+0x56>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8003ba2:	f100 0708 	add.w	r7, r0, #8
 8003ba6:	4427      	add	r7, r4
 8003ba8:	b2bf      	uxth	r7, r7
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8003baa:	f5b7 5f20 	cmp.w	r7, #10240	; 0x2800
 8003bae:	d0b4      	beq.n	8003b1a <mem_malloc+0x46>
  return (struct mem *)(void *)&ram[ptr];
 8003bb0:	4b19      	ldr	r3, [pc, #100]	; (8003c18 <mem_malloc+0x144>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	19da      	adds	r2, r3, r7
          mem2->used = 0;
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8003bba:	8829      	ldrh	r1, [r5, #0]
 8003bbc:	53d9      	strh	r1, [r3, r7]
          mem2->prev = ptr;
 8003bbe:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8003bc0:	802f      	strh	r7, [r5, #0]
          mem->used = 1;
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003bc6:	5bda      	ldrh	r2, [r3, r7]
 8003bc8:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8003bcc:	d0af      	beq.n	8003b2e <mem_malloc+0x5a>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8003bce:	4413      	add	r3, r2
 8003bd0:	805f      	strh	r7, [r3, #2]
        if (mem == lfree) {
 8003bd2:	4b12      	ldr	r3, [pc, #72]	; (8003c1c <mem_malloc+0x148>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	d1ad      	bne.n	8003b36 <mem_malloc+0x62>
          while (cur->used && cur != ram_end) {
 8003bda:	792b      	ldrb	r3, [r5, #4]
 8003bdc:	b1cb      	cbz	r3, 8003c12 <mem_malloc+0x13e>
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <mem_malloc+0x158>)
 8003be0:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8003be2:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <mem_malloc+0x144>)
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8003be8:	4299      	cmp	r1, r3
 8003bea:	d00f      	beq.n	8003c0c <mem_malloc+0x138>
  return (struct mem *)(void *)&ram[ptr];
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8003bf0:	791a      	ldrb	r2, [r3, #4]
 8003bf2:	2a00      	cmp	r2, #0
 8003bf4:	d1f8      	bne.n	8003be8 <mem_malloc+0x114>
          lfree = cur;
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <mem_malloc+0x148>)
 8003bf8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003bfa:	e79c      	b.n	8003b36 <mem_malloc+0x62>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8003bfc:	2000      	movs	r0, #0
}
 8003bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8003c00:	2000      	movs	r0, #0
}
 8003c02:	4770      	bx	lr
    return NULL;
 8003c04:	2000      	movs	r0, #0
 8003c06:	e7fa      	b.n	8003bfe <mem_malloc+0x12a>
  return NULL;
 8003c08:	2000      	movs	r0, #0
 8003c0a:	e7f8      	b.n	8003bfe <mem_malloc+0x12a>
          lfree = cur;
 8003c0c:	4a03      	ldr	r2, [pc, #12]	; (8003c1c <mem_malloc+0x148>)
 8003c0e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003c10:	e791      	b.n	8003b36 <mem_malloc+0x62>
  return (struct mem *)(void *)&ram[ptr];
 8003c12:	462b      	mov	r3, r5
 8003c14:	e7ef      	b.n	8003bf6 <mem_malloc+0x122>
 8003c16:	bf00      	nop
 8003c18:	20005290 	.word	0x20005290
 8003c1c:	2000528c 	.word	0x2000528c
 8003c20:	0800bb20 	.word	0x0800bb20
 8003c24:	0800bc88 	.word	0x0800bc88
 8003c28:	0800baa0 	.word	0x0800baa0
 8003c2c:	20005294 	.word	0x20005294
 8003c30:	0800bc9c 	.word	0x0800bc9c
 8003c34:	0800bccc 	.word	0x0800bccc
 8003c38:	0800bcfc 	.word	0x0800bcfc

08003c3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8003c3c:	b510      	push	{r4, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8003c3e:	6883      	ldr	r3, [r0, #8]
 8003c40:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8003c42:	b124      	cbz	r4, 8003c4e <do_memp_malloc_pool+0x12>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8003c44:	6822      	ldr	r2, [r4, #0]
 8003c46:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003c48:	f014 0f03 	tst.w	r4, #3
 8003c4c:	d101      	bne.n	8003c52 <do_memp_malloc_pool+0x16>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8003c4e:	4620      	mov	r0, r4
 8003c50:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8003c52:	4b04      	ldr	r3, [pc, #16]	; (8003c64 <do_memp_malloc_pool+0x28>)
 8003c54:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <do_memp_malloc_pool+0x2c>)
 8003c5a:	4804      	ldr	r0, [pc, #16]	; (8003c6c <do_memp_malloc_pool+0x30>)
 8003c5c:	f006 fcf0 	bl	800a640 <iprintf>
 8003c60:	e7f5      	b.n	8003c4e <do_memp_malloc_pool+0x12>
 8003c62:	bf00      	nop
 8003c64:	0800bd20 	.word	0x0800bd20
 8003c68:	0800bd50 	.word	0x0800bd50
 8003c6c:	0800baa0 	.word	0x0800baa0

08003c70 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003c70:	b538      	push	{r3, r4, r5, lr}
 8003c72:	4605      	mov	r5, r0
 8003c74:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8003c76:	f011 0f03 	tst.w	r1, #3
 8003c7a:	d105      	bne.n	8003c88 <do_memp_free_pool+0x18>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8003c7c:	68ab      	ldr	r3, [r5, #8]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8003c82:	68ab      	ldr	r3, [r5, #8]
 8003c84:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8003c86:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <do_memp_free_pool+0x28>)
 8003c8a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8003c8e:	4903      	ldr	r1, [pc, #12]	; (8003c9c <do_memp_free_pool+0x2c>)
 8003c90:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <do_memp_free_pool+0x30>)
 8003c92:	f006 fcd5 	bl	800a640 <iprintf>
 8003c96:	e7f1      	b.n	8003c7c <do_memp_free_pool+0xc>
 8003c98:	0800bd20 	.word	0x0800bd20
 8003c9c:	0800bd74 	.word	0x0800bd74
 8003ca0:	0800baa0 	.word	0x0800baa0

08003ca4 <memp_init_pool>:
  *desc->tab = NULL;
 8003ca4:	6883      	ldr	r3, [r0, #8]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8003caa:	6843      	ldr	r3, [r0, #4]
 8003cac:	3303      	adds	r3, #3
 8003cae:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8003cb2:	8842      	ldrh	r2, [r0, #2]
 8003cb4:	b15a      	cbz	r2, 8003cce <memp_init_pool+0x2a>
 8003cb6:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8003cb8:	6881      	ldr	r1, [r0, #8]
 8003cba:	6809      	ldr	r1, [r1, #0]
 8003cbc:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8003cbe:	6881      	ldr	r1, [r0, #8]
 8003cc0:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8003cc2:	8801      	ldrh	r1, [r0, #0]
 8003cc4:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8003cc6:	3201      	adds	r2, #1
 8003cc8:	8841      	ldrh	r1, [r0, #2]
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	dcf4      	bgt.n	8003cb8 <memp_init_pool+0x14>
}
 8003cce:	4770      	bx	lr

08003cd0 <memp_init>:
{
 8003cd0:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003cd2:	4d05      	ldr	r5, [pc, #20]	; (8003ce8 <memp_init+0x18>)
 8003cd4:	1f2c      	subs	r4, r5, #4
 8003cd6:	3520      	adds	r5, #32
    memp_init_pool(memp_pools[i]);
 8003cd8:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003cdc:	f7ff ffe2 	bl	8003ca4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8003ce0:	42ac      	cmp	r4, r5
 8003ce2:	d1f9      	bne.n	8003cd8 <memp_init+0x8>
}
 8003ce4:	bd38      	pop	{r3, r4, r5, pc}
 8003ce6:	bf00      	nop
 8003ce8:	0800be50 	.word	0x0800be50

08003cec <memp_malloc_pool>:
{
 8003cec:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003cee:	4604      	mov	r4, r0
 8003cf0:	b110      	cbz	r0, 8003cf8 <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 8003cf2:	f7ff ffa3 	bl	8003c3c <do_memp_malloc_pool>
}
 8003cf6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <memp_malloc_pool+0x20>)
 8003cfa:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8003cfe:	4904      	ldr	r1, [pc, #16]	; (8003d10 <memp_malloc_pool+0x24>)
 8003d00:	4804      	ldr	r0, [pc, #16]	; (8003d14 <memp_malloc_pool+0x28>)
 8003d02:	f006 fc9d 	bl	800a640 <iprintf>
    return NULL;
 8003d06:	4620      	mov	r0, r4
 8003d08:	e7f5      	b.n	8003cf6 <memp_malloc_pool+0xa>
 8003d0a:	bf00      	nop
 8003d0c:	0800bd20 	.word	0x0800bd20
 8003d10:	0800bd94 	.word	0x0800bd94
 8003d14:	0800baa0 	.word	0x0800baa0

08003d18 <memp_malloc>:
{
 8003d18:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003d1a:	2808      	cmp	r0, #8
 8003d1c:	d805      	bhi.n	8003d2a <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <memp_malloc+0x24>)
 8003d20:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d24:	f7ff ff8a 	bl	8003c3c <do_memp_malloc_pool>
}
 8003d28:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <memp_malloc+0x28>)
 8003d2c:	f240 1257 	movw	r2, #343	; 0x157
 8003d30:	4904      	ldr	r1, [pc, #16]	; (8003d44 <memp_malloc+0x2c>)
 8003d32:	4805      	ldr	r0, [pc, #20]	; (8003d48 <memp_malloc+0x30>)
 8003d34:	f006 fc84 	bl	800a640 <iprintf>
 8003d38:	2000      	movs	r0, #0
 8003d3a:	e7f5      	b.n	8003d28 <memp_malloc+0x10>
 8003d3c:	0800be50 	.word	0x0800be50
 8003d40:	0800bd20 	.word	0x0800bd20
 8003d44:	0800bda8 	.word	0x0800bda8
 8003d48:	0800baa0 	.word	0x0800baa0

08003d4c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8003d4c:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003d4e:	b128      	cbz	r0, 8003d5c <memp_free_pool+0x10>
 8003d50:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 8003d52:	b111      	cbz	r1, 8003d5a <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff8b 	bl	8003c70 <do_memp_free_pool>
}
 8003d5a:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <memp_free_pool+0x20>)
 8003d5e:	f240 1295 	movw	r2, #405	; 0x195
 8003d62:	4903      	ldr	r1, [pc, #12]	; (8003d70 <memp_free_pool+0x24>)
 8003d64:	4803      	ldr	r0, [pc, #12]	; (8003d74 <memp_free_pool+0x28>)
 8003d66:	f006 fc6b 	bl	800a640 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8003d6a:	e7f6      	b.n	8003d5a <memp_free_pool+0xe>
 8003d6c:	0800bd20 	.word	0x0800bd20
 8003d70:	0800bd94 	.word	0x0800bd94
 8003d74:	0800baa0 	.word	0x0800baa0

08003d78 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8003d78:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003d7a:	2808      	cmp	r0, #8
 8003d7c:	d806      	bhi.n	8003d8c <memp_free+0x14>

  if (mem == NULL) {
 8003d7e:	b121      	cbz	r1, 8003d8a <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <memp_free+0x24>)
 8003d82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d86:	f7ff ff73 	bl	8003c70 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8003d8a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8003d8c:	4b04      	ldr	r3, [pc, #16]	; (8003da0 <memp_free+0x28>)
 8003d8e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8003d92:	4904      	ldr	r1, [pc, #16]	; (8003da4 <memp_free+0x2c>)
 8003d94:	4804      	ldr	r0, [pc, #16]	; (8003da8 <memp_free+0x30>)
 8003d96:	f006 fc53 	bl	800a640 <iprintf>
 8003d9a:	e7f6      	b.n	8003d8a <memp_free+0x12>
 8003d9c:	0800be50 	.word	0x0800be50
 8003da0:	0800bd20 	.word	0x0800bd20
 8003da4:	0800bdc8 	.word	0x0800bdc8
 8003da8:	0800baa0 	.word	0x0800baa0

08003dac <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8003dac:	f06f 000b 	mvn.w	r0, #11
 8003db0:	4770      	bx	lr
	...

08003db4 <netif_issue_reports>:
{
 8003db4:	b538      	push	{r3, r4, r5, lr}
 8003db6:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8003db8:	4605      	mov	r5, r0
 8003dba:	b170      	cbz	r0, 8003dda <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8003dbc:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8003dc0:	f003 0205 	and.w	r2, r3, #5
 8003dc4:	2a05      	cmp	r2, #5
 8003dc6:	d107      	bne.n	8003dd8 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8003dc8:	f014 0f01 	tst.w	r4, #1
 8003dcc:	d004      	beq.n	8003dd8 <netif_issue_reports+0x24>
 8003dce:	686a      	ldr	r2, [r5, #4]
 8003dd0:	b112      	cbz	r2, 8003dd8 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8003dd2:	f013 0f08 	tst.w	r3, #8
 8003dd6:	d108      	bne.n	8003dea <netif_issue_reports+0x36>
}
 8003dd8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <netif_issue_reports+0x40>)
 8003ddc:	f240 326d 	movw	r2, #877	; 0x36d
 8003de0:	4905      	ldr	r1, [pc, #20]	; (8003df8 <netif_issue_reports+0x44>)
 8003de2:	4806      	ldr	r0, [pc, #24]	; (8003dfc <netif_issue_reports+0x48>)
 8003de4:	f006 fc2c 	bl	800a640 <iprintf>
 8003de8:	e7e8      	b.n	8003dbc <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8003dea:	1d29      	adds	r1, r5, #4
 8003dec:	4628      	mov	r0, r5
 8003dee:	f005 f973 	bl	80090d8 <etharp_request>
 8003df2:	e7f1      	b.n	8003dd8 <netif_issue_reports+0x24>
 8003df4:	0800be74 	.word	0x0800be74
 8003df8:	0800bea8 	.word	0x0800bea8
 8003dfc:	0800baa0 	.word	0x0800baa0

08003e00 <netif_do_set_ipaddr>:
{
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	4605      	mov	r5, r0
 8003e06:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003e08:	460e      	mov	r6, r1
 8003e0a:	b139      	cbz	r1, 8003e1c <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003e0c:	b174      	cbz	r4, 8003e2c <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8003e0e:	686b      	ldr	r3, [r5, #4]
 8003e10:	6832      	ldr	r2, [r6, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d112      	bne.n	8003e3c <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8003e16:	2000      	movs	r0, #0
}
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8003e1c:	4b10      	ldr	r3, [pc, #64]	; (8003e60 <netif_do_set_ipaddr+0x60>)
 8003e1e:	f240 12cb 	movw	r2, #459	; 0x1cb
 8003e22:	4910      	ldr	r1, [pc, #64]	; (8003e64 <netif_do_set_ipaddr+0x64>)
 8003e24:	4810      	ldr	r0, [pc, #64]	; (8003e68 <netif_do_set_ipaddr+0x68>)
 8003e26:	f006 fc0b 	bl	800a640 <iprintf>
 8003e2a:	e7ef      	b.n	8003e0c <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8003e2c:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <netif_do_set_ipaddr+0x60>)
 8003e2e:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8003e32:	490c      	ldr	r1, [pc, #48]	; (8003e64 <netif_do_set_ipaddr+0x64>)
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <netif_do_set_ipaddr+0x68>)
 8003e36:	f006 fc03 	bl	800a640 <iprintf>
 8003e3a:	e7e8      	b.n	8003e0e <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8003e3c:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8003e3e:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8003e40:	a901      	add	r1, sp, #4
 8003e42:	4620      	mov	r0, r4
 8003e44:	f001 f964 	bl	8005110 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8003e48:	a901      	add	r1, sp, #4
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f004 ff2a 	bl	8008ca4 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8003e50:	6833      	ldr	r3, [r6, #0]
 8003e52:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8003e54:	2101      	movs	r1, #1
 8003e56:	4628      	mov	r0, r5
 8003e58:	f7ff ffac 	bl	8003db4 <netif_issue_reports>
    return 1; /* address changed */
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	e7db      	b.n	8003e18 <netif_do_set_ipaddr+0x18>
 8003e60:	0800be74 	.word	0x0800be74
 8003e64:	0800becc 	.word	0x0800becc
 8003e68:	0800baa0 	.word	0x0800baa0

08003e6c <netif_init>:
}
 8003e6c:	4770      	bx	lr
	...

08003e70 <netif_set_addr>:
{
 8003e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e72:	b083      	sub	sp, #12
 8003e74:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8003e76:	4d15      	ldr	r5, [pc, #84]	; (8003ecc <netif_set_addr+0x5c>)
 8003e78:	2900      	cmp	r1, #0
 8003e7a:	bf18      	it	ne
 8003e7c:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 8003e7e:	4f13      	ldr	r7, [pc, #76]	; (8003ecc <netif_set_addr+0x5c>)
 8003e80:	2a00      	cmp	r2, #0
 8003e82:	bf18      	it	ne
 8003e84:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 8003e86:	4e11      	ldr	r6, [pc, #68]	; (8003ecc <netif_set_addr+0x5c>)
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	bf18      	it	ne
 8003e8c:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 8003e8e:	b10d      	cbz	r5, 8003e94 <netif_set_addr+0x24>
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	b993      	cbnz	r3, 8003eba <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003e94:	aa01      	add	r2, sp, #4
 8003e96:	4629      	mov	r1, r5
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f7ff ffb1 	bl	8003e00 <netif_do_set_ipaddr>
 8003e9e:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	68a2      	ldr	r2, [r4, #8]
 8003ea4:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8003ea6:	bf18      	it	ne
 8003ea8:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8003eaa:	6833      	ldr	r3, [r6, #0]
 8003eac:	68e2      	ldr	r2, [r4, #12]
 8003eae:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8003eb0:	bf18      	it	ne
 8003eb2:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8003eb4:	b119      	cbz	r1, 8003ebe <netif_set_addr+0x4e>
}
 8003eb6:	b003      	add	sp, #12
 8003eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	e7f0      	b.n	8003ea0 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8003ebe:	aa01      	add	r2, sp, #4
 8003ec0:	4629      	mov	r1, r5
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7ff ff9c 	bl	8003e00 <netif_do_set_ipaddr>
}
 8003ec8:	e7f5      	b.n	8003eb6 <netif_set_addr+0x46>
 8003eca:	bf00      	nop
 8003ecc:	0800d8e8 	.word	0x0800d8e8

08003ed0 <netif_add>:
{
 8003ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed4:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003ed6:	4606      	mov	r6, r0
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d02c      	beq.n	8003f36 <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003edc:	2c00      	cmp	r4, #0
 8003ede:	d033      	beq.n	8003f48 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8003ee4:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8003ee6:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8003ee8:	4d3b      	ldr	r5, [pc, #236]	; (8003fd8 <netif_add+0x108>)
 8003eea:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8003eec:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 8003eee:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 8003ef2:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8003ef4:	9808      	ldr	r0, [sp, #32]
 8003ef6:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8003ef8:	4838      	ldr	r0, [pc, #224]	; (8003fdc <netif_add+0x10c>)
 8003efa:	7800      	ldrb	r0, [r0, #0]
 8003efc:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 8003f00:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f02:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8003f04:	4836      	ldr	r0, [pc, #216]	; (8003fe0 <netif_add+0x110>)
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	bf08      	it	eq
 8003f0a:	4603      	moveq	r3, r0
 8003f0c:	2a00      	cmp	r2, #0
 8003f0e:	bf08      	it	eq
 8003f10:	4602      	moveq	r2, r0
 8003f12:	2900      	cmp	r1, #0
 8003f14:	bf08      	it	eq
 8003f16:	4601      	moveq	r1, r0
 8003f18:	4630      	mov	r0, r6
 8003f1a:	f7ff ffa9 	bl	8003e70 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8003f1e:	4630      	mov	r0, r6
 8003f20:	47a0      	blx	r4
 8003f22:	2800      	cmp	r0, #0
 8003f24:	d147      	bne.n	8003fb6 <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003f26:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8003ff8 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003f2a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003fe8 <netif_add+0x118>
 8003f2e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8003ffc <netif_add+0x12c>
 8003f32:	4f2c      	ldr	r7, [pc, #176]	; (8003fe4 <netif_add+0x114>)
 8003f34:	e031      	b.n	8003f9a <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8003f36:	4b2c      	ldr	r3, [pc, #176]	; (8003fe8 <netif_add+0x118>)
 8003f38:	f240 1227 	movw	r2, #295	; 0x127
 8003f3c:	492b      	ldr	r1, [pc, #172]	; (8003fec <netif_add+0x11c>)
 8003f3e:	4829      	ldr	r0, [pc, #164]	; (8003fe4 <netif_add+0x114>)
 8003f40:	f006 fb7e 	bl	800a640 <iprintf>
 8003f44:	4630      	mov	r0, r6
 8003f46:	e045      	b.n	8003fd4 <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <netif_add+0x118>)
 8003f4a:	f44f 7294 	mov.w	r2, #296	; 0x128
 8003f4e:	4928      	ldr	r1, [pc, #160]	; (8003ff0 <netif_add+0x120>)
 8003f50:	4824      	ldr	r0, [pc, #144]	; (8003fe4 <netif_add+0x114>)
 8003f52:	f006 fb75 	bl	800a640 <iprintf>
 8003f56:	2000      	movs	r0, #0
 8003f58:	e03c      	b.n	8003fd4 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003f5a:	4643      	mov	r3, r8
 8003f5c:	f240 128b 	movw	r2, #395	; 0x18b
 8003f60:	4649      	mov	r1, r9
 8003f62:	4638      	mov	r0, r7
 8003f64:	f006 fb6c 	bl	800a640 <iprintf>
 8003f68:	e009      	b.n	8003f7e <netif_add+0xae>
        if (netif2->num == netif->num) {
 8003f6a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003f6e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d00e      	beq.n	8003f94 <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003f76:	6824      	ldr	r4, [r4, #0]
 8003f78:	b1fc      	cbz	r4, 8003fba <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8003f7a:	42a6      	cmp	r6, r4
 8003f7c:	d0ed      	beq.n	8003f5a <netif_add+0x8a>
        num_netifs++;
 8003f7e:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8003f80:	2dff      	cmp	r5, #255	; 0xff
 8003f82:	ddf2      	ble.n	8003f6a <netif_add+0x9a>
 8003f84:	4643      	mov	r3, r8
 8003f86:	f240 128d 	movw	r2, #397	; 0x18d
 8003f8a:	491a      	ldr	r1, [pc, #104]	; (8003ff4 <netif_add+0x124>)
 8003f8c:	4638      	mov	r0, r7
 8003f8e:	f006 fb57 	bl	800a640 <iprintf>
 8003f92:	e7ea      	b.n	8003f6a <netif_add+0x9a>
          netif->num++;
 8003f94:	3301      	adds	r3, #1
 8003f96:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 8003f9a:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003f9e:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8003fa0:	bf04      	itt	eq
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8003fa8:	f8da 4000 	ldr.w	r4, [sl]
 8003fac:	b12c      	cbz	r4, 8003fba <netif_add+0xea>
      num_netifs = 0;
 8003fae:	2500      	movs	r5, #0
 8003fb0:	e7e3      	b.n	8003f7a <netif_add+0xaa>
    netif_num = 0;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e007      	b.n	8003fc6 <netif_add+0xf6>
    return NULL;
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	e00c      	b.n	8003fd4 <netif_add+0x104>
  if (netif->num == 254) {
 8003fba:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8003fbe:	2bfe      	cmp	r3, #254	; 0xfe
 8003fc0:	d0f7      	beq.n	8003fb2 <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	4a05      	ldr	r2, [pc, #20]	; (8003fdc <netif_add+0x10c>)
 8003fc8:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <netif_add+0x128>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8003fd0:	601e      	str	r6, [r3, #0]
  return netif;
 8003fd2:	4630      	mov	r0, r6
}
 8003fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd8:	08003dad 	.word	0x08003dad
 8003fdc:	2000a9a0 	.word	0x2000a9a0
 8003fe0:	0800d8e8 	.word	0x0800d8e8
 8003fe4:	0800baa0 	.word	0x0800baa0
 8003fe8:	0800be74 	.word	0x0800be74
 8003fec:	0800bedc 	.word	0x0800bedc
 8003ff0:	0800bef8 	.word	0x0800bef8
 8003ff4:	0800bf30 	.word	0x0800bf30
 8003ff8:	2000a99c 	.word	0x2000a99c
 8003ffc:	0800bf1c 	.word	0x0800bf1c

08004000 <netif_set_default>:
  netif_default = netif;
 8004000:	4b01      	ldr	r3, [pc, #4]	; (8004008 <netif_set_default+0x8>)
 8004002:	6018      	str	r0, [r3, #0]
}
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000a998 	.word	0x2000a998

0800400c <netif_set_up>:
{
 800400c:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800400e:	b128      	cbz	r0, 800401c <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004010:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004014:	f013 0f01 	tst.w	r3, #1
 8004018:	d008      	beq.n	800402c <netif_set_up+0x20>
}
 800401a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800401c:	4b07      	ldr	r3, [pc, #28]	; (800403c <netif_set_up+0x30>)
 800401e:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004022:	4907      	ldr	r1, [pc, #28]	; (8004040 <netif_set_up+0x34>)
 8004024:	4807      	ldr	r0, [pc, #28]	; (8004044 <netif_set_up+0x38>)
 8004026:	f006 fb0b 	bl	800a640 <iprintf>
 800402a:	e7f6      	b.n	800401a <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004034:	2103      	movs	r1, #3
 8004036:	f7ff febd 	bl	8003db4 <netif_issue_reports>
 800403a:	e7ee      	b.n	800401a <netif_set_up+0xe>
 800403c:	0800be74 	.word	0x0800be74
 8004040:	0800bf60 	.word	0x0800bf60
 8004044:	0800baa0 	.word	0x0800baa0

08004048 <netif_set_down>:
{
 8004048:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800404a:	b160      	cbz	r0, 8004066 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 800404c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004050:	f013 0f01 	tst.w	r3, #1
 8004054:	d006      	beq.n	8004064 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004056:	f023 0101 	bic.w	r1, r3, #1
 800405a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800405e:	f013 0f08 	tst.w	r3, #8
 8004062:	d108      	bne.n	8004076 <netif_set_down+0x2e>
}
 8004064:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <netif_set_down+0x34>)
 8004068:	f240 329b 	movw	r2, #923	; 0x39b
 800406c:	4904      	ldr	r1, [pc, #16]	; (8004080 <netif_set_down+0x38>)
 800406e:	4805      	ldr	r0, [pc, #20]	; (8004084 <netif_set_down+0x3c>)
 8004070:	f006 fae6 	bl	800a640 <iprintf>
 8004074:	e7f6      	b.n	8004064 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8004076:	f004 ff6b 	bl	8008f50 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 800407a:	e7f3      	b.n	8004064 <netif_set_down+0x1c>
 800407c:	0800be74 	.word	0x0800be74
 8004080:	0800bf7c 	.word	0x0800bf7c
 8004084:	0800baa0 	.word	0x0800baa0

08004088 <netif_set_link_up>:
{
 8004088:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800408a:	b130      	cbz	r0, 800409a <netif_set_link_up+0x12>
 800408c:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800408e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8004092:	f013 0f04 	tst.w	r3, #4
 8004096:	d008      	beq.n	80040aa <netif_set_link_up+0x22>
}
 8004098:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800409a:	4b0a      	ldr	r3, [pc, #40]	; (80040c4 <netif_set_link_up+0x3c>)
 800409c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80040a0:	4909      	ldr	r1, [pc, #36]	; (80040c8 <netif_set_link_up+0x40>)
 80040a2:	480a      	ldr	r0, [pc, #40]	; (80040cc <netif_set_link_up+0x44>)
 80040a4:	f006 facc 	bl	800a640 <iprintf>
 80040a8:	e7f6      	b.n	8004098 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80040aa:	f043 0304 	orr.w	r3, r3, #4
 80040ae:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80040b2:	2103      	movs	r1, #3
 80040b4:	f7ff fe7e 	bl	8003db4 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80040b8:	69e3      	ldr	r3, [r4, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ec      	beq.n	8004098 <netif_set_link_up+0x10>
 80040be:	4620      	mov	r0, r4
 80040c0:	4798      	blx	r3
 80040c2:	e7e9      	b.n	8004098 <netif_set_link_up+0x10>
 80040c4:	0800be74 	.word	0x0800be74
 80040c8:	0800bf9c 	.word	0x0800bf9c
 80040cc:	0800baa0 	.word	0x0800baa0

080040d0 <netif_set_link_down>:
{
 80040d0:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80040d2:	b160      	cbz	r0, 80040ee <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80040d4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80040d8:	f013 0f04 	tst.w	r3, #4
 80040dc:	d006      	beq.n	80040ec <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80040e6:	69c3      	ldr	r3, [r0, #28]
 80040e8:	b103      	cbz	r3, 80040ec <netif_set_link_down+0x1c>
 80040ea:	4798      	blx	r3
}
 80040ec:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80040ee:	4b04      	ldr	r3, [pc, #16]	; (8004100 <netif_set_link_down+0x30>)
 80040f0:	f240 4206 	movw	r2, #1030	; 0x406
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <netif_set_link_down+0x34>)
 80040f6:	4804      	ldr	r0, [pc, #16]	; (8004108 <netif_set_link_down+0x38>)
 80040f8:	f006 faa2 	bl	800a640 <iprintf>
 80040fc:	e7f6      	b.n	80040ec <netif_set_link_down+0x1c>
 80040fe:	bf00      	nop
 8004100:	0800be74 	.word	0x0800be74
 8004104:	0800bfc0 	.word	0x0800bfc0
 8004108:	0800baa0 	.word	0x0800baa0

0800410c <netif_set_link_callback>:
  if (netif) {
 800410c:	b100      	cbz	r0, 8004110 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800410e:	61c1      	str	r1, [r0, #28]
}
 8004110:	4770      	bx	lr
	...

08004114 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004114:	4602      	mov	r2, r0
 8004116:	b160      	cbz	r0, 8004132 <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8004118:	4b07      	ldr	r3, [pc, #28]	; (8004138 <netif_get_by_index+0x24>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	b150      	cbz	r0, 8004134 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 800411e:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8004122:	3301      	adds	r3, #1
 8004124:	b2db      	uxtb	r3, r3
 8004126:	4293      	cmp	r3, r2
 8004128:	d004      	beq.n	8004134 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	2800      	cmp	r0, #0
 800412e:	d1f6      	bne.n	800411e <netif_get_by_index+0xa>
 8004130:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8004132:	2000      	movs	r0, #0
}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	2000a99c 	.word	0x2000a99c

0800413c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800413c:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800413e:	b1d8      	cbz	r0, 8004178 <pbuf_add_header_impl+0x3c>
 8004140:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004142:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004146:	d22e      	bcs.n	80041a6 <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 8004148:	b339      	cbz	r1, 800419a <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 800414a:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800414e:	8918      	ldrh	r0, [r3, #8]
 8004150:	4460      	add	r0, ip
 8004152:	b280      	uxth	r0, r0
 8004154:	4560      	cmp	r0, ip
 8004156:	d322      	bcc.n	800419e <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004158:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 800415c:	f1be 0f00 	cmp.w	lr, #0
 8004160:	db13      	blt.n	800418a <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004162:	b1f2      	cbz	r2, 80041a2 <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 8004164:	685a      	ldr	r2, [r3, #4]
 8004166:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004168:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800416a:	895a      	ldrh	r2, [r3, #10]
 800416c:	4494      	add	ip, r2
 800416e:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004172:	8118      	strh	r0, [r3, #8]


  return 0;
 8004174:	2000      	movs	r0, #0
 8004176:	e017      	b.n	80041a8 <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <pbuf_add_header_impl+0x70>)
 800417a:	f240 12df 	movw	r2, #479	; 0x1df
 800417e:	490c      	ldr	r1, [pc, #48]	; (80041b0 <pbuf_add_header_impl+0x74>)
 8004180:	480c      	ldr	r0, [pc, #48]	; (80041b4 <pbuf_add_header_impl+0x78>)
 8004182:	f006 fa5d 	bl	800a640 <iprintf>
    return 1;
 8004186:	2001      	movs	r0, #1
 8004188:	e00e      	b.n	80041a8 <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800418e:	f103 0210 	add.w	r2, r3, #16
 8004192:	4291      	cmp	r1, r2
 8004194:	d2e8      	bcs.n	8004168 <pbuf_add_header_impl+0x2c>
      return 1;
 8004196:	2001      	movs	r0, #1
 8004198:	e006      	b.n	80041a8 <pbuf_add_header_impl+0x6c>
    return 0;
 800419a:	2000      	movs	r0, #0
 800419c:	e004      	b.n	80041a8 <pbuf_add_header_impl+0x6c>
    return 1;
 800419e:	2001      	movs	r0, #1
 80041a0:	e002      	b.n	80041a8 <pbuf_add_header_impl+0x6c>
      return 1;
 80041a2:	2001      	movs	r0, #1
 80041a4:	e000      	b.n	80041a8 <pbuf_add_header_impl+0x6c>
    return 1;
 80041a6:	2001      	movs	r0, #1
}
 80041a8:	bd08      	pop	{r3, pc}
 80041aa:	bf00      	nop
 80041ac:	0800bfe4 	.word	0x0800bfe4
 80041b0:	0800c014 	.word	0x0800c014
 80041b4:	0800baa0 	.word	0x0800baa0

080041b8 <pbuf_free_ooseq>:
{
 80041b8:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <pbuf_free_ooseq+0x20>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <pbuf_free_ooseq+0x24>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	b138      	cbz	r0, 80041d6 <pbuf_free_ooseq+0x1e>
    if (pcb->ooseq != NULL) {
 80041c6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80041c8:	b91b      	cbnz	r3, 80041d2 <pbuf_free_ooseq+0x1a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80041ca:	68c0      	ldr	r0, [r0, #12]
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d1fa      	bne.n	80041c6 <pbuf_free_ooseq+0xe>
 80041d0:	e001      	b.n	80041d6 <pbuf_free_ooseq+0x1e>
      tcp_free_ooseq(pcb);
 80041d2:	f000 fe4d 	bl	8004e70 <tcp_free_ooseq>
}
 80041d6:	bd08      	pop	{r3, pc}
 80041d8:	2000a9a1 	.word	0x2000a9a1
 80041dc:	2000a9a4 	.word	0x2000a9a4

080041e0 <pbuf_alloc_reference>:
{
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	4606      	mov	r6, r0
 80041e4:	460d      	mov	r5, r1
 80041e6:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80041e8:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d110      	bne.n	8004214 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80041f2:	2007      	movs	r0, #7
 80041f4:	f7ff fd90 	bl	8003d18 <memp_malloc>
  if (p == NULL) {
 80041f8:	4603      	mov	r3, r0
 80041fa:	b148      	cbz	r0, 8004210 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 80041fc:	2200      	movs	r2, #0
 80041fe:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8004200:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8004202:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8004204:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8004206:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8004208:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800420a:	2101      	movs	r1, #1
 800420c:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800420e:	73c2      	strb	r2, [r0, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004214:	4b03      	ldr	r3, [pc, #12]	; (8004224 <pbuf_alloc_reference+0x44>)
 8004216:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800421a:	4903      	ldr	r1, [pc, #12]	; (8004228 <pbuf_alloc_reference+0x48>)
 800421c:	4803      	ldr	r0, [pc, #12]	; (800422c <pbuf_alloc_reference+0x4c>)
 800421e:	f006 fa0f 	bl	800a640 <iprintf>
 8004222:	e7e6      	b.n	80041f2 <pbuf_alloc_reference+0x12>
 8004224:	0800bfe4 	.word	0x0800bfe4
 8004228:	0800c020 	.word	0x0800c020
 800422c:	0800baa0 	.word	0x0800baa0

08004230 <pbuf_alloced_custom>:
{
 8004230:	b430      	push	{r4, r5}
 8004232:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004234:	3003      	adds	r0, #3
 8004236:	f020 0003 	bic.w	r0, r0, #3
 800423a:	eb01 0c00 	add.w	ip, r1, r0
 800423e:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8004242:	45ac      	cmp	ip, r5
 8004244:	d80f      	bhi.n	8004266 <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 8004246:	b104      	cbz	r4, 800424a <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004248:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800424a:	4618      	mov	r0, r3
  p->next = NULL;
 800424c:	2500      	movs	r5, #0
 800424e:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8004250:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8004252:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8004254:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 8004256:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004258:	2202      	movs	r2, #2
 800425a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800425c:	2201      	movs	r2, #1
 800425e:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004260:	73dd      	strb	r5, [r3, #15]
}
 8004262:	bc30      	pop	{r4, r5}
 8004264:	4770      	bx	lr
    return NULL;
 8004266:	2000      	movs	r0, #0
 8004268:	e7fb      	b.n	8004262 <pbuf_alloced_custom+0x32>

0800426a <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800426a:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800426c:	2200      	movs	r2, #0
 800426e:	f7ff ff65 	bl	800413c <pbuf_add_header_impl>
}
 8004272:	bd08      	pop	{r3, pc}

08004274 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004274:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004276:	b190      	cbz	r0, 800429e <pbuf_remove_header+0x2a>
 8004278:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800427a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800427e:	d222      	bcs.n	80042c6 <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 8004280:	b1f9      	cbz	r1, 80042c2 <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004282:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004284:	895a      	ldrh	r2, [r3, #10]
 8004286:	4282      	cmp	r2, r0
 8004288:	d312      	bcc.n	80042b0 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800428a:	685c      	ldr	r4, [r3, #4]
 800428c:	4421      	add	r1, r4
 800428e:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004290:	1a12      	subs	r2, r2, r0
 8004292:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004294:	891a      	ldrh	r2, [r3, #8]
 8004296:	1a10      	subs	r0, r2, r0
 8004298:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800429a:	2000      	movs	r0, #0
}
 800429c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <pbuf_remove_header+0x58>)
 80042a0:	f240 224b 	movw	r2, #587	; 0x24b
 80042a4:	490a      	ldr	r1, [pc, #40]	; (80042d0 <pbuf_remove_header+0x5c>)
 80042a6:	480b      	ldr	r0, [pc, #44]	; (80042d4 <pbuf_remove_header+0x60>)
 80042a8:	f006 f9ca 	bl	800a640 <iprintf>
    return 1;
 80042ac:	2001      	movs	r0, #1
 80042ae:	e7f5      	b.n	800429c <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <pbuf_remove_header+0x58>)
 80042b2:	f240 2255 	movw	r2, #597	; 0x255
 80042b6:	4908      	ldr	r1, [pc, #32]	; (80042d8 <pbuf_remove_header+0x64>)
 80042b8:	4806      	ldr	r0, [pc, #24]	; (80042d4 <pbuf_remove_header+0x60>)
 80042ba:	f006 f9c1 	bl	800a640 <iprintf>
 80042be:	2001      	movs	r0, #1
 80042c0:	e7ec      	b.n	800429c <pbuf_remove_header+0x28>
    return 0;
 80042c2:	2000      	movs	r0, #0
 80042c4:	e7ea      	b.n	800429c <pbuf_remove_header+0x28>
    return 1;
 80042c6:	2001      	movs	r0, #1
 80042c8:	e7e8      	b.n	800429c <pbuf_remove_header+0x28>
 80042ca:	bf00      	nop
 80042cc:	0800bfe4 	.word	0x0800bfe4
 80042d0:	0800c014 	.word	0x0800c014
 80042d4:	0800baa0 	.word	0x0800baa0
 80042d8:	0800c034 	.word	0x0800c034

080042dc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80042dc:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 80042de:	2900      	cmp	r1, #0
 80042e0:	db03      	blt.n	80042ea <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80042e2:	2201      	movs	r2, #1
 80042e4:	f7ff ff2a 	bl	800413c <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 80042e8:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80042ea:	4249      	negs	r1, r1
 80042ec:	f7ff ffc2 	bl	8004274 <pbuf_remove_header>
 80042f0:	e7fa      	b.n	80042e8 <pbuf_header_force+0xc>
	...

080042f4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80042f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80042f8:	b130      	cbz	r0, 8004308 <pbuf_free+0x14>
 80042fa:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80042fc:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80042fe:	4f2c      	ldr	r7, [pc, #176]	; (80043b0 <pbuf_free+0xbc>)
 8004300:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80043c4 <pbuf_free+0xd0>
 8004304:	4e2b      	ldr	r6, [pc, #172]	; (80043b4 <pbuf_free+0xc0>)
 8004306:	e01b      	b.n	8004340 <pbuf_free+0x4c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004308:	4b29      	ldr	r3, [pc, #164]	; (80043b0 <pbuf_free+0xbc>)
 800430a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800430e:	492a      	ldr	r1, [pc, #168]	; (80043b8 <pbuf_free+0xc4>)
 8004310:	4828      	ldr	r0, [pc, #160]	; (80043b4 <pbuf_free+0xc0>)
 8004312:	f006 f995 	bl	800a640 <iprintf>
    return 0;
 8004316:	2500      	movs	r5, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8004318:	4628      	mov	r0, r5
 800431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800431e:	463b      	mov	r3, r7
 8004320:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004324:	4641      	mov	r1, r8
 8004326:	4630      	mov	r0, r6
 8004328:	f006 f98a 	bl	800a640 <iprintf>
 800432c:	e00b      	b.n	8004346 <pbuf_free+0x52>
        pc->custom_free_function(p);
 800432e:	6923      	ldr	r3, [r4, #16]
 8004330:	4620      	mov	r0, r4
 8004332:	4798      	blx	r3
      count++;
 8004334:	3501      	adds	r5, #1
 8004336:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8004338:	f1b9 0f00 	cmp.w	r9, #0
 800433c:	d0ec      	beq.n	8004318 <pbuf_free+0x24>
      p = q;
 800433e:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004340:	7ba3      	ldrb	r3, [r4, #14]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0eb      	beq.n	800431e <pbuf_free+0x2a>
    ref = --(p->ref);
 8004346:	7ba3      	ldrb	r3, [r4, #14]
 8004348:	3b01      	subs	r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e2      	bne.n	8004318 <pbuf_free+0x24>
      q = p->next;
 8004352:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004356:	7b63      	ldrb	r3, [r4, #13]
 8004358:	f013 0f02 	tst.w	r3, #2
 800435c:	d00a      	beq.n	8004374 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800435e:	6923      	ldr	r3, [r4, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1e4      	bne.n	800432e <pbuf_free+0x3a>
 8004364:	463b      	mov	r3, r7
 8004366:	f240 22ff 	movw	r2, #767	; 0x2ff
 800436a:	4914      	ldr	r1, [pc, #80]	; (80043bc <pbuf_free+0xc8>)
 800436c:	4630      	mov	r0, r6
 800436e:	f006 f967 	bl	800a640 <iprintf>
 8004372:	e7dc      	b.n	800432e <pbuf_free+0x3a>
      alloc_src = pbuf_get_allocsrc(p);
 8004374:	7b23      	ldrb	r3, [r4, #12]
 8004376:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800437a:	2b02      	cmp	r3, #2
 800437c:	d006      	beq.n	800438c <pbuf_free+0x98>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800437e:	2b01      	cmp	r3, #1
 8004380:	d009      	beq.n	8004396 <pbuf_free+0xa2>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8004382:	b96b      	cbnz	r3, 80043a0 <pbuf_free+0xac>
          mem_free(p);
 8004384:	4620      	mov	r0, r4
 8004386:	f7ff fa29 	bl	80037dc <mem_free>
 800438a:	e7d3      	b.n	8004334 <pbuf_free+0x40>
          memp_free(MEMP_PBUF_POOL, p);
 800438c:	4621      	mov	r1, r4
 800438e:	2008      	movs	r0, #8
 8004390:	f7ff fcf2 	bl	8003d78 <memp_free>
 8004394:	e7ce      	b.n	8004334 <pbuf_free+0x40>
          memp_free(MEMP_PBUF, p);
 8004396:	4621      	mov	r1, r4
 8004398:	2007      	movs	r0, #7
 800439a:	f7ff fced 	bl	8003d78 <memp_free>
 800439e:	e7c9      	b.n	8004334 <pbuf_free+0x40>
          LWIP_ASSERT("invalid pbuf type", 0);
 80043a0:	463b      	mov	r3, r7
 80043a2:	f240 320f 	movw	r2, #783	; 0x30f
 80043a6:	4906      	ldr	r1, [pc, #24]	; (80043c0 <pbuf_free+0xcc>)
 80043a8:	4630      	mov	r0, r6
 80043aa:	f006 f949 	bl	800a640 <iprintf>
 80043ae:	e7c1      	b.n	8004334 <pbuf_free+0x40>
 80043b0:	0800bfe4 	.word	0x0800bfe4
 80043b4:	0800baa0 	.word	0x0800baa0
 80043b8:	0800c014 	.word	0x0800c014
 80043bc:	0800c06c 	.word	0x0800c06c
 80043c0:	0800c090 	.word	0x0800c090
 80043c4:	0800c054 	.word	0x0800c054

080043c8 <pbuf_alloc>:
{
 80043c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043cc:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 80043ce:	b285      	uxth	r5, r0
  switch (type) {
 80043d0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80043d4:	d03d      	beq.n	8004452 <pbuf_alloc+0x8a>
 80043d6:	4604      	mov	r4, r0
 80043d8:	d80e      	bhi.n	80043f8 <pbuf_alloc+0x30>
 80043da:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80043de:	b29b      	uxth	r3, r3
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d02f      	beq.n	8004444 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80043e4:	4b3c      	ldr	r3, [pc, #240]	; (80044d8 <pbuf_alloc+0x110>)
 80043e6:	f240 1227 	movw	r2, #295	; 0x127
 80043ea:	493c      	ldr	r1, [pc, #240]	; (80044dc <pbuf_alloc+0x114>)
 80043ec:	483c      	ldr	r0, [pc, #240]	; (80044e0 <pbuf_alloc+0x118>)
 80043ee:	f006 f927 	bl	800a640 <iprintf>
      return NULL;
 80043f2:	f04f 0800 	mov.w	r8, #0
 80043f6:	e029      	b.n	800444c <pbuf_alloc+0x84>
  switch (type) {
 80043f8:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80043fc:	d1f2      	bne.n	80043e4 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80043fe:	1ceb      	adds	r3, r5, #3
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	1cca      	adds	r2, r1, #3
 8004406:	f022 0503 	bic.w	r5, r2, #3
 800440a:	442b      	add	r3, r5
 800440c:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800440e:	f103 0010 	add.w	r0, r3, #16
 8004412:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004414:	42ab      	cmp	r3, r5
 8004416:	d359      	bcc.n	80044cc <pbuf_alloc+0x104>
 8004418:	4285      	cmp	r5, r0
 800441a:	d85a      	bhi.n	80044d2 <pbuf_alloc+0x10a>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800441c:	f7ff fb5a 	bl	8003ad4 <mem_malloc>
      if (p == NULL) {
 8004420:	4680      	mov	r8, r0
 8004422:	b198      	cbz	r0, 800444c <pbuf_alloc+0x84>
  p->next = NULL;
 8004424:	2200      	movs	r2, #0
 8004426:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004428:	1903      	adds	r3, r0, r4
 800442a:	3313      	adds	r3, #19
 800442c:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 8004430:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8004432:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8004434:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8004436:	2380      	movs	r3, #128	; 0x80
 8004438:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800443a:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800443c:	2301      	movs	r3, #1
 800443e:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004440:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004442:	e003      	b.n	800444c <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8004444:	2000      	movs	r0, #0
 8004446:	f7ff fecb 	bl	80041e0 <pbuf_alloc_reference>
 800444a:	4680      	mov	r8, r0
}
 800444c:	4640      	mov	r0, r8
 800444e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8004452:	2400      	movs	r4, #0
 8004454:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004456:	f04f 0a08 	mov.w	sl, #8
  p->next = NULL;
 800445a:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 800445c:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8004460:	e011      	b.n	8004486 <pbuf_alloc+0xbe>
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004462:	4b20      	ldr	r3, [pc, #128]	; (80044e4 <pbuf_alloc+0x11c>)
 8004464:	2201      	movs	r2, #1
 8004466:	701a      	strb	r2, [r3, #0]
          if (p) {
 8004468:	f1b8 0f00 	cmp.w	r8, #0
 800446c:	d0ee      	beq.n	800444c <pbuf_alloc+0x84>
            pbuf_free(p);
 800446e:	4640      	mov	r0, r8
 8004470:	f7ff ff40 	bl	80042f4 <pbuf_free>
          return NULL;
 8004474:	46a0      	mov	r8, r4
 8004476:	e7e9      	b.n	800444c <pbuf_alloc+0x84>
          last->next = q;
 8004478:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 800447c:	1a76      	subs	r6, r6, r1
 800447e:	b2b6      	uxth	r6, r6
        offset = 0;
 8004480:	463d      	mov	r5, r7
      } while (rem_len > 0);
 8004482:	2e00      	cmp	r6, #0
 8004484:	d0e2      	beq.n	800444c <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004486:	46a1      	mov	r9, r4
 8004488:	4650      	mov	r0, sl
 800448a:	f7ff fc45 	bl	8003d18 <memp_malloc>
        if (q == NULL) {
 800448e:	4604      	mov	r4, r0
 8004490:	2800      	cmp	r0, #0
 8004492:	d0e6      	beq.n	8004462 <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004494:	1ce9      	adds	r1, r5, #3
 8004496:	f021 0103 	bic.w	r1, r1, #3
 800449a:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 800449e:	b289      	uxth	r1, r1
 80044a0:	42b1      	cmp	r1, r6
 80044a2:	bf28      	it	cs
 80044a4:	4631      	movcs	r1, r6
  p->next = NULL;
 80044a6:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80044a8:	4405      	add	r5, r0
 80044aa:	3513      	adds	r5, #19
 80044ac:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 80044b0:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 80044b2:	8106      	strh	r6, [r0, #8]
  p->len = len;
 80044b4:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 80044b6:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 80044ba:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 80044bc:	2301      	movs	r3, #1
 80044be:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 80044c0:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 80044c2:	f1b8 0f00 	cmp.w	r8, #0
 80044c6:	d1d7      	bne.n	8004478 <pbuf_alloc+0xb0>
          p = q;
 80044c8:	4680      	mov	r8, r0
 80044ca:	e7d7      	b.n	800447c <pbuf_alloc+0xb4>
        return NULL;
 80044cc:	f04f 0800 	mov.w	r8, #0
 80044d0:	e7bc      	b.n	800444c <pbuf_alloc+0x84>
 80044d2:	f04f 0800 	mov.w	r8, #0
 80044d6:	e7b9      	b.n	800444c <pbuf_alloc+0x84>
 80044d8:	0800bfe4 	.word	0x0800bfe4
 80044dc:	0800c0a4 	.word	0x0800c0a4
 80044e0:	0800baa0 	.word	0x0800baa0
 80044e4:	2000a9a1 	.word	0x2000a9a1

080044e8 <pbuf_realloc>:
{
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80044ee:	4604      	mov	r4, r0
 80044f0:	b168      	cbz	r0, 800450e <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 80044f2:	8927      	ldrh	r7, [r4, #8]
 80044f4:	42b7      	cmp	r7, r6
 80044f6:	d939      	bls.n	800456c <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 80044f8:	8963      	ldrh	r3, [r4, #10]
 80044fa:	429e      	cmp	r6, r3
 80044fc:	d923      	bls.n	8004546 <pbuf_realloc+0x5e>
  rem_len = new_len;
 80044fe:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004500:	f8df a090 	ldr.w	sl, [pc, #144]	; 8004594 <pbuf_realloc+0xac>
 8004504:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80045a4 <pbuf_realloc+0xbc>
 8004508:	f8df 8090 	ldr.w	r8, [pc, #144]	; 800459c <pbuf_realloc+0xb4>
 800450c:	e00a      	b.n	8004524 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800450e:	4b21      	ldr	r3, [pc, #132]	; (8004594 <pbuf_realloc+0xac>)
 8004510:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004514:	4920      	ldr	r1, [pc, #128]	; (8004598 <pbuf_realloc+0xb0>)
 8004516:	4821      	ldr	r0, [pc, #132]	; (800459c <pbuf_realloc+0xb4>)
 8004518:	f006 f892 	bl	800a640 <iprintf>
 800451c:	e7e9      	b.n	80044f2 <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 800451e:	8963      	ldrh	r3, [r4, #10]
 8004520:	42ab      	cmp	r3, r5
 8004522:	d211      	bcs.n	8004548 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8004524:	1aed      	subs	r5, r5, r3
 8004526:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004528:	1bf3      	subs	r3, r6, r7
 800452a:	8922      	ldrh	r2, [r4, #8]
 800452c:	4413      	add	r3, r2
 800452e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8004530:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004532:	2c00      	cmp	r4, #0
 8004534:	d1f3      	bne.n	800451e <pbuf_realloc+0x36>
 8004536:	4653      	mov	r3, sl
 8004538:	f240 12af 	movw	r2, #431	; 0x1af
 800453c:	4649      	mov	r1, r9
 800453e:	4640      	mov	r0, r8
 8004540:	f006 f87e 	bl	800a640 <iprintf>
 8004544:	e7eb      	b.n	800451e <pbuf_realloc+0x36>
  rem_len = new_len;
 8004546:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004548:	7b22      	ldrb	r2, [r4, #12]
 800454a:	f012 0f0f 	tst.w	r2, #15
 800454e:	d105      	bne.n	800455c <pbuf_realloc+0x74>
 8004550:	42ab      	cmp	r3, r5
 8004552:	d003      	beq.n	800455c <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004554:	7b63      	ldrb	r3, [r4, #13]
 8004556:	f013 0f02 	tst.w	r3, #2
 800455a:	d009      	beq.n	8004570 <pbuf_realloc+0x88>
  q->len = rem_len;
 800455c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800455e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8004560:	6820      	ldr	r0, [r4, #0]
 8004562:	b108      	cbz	r0, 8004568 <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8004564:	f7ff fec6 	bl	80042f4 <pbuf_free>
  q->next = NULL;
 8004568:	2300      	movs	r3, #0
 800456a:	6023      	str	r3, [r4, #0]
}
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004570:	6863      	ldr	r3, [r4, #4]
 8004572:	1b1b      	subs	r3, r3, r4
 8004574:	18e9      	adds	r1, r5, r3
 8004576:	b289      	uxth	r1, r1
 8004578:	4620      	mov	r0, r4
 800457a:	f7ff f9f9 	bl	8003970 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800457e:	4604      	mov	r4, r0
 8004580:	2800      	cmp	r0, #0
 8004582:	d1eb      	bne.n	800455c <pbuf_realloc+0x74>
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <pbuf_realloc+0xac>)
 8004586:	f240 12bd 	movw	r2, #445	; 0x1bd
 800458a:	4905      	ldr	r1, [pc, #20]	; (80045a0 <pbuf_realloc+0xb8>)
 800458c:	4803      	ldr	r0, [pc, #12]	; (800459c <pbuf_realloc+0xb4>)
 800458e:	f006 f857 	bl	800a640 <iprintf>
 8004592:	e7e3      	b.n	800455c <pbuf_realloc+0x74>
 8004594:	0800bfe4 	.word	0x0800bfe4
 8004598:	0800c0c0 	.word	0x0800c0c0
 800459c:	0800baa0 	.word	0x0800baa0
 80045a0:	0800c0f0 	.word	0x0800c0f0
 80045a4:	0800c0d8 	.word	0x0800c0d8

080045a8 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 80045a8:	4603      	mov	r3, r0
 80045aa:	b130      	cbz	r0, 80045ba <pbuf_clen+0x12>
  len = 0;
 80045ac:	2000      	movs	r0, #0
    ++len;
 80045ae:	3001      	adds	r0, #1
 80045b0:	b280      	uxth	r0, r0
    p = p->next;
 80045b2:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1fa      	bne.n	80045ae <pbuf_clen+0x6>
 80045b8:	4770      	bx	lr
  len = 0;
 80045ba:	2000      	movs	r0, #0
  }
  return len;
}
 80045bc:	4770      	bx	lr
	...

080045c0 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 80045c0:	b170      	cbz	r0, 80045e0 <pbuf_ref+0x20>
{
 80045c2:	b508      	push	{r3, lr}
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80045c4:	7b83      	ldrb	r3, [r0, #14]
 80045c6:	3301      	adds	r3, #1
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80045cc:	b103      	cbz	r3, 80045d0 <pbuf_ref+0x10>
  }
}
 80045ce:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80045d0:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <pbuf_ref+0x24>)
 80045d2:	f240 3242 	movw	r2, #834	; 0x342
 80045d6:	4904      	ldr	r1, [pc, #16]	; (80045e8 <pbuf_ref+0x28>)
 80045d8:	4804      	ldr	r0, [pc, #16]	; (80045ec <pbuf_ref+0x2c>)
 80045da:	f006 f831 	bl	800a640 <iprintf>
}
 80045de:	e7f6      	b.n	80045ce <pbuf_ref+0xe>
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	0800bfe4 	.word	0x0800bfe4
 80045e8:	0800c10c 	.word	0x0800c10c
 80045ec:	0800baa0 	.word	0x0800baa0

080045f0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80045f0:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80045f2:	b130      	cbz	r0, 8004602 <pbuf_cat+0x12>
 80045f4:	460d      	mov	r5, r1
 80045f6:	4602      	mov	r2, r0
 80045f8:	b119      	cbz	r1, 8004602 <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80045fa:	6804      	ldr	r4, [r0, #0]
 80045fc:	b954      	cbnz	r4, 8004614 <pbuf_cat+0x24>
 80045fe:	4604      	mov	r4, r0
 8004600:	e010      	b.n	8004624 <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <pbuf_cat+0x68>)
 8004604:	f240 3259 	movw	r2, #857	; 0x359
 8004608:	4914      	ldr	r1, [pc, #80]	; (800465c <pbuf_cat+0x6c>)
 800460a:	4815      	ldr	r0, [pc, #84]	; (8004660 <pbuf_cat+0x70>)
 800460c:	f006 f818 	bl	800a640 <iprintf>
 8004610:	e021      	b.n	8004656 <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 8004612:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8004614:	8913      	ldrh	r3, [r2, #8]
 8004616:	8928      	ldrh	r0, [r5, #8]
 8004618:	4403      	add	r3, r0
 800461a:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	4622      	mov	r2, r4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f6      	bne.n	8004612 <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004624:	8922      	ldrh	r2, [r4, #8]
 8004626:	8963      	ldrh	r3, [r4, #10]
 8004628:	429a      	cmp	r2, r3
 800462a:	d00f      	beq.n	800464c <pbuf_cat+0x5c>
 800462c:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <pbuf_cat+0x68>)
 800462e:	f240 3262 	movw	r2, #866	; 0x362
 8004632:	490c      	ldr	r1, [pc, #48]	; (8004664 <pbuf_cat+0x74>)
 8004634:	480a      	ldr	r0, [pc, #40]	; (8004660 <pbuf_cat+0x70>)
 8004636:	f006 f803 	bl	800a640 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	b133      	cbz	r3, 800464c <pbuf_cat+0x5c>
 800463e:	4b06      	ldr	r3, [pc, #24]	; (8004658 <pbuf_cat+0x68>)
 8004640:	f240 3263 	movw	r2, #867	; 0x363
 8004644:	4908      	ldr	r1, [pc, #32]	; (8004668 <pbuf_cat+0x78>)
 8004646:	4806      	ldr	r0, [pc, #24]	; (8004660 <pbuf_cat+0x70>)
 8004648:	f005 fffa 	bl	800a640 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800464c:	8923      	ldrh	r3, [r4, #8]
 800464e:	892a      	ldrh	r2, [r5, #8]
 8004650:	4413      	add	r3, r2
 8004652:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004654:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004656:	bd38      	pop	{r3, r4, r5, pc}
 8004658:	0800bfe4 	.word	0x0800bfe4
 800465c:	0800c120 	.word	0x0800c120
 8004660:	0800baa0 	.word	0x0800baa0
 8004664:	0800c158 	.word	0x0800c158
 8004668:	0800c188 	.word	0x0800c188

0800466c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800466c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004670:	b178      	cbz	r0, 8004692 <pbuf_copy+0x26>
 8004672:	460c      	mov	r4, r1
 8004674:	4606      	mov	r6, r0
 8004676:	b161      	cbz	r1, 8004692 <pbuf_copy+0x26>
 8004678:	8902      	ldrh	r2, [r0, #8]
 800467a:	890b      	ldrh	r3, [r1, #8]
 800467c:	429a      	cmp	r2, r3
 800467e:	d308      	bcc.n	8004692 <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 8004680:	2700      	movs	r7, #0
 8004682:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004684:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8004794 <pbuf_copy+0x128>
 8004688:	f8df b120 	ldr.w	fp, [pc, #288]	; 80047ac <pbuf_copy+0x140>
 800468c:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800479c <pbuf_copy+0x130>
 8004690:	e050      	b.n	8004734 <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004692:	4b40      	ldr	r3, [pc, #256]	; (8004794 <pbuf_copy+0x128>)
 8004694:	f240 32c9 	movw	r2, #969	; 0x3c9
 8004698:	493f      	ldr	r1, [pc, #252]	; (8004798 <pbuf_copy+0x12c>)
 800469a:	4840      	ldr	r0, [pc, #256]	; (800479c <pbuf_copy+0x130>)
 800469c:	f005 ffd0 	bl	800a640 <iprintf>
 80046a0:	f06f 000f 	mvn.w	r0, #15
 80046a4:	e016      	b.n	80046d4 <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80046a6:	4653      	mov	r3, sl
 80046a8:	f240 32d9 	movw	r2, #985	; 0x3d9
 80046ac:	4659      	mov	r1, fp
 80046ae:	4648      	mov	r0, r9
 80046b0:	f005 ffc6 	bl	800a640 <iprintf>
 80046b4:	e052      	b.n	800475c <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80046b6:	4653      	mov	r3, sl
 80046b8:	f240 32da 	movw	r2, #986	; 0x3da
 80046bc:	4938      	ldr	r1, [pc, #224]	; (80047a0 <pbuf_copy+0x134>)
 80046be:	4648      	mov	r0, r9
 80046c0:	f005 ffbe 	bl	800a640 <iprintf>
 80046c4:	e04d      	b.n	8004762 <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 80046c6:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80046c8:	b116      	cbz	r6, 80046d0 <pbuf_copy+0x64>
      offset_to = 0;
 80046ca:	f04f 0800 	mov.w	r8, #0
 80046ce:	e050      	b.n	8004772 <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80046d0:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80046d2:	b90c      	cbnz	r4, 80046d8 <pbuf_copy+0x6c>
}
 80046d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80046d8:	4b2e      	ldr	r3, [pc, #184]	; (8004794 <pbuf_copy+0x128>)
 80046da:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80046de:	4931      	ldr	r1, [pc, #196]	; (80047a4 <pbuf_copy+0x138>)
 80046e0:	482e      	ldr	r0, [pc, #184]	; (800479c <pbuf_copy+0x130>)
 80046e2:	f005 ffad 	bl	800a640 <iprintf>
 80046e6:	f06f 000f 	mvn.w	r0, #15
 80046ea:	e7f3      	b.n	80046d4 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d045      	beq.n	800477e <pbuf_copy+0x112>
 80046f2:	4b28      	ldr	r3, [pc, #160]	; (8004794 <pbuf_copy+0x128>)
 80046f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80046f8:	492b      	ldr	r1, [pc, #172]	; (80047a8 <pbuf_copy+0x13c>)
 80046fa:	4828      	ldr	r0, [pc, #160]	; (800479c <pbuf_copy+0x130>)
 80046fc:	f005 ffa0 	bl	800a640 <iprintf>
 8004700:	f06f 0005 	mvn.w	r0, #5
 8004704:	e7e6      	b.n	80046d4 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8004706:	4b23      	ldr	r3, [pc, #140]	; (8004794 <pbuf_copy+0x128>)
 8004708:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800470c:	4926      	ldr	r1, [pc, #152]	; (80047a8 <pbuf_copy+0x13c>)
 800470e:	4823      	ldr	r0, [pc, #140]	; (800479c <pbuf_copy+0x130>)
 8004710:	f005 ff96 	bl	800a640 <iprintf>
 8004714:	f06f 0005 	mvn.w	r0, #5
 8004718:	e7dc      	b.n	80046d4 <pbuf_copy+0x68>
  return ERR_OK;
 800471a:	2000      	movs	r0, #0
 800471c:	e7da      	b.n	80046d4 <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800471e:	2e00      	cmp	r6, #0
 8004720:	d034      	beq.n	800478c <pbuf_copy+0x120>
 8004722:	8972      	ldrh	r2, [r6, #10]
 8004724:	8933      	ldrh	r3, [r6, #8]
 8004726:	429a      	cmp	r2, r3
 8004728:	d132      	bne.n	8004790 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800472a:	6833      	ldr	r3, [r6, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ea      	bne.n	8004706 <pbuf_copy+0x9a>
  } while (p_from);
 8004730:	2c00      	cmp	r4, #0
 8004732:	d0f2      	beq.n	800471a <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004734:	8975      	ldrh	r5, [r6, #10]
 8004736:	eba5 0508 	sub.w	r5, r5, r8
 800473a:	8963      	ldrh	r3, [r4, #10]
 800473c:	1bdb      	subs	r3, r3, r7
 800473e:	429d      	cmp	r5, r3
 8004740:	bf28      	it	cs
 8004742:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8004744:	6870      	ldr	r0, [r6, #4]
 8004746:	6861      	ldr	r1, [r4, #4]
 8004748:	462a      	mov	r2, r5
 800474a:	4439      	add	r1, r7
 800474c:	4440      	add	r0, r8
 800474e:	f005 ff47 	bl	800a5e0 <memcpy>
    offset_to += len;
 8004752:	44a8      	add	r8, r5
    offset_from += len;
 8004754:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8004756:	8973      	ldrh	r3, [r6, #10]
 8004758:	4543      	cmp	r3, r8
 800475a:	d3a4      	bcc.n	80046a6 <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800475c:	8963      	ldrh	r3, [r4, #10]
 800475e:	42bb      	cmp	r3, r7
 8004760:	d3a9      	bcc.n	80046b6 <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 8004762:	8963      	ldrh	r3, [r4, #10]
 8004764:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 8004766:	bf9c      	itt	ls
 8004768:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800476a:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 800476c:	8973      	ldrh	r3, [r6, #10]
 800476e:	4543      	cmp	r3, r8
 8004770:	d0a9      	beq.n	80046c6 <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8004772:	2c00      	cmp	r4, #0
 8004774:	d0d3      	beq.n	800471e <pbuf_copy+0xb2>
 8004776:	8962      	ldrh	r2, [r4, #10]
 8004778:	8923      	ldrh	r3, [r4, #8]
 800477a:	429a      	cmp	r2, r3
 800477c:	d0b6      	beq.n	80046ec <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800477e:	2e00      	cmp	r6, #0
 8004780:	d0d8      	beq.n	8004734 <pbuf_copy+0xc8>
 8004782:	8972      	ldrh	r2, [r6, #10]
 8004784:	8933      	ldrh	r3, [r6, #8]
 8004786:	429a      	cmp	r2, r3
 8004788:	d1d4      	bne.n	8004734 <pbuf_copy+0xc8>
 800478a:	e7ce      	b.n	800472a <pbuf_copy+0xbe>
  return ERR_OK;
 800478c:	2000      	movs	r0, #0
 800478e:	e7a1      	b.n	80046d4 <pbuf_copy+0x68>
 8004790:	2000      	movs	r0, #0
 8004792:	e79f      	b.n	80046d4 <pbuf_copy+0x68>
 8004794:	0800bfe4 	.word	0x0800bfe4
 8004798:	0800c198 	.word	0x0800c198
 800479c:	0800baa0 	.word	0x0800baa0
 80047a0:	0800c1e0 	.word	0x0800c1e0
 80047a4:	0800c1fc 	.word	0x0800c1fc
 80047a8:	0800c20c 	.word	0x0800c20c
 80047ac:	0800c1c8 	.word	0x0800c1c8

080047b0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80047b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80047b4:	b148      	cbz	r0, 80047ca <pbuf_copy_partial+0x1a>
 80047b6:	4688      	mov	r8, r1
 80047b8:	4692      	mov	sl, r2
 80047ba:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80047bc:	b181      	cbz	r1, 80047e0 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 80047be:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80047c0:	b15a      	cbz	r2, 80047da <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 80047c2:	2700      	movs	r7, #0
  u16_t left = 0;
 80047c4:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 80047c6:	46b9      	mov	r9, r7
 80047c8:	e02f      	b.n	800482a <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80047ca:	4b1c      	ldr	r3, [pc, #112]	; (800483c <pbuf_copy_partial+0x8c>)
 80047cc:	f240 420a 	movw	r2, #1034	; 0x40a
 80047d0:	491b      	ldr	r1, [pc, #108]	; (8004840 <pbuf_copy_partial+0x90>)
 80047d2:	481c      	ldr	r0, [pc, #112]	; (8004844 <pbuf_copy_partial+0x94>)
 80047d4:	f005 ff34 	bl	800a640 <iprintf>
 80047d8:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 80047da:	4638      	mov	r0, r7
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80047e0:	4b16      	ldr	r3, [pc, #88]	; (800483c <pbuf_copy_partial+0x8c>)
 80047e2:	f240 420b 	movw	r2, #1035	; 0x40b
 80047e6:	4918      	ldr	r1, [pc, #96]	; (8004848 <pbuf_copy_partial+0x98>)
 80047e8:	4816      	ldr	r0, [pc, #88]	; (8004844 <pbuf_copy_partial+0x94>)
 80047ea:	f005 ff29 	bl	800a640 <iprintf>
 80047ee:	2700      	movs	r7, #0
 80047f0:	e7f3      	b.n	80047da <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 80047f2:	896c      	ldrh	r4, [r5, #10]
 80047f4:	1ae4      	subs	r4, r4, r3
 80047f6:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 80047f8:	4554      	cmp	r4, sl
 80047fa:	bf28      	it	cs
 80047fc:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80047fe:	6869      	ldr	r1, [r5, #4]
 8004800:	4622      	mov	r2, r4
 8004802:	4419      	add	r1, r3
 8004804:	eb08 0006 	add.w	r0, r8, r6
 8004808:	f005 feea 	bl	800a5e0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800480c:	4427      	add	r7, r4
 800480e:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8004810:	4426      	add	r6, r4
 8004812:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8004814:	ebaa 0404 	sub.w	r4, sl, r4
 8004818:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 800481c:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800481e:	682d      	ldr	r5, [r5, #0]
 8004820:	f1ba 0f00 	cmp.w	sl, #0
 8004824:	d0d9      	beq.n	80047da <pbuf_copy_partial+0x2a>
 8004826:	2d00      	cmp	r5, #0
 8004828:	d0d7      	beq.n	80047da <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0e1      	beq.n	80047f2 <pbuf_copy_partial+0x42>
 800482e:	896a      	ldrh	r2, [r5, #10]
 8004830:	429a      	cmp	r2, r3
 8004832:	d8de      	bhi.n	80047f2 <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 8004834:	1a9b      	subs	r3, r3, r2
 8004836:	b29b      	uxth	r3, r3
 8004838:	e7f1      	b.n	800481e <pbuf_copy_partial+0x6e>
 800483a:	bf00      	nop
 800483c:	0800bfe4 	.word	0x0800bfe4
 8004840:	0800c238 	.word	0x0800c238
 8004844:	0800baa0 	.word	0x0800baa0
 8004848:	0800c258 	.word	0x0800c258

0800484c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800484c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8004850:	b338      	cbz	r0, 80048a2 <pbuf_take+0x56>
 8004852:	4688      	mov	r8, r1
 8004854:	4691      	mov	r9, r2
 8004856:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8004858:	b369      	cbz	r1, 80048b6 <pbuf_take+0x6a>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800485a:	8903      	ldrh	r3, [r0, #8]
 800485c:	4293      	cmp	r3, r2
 800485e:	d334      	bcc.n	80048ca <pbuf_take+0x7e>
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
  return ERR_OK;
 8004860:	2000      	movs	r0, #0
  for (p = buf; total_copy_len != 0; p = p->next) {
 8004862:	2a00      	cmp	r2, #0
 8004864:	d045      	beq.n	80048f2 <pbuf_take+0xa6>
  size_t total_copy_len = len;
 8004866:	4616      	mov	r6, r2
  size_t copied_total = 0;
 8004868:	2700      	movs	r7, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800486a:	f8df b094 	ldr.w	fp, [pc, #148]	; 8004900 <pbuf_take+0xb4>
 800486e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8004914 <pbuf_take+0xc8>
    if (buf_copy_len > p->len) {
 8004872:	896c      	ldrh	r4, [r5, #10]
 8004874:	42b4      	cmp	r4, r6
 8004876:	bf28      	it	cs
 8004878:	4634      	movcs	r4, r6
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800487a:	4622      	mov	r2, r4
 800487c:	eb08 0107 	add.w	r1, r8, r7
 8004880:	6868      	ldr	r0, [r5, #4]
 8004882:	f005 fead 	bl	800a5e0 <memcpy>
    copied_total += buf_copy_len;
 8004886:	4427      	add	r7, r4
  for (p = buf; total_copy_len != 0; p = p->next) {
 8004888:	682d      	ldr	r5, [r5, #0]
 800488a:	1b36      	subs	r6, r6, r4
 800488c:	d027      	beq.n	80048de <pbuf_take+0x92>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800488e:	2d00      	cmp	r5, #0
 8004890:	d1ef      	bne.n	8004872 <pbuf_take+0x26>
 8004892:	465b      	mov	r3, fp
 8004894:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8004898:	4651      	mov	r1, sl
 800489a:	4818      	ldr	r0, [pc, #96]	; (80048fc <pbuf_take+0xb0>)
 800489c:	f005 fed0 	bl	800a640 <iprintf>
 80048a0:	e7e7      	b.n	8004872 <pbuf_take+0x26>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <pbuf_take+0xb4>)
 80048a4:	f240 42b3 	movw	r2, #1203	; 0x4b3
 80048a8:	4916      	ldr	r1, [pc, #88]	; (8004904 <pbuf_take+0xb8>)
 80048aa:	4814      	ldr	r0, [pc, #80]	; (80048fc <pbuf_take+0xb0>)
 80048ac:	f005 fec8 	bl	800a640 <iprintf>
 80048b0:	f06f 000f 	mvn.w	r0, #15
 80048b4:	e01d      	b.n	80048f2 <pbuf_take+0xa6>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80048b6:	4b12      	ldr	r3, [pc, #72]	; (8004900 <pbuf_take+0xb4>)
 80048b8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 80048bc:	4912      	ldr	r1, [pc, #72]	; (8004908 <pbuf_take+0xbc>)
 80048be:	480f      	ldr	r0, [pc, #60]	; (80048fc <pbuf_take+0xb0>)
 80048c0:	f005 febe 	bl	800a640 <iprintf>
 80048c4:	f06f 000f 	mvn.w	r0, #15
 80048c8:	e013      	b.n	80048f2 <pbuf_take+0xa6>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80048ca:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <pbuf_take+0xb4>)
 80048cc:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80048d0:	490e      	ldr	r1, [pc, #56]	; (800490c <pbuf_take+0xc0>)
 80048d2:	480a      	ldr	r0, [pc, #40]	; (80048fc <pbuf_take+0xb0>)
 80048d4:	f005 feb4 	bl	800a640 <iprintf>
 80048d8:	f04f 30ff 	mov.w	r0, #4294967295
 80048dc:	e009      	b.n	80048f2 <pbuf_take+0xa6>
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80048de:	45b9      	cmp	r9, r7
 80048e0:	d009      	beq.n	80048f6 <pbuf_take+0xaa>
 80048e2:	4b07      	ldr	r3, [pc, #28]	; (8004900 <pbuf_take+0xb4>)
 80048e4:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80048e8:	4909      	ldr	r1, [pc, #36]	; (8004910 <pbuf_take+0xc4>)
 80048ea:	4804      	ldr	r0, [pc, #16]	; (80048fc <pbuf_take+0xb0>)
 80048ec:	f005 fea8 	bl	800a640 <iprintf>
  return ERR_OK;
 80048f0:	2000      	movs	r0, #0
}
 80048f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 80048f6:	2000      	movs	r0, #0
 80048f8:	e7fb      	b.n	80048f2 <pbuf_take+0xa6>
 80048fa:	bf00      	nop
 80048fc:	0800baa0 	.word	0x0800baa0
 8004900:	0800bfe4 	.word	0x0800bfe4
 8004904:	0800c27c 	.word	0x0800c27c
 8004908:	0800c294 	.word	0x0800c294
 800490c:	0800c2b0 	.word	0x0800c2b0
 8004910:	0800c2e8 	.word	0x0800c2e8
 8004914:	0800c2d0 	.word	0x0800c2d0

08004918 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800491c:	460a      	mov	r2, r1
 800491e:	8921      	ldrh	r1, [r4, #8]
 8004920:	f7ff fd52 	bl	80043c8 <pbuf_alloc>
  if (q == NULL) {
 8004924:	4605      	mov	r5, r0
 8004926:	b118      	cbz	r0, 8004930 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8004928:	4621      	mov	r1, r4
 800492a:	f7ff fe9f 	bl	800466c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800492e:	b908      	cbnz	r0, 8004934 <pbuf_clone+0x1c>
  return q;
}
 8004930:	4628      	mov	r0, r5
 8004932:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <pbuf_clone+0x2c>)
 8004936:	f240 5224 	movw	r2, #1316	; 0x524
 800493a:	4903      	ldr	r1, [pc, #12]	; (8004948 <pbuf_clone+0x30>)
 800493c:	4803      	ldr	r0, [pc, #12]	; (800494c <pbuf_clone+0x34>)
 800493e:	f005 fe7f 	bl	800a640 <iprintf>
 8004942:	e7f5      	b.n	8004930 <pbuf_clone+0x18>
 8004944:	0800bfe4 	.word	0x0800bfe4
 8004948:	0800c300 	.word	0x0800c300
 800494c:	0800baa0 	.word	0x0800baa0

08004950 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8004950:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 8004952:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <tcp_new_port+0x50>)
 8004954:	8818      	ldrh	r0, [r3, #0]
{
 8004956:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800495a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800495e:	e002      	b.n	8004966 <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8004960:	3c01      	subs	r4, #1
 8004962:	b2a4      	uxth	r4, r4
 8004964:	b1bc      	cbz	r4, 8004996 <tcp_new_port+0x46>
  tcp_port++;
 8004966:	3001      	adds	r0, #1
 8004968:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800496a:	4570      	cmp	r0, lr
 800496c:	bf08      	it	eq
 800496e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8004972:	490c      	ldr	r1, [pc, #48]	; (80049a4 <tcp_new_port+0x54>)
 8004974:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004978:	f851 3b04 	ldr.w	r3, [r1], #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	b12b      	cbz	r3, 800498c <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8004980:	8ada      	ldrh	r2, [r3, #22]
 8004982:	4282      	cmp	r2, r0
 8004984:	d0ec      	beq.n	8004960 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d1f9      	bne.n	8004980 <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800498c:	4561      	cmp	r1, ip
 800498e:	d1f3      	bne.n	8004978 <tcp_new_port+0x28>
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <tcp_new_port+0x50>)
 8004992:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8004994:	bd10      	pop	{r4, pc}
 8004996:	4b02      	ldr	r3, [pc, #8]	; (80049a0 <tcp_new_port+0x50>)
 8004998:	8018      	strh	r0, [r3, #0]
          return 0;
 800499a:	4620      	mov	r0, r4
 800499c:	e7fa      	b.n	8004994 <tcp_new_port+0x44>
 800499e:	bf00      	nop
 80049a0:	20000024 	.word	0x20000024
 80049a4:	0800c924 	.word	0x0800c924

080049a8 <tcp_close_shutdown_fin>:
{
 80049a8:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80049aa:	4604      	mov	r4, r0
 80049ac:	b140      	cbz	r0, 80049c0 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 80049ae:	7d23      	ldrb	r3, [r4, #20]
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d018      	beq.n	80049e6 <tcp_close_shutdown_fin+0x3e>
 80049b4:	2b07      	cmp	r3, #7
 80049b6:	d01d      	beq.n	80049f4 <tcp_close_shutdown_fin+0x4c>
 80049b8:	2b03      	cmp	r3, #3
 80049ba:	d009      	beq.n	80049d0 <tcp_close_shutdown_fin+0x28>
 80049bc:	2000      	movs	r0, #0
}
 80049be:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80049c0:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <tcp_close_shutdown_fin+0x6c>)
 80049c2:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80049c6:	4914      	ldr	r1, [pc, #80]	; (8004a18 <tcp_close_shutdown_fin+0x70>)
 80049c8:	4814      	ldr	r0, [pc, #80]	; (8004a1c <tcp_close_shutdown_fin+0x74>)
 80049ca:	f005 fe39 	bl	800a640 <iprintf>
 80049ce:	e7ee      	b.n	80049ae <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 80049d0:	4620      	mov	r0, r4
 80049d2:	f003 fb57 	bl	8008084 <tcp_send_fin>
      if (err == ERR_OK) {
 80049d6:	b9a0      	cbnz	r0, 8004a02 <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80049d8:	2305      	movs	r3, #5
 80049da:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80049dc:	4620      	mov	r0, r4
 80049de:	f003 fcd7 	bl	8008390 <tcp_output>
  return err;
 80049e2:	2000      	movs	r0, #0
 80049e4:	e7eb      	b.n	80049be <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 80049e6:	4620      	mov	r0, r4
 80049e8:	f003 fb4c 	bl	8008084 <tcp_send_fin>
      if (err == ERR_OK) {
 80049ec:	b948      	cbnz	r0, 8004a02 <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80049ee:	2305      	movs	r3, #5
 80049f0:	7523      	strb	r3, [r4, #20]
 80049f2:	e7f3      	b.n	80049dc <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80049f4:	4620      	mov	r0, r4
 80049f6:	f003 fb45 	bl	8008084 <tcp_send_fin>
      if (err == ERR_OK) {
 80049fa:	b910      	cbnz	r0, 8004a02 <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 80049fc:	2309      	movs	r3, #9
 80049fe:	7523      	strb	r3, [r4, #20]
 8004a00:	e7ec      	b.n	80049dc <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8004a02:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a06:	d1da      	bne.n	80049be <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8004a08:	8b63      	ldrh	r3, [r4, #26]
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8004a10:	2000      	movs	r0, #0
 8004a12:	e7d4      	b.n	80049be <tcp_close_shutdown_fin+0x16>
 8004a14:	0800c314 	.word	0x0800c314
 8004a18:	0800c344 	.word	0x0800c344
 8004a1c:	0800baa0 	.word	0x0800baa0

08004a20 <tcp_init>:
{
 8004a20:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8004a22:	f005 fe25 	bl	800a670 <rand>
 8004a26:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8004a2a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8004a2e:	4b01      	ldr	r3, [pc, #4]	; (8004a34 <tcp_init+0x14>)
 8004a30:	8018      	strh	r0, [r3, #0]
}
 8004a32:	bd08      	pop	{r3, pc}
 8004a34:	20000024 	.word	0x20000024

08004a38 <tcp_free>:
{
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004a3c:	7d03      	ldrb	r3, [r0, #20]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d004      	beq.n	8004a4c <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 8004a42:	4621      	mov	r1, r4
 8004a44:	2001      	movs	r0, #1
 8004a46:	f7ff f997 	bl	8003d78 <memp_free>
}
 8004a4a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8004a4c:	4b03      	ldr	r3, [pc, #12]	; (8004a5c <tcp_free+0x24>)
 8004a4e:	22d4      	movs	r2, #212	; 0xd4
 8004a50:	4903      	ldr	r1, [pc, #12]	; (8004a60 <tcp_free+0x28>)
 8004a52:	4804      	ldr	r0, [pc, #16]	; (8004a64 <tcp_free+0x2c>)
 8004a54:	f005 fdf4 	bl	800a640 <iprintf>
 8004a58:	e7f3      	b.n	8004a42 <tcp_free+0xa>
 8004a5a:	bf00      	nop
 8004a5c:	0800c314 	.word	0x0800c314
 8004a60:	0800c350 	.word	0x0800c350
 8004a64:	0800baa0 	.word	0x0800baa0

08004a68 <tcp_update_rcv_ann_wnd>:
{
 8004a68:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	b188      	cbz	r0, 8004a92 <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004a6e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004a70:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004a72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8004a74:	1950      	adds	r0, r2, r5
 8004a76:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8004a78:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 8004a7c:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 8004a80:	bf94      	ite	ls
 8004a82:	eba0 010c 	subls.w	r1, r0, ip
 8004a86:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	db09      	blt.n	8004aa2 <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8004a8e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8004a90:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <tcp_update_rcv_ann_wnd+0x64>)
 8004a94:	f240 32a6 	movw	r2, #934	; 0x3a6
 8004a98:	490d      	ldr	r1, [pc, #52]	; (8004ad0 <tcp_update_rcv_ann_wnd+0x68>)
 8004a9a:	480e      	ldr	r0, [pc, #56]	; (8004ad4 <tcp_update_rcv_ann_wnd+0x6c>)
 8004a9c:	f005 fdd0 	bl	800a640 <iprintf>
 8004aa0:	e7e5      	b.n	8004a6e <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8004aa2:	1aea      	subs	r2, r5, r3
 8004aa4:	2a00      	cmp	r2, #0
 8004aa6:	dd02      	ble.n	8004aae <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	8560      	strh	r0, [r4, #42]	; 0x2a
 8004aac:	e7f0      	b.n	8004a90 <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8004aae:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004ab0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8004ab4:	d202      	bcs.n	8004abc <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8004ab6:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e7e9      	b.n	8004a90 <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <tcp_update_rcv_ann_wnd+0x64>)
 8004abe:	f240 32b6 	movw	r2, #950	; 0x3b6
 8004ac2:	4905      	ldr	r1, [pc, #20]	; (8004ad8 <tcp_update_rcv_ann_wnd+0x70>)
 8004ac4:	4803      	ldr	r0, [pc, #12]	; (8004ad4 <tcp_update_rcv_ann_wnd+0x6c>)
 8004ac6:	f005 fdbb 	bl	800a640 <iprintf>
 8004aca:	e7f4      	b.n	8004ab6 <tcp_update_rcv_ann_wnd+0x4e>
 8004acc:	0800c314 	.word	0x0800c314
 8004ad0:	0800c364 	.word	0x0800c364
 8004ad4:	0800baa0 	.word	0x0800baa0
 8004ad8:	0800c388 	.word	0x0800c388

08004adc <tcp_recved>:
{
 8004adc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004ade:	b178      	cbz	r0, 8004b00 <tcp_recved+0x24>
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004ae4:	7d03      	ldrb	r3, [r0, #20]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d012      	beq.n	8004b10 <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8004aea:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8004aec:	1919      	adds	r1, r3, r4
 8004aee:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8004af0:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8004af4:	d814      	bhi.n	8004b20 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004af6:	428b      	cmp	r3, r1
 8004af8:	bf88      	it	hi
 8004afa:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8004afe:	e011      	b.n	8004b24 <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <tcp_recved+0x68>)
 8004b02:	f240 32cf 	movw	r2, #975	; 0x3cf
 8004b06:	4910      	ldr	r1, [pc, #64]	; (8004b48 <tcp_recved+0x6c>)
 8004b08:	4810      	ldr	r0, [pc, #64]	; (8004b4c <tcp_recved+0x70>)
 8004b0a:	f005 fd99 	bl	800a640 <iprintf>
 8004b0e:	e010      	b.n	8004b32 <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8004b10:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <tcp_recved+0x68>)
 8004b12:	f240 32d2 	movw	r2, #978	; 0x3d2
 8004b16:	490e      	ldr	r1, [pc, #56]	; (8004b50 <tcp_recved+0x74>)
 8004b18:	480c      	ldr	r0, [pc, #48]	; (8004b4c <tcp_recved+0x70>)
 8004b1a:	f005 fd91 	bl	800a640 <iprintf>
 8004b1e:	e7e4      	b.n	8004aea <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8004b20:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8004b24:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8004b26:	4628      	mov	r0, r5
 8004b28:	f7ff ff9e 	bl	8004a68 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8004b2c:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8004b30:	d200      	bcs.n	8004b34 <tcp_recved+0x58>
}
 8004b32:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8004b34:	8b6b      	ldrh	r3, [r5, #26]
 8004b36:	f043 0302 	orr.w	r3, r3, #2
 8004b3a:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f003 fc27 	bl	8008390 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 8004b42:	e7f6      	b.n	8004b32 <tcp_recved+0x56>
 8004b44:	0800c314 	.word	0x0800c314
 8004b48:	0800c3a4 	.word	0x0800c3a4
 8004b4c:	0800baa0 	.word	0x0800baa0
 8004b50:	0800c3bc 	.word	0x0800c3bc

08004b54 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8004b54:	b150      	cbz	r0, 8004b6c <tcp_seg_free+0x18>
{
 8004b56:	b510      	push	{r4, lr}
 8004b58:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8004b5a:	6840      	ldr	r0, [r0, #4]
 8004b5c:	b108      	cbz	r0, 8004b62 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8004b5e:	f7ff fbc9 	bl	80042f4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8004b62:	4621      	mov	r1, r4
 8004b64:	2003      	movs	r0, #3
 8004b66:	f7ff f907 	bl	8003d78 <memp_free>
  }
}
 8004b6a:	bd10      	pop	{r4, pc}
 8004b6c:	4770      	bx	lr

08004b6e <tcp_segs_free>:
{
 8004b6e:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8004b70:	4604      	mov	r4, r0
 8004b72:	b128      	cbz	r0, 8004b80 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 8004b74:	4620      	mov	r0, r4
 8004b76:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8004b78:	f7ff ffec 	bl	8004b54 <tcp_seg_free>
  while (seg != NULL) {
 8004b7c:	2c00      	cmp	r4, #0
 8004b7e:	d1f9      	bne.n	8004b74 <tcp_segs_free+0x6>
}
 8004b80:	bd10      	pop	{r4, pc}
	...

08004b84 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8004b84:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8004b86:	4605      	mov	r5, r0
 8004b88:	b188      	cbz	r0, 8004bae <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8004b8a:	2003      	movs	r0, #3
 8004b8c:	f7ff f8c4 	bl	8003d18 <memp_malloc>
  if (cseg == NULL) {
 8004b90:	4604      	mov	r4, r0
 8004b92:	b150      	cbz	r0, 8004baa <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8004b94:	6828      	ldr	r0, [r5, #0]
 8004b96:	6869      	ldr	r1, [r5, #4]
 8004b98:	68aa      	ldr	r2, [r5, #8]
 8004b9a:	68eb      	ldr	r3, [r5, #12]
 8004b9c:	6020      	str	r0, [r4, #0]
 8004b9e:	6061      	str	r1, [r4, #4]
 8004ba0:	60a2      	str	r2, [r4, #8]
 8004ba2:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8004ba4:	6860      	ldr	r0, [r4, #4]
 8004ba6:	f7ff fd0b 	bl	80045c0 <pbuf_ref>
  return cseg;
}
 8004baa:	4620      	mov	r0, r4
 8004bac:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8004bae:	4b04      	ldr	r3, [pc, #16]	; (8004bc0 <tcp_seg_copy+0x3c>)
 8004bb0:	f240 6282 	movw	r2, #1666	; 0x682
 8004bb4:	4903      	ldr	r1, [pc, #12]	; (8004bc4 <tcp_seg_copy+0x40>)
 8004bb6:	4804      	ldr	r0, [pc, #16]	; (8004bc8 <tcp_seg_copy+0x44>)
 8004bb8:	f005 fd42 	bl	800a640 <iprintf>
 8004bbc:	e7e5      	b.n	8004b8a <tcp_seg_copy+0x6>
 8004bbe:	bf00      	nop
 8004bc0:	0800c314 	.word	0x0800c314
 8004bc4:	0800c3e4 	.word	0x0800c3e4
 8004bc8:	0800baa0 	.word	0x0800baa0

08004bcc <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8004bcc:	b100      	cbz	r0, 8004bd0 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8004bce:	6101      	str	r1, [r0, #16]
  }
}
 8004bd0:	4770      	bx	lr
	...

08004bd4 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004bd4:	b180      	cbz	r0, 8004bf8 <tcp_recv+0x24>
{
 8004bd6:	b538      	push	{r3, r4, r5, lr}
 8004bd8:	460c      	mov	r4, r1
 8004bda:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8004bdc:	7d03      	ldrb	r3, [r0, #20]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d002      	beq.n	8004be8 <tcp_recv+0x14>
    pcb->recv = recv;
 8004be2:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <tcp_recv+0x28>)
 8004bea:	f240 72df 	movw	r2, #2015	; 0x7df
 8004bee:	4904      	ldr	r1, [pc, #16]	; (8004c00 <tcp_recv+0x2c>)
 8004bf0:	4804      	ldr	r0, [pc, #16]	; (8004c04 <tcp_recv+0x30>)
 8004bf2:	f005 fd25 	bl	800a640 <iprintf>
 8004bf6:	e7f4      	b.n	8004be2 <tcp_recv+0xe>
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	0800c314 	.word	0x0800c314
 8004c00:	0800c400 	.word	0x0800c400
 8004c04:	0800baa0 	.word	0x0800baa0

08004c08 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004c08:	b180      	cbz	r0, 8004c2c <tcp_sent+0x24>
{
 8004c0a:	b538      	push	{r3, r4, r5, lr}
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8004c10:	7d03      	ldrb	r3, [r0, #20]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d002      	beq.n	8004c1c <tcp_sent+0x14>
    pcb->sent = sent;
 8004c16:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8004c1c:	4b04      	ldr	r3, [pc, #16]	; (8004c30 <tcp_sent+0x28>)
 8004c1e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8004c22:	4904      	ldr	r1, [pc, #16]	; (8004c34 <tcp_sent+0x2c>)
 8004c24:	4804      	ldr	r0, [pc, #16]	; (8004c38 <tcp_sent+0x30>)
 8004c26:	f005 fd0b 	bl	800a640 <iprintf>
 8004c2a:	e7f4      	b.n	8004c16 <tcp_sent+0xe>
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	0800c314 	.word	0x0800c314
 8004c34:	0800c428 	.word	0x0800c428
 8004c38:	0800baa0 	.word	0x0800baa0

08004c3c <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8004c3c:	b180      	cbz	r0, 8004c60 <tcp_err+0x24>
{
 8004c3e:	b538      	push	{r3, r4, r5, lr}
 8004c40:	460c      	mov	r4, r1
 8004c42:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8004c44:	7d03      	ldrb	r3, [r0, #20]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d002      	beq.n	8004c50 <tcp_err+0x14>
    pcb->errf = err;
 8004c4a:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8004c4e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <tcp_err+0x28>)
 8004c52:	f640 020d 	movw	r2, #2061	; 0x80d
 8004c56:	4904      	ldr	r1, [pc, #16]	; (8004c68 <tcp_err+0x2c>)
 8004c58:	4804      	ldr	r0, [pc, #16]	; (8004c6c <tcp_err+0x30>)
 8004c5a:	f005 fcf1 	bl	800a640 <iprintf>
 8004c5e:	e7f4      	b.n	8004c4a <tcp_err+0xe>
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	0800c314 	.word	0x0800c314
 8004c68:	0800c450 	.word	0x0800c450
 8004c6c:	0800baa0 	.word	0x0800baa0

08004c70 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8004c70:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8004c72:	b148      	cbz	r0, 8004c88 <tcp_poll+0x18>
 8004c74:	460d      	mov	r5, r1
 8004c76:	4614      	mov	r4, r2
 8004c78:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8004c7a:	7d03      	ldrb	r3, [r0, #20]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d00b      	beq.n	8004c98 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8004c80:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8004c84:	7774      	strb	r4, [r6, #29]
}
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8004c88:	4b07      	ldr	r3, [pc, #28]	; (8004ca8 <tcp_poll+0x38>)
 8004c8a:	f640 023d 	movw	r2, #2109	; 0x83d
 8004c8e:	4907      	ldr	r1, [pc, #28]	; (8004cac <tcp_poll+0x3c>)
 8004c90:	4807      	ldr	r0, [pc, #28]	; (8004cb0 <tcp_poll+0x40>)
 8004c92:	f005 fcd5 	bl	800a640 <iprintf>
 8004c96:	e7f6      	b.n	8004c86 <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <tcp_poll+0x38>)
 8004c9a:	f640 023e 	movw	r2, #2110	; 0x83e
 8004c9e:	4905      	ldr	r1, [pc, #20]	; (8004cb4 <tcp_poll+0x44>)
 8004ca0:	4803      	ldr	r0, [pc, #12]	; (8004cb0 <tcp_poll+0x40>)
 8004ca2:	f005 fccd 	bl	800a640 <iprintf>
 8004ca6:	e7eb      	b.n	8004c80 <tcp_poll+0x10>
 8004ca8:	0800c314 	.word	0x0800c314
 8004cac:	0800c478 	.word	0x0800c478
 8004cb0:	0800baa0 	.word	0x0800baa0
 8004cb4:	0800c490 	.word	0x0800c490

08004cb8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8004cb8:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8004cba:	b130      	cbz	r0, 8004cca <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8004cbc:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <tcp_next_iss+0x24>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4a07      	ldr	r2, [pc, #28]	; (8004ce0 <tcp_next_iss+0x28>)
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	4410      	add	r0, r2
 8004cc6:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8004cc8:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8004cca:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <tcp_next_iss+0x2c>)
 8004ccc:	f640 02af 	movw	r2, #2223	; 0x8af
 8004cd0:	4905      	ldr	r1, [pc, #20]	; (8004ce8 <tcp_next_iss+0x30>)
 8004cd2:	4806      	ldr	r0, [pc, #24]	; (8004cec <tcp_next_iss+0x34>)
 8004cd4:	f005 fcb4 	bl	800a640 <iprintf>
 8004cd8:	e7f0      	b.n	8004cbc <tcp_next_iss+0x4>
 8004cda:	bf00      	nop
 8004cdc:	20000020 	.word	0x20000020
 8004ce0:	2000a9b4 	.word	0x2000a9b4
 8004ce4:	0800c314 	.word	0x0800c314
 8004ce8:	0800c4b0 	.word	0x0800c4b0
 8004cec:	0800baa0 	.word	0x0800baa0

08004cf0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4605      	mov	r5, r0
 8004cf4:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8004cf6:	b162      	cbz	r2, 8004d12 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8004cf8:	b14c      	cbz	r4, 8004d0e <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 8004cfa:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8004cfc:	b13b      	cbz	r3, 8004d0e <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8004cfe:	2b28      	cmp	r3, #40	; 0x28
 8004d00:	bf86      	itte	hi
 8004d02:	3b28      	subhi	r3, #40	; 0x28
 8004d04:	b29b      	uxthhi	r3, r3
 8004d06:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8004d08:	429d      	cmp	r5, r3
 8004d0a:	bf28      	it	cs
 8004d0c:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 8004d0e:	4628      	mov	r0, r5
 8004d10:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8004d12:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <tcp_eff_send_mss_netif+0x34>)
 8004d14:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8004d18:	4903      	ldr	r1, [pc, #12]	; (8004d28 <tcp_eff_send_mss_netif+0x38>)
 8004d1a:	4804      	ldr	r0, [pc, #16]	; (8004d2c <tcp_eff_send_mss_netif+0x3c>)
 8004d1c:	f005 fc90 	bl	800a640 <iprintf>
 8004d20:	e7ea      	b.n	8004cf8 <tcp_eff_send_mss_netif+0x8>
 8004d22:	bf00      	nop
 8004d24:	0800c314 	.word	0x0800c314
 8004d28:	0800c4cc 	.word	0x0800c4cc
 8004d2c:	0800baa0 	.word	0x0800baa0

08004d30 <tcp_connect>:
{
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d04f      	beq.n	8004dd6 <tcp_connect+0xa6>
 8004d36:	461e      	mov	r6, r3
 8004d38:	4604      	mov	r4, r0
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d055      	beq.n	8004dea <tcp_connect+0xba>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8004d3e:	7d03      	ldrb	r3, [r0, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d15c      	bne.n	8004dfe <tcp_connect+0xce>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8004d44:	680b      	ldr	r3, [r1, #0]
 8004d46:	6043      	str	r3, [r0, #4]
  pcb->remote_port = port;
 8004d48:	8302      	strh	r2, [r0, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8004d4a:	7a00      	ldrb	r0, [r0, #8]
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d060      	beq.n	8004e12 <tcp_connect+0xe2>
    netif = netif_get_by_index(pcb->netif_idx);
 8004d50:	f7ff f9e0 	bl	8004114 <netif_get_by_index>
 8004d54:	4605      	mov	r5, r0
  if (netif == NULL) {
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	d074      	beq.n	8004e44 <tcp_connect+0x114>
  if (ip_addr_isany(&pcb->local_ip)) {
 8004d5a:	6823      	ldr	r3, [r4, #0]
 8004d5c:	b90b      	cbnz	r3, 8004d62 <tcp_connect+0x32>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8004d5e:	686b      	ldr	r3, [r5, #4]
 8004d60:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 8004d62:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 8004d64:	b927      	cbnz	r7, 8004d70 <tcp_connect+0x40>
    pcb->local_port = tcp_new_port();
 8004d66:	f7ff fdf3 	bl	8004950 <tcp_new_port>
 8004d6a:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d06c      	beq.n	8004e4a <tcp_connect+0x11a>
  iss = tcp_next_iss(pcb);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ffa1 	bl	8004cb8 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 8004d76:	2100      	movs	r1, #0
 8004d78:	6261      	str	r1, [r4, #36]	; 0x24
  pcb->snd_nxt = iss;
 8004d7a:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 8004d7c:	3801      	subs	r0, #1
 8004d7e:	6460      	str	r0, [r4, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8004d80:	65a0      	str	r0, [r4, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8004d82:	65e0      	str	r0, [r4, #92]	; 0x5c
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8004d84:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8004d88:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004d8a:	8523      	strh	r3, [r4, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8004d8c:	62e1      	str	r1, [r4, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8004d8e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 8004d92:	f44f 7006 	mov.w	r0, #536	; 0x218
 8004d96:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8004d98:	1d22      	adds	r2, r4, #4
 8004d9a:	4629      	mov	r1, r5
 8004d9c:	f7ff ffa8 	bl	8004cf0 <tcp_eff_send_mss_netif>
 8004da0:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->cwnd = 1;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  pcb->connected = connected;
 8004da8:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8004dac:	2102      	movs	r1, #2
 8004dae:	4620      	mov	r0, r4
 8004db0:	f003 f8be 	bl	8007f30 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 8004db4:	4605      	mov	r5, r0
 8004db6:	2800      	cmp	r0, #0
 8004db8:	d142      	bne.n	8004e40 <tcp_connect+0x110>
    pcb->state = SYN_SENT;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 8004dbe:	2f00      	cmp	r7, #0
 8004dc0:	d032      	beq.n	8004e28 <tcp_connect+0xf8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <tcp_connect+0x120>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	42a3      	cmp	r3, r4
 8004dc8:	d028      	beq.n	8004e1c <tcp_connect+0xec>
 8004dca:	b36b      	cbz	r3, 8004e28 <tcp_connect+0xf8>
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	42a2      	cmp	r2, r4
 8004dd0:	d028      	beq.n	8004e24 <tcp_connect+0xf4>
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	e7f9      	b.n	8004dca <tcp_connect+0x9a>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <tcp_connect+0x124>)
 8004dd8:	f240 4235 	movw	r2, #1077	; 0x435
 8004ddc:	491e      	ldr	r1, [pc, #120]	; (8004e58 <tcp_connect+0x128>)
 8004dde:	481f      	ldr	r0, [pc, #124]	; (8004e5c <tcp_connect+0x12c>)
 8004de0:	f005 fc2e 	bl	800a640 <iprintf>
 8004de4:	f06f 050f 	mvn.w	r5, #15
 8004de8:	e02a      	b.n	8004e40 <tcp_connect+0x110>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8004dea:	4b1a      	ldr	r3, [pc, #104]	; (8004e54 <tcp_connect+0x124>)
 8004dec:	f240 4236 	movw	r2, #1078	; 0x436
 8004df0:	491b      	ldr	r1, [pc, #108]	; (8004e60 <tcp_connect+0x130>)
 8004df2:	481a      	ldr	r0, [pc, #104]	; (8004e5c <tcp_connect+0x12c>)
 8004df4:	f005 fc24 	bl	800a640 <iprintf>
 8004df8:	f06f 050f 	mvn.w	r5, #15
 8004dfc:	e020      	b.n	8004e40 <tcp_connect+0x110>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8004dfe:	4b15      	ldr	r3, [pc, #84]	; (8004e54 <tcp_connect+0x124>)
 8004e00:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8004e04:	4917      	ldr	r1, [pc, #92]	; (8004e64 <tcp_connect+0x134>)
 8004e06:	4815      	ldr	r0, [pc, #84]	; (8004e5c <tcp_connect+0x12c>)
 8004e08:	f005 fc1a 	bl	800a640 <iprintf>
 8004e0c:	f06f 0509 	mvn.w	r5, #9
 8004e10:	e016      	b.n	8004e40 <tcp_connect+0x110>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8004e12:	1d20      	adds	r0, r4, #4
 8004e14:	f004 fca6 	bl	8009764 <ip4_route>
 8004e18:	4605      	mov	r5, r0
 8004e1a:	e79c      	b.n	8004d56 <tcp_connect+0x26>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8004e1c:	68e2      	ldr	r2, [r4, #12]
 8004e1e:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <tcp_connect+0x120>)
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e001      	b.n	8004e28 <tcp_connect+0xf8>
 8004e24:	68e2      	ldr	r2, [r4, #12]
 8004e26:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 8004e28:	4b0f      	ldr	r3, [pc, #60]	; (8004e68 <tcp_connect+0x138>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	60e2      	str	r2, [r4, #12]
 8004e2e:	601c      	str	r4, [r3, #0]
 8004e30:	f003 fdbe 	bl	80089b0 <tcp_timer_needed>
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <tcp_connect+0x13c>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	f003 faa8 	bl	8008390 <tcp_output>
}
 8004e40:	4628      	mov	r0, r5
 8004e42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_RTE;
 8004e44:	f06f 0503 	mvn.w	r5, #3
 8004e48:	e7fa      	b.n	8004e40 <tcp_connect+0x110>
      return ERR_BUF;
 8004e4a:	f06f 0501 	mvn.w	r5, #1
 8004e4e:	e7f7      	b.n	8004e40 <tcp_connect+0x110>
 8004e50:	2000a9ac 	.word	0x2000a9ac
 8004e54:	0800c314 	.word	0x0800c314
 8004e58:	0800c4f4 	.word	0x0800c4f4
 8004e5c:	0800baa0 	.word	0x0800baa0
 8004e60:	0800c510 	.word	0x0800c510
 8004e64:	0800c52c 	.word	0x0800c52c
 8004e68:	2000a9a4 	.word	0x2000a9a4
 8004e6c:	2000a9a8 	.word	0x2000a9a8

08004e70 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8004e70:	b510      	push	{r4, lr}
 8004e72:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8004e74:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8004e76:	b118      	cbz	r0, 8004e80 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 8004e78:	f7ff fe79 	bl	8004b6e <tcp_segs_free>
    pcb->ooseq = NULL;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8004e80:	bd10      	pop	{r4, pc}
	...

08004e84 <tcp_pcb_purge>:
{
 8004e84:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8004e86:	b1f8      	cbz	r0, 8004ec8 <tcp_pcb_purge+0x44>
 8004e88:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8004e8a:	7d03      	ldrb	r3, [r0, #20]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d91a      	bls.n	8004ec6 <tcp_pcb_purge+0x42>
 8004e90:	2b0a      	cmp	r3, #10
 8004e92:	d018      	beq.n	8004ec6 <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8004e94:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8004e96:	b118      	cbz	r0, 8004ea0 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 8004e98:	f7ff fa2c 	bl	80042f4 <pbuf_free>
      pcb->refused_data = NULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8004ea0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004ea2:	b113      	cbz	r3, 8004eaa <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	f7ff ffe3 	bl	8004e70 <tcp_free_ooseq>
    pcb->rtime = -1;
 8004eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eae:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8004eb0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004eb2:	f7ff fe5c 	bl	8004b6e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8004eb6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8004eb8:	f7ff fe59 	bl	8004b6e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004ec0:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8004ec2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8004ec6:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8004ec8:	4b03      	ldr	r3, [pc, #12]	; (8004ed8 <tcp_pcb_purge+0x54>)
 8004eca:	f640 0251 	movw	r2, #2129	; 0x851
 8004ece:	4903      	ldr	r1, [pc, #12]	; (8004edc <tcp_pcb_purge+0x58>)
 8004ed0:	4803      	ldr	r0, [pc, #12]	; (8004ee0 <tcp_pcb_purge+0x5c>)
 8004ed2:	f005 fbb5 	bl	800a640 <iprintf>
 8004ed6:	e7f6      	b.n	8004ec6 <tcp_pcb_purge+0x42>
 8004ed8:	0800c314 	.word	0x0800c314
 8004edc:	0800c55c 	.word	0x0800c55c
 8004ee0:	0800baa0 	.word	0x0800baa0

08004ee4 <tcp_pcb_remove>:
{
 8004ee4:	b538      	push	{r3, r4, r5, lr}
 8004ee6:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8004ee8:	460c      	mov	r4, r1
 8004eea:	b149      	cbz	r1, 8004f00 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8004eec:	b185      	cbz	r5, 8004f10 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	42a3      	cmp	r3, r4
 8004ef2:	d015      	beq.n	8004f20 <tcp_pcb_remove+0x3c>
 8004ef4:	b1cb      	cbz	r3, 8004f2a <tcp_pcb_remove+0x46>
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	42a2      	cmp	r2, r4
 8004efa:	d014      	beq.n	8004f26 <tcp_pcb_remove+0x42>
 8004efc:	4613      	mov	r3, r2
 8004efe:	e7f9      	b.n	8004ef4 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8004f00:	4b25      	ldr	r3, [pc, #148]	; (8004f98 <tcp_pcb_remove+0xb4>)
 8004f02:	f640 0283 	movw	r2, #2179	; 0x883
 8004f06:	4925      	ldr	r1, [pc, #148]	; (8004f9c <tcp_pcb_remove+0xb8>)
 8004f08:	4825      	ldr	r0, [pc, #148]	; (8004fa0 <tcp_pcb_remove+0xbc>)
 8004f0a:	f005 fb99 	bl	800a640 <iprintf>
 8004f0e:	e7ed      	b.n	8004eec <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8004f10:	4b21      	ldr	r3, [pc, #132]	; (8004f98 <tcp_pcb_remove+0xb4>)
 8004f12:	f640 0284 	movw	r2, #2180	; 0x884
 8004f16:	4923      	ldr	r1, [pc, #140]	; (8004fa4 <tcp_pcb_remove+0xc0>)
 8004f18:	4821      	ldr	r0, [pc, #132]	; (8004fa0 <tcp_pcb_remove+0xbc>)
 8004f1a:	f005 fb91 	bl	800a640 <iprintf>
 8004f1e:	e7e6      	b.n	8004eee <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8004f20:	68e3      	ldr	r3, [r4, #12]
 8004f22:	602b      	str	r3, [r5, #0]
 8004f24:	e001      	b.n	8004f2a <tcp_pcb_remove+0x46>
 8004f26:	68e2      	ldr	r2, [r4, #12]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f7ff ffa8 	bl	8004e84 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8004f34:	7d23      	ldrb	r3, [r4, #20]
 8004f36:	2b0a      	cmp	r3, #10
 8004f38:	d005      	beq.n	8004f46 <tcp_pcb_remove+0x62>
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d01e      	beq.n	8004f7c <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8004f3e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8004f40:	f013 0f01 	tst.w	r3, #1
 8004f44:	d11e      	bne.n	8004f84 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8004f46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8004f48:	b133      	cbz	r3, 8004f58 <tcp_pcb_remove+0x74>
 8004f4a:	4b13      	ldr	r3, [pc, #76]	; (8004f98 <tcp_pcb_remove+0xb4>)
 8004f4c:	f640 0293 	movw	r2, #2195	; 0x893
 8004f50:	4915      	ldr	r1, [pc, #84]	; (8004fa8 <tcp_pcb_remove+0xc4>)
 8004f52:	4813      	ldr	r0, [pc, #76]	; (8004fa0 <tcp_pcb_remove+0xbc>)
 8004f54:	f005 fb74 	bl	800a640 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8004f58:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004f5a:	b133      	cbz	r3, 8004f6a <tcp_pcb_remove+0x86>
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <tcp_pcb_remove+0xb4>)
 8004f5e:	f640 0294 	movw	r2, #2196	; 0x894
 8004f62:	4912      	ldr	r1, [pc, #72]	; (8004fac <tcp_pcb_remove+0xc8>)
 8004f64:	480e      	ldr	r0, [pc, #56]	; (8004fa0 <tcp_pcb_remove+0xbc>)
 8004f66:	f005 fb6b 	bl	800a640 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8004f6a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004f6c:	b133      	cbz	r3, 8004f7c <tcp_pcb_remove+0x98>
 8004f6e:	4b0a      	ldr	r3, [pc, #40]	; (8004f98 <tcp_pcb_remove+0xb4>)
 8004f70:	f640 0296 	movw	r2, #2198	; 0x896
 8004f74:	490e      	ldr	r1, [pc, #56]	; (8004fb0 <tcp_pcb_remove+0xcc>)
 8004f76:	480a      	ldr	r0, [pc, #40]	; (8004fa0 <tcp_pcb_remove+0xbc>)
 8004f78:	f005 fb62 	bl	800a640 <iprintf>
  pcb->state = CLOSED;
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8004f80:	82e3      	strh	r3, [r4, #22]
}
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8004f84:	f043 0302 	orr.w	r3, r3, #2
 8004f88:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	f003 fa00 	bl	8008390 <tcp_output>
  if (pcb->state != LISTEN) {
 8004f90:	7d23      	ldrb	r3, [r4, #20]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d0f2      	beq.n	8004f7c <tcp_pcb_remove+0x98>
 8004f96:	e7d6      	b.n	8004f46 <tcp_pcb_remove+0x62>
 8004f98:	0800c314 	.word	0x0800c314
 8004f9c:	0800c578 	.word	0x0800c578
 8004fa0:	0800baa0 	.word	0x0800baa0
 8004fa4:	0800c594 	.word	0x0800c594
 8004fa8:	0800c5b4 	.word	0x0800c5b4
 8004fac:	0800c5cc 	.word	0x0800c5cc
 8004fb0:	0800c5e8 	.word	0x0800c5e8

08004fb4 <tcp_abandon>:
{
 8004fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb8:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8004fba:	b1f8      	cbz	r0, 8004ffc <tcp_abandon+0x48>
 8004fbc:	460d      	mov	r5, r1
 8004fbe:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8004fc0:	7d03      	ldrb	r3, [r0, #20]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d022      	beq.n	800500c <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 8004fc6:	7d23      	ldrb	r3, [r4, #20]
 8004fc8:	2b0a      	cmp	r3, #10
 8004fca:	d027      	beq.n	800501c <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 8004fcc:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8004fd0:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8004fd4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8004fd8:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d147      	bne.n	800506e <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 8004fde:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8004fe2:	f1ba 0f00 	cmp.w	sl, #0
 8004fe6:	d04c      	beq.n	8005082 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8004fe8:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <tcp_abandon+0xec>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	42a3      	cmp	r3, r4
 8004fee:	d01d      	beq.n	800502c <tcp_abandon+0x78>
 8004ff0:	b313      	cbz	r3, 8005038 <tcp_abandon+0x84>
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	42a2      	cmp	r2, r4
 8004ff6:	d01d      	beq.n	8005034 <tcp_abandon+0x80>
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	e7f9      	b.n	8004ff0 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8004ffc:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <tcp_abandon+0xf0>)
 8004ffe:	f240 223d 	movw	r2, #573	; 0x23d
 8005002:	4929      	ldr	r1, [pc, #164]	; (80050a8 <tcp_abandon+0xf4>)
 8005004:	4829      	ldr	r0, [pc, #164]	; (80050ac <tcp_abandon+0xf8>)
 8005006:	f005 fb1b 	bl	800a640 <iprintf>
 800500a:	e02d      	b.n	8005068 <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800500c:	4b25      	ldr	r3, [pc, #148]	; (80050a4 <tcp_abandon+0xf0>)
 800500e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8005012:	4927      	ldr	r1, [pc, #156]	; (80050b0 <tcp_abandon+0xfc>)
 8005014:	4825      	ldr	r0, [pc, #148]	; (80050ac <tcp_abandon+0xf8>)
 8005016:	f005 fb13 	bl	800a640 <iprintf>
 800501a:	e7d4      	b.n	8004fc6 <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800501c:	4621      	mov	r1, r4
 800501e:	4825      	ldr	r0, [pc, #148]	; (80050b4 <tcp_abandon+0x100>)
 8005020:	f7ff ff60 	bl	8004ee4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005024:	4620      	mov	r0, r4
 8005026:	f7ff fd07 	bl	8004a38 <tcp_free>
 800502a:	e01d      	b.n	8005068 <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800502c:	68e2      	ldr	r2, [r4, #12]
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <tcp_abandon+0xec>)
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e001      	b.n	8005038 <tcp_abandon+0x84>
 8005034:	68e2      	ldr	r2, [r4, #12]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	2500      	movs	r5, #0
 800503a:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 800503c:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 800503e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005040:	b108      	cbz	r0, 8005046 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 8005042:	f7ff fd94 	bl	8004b6e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005046:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005048:	b108      	cbz	r0, 800504e <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 800504a:	f7ff fd90 	bl	8004b6e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800504e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005050:	b108      	cbz	r0, 8005056 <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 8005052:	f7ff fd8c 	bl	8004b6e <tcp_segs_free>
    if (send_rst) {
 8005056:	b9b5      	cbnz	r5, 8005086 <tcp_abandon+0xd2>
    tcp_free(pcb);
 8005058:	4620      	mov	r0, r4
 800505a:	f7ff fced 	bl	8004a38 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800505e:	b11e      	cbz	r6, 8005068 <tcp_abandon+0xb4>
 8005060:	f06f 010c 	mvn.w	r1, #12
 8005064:	4638      	mov	r0, r7
 8005066:	47b0      	blx	r6
}
 8005068:	b004      	add	sp, #16
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 800506e:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005072:	4621      	mov	r1, r4
 8005074:	4810      	ldr	r0, [pc, #64]	; (80050b8 <tcp_abandon+0x104>)
 8005076:	f7ff ff35 	bl	8004ee4 <tcp_pcb_remove>
 800507a:	4b10      	ldr	r3, [pc, #64]	; (80050bc <tcp_abandon+0x108>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
 8005080:	e7dd      	b.n	800503e <tcp_abandon+0x8a>
    int send_rst = 0;
 8005082:	2500      	movs	r5, #0
 8005084:	e7db      	b.n	800503e <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005086:	8b23      	ldrh	r3, [r4, #24]
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	f8cd a004 	str.w	sl, [sp, #4]
 800508e:	1d23      	adds	r3, r4, #4
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	4623      	mov	r3, r4
 8005094:	464a      	mov	r2, r9
 8005096:	4641      	mov	r1, r8
 8005098:	4620      	mov	r0, r4
 800509a:	f003 f8f7 	bl	800828c <tcp_rst>
 800509e:	e7db      	b.n	8005058 <tcp_abandon+0xa4>
 80050a0:	2000a9ac 	.word	0x2000a9ac
 80050a4:	0800c314 	.word	0x0800c314
 80050a8:	0800c600 	.word	0x0800c600
 80050ac:	0800baa0 	.word	0x0800baa0
 80050b0:	0800c61c 	.word	0x0800c61c
 80050b4:	2000a9bc 	.word	0x2000a9bc
 80050b8:	2000a9a4 	.word	0x2000a9a4
 80050bc:	2000a9a8 	.word	0x2000a9a8

080050c0 <tcp_abort>:
{
 80050c0:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80050c2:	2101      	movs	r1, #1
 80050c4:	f7ff ff76 	bl	8004fb4 <tcp_abandon>
}
 80050c8:	bd08      	pop	{r3, pc}
	...

080050cc <tcp_netif_ip_addr_changed_pcblist>:
{
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80050d0:	4605      	mov	r5, r0
 80050d2:	b108      	cbz	r0, 80050d8 <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 80050d4:	b97c      	cbnz	r4, 80050f6 <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 80050d6:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 80050da:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80050de:	490a      	ldr	r1, [pc, #40]	; (8005108 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 80050e0:	480a      	ldr	r0, [pc, #40]	; (800510c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 80050e2:	f005 faad 	bl	800a640 <iprintf>
 80050e6:	e7f5      	b.n	80050d4 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 80050e8:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 80050ea:	4620      	mov	r0, r4
 80050ec:	f7ff ffe8 	bl	80050c0 <tcp_abort>
      pcb = next;
 80050f0:	4634      	mov	r4, r6
  while (pcb != NULL) {
 80050f2:	2c00      	cmp	r4, #0
 80050f4:	d0ef      	beq.n	80050d6 <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80050f6:	6822      	ldr	r2, [r4, #0]
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d0f4      	beq.n	80050e8 <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 80050fe:	68e4      	ldr	r4, [r4, #12]
 8005100:	e7f7      	b.n	80050f2 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8005102:	bf00      	nop
 8005104:	0800c314 	.word	0x0800c314
 8005108:	0800c650 	.word	0x0800c650
 800510c:	0800baa0 	.word	0x0800baa0

08005110 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8005110:	b308      	cbz	r0, 8005156 <tcp_netif_ip_addr_changed+0x46>
{
 8005112:	b538      	push	{r3, r4, r5, lr}
 8005114:	460d      	mov	r5, r1
 8005116:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8005118:	6803      	ldr	r3, [r0, #0]
 800511a:	b903      	cbnz	r3, 800511e <tcp_netif_ip_addr_changed+0xe>
}
 800511c:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800511e:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <tcp_netif_ip_addr_changed+0x48>)
 8005120:	6819      	ldr	r1, [r3, #0]
 8005122:	f7ff ffd3 	bl	80050cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <tcp_netif_ip_addr_changed+0x4c>)
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	4620      	mov	r0, r4
 800512c:	f7ff ffce 	bl	80050cc <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8005130:	2d00      	cmp	r5, #0
 8005132:	d0f3      	beq.n	800511c <tcp_netif_ip_addr_changed+0xc>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d0f0      	beq.n	800511c <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <tcp_netif_ip_addr_changed+0x50>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ec      	beq.n	800511c <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8005142:	6819      	ldr	r1, [r3, #0]
 8005144:	6822      	ldr	r2, [r4, #0]
 8005146:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8005148:	bf04      	itt	eq
 800514a:	682a      	ldreq	r2, [r5, #0]
 800514c:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1f6      	bne.n	8005142 <tcp_netif_ip_addr_changed+0x32>
 8005154:	e7e2      	b.n	800511c <tcp_netif_ip_addr_changed+0xc>
 8005156:	4770      	bx	lr
 8005158:	2000a9a4 	.word	0x2000a9a4
 800515c:	2000a9ac 	.word	0x2000a9ac
 8005160:	2000a9b0 	.word	0x2000a9b0

08005164 <tcp_kill_state>:
{
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005168:	f1a0 0308 	sub.w	r3, r0, #8
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b01      	cmp	r3, #1
 8005170:	d807      	bhi.n	8005182 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <tcp_kill_state+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	b1e3      	cbz	r3, 80051b2 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005178:	4a0f      	ldr	r2, [pc, #60]	; (80051b8 <tcp_kill_state+0x54>)
 800517a:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 800517c:	2100      	movs	r1, #0
  inactive = NULL;
 800517e:	4608      	mov	r0, r1
 8005180:	e009      	b.n	8005196 <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8005182:	4b0e      	ldr	r3, [pc, #56]	; (80051bc <tcp_kill_state+0x58>)
 8005184:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8005188:	490d      	ldr	r1, [pc, #52]	; (80051c0 <tcp_kill_state+0x5c>)
 800518a:	480e      	ldr	r0, [pc, #56]	; (80051c4 <tcp_kill_state+0x60>)
 800518c:	f005 fa58 	bl	800a640 <iprintf>
 8005190:	e7ef      	b.n	8005172 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	b14b      	cbz	r3, 80051aa <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8005196:	7d1a      	ldrb	r2, [r3, #20]
 8005198:	42a2      	cmp	r2, r4
 800519a:	d1fa      	bne.n	8005192 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800519c:	6a1a      	ldr	r2, [r3, #32]
 800519e:	1aaa      	subs	r2, r5, r2
 80051a0:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 80051a2:	bf24      	itt	cs
 80051a4:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80051a6:	4618      	movcs	r0, r3
 80051a8:	e7f3      	b.n	8005192 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 80051aa:	b110      	cbz	r0, 80051b2 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 80051ac:	2100      	movs	r1, #0
 80051ae:	f7ff ff01 	bl	8004fb4 <tcp_abandon>
}
 80051b2:	bd38      	pop	{r3, r4, r5, pc}
 80051b4:	2000a9a4 	.word	0x2000a9a4
 80051b8:	2000a9b4 	.word	0x2000a9b4
 80051bc:	0800c314 	.word	0x0800c314
 80051c0:	0800c684 	.word	0x0800c684
 80051c4:	0800baa0 	.word	0x0800baa0

080051c8 <tcp_alloc>:
{
 80051c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ca:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80051cc:	2001      	movs	r0, #1
 80051ce:	f7fe fda3 	bl	8003d18 <memp_malloc>
  if (pcb == NULL) {
 80051d2:	4604      	mov	r4, r0
 80051d4:	b360      	cbz	r0, 8005230 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80051d6:	229c      	movs	r2, #156	; 0x9c
 80051d8:	2100      	movs	r1, #0
 80051da:	4620      	mov	r0, r4
 80051dc:	f005 fa28 	bl	800a630 <memset>
    pcb->prio = prio;
 80051e0:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80051e2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80051e6:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80051ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80051ee:	8562      	strh	r2, [r4, #42]	; 0x2a
 80051f0:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80051f2:	22ff      	movs	r2, #255	; 0xff
 80051f4:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 80051f6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80051fa:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80051fc:	2206      	movs	r2, #6
 80051fe:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8005202:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8005204:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005208:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800520a:	2201      	movs	r2, #1
 800520c:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8005210:	4a3b      	ldr	r2, [pc, #236]	; (8005300 <tcp_alloc+0x138>)
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8005216:	4a3b      	ldr	r2, [pc, #236]	; (8005304 <tcp_alloc+0x13c>)
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 800521c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <tcp_alloc+0x140>)
 8005222:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8005226:	4b39      	ldr	r3, [pc, #228]	; (800530c <tcp_alloc+0x144>)
 8005228:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800522c:	4620      	mov	r0, r4
 800522e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8005230:	4b37      	ldr	r3, [pc, #220]	; (8005310 <tcp_alloc+0x148>)
 8005232:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8005234:	2d00      	cmp	r5, #0
 8005236:	d132      	bne.n	800529e <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005238:	4b36      	ldr	r3, [pc, #216]	; (8005314 <tcp_alloc+0x14c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b17b      	cbz	r3, 800525e <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800523e:	4a30      	ldr	r2, [pc, #192]	; (8005300 <tcp_alloc+0x138>)
 8005240:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 8005242:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8005244:	6a1a      	ldr	r2, [r3, #32]
 8005246:	1a82      	subs	r2, r0, r2
 8005248:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800524a:	bf24      	itt	cs
 800524c:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800524e:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f6      	bne.n	8005244 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 8005256:	b114      	cbz	r4, 800525e <tcp_alloc+0x96>
    tcp_abort(inactive);
 8005258:	4620      	mov	r0, r4
 800525a:	f7ff ff31 	bl	80050c0 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800525e:	2001      	movs	r0, #1
 8005260:	f7fe fd5a 	bl	8003d18 <memp_malloc>
    if (pcb == NULL) {
 8005264:	4604      	mov	r4, r0
 8005266:	2800      	cmp	r0, #0
 8005268:	d1b5      	bne.n	80051d6 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800526a:	2009      	movs	r0, #9
 800526c:	f7ff ff7a 	bl	8005164 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005270:	2001      	movs	r0, #1
 8005272:	f7fe fd51 	bl	8003d18 <memp_malloc>
      if (pcb == NULL) {
 8005276:	4604      	mov	r4, r0
 8005278:	2800      	cmp	r0, #0
 800527a:	d1ac      	bne.n	80051d6 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 800527c:	2008      	movs	r0, #8
 800527e:	f7ff ff71 	bl	8005164 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8005282:	2001      	movs	r0, #1
 8005284:	f7fe fd48 	bl	8003d18 <memp_malloc>
        if (pcb == NULL) {
 8005288:	4604      	mov	r4, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d1a3      	bne.n	80051d6 <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800528e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8005292:	d110      	bne.n	80052b6 <tcp_alloc+0xee>
  if (mprio == 0) {
 8005294:	b36e      	cbz	r6, 80052f2 <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8005296:	4633      	mov	r3, r6
 8005298:	e00e      	b.n	80052b8 <tcp_alloc+0xf0>
  while (pcb != NULL) {
 800529a:	2d00      	cmp	r5, #0
 800529c:	d0cc      	beq.n	8005238 <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 800529e:	4628      	mov	r0, r5
 80052a0:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80052a2:	8b43      	ldrh	r3, [r0, #26]
 80052a4:	f013 0f08 	tst.w	r3, #8
 80052a8:	d0f7      	beq.n	800529a <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80052aa:	f023 0308 	bic.w	r3, r3, #8
 80052ae:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80052b0:	f7ff fb7a 	bl	80049a8 <tcp_close_shutdown_fin>
 80052b4:	e7f1      	b.n	800529a <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80052b6:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052bc:	4b14      	ldr	r3, [pc, #80]	; (8005310 <tcp_alloc+0x148>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	b1bb      	cbz	r3, 80052f2 <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80052c2:	490f      	ldr	r1, [pc, #60]	; (8005300 <tcp_alloc+0x138>)
 80052c4:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 80052c6:	2000      	movs	r0, #0
 80052c8:	e005      	b.n	80052d6 <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 80052ca:	6a1a      	ldr	r2, [r3, #32]
 80052cc:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 80052ce:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 80052d0:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	b14b      	cbz	r3, 80052ea <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 80052d6:	7d59      	ldrb	r1, [r3, #21]
 80052d8:	4291      	cmp	r1, r2
 80052da:	d3f6      	bcc.n	80052ca <tcp_alloc+0x102>
 80052dc:	d1f9      	bne.n	80052d2 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80052de:	6a1f      	ldr	r7, [r3, #32]
 80052e0:	eba5 0c07 	sub.w	ip, r5, r7
 80052e4:	4584      	cmp	ip, r0
 80052e6:	d3f4      	bcc.n	80052d2 <tcp_alloc+0x10a>
 80052e8:	e7ef      	b.n	80052ca <tcp_alloc+0x102>
  if (inactive != NULL) {
 80052ea:	b114      	cbz	r4, 80052f2 <tcp_alloc+0x12a>
    tcp_abort(inactive);
 80052ec:	4620      	mov	r0, r4
 80052ee:	f7ff fee7 	bl	80050c0 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80052f2:	2001      	movs	r0, #1
 80052f4:	f7fe fd10 	bl	8003d18 <memp_malloc>
  if (pcb != NULL) {
 80052f8:	4604      	mov	r4, r0
 80052fa:	2800      	cmp	r0, #0
 80052fc:	d096      	beq.n	800522c <tcp_alloc+0x64>
 80052fe:	e76a      	b.n	80051d6 <tcp_alloc+0xe>
 8005300:	2000a9b4 	.word	0x2000a9b4
 8005304:	2000a9b9 	.word	0x2000a9b9
 8005308:	080054ed 	.word	0x080054ed
 800530c:	006ddd00 	.word	0x006ddd00
 8005310:	2000a9a4 	.word	0x2000a9a4
 8005314:	2000a9bc 	.word	0x2000a9bc

08005318 <tcp_new>:
{
 8005318:	b508      	push	{r3, lr}
  return tcp_alloc(TCP_PRIO_NORMAL);
 800531a:	2040      	movs	r0, #64	; 0x40
 800531c:	f7ff ff54 	bl	80051c8 <tcp_alloc>
}
 8005320:	bd08      	pop	{r3, pc}
	...

08005324 <tcp_close_shutdown>:
{
 8005324:	b530      	push	{r4, r5, lr}
 8005326:	b085      	sub	sp, #20
 8005328:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800532a:	4604      	mov	r4, r0
 800532c:	b188      	cbz	r0, 8005352 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800532e:	b125      	cbz	r5, 800533a <tcp_close_shutdown+0x16>
 8005330:	7d23      	ldrb	r3, [r4, #20]
 8005332:	2b04      	cmp	r3, #4
 8005334:	d015      	beq.n	8005362 <tcp_close_shutdown+0x3e>
 8005336:	2b07      	cmp	r3, #7
 8005338:	d013      	beq.n	8005362 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 800533a:	7d23      	ldrb	r3, [r4, #20]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d06d      	beq.n	800541c <tcp_close_shutdown+0xf8>
 8005340:	2b02      	cmp	r3, #2
 8005342:	f000 8091 	beq.w	8005468 <tcp_close_shutdown+0x144>
 8005346:	2b00      	cmp	r3, #0
 8005348:	d04f      	beq.n	80053ea <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 800534a:	4620      	mov	r0, r4
 800534c:	f7ff fb2c 	bl	80049a8 <tcp_close_shutdown_fin>
 8005350:	e081      	b.n	8005456 <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005352:	4b4b      	ldr	r3, [pc, #300]	; (8005480 <tcp_close_shutdown+0x15c>)
 8005354:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005358:	494a      	ldr	r1, [pc, #296]	; (8005484 <tcp_close_shutdown+0x160>)
 800535a:	484b      	ldr	r0, [pc, #300]	; (8005488 <tcp_close_shutdown+0x164>)
 800535c:	f005 f970 	bl	800a640 <iprintf>
 8005360:	e7e5      	b.n	800532e <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005362:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005364:	b1e3      	cbz	r3, 80053a0 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005366:	8b63      	ldrh	r3, [r4, #26]
 8005368:	f013 0f10 	tst.w	r3, #16
 800536c:	d01d      	beq.n	80053aa <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800536e:	8b23      	ldrh	r3, [r4, #24]
 8005370:	9302      	str	r3, [sp, #8]
 8005372:	8ae3      	ldrh	r3, [r4, #22]
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	1d23      	adds	r3, r4, #4
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4623      	mov	r3, r4
 800537c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800537e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005380:	4620      	mov	r0, r4
 8005382:	f002 ff83 	bl	800828c <tcp_rst>
      tcp_pcb_purge(pcb);
 8005386:	4620      	mov	r0, r4
 8005388:	f7ff fd7c 	bl	8004e84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800538c:	4b3f      	ldr	r3, [pc, #252]	; (800548c <tcp_close_shutdown+0x168>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	42a3      	cmp	r3, r4
 8005392:	d012      	beq.n	80053ba <tcp_close_shutdown+0x96>
 8005394:	b1bb      	cbz	r3, 80053c6 <tcp_close_shutdown+0xa2>
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	42a2      	cmp	r2, r4
 800539a:	d012      	beq.n	80053c2 <tcp_close_shutdown+0x9e>
 800539c:	4613      	mov	r3, r2
 800539e:	e7f9      	b.n	8005394 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80053a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80053a2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80053a6:	d0c8      	beq.n	800533a <tcp_close_shutdown+0x16>
 80053a8:	e7dd      	b.n	8005366 <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80053aa:	4b35      	ldr	r3, [pc, #212]	; (8005480 <tcp_close_shutdown+0x15c>)
 80053ac:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80053b0:	4937      	ldr	r1, [pc, #220]	; (8005490 <tcp_close_shutdown+0x16c>)
 80053b2:	4835      	ldr	r0, [pc, #212]	; (8005488 <tcp_close_shutdown+0x164>)
 80053b4:	f005 f944 	bl	800a640 <iprintf>
 80053b8:	e7d9      	b.n	800536e <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 80053ba:	68e2      	ldr	r2, [r4, #12]
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <tcp_close_shutdown+0x168>)
 80053be:	601a      	str	r2, [r3, #0]
 80053c0:	e001      	b.n	80053c6 <tcp_close_shutdown+0xa2>
 80053c2:	68e2      	ldr	r2, [r4, #12]
 80053c4:	60da      	str	r2, [r3, #12]
 80053c6:	2300      	movs	r3, #0
 80053c8:	60e3      	str	r3, [r4, #12]
 80053ca:	4b32      	ldr	r3, [pc, #200]	; (8005494 <tcp_close_shutdown+0x170>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80053d0:	4b31      	ldr	r3, [pc, #196]	; (8005498 <tcp_close_shutdown+0x174>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	d004      	beq.n	80053e2 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 80053d8:	4620      	mov	r0, r4
 80053da:	f7ff fb2d 	bl	8004a38 <tcp_free>
      return ERR_OK;
 80053de:	2000      	movs	r0, #0
 80053e0:	e039      	b.n	8005456 <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 80053e2:	f001 ffcf 	bl	8007384 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 80053e6:	2000      	movs	r0, #0
 80053e8:	e035      	b.n	8005456 <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 80053ea:	8ae3      	ldrh	r3, [r4, #22]
 80053ec:	b18b      	cbz	r3, 8005412 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80053ee:	4b2b      	ldr	r3, [pc, #172]	; (800549c <tcp_close_shutdown+0x178>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	42a3      	cmp	r3, r4
 80053f4:	d005      	beq.n	8005402 <tcp_close_shutdown+0xde>
 80053f6:	b153      	cbz	r3, 800540e <tcp_close_shutdown+0xea>
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	42a2      	cmp	r2, r4
 80053fc:	d005      	beq.n	800540a <tcp_close_shutdown+0xe6>
 80053fe:	4613      	mov	r3, r2
 8005400:	e7f9      	b.n	80053f6 <tcp_close_shutdown+0xd2>
 8005402:	68e2      	ldr	r2, [r4, #12]
 8005404:	4b25      	ldr	r3, [pc, #148]	; (800549c <tcp_close_shutdown+0x178>)
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e001      	b.n	800540e <tcp_close_shutdown+0xea>
 800540a:	68e2      	ldr	r2, [r4, #12]
 800540c:	60da      	str	r2, [r3, #12]
 800540e:	2300      	movs	r3, #0
 8005410:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8005412:	4620      	mov	r0, r4
 8005414:	f7ff fb10 	bl	8004a38 <tcp_free>
  return ERR_OK;
 8005418:	2000      	movs	r0, #0
      break;
 800541a:	e01c      	b.n	8005456 <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800541c:	4d20      	ldr	r5, [pc, #128]	; (80054a0 <tcp_close_shutdown+0x17c>)
 800541e:	1d29      	adds	r1, r5, #4
 8005420:	3510      	adds	r5, #16
      pcb->listener = NULL;
 8005422:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005424:	f851 3b04 	ldr.w	r3, [r1], #4
 8005428:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800542a:	b133      	cbz	r3, 800543a <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 800542c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800542e:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8005430:	bf08      	it	eq
 8005432:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f8      	bne.n	800542c <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800543a:	428d      	cmp	r5, r1
 800543c:	d1f2      	bne.n	8005424 <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800543e:	4621      	mov	r1, r4
 8005440:	4818      	ldr	r0, [pc, #96]	; (80054a4 <tcp_close_shutdown+0x180>)
 8005442:	f7ff fd4f 	bl	8004ee4 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005446:	7d23      	ldrb	r3, [r4, #20]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d006      	beq.n	800545a <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800544c:	4621      	mov	r1, r4
 800544e:	2002      	movs	r0, #2
 8005450:	f7fe fc92 	bl	8003d78 <memp_free>
  return ERR_OK;
 8005454:	2000      	movs	r0, #0
}
 8005456:	b005      	add	sp, #20
 8005458:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800545a:	4b09      	ldr	r3, [pc, #36]	; (8005480 <tcp_close_shutdown+0x15c>)
 800545c:	22df      	movs	r2, #223	; 0xdf
 800545e:	4912      	ldr	r1, [pc, #72]	; (80054a8 <tcp_close_shutdown+0x184>)
 8005460:	4809      	ldr	r0, [pc, #36]	; (8005488 <tcp_close_shutdown+0x164>)
 8005462:	f005 f8ed 	bl	800a640 <iprintf>
 8005466:	e7f1      	b.n	800544c <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005468:	4621      	mov	r1, r4
 800546a:	4808      	ldr	r0, [pc, #32]	; (800548c <tcp_close_shutdown+0x168>)
 800546c:	f7ff fd3a 	bl	8004ee4 <tcp_pcb_remove>
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <tcp_close_shutdown+0x170>)
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005476:	4620      	mov	r0, r4
 8005478:	f7ff fade 	bl	8004a38 <tcp_free>
  return ERR_OK;
 800547c:	2000      	movs	r0, #0
      break;
 800547e:	e7ea      	b.n	8005456 <tcp_close_shutdown+0x132>
 8005480:	0800c314 	.word	0x0800c314
 8005484:	0800c694 	.word	0x0800c694
 8005488:	0800baa0 	.word	0x0800baa0
 800548c:	2000a9a4 	.word	0x2000a9a4
 8005490:	0800c6b4 	.word	0x0800c6b4
 8005494:	2000a9a8 	.word	0x2000a9a8
 8005498:	2000a9e8 	.word	0x2000a9e8
 800549c:	2000a9ac 	.word	0x2000a9ac
 80054a0:	0800c924 	.word	0x0800c924
 80054a4:	2000a9b0 	.word	0x2000a9b0
 80054a8:	0800c6d0 	.word	0x0800c6d0

080054ac <tcp_close>:
{
 80054ac:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80054ae:	b160      	cbz	r0, 80054ca <tcp_close+0x1e>
 80054b0:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 80054b2:	7d02      	ldrb	r2, [r0, #20]
 80054b4:	2a01      	cmp	r2, #1
 80054b6:	d003      	beq.n	80054c0 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80054b8:	8b42      	ldrh	r2, [r0, #26]
 80054ba:	f042 0210 	orr.w	r2, r2, #16
 80054be:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80054c0:	2101      	movs	r1, #1
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff2e 	bl	8005324 <tcp_close_shutdown>
}
 80054c8:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <tcp_close+0x34>)
 80054cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80054d0:	4904      	ldr	r1, [pc, #16]	; (80054e4 <tcp_close+0x38>)
 80054d2:	4805      	ldr	r0, [pc, #20]	; (80054e8 <tcp_close+0x3c>)
 80054d4:	f005 f8b4 	bl	800a640 <iprintf>
 80054d8:	f06f 000f 	mvn.w	r0, #15
 80054dc:	e7f4      	b.n	80054c8 <tcp_close+0x1c>
 80054de:	bf00      	nop
 80054e0:	0800c314 	.word	0x0800c314
 80054e4:	0800c6ec 	.word	0x0800c6ec
 80054e8:	0800baa0 	.word	0x0800baa0

080054ec <tcp_recv_null>:
{
 80054ec:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80054ee:	b151      	cbz	r1, 8005506 <tcp_recv_null+0x1a>
 80054f0:	4614      	mov	r4, r2
 80054f2:	4608      	mov	r0, r1
  if (p != NULL) {
 80054f4:	b18a      	cbz	r2, 800551a <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 80054f6:	8911      	ldrh	r1, [r2, #8]
 80054f8:	f7ff faf0 	bl	8004adc <tcp_recved>
    pbuf_free(p);
 80054fc:	4620      	mov	r0, r4
 80054fe:	f7fe fef9 	bl	80042f4 <pbuf_free>
  return ERR_OK;
 8005502:	2000      	movs	r0, #0
}
 8005504:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <tcp_recv_null+0x3c>)
 8005508:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800550c:	4907      	ldr	r1, [pc, #28]	; (800552c <tcp_recv_null+0x40>)
 800550e:	4808      	ldr	r0, [pc, #32]	; (8005530 <tcp_recv_null+0x44>)
 8005510:	f005 f896 	bl	800a640 <iprintf>
 8005514:	f06f 000f 	mvn.w	r0, #15
 8005518:	e7f4      	b.n	8005504 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 800551a:	b10b      	cbz	r3, 8005520 <tcp_recv_null+0x34>
  return ERR_OK;
 800551c:	2000      	movs	r0, #0
 800551e:	e7f1      	b.n	8005504 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8005520:	f7ff ffc4 	bl	80054ac <tcp_close>
 8005524:	e7ee      	b.n	8005504 <tcp_recv_null+0x18>
 8005526:	bf00      	nop
 8005528:	0800c314 	.word	0x0800c314
 800552c:	0800c704 	.word	0x0800c704
 8005530:	0800baa0 	.word	0x0800baa0

08005534 <tcp_process_refused_data>:
{
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005536:	b318      	cbz	r0, 8005580 <tcp_process_refused_data+0x4c>
 8005538:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800553a:	6f86      	ldr	r6, [r0, #120]	; 0x78
 800553c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800553e:	2300      	movs	r3, #0
 8005540:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005542:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8005546:	b32d      	cbz	r5, 8005594 <tcp_process_refused_data+0x60>
 8005548:	4632      	mov	r2, r6
 800554a:	4601      	mov	r1, r0
 800554c:	6900      	ldr	r0, [r0, #16]
 800554e:	47a8      	blx	r5
 8005550:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8005552:	bb3d      	cbnz	r5, 80055a4 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8005554:	f017 0f20 	tst.w	r7, #32
 8005558:	d02a      	beq.n	80055b0 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800555a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800555c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8005560:	bf1c      	itt	ne
 8005562:	3301      	addne	r3, #1
 8005564:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8005566:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800556a:	b30e      	cbz	r6, 80055b0 <tcp_process_refused_data+0x7c>
 800556c:	2300      	movs	r3, #0
 800556e:	461a      	mov	r2, r3
 8005570:	4621      	mov	r1, r4
 8005572:	6920      	ldr	r0, [r4, #16]
 8005574:	47b0      	blx	r6
          return ERR_ABRT;
 8005576:	f110 0f0d 	cmn.w	r0, #13
 800557a:	bf08      	it	eq
 800557c:	4605      	moveq	r5, r0
 800557e:	e017      	b.n	80055b0 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <tcp_process_refused_data+0x80>)
 8005582:	f240 6209 	movw	r2, #1545	; 0x609
 8005586:	490c      	ldr	r1, [pc, #48]	; (80055b8 <tcp_process_refused_data+0x84>)
 8005588:	480c      	ldr	r0, [pc, #48]	; (80055bc <tcp_process_refused_data+0x88>)
 800558a:	f005 f859 	bl	800a640 <iprintf>
 800558e:	f06f 050f 	mvn.w	r5, #15
 8005592:	e00d      	b.n	80055b0 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005594:	2300      	movs	r3, #0
 8005596:	4632      	mov	r2, r6
 8005598:	4601      	mov	r1, r0
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff ffa6 	bl	80054ec <tcp_recv_null>
 80055a0:	4605      	mov	r5, r0
 80055a2:	e7d6      	b.n	8005552 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 80055a4:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 80055a8:	bf1c      	itt	ne
 80055aa:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 80055ac:	f06f 0504 	mvnne.w	r5, #4
}
 80055b0:	4628      	mov	r0, r5
 80055b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b4:	0800c314 	.word	0x0800c314
 80055b8:	0800c720 	.word	0x0800c720
 80055bc:	0800baa0 	.word	0x0800baa0

080055c0 <tcp_fasttmr>:
{
 80055c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80055c4:	4a1f      	ldr	r2, [pc, #124]	; (8005644 <tcp_fasttmr+0x84>)
 80055c6:	7813      	ldrb	r3, [r2, #0]
 80055c8:	3301      	adds	r3, #1
 80055ca:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80055cc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 800564c <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 80055d0:	4e1d      	ldr	r6, [pc, #116]	; (8005648 <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 80055d2:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80055d6:	2c00      	cmp	r4, #0
 80055d8:	d032      	beq.n	8005640 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 80055da:	4d1a      	ldr	r5, [pc, #104]	; (8005644 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 80055dc:	2700      	movs	r7, #0
 80055de:	e013      	b.n	8005608 <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 80055e0:	f043 0302 	orr.w	r3, r3, #2
 80055e4:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 80055e6:	4620      	mov	r0, r4
 80055e8:	f002 fed2 	bl	8008390 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80055ec:	8b63      	ldrh	r3, [r4, #26]
 80055ee:	f023 0303 	bic.w	r3, r3, #3
 80055f2:	8363      	strh	r3, [r4, #26]
 80055f4:	e011      	b.n	800561a <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80055f6:	f023 0308 	bic.w	r3, r3, #8
 80055fa:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 80055fc:	4620      	mov	r0, r4
 80055fe:	f7ff f9d3 	bl	80049a8 <tcp_close_shutdown_fin>
 8005602:	e00e      	b.n	8005622 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 8005604:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8005606:	b1dc      	cbz	r4, 8005640 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005608:	782b      	ldrb	r3, [r5, #0]
 800560a:	7fa2      	ldrb	r2, [r4, #30]
 800560c:	429a      	cmp	r2, r3
 800560e:	d0f9      	beq.n	8005604 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8005610:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8005612:	8b63      	ldrh	r3, [r4, #26]
 8005614:	f013 0f01 	tst.w	r3, #1
 8005618:	d1e2      	bne.n	80055e0 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 800561a:	8b63      	ldrh	r3, [r4, #26]
 800561c:	f013 0f08 	tst.w	r3, #8
 8005620:	d1e9      	bne.n	80055f6 <tcp_fasttmr+0x36>
      next = pcb->next;
 8005622:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8005626:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005628:	b143      	cbz	r3, 800563c <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 800562a:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 800562c:	4620      	mov	r0, r4
 800562e:	f7ff ff81 	bl	8005534 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005632:	7833      	ldrb	r3, [r6, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1cc      	bne.n	80055d2 <tcp_fasttmr+0x12>
      pcb = next;
 8005638:	464c      	mov	r4, r9
 800563a:	e7e4      	b.n	8005606 <tcp_fasttmr+0x46>
 800563c:	464c      	mov	r4, r9
 800563e:	e7e2      	b.n	8005606 <tcp_fasttmr+0x46>
}
 8005640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005644:	2000a9b9 	.word	0x2000a9b9
 8005648:	2000a9a8 	.word	0x2000a9a8
 800564c:	2000a9a4 	.word	0x2000a9a4

08005650 <tcp_slowtmr>:
{
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	b085      	sub	sp, #20
  ++tcp_ticks;
 8005656:	4ab4      	ldr	r2, [pc, #720]	; (8005928 <tcp_slowtmr+0x2d8>)
 8005658:	6813      	ldr	r3, [r2, #0]
 800565a:	3301      	adds	r3, #1
 800565c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800565e:	4ab3      	ldr	r2, [pc, #716]	; (800592c <tcp_slowtmr+0x2dc>)
 8005660:	7813      	ldrb	r3, [r2, #0]
 8005662:	3301      	adds	r3, #1
 8005664:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8005666:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8005954 <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800566a:	4eb1      	ldr	r6, [pc, #708]	; (8005930 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800566c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8005958 <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 8005670:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 8005674:	2c00      	cmp	r4, #0
 8005676:	f000 81f4 	beq.w	8005a62 <tcp_slowtmr+0x412>
  prev = NULL;
 800567a:	2500      	movs	r5, #0
 800567c:	e19e      	b.n	80059bc <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800567e:	4633      	mov	r3, r6
 8005680:	f240 42be 	movw	r2, #1214	; 0x4be
 8005684:	49ab      	ldr	r1, [pc, #684]	; (8005934 <tcp_slowtmr+0x2e4>)
 8005686:	48ac      	ldr	r0, [pc, #688]	; (8005938 <tcp_slowtmr+0x2e8>)
 8005688:	f004 ffda 	bl	800a640 <iprintf>
 800568c:	e19a      	b.n	80059c4 <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800568e:	4633      	mov	r3, r6
 8005690:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005694:	49a9      	ldr	r1, [pc, #676]	; (800593c <tcp_slowtmr+0x2ec>)
 8005696:	48a8      	ldr	r0, [pc, #672]	; (8005938 <tcp_slowtmr+0x2e8>)
 8005698:	f004 ffd2 	bl	800a640 <iprintf>
 800569c:	e196      	b.n	80059cc <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800569e:	4633      	mov	r3, r6
 80056a0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80056a4:	49a6      	ldr	r1, [pc, #664]	; (8005940 <tcp_slowtmr+0x2f0>)
 80056a6:	48a4      	ldr	r0, [pc, #656]	; (8005938 <tcp_slowtmr+0x2e8>)
 80056a8:	f004 ffca 	bl	800a640 <iprintf>
 80056ac:	e192      	b.n	80059d4 <tcp_slowtmr+0x384>
      continue;
 80056ae:	4625      	mov	r5, r4
      pcb = pcb->next;
 80056b0:	68e4      	ldr	r4, [r4, #12]
      continue;
 80056b2:	e181      	b.n	80059b8 <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80056b4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80056b8:	2b05      	cmp	r3, #5
 80056ba:	f240 819b 	bls.w	80059f4 <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 80056be:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 80056c2:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 80056c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80056c6:	b15b      	cbz	r3, 80056e0 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80056c8:	4b97      	ldr	r3, [pc, #604]	; (8005928 <tcp_slowtmr+0x2d8>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	6a23      	ldr	r3, [r4, #32]
 80056ce:	1ad2      	subs	r2, r2, r3
 80056d0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80056d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 80056d8:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 80056dc:	f080 80f8 	bcs.w	80058d0 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 80056e0:	7d23      	ldrb	r3, [r4, #20]
 80056e2:	2b03      	cmp	r3, #3
 80056e4:	f000 80f8 	beq.w	80058d8 <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 80056e8:	2b09      	cmp	r3, #9
 80056ea:	f040 80fc 	bne.w	80058e6 <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80056ee:	4b8e      	ldr	r3, [pc, #568]	; (8005928 <tcp_slowtmr+0x2d8>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	6a22      	ldr	r2, [r4, #32]
 80056f4:	1a9b      	subs	r3, r3, r2
 80056f6:	2bf0      	cmp	r3, #240	; 0xf0
 80056f8:	f240 80f5 	bls.w	80058e6 <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 80056fc:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8005700:	4620      	mov	r0, r4
 8005702:	f7ff fbbf 	bl	8004e84 <tcp_pcb_purge>
      if (prev != NULL) {
 8005706:	2d00      	cmp	r5, #0
 8005708:	f000 8130 	beq.w	800596c <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800570c:	f8da 3000 	ldr.w	r3, [sl]
 8005710:	42a3      	cmp	r3, r4
 8005712:	f000 8123 	beq.w	800595c <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 8005716:	68e3      	ldr	r3, [r4, #12]
 8005718:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 800571a:	f1b8 0f00 	cmp.w	r8, #0
 800571e:	f040 8134 	bne.w	800598a <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 8005722:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 8005726:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 800572a:	4620      	mov	r0, r4
 800572c:	f7ff f984 	bl	8004a38 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8005730:	4b84      	ldr	r3, [pc, #528]	; (8005944 <tcp_slowtmr+0x2f4>)
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005736:	2f00      	cmp	r7, #0
 8005738:	f000 813a 	beq.w	80059b0 <tcp_slowtmr+0x360>
 800573c:	f06f 010c 	mvn.w	r1, #12
 8005740:	4648      	mov	r0, r9
 8005742:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 8005744:	4b7f      	ldr	r3, [pc, #508]	; (8005944 <tcp_slowtmr+0x2f4>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d191      	bne.n	8005670 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 800574c:	4644      	mov	r4, r8
 800574e:	e133      	b.n	80059b8 <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005750:	4633      	mov	r3, r6
 8005752:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8005756:	497c      	ldr	r1, [pc, #496]	; (8005948 <tcp_slowtmr+0x2f8>)
 8005758:	4877      	ldr	r0, [pc, #476]	; (8005938 <tcp_slowtmr+0x2e8>)
 800575a:	f004 ff71 	bl	800a640 <iprintf>
 800575e:	e15b      	b.n	8005a18 <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8005760:	4620      	mov	r0, r4
 8005762:	f002 fb0d 	bl	8007d80 <tcp_split_unsent_seg>
 8005766:	b158      	cbz	r0, 8005780 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 8005768:	2300      	movs	r3, #0
 800576a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800576e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8005772:	2b06      	cmp	r3, #6
 8005774:	d876      	bhi.n	8005864 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 8005776:	3301      	adds	r3, #1
 8005778:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 800577c:	2700      	movs	r7, #0
 800577e:	e050      	b.n	8005822 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8005780:	4620      	mov	r0, r4
 8005782:	f002 fe05 	bl	8008390 <tcp_output>
 8005786:	2800      	cmp	r0, #0
 8005788:	d1ee      	bne.n	8005768 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800578a:	2700      	movs	r7, #0
 800578c:	e049      	b.n	8005822 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800578e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8005790:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8005794:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8005796:	bf9c      	itt	ls
 8005798:	3301      	addls	r3, #1
 800579a:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800579c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80057a0:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80057a4:	429a      	cmp	r2, r3
 80057a6:	db3c      	blt.n	8005822 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80057a8:	4620      	mov	r0, r4
 80057aa:	f002 fc9d 	bl	80080e8 <tcp_rexmit_rto_prepare>
 80057ae:	b118      	cbz	r0, 80057b8 <tcp_slowtmr+0x168>
 80057b0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80057b2:	bbb3      	cbnz	r3, 8005822 <tcp_slowtmr+0x1d2>
 80057b4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80057b6:	b3a3      	cbz	r3, 8005822 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 80057b8:	7d23      	ldrb	r3, [r4, #20]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d014      	beq.n	80057e8 <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80057be:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 80057c2:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 80057c6:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80057ca:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80057ce:	2a0c      	cmp	r2, #12
 80057d0:	bf28      	it	cs
 80057d2:	220c      	movcs	r2, #12
 80057d4:	495d      	ldr	r1, [pc, #372]	; (800594c <tcp_slowtmr+0x2fc>)
 80057d6:	5c8a      	ldrb	r2, [r1, r2]
 80057d8:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80057da:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80057de:	4293      	cmp	r3, r2
 80057e0:	bfa8      	it	ge
 80057e2:	4613      	movge	r3, r2
 80057e4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 80057e8:	2300      	movs	r3, #0
 80057ea:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80057ec:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80057f0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 80057f4:	429a      	cmp	r2, r3
 80057f6:	bf28      	it	cs
 80057f8:	461a      	movcs	r2, r3
 80057fa:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80057fc:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80057fe:	0043      	lsls	r3, r0, #1
 8005800:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8005802:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8005806:	bf98      	it	ls
 8005808:	460b      	movls	r3, r1
 800580a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 800580e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8005818:	4620      	mov	r0, r4
 800581a:	f002 ff85 	bl	8008728 <tcp_rexmit_rto_commit>
 800581e:	e000      	b.n	8005822 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 8005820:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 8005822:	7d23      	ldrb	r3, [r4, #20]
 8005824:	2b06      	cmp	r3, #6
 8005826:	d01f      	beq.n	8005868 <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005828:	f894 8009 	ldrb.w	r8, [r4, #9]
 800582c:	f018 0808 	ands.w	r8, r8, #8
 8005830:	f43f af48 	beq.w	80056c4 <tcp_slowtmr+0x74>
 8005834:	2b04      	cmp	r3, #4
 8005836:	d12a      	bne.n	800588e <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005838:	4b3b      	ldr	r3, [pc, #236]	; (8005928 <tcp_slowtmr+0x2d8>)
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	6a23      	ldr	r3, [r4, #32]
 800583e:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8005840:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8005844:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8005848:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800584c:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005850:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8005854:	d920      	bls.n	8005898 <tcp_slowtmr+0x248>
        ++pcb_remove;
 8005856:	3701      	adds	r7, #1
 8005858:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 800585a:	f04f 0801 	mov.w	r8, #1
 800585e:	e731      	b.n	80056c4 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 8005860:	2701      	movs	r7, #1
 8005862:	e7de      	b.n	8005822 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 8005864:	2700      	movs	r7, #0
 8005866:	e7dc      	b.n	8005822 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 8005868:	8b63      	ldrh	r3, [r4, #26]
 800586a:	f013 0f10 	tst.w	r3, #16
 800586e:	d007      	beq.n	8005880 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005870:	4b2d      	ldr	r3, [pc, #180]	; (8005928 <tcp_slowtmr+0x2d8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6a22      	ldr	r2, [r4, #32]
 8005876:	1a9b      	subs	r3, r3, r2
 8005878:	2b28      	cmp	r3, #40	; 0x28
 800587a:	d901      	bls.n	8005880 <tcp_slowtmr+0x230>
          ++pcb_remove;
 800587c:	3701      	adds	r7, #1
 800587e:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8005880:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8005882:	2b00      	cmp	r3, #0
 8005884:	f000 8134 	beq.w	8005af0 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 8005888:	f04f 0800 	mov.w	r8, #0
 800588c:	e71c      	b.n	80056c8 <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 800588e:	2b07      	cmp	r3, #7
 8005890:	d0d2      	beq.n	8005838 <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	e715      	b.n	80056c4 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005898:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800589c:	482c      	ldr	r0, [pc, #176]	; (8005950 <tcp_slowtmr+0x300>)
 800589e:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 80058a2:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058a6:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 80058aa:	d802      	bhi.n	80058b2 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 80058ac:	f04f 0800 	mov.w	r8, #0
 80058b0:	e708      	b.n	80056c4 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 80058b2:	4620      	mov	r0, r4
 80058b4:	f002 ff6e 	bl	8008794 <tcp_keepalive>
        if (err == ERR_OK) {
 80058b8:	b938      	cbnz	r0, 80058ca <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 80058ba:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 80058be:	3301      	adds	r3, #1
 80058c0:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 80058c4:	f04f 0800 	mov.w	r8, #0
 80058c8:	e6fc      	b.n	80056c4 <tcp_slowtmr+0x74>
 80058ca:	f04f 0800 	mov.w	r8, #0
 80058ce:	e6f9      	b.n	80056c4 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff facd 	bl	8004e70 <tcp_free_ooseq>
 80058d6:	e703      	b.n	80056e0 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80058d8:	4b13      	ldr	r3, [pc, #76]	; (8005928 <tcp_slowtmr+0x2d8>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	6a22      	ldr	r2, [r4, #32]
 80058de:	1a9b      	subs	r3, r3, r2
 80058e0:	2b28      	cmp	r3, #40	; 0x28
 80058e2:	f63f af0b 	bhi.w	80056fc <tcp_slowtmr+0xac>
    if (pcb_remove) {
 80058e6:	2f00      	cmp	r7, #0
 80058e8:	f47f af08 	bne.w	80056fc <tcp_slowtmr+0xac>
      pcb = pcb->next;
 80058ec:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 80058ee:	7f23      	ldrb	r3, [r4, #28]
 80058f0:	3301      	adds	r3, #1
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80058f6:	7f62      	ldrb	r2, [r4, #29]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d85b      	bhi.n	80059b4 <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 80058fc:	2300      	movs	r3, #0
 80058fe:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8005900:	4a10      	ldr	r2, [pc, #64]	; (8005944 <tcp_slowtmr+0x2f4>)
 8005902:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8005904:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d04b      	beq.n	80059a4 <tcp_slowtmr+0x354>
 800590c:	4621      	mov	r1, r4
 800590e:	6920      	ldr	r0, [r4, #16]
 8005910:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <tcp_slowtmr+0x2f4>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f47f aeaa 	bne.w	8005670 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 800591c:	2800      	cmp	r0, #0
 800591e:	d041      	beq.n	80059a4 <tcp_slowtmr+0x354>
 8005920:	4625      	mov	r5, r4
      pcb = pcb->next;
 8005922:	463c      	mov	r4, r7
 8005924:	e048      	b.n	80059b8 <tcp_slowtmr+0x368>
 8005926:	bf00      	nop
 8005928:	2000a9b4 	.word	0x2000a9b4
 800592c:	2000a9b9 	.word	0x2000a9b9
 8005930:	0800c314 	.word	0x0800c314
 8005934:	0800c748 	.word	0x0800c748
 8005938:	0800baa0 	.word	0x0800baa0
 800593c:	0800c774 	.word	0x0800c774
 8005940:	0800c7a0 	.word	0x0800c7a0
 8005944:	2000a9a8 	.word	0x2000a9a8
 8005948:	0800c804 	.word	0x0800c804
 800594c:	0800c914 	.word	0x0800c914
 8005950:	000124f8 	.word	0x000124f8
 8005954:	2000a9a4 	.word	0x2000a9a4
 8005958:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800595c:	4633      	mov	r3, r6
 800595e:	f240 526d 	movw	r2, #1389	; 0x56d
 8005962:	4966      	ldr	r1, [pc, #408]	; (8005afc <tcp_slowtmr+0x4ac>)
 8005964:	4866      	ldr	r0, [pc, #408]	; (8005b00 <tcp_slowtmr+0x4b0>)
 8005966:	f004 fe6b 	bl	800a640 <iprintf>
 800596a:	e6d4      	b.n	8005716 <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800596c:	f8da 3000 	ldr.w	r3, [sl]
 8005970:	42a3      	cmp	r3, r4
 8005972:	d006      	beq.n	8005982 <tcp_slowtmr+0x332>
 8005974:	4633      	mov	r3, r6
 8005976:	f240 5271 	movw	r2, #1393	; 0x571
 800597a:	4962      	ldr	r1, [pc, #392]	; (8005b04 <tcp_slowtmr+0x4b4>)
 800597c:	4860      	ldr	r0, [pc, #384]	; (8005b00 <tcp_slowtmr+0x4b0>)
 800597e:	f004 fe5f 	bl	800a640 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005982:	68e3      	ldr	r3, [r4, #12]
 8005984:	f8ca 3000 	str.w	r3, [sl]
 8005988:	e6c7      	b.n	800571a <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800598a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800598c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800598e:	8b23      	ldrh	r3, [r4, #24]
 8005990:	9302      	str	r3, [sp, #8]
 8005992:	8ae3      	ldrh	r3, [r4, #22]
 8005994:	9301      	str	r3, [sp, #4]
 8005996:	1d23      	adds	r3, r4, #4
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	4623      	mov	r3, r4
 800599c:	4620      	mov	r0, r4
 800599e:	f002 fc75 	bl	800828c <tcp_rst>
 80059a2:	e6be      	b.n	8005722 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 80059a4:	4620      	mov	r0, r4
 80059a6:	f002 fcf3 	bl	8008390 <tcp_output>
 80059aa:	4625      	mov	r5, r4
      pcb = pcb->next;
 80059ac:	463c      	mov	r4, r7
 80059ae:	e003      	b.n	80059b8 <tcp_slowtmr+0x368>
      pcb = pcb->next;
 80059b0:	4644      	mov	r4, r8
 80059b2:	e001      	b.n	80059b8 <tcp_slowtmr+0x368>
 80059b4:	4625      	mov	r5, r4
      pcb = pcb->next;
 80059b6:	463c      	mov	r4, r7
  while (pcb != NULL) {
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	d052      	beq.n	8005a62 <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80059bc:	7d23      	ldrb	r3, [r4, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f43f ae5d 	beq.w	800567e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80059c4:	7d23      	ldrb	r3, [r4, #20]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	f43f ae61 	beq.w	800568e <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80059cc:	7d23      	ldrb	r3, [r4, #20]
 80059ce:	2b0a      	cmp	r3, #10
 80059d0:	f43f ae65 	beq.w	800569e <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 80059d4:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <tcp_slowtmr+0x4b8>)
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	7fa2      	ldrb	r2, [r4, #30]
 80059da:	429a      	cmp	r2, r3
 80059dc:	f43f ae67 	beq.w	80056ae <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 80059e0:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80059e2:	7d23      	ldrb	r3, [r4, #20]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	f43f ae65 	beq.w	80056b4 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80059ea:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80059ee:	2b0b      	cmp	r3, #11
 80059f0:	f63f af16 	bhi.w	8005820 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 80059f4:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 80059f8:	2f00      	cmp	r7, #0
 80059fa:	f43f aec8 	beq.w	800578e <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80059fe:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8005a00:	b133      	cbz	r3, 8005a10 <tcp_slowtmr+0x3c0>
 8005a02:	4633      	mov	r3, r6
 8005a04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8005a08:	4940      	ldr	r1, [pc, #256]	; (8005b0c <tcp_slowtmr+0x4bc>)
 8005a0a:	483d      	ldr	r0, [pc, #244]	; (8005b00 <tcp_slowtmr+0x4b0>)
 8005a0c:	f004 fe18 	bl	800a640 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8005a10:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f43f ae9c 	beq.w	8005750 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8005a18:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8005a1c:	2b0b      	cmp	r3, #11
 8005a1e:	f63f af1f 	bhi.w	8005860 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8005a22:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8005a26:	4b3a      	ldr	r3, [pc, #232]	; (8005b10 <tcp_slowtmr+0x4c0>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8005a2e:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d208      	bcs.n	8005a48 <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 8005a36:	3301      	adds	r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8005a3e:	4293      	cmp	r3, r2
    pcb_remove = 0;
 8005a40:	bf38      	it	cc
 8005a42:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 8005a44:	f4ff aeed 	bcc.w	8005822 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 8005a48:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	f47f ae87 	bne.w	8005760 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8005a52:	4620      	mov	r0, r4
 8005a54:	f002 fecc 	bl	80087f0 <tcp_zero_window_probe>
 8005a58:	2800      	cmp	r0, #0
 8005a5a:	f43f ae85 	beq.w	8005768 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8005a5e:	2700      	movs	r7, #0
 8005a60:	e6df      	b.n	8005822 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 8005a62:	4b2c      	ldr	r3, [pc, #176]	; (8005b14 <tcp_slowtmr+0x4c4>)
 8005a64:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8005a66:	2c00      	cmp	r4, #0
 8005a68:	d045      	beq.n	8005af6 <tcp_slowtmr+0x4a6>
  prev = NULL;
 8005a6a:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005a6c:	4f2a      	ldr	r7, [pc, #168]	; (8005b18 <tcp_slowtmr+0x4c8>)
 8005a6e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8005b28 <tcp_slowtmr+0x4d8>
 8005a72:	4e23      	ldr	r6, [pc, #140]	; (8005b00 <tcp_slowtmr+0x4b0>)
 8005a74:	e009      	b.n	8005a8a <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005a76:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <tcp_slowtmr+0x4cc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6a22      	ldr	r2, [r4, #32]
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	2bf0      	cmp	r3, #240	; 0xf0
 8005a80:	d80e      	bhi.n	8005aa0 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8005a82:	4625      	mov	r5, r4
 8005a84:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	d035      	beq.n	8005af6 <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005a8a:	7d23      	ldrb	r3, [r4, #20]
 8005a8c:	2b0a      	cmp	r3, #10
 8005a8e:	d0f2      	beq.n	8005a76 <tcp_slowtmr+0x426>
 8005a90:	463b      	mov	r3, r7
 8005a92:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8005a96:	4641      	mov	r1, r8
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f004 fdd1 	bl	800a640 <iprintf>
 8005a9e:	e7ea      	b.n	8005a76 <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f7ff f9ef 	bl	8004e84 <tcp_pcb_purge>
      if (prev != NULL) {
 8005aa6:	b1a5      	cbz	r5, 8005ad2 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005aa8:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <tcp_slowtmr+0x4c4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	42a3      	cmp	r3, r4
 8005aae:	d008      	beq.n	8005ac2 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8005ab0:	68e3      	ldr	r3, [r4, #12]
 8005ab2:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8005ab4:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f7fe ffbd 	bl	8004a38 <tcp_free>
      pcb = pcb->next;
 8005abe:	464c      	mov	r4, r9
 8005ac0:	e7e1      	b.n	8005a86 <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	f240 52af 	movw	r2, #1455	; 0x5af
 8005ac8:	4915      	ldr	r1, [pc, #84]	; (8005b20 <tcp_slowtmr+0x4d0>)
 8005aca:	4630      	mov	r0, r6
 8005acc:	f004 fdb8 	bl	800a640 <iprintf>
 8005ad0:	e7ee      	b.n	8005ab0 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005ad2:	4b10      	ldr	r3, [pc, #64]	; (8005b14 <tcp_slowtmr+0x4c4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	42a3      	cmp	r3, r4
 8005ad8:	d006      	beq.n	8005ae8 <tcp_slowtmr+0x498>
 8005ada:	463b      	mov	r3, r7
 8005adc:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8005ae0:	4910      	ldr	r1, [pc, #64]	; (8005b24 <tcp_slowtmr+0x4d4>)
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	f004 fdac 	bl	800a640 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005ae8:	68e2      	ldr	r2, [r4, #12]
 8005aea:	4b0a      	ldr	r3, [pc, #40]	; (8005b14 <tcp_slowtmr+0x4c4>)
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e7e1      	b.n	8005ab4 <tcp_slowtmr+0x464>
    pcb_reset = 0;
 8005af0:	f04f 0800 	mov.w	r8, #0
 8005af4:	e6f7      	b.n	80058e6 <tcp_slowtmr+0x296>
}
 8005af6:	b005      	add	sp, #20
 8005af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005afc:	0800c83c 	.word	0x0800c83c
 8005b00:	0800baa0 	.word	0x0800baa0
 8005b04:	0800c868 	.word	0x0800c868
 8005b08:	2000a9b9 	.word	0x2000a9b9
 8005b0c:	0800c7d0 	.word	0x0800c7d0
 8005b10:	0800c934 	.word	0x0800c934
 8005b14:	2000a9bc 	.word	0x2000a9bc
 8005b18:	0800c314 	.word	0x0800c314
 8005b1c:	2000a9b4 	.word	0x2000a9b4
 8005b20:	0800c8c4 	.word	0x0800c8c4
 8005b24:	0800c8ec 	.word	0x0800c8ec
 8005b28:	0800c894 	.word	0x0800c894

08005b2c <tcp_tmr>:
{
 8005b2c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8005b2e:	f7ff fd47 	bl	80055c0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8005b32:	4a06      	ldr	r2, [pc, #24]	; (8005b4c <tcp_tmr+0x20>)
 8005b34:	7813      	ldrb	r3, [r2, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	7013      	strb	r3, [r2, #0]
 8005b3c:	f013 0f01 	tst.w	r3, #1
 8005b40:	d100      	bne.n	8005b44 <tcp_tmr+0x18>
}
 8005b42:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8005b44:	f7ff fd84 	bl	8005650 <tcp_slowtmr>
}
 8005b48:	e7fb      	b.n	8005b42 <tcp_tmr+0x16>
 8005b4a:	bf00      	nop
 8005b4c:	2000a9b8 	.word	0x2000a9b8

08005b50 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8005b50:	4a09      	ldr	r2, [pc, #36]	; (8005b78 <tcp_get_next_optbyte+0x28>)
 8005b52:	8813      	ldrh	r3, [r2, #0]
 8005b54:	1c59      	adds	r1, r3, #1
 8005b56:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8005b58:	4a08      	ldr	r2, [pc, #32]	; (8005b7c <tcp_get_next_optbyte+0x2c>)
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	b11a      	cbz	r2, 8005b66 <tcp_get_next_optbyte+0x16>
 8005b5e:	4908      	ldr	r1, [pc, #32]	; (8005b80 <tcp_get_next_optbyte+0x30>)
 8005b60:	8809      	ldrh	r1, [r1, #0]
 8005b62:	428b      	cmp	r3, r1
 8005b64:	d204      	bcs.n	8005b70 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8005b66:	4a07      	ldr	r2, [pc, #28]	; (8005b84 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8005b68:	6812      	ldr	r2, [r2, #0]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	7d18      	ldrb	r0, [r3, #20]
 8005b6e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8005b70:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8005b76:	4770      	bx	lr
 8005b78:	2000a9ec 	.word	0x2000a9ec
 8005b7c:	2000a9f8 	.word	0x2000a9f8
 8005b80:	2000a9f4 	.word	0x2000a9f4
 8005b84:	2000a9f0 	.word	0x2000a9f0

08005b88 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	b1d0      	cbz	r0, 8005bc4 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8005b8e:	4b1e      	ldr	r3, [pc, #120]	; (8005c08 <tcp_parseopt+0x80>)
 8005b90:	881d      	ldrh	r5, [r3, #0]
 8005b92:	2d00      	cmp	r5, #0
 8005b94:	d037      	beq.n	8005c06 <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8005b96:	4b1d      	ldr	r3, [pc, #116]	; (8005c0c <tcp_parseopt+0x84>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	801a      	strh	r2, [r3, #0]
 8005b9c:	461e      	mov	r6, r3
 8005b9e:	8833      	ldrh	r3, [r6, #0]
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	d230      	bcs.n	8005c06 <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8005ba4:	f7ff ffd4 	bl	8005b50 <tcp_get_next_optbyte>
      switch (opt) {
 8005ba8:	2801      	cmp	r0, #1
 8005baa:	d0f8      	beq.n	8005b9e <tcp_parseopt+0x16>
 8005bac:	2802      	cmp	r0, #2
 8005bae:	d011      	beq.n	8005bd4 <tcp_parseopt+0x4c>
 8005bb0:	b348      	cbz	r0, 8005c06 <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8005bb2:	f7ff ffcd 	bl	8005b50 <tcp_get_next_optbyte>
          if (data < 2) {
 8005bb6:	2801      	cmp	r0, #1
 8005bb8:	d925      	bls.n	8005c06 <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8005bba:	8833      	ldrh	r3, [r6, #0]
 8005bbc:	3b02      	subs	r3, #2
 8005bbe:	4418      	add	r0, r3
 8005bc0:	8030      	strh	r0, [r6, #0]
 8005bc2:	e7ec      	b.n	8005b9e <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8005bc4:	4b12      	ldr	r3, [pc, #72]	; (8005c10 <tcp_parseopt+0x88>)
 8005bc6:	f240 727d 	movw	r2, #1917	; 0x77d
 8005bca:	4912      	ldr	r1, [pc, #72]	; (8005c14 <tcp_parseopt+0x8c>)
 8005bcc:	4812      	ldr	r0, [pc, #72]	; (8005c18 <tcp_parseopt+0x90>)
 8005bce:	f004 fd37 	bl	800a640 <iprintf>
 8005bd2:	e7dc      	b.n	8005b8e <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8005bd4:	f7ff ffbc 	bl	8005b50 <tcp_get_next_optbyte>
 8005bd8:	2804      	cmp	r0, #4
 8005bda:	d114      	bne.n	8005c06 <tcp_parseopt+0x7e>
 8005bdc:	8833      	ldrh	r3, [r6, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	42ab      	cmp	r3, r5
 8005be2:	da10      	bge.n	8005c06 <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8005be4:	f7ff ffb4 	bl	8005b50 <tcp_get_next_optbyte>
 8005be8:	0204      	lsls	r4, r0, #8
 8005bea:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 8005bec:	f7ff ffb0 	bl	8005b50 <tcp_get_next_optbyte>
 8005bf0:	4320      	orrs	r0, r4
 8005bf2:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8005bf4:	1e43      	subs	r3, r0, #1
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005bfc:	bf28      	it	cs
 8005bfe:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8005c02:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 8005c04:	e7cb      	b.n	8005b9e <tcp_parseopt+0x16>
      }
    }
  }
}
 8005c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c08:	2000a9fc 	.word	0x2000a9fc
 8005c0c:	2000a9ec 	.word	0x2000a9ec
 8005c10:	0800c93c 	.word	0x0800c93c
 8005c14:	0800c970 	.word	0x0800c970
 8005c18:	0800baa0 	.word	0x0800baa0

08005c1c <tcp_input_delayed_close>:
{
 8005c1c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8005c1e:	4604      	mov	r4, r0
 8005c20:	b130      	cbz	r0, 8005c30 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 8005c22:	4b11      	ldr	r3, [pc, #68]	; (8005c68 <tcp_input_delayed_close+0x4c>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f013 0f10 	tst.w	r3, #16
 8005c2a:	d109      	bne.n	8005c40 <tcp_input_delayed_close+0x24>
  return 0;
 8005c2c:	2000      	movs	r0, #0
}
 8005c2e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8005c30:	4b0e      	ldr	r3, [pc, #56]	; (8005c6c <tcp_input_delayed_close+0x50>)
 8005c32:	f240 225a 	movw	r2, #602	; 0x25a
 8005c36:	490e      	ldr	r1, [pc, #56]	; (8005c70 <tcp_input_delayed_close+0x54>)
 8005c38:	480e      	ldr	r0, [pc, #56]	; (8005c74 <tcp_input_delayed_close+0x58>)
 8005c3a:	f004 fd01 	bl	800a640 <iprintf>
 8005c3e:	e7f0      	b.n	8005c22 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8005c40:	8b63      	ldrh	r3, [r4, #26]
 8005c42:	f013 0f10 	tst.w	r3, #16
 8005c46:	d106      	bne.n	8005c56 <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8005c48:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005c4c:	b11b      	cbz	r3, 8005c56 <tcp_input_delayed_close+0x3a>
 8005c4e:	f06f 010e 	mvn.w	r1, #14
 8005c52:	6920      	ldr	r0, [r4, #16]
 8005c54:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8005c56:	4621      	mov	r1, r4
 8005c58:	4807      	ldr	r0, [pc, #28]	; (8005c78 <tcp_input_delayed_close+0x5c>)
 8005c5a:	f7ff f943 	bl	8004ee4 <tcp_pcb_remove>
    tcp_free(pcb);
 8005c5e:	4620      	mov	r0, r4
 8005c60:	f7fe feea 	bl	8004a38 <tcp_free>
    return 1;
 8005c64:	2001      	movs	r0, #1
 8005c66:	e7e2      	b.n	8005c2e <tcp_input_delayed_close+0x12>
 8005c68:	2000a9e0 	.word	0x2000a9e0
 8005c6c:	0800c93c 	.word	0x0800c93c
 8005c70:	0800c98c 	.word	0x0800c98c
 8005c74:	0800baa0 	.word	0x0800baa0
 8005c78:	2000a9a4 	.word	0x2000a9a4

08005c7c <tcp_free_acked_segments>:
{
 8005c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8005c80:	460d      	mov	r5, r1
 8005c82:	b139      	cbz	r1, 8005c94 <tcp_free_acked_segments+0x18>
 8005c84:	4606      	mov	r6, r0
 8005c86:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005c88:	4f2c      	ldr	r7, [pc, #176]	; (8005d3c <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005c8a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005d44 <tcp_free_acked_segments+0xc8>
 8005c8e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8005d50 <tcp_free_acked_segments+0xd4>
 8005c92:	e01b      	b.n	8005ccc <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8005c94:	468b      	mov	fp, r1
 8005c96:	e00a      	b.n	8005cae <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005c98:	4653      	mov	r3, sl
 8005c9a:	f240 4257 	movw	r2, #1111	; 0x457
 8005c9e:	4649      	mov	r1, r9
 8005ca0:	4827      	ldr	r0, [pc, #156]	; (8005d40 <tcp_free_acked_segments+0xc4>)
 8005ca2:	f004 fccd 	bl	800a640 <iprintf>
 8005ca6:	e030      	b.n	8005d0a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005ca8:	f1b8 0f00 	cmp.w	r8, #0
 8005cac:	d002      	beq.n	8005cb4 <tcp_free_acked_segments+0x38>
}
 8005cae:	4658      	mov	r0, fp
 8005cb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005cb4:	4b23      	ldr	r3, [pc, #140]	; (8005d44 <tcp_free_acked_segments+0xc8>)
 8005cb6:	f240 4261 	movw	r2, #1121	; 0x461
 8005cba:	4923      	ldr	r1, [pc, #140]	; (8005d48 <tcp_free_acked_segments+0xcc>)
 8005cbc:	4820      	ldr	r0, [pc, #128]	; (8005d40 <tcp_free_acked_segments+0xc4>)
 8005cbe:	f004 fcbf 	bl	800a640 <iprintf>
 8005cc2:	e7f4      	b.n	8005cae <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8005cc4:	f1bb 0f00 	cmp.w	fp, #0
 8005cc8:	d0f1      	beq.n	8005cae <tcp_free_acked_segments+0x32>
 8005cca:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8005ccc:	68eb      	ldr	r3, [r5, #12]
 8005cce:	6858      	ldr	r0, [r3, #4]
 8005cd0:	f7fd fd48 	bl	8003764 <lwip_htonl>
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8005cda:	68eb      	ldr	r3, [r5, #12]
 8005cdc:	8998      	ldrh	r0, [r3, #12]
 8005cde:	f7fd fd3c 	bl	800375a <lwip_htons>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	1ae4      	subs	r4, r4, r3
 8005ce6:	445c      	add	r4, fp
 8005ce8:	f010 0003 	ands.w	r0, r0, #3
 8005cec:	bf18      	it	ne
 8005cee:	2001      	movne	r0, #1
 8005cf0:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8005cf2:	2c00      	cmp	r4, #0
 8005cf4:	dc1f      	bgt.n	8005d36 <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 8005cf6:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 8005cfa:	6868      	ldr	r0, [r5, #4]
 8005cfc:	f7fe fc54 	bl	80045a8 <pbuf_clen>
 8005d00:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8005d02:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8005d06:	4283      	cmp	r3, r0
 8005d08:	d3c6      	bcc.n	8005c98 <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8005d0a:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 8005d0e:	1b04      	subs	r4, r0, r4
 8005d10:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8005d14:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <tcp_free_acked_segments+0xd0>)
 8005d16:	892b      	ldrh	r3, [r5, #8]
 8005d18:	8811      	ldrh	r1, [r2, #0]
 8005d1a:	440b      	add	r3, r1
 8005d1c:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8005d1e:	4628      	mov	r0, r5
 8005d20:	f7fe ff18 	bl	8004b54 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8005d24:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d0cb      	beq.n	8005cc4 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8005d2c:	f1bb 0f00 	cmp.w	fp, #0
 8005d30:	d0ba      	beq.n	8005ca8 <tcp_free_acked_segments+0x2c>
 8005d32:	465d      	mov	r5, fp
 8005d34:	e7ca      	b.n	8005ccc <tcp_free_acked_segments+0x50>
 8005d36:	46ab      	mov	fp, r5
  return seg_list;
 8005d38:	e7b9      	b.n	8005cae <tcp_free_acked_segments+0x32>
 8005d3a:	bf00      	nop
 8005d3c:	2000a9c0 	.word	0x2000a9c0
 8005d40:	0800baa0 	.word	0x0800baa0
 8005d44:	0800c93c 	.word	0x0800c93c
 8005d48:	0800c9dc 	.word	0x0800c9dc
 8005d4c:	2000a9d8 	.word	0x2000a9d8
 8005d50:	0800c9b4 	.word	0x0800c9b4

08005d54 <tcp_oos_insert_segment>:
{
 8005d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d58:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	b160      	cbz	r0, 8005d78 <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8005d5e:	68eb      	ldr	r3, [r5, #12]
 8005d60:	8998      	ldrh	r0, [r3, #12]
 8005d62:	f7fd fcfa 	bl	800375a <lwip_htons>
 8005d66:	f010 0f01 	tst.w	r0, #1
 8005d6a:	d10d      	bne.n	8005d88 <tcp_oos_insert_segment+0x34>
    while (next &&
 8005d6c:	2c00      	cmp	r4, #0
 8005d6e:	d035      	beq.n	8005ddc <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005d70:	4e20      	ldr	r6, [pc, #128]	; (8005df4 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8005d72:	f04f 0901 	mov.w	r9, #1
 8005d76:	e014      	b.n	8005da2 <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8005d78:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <tcp_oos_insert_segment+0xa4>)
 8005d7a:	f240 421f 	movw	r2, #1055	; 0x41f
 8005d7e:	491f      	ldr	r1, [pc, #124]	; (8005dfc <tcp_oos_insert_segment+0xa8>)
 8005d80:	481f      	ldr	r0, [pc, #124]	; (8005e00 <tcp_oos_insert_segment+0xac>)
 8005d82:	f004 fc5d 	bl	800a640 <iprintf>
 8005d86:	e7ea      	b.n	8005d5e <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7fe fef0 	bl	8004b6e <tcp_segs_free>
    next = NULL;
 8005d8e:	2400      	movs	r4, #0
  cseg->next = next;
 8005d90:	602c      	str	r4, [r5, #0]
}
 8005d92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 8005d96:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8005d98:	4620      	mov	r0, r4
 8005d9a:	f7fe fedb 	bl	8004b54 <tcp_seg_free>
    while (next &&
 8005d9e:	b1ef      	cbz	r7, 8005ddc <tcp_oos_insert_segment+0x88>
      next = next->next;
 8005da0:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 8005da2:	f8d6 c000 	ldr.w	ip, [r6]
 8005da6:	68e1      	ldr	r1, [r4, #12]
 8005da8:	6848      	ldr	r0, [r1, #4]
 8005daa:	892b      	ldrh	r3, [r5, #8]
 8005dac:	4463      	add	r3, ip
 8005dae:	1a1b      	subs	r3, r3, r0
 8005db0:	8922      	ldrh	r2, [r4, #8]
 8005db2:	1a9a      	subs	r2, r3, r2
    while (next &&
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	db13      	blt.n	8005de0 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8005db8:	8988      	ldrh	r0, [r1, #12]
 8005dba:	f7fd fcce 	bl	800375a <lwip_htons>
 8005dbe:	f010 0f01 	tst.w	r0, #1
 8005dc2:	d0e8      	beq.n	8005d96 <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8005dc4:	68eb      	ldr	r3, [r5, #12]
 8005dc6:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 8005dca:	4648      	mov	r0, r9
 8005dcc:	f7fd fcc5 	bl	800375a <lwip_htons>
 8005dd0:	68eb      	ldr	r3, [r5, #12]
 8005dd2:	ea48 0800 	orr.w	r8, r8, r0
 8005dd6:	f8a3 800c 	strh.w	r8, [r3, #12]
 8005dda:	e7dc      	b.n	8005d96 <tcp_oos_insert_segment+0x42>
    next = NULL;
 8005ddc:	2400      	movs	r4, #0
 8005dde:	e7d7      	b.n	8005d90 <tcp_oos_insert_segment+0x3c>
    if (next &&
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	ddd5      	ble.n	8005d90 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8005de4:	eba0 010c 	sub.w	r1, r0, ip
 8005de8:	b289      	uxth	r1, r1
 8005dea:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8005dec:	6868      	ldr	r0, [r5, #4]
 8005dee:	f7fe fb7b 	bl	80044e8 <pbuf_realloc>
 8005df2:	e7cd      	b.n	8005d90 <tcp_oos_insert_segment+0x3c>
 8005df4:	2000a9e4 	.word	0x2000a9e4
 8005df8:	0800c93c 	.word	0x0800c93c
 8005dfc:	0800c9fc 	.word	0x0800c9fc
 8005e00:	0800baa0 	.word	0x0800baa0

08005e04 <tcp_receive>:
{
 8005e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8005e08:	4604      	mov	r4, r0
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d066      	beq.n	8005edc <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005e0e:	7d23      	ldrb	r3, [r4, #20]
 8005e10:	2b03      	cmp	r3, #3
 8005e12:	d96b      	bls.n	8005eec <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 8005e14:	4ba4      	ldr	r3, [pc, #656]	; (80060a8 <tcp_receive+0x2a4>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	f013 0f10 	tst.w	r3, #16
 8005e1c:	d03a      	beq.n	8005e94 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005e1e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8005e22:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8005e24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005e26:	4ba1      	ldr	r3, [pc, #644]	; (80060ac <tcp_receive+0x2a8>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	1ad1      	subs	r1, r2, r3
 8005e2c:	2900      	cmp	r1, #0
 8005e2e:	db0a      	blt.n	8005e46 <tcp_receive+0x42>
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d063      	beq.n	8005efc <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8005e34:	4a9e      	ldr	r2, [pc, #632]	; (80060b0 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005e36:	6812      	ldr	r2, [r2, #0]
 8005e38:	4290      	cmp	r0, r2
 8005e3a:	d114      	bne.n	8005e66 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8005e3c:	4a9d      	ldr	r2, [pc, #628]	; (80060b4 <tcp_receive+0x2b0>)
 8005e3e:	6812      	ldr	r2, [r2, #0]
 8005e40:	89d2      	ldrh	r2, [r2, #14]
 8005e42:	42aa      	cmp	r2, r5
 8005e44:	d90f      	bls.n	8005e66 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8005e46:	4a9b      	ldr	r2, [pc, #620]	; (80060b4 <tcp_receive+0x2b0>)
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	89d2      	ldrh	r2, [r2, #14]
 8005e4c:	b291      	uxth	r1, r2
 8005e4e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8005e52:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8005e56:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 8005e58:	bf38      	it	cc
 8005e5a:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 8005e5e:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8005e60:	4b93      	ldr	r3, [pc, #588]	; (80060b0 <tcp_receive+0x2ac>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8005e66:	4b92      	ldr	r3, [pc, #584]	; (80060b0 <tcp_receive+0x2ac>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8005e6c:	1a5a      	subs	r2, r3, r1
 8005e6e:	2a00      	cmp	r2, #0
 8005e70:	dd4a      	ble.n	8005f08 <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8005e72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005e74:	1a9a      	subs	r2, r3, r2
 8005e76:	2a00      	cmp	r2, #0
 8005e78:	f340 808a 	ble.w	8005f90 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f002 fa4d 	bl	800831c <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005e82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e84:	b133      	cbz	r3, 8005e94 <tcp_receive+0x90>
 8005e86:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005e88:	4989      	ldr	r1, [pc, #548]	; (80060b0 <tcp_receive+0x2ac>)
 8005e8a:	6809      	ldr	r1, [r1, #0]
 8005e8c:	1a52      	subs	r2, r2, r1
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	f2c0 8131 	blt.w	80060f6 <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8005e94:	4b88      	ldr	r3, [pc, #544]	; (80060b8 <tcp_receive+0x2b4>)
 8005e96:	881a      	ldrh	r2, [r3, #0]
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d058      	beq.n	8005f4e <tcp_receive+0x14a>
 8005e9c:	7d23      	ldrb	r3, [r4, #20]
 8005e9e:	2b06      	cmp	r3, #6
 8005ea0:	d855      	bhi.n	8005f4e <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8005ea2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ea4:	4b81      	ldr	r3, [pc, #516]	; (80060ac <tcp_receive+0x2a8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	1ace      	subs	r6, r1, r3
 8005eaa:	2e01      	cmp	r6, #1
 8005eac:	d406      	bmi.n	8005ebc <tcp_receive+0xb8>
 8005eae:	f1c3 0001 	rsb	r0, r3, #1
 8005eb2:	1a82      	subs	r2, r0, r2
 8005eb4:	440a      	add	r2, r1
 8005eb6:	2a00      	cmp	r2, #0
 8005eb8:	f340 813f 	ble.w	800613a <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8005ebc:	1a5a      	subs	r2, r3, r1
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	f2c0 8185 	blt.w	80061ce <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8005ec4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005ec6:	f1c2 0201 	rsb	r2, r2, #1
 8005eca:	441a      	add	r2, r3
 8005ecc:	1a52      	subs	r2, r2, r1
 8005ece:	2a00      	cmp	r2, #0
 8005ed0:	f340 8182 	ble.w	80061d8 <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	f002 fa21 	bl	800831c <tcp_send_empty_ack>
 8005eda:	e048      	b.n	8005f6e <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8005edc:	4b77      	ldr	r3, [pc, #476]	; (80060bc <tcp_receive+0x2b8>)
 8005ede:	f240 427b 	movw	r2, #1147	; 0x47b
 8005ee2:	4977      	ldr	r1, [pc, #476]	; (80060c0 <tcp_receive+0x2bc>)
 8005ee4:	4877      	ldr	r0, [pc, #476]	; (80060c4 <tcp_receive+0x2c0>)
 8005ee6:	f004 fbab 	bl	800a640 <iprintf>
 8005eea:	e790      	b.n	8005e0e <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8005eec:	4b73      	ldr	r3, [pc, #460]	; (80060bc <tcp_receive+0x2b8>)
 8005eee:	f240 427c 	movw	r2, #1148	; 0x47c
 8005ef2:	4975      	ldr	r1, [pc, #468]	; (80060c8 <tcp_receive+0x2c4>)
 8005ef4:	4873      	ldr	r0, [pc, #460]	; (80060c4 <tcp_receive+0x2c0>)
 8005ef6:	f004 fba3 	bl	800a640 <iprintf>
 8005efa:	e78b      	b.n	8005e14 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8005efc:	4a6c      	ldr	r2, [pc, #432]	; (80060b0 <tcp_receive+0x2ac>)
 8005efe:	6812      	ldr	r2, [r2, #0]
 8005f00:	1a82      	subs	r2, r0, r2
 8005f02:	2a00      	cmp	r2, #0
 8005f04:	da96      	bge.n	8005e34 <tcp_receive+0x30>
 8005f06:	e79e      	b.n	8005e46 <tcp_receive+0x42>
      if (tcplen == 0) {
 8005f08:	4a6b      	ldr	r2, [pc, #428]	; (80060b8 <tcp_receive+0x2b4>)
 8005f0a:	8812      	ldrh	r2, [r2, #0]
 8005f0c:	b932      	cbnz	r2, 8005f1c <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8005f0e:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8005f12:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8005f14:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8005f16:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8005f18:	4282      	cmp	r2, r0
 8005f1a:	d003      	beq.n	8005f24 <tcp_receive+0x120>
        pcb->dupacks = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f22:	e7ae      	b.n	8005e82 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 8005f24:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8005f28:	2a00      	cmp	r2, #0
 8005f2a:	dbf7      	blt.n	8005f1c <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 8005f2c:	428b      	cmp	r3, r1
 8005f2e:	d1f5      	bne.n	8005f1c <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8005f30:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f34:	2bff      	cmp	r3, #255	; 0xff
 8005f36:	d01c      	beq.n	8005f72 <tcp_receive+0x16e>
                ++pcb->dupacks;
 8005f38:	3301      	adds	r3, #1
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	d816      	bhi.n	8005f72 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 8005f44:	2b03      	cmp	r3, #3
 8005f46:	d01f      	beq.n	8005f88 <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8005f48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d19b      	bne.n	8005e86 <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8005f4e:	4b57      	ldr	r3, [pc, #348]	; (80060ac <tcp_receive+0x2a8>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005f54:	1a99      	subs	r1, r3, r2
 8005f56:	2900      	cmp	r1, #0
 8005f58:	db05      	blt.n	8005f66 <tcp_receive+0x162>
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	dd03      	ble.n	8005f6e <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 8005f66:	8b63      	ldrh	r3, [r4, #26]
 8005f68:	f043 0302 	orr.w	r3, r3, #2
 8005f6c:	8363      	strh	r3, [r4, #26]
}
 8005f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8005f72:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005f76:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8005f78:	4413      	add	r3, r2
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	bf88      	it	hi
 8005f80:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8005f84:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f002 f943 	bl	8008214 <tcp_rexmit_fast>
      if (!found_dupack) {
 8005f8e:	e778      	b.n	8005e82 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 8005f90:	8b62      	ldrh	r2, [r4, #26]
 8005f92:	f012 0f04 	tst.w	r2, #4
 8005f96:	d009      	beq.n	8005fac <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8005f98:	f022 0204 	bic.w	r2, r2, #4
 8005f9c:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8005f9e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8005fa2:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 8005fac:	2000      	movs	r0, #0
 8005fae:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8005fb2:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8005fb6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8005fb8:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 8005fbc:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8005fc0:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8005fc4:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8005fc6:	7d22      	ldrb	r2, [r4, #20]
 8005fc8:	2a03      	cmp	r2, #3
 8005fca:	d91c      	bls.n	8006006 <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8005fcc:	1a5b      	subs	r3, r3, r1
 8005fce:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8005fd0:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005fd4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8005fd8:	4291      	cmp	r1, r2
 8005fda:	d948      	bls.n	800606e <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8005fdc:	8b61      	ldrh	r1, [r4, #26]
 8005fde:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8005fe2:	bf14      	ite	ne
 8005fe4:	2001      	movne	r0, #1
 8005fe6:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8005fe8:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 8005fea:	fb11 f100 	smulbb	r1, r1, r0
 8005fee:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	bf94      	ite	ls
 8005ff4:	1850      	addls	r0, r2, r1
 8005ff6:	18d0      	addhi	r0, r2, r3
 8005ff8:	b283      	uxth	r3, r0
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	bf88      	it	hi
 8005ffe:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8006002:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8006006:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006008:	4a30      	ldr	r2, [pc, #192]	; (80060cc <tcp_receive+0x2c8>)
 800600a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800600c:	4620      	mov	r0, r4
 800600e:	f7ff fe35 	bl	8005c7c <tcp_free_acked_segments>
 8006012:	4603      	mov	r3, r0
 8006014:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8006016:	4a2e      	ldr	r2, [pc, #184]	; (80060d0 <tcp_receive+0x2cc>)
 8006018:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800601a:	4620      	mov	r0, r4
 800601c:	f7ff fe2e 	bl	8005c7c <tcp_free_acked_segments>
 8006020:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 8006022:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8006024:	fab2 f382 	clz	r3, r2
 8006028:	095b      	lsrs	r3, r3, #5
 800602a:	425b      	negs	r3, r3
 800602c:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 8006032:	2800      	cmp	r0, #0
 8006034:	d035      	beq.n	80060a2 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8006036:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800603a:	4926      	ldr	r1, [pc, #152]	; (80060d4 <tcp_receive+0x2d0>)
 800603c:	8809      	ldrh	r1, [r1, #0]
 800603e:	440b      	add	r3, r1
 8006040:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 8006044:	8b63      	ldrh	r3, [r4, #26]
 8006046:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800604a:	f43f af1a 	beq.w	8005e82 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 800604e:	2a00      	cmp	r2, #0
 8006050:	d042      	beq.n	80060d8 <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8006052:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006054:	68d3      	ldr	r3, [r2, #12]
 8006056:	6858      	ldr	r0, [r3, #4]
 8006058:	f7fd fb84 	bl	8003764 <lwip_htonl>
 800605c:	1a2d      	subs	r5, r5, r0
 800605e:	2d00      	cmp	r5, #0
 8006060:	f73f af0f 	bgt.w	8005e82 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 8006064:	8b63      	ldrh	r3, [r4, #26]
 8006066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800606a:	8363      	strh	r3, [r4, #26]
 800606c:	e709      	b.n	8005e82 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800606e:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8006072:	440b      	add	r3, r1
 8006074:	b29b      	uxth	r3, r3
 8006076:	4299      	cmp	r1, r3
 8006078:	d804      	bhi.n	8006084 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800607a:	429a      	cmp	r2, r3
 800607c:	d904      	bls.n	8006088 <tcp_receive+0x284>
 800607e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8006082:	e7c0      	b.n	8006006 <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8006084:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8006088:	1a9b      	subs	r3, r3, r2
 800608a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800608e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006090:	4413      	add	r3, r2
 8006092:	b29b      	uxth	r3, r3
 8006094:	429a      	cmp	r2, r3
 8006096:	bf88      	it	hi
 8006098:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800609c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 80060a0:	e7b1      	b.n	8006006 <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 80060a2:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 80060a6:	e7c6      	b.n	8006036 <tcp_receive+0x232>
 80060a8:	2000a9c4 	.word	0x2000a9c4
 80060ac:	2000a9e4 	.word	0x2000a9e4
 80060b0:	2000a9c0 	.word	0x2000a9c0
 80060b4:	2000a9f0 	.word	0x2000a9f0
 80060b8:	2000a9fe 	.word	0x2000a9fe
 80060bc:	0800c93c 	.word	0x0800c93c
 80060c0:	0800ca24 	.word	0x0800ca24
 80060c4:	0800baa0 	.word	0x0800baa0
 80060c8:	0800ca40 	.word	0x0800ca40
 80060cc:	0800ca5c 	.word	0x0800ca5c
 80060d0:	0800ca64 	.word	0x0800ca64
 80060d4:	2000a9d8 	.word	0x2000a9d8
          if ((pcb->unsent == NULL) ||
 80060d8:	b140      	cbz	r0, 80060ec <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80060da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80060dc:	68c3      	ldr	r3, [r0, #12]
 80060de:	6858      	ldr	r0, [r3, #4]
 80060e0:	f7fd fb40 	bl	8003764 <lwip_htonl>
 80060e4:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 80060e6:	2d00      	cmp	r5, #0
 80060e8:	f73f aecb 	bgt.w	8005e82 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 80060ec:	8b63      	ldrh	r3, [r4, #26]
 80060ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f2:	8363      	strh	r3, [r4, #26]
 80060f4:	e6c5      	b.n	8005e82 <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80060f6:	4a9a      	ldr	r2, [pc, #616]	; (8006360 <tcp_receive+0x55c>)
 80060f8:	8816      	ldrh	r6, [r2, #0]
 80060fa:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 80060fc:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8006100:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 8006104:	1ab1      	subs	r1, r6, r2
 8006106:	1ac9      	subs	r1, r1, r3
 8006108:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800610a:	fa15 f181 	uxtah	r1, r5, r1
 800610e:	b209      	sxth	r1, r1
 8006110:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8006112:	2800      	cmp	r0, #0
 8006114:	db0d      	blt.n	8006132 <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 8006116:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800611a:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 800611e:	1813      	adds	r3, r2, r0
 8006120:	b29b      	uxth	r3, r3
 8006122:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8006124:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8006128:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	6363      	str	r3, [r4, #52]	; 0x34
 8006130:	e6b0      	b.n	8005e94 <tcp_receive+0x90>
        m = (s16_t) - m;
 8006132:	1b92      	subs	r2, r2, r6
 8006134:	4413      	add	r3, r2
 8006136:	b218      	sxth	r0, r3
 8006138:	e7ed      	b.n	8006116 <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 800613a:	4b8a      	ldr	r3, [pc, #552]	; (8006364 <tcp_receive+0x560>)
 800613c:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800613e:	2d00      	cmp	r5, #0
 8006140:	d02d      	beq.n	800619e <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8006142:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8006146:	429e      	cmp	r6, r3
 8006148:	d831      	bhi.n	80061ae <tcp_receive+0x3aa>
      off = (u16_t)off32;
 800614a:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800614c:	4b85      	ldr	r3, [pc, #532]	; (8006364 <tcp_receive+0x560>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	891b      	ldrh	r3, [r3, #8]
 8006152:	42b3      	cmp	r3, r6
 8006154:	d333      	bcc.n	80061be <tcp_receive+0x3ba>
      inseg.len -= off;
 8006156:	4b83      	ldr	r3, [pc, #524]	; (8006364 <tcp_receive+0x560>)
 8006158:	891a      	ldrh	r2, [r3, #8]
 800615a:	1b92      	subs	r2, r2, r6
 800615c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	891a      	ldrh	r2, [r3, #8]
 8006162:	1b92      	subs	r2, r2, r6
 8006164:	b292      	uxth	r2, r2
      while (p->len < off) {
 8006166:	896b      	ldrh	r3, [r5, #10]
 8006168:	429e      	cmp	r6, r3
 800616a:	d908      	bls.n	800617e <tcp_receive+0x37a>
        p->len = 0;
 800616c:	2100      	movs	r1, #0
        off -= p->len;
 800616e:	1af3      	subs	r3, r6, r3
 8006170:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 8006172:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8006174:	8169      	strh	r1, [r5, #10]
        p = p->next;
 8006176:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 8006178:	896b      	ldrh	r3, [r5, #10]
 800617a:	42b3      	cmp	r3, r6
 800617c:	d3f7      	bcc.n	800616e <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	f7fe f877 	bl	8004274 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8006186:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006188:	4a77      	ldr	r2, [pc, #476]	; (8006368 <tcp_receive+0x564>)
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	4a75      	ldr	r2, [pc, #468]	; (8006364 <tcp_receive+0x560>)
 800618e:	68d2      	ldr	r2, [r2, #12]
 8006190:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8006192:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006194:	1a5a      	subs	r2, r3, r1
 8006196:	2a00      	cmp	r2, #0
 8006198:	f6bf ae94 	bge.w	8005ec4 <tcp_receive+0xc0>
 800619c:	e69a      	b.n	8005ed4 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800619e:	4b73      	ldr	r3, [pc, #460]	; (800636c <tcp_receive+0x568>)
 80061a0:	f240 5294 	movw	r2, #1428	; 0x594
 80061a4:	4972      	ldr	r1, [pc, #456]	; (8006370 <tcp_receive+0x56c>)
 80061a6:	4873      	ldr	r0, [pc, #460]	; (8006374 <tcp_receive+0x570>)
 80061a8:	f004 fa4a 	bl	800a640 <iprintf>
 80061ac:	e7c9      	b.n	8006142 <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80061ae:	4b6f      	ldr	r3, [pc, #444]	; (800636c <tcp_receive+0x568>)
 80061b0:	f240 5295 	movw	r2, #1429	; 0x595
 80061b4:	4970      	ldr	r1, [pc, #448]	; (8006378 <tcp_receive+0x574>)
 80061b6:	486f      	ldr	r0, [pc, #444]	; (8006374 <tcp_receive+0x570>)
 80061b8:	f004 fa42 	bl	800a640 <iprintf>
 80061bc:	e7c5      	b.n	800614a <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80061be:	4b6b      	ldr	r3, [pc, #428]	; (800636c <tcp_receive+0x568>)
 80061c0:	f240 5297 	movw	r2, #1431	; 0x597
 80061c4:	496d      	ldr	r1, [pc, #436]	; (800637c <tcp_receive+0x578>)
 80061c6:	486b      	ldr	r0, [pc, #428]	; (8006374 <tcp_receive+0x570>)
 80061c8:	f004 fa3a 	bl	800a640 <iprintf>
 80061cc:	e7c3      	b.n	8006156 <tcp_receive+0x352>
        tcp_ack_now(pcb);
 80061ce:	8b63      	ldrh	r3, [r4, #26]
 80061d0:	f043 0302 	orr.w	r3, r3, #2
 80061d4:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80061d6:	e67d      	b.n	8005ed4 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 80061d8:	428b      	cmp	r3, r1
 80061da:	d008      	beq.n	80061ee <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 80061dc:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80061de:	2d00      	cmp	r5, #0
 80061e0:	f000 817a 	beq.w	80064d8 <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 80061e4:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80061e6:	1e5f      	subs	r7, r3, #1
 80061e8:	f103 0c01 	add.w	ip, r3, #1
 80061ec:	e195      	b.n	800651a <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 80061ee:	4b5d      	ldr	r3, [pc, #372]	; (8006364 <tcp_receive+0x560>)
 80061f0:	891d      	ldrh	r5, [r3, #8]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	8998      	ldrh	r0, [r3, #12]
 80061f6:	f7fd fab0 	bl	800375a <lwip_htons>
 80061fa:	f010 0303 	ands.w	r3, r0, #3
 80061fe:	bf18      	it	ne
 8006200:	2301      	movne	r3, #1
 8006202:	442b      	add	r3, r5
 8006204:	b29b      	uxth	r3, r3
 8006206:	4a5e      	ldr	r2, [pc, #376]	; (8006380 <tcp_receive+0x57c>)
 8006208:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800620a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800620c:	429a      	cmp	r2, r3
 800620e:	d317      	bcc.n	8006240 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 8006210:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 823e 	beq.w	8006694 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006218:	4b52      	ldr	r3, [pc, #328]	; (8006364 <tcp_receive+0x560>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	8998      	ldrh	r0, [r3, #12]
 800621e:	f7fd fa9c 	bl	800375a <lwip_htons>
 8006222:	f010 0f01 	tst.w	r0, #1
 8006226:	d053      	beq.n	80062d0 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 8006228:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800622a:	2800      	cmp	r0, #0
 800622c:	f000 8232 	beq.w	8006694 <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 8006230:	6803      	ldr	r3, [r0, #0]
 8006232:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8006234:	f7fe fc8e 	bl	8004b54 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8006238:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800623a:	2800      	cmp	r0, #0
 800623c:	d1f8      	bne.n	8006230 <tcp_receive+0x42c>
 800623e:	e229      	b.n	8006694 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8006240:	4b48      	ldr	r3, [pc, #288]	; (8006364 <tcp_receive+0x560>)
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	8998      	ldrh	r0, [r3, #12]
 8006246:	f7fd fa88 	bl	800375a <lwip_htons>
 800624a:	f010 0f01 	tst.w	r0, #1
 800624e:	d12f      	bne.n	80062b0 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8006250:	4b44      	ldr	r3, [pc, #272]	; (8006364 <tcp_receive+0x560>)
 8006252:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006254:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006256:	68db      	ldr	r3, [r3, #12]
 8006258:	8998      	ldrh	r0, [r3, #12]
 800625a:	f7fd fa7e 	bl	800375a <lwip_htons>
 800625e:	f010 0f02 	tst.w	r0, #2
 8006262:	d003      	beq.n	800626c <tcp_receive+0x468>
            inseg.len -= 1;
 8006264:	4a3f      	ldr	r2, [pc, #252]	; (8006364 <tcp_receive+0x560>)
 8006266:	8913      	ldrh	r3, [r2, #8]
 8006268:	3b01      	subs	r3, #1
 800626a:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800626c:	4e3d      	ldr	r6, [pc, #244]	; (8006364 <tcp_receive+0x560>)
 800626e:	8931      	ldrh	r1, [r6, #8]
 8006270:	6870      	ldr	r0, [r6, #4]
 8006272:	f7fe f939 	bl	80044e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8006276:	8935      	ldrh	r5, [r6, #8]
 8006278:	68f3      	ldr	r3, [r6, #12]
 800627a:	8998      	ldrh	r0, [r3, #12]
 800627c:	f7fd fa6d 	bl	800375a <lwip_htons>
 8006280:	f010 0303 	ands.w	r3, r0, #3
 8006284:	bf18      	it	ne
 8006286:	2301      	movne	r3, #1
 8006288:	442b      	add	r3, r5
 800628a:	b29b      	uxth	r3, r3
 800628c:	4a3c      	ldr	r2, [pc, #240]	; (8006380 <tcp_receive+0x57c>)
 800628e:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8006290:	4a35      	ldr	r2, [pc, #212]	; (8006368 <tcp_receive+0x564>)
 8006292:	6812      	ldr	r2, [r2, #0]
 8006294:	4413      	add	r3, r2
 8006296:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006298:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800629a:	440a      	add	r2, r1
 800629c:	4293      	cmp	r3, r2
 800629e:	d0b7      	beq.n	8006210 <tcp_receive+0x40c>
 80062a0:	4b32      	ldr	r3, [pc, #200]	; (800636c <tcp_receive+0x568>)
 80062a2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80062a6:	4937      	ldr	r1, [pc, #220]	; (8006384 <tcp_receive+0x580>)
 80062a8:	4832      	ldr	r0, [pc, #200]	; (8006374 <tcp_receive+0x570>)
 80062aa:	f004 f9c9 	bl	800a640 <iprintf>
 80062ae:	e7af      	b.n	8006210 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80062b0:	4e2c      	ldr	r6, [pc, #176]	; (8006364 <tcp_receive+0x560>)
 80062b2:	68f3      	ldr	r3, [r6, #12]
 80062b4:	899d      	ldrh	r5, [r3, #12]
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7fd fa4f 	bl	800375a <lwip_htons>
 80062bc:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80062c0:	f7fd fa4b 	bl	800375a <lwip_htons>
 80062c4:	68f3      	ldr	r3, [r6, #12]
 80062c6:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 80062ca:	4305      	orrs	r5, r0
 80062cc:	819d      	strh	r5, [r3, #12]
 80062ce:	e7bf      	b.n	8006250 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 80062d0:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 80062d2:	2d00      	cmp	r5, #0
 80062d4:	f000 81d8 	beq.w	8006688 <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80062d8:	4f23      	ldr	r7, [pc, #140]	; (8006368 <tcp_receive+0x564>)
 80062da:	4e29      	ldr	r6, [pc, #164]	; (8006380 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80062dc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006364 <tcp_receive+0x560>
 80062e0:	e009      	b.n	80062f6 <tcp_receive+0x4f2>
              next = next->next;
 80062e2:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 80062e6:	4628      	mov	r0, r5
 80062e8:	f7fe fc34 	bl	8004b54 <tcp_seg_free>
            while (next &&
 80062ec:	f1b9 0f00 	cmp.w	r9, #0
 80062f0:	f000 81ca 	beq.w	8006688 <tcp_receive+0x884>
              next = next->next;
 80062f4:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 80062f6:	f8d7 c000 	ldr.w	ip, [r7]
 80062fa:	68e9      	ldr	r1, [r5, #12]
 80062fc:	6848      	ldr	r0, [r1, #4]
 80062fe:	8833      	ldrh	r3, [r6, #0]
 8006300:	4463      	add	r3, ip
 8006302:	1a1b      	subs	r3, r3, r0
 8006304:	892a      	ldrh	r2, [r5, #8]
 8006306:	1a9a      	subs	r2, r3, r2
            while (next &&
 8006308:	2a00      	cmp	r2, #0
 800630a:	f2c0 81bf 	blt.w	800668c <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800630e:	8988      	ldrh	r0, [r1, #12]
 8006310:	f7fd fa23 	bl	800375a <lwip_htons>
 8006314:	f010 0f01 	tst.w	r0, #1
 8006318:	d0e3      	beq.n	80062e2 <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800631a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800631e:	8998      	ldrh	r0, [r3, #12]
 8006320:	f7fd fa1b 	bl	800375a <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8006324:	f010 0f02 	tst.w	r0, #2
 8006328:	d1db      	bne.n	80062e2 <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800632a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800632e:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8006332:	2001      	movs	r0, #1
 8006334:	f7fd fa11 	bl	800375a <lwip_htons>
 8006338:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800633c:	ea49 0900 	orr.w	r9, r9, r0
 8006340:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8006344:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 8006348:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800634c:	8998      	ldrh	r0, [r3, #12]
 800634e:	f7fd fa04 	bl	800375a <lwip_htons>
 8006352:	f010 0303 	ands.w	r3, r0, #3
 8006356:	bf18      	it	ne
 8006358:	2301      	movne	r3, #1
 800635a:	444b      	add	r3, r9
 800635c:	8033      	strh	r3, [r6, #0]
 800635e:	e7c0      	b.n	80062e2 <tcp_receive+0x4de>
 8006360:	2000a9b4 	.word	0x2000a9b4
 8006364:	2000a9c8 	.word	0x2000a9c8
 8006368:	2000a9e4 	.word	0x2000a9e4
 800636c:	0800c93c 	.word	0x0800c93c
 8006370:	0800ca6c 	.word	0x0800ca6c
 8006374:	0800baa0 	.word	0x0800baa0
 8006378:	0800ca7c 	.word	0x0800ca7c
 800637c:	0800ca8c 	.word	0x0800ca8c
 8006380:	2000a9fe 	.word	0x2000a9fe
 8006384:	0800ca9c 	.word	0x0800ca9c
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8006388:	4b81      	ldr	r3, [pc, #516]	; (8006590 <tcp_receive+0x78c>)
 800638a:	eba0 000c 	sub.w	r0, r0, ip
 800638e:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	8998      	ldrh	r0, [r3, #12]
 8006394:	f7fd f9e1 	bl	800375a <lwip_htons>
 8006398:	f010 0f02 	tst.w	r0, #2
 800639c:	d003      	beq.n	80063a6 <tcp_receive+0x5a2>
                inseg.len -= 1;
 800639e:	4a7c      	ldr	r2, [pc, #496]	; (8006590 <tcp_receive+0x78c>)
 80063a0:	8913      	ldrh	r3, [r2, #8]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80063a6:	4f7a      	ldr	r7, [pc, #488]	; (8006590 <tcp_receive+0x78c>)
 80063a8:	8939      	ldrh	r1, [r7, #8]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fe f89c 	bl	80044e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80063b0:	893e      	ldrh	r6, [r7, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	8998      	ldrh	r0, [r3, #12]
 80063b6:	f7fd f9d0 	bl	800375a <lwip_htons>
 80063ba:	f010 0303 	ands.w	r3, r0, #3
 80063be:	bf18      	it	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	4433      	add	r3, r6
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	4a73      	ldr	r2, [pc, #460]	; (8006594 <tcp_receive+0x790>)
 80063c8:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80063ca:	4a73      	ldr	r2, [pc, #460]	; (8006598 <tcp_receive+0x794>)
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	4413      	add	r3, r2
 80063d0:	68ea      	ldr	r2, [r5, #12]
 80063d2:	6852      	ldr	r2, [r2, #4]
 80063d4:	4293      	cmp	r3, r2
 80063d6:	f000 815c 	beq.w	8006692 <tcp_receive+0x88e>
 80063da:	4b70      	ldr	r3, [pc, #448]	; (800659c <tcp_receive+0x798>)
 80063dc:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80063e0:	496f      	ldr	r1, [pc, #444]	; (80065a0 <tcp_receive+0x79c>)
 80063e2:	4870      	ldr	r0, [pc, #448]	; (80065a4 <tcp_receive+0x7a0>)
 80063e4:	f004 f92c 	bl	800a640 <iprintf>
 80063e8:	e153      	b.n	8006692 <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80063ea:	4b6c      	ldr	r3, [pc, #432]	; (800659c <tcp_receive+0x798>)
 80063ec:	f240 6207 	movw	r2, #1543	; 0x607
 80063f0:	496d      	ldr	r1, [pc, #436]	; (80065a8 <tcp_receive+0x7a4>)
 80063f2:	486c      	ldr	r0, [pc, #432]	; (80065a4 <tcp_receive+0x7a0>)
 80063f4:	f004 f924 	bl	800a640 <iprintf>
 80063f8:	e156      	b.n	80066a8 <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80063fa:	4643      	mov	r3, r8
 80063fc:	f240 622b 	movw	r2, #1579	; 0x62b
 8006400:	4639      	mov	r1, r7
 8006402:	4868      	ldr	r0, [pc, #416]	; (80065a4 <tcp_receive+0x7a0>)
 8006404:	f004 f91c 	bl	800a640 <iprintf>
 8006408:	e03e      	b.n	8006488 <tcp_receive+0x684>
              recv_data = cseg->p;
 800640a:	4b68      	ldr	r3, [pc, #416]	; (80065ac <tcp_receive+0x7a8>)
 800640c:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800640e:	2300      	movs	r3, #0
 8006410:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8006412:	68eb      	ldr	r3, [r5, #12]
 8006414:	8998      	ldrh	r0, [r3, #12]
 8006416:	f7fd f9a0 	bl	800375a <lwip_htons>
 800641a:	f010 0f01 	tst.w	r0, #1
 800641e:	d009      	beq.n	8006434 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 8006420:	4a63      	ldr	r2, [pc, #396]	; (80065b0 <tcp_receive+0x7ac>)
 8006422:	7813      	ldrb	r3, [r2, #0]
 8006424:	f043 0320 	orr.w	r3, r3, #32
 8006428:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800642a:	7d23      	ldrb	r3, [r4, #20]
 800642c:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800642e:	bf04      	itt	eq
 8006430:	2307      	moveq	r3, #7
 8006432:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8006434:	682b      	ldr	r3, [r5, #0]
 8006436:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8006438:	4628      	mov	r0, r5
 800643a:	f7fe fb8b 	bl	8004b54 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800643e:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8006440:	2d00      	cmp	r5, #0
 8006442:	d03d      	beq.n	80064c0 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8006444:	68ea      	ldr	r2, [r5, #12]
 8006446:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8006448:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800644a:	428b      	cmp	r3, r1
 800644c:	d138      	bne.n	80064c0 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800644e:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8006450:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8006454:	8990      	ldrh	r0, [r2, #12]
 8006456:	f7fd f980 	bl	800375a <lwip_htons>
 800645a:	f010 0003 	ands.w	r0, r0, #3
 800645e:	bf18      	it	ne
 8006460:	2001      	movne	r0, #1
 8006462:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006464:	4499      	add	r9, r3
 8006466:	4448      	add	r0, r9
 8006468:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800646a:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800646e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8006472:	68eb      	ldr	r3, [r5, #12]
 8006474:	8998      	ldrh	r0, [r3, #12]
 8006476:	f7fd f970 	bl	800375a <lwip_htons>
 800647a:	f010 0003 	ands.w	r0, r0, #3
 800647e:	bf18      	it	ne
 8006480:	2001      	movne	r0, #1
 8006482:	4450      	add	r0, sl
 8006484:	4581      	cmp	r9, r0
 8006486:	d3b8      	bcc.n	80063fa <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8006488:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800648c:	68eb      	ldr	r3, [r5, #12]
 800648e:	8998      	ldrh	r0, [r3, #12]
 8006490:	f7fd f963 	bl	800375a <lwip_htons>
 8006494:	f010 0003 	ands.w	r0, r0, #3
 8006498:	bf18      	it	ne
 800649a:	2001      	movne	r0, #1
 800649c:	4448      	add	r0, r9
 800649e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80064a0:	1a18      	subs	r0, r3, r0
 80064a2:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80064a4:	4620      	mov	r0, r4
 80064a6:	f7fe fadf 	bl	8004a68 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80064aa:	6869      	ldr	r1, [r5, #4]
 80064ac:	890b      	ldrh	r3, [r1, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0af      	beq.n	8006412 <tcp_receive+0x60e>
            if (recv_data) {
 80064b2:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <tcp_receive+0x7a8>)
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	2800      	cmp	r0, #0
 80064b8:	d0a7      	beq.n	800640a <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 80064ba:	f7fe f899 	bl	80045f0 <pbuf_cat>
 80064be:	e7a6      	b.n	800640e <tcp_receive+0x60a>
        tcp_ack(pcb);
 80064c0:	8b63      	ldrh	r3, [r4, #26]
 80064c2:	f013 0f01 	tst.w	r3, #1
 80064c6:	bf1a      	itte	ne
 80064c8:	f023 0301 	bicne.w	r3, r3, #1
 80064cc:	f043 0302 	orrne.w	r3, r3, #2
 80064d0:	f043 0301 	orreq.w	r3, r3, #1
 80064d4:	8363      	strh	r3, [r4, #26]
 80064d6:	e54a      	b.n	8005f6e <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80064d8:	482d      	ldr	r0, [pc, #180]	; (8006590 <tcp_receive+0x78c>)
 80064da:	f7fe fb53 	bl	8004b84 <tcp_seg_copy>
 80064de:	6760      	str	r0, [r4, #116]	; 0x74
 80064e0:	e051      	b.n	8006586 <tcp_receive+0x782>
              if (inseg.len > next->len) {
 80064e2:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <tcp_receive+0x78c>)
 80064e4:	891a      	ldrh	r2, [r3, #8]
 80064e6:	892b      	ldrh	r3, [r5, #8]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d94c      	bls.n	8006586 <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80064ec:	4828      	ldr	r0, [pc, #160]	; (8006590 <tcp_receive+0x78c>)
 80064ee:	f7fe fb49 	bl	8004b84 <tcp_seg_copy>
                if (cseg != NULL) {
 80064f2:	4603      	mov	r3, r0
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d046      	beq.n	8006586 <tcp_receive+0x782>
                  if (prev != NULL) {
 80064f8:	b12e      	cbz	r6, 8006506 <tcp_receive+0x702>
                    prev->next = cseg;
 80064fa:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 80064fc:	4629      	mov	r1, r5
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fc28 	bl	8005d54 <tcp_oos_insert_segment>
 8006504:	e03f      	b.n	8006586 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8006506:	6760      	str	r0, [r4, #116]	; 0x74
 8006508:	e7f8      	b.n	80064fc <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800650a:	1a99      	subs	r1, r3, r2
 800650c:	2900      	cmp	r1, #0
 800650e:	db27      	blt.n	8006560 <tcp_receive+0x75c>
              if (next->next == NULL &&
 8006510:	6829      	ldr	r1, [r5, #0]
 8006512:	462e      	mov	r6, r5
 8006514:	2900      	cmp	r1, #0
 8006516:	d033      	beq.n	8006580 <tcp_receive+0x77c>
 8006518:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800651a:	68e8      	ldr	r0, [r5, #12]
 800651c:	6842      	ldr	r2, [r0, #4]
 800651e:	429a      	cmp	r2, r3
 8006520:	d0df      	beq.n	80064e2 <tcp_receive+0x6de>
              if (prev == NULL) {
 8006522:	2e00      	cmp	r6, #0
 8006524:	d0f1      	beq.n	800650a <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8006526:	68f1      	ldr	r1, [r6, #12]
 8006528:	6849      	ldr	r1, [r1, #4]
 800652a:	1a79      	subs	r1, r7, r1
 800652c:	2900      	cmp	r1, #0
 800652e:	dbef      	blt.n	8006510 <tcp_receive+0x70c>
 8006530:	ebac 0102 	sub.w	r1, ip, r2
 8006534:	2900      	cmp	r1, #0
 8006536:	dceb      	bgt.n	8006510 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8006538:	4815      	ldr	r0, [pc, #84]	; (8006590 <tcp_receive+0x78c>)
 800653a:	f7fe fb23 	bl	8004b84 <tcp_seg_copy>
                  if (cseg != NULL) {
 800653e:	4607      	mov	r7, r0
 8006540:	b308      	cbz	r0, 8006586 <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8006542:	68f3      	ldr	r3, [r6, #12]
 8006544:	6859      	ldr	r1, [r3, #4]
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <tcp_receive+0x794>)
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	8933      	ldrh	r3, [r6, #8]
 800654c:	440b      	add	r3, r1
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	2b00      	cmp	r3, #0
 8006552:	dc0e      	bgt.n	8006572 <tcp_receive+0x76e>
                    prev->next = cseg;
 8006554:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8006556:	4629      	mov	r1, r5
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff fbfb 	bl	8005d54 <tcp_oos_insert_segment>
 800655e:	e012      	b.n	8006586 <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8006560:	480b      	ldr	r0, [pc, #44]	; (8006590 <tcp_receive+0x78c>)
 8006562:	f7fe fb0f 	bl	8004b84 <tcp_seg_copy>
                  if (cseg != NULL) {
 8006566:	b170      	cbz	r0, 8006586 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8006568:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800656a:	4629      	mov	r1, r5
 800656c:	f7ff fbf2 	bl	8005d54 <tcp_oos_insert_segment>
 8006570:	e009      	b.n	8006586 <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8006572:	1a52      	subs	r2, r2, r1
 8006574:	b291      	uxth	r1, r2
 8006576:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8006578:	6870      	ldr	r0, [r6, #4]
 800657a:	f7fd ffb5 	bl	80044e8 <pbuf_realloc>
 800657e:	e7e9      	b.n	8006554 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8006580:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8006582:	2b00      	cmp	r3, #0
 8006584:	dc16      	bgt.n	80065b4 <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 8006586:	4620      	mov	r0, r4
 8006588:	f001 fec8 	bl	800831c <tcp_send_empty_ack>
 800658c:	e4ef      	b.n	8005f6e <tcp_receive+0x16a>
 800658e:	bf00      	nop
 8006590:	2000a9c8 	.word	0x2000a9c8
 8006594:	2000a9fe 	.word	0x2000a9fe
 8006598:	2000a9e4 	.word	0x2000a9e4
 800659c:	0800c93c 	.word	0x0800c93c
 80065a0:	0800cad4 	.word	0x0800cad4
 80065a4:	0800baa0 	.word	0x0800baa0
 80065a8:	0800cb10 	.word	0x0800cb10
 80065ac:	2000a9dc 	.word	0x2000a9dc
 80065b0:	2000a9e0 	.word	0x2000a9e0
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80065b4:	8980      	ldrh	r0, [r0, #12]
 80065b6:	f7fd f8d0 	bl	800375a <lwip_htons>
 80065ba:	f010 0f01 	tst.w	r0, #1
 80065be:	d1e2      	bne.n	8006586 <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 80065c0:	484d      	ldr	r0, [pc, #308]	; (80066f8 <tcp_receive+0x8f4>)
 80065c2:	f7fe fadf 	bl	8004b84 <tcp_seg_copy>
 80065c6:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0dc      	beq.n	8006586 <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80065cc:	68eb      	ldr	r3, [r5, #12]
 80065ce:	6859      	ldr	r1, [r3, #4]
 80065d0:	4b4a      	ldr	r3, [pc, #296]	; (80066fc <tcp_receive+0x8f8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	892a      	ldrh	r2, [r5, #8]
 80065d6:	440a      	add	r2, r1
 80065d8:	1ad2      	subs	r2, r2, r3
 80065da:	2a00      	cmp	r2, #0
 80065dc:	dc3c      	bgt.n	8006658 <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80065de:	4b48      	ldr	r3, [pc, #288]	; (8006700 <tcp_receive+0x8fc>)
 80065e0:	881b      	ldrh	r3, [r3, #0]
 80065e2:	4a46      	ldr	r2, [pc, #280]	; (80066fc <tcp_receive+0x8f8>)
 80065e4:	6812      	ldr	r2, [r2, #0]
 80065e6:	4413      	add	r3, r2
 80065e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80065ea:	1a9b      	subs	r3, r3, r2
 80065ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	ddc8      	ble.n	8006586 <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	8998      	ldrh	r0, [r3, #12]
 80065fa:	f7fd f8ae 	bl	800375a <lwip_htons>
 80065fe:	f010 0f01 	tst.w	r0, #1
 8006602:	d130      	bne.n	8006666 <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8006604:	682a      	ldr	r2, [r5, #0]
 8006606:	4e3d      	ldr	r6, [pc, #244]	; (80066fc <tcp_receive+0x8f8>)
 8006608:	6831      	ldr	r1, [r6, #0]
 800660a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800660c:	1a5b      	subs	r3, r3, r1
 800660e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006610:	440b      	add	r3, r1
 8006612:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	8919      	ldrh	r1, [r3, #8]
 8006618:	6858      	ldr	r0, [r3, #4]
 800661a:	f7fd ff65 	bl	80044e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	891d      	ldrh	r5, [r3, #8]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	8998      	ldrh	r0, [r3, #12]
 8006626:	f7fd f898 	bl	800375a <lwip_htons>
 800662a:	f010 0303 	ands.w	r3, r0, #3
 800662e:	bf18      	it	ne
 8006630:	2301      	movne	r3, #1
 8006632:	442b      	add	r3, r5
 8006634:	b29b      	uxth	r3, r3
 8006636:	4a32      	ldr	r2, [pc, #200]	; (8006700 <tcp_receive+0x8fc>)
 8006638:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800663a:	6832      	ldr	r2, [r6, #0]
 800663c:	4413      	add	r3, r2
 800663e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006640:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006642:	440a      	add	r2, r1
 8006644:	4293      	cmp	r3, r2
 8006646:	d09e      	beq.n	8006586 <tcp_receive+0x782>
 8006648:	4b2e      	ldr	r3, [pc, #184]	; (8006704 <tcp_receive+0x900>)
 800664a:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800664e:	492e      	ldr	r1, [pc, #184]	; (8006708 <tcp_receive+0x904>)
 8006650:	482e      	ldr	r0, [pc, #184]	; (800670c <tcp_receive+0x908>)
 8006652:	f003 fff5 	bl	800a640 <iprintf>
 8006656:	e796      	b.n	8006586 <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8006658:	1a5b      	subs	r3, r3, r1
 800665a:	b299      	uxth	r1, r3
 800665c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800665e:	6868      	ldr	r0, [r5, #4]
 8006660:	f7fd ff42 	bl	80044e8 <pbuf_realloc>
 8006664:	e7bb      	b.n	80065de <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	899e      	ldrh	r6, [r3, #12]
 800666c:	4630      	mov	r0, r6
 800666e:	f7fd f874 	bl	800375a <lwip_htons>
 8006672:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8006676:	f7fd f870 	bl	800375a <lwip_htons>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8006682:	4306      	orrs	r6, r0
 8006684:	819e      	strh	r6, [r3, #12]
 8006686:	e7bd      	b.n	8006604 <tcp_receive+0x800>
              next = next->next;
 8006688:	2500      	movs	r5, #0
 800668a:	e002      	b.n	8006692 <tcp_receive+0x88e>
            if (next &&
 800668c:	2b00      	cmp	r3, #0
 800668e:	f73f ae7b 	bgt.w	8006388 <tcp_receive+0x584>
            pcb->ooseq = next;
 8006692:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 8006694:	4b1a      	ldr	r3, [pc, #104]	; (8006700 <tcp_receive+0x8fc>)
 8006696:	881a      	ldrh	r2, [r3, #0]
 8006698:	4b18      	ldr	r3, [pc, #96]	; (80066fc <tcp_receive+0x8f8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4413      	add	r3, r2
 800669e:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80066a0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066a2:	4293      	cmp	r3, r2
 80066a4:	f4ff aea1 	bcc.w	80063ea <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 80066a8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80066aa:	4a15      	ldr	r2, [pc, #84]	; (8006700 <tcp_receive+0x8fc>)
 80066ac:	8812      	ldrh	r2, [r2, #0]
 80066ae:	1a9b      	subs	r3, r3, r2
 80066b0:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7fe f9d8 	bl	8004a68 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <tcp_receive+0x8f4>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	891a      	ldrh	r2, [r3, #8]
 80066be:	b122      	cbz	r2, 80066ca <tcp_receive+0x8c6>
          recv_data = inseg.p;
 80066c0:	4a13      	ldr	r2, [pc, #76]	; (8006710 <tcp_receive+0x90c>)
 80066c2:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 80066c4:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <tcp_receive+0x8f4>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80066ca:	4b0b      	ldr	r3, [pc, #44]	; (80066f8 <tcp_receive+0x8f4>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	8998      	ldrh	r0, [r3, #12]
 80066d0:	f7fd f843 	bl	800375a <lwip_htons>
 80066d4:	f010 0f01 	tst.w	r0, #1
 80066d8:	d004      	beq.n	80066e4 <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 80066da:	4a0e      	ldr	r2, [pc, #56]	; (8006714 <tcp_receive+0x910>)
 80066dc:	7813      	ldrb	r3, [r2, #0]
 80066de:	f043 0320 	orr.w	r3, r3, #32
 80066e2:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 80066e4:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80066e6:	2d00      	cmp	r5, #0
 80066e8:	f43f aeea 	beq.w	80064c0 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 80066ec:	4e03      	ldr	r6, [pc, #12]	; (80066fc <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80066ee:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8006704 <tcp_receive+0x900>
 80066f2:	4f09      	ldr	r7, [pc, #36]	; (8006718 <tcp_receive+0x914>)
 80066f4:	e6a6      	b.n	8006444 <tcp_receive+0x640>
 80066f6:	bf00      	nop
 80066f8:	2000a9c8 	.word	0x2000a9c8
 80066fc:	2000a9e4 	.word	0x2000a9e4
 8006700:	2000a9fe 	.word	0x2000a9fe
 8006704:	0800c93c 	.word	0x0800c93c
 8006708:	0800ca9c 	.word	0x0800ca9c
 800670c:	0800baa0 	.word	0x0800baa0
 8006710:	2000a9dc 	.word	0x2000a9dc
 8006714:	2000a9e0 	.word	0x2000a9e0
 8006718:	0800cb30 	.word	0x0800cb30

0800671c <tcp_input>:
{
 800671c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006720:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006722:	4605      	mov	r5, r0
 8006724:	b158      	cbz	r0, 800673e <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 8006726:	686a      	ldr	r2, [r5, #4]
 8006728:	4b77      	ldr	r3, [pc, #476]	; (8006908 <tcp_input+0x1ec>)
 800672a:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800672c:	896b      	ldrh	r3, [r5, #10]
 800672e:	2b13      	cmp	r3, #19
 8006730:	d80c      	bhi.n	800674c <tcp_input+0x30>
  pbuf_free(p);
 8006732:	4628      	mov	r0, r5
 8006734:	f7fd fdde 	bl	80042f4 <pbuf_free>
}
 8006738:	b005      	add	sp, #20
 800673a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800673e:	4b73      	ldr	r3, [pc, #460]	; (800690c <tcp_input+0x1f0>)
 8006740:	2283      	movs	r2, #131	; 0x83
 8006742:	4973      	ldr	r1, [pc, #460]	; (8006910 <tcp_input+0x1f4>)
 8006744:	4873      	ldr	r0, [pc, #460]	; (8006914 <tcp_input+0x1f8>)
 8006746:	f003 ff7b 	bl	800a640 <iprintf>
 800674a:	e7ec      	b.n	8006726 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800674c:	4b72      	ldr	r3, [pc, #456]	; (8006918 <tcp_input+0x1fc>)
 800674e:	6819      	ldr	r1, [r3, #0]
 8006750:	6958      	ldr	r0, [r3, #20]
 8006752:	f003 f9a8 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 8006756:	2800      	cmp	r0, #0
 8006758:	d1eb      	bne.n	8006732 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800675a:	4b6f      	ldr	r3, [pc, #444]	; (8006918 <tcp_input+0x1fc>)
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006762:	2be0      	cmp	r3, #224	; 0xe0
 8006764:	d0e5      	beq.n	8006732 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006766:	4b68      	ldr	r3, [pc, #416]	; (8006908 <tcp_input+0x1ec>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	8998      	ldrh	r0, [r3, #12]
 800676c:	f7fc fff5 	bl	800375a <lwip_htons>
 8006770:	0a81      	lsrs	r1, r0, #10
 8006772:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006776:	2913      	cmp	r1, #19
 8006778:	d9db      	bls.n	8006732 <tcp_input+0x16>
 800677a:	b28b      	uxth	r3, r1
 800677c:	892a      	ldrh	r2, [r5, #8]
 800677e:	429a      	cmp	r2, r3
 8006780:	d3d7      	bcc.n	8006732 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006782:	f1a3 0214 	sub.w	r2, r3, #20
 8006786:	b292      	uxth	r2, r2
 8006788:	4864      	ldr	r0, [pc, #400]	; (800691c <tcp_input+0x200>)
 800678a:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800678c:	4864      	ldr	r0, [pc, #400]	; (8006920 <tcp_input+0x204>)
 800678e:	2400      	movs	r4, #0
 8006790:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 8006792:	8968      	ldrh	r0, [r5, #10]
 8006794:	4298      	cmp	r0, r3
 8006796:	d22e      	bcs.n	80067f6 <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006798:	682b      	ldr	r3, [r5, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d068      	beq.n	8006870 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800679e:	2114      	movs	r1, #20
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7fd fd67 	bl	8004274 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 80067a6:	896c      	ldrh	r4, [r5, #10]
 80067a8:	4b5e      	ldr	r3, [pc, #376]	; (8006924 <tcp_input+0x208>)
 80067aa:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80067ac:	4b5b      	ldr	r3, [pc, #364]	; (800691c <tcp_input+0x200>)
 80067ae:	881f      	ldrh	r7, [r3, #0]
 80067b0:	1b3e      	subs	r6, r7, r4
 80067b2:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 80067b4:	4621      	mov	r1, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7fd fd5c 	bl	8004274 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 80067bc:	6828      	ldr	r0, [r5, #0]
 80067be:	8943      	ldrh	r3, [r0, #10]
 80067c0:	42b3      	cmp	r3, r6
 80067c2:	d3b6      	bcc.n	8006732 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80067c4:	6842      	ldr	r2, [r0, #4]
 80067c6:	4b56      	ldr	r3, [pc, #344]	; (8006920 <tcp_input+0x204>)
 80067c8:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 80067ca:	4631      	mov	r1, r6
 80067cc:	f7fd fd52 	bl	8004274 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80067d0:	892b      	ldrh	r3, [r5, #8]
 80067d2:	441c      	add	r4, r3
 80067d4:	1be4      	subs	r4, r4, r7
 80067d6:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 80067d8:	896b      	ldrh	r3, [r5, #10]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d14f      	bne.n	800687e <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80067de:	682b      	ldr	r3, [r5, #0]
 80067e0:	892a      	ldrh	r2, [r5, #8]
 80067e2:	891b      	ldrh	r3, [r3, #8]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d00b      	beq.n	8006800 <tcp_input+0xe4>
 80067e8:	4b48      	ldr	r3, [pc, #288]	; (800690c <tcp_input+0x1f0>)
 80067ea:	22e0      	movs	r2, #224	; 0xe0
 80067ec:	494e      	ldr	r1, [pc, #312]	; (8006928 <tcp_input+0x20c>)
 80067ee:	4849      	ldr	r0, [pc, #292]	; (8006914 <tcp_input+0x1f8>)
 80067f0:	f003 ff26 	bl	800a640 <iprintf>
 80067f4:	e004      	b.n	8006800 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 80067f6:	4b4b      	ldr	r3, [pc, #300]	; (8006924 <tcp_input+0x208>)
 80067f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80067fa:	4628      	mov	r0, r5
 80067fc:	f7fd fd3a 	bl	8004274 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8006800:	4c41      	ldr	r4, [pc, #260]	; (8006908 <tcp_input+0x1ec>)
 8006802:	6826      	ldr	r6, [r4, #0]
 8006804:	8830      	ldrh	r0, [r6, #0]
 8006806:	f7fc ffa8 	bl	800375a <lwip_htons>
 800680a:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800680c:	6826      	ldr	r6, [r4, #0]
 800680e:	8870      	ldrh	r0, [r6, #2]
 8006810:	f7fc ffa3 	bl	800375a <lwip_htons>
 8006814:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006816:	6826      	ldr	r6, [r4, #0]
 8006818:	6870      	ldr	r0, [r6, #4]
 800681a:	f7fc ffa3 	bl	8003764 <lwip_htonl>
 800681e:	6070      	str	r0, [r6, #4]
 8006820:	4b42      	ldr	r3, [pc, #264]	; (800692c <tcp_input+0x210>)
 8006822:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8006824:	6826      	ldr	r6, [r4, #0]
 8006826:	68b0      	ldr	r0, [r6, #8]
 8006828:	f7fc ff9c 	bl	8003764 <lwip_htonl>
 800682c:	60b0      	str	r0, [r6, #8]
 800682e:	4b40      	ldr	r3, [pc, #256]	; (8006930 <tcp_input+0x214>)
 8006830:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006832:	6826      	ldr	r6, [r4, #0]
 8006834:	89f0      	ldrh	r0, [r6, #14]
 8006836:	f7fc ff90 	bl	800375a <lwip_htons>
 800683a:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800683c:	6823      	ldr	r3, [r4, #0]
 800683e:	8998      	ldrh	r0, [r3, #12]
 8006840:	f7fc ff8b 	bl	800375a <lwip_htons>
 8006844:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8006848:	4b3a      	ldr	r3, [pc, #232]	; (8006934 <tcp_input+0x218>)
 800684a:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800684c:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800684e:	f010 0f03 	tst.w	r0, #3
 8006852:	d11b      	bne.n	800688c <tcp_input+0x170>
  tcplen = p->tot_len;
 8006854:	4b38      	ldr	r3, [pc, #224]	; (8006938 <tcp_input+0x21c>)
 8006856:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006858:	4b38      	ldr	r3, [pc, #224]	; (800693c <tcp_input+0x220>)
 800685a:	681c      	ldr	r4, [r3, #0]
 800685c:	2c00      	cmp	r4, #0
 800685e:	f000 8563 	beq.w	8007328 <tcp_input+0xc0c>
  prev = NULL;
 8006862:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8006864:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800690c <tcp_input+0x1f0>
 8006868:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8006950 <tcp_input+0x234>
 800686c:	4f29      	ldr	r7, [pc, #164]	; (8006914 <tcp_input+0x1f8>)
 800686e:	e035      	b.n	80068dc <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006870:	4b26      	ldr	r3, [pc, #152]	; (800690c <tcp_input+0x1f0>)
 8006872:	22c2      	movs	r2, #194	; 0xc2
 8006874:	4932      	ldr	r1, [pc, #200]	; (8006940 <tcp_input+0x224>)
 8006876:	4827      	ldr	r0, [pc, #156]	; (8006914 <tcp_input+0x1f8>)
 8006878:	f003 fee2 	bl	800a640 <iprintf>
 800687c:	e78f      	b.n	800679e <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800687e:	4b23      	ldr	r3, [pc, #140]	; (800690c <tcp_input+0x1f0>)
 8006880:	22df      	movs	r2, #223	; 0xdf
 8006882:	4930      	ldr	r1, [pc, #192]	; (8006944 <tcp_input+0x228>)
 8006884:	4823      	ldr	r0, [pc, #140]	; (8006914 <tcp_input+0x1f8>)
 8006886:	f003 fedb 	bl	800a640 <iprintf>
 800688a:	e7a8      	b.n	80067de <tcp_input+0xc2>
    tcplen++;
 800688c:	1c53      	adds	r3, r2, #1
 800688e:	b29b      	uxth	r3, r3
 8006890:	4929      	ldr	r1, [pc, #164]	; (8006938 <tcp_input+0x21c>)
 8006892:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 8006894:	429a      	cmp	r2, r3
 8006896:	d9df      	bls.n	8006858 <tcp_input+0x13c>
 8006898:	e74b      	b.n	8006732 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800689a:	4643      	mov	r3, r8
 800689c:	22fb      	movs	r2, #251	; 0xfb
 800689e:	4649      	mov	r1, r9
 80068a0:	4638      	mov	r0, r7
 80068a2:	f003 fecd 	bl	800a640 <iprintf>
 80068a6:	e01c      	b.n	80068e2 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80068a8:	4643      	mov	r3, r8
 80068aa:	22fc      	movs	r2, #252	; 0xfc
 80068ac:	4926      	ldr	r1, [pc, #152]	; (8006948 <tcp_input+0x22c>)
 80068ae:	4638      	mov	r0, r7
 80068b0:	f003 fec6 	bl	800a640 <iprintf>
 80068b4:	e018      	b.n	80068e8 <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80068b6:	4643      	mov	r3, r8
 80068b8:	22fd      	movs	r2, #253	; 0xfd
 80068ba:	4924      	ldr	r1, [pc, #144]	; (800694c <tcp_input+0x230>)
 80068bc:	4638      	mov	r0, r7
 80068be:	f003 febf 	bl	800a640 <iprintf>
 80068c2:	e014      	b.n	80068ee <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 80068c4:	4b10      	ldr	r3, [pc, #64]	; (8006908 <tcp_input+0x1ec>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	8b21      	ldrh	r1, [r4, #24]
 80068ca:	881a      	ldrh	r2, [r3, #0]
 80068cc:	4291      	cmp	r1, r2
 80068ce:	d041      	beq.n	8006954 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068d0:	68e3      	ldr	r3, [r4, #12]
 80068d2:	4626      	mov	r6, r4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8527 	beq.w	8007328 <tcp_input+0xc0c>
 80068da:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80068dc:	7d23      	ldrb	r3, [r4, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0db      	beq.n	800689a <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80068e2:	7d23      	ldrb	r3, [r4, #20]
 80068e4:	2b0a      	cmp	r3, #10
 80068e6:	d0df      	beq.n	80068a8 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80068e8:	7d23      	ldrb	r3, [r4, #20]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d0e3      	beq.n	80068b6 <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80068ee:	7a22      	ldrb	r2, [r4, #8]
 80068f0:	2a00      	cmp	r2, #0
 80068f2:	d0e7      	beq.n	80068c4 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80068f4:	4b08      	ldr	r3, [pc, #32]	; (8006918 <tcp_input+0x1fc>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068fc:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	429a      	cmp	r2, r3
 8006902:	d0df      	beq.n	80068c4 <tcp_input+0x1a8>
 8006904:	e7e4      	b.n	80068d0 <tcp_input+0x1b4>
 8006906:	bf00      	nop
 8006908:	2000a9f0 	.word	0x2000a9f0
 800690c:	0800c93c 	.word	0x0800c93c
 8006910:	0800cb58 	.word	0x0800cb58
 8006914:	0800baa0 	.word	0x0800baa0
 8006918:	20005274 	.word	0x20005274
 800691c:	2000a9fc 	.word	0x2000a9fc
 8006920:	2000a9f8 	.word	0x2000a9f8
 8006924:	2000a9f4 	.word	0x2000a9f4
 8006928:	0800cb8c 	.word	0x0800cb8c
 800692c:	2000a9e4 	.word	0x2000a9e4
 8006930:	2000a9c0 	.word	0x2000a9c0
 8006934:	2000a9c4 	.word	0x2000a9c4
 8006938:	2000a9fe 	.word	0x2000a9fe
 800693c:	2000a9a4 	.word	0x2000a9a4
 8006940:	0800cb70 	.word	0x0800cb70
 8006944:	0800cb80 	.word	0x0800cb80
 8006948:	0800cbd4 	.word	0x0800cbd4
 800694c:	0800cc00 	.word	0x0800cc00
 8006950:	0800cbac 	.word	0x0800cbac
    if (pcb->remote_port == tcphdr->src &&
 8006954:	8ae2      	ldrh	r2, [r4, #22]
 8006956:	885b      	ldrh	r3, [r3, #2]
 8006958:	429a      	cmp	r2, r3
 800695a:	d1b9      	bne.n	80068d0 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800695c:	6862      	ldr	r2, [r4, #4]
 800695e:	4b8f      	ldr	r3, [pc, #572]	; (8006b9c <tcp_input+0x480>)
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d1b4      	bne.n	80068d0 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006966:	6822      	ldr	r2, [r4, #0]
 8006968:	4b8c      	ldr	r3, [pc, #560]	; (8006b9c <tcp_input+0x480>)
 800696a:	695b      	ldr	r3, [r3, #20]
 800696c:	429a      	cmp	r2, r3
 800696e:	d1af      	bne.n	80068d0 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006970:	68e3      	ldr	r3, [r4, #12]
 8006972:	42a3      	cmp	r3, r4
 8006974:	d04d      	beq.n	8006a12 <tcp_input+0x2f6>
      if (prev != NULL) {
 8006976:	b146      	cbz	r6, 800698a <tcp_input+0x26e>
        prev->next = pcb->next;
 8006978:	68e3      	ldr	r3, [r4, #12]
 800697a:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800697c:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <tcp_input+0x484>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 8006982:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006984:	68e3      	ldr	r3, [r4, #12]
 8006986:	42a3      	cmp	r3, r4
 8006988:	d04d      	beq.n	8006a26 <tcp_input+0x30a>
    inseg.next = NULL;
 800698a:	4a86      	ldr	r2, [pc, #536]	; (8006ba4 <tcp_input+0x488>)
 800698c:	2300      	movs	r3, #0
 800698e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 8006990:	8929      	ldrh	r1, [r5, #8]
 8006992:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 8006994:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 8006996:	4984      	ldr	r1, [pc, #528]	; (8006ba8 <tcp_input+0x48c>)
 8006998:	6809      	ldr	r1, [r1, #0]
 800699a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800699c:	4a83      	ldr	r2, [pc, #524]	; (8006bac <tcp_input+0x490>)
 800699e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 80069a0:	4a83      	ldr	r2, [pc, #524]	; (8006bb0 <tcp_input+0x494>)
 80069a2:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 80069a4:	4a83      	ldr	r2, [pc, #524]	; (8006bb4 <tcp_input+0x498>)
 80069a6:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 80069a8:	4b83      	ldr	r3, [pc, #524]	; (8006bb8 <tcp_input+0x49c>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f013 0f08 	tst.w	r3, #8
 80069b0:	f040 817c 	bne.w	8006cac <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 80069b4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80069b6:	b16b      	cbz	r3, 80069d4 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80069b8:	4620      	mov	r0, r4
 80069ba:	f7fe fdbb 	bl	8005534 <tcp_process_refused_data>
 80069be:	f110 0f0d 	cmn.w	r0, #13
 80069c2:	f000 8178 	beq.w	8006cb6 <tcp_input+0x59a>
 80069c6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80069c8:	b123      	cbz	r3, 80069d4 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80069ca:	4b7c      	ldr	r3, [pc, #496]	; (8006bbc <tcp_input+0x4a0>)
 80069cc:	881b      	ldrh	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f040 8171 	bne.w	8006cb6 <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 80069d4:	4b7a      	ldr	r3, [pc, #488]	; (8006bc0 <tcp_input+0x4a4>)
 80069d6:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 80069d8:	4b77      	ldr	r3, [pc, #476]	; (8006bb8 <tcp_input+0x49c>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	f013 0f04 	tst.w	r3, #4
 80069e0:	f000 81aa 	beq.w	8006d38 <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 80069e4:	7d21      	ldrb	r1, [r4, #20]
 80069e6:	2902      	cmp	r1, #2
 80069e8:	f000 816b 	beq.w	8006cc2 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 80069ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80069ee:	4b75      	ldr	r3, [pc, #468]	; (8006bc4 <tcp_input+0x4a8>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f000 818e 	beq.w	8006d14 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	f100 8167 	bmi.w	8006ccc <tcp_input+0x5b0>
 80069fe:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8006a00:	1a9b      	subs	r3, r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f300 8162 	bgt.w	8006ccc <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 8006a08:	8b63      	ldrh	r3, [r4, #26]
 8006a0a:	f043 0302 	orr.w	r3, r3, #2
 8006a0e:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 8006a10:	e15c      	b.n	8006ccc <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006a12:	4b6d      	ldr	r3, [pc, #436]	; (8006bc8 <tcp_input+0x4ac>)
 8006a14:	f240 120d 	movw	r2, #269	; 0x10d
 8006a18:	496c      	ldr	r1, [pc, #432]	; (8006bcc <tcp_input+0x4b0>)
 8006a1a:	486d      	ldr	r0, [pc, #436]	; (8006bd0 <tcp_input+0x4b4>)
 8006a1c:	f003 fe10 	bl	800a640 <iprintf>
      if (prev != NULL) {
 8006a20:	2e00      	cmp	r6, #0
 8006a22:	d1a9      	bne.n	8006978 <tcp_input+0x25c>
 8006a24:	e7ae      	b.n	8006984 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8006a26:	4b68      	ldr	r3, [pc, #416]	; (8006bc8 <tcp_input+0x4ac>)
 8006a28:	f240 1215 	movw	r2, #277	; 0x115
 8006a2c:	4969      	ldr	r1, [pc, #420]	; (8006bd4 <tcp_input+0x4b8>)
 8006a2e:	4868      	ldr	r0, [pc, #416]	; (8006bd0 <tcp_input+0x4b4>)
 8006a30:	f003 fe06 	bl	800a640 <iprintf>
 8006a34:	e7a9      	b.n	800698a <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006a36:	4643      	mov	r3, r8
 8006a38:	f240 121f 	movw	r2, #287	; 0x11f
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f003 fdfe 	bl	800a640 <iprintf>
 8006a44:	e00b      	b.n	8006a5e <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 8006a46:	4b58      	ldr	r3, [pc, #352]	; (8006ba8 <tcp_input+0x48c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	8819      	ldrh	r1, [r3, #0]
 8006a4c:	8b22      	ldrh	r2, [r4, #24]
 8006a4e:	428a      	cmp	r2, r1
 8006a50:	d011      	beq.n	8006a76 <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a52:	68e4      	ldr	r4, [r4, #12]
 8006a54:	2c00      	cmp	r4, #0
 8006a56:	d051      	beq.n	8006afc <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006a58:	7d23      	ldrb	r3, [r4, #20]
 8006a5a:	2b0a      	cmp	r3, #10
 8006a5c:	d1eb      	bne.n	8006a36 <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006a5e:	7a22      	ldrb	r2, [r4, #8]
 8006a60:	2a00      	cmp	r2, #0
 8006a62:	d0f0      	beq.n	8006a46 <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006a64:	4b4d      	ldr	r3, [pc, #308]	; (8006b9c <tcp_input+0x480>)
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a6c:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d0e8      	beq.n	8006a46 <tcp_input+0x32a>
 8006a74:	e7ed      	b.n	8006a52 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 8006a76:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 8006a78:	8ae3      	ldrh	r3, [r4, #22]
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	d1e9      	bne.n	8006a52 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 8006a7e:	6862      	ldr	r2, [r4, #4]
 8006a80:	4b46      	ldr	r3, [pc, #280]	; (8006b9c <tcp_input+0x480>)
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d1e4      	bne.n	8006a52 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006a88:	6822      	ldr	r2, [r4, #0]
 8006a8a:	4b44      	ldr	r3, [pc, #272]	; (8006b9c <tcp_input+0x480>)
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d1df      	bne.n	8006a52 <tcp_input+0x336>
  if (flags & TCP_RST) {
 8006a92:	4b49      	ldr	r3, [pc, #292]	; (8006bb8 <tcp_input+0x49c>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f013 0f04 	tst.w	r3, #4
 8006a9a:	d10e      	bne.n	8006aba <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 8006a9c:	f013 0f02 	tst.w	r3, #2
 8006aa0:	d01d      	beq.n	8006ade <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006aa2:	4b48      	ldr	r3, [pc, #288]	; (8006bc4 <tcp_input+0x4a8>)
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	d403      	bmi.n	8006ab4 <tcp_input+0x398>
 8006aac:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8006aae:	1b9b      	subs	r3, r3, r6
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	dd06      	ble.n	8006ac2 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 8006ab4:	4b41      	ldr	r3, [pc, #260]	; (8006bbc <tcp_input+0x4a0>)
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b9c3      	cbnz	r3, 8006aec <tcp_input+0x3d0>
        pbuf_free(p);
 8006aba:	4628      	mov	r0, r5
 8006abc:	f7fd fc1a 	bl	80042f4 <pbuf_free>
        return;
 8006ac0:	e63a      	b.n	8006738 <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ac2:	4b45      	ldr	r3, [pc, #276]	; (8006bd8 <tcp_input+0x4bc>)
 8006ac4:	4e3d      	ldr	r6, [pc, #244]	; (8006bbc <tcp_input+0x4a0>)
 8006ac6:	8836      	ldrh	r6, [r6, #0]
 8006ac8:	9102      	str	r1, [sp, #8]
 8006aca:	9001      	str	r0, [sp, #4]
 8006acc:	1f19      	subs	r1, r3, #4
 8006ace:	9100      	str	r1, [sp, #0]
 8006ad0:	4432      	add	r2, r6
 8006ad2:	4942      	ldr	r1, [pc, #264]	; (8006bdc <tcp_input+0x4c0>)
 8006ad4:	6809      	ldr	r1, [r1, #0]
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	f001 fbd8 	bl	800828c <tcp_rst>
      return;
 8006adc:	e7ed      	b.n	8006aba <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 8006ade:	f013 0f01 	tst.w	r3, #1
 8006ae2:	d0e7      	beq.n	8006ab4 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 8006ae4:	4b3e      	ldr	r3, [pc, #248]	; (8006be0 <tcp_input+0x4c4>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6223      	str	r3, [r4, #32]
 8006aea:	e7e3      	b.n	8006ab4 <tcp_input+0x398>
    tcp_ack_now(pcb);
 8006aec:	8b63      	ldrh	r3, [r4, #26]
 8006aee:	f043 0302 	orr.w	r3, r3, #2
 8006af2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8006af4:	4620      	mov	r0, r4
 8006af6:	f001 fc4b 	bl	8008390 <tcp_output>
 8006afa:	e7de      	b.n	8006aba <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006afc:	4b39      	ldr	r3, [pc, #228]	; (8006be4 <tcp_input+0x4c8>)
 8006afe:	f8d3 c000 	ldr.w	ip, [r3]
 8006b02:	f1bc 0f00 	cmp.w	ip, #0
 8006b06:	f000 8402 	beq.w	800730e <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006b0a:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <tcp_input+0x480>)
 8006b0c:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 8006b0e:	4a26      	ldr	r2, [pc, #152]	; (8006ba8 <tcp_input+0x48c>)
 8006b10:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006b12:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b14:	4664      	mov	r4, ip
    prev = NULL;
 8006b16:	2100      	movs	r1, #0
 8006b18:	e009      	b.n	8006b2e <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 8006b1a:	8ae2      	ldrh	r2, [r4, #22]
 8006b1c:	8843      	ldrh	r3, [r0, #2]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d00f      	beq.n	8006b42 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006b22:	68e3      	ldr	r3, [r4, #12]
 8006b24:	4621      	mov	r1, r4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 83f1 	beq.w	800730e <tcp_input+0xbf2>
 8006b2c:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006b2e:	7a22      	ldrb	r2, [r4, #8]
 8006b30:	2a00      	cmp	r2, #0
 8006b32:	d0f2      	beq.n	8006b1a <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8006b34:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8006b38:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d0ec      	beq.n	8006b1a <tcp_input+0x3fe>
 8006b40:	e7ef      	b.n	8006b22 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	42bb      	cmp	r3, r7
 8006b46:	d001      	beq.n	8006b4c <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ea      	bne.n	8006b22 <tcp_input+0x406>
      if (prev != NULL) {
 8006b4c:	b129      	cbz	r1, 8006b5a <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006b4e:	68e3      	ldr	r3, [r4, #12]
 8006b50:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006b52:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006b56:	4b23      	ldr	r3, [pc, #140]	; (8006be4 <tcp_input+0x4c8>)
 8006b58:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 8006b5a:	4b17      	ldr	r3, [pc, #92]	; (8006bb8 <tcp_input+0x49c>)
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	f013 0f04 	tst.w	r3, #4
 8006b62:	d105      	bne.n	8006b70 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 8006b64:	f013 0f10 	tst.w	r3, #16
 8006b68:	d106      	bne.n	8006b78 <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 8006b6a:	f013 0f02 	tst.w	r3, #2
 8006b6e:	d13b      	bne.n	8006be8 <tcp_input+0x4cc>
      pbuf_free(p);
 8006b70:	4628      	mov	r0, r5
 8006b72:	f7fd fbbf 	bl	80042f4 <pbuf_free>
      return;
 8006b76:	e5df      	b.n	8006738 <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006b78:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <tcp_input+0x4bc>)
 8006b7a:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <tcp_input+0x4a0>)
 8006b7c:	8811      	ldrh	r1, [r2, #0]
 8006b7e:	4a11      	ldr	r2, [pc, #68]	; (8006bc4 <tcp_input+0x4a8>)
 8006b80:	6812      	ldr	r2, [r2, #0]
 8006b82:	8806      	ldrh	r6, [r0, #0]
 8006b84:	9602      	str	r6, [sp, #8]
 8006b86:	8840      	ldrh	r0, [r0, #2]
 8006b88:	9001      	str	r0, [sp, #4]
 8006b8a:	1f18      	subs	r0, r3, #4
 8006b8c:	9000      	str	r0, [sp, #0]
 8006b8e:	440a      	add	r2, r1
 8006b90:	4912      	ldr	r1, [pc, #72]	; (8006bdc <tcp_input+0x4c0>)
 8006b92:	6809      	ldr	r1, [r1, #0]
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 fb79 	bl	800828c <tcp_rst>
 8006b9a:	e7e9      	b.n	8006b70 <tcp_input+0x454>
 8006b9c:	20005274 	.word	0x20005274
 8006ba0:	2000a9a4 	.word	0x2000a9a4
 8006ba4:	2000a9c8 	.word	0x2000a9c8
 8006ba8:	2000a9f0 	.word	0x2000a9f0
 8006bac:	2000a9dc 	.word	0x2000a9dc
 8006bb0:	2000a9e0 	.word	0x2000a9e0
 8006bb4:	2000a9d8 	.word	0x2000a9d8
 8006bb8:	2000a9c4 	.word	0x2000a9c4
 8006bbc:	2000a9fe 	.word	0x2000a9fe
 8006bc0:	2000a9e8 	.word	0x2000a9e8
 8006bc4:	2000a9e4 	.word	0x2000a9e4
 8006bc8:	0800c93c 	.word	0x0800c93c
 8006bcc:	0800cc28 	.word	0x0800cc28
 8006bd0:	0800baa0 	.word	0x0800baa0
 8006bd4:	0800cc54 	.word	0x0800cc54
 8006bd8:	20005288 	.word	0x20005288
 8006bdc:	2000a9c0 	.word	0x2000a9c0
 8006be0:	2000a9b4 	.word	0x2000a9b4
 8006be4:	2000a9b0 	.word	0x2000a9b0
    npcb = tcp_alloc(pcb->prio);
 8006be8:	7d60      	ldrb	r0, [r4, #21]
 8006bea:	f7fe faed 	bl	80051c8 <tcp_alloc>
    if (npcb == NULL) {
 8006bee:	4606      	mov	r6, r0
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d04c      	beq.n	8006c8e <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006bf4:	4ba5      	ldr	r3, [pc, #660]	; (8006e8c <tcp_input+0x770>)
 8006bf6:	695a      	ldr	r2, [r3, #20]
 8006bf8:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8006bfe:	8ae3      	ldrh	r3, [r4, #22]
 8006c00:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8006c02:	4fa3      	ldr	r7, [pc, #652]	; (8006e90 <tcp_input+0x774>)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8006c0e:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8006ecc <tcp_input+0x7b0>
 8006c12:	f8d8 3000 	ldr.w	r3, [r8]
 8006c16:	3301      	adds	r3, #1
 8006c18:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006c1a:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006c1c:	f7fe f84c 	bl	8004cb8 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 8006c20:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 8006c22:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 8006c24:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006c26:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006c28:	f8d8 3000 	ldr.w	r3, [r8]
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 8006c34:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006c36:	7a63      	ldrb	r3, [r4, #9]
 8006c38:	f003 030c 	and.w	r3, r3, #12
 8006c3c:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 8006c3e:	7a23      	ldrb	r3, [r4, #8]
 8006c40:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 8006c42:	4b94      	ldr	r3, [pc, #592]	; (8006e94 <tcp_input+0x778>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	60f2      	str	r2, [r6, #12]
 8006c48:	601e      	str	r6, [r3, #0]
 8006c4a:	f001 feb1 	bl	80089b0 <tcp_timer_needed>
 8006c4e:	4b92      	ldr	r3, [pc, #584]	; (8006e98 <tcp_input+0x77c>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006c54:	4630      	mov	r0, r6
 8006c56:	f7fe ff97 	bl	8005b88 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	89db      	ldrh	r3, [r3, #14]
 8006c5e:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006c62:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006c66:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 8006c68:	1d34      	adds	r4, r6, #4
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f002 fd7a 	bl	8009764 <ip4_route>
 8006c70:	4601      	mov	r1, r0
 8006c72:	4622      	mov	r2, r4
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7fe f83b 	bl	8004cf0 <tcp_eff_send_mss_netif>
 8006c7a:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006c7c:	2112      	movs	r1, #18
 8006c7e:	4630      	mov	r0, r6
 8006c80:	f001 f956 	bl	8007f30 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8006c84:	b968      	cbnz	r0, 8006ca2 <tcp_input+0x586>
    tcp_output(npcb);
 8006c86:	4630      	mov	r0, r6
 8006c88:	f001 fb82 	bl	8008390 <tcp_output>
 8006c8c:	e770      	b.n	8006b70 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006c8e:	69a3      	ldr	r3, [r4, #24]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f43f af6d 	beq.w	8006b70 <tcp_input+0x454>
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	6920      	ldr	r0, [r4, #16]
 8006c9e:	4798      	blx	r3
 8006ca0:	e766      	b.n	8006b70 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	4630      	mov	r0, r6
 8006ca6:	f7fe f985 	bl	8004fb4 <tcp_abandon>
      return;
 8006caa:	e761      	b.n	8006b70 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 8006cac:	7b6b      	ldrb	r3, [r5, #13]
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	736b      	strb	r3, [r5, #13]
 8006cb4:	e67e      	b.n	80069b4 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 8006cb6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006cb8:	b9e3      	cbnz	r3, 8006cf4 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f001 fb2e 	bl	800831c <tcp_send_empty_ack>
 8006cc0:	e018      	b.n	8006cf4 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 8006cc2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006cc4:	4b75      	ldr	r3, [pc, #468]	; (8006e9c <tcp_input+0x780>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d02b      	beq.n	8006d24 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 8006ccc:	4b74      	ldr	r3, [pc, #464]	; (8006ea0 <tcp_input+0x784>)
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	f013 0f08 	tst.w	r3, #8
 8006cd4:	f000 8295 	beq.w	8007202 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006cd8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006cdc:	b11b      	cbz	r3, 8006ce6 <tcp_input+0x5ca>
 8006cde:	f06f 010d 	mvn.w	r1, #13
 8006ce2:	6920      	ldr	r0, [r4, #16]
 8006ce4:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	486a      	ldr	r0, [pc, #424]	; (8006e94 <tcp_input+0x778>)
 8006cea:	f7fe f8fb 	bl	8004ee4 <tcp_pcb_remove>
        tcp_free(pcb);
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7fd fea2 	bl	8004a38 <tcp_free>
    tcp_input_pcb = NULL;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	4a6b      	ldr	r2, [pc, #428]	; (8006ea4 <tcp_input+0x788>)
 8006cf8:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 8006cfa:	4a6b      	ldr	r2, [pc, #428]	; (8006ea8 <tcp_input+0x78c>)
 8006cfc:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 8006cfe:	4b6b      	ldr	r3, [pc, #428]	; (8006eac <tcp_input+0x790>)
 8006d00:	6858      	ldr	r0, [r3, #4]
 8006d02:	2800      	cmp	r0, #0
 8006d04:	f43f ad18 	beq.w	8006738 <tcp_input+0x1c>
      pbuf_free(inseg.p);
 8006d08:	f7fd faf4 	bl	80042f4 <pbuf_free>
      inseg.p = NULL;
 8006d0c:	4b67      	ldr	r3, [pc, #412]	; (8006eac <tcp_input+0x790>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	e511      	b.n	8006738 <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8006d14:	b931      	cbnz	r1, 8006d24 <tcp_input+0x608>
 8006d16:	4b66      	ldr	r3, [pc, #408]	; (8006eb0 <tcp_input+0x794>)
 8006d18:	f44f 724e 	mov.w	r2, #824	; 0x338
 8006d1c:	4965      	ldr	r1, [pc, #404]	; (8006eb4 <tcp_input+0x798>)
 8006d1e:	4866      	ldr	r0, [pc, #408]	; (8006eb8 <tcp_input+0x79c>)
 8006d20:	f003 fc8e 	bl	800a640 <iprintf>
      recv_flags |= TF_RESET;
 8006d24:	4a5e      	ldr	r2, [pc, #376]	; (8006ea0 <tcp_input+0x784>)
 8006d26:	7813      	ldrb	r3, [r2, #0]
 8006d28:	f043 0308 	orr.w	r3, r3, #8
 8006d2c:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8006d2e:	8b63      	ldrh	r3, [r4, #26]
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 8006d36:	e7c9      	b.n	8006ccc <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8006d38:	f013 0f02 	tst.w	r3, #2
 8006d3c:	d004      	beq.n	8006d48 <tcp_input+0x62c>
 8006d3e:	7d23      	ldrb	r3, [r4, #20]
 8006d40:	3b02      	subs	r3, #2
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d81c      	bhi.n	8006d82 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8006d48:	8b63      	ldrh	r3, [r4, #26]
 8006d4a:	f013 0f10 	tst.w	r3, #16
 8006d4e:	d102      	bne.n	8006d56 <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 8006d50:	4b5a      	ldr	r3, [pc, #360]	; (8006ebc <tcp_input+0x7a0>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 8006d5c:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 8006d60:	4620      	mov	r0, r4
 8006d62:	f7fe ff11 	bl	8005b88 <tcp_parseopt>
  switch (pcb->state) {
 8006d66:	7d23      	ldrb	r3, [r4, #20]
 8006d68:	3b02      	subs	r3, #2
 8006d6a:	2b07      	cmp	r3, #7
 8006d6c:	d8ae      	bhi.n	8006ccc <tcp_input+0x5b0>
 8006d6e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006d72:	000d      	.short	0x000d
 8006d74:	014f00d1 	.word	0x014f00d1
 8006d78:	01b1015f 	.word	0x01b1015f
 8006d7c:	01fd014f 	.word	0x01fd014f
 8006d80:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 8006d82:	8b63      	ldrh	r3, [r4, #26]
 8006d84:	f043 0302 	orr.w	r3, r3, #2
 8006d88:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8006d8a:	e79f      	b.n	8006ccc <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8006d8c:	4b4c      	ldr	r3, [pc, #304]	; (8006ec0 <tcp_input+0x7a4>)
 8006d8e:	781a      	ldrb	r2, [r3, #0]
 8006d90:	f002 0312 	and.w	r3, r2, #18
 8006d94:	2b12      	cmp	r3, #18
 8006d96:	d020      	beq.n	8006dda <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 8006d98:	f012 0f10 	tst.w	r2, #16
 8006d9c:	d096      	beq.n	8006ccc <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006d9e:	4b3c      	ldr	r3, [pc, #240]	; (8006e90 <tcp_input+0x774>)
 8006da0:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006da2:	4b48      	ldr	r3, [pc, #288]	; (8006ec4 <tcp_input+0x7a8>)
 8006da4:	4a48      	ldr	r2, [pc, #288]	; (8006ec8 <tcp_input+0x7ac>)
 8006da6:	8810      	ldrh	r0, [r2, #0]
 8006da8:	4a48      	ldr	r2, [pc, #288]	; (8006ecc <tcp_input+0x7b0>)
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	880d      	ldrh	r5, [r1, #0]
 8006dae:	9502      	str	r5, [sp, #8]
 8006db0:	8849      	ldrh	r1, [r1, #2]
 8006db2:	9101      	str	r1, [sp, #4]
 8006db4:	1f19      	subs	r1, r3, #4
 8006db6:	9100      	str	r1, [sp, #0]
 8006db8:	4402      	add	r2, r0
 8006dba:	4938      	ldr	r1, [pc, #224]	; (8006e9c <tcp_input+0x780>)
 8006dbc:	6809      	ldr	r1, [r1, #0]
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f001 fa64 	bl	800828c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8006dc4:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006dc8:	2b05      	cmp	r3, #5
 8006dca:	f63f af7f 	bhi.w	8006ccc <tcp_input+0x5b0>
          pcb->rtime = 0;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8006dd2:	4620      	mov	r0, r4
 8006dd4:	f001 fcc4 	bl	8008760 <tcp_rexmit_rto>
 8006dd8:	e778      	b.n	8006ccc <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 8006dda:	4b30      	ldr	r3, [pc, #192]	; (8006e9c <tcp_input+0x780>)
 8006ddc:	6819      	ldr	r1, [r3, #0]
 8006dde:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006de0:	3301      	adds	r3, #1
 8006de2:	428b      	cmp	r3, r1
 8006de4:	d1d8      	bne.n	8006d98 <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <tcp_input+0x7b0>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8006dee:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 8006df0:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8006df2:	4a27      	ldr	r2, [pc, #156]	; (8006e90 <tcp_input+0x774>)
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	89d2      	ldrh	r2, [r2, #14]
 8006df8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8006dfc:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8006e00:	3b01      	subs	r3, #1
 8006e02:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8006e04:	2304      	movs	r3, #4
 8006e06:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8006e08:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 8006e0a:	18e5      	adds	r5, r4, r3
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f002 fca9 	bl	8009764 <ip4_route>
 8006e12:	4601      	mov	r1, r0
 8006e14:	462a      	mov	r2, r5
 8006e16:	4630      	mov	r0, r6
 8006e18:	f7fd ff6a 	bl	8004cf0 <tcp_eff_send_mss_netif>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006e20:	0041      	lsls	r1, r0, #1
 8006e22:	f241 121c 	movw	r2, #4380	; 0x111c
 8006e26:	428a      	cmp	r2, r1
 8006e28:	bf38      	it	cc
 8006e2a:	460a      	movcc	r2, r1
 8006e2c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 8006e30:	d94e      	bls.n	8006ed0 <tcp_input+0x7b4>
 8006e32:	0083      	lsls	r3, r0, #2
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006e3a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d04f      	beq.n	8006ee2 <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 8006e42:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8006e46:	3b01      	subs	r3, #1
 8006e48:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 8006e4c:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 8006e4e:	2d00      	cmp	r5, #0
 8006e50:	d04f      	beq.n	8006ef2 <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 8006e52:	682b      	ldr	r3, [r5, #0]
 8006e54:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 8006e56:	4628      	mov	r0, r5
 8006e58:	f7fd fe7c 	bl	8004b54 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 8006e5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d054      	beq.n	8006f0c <tcp_input+0x7f0>
          pcb->rtime = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 8006e66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8006e6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8006e6e:	b13b      	cbz	r3, 8006e80 <tcp_input+0x764>
 8006e70:	2200      	movs	r2, #0
 8006e72:	4621      	mov	r1, r4
 8006e74:	6920      	ldr	r0, [r4, #16]
 8006e76:	4798      	blx	r3
        if (err == ERR_ABRT) {
 8006e78:	f110 0f0d 	cmn.w	r0, #13
 8006e7c:	f43f af3a 	beq.w	8006cf4 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 8006e80:	8b63      	ldrh	r3, [r4, #26]
 8006e82:	f043 0302 	orr.w	r3, r3, #2
 8006e86:	8363      	strh	r3, [r4, #26]
 8006e88:	e720      	b.n	8006ccc <tcp_input+0x5b0>
 8006e8a:	bf00      	nop
 8006e8c:	20005274 	.word	0x20005274
 8006e90:	2000a9f0 	.word	0x2000a9f0
 8006e94:	2000a9a4 	.word	0x2000a9a4
 8006e98:	2000a9a8 	.word	0x2000a9a8
 8006e9c:	2000a9c0 	.word	0x2000a9c0
 8006ea0:	2000a9e0 	.word	0x2000a9e0
 8006ea4:	2000a9e8 	.word	0x2000a9e8
 8006ea8:	2000a9dc 	.word	0x2000a9dc
 8006eac:	2000a9c8 	.word	0x2000a9c8
 8006eb0:	0800c93c 	.word	0x0800c93c
 8006eb4:	0800ccb0 	.word	0x0800ccb0
 8006eb8:	0800baa0 	.word	0x0800baa0
 8006ebc:	2000a9b4 	.word	0x2000a9b4
 8006ec0:	2000a9c4 	.word	0x2000a9c4
 8006ec4:	20005288 	.word	0x20005288
 8006ec8:	2000a9fe 	.word	0x2000a9fe
 8006ecc:	2000a9e4 	.word	0x2000a9e4
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006ed0:	f241 121c 	movw	r2, #4380	; 0x111c
 8006ed4:	4291      	cmp	r1, r2
 8006ed6:	bf86      	itte	hi
 8006ed8:	0043      	lslhi	r3, r0, #1
 8006eda:	b29b      	uxthhi	r3, r3
 8006edc:	f241 131c 	movwls	r3, #4380	; 0x111c
 8006ee0:	e7a9      	b.n	8006e36 <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8006ee2:	4b92      	ldr	r3, [pc, #584]	; (800712c <tcp_input+0xa10>)
 8006ee4:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8006ee8:	4991      	ldr	r1, [pc, #580]	; (8007130 <tcp_input+0xa14>)
 8006eea:	4892      	ldr	r0, [pc, #584]	; (8007134 <tcp_input+0xa18>)
 8006eec:	f003 fba8 	bl	800a640 <iprintf>
 8006ef0:	e7a7      	b.n	8006e42 <tcp_input+0x726>
          rseg = pcb->unsent;
 8006ef2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006ef4:	b115      	cbz	r5, 8006efc <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	66e3      	str	r3, [r4, #108]	; 0x6c
 8006efa:	e7ac      	b.n	8006e56 <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8006efc:	4b8b      	ldr	r3, [pc, #556]	; (800712c <tcp_input+0xa10>)
 8006efe:	f44f 725d 	mov.w	r2, #884	; 0x374
 8006f02:	498d      	ldr	r1, [pc, #564]	; (8007138 <tcp_input+0xa1c>)
 8006f04:	488b      	ldr	r0, [pc, #556]	; (8007134 <tcp_input+0xa18>)
 8006f06:	f003 fb9b 	bl	800a640 <iprintf>
 8006f0a:	e7f4      	b.n	8006ef6 <tcp_input+0x7da>
          pcb->rtime = -1;
 8006f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f10:	8623      	strh	r3, [r4, #48]	; 0x30
 8006f12:	e7aa      	b.n	8006e6a <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 8006f14:	4b89      	ldr	r3, [pc, #548]	; (800713c <tcp_input+0xa20>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f013 0f10 	tst.w	r3, #16
 8006f1c:	d069      	beq.n	8006ff2 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8006f1e:	4b88      	ldr	r3, [pc, #544]	; (8007140 <tcp_input+0xa24>)
 8006f20:	6819      	ldr	r1, [r3, #0]
 8006f22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006f24:	43db      	mvns	r3, r3
 8006f26:	42cb      	cmn	r3, r1
 8006f28:	d403      	bmi.n	8006f32 <tcp_input+0x816>
 8006f2a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f2c:	1acb      	subs	r3, r1, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dd11      	ble.n	8006f56 <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006f32:	4b84      	ldr	r3, [pc, #528]	; (8007144 <tcp_input+0xa28>)
 8006f34:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f36:	4b84      	ldr	r3, [pc, #528]	; (8007148 <tcp_input+0xa2c>)
 8006f38:	4a84      	ldr	r2, [pc, #528]	; (800714c <tcp_input+0xa30>)
 8006f3a:	8815      	ldrh	r5, [r2, #0]
 8006f3c:	4a84      	ldr	r2, [pc, #528]	; (8007150 <tcp_input+0xa34>)
 8006f3e:	6812      	ldr	r2, [r2, #0]
 8006f40:	8806      	ldrh	r6, [r0, #0]
 8006f42:	9602      	str	r6, [sp, #8]
 8006f44:	8840      	ldrh	r0, [r0, #2]
 8006f46:	9001      	str	r0, [sp, #4]
 8006f48:	1f18      	subs	r0, r3, #4
 8006f4a:	9000      	str	r0, [sp, #0]
 8006f4c:	442a      	add	r2, r5
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f001 f99c 	bl	800828c <tcp_rst>
 8006f54:	e6ba      	b.n	8006ccc <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 8006f56:	2304      	movs	r3, #4
 8006f58:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 8006f5a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d03b      	beq.n	8006fd8 <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	b34b      	cbz	r3, 8006fb8 <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006f64:	2200      	movs	r2, #0
 8006f66:	4621      	mov	r1, r4
 8006f68:	6920      	ldr	r0, [r4, #16]
 8006f6a:	4798      	blx	r3
          if (err != ERR_OK) {
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d12f      	bne.n	8006fd0 <tcp_input+0x8b4>
          tcp_receive(pcb);
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7fe ff47 	bl	8005e04 <tcp_receive>
          if (recv_acked != 0) {
 8006f76:	4b77      	ldr	r3, [pc, #476]	; (8007154 <tcp_input+0xa38>)
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b113      	cbz	r3, 8006f82 <tcp_input+0x866>
            recv_acked--;
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	4a75      	ldr	r2, [pc, #468]	; (8007154 <tcp_input+0xa38>)
 8006f80:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006f82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8006f84:	0059      	lsls	r1, r3, #1
 8006f86:	f241 121c 	movw	r2, #4380	; 0x111c
 8006f8a:	428a      	cmp	r2, r1
 8006f8c:	bf38      	it	cc
 8006f8e:	460a      	movcc	r2, r1
 8006f90:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 8006f94:	d924      	bls.n	8006fe0 <tcp_input+0x8c4>
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 8006f9e:	4b6e      	ldr	r3, [pc, #440]	; (8007158 <tcp_input+0xa3c>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f013 0f20 	tst.w	r3, #32
 8006fa6:	f43f ae91 	beq.w	8006ccc <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 8006faa:	8b63      	ldrh	r3, [r4, #26]
 8006fac:	f043 0302 	orr.w	r3, r3, #2
 8006fb0:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 8006fb2:	2307      	movs	r3, #7
 8006fb4:	7523      	strb	r3, [r4, #20]
 8006fb6:	e689      	b.n	8006ccc <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8006fb8:	4b5c      	ldr	r3, [pc, #368]	; (800712c <tcp_input+0xa10>)
 8006fba:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8006fbe:	4967      	ldr	r1, [pc, #412]	; (800715c <tcp_input+0xa40>)
 8006fc0:	485c      	ldr	r0, [pc, #368]	; (8007134 <tcp_input+0xa18>)
 8006fc2:	f003 fb3d 	bl	800a640 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8006fc6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d1ca      	bne.n	8006f64 <tcp_input+0x848>
 8006fce:	e003      	b.n	8006fd8 <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 8006fd0:	f110 0f0d 	cmn.w	r0, #13
 8006fd4:	f43f ae8e 	beq.w	8006cf4 <tcp_input+0x5d8>
              tcp_abort(pcb);
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f7fe f871 	bl	80050c0 <tcp_abort>
 8006fde:	e689      	b.n	8006cf4 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8006fe0:	f241 121c 	movw	r2, #4380	; 0x111c
 8006fe4:	4291      	cmp	r1, r2
 8006fe6:	bf86      	itte	hi
 8006fe8:	005b      	lslhi	r3, r3, #1
 8006fea:	b29b      	uxthhi	r3, r3
 8006fec:	f241 131c 	movwls	r3, #4380	; 0x111c
 8006ff0:	e7d3      	b.n	8006f9a <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8006ff2:	f013 0f02 	tst.w	r3, #2
 8006ff6:	f43f ae69 	beq.w	8006ccc <tcp_input+0x5b0>
 8006ffa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	4a54      	ldr	r2, [pc, #336]	; (8007150 <tcp_input+0xa34>)
 8007000:	6812      	ldr	r2, [r2, #0]
 8007002:	4293      	cmp	r3, r2
 8007004:	f47f ae62 	bne.w	8006ccc <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 8007008:	4620      	mov	r0, r4
 800700a:	f001 f8bb 	bl	8008184 <tcp_rexmit>
 800700e:	e65d      	b.n	8006ccc <tcp_input+0x5b0>
      tcp_receive(pcb);
 8007010:	4620      	mov	r0, r4
 8007012:	f7fe fef7 	bl	8005e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007016:	4b50      	ldr	r3, [pc, #320]	; (8007158 <tcp_input+0xa3c>)
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	f013 0f20 	tst.w	r3, #32
 800701e:	f43f ae55 	beq.w	8006ccc <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 8007022:	8b63      	ldrh	r3, [r4, #26]
 8007024:	f043 0302 	orr.w	r3, r3, #2
 8007028:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800702a:	2307      	movs	r3, #7
 800702c:	7523      	strb	r3, [r4, #20]
 800702e:	e64d      	b.n	8006ccc <tcp_input+0x5b0>
      tcp_receive(pcb);
 8007030:	4620      	mov	r0, r4
 8007032:	f7fe fee7 	bl	8005e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007036:	4b48      	ldr	r3, [pc, #288]	; (8007158 <tcp_input+0xa3c>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	f013 0f20 	tst.w	r3, #32
 800703e:	d036      	beq.n	80070ae <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007040:	4b3e      	ldr	r3, [pc, #248]	; (800713c <tcp_input+0xa20>)
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	f013 0f10 	tst.w	r3, #16
 8007048:	d004      	beq.n	8007054 <tcp_input+0x938>
 800704a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800704c:	4b3c      	ldr	r3, [pc, #240]	; (8007140 <tcp_input+0xa24>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d006      	beq.n	8007062 <tcp_input+0x946>
          tcp_ack_now(pcb);
 8007054:	8b63      	ldrh	r3, [r4, #26]
 8007056:	f043 0302 	orr.w	r3, r3, #2
 800705a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800705c:	2308      	movs	r3, #8
 800705e:	7523      	strb	r3, [r4, #20]
 8007060:	e634      	b.n	8006ccc <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007062:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1f5      	bne.n	8007054 <tcp_input+0x938>
          tcp_ack_now(pcb);
 8007068:	8b63      	ldrh	r3, [r4, #26]
 800706a:	f043 0302 	orr.w	r3, r3, #2
 800706e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 8007070:	4620      	mov	r0, r4
 8007072:	f7fd ff07 	bl	8004e84 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8007076:	4b3a      	ldr	r3, [pc, #232]	; (8007160 <tcp_input+0xa44>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	42a3      	cmp	r3, r4
 800707c:	d005      	beq.n	800708a <tcp_input+0x96e>
 800707e:	b153      	cbz	r3, 8007096 <tcp_input+0x97a>
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	42a2      	cmp	r2, r4
 8007084:	d005      	beq.n	8007092 <tcp_input+0x976>
 8007086:	4613      	mov	r3, r2
 8007088:	e7f9      	b.n	800707e <tcp_input+0x962>
 800708a:	68e2      	ldr	r2, [r4, #12]
 800708c:	4b34      	ldr	r3, [pc, #208]	; (8007160 <tcp_input+0xa44>)
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e001      	b.n	8007096 <tcp_input+0x97a>
 8007092:	68e2      	ldr	r2, [r4, #12]
 8007094:	60da      	str	r2, [r3, #12]
 8007096:	4b33      	ldr	r3, [pc, #204]	; (8007164 <tcp_input+0xa48>)
 8007098:	2201      	movs	r2, #1
 800709a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800709c:	230a      	movs	r3, #10
 800709e:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80070a0:	4b31      	ldr	r3, [pc, #196]	; (8007168 <tcp_input+0xa4c>)
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	60e2      	str	r2, [r4, #12]
 80070a6:	601c      	str	r4, [r3, #0]
 80070a8:	f001 fc82 	bl	80089b0 <tcp_timer_needed>
 80070ac:	e60e      	b.n	8006ccc <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80070ae:	4b23      	ldr	r3, [pc, #140]	; (800713c <tcp_input+0xa20>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	f013 0f10 	tst.w	r3, #16
 80070b6:	f43f ae09 	beq.w	8006ccc <tcp_input+0x5b0>
 80070ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80070bc:	4b20      	ldr	r3, [pc, #128]	; (8007140 <tcp_input+0xa24>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	f47f ae03 	bne.w	8006ccc <tcp_input+0x5b0>
 80070c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	f47f adff 	bne.w	8006ccc <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 80070ce:	2306      	movs	r3, #6
 80070d0:	7523      	strb	r3, [r4, #20]
 80070d2:	e5fb      	b.n	8006ccc <tcp_input+0x5b0>
      tcp_receive(pcb);
 80070d4:	4620      	mov	r0, r4
 80070d6:	f7fe fe95 	bl	8005e04 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80070da:	4b1f      	ldr	r3, [pc, #124]	; (8007158 <tcp_input+0xa3c>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	f013 0f20 	tst.w	r3, #32
 80070e2:	f43f adf3 	beq.w	8006ccc <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 80070e6:	8b63      	ldrh	r3, [r4, #26]
 80070e8:	f043 0302 	orr.w	r3, r3, #2
 80070ec:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80070ee:	4620      	mov	r0, r4
 80070f0:	f7fd fec8 	bl	8004e84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80070f4:	4b1a      	ldr	r3, [pc, #104]	; (8007160 <tcp_input+0xa44>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d005      	beq.n	8007108 <tcp_input+0x9ec>
 80070fc:	b153      	cbz	r3, 8007114 <tcp_input+0x9f8>
 80070fe:	68da      	ldr	r2, [r3, #12]
 8007100:	42a2      	cmp	r2, r4
 8007102:	d005      	beq.n	8007110 <tcp_input+0x9f4>
 8007104:	4613      	mov	r3, r2
 8007106:	e7f9      	b.n	80070fc <tcp_input+0x9e0>
 8007108:	68e2      	ldr	r2, [r4, #12]
 800710a:	4b15      	ldr	r3, [pc, #84]	; (8007160 <tcp_input+0xa44>)
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	e001      	b.n	8007114 <tcp_input+0x9f8>
 8007110:	68e2      	ldr	r2, [r4, #12]
 8007112:	60da      	str	r2, [r3, #12]
 8007114:	4b13      	ldr	r3, [pc, #76]	; (8007164 <tcp_input+0xa48>)
 8007116:	2201      	movs	r2, #1
 8007118:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800711a:	230a      	movs	r3, #10
 800711c:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800711e:	4b12      	ldr	r3, [pc, #72]	; (8007168 <tcp_input+0xa4c>)
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	60e2      	str	r2, [r4, #12]
 8007124:	601c      	str	r4, [r3, #0]
 8007126:	f001 fc43 	bl	80089b0 <tcp_timer_needed>
 800712a:	e5cf      	b.n	8006ccc <tcp_input+0x5b0>
 800712c:	0800c93c 	.word	0x0800c93c
 8007130:	0800ccd0 	.word	0x0800ccd0
 8007134:	0800baa0 	.word	0x0800baa0
 8007138:	0800cce8 	.word	0x0800cce8
 800713c:	2000a9c4 	.word	0x2000a9c4
 8007140:	2000a9c0 	.word	0x2000a9c0
 8007144:	2000a9f0 	.word	0x2000a9f0
 8007148:	20005288 	.word	0x20005288
 800714c:	2000a9fe 	.word	0x2000a9fe
 8007150:	2000a9e4 	.word	0x2000a9e4
 8007154:	2000a9d8 	.word	0x2000a9d8
 8007158:	2000a9e0 	.word	0x2000a9e0
 800715c:	0800ccfc 	.word	0x0800ccfc
 8007160:	2000a9a4 	.word	0x2000a9a4
 8007164:	2000a9a8 	.word	0x2000a9a8
 8007168:	2000a9bc 	.word	0x2000a9bc
      tcp_receive(pcb);
 800716c:	4620      	mov	r0, r4
 800716e:	f7fe fe49 	bl	8005e04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007172:	4b73      	ldr	r3, [pc, #460]	; (8007340 <tcp_input+0xc24>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	f013 0f10 	tst.w	r3, #16
 800717a:	f43f ada7 	beq.w	8006ccc <tcp_input+0x5b0>
 800717e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8007180:	4b70      	ldr	r3, [pc, #448]	; (8007344 <tcp_input+0xc28>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	f47f ada1 	bne.w	8006ccc <tcp_input+0x5b0>
 800718a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800718c:	2b00      	cmp	r3, #0
 800718e:	f47f ad9d 	bne.w	8006ccc <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 8007192:	4620      	mov	r0, r4
 8007194:	f7fd fe76 	bl	8004e84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8007198:	4b6b      	ldr	r3, [pc, #428]	; (8007348 <tcp_input+0xc2c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	42a3      	cmp	r3, r4
 800719e:	d005      	beq.n	80071ac <tcp_input+0xa90>
 80071a0:	b153      	cbz	r3, 80071b8 <tcp_input+0xa9c>
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	42a2      	cmp	r2, r4
 80071a6:	d005      	beq.n	80071b4 <tcp_input+0xa98>
 80071a8:	4613      	mov	r3, r2
 80071aa:	e7f9      	b.n	80071a0 <tcp_input+0xa84>
 80071ac:	68e2      	ldr	r2, [r4, #12]
 80071ae:	4b66      	ldr	r3, [pc, #408]	; (8007348 <tcp_input+0xc2c>)
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e001      	b.n	80071b8 <tcp_input+0xa9c>
 80071b4:	68e2      	ldr	r2, [r4, #12]
 80071b6:	60da      	str	r2, [r3, #12]
 80071b8:	4b64      	ldr	r3, [pc, #400]	; (800734c <tcp_input+0xc30>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80071be:	230a      	movs	r3, #10
 80071c0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80071c2:	4b63      	ldr	r3, [pc, #396]	; (8007350 <tcp_input+0xc34>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	60e2      	str	r2, [r4, #12]
 80071c8:	601c      	str	r4, [r3, #0]
 80071ca:	f001 fbf1 	bl	80089b0 <tcp_timer_needed>
 80071ce:	e57d      	b.n	8006ccc <tcp_input+0x5b0>
      tcp_receive(pcb);
 80071d0:	4620      	mov	r0, r4
 80071d2:	f7fe fe17 	bl	8005e04 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80071d6:	4b5a      	ldr	r3, [pc, #360]	; (8007340 <tcp_input+0xc24>)
 80071d8:	781b      	ldrb	r3, [r3, #0]
 80071da:	f013 0f10 	tst.w	r3, #16
 80071de:	f43f ad75 	beq.w	8006ccc <tcp_input+0x5b0>
 80071e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80071e4:	4b57      	ldr	r3, [pc, #348]	; (8007344 <tcp_input+0xc28>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	f47f ad6f 	bne.w	8006ccc <tcp_input+0x5b0>
 80071ee:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f ad6b 	bne.w	8006ccc <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 80071f6:	4a57      	ldr	r2, [pc, #348]	; (8007354 <tcp_input+0xc38>)
 80071f8:	7813      	ldrb	r3, [r2, #0]
 80071fa:	f043 0310 	orr.w	r3, r3, #16
 80071fe:	7013      	strb	r3, [r2, #0]
 8007200:	e564      	b.n	8006ccc <tcp_input+0x5b0>
        if (recv_acked > 0) {
 8007202:	4b55      	ldr	r3, [pc, #340]	; (8007358 <tcp_input+0xc3c>)
 8007204:	881a      	ldrh	r2, [r3, #0]
 8007206:	b162      	cbz	r2, 8007222 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007208:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800720c:	b133      	cbz	r3, 800721c <tcp_input+0xb00>
 800720e:	4621      	mov	r1, r4
 8007210:	6920      	ldr	r0, [r4, #16]
 8007212:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8007214:	f110 0f0d 	cmn.w	r0, #13
 8007218:	f43f ad6c 	beq.w	8006cf4 <tcp_input+0x5d8>
          recv_acked = 0;
 800721c:	4b4e      	ldr	r3, [pc, #312]	; (8007358 <tcp_input+0xc3c>)
 800721e:	2200      	movs	r2, #0
 8007220:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007222:	4620      	mov	r0, r4
 8007224:	f7fe fcfa 	bl	8005c1c <tcp_input_delayed_close>
 8007228:	2800      	cmp	r0, #0
 800722a:	f47f ad63 	bne.w	8006cf4 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800722e:	4b4b      	ldr	r3, [pc, #300]	; (800735c <tcp_input+0xc40>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	b1eb      	cbz	r3, 8007270 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007234:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007236:	b133      	cbz	r3, 8007246 <tcp_input+0xb2a>
 8007238:	4b49      	ldr	r3, [pc, #292]	; (8007360 <tcp_input+0xc44>)
 800723a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800723e:	4949      	ldr	r1, [pc, #292]	; (8007364 <tcp_input+0xc48>)
 8007240:	4849      	ldr	r0, [pc, #292]	; (8007368 <tcp_input+0xc4c>)
 8007242:	f003 f9fd 	bl	800a640 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007246:	8b63      	ldrh	r3, [r4, #26]
 8007248:	f013 0f10 	tst.w	r3, #16
 800724c:	d128      	bne.n	80072a0 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800724e:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8007252:	b36d      	cbz	r5, 80072b0 <tcp_input+0xb94>
 8007254:	2300      	movs	r3, #0
 8007256:	4a41      	ldr	r2, [pc, #260]	; (800735c <tcp_input+0xc40>)
 8007258:	6812      	ldr	r2, [r2, #0]
 800725a:	4621      	mov	r1, r4
 800725c:	6920      	ldr	r0, [r4, #16]
 800725e:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 8007260:	f110 0f0d 	cmn.w	r0, #13
 8007264:	f43f ad46 	beq.w	8006cf4 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 8007268:	b110      	cbz	r0, 8007270 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800726a:	4b3c      	ldr	r3, [pc, #240]	; (800735c <tcp_input+0xc40>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 8007270:	4b38      	ldr	r3, [pc, #224]	; (8007354 <tcp_input+0xc38>)
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	f013 0f20 	tst.w	r3, #32
 8007278:	d005      	beq.n	8007286 <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800727a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800727c:	b303      	cbz	r3, 80072c0 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800727e:	7b5a      	ldrb	r2, [r3, #13]
 8007280:	f042 0220 	orr.w	r2, r2, #32
 8007284:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 8007286:	4b39      	ldr	r3, [pc, #228]	; (800736c <tcp_input+0xc50>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800728c:	4620      	mov	r0, r4
 800728e:	f7fe fcc5 	bl	8005c1c <tcp_input_delayed_close>
 8007292:	2800      	cmp	r0, #0
 8007294:	f47f ad2e 	bne.w	8006cf4 <tcp_input+0x5d8>
        tcp_output(pcb);
 8007298:	4620      	mov	r0, r4
 800729a:	f001 f879 	bl	8008390 <tcp_output>
 800729e:	e529      	b.n	8006cf4 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 80072a0:	4b2e      	ldr	r3, [pc, #184]	; (800735c <tcp_input+0xc40>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	f7fd f826 	bl	80042f4 <pbuf_free>
            tcp_abort(pcb);
 80072a8:	4620      	mov	r0, r4
 80072aa:	f7fd ff09 	bl	80050c0 <tcp_abort>
            goto aborted;
 80072ae:	e521      	b.n	8006cf4 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80072b0:	2300      	movs	r3, #0
 80072b2:	4a2a      	ldr	r2, [pc, #168]	; (800735c <tcp_input+0xc40>)
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	4621      	mov	r1, r4
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7fe f917 	bl	80054ec <tcp_recv_null>
 80072be:	e7cf      	b.n	8007260 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80072c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80072c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 80072c6:	bf1c      	itt	ne
 80072c8:	3301      	addne	r3, #1
 80072ca:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80072cc:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80072d0:	2d00      	cmp	r5, #0
 80072d2:	d0d8      	beq.n	8007286 <tcp_input+0xb6a>
 80072d4:	2300      	movs	r3, #0
 80072d6:	461a      	mov	r2, r3
 80072d8:	4621      	mov	r1, r4
 80072da:	6920      	ldr	r0, [r4, #16]
 80072dc:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 80072de:	f110 0f0d 	cmn.w	r0, #13
 80072e2:	d1d0      	bne.n	8007286 <tcp_input+0xb6a>
 80072e4:	e506      	b.n	8006cf4 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80072e6:	4b22      	ldr	r3, [pc, #136]	; (8007370 <tcp_input+0xc54>)
 80072e8:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80072ea:	4b22      	ldr	r3, [pc, #136]	; (8007374 <tcp_input+0xc58>)
 80072ec:	4a22      	ldr	r2, [pc, #136]	; (8007378 <tcp_input+0xc5c>)
 80072ee:	8810      	ldrh	r0, [r2, #0]
 80072f0:	4a22      	ldr	r2, [pc, #136]	; (800737c <tcp_input+0xc60>)
 80072f2:	6812      	ldr	r2, [r2, #0]
 80072f4:	880c      	ldrh	r4, [r1, #0]
 80072f6:	9402      	str	r4, [sp, #8]
 80072f8:	8849      	ldrh	r1, [r1, #2]
 80072fa:	9101      	str	r1, [sp, #4]
 80072fc:	1f19      	subs	r1, r3, #4
 80072fe:	9100      	str	r1, [sp, #0]
 8007300:	4402      	add	r2, r0
 8007302:	4910      	ldr	r1, [pc, #64]	; (8007344 <tcp_input+0xc28>)
 8007304:	6809      	ldr	r1, [r1, #0]
 8007306:	2000      	movs	r0, #0
 8007308:	f000 ffc0 	bl	800828c <tcp_rst>
 800730c:	e007      	b.n	800731e <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800730e:	4b18      	ldr	r3, [pc, #96]	; (8007370 <tcp_input+0xc54>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	8998      	ldrh	r0, [r3, #12]
 8007314:	f7fc fa21 	bl	800375a <lwip_htons>
 8007318:	f010 0f04 	tst.w	r0, #4
 800731c:	d0e3      	beq.n	80072e6 <tcp_input+0xbca>
    pbuf_free(p);
 800731e:	4628      	mov	r0, r5
 8007320:	f7fc ffe8 	bl	80042f4 <pbuf_free>
 8007324:	f7ff ba08 	b.w	8006738 <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007328:	4b09      	ldr	r3, [pc, #36]	; (8007350 <tcp_input+0xc34>)
 800732a:	681c      	ldr	r4, [r3, #0]
 800732c:	2c00      	cmp	r4, #0
 800732e:	f43f abe5 	beq.w	8006afc <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007332:	f8df 802c 	ldr.w	r8, [pc, #44]	; 8007360 <tcp_input+0xc44>
 8007336:	4f12      	ldr	r7, [pc, #72]	; (8007380 <tcp_input+0xc64>)
 8007338:	4e0b      	ldr	r6, [pc, #44]	; (8007368 <tcp_input+0xc4c>)
 800733a:	f7ff bb8d 	b.w	8006a58 <tcp_input+0x33c>
 800733e:	bf00      	nop
 8007340:	2000a9c4 	.word	0x2000a9c4
 8007344:	2000a9c0 	.word	0x2000a9c0
 8007348:	2000a9a4 	.word	0x2000a9a4
 800734c:	2000a9a8 	.word	0x2000a9a8
 8007350:	2000a9bc 	.word	0x2000a9bc
 8007354:	2000a9e0 	.word	0x2000a9e0
 8007358:	2000a9d8 	.word	0x2000a9d8
 800735c:	2000a9dc 	.word	0x2000a9dc
 8007360:	0800c93c 	.word	0x0800c93c
 8007364:	0800cd1c 	.word	0x0800cd1c
 8007368:	0800baa0 	.word	0x0800baa0
 800736c:	2000a9e8 	.word	0x2000a9e8
 8007370:	2000a9f0 	.word	0x2000a9f0
 8007374:	20005288 	.word	0x20005288
 8007378:	2000a9fe 	.word	0x2000a9fe
 800737c:	2000a9e4 	.word	0x2000a9e4
 8007380:	0800cc80 	.word	0x0800cc80

08007384 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8007384:	4a02      	ldr	r2, [pc, #8]	; (8007390 <tcp_trigger_input_pcb_close+0xc>)
 8007386:	7813      	ldrb	r3, [r2, #0]
 8007388:	f043 0310 	orr.w	r3, r3, #16
 800738c:	7013      	strb	r3, [r2, #0]
}
 800738e:	4770      	bx	lr
 8007390:	2000a9e0 	.word	0x2000a9e0

08007394 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8007394:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8007396:	4604      	mov	r4, r0
 8007398:	b128      	cbz	r0, 80073a6 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800739a:	6863      	ldr	r3, [r4, #4]
 800739c:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800739e:	3801      	subs	r0, #1
 80073a0:	bf18      	it	ne
 80073a2:	2001      	movne	r0, #1
 80073a4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80073a6:	4b04      	ldr	r3, [pc, #16]	; (80073b8 <tcp_output_segment_busy+0x24>)
 80073a8:	f240 529a 	movw	r2, #1434	; 0x59a
 80073ac:	4903      	ldr	r1, [pc, #12]	; (80073bc <tcp_output_segment_busy+0x28>)
 80073ae:	4804      	ldr	r0, [pc, #16]	; (80073c0 <tcp_output_segment_busy+0x2c>)
 80073b0:	f003 f946 	bl	800a640 <iprintf>
 80073b4:	e7f1      	b.n	800739a <tcp_output_segment_busy+0x6>
 80073b6:	bf00      	nop
 80073b8:	0800cd38 	.word	0x0800cd38
 80073bc:	0800cd6c 	.word	0x0800cd6c
 80073c0:	0800baa0 	.word	0x0800baa0

080073c4 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80073c8:	460d      	mov	r5, r1
 80073ca:	b181      	cbz	r1, 80073ee <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 80073cc:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80073ce:	00a4      	lsls	r4, r4, #2
 80073d0:	f004 0404 	and.w	r4, r4, #4
 80073d4:	3414      	adds	r4, #20
 80073d6:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 80073d8:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80073da:	429c      	cmp	r4, r3
 80073dc:	d006      	beq.n	80073ec <tcp_output_fill_options+0x28>
 80073de:	4b08      	ldr	r3, [pc, #32]	; (8007400 <tcp_output_fill_options+0x3c>)
 80073e0:	f240 7275 	movw	r2, #1909	; 0x775
 80073e4:	4907      	ldr	r1, [pc, #28]	; (8007404 <tcp_output_fill_options+0x40>)
 80073e6:	4808      	ldr	r0, [pc, #32]	; (8007408 <tcp_output_fill_options+0x44>)
 80073e8:	f003 f92a 	bl	800a640 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80073ec:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80073ee:	4b04      	ldr	r3, [pc, #16]	; (8007400 <tcp_output_fill_options+0x3c>)
 80073f0:	f240 7256 	movw	r2, #1878	; 0x756
 80073f4:	4905      	ldr	r1, [pc, #20]	; (800740c <tcp_output_fill_options+0x48>)
 80073f6:	4804      	ldr	r0, [pc, #16]	; (8007408 <tcp_output_fill_options+0x44>)
 80073f8:	f003 f922 	bl	800a640 <iprintf>
 80073fc:	e7e6      	b.n	80073cc <tcp_output_fill_options+0x8>
 80073fe:	bf00      	nop
 8007400:	0800cd38 	.word	0x0800cd38
 8007404:	0800cdbc 	.word	0x0800cdbc
 8007408:	0800baa0 	.word	0x0800baa0
 800740c:	0800cd94 	.word	0x0800cd94

08007410 <tcp_pbuf_prealloc>:
{
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	4680      	mov	r8, r0
 8007416:	460c      	mov	r4, r1
 8007418:	4615      	mov	r5, r2
 800741a:	9e08      	ldr	r6, [sp, #32]
 800741c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8007420:	461f      	mov	r7, r3
 8007422:	b1cb      	cbz	r3, 8007458 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8007424:	b1fe      	cbz	r6, 8007466 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 8007426:	42ac      	cmp	r4, r5
 8007428:	d229      	bcs.n	800747e <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800742a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800742e:	f013 0f02 	tst.w	r3, #2
 8007432:	d108      	bne.n	8007446 <tcp_pbuf_prealloc+0x36>
 8007434:	8b73      	ldrh	r3, [r6, #26]
 8007436:	f013 0f40 	tst.w	r3, #64	; 0x40
 800743a:	d139      	bne.n	80074b0 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800743c:	f1b9 0f00 	cmp.w	r9, #0
 8007440:	d001      	beq.n	8007446 <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 8007442:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8007444:	b1b3      	cbz	r3, 8007474 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8007446:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800744a:	f021 0103 	bic.w	r1, r1, #3
 800744e:	428d      	cmp	r5, r1
 8007450:	bf28      	it	cs
 8007452:	460d      	movcs	r5, r1
 8007454:	b2a9      	uxth	r1, r5
 8007456:	e013      	b.n	8007480 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8007458:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <tcp_pbuf_prealloc+0xa4>)
 800745a:	22e8      	movs	r2, #232	; 0xe8
 800745c:	4916      	ldr	r1, [pc, #88]	; (80074b8 <tcp_pbuf_prealloc+0xa8>)
 800745e:	4817      	ldr	r0, [pc, #92]	; (80074bc <tcp_pbuf_prealloc+0xac>)
 8007460:	f003 f8ee 	bl	800a640 <iprintf>
 8007464:	e7de      	b.n	8007424 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8007466:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <tcp_pbuf_prealloc+0xa4>)
 8007468:	22e9      	movs	r2, #233	; 0xe9
 800746a:	4915      	ldr	r1, [pc, #84]	; (80074c0 <tcp_pbuf_prealloc+0xb0>)
 800746c:	4813      	ldr	r0, [pc, #76]	; (80074bc <tcp_pbuf_prealloc+0xac>)
 800746e:	f003 f8e7 	bl	800a640 <iprintf>
 8007472:	e7d8      	b.n	8007426 <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 8007474:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e5      	bne.n	8007446 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800747a:	4621      	mov	r1, r4
 800747c:	e000      	b.n	8007480 <tcp_pbuf_prealloc+0x70>
 800747e:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8007480:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007484:	4640      	mov	r0, r8
 8007486:	f7fc ff9f 	bl	80043c8 <pbuf_alloc>
  if (p == NULL) {
 800748a:	4605      	mov	r5, r0
 800748c:	b168      	cbz	r0, 80074aa <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800748e:	6803      	ldr	r3, [r0, #0]
 8007490:	b133      	cbz	r3, 80074a0 <tcp_pbuf_prealloc+0x90>
 8007492:	4b08      	ldr	r3, [pc, #32]	; (80074b4 <tcp_pbuf_prealloc+0xa4>)
 8007494:	f240 120b 	movw	r2, #267	; 0x10b
 8007498:	490a      	ldr	r1, [pc, #40]	; (80074c4 <tcp_pbuf_prealloc+0xb4>)
 800749a:	4808      	ldr	r0, [pc, #32]	; (80074bc <tcp_pbuf_prealloc+0xac>)
 800749c:	f003 f8d0 	bl	800a640 <iprintf>
  *oversize = p->len - length;
 80074a0:	896b      	ldrh	r3, [r5, #10]
 80074a2:	1b1b      	subs	r3, r3, r4
 80074a4:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 80074a6:	812c      	strh	r4, [r5, #8]
 80074a8:	816c      	strh	r4, [r5, #10]
}
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 80074b0:	4621      	mov	r1, r4
 80074b2:	e7e5      	b.n	8007480 <tcp_pbuf_prealloc+0x70>
 80074b4:	0800cd38 	.word	0x0800cd38
 80074b8:	0800cdd0 	.word	0x0800cdd0
 80074bc:	0800baa0 	.word	0x0800baa0
 80074c0:	0800cdf4 	.word	0x0800cdf4
 80074c4:	0800ce14 	.word	0x0800ce14

080074c8 <tcp_create_segment>:
{
 80074c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074cc:	460e      	mov	r6, r1
 80074ce:	4617      	mov	r7, r2
 80074d0:	4698      	mov	r8, r3
 80074d2:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80074d6:	4681      	mov	r9, r0
 80074d8:	2800      	cmp	r0, #0
 80074da:	d041      	beq.n	8007560 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80074dc:	2e00      	cmp	r6, #0
 80074de:	d046      	beq.n	800756e <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80074e0:	ea4f 058a 	mov.w	r5, sl, lsl #2
 80074e4:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80074e8:	2003      	movs	r0, #3
 80074ea:	f7fc fc15 	bl	8003d18 <memp_malloc>
 80074ee:	4604      	mov	r4, r0
 80074f0:	2800      	cmp	r0, #0
 80074f2:	d043      	beq.n	800757c <tcp_create_segment+0xb4>
  seg->flags = optflags;
 80074f4:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	6003      	str	r3, [r0, #0]
  seg->p = p;
 80074fc:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80074fe:	fa1f fa85 	uxth.w	sl, r5
 8007502:	8933      	ldrh	r3, [r6, #8]
 8007504:	4553      	cmp	r3, sl
 8007506:	d33d      	bcc.n	8007584 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 8007508:	8931      	ldrh	r1, [r6, #8]
 800750a:	eba1 010a 	sub.w	r1, r1, sl
 800750e:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 8007510:	2114      	movs	r1, #20
 8007512:	4630      	mov	r0, r6
 8007514:	f7fc fea9 	bl	800426a <pbuf_add_header>
 8007518:	2800      	cmp	r0, #0
 800751a:	d13a      	bne.n	8007592 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800751c:	6863      	ldr	r3, [r4, #4]
 800751e:	685e      	ldr	r6, [r3, #4]
 8007520:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8007522:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8007526:	f7fc f918 	bl	800375a <lwip_htons>
 800752a:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800752c:	68e6      	ldr	r6, [r4, #12]
 800752e:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 8007532:	f7fc f912 	bl	800375a <lwip_htons>
 8007536:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8007538:	68e6      	ldr	r6, [r4, #12]
 800753a:	4640      	mov	r0, r8
 800753c:	f7fc f912 	bl	8003764 <lwip_htonl>
 8007540:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8007542:	68e6      	ldr	r6, [r4, #12]
 8007544:	02a8      	lsls	r0, r5, #10
 8007546:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 800754a:	4338      	orrs	r0, r7
 800754c:	f7fc f905 	bl	800375a <lwip_htons>
 8007550:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 8007552:	68e3      	ldr	r3, [r4, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	749a      	strb	r2, [r3, #18]
 8007558:	74da      	strb	r2, [r3, #19]
}
 800755a:	4620      	mov	r0, r4
 800755c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8007560:	4b0e      	ldr	r3, [pc, #56]	; (800759c <tcp_create_segment+0xd4>)
 8007562:	22a3      	movs	r2, #163	; 0xa3
 8007564:	490e      	ldr	r1, [pc, #56]	; (80075a0 <tcp_create_segment+0xd8>)
 8007566:	480f      	ldr	r0, [pc, #60]	; (80075a4 <tcp_create_segment+0xdc>)
 8007568:	f003 f86a 	bl	800a640 <iprintf>
 800756c:	e7b6      	b.n	80074dc <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800756e:	4b0b      	ldr	r3, [pc, #44]	; (800759c <tcp_create_segment+0xd4>)
 8007570:	22a4      	movs	r2, #164	; 0xa4
 8007572:	490d      	ldr	r1, [pc, #52]	; (80075a8 <tcp_create_segment+0xe0>)
 8007574:	480b      	ldr	r0, [pc, #44]	; (80075a4 <tcp_create_segment+0xdc>)
 8007576:	f003 f863 	bl	800a640 <iprintf>
 800757a:	e7b1      	b.n	80074e0 <tcp_create_segment+0x18>
    pbuf_free(p);
 800757c:	4630      	mov	r0, r6
 800757e:	f7fc feb9 	bl	80042f4 <pbuf_free>
    return NULL;
 8007582:	e7ea      	b.n	800755a <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8007584:	4b05      	ldr	r3, [pc, #20]	; (800759c <tcp_create_segment+0xd4>)
 8007586:	22b0      	movs	r2, #176	; 0xb0
 8007588:	4908      	ldr	r1, [pc, #32]	; (80075ac <tcp_create_segment+0xe4>)
 800758a:	4806      	ldr	r0, [pc, #24]	; (80075a4 <tcp_create_segment+0xdc>)
 800758c:	f003 f858 	bl	800a640 <iprintf>
 8007590:	e7ba      	b.n	8007508 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 8007592:	4620      	mov	r0, r4
 8007594:	f7fd fade 	bl	8004b54 <tcp_seg_free>
    return NULL;
 8007598:	2400      	movs	r4, #0
 800759a:	e7de      	b.n	800755a <tcp_create_segment+0x92>
 800759c:	0800cd38 	.word	0x0800cd38
 80075a0:	0800ce28 	.word	0x0800ce28
 80075a4:	0800baa0 	.word	0x0800baa0
 80075a8:	0800ce48 	.word	0x0800ce48
 80075ac:	0800ce6c 	.word	0x0800ce6c

080075b0 <tcp_output_alloc_header_common>:
{
 80075b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075b4:	4607      	mov	r7, r0
 80075b6:	460c      	mov	r4, r1
 80075b8:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80075ba:	3214      	adds	r2, #20
 80075bc:	4411      	add	r1, r2
 80075be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80075c2:	b289      	uxth	r1, r1
 80075c4:	2022      	movs	r0, #34	; 0x22
 80075c6:	f7fc feff 	bl	80043c8 <pbuf_alloc>
  if (p != NULL) {
 80075ca:	4606      	mov	r6, r0
 80075cc:	b348      	cbz	r0, 8007622 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80075ce:	f104 0313 	add.w	r3, r4, #19
 80075d2:	8942      	ldrh	r2, [r0, #10]
 80075d4:	4293      	cmp	r3, r2
 80075d6:	da27      	bge.n	8007628 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 80075d8:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 80075da:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80075de:	f7fc f8bc 	bl	800375a <lwip_htons>
 80075e2:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80075e4:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80075e8:	f7fc f8b7 	bl	800375a <lwip_htons>
 80075ec:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 80075ee:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80075f2:	4638      	mov	r0, r7
 80075f4:	f7fc f8b6 	bl	8003764 <lwip_htonl>
 80075f8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80075fa:	08a4      	lsrs	r4, r4, #2
 80075fc:	3405      	adds	r4, #5
 80075fe:	f89d 0020 	ldrb.w	r0, [sp, #32]
 8007602:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 8007606:	b2a0      	uxth	r0, r4
 8007608:	f7fc f8a7 	bl	800375a <lwip_htons>
 800760c:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800760e:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 8007612:	f7fc f8a2 	bl	800375a <lwip_htons>
 8007616:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 8007618:	2300      	movs	r3, #0
 800761a:	742b      	strb	r3, [r5, #16]
 800761c:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800761e:	74ab      	strb	r3, [r5, #18]
 8007620:	74eb      	strb	r3, [r5, #19]
}
 8007622:	4630      	mov	r0, r6
 8007624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8007628:	4b03      	ldr	r3, [pc, #12]	; (8007638 <tcp_output_alloc_header_common+0x88>)
 800762a:	f240 7223 	movw	r2, #1827	; 0x723
 800762e:	4903      	ldr	r1, [pc, #12]	; (800763c <tcp_output_alloc_header_common+0x8c>)
 8007630:	4803      	ldr	r0, [pc, #12]	; (8007640 <tcp_output_alloc_header_common+0x90>)
 8007632:	f003 f805 	bl	800a640 <iprintf>
 8007636:	e7cf      	b.n	80075d8 <tcp_output_alloc_header_common+0x28>
 8007638:	0800cd38 	.word	0x0800cd38
 800763c:	0800ce84 	.word	0x0800ce84
 8007640:	0800baa0 	.word	0x0800baa0

08007644 <tcp_output_alloc_header>:
{
 8007644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007646:	b085      	sub	sp, #20
 8007648:	460d      	mov	r5, r1
 800764a:	4616      	mov	r6, r2
 800764c:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800764e:	4604      	mov	r4, r0
 8007650:	b1a0      	cbz	r0, 800767c <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8007652:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	2310      	movs	r3, #16
 8007658:	9302      	str	r3, [sp, #8]
 800765a:	8b23      	ldrh	r3, [r4, #24]
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	8ae3      	ldrh	r3, [r4, #22]
 8007660:	9300      	str	r3, [sp, #0]
 8007662:	463b      	mov	r3, r7
 8007664:	4632      	mov	r2, r6
 8007666:	4629      	mov	r1, r5
 8007668:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800766a:	f7ff ffa1 	bl	80075b0 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800766e:	b118      	cbz	r0, 8007678 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8007670:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8007672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007674:	4413      	add	r3, r2
 8007676:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8007678:	b005      	add	sp, #20
 800767a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800767c:	4b03      	ldr	r3, [pc, #12]	; (800768c <tcp_output_alloc_header+0x48>)
 800767e:	f240 7242 	movw	r2, #1858	; 0x742
 8007682:	4903      	ldr	r1, [pc, #12]	; (8007690 <tcp_output_alloc_header+0x4c>)
 8007684:	4803      	ldr	r0, [pc, #12]	; (8007694 <tcp_output_alloc_header+0x50>)
 8007686:	f002 ffdb 	bl	800a640 <iprintf>
 800768a:	e7e2      	b.n	8007652 <tcp_output_alloc_header+0xe>
 800768c:	0800cd38 	.word	0x0800cd38
 8007690:	0800ceb4 	.word	0x0800ceb4
 8007694:	0800baa0 	.word	0x0800baa0

08007698 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8007698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769a:	b085      	sub	sp, #20
 800769c:	4604      	mov	r4, r0
 800769e:	4616      	mov	r6, r2
 80076a0:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80076a2:	460f      	mov	r7, r1
 80076a4:	b1c9      	cbz	r1, 80076da <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80076a6:	b374      	cbz	r4, 8007706 <tcp_output_control_segment+0x6e>
 80076a8:	7a20      	ldrb	r0, [r4, #8]
 80076aa:	b9f0      	cbnz	r0, 80076ea <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 80076ac:	4628      	mov	r0, r5
 80076ae:	f002 f859 	bl	8009764 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 80076b2:	4602      	mov	r2, r0
 80076b4:	b308      	cbz	r0, 80076fa <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80076b6:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 80076b8:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80076ba:	9202      	str	r2, [sp, #8]
 80076bc:	2206      	movs	r2, #6
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9100      	str	r1, [sp, #0]
 80076c2:	462a      	mov	r2, r5
 80076c4:	4631      	mov	r1, r6
 80076c6:	4638      	mov	r0, r7
 80076c8:	f002 f9d8 	bl	8009a7c <ip4_output_if>
 80076cc:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80076ce:	4638      	mov	r0, r7
 80076d0:	f7fc fe10 	bl	80042f4 <pbuf_free>
  return err;
}
 80076d4:	4620      	mov	r0, r4
 80076d6:	b005      	add	sp, #20
 80076d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80076da:	4b0f      	ldr	r3, [pc, #60]	; (8007718 <tcp_output_control_segment+0x80>)
 80076dc:	f240 7287 	movw	r2, #1927	; 0x787
 80076e0:	490e      	ldr	r1, [pc, #56]	; (800771c <tcp_output_control_segment+0x84>)
 80076e2:	480f      	ldr	r0, [pc, #60]	; (8007720 <tcp_output_control_segment+0x88>)
 80076e4:	f002 ffac 	bl	800a640 <iprintf>
 80076e8:	e7dd      	b.n	80076a6 <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 80076ea:	f7fc fd13 	bl	8004114 <netif_get_by_index>
  if (netif == NULL) {
 80076ee:	4602      	mov	r2, r0
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d1e0      	bne.n	80076b6 <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 80076f4:	f06f 0403 	mvn.w	r4, #3
 80076f8:	e7e9      	b.n	80076ce <tcp_output_control_segment+0x36>
 80076fa:	f06f 0403 	mvn.w	r4, #3
 80076fe:	e7e6      	b.n	80076ce <tcp_output_control_segment+0x36>
 8007700:	f06f 0403 	mvn.w	r4, #3
 8007704:	e7e3      	b.n	80076ce <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 8007706:	4628      	mov	r0, r5
 8007708:	f002 f82c 	bl	8009764 <ip4_route>
  if (netif == NULL) {
 800770c:	4602      	mov	r2, r0
 800770e:	2800      	cmp	r0, #0
 8007710:	d0f6      	beq.n	8007700 <tcp_output_control_segment+0x68>
      tos = 0;
 8007712:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 8007714:	23ff      	movs	r3, #255	; 0xff
 8007716:	e7d0      	b.n	80076ba <tcp_output_control_segment+0x22>
 8007718:	0800cd38 	.word	0x0800cd38
 800771c:	0800cedc 	.word	0x0800cedc
 8007720:	0800baa0 	.word	0x0800baa0

08007724 <tcp_write>:
{
 8007724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007728:	b091      	sub	sp, #68	; 0x44
 800772a:	9107      	str	r1, [sp, #28]
 800772c:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800772e:	2300      	movs	r3, #0
 8007730:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8007734:	b1c0      	cbz	r0, 8007768 <tcp_write+0x44>
 8007736:	4692      	mov	sl, r2
 8007738:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800773a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800773c:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 8007740:	085b      	lsrs	r3, r3, #1
 8007742:	4293      	cmp	r3, r2
 8007744:	bf28      	it	cs
 8007746:	4613      	movcs	r3, r2
 8007748:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800774a:	2b00      	cmp	r3, #0
 800774c:	bf08      	it	eq
 800774e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8007750:	9b07      	ldr	r3, [sp, #28]
 8007752:	b19b      	cbz	r3, 800777c <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 8007754:	7d03      	ldrb	r3, [r0, #20]
 8007756:	2b07      	cmp	r3, #7
 8007758:	d01a      	beq.n	8007790 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800775a:	3b02      	subs	r3, #2
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b02      	cmp	r3, #2
 8007760:	d916      	bls.n	8007790 <tcp_write+0x6c>
    return ERR_CONN;
 8007762:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 8007766:	e203      	b.n	8007b70 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8007768:	4ba5      	ldr	r3, [pc, #660]	; (8007a00 <tcp_write+0x2dc>)
 800776a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800776e:	49a5      	ldr	r1, [pc, #660]	; (8007a04 <tcp_write+0x2e0>)
 8007770:	48a5      	ldr	r0, [pc, #660]	; (8007a08 <tcp_write+0x2e4>)
 8007772:	f002 ff65 	bl	800a640 <iprintf>
 8007776:	f06f 000f 	mvn.w	r0, #15
 800777a:	e1f9      	b.n	8007b70 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800777c:	4ba0      	ldr	r3, [pc, #640]	; (8007a00 <tcp_write+0x2dc>)
 800777e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8007782:	49a2      	ldr	r1, [pc, #648]	; (8007a0c <tcp_write+0x2e8>)
 8007784:	48a0      	ldr	r0, [pc, #640]	; (8007a08 <tcp_write+0x2e4>)
 8007786:	f002 ff5b 	bl	800a640 <iprintf>
 800778a:	f06f 000f 	mvn.w	r0, #15
 800778e:	e1ef      	b.n	8007b70 <tcp_write+0x44c>
  } else if (len == 0) {
 8007790:	f1ba 0f00 	cmp.w	sl, #0
 8007794:	d039      	beq.n	800780a <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 8007796:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800779a:	4553      	cmp	r3, sl
 800779c:	d310      	bcc.n	80077c0 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800779e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d815      	bhi.n	80077d2 <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 80077a6:	b32b      	cbz	r3, 80077f4 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80077a8:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80077ac:	bb6b      	cbnz	r3, 800780a <tcp_write+0xe6>
 80077ae:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80077b2:	b1bb      	cbz	r3, 80077e4 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 80077b4:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 80077b8:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 80077bc:	464b      	mov	r3, r9
 80077be:	e02c      	b.n	800781a <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80077c0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 80077cc:	f04f 30ff 	mov.w	r0, #4294967295
 80077d0:	e1ce      	b.n	8007b70 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80077d2:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 80077d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077da:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 80077de:	f04f 30ff 	mov.w	r0, #4294967295
 80077e2:	e1c5      	b.n	8007b70 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80077e4:	4b86      	ldr	r3, [pc, #536]	; (8007a00 <tcp_write+0x2dc>)
 80077e6:	f240 1255 	movw	r2, #341	; 0x155
 80077ea:	4989      	ldr	r1, [pc, #548]	; (8007a10 <tcp_write+0x2ec>)
 80077ec:	4886      	ldr	r0, [pc, #536]	; (8007a08 <tcp_write+0x2e4>)
 80077ee:	f002 ff27 	bl	800a640 <iprintf>
 80077f2:	e00a      	b.n	800780a <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80077f4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d04f      	beq.n	800789c <tcp_write+0x178>
 80077fc:	4b80      	ldr	r3, [pc, #512]	; (8007a00 <tcp_write+0x2dc>)
 80077fe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8007802:	4984      	ldr	r1, [pc, #528]	; (8007a14 <tcp_write+0x2f0>)
 8007804:	4880      	ldr	r0, [pc, #512]	; (8007a08 <tcp_write+0x2e4>)
 8007806:	f002 ff1b 	bl	800a640 <iprintf>
  queuelen = pcb->snd_queuelen;
 800780a:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800780e:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	d047      	beq.n	80078a8 <tcp_write+0x184>
 8007818:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800781a:	9309      	str	r3, [sp, #36]	; 0x24
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1fb      	bne.n	800781a <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8007822:	4699      	mov	r9, r3
 8007824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007826:	7a9c      	ldrb	r4, [r3, #10]
 8007828:	00a4      	lsls	r4, r4, #2
 800782a:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800782e:	891b      	ldrh	r3, [r3, #8]
 8007830:	4423      	add	r3, r4
 8007832:	459b      	cmp	fp, r3
 8007834:	db4f      	blt.n	80078d6 <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8007836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007838:	891b      	ldrh	r3, [r3, #8]
 800783a:	ebab 0303 	sub.w	r3, fp, r3
 800783e:	1b1c      	subs	r4, r3, r4
 8007840:	b2a3      	uxth	r3, r4
 8007842:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 8007844:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 8007848:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800784c:	2c00      	cmp	r4, #0
 800784e:	d05b      	beq.n	8007908 <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8007850:	429c      	cmp	r4, r3
 8007852:	d848      	bhi.n	80078e6 <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8007854:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007858:	461c      	mov	r4, r3
 800785a:	4553      	cmp	r3, sl
 800785c:	bf28      	it	cs
 800785e:	4654      	movcs	r4, sl
 8007860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007862:	4294      	cmp	r4, r2
 8007864:	bf28      	it	cs
 8007866:	4614      	movcs	r4, r2
 8007868:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800786a:	1b1b      	subs	r3, r3, r4
 800786c:	b29b      	uxth	r3, r3
 800786e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 8007872:	1b12      	subs	r2, r2, r4
 8007874:	b292      	uxth	r2, r2
 8007876:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8082 	beq.w	8007982 <tcp_write+0x25e>
 800787e:	45a2      	cmp	sl, r4
 8007880:	d139      	bne.n	80078f6 <tcp_write+0x1d2>
 8007882:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 8007884:	2c00      	cmp	r4, #0
 8007886:	f000 8266 	beq.w	8007d56 <tcp_write+0x632>
 800788a:	46cb      	mov	fp, r9
 800788c:	2300      	movs	r3, #0
 800788e:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 8007890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007892:	685d      	ldr	r5, [r3, #4]
 8007894:	2d00      	cmp	r5, #0
 8007896:	f040 8187 	bne.w	8007ba8 <tcp_write+0x484>
 800789a:	e198      	b.n	8007bce <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800789c:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1ab      	bne.n	80077fc <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 80078a4:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80078a8:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 80078ac:	2c00      	cmp	r4, #0
 80078ae:	f040 8094 	bne.w	80079da <tcp_write+0x2b6>
  u16_t extendlen = 0;
 80078b2:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 80078b4:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80078b6:	2300      	movs	r3, #0
 80078b8:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 80078ba:	4699      	mov	r9, r3
  while (pos < len) {
 80078bc:	45a2      	cmp	sl, r4
 80078be:	f240 816e 	bls.w	8007b9e <tcp_write+0x47a>
 80078c2:	2300      	movs	r3, #0
 80078c4:	9306      	str	r3, [sp, #24]
 80078c6:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80078c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	9308      	str	r3, [sp, #32]
 80078d0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80078d4:	e110      	b.n	8007af8 <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80078d6:	4b4a      	ldr	r3, [pc, #296]	; (8007a00 <tcp_write+0x2dc>)
 80078d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80078dc:	494e      	ldr	r1, [pc, #312]	; (8007a18 <tcp_write+0x2f4>)
 80078de:	484a      	ldr	r0, [pc, #296]	; (8007a08 <tcp_write+0x2e4>)
 80078e0:	f002 feae 	bl	800a640 <iprintf>
 80078e4:	e7a7      	b.n	8007836 <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80078e6:	4b46      	ldr	r3, [pc, #280]	; (8007a00 <tcp_write+0x2dc>)
 80078e8:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80078ec:	494b      	ldr	r1, [pc, #300]	; (8007a1c <tcp_write+0x2f8>)
 80078ee:	4846      	ldr	r0, [pc, #280]	; (8007a08 <tcp_write+0x2e4>)
 80078f0:	f002 fea6 	bl	800a640 <iprintf>
 80078f4:	e7ae      	b.n	8007854 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80078f6:	4b42      	ldr	r3, [pc, #264]	; (8007a00 <tcp_write+0x2dc>)
 80078f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078fc:	4948      	ldr	r1, [pc, #288]	; (8007a20 <tcp_write+0x2fc>)
 80078fe:	4842      	ldr	r0, [pc, #264]	; (8007a08 <tcp_write+0x2e4>)
 8007900:	f002 fe9e 	bl	800a640 <iprintf>
 8007904:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007906:	e000      	b.n	800790a <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8007908:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800790a:	45a2      	cmp	sl, r4
 800790c:	d9ba      	bls.n	8007884 <tcp_write+0x160>
 800790e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007910:	2a00      	cmp	r2, #0
 8007912:	d070      	beq.n	80079f6 <tcp_write+0x2d2>
 8007914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007916:	891b      	ldrh	r3, [r3, #8]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d06e      	beq.n	80079fa <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800791c:	ebaa 0704 	sub.w	r7, sl, r4
 8007920:	4297      	cmp	r7, r2
 8007922:	bfa8      	it	ge
 8007924:	4617      	movge	r7, r2
 8007926:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792a:	f013 0f01 	tst.w	r3, #1
 800792e:	d12a      	bne.n	8007986 <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8007930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007932:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8007936:	464a      	mov	r2, r9
 8007938:	4613      	mov	r3, r2
 800793a:	6812      	ldr	r2, [r2, #0]
 800793c:	2a00      	cmp	r2, #0
 800793e:	d1fb      	bne.n	8007938 <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8007940:	4691      	mov	r9, r2
 8007942:	7b1a      	ldrb	r2, [r3, #12]
 8007944:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8007948:	d105      	bne.n	8007956 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800794a:	895a      	ldrh	r2, [r3, #10]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8007950:	9a07      	ldr	r2, [sp, #28]
 8007952:	429a      	cmp	r2, r3
 8007954:	d035      	beq.n	80079c2 <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8007956:	2201      	movs	r2, #1
 8007958:	4629      	mov	r1, r5
 800795a:	2000      	movs	r0, #0
 800795c:	f7fc fd34 	bl	80043c8 <pbuf_alloc>
 8007960:	4681      	mov	r9, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	f000 81d6 	beq.w	8007d14 <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8007968:	9b07      	ldr	r3, [sp, #28]
 800796a:	4423      	add	r3, r4
 800796c:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800796e:	f7fc fe1b 	bl	80045a8 <pbuf_clen>
 8007972:	4406      	add	r6, r0
 8007974:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800797a:	4425      	add	r5, r4
 800797c:	940d      	str	r4, [sp, #52]	; 0x34
 800797e:	b2ac      	uxth	r4, r5
 8007980:	e79c      	b.n	80078bc <tcp_write+0x198>
 8007982:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007984:	e7c1      	b.n	800790a <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8007986:	2301      	movs	r3, #1
 8007988:	9302      	str	r3, [sp, #8]
 800798a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798c:	9301      	str	r3, [sp, #4]
 800798e:	f8cd 8000 	str.w	r8, [sp]
 8007992:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8007996:	4629      	mov	r1, r5
 8007998:	2000      	movs	r0, #0
 800799a:	f7ff fd39 	bl	8007410 <tcp_pbuf_prealloc>
 800799e:	4681      	mov	r9, r0
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f000 81b7 	beq.w	8007d14 <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80079a6:	462a      	mov	r2, r5
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	1919      	adds	r1, r3, r4
 80079ac:	6840      	ldr	r0, [r0, #4]
 80079ae:	f002 fe17 	bl	800a5e0 <memcpy>
        queuelen += pbuf_clen(concat_p);
 80079b2:	4648      	mov	r0, r9
 80079b4:	f7fc fdf8 	bl	80045a8 <pbuf_clen>
 80079b8:	4406      	add	r6, r0
 80079ba:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	930b      	str	r3, [sp, #44]	; 0x2c
 80079c0:	e7db      	b.n	800797a <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80079c2:	b90c      	cbnz	r4, 80079c8 <tcp_write+0x2a4>
          extendlen = seglen;
 80079c4:	950b      	str	r5, [sp, #44]	; 0x2c
 80079c6:	e7d8      	b.n	800797a <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <tcp_write+0x2dc>)
 80079ca:	f240 2231 	movw	r2, #561	; 0x231
 80079ce:	4915      	ldr	r1, [pc, #84]	; (8007a24 <tcp_write+0x300>)
 80079d0:	480d      	ldr	r0, [pc, #52]	; (8007a08 <tcp_write+0x2e4>)
 80079d2:	f002 fe35 	bl	800a640 <iprintf>
          extendlen = seglen;
 80079d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80079d8:	e7cf      	b.n	800797a <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80079da:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <tcp_write+0x2dc>)
 80079dc:	f240 224a 	movw	r2, #586	; 0x24a
 80079e0:	4911      	ldr	r1, [pc, #68]	; (8007a28 <tcp_write+0x304>)
 80079e2:	4809      	ldr	r0, [pc, #36]	; (8007a08 <tcp_write+0x2e4>)
 80079e4:	f002 fe2c 	bl	800a640 <iprintf>
  u16_t extendlen = 0;
 80079e8:	2300      	movs	r3, #0
 80079ea:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 80079ec:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 80079ee:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80079f0:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 80079f2:	4699      	mov	r9, r3
 80079f4:	e762      	b.n	80078bc <tcp_write+0x198>
 80079f6:	940d      	str	r4, [sp, #52]	; 0x34
 80079f8:	e763      	b.n	80078c2 <tcp_write+0x19e>
 80079fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80079fc:	940d      	str	r4, [sp, #52]	; 0x34
 80079fe:	e760      	b.n	80078c2 <tcp_write+0x19e>
 8007a00:	0800cd38 	.word	0x0800cd38
 8007a04:	0800cf08 	.word	0x0800cf08
 8007a08:	0800baa0 	.word	0x0800baa0
 8007a0c:	0800cf20 	.word	0x0800cf20
 8007a10:	0800cf54 	.word	0x0800cf54
 8007a14:	0800cf90 	.word	0x0800cf90
 8007a18:	0800cfc4 	.word	0x0800cfc4
 8007a1c:	0800cfdc 	.word	0x0800cfdc
 8007a20:	0800cffc 	.word	0x0800cffc
 8007a24:	0800d01c 	.word	0x0800d01c
 8007a28:	0800d048 	.word	0x0800d048
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8007a2c:	9b06      	ldr	r3, [sp, #24]
 8007a2e:	fab3 f383 	clz	r3, r3
 8007a32:	095b      	lsrs	r3, r3, #5
 8007a34:	9302      	str	r3, [sp, #8]
 8007a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	f8cd 8000 	str.w	r8, [sp]
 8007a3e:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 8007a42:	465a      	mov	r2, fp
 8007a44:	4629      	mov	r1, r5
 8007a46:	2036      	movs	r0, #54	; 0x36
 8007a48:	f7ff fce2 	bl	8007410 <tcp_pbuf_prealloc>
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f000 8143 	beq.w	8007cda <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8007a54:	8943      	ldrh	r3, [r0, #10]
 8007a56:	42ab      	cmp	r3, r5
 8007a58:	d306      	bcc.n	8007a68 <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	9b07      	ldr	r3, [sp, #28]
 8007a5e:	1919      	adds	r1, r3, r4
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f002 fdbd 	bl	800a5e0 <memcpy>
 8007a66:	e026      	b.n	8007ab6 <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8007a68:	4bae      	ldr	r3, [pc, #696]	; (8007d24 <tcp_write+0x600>)
 8007a6a:	f240 2266 	movw	r2, #614	; 0x266
 8007a6e:	49ae      	ldr	r1, [pc, #696]	; (8007d28 <tcp_write+0x604>)
 8007a70:	48ae      	ldr	r0, [pc, #696]	; (8007d2c <tcp_write+0x608>)
 8007a72:	f002 fde5 	bl	800a640 <iprintf>
 8007a76:	e7f0      	b.n	8007a5a <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8007a78:	4baa      	ldr	r3, [pc, #680]	; (8007d24 <tcp_write+0x600>)
 8007a7a:	f240 2271 	movw	r2, #625	; 0x271
 8007a7e:	49ac      	ldr	r1, [pc, #688]	; (8007d30 <tcp_write+0x60c>)
 8007a80:	48aa      	ldr	r0, [pc, #680]	; (8007d2c <tcp_write+0x608>)
 8007a82:	f002 fddd 	bl	800a640 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8007a86:	2201      	movs	r2, #1
 8007a88:	4629      	mov	r1, r5
 8007a8a:	2036      	movs	r0, #54	; 0x36
 8007a8c:	f7fc fc9c 	bl	80043c8 <pbuf_alloc>
 8007a90:	4681      	mov	r9, r0
 8007a92:	2800      	cmp	r0, #0
 8007a94:	f000 8124 	beq.w	8007ce0 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8007a98:	9b07      	ldr	r3, [sp, #28]
 8007a9a:	4423      	add	r3, r4
 8007a9c:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007a9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	2036      	movs	r0, #54	; 0x36
 8007aa6:	f7fc fc8f 	bl	80043c8 <pbuf_alloc>
 8007aaa:	4607      	mov	r7, r0
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d032      	beq.n	8007b16 <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 8007ab0:	4649      	mov	r1, r9
 8007ab2:	f7fc fd9d 	bl	80045f0 <pbuf_cat>
    queuelen += pbuf_clen(p);
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f7fc fd76 	bl	80045a8 <pbuf_clen>
 8007abc:	4406      	add	r6, r0
 8007abe:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8007ac0:	2e09      	cmp	r6, #9
 8007ac2:	d82e      	bhi.n	8007b22 <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8007ac4:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8007ac8:	2200      	movs	r2, #0
 8007aca:	9200      	str	r2, [sp, #0]
 8007acc:	4423      	add	r3, r4
 8007ace:	4639      	mov	r1, r7
 8007ad0:	4640      	mov	r0, r8
 8007ad2:	f7ff fcf9 	bl	80074c8 <tcp_create_segment>
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f000 8104 	beq.w	8007ce6 <tcp_write+0x5c2>
    if (queue == NULL) {
 8007ade:	9b06      	ldr	r3, [sp, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d050      	beq.n	8007b86 <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8007ae4:	9b05      	ldr	r3, [sp, #20]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d045      	beq.n	8007b76 <tcp_write+0x452>
      prev_seg->next = seg;
 8007aea:	9b05      	ldr	r3, [sp, #20]
 8007aec:	601f      	str	r7, [r3, #0]
    pos += seglen;
 8007aee:	442c      	add	r4, r5
 8007af0:	b2a4      	uxth	r4, r4
  while (pos < len) {
 8007af2:	45a2      	cmp	sl, r4
 8007af4:	d949      	bls.n	8007b8a <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8007af6:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 8007af8:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 8007afc:	b2ad      	uxth	r5, r5
 8007afe:	455d      	cmp	r5, fp
 8007b00:	bf28      	it	cs
 8007b02:	465d      	movcs	r5, fp
 8007b04:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d18f      	bne.n	8007a2c <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8007b0c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0b8      	beq.n	8007a86 <tcp_write+0x362>
 8007b14:	e7b0      	b.n	8007a78 <tcp_write+0x354>
        pbuf_free(p2);
 8007b16:	4648      	mov	r0, r9
 8007b18:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007b1c:	f7fc fbea 	bl	80042f4 <pbuf_free>
        goto memerr;
 8007b20:	e004      	b.n	8007b2c <tcp_write+0x408>
      pbuf_free(p);
 8007b22:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007b26:	4638      	mov	r0, r7
 8007b28:	f7fc fbe4 	bl	80042f4 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007b2c:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8007b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b34:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 8007b38:	f1b9 0f00 	cmp.w	r9, #0
 8007b3c:	d002      	beq.n	8007b44 <tcp_write+0x420>
    pbuf_free(concat_p);
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f7fc fbd8 	bl	80042f4 <pbuf_free>
  if (queue != NULL) {
 8007b44:	9b06      	ldr	r3, [sp, #24]
 8007b46:	b113      	cbz	r3, 8007b4e <tcp_write+0x42a>
    tcp_segs_free(queue);
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fd f810 	bl	8004b6e <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 8007b4e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 80d8 	beq.w	8007d08 <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8007b58:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 80d6 	bne.w	8007d0e <tcp_write+0x5ea>
 8007b62:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	f000 80c0 	beq.w	8007cec <tcp_write+0x5c8>
  return ERR_MEM;
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8007b70:	b011      	add	sp, #68	; 0x44
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8007b76:	4b6b      	ldr	r3, [pc, #428]	; (8007d24 <tcp_write+0x600>)
 8007b78:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007b7c:	496d      	ldr	r1, [pc, #436]	; (8007d34 <tcp_write+0x610>)
 8007b7e:	486b      	ldr	r0, [pc, #428]	; (8007d2c <tcp_write+0x608>)
 8007b80:	f002 fd5e 	bl	800a640 <iprintf>
 8007b84:	e7b1      	b.n	8007aea <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8007b86:	9006      	str	r0, [sp, #24]
 8007b88:	e7b1      	b.n	8007aee <tcp_write+0x3ca>
 8007b8a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 8007b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d052      	beq.n	8007c3a <tcp_write+0x516>
 8007b94:	461c      	mov	r4, r3
 8007b96:	46cb      	mov	fp, r9
 8007b98:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007b9c:	e678      	b.n	8007890 <tcp_write+0x16c>
  while (pos < len) {
 8007b9e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	9306      	str	r3, [sp, #24]
 8007ba4:	e7f3      	b.n	8007b8e <tcp_write+0x46a>
  if (oversize_used > 0) {
 8007ba6:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 8007ba8:	892b      	ldrh	r3, [r5, #8]
 8007baa:	4423      	add	r3, r4
 8007bac:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1f8      	bne.n	8007ba6 <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8007bb4:	896b      	ldrh	r3, [r5, #10]
 8007bb6:	6868      	ldr	r0, [r5, #4]
 8007bb8:	4622      	mov	r2, r4
 8007bba:	9907      	ldr	r1, [sp, #28]
 8007bbc:	4418      	add	r0, r3
 8007bbe:	f002 fd0f 	bl	800a5e0 <memcpy>
        p->len += oversize_used;
 8007bc2:	896b      	ldrh	r3, [r5, #10]
 8007bc4:	4423      	add	r3, r4
 8007bc6:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1eb      	bne.n	8007ba6 <tcp_write+0x482>
    last_unsent->len += oversize_used;
 8007bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd0:	8913      	ldrh	r3, [r2, #8]
 8007bd2:	441c      	add	r4, r3
 8007bd4:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 8007bd6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007bda:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 8007bde:	f1bb 0f00 	cmp.w	fp, #0
 8007be2:	f000 80af 	beq.w	8007d44 <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 8007be6:	4659      	mov	r1, fp
 8007be8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007bea:	6860      	ldr	r0, [r4, #4]
 8007bec:	f7fc fd00 	bl	80045f0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8007bf0:	8923      	ldrh	r3, [r4, #8]
 8007bf2:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 8007bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bfc:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 8007c00:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8007c04:	4453      	add	r3, sl
 8007c06:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 8007c0a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8007c0e:	eba3 0a0a 	sub.w	sl, r3, sl
 8007c12:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8007c16:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8007c1a:	b11e      	cbz	r6, 8007c24 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 8007c1c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d045      	beq.n	8007cb0 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	d06b      	beq.n	8007d00 <tcp_write+0x5dc>
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d06a      	beq.n	8007d04 <tcp_write+0x5e0>
 8007c2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c30:	f012 0f02 	tst.w	r2, #2
 8007c34:	d048      	beq.n	8007cc8 <tcp_write+0x5a4>
  return ERR_OK;
 8007c36:	2000      	movs	r0, #0
 8007c38:	e79a      	b.n	8007b70 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 8007c3a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007c3e:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 8007c42:	f1b9 0f00 	cmp.w	r9, #0
 8007c46:	d010      	beq.n	8007c6a <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8007c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c4a:	b11b      	cbz	r3, 8007c54 <tcp_write+0x530>
 8007c4c:	46cb      	mov	fp, r9
 8007c4e:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007c52:	e7c8      	b.n	8007be6 <tcp_write+0x4c2>
 8007c54:	4b33      	ldr	r3, [pc, #204]	; (8007d24 <tcp_write+0x600>)
 8007c56:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8007c5a:	4937      	ldr	r1, [pc, #220]	; (8007d38 <tcp_write+0x614>)
 8007c5c:	4833      	ldr	r0, [pc, #204]	; (8007d2c <tcp_write+0x608>)
 8007c5e:	f002 fcef 	bl	800a640 <iprintf>
 8007c62:	46cb      	mov	fp, r9
 8007c64:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007c68:	e7bd      	b.n	8007be6 <tcp_write+0x4c2>
 8007c6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c6c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8007c70:	e075      	b.n	8007d5e <tcp_write+0x63a>
 8007c72:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8007c74:	4b2b      	ldr	r3, [pc, #172]	; (8007d24 <tcp_write+0x600>)
 8007c76:	f240 22e6 	movw	r2, #742	; 0x2e6
 8007c7a:	4930      	ldr	r1, [pc, #192]	; (8007d3c <tcp_write+0x618>)
 8007c7c:	482b      	ldr	r0, [pc, #172]	; (8007d2c <tcp_write+0x608>)
 8007c7e:	f002 fcdf 	bl	800a640 <iprintf>
 8007c82:	e076      	b.n	8007d72 <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007c84:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 8007c86:	890b      	ldrh	r3, [r1, #8]
 8007c88:	4403      	add	r3, r0
 8007c8a:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007c8c:	6813      	ldr	r3, [r2, #0]
 8007c8e:	4611      	mov	r1, r2
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d1f7      	bne.n	8007c84 <tcp_write+0x560>
    p->tot_len += extendlen;
 8007c94:	8913      	ldrh	r3, [r2, #8]
 8007c96:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c98:	440b      	add	r3, r1
 8007c9a:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 8007c9c:	8953      	ldrh	r3, [r2, #10]
 8007c9e:	440b      	add	r3, r1
 8007ca0:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 8007ca2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ca4:	8913      	ldrh	r3, [r2, #8]
 8007ca6:	440b      	add	r3, r1
 8007ca8:	8113      	strh	r3, [r2, #8]
 8007caa:	e7a6      	b.n	8007bfa <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007cac:	460a      	mov	r2, r1
 8007cae:	e7f1      	b.n	8007c94 <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 8007cb0:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1b5      	bne.n	8007c24 <tcp_write+0x500>
 8007cb8:	4b1a      	ldr	r3, [pc, #104]	; (8007d24 <tcp_write+0x600>)
 8007cba:	f240 3212 	movw	r2, #786	; 0x312
 8007cbe:	4920      	ldr	r1, [pc, #128]	; (8007d40 <tcp_write+0x61c>)
 8007cc0:	481a      	ldr	r0, [pc, #104]	; (8007d2c <tcp_write+0x608>)
 8007cc2:	f002 fcbd 	bl	800a640 <iprintf>
 8007cc6:	e7ad      	b.n	8007c24 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8007cc8:	899c      	ldrh	r4, [r3, #12]
 8007cca:	2008      	movs	r0, #8
 8007ccc:	f7fb fd45 	bl	800375a <lwip_htons>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	4304      	orrs	r4, r0
 8007cd4:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	e74a      	b.n	8007b70 <tcp_write+0x44c>
 8007cda:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007cde:	e725      	b.n	8007b2c <tcp_write+0x408>
 8007ce0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007ce4:	e722      	b.n	8007b2c <tcp_write+0x408>
 8007ce6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8007cea:	e71f      	b.n	8007b2c <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8007cec:	4b0d      	ldr	r3, [pc, #52]	; (8007d24 <tcp_write+0x600>)
 8007cee:	f240 3227 	movw	r2, #807	; 0x327
 8007cf2:	4913      	ldr	r1, [pc, #76]	; (8007d40 <tcp_write+0x61c>)
 8007cf4:	480d      	ldr	r0, [pc, #52]	; (8007d2c <tcp_write+0x608>)
 8007cf6:	f002 fca3 	bl	800a640 <iprintf>
  return ERR_MEM;
 8007cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cfe:	e737      	b.n	8007b70 <tcp_write+0x44c>
  return ERR_OK;
 8007d00:	2000      	movs	r0, #0
 8007d02:	e735      	b.n	8007b70 <tcp_write+0x44c>
 8007d04:	2000      	movs	r0, #0
 8007d06:	e733      	b.n	8007b70 <tcp_write+0x44c>
  return ERR_MEM;
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	e730      	b.n	8007b70 <tcp_write+0x44c>
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d12:	e72d      	b.n	8007b70 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007d14:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 8007d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d1c:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 8007d20:	e715      	b.n	8007b4e <tcp_write+0x42a>
 8007d22:	bf00      	nop
 8007d24:	0800cd38 	.word	0x0800cd38
 8007d28:	0800d078 	.word	0x0800d078
 8007d2c:	0800baa0 	.word	0x0800baa0
 8007d30:	0800d0b8 	.word	0x0800d0b8
 8007d34:	0800d0c8 	.word	0x0800d0c8
 8007d38:	0800d0dc 	.word	0x0800d0dc
 8007d3c:	0800d114 	.word	0x0800d114
 8007d40:	0800d14c 	.word	0x0800d14c
  } else if (extendlen > 0) {
 8007d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d46:	b983      	cbnz	r3, 8007d6a <tcp_write+0x646>
  if (last_unsent == NULL) {
 8007d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f af55 	bne.w	8007bfa <tcp_write+0x4d6>
    pcb->unsent = queue;
 8007d50:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 8007d54:	e754      	b.n	8007c00 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 8007d56:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8007d5a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 8007d5e:	2c00      	cmp	r4, #0
 8007d60:	d0f2      	beq.n	8007d48 <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8007d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d084      	beq.n	8007c72 <tcp_write+0x54e>
 8007d68:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d080      	beq.n	8007c74 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8007d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d74:	6859      	ldr	r1, [r3, #4]
 8007d76:	680a      	ldr	r2, [r1, #0]
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d097      	beq.n	8007cac <tcp_write+0x588>
 8007d7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007d7e:	e782      	b.n	8007c86 <tcp_write+0x562>

08007d80 <tcp_split_unsent_seg>:
{
 8007d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d84:	b083      	sub	sp, #12
 8007d86:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8007d88:	4607      	mov	r7, r0
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d037      	beq.n	8007dfe <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 8007d8e:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	f000 80b7 	beq.w	8007f04 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 8007d96:	2c00      	cmp	r4, #0
 8007d98:	d039      	beq.n	8007e0e <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 8007d9a:	892b      	ldrh	r3, [r5, #8]
 8007d9c:	42a3      	cmp	r3, r4
 8007d9e:	f240 80b4 	bls.w	8007f0a <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8007da2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007da4:	42a3      	cmp	r3, r4
 8007da6:	d33c      	bcc.n	8007e22 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 8007da8:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8007dac:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8007db0:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 8007db4:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8007db8:	ebaa 0604 	sub.w	r6, sl, r4
 8007dbc:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8007dbe:	eb06 010b 	add.w	r1, r6, fp
 8007dc2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007dc6:	b289      	uxth	r1, r1
 8007dc8:	2036      	movs	r0, #54	; 0x36
 8007dca:	f7fc fafd 	bl	80043c8 <pbuf_alloc>
  if (p == NULL) {
 8007dce:	4680      	mov	r8, r0
 8007dd0:	2800      	cmp	r0, #0
 8007dd2:	f000 809e 	beq.w	8007f12 <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 8007dd6:	6868      	ldr	r0, [r5, #4]
 8007dd8:	8903      	ldrh	r3, [r0, #8]
 8007dda:	892a      	ldrh	r2, [r5, #8]
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8007de0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4632      	mov	r2, r6
 8007de8:	4459      	add	r1, fp
 8007dea:	f7fc fce1 	bl	80047b0 <pbuf_copy_partial>
 8007dee:	42b0      	cmp	r0, r6
 8007df0:	d029      	beq.n	8007e46 <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 8007df2:	4640      	mov	r0, r8
 8007df4:	f7fc fa7e 	bl	80042f4 <pbuf_free>
  return ERR_MEM;
 8007df8:	f04f 30ff 	mov.w	r0, #4294967295
 8007dfc:	e086      	b.n	8007f0c <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8007dfe:	4b46      	ldr	r3, [pc, #280]	; (8007f18 <tcp_split_unsent_seg+0x198>)
 8007e00:	f240 324b 	movw	r2, #843	; 0x34b
 8007e04:	4945      	ldr	r1, [pc, #276]	; (8007f1c <tcp_split_unsent_seg+0x19c>)
 8007e06:	4846      	ldr	r0, [pc, #280]	; (8007f20 <tcp_split_unsent_seg+0x1a0>)
 8007e08:	f002 fc1a 	bl	800a640 <iprintf>
 8007e0c:	e7bf      	b.n	8007d8e <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8007e0e:	4b42      	ldr	r3, [pc, #264]	; (8007f18 <tcp_split_unsent_seg+0x198>)
 8007e10:	f240 3253 	movw	r2, #851	; 0x353
 8007e14:	4943      	ldr	r1, [pc, #268]	; (8007f24 <tcp_split_unsent_seg+0x1a4>)
 8007e16:	4842      	ldr	r0, [pc, #264]	; (8007f20 <tcp_split_unsent_seg+0x1a0>)
 8007e18:	f002 fc12 	bl	800a640 <iprintf>
    return ERR_VAL;
 8007e1c:	f06f 0005 	mvn.w	r0, #5
 8007e20:	e074      	b.n	8007f0c <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8007e22:	4b3d      	ldr	r3, [pc, #244]	; (8007f18 <tcp_split_unsent_seg+0x198>)
 8007e24:	f240 325b 	movw	r2, #859	; 0x35b
 8007e28:	493f      	ldr	r1, [pc, #252]	; (8007f28 <tcp_split_unsent_seg+0x1a8>)
 8007e2a:	483d      	ldr	r0, [pc, #244]	; (8007f20 <tcp_split_unsent_seg+0x1a0>)
 8007e2c:	f002 fc08 	bl	800a640 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8007e30:	892b      	ldrh	r3, [r5, #8]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1b8      	bne.n	8007da8 <tcp_split_unsent_seg+0x28>
 8007e36:	4b38      	ldr	r3, [pc, #224]	; (8007f18 <tcp_split_unsent_seg+0x198>)
 8007e38:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8007e3c:	493b      	ldr	r1, [pc, #236]	; (8007f2c <tcp_split_unsent_seg+0x1ac>)
 8007e3e:	4838      	ldr	r0, [pc, #224]	; (8007f20 <tcp_split_unsent_seg+0x1a0>)
 8007e40:	f002 fbfe 	bl	800a640 <iprintf>
 8007e44:	e7b0      	b.n	8007da8 <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8007e46:	68eb      	ldr	r3, [r5, #12]
 8007e48:	8998      	ldrh	r0, [r3, #12]
 8007e4a:	f7fb fc86 	bl	800375a <lwip_htons>
 8007e4e:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 8007e50:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8007e54:	bf0e      	itee	eq
 8007e56:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 8007e5a:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 8007e5e:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 8007e62:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 8007e66:	bf1c      	itt	ne
 8007e68:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 8007e6c:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8007e70:	68eb      	ldr	r3, [r5, #12]
 8007e72:	6858      	ldr	r0, [r3, #4]
 8007e74:	f7fb fc76 	bl	8003764 <lwip_htonl>
 8007e78:	f8cd 9000 	str.w	r9, [sp]
 8007e7c:	1823      	adds	r3, r4, r0
 8007e7e:	465a      	mov	r2, fp
 8007e80:	4641      	mov	r1, r8
 8007e82:	4638      	mov	r0, r7
 8007e84:	f7ff fb20 	bl	80074c8 <tcp_create_segment>
  if (seg == NULL) {
 8007e88:	4681      	mov	r9, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	d0b1      	beq.n	8007df2 <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8007e8e:	6868      	ldr	r0, [r5, #4]
 8007e90:	f7fc fb8a 	bl	80045a8 <pbuf_clen>
 8007e94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007e98:	1a1b      	subs	r3, r3, r0
 8007e9a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8007e9e:	6868      	ldr	r0, [r5, #4]
 8007ea0:	eba4 040a 	sub.w	r4, r4, sl
 8007ea4:	b2a4      	uxth	r4, r4
 8007ea6:	8901      	ldrh	r1, [r0, #8]
 8007ea8:	4421      	add	r1, r4
 8007eaa:	b289      	uxth	r1, r1
 8007eac:	f7fc fb1c 	bl	80044e8 <pbuf_realloc>
  useg->len -= remainder;
 8007eb0:	892b      	ldrh	r3, [r5, #8]
 8007eb2:	441c      	add	r4, r3
 8007eb4:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8007eb6:	68eb      	ldr	r3, [r5, #12]
 8007eb8:	899c      	ldrh	r4, [r3, #12]
 8007eba:	4630      	mov	r0, r6
 8007ebc:	f7fb fc4d 	bl	800375a <lwip_htons>
 8007ec0:	68eb      	ldr	r3, [r5, #12]
 8007ec2:	4304      	orrs	r4, r0
 8007ec4:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8007ec6:	6868      	ldr	r0, [r5, #4]
 8007ec8:	f7fc fb6e 	bl	80045a8 <pbuf_clen>
 8007ecc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007ed0:	4418      	add	r0, r3
 8007ed2:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007ed6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8007eda:	f7fc fb65 	bl	80045a8 <pbuf_clen>
 8007ede:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007ee2:	4418      	add	r0, r3
 8007ee4:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 8007eee:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 8007ef2:	f8d9 3000 	ldr.w	r3, [r9]
 8007ef6:	b10b      	cbz	r3, 8007efc <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 8007ef8:	2000      	movs	r0, #0
 8007efa:	e007      	b.n	8007f0c <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 8007efc:	2000      	movs	r0, #0
 8007efe:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 8007f02:	e003      	b.n	8007f0c <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 8007f04:	f04f 30ff 	mov.w	r0, #4294967295
 8007f08:	e000      	b.n	8007f0c <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 8007f0a:	2000      	movs	r0, #0
}
 8007f0c:	b003      	add	sp, #12
 8007f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 8007f12:	f04f 30ff 	mov.w	r0, #4294967295
 8007f16:	e7f9      	b.n	8007f0c <tcp_split_unsent_seg+0x18c>
 8007f18:	0800cd38 	.word	0x0800cd38
 8007f1c:	0800d16c 	.word	0x0800d16c
 8007f20:	0800baa0 	.word	0x0800baa0
 8007f24:	0800d190 	.word	0x0800d190
 8007f28:	0800d1b4 	.word	0x0800d1b4
 8007f2c:	0800d1c4 	.word	0x0800d1c4

08007f30 <tcp_enqueue_flags>:
{
 8007f30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f34:	b083      	sub	sp, #12
 8007f36:	4604      	mov	r4, r0
 8007f38:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007f3a:	f011 0703 	ands.w	r7, r1, #3
 8007f3e:	d048      	beq.n	8007fd2 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8007f40:	2c00      	cmp	r4, #0
 8007f42:	d04e      	beq.n	8007fe2 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 8007f44:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8007f48:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8007f4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007f50:	4641      	mov	r1, r8
 8007f52:	2036      	movs	r0, #54	; 0x36
 8007f54:	f7fc fa38 	bl	80043c8 <pbuf_alloc>
 8007f58:	4681      	mov	r9, r0
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d049      	beq.n	8007ff2 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8007f5e:	8943      	ldrh	r3, [r0, #10]
 8007f60:	4543      	cmp	r3, r8
 8007f62:	d34d      	bcc.n	8008000 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8007f64:	9600      	str	r6, [sp, #0]
 8007f66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007f68:	462a      	mov	r2, r5
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4620      	mov	r0, r4
 8007f6e:	f7ff faab 	bl	80074c8 <tcp_create_segment>
 8007f72:	4606      	mov	r6, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d04b      	beq.n	8008010 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8007f78:	68c3      	ldr	r3, [r0, #12]
 8007f7a:	f013 0f03 	tst.w	r3, #3
 8007f7e:	d14e      	bne.n	800801e <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8007f80:	8933      	ldrh	r3, [r6, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d153      	bne.n	800802e <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 8007f86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d058      	beq.n	800803e <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1fb      	bne.n	8007f8c <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 8007f94:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 8007f96:	2300      	movs	r3, #0
 8007f98:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8007f9c:	b117      	cbz	r7, 8007fa4 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 8007f9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007fa0:	3301      	adds	r3, #1
 8007fa2:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 8007fa4:	f015 0f01 	tst.w	r5, #1
 8007fa8:	d003      	beq.n	8007fb2 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 8007faa:	8b63      	ldrh	r3, [r4, #26]
 8007fac:	f043 0320 	orr.w	r3, r3, #32
 8007fb0:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8007fb2:	6870      	ldr	r0, [r6, #4]
 8007fb4:	f7fc faf8 	bl	80045a8 <pbuf_clen>
 8007fb8:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8007fbc:	4418      	add	r0, r3
 8007fbe:	b280      	uxth	r0, r0
 8007fc0:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	d049      	beq.n	800805c <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8007fc8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d039      	beq.n	8008042 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 8007fce:	2000      	movs	r0, #0
 8007fd0:	e045      	b.n	800805e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8007fd2:	4b24      	ldr	r3, [pc, #144]	; (8008064 <tcp_enqueue_flags+0x134>)
 8007fd4:	f240 4211 	movw	r2, #1041	; 0x411
 8007fd8:	4923      	ldr	r1, [pc, #140]	; (8008068 <tcp_enqueue_flags+0x138>)
 8007fda:	4824      	ldr	r0, [pc, #144]	; (800806c <tcp_enqueue_flags+0x13c>)
 8007fdc:	f002 fb30 	bl	800a640 <iprintf>
 8007fe0:	e7ae      	b.n	8007f40 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8007fe2:	4b20      	ldr	r3, [pc, #128]	; (8008064 <tcp_enqueue_flags+0x134>)
 8007fe4:	f240 4213 	movw	r2, #1043	; 0x413
 8007fe8:	4921      	ldr	r1, [pc, #132]	; (8008070 <tcp_enqueue_flags+0x140>)
 8007fea:	4820      	ldr	r0, [pc, #128]	; (800806c <tcp_enqueue_flags+0x13c>)
 8007fec:	f002 fb28 	bl	800a640 <iprintf>
 8007ff0:	e7a8      	b.n	8007f44 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8007ff2:	8b63      	ldrh	r3, [r4, #26]
 8007ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff8:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	e02e      	b.n	800805e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <tcp_enqueue_flags+0x134>)
 8008002:	f240 4239 	movw	r2, #1081	; 0x439
 8008006:	491b      	ldr	r1, [pc, #108]	; (8008074 <tcp_enqueue_flags+0x144>)
 8008008:	4818      	ldr	r0, [pc, #96]	; (800806c <tcp_enqueue_flags+0x13c>)
 800800a:	f002 fb19 	bl	800a640 <iprintf>
 800800e:	e7a9      	b.n	8007f64 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008010:	8b63      	ldrh	r3, [r4, #26]
 8008012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008016:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	e01f      	b.n	800805e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800801e:	4b11      	ldr	r3, [pc, #68]	; (8008064 <tcp_enqueue_flags+0x134>)
 8008020:	f240 4242 	movw	r2, #1090	; 0x442
 8008024:	4914      	ldr	r1, [pc, #80]	; (8008078 <tcp_enqueue_flags+0x148>)
 8008026:	4811      	ldr	r0, [pc, #68]	; (800806c <tcp_enqueue_flags+0x13c>)
 8008028:	f002 fb0a 	bl	800a640 <iprintf>
 800802c:	e7a8      	b.n	8007f80 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <tcp_enqueue_flags+0x134>)
 8008030:	f240 4243 	movw	r2, #1091	; 0x443
 8008034:	4911      	ldr	r1, [pc, #68]	; (800807c <tcp_enqueue_flags+0x14c>)
 8008036:	480d      	ldr	r0, [pc, #52]	; (800806c <tcp_enqueue_flags+0x13c>)
 8008038:	f002 fb02 	bl	800a640 <iprintf>
 800803c:	e7a3      	b.n	8007f86 <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800803e:	66e6      	str	r6, [r4, #108]	; 0x6c
 8008040:	e7a9      	b.n	8007f96 <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008042:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008044:	b10b      	cbz	r3, 800804a <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 8008046:	2000      	movs	r0, #0
 8008048:	e009      	b.n	800805e <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800804a:	4b06      	ldr	r3, [pc, #24]	; (8008064 <tcp_enqueue_flags+0x134>)
 800804c:	f240 4265 	movw	r2, #1125	; 0x465
 8008050:	490b      	ldr	r1, [pc, #44]	; (8008080 <tcp_enqueue_flags+0x150>)
 8008052:	4806      	ldr	r0, [pc, #24]	; (800806c <tcp_enqueue_flags+0x13c>)
 8008054:	f002 faf4 	bl	800a640 <iprintf>
  return ERR_OK;
 8008058:	2000      	movs	r0, #0
 800805a:	e000      	b.n	800805e <tcp_enqueue_flags+0x12e>
 800805c:	2000      	movs	r0, #0
}
 800805e:	b003      	add	sp, #12
 8008060:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008064:	0800cd38 	.word	0x0800cd38
 8008068:	0800d1d4 	.word	0x0800d1d4
 800806c:	0800baa0 	.word	0x0800baa0
 8008070:	0800d22c 	.word	0x0800d22c
 8008074:	0800d24c 	.word	0x0800d24c
 8008078:	0800d288 	.word	0x0800d288
 800807c:	0800d2a0 	.word	0x0800d2a0
 8008080:	0800d2cc 	.word	0x0800d2cc

08008084 <tcp_send_fin>:
{
 8008084:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8008086:	4605      	mov	r5, r0
 8008088:	b188      	cbz	r0, 80080ae <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800808a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800808c:	b153      	cbz	r3, 80080a4 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800808e:	461c      	mov	r4, r3
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1fb      	bne.n	800808e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	8998      	ldrh	r0, [r3, #12]
 800809a:	f7fb fb5e 	bl	800375a <lwip_htons>
 800809e:	f010 0f07 	tst.w	r0, #7
 80080a2:	d00c      	beq.n	80080be <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80080a4:	2101      	movs	r1, #1
 80080a6:	4628      	mov	r0, r5
 80080a8:	f7ff ff42 	bl	8007f30 <tcp_enqueue_flags>
}
 80080ac:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80080ae:	4b0b      	ldr	r3, [pc, #44]	; (80080dc <tcp_send_fin+0x58>)
 80080b0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80080b4:	490a      	ldr	r1, [pc, #40]	; (80080e0 <tcp_send_fin+0x5c>)
 80080b6:	480b      	ldr	r0, [pc, #44]	; (80080e4 <tcp_send_fin+0x60>)
 80080b8:	f002 fac2 	bl	800a640 <iprintf>
 80080bc:	e7e5      	b.n	800808a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80080be:	68e3      	ldr	r3, [r4, #12]
 80080c0:	899e      	ldrh	r6, [r3, #12]
 80080c2:	2001      	movs	r0, #1
 80080c4:	f7fb fb49 	bl	800375a <lwip_htons>
 80080c8:	68e3      	ldr	r3, [r4, #12]
 80080ca:	4306      	orrs	r6, r0
 80080cc:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80080ce:	8b6b      	ldrh	r3, [r5, #26]
 80080d0:	f043 0320 	orr.w	r3, r3, #32
 80080d4:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 80080d6:	2000      	movs	r0, #0
 80080d8:	e7e8      	b.n	80080ac <tcp_send_fin+0x28>
 80080da:	bf00      	nop
 80080dc:	0800cd38 	.word	0x0800cd38
 80080e0:	0800d2f4 	.word	0x0800d2f4
 80080e4:	0800baa0 	.word	0x0800baa0

080080e8 <tcp_rexmit_rto_prepare>:
{
 80080e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80080ec:	4605      	mov	r5, r0
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d031      	beq.n	8008156 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 80080f2:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 80080f4:	2c00      	cmp	r4, #0
 80080f6:	d036      	beq.n	8008166 <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80080f8:	6823      	ldr	r3, [r4, #0]
 80080fa:	b143      	cbz	r3, 800810e <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 80080fc:	4620      	mov	r0, r4
 80080fe:	f7ff f949 	bl	8007394 <tcp_output_segment_busy>
 8008102:	2800      	cmp	r0, #0
 8008104:	d132      	bne.n	800816c <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8008106:	6824      	ldr	r4, [r4, #0]
 8008108:	6823      	ldr	r3, [r4, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1f6      	bne.n	80080fc <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff f940 	bl	8007394 <tcp_output_segment_busy>
 8008114:	bb68      	cbnz	r0, 8008172 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 8008116:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8008118:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800811a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800811c:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800811e:	2600      	movs	r6, #0
 8008120:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 8008122:	8b6b      	ldrh	r3, [r5, #26]
 8008124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008128:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800812a:	68e3      	ldr	r3, [r4, #12]
 800812c:	6858      	ldr	r0, [r3, #4]
 800812e:	f7fb fb19 	bl	8003764 <lwip_htonl>
 8008132:	4607      	mov	r7, r0
 8008134:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 8008138:	68e3      	ldr	r3, [r4, #12]
 800813a:	8998      	ldrh	r0, [r3, #12]
 800813c:	f7fb fb0d 	bl	800375a <lwip_htons>
 8008140:	f010 0303 	ands.w	r3, r0, #3
 8008144:	bf18      	it	ne
 8008146:	2301      	movne	r3, #1
 8008148:	4447      	add	r7, r8
 800814a:	443b      	add	r3, r7
 800814c:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800814e:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 8008150:	4630      	mov	r0, r6
}
 8008152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8008156:	4b08      	ldr	r3, [pc, #32]	; (8008178 <tcp_rexmit_rto_prepare+0x90>)
 8008158:	f240 6263 	movw	r2, #1635	; 0x663
 800815c:	4907      	ldr	r1, [pc, #28]	; (800817c <tcp_rexmit_rto_prepare+0x94>)
 800815e:	4808      	ldr	r0, [pc, #32]	; (8008180 <tcp_rexmit_rto_prepare+0x98>)
 8008160:	f002 fa6e 	bl	800a640 <iprintf>
 8008164:	e7c5      	b.n	80080f2 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 8008166:	f06f 0005 	mvn.w	r0, #5
 800816a:	e7f2      	b.n	8008152 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800816c:	f06f 0005 	mvn.w	r0, #5
 8008170:	e7ef      	b.n	8008152 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 8008172:	f06f 0005 	mvn.w	r0, #5
 8008176:	e7ec      	b.n	8008152 <tcp_rexmit_rto_prepare+0x6a>
 8008178:	0800cd38 	.word	0x0800cd38
 800817c:	0800d310 	.word	0x0800d310
 8008180:	0800baa0 	.word	0x0800baa0

08008184 <tcp_rexmit>:
{
 8008184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8008186:	4607      	mov	r7, r0
 8008188:	2800      	cmp	r0, #0
 800818a:	d02c      	beq.n	80081e6 <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800818c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800818e:	2e00      	cmp	r6, #0
 8008190:	d034      	beq.n	80081fc <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 8008192:	4630      	mov	r0, r6
 8008194:	f7ff f8fe 	bl	8007394 <tcp_output_segment_busy>
 8008198:	2800      	cmp	r0, #0
 800819a:	d132      	bne.n	8008202 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800819c:	6833      	ldr	r3, [r6, #0]
 800819e:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 80081a0:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 80081a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081a6:	b17b      	cbz	r3, 80081c8 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	6858      	ldr	r0, [r3, #4]
 80081ac:	f7fb fada 	bl	8003764 <lwip_htonl>
 80081b0:	4604      	mov	r4, r0
 80081b2:	68f3      	ldr	r3, [r6, #12]
 80081b4:	6858      	ldr	r0, [r3, #4]
 80081b6:	f7fb fad5 	bl	8003764 <lwip_htonl>
 80081ba:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 80081bc:	2c00      	cmp	r4, #0
 80081be:	da03      	bge.n	80081c8 <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 80081c0:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 80081c2:	682b      	ldr	r3, [r5, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1ef      	bne.n	80081a8 <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 80081cc:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 80081ce:	6833      	ldr	r3, [r6, #0]
 80081d0:	b18b      	cbz	r3, 80081f6 <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 80081d2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80081d6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 80081d8:	bf1c      	itt	ne
 80081da:	3301      	addne	r3, #1
 80081dc:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 80081e0:	2000      	movs	r0, #0
 80081e2:	6378      	str	r0, [r7, #52]	; 0x34
}
 80081e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80081e6:	4b08      	ldr	r3, [pc, #32]	; (8008208 <tcp_rexmit+0x84>)
 80081e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80081ec:	4907      	ldr	r1, [pc, #28]	; (800820c <tcp_rexmit+0x88>)
 80081ee:	4808      	ldr	r0, [pc, #32]	; (8008210 <tcp_rexmit+0x8c>)
 80081f0:	f002 fa26 	bl	800a640 <iprintf>
 80081f4:	e7ca      	b.n	800818c <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 80081f6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 80081fa:	e7ea      	b.n	80081d2 <tcp_rexmit+0x4e>
    return ERR_VAL;
 80081fc:	f06f 0005 	mvn.w	r0, #5
 8008200:	e7f0      	b.n	80081e4 <tcp_rexmit+0x60>
    return ERR_VAL;
 8008202:	f06f 0005 	mvn.w	r0, #5
 8008206:	e7ed      	b.n	80081e4 <tcp_rexmit+0x60>
 8008208:	0800cd38 	.word	0x0800cd38
 800820c:	0800d334 	.word	0x0800d334
 8008210:	0800baa0 	.word	0x0800baa0

08008214 <tcp_rexmit_fast>:
{
 8008214:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8008216:	4604      	mov	r4, r0
 8008218:	b130      	cbz	r0, 8008228 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800821a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800821c:	b11b      	cbz	r3, 8008226 <tcp_rexmit_fast+0x12>
 800821e:	8b63      	ldrh	r3, [r4, #26]
 8008220:	f013 0f04 	tst.w	r3, #4
 8008224:	d008      	beq.n	8008238 <tcp_rexmit_fast+0x24>
}
 8008226:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8008228:	4b15      	ldr	r3, [pc, #84]	; (8008280 <tcp_rexmit_fast+0x6c>)
 800822a:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800822e:	4915      	ldr	r1, [pc, #84]	; (8008284 <tcp_rexmit_fast+0x70>)
 8008230:	4815      	ldr	r0, [pc, #84]	; (8008288 <tcp_rexmit_fast+0x74>)
 8008232:	f002 fa05 	bl	800a640 <iprintf>
 8008236:	e7f0      	b.n	800821a <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 8008238:	4620      	mov	r0, r4
 800823a:	f7ff ffa3 	bl	8008184 <tcp_rexmit>
 800823e:	2800      	cmp	r0, #0
 8008240:	d1f1      	bne.n	8008226 <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8008242:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8008246:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800824a:	429a      	cmp	r2, r3
 800824c:	bf28      	it	cs
 800824e:	461a      	movcs	r2, r3
 8008250:	1052      	asrs	r2, r2, #1
 8008252:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8008256:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8008258:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800825c:	bf3c      	itt	cc
 800825e:	005a      	lslcc	r2, r3, #1
 8008260:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8008264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008268:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800826c:	4413      	add	r3, r2
 800826e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8008272:	8b63      	ldrh	r3, [r4, #26]
 8008274:	f043 0304 	orr.w	r3, r3, #4
 8008278:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800827a:	2300      	movs	r3, #0
 800827c:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800827e:	e7d2      	b.n	8008226 <tcp_rexmit_fast+0x12>
 8008280:	0800cd38 	.word	0x0800cd38
 8008284:	0800d34c 	.word	0x0800d34c
 8008288:	0800baa0 	.word	0x0800baa0

0800828c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800828c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008290:	b084      	sub	sp, #16
 8008292:	4604      	mov	r4, r0
 8008294:	460e      	mov	r6, r1
 8008296:	4615      	mov	r5, r2
 8008298:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800829a:	4698      	mov	r8, r3
 800829c:	b32b      	cbz	r3, 80082ea <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800829e:	b367      	cbz	r7, 80082fa <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80082a0:	4630      	mov	r0, r6
 80082a2:	f7fb fa5f 	bl	8003764 <lwip_htonl>
 80082a6:	4603      	mov	r3, r0
 80082a8:	f246 0208 	movw	r2, #24584	; 0x6008
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2214      	movs	r2, #20
 80082b0:	9202      	str	r2, [sp, #8]
 80082b2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80082b6:	9201      	str	r2, [sp, #4]
 80082b8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80082bc:	9200      	str	r2, [sp, #0]
 80082be:	2200      	movs	r2, #0
 80082c0:	4611      	mov	r1, r2
 80082c2:	4628      	mov	r0, r5
 80082c4:	f7ff f974 	bl	80075b0 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80082c8:	4605      	mov	r5, r0
 80082ca:	b158      	cbz	r0, 80082e4 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80082cc:	2300      	movs	r3, #0
 80082ce:	461a      	mov	r2, r3
 80082d0:	4601      	mov	r1, r0
 80082d2:	4620      	mov	r0, r4
 80082d4:	f7ff f876 	bl	80073c4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80082d8:	463b      	mov	r3, r7
 80082da:	4642      	mov	r2, r8
 80082dc:	4629      	mov	r1, r5
 80082de:	4620      	mov	r0, r4
 80082e0:	f7ff f9da 	bl	8007698 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80082e4:	b004      	add	sp, #16
 80082e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80082ea:	4b08      	ldr	r3, [pc, #32]	; (800830c <tcp_rst+0x80>)
 80082ec:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80082f0:	4907      	ldr	r1, [pc, #28]	; (8008310 <tcp_rst+0x84>)
 80082f2:	4808      	ldr	r0, [pc, #32]	; (8008314 <tcp_rst+0x88>)
 80082f4:	f002 f9a4 	bl	800a640 <iprintf>
 80082f8:	e7d1      	b.n	800829e <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80082fa:	4b04      	ldr	r3, [pc, #16]	; (800830c <tcp_rst+0x80>)
 80082fc:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8008300:	4905      	ldr	r1, [pc, #20]	; (8008318 <tcp_rst+0x8c>)
 8008302:	4804      	ldr	r0, [pc, #16]	; (8008314 <tcp_rst+0x88>)
 8008304:	f002 f99c 	bl	800a640 <iprintf>
 8008308:	e7ca      	b.n	80082a0 <tcp_rst+0x14>
 800830a:	bf00      	nop
 800830c:	0800cd38 	.word	0x0800cd38
 8008310:	0800d36c 	.word	0x0800d36c
 8008314:	0800baa0 	.word	0x0800baa0
 8008318:	0800d388 	.word	0x0800d388

0800831c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800831c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800831e:	4604      	mov	r4, r0
 8008320:	b1e0      	cbz	r0, 800835c <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008322:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008324:	f7fb fa1e 	bl	8003764 <lwip_htonl>
 8008328:	4603      	mov	r3, r0
 800832a:	2200      	movs	r2, #0
 800832c:	4611      	mov	r1, r2
 800832e:	4620      	mov	r0, r4
 8008330:	f7ff f988 	bl	8007644 <tcp_output_alloc_header>
  if (p == NULL) {
 8008334:	4605      	mov	r5, r0
 8008336:	b1c8      	cbz	r0, 800836c <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8008338:	2300      	movs	r3, #0
 800833a:	461a      	mov	r2, r3
 800833c:	4601      	mov	r1, r0
 800833e:	4620      	mov	r0, r4
 8008340:	f7ff f840 	bl	80073c4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008344:	1d23      	adds	r3, r4, #4
 8008346:	4622      	mov	r2, r4
 8008348:	4629      	mov	r1, r5
 800834a:	4620      	mov	r0, r4
 800834c:	f7ff f9a4 	bl	8007698 <tcp_output_control_segment>
  if (err != ERR_OK) {
 8008350:	b198      	cbz	r0, 800837a <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008352:	8b63      	ldrh	r3, [r4, #26]
 8008354:	f043 0303 	orr.w	r3, r3, #3
 8008358:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800835a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <tcp_send_empty_ack+0x68>)
 800835e:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8008362:	4909      	ldr	r1, [pc, #36]	; (8008388 <tcp_send_empty_ack+0x6c>)
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <tcp_send_empty_ack+0x70>)
 8008366:	f002 f96b 	bl	800a640 <iprintf>
 800836a:	e7da      	b.n	8008322 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800836c:	8b63      	ldrh	r3, [r4, #26]
 800836e:	f043 0303 	orr.w	r3, r3, #3
 8008372:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 8008374:	f06f 0001 	mvn.w	r0, #1
 8008378:	e7ef      	b.n	800835a <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800837a:	8b63      	ldrh	r3, [r4, #26]
 800837c:	f023 0303 	bic.w	r3, r3, #3
 8008380:	8363      	strh	r3, [r4, #26]
 8008382:	e7ea      	b.n	800835a <tcp_send_empty_ack+0x3e>
 8008384:	0800cd38 	.word	0x0800cd38
 8008388:	0800d3a4 	.word	0x0800d3a4
 800838c:	0800baa0 	.word	0x0800baa0

08008390 <tcp_output>:
{
 8008390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008394:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8008396:	4605      	mov	r5, r0
 8008398:	2800      	cmp	r0, #0
 800839a:	d03a      	beq.n	8008412 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800839c:	7d2b      	ldrb	r3, [r5, #20]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d03f      	beq.n	8008422 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 80083a2:	4b9b      	ldr	r3, [pc, #620]	; (8008610 <tcp_output+0x280>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	42ab      	cmp	r3, r5
 80083a8:	f000 81b8 	beq.w	800871c <tcp_output+0x38c>
  seg = pcb->unsent;
 80083ac:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 80083ae:	2c00      	cmp	r4, #0
 80083b0:	d03f      	beq.n	8008432 <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80083b2:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 80083b6:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80083ba:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80083be:	7a28      	ldrb	r0, [r5, #8]
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d148      	bne.n	8008456 <tcp_output+0xc6>
    return ip_route(src, dst);
 80083c4:	4650      	mov	r0, sl
 80083c6:	f001 f9cd 	bl	8009764 <ip4_route>
 80083ca:	4681      	mov	r9, r0
  if (netif == NULL) {
 80083cc:	f1b9 0f00 	cmp.w	r9, #0
 80083d0:	f000 81a6 	beq.w	8008720 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b913      	cbnz	r3, 80083de <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80083d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80083dc:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80083de:	42b7      	cmp	r7, r6
 80083e0:	bf28      	it	cs
 80083e2:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80083e4:	68e3      	ldr	r3, [r4, #12]
 80083e6:	6858      	ldr	r0, [r3, #4]
 80083e8:	f7fb f9bc 	bl	8003764 <lwip_htonl>
 80083ec:	8923      	ldrh	r3, [r4, #8]
 80083ee:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80083f0:	1a9b      	subs	r3, r3, r2
 80083f2:	4403      	add	r3, r0
 80083f4:	42bb      	cmp	r3, r7
 80083f6:	d941      	bls.n	800847c <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80083f8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 80083fc:	42bb      	cmp	r3, r7
 80083fe:	d02e      	beq.n	800845e <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 8008400:	8b6b      	ldrh	r3, [r5, #26]
 8008402:	f013 0f02 	tst.w	r3, #2
 8008406:	d018      	beq.n	800843a <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 8008408:	4628      	mov	r0, r5
 800840a:	f7ff ff87 	bl	800831c <tcp_send_empty_ack>
 800840e:	4603      	mov	r3, r0
 8008410:	e018      	b.n	8008444 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8008412:	4b80      	ldr	r3, [pc, #512]	; (8008614 <tcp_output+0x284>)
 8008414:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8008418:	497f      	ldr	r1, [pc, #508]	; (8008618 <tcp_output+0x288>)
 800841a:	4880      	ldr	r0, [pc, #512]	; (800861c <tcp_output+0x28c>)
 800841c:	f002 f910 	bl	800a640 <iprintf>
 8008420:	e7bc      	b.n	800839c <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008422:	4b7c      	ldr	r3, [pc, #496]	; (8008614 <tcp_output+0x284>)
 8008424:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8008428:	497d      	ldr	r1, [pc, #500]	; (8008620 <tcp_output+0x290>)
 800842a:	487c      	ldr	r0, [pc, #496]	; (800861c <tcp_output+0x28c>)
 800842c:	f002 f908 	bl	800a640 <iprintf>
 8008430:	e7b7      	b.n	80083a2 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 8008432:	8b6b      	ldrh	r3, [r5, #26]
 8008434:	f013 0f02 	tst.w	r3, #2
 8008438:	d108      	bne.n	800844c <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800843a:	8b6b      	ldrh	r3, [r5, #26]
 800843c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008440:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	b005      	add	sp, #20
 8008448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800844c:	4628      	mov	r0, r5
 800844e:	f7ff ff65 	bl	800831c <tcp_send_empty_ack>
 8008452:	4603      	mov	r3, r0
 8008454:	e7f6      	b.n	8008444 <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 8008456:	f7fb fe5d 	bl	8004114 <netif_get_by_index>
 800845a:	4681      	mov	r9, r0
 800845c:	e7b6      	b.n	80083cc <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800845e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1cd      	bne.n	8008400 <tcp_output+0x70>
 8008464:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1c9      	bne.n	8008400 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800846c:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 8008470:	2201      	movs	r2, #1
 8008472:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 8008476:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800847a:	e7c1      	b.n	8008400 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800847c:	2300      	movs	r3, #0
 800847e:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 8008482:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 8147 	beq.w	8008718 <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800848a:	4698      	mov	r8, r3
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1fb      	bne.n	800848a <tcp_output+0xfa>
 8008492:	e0d4      	b.n	800863e <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 8008494:	4b5f      	ldr	r3, [pc, #380]	; (8008614 <tcp_output+0x284>)
 8008496:	f240 5236 	movw	r2, #1334	; 0x536
 800849a:	4962      	ldr	r1, [pc, #392]	; (8008624 <tcp_output+0x294>)
 800849c:	485f      	ldr	r0, [pc, #380]	; (800861c <tcp_output+0x28c>)
 800849e:	f002 f8cf 	bl	800a640 <iprintf>
 80084a2:	e0df      	b.n	8008664 <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80084a4:	8911      	ldrh	r1, [r2, #8]
 80084a6:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 80084a8:	4291      	cmp	r1, r2
 80084aa:	f080 80e9 	bcs.w	8008680 <tcp_output+0x2f0>
 80084ae:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 80084b2:	2a00      	cmp	r2, #0
 80084b4:	f000 80e4 	beq.w	8008680 <tcp_output+0x2f0>
 80084b8:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 80084bc:	2a08      	cmp	r2, #8
 80084be:	f200 80df 	bhi.w	8008680 <tcp_output+0x2f0>
 80084c2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 80084c6:	f040 80db 	bne.w	8008680 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 80084ca:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1b4      	bne.n	800843a <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 80084d6:	e7b0      	b.n	800843a <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80084d8:	68e3      	ldr	r3, [r4, #12]
 80084da:	899e      	ldrh	r6, [r3, #12]
 80084dc:	2010      	movs	r0, #16
 80084de:	f7fb f93c 	bl	800375a <lwip_htons>
 80084e2:	68e3      	ldr	r3, [r4, #12]
 80084e4:	4330      	orrs	r0, r6
 80084e6:	8198      	strh	r0, [r3, #12]
 80084e8:	e0ce      	b.n	8008688 <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80084ea:	68e6      	ldr	r6, [r4, #12]
 80084ec:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80084ee:	f7fb f939 	bl	8003764 <lwip_htonl>
 80084f2:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80084f4:	68e6      	ldr	r6, [r4, #12]
 80084f6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80084f8:	f7fb f92f 	bl	800375a <lwip_htons>
 80084fc:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80084fe:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 8008500:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008502:	4413      	add	r3, r2
 8008504:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008506:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8008508:	7aa3      	ldrb	r3, [r4, #10]
 800850a:	f013 0f01 	tst.w	r3, #1
 800850e:	d140      	bne.n	8008592 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8008510:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 8008512:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 8008516:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8008518:	bfbc      	itt	lt
 800851a:	2300      	movlt	r3, #0
 800851c:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 800851e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008520:	2b00      	cmp	r3, #0
 8008522:	d043      	beq.n	80085ac <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8008524:	6862      	ldr	r2, [r4, #4]
 8008526:	68e3      	ldr	r3, [r4, #12]
 8008528:	6851      	ldr	r1, [r2, #4]
 800852a:	1a5b      	subs	r3, r3, r1
 800852c:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800852e:	8951      	ldrh	r1, [r2, #10]
 8008530:	1ac9      	subs	r1, r1, r3
 8008532:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 8008534:	6861      	ldr	r1, [r4, #4]
 8008536:	890a      	ldrh	r2, [r1, #8]
 8008538:	1ad3      	subs	r3, r2, r3
 800853a:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800853c:	6862      	ldr	r2, [r4, #4]
 800853e:	68e3      	ldr	r3, [r4, #12]
 8008540:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 8008542:	2200      	movs	r2, #0
 8008544:	741a      	strb	r2, [r3, #16]
 8008546:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8008548:	7aa3      	ldrb	r3, [r4, #10]
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	3314      	adds	r3, #20
 8008552:	68e2      	ldr	r2, [r4, #12]
 8008554:	4413      	add	r3, r2
 8008556:	429e      	cmp	r6, r3
 8008558:	d006      	beq.n	8008568 <tcp_output+0x1d8>
 800855a:	4b2e      	ldr	r3, [pc, #184]	; (8008614 <tcp_output+0x284>)
 800855c:	f240 621c 	movw	r2, #1564	; 0x61c
 8008560:	4931      	ldr	r1, [pc, #196]	; (8008628 <tcp_output+0x298>)
 8008562:	482e      	ldr	r0, [pc, #184]	; (800861c <tcp_output+0x28c>)
 8008564:	f002 f86c 	bl	800a640 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8008568:	6860      	ldr	r0, [r4, #4]
 800856a:	f8cd 9008 	str.w	r9, [sp, #8]
 800856e:	2306      	movs	r3, #6
 8008570:	9301      	str	r3, [sp, #4]
 8008572:	7aab      	ldrb	r3, [r5, #10]
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	7aeb      	ldrb	r3, [r5, #11]
 8008578:	4652      	mov	r2, sl
 800857a:	4629      	mov	r1, r5
 800857c:	f001 fa7e 	bl	8009a7c <ip4_output_if>
    if (err != ERR_OK) {
 8008580:	4603      	mov	r3, r0
 8008582:	2800      	cmp	r0, #0
 8008584:	f000 8086 	beq.w	8008694 <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8008588:	8b6a      	ldrh	r2, [r5, #26]
 800858a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800858e:	836a      	strh	r2, [r5, #26]
      return err;
 8008590:	e758      	b.n	8008444 <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8008592:	4652      	mov	r2, sl
 8008594:	4649      	mov	r1, r9
 8008596:	f44f 7006 	mov.w	r0, #536	; 0x218
 800859a:	f7fc fba9 	bl	8004cf0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800859e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 80085a2:	f7fb f8df 	bl	8003764 <lwip_htonl>
 80085a6:	6170      	str	r0, [r6, #20]
    opts += 1;
 80085a8:	3618      	adds	r6, #24
 80085aa:	e7b2      	b.n	8008512 <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 80085ac:	4b1f      	ldr	r3, [pc, #124]	; (800862c <tcp_output+0x29c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80085b2:	68e3      	ldr	r3, [r4, #12]
 80085b4:	6858      	ldr	r0, [r3, #4]
 80085b6:	f7fb f8d5 	bl	8003764 <lwip_htonl>
 80085ba:	63a8      	str	r0, [r5, #56]	; 0x38
 80085bc:	e7b2      	b.n	8008524 <tcp_output+0x194>
        pcb->unacked = seg;
 80085be:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 80085c0:	46a0      	mov	r8, r4
 80085c2:	e038      	b.n	8008636 <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80085c4:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 80085c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80085ca:	b1d3      	cbz	r3, 8008602 <tcp_output+0x272>
 80085cc:	4622      	mov	r2, r4
 80085ce:	465c      	mov	r4, fp
 80085d0:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	6858      	ldr	r0, [r3, #4]
 80085d6:	f7fb f8c5 	bl	8003764 <lwip_htonl>
 80085da:	4606      	mov	r6, r0
 80085dc:	f8db 300c 	ldr.w	r3, [fp, #12]
 80085e0:	6858      	ldr	r0, [r3, #4]
 80085e2:	f7fb f8bf 	bl	8003764 <lwip_htonl>
 80085e6:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	da07      	bge.n	80085fc <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 80085ec:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d1ee      	bne.n	80085d2 <tcp_output+0x242>
 80085f4:	465b      	mov	r3, fp
 80085f6:	46a3      	mov	fp, r4
 80085f8:	461c      	mov	r4, r3
 80085fa:	e002      	b.n	8008602 <tcp_output+0x272>
 80085fc:	465b      	mov	r3, fp
 80085fe:	46a3      	mov	fp, r4
 8008600:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 8008602:	f8db 3000 	ldr.w	r3, [fp]
 8008606:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 8008608:	f8cb 4000 	str.w	r4, [fp]
 800860c:	e013      	b.n	8008636 <tcp_output+0x2a6>
 800860e:	bf00      	nop
 8008610:	2000a9e8 	.word	0x2000a9e8
 8008614:	0800cd38 	.word	0x0800cd38
 8008618:	0800d3c4 	.word	0x0800d3c4
 800861c:	0800baa0 	.word	0x0800baa0
 8008620:	0800d3dc 	.word	0x0800d3dc
 8008624:	0800d404 	.word	0x0800d404
 8008628:	0800cdbc 	.word	0x0800cdbc
 800862c:	2000a9b4 	.word	0x2000a9b4
      tcp_seg_free(seg);
 8008630:	4620      	mov	r0, r4
 8008632:	f7fc fa8f 	bl	8004b54 <tcp_seg_free>
    seg = pcb->unsent;
 8008636:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 8008638:	2c00      	cmp	r4, #0
 800863a:	f43f af49 	beq.w	80084d0 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800863e:	68e3      	ldr	r3, [r4, #12]
 8008640:	6858      	ldr	r0, [r3, #4]
 8008642:	f7fb f88f 	bl	8003764 <lwip_htonl>
 8008646:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8008648:	1ac0      	subs	r0, r0, r3
 800864a:	8923      	ldrh	r3, [r4, #8]
 800864c:	4418      	add	r0, r3
  while (seg != NULL &&
 800864e:	42b8      	cmp	r0, r7
 8008650:	f63f af3b 	bhi.w	80084ca <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 8008654:	68e3      	ldr	r3, [r4, #12]
 8008656:	8998      	ldrh	r0, [r3, #12]
 8008658:	f7fb f87f 	bl	800375a <lwip_htons>
 800865c:	f010 0f04 	tst.w	r0, #4
 8008660:	f47f af18 	bne.w	8008494 <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8008664:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008666:	b15b      	cbz	r3, 8008680 <tcp_output+0x2f0>
 8008668:	8b6b      	ldrh	r3, [r5, #26]
 800866a:	f013 0f44 	tst.w	r3, #68	; 0x44
 800866e:	d107      	bne.n	8008680 <tcp_output+0x2f0>
 8008670:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 8008672:	2a00      	cmp	r2, #0
 8008674:	f43f af1b 	beq.w	80084ae <tcp_output+0x11e>
 8008678:	6811      	ldr	r1, [r2, #0]
 800867a:	2900      	cmp	r1, #0
 800867c:	f43f af12 	beq.w	80084a4 <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 8008680:	7d2b      	ldrb	r3, [r5, #20]
 8008682:	2b02      	cmp	r3, #2
 8008684:	f47f af28 	bne.w	80084d8 <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 8008688:	4620      	mov	r0, r4
 800868a:	f7fe fe83 	bl	8007394 <tcp_output_segment_busy>
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af2b 	beq.w	80084ea <tcp_output+0x15a>
    pcb->unsent = seg->next;
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8008698:	7d2b      	ldrb	r3, [r5, #20]
 800869a:	2b02      	cmp	r3, #2
 800869c:	d003      	beq.n	80086a6 <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800869e:	8b6b      	ldrh	r3, [r5, #26]
 80086a0:	f023 0303 	bic.w	r3, r3, #3
 80086a4:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	6858      	ldr	r0, [r3, #4]
 80086aa:	f7fb f85b 	bl	8003764 <lwip_htonl>
 80086ae:	4606      	mov	r6, r0
 80086b0:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 80086b4:	68e3      	ldr	r3, [r4, #12]
 80086b6:	8998      	ldrh	r0, [r3, #12]
 80086b8:	f7fb f84f 	bl	800375a <lwip_htons>
 80086bc:	f010 0003 	ands.w	r0, r0, #3
 80086c0:	bf18      	it	ne
 80086c2:	2001      	movne	r0, #1
 80086c4:	445e      	add	r6, fp
 80086c6:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80086c8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80086ca:	1a1b      	subs	r3, r3, r0
 80086cc:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 80086ce:	bfb8      	it	lt
 80086d0:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 80086d2:	8926      	ldrh	r6, [r4, #8]
 80086d4:	68e3      	ldr	r3, [r4, #12]
 80086d6:	8998      	ldrh	r0, [r3, #12]
 80086d8:	f7fb f83f 	bl	800375a <lwip_htons>
 80086dc:	f010 0003 	ands.w	r0, r0, #3
 80086e0:	bf18      	it	ne
 80086e2:	2001      	movne	r0, #1
 80086e4:	42f0      	cmn	r0, r6
 80086e6:	d0a3      	beq.n	8008630 <tcp_output+0x2a0>
      seg->next = NULL;
 80086e8:	2300      	movs	r3, #0
 80086ea:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 80086ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	f43f af65 	beq.w	80085be <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80086f4:	68e3      	ldr	r3, [r4, #12]
 80086f6:	6858      	ldr	r0, [r3, #4]
 80086f8:	f7fb f834 	bl	8003764 <lwip_htonl>
 80086fc:	4606      	mov	r6, r0
 80086fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008702:	6858      	ldr	r0, [r3, #4]
 8008704:	f7fb f82e 	bl	8003764 <lwip_htonl>
 8008708:	1a36      	subs	r6, r6, r0
 800870a:	2e00      	cmp	r6, #0
 800870c:	f6ff af5a 	blt.w	80085c4 <tcp_output+0x234>
          useg->next = seg;
 8008710:	f8c8 4000 	str.w	r4, [r8]
 8008714:	46a0      	mov	r8, r4
 8008716:	e78e      	b.n	8008636 <tcp_output+0x2a6>
  useg = pcb->unacked;
 8008718:	4698      	mov	r8, r3
  while (seg != NULL &&
 800871a:	e790      	b.n	800863e <tcp_output+0x2ae>
    return ERR_OK;
 800871c:	2300      	movs	r3, #0
 800871e:	e691      	b.n	8008444 <tcp_output+0xb4>
    return ERR_RTE;
 8008720:	f06f 0303 	mvn.w	r3, #3
 8008724:	e68e      	b.n	8008444 <tcp_output+0xb4>
 8008726:	bf00      	nop

08008728 <tcp_rexmit_rto_commit>:
{
 8008728:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800872a:	4604      	mov	r4, r0
 800872c:	b150      	cbz	r0, 8008744 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800872e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008732:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8008734:	bf1c      	itt	ne
 8008736:	3301      	addne	r3, #1
 8008738:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800873c:	4620      	mov	r0, r4
 800873e:	f7ff fe27 	bl	8008390 <tcp_output>
}
 8008742:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8008744:	4b03      	ldr	r3, [pc, #12]	; (8008754 <tcp_rexmit_rto_commit+0x2c>)
 8008746:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800874a:	4903      	ldr	r1, [pc, #12]	; (8008758 <tcp_rexmit_rto_commit+0x30>)
 800874c:	4803      	ldr	r0, [pc, #12]	; (800875c <tcp_rexmit_rto_commit+0x34>)
 800874e:	f001 ff77 	bl	800a640 <iprintf>
 8008752:	e7ec      	b.n	800872e <tcp_rexmit_rto_commit+0x6>
 8008754:	0800cd38 	.word	0x0800cd38
 8008758:	0800d41c 	.word	0x0800d41c
 800875c:	0800baa0 	.word	0x0800baa0

08008760 <tcp_rexmit_rto>:
{
 8008760:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8008762:	4604      	mov	r4, r0
 8008764:	b120      	cbz	r0, 8008770 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8008766:	4620      	mov	r0, r4
 8008768:	f7ff fcbe 	bl	80080e8 <tcp_rexmit_rto_prepare>
 800876c:	b140      	cbz	r0, 8008780 <tcp_rexmit_rto+0x20>
}
 800876e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <tcp_rexmit_rto+0x28>)
 8008772:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8008776:	4905      	ldr	r1, [pc, #20]	; (800878c <tcp_rexmit_rto+0x2c>)
 8008778:	4805      	ldr	r0, [pc, #20]	; (8008790 <tcp_rexmit_rto+0x30>)
 800877a:	f001 ff61 	bl	800a640 <iprintf>
 800877e:	e7f2      	b.n	8008766 <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 8008780:	4620      	mov	r0, r4
 8008782:	f7ff ffd1 	bl	8008728 <tcp_rexmit_rto_commit>
}
 8008786:	e7f2      	b.n	800876e <tcp_rexmit_rto+0xe>
 8008788:	0800cd38 	.word	0x0800cd38
 800878c:	0800d440 	.word	0x0800d440
 8008790:	0800baa0 	.word	0x0800baa0

08008794 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8008794:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8008796:	4604      	mov	r4, r0
 8008798:	b1c0      	cbz	r0, 80087cc <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800879a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800879c:	3801      	subs	r0, #1
 800879e:	f7fa ffe1 	bl	8003764 <lwip_htonl>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2200      	movs	r2, #0
 80087a6:	4611      	mov	r1, r2
 80087a8:	4620      	mov	r0, r4
 80087aa:	f7fe ff4b 	bl	8007644 <tcp_output_alloc_header>
  if (p == NULL) {
 80087ae:	4605      	mov	r5, r0
 80087b0:	b1a0      	cbz	r0, 80087dc <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80087b2:	2300      	movs	r3, #0
 80087b4:	461a      	mov	r2, r3
 80087b6:	4601      	mov	r1, r0
 80087b8:	4620      	mov	r0, r4
 80087ba:	f7fe fe03 	bl	80073c4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80087be:	1d23      	adds	r3, r4, #4
 80087c0:	4622      	mov	r2, r4
 80087c2:	4629      	mov	r1, r5
 80087c4:	4620      	mov	r0, r4
 80087c6:	f7fe ff67 	bl	8007698 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 80087ca:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80087cc:	4b05      	ldr	r3, [pc, #20]	; (80087e4 <tcp_keepalive+0x50>)
 80087ce:	f640 0224 	movw	r2, #2084	; 0x824
 80087d2:	4905      	ldr	r1, [pc, #20]	; (80087e8 <tcp_keepalive+0x54>)
 80087d4:	4805      	ldr	r0, [pc, #20]	; (80087ec <tcp_keepalive+0x58>)
 80087d6:	f001 ff33 	bl	800a640 <iprintf>
 80087da:	e7de      	b.n	800879a <tcp_keepalive+0x6>
    return ERR_MEM;
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295
 80087e0:	e7f3      	b.n	80087ca <tcp_keepalive+0x36>
 80087e2:	bf00      	nop
 80087e4:	0800cd38 	.word	0x0800cd38
 80087e8:	0800d45c 	.word	0x0800d45c
 80087ec:	0800baa0 	.word	0x0800baa0

080087f0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80087f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80087f4:	4604      	mov	r4, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d03e      	beq.n	8008878 <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80087fa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	d043      	beq.n	8008888 <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8008800:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8008804:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 8008806:	bf1c      	itt	ne
 8008808:	3301      	addne	r3, #1
 800880a:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800880e:	68eb      	ldr	r3, [r5, #12]
 8008810:	8998      	ldrh	r0, [r3, #12]
 8008812:	f7fa ffa2 	bl	800375a <lwip_htons>
 8008816:	f010 0f01 	tst.w	r0, #1
 800881a:	d002      	beq.n	8008822 <tcp_zero_window_probe+0x32>
 800881c:	892b      	ldrh	r3, [r5, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d03a      	beq.n	8008898 <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8008822:	68eb      	ldr	r3, [r5, #12]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	2100      	movs	r1, #0
 800882a:	4620      	mov	r0, r4
 800882c:	f7fe ff0a 	bl	8007644 <tcp_output_alloc_header>
  if (p == NULL) {
 8008830:	4606      	mov	r6, r0
 8008832:	b370      	cbz	r0, 8008892 <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8008834:	6868      	ldr	r0, [r5, #4]
 8008836:	8903      	ldrh	r3, [r0, #8]
 8008838:	892a      	ldrh	r2, [r5, #8]
 800883a:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800883c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800883e:	b29b      	uxth	r3, r3
 8008840:	2201      	movs	r2, #1
 8008842:	3114      	adds	r1, #20
 8008844:	f7fb ffb4 	bl	80047b0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8008848:	68eb      	ldr	r3, [r5, #12]
 800884a:	6858      	ldr	r0, [r3, #4]
 800884c:	f7fa ff8a 	bl	8003764 <lwip_htonl>
 8008850:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8008852:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008854:	1a1b      	subs	r3, r3, r0
 8008856:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8008858:	bfb8      	it	lt
 800885a:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800885c:	2300      	movs	r3, #0
 800885e:	461a      	mov	r2, r3
 8008860:	4631      	mov	r1, r6
 8008862:	4620      	mov	r0, r4
 8008864:	f7fe fdae 	bl	80073c4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8008868:	1d23      	adds	r3, r4, #4
 800886a:	4622      	mov	r2, r4
 800886c:	4631      	mov	r1, r6
 800886e:	4620      	mov	r0, r4
 8008870:	f7fe ff12 	bl	8007698 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8008874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8008878:	4b13      	ldr	r3, [pc, #76]	; (80088c8 <tcp_zero_window_probe+0xd8>)
 800887a:	f640 024f 	movw	r2, #2127	; 0x84f
 800887e:	4913      	ldr	r1, [pc, #76]	; (80088cc <tcp_zero_window_probe+0xdc>)
 8008880:	4813      	ldr	r0, [pc, #76]	; (80088d0 <tcp_zero_window_probe+0xe0>)
 8008882:	f001 fedd 	bl	800a640 <iprintf>
 8008886:	e7b8      	b.n	80087fa <tcp_zero_window_probe+0xa>
    return ERR_OK;
 8008888:	2000      	movs	r0, #0
 800888a:	e7f3      	b.n	8008874 <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 800888c:	f04f 30ff 	mov.w	r0, #4294967295
 8008890:	e7f0      	b.n	8008874 <tcp_zero_window_probe+0x84>
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	e7ed      	b.n	8008874 <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8008898:	68eb      	ldr	r3, [r5, #12]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	2200      	movs	r2, #0
 800889e:	4611      	mov	r1, r2
 80088a0:	4620      	mov	r0, r4
 80088a2:	f7fe fecf 	bl	8007644 <tcp_output_alloc_header>
  if (p == NULL) {
 80088a6:	4606      	mov	r6, r0
 80088a8:	2800      	cmp	r0, #0
 80088aa:	d0ef      	beq.n	800888c <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 80088ac:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80088b0:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 80088b4:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 80088b8:	2011      	movs	r0, #17
 80088ba:	f7fa ff4e 	bl	800375a <lwip_htons>
 80088be:	4307      	orrs	r7, r0
 80088c0:	f8a8 700c 	strh.w	r7, [r8, #12]
 80088c4:	e7c0      	b.n	8008848 <tcp_zero_window_probe+0x58>
 80088c6:	bf00      	nop
 80088c8:	0800cd38 	.word	0x0800cd38
 80088cc:	0800d478 	.word	0x0800d478
 80088d0:	0800baa0 	.word	0x0800baa0

080088d4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80088d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	460f      	mov	r7, r1
 80088da:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80088dc:	2006      	movs	r0, #6
 80088de:	f7fb fa1b 	bl	8003d18 <memp_malloc>
  if (timeout == NULL) {
 80088e2:	b180      	cbz	r0, 8008906 <sys_timeout_abs+0x32>
 80088e4:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 80088e6:	2300      	movs	r3, #0
 80088e8:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 80088ea:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 80088ec:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 80088ee:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <sys_timeout_abs+0x5c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	b173      	cbz	r3, 8008914 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	1aa2      	subs	r2, r4, r2
 80088fa:	2a00      	cmp	r2, #0
 80088fc:	da0d      	bge.n	800891a <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 80088fe:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 8008900:	4b0b      	ldr	r3, [pc, #44]	; (8008930 <sys_timeout_abs+0x5c>)
 8008902:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 8008904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008906:	4b0b      	ldr	r3, [pc, #44]	; (8008934 <sys_timeout_abs+0x60>)
 8008908:	22be      	movs	r2, #190	; 0xbe
 800890a:	490b      	ldr	r1, [pc, #44]	; (8008938 <sys_timeout_abs+0x64>)
 800890c:	480b      	ldr	r0, [pc, #44]	; (800893c <sys_timeout_abs+0x68>)
 800890e:	f001 fe97 	bl	800a640 <iprintf>
    return;
 8008912:	e7f7      	b.n	8008904 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 8008914:	4b06      	ldr	r3, [pc, #24]	; (8008930 <sys_timeout_abs+0x5c>)
 8008916:	6018      	str	r0, [r3, #0]
    return;
 8008918:	e7f4      	b.n	8008904 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800891a:	4619      	mov	r1, r3
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	b11b      	cbz	r3, 8008928 <sys_timeout_abs+0x54>
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	1aa2      	subs	r2, r4, r2
 8008924:	2a00      	cmp	r2, #0
 8008926:	daf8      	bge.n	800891a <sys_timeout_abs+0x46>
        timeout->next = t->next;
 8008928:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800892a:	600d      	str	r5, [r1, #0]
        break;
 800892c:	e7ea      	b.n	8008904 <sys_timeout_abs+0x30>
 800892e:	bf00      	nop
 8008930:	2000aa04 	.word	0x2000aa04
 8008934:	0800d49c 	.word	0x0800d49c
 8008938:	0800d4d0 	.word	0x0800d4d0
 800893c:	0800baa0 	.word	0x0800baa0

08008940 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8008944:	6843      	ldr	r3, [r0, #4]
 8008946:	4798      	blx	r3

  now = sys_now();
 8008948:	f7fa fd3e 	bl	80033c8 <sys_now>
 800894c:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800894e:	6825      	ldr	r5, [r4, #0]
 8008950:	4b06      	ldr	r3, [pc, #24]	; (800896c <lwip_cyclic_timer+0x2c>)
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8008956:	eba0 030c 	sub.w	r3, r0, ip
 800895a:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800895c:	4622      	mov	r2, r4
 800895e:	4904      	ldr	r1, [pc, #16]	; (8008970 <lwip_cyclic_timer+0x30>)
 8008960:	bfb8      	it	lt
 8008962:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8008966:	f7ff ffb5 	bl	80088d4 <sys_timeout_abs>
#endif
  }
}
 800896a:	bd38      	pop	{r3, r4, r5, pc}
 800896c:	2000aa00 	.word	0x2000aa00
 8008970:	08008941 	.word	0x08008941

08008974 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008974:	b570      	push	{r4, r5, r6, lr}
 8008976:	4604      	mov	r4, r0
 8008978:	460d      	mov	r5, r1
 800897a:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800897c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008980:	d207      	bcs.n	8008992 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8008982:	f7fa fd21 	bl	80033c8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8008986:	4632      	mov	r2, r6
 8008988:	4629      	mov	r1, r5
 800898a:	4420      	add	r0, r4
 800898c:	f7ff ffa2 	bl	80088d4 <sys_timeout_abs>
#endif
}
 8008990:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008992:	4b04      	ldr	r3, [pc, #16]	; (80089a4 <sys_timeout+0x30>)
 8008994:	f240 1229 	movw	r2, #297	; 0x129
 8008998:	4903      	ldr	r1, [pc, #12]	; (80089a8 <sys_timeout+0x34>)
 800899a:	4804      	ldr	r0, [pc, #16]	; (80089ac <sys_timeout+0x38>)
 800899c:	f001 fe50 	bl	800a640 <iprintf>
 80089a0:	e7ef      	b.n	8008982 <sys_timeout+0xe>
 80089a2:	bf00      	nop
 80089a4:	0800d49c 	.word	0x0800d49c
 80089a8:	0800d510 	.word	0x0800d510
 80089ac:	0800baa0 	.word	0x0800baa0

080089b0 <tcp_timer_needed>:
{
 80089b0:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80089b2:	4b0a      	ldr	r3, [pc, #40]	; (80089dc <tcp_timer_needed+0x2c>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	b953      	cbnz	r3, 80089ce <tcp_timer_needed+0x1e>
 80089b8:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <tcp_timer_needed+0x30>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	b143      	cbz	r3, 80089d0 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 80089be:	4b07      	ldr	r3, [pc, #28]	; (80089dc <tcp_timer_needed+0x2c>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80089c4:	2200      	movs	r2, #0
 80089c6:	4907      	ldr	r1, [pc, #28]	; (80089e4 <tcp_timer_needed+0x34>)
 80089c8:	20fa      	movs	r0, #250	; 0xfa
 80089ca:	f7ff ffd3 	bl	8008974 <sys_timeout>
}
 80089ce:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80089d0:	4b05      	ldr	r3, [pc, #20]	; (80089e8 <tcp_timer_needed+0x38>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d1f2      	bne.n	80089be <tcp_timer_needed+0xe>
 80089d8:	e7f9      	b.n	80089ce <tcp_timer_needed+0x1e>
 80089da:	bf00      	nop
 80089dc:	2000aa08 	.word	0x2000aa08
 80089e0:	2000a9a4 	.word	0x2000a9a4
 80089e4:	080089ed 	.word	0x080089ed
 80089e8:	2000a9bc 	.word	0x2000a9bc

080089ec <tcpip_tcp_timer>:
{
 80089ec:	b508      	push	{r3, lr}
  tcp_tmr();
 80089ee:	f7fd f89d 	bl	8005b2c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80089f2:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <tcpip_tcp_timer+0x28>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	b12b      	cbz	r3, 8008a04 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80089f8:	2200      	movs	r2, #0
 80089fa:	4907      	ldr	r1, [pc, #28]	; (8008a18 <tcpip_tcp_timer+0x2c>)
 80089fc:	20fa      	movs	r0, #250	; 0xfa
 80089fe:	f7ff ffb9 	bl	8008974 <sys_timeout>
}
 8008a02:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <tcpip_tcp_timer+0x30>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1f5      	bne.n	80089f8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 8008a0c:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <tcpip_tcp_timer+0x34>)
 8008a0e:	2200      	movs	r2, #0
 8008a10:	601a      	str	r2, [r3, #0]
}
 8008a12:	e7f6      	b.n	8008a02 <tcpip_tcp_timer+0x16>
 8008a14:	2000a9a4 	.word	0x2000a9a4
 8008a18:	080089ed 	.word	0x080089ed
 8008a1c:	2000a9bc 	.word	0x2000a9bc
 8008a20:	2000aa08 	.word	0x2000aa08

08008a24 <sys_timeouts_init>:
{
 8008a24:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8008a26:	4d08      	ldr	r5, [pc, #32]	; (8008a48 <sys_timeouts_init+0x24>)
 8008a28:	4c08      	ldr	r4, [pc, #32]	; (8008a4c <sys_timeouts_init+0x28>)
 8008a2a:	f105 0208 	add.w	r2, r5, #8
 8008a2e:	4621      	mov	r1, r4
 8008a30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a34:	f7ff ff9e 	bl	8008974 <sys_timeout>
 8008a38:	f105 0210 	add.w	r2, r5, #16
 8008a3c:	4621      	mov	r1, r4
 8008a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a42:	f7ff ff97 	bl	8008974 <sys_timeout>
}
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	0800d548 	.word	0x0800d548
 8008a4c:	08008941 	.word	0x08008941

08008a50 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8008a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8008a54:	f7fa fcb8 	bl	80033c8 <sys_now>
 8008a58:	4606      	mov	r6, r0
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8008a5a:	4f11      	ldr	r7, [pc, #68]	; (8008aa0 <sys_check_timeouts+0x50>)

    tmptimeout = next_timeout;
 8008a5c:	4c11      	ldr	r4, [pc, #68]	; (8008aa4 <sys_check_timeouts+0x54>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 8008a5e:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8008aa8 <sys_check_timeouts+0x58>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008a62:	f04f 0806 	mov.w	r8, #6
 8008a66:	e010      	b.n	8008a8a <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 8008a68:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 8008a6a:	b1b9      	cbz	r1, 8008a9c <sys_check_timeouts+0x4c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8008a6c:	684b      	ldr	r3, [r1, #4]
 8008a6e:	1af2      	subs	r2, r6, r3
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	db13      	blt.n	8008a9c <sys_check_timeouts+0x4c>
    next_timeout = tmptimeout->next;
 8008a74:	680a      	ldr	r2, [r1, #0]
 8008a76:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 8008a78:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 8008a7a:	f8d1 a00c 	ldr.w	sl, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 8008a7e:	f8c9 3000 	str.w	r3, [r9]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8008a82:	4640      	mov	r0, r8
 8008a84:	f7fb f978 	bl	8003d78 <memp_free>
    if (handler != NULL) {
 8008a88:	b92d      	cbnz	r5, 8008a96 <sys_check_timeouts+0x46>
    PBUF_CHECK_FREE_OOSEQ();
 8008a8a:	783b      	ldrb	r3, [r7, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0eb      	beq.n	8008a68 <sys_check_timeouts+0x18>
 8008a90:	f7fb fb92 	bl	80041b8 <pbuf_free_ooseq>
 8008a94:	e7e8      	b.n	8008a68 <sys_check_timeouts+0x18>
      handler(arg);
 8008a96:	4650      	mov	r0, sl
 8008a98:	47a8      	blx	r5
 8008a9a:	e7f6      	b.n	8008a8a <sys_check_timeouts+0x3a>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8008a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa0:	2000a9a1 	.word	0x2000a9a1
 8008aa4:	2000aa04 	.word	0x2000aa04
 8008aa8:	2000aa00 	.word	0x2000aa00

08008aac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008aac:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008aae:	f001 fddf 	bl	800a670 <rand>
 8008ab2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008ab6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008aba:	4b01      	ldr	r3, [pc, #4]	; (8008ac0 <udp_init+0x14>)
 8008abc:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 8008abe:	bd08      	pop	{r3, pc}
 8008ac0:	20000026 	.word	0x20000026

08008ac4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	b085      	sub	sp, #20
 8008aca:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008acc:	4681      	mov	r9, r0
 8008ace:	b300      	cbz	r0, 8008b12 <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8008ad0:	b336      	cbz	r6, 8008b20 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008ad2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8008ad6:	2b07      	cmp	r3, #7
 8008ad8:	d929      	bls.n	8008b2e <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 8008ada:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008ade:	4b68      	ldr	r3, [pc, #416]	; (8008c80 <udp_input+0x1bc>)
 8008ae0:	6819      	ldr	r1, [r3, #0]
 8008ae2:	6958      	ldr	r0, [r3, #20]
 8008ae4:	f000 ffdf 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 8008ae8:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8008aea:	8820      	ldrh	r0, [r4, #0]
 8008aec:	f7fa fe35 	bl	800375a <lwip_htons>
 8008af0:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 8008af2:	8860      	ldrh	r0, [r4, #2]
 8008af4:	f7fa fe31 	bl	800375a <lwip_htons>
 8008af8:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008afa:	4b62      	ldr	r3, [pc, #392]	; (8008c84 <udp_input+0x1c0>)
 8008afc:	681c      	ldr	r4, [r3, #0]
 8008afe:	2c00      	cmp	r4, #0
 8008b00:	f000 8088 	beq.w	8008c14 <udp_input+0x150>
  uncon_pcb = NULL;
 8008b04:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 8008b08:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008b0c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8008c80 <udp_input+0x1bc>
 8008b10:	e02c      	b.n	8008b6c <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008b12:	4b5d      	ldr	r3, [pc, #372]	; (8008c88 <udp_input+0x1c4>)
 8008b14:	22cf      	movs	r2, #207	; 0xcf
 8008b16:	495d      	ldr	r1, [pc, #372]	; (8008c8c <udp_input+0x1c8>)
 8008b18:	485d      	ldr	r0, [pc, #372]	; (8008c90 <udp_input+0x1cc>)
 8008b1a:	f001 fd91 	bl	800a640 <iprintf>
 8008b1e:	e7d7      	b.n	8008ad0 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8008b20:	4b59      	ldr	r3, [pc, #356]	; (8008c88 <udp_input+0x1c4>)
 8008b22:	22d0      	movs	r2, #208	; 0xd0
 8008b24:	495b      	ldr	r1, [pc, #364]	; (8008c94 <udp_input+0x1d0>)
 8008b26:	485a      	ldr	r0, [pc, #360]	; (8008c90 <udp_input+0x1cc>)
 8008b28:	f001 fd8a 	bl	800a640 <iprintf>
 8008b2c:	e7d1      	b.n	8008ad2 <udp_input+0xe>
    pbuf_free(p);
 8008b2e:	4648      	mov	r0, r9
 8008b30:	f7fb fbe0 	bl	80042f4 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8008b34:	b005      	add	sp, #20
 8008b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8008b3a:	4b53      	ldr	r3, [pc, #332]	; (8008c88 <udp_input+0x1c4>)
 8008b3c:	2288      	movs	r2, #136	; 0x88
 8008b3e:	4956      	ldr	r1, [pc, #344]	; (8008c98 <udp_input+0x1d4>)
 8008b40:	4853      	ldr	r0, [pc, #332]	; (8008c90 <udp_input+0x1cc>)
 8008b42:	f001 fd7d 	bl	800a640 <iprintf>
 8008b46:	e016      	b.n	8008b76 <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008b48:	6823      	ldr	r3, [r4, #0]
 8008b4a:	b11b      	cbz	r3, 8008b54 <udp_input+0x90>
 8008b4c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d106      	bne.n	8008b62 <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8008b54:	7c23      	ldrb	r3, [r4, #16]
 8008b56:	f013 0f04 	tst.w	r3, #4
 8008b5a:	d025      	beq.n	8008ba8 <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 8008b5c:	8aa3      	ldrh	r3, [r4, #20]
 8008b5e:	4553      	cmp	r3, sl
 8008b60:	d038      	beq.n	8008bd4 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b62:	68e3      	ldr	r3, [r4, #12]
 8008b64:	9403      	str	r4, [sp, #12]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d051      	beq.n	8008c0e <udp_input+0x14a>
 8008b6a:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 8008b6c:	8a63      	ldrh	r3, [r4, #18]
 8008b6e:	42ab      	cmp	r3, r5
 8008b70:	d1f7      	bne.n	8008b62 <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8008b72:	2e00      	cmp	r6, #0
 8008b74:	d0e1      	beq.n	8008b3a <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b76:	7a22      	ldrb	r2, [r4, #8]
 8008b78:	b13a      	cbz	r2, 8008b8a <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008b7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008b7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b82:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d1eb      	bne.n	8008b62 <udp_input+0x9e>
    if (broadcast != 0) {
 8008b8a:	2f00      	cmp	r7, #0
 8008b8c:	d0dc      	beq.n	8008b48 <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d0df      	beq.n	8008b54 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008b94:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008b98:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008b9c:	d0da      	beq.n	8008b54 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008b9e:	4053      	eors	r3, r2
 8008ba0:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008ba2:	4213      	tst	r3, r2
 8008ba4:	d1dd      	bne.n	8008b62 <udp_input+0x9e>
 8008ba6:	e7d5      	b.n	8008b54 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 8008ba8:	f1bb 0f00 	cmp.w	fp, #0
 8008bac:	d010      	beq.n	8008bd0 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8008bae:	2f00      	cmp	r7, #0
 8008bb0:	d0d4      	beq.n	8008b5c <udp_input+0x98>
 8008bb2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bba:	d1cf      	bne.n	8008b5c <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8008bbc:	6873      	ldr	r3, [r6, #4]
 8008bbe:	f8db 2000 	ldr.w	r2, [fp]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	d0ca      	beq.n	8008b5c <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	bf08      	it	eq
 8008bcc:	46a3      	moveq	fp, r4
 8008bce:	e7c5      	b.n	8008b5c <udp_input+0x98>
 8008bd0:	46a3      	mov	fp, r4
 8008bd2:	e7c3      	b.n	8008b5c <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008bd4:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 8008bd6:	b11b      	cbz	r3, 8008be0 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008bd8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d1c0      	bne.n	8008b62 <udp_input+0x9e>
        if (prev != NULL) {
 8008be0:	9a03      	ldr	r2, [sp, #12]
 8008be2:	b12a      	cbz	r2, 8008bf0 <udp_input+0x12c>
          prev->next = pcb->next;
 8008be4:	68e3      	ldr	r3, [r4, #12]
 8008be6:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 8008be8:	4b26      	ldr	r3, [pc, #152]	; (8008c84 <udp_input+0x1c0>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 8008bee:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008bf0:	2108      	movs	r1, #8
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	f7fb fb3e 	bl	8004274 <pbuf_remove_header>
 8008bf8:	bb08      	cbnz	r0, 8008c3e <udp_input+0x17a>
      if (pcb->recv != NULL) {
 8008bfa:	69a5      	ldr	r5, [r4, #24]
 8008bfc:	b355      	cbz	r5, 8008c54 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008bfe:	69e0      	ldr	r0, [r4, #28]
 8008c00:	f8cd a000 	str.w	sl, [sp]
 8008c04:	4b25      	ldr	r3, [pc, #148]	; (8008c9c <udp_input+0x1d8>)
 8008c06:	464a      	mov	r2, r9
 8008c08:	4621      	mov	r1, r4
 8008c0a:	47a8      	blx	r5
 8008c0c:	e792      	b.n	8008b34 <udp_input+0x70>
  if (pcb != NULL) {
 8008c0e:	f1bb 0f00 	cmp.w	fp, #0
 8008c12:	d133      	bne.n	8008c7c <udp_input+0x1b8>
  if (for_us) {
 8008c14:	6872      	ldr	r2, [r6, #4]
 8008c16:	4b1a      	ldr	r3, [pc, #104]	; (8008c80 <udp_input+0x1bc>)
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d12a      	bne.n	8008c74 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008c1e:	2108      	movs	r1, #8
 8008c20:	4648      	mov	r0, r9
 8008c22:	f7fb fb27 	bl	8004274 <pbuf_remove_header>
 8008c26:	b950      	cbnz	r0, 8008c3e <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008c28:	b92f      	cbnz	r7, 8008c36 <udp_input+0x172>
 8008c2a:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <udp_input+0x1bc>)
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008c32:	2be0      	cmp	r3, #224	; 0xe0
 8008c34:	d112      	bne.n	8008c5c <udp_input+0x198>
      pbuf_free(p);
 8008c36:	4648      	mov	r0, r9
 8008c38:	f7fb fb5c 	bl	80042f4 <pbuf_free>
 8008c3c:	e77a      	b.n	8008b34 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8008c3e:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <udp_input+0x1c4>)
 8008c40:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8008c44:	4916      	ldr	r1, [pc, #88]	; (8008ca0 <udp_input+0x1dc>)
 8008c46:	4812      	ldr	r0, [pc, #72]	; (8008c90 <udp_input+0x1cc>)
 8008c48:	f001 fcfa 	bl	800a640 <iprintf>
      pbuf_free(p);
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	f7fb fb51 	bl	80042f4 <pbuf_free>
      goto end;
 8008c52:	e76f      	b.n	8008b34 <udp_input+0x70>
        pbuf_free(p);
 8008c54:	4648      	mov	r0, r9
 8008c56:	f7fb fb4d 	bl	80042f4 <pbuf_free>
        goto end;
 8008c5a:	e76b      	b.n	8008b34 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008c5c:	4b08      	ldr	r3, [pc, #32]	; (8008c80 <udp_input+0x1bc>)
 8008c5e:	8999      	ldrh	r1, [r3, #12]
 8008c60:	3108      	adds	r1, #8
 8008c62:	b209      	sxth	r1, r1
 8008c64:	4648      	mov	r0, r9
 8008c66:	f7fb fb39 	bl	80042dc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008c6a:	2103      	movs	r1, #3
 8008c6c:	4648      	mov	r0, r9
 8008c6e:	f000 fd51 	bl	8009714 <icmp_dest_unreach>
 8008c72:	e7e0      	b.n	8008c36 <udp_input+0x172>
    pbuf_free(p);
 8008c74:	4648      	mov	r0, r9
 8008c76:	f7fb fb3d 	bl	80042f4 <pbuf_free>
  return;
 8008c7a:	e75b      	b.n	8008b34 <udp_input+0x70>
 8008c7c:	465c      	mov	r4, fp
 8008c7e:	e7b7      	b.n	8008bf0 <udp_input+0x12c>
 8008c80:	20005274 	.word	0x20005274
 8008c84:	2000aa0c 	.word	0x2000aa0c
 8008c88:	0800d560 	.word	0x0800d560
 8008c8c:	0800d590 	.word	0x0800d590
 8008c90:	0800baa0 	.word	0x0800baa0
 8008c94:	0800d5a8 	.word	0x0800d5a8
 8008c98:	0800d5c4 	.word	0x0800d5c4
 8008c9c:	20005284 	.word	0x20005284
 8008ca0:	0800d5ec 	.word	0x0800d5ec

08008ca4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8008ca4:	b1a8      	cbz	r0, 8008cd2 <udp_netif_ip_addr_changed+0x2e>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	6803      	ldr	r3, [r0, #0]
 8008caa:	b193      	cbz	r3, 8008cd2 <udp_netif_ip_addr_changed+0x2e>
 8008cac:	b189      	cbz	r1, 8008cd2 <udp_netif_ip_addr_changed+0x2e>
 8008cae:	680b      	ldr	r3, [r1, #0]
 8008cb0:	b17b      	cbz	r3, 8008cd2 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008cb2:	4b08      	ldr	r3, [pc, #32]	; (8008cd4 <udp_netif_ip_addr_changed+0x30>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	b163      	cbz	r3, 8008cd2 <udp_netif_ip_addr_changed+0x2e>
{
 8008cb8:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8008cba:	6810      	ldr	r0, [r2, #0]
 8008cbc:	681c      	ldr	r4, [r3, #0]
 8008cbe:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8008cc0:	bf04      	itt	eq
 8008cc2:	6808      	ldreq	r0, [r1, #0]
 8008cc4:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1f6      	bne.n	8008cba <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 8008ccc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	4770      	bx	lr
 8008cd4:	2000aa0c 	.word	0x2000aa0c

08008cd8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8008cdc:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8008ce0:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <etharp_free_entry+0x30>)
 8008ce2:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8008ce6:	b138      	cbz	r0, 8008cf8 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8008ce8:	f7fb fb04 	bl	80042f4 <pbuf_free>
    arp_table[i].q = NULL;
 8008cec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008cf0:	00db      	lsls	r3, r3, #3
 8008cf2:	4a05      	ldr	r2, [pc, #20]	; (8008d08 <etharp_free_entry+0x30>)
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8008cf8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8008cfc:	4802      	ldr	r0, [pc, #8]	; (8008d08 <etharp_free_entry+0x30>)
 8008cfe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8008d02:	2300      	movs	r3, #0
 8008d04:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8008d06:	bd10      	pop	{r4, pc}
 8008d08:	2000aa10 	.word	0x2000aa10

08008d0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8008d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d10:	b085      	sub	sp, #20
 8008d12:	4606      	mov	r6, r0
 8008d14:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008d16:	4c4f      	ldr	r4, [pc, #316]	; (8008e54 <etharp_find_entry+0x148>)
{
 8008d18:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8008d1a:	4699      	mov	r9, r3
 8008d1c:	9302      	str	r3, [sp, #8]
 8008d1e:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 8008d20:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 8008d22:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8008d24:	4680      	mov	r8, r0
 8008d26:	9003      	str	r0, [sp, #12]
 8008d28:	4682      	mov	sl, r0
 8008d2a:	9101      	str	r1, [sp, #4]
 8008d2c:	e007      	b.n	8008d3e <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008d2e:	f1bc 0f00 	cmp.w	ip, #0
 8008d32:	d10e      	bne.n	8008d52 <etharp_find_entry+0x46>
 8008d34:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008d36:	3301      	adds	r3, #1
 8008d38:	3418      	adds	r4, #24
 8008d3a:	2b0a      	cmp	r3, #10
 8008d3c:	d02e      	beq.n	8008d9c <etharp_find_entry+0x90>
 8008d3e:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 8008d42:	4622      	mov	r2, r4
 8008d44:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8008d48:	2d0a      	cmp	r5, #10
 8008d4a:	d0f0      	beq.n	8008d2e <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 8008d4c:	f1bc 0f00 	cmp.w	ip, #0
 8008d50:	d0f1      	beq.n	8008d36 <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8008d52:	b11e      	cbz	r6, 8008d5c <etharp_find_entry+0x50>
 8008d54:	6831      	ldr	r1, [r6, #0]
 8008d56:	6850      	ldr	r0, [r2, #4]
 8008d58:	4281      	cmp	r1, r0
 8008d5a:	d008      	beq.n	8008d6e <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8008d5c:	f1bc 0f01 	cmp.w	ip, #1
 8008d60:	d00c      	beq.n	8008d7c <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8008d62:	8a52      	ldrh	r2, [r2, #18]
 8008d64:	454a      	cmp	r2, r9
 8008d66:	d3e6      	bcc.n	8008d36 <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 8008d68:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 8008d6a:	46f0      	mov	r8, lr
 8008d6c:	e7e3      	b.n	8008d36 <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8008d6e:	2f00      	cmp	r7, #0
 8008d70:	d064      	beq.n	8008e3c <etharp_find_entry+0x130>
 8008d72:	6891      	ldr	r1, [r2, #8]
 8008d74:	42b9      	cmp	r1, r7
 8008d76:	d1f1      	bne.n	8008d5c <etharp_find_entry+0x50>
 8008d78:	4675      	mov	r5, lr
 8008d7a:	e031      	b.n	8008de0 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 8008d7c:	6811      	ldr	r1, [r2, #0]
 8008d7e:	b129      	cbz	r1, 8008d8c <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 8008d80:	8a52      	ldrh	r2, [r2, #18]
 8008d82:	455a      	cmp	r2, fp
 8008d84:	d3d7      	bcc.n	8008d36 <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 8008d86:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 8008d88:	46f2      	mov	sl, lr
 8008d8a:	e7d4      	b.n	8008d36 <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 8008d8c:	8a52      	ldrh	r2, [r2, #18]
 8008d8e:	9902      	ldr	r1, [sp, #8]
 8008d90:	428a      	cmp	r2, r1
 8008d92:	d3d0      	bcc.n	8008d36 <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 8008d94:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 8008d96:	f8cd e00c 	str.w	lr, [sp, #12]
 8008d9a:	e7cc      	b.n	8008d36 <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	9901      	ldr	r1, [sp, #4]
 8008da0:	f011 0f02 	tst.w	r1, #2
 8008da4:	d14c      	bne.n	8008e40 <etharp_find_entry+0x134>
 8008da6:	2d0a      	cmp	r5, #10
 8008da8:	d01e      	beq.n	8008de8 <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8008daa:	2d09      	cmp	r5, #9
 8008dac:	dc1f      	bgt.n	8008dee <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008dae:	462c      	mov	r4, r5
 8008db0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8008db4:	4a27      	ldr	r2, [pc, #156]	; (8008e54 <etharp_find_entry+0x148>)
 8008db6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dba:	7d1b      	ldrb	r3, [r3, #20]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d135      	bne.n	8008e2c <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8008dc0:	b136      	cbz	r6, 8008dd0 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8008dc2:	6831      	ldr	r1, [r6, #0]
 8008dc4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008dc8:	4a22      	ldr	r2, [pc, #136]	; (8008e54 <etharp_find_entry+0x148>)
 8008dca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008dce:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8008dd0:	4b20      	ldr	r3, [pc, #128]	; (8008e54 <etharp_find_entry+0x148>)
 8008dd2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8008dd6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008dda:	2100      	movs	r1, #0
 8008ddc:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8008dde:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8008de0:	4628      	mov	r0, r5
 8008de2:	b005      	add	sp, #20
 8008de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8008de8:	f011 0f01 	tst.w	r1, #1
 8008dec:	d02b      	beq.n	8008e46 <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 8008dee:	f1b8 0f09 	cmp.w	r8, #9
 8008df2:	dc11      	bgt.n	8008e18 <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8008df4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8008df8:	4a16      	ldr	r2, [pc, #88]	; (8008e54 <etharp_find_entry+0x148>)
 8008dfa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008dfe:	b133      	cbz	r3, 8008e0e <etharp_find_entry+0x102>
 8008e00:	4b15      	ldr	r3, [pc, #84]	; (8008e58 <etharp_find_entry+0x14c>)
 8008e02:	f240 126d 	movw	r2, #365	; 0x16d
 8008e06:	4915      	ldr	r1, [pc, #84]	; (8008e5c <etharp_find_entry+0x150>)
 8008e08:	4815      	ldr	r0, [pc, #84]	; (8008e60 <etharp_find_entry+0x154>)
 8008e0a:	f001 fc19 	bl	800a640 <iprintf>
    etharp_free_entry(i);
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f7ff ff62 	bl	8008cd8 <etharp_free_entry>
 8008e14:	4645      	mov	r5, r8
 8008e16:	e7ca      	b.n	8008dae <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8008e18:	9b03      	ldr	r3, [sp, #12]
 8008e1a:	2b09      	cmp	r3, #9
 8008e1c:	dd16      	ble.n	8008e4c <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008e1e:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 8008e20:	bfc8      	it	gt
 8008e22:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 8008e26:	dcdb      	bgt.n	8008de0 <etharp_find_entry+0xd4>
 8008e28:	4680      	mov	r8, r0
 8008e2a:	e7f0      	b.n	8008e0e <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <etharp_find_entry+0x14c>)
 8008e2e:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8008e32:	490c      	ldr	r1, [pc, #48]	; (8008e64 <etharp_find_entry+0x158>)
 8008e34:	480a      	ldr	r0, [pc, #40]	; (8008e60 <etharp_find_entry+0x154>)
 8008e36:	f001 fc03 	bl	800a640 <iprintf>
 8008e3a:	e7c1      	b.n	8008dc0 <etharp_find_entry+0xb4>
 8008e3c:	4675      	mov	r5, lr
 8008e3e:	e7cf      	b.n	8008de0 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 8008e40:	f04f 35ff 	mov.w	r5, #4294967295
 8008e44:	e7cc      	b.n	8008de0 <etharp_find_entry+0xd4>
 8008e46:	f04f 35ff 	mov.w	r5, #4294967295
 8008e4a:	e7c9      	b.n	8008de0 <etharp_find_entry+0xd4>
 8008e4c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e50:	e7dd      	b.n	8008e0e <etharp_find_entry+0x102>
 8008e52:	bf00      	nop
 8008e54:	2000aa10 	.word	0x2000aa10
 8008e58:	0800d608 	.word	0x0800d608
 8008e5c:	0800d640 	.word	0x0800d640
 8008e60:	0800baa0 	.word	0x0800baa0
 8008e64:	0800d658 	.word	0x0800d658

08008e68 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8008e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6c:	b082      	sub	sp, #8
 8008e6e:	460f      	mov	r7, r1
 8008e70:	4690      	mov	r8, r2
 8008e72:	461d      	mov	r5, r3
 8008e74:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008e78:	4681      	mov	r9, r0
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d042      	beq.n	8008f04 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8008e7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8008e82:	211c      	movs	r1, #28
 8008e84:	200e      	movs	r0, #14
 8008e86:	f7fb fa9f 	bl	80043c8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d051      	beq.n	8008f34 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008e90:	8943      	ldrh	r3, [r0, #10]
 8008e92:	2b1b      	cmp	r3, #27
 8008e94:	d93e      	bls.n	8008f14 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8008e96:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8008e98:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8008e9c:	f7fa fc5d 	bl	800375a <lwip_htons>
 8008ea0:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008ea2:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 8008ea6:	2b06      	cmp	r3, #6
 8008ea8:	d13c      	bne.n	8008f24 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	60a3      	str	r3, [r4, #8]
 8008eae:	88ab      	ldrh	r3, [r5, #4]
 8008eb0:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8008eb2:	f8da 3000 	ldr.w	r3, [sl]
 8008eb6:	f8c4 3012 	str.w	r3, [r4, #18]
 8008eba:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8008ebe:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8008ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8008ec8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8008ece:	2500      	movs	r5, #0
 8008ed0:	7025      	strb	r5, [r4, #0]
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8008ed6:	2308      	movs	r3, #8
 8008ed8:	70a3      	strb	r3, [r4, #2]
 8008eda:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8008edc:	2306      	movs	r3, #6
 8008ede:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8008ee4:	f640 0306 	movw	r3, #2054	; 0x806
 8008ee8:	9300      	str	r3, [sp, #0]
 8008eea:	4643      	mov	r3, r8
 8008eec:	463a      	mov	r2, r7
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4648      	mov	r0, r9
 8008ef2:	f001 fb09 	bl	800a508 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	f7fb f9fc 	bl	80042f4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8008efc:	4628      	mov	r0, r5
}
 8008efe:	b002      	add	sp, #8
 8008f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8008f04:	4b0d      	ldr	r3, [pc, #52]	; (8008f3c <etharp_raw+0xd4>)
 8008f06:	f240 4257 	movw	r2, #1111	; 0x457
 8008f0a:	490d      	ldr	r1, [pc, #52]	; (8008f40 <etharp_raw+0xd8>)
 8008f0c:	480d      	ldr	r0, [pc, #52]	; (8008f44 <etharp_raw+0xdc>)
 8008f0e:	f001 fb97 	bl	800a640 <iprintf>
 8008f12:	e7b4      	b.n	8008e7e <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8008f14:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <etharp_raw+0xd4>)
 8008f16:	f240 4262 	movw	r2, #1122	; 0x462
 8008f1a:	490b      	ldr	r1, [pc, #44]	; (8008f48 <etharp_raw+0xe0>)
 8008f1c:	4809      	ldr	r0, [pc, #36]	; (8008f44 <etharp_raw+0xdc>)
 8008f1e:	f001 fb8f 	bl	800a640 <iprintf>
 8008f22:	e7b8      	b.n	8008e96 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <etharp_raw+0xd4>)
 8008f26:	f240 4269 	movw	r2, #1129	; 0x469
 8008f2a:	4908      	ldr	r1, [pc, #32]	; (8008f4c <etharp_raw+0xe4>)
 8008f2c:	4805      	ldr	r0, [pc, #20]	; (8008f44 <etharp_raw+0xdc>)
 8008f2e:	f001 fb87 	bl	800a640 <iprintf>
 8008f32:	e7ba      	b.n	8008eaa <etharp_raw+0x42>
    return ERR_MEM;
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	e7e1      	b.n	8008efe <etharp_raw+0x96>
 8008f3a:	bf00      	nop
 8008f3c:	0800d608 	.word	0x0800d608
 8008f40:	0800bb04 	.word	0x0800bb04
 8008f44:	0800baa0 	.word	0x0800baa0
 8008f48:	0800d684 	.word	0x0800d684
 8008f4c:	0800d6b8 	.word	0x0800d6b8

08008f50 <etharp_cleanup_netif>:
{
 8008f50:	b570      	push	{r4, r5, r6, lr}
 8008f52:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8008f54:	4c08      	ldr	r4, [pc, #32]	; (8008f78 <etharp_cleanup_netif+0x28>)
 8008f56:	2500      	movs	r5, #0
 8008f58:	e003      	b.n	8008f62 <etharp_cleanup_netif+0x12>
 8008f5a:	3501      	adds	r5, #1
 8008f5c:	3418      	adds	r4, #24
 8008f5e:	2d0a      	cmp	r5, #10
 8008f60:	d009      	beq.n	8008f76 <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8008f62:	7d23      	ldrb	r3, [r4, #20]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f8      	beq.n	8008f5a <etharp_cleanup_netif+0xa>
 8008f68:	68a3      	ldr	r3, [r4, #8]
 8008f6a:	42b3      	cmp	r3, r6
 8008f6c:	d1f5      	bne.n	8008f5a <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7ff feb2 	bl	8008cd8 <etharp_free_entry>
 8008f74:	e7f1      	b.n	8008f5a <etharp_cleanup_netif+0xa>
}
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
 8008f78:	2000aa10 	.word	0x2000aa10

08008f7c <etharp_input>:
{
 8008f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f80:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008f82:	b1a9      	cbz	r1, 8008fb0 <etharp_input+0x34>
 8008f84:	4604      	mov	r4, r0
 8008f86:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 8008f88:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8008f8a:	882b      	ldrh	r3, [r5, #0]
 8008f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f90:	d108      	bne.n	8008fa4 <etharp_input+0x28>
 8008f92:	792b      	ldrb	r3, [r5, #4]
 8008f94:	2b06      	cmp	r3, #6
 8008f96:	d105      	bne.n	8008fa4 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8008f98:	796b      	ldrb	r3, [r5, #5]
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	d102      	bne.n	8008fa4 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8008f9e:	886b      	ldrh	r3, [r5, #2]
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d00d      	beq.n	8008fc0 <etharp_input+0x44>
    pbuf_free(p);
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	f7fb f9a5 	bl	80042f4 <pbuf_free>
}
 8008faa:	b007      	add	sp, #28
 8008fac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8008fb0:	4b44      	ldr	r3, [pc, #272]	; (80090c4 <etharp_input+0x148>)
 8008fb2:	f240 228a 	movw	r2, #650	; 0x28a
 8008fb6:	4944      	ldr	r1, [pc, #272]	; (80090c8 <etharp_input+0x14c>)
 8008fb8:	4844      	ldr	r0, [pc, #272]	; (80090cc <etharp_input+0x150>)
 8008fba:	f001 fb41 	bl	800a640 <iprintf>
 8008fbe:	e7f4      	b.n	8008faa <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8008fc0:	f8d5 300e 	ldr.w	r3, [r5, #14]
 8008fc4:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8008fc6:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008fc8:	684b      	ldr	r3, [r1, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d153      	bne.n	8009076 <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008fce:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 8008fd2:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8008fd6:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8008fda:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8008fde:	2b06      	cmp	r3, #6
 8008fe0:	d155      	bne.n	800908e <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 8008fe2:	9805      	ldr	r0, [sp, #20]
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	d03e      	beq.n	8009066 <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008fe8:	4631      	mov	r1, r6
 8008fea:	f000 fd5c 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d139      	bne.n	8009066 <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 8008ff2:	9b05      	ldr	r3, [sp, #20]
 8008ff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8008ff8:	2be0      	cmp	r3, #224	; 0xe0
 8008ffa:	d034      	beq.n	8009066 <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	4641      	mov	r1, r8
 8009000:	a805      	add	r0, sp, #20
 8009002:	f7ff fe83 	bl	8008d0c <etharp_find_entry>
  if (i < 0) {
 8009006:	1e03      	subs	r3, r0, #0
 8009008:	db2d      	blt.n	8009066 <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800900a:	4931      	ldr	r1, [pc, #196]	; (80090d0 <etharp_input+0x154>)
 800900c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 8009010:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 8009014:	2202      	movs	r2, #2
 8009016:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 800901a:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800901e:	4672      	mov	r2, lr
 8009020:	00d2      	lsls	r2, r2, #3
 8009022:	320c      	adds	r2, #12
 8009024:	eb01 0802 	add.w	r8, r1, r2
 8009028:	6838      	ldr	r0, [r7, #0]
 800902a:	5088      	str	r0, [r1, r2]
 800902c:	88ba      	ldrh	r2, [r7, #4]
 800902e:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 8009032:	2200      	movs	r2, #0
 8009034:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 8009038:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 800903c:	f1b8 0f00 	cmp.w	r8, #0
 8009040:	d011      	beq.n	8009066 <etharp_input+0xea>
    arp_table[i].q = NULL;
 8009042:	4673      	mov	r3, lr
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	460a      	mov	r2, r1
 8009048:	2100      	movs	r1, #0
 800904a:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800904c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009050:	9300      	str	r3, [sp, #0]
 8009052:	463b      	mov	r3, r7
 8009054:	f106 0226 	add.w	r2, r6, #38	; 0x26
 8009058:	4641      	mov	r1, r8
 800905a:	4630      	mov	r0, r6
 800905c:	f001 fa54 	bl	800a508 <ethernet_output>
    pbuf_free(p);
 8009060:	4640      	mov	r0, r8
 8009062:	f7fb f947 	bl	80042f4 <pbuf_free>
  switch (hdr->opcode) {
 8009066:	88eb      	ldrh	r3, [r5, #6]
 8009068:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800906c:	d017      	beq.n	800909e <etharp_input+0x122>
  pbuf_free(p);
 800906e:	4620      	mov	r0, r4
 8009070:	f7fb f940 	bl	80042f4 <pbuf_free>
 8009074:	e799      	b.n	8008faa <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009076:	f105 0708 	add.w	r7, r5, #8
 800907a:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800907c:	bf19      	ittee	ne
 800907e:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009082:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009086:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800908a:	46c8      	moveq	r8, r9
 800908c:	e7a5      	b.n	8008fda <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800908e:	4b0d      	ldr	r3, [pc, #52]	; (80090c4 <etharp_input+0x148>)
 8009090:	f240 12a9 	movw	r2, #425	; 0x1a9
 8009094:	490f      	ldr	r1, [pc, #60]	; (80090d4 <etharp_input+0x158>)
 8009096:	480d      	ldr	r0, [pc, #52]	; (80090cc <etharp_input+0x150>)
 8009098:	f001 fad2 	bl	800a640 <iprintf>
 800909c:	e7a1      	b.n	8008fe2 <etharp_input+0x66>
      if (for_us) {
 800909e:	f1b9 0f00 	cmp.w	r9, #0
 80090a2:	d0e4      	beq.n	800906e <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80090a4:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 80090a8:	2302      	movs	r3, #2
 80090aa:	9303      	str	r3, [sp, #12]
 80090ac:	ab05      	add	r3, sp, #20
 80090ae:	9302      	str	r3, [sp, #8]
 80090b0:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80090b2:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	460b      	mov	r3, r1
 80090b8:	463a      	mov	r2, r7
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7ff fed4 	bl	8008e68 <etharp_raw>
 80090c0:	e7d5      	b.n	800906e <etharp_input+0xf2>
 80090c2:	bf00      	nop
 80090c4:	0800d608 	.word	0x0800d608
 80090c8:	0800bb04 	.word	0x0800bb04
 80090cc:	0800baa0 	.word	0x0800baa0
 80090d0:	2000aa10 	.word	0x2000aa10
 80090d4:	0800d71c 	.word	0x0800d71c

080090d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80090d8:	b510      	push	{r4, lr}
 80090da:	b084      	sub	sp, #16
 80090dc:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80090de:	f100 0326 	add.w	r3, r0, #38	; 0x26
 80090e2:	2401      	movs	r4, #1
 80090e4:	9403      	str	r4, [sp, #12]
 80090e6:	9102      	str	r1, [sp, #8]
 80090e8:	4904      	ldr	r1, [pc, #16]	; (80090fc <etharp_request+0x24>)
 80090ea:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80090ec:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80090ee:	9200      	str	r2, [sp, #0]
 80090f0:	4a03      	ldr	r2, [pc, #12]	; (8009100 <etharp_request+0x28>)
 80090f2:	4619      	mov	r1, r3
 80090f4:	f7ff feb8 	bl	8008e68 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80090f8:	b004      	add	sp, #16
 80090fa:	bd10      	pop	{r4, pc}
 80090fc:	0800daf0 	.word	0x0800daf0
 8009100:	0800dae8 	.word	0x0800dae8

08009104 <etharp_tmr>:
{
 8009104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009106:	4c14      	ldr	r4, [pc, #80]	; (8009158 <etharp_tmr+0x54>)
 8009108:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800910a:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800910c:	2604      	movs	r6, #4
 800910e:	e008      	b.n	8009122 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009110:	2b04      	cmp	r3, #4
 8009112:	d91b      	bls.n	800914c <etharp_tmr+0x48>
        etharp_free_entry(i);
 8009114:	4628      	mov	r0, r5
 8009116:	f7ff fddf 	bl	8008cd8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800911a:	3501      	adds	r5, #1
 800911c:	3418      	adds	r4, #24
 800911e:	2d0a      	cmp	r5, #10
 8009120:	d018      	beq.n	8009154 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 8009122:	4621      	mov	r1, r4
 8009124:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8009126:	2a00      	cmp	r2, #0
 8009128:	d0f7      	beq.n	800911a <etharp_tmr+0x16>
      arp_table[i].ctime++;
 800912a:	89e3      	ldrh	r3, [r4, #14]
 800912c:	3301      	adds	r3, #1
 800912e:	b29b      	uxth	r3, r3
 8009130:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009132:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009136:	d2ed      	bcs.n	8009114 <etharp_tmr+0x10>
 8009138:	2a01      	cmp	r2, #1
 800913a:	d0e9      	beq.n	8009110 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800913c:	2a03      	cmp	r2, #3
 800913e:	d003      	beq.n	8009148 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8009140:	2a04      	cmp	r2, #4
 8009142:	d1ea      	bne.n	800911a <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8009144:	7427      	strb	r7, [r4, #16]
 8009146:	e7e8      	b.n	800911a <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009148:	7426      	strb	r6, [r4, #16]
 800914a:	e7e6      	b.n	800911a <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800914c:	6860      	ldr	r0, [r4, #4]
 800914e:	f7ff ffc3 	bl	80090d8 <etharp_request>
 8009152:	e7e2      	b.n	800911a <etharp_tmr+0x16>
}
 8009154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009156:	bf00      	nop
 8009158:	2000aa14 	.word	0x2000aa14

0800915c <etharp_output_to_arp_index>:
{
 800915c:	b570      	push	{r4, r5, r6, lr}
 800915e:	b084      	sub	sp, #16
 8009160:	4605      	mov	r5, r0
 8009162:	460e      	mov	r6, r1
 8009164:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8009166:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800916a:	4b32      	ldr	r3, [pc, #200]	; (8009234 <etharp_output_to_arp_index+0xd8>)
 800916c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009170:	7d1b      	ldrb	r3, [r3, #20]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d919      	bls.n	80091aa <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009176:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800917a:	4a2e      	ldr	r2, [pc, #184]	; (8009234 <etharp_output_to_arp_index+0xd8>)
 800917c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009180:	7d1b      	ldrb	r3, [r3, #20]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d019      	beq.n	80091ba <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009186:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800918a:	4b2a      	ldr	r3, [pc, #168]	; (8009234 <etharp_output_to_arp_index+0xd8>)
 800918c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009194:	9300      	str	r3, [sp, #0]
 8009196:	f104 030c 	add.w	r3, r4, #12
 800919a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800919e:	4631      	mov	r1, r6
 80091a0:	4628      	mov	r0, r5
 80091a2:	f001 f9b1 	bl	800a508 <ethernet_output>
}
 80091a6:	b004      	add	sp, #16
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80091aa:	4b23      	ldr	r3, [pc, #140]	; (8009238 <etharp_output_to_arp_index+0xdc>)
 80091ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80091b0:	4922      	ldr	r1, [pc, #136]	; (800923c <etharp_output_to_arp_index+0xe0>)
 80091b2:	4823      	ldr	r0, [pc, #140]	; (8009240 <etharp_output_to_arp_index+0xe4>)
 80091b4:	f001 fa44 	bl	800a640 <iprintf>
 80091b8:	e7dd      	b.n	8009176 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80091ba:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80091be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80091c2:	8a5b      	ldrh	r3, [r3, #18]
 80091c4:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80091c8:	d822      	bhi.n	8009210 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80091ca:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80091ce:	d3da      	bcc.n	8009186 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80091d0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80091d4:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091d6:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80091da:	4a16      	ldr	r2, [pc, #88]	; (8009234 <etharp_output_to_arp_index+0xd8>)
 80091dc:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091e0:	2301      	movs	r3, #1
 80091e2:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80091e4:	3004      	adds	r0, #4
 80091e6:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091e8:	9002      	str	r0, [sp, #8]
 80091ea:	4b16      	ldr	r3, [pc, #88]	; (8009244 <etharp_output_to_arp_index+0xe8>)
 80091ec:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80091ee:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	460b      	mov	r3, r1
 80091f4:	4462      	add	r2, ip
 80091f6:	4628      	mov	r0, r5
 80091f8:	f7ff fe36 	bl	8008e68 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80091fc:	2800      	cmp	r0, #0
 80091fe:	d1c2      	bne.n	8009186 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009200:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009204:	4a0b      	ldr	r2, [pc, #44]	; (8009234 <etharp_output_to_arp_index+0xd8>)
 8009206:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800920a:	2203      	movs	r2, #3
 800920c:	751a      	strb	r2, [r3, #20]
 800920e:	e7ba      	b.n	8009186 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009210:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009214:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009218:	3104      	adds	r1, #4
 800921a:	4628      	mov	r0, r5
 800921c:	f7ff ff5c 	bl	80090d8 <etharp_request>
 8009220:	2800      	cmp	r0, #0
 8009222:	d1b0      	bne.n	8009186 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009224:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009228:	4a02      	ldr	r2, [pc, #8]	; (8009234 <etharp_output_to_arp_index+0xd8>)
 800922a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800922e:	2203      	movs	r2, #3
 8009230:	751a      	strb	r2, [r3, #20]
 8009232:	e7a8      	b.n	8009186 <etharp_output_to_arp_index+0x2a>
 8009234:	2000aa10 	.word	0x2000aa10
 8009238:	0800d608 	.word	0x0800d608
 800923c:	0800d740 	.word	0x0800d740
 8009240:	0800baa0 	.word	0x0800baa0
 8009244:	0800daf0 	.word	0x0800daf0

08009248 <etharp_query>:
{
 8009248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800924c:	b083      	sub	sp, #12
 800924e:	4606      	mov	r6, r0
 8009250:	460d      	mov	r5, r1
 8009252:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009254:	4601      	mov	r1, r0
 8009256:	6828      	ldr	r0, [r5, #0]
 8009258:	f000 fc25 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 800925c:	2800      	cmp	r0, #0
 800925e:	d16b      	bne.n	8009338 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009266:	2ae0      	cmp	r2, #224	; 0xe0
 8009268:	d069      	beq.n	800933e <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 800926a:	2b00      	cmp	r3, #0
 800926c:	d06a      	beq.n	8009344 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800926e:	4632      	mov	r2, r6
 8009270:	2101      	movs	r1, #1
 8009272:	4628      	mov	r0, r5
 8009274:	f7ff fd4a 	bl	8008d0c <etharp_find_entry>
  if (i_err < 0) {
 8009278:	1e04      	subs	r4, r0, #0
 800927a:	db2b      	blt.n	80092d4 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800927c:	b2a3      	uxth	r3, r4
 800927e:	2b7e      	cmp	r3, #126	; 0x7e
 8009280:	d82a      	bhi.n	80092d8 <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 8009282:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009284:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8009288:	4b46      	ldr	r3, [pc, #280]	; (80093a4 <etharp_query+0x15c>)
 800928a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928e:	7d1b      	ldrb	r3, [r3, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	f040 8082 	bne.w	800939a <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009296:	4613      	mov	r3, r2
 8009298:	4a42      	ldr	r2, [pc, #264]	; (80093a4 <etharp_query+0x15c>)
 800929a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800929e:	2201      	movs	r2, #1
 80092a0:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 80092a2:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 80092a4:	4629      	mov	r1, r5
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7ff ff16 	bl	80090d8 <etharp_request>
    if (q == NULL) {
 80092ac:	b36f      	cbz	r7, 800930a <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80092ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80092b2:	4a3c      	ldr	r2, [pc, #240]	; (80093a4 <etharp_query+0x15c>)
 80092b4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092b8:	7d1b      	ldrb	r3, [r3, #20]
 80092ba:	2b01      	cmp	r3, #1
 80092bc:	d814      	bhi.n	80092e8 <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d123      	bne.n	800930a <etharp_query+0xc2>
    while (p) {
 80092c2:	2f00      	cmp	r7, #0
 80092c4:	d044      	beq.n	8009350 <etharp_query+0x108>
    p = q;
 80092c6:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80092c8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80093ac <etharp_query+0x164>
 80092cc:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80093b8 <etharp_query+0x170>
 80092d0:	4e35      	ldr	r6, [pc, #212]	; (80093a8 <etharp_query+0x160>)
 80092d2:	e023      	b.n	800931c <etharp_query+0xd4>
    return (err_t)i_err;
 80092d4:	b260      	sxtb	r0, r4
 80092d6:	e018      	b.n	800930a <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80092d8:	4b34      	ldr	r3, [pc, #208]	; (80093ac <etharp_query+0x164>)
 80092da:	f240 32c1 	movw	r2, #961	; 0x3c1
 80092de:	4934      	ldr	r1, [pc, #208]	; (80093b0 <etharp_query+0x168>)
 80092e0:	4831      	ldr	r0, [pc, #196]	; (80093a8 <etharp_query+0x160>)
 80092e2:	f001 f9ad 	bl	800a640 <iprintf>
 80092e6:	e7cc      	b.n	8009282 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 80092e8:	4b32      	ldr	r3, [pc, #200]	; (80093b4 <etharp_query+0x16c>)
 80092ea:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80092ec:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80092f0:	4b2c      	ldr	r3, [pc, #176]	; (80093a4 <etharp_query+0x15c>)
 80092f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80092fa:	9200      	str	r2, [sp, #0]
 80092fc:	330c      	adds	r3, #12
 80092fe:	f106 0226 	add.w	r2, r6, #38	; 0x26
 8009302:	4639      	mov	r1, r7
 8009304:	4630      	mov	r0, r6
 8009306:	f001 f8ff 	bl	800a508 <ethernet_output>
}
 800930a:	b003      	add	sp, #12
 800930c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 8009310:	7b2b      	ldrb	r3, [r5, #12]
 8009312:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009316:	d128      	bne.n	800936a <etharp_query+0x122>
      p = p->next;
 8009318:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800931a:	b1cd      	cbz	r5, 8009350 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800931c:	896a      	ldrh	r2, [r5, #10]
 800931e:	892b      	ldrh	r3, [r5, #8]
 8009320:	429a      	cmp	r2, r3
 8009322:	d1f5      	bne.n	8009310 <etharp_query+0xc8>
 8009324:	682b      	ldr	r3, [r5, #0]
 8009326:	b1e3      	cbz	r3, 8009362 <etharp_query+0x11a>
 8009328:	464b      	mov	r3, r9
 800932a:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800932e:	4641      	mov	r1, r8
 8009330:	4630      	mov	r0, r6
 8009332:	f001 f985 	bl	800a640 <iprintf>
 8009336:	e7eb      	b.n	8009310 <etharp_query+0xc8>
    return ERR_ARG;
 8009338:	f06f 000f 	mvn.w	r0, #15
 800933c:	e7e5      	b.n	800930a <etharp_query+0xc2>
 800933e:	f06f 000f 	mvn.w	r0, #15
 8009342:	e7e2      	b.n	800930a <etharp_query+0xc2>
 8009344:	f06f 000f 	mvn.w	r0, #15
 8009348:	e7df      	b.n	800930a <etharp_query+0xc2>
      result = ERR_MEM;
 800934a:	f04f 30ff 	mov.w	r0, #4294967295
 800934e:	e7dc      	b.n	800930a <etharp_query+0xc2>
      pbuf_ref(p);
 8009350:	4638      	mov	r0, r7
 8009352:	f7fb f935 	bl	80045c0 <pbuf_ref>
 8009356:	e00f      	b.n	8009378 <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 8009358:	4629      	mov	r1, r5
 800935a:	4630      	mov	r0, r6
 800935c:	f7ff febc 	bl	80090d8 <etharp_request>
    if (q == NULL) {
 8009360:	e7d3      	b.n	800930a <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 8009362:	7b2b      	ldrb	r3, [r5, #12]
 8009364:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009368:	d0f2      	beq.n	8009350 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800936a:	463a      	mov	r2, r7
 800936c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8009370:	200e      	movs	r0, #14
 8009372:	f7fb fad1 	bl	8004918 <pbuf_clone>
 8009376:	4607      	mov	r7, r0
    if (p != NULL) {
 8009378:	2f00      	cmp	r7, #0
 800937a:	d0e6      	beq.n	800934a <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 800937c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009380:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <etharp_query+0x15c>)
 8009382:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009386:	b108      	cbz	r0, 800938c <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 8009388:	f7fa ffb4 	bl	80042f4 <pbuf_free>
      arp_table[i].q = p;
 800938c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8009390:	4a04      	ldr	r2, [pc, #16]	; (80093a4 <etharp_query+0x15c>)
 8009392:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 8009396:	2000      	movs	r0, #0
 8009398:	e7b7      	b.n	800930a <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800939a:	2f00      	cmp	r7, #0
 800939c:	d0dc      	beq.n	8009358 <etharp_query+0x110>
  err_t result = ERR_MEM;
 800939e:	f04f 30ff 	mov.w	r0, #4294967295
 80093a2:	e784      	b.n	80092ae <etharp_query+0x66>
 80093a4:	2000aa10 	.word	0x2000aa10
 80093a8:	0800baa0 	.word	0x0800baa0
 80093ac:	0800d608 	.word	0x0800d608
 80093b0:	0800d770 	.word	0x0800d770
 80093b4:	2000ab00 	.word	0x2000ab00
 80093b8:	0800d780 	.word	0x0800d780

080093bc <etharp_output>:
{
 80093bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093be:	b085      	sub	sp, #20
 80093c0:	460e      	mov	r6, r1
 80093c2:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80093c4:	4605      	mov	r5, r0
 80093c6:	2800      	cmp	r0, #0
 80093c8:	d032      	beq.n	8009430 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 80093ca:	2e00      	cmp	r6, #0
 80093cc:	d038      	beq.n	8009440 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80093ce:	2c00      	cmp	r4, #0
 80093d0:	d03e      	beq.n	8009450 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80093d2:	4629      	mov	r1, r5
 80093d4:	6820      	ldr	r0, [r4, #0]
 80093d6:	f000 fb66 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 80093da:	2800      	cmp	r0, #0
 80093dc:	f040 8082 	bne.w	80094e4 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093e6:	2ae0      	cmp	r2, #224	; 0xe0
 80093e8:	d03a      	beq.n	8009460 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80093ea:	686a      	ldr	r2, [r5, #4]
 80093ec:	405a      	eors	r2, r3
 80093ee:	68a9      	ldr	r1, [r5, #8]
 80093f0:	420a      	tst	r2, r1
 80093f2:	d009      	beq.n	8009408 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 80093f4:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80093f6:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80093fe:	68eb      	ldr	r3, [r5, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d07b      	beq.n	80094fc <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 8009404:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009408:	4b3e      	ldr	r3, [pc, #248]	; (8009504 <etharp_output+0x148>)
 800940a:	781a      	ldrb	r2, [r3, #0]
 800940c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8009410:	4b3d      	ldr	r3, [pc, #244]	; (8009508 <etharp_output+0x14c>)
 8009412:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009416:	7d1b      	ldrb	r3, [r3, #20]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d906      	bls.n	800942a <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800941c:	460b      	mov	r3, r1
 800941e:	493a      	ldr	r1, [pc, #232]	; (8009508 <etharp_output+0x14c>)
 8009420:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	42ab      	cmp	r3, r5
 8009428:	d030      	beq.n	800948c <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800942a:	4b37      	ldr	r3, [pc, #220]	; (8009508 <etharp_output+0x14c>)
{
 800942c:	2000      	movs	r0, #0
 800942e:	e03f      	b.n	80094b0 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009430:	4b36      	ldr	r3, [pc, #216]	; (800950c <etharp_output+0x150>)
 8009432:	f240 321e 	movw	r2, #798	; 0x31e
 8009436:	4936      	ldr	r1, [pc, #216]	; (8009510 <etharp_output+0x154>)
 8009438:	4836      	ldr	r0, [pc, #216]	; (8009514 <etharp_output+0x158>)
 800943a:	f001 f901 	bl	800a640 <iprintf>
 800943e:	e7c4      	b.n	80093ca <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009440:	4b32      	ldr	r3, [pc, #200]	; (800950c <etharp_output+0x150>)
 8009442:	f240 321f 	movw	r2, #799	; 0x31f
 8009446:	4934      	ldr	r1, [pc, #208]	; (8009518 <etharp_output+0x15c>)
 8009448:	4832      	ldr	r0, [pc, #200]	; (8009514 <etharp_output+0x158>)
 800944a:	f001 f8f9 	bl	800a640 <iprintf>
 800944e:	e7be      	b.n	80093ce <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8009450:	4b2e      	ldr	r3, [pc, #184]	; (800950c <etharp_output+0x150>)
 8009452:	f44f 7248 	mov.w	r2, #800	; 0x320
 8009456:	4931      	ldr	r1, [pc, #196]	; (800951c <etharp_output+0x160>)
 8009458:	482e      	ldr	r0, [pc, #184]	; (8009514 <etharp_output+0x158>)
 800945a:	f001 f8f1 	bl	800a640 <iprintf>
 800945e:	e7b8      	b.n	80093d2 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009460:	2301      	movs	r3, #1
 8009462:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009466:	2300      	movs	r3, #0
 8009468:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800946c:	235e      	movs	r3, #94	; 0x5e
 800946e:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009472:	7863      	ldrb	r3, [r4, #1]
 8009474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009478:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800947c:	78a3      	ldrb	r3, [r4, #2]
 800947e:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009482:	78e3      	ldrb	r3, [r4, #3]
 8009484:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8009488:	ab02      	add	r3, sp, #8
 800948a:	e02c      	b.n	80094e6 <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800948c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8009490:	491d      	ldr	r1, [pc, #116]	; (8009508 <etharp_output+0x14c>)
 8009492:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009496:	6821      	ldr	r1, [r4, #0]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	4299      	cmp	r1, r3
 800949c:	d1c5      	bne.n	800942a <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	f7ff fe5b 	bl	800915c <etharp_output_to_arp_index>
 80094a6:	e027      	b.n	80094f8 <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80094a8:	3001      	adds	r0, #1
 80094aa:	3318      	adds	r3, #24
 80094ac:	280a      	cmp	r0, #10
 80094ae:	d013      	beq.n	80094d8 <etharp_output+0x11c>
 80094b0:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80094b2:	f893 c014 	ldrb.w	ip, [r3, #20]
 80094b6:	f1bc 0f01 	cmp.w	ip, #1
 80094ba:	d9f5      	bls.n	80094a8 <etharp_output+0xec>
 80094bc:	6899      	ldr	r1, [r3, #8]
 80094be:	42a9      	cmp	r1, r5
 80094c0:	d1f2      	bne.n	80094a8 <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 80094c2:	6821      	ldr	r1, [r4, #0]
 80094c4:	685f      	ldr	r7, [r3, #4]
 80094c6:	42b9      	cmp	r1, r7
 80094c8:	d1ee      	bne.n	80094a8 <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 80094ca:	4b0e      	ldr	r3, [pc, #56]	; (8009504 <etharp_output+0x148>)
 80094cc:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	f7ff fe43 	bl	800915c <etharp_output_to_arp_index>
 80094d6:	e00f      	b.n	80094f8 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 80094d8:	4632      	mov	r2, r6
 80094da:	4621      	mov	r1, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	f7ff feb3 	bl	8009248 <etharp_query>
 80094e2:	e009      	b.n	80094f8 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 80094e4:	4b0e      	ldr	r3, [pc, #56]	; (8009520 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80094e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094ea:	9200      	str	r2, [sp, #0]
 80094ec:	f105 0226 	add.w	r2, r5, #38	; 0x26
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	f001 f808 	bl	800a508 <ethernet_output>
}
 80094f8:	b005      	add	sp, #20
 80094fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 80094fc:	f06f 0003 	mvn.w	r0, #3
 8009500:	e7fa      	b.n	80094f8 <etharp_output+0x13c>
 8009502:	bf00      	nop
 8009504:	2000ab00 	.word	0x2000ab00
 8009508:	2000aa10 	.word	0x2000aa10
 800950c:	0800d608 	.word	0x0800d608
 8009510:	0800bb04 	.word	0x0800bb04
 8009514:	0800baa0 	.word	0x0800baa0
 8009518:	0800d79c 	.word	0x0800d79c
 800951c:	0800d6fc 	.word	0x0800d6fc
 8009520:	0800dae8 	.word	0x0800dae8

08009524 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8009524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009528:	b086      	sub	sp, #24
 800952a:	4606      	mov	r6, r0
 800952c:	4688      	mov	r8, r1
 800952e:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8009530:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009534:	2124      	movs	r1, #36	; 0x24
 8009536:	2022      	movs	r0, #34	; 0x22
 8009538:	f7fa ff46 	bl	80043c8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800953c:	b3a0      	cbz	r0, 80095a8 <icmp_send_response+0x84>
 800953e:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8009540:	8943      	ldrh	r3, [r0, #10]
 8009542:	2b23      	cmp	r3, #35	; 0x23
 8009544:	d933      	bls.n	80095ae <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8009546:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800954a:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800954c:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 8009550:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 8009552:	2300      	movs	r3, #0
 8009554:	7123      	strb	r3, [r4, #4]
 8009556:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8009558:	71a3      	strb	r3, [r4, #6]
 800955a:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800955c:	686b      	ldr	r3, [r5, #4]
 800955e:	6872      	ldr	r2, [r6, #4]
 8009560:	6816      	ldr	r6, [r2, #0]
 8009562:	6850      	ldr	r0, [r2, #4]
 8009564:	6891      	ldr	r1, [r2, #8]
 8009566:	68d7      	ldr	r7, [r2, #12]
 8009568:	609e      	str	r6, [r3, #8]
 800956a:	60d8      	str	r0, [r3, #12]
 800956c:	6119      	str	r1, [r3, #16]
 800956e:	615f      	str	r7, [r3, #20]
 8009570:	6916      	ldr	r6, [r2, #16]
 8009572:	6950      	ldr	r0, [r2, #20]
 8009574:	6991      	ldr	r1, [r2, #24]
 8009576:	619e      	str	r6, [r3, #24]
 8009578:	61d8      	str	r0, [r3, #28]
 800957a:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800957c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8009580:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8009582:	a805      	add	r0, sp, #20
 8009584:	f000 f8ee 	bl	8009764 <ip4_route>
#endif
  if (netif != NULL) {
 8009588:	b158      	cbz	r0, 80095a2 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800958a:	2100      	movs	r1, #0
 800958c:	70a1      	strb	r1, [r4, #2]
 800958e:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8009590:	9002      	str	r0, [sp, #8]
 8009592:	2301      	movs	r3, #1
 8009594:	9301      	str	r3, [sp, #4]
 8009596:	9100      	str	r1, [sp, #0]
 8009598:	23ff      	movs	r3, #255	; 0xff
 800959a:	aa05      	add	r2, sp, #20
 800959c:	4628      	mov	r0, r5
 800959e:	f000 fa6d 	bl	8009a7c <ip4_output_if>
  }
  pbuf_free(q);
 80095a2:	4628      	mov	r0, r5
 80095a4:	f7fa fea6 	bl	80042f4 <pbuf_free>
}
 80095a8:	b006      	add	sp, #24
 80095aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80095ae:	4b04      	ldr	r3, [pc, #16]	; (80095c0 <icmp_send_response+0x9c>)
 80095b0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80095b4:	4903      	ldr	r1, [pc, #12]	; (80095c4 <icmp_send_response+0xa0>)
 80095b6:	4804      	ldr	r0, [pc, #16]	; (80095c8 <icmp_send_response+0xa4>)
 80095b8:	f001 f842 	bl	800a640 <iprintf>
 80095bc:	e7c3      	b.n	8009546 <icmp_send_response+0x22>
 80095be:	bf00      	nop
 80095c0:	0800d7a8 	.word	0x0800d7a8
 80095c4:	0800d7e0 	.word	0x0800d7e0
 80095c8:	0800baa0 	.word	0x0800baa0

080095cc <icmp_input>:
{
 80095cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095d0:	b085      	sub	sp, #20
 80095d2:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 80095d4:	4b4a      	ldr	r3, [pc, #296]	; (8009700 <icmp_input+0x134>)
 80095d6:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 80095d8:	783b      	ldrb	r3, [r7, #0]
 80095da:	f003 030f 	and.w	r3, r3, #15
 80095de:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80095e2:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 80095e4:	2c13      	cmp	r4, #19
 80095e6:	d915      	bls.n	8009614 <icmp_input+0x48>
 80095e8:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 80095ea:	8943      	ldrh	r3, [r0, #10]
 80095ec:	2b03      	cmp	r3, #3
 80095ee:	d911      	bls.n	8009614 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 80095f0:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b08      	cmp	r3, #8
 80095f6:	d161      	bne.n	80096bc <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80095f8:	4b41      	ldr	r3, [pc, #260]	; (8009700 <icmp_input+0x134>)
 80095fa:	6958      	ldr	r0, [r3, #20]
 80095fc:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8009600:	2be0      	cmp	r3, #224	; 0xe0
 8009602:	d01a      	beq.n	800963a <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009604:	4b3e      	ldr	r3, [pc, #248]	; (8009700 <icmp_input+0x134>)
 8009606:	6819      	ldr	r1, [r3, #0]
 8009608:	f000 fa4d 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 800960c:	b9a8      	cbnz	r0, 800963a <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800960e:	892b      	ldrh	r3, [r5, #8]
 8009610:	2b07      	cmp	r3, #7
 8009612:	d805      	bhi.n	8009620 <icmp_input+0x54>
  pbuf_free(p);
 8009614:	4628      	mov	r0, r5
 8009616:	f7fa fe6d 	bl	80042f4 <pbuf_free>
}
 800961a:	b005      	add	sp, #20
 800961c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8009620:	f108 090e 	add.w	r9, r8, #14
 8009624:	4649      	mov	r1, r9
 8009626:	4628      	mov	r0, r5
 8009628:	f7fa fe1f 	bl	800426a <pbuf_add_header>
 800962c:	2800      	cmp	r0, #0
 800962e:	d03a      	beq.n	80096a6 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8009630:	892a      	ldrh	r2, [r5, #8]
 8009632:	1913      	adds	r3, r2, r4
 8009634:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 8009636:	428a      	cmp	r2, r1
 8009638:	d903      	bls.n	8009642 <icmp_input+0x76>
  pbuf_free(p);
 800963a:	4628      	mov	r0, r5
 800963c:	f7fa fe5a 	bl	80042f4 <pbuf_free>
  return;
 8009640:	e7eb      	b.n	800961a <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8009642:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009646:	200e      	movs	r0, #14
 8009648:	f7fa febe 	bl	80043c8 <pbuf_alloc>
        if (r == NULL) {
 800964c:	4604      	mov	r4, r0
 800964e:	2800      	cmp	r0, #0
 8009650:	d0f3      	beq.n	800963a <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009652:	8942      	ldrh	r2, [r0, #10]
 8009654:	f108 0308 	add.w	r3, r8, #8
 8009658:	429a      	cmp	r2, r3
 800965a:	d313      	bcc.n	8009684 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800965c:	4642      	mov	r2, r8
 800965e:	4639      	mov	r1, r7
 8009660:	6840      	ldr	r0, [r0, #4]
 8009662:	f000 ffbd 	bl	800a5e0 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8009666:	4641      	mov	r1, r8
 8009668:	4620      	mov	r0, r4
 800966a:	f7fa fe03 	bl	8004274 <pbuf_remove_header>
 800966e:	b960      	cbnz	r0, 800968a <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 8009670:	4629      	mov	r1, r5
 8009672:	4620      	mov	r0, r4
 8009674:	f7fa fffa 	bl	800466c <pbuf_copy>
 8009678:	b988      	cbnz	r0, 800969e <icmp_input+0xd2>
        pbuf_free(p);
 800967a:	4628      	mov	r0, r5
 800967c:	f7fa fe3a 	bl	80042f4 <pbuf_free>
        p = r;
 8009680:	4625      	mov	r5, r4
 8009682:	e015      	b.n	80096b0 <icmp_input+0xe4>
          pbuf_free(r);
 8009684:	f7fa fe36 	bl	80042f4 <pbuf_free>
          goto icmperr;
 8009688:	e7d7      	b.n	800963a <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800968a:	4b1e      	ldr	r3, [pc, #120]	; (8009704 <icmp_input+0x138>)
 800968c:	22b6      	movs	r2, #182	; 0xb6
 800968e:	491e      	ldr	r1, [pc, #120]	; (8009708 <icmp_input+0x13c>)
 8009690:	481e      	ldr	r0, [pc, #120]	; (800970c <icmp_input+0x140>)
 8009692:	f000 ffd5 	bl	800a640 <iprintf>
          pbuf_free(r);
 8009696:	4620      	mov	r0, r4
 8009698:	f7fa fe2c 	bl	80042f4 <pbuf_free>
          goto icmperr;
 800969c:	e7cd      	b.n	800963a <icmp_input+0x6e>
          pbuf_free(r);
 800969e:	4620      	mov	r0, r4
 80096a0:	f7fa fe28 	bl	80042f4 <pbuf_free>
          goto icmperr;
 80096a4:	e7c9      	b.n	800963a <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80096a6:	4649      	mov	r1, r9
 80096a8:	4628      	mov	r0, r5
 80096aa:	f7fa fde3 	bl	8004274 <pbuf_remove_header>
 80096ae:	b948      	cbnz	r0, 80096c4 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 80096b0:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80096b2:	4641      	mov	r1, r8
 80096b4:	4628      	mov	r0, r5
 80096b6:	f7fa fdd8 	bl	800426a <pbuf_add_header>
 80096ba:	b150      	cbz	r0, 80096d2 <icmp_input+0x106>
  pbuf_free(p);
 80096bc:	4628      	mov	r0, r5
 80096be:	f7fa fe19 	bl	80042f4 <pbuf_free>
  return;
 80096c2:	e7aa      	b.n	800961a <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80096c4:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <icmp_input+0x138>)
 80096c6:	22c7      	movs	r2, #199	; 0xc7
 80096c8:	4911      	ldr	r1, [pc, #68]	; (8009710 <icmp_input+0x144>)
 80096ca:	4810      	ldr	r0, [pc, #64]	; (800970c <icmp_input+0x140>)
 80096cc:	f000 ffb8 	bl	800a640 <iprintf>
          goto icmperr;
 80096d0:	e7b3      	b.n	800963a <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80096d2:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 80096d4:	490a      	ldr	r1, [pc, #40]	; (8009700 <icmp_input+0x134>)
 80096d6:	694b      	ldr	r3, [r1, #20]
 80096d8:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80096da:	690b      	ldr	r3, [r1, #16]
 80096dc:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80096de:	2200      	movs	r2, #0
 80096e0:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 80096e2:	70a2      	strb	r2, [r4, #2]
 80096e4:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80096e6:	23ff      	movs	r3, #255	; 0xff
 80096e8:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80096ea:	7282      	strb	r2, [r0, #10]
 80096ec:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80096ee:	9602      	str	r6, [sp, #8]
 80096f0:	2001      	movs	r0, #1
 80096f2:	9001      	str	r0, [sp, #4]
 80096f4:	9200      	str	r2, [sp, #0]
 80096f6:	3114      	adds	r1, #20
 80096f8:	4628      	mov	r0, r5
 80096fa:	f000 f9bf 	bl	8009a7c <ip4_output_if>
        if (ret != ERR_OK) {
 80096fe:	e7dd      	b.n	80096bc <icmp_input+0xf0>
 8009700:	20005274 	.word	0x20005274
 8009704:	0800d7a8 	.word	0x0800d7a8
 8009708:	0800d80c 	.word	0x0800d80c
 800970c:	0800baa0 	.word	0x0800baa0
 8009710:	0800d844 	.word	0x0800d844

08009714 <icmp_dest_unreach>:
{
 8009714:	b508      	push	{r3, lr}
 8009716:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8009718:	2103      	movs	r1, #3
 800971a:	f7ff ff03 	bl	8009524 <icmp_send_response>
}
 800971e:	bd08      	pop	{r3, pc}

08009720 <icmp_time_exceeded>:
{
 8009720:	b508      	push	{r3, lr}
 8009722:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8009724:	210b      	movs	r1, #11
 8009726:	f7ff fefd 	bl	8009524 <icmp_send_response>
}
 800972a:	bd08      	pop	{r3, pc}

0800972c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800972c:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800972e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009732:	f013 0f01 	tst.w	r3, #1
 8009736:	d00c      	beq.n	8009752 <ip4_input_accept+0x26>
 8009738:	4601      	mov	r1, r0
 800973a:	6843      	ldr	r3, [r0, #4]
 800973c:	b15b      	cbz	r3, 8009756 <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800973e:	4a08      	ldr	r2, [pc, #32]	; (8009760 <ip4_input_accept+0x34>)
 8009740:	6950      	ldr	r0, [r2, #20]
 8009742:	4283      	cmp	r3, r0
 8009744:	d009      	beq.n	800975a <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8009746:	f000 f9ae 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800974a:	3800      	subs	r0, #0
 800974c:	bf18      	it	ne
 800974e:	2001      	movne	r0, #1
 8009750:	e000      	b.n	8009754 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8009752:	2000      	movs	r0, #0
}
 8009754:	bd08      	pop	{r3, pc}
  return 0;
 8009756:	2000      	movs	r0, #0
 8009758:	e7fc      	b.n	8009754 <ip4_input_accept+0x28>
      return 1;
 800975a:	2001      	movs	r0, #1
 800975c:	e7fa      	b.n	8009754 <ip4_input_accept+0x28>
 800975e:	bf00      	nop
 8009760:	20005274 	.word	0x20005274

08009764 <ip4_route>:
{
 8009764:	b410      	push	{r4}
 8009766:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 8009768:	4b1a      	ldr	r3, [pc, #104]	; (80097d4 <ip4_route+0x70>)
 800976a:	6818      	ldr	r0, [r3, #0]
 800976c:	b9a8      	cbnz	r0, 800979a <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800976e:	4b1a      	ldr	r3, [pc, #104]	; (80097d8 <ip4_route+0x74>)
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	b160      	cbz	r0, 800978e <ip4_route+0x2a>
 8009774:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8009778:	f003 0305 	and.w	r3, r3, #5
 800977c:	2b05      	cmp	r3, #5
 800977e:	d124      	bne.n	80097ca <ip4_route+0x66>
 8009780:	6843      	ldr	r3, [r0, #4]
 8009782:	b323      	cbz	r3, 80097ce <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8009784:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 8009788:	2b7f      	cmp	r3, #127	; 0x7f
 800978a:	bf08      	it	eq
 800978c:	2000      	moveq	r0, #0
}
 800978e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009792:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 8009794:	6800      	ldr	r0, [r0, #0]
 8009796:	2800      	cmp	r0, #0
 8009798:	d0e9      	beq.n	800976e <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800979a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800979e:	f013 0f01 	tst.w	r3, #1
 80097a2:	d0f7      	beq.n	8009794 <ip4_route+0x30>
 80097a4:	f013 0f04 	tst.w	r3, #4
 80097a8:	d0f4      	beq.n	8009794 <ip4_route+0x30>
 80097aa:	6842      	ldr	r2, [r0, #4]
 80097ac:	2a00      	cmp	r2, #0
 80097ae:	d0f1      	beq.n	8009794 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80097b0:	f8dc 1000 	ldr.w	r1, [ip]
 80097b4:	404a      	eors	r2, r1
 80097b6:	6884      	ldr	r4, [r0, #8]
 80097b8:	4222      	tst	r2, r4
 80097ba:	d0e8      	beq.n	800978e <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80097bc:	f013 0f02 	tst.w	r3, #2
 80097c0:	d1e8      	bne.n	8009794 <ip4_route+0x30>
 80097c2:	68c3      	ldr	r3, [r0, #12]
 80097c4:	4299      	cmp	r1, r3
 80097c6:	d1e5      	bne.n	8009794 <ip4_route+0x30>
 80097c8:	e7e1      	b.n	800978e <ip4_route+0x2a>
    return NULL;
 80097ca:	2000      	movs	r0, #0
 80097cc:	e7df      	b.n	800978e <ip4_route+0x2a>
 80097ce:	2000      	movs	r0, #0
 80097d0:	e7dd      	b.n	800978e <ip4_route+0x2a>
 80097d2:	bf00      	nop
 80097d4:	2000a99c 	.word	0x2000a99c
 80097d8:	2000a998 	.word	0x2000a998

080097dc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80097dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097e0:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80097e2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 80097e6:	f898 3000 	ldrb.w	r3, [r8]
 80097ea:	091a      	lsrs	r2, r3, #4
 80097ec:	2a04      	cmp	r2, #4
 80097ee:	d004      	beq.n	80097fa <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80097f0:	f7fa fd80 	bl	80042f4 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80097f4:	2000      	movs	r0, #0
 80097f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fa:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8009804:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8009806:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800980a:	f7f9 ffa6 	bl	800375a <lwip_htons>
 800980e:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 8009810:	8923      	ldrh	r3, [r4, #8]
 8009812:	4283      	cmp	r3, r0
 8009814:	d860      	bhi.n	80098d8 <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8009816:	8963      	ldrh	r3, [r4, #10]
 8009818:	42ab      	cmp	r3, r5
 800981a:	d362      	bcc.n	80098e2 <ip4_input+0x106>
 800981c:	8923      	ldrh	r3, [r4, #8]
 800981e:	42b3      	cmp	r3, r6
 8009820:	d35f      	bcc.n	80098e2 <ip4_input+0x106>
 8009822:	2d13      	cmp	r5, #19
 8009824:	d95d      	bls.n	80098e2 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8009826:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800982a:	4a52      	ldr	r2, [pc, #328]	; (8009974 <ip4_input+0x198>)
 800982c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800982e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8009832:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009838:	2be0      	cmp	r3, #224	; 0xe0
 800983a:	d156      	bne.n	80098ea <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800983c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8009840:	f013 0f01 	tst.w	r3, #1
 8009844:	d068      	beq.n	8009918 <ip4_input+0x13c>
 8009846:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 8009848:	2b00      	cmp	r3, #0
 800984a:	bf14      	ite	ne
 800984c:	463d      	movne	r5, r7
 800984e:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009850:	4639      	mov	r1, r7
 8009852:	4b48      	ldr	r3, [pc, #288]	; (8009974 <ip4_input+0x198>)
 8009854:	6918      	ldr	r0, [r3, #16]
 8009856:	f000 f926 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 800985a:	2800      	cmp	r0, #0
 800985c:	d162      	bne.n	8009924 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800985e:	4b45      	ldr	r3, [pc, #276]	; (8009974 <ip4_input+0x198>)
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8009866:	2be0      	cmp	r3, #224	; 0xe0
 8009868:	d05c      	beq.n	8009924 <ip4_input+0x148>
  if (netif == NULL) {
 800986a:	2d00      	cmp	r5, #0
 800986c:	d05e      	beq.n	800992c <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800986e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8009872:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009876:	b29b      	uxth	r3, r3
 8009878:	b13b      	cbz	r3, 800988a <ip4_input+0xae>
    p = ip4_reass(p);
 800987a:	4620      	mov	r0, r4
 800987c:	f000 fac2 	bl	8009e04 <ip4_reass>
    if (p == NULL) {
 8009880:	4604      	mov	r4, r0
 8009882:	2800      	cmp	r0, #0
 8009884:	d0b6      	beq.n	80097f4 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 8009886:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800988a:	4a3a      	ldr	r2, [pc, #232]	; (8009974 <ip4_input+0x198>)
 800988c:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800988e:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8009890:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8009894:	f898 3000 	ldrb.w	r3, [r8]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80098a0:	4649      	mov	r1, r9
 80098a2:	4620      	mov	r0, r4
 80098a4:	f7fa fce6 	bl	8004274 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 80098a8:	f898 3009 	ldrb.w	r3, [r8, #9]
 80098ac:	2b06      	cmp	r3, #6
 80098ae:	d04e      	beq.n	800994e <ip4_input+0x172>
 80098b0:	2b11      	cmp	r3, #17
 80098b2:	d03f      	beq.n	8009934 <ip4_input+0x158>
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d04f      	beq.n	8009958 <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80098b8:	4629      	mov	r1, r5
 80098ba:	4b2e      	ldr	r3, [pc, #184]	; (8009974 <ip4_input+0x198>)
 80098bc:	6958      	ldr	r0, [r3, #20]
 80098be:	f000 f8f2 	bl	8009aa6 <ip4_addr_isbroadcast_u32>
 80098c2:	b928      	cbnz	r0, 80098d0 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80098c4:	4b2b      	ldr	r3, [pc, #172]	; (8009974 <ip4_input+0x198>)
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80098cc:	2be0      	cmp	r3, #224	; 0xe0
 80098ce:	d148      	bne.n	8009962 <ip4_input+0x186>
        pbuf_free(p);
 80098d0:	4620      	mov	r0, r4
 80098d2:	f7fa fd0f 	bl	80042f4 <pbuf_free>
        break;
 80098d6:	e031      	b.n	800993c <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 80098d8:	4601      	mov	r1, r0
 80098da:	4620      	mov	r0, r4
 80098dc:	f7fa fe04 	bl	80044e8 <pbuf_realloc>
 80098e0:	e799      	b.n	8009816 <ip4_input+0x3a>
    pbuf_free(p);
 80098e2:	4620      	mov	r0, r4
 80098e4:	f7fa fd06 	bl	80042f4 <pbuf_free>
    return ERR_OK;
 80098e8:	e784      	b.n	80097f4 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 80098ea:	4638      	mov	r0, r7
 80098ec:	f7ff ff1e 	bl	800972c <ip4_input_accept>
 80098f0:	b9a0      	cbnz	r0, 800991c <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80098f2:	4b20      	ldr	r3, [pc, #128]	; (8009974 <ip4_input+0x198>)
 80098f4:	7d1b      	ldrb	r3, [r3, #20]
 80098f6:	2b7f      	cmp	r3, #127	; 0x7f
 80098f8:	d012      	beq.n	8009920 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 80098fa:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <ip4_input+0x19c>)
 80098fc:	681d      	ldr	r5, [r3, #0]
 80098fe:	b91d      	cbnz	r5, 8009908 <ip4_input+0x12c>
 8009900:	e7a6      	b.n	8009850 <ip4_input+0x74>
 8009902:	682d      	ldr	r5, [r5, #0]
 8009904:	2d00      	cmp	r5, #0
 8009906:	d0a3      	beq.n	8009850 <ip4_input+0x74>
          if (netif == inp) {
 8009908:	42af      	cmp	r7, r5
 800990a:	d0fa      	beq.n	8009902 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 800990c:	4628      	mov	r0, r5
 800990e:	f7ff ff0d 	bl	800972c <ip4_input_accept>
 8009912:	2800      	cmp	r0, #0
 8009914:	d0f5      	beq.n	8009902 <ip4_input+0x126>
 8009916:	e79b      	b.n	8009850 <ip4_input+0x74>
      netif = NULL;
 8009918:	2500      	movs	r5, #0
 800991a:	e799      	b.n	8009850 <ip4_input+0x74>
      netif = inp;
 800991c:	463d      	mov	r5, r7
 800991e:	e797      	b.n	8009850 <ip4_input+0x74>
      netif = NULL;
 8009920:	2500      	movs	r5, #0
 8009922:	e795      	b.n	8009850 <ip4_input+0x74>
      pbuf_free(p);
 8009924:	4620      	mov	r0, r4
 8009926:	f7fa fce5 	bl	80042f4 <pbuf_free>
      return ERR_OK;
 800992a:	e763      	b.n	80097f4 <ip4_input+0x18>
    pbuf_free(p);
 800992c:	4620      	mov	r0, r4
 800992e:	f7fa fce1 	bl	80042f4 <pbuf_free>
    return ERR_OK;
 8009932:	e75f      	b.n	80097f4 <ip4_input+0x18>
        udp_input(p, inp);
 8009934:	4639      	mov	r1, r7
 8009936:	4620      	mov	r0, r4
 8009938:	f7ff f8c4 	bl	8008ac4 <udp_input>
  ip_data.current_netif = NULL;
 800993c:	4b0d      	ldr	r3, [pc, #52]	; (8009974 <ip4_input+0x198>)
 800993e:	2200      	movs	r2, #0
 8009940:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8009942:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8009944:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8009946:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8009948:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800994a:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800994c:	e752      	b.n	80097f4 <ip4_input+0x18>
        tcp_input(p, inp);
 800994e:	4639      	mov	r1, r7
 8009950:	4620      	mov	r0, r4
 8009952:	f7fc fee3 	bl	800671c <tcp_input>
        break;
 8009956:	e7f1      	b.n	800993c <ip4_input+0x160>
        icmp_input(p, inp);
 8009958:	4639      	mov	r1, r7
 800995a:	4620      	mov	r0, r4
 800995c:	f7ff fe36 	bl	80095cc <icmp_input>
        break;
 8009960:	e7ec      	b.n	800993c <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8009962:	4649      	mov	r1, r9
 8009964:	4620      	mov	r0, r4
 8009966:	f7fa fcb9 	bl	80042dc <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800996a:	2102      	movs	r1, #2
 800996c:	4620      	mov	r0, r4
 800996e:	f7ff fed1 	bl	8009714 <icmp_dest_unreach>
 8009972:	e7ad      	b.n	80098d0 <ip4_input+0xf4>
 8009974:	20005274 	.word	0x20005274
 8009978:	2000a99c 	.word	0x2000a99c

0800997c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800997c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009980:	b083      	sub	sp, #12
 8009982:	4604      	mov	r4, r0
 8009984:	460f      	mov	r7, r1
 8009986:	4616      	mov	r6, r2
 8009988:	4699      	mov	r9, r3
 800998a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800998e:	7b82      	ldrb	r2, [r0, #14]
 8009990:	2a01      	cmp	r2, #1
 8009992:	d13f      	bne.n	8009a14 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8009994:	2e00      	cmp	r6, #0
 8009996:	d050      	beq.n	8009a3a <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8009998:	2114      	movs	r1, #20
 800999a:	4620      	mov	r0, r4
 800999c:	f7fa fc65 	bl	800426a <pbuf_add_header>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d158      	bne.n	8009a56 <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 80099a4:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80099a6:	8963      	ldrh	r3, [r4, #10]
 80099a8:	2b13      	cmp	r3, #19
 80099aa:	d93b      	bls.n	8009a24 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80099ac:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 80099b0:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80099b4:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80099b6:	6833      	ldr	r3, [r6, #0]
 80099b8:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80099ba:	2345      	movs	r3, #69	; 0x45
 80099bc:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 80099be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80099c2:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80099c4:	8920      	ldrh	r0, [r4, #8]
 80099c6:	f7f9 fec8 	bl	800375a <lwip_htons>
 80099ca:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80099cc:	2300      	movs	r3, #0
 80099ce:	71ab      	strb	r3, [r5, #6]
 80099d0:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80099d2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8009a78 <ip4_output_if_src+0xfc>
 80099d6:	f8b9 0000 	ldrh.w	r0, [r9]
 80099da:	f7f9 febe 	bl	800375a <lwip_htons>
 80099de:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80099e0:	f8b9 3000 	ldrh.w	r3, [r9]
 80099e4:	3301      	adds	r3, #1
 80099e6:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 80099ea:	b31f      	cbz	r7, 8009a34 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80099f0:	2300      	movs	r3, #0
 80099f2:	72ab      	strb	r3, [r5, #10]
 80099f4:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80099f6:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 80099fa:	b113      	cbz	r3, 8009a02 <ip4_output_if_src+0x86>
 80099fc:	8922      	ldrh	r2, [r4, #8]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d823      	bhi.n	8009a4a <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8009a02:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8009a06:	4632      	mov	r2, r6
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4798      	blx	r3
}
 8009a0e:	b003      	add	sp, #12
 8009a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8009a14:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <ip4_output_if_src+0xe8>)
 8009a16:	f44f 7255 	mov.w	r2, #852	; 0x354
 8009a1a:	4913      	ldr	r1, [pc, #76]	; (8009a68 <ip4_output_if_src+0xec>)
 8009a1c:	4813      	ldr	r0, [pc, #76]	; (8009a6c <ip4_output_if_src+0xf0>)
 8009a1e:	f000 fe0f 	bl	800a640 <iprintf>
 8009a22:	e7b7      	b.n	8009994 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8009a24:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <ip4_output_if_src+0xe8>)
 8009a26:	f44f 7262 	mov.w	r2, #904	; 0x388
 8009a2a:	4911      	ldr	r1, [pc, #68]	; (8009a70 <ip4_output_if_src+0xf4>)
 8009a2c:	480f      	ldr	r0, [pc, #60]	; (8009a6c <ip4_output_if_src+0xf0>)
 8009a2e:	f000 fe07 	bl	800a640 <iprintf>
 8009a32:	e7bb      	b.n	80099ac <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8009a34:	4b0f      	ldr	r3, [pc, #60]	; (8009a74 <ip4_output_if_src+0xf8>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	e7d9      	b.n	80099ee <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 8009a3a:	8963      	ldrh	r3, [r4, #10]
 8009a3c:	2b13      	cmp	r3, #19
 8009a3e:	d90d      	bls.n	8009a5c <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8009a40:	6863      	ldr	r3, [r4, #4]
 8009a42:	691b      	ldr	r3, [r3, #16]
 8009a44:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8009a46:	ae01      	add	r6, sp, #4
 8009a48:	e7d5      	b.n	80099f6 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 8009a4a:	4632      	mov	r2, r6
 8009a4c:	4641      	mov	r1, r8
 8009a4e:	4620      	mov	r0, r4
 8009a50:	f000 fc02 	bl	800a258 <ip4_frag>
 8009a54:	e7db      	b.n	8009a0e <ip4_output_if_src+0x92>
      return ERR_BUF;
 8009a56:	f06f 0001 	mvn.w	r0, #1
 8009a5a:	e7d8      	b.n	8009a0e <ip4_output_if_src+0x92>
      return ERR_BUF;
 8009a5c:	f06f 0001 	mvn.w	r0, #1
 8009a60:	e7d5      	b.n	8009a0e <ip4_output_if_src+0x92>
 8009a62:	bf00      	nop
 8009a64:	0800d878 	.word	0x0800d878
 8009a68:	0800d8ac 	.word	0x0800d8ac
 8009a6c:	0800baa0 	.word	0x0800baa0
 8009a70:	0800d8b8 	.word	0x0800d8b8
 8009a74:	0800d8e8 	.word	0x0800d8e8
 8009a78:	2000ab02 	.word	0x2000ab02

08009a7c <ip4_output_if>:
{
 8009a7c:	b510      	push	{r4, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 8009a82:	4694      	mov	ip, r2
 8009a84:	b11a      	cbz	r2, 8009a8e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 8009a86:	b109      	cbz	r1, 8009a8c <ip4_output_if+0x10>
 8009a88:	680a      	ldr	r2, [r1, #0]
 8009a8a:	b902      	cbnz	r2, 8009a8e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 8009a8c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8009a8e:	9402      	str	r4, [sp, #8]
 8009a90:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009a94:	9201      	str	r2, [sp, #4]
 8009a96:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8009a9a:	9200      	str	r2, [sp, #0]
 8009a9c:	4662      	mov	r2, ip
 8009a9e:	f7ff ff6d 	bl	800997c <ip4_output_if_src>
}
 8009aa2:	b004      	add	sp, #16
 8009aa4:	bd10      	pop	{r4, pc}

08009aa6 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8009aa6:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8009aa8:	1e42      	subs	r2, r0, #1
 8009aaa:	f112 0f03 	cmn.w	r2, #3
 8009aae:	d813      	bhi.n	8009ad8 <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8009ab0:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 8009ab4:	f010 0002 	ands.w	r0, r0, #2
 8009ab8:	d013      	beq.n	8009ae2 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8009aba:	684a      	ldr	r2, [r1, #4]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d00d      	beq.n	8009adc <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8009ac0:	6889      	ldr	r1, [r1, #8]
 8009ac2:	405a      	eors	r2, r3
 8009ac4:	420a      	tst	r2, r1
 8009ac6:	d10b      	bne.n	8009ae0 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8009ac8:	43c8      	mvns	r0, r1
 8009aca:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8009ace:	4283      	cmp	r3, r0
 8009ad0:	bf14      	ite	ne
 8009ad2:	2000      	movne	r0, #0
 8009ad4:	2001      	moveq	r0, #1
 8009ad6:	4770      	bx	lr
    return 1;
 8009ad8:	2001      	movs	r0, #1
 8009ada:	4770      	bx	lr
    return 0;
 8009adc:	2000      	movs	r0, #0
 8009ade:	4770      	bx	lr
    return 0;
 8009ae0:	2000      	movs	r0, #0
  }
}
 8009ae2:	4770      	bx	lr

08009ae4 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	b085      	sub	sp, #20
 8009aea:	9101      	str	r1, [sp, #4]
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;

  s_addr = ip4_addr_get_u32(addr);
 8009aec:	6803      	ldr	r3, [r0, #0]
 8009aee:	9303      	str	r3, [sp, #12]

  rp = buf;
  ap = (u8_t *)&s_addr;
  for (n = 0; n < 4; n++) {
 8009af0:	f10d 090c 	add.w	r9, sp, #12
 8009af4:	f10d 0b10 	add.w	fp, sp, #16
  rp = buf;
 8009af8:	468e      	mov	lr, r1
  int len = 0;
 8009afa:	f04f 0a00 	mov.w	sl, #0
    i = 0;
    do {
      rem = *ap % (u8_t)10;
 8009afe:	4f24      	ldr	r7, [pc, #144]	; (8009b90 <ip4addr_ntoa_r+0xac>)
 8009b00:	ae02      	add	r6, sp, #8
 8009b02:	f102 0801 	add.w	r8, r2, #1
 8009b06:	f819 4b01 	ldrb.w	r4, [r9], #1
    i = 0;
 8009b0a:	2000      	movs	r0, #0
      rem = *ap % (u8_t)10;
 8009b0c:	fba7 3104 	umull	r3, r1, r7, r4
 8009b10:	08c9      	lsrs	r1, r1, #3
 8009b12:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8009b16:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
      *ap /= (u8_t)10;
 8009b1a:	4625      	mov	r5, r4
 8009b1c:	b2cc      	uxtb	r4, r1
      inv[i++] = (char)('0' + rem);
 8009b1e:	4601      	mov	r1, r0
 8009b20:	3001      	adds	r0, #1
 8009b22:	b2c0      	uxtb	r0, r0
 8009b24:	f101 0c10 	add.w	ip, r1, #16
 8009b28:	44ec      	add	ip, sp
 8009b2a:	3330      	adds	r3, #48	; 0x30
 8009b2c:	f80c 3c08 	strb.w	r3, [ip, #-8]
    } while (*ap);
 8009b30:	2d09      	cmp	r5, #9
 8009b32:	d8eb      	bhi.n	8009b0c <ip4addr_ntoa_r+0x28>
 8009b34:	f809 4c01 	strb.w	r4, [r9, #-1]
    while (i--) {
 8009b38:	b190      	cbz	r0, 8009b60 <ip4addr_ntoa_r+0x7c>
      if (len++ >= buflen) {
 8009b3a:	f10a 0001 	add.w	r0, sl, #1
 8009b3e:	4552      	cmp	r2, sl
 8009b40:	dd21      	ble.n	8009b86 <ip4addr_ntoa_r+0xa2>
 8009b42:	1873      	adds	r3, r6, r1
        return NULL;
      }
      *rp++ = inv[i];
 8009b44:	781c      	ldrb	r4, [r3, #0]
 8009b46:	f80e 4b01 	strb.w	r4, [lr], #1
    while (i--) {
 8009b4a:	42b3      	cmp	r3, r6
 8009b4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b50:	d007      	beq.n	8009b62 <ip4addr_ntoa_r+0x7e>
      if (len++ >= buflen) {
 8009b52:	3001      	adds	r0, #1
 8009b54:	4540      	cmp	r0, r8
 8009b56:	d1f5      	bne.n	8009b44 <ip4addr_ntoa_r+0x60>
        return NULL;
 8009b58:	2000      	movs	r0, #0
    *rp++ = '.';
    ap++;
  }
  *--rp = 0;
  return buf;
}
 8009b5a:	b005      	add	sp, #20
 8009b5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (i--) {
 8009b60:	4650      	mov	r0, sl
    if (len++ >= buflen) {
 8009b62:	f100 0a01 	add.w	sl, r0, #1
 8009b66:	4282      	cmp	r2, r0
 8009b68:	dd0f      	ble.n	8009b8a <ip4addr_ntoa_r+0xa6>
    *rp++ = '.';
 8009b6a:	4673      	mov	r3, lr
 8009b6c:	f04f 012e 	mov.w	r1, #46	; 0x2e
 8009b70:	f803 1b01 	strb.w	r1, [r3], #1
  for (n = 0; n < 4; n++) {
 8009b74:	45d9      	cmp	r9, fp
 8009b76:	d001      	beq.n	8009b7c <ip4addr_ntoa_r+0x98>
    *rp++ = '.';
 8009b78:	469e      	mov	lr, r3
 8009b7a:	e7c4      	b.n	8009b06 <ip4addr_ntoa_r+0x22>
  *--rp = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	f88e 3000 	strb.w	r3, [lr]
  return buf;
 8009b82:	9801      	ldr	r0, [sp, #4]
 8009b84:	e7e9      	b.n	8009b5a <ip4addr_ntoa_r+0x76>
        return NULL;
 8009b86:	2000      	movs	r0, #0
 8009b88:	e7e7      	b.n	8009b5a <ip4addr_ntoa_r+0x76>
      return NULL;
 8009b8a:	2000      	movs	r0, #0
 8009b8c:	e7e5      	b.n	8009b5a <ip4addr_ntoa_r+0x76>
 8009b8e:	bf00      	nop
 8009b90:	cccccccd 	.word	0xcccccccd

08009b94 <ip4addr_ntoa>:
{
 8009b94:	b508      	push	{r3, lr}
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8009b96:	2210      	movs	r2, #16
 8009b98:	4901      	ldr	r1, [pc, #4]	; (8009ba0 <ip4addr_ntoa+0xc>)
 8009b9a:	f7ff ffa3 	bl	8009ae4 <ip4addr_ntoa_r>
}
 8009b9e:	bd08      	pop	{r3, pc}
 8009ba0:	2000ab04 	.word	0x2000ab04

08009ba4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8009ba8:	4b0c      	ldr	r3, [pc, #48]	; (8009bdc <ip_reass_dequeue_datagram+0x38>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4283      	cmp	r3, r0
 8009bae:	d008      	beq.n	8009bc2 <ip_reass_dequeue_datagram+0x1e>
 8009bb0:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009bb2:	b151      	cbz	r1, 8009bca <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8009bb8:	4621      	mov	r1, r4
 8009bba:	2004      	movs	r0, #4
 8009bbc:	f7fa f8dc 	bl	8003d78 <memp_free>
}
 8009bc0:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 8009bc2:	6802      	ldr	r2, [r0, #0]
 8009bc4:	4b05      	ldr	r3, [pc, #20]	; (8009bdc <ip_reass_dequeue_datagram+0x38>)
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	e7f6      	b.n	8009bb8 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8009bca:	4b05      	ldr	r3, [pc, #20]	; (8009be0 <ip_reass_dequeue_datagram+0x3c>)
 8009bcc:	f240 1245 	movw	r2, #325	; 0x145
 8009bd0:	4904      	ldr	r1, [pc, #16]	; (8009be4 <ip_reass_dequeue_datagram+0x40>)
 8009bd2:	4805      	ldr	r0, [pc, #20]	; (8009be8 <ip_reass_dequeue_datagram+0x44>)
 8009bd4:	f000 fd34 	bl	800a640 <iprintf>
 8009bd8:	e7ec      	b.n	8009bb4 <ip_reass_dequeue_datagram+0x10>
 8009bda:	bf00      	nop
 8009bdc:	2000ab18 	.word	0x2000ab18
 8009be0:	0800d8ec 	.word	0x0800d8ec
 8009be4:	0800d928 	.word	0x0800d928
 8009be8:	0800baa0 	.word	0x0800baa0

08009bec <ip_reass_free_complete_datagram>:
{
 8009bec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009bf4:	4281      	cmp	r1, r0
 8009bf6:	d017      	beq.n	8009c28 <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 8009bf8:	f1b9 0f00 	cmp.w	r9, #0
 8009bfc:	d009      	beq.n	8009c12 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8009bfe:	f8d9 3000 	ldr.w	r3, [r9]
 8009c02:	4543      	cmp	r3, r8
 8009c04:	d005      	beq.n	8009c12 <ip_reass_free_complete_datagram+0x26>
 8009c06:	4b34      	ldr	r3, [pc, #208]	; (8009cd8 <ip_reass_free_complete_datagram+0xec>)
 8009c08:	22ad      	movs	r2, #173	; 0xad
 8009c0a:	4934      	ldr	r1, [pc, #208]	; (8009cdc <ip_reass_free_complete_datagram+0xf0>)
 8009c0c:	4834      	ldr	r0, [pc, #208]	; (8009ce0 <ip_reass_free_complete_datagram+0xf4>)
 8009c0e:	f000 fd17 	bl	800a640 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8009c12:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8009c16:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8009c18:	889a      	ldrh	r2, [r3, #4]
 8009c1a:	b162      	cbz	r2, 8009c36 <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 8009c1c:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009c1e:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 8009cd8 <ip_reass_free_complete_datagram+0xec>
 8009c22:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8009cf0 <ip_reass_free_complete_datagram+0x104>
 8009c26:	e03e      	b.n	8009ca6 <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8009c28:	4b2b      	ldr	r3, [pc, #172]	; (8009cd8 <ip_reass_free_complete_datagram+0xec>)
 8009c2a:	22ab      	movs	r2, #171	; 0xab
 8009c2c:	492d      	ldr	r1, [pc, #180]	; (8009ce4 <ip_reass_free_complete_datagram+0xf8>)
 8009c2e:	482c      	ldr	r0, [pc, #176]	; (8009ce0 <ip_reass_free_complete_datagram+0xf4>)
 8009c30:	f000 fd06 	bl	800a640 <iprintf>
 8009c34:	e7e0      	b.n	8009bf8 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8009c3c:	6873      	ldr	r3, [r6, #4]
 8009c3e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8009c42:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8009c46:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8009c4a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605c      	str	r4, [r3, #4]
 8009c52:	6098      	str	r0, [r3, #8]
 8009c54:	60d9      	str	r1, [r3, #12]
 8009c56:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8009c5a:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8009c5c:	2101      	movs	r1, #1
 8009c5e:	4630      	mov	r0, r6
 8009c60:	f7ff fd5e 	bl	8009720 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8009c64:	4630      	mov	r0, r6
 8009c66:	f7fa fc9f 	bl	80045a8 <pbuf_clen>
 8009c6a:	4604      	mov	r4, r0
    pbuf_free(p);
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	f7fa fb41 	bl	80042f4 <pbuf_free>
  p = ipr->p;
 8009c72:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 8009c76:	2e00      	cmp	r6, #0
 8009c78:	d1d1      	bne.n	8009c1e <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 8009c7a:	4649      	mov	r1, r9
 8009c7c:	4640      	mov	r0, r8
 8009c7e:	f7ff ff91 	bl	8009ba4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009c82:	4b19      	ldr	r3, [pc, #100]	; (8009ce8 <ip_reass_free_complete_datagram+0xfc>)
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	42a3      	cmp	r3, r4
 8009c88:	d31f      	bcc.n	8009cca <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8009c8a:	4a17      	ldr	r2, [pc, #92]	; (8009ce8 <ip_reass_free_complete_datagram+0xfc>)
 8009c8c:	8813      	ldrh	r3, [r2, #0]
 8009c8e:	1b1b      	subs	r3, r3, r4
 8009c90:	8013      	strh	r3, [r2, #0]
}
 8009c92:	4620      	mov	r0, r4
 8009c94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8009c98:	4425      	add	r5, r4
 8009c9a:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7fa fb29 	bl	80042f4 <pbuf_free>
  while (p != NULL) {
 8009ca2:	2e00      	cmp	r6, #0
 8009ca4:	d0e9      	beq.n	8009c7a <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 8009ca6:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 8009ca8:	4637      	mov	r7, r6
 8009caa:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 8009cac:	4638      	mov	r0, r7
 8009cae:	f7fa fc7b 	bl	80045a8 <pbuf_clen>
 8009cb2:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8009cb4:	1823      	adds	r3, r4, r0
 8009cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cba:	dbed      	blt.n	8009c98 <ip_reass_free_complete_datagram+0xac>
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	22cc      	movs	r2, #204	; 0xcc
 8009cc0:	4651      	mov	r1, sl
 8009cc2:	4807      	ldr	r0, [pc, #28]	; (8009ce0 <ip_reass_free_complete_datagram+0xf4>)
 8009cc4:	f000 fcbc 	bl	800a640 <iprintf>
 8009cc8:	e7e6      	b.n	8009c98 <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8009cca:	4b03      	ldr	r3, [pc, #12]	; (8009cd8 <ip_reass_free_complete_datagram+0xec>)
 8009ccc:	22d2      	movs	r2, #210	; 0xd2
 8009cce:	4907      	ldr	r1, [pc, #28]	; (8009cec <ip_reass_free_complete_datagram+0x100>)
 8009cd0:	4803      	ldr	r0, [pc, #12]	; (8009ce0 <ip_reass_free_complete_datagram+0xf4>)
 8009cd2:	f000 fcb5 	bl	800a640 <iprintf>
 8009cd6:	e7d8      	b.n	8009c8a <ip_reass_free_complete_datagram+0x9e>
 8009cd8:	0800d8ec 	.word	0x0800d8ec
 8009cdc:	0800d950 	.word	0x0800d950
 8009ce0:	0800baa0 	.word	0x0800baa0
 8009ce4:	0800d944 	.word	0x0800d944
 8009ce8:	2000ab14 	.word	0x2000ab14
 8009cec:	0800d984 	.word	0x0800d984
 8009cf0:	0800d964 	.word	0x0800d964

08009cf4 <ip_reass_remove_oldest_datagram>:
{
 8009cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8009cfc:	2600      	movs	r6, #0
    r = reassdatagrams;
 8009cfe:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8009d70 <ip_reass_remove_oldest_datagram+0x7c>
 8009d02:	e027      	b.n	8009d54 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 8009d04:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8009d06:	b1d0      	cbz	r0, 8009d3e <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 8009d08:	f893 901f 	ldrb.w	r9, [r3, #31]
 8009d0c:	7fc2      	ldrb	r2, [r0, #31]
 8009d0e:	4591      	cmp	r9, r2
 8009d10:	bf98      	it	ls
 8009d12:	4661      	movls	r1, ip
 8009d14:	4591      	cmp	r9, r2
 8009d16:	bf98      	it	ls
 8009d18:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8009d1a:	681a      	ldr	r2, [r3, #0]
 8009d1c:	469c      	mov	ip, r3
 8009d1e:	b18a      	cbz	r2, 8009d44 <ip_reass_remove_oldest_datagram+0x50>
 8009d20:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009d22:	695a      	ldr	r2, [r3, #20]
 8009d24:	4572      	cmp	r2, lr
 8009d26:	d1ed      	bne.n	8009d04 <ip_reass_remove_oldest_datagram+0x10>
 8009d28:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8009d2c:	699a      	ldr	r2, [r3, #24]
 8009d2e:	454a      	cmp	r2, r9
 8009d30:	d1e8      	bne.n	8009d04 <ip_reass_remove_oldest_datagram+0x10>
 8009d32:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8009d36:	88aa      	ldrh	r2, [r5, #4]
 8009d38:	4591      	cmp	r9, r2
 8009d3a:	d1e3      	bne.n	8009d04 <ip_reass_remove_oldest_datagram+0x10>
 8009d3c:	e7ed      	b.n	8009d1a <ip_reass_remove_oldest_datagram+0x26>
 8009d3e:	4661      	mov	r1, ip
 8009d40:	4618      	mov	r0, r3
 8009d42:	e7ea      	b.n	8009d1a <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 8009d44:	b110      	cbz	r0, 8009d4c <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8009d46:	f7ff ff51 	bl	8009bec <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8009d4a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8009d4c:	42be      	cmp	r6, r7
 8009d4e:	da0b      	bge.n	8009d68 <ip_reass_remove_oldest_datagram+0x74>
 8009d50:	2c01      	cmp	r4, #1
 8009d52:	dd09      	ble.n	8009d68 <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 8009d54:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8009d58:	b133      	cbz	r3, 8009d68 <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8009d5a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 8009d5e:	2400      	movs	r4, #0
    oldest_prev = NULL;
 8009d60:	4621      	mov	r1, r4
    prev = NULL;
 8009d62:	46a4      	mov	ip, r4
    oldest = NULL;
 8009d64:	4620      	mov	r0, r4
 8009d66:	e7dc      	b.n	8009d22 <ip_reass_remove_oldest_datagram+0x2e>
}
 8009d68:	4630      	mov	r0, r6
 8009d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	bf00      	nop
 8009d70:	2000ab18 	.word	0x2000ab18

08009d74 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8009d74:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009d76:	4604      	mov	r4, r0
 8009d78:	b120      	cbz	r0, 8009d84 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 8009d7a:	4621      	mov	r1, r4
 8009d7c:	2005      	movs	r0, #5
 8009d7e:	f7f9 fffb 	bl	8003d78 <memp_free>
}
 8009d82:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8009d84:	4b03      	ldr	r3, [pc, #12]	; (8009d94 <ip_frag_free_pbuf_custom_ref+0x20>)
 8009d86:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8009d8a:	4903      	ldr	r1, [pc, #12]	; (8009d98 <ip_frag_free_pbuf_custom_ref+0x24>)
 8009d8c:	4803      	ldr	r0, [pc, #12]	; (8009d9c <ip_frag_free_pbuf_custom_ref+0x28>)
 8009d8e:	f000 fc57 	bl	800a640 <iprintf>
 8009d92:	e7f2      	b.n	8009d7a <ip_frag_free_pbuf_custom_ref+0x6>
 8009d94:	0800d8ec 	.word	0x0800d8ec
 8009d98:	0800c014 	.word	0x0800c014
 8009d9c:	0800baa0 	.word	0x0800baa0

08009da0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8009da0:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009da2:	4604      	mov	r4, r0
 8009da4:	b138      	cbz	r0, 8009db6 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8009da6:	6960      	ldr	r0, [r4, #20]
 8009da8:	b108      	cbz	r0, 8009dae <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8009daa:	f7fa faa3 	bl	80042f4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8009dae:	4620      	mov	r0, r4
 8009db0:	f7ff ffe0 	bl	8009d74 <ip_frag_free_pbuf_custom_ref>
}
 8009db4:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8009db6:	4b04      	ldr	r3, [pc, #16]	; (8009dc8 <ipfrag_free_pbuf_custom+0x28>)
 8009db8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8009dbc:	4903      	ldr	r1, [pc, #12]	; (8009dcc <ipfrag_free_pbuf_custom+0x2c>)
 8009dbe:	4804      	ldr	r0, [pc, #16]	; (8009dd0 <ipfrag_free_pbuf_custom+0x30>)
 8009dc0:	f000 fc3e 	bl	800a640 <iprintf>
 8009dc4:	e7ef      	b.n	8009da6 <ipfrag_free_pbuf_custom+0x6>
 8009dc6:	bf00      	nop
 8009dc8:	0800d8ec 	.word	0x0800d8ec
 8009dcc:	0800d9a8 	.word	0x0800d9a8
 8009dd0:	0800baa0 	.word	0x0800baa0

08009dd4 <ip_reass_tmr>:
{
 8009dd4:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8009dd6:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <ip_reass_tmr+0x2c>)
 8009dd8:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8009dda:	b178      	cbz	r0, 8009dfc <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 8009ddc:	2400      	movs	r4, #0
 8009dde:	e004      	b.n	8009dea <ip_reass_tmr+0x16>
      r->timer--;
 8009de0:	3b01      	subs	r3, #1
 8009de2:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8009de4:	4604      	mov	r4, r0
 8009de6:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 8009de8:	b140      	cbz	r0, 8009dfc <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 8009dea:	7fc3      	ldrb	r3, [r0, #31]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f7      	bne.n	8009de0 <ip_reass_tmr+0xc>
      r = r->next;
 8009df0:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8009df2:	4621      	mov	r1, r4
 8009df4:	f7ff fefa 	bl	8009bec <ip_reass_free_complete_datagram>
      r = r->next;
 8009df8:	4628      	mov	r0, r5
 8009dfa:	e7f5      	b.n	8009de8 <ip_reass_tmr+0x14>
}
 8009dfc:	bd38      	pop	{r3, r4, r5, pc}
 8009dfe:	bf00      	nop
 8009e00:	2000ab18 	.word	0x2000ab18

08009e04 <ip4_reass>:
{
 8009e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	b083      	sub	sp, #12
 8009e0a:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 8009e0c:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8009e10:	f899 3000 	ldrb.w	r3, [r9]
 8009e14:	f003 030f 	and.w	r3, r3, #15
 8009e18:	2b05      	cmp	r3, #5
 8009e1a:	d16e      	bne.n	8009efa <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009e1c:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8009e20:	f7f9 fc9b 	bl	800375a <lwip_htons>
 8009e24:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009e26:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8009e2a:	f7f9 fc96 	bl	800375a <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009e2e:	f899 3000 	ldrb.w	r3, [r9]
 8009e32:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009e36:	009e      	lsls	r6, r3, #2
 8009e38:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8009e3c:	d35d      	bcc.n	8009efa <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 8009e3e:	1b80      	subs	r0, r0, r6
 8009e40:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 8009e42:	4628      	mov	r0, r5
 8009e44:	f7fa fbb0 	bl	80045a8 <pbuf_clen>
 8009e48:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8009e4a:	4ba4      	ldr	r3, [pc, #656]	; (800a0dc <ip4_reass+0x2d8>)
 8009e4c:	881b      	ldrh	r3, [r3, #0]
 8009e4e:	4403      	add	r3, r0
 8009e50:	2b0a      	cmp	r3, #10
 8009e52:	dc07      	bgt.n	8009e64 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009e54:	4ba2      	ldr	r3, [pc, #648]	; (800a0e0 <ip4_reass+0x2dc>)
 8009e56:	681c      	ldr	r4, [r3, #0]
 8009e58:	2c00      	cmp	r4, #0
 8009e5a:	f000 81c7 	beq.w	800a1ec <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009e5e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009e62:	e00f      	b.n	8009e84 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009e64:	4601      	mov	r1, r0
 8009e66:	4648      	mov	r0, r9
 8009e68:	f7ff ff44 	bl	8009cf4 <ip_reass_remove_oldest_datagram>
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d044      	beq.n	8009efa <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8009e70:	4b9a      	ldr	r3, [pc, #616]	; (800a0dc <ip4_reass+0x2d8>)
 8009e72:	881b      	ldrh	r3, [r3, #0]
 8009e74:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8009e76:	2b0a      	cmp	r3, #10
 8009e78:	ddec      	ble.n	8009e54 <ip4_reass+0x50>
 8009e7a:	e03e      	b.n	8009efa <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8009e7c:	6824      	ldr	r4, [r4, #0]
 8009e7e:	2c00      	cmp	r4, #0
 8009e80:	f000 81b4 	beq.w	800a1ec <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d1f8      	bne.n	8009e7c <ip4_reass+0x78>
 8009e8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e8e:	69a1      	ldr	r1, [r4, #24]
 8009e90:	4299      	cmp	r1, r3
 8009e92:	d1f3      	bne.n	8009e7c <ip4_reass+0x78>
 8009e94:	89a1      	ldrh	r1, [r4, #12]
 8009e96:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	d1ee      	bne.n	8009e7c <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009e9e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 8009ea2:	f7f9 fc5a 	bl	800375a <lwip_htons>
 8009ea6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d03b      	beq.n	8009f26 <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009eae:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8009eb2:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8009eb4:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 8009eb8:	f019 0920 	ands.w	r9, r9, #32
 8009ebc:	d107      	bne.n	8009ece <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8009ebe:	19bb      	adds	r3, r7, r6
 8009ec0:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8009ec2:	429f      	cmp	r7, r3
 8009ec4:	d812      	bhi.n	8009eec <ip4_reass+0xe8>
 8009ec6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d80e      	bhi.n	8009eec <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8009ece:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8009ed2:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8009ed6:	f7f9 fc40 	bl	800375a <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8009eda:	f89a 3000 	ldrb.w	r3, [sl]
 8009ede:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8009ee2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8009ee6:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8009eea:	d233      	bcs.n	8009f54 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8009eec:	2c00      	cmp	r4, #0
 8009eee:	f000 814c 	beq.w	800a18a <ip4_reass+0x386>
  if (ipr->p == NULL) {
 8009ef2:	6863      	ldr	r3, [r4, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f000 8150 	beq.w	800a19a <ip4_reass+0x396>
  pbuf_free(p);
 8009efa:	4628      	mov	r0, r5
 8009efc:	f7fa f9fa 	bl	80042f4 <pbuf_free>
  return NULL;
 8009f00:	2500      	movs	r5, #0
}
 8009f02:	4628      	mov	r0, r5
 8009f04:	b003      	add	sp, #12
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8009f0a:	4641      	mov	r1, r8
 8009f0c:	4648      	mov	r0, r9
 8009f0e:	f7ff fef1 	bl	8009cf4 <ip_reass_remove_oldest_datagram>
 8009f12:	4580      	cmp	r8, r0
 8009f14:	dcf1      	bgt.n	8009efa <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8009f16:	2004      	movs	r0, #4
 8009f18:	f7f9 fefe 	bl	8003d18 <memp_malloc>
    if (ipr == NULL)
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	f040 816b 	bne.w	800a1fa <ip4_reass+0x3f6>
 8009f24:	e7e9      	b.n	8009efa <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8009f26:	89e0      	ldrh	r0, [r4, #14]
 8009f28:	f7f9 fc17 	bl	800375a <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8009f2c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8009f30:	2800      	cmp	r0, #0
 8009f32:	d0bc      	beq.n	8009eae <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8009f34:	f8d9 3000 	ldr.w	r3, [r9]
 8009f38:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8009f3c:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8009f40:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8009f44:	60a3      	str	r3, [r4, #8]
 8009f46:	60e0      	str	r0, [r4, #12]
 8009f48:	6121      	str	r1, [r4, #16]
 8009f4a:	6162      	str	r2, [r4, #20]
 8009f4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009f50:	61a3      	str	r3, [r4, #24]
 8009f52:	e7ac      	b.n	8009eae <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 8009f54:	eba0 000b 	sub.w	r0, r0, fp
 8009f58:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 8009f5c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8009f60:	f7f9 fbfb 	bl	800375a <lwip_htons>
 8009f64:	f3c0 020c 	ubfx	r2, r0, #0, #13
 8009f68:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8009f6a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	f88a 3000 	strb.w	r3, [sl]
 8009f74:	f88a 3001 	strb.w	r3, [sl, #1]
 8009f78:	f88a 3002 	strb.w	r3, [sl, #2]
 8009f7c:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 8009f80:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 8009f84:	4493      	add	fp, r2
 8009f86:	fa1f f38b 	uxth.w	r3, fp
 8009f8a:	9301      	str	r3, [sp, #4]
 8009f8c:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d8ab      	bhi.n	8009eec <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8009f94:	6860      	ldr	r0, [r4, #4]
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f000 8120 	beq.w	800a1dc <ip4_reass+0x3d8>
  int valid = 1;
 8009f9c:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	e030      	b.n	800a006 <ip4_reass+0x202>
      iprh->next_pbuf = q;
 8009fa4:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 8009fa8:	f1bc 0f00 	cmp.w	ip, #0
 8009fac:	d020      	beq.n	8009ff0 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8009fae:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 8009fb2:	428a      	cmp	r2, r1
 8009fb4:	d39d      	bcc.n	8009ef2 <ip4_reass+0xee>
 8009fb6:	889b      	ldrh	r3, [r3, #4]
 8009fb8:	9a01      	ldr	r2, [sp, #4]
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d399      	bcc.n	8009ef2 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 8009fbe:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8009fc2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 8009fc6:	428b      	cmp	r3, r1
 8009fc8:	bf18      	it	ne
 8009fca:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8009fce:	f1b9 0f00 	cmp.w	r9, #0
 8009fd2:	d02f      	beq.n	800a034 <ip4_reass+0x230>
 8009fd4:	7fa3      	ldrb	r3, [r4, #30]
 8009fd6:	f013 0f01 	tst.w	r3, #1
 8009fda:	d12b      	bne.n	800a034 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8009fdc:	4a3f      	ldr	r2, [pc, #252]	; (800a0dc <ip4_reass+0x2d8>)
 8009fde:	8813      	ldrh	r3, [r2, #0]
 8009fe0:	4498      	add	r8, r3
 8009fe2:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 8009fe6:	f1b9 0f00 	cmp.w	r9, #0
 8009fea:	d074      	beq.n	800a0d6 <ip4_reass+0x2d2>
  return NULL;
 8009fec:	2500      	movs	r5, #0
 8009fee:	e788      	b.n	8009f02 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 8009ff0:	889b      	ldrh	r3, [r3, #4]
 8009ff2:	9a01      	ldr	r2, [sp, #4]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	f4ff af7c 	bcc.w	8009ef2 <ip4_reass+0xee>
        ipr->p = new_p;
 8009ffa:	6065      	str	r5, [r4, #4]
 8009ffc:	e7e7      	b.n	8009fce <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 8009ffe:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800a000:	2800      	cmp	r0, #0
 800a002:	f000 80da 	beq.w	800a1ba <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800a006:	469c      	mov	ip, r3
 800a008:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800a00a:	8899      	ldrh	r1, [r3, #4]
 800a00c:	428a      	cmp	r2, r1
 800a00e:	d3c9      	bcc.n	8009fa4 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800a010:	428a      	cmp	r2, r1
 800a012:	f43f af6e 	beq.w	8009ef2 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800a016:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800a01a:	455a      	cmp	r2, fp
 800a01c:	f4ff af69 	bcc.w	8009ef2 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800a020:	f1bc 0f00 	cmp.w	ip, #0
 800a024:	d0eb      	beq.n	8009ffe <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800a026:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800a02a:	4288      	cmp	r0, r1
 800a02c:	bf18      	it	ne
 800a02e:	f04f 0e00 	movne.w	lr, #0
 800a032:	e7e4      	b.n	8009ffe <ip4_reass+0x1fa>
    if (valid) {
 800a034:	f1be 0f00 	cmp.w	lr, #0
 800a038:	d02f      	beq.n	800a09a <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	b343      	cbz	r3, 800a090 <ip4_reass+0x28c>
 800a03e:	6859      	ldr	r1, [r3, #4]
 800a040:	888b      	ldrh	r3, [r1, #4]
 800a042:	bb43      	cbnz	r3, 800a096 <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800a044:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800a048:	b15b      	cbz	r3, 800a062 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800a04a:	4652      	mov	r2, sl
 800a04c:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800a050:	88d2      	ldrh	r2, [r2, #6]
 800a052:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a056:	429a      	cmp	r2, r3
 800a058:	d134      	bne.n	800a0c4 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800a05a:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f3      	bne.n	800a04a <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800a062:	458a      	cmp	sl, r1
 800a064:	f040 80e7 	bne.w	800a236 <ip4_reass+0x432>
 800a068:	4b1e      	ldr	r3, [pc, #120]	; (800a0e4 <ip4_reass+0x2e0>)
 800a06a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a06e:	491e      	ldr	r1, [pc, #120]	; (800a0e8 <ip4_reass+0x2e4>)
 800a070:	481e      	ldr	r0, [pc, #120]	; (800a0ec <ip4_reass+0x2e8>)
 800a072:	f000 fae5 	bl	800a640 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800a076:	f8da 3000 	ldr.w	r3, [sl]
 800a07a:	b333      	cbz	r3, 800a0ca <ip4_reass+0x2c6>
 800a07c:	4b19      	ldr	r3, [pc, #100]	; (800a0e4 <ip4_reass+0x2e0>)
 800a07e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800a082:	491b      	ldr	r1, [pc, #108]	; (800a0f0 <ip4_reass+0x2ec>)
 800a084:	4819      	ldr	r0, [pc, #100]	; (800a0ec <ip4_reass+0x2e8>)
 800a086:	f000 fadb 	bl	800a640 <iprintf>
 800a08a:	f04f 0e01 	mov.w	lr, #1
 800a08e:	e004      	b.n	800a09a <ip4_reass+0x296>
        valid = 0;
 800a090:	f04f 0e00 	mov.w	lr, #0
 800a094:	e001      	b.n	800a09a <ip4_reass+0x296>
 800a096:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800a09a:	f1be 0100 	subs.w	r1, lr, #0
 800a09e:	bf18      	it	ne
 800a0a0:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800a0a2:	4a0e      	ldr	r2, [pc, #56]	; (800a0dc <ip4_reass+0x2d8>)
 800a0a4:	8813      	ldrh	r3, [r2, #0]
 800a0a6:	4498      	add	r8, r3
 800a0a8:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800a0ac:	f1b9 0f00 	cmp.w	r9, #0
 800a0b0:	d105      	bne.n	800a0be <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800a0b2:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800a0b4:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800a0b6:	7fa3      	ldrb	r3, [r4, #30]
 800a0b8:	f043 0301 	orr.w	r3, r3, #1
 800a0bc:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800a0be:	b9c9      	cbnz	r1, 800a0f4 <ip4_reass+0x2f0>
  return NULL;
 800a0c0:	2500      	movs	r5, #0
 800a0c2:	e71e      	b.n	8009f02 <ip4_reass+0xfe>
 800a0c4:	f04f 0e00 	mov.w	lr, #0
 800a0c8:	e7e7      	b.n	800a09a <ip4_reass+0x296>
 800a0ca:	f04f 0e01 	mov.w	lr, #1
 800a0ce:	e7e4      	b.n	800a09a <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a0d0:	f04f 0e00 	mov.w	lr, #0
 800a0d4:	e7e1      	b.n	800a09a <ip4_reass+0x296>
  if (is_last) {
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	e7eb      	b.n	800a0b2 <ip4_reass+0x2ae>
 800a0da:	bf00      	nop
 800a0dc:	2000ab14 	.word	0x2000ab14
 800a0e0:	2000ab18 	.word	0x2000ab18
 800a0e4:	0800d8ec 	.word	0x0800d8ec
 800a0e8:	0800d9b4 	.word	0x0800d9b4
 800a0ec:	0800baa0 	.word	0x0800baa0
 800a0f0:	0800d9c4 	.word	0x0800d9c4
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800a0f4:	8ba0      	ldrh	r0, [r4, #28]
 800a0f6:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800a0f8:	6863      	ldr	r3, [r4, #4]
 800a0fa:	685d      	ldr	r5, [r3, #4]
 800a0fc:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800a0fe:	68a3      	ldr	r3, [r4, #8]
 800a100:	68e7      	ldr	r7, [r4, #12]
 800a102:	6921      	ldr	r1, [r4, #16]
 800a104:	6962      	ldr	r2, [r4, #20]
 800a106:	602b      	str	r3, [r5, #0]
 800a108:	606f      	str	r7, [r5, #4]
 800a10a:	60a9      	str	r1, [r5, #8]
 800a10c:	60ea      	str	r2, [r5, #12]
 800a10e:	69a3      	ldr	r3, [r4, #24]
 800a110:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800a112:	b280      	uxth	r0, r0
 800a114:	f7f9 fb21 	bl	800375a <lwip_htons>
 800a118:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800a11a:	2300      	movs	r3, #0
 800a11c:	71ab      	strb	r3, [r5, #6]
 800a11e:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800a120:	72ab      	strb	r3, [r5, #10]
 800a122:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800a124:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800a126:	b16e      	cbz	r6, 800a144 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 800a128:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800a12c:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800a12e:	4641      	mov	r1, r8
 800a130:	4630      	mov	r0, r6
 800a132:	f7fa f89f 	bl	8004274 <pbuf_remove_header>
      pbuf_cat(p, r);
 800a136:	4631      	mov	r1, r6
 800a138:	4628      	mov	r0, r5
 800a13a:	f7fa fa59 	bl	80045f0 <pbuf_cat>
      r = iprh->next_pbuf;
 800a13e:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800a140:	2e00      	cmp	r6, #0
 800a142:	d1f3      	bne.n	800a12c <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 800a144:	4b3d      	ldr	r3, [pc, #244]	; (800a23c <ip4_reass+0x438>)
 800a146:	6819      	ldr	r1, [r3, #0]
 800a148:	42a1      	cmp	r1, r4
 800a14a:	d005      	beq.n	800a158 <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a14c:	b129      	cbz	r1, 800a15a <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 800a14e:	680b      	ldr	r3, [r1, #0]
 800a150:	42a3      	cmp	r3, r4
 800a152:	d002      	beq.n	800a15a <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800a154:	4619      	mov	r1, r3
 800a156:	e7f9      	b.n	800a14c <ip4_reass+0x348>
      ipr_prev = NULL;
 800a158:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff fd22 	bl	8009ba4 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800a160:	4628      	mov	r0, r5
 800a162:	f7fa fa21 	bl	80045a8 <pbuf_clen>
 800a166:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a168:	4b35      	ldr	r3, [pc, #212]	; (800a240 <ip4_reass+0x43c>)
 800a16a:	881b      	ldrh	r3, [r3, #0]
 800a16c:	4283      	cmp	r3, r0
 800a16e:	d304      	bcc.n	800a17a <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800a170:	4a33      	ldr	r2, [pc, #204]	; (800a240 <ip4_reass+0x43c>)
 800a172:	8813      	ldrh	r3, [r2, #0]
 800a174:	1b1c      	subs	r4, r3, r4
 800a176:	8014      	strh	r4, [r2, #0]
    return p;
 800a178:	e6c3      	b.n	8009f02 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800a17a:	4b32      	ldr	r3, [pc, #200]	; (800a244 <ip4_reass+0x440>)
 800a17c:	f240 229b 	movw	r2, #667	; 0x29b
 800a180:	4931      	ldr	r1, [pc, #196]	; (800a248 <ip4_reass+0x444>)
 800a182:	4832      	ldr	r0, [pc, #200]	; (800a24c <ip4_reass+0x448>)
 800a184:	f000 fa5c 	bl	800a640 <iprintf>
 800a188:	e7f2      	b.n	800a170 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800a18a:	4b2e      	ldr	r3, [pc, #184]	; (800a244 <ip4_reass+0x440>)
 800a18c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800a190:	492f      	ldr	r1, [pc, #188]	; (800a250 <ip4_reass+0x44c>)
 800a192:	482e      	ldr	r0, [pc, #184]	; (800a24c <ip4_reass+0x448>)
 800a194:	f000 fa54 	bl	800a640 <iprintf>
 800a198:	e6ab      	b.n	8009ef2 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800a19a:	4b28      	ldr	r3, [pc, #160]	; (800a23c <ip4_reass+0x438>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	42a3      	cmp	r3, r4
 800a1a0:	d006      	beq.n	800a1b0 <ip4_reass+0x3ac>
 800a1a2:	4b28      	ldr	r3, [pc, #160]	; (800a244 <ip4_reass+0x440>)
 800a1a4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a1a8:	492a      	ldr	r1, [pc, #168]	; (800a254 <ip4_reass+0x450>)
 800a1aa:	4828      	ldr	r0, [pc, #160]	; (800a24c <ip4_reass+0x448>)
 800a1ac:	f000 fa48 	bl	800a640 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	4620      	mov	r0, r4
 800a1b4:	f7ff fcf6 	bl	8009ba4 <ip_reass_dequeue_datagram>
 800a1b8:	e69f      	b.n	8009efa <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800a1ba:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800a1bc:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800a1c0:	455b      	cmp	r3, fp
 800a1c2:	f43f af04 	beq.w	8009fce <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a1c6:	f1b9 0f00 	cmp.w	r9, #0
 800a1ca:	d081      	beq.n	800a0d0 <ip4_reass+0x2cc>
 800a1cc:	7fa3      	ldrb	r3, [r4, #30]
 800a1ce:	f013 0f01 	tst.w	r3, #1
 800a1d2:	f43f af03 	beq.w	8009fdc <ip4_reass+0x1d8>
 800a1d6:	f04f 0e00 	mov.w	lr, #0
 800a1da:	e75e      	b.n	800a09a <ip4_reass+0x296>
      ipr->p = new_p;
 800a1dc:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800a1de:	f1b9 0f00 	cmp.w	r9, #0
 800a1e2:	f43f af2a 	beq.w	800a03a <ip4_reass+0x236>
  int valid = 1;
 800a1e6:	f04f 0e01 	mov.w	lr, #1
 800a1ea:	e6f3      	b.n	8009fd4 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a1ec:	2004      	movs	r0, #4
 800a1ee:	f7f9 fd93 	bl	8003d18 <memp_malloc>
  if (ipr == NULL) {
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	f43f ae88 	beq.w	8009f0a <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	6063      	str	r3, [r4, #4]
 800a1fe:	60a3      	str	r3, [r4, #8]
 800a200:	60e3      	str	r3, [r4, #12]
 800a202:	6123      	str	r3, [r4, #16]
 800a204:	6163      	str	r3, [r4, #20]
 800a206:	61a3      	str	r3, [r4, #24]
 800a208:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800a20a:	230f      	movs	r3, #15
 800a20c:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800a20e:	4b0b      	ldr	r3, [pc, #44]	; (800a23c <ip4_reass+0x438>)
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800a214:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a216:	f8d9 3000 	ldr.w	r3, [r9]
 800a21a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800a21e:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a222:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800a226:	60a3      	str	r3, [r4, #8]
 800a228:	60e0      	str	r0, [r4, #12]
 800a22a:	6121      	str	r1, [r4, #16]
 800a22c:	6162      	str	r2, [r4, #20]
 800a22e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a232:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800a234:	e63b      	b.n	8009eae <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800a236:	f04f 0e01 	mov.w	lr, #1
 800a23a:	e72e      	b.n	800a09a <ip4_reass+0x296>
 800a23c:	2000ab18 	.word	0x2000ab18
 800a240:	2000ab14 	.word	0x2000ab14
 800a244:	0800d8ec 	.word	0x0800d8ec
 800a248:	0800d9e8 	.word	0x0800d9e8
 800a24c:	0800baa0 	.word	0x0800baa0
 800a250:	0800da04 	.word	0x0800da04
 800a254:	0800da10 	.word	0x0800da10

0800a258 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800a258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a25c:	b08d      	sub	sp, #52	; 0x34
 800a25e:	4605      	mov	r5, r0
 800a260:	9107      	str	r1, [sp, #28]
 800a262:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800a264:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800a266:	3b14      	subs	r3, #20
 800a268:	bf48      	it	mi
 800a26a:	3307      	addmi	r3, #7
 800a26c:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800a270:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800a272:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800a276:	f89a 3000 	ldrb.w	r3, [sl]
 800a27a:	f003 030f 	and.w	r3, r3, #15
 800a27e:	2b05      	cmp	r3, #5
 800a280:	f040 80d9 	bne.w	800a436 <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a284:	8943      	ldrh	r3, [r0, #10]
 800a286:	2b13      	cmp	r3, #19
 800a288:	d943      	bls.n	800a312 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800a28a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800a28e:	f7f9 fa64 	bl	800375a <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800a292:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800a296:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800a298:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800a29c:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800a29e:	892b      	ldrh	r3, [r5, #8]
 800a2a0:	3b14      	subs	r3, #20
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	9303      	str	r3, [sp, #12]

  while (left) {
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	f000 80c8 	beq.w	800a43c <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a2ac:	9b06      	ldr	r3, [sp, #24]
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800a2b4:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800a2b8:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800a2ba:	9b08      	ldr	r3, [sp, #32]
 800a2bc:	9a03      	ldr	r2, [sp, #12]
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	bf28      	it	cs
 800a2c2:	4613      	movcs	r3, r2
 800a2c4:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800a2c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a2ca:	2114      	movs	r1, #20
 800a2cc:	200e      	movs	r0, #14
 800a2ce:	f7fa f87b 	bl	80043c8 <pbuf_alloc>
    if (rambuf == NULL) {
 800a2d2:	4683      	mov	fp, r0
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	f000 80b3 	beq.w	800a440 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a2da:	8943      	ldrh	r3, [r0, #10]
 800a2dc:	2b13      	cmp	r3, #19
 800a2de:	d922      	bls.n	800a326 <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800a2e0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a2e4:	f8da 2000 	ldr.w	r2, [sl]
 800a2e8:	f8da 6004 	ldr.w	r6, [sl, #4]
 800a2ec:	f8da 0008 	ldr.w	r0, [sl, #8]
 800a2f0:	f8da 100c 	ldr.w	r1, [sl, #12]
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	605e      	str	r6, [r3, #4]
 800a2f8:	6098      	str	r0, [r3, #8]
 800a2fa:	60d9      	str	r1, [r3, #12]
 800a2fc:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a300:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800a302:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a306:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800a308:	9b04      	ldr	r3, [sp, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d04e      	beq.n	800a3ac <ip4_frag+0x154>
    left_to_copy = fragsize;
 800a30e:	461e      	mov	r6, r3
 800a310:	e01d      	b.n	800a34e <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800a312:	4b4d      	ldr	r3, [pc, #308]	; (800a448 <ip4_frag+0x1f0>)
 800a314:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800a318:	494c      	ldr	r1, [pc, #304]	; (800a44c <ip4_frag+0x1f4>)
 800a31a:	484d      	ldr	r0, [pc, #308]	; (800a450 <ip4_frag+0x1f8>)
 800a31c:	f000 f990 	bl	800a640 <iprintf>
 800a320:	f06f 0005 	mvn.w	r0, #5
 800a324:	e07b      	b.n	800a41e <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800a326:	4b48      	ldr	r3, [pc, #288]	; (800a448 <ip4_frag+0x1f0>)
 800a328:	f44f 7249 	mov.w	r2, #804	; 0x324
 800a32c:	4949      	ldr	r1, [pc, #292]	; (800a454 <ip4_frag+0x1fc>)
 800a32e:	4848      	ldr	r0, [pc, #288]	; (800a450 <ip4_frag+0x1f8>)
 800a330:	f000 f986 	bl	800a640 <iprintf>
 800a334:	e7d4      	b.n	800a2e0 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a336:	4b44      	ldr	r3, [pc, #272]	; (800a448 <ip4_frag+0x1f0>)
 800a338:	f240 322d 	movw	r2, #813	; 0x32d
 800a33c:	4946      	ldr	r1, [pc, #280]	; (800a458 <ip4_frag+0x200>)
 800a33e:	4844      	ldr	r0, [pc, #272]	; (800a450 <ip4_frag+0x1f8>)
 800a340:	f000 f97e 	bl	800a640 <iprintf>
 800a344:	e009      	b.n	800a35a <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800a346:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800a348:	b376      	cbz	r6, 800a3a8 <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800a34a:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800a34e:	896b      	ldrh	r3, [r5, #10]
 800a350:	eba3 0409 	sub.w	r4, r3, r9
 800a354:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800a356:	454b      	cmp	r3, r9
 800a358:	d3ed      	bcc.n	800a336 <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800a35a:	42b4      	cmp	r4, r6
 800a35c:	bf28      	it	cs
 800a35e:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800a360:	2c00      	cmp	r4, #0
 800a362:	d0f0      	beq.n	800a346 <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800a364:	2005      	movs	r0, #5
 800a366:	f7f9 fcd7 	bl	8003d18 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800a36a:	4607      	mov	r7, r0
 800a36c:	2800      	cmp	r0, #0
 800a36e:	d051      	beq.n	800a414 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800a370:	9401      	str	r4, [sp, #4]
 800a372:	686b      	ldr	r3, [r5, #4]
 800a374:	444b      	add	r3, r9
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	4603      	mov	r3, r0
 800a37a:	2241      	movs	r2, #65	; 0x41
 800a37c:	4621      	mov	r1, r4
 800a37e:	2000      	movs	r0, #0
 800a380:	f7f9 ff56 	bl	8004230 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800a384:	4680      	mov	r8, r0
 800a386:	2800      	cmp	r0, #0
 800a388:	d04c      	beq.n	800a424 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800a38a:	4628      	mov	r0, r5
 800a38c:	f7fa f918 	bl	80045c0 <pbuf_ref>
      pcr->original = p;
 800a390:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800a392:	4b32      	ldr	r3, [pc, #200]	; (800a45c <ip4_frag+0x204>)
 800a394:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800a396:	4641      	mov	r1, r8
 800a398:	4658      	mov	r0, fp
 800a39a:	f7fa f929 	bl	80045f0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800a39e:	1b36      	subs	r6, r6, r4
 800a3a0:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800a3a2:	b11e      	cbz	r6, 800a3ac <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800a3a4:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800a3a6:	e7d0      	b.n	800a34a <ip4_frag+0xf2>
        poff = 0;
 800a3a8:	46b1      	mov	r9, r6
 800a3aa:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800a3ac:	44a1      	add	r9, r4
 800a3ae:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800a3b2:	9b05      	ldr	r3, [sp, #20]
 800a3b4:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800a3b8:	9b07      	ldr	r3, [sp, #28]
 800a3ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800a3bc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800a3be:	9a03      	ldr	r2, [sp, #12]
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	dd01      	ble.n	800a3c8 <ip4_frag+0x170>
 800a3c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c6:	b10b      	cbz	r3, 800a3cc <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800a3c8:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800a3cc:	f7f9 f9c5 	bl	800375a <lwip_htons>
 800a3d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a3d2:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800a3d4:	9f04      	ldr	r7, [sp, #16]
 800a3d6:	f107 0014 	add.w	r0, r7, #20
 800a3da:	b280      	uxth	r0, r0
 800a3dc:	f7f9 f9bd 	bl	800375a <lwip_htons>
 800a3e0:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	72b3      	strb	r3, [r6, #10]
 800a3e6:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800a3e8:	9807      	ldr	r0, [sp, #28]
 800a3ea:	6943      	ldr	r3, [r0, #20]
 800a3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ee:	4659      	mov	r1, fp
 800a3f0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f7f9 ff7e 	bl	80042f4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800a3f8:	9b03      	ldr	r3, [sp, #12]
 800a3fa:	1bdb      	subs	r3, r3, r7
 800a3fc:	b29a      	uxth	r2, r3
 800a3fe:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800a400:	9b05      	ldr	r3, [sp, #20]
 800a402:	9906      	ldr	r1, [sp, #24]
 800a404:	440b      	add	r3, r1
 800a406:	b29b      	uxth	r3, r3
 800a408:	9305      	str	r3, [sp, #20]
  while (left) {
 800a40a:	2a00      	cmp	r2, #0
 800a40c:	f47f af55 	bne.w	800a2ba <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800a410:	2000      	movs	r0, #0
 800a412:	e004      	b.n	800a41e <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800a414:	4658      	mov	r0, fp
 800a416:	f7f9 ff6d 	bl	80042f4 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800a41e:	b00d      	add	sp, #52	; 0x34
 800a420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800a424:	4638      	mov	r0, r7
 800a426:	f7ff fca5 	bl	8009d74 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800a42a:	4658      	mov	r0, fp
 800a42c:	f7f9 ff62 	bl	80042f4 <pbuf_free>
  return ERR_MEM;
 800a430:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800a434:	e7f3      	b.n	800a41e <ip4_frag+0x1c6>
    return ERR_VAL;
 800a436:	f06f 0005 	mvn.w	r0, #5
 800a43a:	e7f0      	b.n	800a41e <ip4_frag+0x1c6>
  return ERR_OK;
 800a43c:	2000      	movs	r0, #0
 800a43e:	e7ee      	b.n	800a41e <ip4_frag+0x1c6>
  return ERR_MEM;
 800a440:	f04f 30ff 	mov.w	r0, #4294967295
 800a444:	e7eb      	b.n	800a41e <ip4_frag+0x1c6>
 800a446:	bf00      	nop
 800a448:	0800d8ec 	.word	0x0800d8ec
 800a44c:	0800da30 	.word	0x0800da30
 800a450:	0800baa0 	.word	0x0800baa0
 800a454:	0800da4c 	.word	0x0800da4c
 800a458:	0800da6c 	.word	0x0800da6c
 800a45c:	08009da1 	.word	0x08009da1

0800a460 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a460:	b570      	push	{r4, r5, r6, lr}
 800a462:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a464:	8943      	ldrh	r3, [r0, #10]
 800a466:	2b0e      	cmp	r3, #14
 800a468:	d91c      	bls.n	800a4a4 <ethernet_input+0x44>
 800a46a:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a46c:	7bc3      	ldrb	r3, [r0, #15]
 800a46e:	b91b      	cbnz	r3, 800a478 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800a470:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800a474:	3301      	adds	r3, #1
 800a476:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a478:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a47a:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a47c:	7803      	ldrb	r3, [r0, #0]
 800a47e:	f013 0f01 	tst.w	r3, #1
 800a482:	d00a      	beq.n	800a49a <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a484:	2b01      	cmp	r3, #1
 800a486:	d012      	beq.n	800a4ae <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a488:	2206      	movs	r2, #6
 800a48a:	491e      	ldr	r1, [pc, #120]	; (800a504 <ethernet_input+0xa4>)
 800a48c:	f000 f898 	bl	800a5c0 <memcmp>
 800a490:	b918      	cbnz	r0, 800a49a <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a492:	7b63      	ldrb	r3, [r4, #13]
 800a494:	f043 0308 	orr.w	r3, r3, #8
 800a498:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800a49a:	2e08      	cmp	r6, #8
 800a49c:	d012      	beq.n	800a4c4 <ethernet_input+0x64>
 800a49e:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800a4a2:	d01f      	beq.n	800a4e4 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f7f9 ff25 	bl	80042f4 <pbuf_free>
  return ERR_OK;
}
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a4ae:	7843      	ldrb	r3, [r0, #1]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1f2      	bne.n	800a49a <ethernet_input+0x3a>
 800a4b4:	7883      	ldrb	r3, [r0, #2]
 800a4b6:	2b5e      	cmp	r3, #94	; 0x5e
 800a4b8:	d1ef      	bne.n	800a49a <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800a4ba:	7b63      	ldrb	r3, [r4, #13]
 800a4bc:	f043 0310 	orr.w	r3, r3, #16
 800a4c0:	7363      	strb	r3, [r4, #13]
 800a4c2:	e7ea      	b.n	800a49a <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a4c4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800a4c8:	f013 0f08 	tst.w	r3, #8
 800a4cc:	d0ea      	beq.n	800a4a4 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a4ce:	210e      	movs	r1, #14
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	f7f9 fecf 	bl	8004274 <pbuf_remove_header>
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	d1e4      	bne.n	800a4a4 <ethernet_input+0x44>
        ip4_input(p, netif);
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f7ff f97d 	bl	80097dc <ip4_input>
      break;
 800a4e2:	e7e2      	b.n	800a4aa <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a4e4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800a4e8:	f013 0f08 	tst.w	r3, #8
 800a4ec:	d0da      	beq.n	800a4a4 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a4ee:	210e      	movs	r1, #14
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f7f9 febf 	bl	8004274 <pbuf_remove_header>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d1d4      	bne.n	800a4a4 <ethernet_input+0x44>
        etharp_input(p, netif);
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f7fe fd3d 	bl	8008f7c <etharp_input>
      break;
 800a502:	e7d2      	b.n	800a4aa <ethernet_input+0x4a>
 800a504:	0800dae8 	.word	0x0800dae8

0800a508 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a50c:	4605      	mov	r5, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	4616      	mov	r6, r2
 800a512:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a514:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800a518:	f7f9 f91f 	bl	800375a <lwip_htons>
 800a51c:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a51e:	210e      	movs	r1, #14
 800a520:	4620      	mov	r0, r4
 800a522:	f7f9 fea2 	bl	800426a <pbuf_add_header>
 800a526:	b9e8      	cbnz	r0, 800a564 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a528:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800a52a:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	600b      	str	r3, [r1, #0]
 800a532:	88bb      	ldrh	r3, [r7, #4]
 800a534:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a536:	6833      	ldr	r3, [r6, #0]
 800a538:	f8c1 3006 	str.w	r3, [r1, #6]
 800a53c:	88b3      	ldrh	r3, [r6, #4]
 800a53e:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a540:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800a544:	2b06      	cmp	r3, #6
 800a546:	d105      	bne.n	800a554 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a548:	69ab      	ldr	r3, [r5, #24]
 800a54a:	4621      	mov	r1, r4
 800a54c:	4628      	mov	r0, r5
 800a54e:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a554:	4b05      	ldr	r3, [pc, #20]	; (800a56c <ethernet_output+0x64>)
 800a556:	f44f 7299 	mov.w	r2, #306	; 0x132
 800a55a:	4905      	ldr	r1, [pc, #20]	; (800a570 <ethernet_output+0x68>)
 800a55c:	4805      	ldr	r0, [pc, #20]	; (800a574 <ethernet_output+0x6c>)
 800a55e:	f000 f86f 	bl	800a640 <iprintf>
 800a562:	e7f1      	b.n	800a548 <ethernet_output+0x40>
  return ERR_BUF;
 800a564:	f06f 0001 	mvn.w	r0, #1
 800a568:	e7f2      	b.n	800a550 <ethernet_output+0x48>
 800a56a:	bf00      	nop
 800a56c:	0800da7c 	.word	0x0800da7c
 800a570:	0800dab4 	.word	0x0800dab4
 800a574:	0800baa0 	.word	0x0800baa0

0800a578 <__libc_init_array>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4d0d      	ldr	r5, [pc, #52]	; (800a5b0 <__libc_init_array+0x38>)
 800a57c:	4c0d      	ldr	r4, [pc, #52]	; (800a5b4 <__libc_init_array+0x3c>)
 800a57e:	1b64      	subs	r4, r4, r5
 800a580:	10a4      	asrs	r4, r4, #2
 800a582:	2600      	movs	r6, #0
 800a584:	42a6      	cmp	r6, r4
 800a586:	d109      	bne.n	800a59c <__libc_init_array+0x24>
 800a588:	4d0b      	ldr	r5, [pc, #44]	; (800a5b8 <__libc_init_array+0x40>)
 800a58a:	4c0c      	ldr	r4, [pc, #48]	; (800a5bc <__libc_init_array+0x44>)
 800a58c:	f001 fa5c 	bl	800ba48 <_init>
 800a590:	1b64      	subs	r4, r4, r5
 800a592:	10a4      	asrs	r4, r4, #2
 800a594:	2600      	movs	r6, #0
 800a596:	42a6      	cmp	r6, r4
 800a598:	d105      	bne.n	800a5a6 <__libc_init_array+0x2e>
 800a59a:	bd70      	pop	{r4, r5, r6, pc}
 800a59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5a0:	4798      	blx	r3
 800a5a2:	3601      	adds	r6, #1
 800a5a4:	e7ee      	b.n	800a584 <__libc_init_array+0xc>
 800a5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5aa:	4798      	blx	r3
 800a5ac:	3601      	adds	r6, #1
 800a5ae:	e7f2      	b.n	800a596 <__libc_init_array+0x1e>
 800a5b0:	0800dc48 	.word	0x0800dc48
 800a5b4:	0800dc48 	.word	0x0800dc48
 800a5b8:	0800dc48 	.word	0x0800dc48
 800a5bc:	0800dc4c 	.word	0x0800dc4c

0800a5c0 <memcmp>:
 800a5c0:	b510      	push	{r4, lr}
 800a5c2:	3901      	subs	r1, #1
 800a5c4:	4402      	add	r2, r0
 800a5c6:	4290      	cmp	r0, r2
 800a5c8:	d101      	bne.n	800a5ce <memcmp+0xe>
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	e005      	b.n	800a5da <memcmp+0x1a>
 800a5ce:	7803      	ldrb	r3, [r0, #0]
 800a5d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	d001      	beq.n	800a5dc <memcmp+0x1c>
 800a5d8:	1b18      	subs	r0, r3, r4
 800a5da:	bd10      	pop	{r4, pc}
 800a5dc:	3001      	adds	r0, #1
 800a5de:	e7f2      	b.n	800a5c6 <memcmp+0x6>

0800a5e0 <memcpy>:
 800a5e0:	440a      	add	r2, r1
 800a5e2:	4291      	cmp	r1, r2
 800a5e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a5e8:	d100      	bne.n	800a5ec <memcpy+0xc>
 800a5ea:	4770      	bx	lr
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5f6:	4291      	cmp	r1, r2
 800a5f8:	d1f9      	bne.n	800a5ee <memcpy+0xe>
 800a5fa:	bd10      	pop	{r4, pc}

0800a5fc <memmove>:
 800a5fc:	4288      	cmp	r0, r1
 800a5fe:	b510      	push	{r4, lr}
 800a600:	eb01 0402 	add.w	r4, r1, r2
 800a604:	d902      	bls.n	800a60c <memmove+0x10>
 800a606:	4284      	cmp	r4, r0
 800a608:	4623      	mov	r3, r4
 800a60a:	d807      	bhi.n	800a61c <memmove+0x20>
 800a60c:	1e43      	subs	r3, r0, #1
 800a60e:	42a1      	cmp	r1, r4
 800a610:	d008      	beq.n	800a624 <memmove+0x28>
 800a612:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a61a:	e7f8      	b.n	800a60e <memmove+0x12>
 800a61c:	4402      	add	r2, r0
 800a61e:	4601      	mov	r1, r0
 800a620:	428a      	cmp	r2, r1
 800a622:	d100      	bne.n	800a626 <memmove+0x2a>
 800a624:	bd10      	pop	{r4, pc}
 800a626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a62a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a62e:	e7f7      	b.n	800a620 <memmove+0x24>

0800a630 <memset>:
 800a630:	4402      	add	r2, r0
 800a632:	4603      	mov	r3, r0
 800a634:	4293      	cmp	r3, r2
 800a636:	d100      	bne.n	800a63a <memset+0xa>
 800a638:	4770      	bx	lr
 800a63a:	f803 1b01 	strb.w	r1, [r3], #1
 800a63e:	e7f9      	b.n	800a634 <memset+0x4>

0800a640 <iprintf>:
 800a640:	b40f      	push	{r0, r1, r2, r3}
 800a642:	4b0a      	ldr	r3, [pc, #40]	; (800a66c <iprintf+0x2c>)
 800a644:	b513      	push	{r0, r1, r4, lr}
 800a646:	681c      	ldr	r4, [r3, #0]
 800a648:	b124      	cbz	r4, 800a654 <iprintf+0x14>
 800a64a:	69a3      	ldr	r3, [r4, #24]
 800a64c:	b913      	cbnz	r3, 800a654 <iprintf+0x14>
 800a64e:	4620      	mov	r0, r4
 800a650:	f000 f8e2 	bl	800a818 <__sinit>
 800a654:	ab05      	add	r3, sp, #20
 800a656:	9a04      	ldr	r2, [sp, #16]
 800a658:	68a1      	ldr	r1, [r4, #8]
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	4620      	mov	r0, r4
 800a65e:	f000 fbfb 	bl	800ae58 <_vfiprintf_r>
 800a662:	b002      	add	sp, #8
 800a664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a668:	b004      	add	sp, #16
 800a66a:	4770      	bx	lr
 800a66c:	20000028 	.word	0x20000028

0800a670 <rand>:
 800a670:	4b16      	ldr	r3, [pc, #88]	; (800a6cc <rand+0x5c>)
 800a672:	b510      	push	{r4, lr}
 800a674:	681c      	ldr	r4, [r3, #0]
 800a676:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a678:	b9b3      	cbnz	r3, 800a6a8 <rand+0x38>
 800a67a:	2018      	movs	r0, #24
 800a67c:	f000 f97e 	bl	800a97c <malloc>
 800a680:	63a0      	str	r0, [r4, #56]	; 0x38
 800a682:	b928      	cbnz	r0, 800a690 <rand+0x20>
 800a684:	4602      	mov	r2, r0
 800a686:	4b12      	ldr	r3, [pc, #72]	; (800a6d0 <rand+0x60>)
 800a688:	4812      	ldr	r0, [pc, #72]	; (800a6d4 <rand+0x64>)
 800a68a:	214e      	movs	r1, #78	; 0x4e
 800a68c:	f000 f84e 	bl	800a72c <__assert_func>
 800a690:	4a11      	ldr	r2, [pc, #68]	; (800a6d8 <rand+0x68>)
 800a692:	4b12      	ldr	r3, [pc, #72]	; (800a6dc <rand+0x6c>)
 800a694:	e9c0 2300 	strd	r2, r3, [r0]
 800a698:	4b11      	ldr	r3, [pc, #68]	; (800a6e0 <rand+0x70>)
 800a69a:	6083      	str	r3, [r0, #8]
 800a69c:	230b      	movs	r3, #11
 800a69e:	8183      	strh	r3, [r0, #12]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800a6a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800a6aa:	4a0e      	ldr	r2, [pc, #56]	; (800a6e4 <rand+0x74>)
 800a6ac:	6920      	ldr	r0, [r4, #16]
 800a6ae:	6963      	ldr	r3, [r4, #20]
 800a6b0:	490d      	ldr	r1, [pc, #52]	; (800a6e8 <rand+0x78>)
 800a6b2:	4342      	muls	r2, r0
 800a6b4:	fb01 2203 	mla	r2, r1, r3, r2
 800a6b8:	fba0 0101 	umull	r0, r1, r0, r1
 800a6bc:	1c43      	adds	r3, r0, #1
 800a6be:	eb42 0001 	adc.w	r0, r2, r1
 800a6c2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800a6c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a6ca:	bd10      	pop	{r4, pc}
 800a6cc:	20000028 	.word	0x20000028
 800a6d0:	0800dafc 	.word	0x0800dafc
 800a6d4:	0800db13 	.word	0x0800db13
 800a6d8:	abcd330e 	.word	0xabcd330e
 800a6dc:	e66d1234 	.word	0xe66d1234
 800a6e0:	0005deec 	.word	0x0005deec
 800a6e4:	5851f42d 	.word	0x5851f42d
 800a6e8:	4c957f2d 	.word	0x4c957f2d

0800a6ec <siprintf>:
 800a6ec:	b40e      	push	{r1, r2, r3}
 800a6ee:	b500      	push	{lr}
 800a6f0:	b09c      	sub	sp, #112	; 0x70
 800a6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800a6f4:	9002      	str	r0, [sp, #8]
 800a6f6:	9006      	str	r0, [sp, #24]
 800a6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a6fc:	4809      	ldr	r0, [pc, #36]	; (800a724 <siprintf+0x38>)
 800a6fe:	9107      	str	r1, [sp, #28]
 800a700:	9104      	str	r1, [sp, #16]
 800a702:	4909      	ldr	r1, [pc, #36]	; (800a728 <siprintf+0x3c>)
 800a704:	f853 2b04 	ldr.w	r2, [r3], #4
 800a708:	9105      	str	r1, [sp, #20]
 800a70a:	6800      	ldr	r0, [r0, #0]
 800a70c:	9301      	str	r3, [sp, #4]
 800a70e:	a902      	add	r1, sp, #8
 800a710:	f000 fa78 	bl	800ac04 <_svfiprintf_r>
 800a714:	9b02      	ldr	r3, [sp, #8]
 800a716:	2200      	movs	r2, #0
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	b01c      	add	sp, #112	; 0x70
 800a71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a720:	b003      	add	sp, #12
 800a722:	4770      	bx	lr
 800a724:	20000028 	.word	0x20000028
 800a728:	ffff0208 	.word	0xffff0208

0800a72c <__assert_func>:
 800a72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a72e:	4614      	mov	r4, r2
 800a730:	461a      	mov	r2, r3
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <__assert_func+0x2c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4605      	mov	r5, r0
 800a738:	68d8      	ldr	r0, [r3, #12]
 800a73a:	b14c      	cbz	r4, 800a750 <__assert_func+0x24>
 800a73c:	4b07      	ldr	r3, [pc, #28]	; (800a75c <__assert_func+0x30>)
 800a73e:	9100      	str	r1, [sp, #0]
 800a740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a744:	4906      	ldr	r1, [pc, #24]	; (800a760 <__assert_func+0x34>)
 800a746:	462b      	mov	r3, r5
 800a748:	f000 f8e4 	bl	800a914 <fiprintf>
 800a74c:	f000 ff6e 	bl	800b62c <abort>
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <__assert_func+0x38>)
 800a752:	461c      	mov	r4, r3
 800a754:	e7f3      	b.n	800a73e <__assert_func+0x12>
 800a756:	bf00      	nop
 800a758:	20000028 	.word	0x20000028
 800a75c:	0800db6e 	.word	0x0800db6e
 800a760:	0800db7b 	.word	0x0800db7b
 800a764:	0800dba9 	.word	0x0800dba9

0800a768 <std>:
 800a768:	2300      	movs	r3, #0
 800a76a:	b510      	push	{r4, lr}
 800a76c:	4604      	mov	r4, r0
 800a76e:	e9c0 3300 	strd	r3, r3, [r0]
 800a772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a776:	6083      	str	r3, [r0, #8]
 800a778:	8181      	strh	r1, [r0, #12]
 800a77a:	6643      	str	r3, [r0, #100]	; 0x64
 800a77c:	81c2      	strh	r2, [r0, #14]
 800a77e:	6183      	str	r3, [r0, #24]
 800a780:	4619      	mov	r1, r3
 800a782:	2208      	movs	r2, #8
 800a784:	305c      	adds	r0, #92	; 0x5c
 800a786:	f7ff ff53 	bl	800a630 <memset>
 800a78a:	4b05      	ldr	r3, [pc, #20]	; (800a7a0 <std+0x38>)
 800a78c:	6263      	str	r3, [r4, #36]	; 0x24
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <std+0x3c>)
 800a790:	62a3      	str	r3, [r4, #40]	; 0x28
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <std+0x40>)
 800a794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a796:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <std+0x44>)
 800a798:	6224      	str	r4, [r4, #32]
 800a79a:	6323      	str	r3, [r4, #48]	; 0x30
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	bf00      	nop
 800a7a0:	0800b401 	.word	0x0800b401
 800a7a4:	0800b423 	.word	0x0800b423
 800a7a8:	0800b45b 	.word	0x0800b45b
 800a7ac:	0800b47f 	.word	0x0800b47f

0800a7b0 <_cleanup_r>:
 800a7b0:	4901      	ldr	r1, [pc, #4]	; (800a7b8 <_cleanup_r+0x8>)
 800a7b2:	f000 b8c1 	b.w	800a938 <_fwalk_reent>
 800a7b6:	bf00      	nop
 800a7b8:	0800b769 	.word	0x0800b769

0800a7bc <__sfmoreglue>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	2268      	movs	r2, #104	; 0x68
 800a7c0:	1e4d      	subs	r5, r1, #1
 800a7c2:	4355      	muls	r5, r2
 800a7c4:	460e      	mov	r6, r1
 800a7c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a7ca:	f000 f94b 	bl	800aa64 <_malloc_r>
 800a7ce:	4604      	mov	r4, r0
 800a7d0:	b140      	cbz	r0, 800a7e4 <__sfmoreglue+0x28>
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	e9c0 1600 	strd	r1, r6, [r0]
 800a7d8:	300c      	adds	r0, #12
 800a7da:	60a0      	str	r0, [r4, #8]
 800a7dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a7e0:	f7ff ff26 	bl	800a630 <memset>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	bd70      	pop	{r4, r5, r6, pc}

0800a7e8 <__sfp_lock_acquire>:
 800a7e8:	4801      	ldr	r0, [pc, #4]	; (800a7f0 <__sfp_lock_acquire+0x8>)
 800a7ea:	f000 b8c5 	b.w	800a978 <__retarget_lock_acquire_recursive>
 800a7ee:	bf00      	nop
 800a7f0:	2000ab21 	.word	0x2000ab21

0800a7f4 <__sfp_lock_release>:
 800a7f4:	4801      	ldr	r0, [pc, #4]	; (800a7fc <__sfp_lock_release+0x8>)
 800a7f6:	f000 b8c0 	b.w	800a97a <__retarget_lock_release_recursive>
 800a7fa:	bf00      	nop
 800a7fc:	2000ab21 	.word	0x2000ab21

0800a800 <__sinit_lock_acquire>:
 800a800:	4801      	ldr	r0, [pc, #4]	; (800a808 <__sinit_lock_acquire+0x8>)
 800a802:	f000 b8b9 	b.w	800a978 <__retarget_lock_acquire_recursive>
 800a806:	bf00      	nop
 800a808:	2000ab22 	.word	0x2000ab22

0800a80c <__sinit_lock_release>:
 800a80c:	4801      	ldr	r0, [pc, #4]	; (800a814 <__sinit_lock_release+0x8>)
 800a80e:	f000 b8b4 	b.w	800a97a <__retarget_lock_release_recursive>
 800a812:	bf00      	nop
 800a814:	2000ab22 	.word	0x2000ab22

0800a818 <__sinit>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	4604      	mov	r4, r0
 800a81c:	f7ff fff0 	bl	800a800 <__sinit_lock_acquire>
 800a820:	69a3      	ldr	r3, [r4, #24]
 800a822:	b11b      	cbz	r3, 800a82c <__sinit+0x14>
 800a824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a828:	f7ff bff0 	b.w	800a80c <__sinit_lock_release>
 800a82c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a830:	6523      	str	r3, [r4, #80]	; 0x50
 800a832:	4b13      	ldr	r3, [pc, #76]	; (800a880 <__sinit+0x68>)
 800a834:	4a13      	ldr	r2, [pc, #76]	; (800a884 <__sinit+0x6c>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	62a2      	str	r2, [r4, #40]	; 0x28
 800a83a:	42a3      	cmp	r3, r4
 800a83c:	bf04      	itt	eq
 800a83e:	2301      	moveq	r3, #1
 800a840:	61a3      	streq	r3, [r4, #24]
 800a842:	4620      	mov	r0, r4
 800a844:	f000 f820 	bl	800a888 <__sfp>
 800a848:	6060      	str	r0, [r4, #4]
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 f81c 	bl	800a888 <__sfp>
 800a850:	60a0      	str	r0, [r4, #8]
 800a852:	4620      	mov	r0, r4
 800a854:	f000 f818 	bl	800a888 <__sfp>
 800a858:	2200      	movs	r2, #0
 800a85a:	60e0      	str	r0, [r4, #12]
 800a85c:	2104      	movs	r1, #4
 800a85e:	6860      	ldr	r0, [r4, #4]
 800a860:	f7ff ff82 	bl	800a768 <std>
 800a864:	68a0      	ldr	r0, [r4, #8]
 800a866:	2201      	movs	r2, #1
 800a868:	2109      	movs	r1, #9
 800a86a:	f7ff ff7d 	bl	800a768 <std>
 800a86e:	68e0      	ldr	r0, [r4, #12]
 800a870:	2202      	movs	r2, #2
 800a872:	2112      	movs	r1, #18
 800a874:	f7ff ff78 	bl	800a768 <std>
 800a878:	2301      	movs	r3, #1
 800a87a:	61a3      	str	r3, [r4, #24]
 800a87c:	e7d2      	b.n	800a824 <__sinit+0xc>
 800a87e:	bf00      	nop
 800a880:	0800daf8 	.word	0x0800daf8
 800a884:	0800a7b1 	.word	0x0800a7b1

0800a888 <__sfp>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	4607      	mov	r7, r0
 800a88c:	f7ff ffac 	bl	800a7e8 <__sfp_lock_acquire>
 800a890:	4b1e      	ldr	r3, [pc, #120]	; (800a90c <__sfp+0x84>)
 800a892:	681e      	ldr	r6, [r3, #0]
 800a894:	69b3      	ldr	r3, [r6, #24]
 800a896:	b913      	cbnz	r3, 800a89e <__sfp+0x16>
 800a898:	4630      	mov	r0, r6
 800a89a:	f7ff ffbd 	bl	800a818 <__sinit>
 800a89e:	3648      	adds	r6, #72	; 0x48
 800a8a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a8a4:	3b01      	subs	r3, #1
 800a8a6:	d503      	bpl.n	800a8b0 <__sfp+0x28>
 800a8a8:	6833      	ldr	r3, [r6, #0]
 800a8aa:	b30b      	cbz	r3, 800a8f0 <__sfp+0x68>
 800a8ac:	6836      	ldr	r6, [r6, #0]
 800a8ae:	e7f7      	b.n	800a8a0 <__sfp+0x18>
 800a8b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a8b4:	b9d5      	cbnz	r5, 800a8ec <__sfp+0x64>
 800a8b6:	4b16      	ldr	r3, [pc, #88]	; (800a910 <__sfp+0x88>)
 800a8b8:	60e3      	str	r3, [r4, #12]
 800a8ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a8be:	6665      	str	r5, [r4, #100]	; 0x64
 800a8c0:	f000 f859 	bl	800a976 <__retarget_lock_init_recursive>
 800a8c4:	f7ff ff96 	bl	800a7f4 <__sfp_lock_release>
 800a8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a8d0:	6025      	str	r5, [r4, #0]
 800a8d2:	61a5      	str	r5, [r4, #24]
 800a8d4:	2208      	movs	r2, #8
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a8dc:	f7ff fea8 	bl	800a630 <memset>
 800a8e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a8e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ec:	3468      	adds	r4, #104	; 0x68
 800a8ee:	e7d9      	b.n	800a8a4 <__sfp+0x1c>
 800a8f0:	2104      	movs	r1, #4
 800a8f2:	4638      	mov	r0, r7
 800a8f4:	f7ff ff62 	bl	800a7bc <__sfmoreglue>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	6030      	str	r0, [r6, #0]
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d1d5      	bne.n	800a8ac <__sfp+0x24>
 800a900:	f7ff ff78 	bl	800a7f4 <__sfp_lock_release>
 800a904:	230c      	movs	r3, #12
 800a906:	603b      	str	r3, [r7, #0]
 800a908:	e7ee      	b.n	800a8e8 <__sfp+0x60>
 800a90a:	bf00      	nop
 800a90c:	0800daf8 	.word	0x0800daf8
 800a910:	ffff0001 	.word	0xffff0001

0800a914 <fiprintf>:
 800a914:	b40e      	push	{r1, r2, r3}
 800a916:	b503      	push	{r0, r1, lr}
 800a918:	4601      	mov	r1, r0
 800a91a:	ab03      	add	r3, sp, #12
 800a91c:	4805      	ldr	r0, [pc, #20]	; (800a934 <fiprintf+0x20>)
 800a91e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a922:	6800      	ldr	r0, [r0, #0]
 800a924:	9301      	str	r3, [sp, #4]
 800a926:	f000 fa97 	bl	800ae58 <_vfiprintf_r>
 800a92a:	b002      	add	sp, #8
 800a92c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a930:	b003      	add	sp, #12
 800a932:	4770      	bx	lr
 800a934:	20000028 	.word	0x20000028

0800a938 <_fwalk_reent>:
 800a938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	4606      	mov	r6, r0
 800a93e:	4688      	mov	r8, r1
 800a940:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a944:	2700      	movs	r7, #0
 800a946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a94a:	f1b9 0901 	subs.w	r9, r9, #1
 800a94e:	d505      	bpl.n	800a95c <_fwalk_reent+0x24>
 800a950:	6824      	ldr	r4, [r4, #0]
 800a952:	2c00      	cmp	r4, #0
 800a954:	d1f7      	bne.n	800a946 <_fwalk_reent+0xe>
 800a956:	4638      	mov	r0, r7
 800a958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a95c:	89ab      	ldrh	r3, [r5, #12]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d907      	bls.n	800a972 <_fwalk_reent+0x3a>
 800a962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a966:	3301      	adds	r3, #1
 800a968:	d003      	beq.n	800a972 <_fwalk_reent+0x3a>
 800a96a:	4629      	mov	r1, r5
 800a96c:	4630      	mov	r0, r6
 800a96e:	47c0      	blx	r8
 800a970:	4307      	orrs	r7, r0
 800a972:	3568      	adds	r5, #104	; 0x68
 800a974:	e7e9      	b.n	800a94a <_fwalk_reent+0x12>

0800a976 <__retarget_lock_init_recursive>:
 800a976:	4770      	bx	lr

0800a978 <__retarget_lock_acquire_recursive>:
 800a978:	4770      	bx	lr

0800a97a <__retarget_lock_release_recursive>:
 800a97a:	4770      	bx	lr

0800a97c <malloc>:
 800a97c:	4b02      	ldr	r3, [pc, #8]	; (800a988 <malloc+0xc>)
 800a97e:	4601      	mov	r1, r0
 800a980:	6818      	ldr	r0, [r3, #0]
 800a982:	f000 b86f 	b.w	800aa64 <_malloc_r>
 800a986:	bf00      	nop
 800a988:	20000028 	.word	0x20000028

0800a98c <_free_r>:
 800a98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a98e:	2900      	cmp	r1, #0
 800a990:	d044      	beq.n	800aa1c <_free_r+0x90>
 800a992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a996:	9001      	str	r0, [sp, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f1a1 0404 	sub.w	r4, r1, #4
 800a99e:	bfb8      	it	lt
 800a9a0:	18e4      	addlt	r4, r4, r3
 800a9a2:	f000 ff95 	bl	800b8d0 <__malloc_lock>
 800a9a6:	4a1e      	ldr	r2, [pc, #120]	; (800aa20 <_free_r+0x94>)
 800a9a8:	9801      	ldr	r0, [sp, #4]
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	b933      	cbnz	r3, 800a9bc <_free_r+0x30>
 800a9ae:	6063      	str	r3, [r4, #4]
 800a9b0:	6014      	str	r4, [r2, #0]
 800a9b2:	b003      	add	sp, #12
 800a9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9b8:	f000 bf90 	b.w	800b8dc <__malloc_unlock>
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	d908      	bls.n	800a9d2 <_free_r+0x46>
 800a9c0:	6825      	ldr	r5, [r4, #0]
 800a9c2:	1961      	adds	r1, r4, r5
 800a9c4:	428b      	cmp	r3, r1
 800a9c6:	bf01      	itttt	eq
 800a9c8:	6819      	ldreq	r1, [r3, #0]
 800a9ca:	685b      	ldreq	r3, [r3, #4]
 800a9cc:	1949      	addeq	r1, r1, r5
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	e7ed      	b.n	800a9ae <_free_r+0x22>
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	b10b      	cbz	r3, 800a9dc <_free_r+0x50>
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d9fa      	bls.n	800a9d2 <_free_r+0x46>
 800a9dc:	6811      	ldr	r1, [r2, #0]
 800a9de:	1855      	adds	r5, r2, r1
 800a9e0:	42a5      	cmp	r5, r4
 800a9e2:	d10b      	bne.n	800a9fc <_free_r+0x70>
 800a9e4:	6824      	ldr	r4, [r4, #0]
 800a9e6:	4421      	add	r1, r4
 800a9e8:	1854      	adds	r4, r2, r1
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	d1e0      	bne.n	800a9b2 <_free_r+0x26>
 800a9f0:	681c      	ldr	r4, [r3, #0]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	6053      	str	r3, [r2, #4]
 800a9f6:	4421      	add	r1, r4
 800a9f8:	6011      	str	r1, [r2, #0]
 800a9fa:	e7da      	b.n	800a9b2 <_free_r+0x26>
 800a9fc:	d902      	bls.n	800aa04 <_free_r+0x78>
 800a9fe:	230c      	movs	r3, #12
 800aa00:	6003      	str	r3, [r0, #0]
 800aa02:	e7d6      	b.n	800a9b2 <_free_r+0x26>
 800aa04:	6825      	ldr	r5, [r4, #0]
 800aa06:	1961      	adds	r1, r4, r5
 800aa08:	428b      	cmp	r3, r1
 800aa0a:	bf04      	itt	eq
 800aa0c:	6819      	ldreq	r1, [r3, #0]
 800aa0e:	685b      	ldreq	r3, [r3, #4]
 800aa10:	6063      	str	r3, [r4, #4]
 800aa12:	bf04      	itt	eq
 800aa14:	1949      	addeq	r1, r1, r5
 800aa16:	6021      	streq	r1, [r4, #0]
 800aa18:	6054      	str	r4, [r2, #4]
 800aa1a:	e7ca      	b.n	800a9b2 <_free_r+0x26>
 800aa1c:	b003      	add	sp, #12
 800aa1e:	bd30      	pop	{r4, r5, pc}
 800aa20:	2000ab24 	.word	0x2000ab24

0800aa24 <sbrk_aligned>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4e0e      	ldr	r6, [pc, #56]	; (800aa60 <sbrk_aligned+0x3c>)
 800aa28:	460c      	mov	r4, r1
 800aa2a:	6831      	ldr	r1, [r6, #0]
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	b911      	cbnz	r1, 800aa36 <sbrk_aligned+0x12>
 800aa30:	f000 fcd6 	bl	800b3e0 <_sbrk_r>
 800aa34:	6030      	str	r0, [r6, #0]
 800aa36:	4621      	mov	r1, r4
 800aa38:	4628      	mov	r0, r5
 800aa3a:	f000 fcd1 	bl	800b3e0 <_sbrk_r>
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	d00a      	beq.n	800aa58 <sbrk_aligned+0x34>
 800aa42:	1cc4      	adds	r4, r0, #3
 800aa44:	f024 0403 	bic.w	r4, r4, #3
 800aa48:	42a0      	cmp	r0, r4
 800aa4a:	d007      	beq.n	800aa5c <sbrk_aligned+0x38>
 800aa4c:	1a21      	subs	r1, r4, r0
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 fcc6 	bl	800b3e0 <_sbrk_r>
 800aa54:	3001      	adds	r0, #1
 800aa56:	d101      	bne.n	800aa5c <sbrk_aligned+0x38>
 800aa58:	f04f 34ff 	mov.w	r4, #4294967295
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	bd70      	pop	{r4, r5, r6, pc}
 800aa60:	2000ab28 	.word	0x2000ab28

0800aa64 <_malloc_r>:
 800aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	1ccd      	adds	r5, r1, #3
 800aa6a:	f025 0503 	bic.w	r5, r5, #3
 800aa6e:	3508      	adds	r5, #8
 800aa70:	2d0c      	cmp	r5, #12
 800aa72:	bf38      	it	cc
 800aa74:	250c      	movcc	r5, #12
 800aa76:	2d00      	cmp	r5, #0
 800aa78:	4607      	mov	r7, r0
 800aa7a:	db01      	blt.n	800aa80 <_malloc_r+0x1c>
 800aa7c:	42a9      	cmp	r1, r5
 800aa7e:	d905      	bls.n	800aa8c <_malloc_r+0x28>
 800aa80:	230c      	movs	r3, #12
 800aa82:	603b      	str	r3, [r7, #0]
 800aa84:	2600      	movs	r6, #0
 800aa86:	4630      	mov	r0, r6
 800aa88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa8c:	4e2e      	ldr	r6, [pc, #184]	; (800ab48 <_malloc_r+0xe4>)
 800aa8e:	f000 ff1f 	bl	800b8d0 <__malloc_lock>
 800aa92:	6833      	ldr	r3, [r6, #0]
 800aa94:	461c      	mov	r4, r3
 800aa96:	bb34      	cbnz	r4, 800aae6 <_malloc_r+0x82>
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f7ff ffc2 	bl	800aa24 <sbrk_aligned>
 800aaa0:	1c43      	adds	r3, r0, #1
 800aaa2:	4604      	mov	r4, r0
 800aaa4:	d14d      	bne.n	800ab42 <_malloc_r+0xde>
 800aaa6:	6834      	ldr	r4, [r6, #0]
 800aaa8:	4626      	mov	r6, r4
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d140      	bne.n	800ab30 <_malloc_r+0xcc>
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	4631      	mov	r1, r6
 800aab2:	4638      	mov	r0, r7
 800aab4:	eb04 0803 	add.w	r8, r4, r3
 800aab8:	f000 fc92 	bl	800b3e0 <_sbrk_r>
 800aabc:	4580      	cmp	r8, r0
 800aabe:	d13a      	bne.n	800ab36 <_malloc_r+0xd2>
 800aac0:	6821      	ldr	r1, [r4, #0]
 800aac2:	3503      	adds	r5, #3
 800aac4:	1a6d      	subs	r5, r5, r1
 800aac6:	f025 0503 	bic.w	r5, r5, #3
 800aaca:	3508      	adds	r5, #8
 800aacc:	2d0c      	cmp	r5, #12
 800aace:	bf38      	it	cc
 800aad0:	250c      	movcc	r5, #12
 800aad2:	4629      	mov	r1, r5
 800aad4:	4638      	mov	r0, r7
 800aad6:	f7ff ffa5 	bl	800aa24 <sbrk_aligned>
 800aada:	3001      	adds	r0, #1
 800aadc:	d02b      	beq.n	800ab36 <_malloc_r+0xd2>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	442b      	add	r3, r5
 800aae2:	6023      	str	r3, [r4, #0]
 800aae4:	e00e      	b.n	800ab04 <_malloc_r+0xa0>
 800aae6:	6822      	ldr	r2, [r4, #0]
 800aae8:	1b52      	subs	r2, r2, r5
 800aaea:	d41e      	bmi.n	800ab2a <_malloc_r+0xc6>
 800aaec:	2a0b      	cmp	r2, #11
 800aaee:	d916      	bls.n	800ab1e <_malloc_r+0xba>
 800aaf0:	1961      	adds	r1, r4, r5
 800aaf2:	42a3      	cmp	r3, r4
 800aaf4:	6025      	str	r5, [r4, #0]
 800aaf6:	bf18      	it	ne
 800aaf8:	6059      	strne	r1, [r3, #4]
 800aafa:	6863      	ldr	r3, [r4, #4]
 800aafc:	bf08      	it	eq
 800aafe:	6031      	streq	r1, [r6, #0]
 800ab00:	5162      	str	r2, [r4, r5]
 800ab02:	604b      	str	r3, [r1, #4]
 800ab04:	4638      	mov	r0, r7
 800ab06:	f104 060b 	add.w	r6, r4, #11
 800ab0a:	f000 fee7 	bl	800b8dc <__malloc_unlock>
 800ab0e:	f026 0607 	bic.w	r6, r6, #7
 800ab12:	1d23      	adds	r3, r4, #4
 800ab14:	1af2      	subs	r2, r6, r3
 800ab16:	d0b6      	beq.n	800aa86 <_malloc_r+0x22>
 800ab18:	1b9b      	subs	r3, r3, r6
 800ab1a:	50a3      	str	r3, [r4, r2]
 800ab1c:	e7b3      	b.n	800aa86 <_malloc_r+0x22>
 800ab1e:	6862      	ldr	r2, [r4, #4]
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	bf0c      	ite	eq
 800ab24:	6032      	streq	r2, [r6, #0]
 800ab26:	605a      	strne	r2, [r3, #4]
 800ab28:	e7ec      	b.n	800ab04 <_malloc_r+0xa0>
 800ab2a:	4623      	mov	r3, r4
 800ab2c:	6864      	ldr	r4, [r4, #4]
 800ab2e:	e7b2      	b.n	800aa96 <_malloc_r+0x32>
 800ab30:	4634      	mov	r4, r6
 800ab32:	6876      	ldr	r6, [r6, #4]
 800ab34:	e7b9      	b.n	800aaaa <_malloc_r+0x46>
 800ab36:	230c      	movs	r3, #12
 800ab38:	603b      	str	r3, [r7, #0]
 800ab3a:	4638      	mov	r0, r7
 800ab3c:	f000 fece 	bl	800b8dc <__malloc_unlock>
 800ab40:	e7a1      	b.n	800aa86 <_malloc_r+0x22>
 800ab42:	6025      	str	r5, [r4, #0]
 800ab44:	e7de      	b.n	800ab04 <_malloc_r+0xa0>
 800ab46:	bf00      	nop
 800ab48:	2000ab24 	.word	0x2000ab24

0800ab4c <__ssputs_r>:
 800ab4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab50:	688e      	ldr	r6, [r1, #8]
 800ab52:	429e      	cmp	r6, r3
 800ab54:	4682      	mov	sl, r0
 800ab56:	460c      	mov	r4, r1
 800ab58:	4690      	mov	r8, r2
 800ab5a:	461f      	mov	r7, r3
 800ab5c:	d838      	bhi.n	800abd0 <__ssputs_r+0x84>
 800ab5e:	898a      	ldrh	r2, [r1, #12]
 800ab60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ab64:	d032      	beq.n	800abcc <__ssputs_r+0x80>
 800ab66:	6825      	ldr	r5, [r4, #0]
 800ab68:	6909      	ldr	r1, [r1, #16]
 800ab6a:	eba5 0901 	sub.w	r9, r5, r1
 800ab6e:	6965      	ldr	r5, [r4, #20]
 800ab70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab78:	3301      	adds	r3, #1
 800ab7a:	444b      	add	r3, r9
 800ab7c:	106d      	asrs	r5, r5, #1
 800ab7e:	429d      	cmp	r5, r3
 800ab80:	bf38      	it	cc
 800ab82:	461d      	movcc	r5, r3
 800ab84:	0553      	lsls	r3, r2, #21
 800ab86:	d531      	bpl.n	800abec <__ssputs_r+0xa0>
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7ff ff6b 	bl	800aa64 <_malloc_r>
 800ab8e:	4606      	mov	r6, r0
 800ab90:	b950      	cbnz	r0, 800aba8 <__ssputs_r+0x5c>
 800ab92:	230c      	movs	r3, #12
 800ab94:	f8ca 3000 	str.w	r3, [sl]
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab9e:	81a3      	strh	r3, [r4, #12]
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aba8:	6921      	ldr	r1, [r4, #16]
 800abaa:	464a      	mov	r2, r9
 800abac:	f7ff fd18 	bl	800a5e0 <memcpy>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800abb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	6126      	str	r6, [r4, #16]
 800abbe:	6165      	str	r5, [r4, #20]
 800abc0:	444e      	add	r6, r9
 800abc2:	eba5 0509 	sub.w	r5, r5, r9
 800abc6:	6026      	str	r6, [r4, #0]
 800abc8:	60a5      	str	r5, [r4, #8]
 800abca:	463e      	mov	r6, r7
 800abcc:	42be      	cmp	r6, r7
 800abce:	d900      	bls.n	800abd2 <__ssputs_r+0x86>
 800abd0:	463e      	mov	r6, r7
 800abd2:	6820      	ldr	r0, [r4, #0]
 800abd4:	4632      	mov	r2, r6
 800abd6:	4641      	mov	r1, r8
 800abd8:	f7ff fd10 	bl	800a5fc <memmove>
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	1b9b      	subs	r3, r3, r6
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	4433      	add	r3, r6
 800abe6:	6023      	str	r3, [r4, #0]
 800abe8:	2000      	movs	r0, #0
 800abea:	e7db      	b.n	800aba4 <__ssputs_r+0x58>
 800abec:	462a      	mov	r2, r5
 800abee:	f000 fe7b 	bl	800b8e8 <_realloc_r>
 800abf2:	4606      	mov	r6, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d1e1      	bne.n	800abbc <__ssputs_r+0x70>
 800abf8:	6921      	ldr	r1, [r4, #16]
 800abfa:	4650      	mov	r0, sl
 800abfc:	f7ff fec6 	bl	800a98c <_free_r>
 800ac00:	e7c7      	b.n	800ab92 <__ssputs_r+0x46>
	...

0800ac04 <_svfiprintf_r>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	4698      	mov	r8, r3
 800ac0a:	898b      	ldrh	r3, [r1, #12]
 800ac0c:	061b      	lsls	r3, r3, #24
 800ac0e:	b09d      	sub	sp, #116	; 0x74
 800ac10:	4607      	mov	r7, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	d50e      	bpl.n	800ac36 <_svfiprintf_r+0x32>
 800ac18:	690b      	ldr	r3, [r1, #16]
 800ac1a:	b963      	cbnz	r3, 800ac36 <_svfiprintf_r+0x32>
 800ac1c:	2140      	movs	r1, #64	; 0x40
 800ac1e:	f7ff ff21 	bl	800aa64 <_malloc_r>
 800ac22:	6028      	str	r0, [r5, #0]
 800ac24:	6128      	str	r0, [r5, #16]
 800ac26:	b920      	cbnz	r0, 800ac32 <_svfiprintf_r+0x2e>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	e0d1      	b.n	800add6 <_svfiprintf_r+0x1d2>
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	616b      	str	r3, [r5, #20]
 800ac36:	2300      	movs	r3, #0
 800ac38:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3a:	2320      	movs	r3, #32
 800ac3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac40:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac44:	2330      	movs	r3, #48	; 0x30
 800ac46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800adf0 <_svfiprintf_r+0x1ec>
 800ac4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac4e:	f04f 0901 	mov.w	r9, #1
 800ac52:	4623      	mov	r3, r4
 800ac54:	469a      	mov	sl, r3
 800ac56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5a:	b10a      	cbz	r2, 800ac60 <_svfiprintf_r+0x5c>
 800ac5c:	2a25      	cmp	r2, #37	; 0x25
 800ac5e:	d1f9      	bne.n	800ac54 <_svfiprintf_r+0x50>
 800ac60:	ebba 0b04 	subs.w	fp, sl, r4
 800ac64:	d00b      	beq.n	800ac7e <_svfiprintf_r+0x7a>
 800ac66:	465b      	mov	r3, fp
 800ac68:	4622      	mov	r2, r4
 800ac6a:	4629      	mov	r1, r5
 800ac6c:	4638      	mov	r0, r7
 800ac6e:	f7ff ff6d 	bl	800ab4c <__ssputs_r>
 800ac72:	3001      	adds	r0, #1
 800ac74:	f000 80aa 	beq.w	800adcc <_svfiprintf_r+0x1c8>
 800ac78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac7a:	445a      	add	r2, fp
 800ac7c:	9209      	str	r2, [sp, #36]	; 0x24
 800ac7e:	f89a 3000 	ldrb.w	r3, [sl]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	f000 80a2 	beq.w	800adcc <_svfiprintf_r+0x1c8>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac92:	f10a 0a01 	add.w	sl, sl, #1
 800ac96:	9304      	str	r3, [sp, #16]
 800ac98:	9307      	str	r3, [sp, #28]
 800ac9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac9e:	931a      	str	r3, [sp, #104]	; 0x68
 800aca0:	4654      	mov	r4, sl
 800aca2:	2205      	movs	r2, #5
 800aca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aca8:	4851      	ldr	r0, [pc, #324]	; (800adf0 <_svfiprintf_r+0x1ec>)
 800acaa:	f7f5 faa1 	bl	80001f0 <memchr>
 800acae:	9a04      	ldr	r2, [sp, #16]
 800acb0:	b9d8      	cbnz	r0, 800acea <_svfiprintf_r+0xe6>
 800acb2:	06d0      	lsls	r0, r2, #27
 800acb4:	bf44      	itt	mi
 800acb6:	2320      	movmi	r3, #32
 800acb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acbc:	0711      	lsls	r1, r2, #28
 800acbe:	bf44      	itt	mi
 800acc0:	232b      	movmi	r3, #43	; 0x2b
 800acc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800acc6:	f89a 3000 	ldrb.w	r3, [sl]
 800acca:	2b2a      	cmp	r3, #42	; 0x2a
 800accc:	d015      	beq.n	800acfa <_svfiprintf_r+0xf6>
 800acce:	9a07      	ldr	r2, [sp, #28]
 800acd0:	4654      	mov	r4, sl
 800acd2:	2000      	movs	r0, #0
 800acd4:	f04f 0c0a 	mov.w	ip, #10
 800acd8:	4621      	mov	r1, r4
 800acda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acde:	3b30      	subs	r3, #48	; 0x30
 800ace0:	2b09      	cmp	r3, #9
 800ace2:	d94e      	bls.n	800ad82 <_svfiprintf_r+0x17e>
 800ace4:	b1b0      	cbz	r0, 800ad14 <_svfiprintf_r+0x110>
 800ace6:	9207      	str	r2, [sp, #28]
 800ace8:	e014      	b.n	800ad14 <_svfiprintf_r+0x110>
 800acea:	eba0 0308 	sub.w	r3, r0, r8
 800acee:	fa09 f303 	lsl.w	r3, r9, r3
 800acf2:	4313      	orrs	r3, r2
 800acf4:	9304      	str	r3, [sp, #16]
 800acf6:	46a2      	mov	sl, r4
 800acf8:	e7d2      	b.n	800aca0 <_svfiprintf_r+0x9c>
 800acfa:	9b03      	ldr	r3, [sp, #12]
 800acfc:	1d19      	adds	r1, r3, #4
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	9103      	str	r1, [sp, #12]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bfbb      	ittet	lt
 800ad06:	425b      	neglt	r3, r3
 800ad08:	f042 0202 	orrlt.w	r2, r2, #2
 800ad0c:	9307      	strge	r3, [sp, #28]
 800ad0e:	9307      	strlt	r3, [sp, #28]
 800ad10:	bfb8      	it	lt
 800ad12:	9204      	strlt	r2, [sp, #16]
 800ad14:	7823      	ldrb	r3, [r4, #0]
 800ad16:	2b2e      	cmp	r3, #46	; 0x2e
 800ad18:	d10c      	bne.n	800ad34 <_svfiprintf_r+0x130>
 800ad1a:	7863      	ldrb	r3, [r4, #1]
 800ad1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1e:	d135      	bne.n	800ad8c <_svfiprintf_r+0x188>
 800ad20:	9b03      	ldr	r3, [sp, #12]
 800ad22:	1d1a      	adds	r2, r3, #4
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	9203      	str	r2, [sp, #12]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	bfb8      	it	lt
 800ad2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad30:	3402      	adds	r4, #2
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae00 <_svfiprintf_r+0x1fc>
 800ad38:	7821      	ldrb	r1, [r4, #0]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	f7f5 fa57 	bl	80001f0 <memchr>
 800ad42:	b140      	cbz	r0, 800ad56 <_svfiprintf_r+0x152>
 800ad44:	2340      	movs	r3, #64	; 0x40
 800ad46:	eba0 000a 	sub.w	r0, r0, sl
 800ad4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad4e:	9b04      	ldr	r3, [sp, #16]
 800ad50:	4303      	orrs	r3, r0
 800ad52:	3401      	adds	r4, #1
 800ad54:	9304      	str	r3, [sp, #16]
 800ad56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad5a:	4826      	ldr	r0, [pc, #152]	; (800adf4 <_svfiprintf_r+0x1f0>)
 800ad5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad60:	2206      	movs	r2, #6
 800ad62:	f7f5 fa45 	bl	80001f0 <memchr>
 800ad66:	2800      	cmp	r0, #0
 800ad68:	d038      	beq.n	800addc <_svfiprintf_r+0x1d8>
 800ad6a:	4b23      	ldr	r3, [pc, #140]	; (800adf8 <_svfiprintf_r+0x1f4>)
 800ad6c:	bb1b      	cbnz	r3, 800adb6 <_svfiprintf_r+0x1b2>
 800ad6e:	9b03      	ldr	r3, [sp, #12]
 800ad70:	3307      	adds	r3, #7
 800ad72:	f023 0307 	bic.w	r3, r3, #7
 800ad76:	3308      	adds	r3, #8
 800ad78:	9303      	str	r3, [sp, #12]
 800ad7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad7c:	4433      	add	r3, r6
 800ad7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad80:	e767      	b.n	800ac52 <_svfiprintf_r+0x4e>
 800ad82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad86:	460c      	mov	r4, r1
 800ad88:	2001      	movs	r0, #1
 800ad8a:	e7a5      	b.n	800acd8 <_svfiprintf_r+0xd4>
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	3401      	adds	r4, #1
 800ad90:	9305      	str	r3, [sp, #20]
 800ad92:	4619      	mov	r1, r3
 800ad94:	f04f 0c0a 	mov.w	ip, #10
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9e:	3a30      	subs	r2, #48	; 0x30
 800ada0:	2a09      	cmp	r2, #9
 800ada2:	d903      	bls.n	800adac <_svfiprintf_r+0x1a8>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d0c5      	beq.n	800ad34 <_svfiprintf_r+0x130>
 800ada8:	9105      	str	r1, [sp, #20]
 800adaa:	e7c3      	b.n	800ad34 <_svfiprintf_r+0x130>
 800adac:	fb0c 2101 	mla	r1, ip, r1, r2
 800adb0:	4604      	mov	r4, r0
 800adb2:	2301      	movs	r3, #1
 800adb4:	e7f0      	b.n	800ad98 <_svfiprintf_r+0x194>
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	462a      	mov	r2, r5
 800adbc:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <_svfiprintf_r+0x1f8>)
 800adbe:	a904      	add	r1, sp, #16
 800adc0:	4638      	mov	r0, r7
 800adc2:	f3af 8000 	nop.w
 800adc6:	1c42      	adds	r2, r0, #1
 800adc8:	4606      	mov	r6, r0
 800adca:	d1d6      	bne.n	800ad7a <_svfiprintf_r+0x176>
 800adcc:	89ab      	ldrh	r3, [r5, #12]
 800adce:	065b      	lsls	r3, r3, #25
 800add0:	f53f af2c 	bmi.w	800ac2c <_svfiprintf_r+0x28>
 800add4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800add6:	b01d      	add	sp, #116	; 0x74
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	ab03      	add	r3, sp, #12
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	462a      	mov	r2, r5
 800ade2:	4b06      	ldr	r3, [pc, #24]	; (800adfc <_svfiprintf_r+0x1f8>)
 800ade4:	a904      	add	r1, sp, #16
 800ade6:	4638      	mov	r0, r7
 800ade8:	f000 f9d4 	bl	800b194 <_printf_i>
 800adec:	e7eb      	b.n	800adc6 <_svfiprintf_r+0x1c2>
 800adee:	bf00      	nop
 800adf0:	0800dc0c 	.word	0x0800dc0c
 800adf4:	0800dc16 	.word	0x0800dc16
 800adf8:	00000000 	.word	0x00000000
 800adfc:	0800ab4d 	.word	0x0800ab4d
 800ae00:	0800dc12 	.word	0x0800dc12

0800ae04 <__sfputc_r>:
 800ae04:	6893      	ldr	r3, [r2, #8]
 800ae06:	3b01      	subs	r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	b410      	push	{r4}
 800ae0c:	6093      	str	r3, [r2, #8]
 800ae0e:	da08      	bge.n	800ae22 <__sfputc_r+0x1e>
 800ae10:	6994      	ldr	r4, [r2, #24]
 800ae12:	42a3      	cmp	r3, r4
 800ae14:	db01      	blt.n	800ae1a <__sfputc_r+0x16>
 800ae16:	290a      	cmp	r1, #10
 800ae18:	d103      	bne.n	800ae22 <__sfputc_r+0x1e>
 800ae1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae1e:	f000 bb33 	b.w	800b488 <__swbuf_r>
 800ae22:	6813      	ldr	r3, [r2, #0]
 800ae24:	1c58      	adds	r0, r3, #1
 800ae26:	6010      	str	r0, [r2, #0]
 800ae28:	7019      	strb	r1, [r3, #0]
 800ae2a:	4608      	mov	r0, r1
 800ae2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <__sfputs_r>:
 800ae32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae34:	4606      	mov	r6, r0
 800ae36:	460f      	mov	r7, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	18d5      	adds	r5, r2, r3
 800ae3c:	42ac      	cmp	r4, r5
 800ae3e:	d101      	bne.n	800ae44 <__sfputs_r+0x12>
 800ae40:	2000      	movs	r0, #0
 800ae42:	e007      	b.n	800ae54 <__sfputs_r+0x22>
 800ae44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae48:	463a      	mov	r2, r7
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	f7ff ffda 	bl	800ae04 <__sfputc_r>
 800ae50:	1c43      	adds	r3, r0, #1
 800ae52:	d1f3      	bne.n	800ae3c <__sfputs_r+0xa>
 800ae54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae58 <_vfiprintf_r>:
 800ae58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5c:	460d      	mov	r5, r1
 800ae5e:	b09d      	sub	sp, #116	; 0x74
 800ae60:	4614      	mov	r4, r2
 800ae62:	4698      	mov	r8, r3
 800ae64:	4606      	mov	r6, r0
 800ae66:	b118      	cbz	r0, 800ae70 <_vfiprintf_r+0x18>
 800ae68:	6983      	ldr	r3, [r0, #24]
 800ae6a:	b90b      	cbnz	r3, 800ae70 <_vfiprintf_r+0x18>
 800ae6c:	f7ff fcd4 	bl	800a818 <__sinit>
 800ae70:	4b89      	ldr	r3, [pc, #548]	; (800b098 <_vfiprintf_r+0x240>)
 800ae72:	429d      	cmp	r5, r3
 800ae74:	d11b      	bne.n	800aeae <_vfiprintf_r+0x56>
 800ae76:	6875      	ldr	r5, [r6, #4]
 800ae78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae7a:	07d9      	lsls	r1, r3, #31
 800ae7c:	d405      	bmi.n	800ae8a <_vfiprintf_r+0x32>
 800ae7e:	89ab      	ldrh	r3, [r5, #12]
 800ae80:	059a      	lsls	r2, r3, #22
 800ae82:	d402      	bmi.n	800ae8a <_vfiprintf_r+0x32>
 800ae84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae86:	f7ff fd77 	bl	800a978 <__retarget_lock_acquire_recursive>
 800ae8a:	89ab      	ldrh	r3, [r5, #12]
 800ae8c:	071b      	lsls	r3, r3, #28
 800ae8e:	d501      	bpl.n	800ae94 <_vfiprintf_r+0x3c>
 800ae90:	692b      	ldr	r3, [r5, #16]
 800ae92:	b9eb      	cbnz	r3, 800aed0 <_vfiprintf_r+0x78>
 800ae94:	4629      	mov	r1, r5
 800ae96:	4630      	mov	r0, r6
 800ae98:	f000 fb5a 	bl	800b550 <__swsetup_r>
 800ae9c:	b1c0      	cbz	r0, 800aed0 <_vfiprintf_r+0x78>
 800ae9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aea0:	07dc      	lsls	r4, r3, #31
 800aea2:	d50e      	bpl.n	800aec2 <_vfiprintf_r+0x6a>
 800aea4:	f04f 30ff 	mov.w	r0, #4294967295
 800aea8:	b01d      	add	sp, #116	; 0x74
 800aeaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeae:	4b7b      	ldr	r3, [pc, #492]	; (800b09c <_vfiprintf_r+0x244>)
 800aeb0:	429d      	cmp	r5, r3
 800aeb2:	d101      	bne.n	800aeb8 <_vfiprintf_r+0x60>
 800aeb4:	68b5      	ldr	r5, [r6, #8]
 800aeb6:	e7df      	b.n	800ae78 <_vfiprintf_r+0x20>
 800aeb8:	4b79      	ldr	r3, [pc, #484]	; (800b0a0 <_vfiprintf_r+0x248>)
 800aeba:	429d      	cmp	r5, r3
 800aebc:	bf08      	it	eq
 800aebe:	68f5      	ldreq	r5, [r6, #12]
 800aec0:	e7da      	b.n	800ae78 <_vfiprintf_r+0x20>
 800aec2:	89ab      	ldrh	r3, [r5, #12]
 800aec4:	0598      	lsls	r0, r3, #22
 800aec6:	d4ed      	bmi.n	800aea4 <_vfiprintf_r+0x4c>
 800aec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeca:	f7ff fd56 	bl	800a97a <__retarget_lock_release_recursive>
 800aece:	e7e9      	b.n	800aea4 <_vfiprintf_r+0x4c>
 800aed0:	2300      	movs	r3, #0
 800aed2:	9309      	str	r3, [sp, #36]	; 0x24
 800aed4:	2320      	movs	r3, #32
 800aed6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeda:	f8cd 800c 	str.w	r8, [sp, #12]
 800aede:	2330      	movs	r3, #48	; 0x30
 800aee0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0a4 <_vfiprintf_r+0x24c>
 800aee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aee8:	f04f 0901 	mov.w	r9, #1
 800aeec:	4623      	mov	r3, r4
 800aeee:	469a      	mov	sl, r3
 800aef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef4:	b10a      	cbz	r2, 800aefa <_vfiprintf_r+0xa2>
 800aef6:	2a25      	cmp	r2, #37	; 0x25
 800aef8:	d1f9      	bne.n	800aeee <_vfiprintf_r+0x96>
 800aefa:	ebba 0b04 	subs.w	fp, sl, r4
 800aefe:	d00b      	beq.n	800af18 <_vfiprintf_r+0xc0>
 800af00:	465b      	mov	r3, fp
 800af02:	4622      	mov	r2, r4
 800af04:	4629      	mov	r1, r5
 800af06:	4630      	mov	r0, r6
 800af08:	f7ff ff93 	bl	800ae32 <__sfputs_r>
 800af0c:	3001      	adds	r0, #1
 800af0e:	f000 80aa 	beq.w	800b066 <_vfiprintf_r+0x20e>
 800af12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af14:	445a      	add	r2, fp
 800af16:	9209      	str	r2, [sp, #36]	; 0x24
 800af18:	f89a 3000 	ldrb.w	r3, [sl]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 80a2 	beq.w	800b066 <_vfiprintf_r+0x20e>
 800af22:	2300      	movs	r3, #0
 800af24:	f04f 32ff 	mov.w	r2, #4294967295
 800af28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af2c:	f10a 0a01 	add.w	sl, sl, #1
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	9307      	str	r3, [sp, #28]
 800af34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af38:	931a      	str	r3, [sp, #104]	; 0x68
 800af3a:	4654      	mov	r4, sl
 800af3c:	2205      	movs	r2, #5
 800af3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af42:	4858      	ldr	r0, [pc, #352]	; (800b0a4 <_vfiprintf_r+0x24c>)
 800af44:	f7f5 f954 	bl	80001f0 <memchr>
 800af48:	9a04      	ldr	r2, [sp, #16]
 800af4a:	b9d8      	cbnz	r0, 800af84 <_vfiprintf_r+0x12c>
 800af4c:	06d1      	lsls	r1, r2, #27
 800af4e:	bf44      	itt	mi
 800af50:	2320      	movmi	r3, #32
 800af52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af56:	0713      	lsls	r3, r2, #28
 800af58:	bf44      	itt	mi
 800af5a:	232b      	movmi	r3, #43	; 0x2b
 800af5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af60:	f89a 3000 	ldrb.w	r3, [sl]
 800af64:	2b2a      	cmp	r3, #42	; 0x2a
 800af66:	d015      	beq.n	800af94 <_vfiprintf_r+0x13c>
 800af68:	9a07      	ldr	r2, [sp, #28]
 800af6a:	4654      	mov	r4, sl
 800af6c:	2000      	movs	r0, #0
 800af6e:	f04f 0c0a 	mov.w	ip, #10
 800af72:	4621      	mov	r1, r4
 800af74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af78:	3b30      	subs	r3, #48	; 0x30
 800af7a:	2b09      	cmp	r3, #9
 800af7c:	d94e      	bls.n	800b01c <_vfiprintf_r+0x1c4>
 800af7e:	b1b0      	cbz	r0, 800afae <_vfiprintf_r+0x156>
 800af80:	9207      	str	r2, [sp, #28]
 800af82:	e014      	b.n	800afae <_vfiprintf_r+0x156>
 800af84:	eba0 0308 	sub.w	r3, r0, r8
 800af88:	fa09 f303 	lsl.w	r3, r9, r3
 800af8c:	4313      	orrs	r3, r2
 800af8e:	9304      	str	r3, [sp, #16]
 800af90:	46a2      	mov	sl, r4
 800af92:	e7d2      	b.n	800af3a <_vfiprintf_r+0xe2>
 800af94:	9b03      	ldr	r3, [sp, #12]
 800af96:	1d19      	adds	r1, r3, #4
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	9103      	str	r1, [sp, #12]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	bfbb      	ittet	lt
 800afa0:	425b      	neglt	r3, r3
 800afa2:	f042 0202 	orrlt.w	r2, r2, #2
 800afa6:	9307      	strge	r3, [sp, #28]
 800afa8:	9307      	strlt	r3, [sp, #28]
 800afaa:	bfb8      	it	lt
 800afac:	9204      	strlt	r2, [sp, #16]
 800afae:	7823      	ldrb	r3, [r4, #0]
 800afb0:	2b2e      	cmp	r3, #46	; 0x2e
 800afb2:	d10c      	bne.n	800afce <_vfiprintf_r+0x176>
 800afb4:	7863      	ldrb	r3, [r4, #1]
 800afb6:	2b2a      	cmp	r3, #42	; 0x2a
 800afb8:	d135      	bne.n	800b026 <_vfiprintf_r+0x1ce>
 800afba:	9b03      	ldr	r3, [sp, #12]
 800afbc:	1d1a      	adds	r2, r3, #4
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	9203      	str	r2, [sp, #12]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	bfb8      	it	lt
 800afc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800afca:	3402      	adds	r4, #2
 800afcc:	9305      	str	r3, [sp, #20]
 800afce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0b4 <_vfiprintf_r+0x25c>
 800afd2:	7821      	ldrb	r1, [r4, #0]
 800afd4:	2203      	movs	r2, #3
 800afd6:	4650      	mov	r0, sl
 800afd8:	f7f5 f90a 	bl	80001f0 <memchr>
 800afdc:	b140      	cbz	r0, 800aff0 <_vfiprintf_r+0x198>
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	eba0 000a 	sub.w	r0, r0, sl
 800afe4:	fa03 f000 	lsl.w	r0, r3, r0
 800afe8:	9b04      	ldr	r3, [sp, #16]
 800afea:	4303      	orrs	r3, r0
 800afec:	3401      	adds	r4, #1
 800afee:	9304      	str	r3, [sp, #16]
 800aff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aff4:	482c      	ldr	r0, [pc, #176]	; (800b0a8 <_vfiprintf_r+0x250>)
 800aff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800affa:	2206      	movs	r2, #6
 800affc:	f7f5 f8f8 	bl	80001f0 <memchr>
 800b000:	2800      	cmp	r0, #0
 800b002:	d03f      	beq.n	800b084 <_vfiprintf_r+0x22c>
 800b004:	4b29      	ldr	r3, [pc, #164]	; (800b0ac <_vfiprintf_r+0x254>)
 800b006:	bb1b      	cbnz	r3, 800b050 <_vfiprintf_r+0x1f8>
 800b008:	9b03      	ldr	r3, [sp, #12]
 800b00a:	3307      	adds	r3, #7
 800b00c:	f023 0307 	bic.w	r3, r3, #7
 800b010:	3308      	adds	r3, #8
 800b012:	9303      	str	r3, [sp, #12]
 800b014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b016:	443b      	add	r3, r7
 800b018:	9309      	str	r3, [sp, #36]	; 0x24
 800b01a:	e767      	b.n	800aeec <_vfiprintf_r+0x94>
 800b01c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b020:	460c      	mov	r4, r1
 800b022:	2001      	movs	r0, #1
 800b024:	e7a5      	b.n	800af72 <_vfiprintf_r+0x11a>
 800b026:	2300      	movs	r3, #0
 800b028:	3401      	adds	r4, #1
 800b02a:	9305      	str	r3, [sp, #20]
 800b02c:	4619      	mov	r1, r3
 800b02e:	f04f 0c0a 	mov.w	ip, #10
 800b032:	4620      	mov	r0, r4
 800b034:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b038:	3a30      	subs	r2, #48	; 0x30
 800b03a:	2a09      	cmp	r2, #9
 800b03c:	d903      	bls.n	800b046 <_vfiprintf_r+0x1ee>
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d0c5      	beq.n	800afce <_vfiprintf_r+0x176>
 800b042:	9105      	str	r1, [sp, #20]
 800b044:	e7c3      	b.n	800afce <_vfiprintf_r+0x176>
 800b046:	fb0c 2101 	mla	r1, ip, r1, r2
 800b04a:	4604      	mov	r4, r0
 800b04c:	2301      	movs	r3, #1
 800b04e:	e7f0      	b.n	800b032 <_vfiprintf_r+0x1da>
 800b050:	ab03      	add	r3, sp, #12
 800b052:	9300      	str	r3, [sp, #0]
 800b054:	462a      	mov	r2, r5
 800b056:	4b16      	ldr	r3, [pc, #88]	; (800b0b0 <_vfiprintf_r+0x258>)
 800b058:	a904      	add	r1, sp, #16
 800b05a:	4630      	mov	r0, r6
 800b05c:	f3af 8000 	nop.w
 800b060:	4607      	mov	r7, r0
 800b062:	1c78      	adds	r0, r7, #1
 800b064:	d1d6      	bne.n	800b014 <_vfiprintf_r+0x1bc>
 800b066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b068:	07d9      	lsls	r1, r3, #31
 800b06a:	d405      	bmi.n	800b078 <_vfiprintf_r+0x220>
 800b06c:	89ab      	ldrh	r3, [r5, #12]
 800b06e:	059a      	lsls	r2, r3, #22
 800b070:	d402      	bmi.n	800b078 <_vfiprintf_r+0x220>
 800b072:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b074:	f7ff fc81 	bl	800a97a <__retarget_lock_release_recursive>
 800b078:	89ab      	ldrh	r3, [r5, #12]
 800b07a:	065b      	lsls	r3, r3, #25
 800b07c:	f53f af12 	bmi.w	800aea4 <_vfiprintf_r+0x4c>
 800b080:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b082:	e711      	b.n	800aea8 <_vfiprintf_r+0x50>
 800b084:	ab03      	add	r3, sp, #12
 800b086:	9300      	str	r3, [sp, #0]
 800b088:	462a      	mov	r2, r5
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <_vfiprintf_r+0x258>)
 800b08c:	a904      	add	r1, sp, #16
 800b08e:	4630      	mov	r0, r6
 800b090:	f000 f880 	bl	800b194 <_printf_i>
 800b094:	e7e4      	b.n	800b060 <_vfiprintf_r+0x208>
 800b096:	bf00      	nop
 800b098:	0800dbcc 	.word	0x0800dbcc
 800b09c:	0800dbec 	.word	0x0800dbec
 800b0a0:	0800dbac 	.word	0x0800dbac
 800b0a4:	0800dc0c 	.word	0x0800dc0c
 800b0a8:	0800dc16 	.word	0x0800dc16
 800b0ac:	00000000 	.word	0x00000000
 800b0b0:	0800ae33 	.word	0x0800ae33
 800b0b4:	0800dc12 	.word	0x0800dc12

0800b0b8 <_printf_common>:
 800b0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0bc:	4616      	mov	r6, r2
 800b0be:	4699      	mov	r9, r3
 800b0c0:	688a      	ldr	r2, [r1, #8]
 800b0c2:	690b      	ldr	r3, [r1, #16]
 800b0c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	bfb8      	it	lt
 800b0cc:	4613      	movlt	r3, r2
 800b0ce:	6033      	str	r3, [r6, #0]
 800b0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0d4:	4607      	mov	r7, r0
 800b0d6:	460c      	mov	r4, r1
 800b0d8:	b10a      	cbz	r2, 800b0de <_printf_common+0x26>
 800b0da:	3301      	adds	r3, #1
 800b0dc:	6033      	str	r3, [r6, #0]
 800b0de:	6823      	ldr	r3, [r4, #0]
 800b0e0:	0699      	lsls	r1, r3, #26
 800b0e2:	bf42      	ittt	mi
 800b0e4:	6833      	ldrmi	r3, [r6, #0]
 800b0e6:	3302      	addmi	r3, #2
 800b0e8:	6033      	strmi	r3, [r6, #0]
 800b0ea:	6825      	ldr	r5, [r4, #0]
 800b0ec:	f015 0506 	ands.w	r5, r5, #6
 800b0f0:	d106      	bne.n	800b100 <_printf_common+0x48>
 800b0f2:	f104 0a19 	add.w	sl, r4, #25
 800b0f6:	68e3      	ldr	r3, [r4, #12]
 800b0f8:	6832      	ldr	r2, [r6, #0]
 800b0fa:	1a9b      	subs	r3, r3, r2
 800b0fc:	42ab      	cmp	r3, r5
 800b0fe:	dc26      	bgt.n	800b14e <_printf_common+0x96>
 800b100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b104:	1e13      	subs	r3, r2, #0
 800b106:	6822      	ldr	r2, [r4, #0]
 800b108:	bf18      	it	ne
 800b10a:	2301      	movne	r3, #1
 800b10c:	0692      	lsls	r2, r2, #26
 800b10e:	d42b      	bmi.n	800b168 <_printf_common+0xb0>
 800b110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b114:	4649      	mov	r1, r9
 800b116:	4638      	mov	r0, r7
 800b118:	47c0      	blx	r8
 800b11a:	3001      	adds	r0, #1
 800b11c:	d01e      	beq.n	800b15c <_printf_common+0xa4>
 800b11e:	6823      	ldr	r3, [r4, #0]
 800b120:	68e5      	ldr	r5, [r4, #12]
 800b122:	6832      	ldr	r2, [r6, #0]
 800b124:	f003 0306 	and.w	r3, r3, #6
 800b128:	2b04      	cmp	r3, #4
 800b12a:	bf08      	it	eq
 800b12c:	1aad      	subeq	r5, r5, r2
 800b12e:	68a3      	ldr	r3, [r4, #8]
 800b130:	6922      	ldr	r2, [r4, #16]
 800b132:	bf0c      	ite	eq
 800b134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b138:	2500      	movne	r5, #0
 800b13a:	4293      	cmp	r3, r2
 800b13c:	bfc4      	itt	gt
 800b13e:	1a9b      	subgt	r3, r3, r2
 800b140:	18ed      	addgt	r5, r5, r3
 800b142:	2600      	movs	r6, #0
 800b144:	341a      	adds	r4, #26
 800b146:	42b5      	cmp	r5, r6
 800b148:	d11a      	bne.n	800b180 <_printf_common+0xc8>
 800b14a:	2000      	movs	r0, #0
 800b14c:	e008      	b.n	800b160 <_printf_common+0xa8>
 800b14e:	2301      	movs	r3, #1
 800b150:	4652      	mov	r2, sl
 800b152:	4649      	mov	r1, r9
 800b154:	4638      	mov	r0, r7
 800b156:	47c0      	blx	r8
 800b158:	3001      	adds	r0, #1
 800b15a:	d103      	bne.n	800b164 <_printf_common+0xac>
 800b15c:	f04f 30ff 	mov.w	r0, #4294967295
 800b160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b164:	3501      	adds	r5, #1
 800b166:	e7c6      	b.n	800b0f6 <_printf_common+0x3e>
 800b168:	18e1      	adds	r1, r4, r3
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	2030      	movs	r0, #48	; 0x30
 800b16e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b172:	4422      	add	r2, r4
 800b174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b17c:	3302      	adds	r3, #2
 800b17e:	e7c7      	b.n	800b110 <_printf_common+0x58>
 800b180:	2301      	movs	r3, #1
 800b182:	4622      	mov	r2, r4
 800b184:	4649      	mov	r1, r9
 800b186:	4638      	mov	r0, r7
 800b188:	47c0      	blx	r8
 800b18a:	3001      	adds	r0, #1
 800b18c:	d0e6      	beq.n	800b15c <_printf_common+0xa4>
 800b18e:	3601      	adds	r6, #1
 800b190:	e7d9      	b.n	800b146 <_printf_common+0x8e>
	...

0800b194 <_printf_i>:
 800b194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b198:	7e0f      	ldrb	r7, [r1, #24]
 800b19a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b19c:	2f78      	cmp	r7, #120	; 0x78
 800b19e:	4691      	mov	r9, r2
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	460c      	mov	r4, r1
 800b1a4:	469a      	mov	sl, r3
 800b1a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1aa:	d807      	bhi.n	800b1bc <_printf_i+0x28>
 800b1ac:	2f62      	cmp	r7, #98	; 0x62
 800b1ae:	d80a      	bhi.n	800b1c6 <_printf_i+0x32>
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	f000 80d8 	beq.w	800b366 <_printf_i+0x1d2>
 800b1b6:	2f58      	cmp	r7, #88	; 0x58
 800b1b8:	f000 80a3 	beq.w	800b302 <_printf_i+0x16e>
 800b1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1c4:	e03a      	b.n	800b23c <_printf_i+0xa8>
 800b1c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1ca:	2b15      	cmp	r3, #21
 800b1cc:	d8f6      	bhi.n	800b1bc <_printf_i+0x28>
 800b1ce:	a101      	add	r1, pc, #4	; (adr r1, 800b1d4 <_printf_i+0x40>)
 800b1d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b241 	.word	0x0800b241
 800b1dc:	0800b1bd 	.word	0x0800b1bd
 800b1e0:	0800b1bd 	.word	0x0800b1bd
 800b1e4:	0800b1bd 	.word	0x0800b1bd
 800b1e8:	0800b1bd 	.word	0x0800b1bd
 800b1ec:	0800b241 	.word	0x0800b241
 800b1f0:	0800b1bd 	.word	0x0800b1bd
 800b1f4:	0800b1bd 	.word	0x0800b1bd
 800b1f8:	0800b1bd 	.word	0x0800b1bd
 800b1fc:	0800b1bd 	.word	0x0800b1bd
 800b200:	0800b34d 	.word	0x0800b34d
 800b204:	0800b271 	.word	0x0800b271
 800b208:	0800b32f 	.word	0x0800b32f
 800b20c:	0800b1bd 	.word	0x0800b1bd
 800b210:	0800b1bd 	.word	0x0800b1bd
 800b214:	0800b36f 	.word	0x0800b36f
 800b218:	0800b1bd 	.word	0x0800b1bd
 800b21c:	0800b271 	.word	0x0800b271
 800b220:	0800b1bd 	.word	0x0800b1bd
 800b224:	0800b1bd 	.word	0x0800b1bd
 800b228:	0800b337 	.word	0x0800b337
 800b22c:	682b      	ldr	r3, [r5, #0]
 800b22e:	1d1a      	adds	r2, r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	602a      	str	r2, [r5, #0]
 800b234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b23c:	2301      	movs	r3, #1
 800b23e:	e0a3      	b.n	800b388 <_printf_i+0x1f4>
 800b240:	6820      	ldr	r0, [r4, #0]
 800b242:	6829      	ldr	r1, [r5, #0]
 800b244:	0606      	lsls	r6, r0, #24
 800b246:	f101 0304 	add.w	r3, r1, #4
 800b24a:	d50a      	bpl.n	800b262 <_printf_i+0xce>
 800b24c:	680e      	ldr	r6, [r1, #0]
 800b24e:	602b      	str	r3, [r5, #0]
 800b250:	2e00      	cmp	r6, #0
 800b252:	da03      	bge.n	800b25c <_printf_i+0xc8>
 800b254:	232d      	movs	r3, #45	; 0x2d
 800b256:	4276      	negs	r6, r6
 800b258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b25c:	485e      	ldr	r0, [pc, #376]	; (800b3d8 <_printf_i+0x244>)
 800b25e:	230a      	movs	r3, #10
 800b260:	e019      	b.n	800b296 <_printf_i+0x102>
 800b262:	680e      	ldr	r6, [r1, #0]
 800b264:	602b      	str	r3, [r5, #0]
 800b266:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b26a:	bf18      	it	ne
 800b26c:	b236      	sxthne	r6, r6
 800b26e:	e7ef      	b.n	800b250 <_printf_i+0xbc>
 800b270:	682b      	ldr	r3, [r5, #0]
 800b272:	6820      	ldr	r0, [r4, #0]
 800b274:	1d19      	adds	r1, r3, #4
 800b276:	6029      	str	r1, [r5, #0]
 800b278:	0601      	lsls	r1, r0, #24
 800b27a:	d501      	bpl.n	800b280 <_printf_i+0xec>
 800b27c:	681e      	ldr	r6, [r3, #0]
 800b27e:	e002      	b.n	800b286 <_printf_i+0xf2>
 800b280:	0646      	lsls	r6, r0, #25
 800b282:	d5fb      	bpl.n	800b27c <_printf_i+0xe8>
 800b284:	881e      	ldrh	r6, [r3, #0]
 800b286:	4854      	ldr	r0, [pc, #336]	; (800b3d8 <_printf_i+0x244>)
 800b288:	2f6f      	cmp	r7, #111	; 0x6f
 800b28a:	bf0c      	ite	eq
 800b28c:	2308      	moveq	r3, #8
 800b28e:	230a      	movne	r3, #10
 800b290:	2100      	movs	r1, #0
 800b292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b296:	6865      	ldr	r5, [r4, #4]
 800b298:	60a5      	str	r5, [r4, #8]
 800b29a:	2d00      	cmp	r5, #0
 800b29c:	bfa2      	ittt	ge
 800b29e:	6821      	ldrge	r1, [r4, #0]
 800b2a0:	f021 0104 	bicge.w	r1, r1, #4
 800b2a4:	6021      	strge	r1, [r4, #0]
 800b2a6:	b90e      	cbnz	r6, 800b2ac <_printf_i+0x118>
 800b2a8:	2d00      	cmp	r5, #0
 800b2aa:	d04d      	beq.n	800b348 <_printf_i+0x1b4>
 800b2ac:	4615      	mov	r5, r2
 800b2ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2b2:	fb03 6711 	mls	r7, r3, r1, r6
 800b2b6:	5dc7      	ldrb	r7, [r0, r7]
 800b2b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2bc:	4637      	mov	r7, r6
 800b2be:	42bb      	cmp	r3, r7
 800b2c0:	460e      	mov	r6, r1
 800b2c2:	d9f4      	bls.n	800b2ae <_printf_i+0x11a>
 800b2c4:	2b08      	cmp	r3, #8
 800b2c6:	d10b      	bne.n	800b2e0 <_printf_i+0x14c>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	07de      	lsls	r6, r3, #31
 800b2cc:	d508      	bpl.n	800b2e0 <_printf_i+0x14c>
 800b2ce:	6923      	ldr	r3, [r4, #16]
 800b2d0:	6861      	ldr	r1, [r4, #4]
 800b2d2:	4299      	cmp	r1, r3
 800b2d4:	bfde      	ittt	le
 800b2d6:	2330      	movle	r3, #48	; 0x30
 800b2d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2e0:	1b52      	subs	r2, r2, r5
 800b2e2:	6122      	str	r2, [r4, #16]
 800b2e4:	f8cd a000 	str.w	sl, [sp]
 800b2e8:	464b      	mov	r3, r9
 800b2ea:	aa03      	add	r2, sp, #12
 800b2ec:	4621      	mov	r1, r4
 800b2ee:	4640      	mov	r0, r8
 800b2f0:	f7ff fee2 	bl	800b0b8 <_printf_common>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d14c      	bne.n	800b392 <_printf_i+0x1fe>
 800b2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2fc:	b004      	add	sp, #16
 800b2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b302:	4835      	ldr	r0, [pc, #212]	; (800b3d8 <_printf_i+0x244>)
 800b304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b308:	6829      	ldr	r1, [r5, #0]
 800b30a:	6823      	ldr	r3, [r4, #0]
 800b30c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b310:	6029      	str	r1, [r5, #0]
 800b312:	061d      	lsls	r5, r3, #24
 800b314:	d514      	bpl.n	800b340 <_printf_i+0x1ac>
 800b316:	07df      	lsls	r7, r3, #31
 800b318:	bf44      	itt	mi
 800b31a:	f043 0320 	orrmi.w	r3, r3, #32
 800b31e:	6023      	strmi	r3, [r4, #0]
 800b320:	b91e      	cbnz	r6, 800b32a <_printf_i+0x196>
 800b322:	6823      	ldr	r3, [r4, #0]
 800b324:	f023 0320 	bic.w	r3, r3, #32
 800b328:	6023      	str	r3, [r4, #0]
 800b32a:	2310      	movs	r3, #16
 800b32c:	e7b0      	b.n	800b290 <_printf_i+0xfc>
 800b32e:	6823      	ldr	r3, [r4, #0]
 800b330:	f043 0320 	orr.w	r3, r3, #32
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	2378      	movs	r3, #120	; 0x78
 800b338:	4828      	ldr	r0, [pc, #160]	; (800b3dc <_printf_i+0x248>)
 800b33a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b33e:	e7e3      	b.n	800b308 <_printf_i+0x174>
 800b340:	0659      	lsls	r1, r3, #25
 800b342:	bf48      	it	mi
 800b344:	b2b6      	uxthmi	r6, r6
 800b346:	e7e6      	b.n	800b316 <_printf_i+0x182>
 800b348:	4615      	mov	r5, r2
 800b34a:	e7bb      	b.n	800b2c4 <_printf_i+0x130>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	6826      	ldr	r6, [r4, #0]
 800b350:	6961      	ldr	r1, [r4, #20]
 800b352:	1d18      	adds	r0, r3, #4
 800b354:	6028      	str	r0, [r5, #0]
 800b356:	0635      	lsls	r5, r6, #24
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	d501      	bpl.n	800b360 <_printf_i+0x1cc>
 800b35c:	6019      	str	r1, [r3, #0]
 800b35e:	e002      	b.n	800b366 <_printf_i+0x1d2>
 800b360:	0670      	lsls	r0, r6, #25
 800b362:	d5fb      	bpl.n	800b35c <_printf_i+0x1c8>
 800b364:	8019      	strh	r1, [r3, #0]
 800b366:	2300      	movs	r3, #0
 800b368:	6123      	str	r3, [r4, #16]
 800b36a:	4615      	mov	r5, r2
 800b36c:	e7ba      	b.n	800b2e4 <_printf_i+0x150>
 800b36e:	682b      	ldr	r3, [r5, #0]
 800b370:	1d1a      	adds	r2, r3, #4
 800b372:	602a      	str	r2, [r5, #0]
 800b374:	681d      	ldr	r5, [r3, #0]
 800b376:	6862      	ldr	r2, [r4, #4]
 800b378:	2100      	movs	r1, #0
 800b37a:	4628      	mov	r0, r5
 800b37c:	f7f4 ff38 	bl	80001f0 <memchr>
 800b380:	b108      	cbz	r0, 800b386 <_printf_i+0x1f2>
 800b382:	1b40      	subs	r0, r0, r5
 800b384:	6060      	str	r0, [r4, #4]
 800b386:	6863      	ldr	r3, [r4, #4]
 800b388:	6123      	str	r3, [r4, #16]
 800b38a:	2300      	movs	r3, #0
 800b38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b390:	e7a8      	b.n	800b2e4 <_printf_i+0x150>
 800b392:	6923      	ldr	r3, [r4, #16]
 800b394:	462a      	mov	r2, r5
 800b396:	4649      	mov	r1, r9
 800b398:	4640      	mov	r0, r8
 800b39a:	47d0      	blx	sl
 800b39c:	3001      	adds	r0, #1
 800b39e:	d0ab      	beq.n	800b2f8 <_printf_i+0x164>
 800b3a0:	6823      	ldr	r3, [r4, #0]
 800b3a2:	079b      	lsls	r3, r3, #30
 800b3a4:	d413      	bmi.n	800b3ce <_printf_i+0x23a>
 800b3a6:	68e0      	ldr	r0, [r4, #12]
 800b3a8:	9b03      	ldr	r3, [sp, #12]
 800b3aa:	4298      	cmp	r0, r3
 800b3ac:	bfb8      	it	lt
 800b3ae:	4618      	movlt	r0, r3
 800b3b0:	e7a4      	b.n	800b2fc <_printf_i+0x168>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	47d0      	blx	sl
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d09b      	beq.n	800b2f8 <_printf_i+0x164>
 800b3c0:	3501      	adds	r5, #1
 800b3c2:	68e3      	ldr	r3, [r4, #12]
 800b3c4:	9903      	ldr	r1, [sp, #12]
 800b3c6:	1a5b      	subs	r3, r3, r1
 800b3c8:	42ab      	cmp	r3, r5
 800b3ca:	dcf2      	bgt.n	800b3b2 <_printf_i+0x21e>
 800b3cc:	e7eb      	b.n	800b3a6 <_printf_i+0x212>
 800b3ce:	2500      	movs	r5, #0
 800b3d0:	f104 0619 	add.w	r6, r4, #25
 800b3d4:	e7f5      	b.n	800b3c2 <_printf_i+0x22e>
 800b3d6:	bf00      	nop
 800b3d8:	0800dc1d 	.word	0x0800dc1d
 800b3dc:	0800dc2e 	.word	0x0800dc2e

0800b3e0 <_sbrk_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4d06      	ldr	r5, [pc, #24]	; (800b3fc <_sbrk_r+0x1c>)
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	4608      	mov	r0, r1
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	f7f5 fb28 	bl	8000a40 <_sbrk>
 800b3f0:	1c43      	adds	r3, r0, #1
 800b3f2:	d102      	bne.n	800b3fa <_sbrk_r+0x1a>
 800b3f4:	682b      	ldr	r3, [r5, #0]
 800b3f6:	b103      	cbz	r3, 800b3fa <_sbrk_r+0x1a>
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	bd38      	pop	{r3, r4, r5, pc}
 800b3fc:	2000ab1c 	.word	0x2000ab1c

0800b400 <__sread>:
 800b400:	b510      	push	{r4, lr}
 800b402:	460c      	mov	r4, r1
 800b404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b408:	f000 fa9e 	bl	800b948 <_read_r>
 800b40c:	2800      	cmp	r0, #0
 800b40e:	bfab      	itete	ge
 800b410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b412:	89a3      	ldrhlt	r3, [r4, #12]
 800b414:	181b      	addge	r3, r3, r0
 800b416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b41a:	bfac      	ite	ge
 800b41c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b41e:	81a3      	strhlt	r3, [r4, #12]
 800b420:	bd10      	pop	{r4, pc}

0800b422 <__swrite>:
 800b422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b426:	461f      	mov	r7, r3
 800b428:	898b      	ldrh	r3, [r1, #12]
 800b42a:	05db      	lsls	r3, r3, #23
 800b42c:	4605      	mov	r5, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	4616      	mov	r6, r2
 800b432:	d505      	bpl.n	800b440 <__swrite+0x1e>
 800b434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b438:	2302      	movs	r3, #2
 800b43a:	2200      	movs	r2, #0
 800b43c:	f000 f9d0 	bl	800b7e0 <_lseek_r>
 800b440:	89a3      	ldrh	r3, [r4, #12]
 800b442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b44a:	81a3      	strh	r3, [r4, #12]
 800b44c:	4632      	mov	r2, r6
 800b44e:	463b      	mov	r3, r7
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b456:	f000 b869 	b.w	800b52c <_write_r>

0800b45a <__sseek>:
 800b45a:	b510      	push	{r4, lr}
 800b45c:	460c      	mov	r4, r1
 800b45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b462:	f000 f9bd 	bl	800b7e0 <_lseek_r>
 800b466:	1c43      	adds	r3, r0, #1
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	bf15      	itete	ne
 800b46c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b476:	81a3      	strheq	r3, [r4, #12]
 800b478:	bf18      	it	ne
 800b47a:	81a3      	strhne	r3, [r4, #12]
 800b47c:	bd10      	pop	{r4, pc}

0800b47e <__sclose>:
 800b47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b482:	f000 b8db 	b.w	800b63c <_close_r>
	...

0800b488 <__swbuf_r>:
 800b488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b48a:	460e      	mov	r6, r1
 800b48c:	4614      	mov	r4, r2
 800b48e:	4605      	mov	r5, r0
 800b490:	b118      	cbz	r0, 800b49a <__swbuf_r+0x12>
 800b492:	6983      	ldr	r3, [r0, #24]
 800b494:	b90b      	cbnz	r3, 800b49a <__swbuf_r+0x12>
 800b496:	f7ff f9bf 	bl	800a818 <__sinit>
 800b49a:	4b21      	ldr	r3, [pc, #132]	; (800b520 <__swbuf_r+0x98>)
 800b49c:	429c      	cmp	r4, r3
 800b49e:	d12b      	bne.n	800b4f8 <__swbuf_r+0x70>
 800b4a0:	686c      	ldr	r4, [r5, #4]
 800b4a2:	69a3      	ldr	r3, [r4, #24]
 800b4a4:	60a3      	str	r3, [r4, #8]
 800b4a6:	89a3      	ldrh	r3, [r4, #12]
 800b4a8:	071a      	lsls	r2, r3, #28
 800b4aa:	d52f      	bpl.n	800b50c <__swbuf_r+0x84>
 800b4ac:	6923      	ldr	r3, [r4, #16]
 800b4ae:	b36b      	cbz	r3, 800b50c <__swbuf_r+0x84>
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	6820      	ldr	r0, [r4, #0]
 800b4b4:	1ac0      	subs	r0, r0, r3
 800b4b6:	6963      	ldr	r3, [r4, #20]
 800b4b8:	b2f6      	uxtb	r6, r6
 800b4ba:	4283      	cmp	r3, r0
 800b4bc:	4637      	mov	r7, r6
 800b4be:	dc04      	bgt.n	800b4ca <__swbuf_r+0x42>
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 f950 	bl	800b768 <_fflush_r>
 800b4c8:	bb30      	cbnz	r0, 800b518 <__swbuf_r+0x90>
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	60a3      	str	r3, [r4, #8]
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	1c5a      	adds	r2, r3, #1
 800b4d4:	6022      	str	r2, [r4, #0]
 800b4d6:	701e      	strb	r6, [r3, #0]
 800b4d8:	6963      	ldr	r3, [r4, #20]
 800b4da:	3001      	adds	r0, #1
 800b4dc:	4283      	cmp	r3, r0
 800b4de:	d004      	beq.n	800b4ea <__swbuf_r+0x62>
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	07db      	lsls	r3, r3, #31
 800b4e4:	d506      	bpl.n	800b4f4 <__swbuf_r+0x6c>
 800b4e6:	2e0a      	cmp	r6, #10
 800b4e8:	d104      	bne.n	800b4f4 <__swbuf_r+0x6c>
 800b4ea:	4621      	mov	r1, r4
 800b4ec:	4628      	mov	r0, r5
 800b4ee:	f000 f93b 	bl	800b768 <_fflush_r>
 800b4f2:	b988      	cbnz	r0, 800b518 <__swbuf_r+0x90>
 800b4f4:	4638      	mov	r0, r7
 800b4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <__swbuf_r+0x9c>)
 800b4fa:	429c      	cmp	r4, r3
 800b4fc:	d101      	bne.n	800b502 <__swbuf_r+0x7a>
 800b4fe:	68ac      	ldr	r4, [r5, #8]
 800b500:	e7cf      	b.n	800b4a2 <__swbuf_r+0x1a>
 800b502:	4b09      	ldr	r3, [pc, #36]	; (800b528 <__swbuf_r+0xa0>)
 800b504:	429c      	cmp	r4, r3
 800b506:	bf08      	it	eq
 800b508:	68ec      	ldreq	r4, [r5, #12]
 800b50a:	e7ca      	b.n	800b4a2 <__swbuf_r+0x1a>
 800b50c:	4621      	mov	r1, r4
 800b50e:	4628      	mov	r0, r5
 800b510:	f000 f81e 	bl	800b550 <__swsetup_r>
 800b514:	2800      	cmp	r0, #0
 800b516:	d0cb      	beq.n	800b4b0 <__swbuf_r+0x28>
 800b518:	f04f 37ff 	mov.w	r7, #4294967295
 800b51c:	e7ea      	b.n	800b4f4 <__swbuf_r+0x6c>
 800b51e:	bf00      	nop
 800b520:	0800dbcc 	.word	0x0800dbcc
 800b524:	0800dbec 	.word	0x0800dbec
 800b528:	0800dbac 	.word	0x0800dbac

0800b52c <_write_r>:
 800b52c:	b538      	push	{r3, r4, r5, lr}
 800b52e:	4d07      	ldr	r5, [pc, #28]	; (800b54c <_write_r+0x20>)
 800b530:	4604      	mov	r4, r0
 800b532:	4608      	mov	r0, r1
 800b534:	4611      	mov	r1, r2
 800b536:	2200      	movs	r2, #0
 800b538:	602a      	str	r2, [r5, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	f7f5 fa67 	bl	8000a0e <_write>
 800b540:	1c43      	adds	r3, r0, #1
 800b542:	d102      	bne.n	800b54a <_write_r+0x1e>
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	b103      	cbz	r3, 800b54a <_write_r+0x1e>
 800b548:	6023      	str	r3, [r4, #0]
 800b54a:	bd38      	pop	{r3, r4, r5, pc}
 800b54c:	2000ab1c 	.word	0x2000ab1c

0800b550 <__swsetup_r>:
 800b550:	4b32      	ldr	r3, [pc, #200]	; (800b61c <__swsetup_r+0xcc>)
 800b552:	b570      	push	{r4, r5, r6, lr}
 800b554:	681d      	ldr	r5, [r3, #0]
 800b556:	4606      	mov	r6, r0
 800b558:	460c      	mov	r4, r1
 800b55a:	b125      	cbz	r5, 800b566 <__swsetup_r+0x16>
 800b55c:	69ab      	ldr	r3, [r5, #24]
 800b55e:	b913      	cbnz	r3, 800b566 <__swsetup_r+0x16>
 800b560:	4628      	mov	r0, r5
 800b562:	f7ff f959 	bl	800a818 <__sinit>
 800b566:	4b2e      	ldr	r3, [pc, #184]	; (800b620 <__swsetup_r+0xd0>)
 800b568:	429c      	cmp	r4, r3
 800b56a:	d10f      	bne.n	800b58c <__swsetup_r+0x3c>
 800b56c:	686c      	ldr	r4, [r5, #4]
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b574:	0719      	lsls	r1, r3, #28
 800b576:	d42c      	bmi.n	800b5d2 <__swsetup_r+0x82>
 800b578:	06dd      	lsls	r5, r3, #27
 800b57a:	d411      	bmi.n	800b5a0 <__swsetup_r+0x50>
 800b57c:	2309      	movs	r3, #9
 800b57e:	6033      	str	r3, [r6, #0]
 800b580:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b584:	81a3      	strh	r3, [r4, #12]
 800b586:	f04f 30ff 	mov.w	r0, #4294967295
 800b58a:	e03e      	b.n	800b60a <__swsetup_r+0xba>
 800b58c:	4b25      	ldr	r3, [pc, #148]	; (800b624 <__swsetup_r+0xd4>)
 800b58e:	429c      	cmp	r4, r3
 800b590:	d101      	bne.n	800b596 <__swsetup_r+0x46>
 800b592:	68ac      	ldr	r4, [r5, #8]
 800b594:	e7eb      	b.n	800b56e <__swsetup_r+0x1e>
 800b596:	4b24      	ldr	r3, [pc, #144]	; (800b628 <__swsetup_r+0xd8>)
 800b598:	429c      	cmp	r4, r3
 800b59a:	bf08      	it	eq
 800b59c:	68ec      	ldreq	r4, [r5, #12]
 800b59e:	e7e6      	b.n	800b56e <__swsetup_r+0x1e>
 800b5a0:	0758      	lsls	r0, r3, #29
 800b5a2:	d512      	bpl.n	800b5ca <__swsetup_r+0x7a>
 800b5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5a6:	b141      	cbz	r1, 800b5ba <__swsetup_r+0x6a>
 800b5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5ac:	4299      	cmp	r1, r3
 800b5ae:	d002      	beq.n	800b5b6 <__swsetup_r+0x66>
 800b5b0:	4630      	mov	r0, r6
 800b5b2:	f7ff f9eb 	bl	800a98c <_free_r>
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	6363      	str	r3, [r4, #52]	; 0x34
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5c0:	81a3      	strh	r3, [r4, #12]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	6063      	str	r3, [r4, #4]
 800b5c6:	6923      	ldr	r3, [r4, #16]
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	f043 0308 	orr.w	r3, r3, #8
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	6923      	ldr	r3, [r4, #16]
 800b5d4:	b94b      	cbnz	r3, 800b5ea <__swsetup_r+0x9a>
 800b5d6:	89a3      	ldrh	r3, [r4, #12]
 800b5d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5e0:	d003      	beq.n	800b5ea <__swsetup_r+0x9a>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	4630      	mov	r0, r6
 800b5e6:	f000 f933 	bl	800b850 <__smakebuf_r>
 800b5ea:	89a0      	ldrh	r0, [r4, #12]
 800b5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5f0:	f010 0301 	ands.w	r3, r0, #1
 800b5f4:	d00a      	beq.n	800b60c <__swsetup_r+0xbc>
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60a3      	str	r3, [r4, #8]
 800b5fa:	6963      	ldr	r3, [r4, #20]
 800b5fc:	425b      	negs	r3, r3
 800b5fe:	61a3      	str	r3, [r4, #24]
 800b600:	6923      	ldr	r3, [r4, #16]
 800b602:	b943      	cbnz	r3, 800b616 <__swsetup_r+0xc6>
 800b604:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b608:	d1ba      	bne.n	800b580 <__swsetup_r+0x30>
 800b60a:	bd70      	pop	{r4, r5, r6, pc}
 800b60c:	0781      	lsls	r1, r0, #30
 800b60e:	bf58      	it	pl
 800b610:	6963      	ldrpl	r3, [r4, #20]
 800b612:	60a3      	str	r3, [r4, #8]
 800b614:	e7f4      	b.n	800b600 <__swsetup_r+0xb0>
 800b616:	2000      	movs	r0, #0
 800b618:	e7f7      	b.n	800b60a <__swsetup_r+0xba>
 800b61a:	bf00      	nop
 800b61c:	20000028 	.word	0x20000028
 800b620:	0800dbcc 	.word	0x0800dbcc
 800b624:	0800dbec 	.word	0x0800dbec
 800b628:	0800dbac 	.word	0x0800dbac

0800b62c <abort>:
 800b62c:	b508      	push	{r3, lr}
 800b62e:	2006      	movs	r0, #6
 800b630:	f000 f9c4 	bl	800b9bc <raise>
 800b634:	2001      	movs	r0, #1
 800b636:	f7f5 f9d7 	bl	80009e8 <_exit>
	...

0800b63c <_close_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4d06      	ldr	r5, [pc, #24]	; (800b658 <_close_r+0x1c>)
 800b640:	2300      	movs	r3, #0
 800b642:	4604      	mov	r4, r0
 800b644:	4608      	mov	r0, r1
 800b646:	602b      	str	r3, [r5, #0]
 800b648:	f7f5 f9ee 	bl	8000a28 <_close>
 800b64c:	1c43      	adds	r3, r0, #1
 800b64e:	d102      	bne.n	800b656 <_close_r+0x1a>
 800b650:	682b      	ldr	r3, [r5, #0]
 800b652:	b103      	cbz	r3, 800b656 <_close_r+0x1a>
 800b654:	6023      	str	r3, [r4, #0]
 800b656:	bd38      	pop	{r3, r4, r5, pc}
 800b658:	2000ab1c 	.word	0x2000ab1c

0800b65c <__sflush_r>:
 800b65c:	898a      	ldrh	r2, [r1, #12]
 800b65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b662:	4605      	mov	r5, r0
 800b664:	0710      	lsls	r0, r2, #28
 800b666:	460c      	mov	r4, r1
 800b668:	d458      	bmi.n	800b71c <__sflush_r+0xc0>
 800b66a:	684b      	ldr	r3, [r1, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dc05      	bgt.n	800b67c <__sflush_r+0x20>
 800b670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b672:	2b00      	cmp	r3, #0
 800b674:	dc02      	bgt.n	800b67c <__sflush_r+0x20>
 800b676:	2000      	movs	r0, #0
 800b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d0f9      	beq.n	800b676 <__sflush_r+0x1a>
 800b682:	2300      	movs	r3, #0
 800b684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b688:	682f      	ldr	r7, [r5, #0]
 800b68a:	602b      	str	r3, [r5, #0]
 800b68c:	d032      	beq.n	800b6f4 <__sflush_r+0x98>
 800b68e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b690:	89a3      	ldrh	r3, [r4, #12]
 800b692:	075a      	lsls	r2, r3, #29
 800b694:	d505      	bpl.n	800b6a2 <__sflush_r+0x46>
 800b696:	6863      	ldr	r3, [r4, #4]
 800b698:	1ac0      	subs	r0, r0, r3
 800b69a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b69c:	b10b      	cbz	r3, 800b6a2 <__sflush_r+0x46>
 800b69e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6a0:	1ac0      	subs	r0, r0, r3
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	4602      	mov	r2, r0
 800b6a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6a8:	6a21      	ldr	r1, [r4, #32]
 800b6aa:	4628      	mov	r0, r5
 800b6ac:	47b0      	blx	r6
 800b6ae:	1c43      	adds	r3, r0, #1
 800b6b0:	89a3      	ldrh	r3, [r4, #12]
 800b6b2:	d106      	bne.n	800b6c2 <__sflush_r+0x66>
 800b6b4:	6829      	ldr	r1, [r5, #0]
 800b6b6:	291d      	cmp	r1, #29
 800b6b8:	d82c      	bhi.n	800b714 <__sflush_r+0xb8>
 800b6ba:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <__sflush_r+0x108>)
 800b6bc:	40ca      	lsrs	r2, r1
 800b6be:	07d6      	lsls	r6, r2, #31
 800b6c0:	d528      	bpl.n	800b714 <__sflush_r+0xb8>
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	6062      	str	r2, [r4, #4]
 800b6c6:	04d9      	lsls	r1, r3, #19
 800b6c8:	6922      	ldr	r2, [r4, #16]
 800b6ca:	6022      	str	r2, [r4, #0]
 800b6cc:	d504      	bpl.n	800b6d8 <__sflush_r+0x7c>
 800b6ce:	1c42      	adds	r2, r0, #1
 800b6d0:	d101      	bne.n	800b6d6 <__sflush_r+0x7a>
 800b6d2:	682b      	ldr	r3, [r5, #0]
 800b6d4:	b903      	cbnz	r3, 800b6d8 <__sflush_r+0x7c>
 800b6d6:	6560      	str	r0, [r4, #84]	; 0x54
 800b6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6da:	602f      	str	r7, [r5, #0]
 800b6dc:	2900      	cmp	r1, #0
 800b6de:	d0ca      	beq.n	800b676 <__sflush_r+0x1a>
 800b6e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6e4:	4299      	cmp	r1, r3
 800b6e6:	d002      	beq.n	800b6ee <__sflush_r+0x92>
 800b6e8:	4628      	mov	r0, r5
 800b6ea:	f7ff f94f 	bl	800a98c <_free_r>
 800b6ee:	2000      	movs	r0, #0
 800b6f0:	6360      	str	r0, [r4, #52]	; 0x34
 800b6f2:	e7c1      	b.n	800b678 <__sflush_r+0x1c>
 800b6f4:	6a21      	ldr	r1, [r4, #32]
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	47b0      	blx	r6
 800b6fc:	1c41      	adds	r1, r0, #1
 800b6fe:	d1c7      	bne.n	800b690 <__sflush_r+0x34>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d0c4      	beq.n	800b690 <__sflush_r+0x34>
 800b706:	2b1d      	cmp	r3, #29
 800b708:	d001      	beq.n	800b70e <__sflush_r+0xb2>
 800b70a:	2b16      	cmp	r3, #22
 800b70c:	d101      	bne.n	800b712 <__sflush_r+0xb6>
 800b70e:	602f      	str	r7, [r5, #0]
 800b710:	e7b1      	b.n	800b676 <__sflush_r+0x1a>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b718:	81a3      	strh	r3, [r4, #12]
 800b71a:	e7ad      	b.n	800b678 <__sflush_r+0x1c>
 800b71c:	690f      	ldr	r7, [r1, #16]
 800b71e:	2f00      	cmp	r7, #0
 800b720:	d0a9      	beq.n	800b676 <__sflush_r+0x1a>
 800b722:	0793      	lsls	r3, r2, #30
 800b724:	680e      	ldr	r6, [r1, #0]
 800b726:	bf08      	it	eq
 800b728:	694b      	ldreq	r3, [r1, #20]
 800b72a:	600f      	str	r7, [r1, #0]
 800b72c:	bf18      	it	ne
 800b72e:	2300      	movne	r3, #0
 800b730:	eba6 0807 	sub.w	r8, r6, r7
 800b734:	608b      	str	r3, [r1, #8]
 800b736:	f1b8 0f00 	cmp.w	r8, #0
 800b73a:	dd9c      	ble.n	800b676 <__sflush_r+0x1a>
 800b73c:	6a21      	ldr	r1, [r4, #32]
 800b73e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b740:	4643      	mov	r3, r8
 800b742:	463a      	mov	r2, r7
 800b744:	4628      	mov	r0, r5
 800b746:	47b0      	blx	r6
 800b748:	2800      	cmp	r0, #0
 800b74a:	dc06      	bgt.n	800b75a <__sflush_r+0xfe>
 800b74c:	89a3      	ldrh	r3, [r4, #12]
 800b74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b752:	81a3      	strh	r3, [r4, #12]
 800b754:	f04f 30ff 	mov.w	r0, #4294967295
 800b758:	e78e      	b.n	800b678 <__sflush_r+0x1c>
 800b75a:	4407      	add	r7, r0
 800b75c:	eba8 0800 	sub.w	r8, r8, r0
 800b760:	e7e9      	b.n	800b736 <__sflush_r+0xda>
 800b762:	bf00      	nop
 800b764:	20400001 	.word	0x20400001

0800b768 <_fflush_r>:
 800b768:	b538      	push	{r3, r4, r5, lr}
 800b76a:	690b      	ldr	r3, [r1, #16]
 800b76c:	4605      	mov	r5, r0
 800b76e:	460c      	mov	r4, r1
 800b770:	b913      	cbnz	r3, 800b778 <_fflush_r+0x10>
 800b772:	2500      	movs	r5, #0
 800b774:	4628      	mov	r0, r5
 800b776:	bd38      	pop	{r3, r4, r5, pc}
 800b778:	b118      	cbz	r0, 800b782 <_fflush_r+0x1a>
 800b77a:	6983      	ldr	r3, [r0, #24]
 800b77c:	b90b      	cbnz	r3, 800b782 <_fflush_r+0x1a>
 800b77e:	f7ff f84b 	bl	800a818 <__sinit>
 800b782:	4b14      	ldr	r3, [pc, #80]	; (800b7d4 <_fflush_r+0x6c>)
 800b784:	429c      	cmp	r4, r3
 800b786:	d11b      	bne.n	800b7c0 <_fflush_r+0x58>
 800b788:	686c      	ldr	r4, [r5, #4]
 800b78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d0ef      	beq.n	800b772 <_fflush_r+0xa>
 800b792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b794:	07d0      	lsls	r0, r2, #31
 800b796:	d404      	bmi.n	800b7a2 <_fflush_r+0x3a>
 800b798:	0599      	lsls	r1, r3, #22
 800b79a:	d402      	bmi.n	800b7a2 <_fflush_r+0x3a>
 800b79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b79e:	f7ff f8eb 	bl	800a978 <__retarget_lock_acquire_recursive>
 800b7a2:	4628      	mov	r0, r5
 800b7a4:	4621      	mov	r1, r4
 800b7a6:	f7ff ff59 	bl	800b65c <__sflush_r>
 800b7aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7ac:	07da      	lsls	r2, r3, #31
 800b7ae:	4605      	mov	r5, r0
 800b7b0:	d4e0      	bmi.n	800b774 <_fflush_r+0xc>
 800b7b2:	89a3      	ldrh	r3, [r4, #12]
 800b7b4:	059b      	lsls	r3, r3, #22
 800b7b6:	d4dd      	bmi.n	800b774 <_fflush_r+0xc>
 800b7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ba:	f7ff f8de 	bl	800a97a <__retarget_lock_release_recursive>
 800b7be:	e7d9      	b.n	800b774 <_fflush_r+0xc>
 800b7c0:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <_fflush_r+0x70>)
 800b7c2:	429c      	cmp	r4, r3
 800b7c4:	d101      	bne.n	800b7ca <_fflush_r+0x62>
 800b7c6:	68ac      	ldr	r4, [r5, #8]
 800b7c8:	e7df      	b.n	800b78a <_fflush_r+0x22>
 800b7ca:	4b04      	ldr	r3, [pc, #16]	; (800b7dc <_fflush_r+0x74>)
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	bf08      	it	eq
 800b7d0:	68ec      	ldreq	r4, [r5, #12]
 800b7d2:	e7da      	b.n	800b78a <_fflush_r+0x22>
 800b7d4:	0800dbcc 	.word	0x0800dbcc
 800b7d8:	0800dbec 	.word	0x0800dbec
 800b7dc:	0800dbac 	.word	0x0800dbac

0800b7e0 <_lseek_r>:
 800b7e0:	b538      	push	{r3, r4, r5, lr}
 800b7e2:	4d07      	ldr	r5, [pc, #28]	; (800b800 <_lseek_r+0x20>)
 800b7e4:	4604      	mov	r4, r0
 800b7e6:	4608      	mov	r0, r1
 800b7e8:	4611      	mov	r1, r2
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	602a      	str	r2, [r5, #0]
 800b7ee:	461a      	mov	r2, r3
 800b7f0:	f7f5 f924 	bl	8000a3c <_lseek>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_lseek_r+0x1e>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_lseek_r+0x1e>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	2000ab1c 	.word	0x2000ab1c

0800b804 <__swhatbuf_r>:
 800b804:	b570      	push	{r4, r5, r6, lr}
 800b806:	460e      	mov	r6, r1
 800b808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b80c:	2900      	cmp	r1, #0
 800b80e:	b096      	sub	sp, #88	; 0x58
 800b810:	4614      	mov	r4, r2
 800b812:	461d      	mov	r5, r3
 800b814:	da08      	bge.n	800b828 <__swhatbuf_r+0x24>
 800b816:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b81a:	2200      	movs	r2, #0
 800b81c:	602a      	str	r2, [r5, #0]
 800b81e:	061a      	lsls	r2, r3, #24
 800b820:	d410      	bmi.n	800b844 <__swhatbuf_r+0x40>
 800b822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b826:	e00e      	b.n	800b846 <__swhatbuf_r+0x42>
 800b828:	466a      	mov	r2, sp
 800b82a:	f000 f8e3 	bl	800b9f4 <_fstat_r>
 800b82e:	2800      	cmp	r0, #0
 800b830:	dbf1      	blt.n	800b816 <__swhatbuf_r+0x12>
 800b832:	9a01      	ldr	r2, [sp, #4]
 800b834:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b838:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b83c:	425a      	negs	r2, r3
 800b83e:	415a      	adcs	r2, r3
 800b840:	602a      	str	r2, [r5, #0]
 800b842:	e7ee      	b.n	800b822 <__swhatbuf_r+0x1e>
 800b844:	2340      	movs	r3, #64	; 0x40
 800b846:	2000      	movs	r0, #0
 800b848:	6023      	str	r3, [r4, #0]
 800b84a:	b016      	add	sp, #88	; 0x58
 800b84c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b850 <__smakebuf_r>:
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b854:	079d      	lsls	r5, r3, #30
 800b856:	4606      	mov	r6, r0
 800b858:	460c      	mov	r4, r1
 800b85a:	d507      	bpl.n	800b86c <__smakebuf_r+0x1c>
 800b85c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b860:	6023      	str	r3, [r4, #0]
 800b862:	6123      	str	r3, [r4, #16]
 800b864:	2301      	movs	r3, #1
 800b866:	6163      	str	r3, [r4, #20]
 800b868:	b002      	add	sp, #8
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	ab01      	add	r3, sp, #4
 800b86e:	466a      	mov	r2, sp
 800b870:	f7ff ffc8 	bl	800b804 <__swhatbuf_r>
 800b874:	9900      	ldr	r1, [sp, #0]
 800b876:	4605      	mov	r5, r0
 800b878:	4630      	mov	r0, r6
 800b87a:	f7ff f8f3 	bl	800aa64 <_malloc_r>
 800b87e:	b948      	cbnz	r0, 800b894 <__smakebuf_r+0x44>
 800b880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b884:	059a      	lsls	r2, r3, #22
 800b886:	d4ef      	bmi.n	800b868 <__smakebuf_r+0x18>
 800b888:	f023 0303 	bic.w	r3, r3, #3
 800b88c:	f043 0302 	orr.w	r3, r3, #2
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	e7e3      	b.n	800b85c <__smakebuf_r+0xc>
 800b894:	4b0d      	ldr	r3, [pc, #52]	; (800b8cc <__smakebuf_r+0x7c>)
 800b896:	62b3      	str	r3, [r6, #40]	; 0x28
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	6020      	str	r0, [r4, #0]
 800b89c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8a0:	81a3      	strh	r3, [r4, #12]
 800b8a2:	9b00      	ldr	r3, [sp, #0]
 800b8a4:	6163      	str	r3, [r4, #20]
 800b8a6:	9b01      	ldr	r3, [sp, #4]
 800b8a8:	6120      	str	r0, [r4, #16]
 800b8aa:	b15b      	cbz	r3, 800b8c4 <__smakebuf_r+0x74>
 800b8ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f000 f8b1 	bl	800ba18 <_isatty_r>
 800b8b6:	b128      	cbz	r0, 800b8c4 <__smakebuf_r+0x74>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	f023 0303 	bic.w	r3, r3, #3
 800b8be:	f043 0301 	orr.w	r3, r3, #1
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	89a0      	ldrh	r0, [r4, #12]
 800b8c6:	4305      	orrs	r5, r0
 800b8c8:	81a5      	strh	r5, [r4, #12]
 800b8ca:	e7cd      	b.n	800b868 <__smakebuf_r+0x18>
 800b8cc:	0800a7b1 	.word	0x0800a7b1

0800b8d0 <__malloc_lock>:
 800b8d0:	4801      	ldr	r0, [pc, #4]	; (800b8d8 <__malloc_lock+0x8>)
 800b8d2:	f7ff b851 	b.w	800a978 <__retarget_lock_acquire_recursive>
 800b8d6:	bf00      	nop
 800b8d8:	2000ab20 	.word	0x2000ab20

0800b8dc <__malloc_unlock>:
 800b8dc:	4801      	ldr	r0, [pc, #4]	; (800b8e4 <__malloc_unlock+0x8>)
 800b8de:	f7ff b84c 	b.w	800a97a <__retarget_lock_release_recursive>
 800b8e2:	bf00      	nop
 800b8e4:	2000ab20 	.word	0x2000ab20

0800b8e8 <_realloc_r>:
 800b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4614      	mov	r4, r2
 800b8f0:	460e      	mov	r6, r1
 800b8f2:	b921      	cbnz	r1, 800b8fe <_realloc_r+0x16>
 800b8f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	f7ff b8b3 	b.w	800aa64 <_malloc_r>
 800b8fe:	b92a      	cbnz	r2, 800b90c <_realloc_r+0x24>
 800b900:	f7ff f844 	bl	800a98c <_free_r>
 800b904:	4625      	mov	r5, r4
 800b906:	4628      	mov	r0, r5
 800b908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b90c:	f000 f894 	bl	800ba38 <_malloc_usable_size_r>
 800b910:	4284      	cmp	r4, r0
 800b912:	4607      	mov	r7, r0
 800b914:	d802      	bhi.n	800b91c <_realloc_r+0x34>
 800b916:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b91a:	d812      	bhi.n	800b942 <_realloc_r+0x5a>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4640      	mov	r0, r8
 800b920:	f7ff f8a0 	bl	800aa64 <_malloc_r>
 800b924:	4605      	mov	r5, r0
 800b926:	2800      	cmp	r0, #0
 800b928:	d0ed      	beq.n	800b906 <_realloc_r+0x1e>
 800b92a:	42bc      	cmp	r4, r7
 800b92c:	4622      	mov	r2, r4
 800b92e:	4631      	mov	r1, r6
 800b930:	bf28      	it	cs
 800b932:	463a      	movcs	r2, r7
 800b934:	f7fe fe54 	bl	800a5e0 <memcpy>
 800b938:	4631      	mov	r1, r6
 800b93a:	4640      	mov	r0, r8
 800b93c:	f7ff f826 	bl	800a98c <_free_r>
 800b940:	e7e1      	b.n	800b906 <_realloc_r+0x1e>
 800b942:	4635      	mov	r5, r6
 800b944:	e7df      	b.n	800b906 <_realloc_r+0x1e>
	...

0800b948 <_read_r>:
 800b948:	b538      	push	{r3, r4, r5, lr}
 800b94a:	4d07      	ldr	r5, [pc, #28]	; (800b968 <_read_r+0x20>)
 800b94c:	4604      	mov	r4, r0
 800b94e:	4608      	mov	r0, r1
 800b950:	4611      	mov	r1, r2
 800b952:	2200      	movs	r2, #0
 800b954:	602a      	str	r2, [r5, #0]
 800b956:	461a      	mov	r2, r3
 800b958:	f7f5 f84c 	bl	80009f4 <_read>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_read_r+0x1e>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_read_r+0x1e>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	2000ab1c 	.word	0x2000ab1c

0800b96c <_raise_r>:
 800b96c:	291f      	cmp	r1, #31
 800b96e:	b538      	push	{r3, r4, r5, lr}
 800b970:	4604      	mov	r4, r0
 800b972:	460d      	mov	r5, r1
 800b974:	d904      	bls.n	800b980 <_raise_r+0x14>
 800b976:	2316      	movs	r3, #22
 800b978:	6003      	str	r3, [r0, #0]
 800b97a:	f04f 30ff 	mov.w	r0, #4294967295
 800b97e:	bd38      	pop	{r3, r4, r5, pc}
 800b980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b982:	b112      	cbz	r2, 800b98a <_raise_r+0x1e>
 800b984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b988:	b94b      	cbnz	r3, 800b99e <_raise_r+0x32>
 800b98a:	4620      	mov	r0, r4
 800b98c:	f000 f830 	bl	800b9f0 <_getpid_r>
 800b990:	462a      	mov	r2, r5
 800b992:	4601      	mov	r1, r0
 800b994:	4620      	mov	r0, r4
 800b996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b99a:	f000 b817 	b.w	800b9cc <_kill_r>
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d00a      	beq.n	800b9b8 <_raise_r+0x4c>
 800b9a2:	1c59      	adds	r1, r3, #1
 800b9a4:	d103      	bne.n	800b9ae <_raise_r+0x42>
 800b9a6:	2316      	movs	r3, #22
 800b9a8:	6003      	str	r3, [r0, #0]
 800b9aa:	2001      	movs	r0, #1
 800b9ac:	e7e7      	b.n	800b97e <_raise_r+0x12>
 800b9ae:	2400      	movs	r4, #0
 800b9b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	4798      	blx	r3
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	e7e0      	b.n	800b97e <_raise_r+0x12>

0800b9bc <raise>:
 800b9bc:	4b02      	ldr	r3, [pc, #8]	; (800b9c8 <raise+0xc>)
 800b9be:	4601      	mov	r1, r0
 800b9c0:	6818      	ldr	r0, [r3, #0]
 800b9c2:	f7ff bfd3 	b.w	800b96c <_raise_r>
 800b9c6:	bf00      	nop
 800b9c8:	20000028 	.word	0x20000028

0800b9cc <_kill_r>:
 800b9cc:	b538      	push	{r3, r4, r5, lr}
 800b9ce:	4d07      	ldr	r5, [pc, #28]	; (800b9ec <_kill_r+0x20>)
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	4608      	mov	r0, r1
 800b9d6:	4611      	mov	r1, r2
 800b9d8:	602b      	str	r3, [r5, #0]
 800b9da:	f7f4 fffd 	bl	80009d8 <_kill>
 800b9de:	1c43      	adds	r3, r0, #1
 800b9e0:	d102      	bne.n	800b9e8 <_kill_r+0x1c>
 800b9e2:	682b      	ldr	r3, [r5, #0]
 800b9e4:	b103      	cbz	r3, 800b9e8 <_kill_r+0x1c>
 800b9e6:	6023      	str	r3, [r4, #0]
 800b9e8:	bd38      	pop	{r3, r4, r5, pc}
 800b9ea:	bf00      	nop
 800b9ec:	2000ab1c 	.word	0x2000ab1c

0800b9f0 <_getpid_r>:
 800b9f0:	f7f4 bff0 	b.w	80009d4 <_getpid>

0800b9f4 <_fstat_r>:
 800b9f4:	b538      	push	{r3, r4, r5, lr}
 800b9f6:	4d07      	ldr	r5, [pc, #28]	; (800ba14 <_fstat_r+0x20>)
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	4608      	mov	r0, r1
 800b9fe:	4611      	mov	r1, r2
 800ba00:	602b      	str	r3, [r5, #0]
 800ba02:	f7f5 f814 	bl	8000a2e <_fstat>
 800ba06:	1c43      	adds	r3, r0, #1
 800ba08:	d102      	bne.n	800ba10 <_fstat_r+0x1c>
 800ba0a:	682b      	ldr	r3, [r5, #0]
 800ba0c:	b103      	cbz	r3, 800ba10 <_fstat_r+0x1c>
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	bd38      	pop	{r3, r4, r5, pc}
 800ba12:	bf00      	nop
 800ba14:	2000ab1c 	.word	0x2000ab1c

0800ba18 <_isatty_r>:
 800ba18:	b538      	push	{r3, r4, r5, lr}
 800ba1a:	4d06      	ldr	r5, [pc, #24]	; (800ba34 <_isatty_r+0x1c>)
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	4604      	mov	r4, r0
 800ba20:	4608      	mov	r0, r1
 800ba22:	602b      	str	r3, [r5, #0]
 800ba24:	f7f5 f808 	bl	8000a38 <_isatty>
 800ba28:	1c43      	adds	r3, r0, #1
 800ba2a:	d102      	bne.n	800ba32 <_isatty_r+0x1a>
 800ba2c:	682b      	ldr	r3, [r5, #0]
 800ba2e:	b103      	cbz	r3, 800ba32 <_isatty_r+0x1a>
 800ba30:	6023      	str	r3, [r4, #0]
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	2000ab1c 	.word	0x2000ab1c

0800ba38 <_malloc_usable_size_r>:
 800ba38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba3c:	1f18      	subs	r0, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	bfbc      	itt	lt
 800ba42:	580b      	ldrlt	r3, [r1, r0]
 800ba44:	18c0      	addlt	r0, r0, r3
 800ba46:	4770      	bx	lr

0800ba48 <_init>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr

0800ba54 <_fini>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr
