
interrupt3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ca8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003e54  08003e54  00013e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e6c  08003e6c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e74  08003e74  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e74  08003e74  00013e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e78  08003e78  00013e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007b0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007bc  200007bc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f52  00000000  00000000  0002fd6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  00031cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b10  00000000  00000000  00032878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d2d  00000000  00000000  00033388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1a4  00000000  00000000  000570b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9d50  00000000  00000000  00064259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013dfa9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003184  00000000  00000000  0013dffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003e3c 	.word	0x08003e3c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003e3c 	.word	0x08003e3c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_UARTEx_RxEventCallback>:

uint8_t a[15]={0};



void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	460b      	mov	r3, r1
 80004fa:	807b      	strh	r3, [r7, #2]

	HAL_UART_Transmit(&huart3,a,15,100);
 80004fc:	2364      	movs	r3, #100	; 0x64
 80004fe:	220f      	movs	r2, #15
 8000500:	4906      	ldr	r1, [pc, #24]	; (800051c <HAL_UARTEx_RxEventCallback+0x2c>)
 8000502:	4807      	ldr	r0, [pc, #28]	; (8000520 <HAL_UARTEx_RxEventCallback+0x30>)
 8000504:	f002 f943 	bl	800278e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart3, a, 15);
 8000508:	220f      	movs	r2, #15
 800050a:	4904      	ldr	r1, [pc, #16]	; (800051c <HAL_UARTEx_RxEventCallback+0x2c>)
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <HAL_UARTEx_RxEventCallback+0x30>)
 800050e:	f002 f9d0 	bl	80028b2 <HAL_UART_Receive_IT>

}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	200007a0 	.word	0x200007a0
 8000520:	20000250 	.word	0x20000250

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052a:	f000 fbf7 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052e:	f000 f819 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000532:	f000 f927 	bl	8000784 <MX_GPIO_Init>
  MX_ETH_Init();
 8000536:	f000 f87f 	bl	8000638 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800053a:	f000 f8cb 	bl	80006d4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800053e:	f000 f8f3 	bl	8000728 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

		HAL_UART_Receive_IT(&huart3,bbb,1);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <main+0x3c>)
 800054a:	f002 f9b2 	bl	80028b2 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart3,bbb,1,100);
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	4619      	mov	r1, r3
 8000552:	2364      	movs	r3, #100	; 0x64
 8000554:	2201      	movs	r2, #1
 8000556:	4802      	ldr	r0, [pc, #8]	; (8000560 <main+0x3c>)
 8000558:	f002 f919 	bl	800278e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart3,bbb,1);
 800055c:	e7f1      	b.n	8000542 <main+0x1e>
 800055e:	bf00      	nop
 8000560:	20000250 	.word	0x20000250

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f003 fc5a 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a27      	ldr	r2, [pc, #156]	; (8000630 <SystemClock_Config+0xcc>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <SystemClock_Config+0xcc>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <SystemClock_Config+0xd0>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SystemClock_Config+0xd0>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	; 0xa8
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fbeb 	bl	8001dc4 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f97c 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000604:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2105      	movs	r1, #5
 8000616:	4618      	mov	r0, r3
 8000618:	f001 fe4c 	bl	80022b4 <HAL_RCC_ClockConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000622:	f000 f965 	bl	80008f0 <Error_Handler>
  }
}
 8000626:	bf00      	nop
 8000628:	3750      	adds	r7, #80	; 0x50
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40023800 	.word	0x40023800
 8000634:	40007000 	.word	0x40007000

08000638 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <MX_ETH_Init+0x84>)
 800063e:	4a20      	ldr	r2, [pc, #128]	; (80006c0 <MX_ETH_Init+0x88>)
 8000640:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000642:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_ETH_Init+0x8c>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000648:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_ETH_Init+0x8c>)
 800064a:	2280      	movs	r2, #128	; 0x80
 800064c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800064e:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_ETH_Init+0x8c>)
 8000650:	22e1      	movs	r2, #225	; 0xe1
 8000652:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000654:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_ETH_Init+0x8c>)
 8000656:	2200      	movs	r2, #0
 8000658:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_ETH_Init+0x8c>)
 800065c:	2200      	movs	r2, #0
 800065e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_ETH_Init+0x8c>)
 8000662:	2200      	movs	r2, #0
 8000664:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000666:	4b15      	ldr	r3, [pc, #84]	; (80006bc <MX_ETH_Init+0x84>)
 8000668:	4a16      	ldr	r2, [pc, #88]	; (80006c4 <MX_ETH_Init+0x8c>)
 800066a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800066c:	4b13      	ldr	r3, [pc, #76]	; (80006bc <MX_ETH_Init+0x84>)
 800066e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000672:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000674:	4b11      	ldr	r3, [pc, #68]	; (80006bc <MX_ETH_Init+0x84>)
 8000676:	4a14      	ldr	r2, [pc, #80]	; (80006c8 <MX_ETH_Init+0x90>)
 8000678:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800067a:	4b10      	ldr	r3, [pc, #64]	; (80006bc <MX_ETH_Init+0x84>)
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <MX_ETH_Init+0x94>)
 800067e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <MX_ETH_Init+0x84>)
 8000682:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000686:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000688:	480c      	ldr	r0, [pc, #48]	; (80006bc <MX_ETH_Init+0x84>)
 800068a:	f000 fd81 	bl	8001190 <HAL_ETH_Init>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000694:	f000 f92c 	bl	80008f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000698:	2238      	movs	r2, #56	; 0x38
 800069a:	2100      	movs	r1, #0
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <MX_ETH_Init+0x98>)
 800069e:	f003 fbc5 	bl	8003e2c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_ETH_Init+0x98>)
 80006a4:	2221      	movs	r2, #33	; 0x21
 80006a6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_ETH_Init+0x98>)
 80006aa:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006ae:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <MX_ETH_Init+0x98>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	200001a0 	.word	0x200001a0
 80006c0:	40028000 	.word	0x40028000
 80006c4:	200007b0 	.word	0x200007b0
 80006c8:	20000100 	.word	0x20000100
 80006cc:	20000060 	.word	0x20000060
 80006d0:	20000028 	.word	0x20000028

080006d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_USART3_UART_Init+0x50>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 80006fa:	220c      	movs	r2, #12
 80006fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_USART3_UART_Init+0x4c>)
 800070c:	f001 fff2 	bl	80026f4 <HAL_UART_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000716:	f000 f8eb 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000250 	.word	0x20000250
 8000724:	40004800 	.word	0x40004800

08000728 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000732:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000736:	2204      	movs	r2, #4
 8000738:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073c:	2202      	movs	r2, #2
 800073e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000748:	2202      	movs	r2, #2
 800074a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074e:	2201      	movs	r2, #1
 8000750:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000760:	2201      	movs	r2, #1
 8000762:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2200      	movs	r2, #0
 8000768:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	f001 fa0d 	bl	8001b8a <HAL_PCD_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000776:	f000 f8bb 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000294 	.word	0x20000294

08000784 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08c      	sub	sp, #48	; 0x30
 8000788:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	2200      	movs	r2, #0
 8000790:	601a      	str	r2, [r3, #0]
 8000792:	605a      	str	r2, [r3, #4]
 8000794:	609a      	str	r2, [r3, #8]
 8000796:	60da      	str	r2, [r3, #12]
 8000798:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	61bb      	str	r3, [r7, #24]
 800079e:	4b50      	ldr	r3, [pc, #320]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a4f      	ldr	r2, [pc, #316]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	61bb      	str	r3, [r7, #24]
 80007b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	617b      	str	r3, [r7, #20]
 80007ba:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a48      	ldr	r2, [pc, #288]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ce:	617b      	str	r3, [r7, #20]
 80007d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a41      	ldr	r2, [pc, #260]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007dc:	f043 0301 	orr.w	r3, r3, #1
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b3b      	ldr	r3, [pc, #236]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a3a      	ldr	r2, [pc, #232]	; (80008e0 <MX_GPIO_Init+0x15c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <MX_GPIO_Init+0x15c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <MX_GPIO_Init+0x15c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <MX_GPIO_Init+0x15c>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <MX_GPIO_Init+0x15c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <MX_GPIO_Init+0x15c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a2c      	ldr	r2, [pc, #176]	; (80008e0 <MX_GPIO_Init+0x15c>)
 8000830:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b2a      	ldr	r3, [pc, #168]	; (80008e0 <MX_GPIO_Init+0x15c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f244 0181 	movw	r1, #16513	; 0x4081
 8000848:	4826      	ldr	r0, [pc, #152]	; (80008e4 <MX_GPIO_Init+0x160>)
 800084a:	f001 f961 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4825      	ldr	r0, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x164>)
 8000854:	f001 f95c 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000858:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481f      	ldr	r0, [pc, #124]	; (80008ec <MX_GPIO_Init+0x168>)
 8000870:	f000 ffa2 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000874:	f244 0381 	movw	r3, #16513	; 0x4081
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087a:	2301      	movs	r3, #1
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4815      	ldr	r0, [pc, #84]	; (80008e4 <MX_GPIO_Init+0x160>)
 800088e:	f000 ff93 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <MX_GPIO_Init+0x164>)
 80008aa:	f000 ff85 	bl	80017b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ae:	2380      	movs	r3, #128	; 0x80
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4809      	ldr	r0, [pc, #36]	; (80008e8 <MX_GPIO_Init+0x164>)
 80008c2:	f000 ff79 	bl	80017b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2028      	movs	r0, #40	; 0x28
 80008cc:	f000 fb97 	bl	8000ffe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008d0:	2028      	movs	r0, #40	; 0x28
 80008d2:	f000 fbb0 	bl	8001036 <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40021800 	.word	0x40021800
 80008ec:	40020800 	.word	0x40020800

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <Error_Handler+0x8>
	...

080008fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	607b      	str	r3, [r7, #4]
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <HAL_MspInit+0x4c>)
 800090c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000910:	6453      	str	r3, [r2, #68]	; 0x44
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <HAL_MspInit+0x4c>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	4a08      	ldr	r2, [pc, #32]	; (8000948 <HAL_MspInit+0x4c>)
 8000928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092c:	6413      	str	r3, [r2, #64]	; 0x40
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_MspInit+0x4c>)
 8000930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	40023800 	.word	0x40023800

0800094c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a55      	ldr	r2, [pc, #340]	; (8000ac0 <HAL_ETH_MspInit+0x174>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 80a4 	bne.w	8000ab8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	623b      	str	r3, [r7, #32]
 8000974:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000978:	4a52      	ldr	r2, [pc, #328]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	6313      	str	r3, [r2, #48]	; 0x30
 8000980:	4b50      	ldr	r3, [pc, #320]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000988:	623b      	str	r3, [r7, #32]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
 8000990:	4b4c      	ldr	r3, [pc, #304]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a4b      	ldr	r2, [pc, #300]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b49      	ldr	r3, [pc, #292]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009a4:	61fb      	str	r3, [r7, #28]
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	2300      	movs	r3, #0
 80009aa:	61bb      	str	r3, [r7, #24]
 80009ac:	4b45      	ldr	r3, [pc, #276]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b0:	4a44      	ldr	r2, [pc, #272]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009b6:	6313      	str	r3, [r2, #48]	; 0x30
 80009b8:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
 80009c8:	4b3e      	ldr	r3, [pc, #248]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	4a3d      	ldr	r2, [pc, #244]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	6313      	str	r3, [r2, #48]	; 0x30
 80009d4:	4b3b      	ldr	r3, [pc, #236]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	f003 0304 	and.w	r3, r3, #4
 80009dc:	617b      	str	r3, [r7, #20]
 80009de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	4b37      	ldr	r3, [pc, #220]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	4a36      	ldr	r2, [pc, #216]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6313      	str	r3, [r2, #48]	; 0x30
 80009f0:	4b34      	ldr	r3, [pc, #208]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	4a2f      	ldr	r2, [pc, #188]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000a06:	f043 0302 	orr.w	r3, r3, #2
 8000a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	4b29      	ldr	r3, [pc, #164]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a26:	6313      	str	r3, [r2, #48]	; 0x30
 8000a28:	4b26      	ldr	r3, [pc, #152]	; (8000ac4 <HAL_ETH_MspInit+0x178>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a34:	2332      	movs	r3, #50	; 0x32
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a44:	230b      	movs	r3, #11
 8000a46:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	481e      	ldr	r0, [pc, #120]	; (8000ac8 <HAL_ETH_MspInit+0x17c>)
 8000a50:	f000 feb2 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a54:	2386      	movs	r3, #134	; 0x86
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4817      	ldr	r0, [pc, #92]	; (8000acc <HAL_ETH_MspInit+0x180>)
 8000a70:	f000 fea2 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a86:	230b      	movs	r3, #11
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <HAL_ETH_MspInit+0x184>)
 8000a92:	f000 fe91 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	; (8000ad4 <HAL_ETH_MspInit+0x188>)
 8000ab4:	f000 fe80 	bl	80017b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	; 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40028000 	.word	0x40028000
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40021800 	.word	0x40021800

08000ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1d      	ldr	r2, [pc, #116]	; (8000b6c <HAL_UART_MspInit+0x94>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d134      	bne.n	8000b64 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b02:	4a1b      	ldr	r2, [pc, #108]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b08:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <HAL_UART_MspInit+0x98>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <HAL_UART_MspInit+0x9c>)
 8000b50:	f000 fe32 	bl	80017b8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	2027      	movs	r0, #39	; 0x27
 8000b5a:	f000 fa50 	bl	8000ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000b5e:	2027      	movs	r0, #39	; 0x27
 8000b60:	f000 fa69 	bl	8001036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b64:	bf00      	nop
 8000b66:	3728      	adds	r7, #40	; 0x28
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40004800 	.word	0x40004800
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020c00 	.word	0x40020c00

08000b78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	; 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b98:	d13f      	bne.n	8000c1a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bb6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bc8:	230a      	movs	r3, #10
 8000bca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4815      	ldr	r0, [pc, #84]	; (8000c28 <HAL_PCD_MspInit+0xb0>)
 8000bd4:	f000 fdf0 	bl	80017b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480e      	ldr	r0, [pc, #56]	; (8000c28 <HAL_PCD_MspInit+0xb0>)
 8000bee:	f000 fde3 	bl	80017b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bfc:	6353      	str	r3, [r2, #52]	; 0x34
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_PCD_MspInit+0xac>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3728      	adds	r7, #40	; 0x28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020000 	.word	0x40020000

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <NMI_Handler+0x4>

08000c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c32:	b480      	push	{r7}
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <HardFault_Handler+0x4>

08000c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c3c:	e7fe      	b.n	8000c3c <MemManage_Handler+0x4>

08000c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c78:	f000 f8a2 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000c84:	4802      	ldr	r0, [pc, #8]	; (8000c90 <USART3_IRQHandler+0x10>)
 8000c86:	f001 fe45 	bl	8002914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000250 	.word	0x20000250

08000c94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000c98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c9c:	f000 ff52 	bl	8001b44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cce:	490e      	ldr	r1, [pc, #56]	; (8000d08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ce4:	4c0b      	ldr	r4, [pc, #44]	; (8000d14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cf2:	f7ff ffd7 	bl	8000ca4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f003 f875 	bl	8003de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc13 	bl	8000524 <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d0c:	08003e7c 	.word	0x08003e7c
  ldr r2, =_sbss
 8000d10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d14:	200007bc 	.word	0x200007bc

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f94f 	bl	8000fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fdd4 	bl	80008fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f967 	bl	8001052 <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f92f 	bl	8000ffe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	; (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200007b8 	.word	0x200007b8

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200007b8 	.word	0x200007b8

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008

08000e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db0b      	blt.n	8000ed6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	f003 021f 	and.w	r2, r3, #31
 8000ec4:	4907      	ldr	r1, [pc, #28]	; (8000ee4 <__NVIC_EnableIRQ+0x38>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	095b      	lsrs	r3, r3, #5
 8000ecc:	2001      	movs	r0, #1
 8000ece:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000e100 	.word	0xe000e100

08000ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db0a      	blt.n	8000f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	b2da      	uxtb	r2, r3
 8000f00:	490c      	ldr	r1, [pc, #48]	; (8000f34 <__NVIC_SetPriority+0x4c>)
 8000f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f06:	0112      	lsls	r2, r2, #4
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	440b      	add	r3, r1
 8000f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f10:	e00a      	b.n	8000f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4908      	ldr	r1, [pc, #32]	; (8000f38 <__NVIC_SetPriority+0x50>)
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	f003 030f 	and.w	r3, r3, #15
 8000f1e:	3b04      	subs	r3, #4
 8000f20:	0112      	lsls	r2, r2, #4
 8000f22:	b2d2      	uxtb	r2, r2
 8000f24:	440b      	add	r3, r1
 8000f26:	761a      	strb	r2, [r3, #24]
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr
 8000f34:	e000e100 	.word	0xe000e100
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b089      	sub	sp, #36	; 0x24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	60f8      	str	r0, [r7, #12]
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f1c3 0307 	rsb	r3, r3, #7
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	bf28      	it	cs
 8000f5a:	2304      	movcs	r3, #4
 8000f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3304      	adds	r3, #4
 8000f62:	2b06      	cmp	r3, #6
 8000f64:	d902      	bls.n	8000f6c <NVIC_EncodePriority+0x30>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	e000      	b.n	8000f6e <NVIC_EncodePriority+0x32>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	401a      	ands	r2, r3
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8e:	43d9      	mvns	r1, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	4313      	orrs	r3, r2
         );
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3724      	adds	r7, #36	; 0x24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3b01      	subs	r3, #1
 8000fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb4:	d301      	bcc.n	8000fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00f      	b.n	8000fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fba:	4a0a      	ldr	r2, [pc, #40]	; (8000fe4 <SysTick_Config+0x40>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc2:	210f      	movs	r1, #15
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc8:	f7ff ff8e 	bl	8000ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <SysTick_Config+0x40>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <SysTick_Config+0x40>)
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010

08000fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff29 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	4603      	mov	r3, r0
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
 800100a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001010:	f7ff ff3e 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8001014:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68b9      	ldr	r1, [r7, #8]
 800101a:	6978      	ldr	r0, [r7, #20]
 800101c:	f7ff ff8e 	bl	8000f3c <NVIC_EncodePriority>
 8001020:	4602      	mov	r2, r0
 8001022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001026:	4611      	mov	r1, r2
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff5d 	bl	8000ee8 <__NVIC_SetPriority>
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b082      	sub	sp, #8
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff31 	bl	8000eac <__NVIC_EnableIRQ>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff ffa2 	bl	8000fa4 <SysTick_Config>
 8001060:	4603      	mov	r3, r0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b084      	sub	sp, #16
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001076:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff feb6 	bl	8000de8 <HAL_GetTick>
 800107c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d008      	beq.n	800109c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2280      	movs	r2, #128	; 0x80
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e052      	b.n	8001142 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 0216 	bic.w	r2, r2, #22
 80010aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	695a      	ldr	r2, [r3, #20]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ba:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d103      	bne.n	80010cc <HAL_DMA_Abort+0x62>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d007      	beq.n	80010dc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f022 0208 	bic.w	r2, r2, #8
 80010da:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ec:	e013      	b.n	8001116 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ee:	f7ff fe7b 	bl	8000de8 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d90c      	bls.n	8001116 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2220      	movs	r2, #32
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e015      	b.n	8001142 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e4      	bne.n	80010ee <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001158:	b2db      	uxtb	r3, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d004      	beq.n	8001168 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2280      	movs	r2, #128	; 0x80
 8001162:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e00c      	b.n	8001182 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2205      	movs	r2, #5
 800116c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0201 	bic.w	r2, r2, #1
 800117e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e06c      	b.n	800127c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2223      	movs	r2, #35	; 0x23
 80011b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff fbc9 	bl	800094c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b31      	ldr	r3, [pc, #196]	; (8001284 <HAL_ETH_Init+0xf4>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a30      	ldr	r2, [pc, #192]	; (8001284 <HAL_ETH_Init+0xf4>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b2e      	ldr	r3, [pc, #184]	; (8001284 <HAL_ETH_Init+0xf4>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011d6:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <HAL_ETH_Init+0xf8>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	4a2b      	ldr	r2, [pc, #172]	; (8001288 <HAL_ETH_Init+0xf8>)
 80011dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80011e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <HAL_ETH_Init+0xf8>)
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	4927      	ldr	r1, [pc, #156]	; (8001288 <HAL_ETH_Init+0xf8>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80011f0:	4b25      	ldr	r3, [pc, #148]	; (8001288 <HAL_ETH_Init+0xf8>)
 80011f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6812      	ldr	r2, [r2, #0]
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800120a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800120c:	f7ff fdec 	bl	8000de8 <HAL_GetTick>
 8001210:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001212:	e011      	b.n	8001238 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001214:	f7ff fde8 	bl	8000de8 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001222:	d909      	bls.n	8001238 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2204      	movs	r2, #4
 8001228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	22e0      	movs	r2, #224	; 0xe0
 8001230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e021      	b.n	800127c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1e4      	bne.n	8001214 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f944 	bl	80014d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f9eb 	bl	800162c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fa41 	bl	80016de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	461a      	mov	r2, r3
 8001262:	2100      	movs	r1, #0
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f9a9 	bl	80015bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2210      	movs	r2, #16
 8001276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800

0800128c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	4b47      	ldr	r3, [pc, #284]	; (80013c0 <ETH_SetMACConfig+0x134>)
 80012a2:	4013      	ands	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	7c1b      	ldrb	r3, [r3, #16]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <ETH_SetMACConfig+0x28>
 80012ae:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012b2:	e000      	b.n	80012b6 <ETH_SetMACConfig+0x2a>
 80012b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	7c5b      	ldrb	r3, [r3, #17]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <ETH_SetMACConfig+0x38>
 80012be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012c2:	e000      	b.n	80012c6 <ETH_SetMACConfig+0x3a>
 80012c4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012c6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80012cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	7fdb      	ldrb	r3, [r3, #31]
 80012d2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80012d4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80012da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	7f92      	ldrb	r2, [r2, #30]
 80012e0:	2a00      	cmp	r2, #0
 80012e2:	d102      	bne.n	80012ea <ETH_SetMACConfig+0x5e>
 80012e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e8:	e000      	b.n	80012ec <ETH_SetMACConfig+0x60>
 80012ea:	2200      	movs	r2, #0
                        macconf->Speed |
 80012ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	7f1b      	ldrb	r3, [r3, #28]
 80012f2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80012f4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80012fa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	791b      	ldrb	r3, [r3, #4]
 8001300:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001302:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	f892 2020 	ldrb.w	r2, [r2, #32]
 800130a:	2a00      	cmp	r2, #0
 800130c:	d102      	bne.n	8001314 <ETH_SetMACConfig+0x88>
 800130e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001312:	e000      	b.n	8001316 <ETH_SetMACConfig+0x8a>
 8001314:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001316:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	7bdb      	ldrb	r3, [r3, #15]
 800131c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800131e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001324:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800132c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800132e:	4313      	orrs	r3, r2
 8001330:	68fa      	ldr	r2, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff fd5a 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001362:	4013      	ands	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->ZeroQuantaPause |
 800136c:	683a      	ldr	r2, [r7, #0]
 800136e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001372:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        (uint32_t)macconf->ZeroQuantaPause |
 8001378:	4313      	orrs	r3, r2
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
                        macconf->PauseLowThreshold |
 8001380:	4313      	orrs	r3, r2
                        (uint32_t)macconf->ReceiveFlowControl |
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
                        (uint32_t)macconf->UnicastSlowProtocolPacketDetect |
 8001388:	4313      	orrs	r3, r2
                        (uint32_t)macconf->TransmitFlowControl);
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001390:	4313      	orrs	r3, r2
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	699b      	ldr	r3, [r3, #24]
 80013a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f7ff fd29 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	619a      	str	r2, [r3, #24]
}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	ff20810f 	.word	0xff20810f

080013c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4b3d      	ldr	r3, [pc, #244]	; (80014d4 <ETH_SetDMAConfig+0x110>)
 80013de:	4013      	ands	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	7b1b      	ldrb	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <ETH_SetDMAConfig+0x2c>
 80013ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013ee:	e000      	b.n	80013f2 <ETH_SetDMAConfig+0x2e>
 80013f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	7b5b      	ldrb	r3, [r3, #13]
 80013f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	7f52      	ldrb	r2, [r2, #29]
 80013fe:	2a00      	cmp	r2, #0
 8001400:	d102      	bne.n	8001408 <ETH_SetDMAConfig+0x44>
 8001402:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001406:	e000      	b.n	800140a <ETH_SetDMAConfig+0x46>
 8001408:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800140a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	7b9b      	ldrb	r3, [r3, #14]
 8001410:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001412:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001418:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	7f1b      	ldrb	r3, [r3, #28]
 800141e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001420:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	7f9b      	ldrb	r3, [r3, #30]
 8001426:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001428:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800142e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001436:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001438:	4313      	orrs	r3, r2
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001448:	461a      	mov	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff fcd0 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	461a      	mov	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	791b      	ldrb	r3, [r3, #4]
 8001472:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001478:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800147e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001484:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800148c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800148e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001496:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800149c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014b8:	2001      	movs	r0, #1
 80014ba:	f7ff fca1 	bl	8000e00 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	f8de3f23 	.word	0xf8de3f23

080014d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0a6      	sub	sp, #152	; 0x98
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80014e0:	2301      	movs	r3, #1
 80014e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014e6:	2301      	movs	r3, #1
 80014e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014f6:	2301      	movs	r3, #1
 80014f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001502:	2301      	movs	r3, #1
 8001504:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001514:	2300      	movs	r3, #0
 8001516:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001518:	2300      	movs	r3, #0
 800151a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800151e:	2300      	movs	r3, #0
 8001520:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800153a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001540:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001544:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800154c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001550:	4619      	mov	r1, r3
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fe9a 	bl	800128c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001558:	2301      	movs	r3, #1
 800155a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800155c:	2301      	movs	r3, #1
 800155e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001566:	2301      	movs	r3, #1
 8001568:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800157a:	2300      	movs	r3, #0
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800157e:	2301      	movs	r3, #1
 8001580:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001584:	2301      	movs	r3, #1
 8001586:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800158c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800158e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001592:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001598:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff ff08 	bl	80013c4 <ETH_SetDMAConfig>
}
 80015b4:	bf00      	nop
 80015b6:	3798      	adds	r7, #152	; 0x98
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3305      	adds	r3, #5
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	3204      	adds	r2, #4
 80015d4:	7812      	ldrb	r2, [r2, #0]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <ETH_MACAddressConfig+0x68>)
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3303      	adds	r3, #3
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	061a      	lsls	r2, r3, #24
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3302      	adds	r3, #2
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3301      	adds	r3, #1
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	021b      	lsls	r3, r3, #8
 8001600:	4313      	orrs	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	4313      	orrs	r3, r2
 8001608:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <ETH_MACAddressConfig+0x6c>)
 800160e:	4413      	add	r3, r2
 8001610:	461a      	mov	r2, r3
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	6013      	str	r3, [r2, #0]
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40028040 	.word	0x40028040
 8001628:	40028044 	.word	0x40028044

0800162c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e03e      	b.n	80016b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	68d9      	ldr	r1, [r3, #12]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	440b      	add	r3, r1
 800164a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	3206      	adds	r2, #6
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2b02      	cmp	r3, #2
 8001680:	d80c      	bhi.n	800169c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68d9      	ldr	r1, [r3, #12]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1c5a      	adds	r2, r3, #1
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	440b      	add	r3, r1
 8001694:	461a      	mov	r2, r3
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	e004      	b.n	80016a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	461a      	mov	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3301      	adds	r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d9bd      	bls.n	800163a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d0:	611a      	str	r2, [r3, #16]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e046      	b.n	800177a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6919      	ldr	r1, [r3, #16]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	4613      	mov	r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	440b      	add	r3, r1
 80016fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2200      	movs	r2, #0
 8001708:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001728:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001730:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800173e:	68b9      	ldr	r1, [r7, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	3212      	adds	r2, #18
 8001746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2b02      	cmp	r3, #2
 800174e:	d80c      	bhi.n	800176a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6919      	ldr	r1, [r3, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	461a      	mov	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	e004      	b.n	8001774 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	691b      	ldr	r3, [r3, #16]
 800176e:	461a      	mov	r2, r3
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d9b5      	bls.n	80016ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2200      	movs	r2, #0
 8001784:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	60da      	str	r2, [r3, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
 80017d2:	e177      	b.n	8001ac4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017d4:	2201      	movs	r2, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f040 8166 	bne.w	8001abe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d005      	beq.n	800180a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001806:	2b02      	cmp	r3, #2
 8001808:	d130      	bne.n	800186c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	2203      	movs	r2, #3
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4013      	ands	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	68da      	ldr	r2, [r3, #12]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4313      	orrs	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 0201 	and.w	r2, r3, #1
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 0303 	and.w	r3, r3, #3
 8001874:	2b03      	cmp	r3, #3
 8001876:	d017      	beq.n	80018a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	2203      	movs	r2, #3
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4013      	ands	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d123      	bne.n	80018fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	08da      	lsrs	r2, r3, #3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3208      	adds	r2, #8
 80018bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	220f      	movs	r2, #15
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	08da      	lsrs	r2, r3, #3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	3208      	adds	r2, #8
 80018f6:	69b9      	ldr	r1, [r7, #24]
 80018f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	2203      	movs	r2, #3
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0203 	and.w	r2, r3, #3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80c0 	beq.w	8001abe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_GPIO_Init+0x324>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a65      	ldr	r2, [pc, #404]	; (8001adc <HAL_GPIO_Init+0x324>)
 8001948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b63      	ldr	r3, [pc, #396]	; (8001adc <HAL_GPIO_Init+0x324>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800195a:	4a61      	ldr	r2, [pc, #388]	; (8001ae0 <HAL_GPIO_Init+0x328>)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 0303 	and.w	r3, r3, #3
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	220f      	movs	r2, #15
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <HAL_GPIO_Init+0x32c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d037      	beq.n	80019f6 <HAL_GPIO_Init+0x23e>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a57      	ldr	r2, [pc, #348]	; (8001ae8 <HAL_GPIO_Init+0x330>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d031      	beq.n	80019f2 <HAL_GPIO_Init+0x23a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a56      	ldr	r2, [pc, #344]	; (8001aec <HAL_GPIO_Init+0x334>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d02b      	beq.n	80019ee <HAL_GPIO_Init+0x236>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a55      	ldr	r2, [pc, #340]	; (8001af0 <HAL_GPIO_Init+0x338>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d025      	beq.n	80019ea <HAL_GPIO_Init+0x232>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_GPIO_Init+0x33c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d01f      	beq.n	80019e6 <HAL_GPIO_Init+0x22e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a53      	ldr	r2, [pc, #332]	; (8001af8 <HAL_GPIO_Init+0x340>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x22a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a52      	ldr	r2, [pc, #328]	; (8001afc <HAL_GPIO_Init+0x344>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a51      	ldr	r2, [pc, #324]	; (8001b00 <HAL_GPIO_Init+0x348>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a50      	ldr	r2, [pc, #320]	; (8001b04 <HAL_GPIO_Init+0x34c>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_GPIO_Init+0x350>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x21a>
 80019ce:	2309      	movs	r3, #9
 80019d0:	e012      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019d2:	230a      	movs	r3, #10
 80019d4:	e010      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019d6:	2308      	movs	r3, #8
 80019d8:	e00e      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019da:	2307      	movs	r3, #7
 80019dc:	e00c      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019de:	2306      	movs	r3, #6
 80019e0:	e00a      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019e2:	2305      	movs	r3, #5
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019e6:	2304      	movs	r3, #4
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x240>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x328>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a34      	ldr	r2, [pc, #208]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a14      	ldr	r2, [pc, #80]	; (8001b0c <HAL_GPIO_Init+0x354>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f ae84 	bls.w	80017d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40021400 	.word	0x40021400
 8001afc:	40021800 	.word	0x40021800
 8001b00:	40021c00 	.word	0x40021c00
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40022400 	.word	0x40022400
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	4013      	ands	r3, r2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b60:	88fb      	ldrh	r3, [r7, #6]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f806 	bl	8001b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40013c00 	.word	0x40013c00

08001b74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8c:	b08f      	sub	sp, #60	; 0x3c
 8001b8e:	af0a      	add	r7, sp, #40	; 0x28
 8001b90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e10f      	b.n	8001dbc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe ffde 	bl	8000b78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2203      	movs	r2, #3
 8001bc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d102      	bne.n	8001bd6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fe61 	bl	80038a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	687e      	ldr	r6, [r7, #4]
 8001be8:	466d      	mov	r5, sp
 8001bea:	f106 0410 	add.w	r4, r6, #16
 8001bee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bf6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bfa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bfe:	1d33      	adds	r3, r6, #4
 8001c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c02:	6838      	ldr	r0, [r7, #0]
 8001c04:	f001 fdec 	bl	80037e0 <USB_CoreInit>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2202      	movs	r2, #2
 8001c12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0d0      	b.n	8001dbc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f001 fe4f 	bl	80038c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
 8001c2a:	e04a      	b.n	8001cc2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	333d      	adds	r3, #61	; 0x3d
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4613      	mov	r3, r2
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	440b      	add	r3, r1
 8001c4e:	333c      	adds	r3, #60	; 0x3c
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c54:	7bfa      	ldrb	r2, [r7, #15]
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	b298      	uxth	r0, r3
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	3344      	adds	r3, #68	; 0x44
 8001c68:	4602      	mov	r2, r0
 8001c6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	3340      	adds	r3, #64	; 0x40
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3348      	adds	r3, #72	; 0x48
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	334c      	adds	r3, #76	; 0x4c
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ca8:	7bfa      	ldrb	r2, [r7, #15]
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	4613      	mov	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3354      	adds	r3, #84	; 0x54
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	7bfa      	ldrb	r2, [r7, #15]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d3af      	bcc.n	8001c2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ccc:	2300      	movs	r3, #0
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e044      	b.n	8001d5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cd2:	7bfa      	ldrb	r2, [r7, #15]
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4413      	add	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	440b      	add	r3, r1
 8001ce0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ce8:	7bfa      	ldrb	r2, [r7, #15]
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cfa:	7bfa      	ldrb	r2, [r7, #15]
 8001cfc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d3b5      	bcc.n	8001cd2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	603b      	str	r3, [r7, #0]
 8001d6c:	687e      	ldr	r6, [r7, #4]
 8001d6e:	466d      	mov	r5, sp
 8001d70:	f106 0410 	add.w	r4, r6, #16
 8001d74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d84:	1d33      	adds	r3, r6, #4
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	6838      	ldr	r0, [r7, #0]
 8001d8a:	f001 fde7 	bl	800395c <USB_DevInit>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2202      	movs	r2, #2
 8001d98:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e00d      	b.n	8001dbc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f001 ffb2 	bl	8003d1e <USB_DevDisconnect>

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e267      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de2:	4b88      	ldr	r3, [pc, #544]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4b85      	ldr	r3, [pc, #532]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d112      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b7e      	ldr	r3, [pc, #504]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e242      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b76      	ldr	r3, [pc, #472]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a75      	ldr	r2, [pc, #468]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b70      	ldr	r3, [pc, #448]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a6f      	ldr	r2, [pc, #444]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b6d      	ldr	r3, [pc, #436]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a6c      	ldr	r2, [pc, #432]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b69      	ldr	r3, [pc, #420]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a68      	ldr	r2, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ffb4 	bl	8000de8 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7fe ffb0 	bl	8000de8 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e207      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ffa0 	bl	8000de8 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7fe ff9c 	bl	8000de8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1f3      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b51      	ldr	r3, [pc, #324]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b44      	ldr	r3, [pc, #272]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b41      	ldr	r3, [pc, #260]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1c7      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b3b      	ldr	r3, [pc, #236]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4937      	ldr	r1, [pc, #220]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff55 	bl	8000de8 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe ff51 	bl	8000de8 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e1a8      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4925      	ldr	r1, [pc, #148]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCC_OscConfig+0x244>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff34 	bl	8000de8 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f84:	f7fe ff30 	bl	8000de8 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e187      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d036      	beq.n	800201c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_RCC_OscConfig+0x248>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7fe ff14 	bl	8000de8 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7fe ff10 	bl	8000de8 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e167      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <HAL_RCC_OscConfig+0x240>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
 8001fe2:	e01b      	b.n	800201c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	4b09      	ldr	r3, [pc, #36]	; (800200c <HAL_RCC_OscConfig+0x248>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fefd 	bl	8000de8 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e00e      	b.n	8002010 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fef9 	bl	8000de8 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d907      	bls.n	8002010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e150      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
 8002004:	40023800 	.word	0x40023800
 8002008:	42470000 	.word	0x42470000
 800200c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002010:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1ea      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8097 	beq.w	8002158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800202e:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10f      	bne.n	800205a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	60bb      	str	r3, [r7, #8]
 8002054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002056:	2301      	movs	r3, #1
 8002058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800205a:	4b77      	ldr	r3, [pc, #476]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d118      	bne.n	8002098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002066:	4b74      	ldr	r3, [pc, #464]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a73      	ldr	r2, [pc, #460]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002072:	f7fe feb9 	bl	8000de8 <HAL_GetTick>
 8002076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002078:	e008      	b.n	800208c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800207a:	f7fe feb5 	bl	8000de8 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e10c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208c:	4b6a      	ldr	r3, [pc, #424]	; (8002238 <HAL_RCC_OscConfig+0x474>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0f0      	beq.n	800207a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d106      	bne.n	80020ae <HAL_RCC_OscConfig+0x2ea>
 80020a0:	4b64      	ldr	r3, [pc, #400]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020a4:	4a63      	ldr	r2, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	6713      	str	r3, [r2, #112]	; 0x70
 80020ac:	e01c      	b.n	80020e8 <HAL_RCC_OscConfig+0x324>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d10c      	bne.n	80020d0 <HAL_RCC_OscConfig+0x30c>
 80020b6:	4b5f      	ldr	r3, [pc, #380]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ba:	4a5e      	ldr	r2, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020bc:	f043 0304 	orr.w	r3, r3, #4
 80020c0:	6713      	str	r3, [r2, #112]	; 0x70
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c6:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6713      	str	r3, [r2, #112]	; 0x70
 80020ce:	e00b      	b.n	80020e8 <HAL_RCC_OscConfig+0x324>
 80020d0:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a57      	ldr	r2, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	4b55      	ldr	r3, [pc, #340]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e0:	4a54      	ldr	r2, [pc, #336]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80020e2:	f023 0304 	bic.w	r3, r3, #4
 80020e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f0:	f7fe fe7a 	bl	8000de8 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7fe fe76 	bl	8000de8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e0cb      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d0ee      	beq.n	80020f8 <HAL_RCC_OscConfig+0x334>
 800211a:	e014      	b.n	8002146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211c:	f7fe fe64 	bl	8000de8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002124:	f7fe fe60 	bl	8000de8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e0b5      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800213c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1ee      	bne.n	8002124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002146:	7dfb      	ldrb	r3, [r7, #23]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d105      	bne.n	8002158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a38      	ldr	r2, [pc, #224]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002152:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	699b      	ldr	r3, [r3, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80a1 	beq.w	80022a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b08      	cmp	r3, #8
 800216c:	d05c      	beq.n	8002228 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d141      	bne.n	80021fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002176:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_RCC_OscConfig+0x478>)
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217c:	f7fe fe34 	bl	8000de8 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe fe30 	bl	8000de8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e087      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002196:	4b27      	ldr	r3, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69da      	ldr	r2, [r3, #28]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	019b      	lsls	r3, r3, #6
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	061b      	lsls	r3, r3, #24
 80021c6:	491b      	ldr	r1, [pc, #108]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021cc:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_OscConfig+0x478>)
 80021ce:	2201      	movs	r2, #1
 80021d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d2:	f7fe fe09 	bl	8000de8 <HAL_GetTick>
 80021d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d8:	e008      	b.n	80021ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021da:	f7fe fe05 	bl	8000de8 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e05c      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ec:	4b11      	ldr	r3, [pc, #68]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0f0      	beq.n	80021da <HAL_RCC_OscConfig+0x416>
 80021f8:	e054      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_OscConfig+0x478>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002200:	f7fe fdf2 	bl	8000de8 <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002208:	f7fe fdee 	bl	8000de8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e045      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x470>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x444>
 8002226:	e03d      	b.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d107      	bne.n	8002240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e038      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
 8002234:	40023800 	.word	0x40023800
 8002238:	40007000 	.word	0x40007000
 800223c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002240:	4b1b      	ldr	r3, [pc, #108]	; (80022b0 <HAL_RCC_OscConfig+0x4ec>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d028      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d121      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002266:	429a      	cmp	r2, r3
 8002268:	d11a      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002270:	4013      	ands	r3, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002278:	4293      	cmp	r3, r2
 800227a:	d111      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	085b      	lsrs	r3, r3, #1
 8002288:	3b01      	subs	r3, #1
 800228a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0cc      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c8:	4b68      	ldr	r3, [pc, #416]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 030f 	and.w	r3, r3, #15
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d90c      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b63      	ldr	r3, [pc, #396]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0b8      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d020      	beq.n	800233e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d005      	beq.n	8002314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002308:	4b59      	ldr	r3, [pc, #356]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	4a58      	ldr	r2, [pc, #352]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002312:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0308 	and.w	r3, r3, #8
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002320:	4b53      	ldr	r3, [pc, #332]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	494d      	ldr	r1, [pc, #308]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d044      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d107      	bne.n	8002362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d119      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e07f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b02      	cmp	r3, #2
 8002368:	d003      	beq.n	8002372 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	2b03      	cmp	r3, #3
 8002370:	d107      	bne.n	8002382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002372:	4b3f      	ldr	r3, [pc, #252]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d109      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e06f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002382:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e067      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f023 0203 	bic.w	r2, r3, #3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	4934      	ldr	r1, [pc, #208]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fd20 	bl	8000de8 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	e00a      	b.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ac:	f7fe fd1c 	bl	8000de8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e04f      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 020c 	and.w	r2, r3, #12
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d1eb      	bne.n	80023ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d4:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d20c      	bcs.n	80023fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ea:	4b20      	ldr	r3, [pc, #128]	; (800246c <HAL_RCC_ClockConfig+0x1b8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d001      	beq.n	80023fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e032      	b.n	8002462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	4916      	ldr	r1, [pc, #88]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002426:	4b12      	ldr	r3, [pc, #72]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243a:	f000 f821 	bl	8002480 <HAL_RCC_GetSysClockFreq>
 800243e:	4602      	mov	r2, r0
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	091b      	lsrs	r3, r3, #4
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	490a      	ldr	r1, [pc, #40]	; (8002474 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	5ccb      	ldrb	r3, [r1, r3]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a09      	ldr	r2, [pc, #36]	; (8002478 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe fc80 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00
 8002470:	40023800 	.word	0x40023800
 8002474:	08003e54 	.word	0x08003e54
 8002478:	20000000 	.word	0x20000000
 800247c:	20000004 	.word	0x20000004

08002480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002484:	b094      	sub	sp, #80	; 0x50
 8002486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	647b      	str	r3, [r7, #68]	; 0x44
 800248c:	2300      	movs	r3, #0
 800248e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002490:	2300      	movs	r3, #0
 8002492:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002498:	4b79      	ldr	r3, [pc, #484]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 030c 	and.w	r3, r3, #12
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d00d      	beq.n	80024c0 <HAL_RCC_GetSysClockFreq+0x40>
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	f200 80e1 	bhi.w	800266c <HAL_RCC_GetSysClockFreq+0x1ec>
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d002      	beq.n	80024b4 <HAL_RCC_GetSysClockFreq+0x34>
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d003      	beq.n	80024ba <HAL_RCC_GetSysClockFreq+0x3a>
 80024b2:	e0db      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024b4:	4b73      	ldr	r3, [pc, #460]	; (8002684 <HAL_RCC_GetSysClockFreq+0x204>)
 80024b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80024b8:	e0db      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ba:	4b73      	ldr	r3, [pc, #460]	; (8002688 <HAL_RCC_GetSysClockFreq+0x208>)
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80024be:	e0d8      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024c0:	4b6f      	ldr	r3, [pc, #444]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ca:	4b6d      	ldr	r3, [pc, #436]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d063      	beq.n	800259e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b6a      	ldr	r3, [pc, #424]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	2200      	movs	r2, #0
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ea:	2300      	movs	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	; 0x34
 80024ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024f2:	4622      	mov	r2, r4
 80024f4:	462b      	mov	r3, r5
 80024f6:	f04f 0000 	mov.w	r0, #0
 80024fa:	f04f 0100 	mov.w	r1, #0
 80024fe:	0159      	lsls	r1, r3, #5
 8002500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002504:	0150      	lsls	r0, r2, #5
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4621      	mov	r1, r4
 800250c:	1a51      	subs	r1, r2, r1
 800250e:	6139      	str	r1, [r7, #16]
 8002510:	4629      	mov	r1, r5
 8002512:	eb63 0301 	sbc.w	r3, r3, r1
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002524:	4659      	mov	r1, fp
 8002526:	018b      	lsls	r3, r1, #6
 8002528:	4651      	mov	r1, sl
 800252a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800252e:	4651      	mov	r1, sl
 8002530:	018a      	lsls	r2, r1, #6
 8002532:	4651      	mov	r1, sl
 8002534:	ebb2 0801 	subs.w	r8, r2, r1
 8002538:	4659      	mov	r1, fp
 800253a:	eb63 0901 	sbc.w	r9, r3, r1
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800254a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800254e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002552:	4690      	mov	r8, r2
 8002554:	4699      	mov	r9, r3
 8002556:	4623      	mov	r3, r4
 8002558:	eb18 0303 	adds.w	r3, r8, r3
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	462b      	mov	r3, r5
 8002560:	eb49 0303 	adc.w	r3, r9, r3
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002572:	4629      	mov	r1, r5
 8002574:	024b      	lsls	r3, r1, #9
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800257c:	4621      	mov	r1, r4
 800257e:	024a      	lsls	r2, r1, #9
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
 800258a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800258c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002590:	f7fd fe2c 	bl	80001ec <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800259c:	e058      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	099b      	lsrs	r3, r3, #6
 80025a4:	2200      	movs	r2, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	4611      	mov	r1, r2
 80025aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025ae:	623b      	str	r3, [r7, #32]
 80025b0:	2300      	movs	r3, #0
 80025b2:	627b      	str	r3, [r7, #36]	; 0x24
 80025b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025b8:	4642      	mov	r2, r8
 80025ba:	464b      	mov	r3, r9
 80025bc:	f04f 0000 	mov.w	r0, #0
 80025c0:	f04f 0100 	mov.w	r1, #0
 80025c4:	0159      	lsls	r1, r3, #5
 80025c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025ca:	0150      	lsls	r0, r2, #5
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4641      	mov	r1, r8
 80025d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d6:	4649      	mov	r1, r9
 80025d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80025dc:	f04f 0200 	mov.w	r2, #0
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025f0:	ebb2 040a 	subs.w	r4, r2, sl
 80025f4:	eb63 050b 	sbc.w	r5, r3, fp
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	00eb      	lsls	r3, r5, #3
 8002602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002606:	00e2      	lsls	r2, r4, #3
 8002608:	4614      	mov	r4, r2
 800260a:	461d      	mov	r5, r3
 800260c:	4643      	mov	r3, r8
 800260e:	18e3      	adds	r3, r4, r3
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	464b      	mov	r3, r9
 8002614:	eb45 0303 	adc.w	r3, r5, r3
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	f04f 0300 	mov.w	r3, #0
 8002622:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002626:	4629      	mov	r1, r5
 8002628:	028b      	lsls	r3, r1, #10
 800262a:	4621      	mov	r1, r4
 800262c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002630:	4621      	mov	r1, r4
 8002632:	028a      	lsls	r2, r1, #10
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263a:	2200      	movs	r2, #0
 800263c:	61bb      	str	r3, [r7, #24]
 800263e:	61fa      	str	r2, [r7, #28]
 8002640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002644:	f7fd fdd2 	bl	80001ec <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4613      	mov	r3, r2
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetSysClockFreq+0x200>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002660:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x204>)
 800266e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002674:	4618      	mov	r0, r3
 8002676:	3750      	adds	r7, #80	; 0x50
 8002678:	46bd      	mov	sp, r7
 800267a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	007a1200 	.word	0x007a1200

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4903      	ldr	r1, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08003e64 	.word	0x08003e64

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026d0:	f7ff ffdc 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	0b5b      	lsrs	r3, r3, #13
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4903      	ldr	r1, [pc, #12]	; (80026f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08003e64 	.word	0x08003e64

080026f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e03f      	b.n	8002786 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe f9dc 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fddd 	bl	80032f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800274c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800275c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68da      	ldr	r2, [r3, #12]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800276c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2220      	movs	r2, #32
 8002780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b08a      	sub	sp, #40	; 0x28
 8002792:	af02      	add	r7, sp, #8
 8002794:	60f8      	str	r0, [r7, #12]
 8002796:	60b9      	str	r1, [r7, #8]
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	4613      	mov	r3, r2
 800279c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b20      	cmp	r3, #32
 80027ac:	d17c      	bne.n	80028a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <HAL_UART_Transmit+0x2c>
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e075      	b.n	80028aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_UART_Transmit+0x3e>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e06e      	b.n	80028aa <HAL_UART_Transmit+0x11c>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2221      	movs	r2, #33	; 0x21
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe fb01 	bl	8000de8 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d108      	bne.n	8002810 <HAL_UART_Transmit+0x82>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d104      	bne.n	8002810 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61bb      	str	r3, [r7, #24]
 800280e:	e003      	b.n	8002818 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002814:	2300      	movs	r3, #0
 8002816:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002820:	e02a      	b.n	8002878 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f000 fb1d 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d001      	beq.n	800283c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e036      	b.n	80028aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10b      	bne.n	800285a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	461a      	mov	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002850:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	3302      	adds	r3, #2
 8002856:	61bb      	str	r3, [r7, #24]
 8002858:	e007      	b.n	800286a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	781a      	ldrb	r2, [r3, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	3301      	adds	r3, #1
 8002868:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800287c:	b29b      	uxth	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1cf      	bne.n	8002822 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2200      	movs	r2, #0
 800288a:	2140      	movs	r1, #64	; 0x40
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 faed 	bl	8002e6c <UART_WaitOnFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e006      	b.n	80028aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3720      	adds	r7, #32
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	60b9      	str	r1, [r7, #8]
 80028bc:	4613      	mov	r3, r2
 80028be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d11d      	bne.n	8002908 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_UART_Receive_IT+0x26>
 80028d2:	88fb      	ldrh	r3, [r7, #6]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e016      	b.n	800290a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_UART_Receive_IT+0x38>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e00f      	b.n	800290a <HAL_UART_Receive_IT+0x58>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	461a      	mov	r2, r3
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	68f8      	ldr	r0, [r7, #12]
 8002900:	f000 fb22 	bl	8002f48 <UART_Start_Receive_IT>
 8002904:	4603      	mov	r3, r0
 8002906:	e000      	b.n	800290a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002908:	2302      	movs	r3, #2
  }
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b0ba      	sub	sp, #232	; 0xe8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800293a:	2300      	movs	r3, #0
 800293c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10f      	bne.n	800297a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_UART_IRQHandler+0x66>
 8002966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fc05 	bl	8003182 <UART_Receive_IT>
      return;
 8002978:	e256      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800297a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80de 	beq.w	8002b40 <HAL_UART_IRQHandler+0x22c>
 8002984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b00      	cmp	r3, #0
 800298e:	d106      	bne.n	800299e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002994:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80d1 	beq.w	8002b40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800299e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_UART_IRQHandler+0xae>
 80029aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c6:	f003 0304 	and.w	r3, r3, #4
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00b      	beq.n	80029e6 <HAL_UART_IRQHandler+0xd2>
 80029ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f043 0202 	orr.w	r2, r3, #2
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80029e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_UART_IRQHandler+0xf6>
 80029f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d011      	beq.n	8002a3a <HAL_UART_IRQHandler+0x126>
 8002a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0208 	orr.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 81ed 	beq.w	8002e1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a48:	f003 0320 	and.w	r3, r3, #32
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_UART_IRQHandler+0x14e>
 8002a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a54:	f003 0320 	and.w	r3, r3, #32
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d002      	beq.n	8002a62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 fb90 	bl	8003182 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6c:	2b40      	cmp	r3, #64	; 0x40
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d103      	bne.n	8002a8e <HAL_UART_IRQHandler+0x17a>
 8002a86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d04f      	beq.n	8002b2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 fa98 	bl	8002fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d141      	bne.n	8002b26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	3314      	adds	r3, #20
 8002aa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ab0:	e853 3f00 	ldrex	r3, [r3]
 8002ab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002abc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3314      	adds	r3, #20
 8002aca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ace:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002ada:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ade:	e841 2300 	strex	r3, r2, [r1]
 8002ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1d9      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d013      	beq.n	8002b1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	4a7d      	ldr	r2, [pc, #500]	; (8002cf0 <HAL_UART_IRQHandler+0x3dc>)
 8002afc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb21 	bl	800114a <HAL_DMA_Abort_IT>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b1c:	e00e      	b.n	8002b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f99a 	bl	8002e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b24:	e00a      	b.n	8002b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f996 	bl	8002e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b2c:	e006      	b.n	8002b3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f992 	bl	8002e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002b3a:	e170      	b.n	8002e1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b3c:	bf00      	nop
    return;
 8002b3e:	e16e      	b.n	8002e1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	f040 814a 	bne.w	8002dde <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8143 	beq.w	8002dde <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	f000 813c 	beq.w	8002dde <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b40      	cmp	r3, #64	; 0x40
 8002b88:	f040 80b4 	bne.w	8002cf4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8140 	beq.w	8002e22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ba6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f080 8139 	bcs.w	8002e22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002bb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	f000 8088 	beq.w	8002cd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	330c      	adds	r3, #12
 8002bcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002bdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	330c      	adds	r3, #12
 8002bee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002bf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002bf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c02:	e841 2300 	strex	r3, r2, [r1]
 8002c06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002c0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1d9      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3314      	adds	r3, #20
 8002c18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c1c:	e853 3f00 	ldrex	r3, [r3]
 8002c20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002c22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	3314      	adds	r3, #20
 8002c32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c42:	e841 2300 	strex	r3, r2, [r1]
 8002c46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1e1      	bne.n	8002c12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	3314      	adds	r3, #20
 8002c54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c58:	e853 3f00 	ldrex	r3, [r3]
 8002c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3314      	adds	r3, #20
 8002c6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c7a:	e841 2300 	strex	r3, r2, [r1]
 8002c7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1e3      	bne.n	8002c4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2220      	movs	r2, #32
 8002c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	330c      	adds	r3, #12
 8002c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca6:	f023 0310 	bic.w	r3, r3, #16
 8002caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	330c      	adds	r3, #12
 8002cb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002cb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002cba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002cbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e3      	bne.n	8002c94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fe f9ca 	bl	800106a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fc02 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002cec:	e099      	b.n	8002e22 <HAL_UART_IRQHandler+0x50e>
 8002cee:	bf00      	nop
 8002cf0:	0800308b 	.word	0x0800308b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 808b 	beq.w	8002e26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002d10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8086 	beq.w	8002e26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002d30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	330c      	adds	r3, #12
 8002d3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002d3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002d40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e3      	bne.n	8002d1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3314      	adds	r3, #20
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5c:	e853 3f00 	ldrex	r3, [r3]
 8002d60:	623b      	str	r3, [r7, #32]
   return(result);
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	f023 0301 	bic.w	r3, r3, #1
 8002d68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3314      	adds	r3, #20
 8002d72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d76:	633a      	str	r2, [r7, #48]	; 0x30
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7e:	e841 2300 	strex	r3, r2, [r1]
 8002d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d1e3      	bne.n	8002d52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	330c      	adds	r3, #12
 8002d9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0310 	bic.w	r3, r3, #16
 8002dae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002dbc:	61fa      	str	r2, [r7, #28]
 8002dbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	617b      	str	r3, [r7, #20]
   return(result);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e3      	bne.n	8002d98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002dd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fb8a 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ddc:	e023      	b.n	8002e26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_UART_IRQHandler+0x4ea>
 8002dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f95b 	bl	80030b2 <UART_Transmit_IT>
    return;
 8002dfc:	e014      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00e      	beq.n	8002e28 <HAL_UART_IRQHandler+0x514>
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d008      	beq.n	8002e28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f99b 	bl	8003152 <UART_EndTransmit_IT>
    return;
 8002e1c:	e004      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
    return;
 8002e1e:	bf00      	nop
 8002e20:	e002      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
      return;
 8002e22:	bf00      	nop
 8002e24:	e000      	b.n	8002e28 <HAL_UART_IRQHandler+0x514>
      return;
 8002e26:	bf00      	nop
  }
}
 8002e28:	37e8      	adds	r7, #232	; 0xe8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop

08002e30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b090      	sub	sp, #64	; 0x40
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e7c:	e050      	b.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e84:	d04c      	beq.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e8c:	f7fd ffac 	bl	8000de8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d241      	bcs.n	8002f20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	e853 3f00 	ldrex	r3, [r3]
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ebc:	637a      	str	r2, [r7, #52]	; 0x34
 8002ebe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e5      	bne.n	8002e9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3314      	adds	r3, #20
 8002ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	613b      	str	r3, [r7, #16]
   return(result);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ef0:	623a      	str	r2, [r7, #32]
 8002ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	6a3a      	ldr	r2, [r7, #32]
 8002ef8:	e841 2300 	strex	r3, r2, [r1]
 8002efc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1e5      	bne.n	8002ed0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e00f      	b.n	8002f40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	bf0c      	ite	eq
 8002f30:	2301      	moveq	r3, #1
 8002f32:	2300      	movne	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	461a      	mov	r2, r3
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d09f      	beq.n	8002e7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3740      	adds	r7, #64	; 0x40
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	4613      	mov	r3, r2
 8002f54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	88fa      	ldrh	r2, [r7, #6]
 8002f66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2222      	movs	r2, #34	; 0x22
 8002f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	695a      	ldr	r2, [r3, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f042 0201 	orr.w	r2, r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68da      	ldr	r2, [r3, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f042 0220 	orr.w	r2, r2, #32
 8002fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b095      	sub	sp, #84	; 0x54
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	330c      	adds	r3, #12
 8002fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fec:	643a      	str	r2, [r7, #64]	; 0x40
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ff4:	e841 2300 	strex	r3, r2, [r1]
 8002ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1e5      	bne.n	8002fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f023 0301 	bic.w	r3, r3, #1
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	3314      	adds	r3, #20
 800301e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003020:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e5      	bne.n	8003000 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	2b01      	cmp	r3, #1
 800303a:	d119      	bne.n	8003070 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	330c      	adds	r3, #12
 8003042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	e853 3f00 	ldrex	r3, [r3]
 800304a:	60bb      	str	r3, [r7, #8]
   return(result);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f023 0310 	bic.w	r3, r3, #16
 8003052:	647b      	str	r3, [r7, #68]	; 0x44
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800305c:	61ba      	str	r2, [r7, #24]
 800305e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003060:	6979      	ldr	r1, [r7, #20]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	e841 2300 	strex	r3, r2, [r1]
 8003068:	613b      	str	r3, [r7, #16]
   return(result);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1e5      	bne.n	800303c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800307e:	bf00      	nop
 8003080:	3754      	adds	r7, #84	; 0x54
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f7ff fed7 	bl	8002e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030b2:	b480      	push	{r7}
 80030b4:	b085      	sub	sp, #20
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b21      	cmp	r3, #33	; 0x21
 80030c4:	d13e      	bne.n	8003144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	d114      	bne.n	80030fa <UART_Transmit_IT+0x48>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d110      	bne.n	80030fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	1c9a      	adds	r2, r3, #2
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	621a      	str	r2, [r3, #32]
 80030f8:	e008      	b.n	800310c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	1c59      	adds	r1, r3, #1
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6211      	str	r1, [r2, #32]
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003110:	b29b      	uxth	r3, r3
 8003112:	3b01      	subs	r3, #1
 8003114:	b29b      	uxth	r3, r3
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10f      	bne.n	8003140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800312e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800313e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003140:	2300      	movs	r3, #0
 8003142:	e000      	b.n	8003146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003144:	2302      	movs	r3, #2
  }
}
 8003146:	4618      	mov	r0, r3
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003168:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7ff fe5c 	bl	8002e30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b08c      	sub	sp, #48	; 0x30
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b22      	cmp	r3, #34	; 0x22
 8003194:	f040 80ab 	bne.w	80032ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a0:	d117      	bne.n	80031d2 <UART_Receive_IT+0x50>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d113      	bne.n	80031d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	1c9a      	adds	r2, r3, #2
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	; 0x28
 80031d0:	e026      	b.n	8003220 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80031d8:	2300      	movs	r3, #0
 80031da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031e4:	d007      	beq.n	80031f6 <UART_Receive_IT+0x74>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10a      	bne.n	8003204 <UART_Receive_IT+0x82>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003200:	701a      	strb	r2, [r3, #0]
 8003202:	e008      	b.n	8003216 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003210:	b2da      	uxtb	r2, r3
 8003212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003214:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 10U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29b      	uxth	r3, r3
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003230:	2b0a      	cmp	r3, #10
 8003232:	d15a      	bne.n	80032ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0220 	bic.w	r2, r2, #32
 8003242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695a      	ldr	r2, [r3, #20]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f022 0201 	bic.w	r2, r2, #1
 8003262:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003270:	2b01      	cmp	r3, #1
 8003272:	d135      	bne.n	80032e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	330c      	adds	r3, #12
 8003280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	613b      	str	r3, [r7, #16]
   return(result);
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f023 0310 	bic.w	r3, r3, #16
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	330c      	adds	r3, #12
 8003298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329a:	623a      	str	r2, [r7, #32]
 800329c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	69f9      	ldr	r1, [r7, #28]
 80032a0:	6a3a      	ldr	r2, [r7, #32]
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e5      	bne.n	800327a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d10a      	bne.n	80032d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032bc:	2300      	movs	r3, #0
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032d6:	4619      	mov	r1, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7fd f909 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
 80032de:	e002      	b.n	80032e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fdaf 	bl	8002e44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e002      	b.n	80032f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
  }
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3730      	adds	r7, #48	; 0x30
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032fc:	b0c0      	sub	sp, #256	; 0x100
 80032fe:	af00      	add	r7, sp, #0
 8003300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003314:	68d9      	ldr	r1, [r3, #12]
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	ea40 0301 	orr.w	r3, r0, r1
 8003320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	431a      	orrs	r2, r3
 8003330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	431a      	orrs	r2, r3
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003350:	f021 010c 	bic.w	r1, r1, #12
 8003354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800335e:	430b      	orrs	r3, r1
 8003360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800336e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003372:	6999      	ldr	r1, [r3, #24]
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	ea40 0301 	orr.w	r3, r0, r1
 800337e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b8f      	ldr	r3, [pc, #572]	; (80035c4 <UART_SetConfig+0x2cc>)
 8003388:	429a      	cmp	r2, r3
 800338a:	d005      	beq.n	8003398 <UART_SetConfig+0xa0>
 800338c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b8d      	ldr	r3, [pc, #564]	; (80035c8 <UART_SetConfig+0x2d0>)
 8003394:	429a      	cmp	r2, r3
 8003396:	d104      	bne.n	80033a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003398:	f7ff f998 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
 800339c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80033a0:	e003      	b.n	80033aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033a2:	f7ff f97f 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 80033a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b4:	f040 810c 	bne.w	80035d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80033c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80033ca:	4622      	mov	r2, r4
 80033cc:	462b      	mov	r3, r5
 80033ce:	1891      	adds	r1, r2, r2
 80033d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80033d2:	415b      	adcs	r3, r3
 80033d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80033da:	4621      	mov	r1, r4
 80033dc:	eb12 0801 	adds.w	r8, r2, r1
 80033e0:	4629      	mov	r1, r5
 80033e2:	eb43 0901 	adc.w	r9, r3, r1
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033fa:	4690      	mov	r8, r2
 80033fc:	4699      	mov	r9, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	eb18 0303 	adds.w	r3, r8, r3
 8003404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003408:	462b      	mov	r3, r5
 800340a:	eb49 0303 	adc.w	r3, r9, r3
 800340e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800341e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003426:	460b      	mov	r3, r1
 8003428:	18db      	adds	r3, r3, r3
 800342a:	653b      	str	r3, [r7, #80]	; 0x50
 800342c:	4613      	mov	r3, r2
 800342e:	eb42 0303 	adc.w	r3, r2, r3
 8003432:	657b      	str	r3, [r7, #84]	; 0x54
 8003434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800343c:	f7fc fed6 	bl	80001ec <__aeabi_uldivmod>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4b61      	ldr	r3, [pc, #388]	; (80035cc <UART_SetConfig+0x2d4>)
 8003446:	fba3 2302 	umull	r2, r3, r3, r2
 800344a:	095b      	lsrs	r3, r3, #5
 800344c:	011c      	lsls	r4, r3, #4
 800344e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003452:	2200      	movs	r2, #0
 8003454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800345c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003460:	4642      	mov	r2, r8
 8003462:	464b      	mov	r3, r9
 8003464:	1891      	adds	r1, r2, r2
 8003466:	64b9      	str	r1, [r7, #72]	; 0x48
 8003468:	415b      	adcs	r3, r3
 800346a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800346c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003470:	4641      	mov	r1, r8
 8003472:	eb12 0a01 	adds.w	sl, r2, r1
 8003476:	4649      	mov	r1, r9
 8003478:	eb43 0b01 	adc.w	fp, r3, r1
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	f04f 0300 	mov.w	r3, #0
 8003484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800348c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003490:	4692      	mov	sl, r2
 8003492:	469b      	mov	fp, r3
 8003494:	4643      	mov	r3, r8
 8003496:	eb1a 0303 	adds.w	r3, sl, r3
 800349a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800349e:	464b      	mov	r3, r9
 80034a0:	eb4b 0303 	adc.w	r3, fp, r3
 80034a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80034a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80034b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80034bc:	460b      	mov	r3, r1
 80034be:	18db      	adds	r3, r3, r3
 80034c0:	643b      	str	r3, [r7, #64]	; 0x40
 80034c2:	4613      	mov	r3, r2
 80034c4:	eb42 0303 	adc.w	r3, r2, r3
 80034c8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80034ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80034d2:	f7fc fe8b 	bl	80001ec <__aeabi_uldivmod>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4611      	mov	r1, r2
 80034dc:	4b3b      	ldr	r3, [pc, #236]	; (80035cc <UART_SetConfig+0x2d4>)
 80034de:	fba3 2301 	umull	r2, r3, r3, r1
 80034e2:	095b      	lsrs	r3, r3, #5
 80034e4:	2264      	movs	r2, #100	; 0x64
 80034e6:	fb02 f303 	mul.w	r3, r2, r3
 80034ea:	1acb      	subs	r3, r1, r3
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80034f2:	4b36      	ldr	r3, [pc, #216]	; (80035cc <UART_SetConfig+0x2d4>)
 80034f4:	fba3 2302 	umull	r2, r3, r3, r2
 80034f8:	095b      	lsrs	r3, r3, #5
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003500:	441c      	add	r4, r3
 8003502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003506:	2200      	movs	r2, #0
 8003508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800350c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003514:	4642      	mov	r2, r8
 8003516:	464b      	mov	r3, r9
 8003518:	1891      	adds	r1, r2, r2
 800351a:	63b9      	str	r1, [r7, #56]	; 0x38
 800351c:	415b      	adcs	r3, r3
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003524:	4641      	mov	r1, r8
 8003526:	1851      	adds	r1, r2, r1
 8003528:	6339      	str	r1, [r7, #48]	; 0x30
 800352a:	4649      	mov	r1, r9
 800352c:	414b      	adcs	r3, r1
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800353c:	4659      	mov	r1, fp
 800353e:	00cb      	lsls	r3, r1, #3
 8003540:	4651      	mov	r1, sl
 8003542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003546:	4651      	mov	r1, sl
 8003548:	00ca      	lsls	r2, r1, #3
 800354a:	4610      	mov	r0, r2
 800354c:	4619      	mov	r1, r3
 800354e:	4603      	mov	r3, r0
 8003550:	4642      	mov	r2, r8
 8003552:	189b      	adds	r3, r3, r2
 8003554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003558:	464b      	mov	r3, r9
 800355a:	460a      	mov	r2, r1
 800355c:	eb42 0303 	adc.w	r3, r2, r3
 8003560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003578:	460b      	mov	r3, r1
 800357a:	18db      	adds	r3, r3, r3
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
 800357e:	4613      	mov	r3, r2
 8003580:	eb42 0303 	adc.w	r3, r2, r3
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800358a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800358e:	f7fc fe2d 	bl	80001ec <__aeabi_uldivmod>
 8003592:	4602      	mov	r2, r0
 8003594:	460b      	mov	r3, r1
 8003596:	4b0d      	ldr	r3, [pc, #52]	; (80035cc <UART_SetConfig+0x2d4>)
 8003598:	fba3 1302 	umull	r1, r3, r3, r2
 800359c:	095b      	lsrs	r3, r3, #5
 800359e:	2164      	movs	r1, #100	; 0x64
 80035a0:	fb01 f303 	mul.w	r3, r1, r3
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	3332      	adds	r3, #50	; 0x32
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <UART_SetConfig+0x2d4>)
 80035ac:	fba2 2303 	umull	r2, r3, r2, r3
 80035b0:	095b      	lsrs	r3, r3, #5
 80035b2:	f003 0207 	and.w	r2, r3, #7
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4422      	add	r2, r4
 80035be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035c0:	e105      	b.n	80037ce <UART_SetConfig+0x4d6>
 80035c2:	bf00      	nop
 80035c4:	40011000 	.word	0x40011000
 80035c8:	40011400 	.word	0x40011400
 80035cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035d4:	2200      	movs	r2, #0
 80035d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80035da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80035de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80035e2:	4642      	mov	r2, r8
 80035e4:	464b      	mov	r3, r9
 80035e6:	1891      	adds	r1, r2, r2
 80035e8:	6239      	str	r1, [r7, #32]
 80035ea:	415b      	adcs	r3, r3
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
 80035ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035f2:	4641      	mov	r1, r8
 80035f4:	1854      	adds	r4, r2, r1
 80035f6:	4649      	mov	r1, r9
 80035f8:	eb43 0501 	adc.w	r5, r3, r1
 80035fc:	f04f 0200 	mov.w	r2, #0
 8003600:	f04f 0300 	mov.w	r3, #0
 8003604:	00eb      	lsls	r3, r5, #3
 8003606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800360a:	00e2      	lsls	r2, r4, #3
 800360c:	4614      	mov	r4, r2
 800360e:	461d      	mov	r5, r3
 8003610:	4643      	mov	r3, r8
 8003612:	18e3      	adds	r3, r4, r3
 8003614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003618:	464b      	mov	r3, r9
 800361a:	eb45 0303 	adc.w	r3, r5, r3
 800361e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800362e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800363e:	4629      	mov	r1, r5
 8003640:	008b      	lsls	r3, r1, #2
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003648:	4621      	mov	r1, r4
 800364a:	008a      	lsls	r2, r1, #2
 800364c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003650:	f7fc fdcc 	bl	80001ec <__aeabi_uldivmod>
 8003654:	4602      	mov	r2, r0
 8003656:	460b      	mov	r3, r1
 8003658:	4b60      	ldr	r3, [pc, #384]	; (80037dc <UART_SetConfig+0x4e4>)
 800365a:	fba3 2302 	umull	r2, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	011c      	lsls	r4, r3, #4
 8003662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003666:	2200      	movs	r2, #0
 8003668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800366c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003674:	4642      	mov	r2, r8
 8003676:	464b      	mov	r3, r9
 8003678:	1891      	adds	r1, r2, r2
 800367a:	61b9      	str	r1, [r7, #24]
 800367c:	415b      	adcs	r3, r3
 800367e:	61fb      	str	r3, [r7, #28]
 8003680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003684:	4641      	mov	r1, r8
 8003686:	1851      	adds	r1, r2, r1
 8003688:	6139      	str	r1, [r7, #16]
 800368a:	4649      	mov	r1, r9
 800368c:	414b      	adcs	r3, r1
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	f04f 0300 	mov.w	r3, #0
 8003698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800369c:	4659      	mov	r1, fp
 800369e:	00cb      	lsls	r3, r1, #3
 80036a0:	4651      	mov	r1, sl
 80036a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036a6:	4651      	mov	r1, sl
 80036a8:	00ca      	lsls	r2, r1, #3
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	4603      	mov	r3, r0
 80036b0:	4642      	mov	r2, r8
 80036b2:	189b      	adds	r3, r3, r2
 80036b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80036b8:	464b      	mov	r3, r9
 80036ba:	460a      	mov	r2, r1
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80036c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80036ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80036dc:	4649      	mov	r1, r9
 80036de:	008b      	lsls	r3, r1, #2
 80036e0:	4641      	mov	r1, r8
 80036e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036e6:	4641      	mov	r1, r8
 80036e8:	008a      	lsls	r2, r1, #2
 80036ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80036ee:	f7fc fd7d 	bl	80001ec <__aeabi_uldivmod>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4b39      	ldr	r3, [pc, #228]	; (80037dc <UART_SetConfig+0x4e4>)
 80036f8:	fba3 1302 	umull	r1, r3, r3, r2
 80036fc:	095b      	lsrs	r3, r3, #5
 80036fe:	2164      	movs	r1, #100	; 0x64
 8003700:	fb01 f303 	mul.w	r3, r1, r3
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	011b      	lsls	r3, r3, #4
 8003708:	3332      	adds	r3, #50	; 0x32
 800370a:	4a34      	ldr	r2, [pc, #208]	; (80037dc <UART_SetConfig+0x4e4>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	095b      	lsrs	r3, r3, #5
 8003712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003716:	441c      	add	r4, r3
 8003718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800371c:	2200      	movs	r2, #0
 800371e:	673b      	str	r3, [r7, #112]	; 0x70
 8003720:	677a      	str	r2, [r7, #116]	; 0x74
 8003722:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003726:	4642      	mov	r2, r8
 8003728:	464b      	mov	r3, r9
 800372a:	1891      	adds	r1, r2, r2
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	415b      	adcs	r3, r3
 8003730:	60fb      	str	r3, [r7, #12]
 8003732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003736:	4641      	mov	r1, r8
 8003738:	1851      	adds	r1, r2, r1
 800373a:	6039      	str	r1, [r7, #0]
 800373c:	4649      	mov	r1, r9
 800373e:	414b      	adcs	r3, r1
 8003740:	607b      	str	r3, [r7, #4]
 8003742:	f04f 0200 	mov.w	r2, #0
 8003746:	f04f 0300 	mov.w	r3, #0
 800374a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800374e:	4659      	mov	r1, fp
 8003750:	00cb      	lsls	r3, r1, #3
 8003752:	4651      	mov	r1, sl
 8003754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003758:	4651      	mov	r1, sl
 800375a:	00ca      	lsls	r2, r1, #3
 800375c:	4610      	mov	r0, r2
 800375e:	4619      	mov	r1, r3
 8003760:	4603      	mov	r3, r0
 8003762:	4642      	mov	r2, r8
 8003764:	189b      	adds	r3, r3, r2
 8003766:	66bb      	str	r3, [r7, #104]	; 0x68
 8003768:	464b      	mov	r3, r9
 800376a:	460a      	mov	r2, r1
 800376c:	eb42 0303 	adc.w	r3, r2, r3
 8003770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	663b      	str	r3, [r7, #96]	; 0x60
 800377c:	667a      	str	r2, [r7, #100]	; 0x64
 800377e:	f04f 0200 	mov.w	r2, #0
 8003782:	f04f 0300 	mov.w	r3, #0
 8003786:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800378a:	4649      	mov	r1, r9
 800378c:	008b      	lsls	r3, r1, #2
 800378e:	4641      	mov	r1, r8
 8003790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003794:	4641      	mov	r1, r8
 8003796:	008a      	lsls	r2, r1, #2
 8003798:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800379c:	f7fc fd26 	bl	80001ec <__aeabi_uldivmod>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <UART_SetConfig+0x4e4>)
 80037a6:	fba3 1302 	umull	r1, r3, r3, r2
 80037aa:	095b      	lsrs	r3, r3, #5
 80037ac:	2164      	movs	r1, #100	; 0x64
 80037ae:	fb01 f303 	mul.w	r3, r1, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	3332      	adds	r3, #50	; 0x32
 80037b8:	4a08      	ldr	r2, [pc, #32]	; (80037dc <UART_SetConfig+0x4e4>)
 80037ba:	fba2 2303 	umull	r2, r3, r2, r3
 80037be:	095b      	lsrs	r3, r3, #5
 80037c0:	f003 020f 	and.w	r2, r3, #15
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4422      	add	r2, r4
 80037cc:	609a      	str	r2, [r3, #8]
}
 80037ce:	bf00      	nop
 80037d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80037d4:	46bd      	mov	sp, r7
 80037d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037da:	bf00      	nop
 80037dc:	51eb851f 	.word	0x51eb851f

080037e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037e0:	b084      	sub	sp, #16
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	f107 001c 	add.w	r0, r7, #28
 80037ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d122      	bne.n	800383e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800380c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 faa2 	bl	8003d7c <USB_CoreReset>
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]
 800383c:	e01a      	b.n	8003874 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa96 	bl	8003d7c <USB_CoreReset>
 8003850:	4603      	mov	r3, r0
 8003852:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003856:	2b00      	cmp	r3, #0
 8003858:	d106      	bne.n	8003868 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	639a      	str	r2, [r3, #56]	; 0x38
 8003866:	e005      	b.n	8003874 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003876:	2b01      	cmp	r3, #1
 8003878:	d10b      	bne.n	8003892 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f043 0206 	orr.w	r2, r3, #6
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f043 0220 	orr.w	r2, r3, #32
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800389e:	b004      	add	sp, #16
 80038a0:	4770      	bx	lr

080038a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0201 	bic.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d115      	bne.n	8003912 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038f2:	2001      	movs	r0, #1
 80038f4:	f7fd fa84 	bl	8000e00 <HAL_Delay>
      ms++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa2e 	bl	8003d60 <USB_GetMode>
 8003904:	4603      	mov	r3, r0
 8003906:	2b01      	cmp	r3, #1
 8003908:	d01e      	beq.n	8003948 <USB_SetCurrentMode+0x84>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b31      	cmp	r3, #49	; 0x31
 800390e:	d9f0      	bls.n	80038f2 <USB_SetCurrentMode+0x2e>
 8003910:	e01a      	b.n	8003948 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d115      	bne.n	8003944 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003924:	2001      	movs	r0, #1
 8003926:	f7fd fa6b 	bl	8000e00 <HAL_Delay>
      ms++;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	3301      	adds	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fa15 	bl	8003d60 <USB_GetMode>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <USB_SetCurrentMode+0x84>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b31      	cmp	r3, #49	; 0x31
 8003940:	d9f0      	bls.n	8003924 <USB_SetCurrentMode+0x60>
 8003942:	e001      	b.n	8003948 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e005      	b.n	8003954 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b32      	cmp	r3, #50	; 0x32
 800394c:	d101      	bne.n	8003952 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800395c:	b084      	sub	sp, #16
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800396a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	e009      	b.n	8003990 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	3340      	adds	r3, #64	; 0x40
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	2200      	movs	r2, #0
 8003988:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	3301      	adds	r3, #1
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	2b0e      	cmp	r3, #14
 8003994:	d9f2      	bls.n	800397c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11c      	bne.n	80039d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039aa:	f043 0302 	orr.w	r3, r3, #2
 80039ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	639a      	str	r2, [r3, #56]	; 0x38
 80039d4:	e00b      	b.n	80039ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039f4:	461a      	mov	r2, r3
 80039f6:	2300      	movs	r3, #0
 80039f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	4619      	mov	r1, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	461a      	mov	r2, r3
 8003a0a:	680b      	ldr	r3, [r1, #0]
 8003a0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10c      	bne.n	8003a2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d104      	bne.n	8003a24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f965 	bl	8003cec <USB_SetDevSpeed>
 8003a22:	e008      	b.n	8003a36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a24:	2101      	movs	r1, #1
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f960 	bl	8003cec <USB_SetDevSpeed>
 8003a2c:	e003      	b.n	8003a36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a2e:	2103      	movs	r1, #3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f95b 	bl	8003cec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a36:	2110      	movs	r1, #16
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8f3 	bl	8003c24 <USB_FlushTxFifo>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f91f 	bl	8003c8c <USB_FlushRxFifo>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d001      	beq.n	8003a58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	461a      	mov	r2, r3
 8003a60:	2300      	movs	r3, #0
 8003a62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	461a      	mov	r2, r3
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e043      	b.n	8003b0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a98:	d118      	bne.n	8003acc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10a      	bne.n	8003ab6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aac:	461a      	mov	r2, r3
 8003aae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	e013      	b.n	8003ade <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	e008      	b.n	8003ade <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	015a      	lsls	r2, r3, #5
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ad8:	461a      	mov	r2, r3
 8003ada:	2300      	movs	r3, #0
 8003adc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003afc:	461a      	mov	r2, r3
 8003afe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3301      	adds	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d3b7      	bcc.n	8003a82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	e043      	b.n	8003ba0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b2e:	d118      	bne.n	8003b62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e013      	b.n	8003b74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	e008      	b.n	8003b74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	015a      	lsls	r2, r3, #5
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4413      	add	r3, r2
 8003b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b92:	461a      	mov	r2, r3
 8003b94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d3b7      	bcc.n	8003b18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d105      	bne.n	8003bdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	f043 0210 	orr.w	r2, r3, #16
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	699a      	ldr	r2, [r3, #24]
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <USB_DevInit+0x2c4>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003be8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d005      	beq.n	8003bfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f043 0208 	orr.w	r2, r3, #8
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d107      	bne.n	8003c10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c08:	f043 0304 	orr.w	r3, r3, #4
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3718      	adds	r7, #24
 8003c16:	46bd      	mov	sp, r7
 8003c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c1c:	b004      	add	sp, #16
 8003c1e:	4770      	bx	lr
 8003c20:	803c3800 	.word	0x803c3800

08003c24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b085      	sub	sp, #20
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4a13      	ldr	r2, [pc, #76]	; (8003c88 <USB_FlushTxFifo+0x64>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d901      	bls.n	8003c44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e01b      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	daf2      	bge.n	8003c32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	019b      	lsls	r3, r3, #6
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3301      	adds	r3, #1
 8003c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <USB_FlushTxFifo+0x64>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d901      	bls.n	8003c6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e006      	b.n	8003c7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	f003 0320 	and.w	r3, r3, #32
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d0f0      	beq.n	8003c5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	00030d40 	.word	0x00030d40

08003c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a11      	ldr	r2, [pc, #68]	; (8003ce8 <USB_FlushRxFifo+0x5c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e018      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	daf2      	bge.n	8003c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2210      	movs	r2, #16
 8003cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a08      	ldr	r2, [pc, #32]	; (8003ce8 <USB_FlushRxFifo+0x5c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d901      	bls.n	8003cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0310 	and.w	r3, r3, #16
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d0f0      	beq.n	8003cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	00030d40 	.word	0x00030d40

08003cec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	68f9      	ldr	r1, [r7, #12]
 8003d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b085      	sub	sp, #20
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003d38:	f023 0303 	bic.w	r3, r3, #3
 8003d3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4c:	f043 0302 	orr.w	r3, r3, #2
 8003d50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f003 0301 	and.w	r3, r3, #1
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	370c      	adds	r7, #12
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b085      	sub	sp, #20
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4a13      	ldr	r2, [pc, #76]	; (8003de0 <USB_CoreReset+0x64>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d901      	bls.n	8003d9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e01b      	b.n	8003dd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	daf2      	bge.n	8003d88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <USB_CoreReset+0x64>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d901      	bls.n	8003dc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e006      	b.n	8003dd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d0f0      	beq.n	8003db2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	00030d40 	.word	0x00030d40

08003de4 <__libc_init_array>:
 8003de4:	b570      	push	{r4, r5, r6, lr}
 8003de6:	4d0d      	ldr	r5, [pc, #52]	; (8003e1c <__libc_init_array+0x38>)
 8003de8:	4c0d      	ldr	r4, [pc, #52]	; (8003e20 <__libc_init_array+0x3c>)
 8003dea:	1b64      	subs	r4, r4, r5
 8003dec:	10a4      	asrs	r4, r4, #2
 8003dee:	2600      	movs	r6, #0
 8003df0:	42a6      	cmp	r6, r4
 8003df2:	d109      	bne.n	8003e08 <__libc_init_array+0x24>
 8003df4:	4d0b      	ldr	r5, [pc, #44]	; (8003e24 <__libc_init_array+0x40>)
 8003df6:	4c0c      	ldr	r4, [pc, #48]	; (8003e28 <__libc_init_array+0x44>)
 8003df8:	f000 f820 	bl	8003e3c <_init>
 8003dfc:	1b64      	subs	r4, r4, r5
 8003dfe:	10a4      	asrs	r4, r4, #2
 8003e00:	2600      	movs	r6, #0
 8003e02:	42a6      	cmp	r6, r4
 8003e04:	d105      	bne.n	8003e12 <__libc_init_array+0x2e>
 8003e06:	bd70      	pop	{r4, r5, r6, pc}
 8003e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e0c:	4798      	blx	r3
 8003e0e:	3601      	adds	r6, #1
 8003e10:	e7ee      	b.n	8003df0 <__libc_init_array+0xc>
 8003e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e16:	4798      	blx	r3
 8003e18:	3601      	adds	r6, #1
 8003e1a:	e7f2      	b.n	8003e02 <__libc_init_array+0x1e>
 8003e1c:	08003e74 	.word	0x08003e74
 8003e20:	08003e74 	.word	0x08003e74
 8003e24:	08003e74 	.word	0x08003e74
 8003e28:	08003e78 	.word	0x08003e78

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <_init>:
 8003e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3e:	bf00      	nop
 8003e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e42:	bc08      	pop	{r3}
 8003e44:	469e      	mov	lr, r3
 8003e46:	4770      	bx	lr

08003e48 <_fini>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr
