
FreeRTOS_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002698  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002878  08002878  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002878  08002878  00012878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002880  08002880  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002880  08002880  00012880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002884  08002884  00012884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002888  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d84  20000010  08002898  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d94  08002898  00022d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bbe4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dac  00000000  00000000  0002bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002d9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b28  00000000  00000000  0002e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016188  00000000  00000000  0002f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce0f  00000000  00000000  00045290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009125e  00000000  00000000  0005209f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e32fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003198  00000000  00000000  000e3350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002820 	.word	0x08002820

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08002820 	.word	0x08002820

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ea:	f000 f9ab 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ee:	f000 f841 	bl	8000574 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(task1_handler,"Task-1",200,"FROM TASK-1",2,&task1_handle);
 80004f2:	f107 0308 	add.w	r3, r7, #8
 80004f6:	9301      	str	r3, [sp, #4]
 80004f8:	2302      	movs	r3, #2
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	4b17      	ldr	r3, [pc, #92]	; (800055c <main+0x78>)
 80004fe:	22c8      	movs	r2, #200	; 0xc8
 8000500:	4917      	ldr	r1, [pc, #92]	; (8000560 <main+0x7c>)
 8000502:	4818      	ldr	r0, [pc, #96]	; (8000564 <main+0x80>)
 8000504:	f001 f9e5 	bl	80018d2 <xTaskCreate>
 8000508:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d00a      	beq.n	8000526 <main+0x42>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000514:	f383 8811 	msr	BASEPRI, r3
 8000518:	f3bf 8f6f 	isb	sy
 800051c:	f3bf 8f4f 	dsb	sy
 8000520:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000522:	bf00      	nop
 8000524:	e7fe      	b.n	8000524 <main+0x40>

  status = xTaskCreate(task2_handler,"Task-2",200,"FROM TASK-2",2,&task2_handle);
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2302      	movs	r3, #2
 800052c:	9300      	str	r3, [sp, #0]
 800052e:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <main+0x84>)
 8000530:	22c8      	movs	r2, #200	; 0xc8
 8000532:	490e      	ldr	r1, [pc, #56]	; (800056c <main+0x88>)
 8000534:	480e      	ldr	r0, [pc, #56]	; (8000570 <main+0x8c>)
 8000536:	f001 f9cc 	bl	80018d2 <xTaskCreate>
 800053a:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d00a      	beq.n	8000558 <main+0x74>
        __asm volatile
 8000542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000546:	f383 8811 	msr	BASEPRI, r3
 800054a:	f3bf 8f6f 	isb	sy
 800054e:	f3bf 8f4f 	dsb	sy
 8000552:	60fb      	str	r3, [r7, #12]
    }
 8000554:	bf00      	nop
 8000556:	e7fe      	b.n	8000556 <main+0x72>

  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x74>
 800055a:	bf00      	nop
 800055c:	08002838 	.word	0x08002838
 8000560:	08002844 	.word	0x08002844
 8000564:	08000635 	.word	0x08000635
 8000568:	0800284c 	.word	0x0800284c
 800056c:	08002858 	.word	0x08002858
 8000570:	08000649 	.word	0x08000649

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 f944 	bl	8002810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <SystemClock_Config+0xb8>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <SystemClock_Config+0xb8>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b20      	ldr	r3, [pc, #128]	; (800062c <SystemClock_Config+0xb8>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <SystemClock_Config+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c0:	4a1b      	ldr	r2, [pc, #108]	; (8000630 <SystemClock_Config+0xbc>)
 80005c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b19      	ldr	r3, [pc, #100]	; (8000630 <SystemClock_Config+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005e0:	2300      	movs	r3, #0
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fa4f 	bl	8000a8c <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f4:	f000 f844 	bl	8000680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005fc:	2300      	movs	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000608:	2300      	movs	r3, #0
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f000 fcb2 	bl	8000f7c <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061e:	f000 f82f 	bl	8000680 <Error_Handler>
  }
}
 8000622:	bf00      	nop
 8000624:	3750      	adds	r7, #80	; 0x50
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]

}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <task2_handler>:

static void task2_handler(void* parameters){
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]

}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d101      	bne.n	8000672 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800066e:	f000 f90b 	bl	8000888 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40000800 	.word	0x40000800

08000680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000684:	b672      	cpsid	i
}
 8000686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000688:	e7fe      	b.n	8000688 <Error_Handler+0x8>
	...

0800068c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <HAL_MspInit+0x4c>)
 8000698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800069a:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <HAL_MspInit+0x4c>)
 800069c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a0:	6453      	str	r3, [r2, #68]	; 0x44
 80006a2:	4b0d      	ldr	r3, [pc, #52]	; (80006d8 <HAL_MspInit+0x4c>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <HAL_MspInit+0x4c>)
 80006b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006bc:	6413      	str	r3, [r2, #64]	; 0x40
 80006be:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <HAL_MspInit+0x4c>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800

080006dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	; 0x30
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	6879      	ldr	r1, [r7, #4]
 80006f0:	201e      	movs	r0, #30
 80006f2:	f000 f9a1 	bl	8000a38 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006f6:	201e      	movs	r0, #30
 80006f8:	f000 f9ba 	bl	8000a70 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_InitTick+0xa0>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a1d      	ldr	r2, [pc, #116]	; (800077c <HAL_InitTick+0xa0>)
 8000706:	f043 0304 	orr.w	r3, r3, #4
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_InitTick+0xa0>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000718:	f107 0210 	add.w	r2, r7, #16
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fdf6 	bl	8001314 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000728:	f000 fde0 	bl	80012ec <HAL_RCC_GetPCLK1Freq>
 800072c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800072e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000730:	4a13      	ldr	r2, [pc, #76]	; (8000780 <HAL_InitTick+0xa4>)
 8000732:	fba2 2303 	umull	r2, r3, r2, r3
 8000736:	0c9b      	lsrs	r3, r3, #18
 8000738:	3b01      	subs	r3, #1
 800073a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800073c:	4b11      	ldr	r3, [pc, #68]	; (8000784 <HAL_InitTick+0xa8>)
 800073e:	4a12      	ldr	r2, [pc, #72]	; (8000788 <HAL_InitTick+0xac>)
 8000740:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000742:	4b10      	ldr	r3, [pc, #64]	; (8000784 <HAL_InitTick+0xa8>)
 8000744:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000748:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <HAL_InitTick+0xa8>)
 800074c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800074e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <HAL_InitTick+0xa8>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <HAL_InitTick+0xa8>)
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800075c:	4809      	ldr	r0, [pc, #36]	; (8000784 <HAL_InitTick+0xa8>)
 800075e:	f000 fe0b 	bl	8001378 <HAL_TIM_Base_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d104      	bne.n	8000772 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000768:	4806      	ldr	r0, [pc, #24]	; (8000784 <HAL_InitTick+0xa8>)
 800076a:	f000 fe5f 	bl	800142c <HAL_TIM_Base_Start_IT>
 800076e:	4603      	mov	r3, r0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	4618      	mov	r0, r3
 8000776:	3730      	adds	r7, #48	; 0x30
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	431bde83 	.word	0x431bde83
 8000784:	2000002c 	.word	0x2000002c
 8000788:	40000800 	.word	0x40000800

0800078c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <NMI_Handler+0x4>

08000792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000796:	e7fe      	b.n	8000796 <HardFault_Handler+0x4>

08000798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079c:	e7fe      	b.n	800079c <MemManage_Handler+0x4>

0800079e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <BusFault_Handler+0x4>

080007a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <UsageFault_Handler+0x4>

080007aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <TIM4_IRQHandler+0x10>)
 80007be:	f000 fe97 	bl	80014f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	2000002c 	.word	0x2000002c

080007cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007f6:	490e      	ldr	r1, [pc, #56]	; (8000830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0b      	ldr	r2, [pc, #44]	; (8000838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800080c:	4c0b      	ldr	r4, [pc, #44]	; (800083c <LoopFillZerobss+0x26>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800081a:	f7ff ffd7 	bl	80007cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081e:	f001 ffd3 	bl	80027c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000822:	f7ff fe5f 	bl	80004e4 <main>
  bx  lr    
 8000826:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000828:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000834:	08002888 	.word	0x08002888
  ldr r2, =_sbss
 8000838:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800083c:	20012d94 	.word	0x20012d94

08000840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC_IRQHandler>
	...

08000844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_Init+0x40>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a0d      	ldr	r2, [pc, #52]	; (8000884 <HAL_Init+0x40>)
 800084e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <HAL_Init+0x40>)
 800085a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800085e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <HAL_Init+0x40>)
 8000866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800086a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800086c:	2003      	movs	r0, #3
 800086e:	f000 f8d8 	bl	8000a22 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000872:	200f      	movs	r0, #15
 8000874:	f7ff ff32 	bl	80006dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000878:	f7ff ff08 	bl	800068c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023c00 	.word	0x40023c00

08000888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <HAL_IncTick+0x20>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_IncTick+0x24>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <HAL_IncTick+0x24>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000008 	.word	0x20000008
 80008ac:	20000074 	.word	0x20000074

080008b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <HAL_GetTick+0x14>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	20000074 	.word	0x20000074

080008c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	f003 0307 	and.w	r3, r3, #7
 80008d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d8:	4b0c      	ldr	r3, [pc, #48]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fa:	4a04      	ldr	r2, [pc, #16]	; (800090c <__NVIC_SetPriorityGrouping+0x44>)
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	60d3      	str	r3, [r2, #12]
}
 8000900:	bf00      	nop
 8000902:	3714      	adds	r7, #20
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000914:	4b04      	ldr	r3, [pc, #16]	; (8000928 <__NVIC_GetPriorityGrouping+0x18>)
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	0a1b      	lsrs	r3, r3, #8
 800091a:	f003 0307 	and.w	r3, r3, #7
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	2b00      	cmp	r3, #0
 800093c:	db0b      	blt.n	8000956 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	f003 021f 	and.w	r2, r3, #31
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <__NVIC_EnableIRQ+0x38>)
 8000946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800094a:	095b      	lsrs	r3, r3, #5
 800094c:	2001      	movs	r0, #1
 800094e:	fa00 f202 	lsl.w	r2, r0, r2
 8000952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	e000e100 	.word	0xe000e100

08000968 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000978:	2b00      	cmp	r3, #0
 800097a:	db0a      	blt.n	8000992 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	b2da      	uxtb	r2, r3
 8000980:	490c      	ldr	r1, [pc, #48]	; (80009b4 <__NVIC_SetPriority+0x4c>)
 8000982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000986:	0112      	lsls	r2, r2, #4
 8000988:	b2d2      	uxtb	r2, r2
 800098a:	440b      	add	r3, r1
 800098c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000990:	e00a      	b.n	80009a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4908      	ldr	r1, [pc, #32]	; (80009b8 <__NVIC_SetPriority+0x50>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	f003 030f 	and.w	r3, r3, #15
 800099e:	3b04      	subs	r3, #4
 80009a0:	0112      	lsls	r2, r2, #4
 80009a2:	b2d2      	uxtb	r2, r2
 80009a4:	440b      	add	r3, r1
 80009a6:	761a      	strb	r2, [r3, #24]
}
 80009a8:	bf00      	nop
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	e000e100 	.word	0xe000e100
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009bc:	b480      	push	{r7}
 80009be:	b089      	sub	sp, #36	; 0x24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f1c3 0307 	rsb	r3, r3, #7
 80009d6:	2b04      	cmp	r3, #4
 80009d8:	bf28      	it	cs
 80009da:	2304      	movcs	r3, #4
 80009dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	3304      	adds	r3, #4
 80009e2:	2b06      	cmp	r3, #6
 80009e4:	d902      	bls.n	80009ec <NVIC_EncodePriority+0x30>
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	3b03      	subs	r3, #3
 80009ea:	e000      	b.n	80009ee <NVIC_EncodePriority+0x32>
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	43da      	mvns	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	401a      	ands	r2, r3
 8000a00:	697b      	ldr	r3, [r7, #20]
 8000a02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a04:	f04f 31ff 	mov.w	r1, #4294967295
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0e:	43d9      	mvns	r1, r3
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	4313      	orrs	r3, r2
         );
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3724      	adds	r7, #36	; 0x24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2a:	6878      	ldr	r0, [r7, #4]
 8000a2c:	f7ff ff4c 	bl	80008c8 <__NVIC_SetPriorityGrouping>
}
 8000a30:	bf00      	nop
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4a:	f7ff ff61 	bl	8000910 <__NVIC_GetPriorityGrouping>
 8000a4e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a50:	687a      	ldr	r2, [r7, #4]
 8000a52:	68b9      	ldr	r1, [r7, #8]
 8000a54:	6978      	ldr	r0, [r7, #20]
 8000a56:	f7ff ffb1 	bl	80009bc <NVIC_EncodePriority>
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff80 	bl	8000968 <__NVIC_SetPriority>
}
 8000a68:	bf00      	nop
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff54 	bl	800092c <__NVIC_EnableIRQ>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b086      	sub	sp, #24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e267      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d075      	beq.n	8000b96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000aaa:	4b88      	ldr	r3, [pc, #544]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d00c      	beq.n	8000ad0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ab6:	4b85      	ldr	r3, [pc, #532]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d112      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ac2:	4b82      	ldr	r3, [pc, #520]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000aca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ace:	d10b      	bne.n	8000ae8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad0:	4b7e      	ldr	r3, [pc, #504]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d05b      	beq.n	8000b94 <HAL_RCC_OscConfig+0x108>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d157      	bne.n	8000b94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e242      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af0:	d106      	bne.n	8000b00 <HAL_RCC_OscConfig+0x74>
 8000af2:	4b76      	ldr	r3, [pc, #472]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a75      	ldr	r2, [pc, #468]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	e01d      	b.n	8000b3c <HAL_RCC_OscConfig+0xb0>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b08:	d10c      	bne.n	8000b24 <HAL_RCC_OscConfig+0x98>
 8000b0a:	4b70      	ldr	r3, [pc, #448]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a6f      	ldr	r2, [pc, #444]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	4b6d      	ldr	r3, [pc, #436]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a6c      	ldr	r2, [pc, #432]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b20:	6013      	str	r3, [r2, #0]
 8000b22:	e00b      	b.n	8000b3c <HAL_RCC_OscConfig+0xb0>
 8000b24:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a68      	ldr	r2, [pc, #416]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a65      	ldr	r2, [pc, #404]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d013      	beq.n	8000b6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b44:	f7ff feb4 	bl	80008b0 <HAL_GetTick>
 8000b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b4a:	e008      	b.n	8000b5e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b4c:	f7ff feb0 	bl	80008b0 <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	693b      	ldr	r3, [r7, #16]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	2b64      	cmp	r3, #100	; 0x64
 8000b58:	d901      	bls.n	8000b5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	e207      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b5e:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f0      	beq.n	8000b4c <HAL_RCC_OscConfig+0xc0>
 8000b6a:	e014      	b.n	8000b96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fea0 	bl	80008b0 <HAL_GetTick>
 8000b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b72:	e008      	b.n	8000b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b74:	f7ff fe9c 	bl	80008b0 <HAL_GetTick>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	1ad3      	subs	r3, r2, r3
 8000b7e:	2b64      	cmp	r3, #100	; 0x64
 8000b80:	d901      	bls.n	8000b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000b82:	2303      	movs	r3, #3
 8000b84:	e1f3      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b86:	4b51      	ldr	r3, [pc, #324]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f0      	bne.n	8000b74 <HAL_RCC_OscConfig+0xe8>
 8000b92:	e000      	b.n	8000b96 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d063      	beq.n	8000c6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ba2:	4b4a      	ldr	r3, [pc, #296]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 030c 	and.w	r3, r3, #12
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d00b      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bae:	4b47      	ldr	r3, [pc, #284]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bb6:	2b08      	cmp	r3, #8
 8000bb8:	d11c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bba:	4b44      	ldr	r3, [pc, #272]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d116      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc6:	4b41      	ldr	r3, [pc, #260]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d005      	beq.n	8000bde <HAL_RCC_OscConfig+0x152>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d001      	beq.n	8000bde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e1c7      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bde:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	4937      	ldr	r1, [pc, #220]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf2:	e03a      	b.n	8000c6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d020      	beq.n	8000c3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bfc:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <HAL_RCC_OscConfig+0x244>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c02:	f7ff fe55 	bl	80008b0 <HAL_GetTick>
 8000c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c08:	e008      	b.n	8000c1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c0a:	f7ff fe51 	bl	80008b0 <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d901      	bls.n	8000c1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	e1a8      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0302 	and.w	r3, r3, #2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f0      	beq.n	8000c0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c28:	4b28      	ldr	r3, [pc, #160]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	691b      	ldr	r3, [r3, #16]
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	4925      	ldr	r1, [pc, #148]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	600b      	str	r3, [r1, #0]
 8000c3c:	e015      	b.n	8000c6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c3e:	4b24      	ldr	r3, [pc, #144]	; (8000cd0 <HAL_RCC_OscConfig+0x244>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c44:	f7ff fe34 	bl	80008b0 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c4c:	f7ff fe30 	bl	80008b0 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e187      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0302 	and.w	r3, r3, #2
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d036      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d016      	beq.n	8000cac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <HAL_RCC_OscConfig+0x248>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c84:	f7ff fe14 	bl	80008b0 <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fe10 	bl	80008b0 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e167      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_RCC_OscConfig+0x240>)
 8000ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d0f0      	beq.n	8000c8c <HAL_RCC_OscConfig+0x200>
 8000caa:	e01b      	b.n	8000ce4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cac:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_RCC_OscConfig+0x248>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cb2:	f7ff fdfd 	bl	80008b0 <HAL_GetTick>
 8000cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cb8:	e00e      	b.n	8000cd8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000cba:	f7ff fdf9 	bl	80008b0 <HAL_GetTick>
 8000cbe:	4602      	mov	r2, r0
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d907      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	e150      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	42470000 	.word	0x42470000
 8000cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cd8:	4b88      	ldr	r3, [pc, #544]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1ea      	bne.n	8000cba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0304 	and.w	r3, r3, #4
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8097 	beq.w	8000e20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000cf6:	4b81      	ldr	r3, [pc, #516]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d10f      	bne.n	8000d22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	4b7d      	ldr	r3, [pc, #500]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	4a7c      	ldr	r2, [pc, #496]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	4b7a      	ldr	r3, [pc, #488]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d22:	4b77      	ldr	r3, [pc, #476]	; (8000f00 <HAL_RCC_OscConfig+0x474>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d118      	bne.n	8000d60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d2e:	4b74      	ldr	r3, [pc, #464]	; (8000f00 <HAL_RCC_OscConfig+0x474>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a73      	ldr	r2, [pc, #460]	; (8000f00 <HAL_RCC_OscConfig+0x474>)
 8000d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d3a:	f7ff fdb9 	bl	80008b0 <HAL_GetTick>
 8000d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d40:	e008      	b.n	8000d54 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d42:	f7ff fdb5 	bl	80008b0 <HAL_GetTick>
 8000d46:	4602      	mov	r2, r0
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	1ad3      	subs	r3, r2, r3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d901      	bls.n	8000d54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000d50:	2303      	movs	r3, #3
 8000d52:	e10c      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d54:	4b6a      	ldr	r3, [pc, #424]	; (8000f00 <HAL_RCC_OscConfig+0x474>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d0f0      	beq.n	8000d42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d106      	bne.n	8000d76 <HAL_RCC_OscConfig+0x2ea>
 8000d68:	4b64      	ldr	r3, [pc, #400]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d6c:	4a63      	ldr	r2, [pc, #396]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6713      	str	r3, [r2, #112]	; 0x70
 8000d74:	e01c      	b.n	8000db0 <HAL_RCC_OscConfig+0x324>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	d10c      	bne.n	8000d98 <HAL_RCC_OscConfig+0x30c>
 8000d7e:	4b5f      	ldr	r3, [pc, #380]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d82:	4a5e      	ldr	r2, [pc, #376]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	6713      	str	r3, [r2, #112]	; 0x70
 8000d8a:	4b5c      	ldr	r3, [pc, #368]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d8e:	4a5b      	ldr	r2, [pc, #364]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6713      	str	r3, [r2, #112]	; 0x70
 8000d96:	e00b      	b.n	8000db0 <HAL_RCC_OscConfig+0x324>
 8000d98:	4b58      	ldr	r3, [pc, #352]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d9c:	4a57      	ldr	r2, [pc, #348]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000d9e:	f023 0301 	bic.w	r3, r3, #1
 8000da2:	6713      	str	r3, [r2, #112]	; 0x70
 8000da4:	4b55      	ldr	r3, [pc, #340]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000da8:	4a54      	ldr	r2, [pc, #336]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000daa:	f023 0304 	bic.w	r3, r3, #4
 8000dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d015      	beq.n	8000de4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000db8:	f7ff fd7a 	bl	80008b0 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dbe:	e00a      	b.n	8000dd6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dc0:	f7ff fd76 	bl	80008b0 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d901      	bls.n	8000dd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	e0cb      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dd6:	4b49      	ldr	r3, [pc, #292]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0ee      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x334>
 8000de2:	e014      	b.n	8000e0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de4:	f7ff fd64 	bl	80008b0 <HAL_GetTick>
 8000de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000dea:	e00a      	b.n	8000e02 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000dec:	f7ff fd60 	bl	80008b0 <HAL_GetTick>
 8000df0:	4602      	mov	r2, r0
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e0b5      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1ee      	bne.n	8000dec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e0e:	7dfb      	ldrb	r3, [r7, #23]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d105      	bne.n	8000e20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a38      	ldr	r2, [pc, #224]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f000 80a1 	beq.w	8000f6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d05c      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d141      	bne.n	8000ec2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e3e:	4b31      	ldr	r3, [pc, #196]	; (8000f04 <HAL_RCC_OscConfig+0x478>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e44:	f7ff fd34 	bl	80008b0 <HAL_GetTick>
 8000e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e4a:	e008      	b.n	8000e5e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e4c:	f7ff fd30 	bl	80008b0 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b02      	cmp	r3, #2
 8000e58:	d901      	bls.n	8000e5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000e5a:	2303      	movs	r3, #3
 8000e5c:	e087      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f0      	bne.n	8000e4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69da      	ldr	r2, [r3, #28]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	431a      	orrs	r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e80:	085b      	lsrs	r3, r3, #1
 8000e82:	3b01      	subs	r3, #1
 8000e84:	041b      	lsls	r3, r3, #16
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	061b      	lsls	r3, r3, #24
 8000e8e:	491b      	ldr	r1, [pc, #108]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000e90:	4313      	orrs	r3, r2
 8000e92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_RCC_OscConfig+0x478>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9a:	f7ff fd09 	bl	80008b0 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea2:	f7ff fd05 	bl	80008b0 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b02      	cmp	r3, #2
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e05c      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000eb4:	4b11      	ldr	r3, [pc, #68]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x416>
 8000ec0:	e054      	b.n	8000f6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <HAL_RCC_OscConfig+0x478>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fcf2 	bl	80008b0 <HAL_GetTick>
 8000ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ece:	e008      	b.n	8000ee2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ed0:	f7ff fcee 	bl	80008b0 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	2b02      	cmp	r3, #2
 8000edc:	d901      	bls.n	8000ee2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	e045      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_RCC_OscConfig+0x470>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d1f0      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x444>
 8000eee:	e03d      	b.n	8000f6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d107      	bne.n	8000f08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e038      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000
 8000f04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_RCC_OscConfig+0x4ec>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d028      	beq.n	8000f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d121      	bne.n	8000f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d11a      	bne.n	8000f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f38:	4013      	ands	r3, r2
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000f3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d111      	bne.n	8000f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f4e:	085b      	lsrs	r3, r3, #1
 8000f50:	3b01      	subs	r3, #1
 8000f52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d107      	bne.n	8000f68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d001      	beq.n	8000f6c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800

08000f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0cc      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0307 	and.w	r3, r3, #7
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d90c      	bls.n	8000fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9e:	4b65      	ldr	r3, [pc, #404]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d001      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0b8      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d020      	beq.n	8001006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe8:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a52      	ldr	r2, [pc, #328]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	494d      	ldr	r1, [pc, #308]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	4313      	orrs	r3, r2
 8001004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d044      	beq.n	800109c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b47      	ldr	r3, [pc, #284]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d119      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e07f      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001036:	2b03      	cmp	r3, #3
 8001038:	d107      	bne.n	800104a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e06f      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e067      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f023 0203 	bic.w	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4934      	ldr	r1, [pc, #208]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8001068:	4313      	orrs	r3, r2
 800106a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800106c:	f7ff fc20 	bl	80008b0 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001072:	e00a      	b.n	800108a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001074:	f7ff fc1c 	bl	80008b0 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e04f      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 020c 	and.w	r2, r3, #12
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	429a      	cmp	r2, r3
 800109a:	d1eb      	bne.n	8001074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 0307 	and.w	r3, r3, #7
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d20c      	bcs.n	80010c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e032      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4916      	ldr	r1, [pc, #88]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d009      	beq.n	8001102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	490e      	ldr	r1, [pc, #56]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001102:	f000 f821 	bl	8001148 <HAL_RCC_GetSysClockFreq>
 8001106:	4602      	mov	r2, r0
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	490a      	ldr	r1, [pc, #40]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	5ccb      	ldrb	r3, [r1, r3]
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_RCC_ClockConfig+0x1c8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fada 	bl	80006dc <HAL_InitTick>

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00
 8001138:	40023800 	.word	0x40023800
 800113c:	08002860 	.word	0x08002860
 8001140:	20000000 	.word	0x20000000
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800114c:	b090      	sub	sp, #64	; 0x40
 800114e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
 8001154:	2300      	movs	r3, #0
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001158:	2300      	movs	r3, #0
 800115a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001160:	4b59      	ldr	r3, [pc, #356]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 030c 	and.w	r3, r3, #12
 8001168:	2b08      	cmp	r3, #8
 800116a:	d00d      	beq.n	8001188 <HAL_RCC_GetSysClockFreq+0x40>
 800116c:	2b08      	cmp	r3, #8
 800116e:	f200 80a1 	bhi.w	80012b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d002      	beq.n	800117c <HAL_RCC_GetSysClockFreq+0x34>
 8001176:	2b04      	cmp	r3, #4
 8001178:	d003      	beq.n	8001182 <HAL_RCC_GetSysClockFreq+0x3a>
 800117a:	e09b      	b.n	80012b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_GetSysClockFreq+0x184>)
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001180:	e09b      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001182:	4b53      	ldr	r3, [pc, #332]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001186:	e098      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001188:	4b4f      	ldr	r3, [pc, #316]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001192:	4b4d      	ldr	r3, [pc, #308]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d028      	beq.n	80011f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800119e:	4b4a      	ldr	r3, [pc, #296]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	099b      	lsrs	r3, r3, #6
 80011a4:	2200      	movs	r2, #0
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	627a      	str	r2, [r7, #36]	; 0x24
 80011aa:	6a3b      	ldr	r3, [r7, #32]
 80011ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80011b0:	2100      	movs	r1, #0
 80011b2:	4b47      	ldr	r3, [pc, #284]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80011b4:	fb03 f201 	mul.w	r2, r3, r1
 80011b8:	2300      	movs	r3, #0
 80011ba:	fb00 f303 	mul.w	r3, r0, r3
 80011be:	4413      	add	r3, r2
 80011c0:	4a43      	ldr	r2, [pc, #268]	; (80012d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80011c2:	fba0 1202 	umull	r1, r2, r0, r2
 80011c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80011c8:	460a      	mov	r2, r1
 80011ca:	62ba      	str	r2, [r7, #40]	; 0x28
 80011cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011ce:	4413      	add	r3, r2
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d4:	2200      	movs	r2, #0
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	61fa      	str	r2, [r7, #28]
 80011da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011e2:	f7fe fffd 	bl	80001e0 <__aeabi_uldivmod>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4613      	mov	r3, r2
 80011ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ee:	e053      	b.n	8001298 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f0:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	099b      	lsrs	r3, r3, #6
 80011f6:	2200      	movs	r2, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	617a      	str	r2, [r7, #20]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001202:	f04f 0b00 	mov.w	fp, #0
 8001206:	4652      	mov	r2, sl
 8001208:	465b      	mov	r3, fp
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	f04f 0100 	mov.w	r1, #0
 8001212:	0159      	lsls	r1, r3, #5
 8001214:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001218:	0150      	lsls	r0, r2, #5
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	ebb2 080a 	subs.w	r8, r2, sl
 8001222:	eb63 090b 	sbc.w	r9, r3, fp
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001232:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001236:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800123a:	ebb2 0408 	subs.w	r4, r2, r8
 800123e:	eb63 0509 	sbc.w	r5, r3, r9
 8001242:	f04f 0200 	mov.w	r2, #0
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	00eb      	lsls	r3, r5, #3
 800124c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001250:	00e2      	lsls	r2, r4, #3
 8001252:	4614      	mov	r4, r2
 8001254:	461d      	mov	r5, r3
 8001256:	eb14 030a 	adds.w	r3, r4, sl
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	eb45 030b 	adc.w	r3, r5, fp
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800126e:	4629      	mov	r1, r5
 8001270:	028b      	lsls	r3, r1, #10
 8001272:	4621      	mov	r1, r4
 8001274:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001278:	4621      	mov	r1, r4
 800127a:	028a      	lsls	r2, r1, #10
 800127c:	4610      	mov	r0, r2
 800127e:	4619      	mov	r1, r3
 8001280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001282:	2200      	movs	r2, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	60fa      	str	r2, [r7, #12]
 8001288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800128c:	f7fe ffa8 	bl	80001e0 <__aeabi_uldivmod>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4613      	mov	r3, r2
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	0c1b      	lsrs	r3, r3, #16
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	3301      	adds	r3, #1
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80012a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80012aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012b2:	e002      	b.n	80012ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <HAL_RCC_GetSysClockFreq+0x184>)
 80012b6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80012b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3740      	adds	r7, #64	; 0x40
 80012c0:	46bd      	mov	sp, r7
 80012c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80012c6:	bf00      	nop
 80012c8:	40023800 	.word	0x40023800
 80012cc:	00f42400 	.word	0x00f42400
 80012d0:	017d7840 	.word	0x017d7840

080012d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80012d8:	4b03      	ldr	r3, [pc, #12]	; (80012e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80012da:	681b      	ldr	r3, [r3, #0]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000000 	.word	0x20000000

080012ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80012f0:	f7ff fff0 	bl	80012d4 <HAL_RCC_GetHCLKFreq>
 80012f4:	4602      	mov	r2, r0
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <HAL_RCC_GetPCLK1Freq+0x20>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	0a9b      	lsrs	r3, r3, #10
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	4903      	ldr	r1, [pc, #12]	; (8001310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001302:	5ccb      	ldrb	r3, [r1, r3]
 8001304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001308:	4618      	mov	r0, r3
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40023800 	.word	0x40023800
 8001310:	08002870 	.word	0x08002870

08001314 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	220f      	movs	r2, #15
 8001322:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 0203 	and.w	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001330:	4b0f      	ldr	r3, [pc, #60]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800133c:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001348:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_RCC_GetClockConfig+0x5c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_RCC_GetClockConfig+0x60>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0207 	and.w	r2, r3, #7
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e041      	b.n	800140e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d106      	bne.n	80013a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2200      	movs	r2, #0
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f000 f839 	bl	8001416 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3304      	adds	r3, #4
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f000 f9ca 	bl	8001750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2201      	movs	r2, #1
 80013e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2201      	movs	r2, #1
 80013e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2201      	movs	r2, #1
 80013f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2201      	movs	r2, #1
 8001400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2201      	movs	r2, #1
 8001408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b01      	cmp	r3, #1
 800143e:	d001      	beq.n	8001444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e044      	b.n	80014ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2202      	movs	r2, #2
 8001448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68da      	ldr	r2, [r3, #12]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0201 	orr.w	r2, r2, #1
 800145a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_TIM_Base_Start_IT+0xb0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d018      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x6c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800146e:	d013      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x6c>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a1a      	ldr	r2, [pc, #104]	; (80014e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d00e      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x6c>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d009      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x6c>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d004      	beq.n	8001498 <HAL_TIM_Base_Start_IT+0x6c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <HAL_TIM_Base_Start_IT+0xc0>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d111      	bne.n	80014bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d010      	beq.n	80014cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014ba:	e007      	b.n	80014cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0201 	orr.w	r2, r2, #1
 80014ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40010000 	.word	0x40010000
 80014e0:	40000400 	.word	0x40000400
 80014e4:	40000800 	.word	0x40000800
 80014e8:	40000c00 	.word	0x40000c00
 80014ec:	40014000 	.word	0x40014000

080014f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b02      	cmp	r3, #2
 8001504:	d122      	bne.n	800154c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b02      	cmp	r3, #2
 8001512:	d11b      	bne.n	800154c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f06f 0202 	mvn.w	r2, #2
 800151c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2201      	movs	r2, #1
 8001522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f8ee 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
 8001538:	e005      	b.n	8001546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f8e0 	bl	8001700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f8f1 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b04      	cmp	r3, #4
 8001558:	d122      	bne.n	80015a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b04      	cmp	r3, #4
 8001566:	d11b      	bne.n	80015a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f06f 0204 	mvn.w	r2, #4
 8001570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2202      	movs	r2, #2
 8001576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 f8c4 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
 800158c:	e005      	b.n	800159a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f8b6 	bl	8001700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f000 f8c7 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b08      	cmp	r3, #8
 80015ac:	d122      	bne.n	80015f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f003 0308 	and.w	r3, r3, #8
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d11b      	bne.n	80015f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0208 	mvn.w	r2, #8
 80015c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2204      	movs	r2, #4
 80015ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 f89a 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
 80015e0:	e005      	b.n	80015ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 f88c 	bl	8001700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f89d 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	2b10      	cmp	r3, #16
 8001600:	d122      	bne.n	8001648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f003 0310 	and.w	r3, r3, #16
 800160c:	2b10      	cmp	r3, #16
 800160e:	d11b      	bne.n	8001648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0210 	mvn.w	r2, #16
 8001618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2208      	movs	r2, #8
 800161e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f870 	bl	8001714 <HAL_TIM_IC_CaptureCallback>
 8001634:	e005      	b.n	8001642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f000 f862 	bl	8001700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 f873 	bl	8001728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d10e      	bne.n	8001674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b01      	cmp	r3, #1
 8001662:	d107      	bne.n	8001674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f06f 0201 	mvn.w	r2, #1
 800166c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7fe fff4 	bl	800065c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b80      	cmp	r3, #128	; 0x80
 8001680:	d10e      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800168c:	2b80      	cmp	r3, #128	; 0x80
 800168e:	d107      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f8e2 	bl	8001864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016aa:	2b40      	cmp	r3, #64	; 0x40
 80016ac:	d10e      	bne.n	80016cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b40      	cmp	r3, #64	; 0x40
 80016ba:	d107      	bne.n	80016cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f838 	bl	800173c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d10e      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b20      	cmp	r3, #32
 80016e6:	d107      	bne.n	80016f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f06f 0220 	mvn.w	r2, #32
 80016f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f8ac 	bl	8001850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001708:	bf00      	nop
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a34      	ldr	r2, [pc, #208]	; (8001834 <TIM_Base_SetConfig+0xe4>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d00f      	beq.n	8001788 <TIM_Base_SetConfig+0x38>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176e:	d00b      	beq.n	8001788 <TIM_Base_SetConfig+0x38>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a31      	ldr	r2, [pc, #196]	; (8001838 <TIM_Base_SetConfig+0xe8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <TIM_Base_SetConfig+0x38>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a30      	ldr	r2, [pc, #192]	; (800183c <TIM_Base_SetConfig+0xec>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d003      	beq.n	8001788 <TIM_Base_SetConfig+0x38>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4a2f      	ldr	r2, [pc, #188]	; (8001840 <TIM_Base_SetConfig+0xf0>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d108      	bne.n	800179a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800178e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	4313      	orrs	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a25      	ldr	r2, [pc, #148]	; (8001834 <TIM_Base_SetConfig+0xe4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d01b      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a8:	d017      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a22      	ldr	r2, [pc, #136]	; (8001838 <TIM_Base_SetConfig+0xe8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a21      	ldr	r2, [pc, #132]	; (800183c <TIM_Base_SetConfig+0xec>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d00f      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a20      	ldr	r2, [pc, #128]	; (8001840 <TIM_Base_SetConfig+0xf0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00b      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1f      	ldr	r2, [pc, #124]	; (8001844 <TIM_Base_SetConfig+0xf4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <TIM_Base_SetConfig+0xf8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d003      	beq.n	80017da <TIM_Base_SetConfig+0x8a>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	; (800184c <TIM_Base_SetConfig+0xfc>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d108      	bne.n	80017ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <TIM_Base_SetConfig+0xe4>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d103      	bne.n	8001820 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	615a      	str	r2, [r3, #20]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40010000 	.word	0x40010000
 8001838:	40000400 	.word	0x40000400
 800183c:	40000800 	.word	0x40000800
 8001840:	40000c00 	.word	0x40000c00
 8001844:	40014000 	.word	0x40014000
 8001848:	40014400 	.word	0x40014400
 800184c:	40014800 	.word	0x40014800

08001850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f103 0208 	add.w	r2, r3, #8
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f103 0208 	add.w	r2, r3, #8
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f103 0208 	add.w	r2, r3, #8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b08c      	sub	sp, #48	; 0x30
 80018d6:	af04      	add	r7, sp, #16
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	603b      	str	r3, [r7, #0]
 80018de:	4613      	mov	r3, r2
 80018e0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fd70 	bl	80023cc <pvPortMalloc>
 80018ec:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00e      	beq.n	8001912 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80018f4:	2058      	movs	r0, #88	; 0x58
 80018f6:	f000 fd69 	bl	80023cc <pvPortMalloc>
 80018fa:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d003      	beq.n	800190a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
 8001908:	e005      	b.n	8001916 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800190a:	6978      	ldr	r0, [r7, #20]
 800190c:	f000 fe3e 	bl	800258c <vPortFree>
 8001910:	e001      	b.n	8001916 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	2300      	movs	r3, #0
 8001920:	9303      	str	r3, [sp, #12]
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f000 f80e 	bl	8001954 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001938:	69f8      	ldr	r0, [r7, #28]
 800193a:	f000 f8af 	bl	8001a9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800193e:	2301      	movs	r3, #1
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	e002      	b.n	800194a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001944:	f04f 33ff 	mov.w	r3, #4294967295
 8001948:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800194a:	69bb      	ldr	r3, [r7, #24]
    }
 800194c:	4618      	mov	r0, r3
 800194e:	3720      	adds	r7, #32
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001964:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	461a      	mov	r2, r3
 800196c:	21a5      	movs	r1, #165	; 0xa5
 800196e:	f000 ff4f 	bl	8002810 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001974:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800197c:	3b01      	subs	r3, #1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	2b00      	cmp	r3, #0
 8001994:	d00a      	beq.n	80019ac <prvInitialiseNewTask+0x58>
        __asm volatile
 8001996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199a:	f383 8811 	msr	BASEPRI, r3
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f3bf 8f4f 	dsb	sy
 80019a6:	617b      	str	r3, [r7, #20]
    }
 80019a8:	bf00      	nop
 80019aa:	e7fe      	b.n	80019aa <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d01f      	beq.n	80019f2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e012      	b.n	80019de <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019b8:	68ba      	ldr	r2, [r7, #8]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	4413      	add	r3, r2
 80019be:	7819      	ldrb	r1, [r3, #0]
 80019c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	4413      	add	r3, r2
 80019c6:	3334      	adds	r3, #52	; 0x34
 80019c8:	460a      	mov	r2, r1
 80019ca:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80019cc:	68ba      	ldr	r2, [r7, #8]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	4413      	add	r3, r2
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d006      	beq.n	80019e6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	d9e9      	bls.n	80019b8 <prvInitialiseNewTask+0x64>
 80019e4:	e000      	b.n	80019e8 <prvInitialiseNewTask+0x94>
            {
                break;
 80019e6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80019f0:	e003      	b.n	80019fa <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80019f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d90a      	bls.n	8001a16 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8001a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a04:	f383 8811 	msr	BASEPRI, r3
 8001a08:	f3bf 8f6f 	isb	sy
 8001a0c:	f3bf 8f4f 	dsb	sy
 8001a10:	613b      	str	r3, [r7, #16]
    }
 8001a12:	bf00      	nop
 8001a14:	e7fe      	b.n	8001a14 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d901      	bls.n	8001a20 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a2a:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2e:	2200      	movs	r2, #0
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a34:	3304      	adds	r3, #4
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff3e 	bl	80018b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3e:	3318      	adds	r3, #24
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff39 	bl	80018b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4e:	f1c3 0205 	rsb	r2, r3, #5
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5a:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	3350      	adds	r3, #80	; 0x50
 8001a60:	2204      	movs	r2, #4
 8001a62:	2100      	movs	r1, #0
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 fed3 	bl	8002810 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	3354      	adds	r3, #84	; 0x54
 8001a6e:	2201      	movs	r2, #1
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fecc 	bl	8002810 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	68f9      	ldr	r1, [r7, #12]
 8001a7c:	69b8      	ldr	r0, [r7, #24]
 8001a7e:	f000 fb7b 	bl	8002178 <pxPortInitialiseStack>
 8001a82:	4602      	mov	r2, r0
 8001a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a86:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d002      	beq.n	8001a94 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a92:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001a94:	bf00      	nop
 8001a96:	3720      	adds	r7, #32
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001aa4:	f000 fbe0 	bl	8002268 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001aa8:	4b40      	ldr	r3, [pc, #256]	; (8001bac <prvAddNewTaskToReadyList+0x110>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	3301      	adds	r3, #1
 8001aae:	4a3f      	ldr	r2, [pc, #252]	; (8001bac <prvAddNewTaskToReadyList+0x110>)
 8001ab0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <prvAddNewTaskToReadyList+0x114>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001aba:	4a3d      	ldr	r2, [pc, #244]	; (8001bb0 <prvAddNewTaskToReadyList+0x114>)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ac0:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <prvAddNewTaskToReadyList+0x110>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d110      	bne.n	8001aea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001ac8:	f000 fafa 	bl	80020c0 <prvInitialiseTaskLists>
 8001acc:	e00d      	b.n	8001aea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <prvAddNewTaskToReadyList+0x118>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d109      	bne.n	8001aea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001ad6:	4b36      	ldr	r3, [pc, #216]	; (8001bb0 <prvAddNewTaskToReadyList+0x114>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d802      	bhi.n	8001aea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001ae4:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <prvAddNewTaskToReadyList+0x114>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001aea:	4b33      	ldr	r3, [pc, #204]	; (8001bb8 <prvAddNewTaskToReadyList+0x11c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	3301      	adds	r3, #1
 8001af0:	4a31      	ldr	r2, [pc, #196]	; (8001bb8 <prvAddNewTaskToReadyList+0x11c>)
 8001af2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <prvAddNewTaskToReadyList+0x11c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b00:	2201      	movs	r2, #1
 8001b02:	409a      	lsls	r2, r3
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <prvAddNewTaskToReadyList+0x120>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <prvAddNewTaskToReadyList+0x120>)
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b12:	492b      	ldr	r1, [pc, #172]	; (8001bc0 <prvAddNewTaskToReadyList+0x124>)
 8001b14:	4613      	mov	r3, r2
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	4413      	add	r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3304      	adds	r3, #4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	609a      	str	r2, [r3, #8]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	3204      	adds	r2, #4
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	1d1a      	adds	r2, r3, #4
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <prvAddNewTaskToReadyList+0x124>)
 8001b52:	441a      	add	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b5c:	4918      	ldr	r1, [pc, #96]	; (8001bc0 <prvAddNewTaskToReadyList+0x124>)
 8001b5e:	4613      	mov	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	1c59      	adds	r1, r3, #1
 8001b6c:	4814      	ldr	r0, [pc, #80]	; (8001bc0 <prvAddNewTaskToReadyList+0x124>)
 8001b6e:	4613      	mov	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4403      	add	r3, r0
 8001b78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001b7a:	f000 fba5 	bl	80022c8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <prvAddNewTaskToReadyList+0x118>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d00e      	beq.n	8001ba4 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b86:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <prvAddNewTaskToReadyList+0x114>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <prvAddNewTaskToReadyList+0x128>)
 8001b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f3bf 8f4f 	dsb	sy
 8001ba0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001ba4:	bf00      	nop
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000014c 	.word	0x2000014c
 8001bb0:	20000078 	.word	0x20000078
 8001bb4:	20000158 	.word	0x20000158
 8001bb8:	20000168 	.word	0x20000168
 8001bbc:	20000154 	.word	0x20000154
 8001bc0:	2000007c 	.word	0x2000007c
 8001bc4:	e000ed04 	.word	0xe000ed04

08001bc8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <vTaskSuspendAll+0x18>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a03      	ldr	r2, [pc, #12]	; (8001be0 <vTaskSuspendAll+0x18>)
 8001bd4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001bd6:	bf00      	nop
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	20000170 	.word	0x20000170

08001be4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <xTaskResumeAll+0x1d4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10a      	bne.n	8001c10 <xTaskResumeAll+0x2c>
        __asm volatile
 8001bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bfe:	f383 8811 	msr	BASEPRI, r3
 8001c02:	f3bf 8f6f 	isb	sy
 8001c06:	f3bf 8f4f 	dsb	sy
 8001c0a:	607b      	str	r3, [r7, #4]
    }
 8001c0c:	bf00      	nop
 8001c0e:	e7fe      	b.n	8001c0e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001c10:	f000 fb2a 	bl	8002268 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <xTaskResumeAll+0x1d4>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4a67      	ldr	r2, [pc, #412]	; (8001db8 <xTaskResumeAll+0x1d4>)
 8001c1c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c1e:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <xTaskResumeAll+0x1d4>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 80c0 	bne.w	8001da8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c28:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <xTaskResumeAll+0x1d8>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80bb 	beq.w	8001da8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c32:	e08a      	b.n	8001d4a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c34:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <xTaskResumeAll+0x1dc>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	69fa      	ldr	r2, [r7, #28]
 8001c48:	6a12      	ldr	r2, [r2, #32]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	69fa      	ldr	r2, [r7, #28]
 8001c52:	69d2      	ldr	r2, [r2, #28]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3318      	adds	r3, #24
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d103      	bne.n	8001c6a <xTaskResumeAll+0x86>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	6a1a      	ldr	r2, [r3, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1e5a      	subs	r2, r3, #1
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	68d2      	ldr	r2, [r2, #12]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	6892      	ldr	r2, [r2, #8]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d103      	bne.n	8001ca8 <xTaskResumeAll+0xc4>
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	4b40      	ldr	r3, [pc, #256]	; (8001dc4 <xTaskResumeAll+0x1e0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	; (8001dc4 <xTaskResumeAll+0x1e0>)
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cce:	493e      	ldr	r1, [pc, #248]	; (8001dc8 <xTaskResumeAll+0x1e4>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	4413      	add	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	440b      	add	r3, r1
 8001cda:	3304      	adds	r3, #4
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	68ba      	ldr	r2, [r7, #8]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	60da      	str	r2, [r3, #12]
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	69fa      	ldr	r2, [r7, #28]
 8001cf4:	3204      	adds	r2, #4
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	1d1a      	adds	r2, r3, #4
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4a2e      	ldr	r2, [pc, #184]	; (8001dc8 <xTaskResumeAll+0x1e4>)
 8001d0e:	441a      	add	r2, r3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	492b      	ldr	r1, [pc, #172]	; (8001dc8 <xTaskResumeAll+0x1e4>)
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <xTaskResumeAll+0x1e4>)
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4403      	add	r3, r0
 8001d34:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <xTaskResumeAll+0x1e8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d302      	bcc.n	8001d4a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <xTaskResumeAll+0x1ec>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d4a:	4b1d      	ldr	r3, [pc, #116]	; (8001dc0 <xTaskResumeAll+0x1dc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f af70 	bne.w	8001c34 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001d5a:	f000 f9f1 	bl	8002140 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <xTaskResumeAll+0x1f0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001d6a:	f000 f837 	bl	8001ddc <xTaskIncrementTick>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d002      	beq.n	8001d7a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001d74:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <xTaskResumeAll+0x1ec>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f1      	bne.n	8001d6a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001d86:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <xTaskResumeAll+0x1f0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001d8c:	4b10      	ldr	r3, [pc, #64]	; (8001dd0 <xTaskResumeAll+0x1ec>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d009      	beq.n	8001da8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001d94:	2301      	movs	r3, #1
 8001d96:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001d98:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <xTaskResumeAll+0x1f4>)
 8001d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	f3bf 8f4f 	dsb	sy
 8001da4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001da8:	f000 fa8e 	bl	80022c8 <vPortExitCritical>

    return xAlreadyYielded;
 8001dac:	69bb      	ldr	r3, [r7, #24]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000170 	.word	0x20000170
 8001dbc:	2000014c 	.word	0x2000014c
 8001dc0:	20000110 	.word	0x20000110
 8001dc4:	20000154 	.word	0x20000154
 8001dc8:	2000007c 	.word	0x2000007c
 8001dcc:	20000078 	.word	0x20000078
 8001dd0:	20000160 	.word	0x20000160
 8001dd4:	2000015c 	.word	0x2000015c
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001de6:	4b7d      	ldr	r3, [pc, #500]	; (8001fdc <xTaskIncrementTick+0x200>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80ec 	bne.w	8001fc8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001df0:	4b7b      	ldr	r3, [pc, #492]	; (8001fe0 <xTaskIncrementTick+0x204>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001df8:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <xTaskIncrementTick+0x204>)
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
 8001dfc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d120      	bne.n	8001e46 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001e04:	4b77      	ldr	r3, [pc, #476]	; (8001fe4 <xTaskIncrementTick+0x208>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <xTaskIncrementTick+0x48>
        __asm volatile
 8001e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e12:	f383 8811 	msr	BASEPRI, r3
 8001e16:	f3bf 8f6f 	isb	sy
 8001e1a:	f3bf 8f4f 	dsb	sy
 8001e1e:	607b      	str	r3, [r7, #4]
    }
 8001e20:	bf00      	nop
 8001e22:	e7fe      	b.n	8001e22 <xTaskIncrementTick+0x46>
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <xTaskIncrementTick+0x208>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61fb      	str	r3, [r7, #28]
 8001e2a:	4b6f      	ldr	r3, [pc, #444]	; (8001fe8 <xTaskIncrementTick+0x20c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a6d      	ldr	r2, [pc, #436]	; (8001fe4 <xTaskIncrementTick+0x208>)
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	4a6d      	ldr	r2, [pc, #436]	; (8001fe8 <xTaskIncrementTick+0x20c>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b6c      	ldr	r3, [pc, #432]	; (8001fec <xTaskIncrementTick+0x210>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	4a6b      	ldr	r2, [pc, #428]	; (8001fec <xTaskIncrementTick+0x210>)
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	f000 f97d 	bl	8002140 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001e46:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <xTaskIncrementTick+0x214>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6a3a      	ldr	r2, [r7, #32]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f0c0 80a6 	bcc.w	8001f9e <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e52:	4b64      	ldr	r3, [pc, #400]	; (8001fe4 <xTaskIncrementTick+0x208>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d104      	bne.n	8001e66 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e5c:	4b64      	ldr	r3, [pc, #400]	; (8001ff0 <xTaskIncrementTick+0x214>)
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	601a      	str	r2, [r3, #0]
                    break;
 8001e64:	e09b      	b.n	8001f9e <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e66:	4b5f      	ldr	r3, [pc, #380]	; (8001fe4 <xTaskIncrementTick+0x208>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001e76:	6a3a      	ldr	r2, [r7, #32]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d203      	bcs.n	8001e86 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <xTaskIncrementTick+0x214>)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001e84:	e08b      	b.n	8001f9e <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	68d2      	ldr	r2, [r2, #12]
 8001e94:	609a      	str	r2, [r3, #8]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	6892      	ldr	r2, [r2, #8]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	3304      	adds	r3, #4
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d103      	bne.n	8001eb4 <xTaskIncrementTick+0xd8>
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	68da      	ldr	r2, [r3, #12]
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	1e5a      	subs	r2, r3, #1
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d01e      	beq.n	8001f0a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	6a12      	ldr	r2, [r2, #32]
 8001eda:	609a      	str	r2, [r3, #8]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	69d2      	ldr	r2, [r2, #28]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3318      	adds	r3, #24
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d103      	bne.n	8001efa <xTaskIncrementTick+0x11e>
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6a1a      	ldr	r2, [r3, #32]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2200      	movs	r2, #0
 8001efe:	629a      	str	r2, [r3, #40]	; 0x28
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1e5a      	subs	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	2201      	movs	r2, #1
 8001f10:	409a      	lsls	r2, r3
 8001f12:	4b38      	ldr	r3, [pc, #224]	; (8001ff4 <xTaskIncrementTick+0x218>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	4a36      	ldr	r2, [pc, #216]	; (8001ff4 <xTaskIncrementTick+0x218>)
 8001f1a:	6013      	str	r3, [r2, #0]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f20:	4935      	ldr	r1, [pc, #212]	; (8001ff8 <xTaskIncrementTick+0x21c>)
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	68ba      	ldr	r2, [r7, #8]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	60da      	str	r2, [r3, #12]
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	3204      	adds	r2, #4
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1d1a      	adds	r2, r3, #4
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <xTaskIncrementTick+0x21c>)
 8001f60:	441a      	add	r2, r3
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	615a      	str	r2, [r3, #20]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6a:	4923      	ldr	r1, [pc, #140]	; (8001ff8 <xTaskIncrementTick+0x21c>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	1c59      	adds	r1, r3, #1
 8001f7a:	481f      	ldr	r0, [pc, #124]	; (8001ff8 <xTaskIncrementTick+0x21c>)
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4403      	add	r3, r0
 8001f86:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <xTaskIncrementTick+0x220>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	429a      	cmp	r2, r3
 8001f94:	f4ff af5d 	bcc.w	8001e52 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f9c:	e759      	b.n	8001e52 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001f9e:	4b17      	ldr	r3, [pc, #92]	; (8001ffc <xTaskIncrementTick+0x220>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	4914      	ldr	r1, [pc, #80]	; (8001ff8 <xTaskIncrementTick+0x21c>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	4413      	add	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d901      	bls.n	8001fba <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <xTaskIncrementTick+0x224>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d007      	beq.n	8001fd2 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	e004      	b.n	8001fd2 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <xTaskIncrementTick+0x228>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <xTaskIncrementTick+0x228>)
 8001fd0:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3728      	adds	r7, #40	; 0x28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20000170 	.word	0x20000170
 8001fe0:	20000150 	.word	0x20000150
 8001fe4:	20000108 	.word	0x20000108
 8001fe8:	2000010c 	.word	0x2000010c
 8001fec:	20000164 	.word	0x20000164
 8001ff0:	2000016c 	.word	0x2000016c
 8001ff4:	20000154 	.word	0x20000154
 8001ff8:	2000007c 	.word	0x2000007c
 8001ffc:	20000078 	.word	0x20000078
 8002000:	20000160 	.word	0x20000160
 8002004:	2000015c 	.word	0x2000015c

08002008 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800200e:	4b27      	ldr	r3, [pc, #156]	; (80020ac <vTaskSwitchContext+0xa4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002016:	4b26      	ldr	r3, [pc, #152]	; (80020b0 <vTaskSwitchContext+0xa8>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800201c:	e03f      	b.n	800209e <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <vTaskSwitchContext+0xa8>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <vTaskSwitchContext+0xac>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	fab3 f383 	clz	r3, r3
 8002030:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002032:	7afb      	ldrb	r3, [r7, #11]
 8002034:	f1c3 031f 	rsb	r3, r3, #31
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	491f      	ldr	r1, [pc, #124]	; (80020b8 <vTaskSwitchContext+0xb0>)
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <vTaskSwitchContext+0x5c>
        __asm volatile
 800204e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002052:	f383 8811 	msr	BASEPRI, r3
 8002056:	f3bf 8f6f 	isb	sy
 800205a:	f3bf 8f4f 	dsb	sy
 800205e:	607b      	str	r3, [r7, #4]
    }
 8002060:	bf00      	nop
 8002062:	e7fe      	b.n	8002062 <vTaskSwitchContext+0x5a>
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4a12      	ldr	r2, [pc, #72]	; (80020b8 <vTaskSwitchContext+0xb0>)
 8002070:	4413      	add	r3, r2
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	3308      	adds	r3, #8
 8002086:	429a      	cmp	r2, r3
 8002088:	d104      	bne.n	8002094 <vTaskSwitchContext+0x8c>
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	4a08      	ldr	r2, [pc, #32]	; (80020bc <vTaskSwitchContext+0xb4>)
 800209c:	6013      	str	r3, [r2, #0]
}
 800209e:	bf00      	nop
 80020a0:	371c      	adds	r7, #28
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000170 	.word	0x20000170
 80020b0:	20000160 	.word	0x20000160
 80020b4:	20000154 	.word	0x20000154
 80020b8:	2000007c 	.word	0x2000007c
 80020bc:	20000078 	.word	0x20000078

080020c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e00c      	b.n	80020e6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	4a12      	ldr	r2, [pc, #72]	; (8002120 <prvInitialiseTaskLists+0x60>)
 80020d8:	4413      	add	r3, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fbcc 	bl	8001878 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3301      	adds	r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d9ef      	bls.n	80020cc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80020ec:	480d      	ldr	r0, [pc, #52]	; (8002124 <prvInitialiseTaskLists+0x64>)
 80020ee:	f7ff fbc3 	bl	8001878 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <prvInitialiseTaskLists+0x68>)
 80020f4:	f7ff fbc0 	bl	8001878 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <prvInitialiseTaskLists+0x6c>)
 80020fa:	f7ff fbbd 	bl	8001878 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80020fe:	480c      	ldr	r0, [pc, #48]	; (8002130 <prvInitialiseTaskLists+0x70>)
 8002100:	f7ff fbba 	bl	8001878 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002104:	480b      	ldr	r0, [pc, #44]	; (8002134 <prvInitialiseTaskLists+0x74>)
 8002106:	f7ff fbb7 	bl	8001878 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <prvInitialiseTaskLists+0x78>)
 800210c:	4a05      	ldr	r2, [pc, #20]	; (8002124 <prvInitialiseTaskLists+0x64>)
 800210e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002110:	4b0a      	ldr	r3, [pc, #40]	; (800213c <prvInitialiseTaskLists+0x7c>)
 8002112:	4a05      	ldr	r2, [pc, #20]	; (8002128 <prvInitialiseTaskLists+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000007c 	.word	0x2000007c
 8002124:	200000e0 	.word	0x200000e0
 8002128:	200000f4 	.word	0x200000f4
 800212c:	20000110 	.word	0x20000110
 8002130:	20000124 	.word	0x20000124
 8002134:	20000138 	.word	0x20000138
 8002138:	20000108 	.word	0x20000108
 800213c:	2000010c 	.word	0x2000010c

08002140 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <prvResetNextTaskUnblockTime+0x30>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800214e:	4b09      	ldr	r3, [pc, #36]	; (8002174 <prvResetNextTaskUnblockTime+0x34>)
 8002150:	f04f 32ff 	mov.w	r2, #4294967295
 8002154:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002156:	e005      	b.n	8002164 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <prvResetNextTaskUnblockTime+0x30>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <prvResetNextTaskUnblockTime+0x34>)
 8002162:	6013      	str	r3, [r2, #0]
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000108 	.word	0x20000108
 8002174:	2000016c 	.word	0x2000016c

08002178 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3b04      	subs	r3, #4
 8002188:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002190:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3b04      	subs	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f023 0201 	bic.w	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3b04      	subs	r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80021a8:	4a0c      	ldr	r2, [pc, #48]	; (80021dc <pxPortInitialiseStack+0x64>)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3b14      	subs	r3, #20
 80021b2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	3b04      	subs	r3, #4
 80021be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f06f 0202 	mvn.w	r2, #2
 80021c6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3b20      	subs	r3, #32
 80021cc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80021ce:	68fb      	ldr	r3, [r7, #12]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	080021e1 	.word	0x080021e1

080021e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80021ea:	4b12      	ldr	r3, [pc, #72]	; (8002234 <prvTaskExitError+0x54>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f2:	d00a      	beq.n	800220a <prvTaskExitError+0x2a>
        __asm volatile
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	60fb      	str	r3, [r7, #12]
    }
 8002206:	bf00      	nop
 8002208:	e7fe      	b.n	8002208 <prvTaskExitError+0x28>
        __asm volatile
 800220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	60bb      	str	r3, [r7, #8]
    }
 800221c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800221e:	bf00      	nop
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0fc      	beq.n	8002220 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	2000000c 	.word	0x2000000c
	...

08002240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <pxCurrentTCBConst2>)
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	6808      	ldr	r0, [r1, #0]
 8002246:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800224a:	f380 8809 	msr	PSP, r0
 800224e:	f3bf 8f6f 	isb	sy
 8002252:	f04f 0000 	mov.w	r0, #0
 8002256:	f380 8811 	msr	BASEPRI, r0
 800225a:	4770      	bx	lr
 800225c:	f3af 8000 	nop.w

08002260 <pxCurrentTCBConst2>:
 8002260:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop

08002268 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
        __asm volatile
 800226e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002272:	f383 8811 	msr	BASEPRI, r3
 8002276:	f3bf 8f6f 	isb	sy
 800227a:	f3bf 8f4f 	dsb	sy
 800227e:	607b      	str	r3, [r7, #4]
    }
 8002280:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <vPortEnterCritical+0x58>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <vPortEnterCritical+0x58>)
 800228a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <vPortEnterCritical+0x58>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d10f      	bne.n	80022b4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <vPortEnterCritical+0x5c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00a      	beq.n	80022b4 <vPortEnterCritical+0x4c>
        __asm volatile
 800229e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022a2:	f383 8811 	msr	BASEPRI, r3
 80022a6:	f3bf 8f6f 	isb	sy
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	603b      	str	r3, [r7, #0]
    }
 80022b0:	bf00      	nop
 80022b2:	e7fe      	b.n	80022b2 <vPortEnterCritical+0x4a>
    }
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	e000ed04 	.word	0xe000ed04

080022c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <vPortExitCritical+0x50>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10a      	bne.n	80022ec <vPortExitCritical+0x24>
        __asm volatile
 80022d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022da:	f383 8811 	msr	BASEPRI, r3
 80022de:	f3bf 8f6f 	isb	sy
 80022e2:	f3bf 8f4f 	dsb	sy
 80022e6:	607b      	str	r3, [r7, #4]
    }
 80022e8:	bf00      	nop
 80022ea:	e7fe      	b.n	80022ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <vPortExitCritical+0x50>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <vPortExitCritical+0x50>)
 80022f4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <vPortExitCritical+0x50>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <vPortExitCritical+0x42>
 80022fe:	2300      	movs	r3, #0
 8002300:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002308:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000000c 	.word	0x2000000c
 800231c:	00000000 	.word	0x00000000

08002320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002320:	f3ef 8009 	mrs	r0, PSP
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	4b15      	ldr	r3, [pc, #84]	; (8002380 <pxCurrentTCBConst>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	f01e 0f10 	tst.w	lr, #16
 8002330:	bf08      	it	eq
 8002332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800233a:	6010      	str	r0, [r2, #0]
 800233c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002340:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002344:	f380 8811 	msr	BASEPRI, r0
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	f7ff fe5a 	bl	8002008 <vTaskSwitchContext>
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f380 8811 	msr	BASEPRI, r0
 800235c:	bc09      	pop	{r0, r3}
 800235e:	6819      	ldr	r1, [r3, #0]
 8002360:	6808      	ldr	r0, [r1, #0]
 8002362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002366:	f01e 0f10 	tst.w	lr, #16
 800236a:	bf08      	it	eq
 800236c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002370:	f380 8809 	msr	PSP, r0
 8002374:	f3bf 8f6f 	isb	sy
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w

08002380 <pxCurrentTCBConst>:
 8002380:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop

08002388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
        __asm volatile
 800238e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002392:	f383 8811 	msr	BASEPRI, r3
 8002396:	f3bf 8f6f 	isb	sy
 800239a:	f3bf 8f4f 	dsb	sy
 800239e:	607b      	str	r3, [r7, #4]
    }
 80023a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80023a2:	f7ff fd1b 	bl	8001ddc <xTaskIncrementTick>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <SysTick_Handler+0x40>)
 80023ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	2300      	movs	r3, #0
 80023b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f383 8811 	msr	BASEPRI, r3
    }
 80023be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80023c0:	bf00      	nop
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80023d8:	f7ff fbf6 	bl	8001bc8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80023dc:	4b65      	ldr	r3, [pc, #404]	; (8002574 <pvPortMalloc+0x1a8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80023e4:	f000 f934 	bl	8002650 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023e8:	4b63      	ldr	r3, [pc, #396]	; (8002578 <pvPortMalloc+0x1ac>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 80a7 	bne.w	8002544 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d02d      	beq.n	8002458 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80023fc:	2208      	movs	r2, #8
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d227      	bcs.n	8002458 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002408:	2208      	movs	r2, #8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	2b00      	cmp	r3, #0
 8002418:	d021      	beq.n	800245e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f023 0307 	bic.w	r3, r3, #7
 8002420:	3308      	adds	r3, #8
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	429a      	cmp	r2, r3
 8002426:	d214      	bcs.n	8002452 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f023 0307 	bic.w	r3, r3, #7
 800242e:	3308      	adds	r3, #8
 8002430:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	2b00      	cmp	r3, #0
 800243a:	d010      	beq.n	800245e <pvPortMalloc+0x92>
        __asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	617b      	str	r3, [r7, #20]
    }
 800244e:	bf00      	nop
 8002450:	e7fe      	b.n	8002450 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002456:	e002      	b.n	800245e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	e000      	b.n	8002460 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800245e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d06e      	beq.n	8002544 <pvPortMalloc+0x178>
 8002466:	4b45      	ldr	r3, [pc, #276]	; (800257c <pvPortMalloc+0x1b0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d869      	bhi.n	8002544 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002470:	4b43      	ldr	r3, [pc, #268]	; (8002580 <pvPortMalloc+0x1b4>)
 8002472:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002474:	4b42      	ldr	r3, [pc, #264]	; (8002580 <pvPortMalloc+0x1b4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800247a:	e004      	b.n	8002486 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	429a      	cmp	r2, r3
 800248e:	d903      	bls.n	8002498 <pvPortMalloc+0xcc>
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1f1      	bne.n	800247c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <pvPortMalloc+0x1a8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	429a      	cmp	r2, r3
 80024a0:	d050      	beq.n	8002544 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2208      	movs	r2, #8
 80024a8:	4413      	add	r3, r2
 80024aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	1ad2      	subs	r2, r2, r3
 80024bc:	2308      	movs	r3, #8
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d91f      	bls.n	8002504 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <pvPortMalloc+0x120>
        __asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	613b      	str	r3, [r7, #16]
    }
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80024fe:	69b8      	ldr	r0, [r7, #24]
 8002500:	f000 f908 	bl	8002714 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <pvPortMalloc+0x1b0>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	4a1b      	ldr	r2, [pc, #108]	; (800257c <pvPortMalloc+0x1b0>)
 8002510:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <pvPortMalloc+0x1b0>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <pvPortMalloc+0x1b8>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d203      	bcs.n	8002526 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800251e:	4b17      	ldr	r3, [pc, #92]	; (800257c <pvPortMalloc+0x1b0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <pvPortMalloc+0x1b8>)
 8002524:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <pvPortMalloc+0x1ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	431a      	orrs	r2, r3
 8002530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002532:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800253a:	4b13      	ldr	r3, [pc, #76]	; (8002588 <pvPortMalloc+0x1bc>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	4a11      	ldr	r2, [pc, #68]	; (8002588 <pvPortMalloc+0x1bc>)
 8002542:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002544:	f7ff fb4e 	bl	8001be4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <pvPortMalloc+0x19c>
        __asm volatile
 8002552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002556:	f383 8811 	msr	BASEPRI, r3
 800255a:	f3bf 8f6f 	isb	sy
 800255e:	f3bf 8f4f 	dsb	sy
 8002562:	60fb      	str	r3, [r7, #12]
    }
 8002564:	bf00      	nop
 8002566:	e7fe      	b.n	8002566 <pvPortMalloc+0x19a>
    return pvReturn;
 8002568:	69fb      	ldr	r3, [r7, #28]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3728      	adds	r7, #40	; 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20012d7c 	.word	0x20012d7c
 8002578:	20012d90 	.word	0x20012d90
 800257c:	20012d80 	.word	0x20012d80
 8002580:	20012d74 	.word	0x20012d74
 8002584:	20012d84 	.word	0x20012d84
 8002588:	20012d88 	.word	0x20012d88

0800258c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d04d      	beq.n	800263a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800259e:	2308      	movs	r3, #8
 80025a0:	425b      	negs	r3, r3
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4b24      	ldr	r3, [pc, #144]	; (8002644 <vPortFree+0xb8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10a      	bne.n	80025d0 <vPortFree+0x44>
        __asm volatile
 80025ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025be:	f383 8811 	msr	BASEPRI, r3
 80025c2:	f3bf 8f6f 	isb	sy
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	60fb      	str	r3, [r7, #12]
    }
 80025cc:	bf00      	nop
 80025ce:	e7fe      	b.n	80025ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00a      	beq.n	80025ee <vPortFree+0x62>
        __asm volatile
 80025d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025dc:	f383 8811 	msr	BASEPRI, r3
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	f3bf 8f4f 	dsb	sy
 80025e8:	60bb      	str	r3, [r7, #8]
    }
 80025ea:	bf00      	nop
 80025ec:	e7fe      	b.n	80025ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4b14      	ldr	r3, [pc, #80]	; (8002644 <vPortFree+0xb8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4013      	ands	r3, r2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01e      	beq.n	800263a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11a      	bne.n	800263a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	4b0e      	ldr	r3, [pc, #56]	; (8002644 <vPortFree+0xb8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002614:	f7ff fad8 	bl	8001bc8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <vPortFree+0xbc>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4413      	add	r3, r2
 8002622:	4a09      	ldr	r2, [pc, #36]	; (8002648 <vPortFree+0xbc>)
 8002624:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002626:	6938      	ldr	r0, [r7, #16]
 8002628:	f000 f874 	bl	8002714 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800262c:	4b07      	ldr	r3, [pc, #28]	; (800264c <vPortFree+0xc0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	3301      	adds	r3, #1
 8002632:	4a06      	ldr	r2, [pc, #24]	; (800264c <vPortFree+0xc0>)
 8002634:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002636:	f7ff fad5 	bl	8001be4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800263a:	bf00      	nop
 800263c:	3718      	adds	r7, #24
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20012d90 	.word	0x20012d90
 8002648:	20012d80 	.word	0x20012d80
 800264c:	20012d8c 	.word	0x20012d8c

08002650 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002656:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800265a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <prvHeapInit+0xac>)
 800265e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	3307      	adds	r3, #7
 800266e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f023 0307 	bic.w	r3, r3, #7
 8002676:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <prvHeapInit+0xac>)
 8002680:	4413      	add	r3, r2
 8002682:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002688:	4a1d      	ldr	r2, [pc, #116]	; (8002700 <prvHeapInit+0xb0>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <prvHeapInit+0xb0>)
 8002690:	2200      	movs	r2, #0
 8002692:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	4413      	add	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800269c:	2208      	movs	r2, #8
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 0307 	bic.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a15      	ldr	r2, [pc, #84]	; (8002704 <prvHeapInit+0xb4>)
 80026b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80026b2:	4b14      	ldr	r3, [pc, #80]	; (8002704 <prvHeapInit+0xb4>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <prvHeapInit+0xb4>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	1ad2      	subs	r2, r2, r3
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <prvHeapInit+0xb4>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	; (8002708 <prvHeapInit+0xb8>)
 80026de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <prvHeapInit+0xbc>)
 80026e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80026e8:	4b09      	ldr	r3, [pc, #36]	; (8002710 <prvHeapInit+0xc0>)
 80026ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	20000174 	.word	0x20000174
 8002700:	20012d74 	.word	0x20012d74
 8002704:	20012d7c 	.word	0x20012d7c
 8002708:	20012d84 	.word	0x20012d84
 800270c:	20012d80 	.word	0x20012d80
 8002710:	20012d90 	.word	0x20012d90

08002714 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <prvInsertBlockIntoFreeList+0xac>)
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	e002      	b.n	8002728 <prvInsertBlockIntoFreeList+0x14>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	d8f7      	bhi.n	8002722 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	4413      	add	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	429a      	cmp	r2, r3
 8002742:	d108      	bne.n	8002756 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	441a      	add	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	441a      	add	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	429a      	cmp	r2, r3
 8002768:	d118      	bne.n	800279c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b15      	ldr	r3, [pc, #84]	; (80027c4 <prvInsertBlockIntoFreeList+0xb0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d00d      	beq.n	8002792 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	441a      	add	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e008      	b.n	80027a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002792:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <prvInsertBlockIntoFreeList+0xb0>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	e003      	b.n	80027a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d002      	beq.n	80027b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027b2:	bf00      	nop
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20012d74 	.word	0x20012d74
 80027c4:	20012d7c 	.word	0x20012d7c

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	4d0d      	ldr	r5, [pc, #52]	; (8002800 <__libc_init_array+0x38>)
 80027cc:	4c0d      	ldr	r4, [pc, #52]	; (8002804 <__libc_init_array+0x3c>)
 80027ce:	1b64      	subs	r4, r4, r5
 80027d0:	10a4      	asrs	r4, r4, #2
 80027d2:	2600      	movs	r6, #0
 80027d4:	42a6      	cmp	r6, r4
 80027d6:	d109      	bne.n	80027ec <__libc_init_array+0x24>
 80027d8:	4d0b      	ldr	r5, [pc, #44]	; (8002808 <__libc_init_array+0x40>)
 80027da:	4c0c      	ldr	r4, [pc, #48]	; (800280c <__libc_init_array+0x44>)
 80027dc:	f000 f820 	bl	8002820 <_init>
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	2600      	movs	r6, #0
 80027e6:	42a6      	cmp	r6, r4
 80027e8:	d105      	bne.n	80027f6 <__libc_init_array+0x2e>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f0:	4798      	blx	r3
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7ee      	b.n	80027d4 <__libc_init_array+0xc>
 80027f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fa:	4798      	blx	r3
 80027fc:	3601      	adds	r6, #1
 80027fe:	e7f2      	b.n	80027e6 <__libc_init_array+0x1e>
 8002800:	08002880 	.word	0x08002880
 8002804:	08002880 	.word	0x08002880
 8002808:	08002880 	.word	0x08002880
 800280c:	08002884 	.word	0x08002884

08002810 <memset>:
 8002810:	4402      	add	r2, r0
 8002812:	4603      	mov	r3, r0
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <memset+0xa>
 8002818:	4770      	bx	lr
 800281a:	f803 1b01 	strb.w	r1, [r3], #1
 800281e:	e7f9      	b.n	8002814 <memset+0x4>

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
