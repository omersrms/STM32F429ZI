
HTTP_WebServer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f418  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035ac  0800f5c8  0800f5c8  0001f5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b74  08012b74  000300a0  2**0
                  CONTENTS
  4 .ARM          00000008  08012b74  08012b74  00022b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b7c  08012b7c  000300a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b7c  08012b7c  00022b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b80  08012b80  00022b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08012b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300a0  2**0
                  CONTENTS
 10 .bss          00010d40  200000a0  200000a0  000300a0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010de0  20010de0  000300a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000481f1  00000000  00000000  000300d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000942a  00000000  00000000  000782c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0003037b  00000000  00000000  000816eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002398  00000000  00000000  000b1a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003218  00000000  00000000  000b3e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00012638  00000000  00000000  000b7018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048b16  00000000  00000000  000c9650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00103d4b  00000000  00000000  00112166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00215eb1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000073ec  00000000  00000000  00215f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a0 	.word	0x200000a0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f5b0 	.word	0x0800f5b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	0800f5b0 	.word	0x0800f5b0

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <ssi_handler>:
/* we will use character "x", "y","z" as tag for SSI */
char const* TAGCHAR[]={"x", "y", "z"};
char const** TAGS=TAGCHAR;

uint16_t ssi_handler (int iIndex, char *pcInsert, int iInsertLen)
{
 80005c4:	b510      	push	{r4, lr}
 80005c6:	460c      	mov	r4, r1
	switch (iIndex) {
 80005c8:	2801      	cmp	r0, #1
 80005ca:	d011      	beq.n	80005f0 <ssi_handler+0x2c>
 80005cc:	2802      	cmp	r0, #2
 80005ce:	d01c      	beq.n	800060a <ssi_handler+0x46>
 80005d0:	b108      	cbz	r0, 80005d6 <ssi_handler+0x12>
 80005d2:	2000      	movs	r0, #0
		default :
			break;
	}

	return 0;
}
 80005d4:	bd10      	pop	{r4, pc}
			indx+=1;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <ssi_handler+0x60>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	3201      	adds	r2, #1
 80005dc:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "%d", indx);
 80005de:	4912      	ldr	r1, [pc, #72]	; (8000628 <ssi_handler+0x64>)
 80005e0:	4620      	mov	r0, r4
 80005e2:	f00d ffad 	bl	800e540 <siprintf>
			return strlen(pcInsert);
 80005e6:	4620      	mov	r0, r4
 80005e8:	f7ff fe0c 	bl	8000204 <strlen>
 80005ec:	b280      	uxth	r0, r0
 80005ee:	e7f1      	b.n	80005d4 <ssi_handler+0x10>
			indx+=1;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <ssi_handler+0x60>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	3201      	adds	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "%d", indx);
 80005f8:	490b      	ldr	r1, [pc, #44]	; (8000628 <ssi_handler+0x64>)
 80005fa:	4620      	mov	r0, r4
 80005fc:	f00d ffa0 	bl	800e540 <siprintf>
			return strlen(pcInsert);
 8000600:	4620      	mov	r0, r4
 8000602:	f7ff fdff 	bl	8000204 <strlen>
 8000606:	b280      	uxth	r0, r0
 8000608:	e7e4      	b.n	80005d4 <ssi_handler+0x10>
			indx+=1;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <ssi_handler+0x60>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	3201      	adds	r2, #1
 8000610:	601a      	str	r2, [r3, #0]
			sprintf(pcInsert, "%d", indx);
 8000612:	4905      	ldr	r1, [pc, #20]	; (8000628 <ssi_handler+0x64>)
 8000614:	4620      	mov	r0, r4
 8000616:	f00d ff93 	bl	800e540 <siprintf>
			return strlen(pcInsert);
 800061a:	4620      	mov	r0, r4
 800061c:	f7ff fdf2 	bl	8000204 <strlen>
 8000620:	b280      	uxth	r0, r0
 8000622:	e7d7      	b.n	80005d4 <ssi_handler+0x10>
 8000624:	200000cc 	.word	0x200000cc
 8000628:	0800f5c8 	.word	0x0800f5c8

0800062c <CGIForm_Handler>:
tCGI CGI_TAB[2];


const char *CGIForm_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
	if (iIndex == 0)
 800062c:	2800      	cmp	r0, #0
 800062e:	d146      	bne.n	80006be <CGIForm_Handler+0x92>
{
 8000630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000634:	4688      	mov	r8, r1
 8000636:	4699      	mov	r9, r3
 8000638:	4604      	mov	r4, r0
	{
		for (int i=0; i<iNumParams; i++)
 800063a:	2900      	cmp	r1, #0
 800063c:	dd3c      	ble.n	80006b8 <CGIForm_Handler+0x8c>
 800063e:	1f15      	subs	r5, r2, #4
		{
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
 8000640:	4f20      	ldr	r7, [pc, #128]	; (80006c4 <CGIForm_Handler+0x98>)
			{
				memset(name, '\0', 30);
 8000642:	4e21      	ldr	r6, [pc, #132]	; (80006c8 <CGIForm_Handler+0x9c>)
							{
								HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
							}
				else if (strncmp(name, "LED3",4) == 0)
							{
								HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000644:	f8df a094 	ldr.w	sl, [pc, #148]	; 80006dc <CGIForm_Handler+0xb0>
 8000648:	e006      	b.n	8000658 <CGIForm_Handler+0x2c>
								HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 800064a:	2101      	movs	r1, #1
 800064c:	4650      	mov	r0, sl
 800064e:	f001 fca7 	bl	8001fa0 <HAL_GPIO_TogglePin>
		for (int i=0; i<iNumParams; i++)
 8000652:	3401      	adds	r4, #1
 8000654:	45a0      	cmp	r8, r4
 8000656:	d02f      	beq.n	80006b8 <CGIForm_Handler+0x8c>
			if (strcmp(pcParam[i], "fname") == 0)  // if the fname string is found
 8000658:	4639      	mov	r1, r7
 800065a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800065e:	f7ff fdc7 	bl	80001f0 <strcmp>
 8000662:	2800      	cmp	r0, #0
 8000664:	d1f5      	bne.n	8000652 <CGIForm_Handler+0x26>
				memset(name, '\0', 30);
 8000666:	221e      	movs	r2, #30
 8000668:	2100      	movs	r1, #0
 800066a:	4630      	mov	r0, r6
 800066c:	f00d fdfb 	bl	800e266 <memset>
				strcpy(name, pcValue[i]);
 8000670:	f859 1024 	ldr.w	r1, [r9, r4, lsl #2]
 8000674:	4630      	mov	r0, r6
 8000676:	f00d ffd3 	bl	800e620 <strcpy>
				if (strncmp(name, "LED1",4) == 0)
 800067a:	2204      	movs	r2, #4
 800067c:	4913      	ldr	r1, [pc, #76]	; (80006cc <CGIForm_Handler+0xa0>)
 800067e:	4630      	mov	r0, r6
 8000680:	f00d ffd6 	bl	800e630 <strncmp>
 8000684:	2800      	cmp	r0, #0
 8000686:	d0e0      	beq.n	800064a <CGIForm_Handler+0x1e>
				else if (strncmp(name, "LED2",4) == 0)
 8000688:	2204      	movs	r2, #4
 800068a:	4911      	ldr	r1, [pc, #68]	; (80006d0 <CGIForm_Handler+0xa4>)
 800068c:	4630      	mov	r0, r6
 800068e:	f00d ffcf 	bl	800e630 <strncmp>
 8000692:	b160      	cbz	r0, 80006ae <CGIForm_Handler+0x82>
				else if (strncmp(name, "LED3",4) == 0)
 8000694:	2204      	movs	r2, #4
 8000696:	490f      	ldr	r1, [pc, #60]	; (80006d4 <CGIForm_Handler+0xa8>)
 8000698:	4630      	mov	r0, r6
 800069a:	f00d ffc9 	bl	800e630 <strncmp>
 800069e:	2800      	cmp	r0, #0
 80006a0:	d1d7      	bne.n	8000652 <CGIForm_Handler+0x26>
								HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80006a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a6:	4650      	mov	r0, sl
 80006a8:	f001 fc7a 	bl	8001fa0 <HAL_GPIO_TogglePin>
 80006ac:	e7d1      	b.n	8000652 <CGIForm_Handler+0x26>
								HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	4650      	mov	r0, sl
 80006b2:	f001 fc75 	bl	8001fa0 <HAL_GPIO_TogglePin>
 80006b6:	e7cc      	b.n	8000652 <CGIForm_Handler+0x26>
			}
		}
	}

	return "/cgiform.html";
}
 80006b8:	4807      	ldr	r0, [pc, #28]	; (80006d8 <CGIForm_Handler+0xac>)
 80006ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <CGIForm_Handler+0xac>)
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	0800f5cc 	.word	0x0800f5cc
 80006c8:	200000d0 	.word	0x200000d0
 80006cc:	0800f5d4 	.word	0x0800f5d4
 80006d0:	0800f5dc 	.word	0x0800f5dc
 80006d4:	0800f5e4 	.word	0x0800f5e4
 80006d8:	0800f5ec 	.word	0x0800f5ec
 80006dc:	40020400 	.word	0x40020400

080006e0 <CGILED_Handler>:


const char *CGILED_Handler(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
	if (iIndex == 1)
 80006e0:	2801      	cmp	r0, #1
 80006e2:	d001      	beq.n	80006e8 <CGILED_Handler+0x8>
			}
		}
	}

	return "/cgiled.html";
}
 80006e4:	481b      	ldr	r0, [pc, #108]	; (8000754 <CGILED_Handler+0x74>)
 80006e6:	4770      	bx	lr
{
 80006e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006ec:	460f      	mov	r7, r1
		for (int i=0; i<iNumParams; i++)
 80006ee:	2900      	cmp	r1, #0
 80006f0:	dd2d      	ble.n	800074e <CGILED_Handler+0x6e>
 80006f2:	1f14      	subs	r4, r2, #4
 80006f4:	2600      	movs	r6, #0
			if (strcmp(pcParam[i], "LED1") == 0)
 80006f6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800075c <CGILED_Handler+0x7c>
			else if (strcmp(pcParam[i], "LED2") == 0)
 80006fa:	f8df a064 	ldr.w	sl, [pc, #100]	; 8000760 <CGILED_Handler+0x80>
				HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 80006fe:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8000764 <CGILED_Handler+0x84>
 8000702:	e006      	b.n	8000712 <CGILED_Handler+0x32>
				HAL_GPIO_TogglePin(LD1_GPIO_Port,LD1_Pin);
 8000704:	2101      	movs	r1, #1
 8000706:	4648      	mov	r0, r9
 8000708:	f001 fc4a 	bl	8001fa0 <HAL_GPIO_TogglePin>
		for (int i=0; i<iNumParams; i++)
 800070c:	3601      	adds	r6, #1
 800070e:	42b7      	cmp	r7, r6
 8000710:	d01d      	beq.n	800074e <CGILED_Handler+0x6e>
			if (strcmp(pcParam[i], "LED1") == 0)
 8000712:	f854 5f04 	ldr.w	r5, [r4, #4]!
 8000716:	4641      	mov	r1, r8
 8000718:	4628      	mov	r0, r5
 800071a:	f7ff fd69 	bl	80001f0 <strcmp>
 800071e:	2800      	cmp	r0, #0
 8000720:	d0f0      	beq.n	8000704 <CGILED_Handler+0x24>
			else if (strcmp(pcParam[i], "LED2") == 0)
 8000722:	4651      	mov	r1, sl
 8000724:	4628      	mov	r0, r5
 8000726:	f7ff fd63 	bl	80001f0 <strcmp>
 800072a:	b158      	cbz	r0, 8000744 <CGILED_Handler+0x64>
			else if (strcmp(pcParam[i], "LED3") == 0)  // if the fname string is found
 800072c:	490a      	ldr	r1, [pc, #40]	; (8000758 <CGILED_Handler+0x78>)
 800072e:	4628      	mov	r0, r5
 8000730:	f7ff fd5e 	bl	80001f0 <strcmp>
 8000734:	2800      	cmp	r0, #0
 8000736:	d1e9      	bne.n	800070c <CGILED_Handler+0x2c>
				HAL_GPIO_TogglePin(LD3_GPIO_Port,LD3_Pin);
 8000738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800073c:	4648      	mov	r0, r9
 800073e:	f001 fc2f 	bl	8001fa0 <HAL_GPIO_TogglePin>
 8000742:	e7e3      	b.n	800070c <CGILED_Handler+0x2c>
				HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	4648      	mov	r0, r9
 8000748:	f001 fc2a 	bl	8001fa0 <HAL_GPIO_TogglePin>
 800074c:	e7de      	b.n	800070c <CGILED_Handler+0x2c>
}
 800074e:	4801      	ldr	r0, [pc, #4]	; (8000754 <CGILED_Handler+0x74>)
 8000750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000754:	0800f5fc 	.word	0x0800f5fc
 8000758:	0800f5e4 	.word	0x0800f5e4
 800075c:	0800f5d4 	.word	0x0800f5d4
 8000760:	0800f5dc 	.word	0x0800f5dc
 8000764:	40020400 	.word	0x40020400

08000768 <http_server_init>:

void http_server_init (void)
{
 8000768:	b508      	push	{r3, lr}
	httpd_init();
 800076a:	f006 fb45 	bl	8006df8 <httpd_init>

	http_set_ssi_handler(ssi_handler, (char const**) TAGS, 3);
 800076e:	2203      	movs	r2, #3
 8000770:	4b0a      	ldr	r3, [pc, #40]	; (800079c <http_server_init+0x34>)
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	480a      	ldr	r0, [pc, #40]	; (80007a0 <http_server_init+0x38>)
 8000776:	f006 fb7f 	bl	8006e78 <http_set_ssi_handler>

	CGI_TAB[0] = FORM_CGI;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <http_server_init+0x3c>)
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <http_server_init+0x40>)
 800077e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000782:	e883 0003 	stmia.w	r3, {r0, r1}
	CGI_TAB[1] = LED_CGI;
 8000786:	4909      	ldr	r1, [pc, #36]	; (80007ac <http_server_init+0x44>)
 8000788:	f103 0208 	add.w	r2, r3, #8
 800078c:	c903      	ldmia	r1, {r0, r1}
 800078e:	e882 0003 	stmia.w	r2, {r0, r1}

//	http_set_cgi_handlers (&FORM_CGI, 1);
	http_set_cgi_handlers (CGI_TAB, 2);
 8000792:	2102      	movs	r1, #2
 8000794:	4618      	mov	r0, r3
 8000796:	f006 fba7 	bl	8006ee8 <http_set_cgi_handlers>
}
 800079a:	bd08      	pop	{r3, pc}
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	080005c5 	.word	0x080005c5
 80007a4:	200000bc 	.word	0x200000bc
 80007a8:	0800f62c 	.word	0x0800f62c
 80007ac:	0800f634 	.word	0x0800f634

080007b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007b0:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 80007b2:	f002 fc33 	bl	800301c <MX_LWIP_Init>

  /* USER CODE BEGIN 5 */
 // httpd_init();
  http_server_init();
 80007b6:	f7ff ffd7 	bl	8000768 <http_server_init>
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    osDelay(1);
 80007ba:	2401      	movs	r4, #1
 80007bc:	4620      	mov	r0, r4
 80007be:	f003 f867 	bl	8003890 <osDelay>
  for(;;)
 80007c2:	e7fb      	b.n	80007bc <StartDefaultTask+0xc>

080007c4 <SystemClock_Config>:
{
 80007c4:	b500      	push	{lr}
 80007c6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c8:	2230      	movs	r2, #48	; 0x30
 80007ca:	2100      	movs	r1, #0
 80007cc:	a808      	add	r0, sp, #32
 80007ce:	f00d fd4a 	bl	800e266 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	2300      	movs	r3, #0
 80007d4:	9303      	str	r3, [sp, #12]
 80007d6:	9304      	str	r3, [sp, #16]
 80007d8:	9305      	str	r3, [sp, #20]
 80007da:	9306      	str	r3, [sp, #24]
 80007dc:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007de:	9301      	str	r3, [sp, #4]
 80007e0:	4a20      	ldr	r2, [pc, #128]	; (8000864 <SystemClock_Config+0xa0>)
 80007e2:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80007e4:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80007e8:	6411      	str	r1, [r2, #64]	; 0x40
 80007ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80007ec:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	9302      	str	r3, [sp, #8]
 80007f6:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <SystemClock_Config+0xa4>)
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000806:	9302      	str	r3, [sp, #8]
 8000808:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800080a:	2301      	movs	r3, #1
 800080c:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800080e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000812:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	2302      	movs	r3, #2
 8000816:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000818:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800081c:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800081e:	2204      	movs	r2, #4
 8000820:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000822:	22a8      	movs	r2, #168	; 0xa8
 8000824:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000826:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000828:	2307      	movs	r3, #7
 800082a:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	a808      	add	r0, sp, #32
 800082e:	f001 fc57 	bl	80020e0 <HAL_RCC_OscConfig>
 8000832:	b998      	cbnz	r0, 800085c <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000834:	230f      	movs	r3, #15
 8000836:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000838:	2302      	movs	r3, #2
 800083a:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000840:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000844:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800084c:	2105      	movs	r1, #5
 800084e:	a803      	add	r0, sp, #12
 8000850:	f001 feac 	bl	80025ac <HAL_RCC_ClockConfig>
 8000854:	b920      	cbnz	r0, 8000860 <SystemClock_Config+0x9c>
}
 8000856:	b015      	add	sp, #84	; 0x54
 8000858:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800085e:	e7fe      	b.n	800085e <SystemClock_Config+0x9a>
 8000860:	b672      	cpsid	i
 8000862:	e7fe      	b.n	8000862 <SystemClock_Config+0x9e>
 8000864:	40023800 	.word	0x40023800
 8000868:	40007000 	.word	0x40007000

0800086c <main>:
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000870:	f000 fb4e 	bl	8000f10 <HAL_Init>
  SystemClock_Config();
 8000874:	f7ff ffa6 	bl	80007c4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	2400      	movs	r4, #0
 800087a:	9407      	str	r4, [sp, #28]
 800087c:	9408      	str	r4, [sp, #32]
 800087e:	9409      	str	r4, [sp, #36]	; 0x24
 8000880:	940a      	str	r4, [sp, #40]	; 0x28
 8000882:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000884:	9401      	str	r4, [sp, #4]
 8000886:	4b52      	ldr	r3, [pc, #328]	; (80009d0 <main+0x164>)
 8000888:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800088a:	f042 0204 	orr.w	r2, r2, #4
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
 8000890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000892:	f002 0204 	and.w	r2, r2, #4
 8000896:	9201      	str	r2, [sp, #4]
 8000898:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	9402      	str	r4, [sp, #8]
 800089c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800089e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80008a2:	631a      	str	r2, [r3, #48]	; 0x30
 80008a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80008aa:	9202      	str	r2, [sp, #8]
 80008ac:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	9403      	str	r4, [sp, #12]
 80008b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	631a      	str	r2, [r3, #48]	; 0x30
 80008b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ba:	f002 0201 	and.w	r2, r2, #1
 80008be:	9203      	str	r2, [sp, #12]
 80008c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	9404      	str	r4, [sp, #16]
 80008c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008c6:	f042 0202 	orr.w	r2, r2, #2
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
 80008cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ce:	f002 0202 	and.w	r2, r2, #2
 80008d2:	9204      	str	r2, [sp, #16]
 80008d4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d6:	9405      	str	r4, [sp, #20]
 80008d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008da:	f042 0208 	orr.w	r2, r2, #8
 80008de:	631a      	str	r2, [r3, #48]	; 0x30
 80008e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e2:	f002 0208 	and.w	r2, r2, #8
 80008e6:	9205      	str	r2, [sp, #20]
 80008e8:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ea:	9406      	str	r4, [sp, #24]
 80008ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fa:	9306      	str	r3, [sp, #24]
 80008fc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008fe:	4f35      	ldr	r7, [pc, #212]	; (80009d4 <main+0x168>)
 8000900:	4622      	mov	r2, r4
 8000902:	f244 0181 	movw	r1, #16513	; 0x4081
 8000906:	4638      	mov	r0, r7
 8000908:	f001 fb44 	bl	8001f94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800090c:	4d32      	ldr	r5, [pc, #200]	; (80009d8 <main+0x16c>)
 800090e:	4622      	mov	r2, r4
 8000910:	2140      	movs	r1, #64	; 0x40
 8000912:	4628      	mov	r0, r5
 8000914:	f001 fb3e 	bl	8001f94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000922:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000926:	a907      	add	r1, sp, #28
 8000928:	482c      	ldr	r0, [pc, #176]	; (80009dc <main+0x170>)
 800092a:	f001 fa1f 	bl	8001d6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800092e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000932:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2601      	movs	r6, #1
 8000936:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	a907      	add	r1, sp, #28
 800093e:	4638      	mov	r0, r7
 8000940:	f001 fa14 	bl	8001d6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000944:	2340      	movs	r3, #64	; 0x40
 8000946:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800094e:	a907      	add	r1, sp, #28
 8000950:	4628      	mov	r0, r5
 8000952:	f001 fa0b 	bl	8001d6c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800095e:	a907      	add	r1, sp, #28
 8000960:	4628      	mov	r0, r5
 8000962:	f001 fa03 	bl	8001d6c <HAL_GPIO_Init>
  huart3.Instance = USART3;
 8000966:	481e      	ldr	r0, [pc, #120]	; (80009e0 <main+0x174>)
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <main+0x178>)
 800096a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800096c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000970:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000972:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000974:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000976:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000978:	230c      	movs	r3, #12
 800097a:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097c:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800097e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	f002 f946 	bl	8002c10 <HAL_UART_Init>
 8000984:	b9f8      	cbnz	r0, 80009c6 <main+0x15a>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000986:	4818      	ldr	r0, [pc, #96]	; (80009e8 <main+0x17c>)
 8000988:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800098c:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800098e:	2304      	movs	r3, #4
 8000990:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000992:	2202      	movs	r2, #2
 8000994:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800099a:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800099c:	2201      	movs	r2, #1
 800099e:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009a0:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009a2:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80009a4:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80009a6:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80009a8:	f001 fb03 	bl	8001fb2 <HAL_PCD_Init>
 80009ac:	b968      	cbnz	r0, 80009ca <main+0x15e>
  osKernelInitialize();
 80009ae:	f002 feeb 	bl	8003788 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009b2:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <main+0x180>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	480e      	ldr	r0, [pc, #56]	; (80009f0 <main+0x184>)
 80009b8:	f002 ff1e 	bl	80037f8 <osThreadNew>
 80009bc:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <main+0x188>)
 80009be:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80009c0:	f002 fef4 	bl	80037ac <osKernelStart>
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <main+0x158>
 80009c6:	b672      	cpsid	i
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <main+0x15c>
 80009ca:	b672      	cpsid	i
 80009cc:	e7fe      	b.n	80009cc <main+0x160>
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020400 	.word	0x40020400
 80009d8:	40021800 	.word	0x40021800
 80009dc:	40020800 	.word	0x40020800
 80009e0:	20000600 	.word	0x20000600
 80009e4:	40004800 	.word	0x40004800
 80009e8:	200000f4 	.word	0x200000f4
 80009ec:	0800f648 	.word	0x0800f648
 80009f0:	080007b1 	.word	0x080007b1
 80009f4:	200000f0 	.word	0x200000f0

080009f8 <HAL_TIM_PeriodElapsedCallback>:
{
 80009f8:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 80009fa:	6802      	ldr	r2, [r0, #0]
 80009fc:	4b03      	ldr	r3, [pc, #12]	; (8000a0c <HAL_TIM_PeriodElapsedCallback+0x14>)
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d000      	beq.n	8000a04 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8000a02:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8000a04:	f000 fa9e 	bl	8000f44 <HAL_IncTick>
}
 8000a08:	e7fb      	b.n	8000a02 <HAL_TIM_PeriodElapsedCallback+0xa>
 8000a0a:	bf00      	nop
 8000a0c:	40001000 	.word	0x40001000

08000a10 <Error_Handler>:
 8000a10:	b672      	cpsid	i
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <Error_Handler+0x2>

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b500      	push	{lr}
 8000a16:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a18:	2200      	movs	r2, #0
 8000a1a:	9200      	str	r2, [sp, #0]
 8000a1c:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_MspInit+0x40>)
 8000a1e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a20:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000a24:	6459      	str	r1, [r3, #68]	; 0x44
 8000a26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000a28:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000a2c:	9100      	str	r1, [sp, #0]
 8000a2e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	9201      	str	r2, [sp, #4]
 8000a32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000a34:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000a38:	6419      	str	r1, [r3, #64]	; 0x40
 8000a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a40:	9301      	str	r3, [sp, #4]
 8000a42:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fab3 	bl	8000fb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	b003      	add	sp, #12
 8000a50:	f85d fb04 	ldr.w	pc, [sp], #4
 8000a54:	40023800 	.word	0x40023800

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b500      	push	{lr}
 8000a5a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	9303      	str	r3, [sp, #12]
 8000a60:	9304      	str	r3, [sp, #16]
 8000a62:	9305      	str	r3, [sp, #20]
 8000a64:	9306      	str	r3, [sp, #24]
 8000a66:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 8000a68:	6802      	ldr	r2, [r0, #0]
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <HAL_UART_MspInit+0x68>)
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d002      	beq.n	8000a76 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a70:	b009      	add	sp, #36	; 0x24
 8000a72:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a76:	2100      	movs	r1, #0
 8000a78:	9101      	str	r1, [sp, #4]
 8000a7a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a80:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a84:	641a      	str	r2, [r3, #64]	; 0x40
 8000a86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a88:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a90:	9102      	str	r1, [sp, #8]
 8000a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a94:	f042 0208 	orr.w	r2, r2, #8
 8000a98:	631a      	str	r2, [r3, #48]	; 0x30
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9c:	f003 0308 	and.w	r3, r3, #8
 8000aa0:	9302      	str	r3, [sp, #8]
 8000aa2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000aa4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aae:	2303      	movs	r3, #3
 8000ab0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab6:	a903      	add	r1, sp, #12
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <HAL_UART_MspInit+0x6c>)
 8000aba:	f001 f957 	bl	8001d6c <HAL_GPIO_Init>
}
 8000abe:	e7d7      	b.n	8000a70 <HAL_UART_MspInit+0x18>
 8000ac0:	40004800 	.word	0x40004800
 8000ac4:	40020c00 	.word	0x40020c00

08000ac8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ac8:	b570      	push	{r4, r5, r6, lr}
 8000aca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	2300      	movs	r3, #0
 8000ace:	9303      	str	r3, [sp, #12]
 8000ad0:	9304      	str	r3, [sp, #16]
 8000ad2:	9305      	str	r3, [sp, #20]
 8000ad4:	9306      	str	r3, [sp, #24]
 8000ad6:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 8000ad8:	6803      	ldr	r3, [r0, #0]
 8000ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ade:	d001      	beq.n	8000ae4 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ae0:	b008      	add	sp, #32
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	9501      	str	r5, [sp, #4]
 8000ae8:	4c17      	ldr	r4, [pc, #92]	; (8000b48 <HAL_PCD_MspInit+0x80>)
 8000aea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6323      	str	r3, [r4, #48]	; 0x30
 8000af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000afc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000b00:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b02:	2302      	movs	r3, #2
 8000b04:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000b0a:	230a      	movs	r3, #10
 8000b0c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0e:	4e0f      	ldr	r6, [pc, #60]	; (8000b4c <HAL_PCD_MspInit+0x84>)
 8000b10:	a903      	add	r1, sp, #12
 8000b12:	4630      	mov	r0, r6
 8000b14:	f001 f92a 	bl	8001d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b1c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000b22:	a903      	add	r1, sp, #12
 8000b24:	4630      	mov	r0, r6
 8000b26:	f001 f921 	bl	8001d6c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b30:	6363      	str	r3, [r4, #52]	; 0x34
 8000b32:	9502      	str	r5, [sp, #8]
 8000b34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3a:	6463      	str	r3, [r4, #68]	; 0x44
 8000b3c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	9b02      	ldr	r3, [sp, #8]
}
 8000b46:	e7cb      	b.n	8000ae0 <HAL_PCD_MspInit+0x18>
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020000 	.word	0x40020000

08000b50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	9301      	str	r3, [sp, #4]
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <HAL_InitTick+0x90>)
 8000b5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b5e:	f042 0210 	orr.w	r2, r2, #16
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	9301      	str	r3, [sp, #4]
 8000b6c:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b6e:	a902      	add	r1, sp, #8
 8000b70:	a803      	add	r0, sp, #12
 8000b72:	f001 fdf3 	bl	800275c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b76:	9b06      	ldr	r3, [sp, #24]
 8000b78:	b9cb      	cbnz	r3, 8000bae <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b7a:	f001 fdcf 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000b7e:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b80:	4818      	ldr	r0, [pc, #96]	; (8000be4 <HAL_InitTick+0x94>)
 8000b82:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_InitTick+0x98>)
 8000b84:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b8a:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_InitTick+0x9c>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b96:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9e:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000ba0:	f001 ff86 	bl	8002ab0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	b130      	cbz	r0, 8000bb6 <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 8000ba8:	4628      	mov	r0, r5
 8000baa:	b009      	add	sp, #36	; 0x24
 8000bac:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bae:	f001 fdb5 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8000bb2:	0043      	lsls	r3, r0, #1
 8000bb4:	e7e4      	b.n	8000b80 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bb6:	480b      	ldr	r0, [pc, #44]	; (8000be4 <HAL_InitTick+0x94>)
 8000bb8:	f001 fdf0 	bl	800279c <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8000bbc:	4605      	mov	r5, r0
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	d1f2      	bne.n	8000ba8 <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bc2:	2036      	movs	r0, #54	; 0x36
 8000bc4:	f000 fa2c 	bl	8001020 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc8:	2c0f      	cmp	r4, #15
 8000bca:	d901      	bls.n	8000bd0 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 8000bcc:	2501      	movs	r5, #1
 8000bce:	e7eb      	b.n	8000ba8 <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	2036      	movs	r0, #54	; 0x36
 8000bd6:	f000 f9ed 	bl	8000fb4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <HAL_InitTick+0xa0>)
 8000bdc:	601c      	str	r4, [r3, #0]
 8000bde:	e7e3      	b.n	8000ba8 <HAL_InitTick+0x58>
 8000be0:	40023800 	.word	0x40023800
 8000be4:	20000644 	.word	0x20000644
 8000be8:	40001000 	.word	0x40001000
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20000018 	.word	0x20000018

08000bf4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <NMI_Handler>

08000bf6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf6:	e7fe      	b.n	8000bf6 <HardFault_Handler>

08000bf8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler>

08000bfa <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler>

08000bfc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <UsageFault_Handler>

08000bfe <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	4770      	bx	lr

08000c00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c00:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c02:	4802      	ldr	r0, [pc, #8]	; (8000c0c <TIM6_DAC_IRQHandler+0xc>)
 8000c04:	f001 fe12 	bl	800282c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c08:	bd08      	pop	{r3, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000644 	.word	0x20000644

08000c10 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000c12:	4802      	ldr	r0, [pc, #8]	; (8000c1c <ETH_IRQHandler+0xc>)
 8000c14:	f000 ff14 	bl	8001a40 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000c18:	bd08      	pop	{r3, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200008a8 	.word	0x200008a8

08000c20 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000c20:	2001      	movs	r0, #1
 8000c22:	4770      	bx	lr

08000c24 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000c24:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <_kill+0xc>)
 8000c26:	2216      	movs	r2, #22
 8000c28:	601a      	str	r2, [r3, #0]
	return -1;
}
 8000c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c2e:	4770      	bx	lr
 8000c30:	20010ddc 	.word	0x20010ddc

08000c34 <_exit>:
	errno = EINVAL;
 8000c34:	4b01      	ldr	r3, [pc, #4]	; (8000c3c <_exit+0x8>)
 8000c36:	2216      	movs	r2, #22
 8000c38:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000c3a:	e7fe      	b.n	8000c3a <_exit+0x6>
 8000c3c:	20010ddc 	.word	0x20010ddc

08000c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c40:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c42:	1e16      	subs	r6, r2, #0
 8000c44:	dd07      	ble.n	8000c56 <_read+0x16>
 8000c46:	460c      	mov	r4, r1
 8000c48:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000c4a:	f3af 8000 	nop.w
 8000c4e:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d1f9      	bne.n	8000c4a <_read+0xa>
	}

return len;
}
 8000c56:	4630      	mov	r0, r6
 8000c58:	bd70      	pop	{r4, r5, r6, pc}

08000c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c5a:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	1e16      	subs	r6, r2, #0
 8000c5e:	dd07      	ble.n	8000c70 <_write+0x16>
 8000c60:	460c      	mov	r4, r1
 8000c62:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000c64:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000c68:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	42a5      	cmp	r5, r4
 8000c6e:	d1f9      	bne.n	8000c64 <_write+0xa>
	}
	return len;
}
 8000c70:	4630      	mov	r0, r6
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <_close>:

int _close(int file)
{
	return -1;
}
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	4770      	bx	lr

08000c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000c80:	2000      	movs	r0, #0
 8000c82:	4770      	bx	lr

08000c84 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000c84:	2001      	movs	r0, #1
 8000c86:	4770      	bx	lr

08000c88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000c88:	2000      	movs	r0, #0
 8000c8a:	4770      	bx	lr

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8e:	4a0c      	ldr	r2, [pc, #48]	; (8000cc0 <_sbrk+0x34>)
 8000c90:	6812      	ldr	r2, [r2, #0]
 8000c92:	b152      	cbz	r2, 8000caa <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <_sbrk+0x34>)
 8000c96:	6810      	ldr	r0, [r2, #0]
 8000c98:	4403      	add	r3, r0
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <_sbrk+0x38>)
 8000c9c:	490a      	ldr	r1, [pc, #40]	; (8000cc8 <_sbrk+0x3c>)
 8000c9e:	1a52      	subs	r2, r2, r1
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d806      	bhi.n	8000cb2 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000ca4:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <_sbrk+0x34>)
 8000ca6:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000ca8:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <_sbrk+0x34>)
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <_sbrk+0x40>)
 8000cae:	6011      	str	r1, [r2, #0]
 8000cb0:	e7f0      	b.n	8000c94 <_sbrk+0x8>
    errno = ENOMEM;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <_sbrk+0x44>)
 8000cb4:	220c      	movs	r2, #12
 8000cb6:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	2000068c 	.word	0x2000068c
 8000cc4:	20030000 	.word	0x20030000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	20010de0 	.word	0x20010de0
 8000cd0:	20010ddc 	.word	0x20010ddc

08000cd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4a03      	ldr	r2, [pc, #12]	; (8000ce4 <SystemInit+0x10>)
 8000cd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000cda:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cde:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce2:	4770      	bx	lr
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d20 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cee:	490e      	ldr	r1, [pc, #56]	; (8000d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cf0:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cf4:	e002      	b.n	8000cfc <LoopCopyDataInit>

08000cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cfa:	3304      	adds	r3, #4

08000cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d00:	d3f9      	bcc.n	8000cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d02:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d04:	4c0b      	ldr	r4, [pc, #44]	; (8000d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d08:	e001      	b.n	8000d0e <LoopFillZerobss>

08000d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d0c:	3204      	adds	r2, #4

08000d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d10:	d3fb      	bcc.n	8000d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d12:	f7ff ffdf 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d16:	f00d fa47 	bl	800e1a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d1a:	f7ff fda7 	bl	800086c <main>
  bx  lr    
 8000d1e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d20:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d28:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8000d2c:	08012b84 	.word	0x08012b84
  ldr r2, =_sbss
 8000d30:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8000d34:	20010de0 	.word	0x20010de0

08000d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d38:	e7fe      	b.n	8000d38 <ADC_IRQHandler>

08000d3a <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d3a:	b188      	cbz	r0, 8000d60 <LAN8742_RegisterBusIO+0x26>
 8000d3c:	68ca      	ldr	r2, [r1, #12]
 8000d3e:	b192      	cbz	r2, 8000d66 <LAN8742_RegisterBusIO+0x2c>
 8000d40:	688a      	ldr	r2, [r1, #8]
 8000d42:	b19a      	cbz	r2, 8000d6c <LAN8742_RegisterBusIO+0x32>
 8000d44:	690a      	ldr	r2, [r1, #16]
 8000d46:	b1a2      	cbz	r2, 8000d72 <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000d48:	680a      	ldr	r2, [r1, #0]
 8000d4a:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d4c:	684a      	ldr	r2, [r1, #4]
 8000d4e:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d50:	68ca      	ldr	r2, [r1, #12]
 8000d52:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d54:	688a      	ldr	r2, [r1, #8]
 8000d56:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d58:	690a      	ldr	r2, [r1, #16]
 8000d5a:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	4770      	bx	lr
 8000d66:	f04f 30ff 	mov.w	r0, #4294967295
 8000d6a:	4770      	bx	lr
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	4770      	bx	lr
 8000d72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000d76:	4770      	bx	lr

08000d78 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000d84:	6844      	ldr	r4, [r0, #4]
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d149      	bne.n	8000e1e <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000d8a:	6883      	ldr	r3, [r0, #8]
 8000d8c:	b103      	cbz	r3, 8000d90 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d8e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d90:	2320      	movs	r3, #32
 8000d92:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000d94:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000d96:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000d98:	f06f 0804 	mvn.w	r8, #4
 8000d9c:	e003      	b.n	8000da6 <LAN8742_Init+0x2e>
 8000d9e:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000da0:	3401      	adds	r4, #1
 8000da2:	2c20      	cmp	r4, #32
 8000da4:	d033      	beq.n	8000e0e <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000da6:	696b      	ldr	r3, [r5, #20]
 8000da8:	aa01      	add	r2, sp, #4
 8000daa:	4631      	mov	r1, r6
 8000dac:	4620      	mov	r0, r4
 8000dae:	4798      	blx	r3
 8000db0:	2800      	cmp	r0, #0
 8000db2:	dbf4      	blt.n	8000d9e <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000db4:	9b01      	ldr	r3, [sp, #4]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d1f0      	bne.n	8000da0 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000dbe:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000dc0:	692b      	ldr	r3, [r5, #16]
 8000dc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4620      	mov	r0, r4
 8000dca:	4798      	blx	r3
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	db36      	blt.n	8000e3e <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000dd0:	696b      	ldr	r3, [r5, #20]
 8000dd2:	aa01      	add	r2, sp, #4
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	6828      	ldr	r0, [r5, #0]
 8000dd8:	4798      	blx	r3
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	db32      	blt.n	8000e44 <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000dde:	69ab      	ldr	r3, [r5, #24]
 8000de0:	4798      	blx	r3
 8000de2:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000de4:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000de6:	9b01      	ldr	r3, [sp, #4]
 8000de8:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000dec:	d017      	beq.n	8000e1e <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000dee:	69ab      	ldr	r3, [r5, #24]
 8000df0:	4798      	blx	r3
 8000df2:	1b00      	subs	r0, r0, r4
 8000df4:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000df8:	d827      	bhi.n	8000e4a <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000dfa:	696b      	ldr	r3, [r5, #20]
 8000dfc:	aa01      	add	r2, sp, #4
 8000dfe:	4631      	mov	r1, r6
 8000e00:	6828      	ldr	r0, [r5, #0]
 8000e02:	4798      	blx	r3
 8000e04:	2800      	cmp	r0, #0
 8000e06:	daee      	bge.n	8000de6 <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000e08:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000e0c:	e013      	b.n	8000e36 <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e0e:	682c      	ldr	r4, [r5, #0]
 8000e10:	2c1f      	cmp	r4, #31
 8000e12:	d902      	bls.n	8000e1a <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000e14:	f06f 0702 	mvn.w	r7, #2
 8000e18:	e00d      	b.n	8000e36 <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000e1a:	b967      	cbnz	r7, 8000e36 <LAN8742_Init+0xbe>
 8000e1c:	e7d0      	b.n	8000dc0 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000e1e:	69ab      	ldr	r3, [r5, #24]
 8000e20:	4798      	blx	r3
 8000e22:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e24:	69ab      	ldr	r3, [r5, #24]
 8000e26:	4798      	blx	r3
 8000e28:	1b03      	subs	r3, r0, r4
 8000e2a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e2e:	d9f9      	bls.n	8000e24 <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	606b      	str	r3, [r5, #4]
 8000e34:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000e36:	4638      	mov	r0, r7
 8000e38:	b002      	add	sp, #8
 8000e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000e3e:	f06f 0703 	mvn.w	r7, #3
 8000e42:	e7f8      	b.n	8000e36 <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000e44:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000e48:	e7f5      	b.n	8000e36 <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000e4a:	f06f 0701 	mvn.w	r7, #1
 8000e4e:	e7f2      	b.n	8000e36 <LAN8742_Init+0xbe>

08000e50 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e50:	b510      	push	{r4, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	4604      	mov	r4, r0
  uint32_t readval = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e5a:	6943      	ldr	r3, [r0, #20]
 8000e5c:	aa01      	add	r2, sp, #4
 8000e5e:	2101      	movs	r1, #1
 8000e60:	6800      	ldr	r0, [r0, #0]
 8000e62:	4798      	blx	r3
 8000e64:	2800      	cmp	r0, #0
 8000e66:	db39      	blt.n	8000edc <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e68:	6963      	ldr	r3, [r4, #20]
 8000e6a:	aa01      	add	r2, sp, #4
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	6820      	ldr	r0, [r4, #0]
 8000e70:	4798      	blx	r3
 8000e72:	2800      	cmp	r0, #0
 8000e74:	db35      	blt.n	8000ee2 <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e76:	9b01      	ldr	r3, [sp, #4]
 8000e78:	f013 0f04 	tst.w	r3, #4
 8000e7c:	d034      	beq.n	8000ee8 <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e7e:	6963      	ldr	r3, [r4, #20]
 8000e80:	aa01      	add	r2, sp, #4
 8000e82:	2100      	movs	r1, #0
 8000e84:	6820      	ldr	r0, [r4, #0]
 8000e86:	4798      	blx	r3
 8000e88:	2800      	cmp	r0, #0
 8000e8a:	db30      	blt.n	8000eee <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e8c:	9b01      	ldr	r3, [sp, #4]
 8000e8e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000e92:	d10d      	bne.n	8000eb0 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e94:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000e98:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000e9c:	d02a      	beq.n	8000ef4 <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e9e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000ea2:	d129      	bne.n	8000ef8 <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ea4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000ea8:	bf14      	ite	ne
 8000eaa:	2004      	movne	r0, #4
 8000eac:	2005      	moveq	r0, #5
 8000eae:	e01c      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000eb0:	6963      	ldr	r3, [r4, #20]
 8000eb2:	aa01      	add	r2, sp, #4
 8000eb4:	211f      	movs	r1, #31
 8000eb6:	6820      	ldr	r0, [r4, #0]
 8000eb8:	4798      	blx	r3
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	db1e      	blt.n	8000efc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ebe:	9b01      	ldr	r3, [sp, #4]
 8000ec0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000ec4:	d01d      	beq.n	8000f02 <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000ec6:	f003 031c 	and.w	r3, r3, #28
 8000eca:	2b18      	cmp	r3, #24
 8000ecc:	d01b      	beq.n	8000f06 <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ece:	2b08      	cmp	r3, #8
 8000ed0:	d01b      	beq.n	8000f0a <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ed2:	2b14      	cmp	r3, #20
 8000ed4:	bf0c      	ite	eq
 8000ed6:	2004      	moveq	r0, #4
 8000ed8:	2005      	movne	r0, #5
 8000eda:	e006      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000edc:	f06f 0004 	mvn.w	r0, #4
 8000ee0:	e003      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000ee2:	f06f 0004 	mvn.w	r0, #4
 8000ee6:	e000      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000ee8:	2001      	movs	r0, #1
    }				
  }
}
 8000eea:	b002      	add	sp, #8
 8000eec:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 8000eee:	f06f 0004 	mvn.w	r0, #4
 8000ef2:	e7fa      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	e7f8      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ef8:	2003      	movs	r0, #3
 8000efa:	e7f6      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 8000efc:	f06f 0004 	mvn.w	r0, #4
 8000f00:	e7f3      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f02:	2006      	movs	r0, #6
 8000f04:	e7f1      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f06:	2002      	movs	r0, #2
 8000f08:	e7ef      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f0a:	2003      	movs	r0, #3
 8000f0c:	e7ed      	b.n	8000eea <LAN8742_GetLinkState+0x9a>
	...

08000f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_Init+0x30>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f1a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f22:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f2a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f82f 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	200f      	movs	r0, #15
 8000f34:	f7ff fe0c 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff fd6c 	bl	8000a14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	bd08      	pop	{r3, pc}
 8000f40:	40023c00 	.word	0x40023c00

08000f44 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f44:	4a03      	ldr	r2, [pc, #12]	; (8000f54 <HAL_IncTick+0x10>)
 8000f46:	6811      	ldr	r1, [r2, #0]
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_IncTick+0x14>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	440b      	add	r3, r1
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000690 	.word	0x20000690
 8000f58:	20000014 	.word	0x20000014

08000f5c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f5c:	4b01      	ldr	r3, [pc, #4]	; (8000f64 <HAL_GetTick+0x8>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
}
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	20000690 	.word	0x20000690

08000f68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f68:	b538      	push	{r3, r4, r5, lr}
 8000f6a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f6c:	f7ff fff6 	bl	8000f5c <HAL_GetTick>
 8000f70:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000f76:	d002      	beq.n	8000f7e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_Delay+0x24>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f7e:	f7ff ffed 	bl	8000f5c <HAL_GetTick>
 8000f82:	1b40      	subs	r0, r0, r5
 8000f84:	42a0      	cmp	r0, r4
 8000f86:	d3fa      	bcc.n	8000f7e <HAL_Delay+0x16>
  {
  }
}
 8000f88:	bd38      	pop	{r3, r4, r5, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000014 	.word	0x20000014

08000f90 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f92:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	0203      	lsls	r3, r0, #8
 8000f96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000f9e:	0412      	lsls	r2, r2, #16
 8000fa0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000fac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000fae:	4770      	bx	lr
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fb4:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb6:	4b18      	ldr	r3, [pc, #96]	; (8001018 <HAL_NVIC_SetPriority+0x64>)
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbe:	f1c3 0c07 	rsb	ip, r3, #7
 8000fc2:	f1bc 0f04 	cmp.w	ip, #4
 8000fc6:	bf28      	it	cs
 8000fc8:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fcc:	f103 0e04 	add.w	lr, r3, #4
 8000fd0:	f1be 0f06 	cmp.w	lr, #6
 8000fd4:	bf8c      	ite	hi
 8000fd6:	3b03      	subhi	r3, #3
 8000fd8:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fda:	f04f 3eff 	mov.w	lr, #4294967295
 8000fde:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000fe2:	ea21 010c 	bic.w	r1, r1, ip
 8000fe6:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe8:	fa0e f303 	lsl.w	r3, lr, r3
 8000fec:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000ff2:	2800      	cmp	r0, #0
 8000ff4:	db09      	blt.n	800100a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff6:	0109      	lsls	r1, r1, #4
 8000ff8:	b2c9      	uxtb	r1, r1
 8000ffa:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ffe:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001002:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001006:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	f000 000f 	and.w	r0, r0, #15
 800100e:	0109      	lsls	r1, r1, #4
 8001010:	b2c9      	uxtb	r1, r1
 8001012:	4b02      	ldr	r3, [pc, #8]	; (800101c <HAL_NVIC_SetPriority+0x68>)
 8001014:	5419      	strb	r1, [r3, r0]
 8001016:	e7f6      	b.n	8001006 <HAL_NVIC_SetPriority+0x52>
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	e000ed14 	.word	0xe000ed14

08001020 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001020:	2800      	cmp	r0, #0
 8001022:	db08      	blt.n	8001036 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001024:	0942      	lsrs	r2, r0, #5
 8001026:	f000 001f 	and.w	r0, r0, #31
 800102a:	2301      	movs	r3, #1
 800102c:	fa03 f000 	lsl.w	r0, r3, r0
 8001030:	4b01      	ldr	r3, [pc, #4]	; (8001038 <HAL_NVIC_EnableIRQ+0x18>)
 8001032:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100

0800103c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800103c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001040:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001042:	2300      	movs	r3, #0
 8001044:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001046:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001048:	f107 0312 	add.w	r3, r7, #18
 800104c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001050:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 8001052:	2d00      	cmp	r5, #0
 8001054:	d035      	beq.n	80010c2 <ETH_UpdateDescriptor+0x86>
 8001056:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001058:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800105c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80010c8 <ETH_UpdateDescriptor+0x8c>
 8001060:	e01a      	b.n	8001098 <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 8001062:	a801      	add	r0, sp, #4
 8001064:	f002 fb3e 	bl	80036e4 <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8001068:	9b01      	ldr	r3, [sp, #4]
 800106a:	b1f3      	cbz	r3, 80010aa <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800106c:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800106e:	60a3      	str	r3, [r4, #8]
 8001070:	e015      	b.n	800109e <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001072:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001076:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001080:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001082:	1c7b      	adds	r3, r7, #1
 8001084:	2b03      	cmp	r3, #3
 8001086:	bf8c      	ite	hi
 8001088:	3f03      	subhi	r7, #3
 800108a:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800108c:	f107 0312 	add.w	r3, r7, #18
 8001090:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001094:	3d01      	subs	r5, #1
 8001096:	d009      	beq.n	80010ac <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001098:	6a23      	ldr	r3, [r4, #32]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0e1      	beq.n	8001062 <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 800109e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d1e6      	bne.n	8001072 <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80010a4:	f8c4 8004 	str.w	r8, [r4, #4]
 80010a8:	e7e5      	b.n	8001076 <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 80010aa:	b905      	cbnz	r5, 80010ae <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 80010ac:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80010ae:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80010b0:	42ab      	cmp	r3, r5
 80010b2:	d006      	beq.n	80010c2 <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80010b4:	6833      	ldr	r3, [r6, #0]
 80010b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80010be:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80010c0:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 80010c2:	b003      	add	sp, #12
 80010c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010c8:	800045f8 	.word	0x800045f8

080010cc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80010cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80010d0:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010d2:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80010d6:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80010da:	681c      	ldr	r4, [r3, #0]
 80010dc:	2c00      	cmp	r4, #0
 80010de:	f2c0 80ad 	blt.w	800123c <ETH_Prepare_Tx_Descriptors+0x170>
 80010e2:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80010e4:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 80010e8:	2c00      	cmp	r4, #0
 80010ea:	f040 80a9 	bne.w	8001240 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80010ee:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80010f0:	6825      	ldr	r5, [r4, #0]
 80010f2:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80010f4:	685e      	ldr	r6, [r3, #4]
 80010f6:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 80010fa:	f026 061f 	bic.w	r6, r6, #31
 80010fe:	6865      	ldr	r5, [r4, #4]
 8001100:	4335      	orrs	r5, r6
 8001102:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001104:	680d      	ldr	r5, [r1, #0]
 8001106:	f015 0f01 	tst.w	r5, #1
 800110a:	d005      	beq.n	8001118 <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800110c:	681e      	ldr	r6, [r3, #0]
 800110e:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 8001112:	694d      	ldr	r5, [r1, #20]
 8001114:	4335      	orrs	r5, r6
 8001116:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001118:	680d      	ldr	r5, [r1, #0]
 800111a:	f015 0f20 	tst.w	r5, #32
 800111e:	d005      	beq.n	800112c <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001120:	681e      	ldr	r6, [r3, #0]
 8001122:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 8001126:	690d      	ldr	r5, [r1, #16]
 8001128:	4335      	orrs	r5, r6
 800112a:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800112c:	6809      	ldr	r1, [r1, #0]
 800112e:	f011 0f04 	tst.w	r1, #4
 8001132:	d003      	beq.n	800113c <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800113a:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800113c:	6819      	ldr	r1, [r3, #0]
 800113e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001142:	6019      	str	r1, [r3, #0]
 8001144:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800114e:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001150:	68a1      	ldr	r1, [r4, #8]
 8001152:	2900      	cmp	r1, #0
 8001154:	d053      	beq.n	80011fe <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001156:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 8001158:	2601      	movs	r6, #1
 800115a:	e02c      	b.n	80011b6 <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 8001162:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001164:	1c6b      	adds	r3, r5, #1
 8001166:	2b03      	cmp	r3, #3
 8001168:	bf8c      	ite	hi
 800116a:	3d03      	subhi	r5, #3
 800116c:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800116e:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 8001172:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800117c:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	2900      	cmp	r1, #0
 8001182:	db24      	blt.n	80011ce <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001184:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 8001188:	bb09      	cbnz	r1, 80011ce <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800118a:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800118c:	6821      	ldr	r1, [r4, #0]
 800118e:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001190:	6859      	ldr	r1, [r3, #4]
 8001192:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 8001196:	f021 011f 	bic.w	r1, r1, #31
 800119a:	6862      	ldr	r2, [r4, #4]
 800119c:	4311      	orrs	r1, r2
 800119e:	6059      	str	r1, [r3, #4]
 80011a0:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80011aa:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 80011ac:	f106 0e01 	add.w	lr, r6, #1
 80011b0:	68a1      	ldr	r1, [r4, #8]
 80011b2:	b331      	cbz	r1, 8001202 <ETH_Prepare_Tx_Descriptors+0x136>
 80011b4:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 80011bc:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80011be:	f1b8 0f00 	cmp.w	r8, #0
 80011c2:	d0cb      	beq.n	800115c <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80011c4:	6819      	ldr	r1, [r3, #0]
 80011c6:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80011ca:	6019      	str	r1, [r3, #0]
 80011cc:	e7ca      	b.n	8001164 <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80011ce:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d037      	beq.n	8001246 <ETH_Prepare_Tx_Descriptors+0x17a>
 80011d6:	2100      	movs	r1, #0
 80011d8:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80011dc:	6813      	ldr	r3, [r2, #0]
 80011de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011e2:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 80011e4:	1c7b      	adds	r3, r7, #1
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	bf8c      	ite	hi
 80011ea:	3f03      	subhi	r7, #3
 80011ec:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80011ee:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 80011f2:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80011f4:	3101      	adds	r1, #1
 80011f6:	428e      	cmp	r6, r1
 80011f8:	d1ee      	bne.n	80011d8 <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 80011fa:	2002      	movs	r0, #2
 80011fc:	e021      	b.n	8001242 <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80011fe:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 8001200:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 8001202:	f1b8 0f00 	cmp.w	r8, #0
 8001206:	d014      	beq.n	8001232 <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800120e:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001216:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001218:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 800121c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8001220:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 8001222:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8001224:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001226:	3301      	adds	r3, #1
 8001228:	441e      	add	r6, r3
 800122a:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800122c:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800122e:	2000      	movs	r0, #0
 8001230:	e007      	b.n	8001242 <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	e7e9      	b.n	8001210 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 800123c:	2002      	movs	r0, #2
 800123e:	e000      	b.n	8001242 <ETH_Prepare_Tx_Descriptors+0x176>
 8001240:	2002      	movs	r0, #2
}
 8001242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 8001246:	2002      	movs	r0, #2
 8001248:	e7fb      	b.n	8001242 <ETH_Prepare_Tx_Descriptors+0x176>
	...

0800124c <ETH_SetMACConfig>:
{
 800124c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001250:	4605      	mov	r5, r0
 8001252:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 8001254:	6801      	ldr	r1, [r0, #0]
 8001256:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001258:	4e3b      	ldr	r6, [pc, #236]	; (8001348 <ETH_SetMACConfig+0xfc>)
 800125a:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800125c:	7c23      	ldrb	r3, [r4, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	bf0c      	ite	eq
 8001262:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 8001266:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800126a:	7c63      	ldrb	r3, [r4, #17]
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf0c      	ite	eq
 8001270:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 8001274:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001278:	f894 801f 	ldrb.w	r8, [r4, #31]
 800127c:	68a3      	ldr	r3, [r4, #8]
 800127e:	6962      	ldr	r2, [r4, #20]
 8001280:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001282:	7fa2      	ldrb	r2, [r4, #30]
 8001284:	2a00      	cmp	r2, #0
 8001286:	bf0c      	ite	eq
 8001288:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 800128c:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800128e:	f894 901c 	ldrb.w	r9, [r4, #28]
 8001292:	69a2      	ldr	r2, [r4, #24]
 8001294:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001296:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001298:	f894 2020 	ldrb.w	r2, [r4, #32]
 800129c:	2a00      	cmp	r2, #0
 800129e:	bf0c      	ite	eq
 80012a0:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 80012a4:	f04f 0a00 	movne.w	sl, #0
 80012a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012aa:	4313      	orrs	r3, r2
 80012ac:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80012b0:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 80012b4:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80012b8:	7be7      	ldrb	r7, [r4, #15]
 80012ba:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80012be:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 80012c2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80012c6:	4333      	orrs	r3, r6
 80012c8:	ea43 030e 	orr.w	r3, r3, lr
 80012cc:	ea43 030c 	orr.w	r3, r3, ip
 80012d0:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012d2:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80012d6:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80012d8:	682b      	ldr	r3, [r5, #0]
 80012da:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff fe43 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012e2:	682b      	ldr	r3, [r5, #0]
 80012e4:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 80012e6:	6828      	ldr	r0, [r5, #0]
 80012e8:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012ea:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80012ee:	0409      	lsls	r1, r1, #16
 80012f0:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012f2:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012f4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2380      	moveq	r3, #128	; 0x80
 80012fe:	2300      	movne	r3, #0
 8001300:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001302:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8001306:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001308:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 800130c:	2901      	cmp	r1, #1
 800130e:	bf0c      	ite	eq
 8001310:	2108      	moveq	r1, #8
 8001312:	2100      	movne	r1, #0
 8001314:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001316:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 800131a:	2b01      	cmp	r3, #1
 800131c:	bf0c      	ite	eq
 800131e:	2304      	moveq	r3, #4
 8001320:	2300      	movne	r3, #0
 8001322:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001324:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8001328:	2901      	cmp	r1, #1
 800132a:	bf0c      	ite	eq
 800132c:	2102      	moveq	r1, #2
 800132e:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001330:	4313      	orrs	r3, r2
 8001332:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001334:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fe14 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001340:	682b      	ldr	r3, [r5, #0]
 8001342:	619c      	str	r4, [r3, #24]
}
 8001344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001348:	ff20810f 	.word	0xff20810f

0800134c <ETH_SetDMAConfig>:
{
 800134c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800134e:	4605      	mov	r5, r0
 8001350:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001352:	6802      	ldr	r2, [r0, #0]
 8001354:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001358:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800135a:	482c      	ldr	r0, [pc, #176]	; (800140c <ETH_SetDMAConfig+0xc0>)
 800135c:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800135e:	7b0b      	ldrb	r3, [r1, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf0c      	ite	eq
 8001364:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001368:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800136a:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800136e:	7f4b      	ldrb	r3, [r1, #29]
 8001370:	2b00      	cmp	r3, #0
 8001372:	bf0c      	ite	eq
 8001374:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001378:	2100      	movne	r1, #0
 800137a:	6963      	ldr	r3, [r4, #20]
 800137c:	6a27      	ldr	r7, [r4, #32]
 800137e:	433b      	orrs	r3, r7
 8001380:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001384:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001388:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800138c:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001390:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001394:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8001398:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800139c:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 80013a0:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 80013a4:	4303      	orrs	r3, r0
 80013a6:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013a8:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013ae:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b6:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b8:	2001      	movs	r0, #1
 80013ba:	f7ff fdd5 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c4:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013c6:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013c8:	68a3      	ldr	r3, [r4, #8]
 80013ca:	69a1      	ldr	r1, [r4, #24]
 80013cc:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013ce:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013d2:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80013d6:	6921      	ldr	r1, [r4, #16]
 80013d8:	430b      	orrs	r3, r1
 80013da:	6821      	ldr	r1, [r4, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80013e0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013e4:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013e6:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013f2:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80013f4:	682b      	ldr	r3, [r5, #0]
 80013f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fa:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f7ff fdb3 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001408:	601c      	str	r4, [r3, #0]
}
 800140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140c:	f8de3f23 	.word	0xf8de3f23

08001410 <ETH_FlushTransmitFIFO>:
{
 8001410:	b510      	push	{r4, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800141a:	6803      	ldr	r3, [r0, #0]
 800141c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001420:	699a      	ldr	r2, [r3, #24]
 8001422:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001426:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8001428:	6803      	ldr	r3, [r0, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fd98 	bl	8000f68 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	9a01      	ldr	r2, [sp, #4]
 800143c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001440:	619a      	str	r2, [r3, #24]
}
 8001442:	b002      	add	sp, #8
 8001444:	bd10      	pop	{r4, pc}
	...

08001448 <HAL_ETH_Init>:
  if (heth == NULL)
 8001448:	2800      	cmp	r0, #0
 800144a:	f000 8109 	beq.w	8001660 <HAL_ETH_Init+0x218>
{
 800144e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001450:	b0a7      	sub	sp, #156	; 0x9c
 8001452:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001454:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001458:	2b00      	cmp	r3, #0
 800145a:	d034      	beq.n	80014c6 <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145c:	2300      	movs	r3, #0
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	4b80      	ldr	r3, [pc, #512]	; (8001664 <HAL_ETH_Init+0x21c>)
 8001462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001468:	645a      	str	r2, [r3, #68]	; 0x44
 800146a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001474:	4b7c      	ldr	r3, [pc, #496]	; (8001668 <HAL_ETH_Init+0x220>)
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800147c:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	68a9      	ldr	r1, [r5, #8]
 8001482:	430a      	orrs	r2, r1
 8001484:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 8001486:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001488:	682b      	ldr	r3, [r5, #0]
 800148a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	f042 0201 	orr.w	r2, r2, #1
 8001494:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8001496:	f7ff fd61 	bl	8000f5c <HAL_GetTick>
 800149a:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a2:	681c      	ldr	r4, [r3, #0]
 80014a4:	f014 0401 	ands.w	r4, r4, #1
 80014a8:	d013      	beq.n	80014d2 <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014aa:	f7ff fd57 	bl	8000f5c <HAL_GetTick>
 80014ae:	1b80      	subs	r0, r0, r6
 80014b0:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80014b4:	d9f2      	bls.n	800149c <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80014b6:	2304      	movs	r3, #4
 80014b8:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80014bc:	23e0      	movs	r3, #224	; 0xe0
 80014be:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 80014c2:	2001      	movs	r0, #1
 80014c4:	e0ca      	b.n	800165c <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 80014c6:	2323      	movs	r3, #35	; 0x23
 80014c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80014cc:	f002 f810 	bl	80034f0 <HAL_ETH_MspInit>
 80014d0:	e7c4      	b.n	800145c <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 80014d2:	2701      	movs	r7, #1
 80014d4:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80014d8:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80014dc:	2600      	movs	r6, #0
 80014de:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80014e0:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80014e4:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80014e8:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80014ec:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80014f0:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80014f4:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014f8:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014fa:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014fe:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001500:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001504:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001506:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800150a:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800150e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001512:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001514:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001518:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800151a:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 800151e:	a90d      	add	r1, sp, #52	; 0x34
 8001520:	4628      	mov	r0, r5
 8001522:	f7ff fe93 	bl	800124c <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001526:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800152a:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800152e:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001532:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001536:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001538:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800153c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001540:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001542:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001546:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800154a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800154e:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001550:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001554:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800155a:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800155c:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001560:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001562:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001564:	a902      	add	r1, sp, #8
 8001566:	4628      	mov	r0, r5
 8001568:	f7ff fef0 	bl	800134c <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800156c:	f105 0c18 	add.w	ip, r5, #24
 8001570:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001572:	4630      	mov	r0, r6
 8001574:	e00a      	b.n	800158c <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001576:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 800157a:	68ee      	ldr	r6, [r5, #12]
 800157c:	4476      	add	r6, lr
 800157e:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001580:	58d1      	ldr	r1, [r2, r3]
 8001582:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 8001586:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001588:	3328      	adds	r3, #40	; 0x28
 800158a:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 800158c:	68ea      	ldr	r2, [r5, #12]
 800158e:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001590:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001592:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001594:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001596:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001598:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800159c:	58d6      	ldr	r6, [r2, r3]
 800159e:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 80015a2:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80015a4:	1e7e      	subs	r6, r7, #1
 80015a6:	2e02      	cmp	r6, #2
 80015a8:	d9e5      	bls.n	8001576 <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80015aa:	68ee      	ldr	r6, [r5, #12]
 80015ac:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015ae:	58d1      	ldr	r1, [r2, r3]
 80015b0:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 80015b4:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015b6:	2f03      	cmp	r7, #3
 80015b8:	d9e6      	bls.n	8001588 <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015be:	682b      	ldr	r3, [r5, #0]
 80015c0:	68ea      	ldr	r2, [r5, #12]
 80015c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c6:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015c8:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015cc:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80015ce:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80015d0:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80015d4:	f244 57f8 	movw	r7, #17912	; 0x45f8
 80015d8:	e006      	b.n	80015e8 <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80015da:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80015de:	692a      	ldr	r2, [r5, #16]
 80015e0:	4472      	add	r2, lr
 80015e2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015e4:	3428      	adds	r4, #40	; 0x28
 80015e6:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 80015e8:	692a      	ldr	r2, [r5, #16]
 80015ea:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80015ec:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80015ee:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80015f0:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80015f2:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80015f4:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80015f6:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80015f8:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80015fc:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001604:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001606:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800160a:	1e42      	subs	r2, r0, #1
 800160c:	2a02      	cmp	r2, #2
 800160e:	d9e4      	bls.n	80015da <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001610:	692a      	ldr	r2, [r5, #16]
 8001612:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001614:	2803      	cmp	r0, #3
 8001616:	d9e5      	bls.n	80015e4 <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001618:	2000      	movs	r0, #0
 800161a:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800161c:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800161e:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001620:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001622:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	692a      	ldr	r2, [r5, #16]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800162e:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001630:	7951      	ldrb	r1, [r2, #5]
 8001632:	7913      	ldrb	r3, [r2, #4]
 8001634:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <HAL_ETH_Init+0x224>)
 800163a:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800163c:	78d4      	ldrb	r4, [r2, #3]
 800163e:	7893      	ldrb	r3, [r2, #2]
 8001640:	041b      	lsls	r3, r3, #16
 8001642:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8001646:	7814      	ldrb	r4, [r2, #0]
 8001648:	4323      	orrs	r3, r4
 800164a:	7852      	ldrb	r2, [r2, #1]
 800164c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001650:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001652:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001656:	2310      	movs	r3, #16
 8001658:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 800165c:	b027      	add	sp, #156	; 0x9c
 800165e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
}
 8001662:	4770      	bx	lr
 8001664:	40023800 	.word	0x40023800
 8001668:	40013800 	.word	0x40013800
 800166c:	40028000 	.word	0x40028000

08001670 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001670:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001674:	2b10      	cmp	r3, #16
 8001676:	d001      	beq.n	800167c <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 8001678:	2001      	movs	r0, #1
}
 800167a:	4770      	bx	lr
{
 800167c:	b570      	push	{r4, r5, r6, lr}
 800167e:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001680:	2523      	movs	r5, #35	; 0x23
 8001682:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001686:	2304      	movs	r3, #4
 8001688:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 800168a:	f7ff fcd7 	bl	800103c <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800168e:	6822      	ldr	r2, [r4, #0]
 8001690:	6813      	ldr	r3, [r2, #0]
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800169c:	2001      	movs	r0, #1
 800169e:	f7ff fc63 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016a6:	6822      	ldr	r2, [r4, #0]
 80016a8:	6813      	ldr	r3, [r2, #0]
 80016aa:	f043 0304 	orr.w	r3, r3, #4
 80016ae:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016b4:	2001      	movs	r0, #1
 80016b6:	f7ff fc57 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016ba:	6823      	ldr	r3, [r4, #0]
 80016bc:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80016be:	4620      	mov	r0, r4
 80016c0:	f7ff fea6 	bl	8001410 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016ca:	699a      	ldr	r2, [r3, #24]
 80016cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80016d0:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016d2:	6823      	ldr	r3, [r4, #0]
 80016d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	f042 0202 	orr.w	r2, r2, #2
 80016de:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 80016e0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 80016e4:	2000      	movs	r0, #0
}
 80016e6:	bd70      	pop	{r4, r5, r6, pc}

080016e8 <HAL_ETH_Start_IT>:
{
 80016e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80016ea:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80016ee:	2b10      	cmp	r3, #16
 80016f0:	d001      	beq.n	80016f6 <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80016f2:	2001      	movs	r0, #1
}
 80016f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f6:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80016f8:	2523      	movs	r5, #35	; 0x23
 80016fa:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 80016fe:	2601      	movs	r6, #1
 8001700:	6586      	str	r6, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001706:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 800170a:	63d3      	str	r3, [r2, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800170c:	6802      	ldr	r2, [r0, #0]
 800170e:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 8001712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001716:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800171a:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800171e:	6802      	ldr	r2, [r0, #0]
 8001720:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 8001724:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 8001728:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800172c:	2304      	movs	r3, #4
 800172e:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001730:	f7ff fc84 	bl	800103c <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001734:	6822      	ldr	r2, [r4, #0]
 8001736:	6813      	ldr	r3, [r2, #0]
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001742:	4630      	mov	r0, r6
 8001744:	f7ff fc10 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001748:	6823      	ldr	r3, [r4, #0]
 800174a:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800174c:	6822      	ldr	r2, [r4, #0]
 800174e:	6813      	ldr	r3, [r2, #0]
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001756:	6823      	ldr	r3, [r4, #0]
 8001758:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800175a:	4630      	mov	r0, r6
 800175c:	f7ff fc04 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	601f      	str	r7, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 8001764:	4620      	mov	r0, r4
 8001766:	f7ff fe53 	bl	8001410 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001770:	699a      	ldr	r2, [r3, #24]
 8001772:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001776:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800177e:	699a      	ldr	r2, [r3, #24]
 8001780:	f042 0202 	orr.w	r2, r2, #2
 8001784:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001786:	6822      	ldr	r2, [r4, #0]
 8001788:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800178c:	69d3      	ldr	r3, [r2, #28]
 800178e:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001792:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001796:	61d3      	str	r3, [r2, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001798:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 800179c:	2000      	movs	r0, #0
 800179e:	e7a9      	b.n	80016f4 <HAL_ETH_Start_IT+0xc>

080017a0 <HAL_ETH_Stop_IT>:
{
 80017a0:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80017a2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80017a6:	2b23      	cmp	r3, #35	; 0x23
 80017a8:	d001      	beq.n	80017ae <HAL_ETH_Stop_IT+0xe>
    return HAL_ERROR;
 80017aa:	2001      	movs	r0, #1
}
 80017ac:	bd38      	pop	{r3, r4, r5, pc}
 80017ae:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80017b0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80017b4:	6802      	ldr	r2, [r0, #0]
 80017b6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017ba:	69d3      	ldr	r3, [r2, #28]
 80017bc:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80017c0:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80017c4:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80017c6:	6803      	ldr	r3, [r0, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017cc:	699a      	ldr	r2, [r3, #24]
 80017ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017d2:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80017d4:	6803      	ldr	r3, [r0, #0]
 80017d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017da:	699a      	ldr	r2, [r3, #24]
 80017dc:	f022 0202 	bic.w	r2, r2, #2
 80017e0:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80017e2:	6802      	ldr	r2, [r0, #0]
 80017e4:	6813      	ldr	r3, [r2, #0]
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80017ec:	6803      	ldr	r3, [r0, #0]
 80017ee:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff fbb9 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff fe08 	bl	8001410 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001800:	6822      	ldr	r2, [r4, #0]
 8001802:	6813      	ldr	r3, [r2, #0]
 8001804:	f023 0308 	bic.w	r3, r3, #8
 8001808:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800180e:	2001      	movs	r0, #1
 8001810:	f7ff fbaa 	bl	8000f68 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001814:	4622      	mov	r2, r4
 8001816:	f852 3b48 	ldr.w	r3, [r2], #72
 800181a:	601d      	str	r5, [r3, #0]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800181c:	f104 0058 	add.w	r0, r4, #88	; 0x58
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001820:	f852 1b04 	ldr.w	r1, [r2], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001824:	684b      	ldr	r3, [r1, #4]
 8001826:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800182a:	604b      	str	r3, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800182c:	4282      	cmp	r2, r0
 800182e:	d1f7      	bne.n	8001820 <HAL_ETH_Stop_IT+0x80>
    heth->RxDescList.ItMode = 0U;
 8001830:	2000      	movs	r0, #0
 8001832:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 8001834:	2310      	movs	r3, #16
 8001836:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 800183a:	e7b7      	b.n	80017ac <HAL_ETH_Stop_IT+0xc>

0800183c <HAL_ETH_Transmit_IT>:
{
 800183c:	b510      	push	{r4, lr}
 800183e:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001840:	b129      	cbz	r1, 800184e <HAL_ETH_Transmit_IT+0x12>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001842:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8001846:	2b23      	cmp	r3, #35	; 0x23
 8001848:	d009      	beq.n	800185e <HAL_ETH_Transmit_IT+0x22>
    return HAL_ERROR;
 800184a:	2001      	movs	r0, #1
}
 800184c:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800184e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 800185a:	2001      	movs	r0, #1
 800185c:	e7f6      	b.n	800184c <HAL_ETH_Transmit_IT+0x10>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800185e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001860:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001862:	2201      	movs	r2, #1
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff fc31 	bl	80010cc <ETH_Prepare_Tx_Descriptors>
 800186a:	b138      	cbz	r0, 800187c <HAL_ETH_Transmit_IT+0x40>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800186c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001878:	2001      	movs	r0, #1
 800187a:	e7e7      	b.n	800184c <HAL_ETH_Transmit_IT+0x10>
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001880:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	2a03      	cmp	r2, #3
 8001886:	bf92      	itee	ls
 8001888:	62a2      	strls	r2, [r4, #40]	; 0x28
 800188a:	3b03      	subhi	r3, #3
 800188c:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800188e:	6823      	ldr	r3, [r4, #0]
 8001890:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001894:	6952      	ldr	r2, [r2, #20]
 8001896:	f012 0f04 	tst.w	r2, #4
 800189a:	d009      	beq.n	80018b0 <HAL_ETH_Transmit_IT+0x74>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800189c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a0:	2204      	movs	r2, #4
 80018a2:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018aa:	2000      	movs	r0, #0
 80018ac:	6058      	str	r0, [r3, #4]
 80018ae:	e7cd      	b.n	800184c <HAL_ETH_Transmit_IT+0x10>
    return HAL_OK;
 80018b0:	2000      	movs	r0, #0
 80018b2:	e7cb      	b.n	800184c <HAL_ETH_Transmit_IT+0x10>

080018b4 <HAL_ETH_ReadData>:
{
 80018b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b8:	b085      	sub	sp, #20
 80018ba:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 80018bc:	9103      	str	r1, [sp, #12]
 80018be:	b1e1      	cbz	r1, 80018fa <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80018c0:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80018c4:	2b23      	cmp	r3, #35	; 0x23
 80018c6:	d17e      	bne.n	80019c6 <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 80018c8:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018ca:	f107 0312 	add.w	r3, r7, #18
 80018ce:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80018d2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80018d4:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	2a00      	cmp	r2, #0
 80018dc:	f2c0 8083 	blt.w	80019e6 <HAL_ETH_ReadData+0x132>
 80018e0:	f1bb 0f00 	cmp.w	fp, #0
 80018e4:	d066      	beq.n	80019b4 <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 80018e6:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80018ea:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80018ee:	9301      	str	r3, [sp, #4]
 80018f0:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 80018f4:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 80018f6:	46c1      	mov	r9, r8
 80018f8:	e037      	b.n	800196a <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80018fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001906:	2001      	movs	r0, #1
 8001908:	e05e      	b.n	80019c8 <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 8001910:	bf1c      	itt	ne
 8001912:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001916:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001920:	d134      	bne.n	800198c <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 8001922:	696e      	ldr	r6, [r5, #20]
 8001924:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001926:	68a2      	ldr	r2, [r4, #8]
 8001928:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800192a:	b2b3      	uxth	r3, r6
 800192c:	9901      	ldr	r1, [sp, #4]
 800192e:	9802      	ldr	r0, [sp, #8]
 8001930:	f001 fefe 	bl	8003730 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 8001934:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8001936:	3301      	adds	r3, #1
 8001938:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800193a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800193c:	4433      	add	r3, r6
 800193e:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001940:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001944:	1c7b      	adds	r3, r7, #1
 8001946:	2b03      	cmp	r3, #3
 8001948:	bf8c      	ite	hi
 800194a:	3f03      	subhi	r7, #3
 800194c:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800194e:	f107 0312 	add.w	r3, r7, #18
 8001952:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 8001956:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db1f      	blt.n	80019a0 <HAL_ETH_ReadData+0xec>
 8001960:	45c3      	cmp	fp, r8
 8001962:	d01c      	beq.n	800199e <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 8001964:	f1ba 0f00 	cmp.w	sl, #0
 8001968:	d131      	bne.n	80019ce <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800196a:	6823      	ldr	r3, [r4, #0]
 800196c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001970:	d003      	beq.n	800197a <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001972:	69a3      	ldr	r3, [r4, #24]
 8001974:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001976:	69e3      	ldr	r3, [r4, #28]
 8001978:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001980:	d1c3      	bne.n	800190a <HAL_ETH_ReadData+0x56>
 8001982:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1c0      	bne.n	800190a <HAL_ETH_ReadData+0x56>
 8001988:	46ca      	mov	sl, r9
 800198a:	e7db      	b.n	8001944 <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800198c:	6826      	ldr	r6, [r4, #0]
 800198e:	f3c6 460d 	ubfx	r6, r6, #16, #14
 8001992:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 8001998:	f04f 0a01 	mov.w	sl, #1
 800199c:	e7c3      	b.n	8001926 <HAL_ETH_ReadData+0x72>
    desccnt++;
 800199e:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019a0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80019a2:	4443      	add	r3, r8
 80019a4:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019a6:	b93b      	cbnz	r3, 80019b8 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80019a8:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 80019aa:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 80019ac:	f1ba 0f00 	cmp.w	sl, #0
 80019b0:	d00a      	beq.n	80019c8 <HAL_ETH_ReadData+0x114>
 80019b2:	e012      	b.n	80019da <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 80019b4:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 80019b8:	4628      	mov	r0, r5
 80019ba:	f7ff fb3f 	bl	800103c <ETH_UpdateDescriptor>
 80019be:	e7f3      	b.n	80019a8 <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 80019c0:	f04f 0a00 	mov.w	sl, #0
 80019c4:	e7f8      	b.n	80019b8 <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
}
 80019c8:	b005      	add	sp, #20
 80019ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80019ce:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80019d0:	4443      	add	r3, r8
 80019d2:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1ef      	bne.n	80019b8 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80019d8:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 80019da:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80019dc:	9a03      	ldr	r2, [sp, #12]
 80019de:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 80019e0:	2000      	movs	r0, #0
 80019e2:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 80019e4:	e7f0      	b.n	80019c8 <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ea      	bne.n	80019c0 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 80019ea:	2001      	movs	r0, #1
 80019ec:	e7ec      	b.n	80019c8 <HAL_ETH_ReadData+0x114>

080019ee <HAL_ETH_ReleaseTxPacket>:
{
 80019ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80019f2:	6c05      	ldr	r5, [r0, #64]	; 0x40
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80019f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80019f6:	b1a5      	cbz	r5, 8001a22 <HAL_ETH_ReleaseTxPacket+0x34>
 80019f8:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 80019fa:	f04f 0800 	mov.w	r8, #0
 80019fe:	e003      	b.n	8001a08 <HAL_ETH_ReleaseTxPacket+0x1a>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a00:	3401      	adds	r4, #1
 8001a02:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a06:	b165      	cbz	r5, 8001a22 <HAL_ETH_ReleaseTxPacket+0x34>
    numOfBuf--;
 8001a08:	3d01      	subs	r5, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a0a:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 8001a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d0f5      	beq.n	8001a00 <HAL_ETH_ReleaseTxPacket+0x12>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001a18:	68f2      	ldr	r2, [r6, #12]
 8001a1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da02      	bge.n	8001a28 <HAL_ETH_ReleaseTxPacket+0x3a>
}
 8001a22:	2000      	movs	r0, #0
 8001a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a28:	f001 fe9d 	bl	8003766 <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a2c:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a30:	3401      	adds	r4, #1
 8001a32:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a36:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8001a38:	6474      	str	r4, [r6, #68]	; 0x44
 8001a3a:	e7e4      	b.n	8001a06 <HAL_ETH_ReleaseTxPacket+0x18>

08001a3c <HAL_ETH_PMTCallback>:
}
 8001a3c:	4770      	bx	lr

08001a3e <HAL_ETH_WakeUpCallback>:
}
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_IRQHandler>:
{
 8001a40:	b510      	push	{r4, lr}
 8001a42:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001a44:	6803      	ldr	r3, [r0, #0]
 8001a46:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a4a:	6952      	ldr	r2, [r2, #20]
 8001a4c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a50:	d005      	beq.n	8001a5e <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001a52:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a56:	69d2      	ldr	r2, [r2, #28]
 8001a58:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001a5c:	d147      	bne.n	8001aee <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001a5e:	6823      	ldr	r3, [r4, #0]
 8001a60:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a64:	6952      	ldr	r2, [r2, #20]
 8001a66:	f012 0f01 	tst.w	r2, #1
 8001a6a:	d005      	beq.n	8001a78 <HAL_ETH_IRQHandler+0x38>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001a6c:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a70:	69d2      	ldr	r2, [r2, #28]
 8001a72:	f012 0f01 	tst.w	r2, #1
 8001a76:	d141      	bne.n	8001afc <HAL_ETH_IRQHandler+0xbc>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a7e:	6952      	ldr	r2, [r2, #20]
 8001a80:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a84:	d028      	beq.n	8001ad8 <HAL_ETH_IRQHandler+0x98>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001a86:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001a8a:	69d2      	ldr	r2, [r2, #28]
 8001a8c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001a90:	d022      	beq.n	8001ad8 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001a92:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001a9e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001aa2:	6952      	ldr	r2, [r2, #20]
 8001aa4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001aa8:	d031      	beq.n	8001b0e <HAL_ETH_IRQHandler+0xce>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aae:	695a      	ldr	r2, [r3, #20]
 8001ab0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001ab4:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 8001ab8:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 8001abc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ac0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001ac4:	69da      	ldr	r2, [r3, #28]
 8001ac6:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 8001aca:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001acc:	23e0      	movs	r3, #224	; 0xe0
 8001ace:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	f001 fc04 	bl	80032e0 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001adc:	f012 0f08 	tst.w	r2, #8
 8001ae0:	d11f      	bne.n	8001b22 <HAL_ETH_IRQHandler+0xe2>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	; (8001b4c <HAL_ETH_IRQHandler+0x10c>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8001aea:	d126      	bne.n	8001b3a <HAL_ETH_IRQHandler+0xfa>
}
 8001aec:	bd10      	pop	{r4, pc}
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_ETH_IRQHandler+0x110>)
 8001af4:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 8001af6:	f001 fbe3 	bl	80032c0 <HAL_ETH_RxCpltCallback>
 8001afa:	e7b0      	b.n	8001a5e <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b00:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8001b04:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 8001b06:	4620      	mov	r0, r4
 8001b08:	f001 fbe2 	bl	80032d0 <HAL_ETH_TxCpltCallback>
 8001b0c:	e7b4      	b.n	8001a78 <HAL_ETH_IRQHandler+0x38>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b12:	695a      	ldr	r2, [r3, #20]
 8001b14:	f248 6180 	movw	r1, #34432	; 0x8680
 8001b18:	400a      	ands	r2, r1
 8001b1a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001b1e:	6159      	str	r1, [r3, #20]
 8001b20:	e7d7      	b.n	8001ad2 <HAL_ETH_IRQHandler+0x92>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001b28:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f7ff ff85 	bl	8001a3c <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001b38:	e7d3      	b.n	8001ae2 <HAL_ETH_IRQHandler+0xa2>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_ETH_IRQHandler+0x10c>)
 8001b3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001b40:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001b42:	4620      	mov	r0, r4
 8001b44:	f7ff ff7b 	bl	8001a3e <HAL_ETH_WakeUpCallback>
}
 8001b48:	e7d0      	b.n	8001aec <HAL_ETH_IRQHandler+0xac>
 8001b4a:	bf00      	nop
 8001b4c:	40013c00 	.word	0x40013c00
 8001b50:	00010040 	.word	0x00010040

08001b54 <HAL_ETH_ReadPHYRegister>:
{
 8001b54:	b570      	push	{r4, r5, r6, lr}
 8001b56:	4604      	mov	r4, r0
 8001b58:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b5a:	6805      	ldr	r5, [r0, #0]
 8001b5c:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b5e:	0192      	lsls	r2, r2, #6
 8001b60:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b64:	f000 021c 	and.w	r2, r0, #28
 8001b68:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001b6a:	02cb      	lsls	r3, r1, #11
 8001b6c:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001b6e:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001b70:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001b74:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001b76:	f7ff f9f1 	bl	8000f5c <HAL_GetTick>
 8001b7a:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001b7c:	f7ff f9ee 	bl	8000f5c <HAL_GetTick>
 8001b80:	1b40      	subs	r0, r0, r5
 8001b82:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001b86:	d209      	bcs.n	8001b9c <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	6822      	ldr	r2, [r4, #0]
 8001b8a:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b8c:	f011 0f01 	tst.w	r1, #1
 8001b90:	d1f4      	bne.n	8001b7c <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001b92:	6953      	ldr	r3, [r2, #20]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
}
 8001b9a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	e7fc      	b.n	8001b9a <HAL_ETH_ReadPHYRegister+0x46>

08001ba0 <HAL_ETH_WritePHYRegister>:
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
 8001ba2:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001ba4:	6805      	ldr	r5, [r0, #0]
 8001ba6:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ba8:	0192      	lsls	r2, r2, #6
 8001baa:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001bae:	f000 001c 	and.w	r0, r0, #28
 8001bb2:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001bb4:	02ca      	lsls	r2, r1, #11
 8001bb6:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001bb8:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001bba:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001bc2:	6823      	ldr	r3, [r4, #0]
 8001bc4:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001bc6:	f7ff f9c9 	bl	8000f5c <HAL_GetTick>
 8001bca:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001bcc:	f7ff f9c6 	bl	8000f5c <HAL_GetTick>
 8001bd0:	1b40      	subs	r0, r0, r5
 8001bd2:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001bd6:	d206      	bcs.n	8001be6 <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001bd8:	6823      	ldr	r3, [r4, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bdc:	f013 0f01 	tst.w	r3, #1
 8001be0:	d1f4      	bne.n	8001bcc <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001be2:	2000      	movs	r0, #0
 8001be4:	e000      	b.n	8001be8 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001be6:	2001      	movs	r0, #1
}
 8001be8:	bd38      	pop	{r3, r4, r5, pc}

08001bea <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001bea:	2900      	cmp	r1, #0
 8001bec:	d06f      	beq.n	8001cce <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001bee:	6802      	ldr	r2, [r0, #0]
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001bf6:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bfa:	6802      	ldr	r2, [r0, #0]
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001c02:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001c04:	6802      	ldr	r2, [r0, #0]
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001c0c:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001c10:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001c18:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001c1c:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001c1e:	6802      	ldr	r2, [r0, #0]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001c26:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001c2a:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c2c:	6802      	ldr	r2, [r0, #0]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001c34:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c36:	6802      	ldr	r2, [r0, #0]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001c3e:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c48:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c4a:	6802      	ldr	r2, [r0, #0]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001c52:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001c56:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c58:	6802      	ldr	r2, [r0, #0]
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001c60:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001c64:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c66:	6802      	ldr	r2, [r0, #0]
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c6e:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c70:	6802      	ldr	r2, [r0, #0]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001c78:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c7a:	6802      	ldr	r2, [r0, #0]
 8001c7c:	6812      	ldr	r2, [r2, #0]
 8001c7e:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001c82:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001c84:	6802      	ldr	r2, [r0, #0]
 8001c86:	6992      	ldr	r2, [r2, #24]
 8001c88:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001c8c:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001c90:	6802      	ldr	r2, [r0, #0]
 8001c92:	6992      	ldr	r2, [r2, #24]
 8001c94:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001c98:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001c9c:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001ca0:	6802      	ldr	r2, [r0, #0]
 8001ca2:	6992      	ldr	r2, [r2, #24]
 8001ca4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001ca8:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001caa:	6802      	ldr	r2, [r0, #0]
 8001cac:	6992      	ldr	r2, [r2, #24]
 8001cae:	0c12      	lsrs	r2, r2, #16
 8001cb0:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001cb2:	6802      	ldr	r2, [r0, #0]
 8001cb4:	6992      	ldr	r2, [r2, #24]
 8001cb6:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001cba:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cbe:	6802      	ldr	r2, [r0, #0]
 8001cc0:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001cc2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001cc6:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001cca:	2000      	movs	r0, #0
 8001ccc:	4770      	bx	lr
    return HAL_ERROR;
 8001cce:	2001      	movs	r0, #1
}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001cd2:	b151      	cbz	r1, 8001cea <HAL_ETH_SetMACConfig+0x18>
{
 8001cd4:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001cd6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d001      	beq.n	8001ce2 <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001cde:	2001      	movs	r0, #1
}
 8001ce0:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001ce2:	f7ff fab3 	bl	800124c <ETH_SetMACConfig>
    return HAL_OK;
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	e7fa      	b.n	8001ce0 <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001cea:	2001      	movs	r0, #1
}
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_ETH_SetMDIOClockRange>:
{
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001cf4:	6803      	ldr	r3, [r0, #0]
 8001cf6:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001cf8:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001cfc:	f000 fd08 	bl	8002710 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001d00:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_ETH_SetMDIOClockRange+0x54>)
 8001d02:	4403      	add	r3, r0
 8001d04:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d204      	bcs.n	8001d14 <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001d0a:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001d0e:	682b      	ldr	r3, [r5, #0]
 8001d10:	611c      	str	r4, [r3, #16]
}
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001d14:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001d16:	4403      	add	r3, r0
 8001d18:	4a0d      	ldr	r2, [pc, #52]	; (8001d50 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d802      	bhi.n	8001d24 <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001d1e:	f044 040c 	orr.w	r4, r4, #12
 8001d22:	e7f4      	b.n	8001d0e <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001d26:	4403      	add	r3, r0
 8001d28:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d3ef      	bcc.n	8001d0e <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001d2e:	4b0b      	ldr	r3, [pc, #44]	; (8001d5c <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001d30:	4403      	add	r3, r0
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001d34:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001d36:	bf94      	ite	ls
 8001d38:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001d3c:	f044 0410 	orrhi.w	r4, r4, #16
 8001d40:	e7e5      	b.n	8001d0e <HAL_ETH_SetMDIOClockRange+0x1e>
 8001d42:	bf00      	nop
 8001d44:	feced300 	.word	0xfeced300
 8001d48:	00e4e1c0 	.word	0x00e4e1c0
 8001d4c:	fde9f140 	.word	0xfde9f140
 8001d50:	017d783f 	.word	0x017d783f
 8001d54:	fc6c7900 	.word	0xfc6c7900
 8001d58:	02625a00 	.word	0x02625a00
 8001d5c:	fa0a1f00 	.word	0xfa0a1f00
 8001d60:	02faf07f 	.word	0x02faf07f

08001d64 <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001d64:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001d68:	4770      	bx	lr
	...

08001d6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d70:	b083      	sub	sp, #12
 8001d72:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d74:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d76:	4d82      	ldr	r5, [pc, #520]	; (8001f80 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d78:	4c82      	ldr	r4, [pc, #520]	; (8001f84 <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7a:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001f8c <HAL_GPIO_Init+0x220>
 8001d7e:	e04d      	b.n	8001e1c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001d80:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d82:	f04f 0903 	mov.w	r9, #3
 8001d86:	fa09 f902 	lsl.w	r9, r9, r2
 8001d8a:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d8e:	68cf      	ldr	r7, [r1, #12]
 8001d90:	4097      	lsls	r7, r2
 8001d92:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001d96:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d98:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d9a:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	684f      	ldr	r7, [r1, #4]
 8001da0:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001da4:	409f      	lsls	r7, r3
 8001da6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001daa:	6047      	str	r7, [r0, #4]
 8001dac:	e046      	b.n	8001e3c <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dae:	f04f 0e00 	mov.w	lr, #0
 8001db2:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001db6:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dba:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001dbe:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc4:	684e      	ldr	r6, [r1, #4]
 8001dc6:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001dca:	bf0c      	ite	eq
 8001dcc:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001dd0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001dd4:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001dd6:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dd8:	684e      	ldr	r6, [r1, #4]
 8001dda:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001dde:	bf0c      	ite	eq
 8001de0:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001de4:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001de8:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001dea:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dec:	684e      	ldr	r6, [r1, #4]
 8001dee:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001df2:	bf0c      	ite	eq
 8001df4:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001df8:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001dfc:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfe:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e00:	684e      	ldr	r6, [r1, #4]
 8001e02:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001e06:	bf0c      	ite	eq
 8001e08:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001e0c:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001e10:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e12:	3301      	adds	r3, #1
 8001e14:	3202      	adds	r2, #2
 8001e16:	2b10      	cmp	r3, #16
 8001e18:	f000 80af 	beq.w	8001f7a <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001e1c:	f04f 0e01 	mov.w	lr, #1
 8001e20:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e24:	680f      	ldr	r7, [r1, #0]
 8001e26:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001e2a:	ea3e 0607 	bics.w	r6, lr, r7
 8001e2e:	d1f0      	bne.n	8001e12 <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e30:	684f      	ldr	r7, [r1, #4]
 8001e32:	f007 0703 	and.w	r7, r7, #3
 8001e36:	3f01      	subs	r7, #1
 8001e38:	2f01      	cmp	r7, #1
 8001e3a:	d9a1      	bls.n	8001d80 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e3c:	684f      	ldr	r7, [r1, #4]
 8001e3e:	f007 0703 	and.w	r7, r7, #3
 8001e42:	2f03      	cmp	r7, #3
 8001e44:	d027      	beq.n	8001e96 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001e46:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e48:	f04f 0e03 	mov.w	lr, #3
 8001e4c:	fa0e fe02 	lsl.w	lr, lr, r2
 8001e50:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	688f      	ldr	r7, [r1, #8]
 8001e56:	4097      	lsls	r7, r2
 8001e58:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001e5c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	684f      	ldr	r7, [r1, #4]
 8001e60:	f007 0703 	and.w	r7, r7, #3
 8001e64:	2f02      	cmp	r7, #2
 8001e66:	d116      	bne.n	8001e96 <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001e68:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001e6c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001e70:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e74:	f003 0907 	and.w	r9, r3, #7
 8001e78:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001e7c:	f04f 0a0f 	mov.w	sl, #15
 8001e80:	fa0a fa09 	lsl.w	sl, sl, r9
 8001e84:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e88:	690f      	ldr	r7, [r1, #16]
 8001e8a:	fa07 f709 	lsl.w	r7, r7, r9
 8001e8e:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001e92:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001e96:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e98:	f04f 0e03 	mov.w	lr, #3
 8001e9c:	fa0e fe02 	lsl.w	lr, lr, r2
 8001ea0:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	684f      	ldr	r7, [r1, #4]
 8001ea6:	f007 0703 	and.w	r7, r7, #3
 8001eaa:	4097      	lsls	r7, r2
 8001eac:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001eb0:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eb2:	684f      	ldr	r7, [r1, #4]
 8001eb4:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001eb8:	d0ab      	beq.n	8001e12 <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	2700      	movs	r7, #0
 8001ebc:	9701      	str	r7, [sp, #4]
 8001ebe:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001ec0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001ec4:	646f      	str	r7, [r5, #68]	; 0x44
 8001ec6:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001ec8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001ecc:	9701      	str	r7, [sp, #4]
 8001ece:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed0:	f023 0703 	bic.w	r7, r3, #3
 8001ed4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ed8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001edc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee0:	f003 0e03 	and.w	lr, r3, #3
 8001ee4:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001ee8:	f04f 0e0f 	mov.w	lr, #15
 8001eec:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001ef0:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ef4:	4e24      	ldr	r6, [pc, #144]	; (8001f88 <HAL_GPIO_Init+0x21c>)
 8001ef6:	42b0      	cmp	r0, r6
 8001ef8:	f43f af59 	beq.w	8001dae <HAL_GPIO_Init+0x42>
 8001efc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f00:	42b0      	cmp	r0, r6
 8001f02:	d022      	beq.n	8001f4a <HAL_GPIO_Init+0x1de>
 8001f04:	4540      	cmp	r0, r8
 8001f06:	d023      	beq.n	8001f50 <HAL_GPIO_Init+0x1e4>
 8001f08:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001f0c:	42b0      	cmp	r0, r6
 8001f0e:	d022      	beq.n	8001f56 <HAL_GPIO_Init+0x1ea>
 8001f10:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f14:	42b0      	cmp	r0, r6
 8001f16:	d021      	beq.n	8001f5c <HAL_GPIO_Init+0x1f0>
 8001f18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f1c:	42b0      	cmp	r0, r6
 8001f1e:	d020      	beq.n	8001f62 <HAL_GPIO_Init+0x1f6>
 8001f20:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001f24:	42b0      	cmp	r0, r6
 8001f26:	d01f      	beq.n	8001f68 <HAL_GPIO_Init+0x1fc>
 8001f28:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001f90 <HAL_GPIO_Init+0x224>
 8001f2c:	4570      	cmp	r0, lr
 8001f2e:	d01e      	beq.n	8001f6e <HAL_GPIO_Init+0x202>
 8001f30:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001f34:	4570      	cmp	r0, lr
 8001f36:	d01d      	beq.n	8001f74 <HAL_GPIO_Init+0x208>
 8001f38:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001f3c:	4570      	cmp	r0, lr
 8001f3e:	bf0c      	ite	eq
 8001f40:	f04f 0e09 	moveq.w	lr, #9
 8001f44:	f04f 0e0a 	movne.w	lr, #10
 8001f48:	e733      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f4a:	f04f 0e01 	mov.w	lr, #1
 8001f4e:	e730      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f50:	f04f 0e02 	mov.w	lr, #2
 8001f54:	e72d      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f56:	f04f 0e03 	mov.w	lr, #3
 8001f5a:	e72a      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f5c:	f04f 0e04 	mov.w	lr, #4
 8001f60:	e727      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f62:	f04f 0e05 	mov.w	lr, #5
 8001f66:	e724      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f68:	f04f 0e06 	mov.w	lr, #6
 8001f6c:	e721      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f6e:	f04f 0e07 	mov.w	lr, #7
 8001f72:	e71e      	b.n	8001db2 <HAL_GPIO_Init+0x46>
 8001f74:	f04f 0e08 	mov.w	lr, #8
 8001f78:	e71b      	b.n	8001db2 <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001f7a:	b003      	add	sp, #12
 8001f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40013c00 	.word	0x40013c00
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40021c00 	.word	0x40021c00

08001f94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f94:	b10a      	cbz	r2, 8001f9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f96:	6181      	str	r1, [r0, #24]
 8001f98:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f9a:	0409      	lsls	r1, r1, #16
 8001f9c:	6181      	str	r1, [r0, #24]
  }
}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fa0:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa2:	ea01 0203 	and.w	r2, r1, r3
 8001fa6:	ea21 0103 	bic.w	r1, r1, r3
 8001faa:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001fae:	6181      	str	r1, [r0, #24]
}
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fb2:	b570      	push	{r4, r5, r6, lr}
 8001fb4:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fb6:	2800      	cmp	r0, #0
 8001fb8:	f000 8090 	beq.w	80020dc <HAL_PCD_Init+0x12a>
 8001fbc:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fbe:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fc0:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001fc4:	b33b      	cbz	r3, 8002016 <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fcc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fce:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001fd2:	bf04      	itt	eq
 8001fd4:	2300      	moveq	r3, #0
 8001fd6:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fd8:	6828      	ldr	r0, [r5, #0]
 8001fda:	f000 feb6 	bl	8002d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fde:	462c      	mov	r4, r5
 8001fe0:	f854 6b10 	ldr.w	r6, [r4], #16
 8001fe4:	46ec      	mov	ip, sp
 8001fe6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fe8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ff6:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ffa:	1d2b      	adds	r3, r5, #4
 8001ffc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ffe:	4630      	mov	r0, r6
 8002000:	f000 fe5e 	bl	8002cc0 <USB_CoreInit>
 8002004:	4604      	mov	r4, r0
 8002006:	b158      	cbz	r0, 8002020 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002008:	2302      	movs	r3, #2
 800200a:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 800200e:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8002010:	4620      	mov	r0, r4
 8002012:	b00a      	add	sp, #40	; 0x28
 8002014:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8002016:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 800201a:	f7fe fd55 	bl	8000ac8 <HAL_PCD_MspInit>
 800201e:	e7d2      	b.n	8001fc6 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002020:	2100      	movs	r1, #0
 8002022:	6828      	ldr	r0, [r5, #0]
 8002024:	f000 fe97 	bl	8002d56 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002028:	6868      	ldr	r0, [r5, #4]
 800202a:	b398      	cbz	r0, 8002094 <HAL_PCD_Init+0xe2>
 800202c:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 800202e:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002032:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8002034:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002038:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800203c:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002040:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002044:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002048:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 800204c:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 800204e:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8002050:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8002054:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002058:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	3301      	adds	r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	4283      	cmp	r3, r0
 8002060:	d3e8      	bcc.n	8002034 <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8002062:	2200      	movs	r2, #0
 8002064:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002068:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800206c:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8002070:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002074:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002078:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002080:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8002084:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8002088:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800208c:	3401      	adds	r4, #1
 800208e:	b2e4      	uxtb	r4, r4
 8002090:	4284      	cmp	r4, r0
 8002092:	d3e7      	bcc.n	8002064 <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002094:	462c      	mov	r4, r5
 8002096:	f854 6b10 	ldr.w	r6, [r4], #16
 800209a:	46ec      	mov	ip, sp
 800209c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800209e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80020a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80020b0:	1d2b      	adds	r3, r5, #4
 80020b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b4:	4630      	mov	r0, r6
 80020b6:	f000 fed5 	bl	8002e64 <USB_DevInit>
 80020ba:	4604      	mov	r4, r0
 80020bc:	b120      	cbz	r0, 80020c8 <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020be:	2302      	movs	r3, #2
 80020c0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 80020c4:	2401      	movs	r4, #1
 80020c6:	e7a3      	b.n	8002010 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 80020d4:	6828      	ldr	r0, [r5, #0]
 80020d6:	f000 ff91 	bl	8002ffc <USB_DevDisconnect>
  return HAL_OK;
 80020da:	e799      	b.n	8002010 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 80020dc:	2401      	movs	r4, #1
 80020de:	e797      	b.n	8002010 <HAL_PCD_Init+0x5e>

080020e0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	2800      	cmp	r0, #0
 80020e2:	f000 81e1 	beq.w	80024a8 <HAL_RCC_OscConfig+0x3c8>
{
 80020e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ee:	6803      	ldr	r3, [r0, #0]
 80020f0:	f013 0f01 	tst.w	r3, #1
 80020f4:	d03b      	beq.n	800216e <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020f6:	4b9f      	ldr	r3, [pc, #636]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d02c      	beq.n	800215c <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002102:	4b9c      	ldr	r3, [pc, #624]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800210a:	2b08      	cmp	r3, #8
 800210c:	d021      	beq.n	8002152 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210e:	6863      	ldr	r3, [r4, #4]
 8002110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002114:	d04f      	beq.n	80021b6 <HAL_RCC_OscConfig+0xd6>
 8002116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211a:	d052      	beq.n	80021c2 <HAL_RCC_OscConfig+0xe2>
 800211c:	4b95      	ldr	r3, [pc, #596]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800212c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800212e:	6863      	ldr	r3, [r4, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d050      	beq.n	80021d6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe ff12 	bl	8000f5c <HAL_GetTick>
 8002138:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4e8e      	ldr	r6, [pc, #568]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 800213c:	6833      	ldr	r3, [r6, #0]
 800213e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002142:	d114      	bne.n	800216e <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002144:	f7fe ff0a 	bl	8000f5c <HAL_GetTick>
 8002148:	1b40      	subs	r0, r0, r5
 800214a:	2864      	cmp	r0, #100	; 0x64
 800214c:	d9f6      	bls.n	800213c <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 800214e:	2003      	movs	r0, #3
 8002150:	e1b1      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002152:	4b88      	ldr	r3, [pc, #544]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800215a:	d0d8      	beq.n	800210e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	4b85      	ldr	r3, [pc, #532]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002164:	d003      	beq.n	800216e <HAL_RCC_OscConfig+0x8e>
 8002166:	6863      	ldr	r3, [r4, #4]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 819f 	beq.w	80024ac <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	6823      	ldr	r3, [r4, #0]
 8002170:	f013 0f02 	tst.w	r3, #2
 8002174:	d054      	beq.n	8002220 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002176:	4b7f      	ldr	r3, [pc, #508]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f013 0f0c 	tst.w	r3, #12
 800217e:	d03e      	beq.n	80021fe <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002180:	4b7c      	ldr	r3, [pc, #496]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002188:	2b08      	cmp	r3, #8
 800218a:	d033      	beq.n	80021f4 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800218c:	68e3      	ldr	r3, [r4, #12]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d068      	beq.n	8002264 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002192:	4b79      	ldr	r3, [pc, #484]	; (8002378 <HAL_RCC_OscConfig+0x298>)
 8002194:	2201      	movs	r2, #1
 8002196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fee0 	bl	8000f5c <HAL_GetTick>
 800219c:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800219e:	4e75      	ldr	r6, [pc, #468]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80021a0:	6833      	ldr	r3, [r6, #0]
 80021a2:	f013 0f02 	tst.w	r3, #2
 80021a6:	d154      	bne.n	8002252 <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a8:	f7fe fed8 	bl	8000f5c <HAL_GetTick>
 80021ac:	1b40      	subs	r0, r0, r5
 80021ae:	2802      	cmp	r0, #2
 80021b0:	d9f6      	bls.n	80021a0 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80021b2:	2003      	movs	r0, #3
 80021b4:	e17f      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021b6:	4a6f      	ldr	r2, [pc, #444]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e7b5      	b.n	800212e <HAL_RCC_OscConfig+0x4e>
 80021c2:	4b6c      	ldr	r3, [pc, #432]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	e7ab      	b.n	800212e <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80021d6:	f7fe fec1 	bl	8000f5c <HAL_GetTick>
 80021da:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021dc:	4e65      	ldr	r6, [pc, #404]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80021de:	6833      	ldr	r3, [r6, #0]
 80021e0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80021e4:	d0c3      	beq.n	800216e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e6:	f7fe feb9 	bl	8000f5c <HAL_GetTick>
 80021ea:	1b40      	subs	r0, r0, r5
 80021ec:	2864      	cmp	r0, #100	; 0x64
 80021ee:	d9f6      	bls.n	80021de <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80021f0:	2003      	movs	r0, #3
 80021f2:	e160      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f4:	4b5f      	ldr	r3, [pc, #380]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80021fc:	d1c6      	bne.n	800218c <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021fe:	4b5d      	ldr	r3, [pc, #372]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f013 0f02 	tst.w	r3, #2
 8002206:	d003      	beq.n	8002210 <HAL_RCC_OscConfig+0x130>
 8002208:	68e3      	ldr	r3, [r4, #12]
 800220a:	2b01      	cmp	r3, #1
 800220c:	f040 8150 	bne.w	80024b0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	6921      	ldr	r1, [r4, #16]
 8002216:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800221a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800221e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002220:	6823      	ldr	r3, [r4, #0]
 8002222:	f013 0f08 	tst.w	r3, #8
 8002226:	d042      	beq.n	80022ae <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002228:	6963      	ldr	r3, [r4, #20]
 800222a:	b36b      	cbz	r3, 8002288 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800222c:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_RCC_OscConfig+0x298>)
 800222e:	2201      	movs	r2, #1
 8002230:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002234:	f7fe fe92 	bl	8000f5c <HAL_GetTick>
 8002238:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4e4e      	ldr	r6, [pc, #312]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 800223c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800223e:	f013 0f02 	tst.w	r3, #2
 8002242:	d134      	bne.n	80022ae <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002244:	f7fe fe8a 	bl	8000f5c <HAL_GetTick>
 8002248:	1b40      	subs	r0, r0, r5
 800224a:	2802      	cmp	r0, #2
 800224c:	d9f6      	bls.n	800223c <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	e131      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4a48      	ldr	r2, [pc, #288]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002254:	6813      	ldr	r3, [r2, #0]
 8002256:	6921      	ldr	r1, [r4, #16]
 8002258:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800225c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	e7dd      	b.n	8002220 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002264:	4b44      	ldr	r3, [pc, #272]	; (8002378 <HAL_RCC_OscConfig+0x298>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800226a:	f7fe fe77 	bl	8000f5c <HAL_GetTick>
 800226e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002270:	4e40      	ldr	r6, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002272:	6833      	ldr	r3, [r6, #0]
 8002274:	f013 0f02 	tst.w	r3, #2
 8002278:	d0d2      	beq.n	8002220 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800227a:	f7fe fe6f 	bl	8000f5c <HAL_GetTick>
 800227e:	1b40      	subs	r0, r0, r5
 8002280:	2802      	cmp	r0, #2
 8002282:	d9f6      	bls.n	8002272 <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8002284:	2003      	movs	r0, #3
 8002286:	e116      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_OscConfig+0x298>)
 800228a:	2200      	movs	r2, #0
 800228c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7fe fe64 	bl	8000f5c <HAL_GetTick>
 8002294:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	4e37      	ldr	r6, [pc, #220]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002298:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800229a:	f013 0f02 	tst.w	r3, #2
 800229e:	d006      	beq.n	80022ae <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe fe5c 	bl	8000f5c <HAL_GetTick>
 80022a4:	1b40      	subs	r0, r0, r5
 80022a6:	2802      	cmp	r0, #2
 80022a8:	d9f6      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 80022aa:	2003      	movs	r0, #3
 80022ac:	e103      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ae:	6823      	ldr	r3, [r4, #0]
 80022b0:	f013 0f04 	tst.w	r3, #4
 80022b4:	d076      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b6:	4b2f      	ldr	r3, [pc, #188]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80022be:	d133      	bne.n	8002328 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	9301      	str	r3, [sp, #4]
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80022c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022cc:	641a      	str	r2, [r3, #64]	; 0x40
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d4:	9301      	str	r3, [sp, #4]
 80022d6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80022d8:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <HAL_RCC_OscConfig+0x29c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f413 7f80 	tst.w	r3, #256	; 0x100
 80022e2:	d023      	beq.n	800232c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e4:	68a3      	ldr	r3, [r4, #8]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d034      	beq.n	8002354 <HAL_RCC_OscConfig+0x274>
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d038      	beq.n	8002360 <HAL_RCC_OscConfig+0x280>
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 80022f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022f2:	f022 0201 	bic.w	r2, r2, #1
 80022f6:	671a      	str	r2, [r3, #112]	; 0x70
 80022f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022fa:	f022 0204 	bic.w	r2, r2, #4
 80022fe:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002300:	68a3      	ldr	r3, [r4, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d03c      	beq.n	8002380 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002306:	f7fe fe29 	bl	8000f5c <HAL_GetTick>
 800230a:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4f19      	ldr	r7, [pc, #100]	; (8002374 <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800230e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002312:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002314:	f013 0f02 	tst.w	r3, #2
 8002318:	d143      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231a:	f7fe fe1f 	bl	8000f5c <HAL_GetTick>
 800231e:	1b80      	subs	r0, r0, r6
 8002320:	4540      	cmp	r0, r8
 8002322:	d9f6      	bls.n	8002312 <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 8002324:	2003      	movs	r0, #3
 8002326:	e0c6      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8002328:	2500      	movs	r5, #0
 800232a:	e7d6      	b.n	80022da <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800232c:	4a13      	ldr	r2, [pc, #76]	; (800237c <HAL_RCC_OscConfig+0x29c>)
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002336:	f7fe fe11 	bl	8000f5c <HAL_GetTick>
 800233a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4f0f      	ldr	r7, [pc, #60]	; (800237c <HAL_RCC_OscConfig+0x29c>)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002344:	d1ce      	bne.n	80022e4 <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002346:	f7fe fe09 	bl	8000f5c <HAL_GetTick>
 800234a:	1b80      	subs	r0, r0, r6
 800234c:	2802      	cmp	r0, #2
 800234e:	d9f6      	bls.n	800233e <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8002350:	2003      	movs	r0, #3
 8002352:	e0b0      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	4a07      	ldr	r2, [pc, #28]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002356:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
 800235e:	e7cf      	b.n	8002300 <HAL_RCC_OscConfig+0x220>
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_RCC_OscConfig+0x294>)
 8002362:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002364:	f042 0204 	orr.w	r2, r2, #4
 8002368:	671a      	str	r2, [r3, #112]	; 0x70
 800236a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800236c:	f042 0201 	orr.w	r2, r2, #1
 8002370:	671a      	str	r2, [r3, #112]	; 0x70
 8002372:	e7c5      	b.n	8002300 <HAL_RCC_OscConfig+0x220>
 8002374:	40023800 	.word	0x40023800
 8002378:	42470000 	.word	0x42470000
 800237c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002380:	f7fe fdec 	bl	8000f5c <HAL_GetTick>
 8002384:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002386:	4f52      	ldr	r7, [pc, #328]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800238e:	f013 0f02 	tst.w	r3, #2
 8002392:	d006      	beq.n	80023a2 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe fde2 	bl	8000f5c <HAL_GetTick>
 8002398:	1b80      	subs	r0, r0, r6
 800239a:	4540      	cmp	r0, r8
 800239c:	d9f6      	bls.n	800238c <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 800239e:	2003      	movs	r0, #3
 80023a0:	e089      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023a2:	b9ed      	cbnz	r5, 80023e0 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a4:	69a3      	ldr	r3, [r4, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8084 	beq.w	80024b4 <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 80023ae:	6892      	ldr	r2, [r2, #8]
 80023b0:	f002 020c 	and.w	r2, r2, #12
 80023b4:	2a08      	cmp	r2, #8
 80023b6:	d051      	beq.n	800245c <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d017      	beq.n	80023ec <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023bc:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <HAL_RCC_OscConfig+0x3f4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c2:	f7fe fdcb 	bl	8000f5c <HAL_GetTick>
 80023c6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023c8:	4d41      	ldr	r5, [pc, #260]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 80023ca:	682b      	ldr	r3, [r5, #0]
 80023cc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023d0:	d042      	beq.n	8002458 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fdc3 	bl	8000f5c <HAL_GetTick>
 80023d6:	1b00      	subs	r0, r0, r4
 80023d8:	2802      	cmp	r0, #2
 80023da:	d9f6      	bls.n	80023ca <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80023dc:	2003      	movs	r0, #3
 80023de:	e06a      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e0:	4a3b      	ldr	r2, [pc, #236]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 80023e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	; 0x40
 80023ea:	e7db      	b.n	80023a4 <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80023ec:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_OscConfig+0x3f4>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80023f2:	f7fe fdb3 	bl	8000f5c <HAL_GetTick>
 80023f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023f8:	4e35      	ldr	r6, [pc, #212]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 80023fa:	6833      	ldr	r3, [r6, #0]
 80023fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002400:	d006      	beq.n	8002410 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002402:	f7fe fdab 	bl	8000f5c <HAL_GetTick>
 8002406:	1b40      	subs	r0, r0, r5
 8002408:	2802      	cmp	r0, #2
 800240a:	d9f6      	bls.n	80023fa <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 800240c:	2003      	movs	r0, #3
 800240e:	e052      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002410:	69e3      	ldr	r3, [r4, #28]
 8002412:	6a22      	ldr	r2, [r4, #32]
 8002414:	4313      	orrs	r3, r2
 8002416:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002418:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800241c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800241e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002424:	0852      	lsrs	r2, r2, #1
 8002426:	3a01      	subs	r2, #1
 8002428:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800242c:	4a28      	ldr	r2, [pc, #160]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 800242e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002430:	4b28      	ldr	r3, [pc, #160]	; (80024d4 <HAL_RCC_OscConfig+0x3f4>)
 8002432:	2201      	movs	r2, #1
 8002434:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002436:	f7fe fd91 	bl	8000f5c <HAL_GetTick>
 800243a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800243c:	4d24      	ldr	r5, [pc, #144]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002444:	d106      	bne.n	8002454 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002446:	f7fe fd89 	bl	8000f5c <HAL_GetTick>
 800244a:	1b00      	subs	r0, r0, r4
 800244c:	2802      	cmp	r0, #2
 800244e:	d9f6      	bls.n	800243e <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002450:	2003      	movs	r0, #3
 8002452:	e030      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002454:	2000      	movs	r0, #0
 8002456:	e02e      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
 8002458:	2000      	movs	r0, #0
 800245a:	e02c      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245c:	2b01      	cmp	r3, #1
 800245e:	d02d      	beq.n	80024bc <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002460:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <HAL_RCC_OscConfig+0x3f0>)
 8002462:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002464:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002468:	69e2      	ldr	r2, [r4, #28]
 800246a:	4291      	cmp	r1, r2
 800246c:	d128      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	6a21      	ldr	r1, [r4, #32]
 8002474:	428a      	cmp	r2, r1
 8002476:	d125      	bne.n	80024c4 <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002478:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800247a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800247e:	401a      	ands	r2, r3
 8002480:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002484:	d120      	bne.n	80024c8 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002486:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800248a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800248c:	0852      	lsrs	r2, r2, #1
 800248e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002490:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002494:	d11a      	bne.n	80024cc <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002496:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002498:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 80024a0:	bf14      	ite	ne
 80024a2:	2001      	movne	r0, #1
 80024a4:	2000      	moveq	r0, #0
 80024a6:	e006      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 80024a8:	2001      	movs	r0, #1
}
 80024aa:	4770      	bx	lr
        return HAL_ERROR;
 80024ac:	2001      	movs	r0, #1
 80024ae:	e002      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	e000      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 80024b4:	2000      	movs	r0, #0
}
 80024b6:	b002      	add	sp, #8
 80024b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80024bc:	2001      	movs	r0, #1
 80024be:	e7fa      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
 80024c2:	e7f8      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
 80024c4:	2001      	movs	r0, #1
 80024c6:	e7f6      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
 80024c8:	2001      	movs	r0, #1
 80024ca:	e7f4      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
 80024cc:	2001      	movs	r0, #1
 80024ce:	e7f2      	b.n	80024b6 <HAL_RCC_OscConfig+0x3d6>
 80024d0:	40023800 	.word	0x40023800
 80024d4:	42470000 	.word	0x42470000

080024d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d8:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024da:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d057      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0xbe>
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	d157      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80024f8:	d02a      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024fc:	6859      	ldr	r1, [r3, #4]
 80024fe:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002502:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002506:	ebb1 000c 	subs.w	r0, r1, ip
 800250a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800250e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002512:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002516:	0181      	lsls	r1, r0, #6
 8002518:	1a09      	subs	r1, r1, r0
 800251a:	eb63 030e 	sbc.w	r3, r3, lr
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002524:	00c9      	lsls	r1, r1, #3
 8002526:	eb11 0c0c 	adds.w	ip, r1, ip
 800252a:	f143 0300 	adc.w	r3, r3, #0
 800252e:	0259      	lsls	r1, r3, #9
 8002530:	2300      	movs	r3, #0
 8002532:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002536:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 800253a:	f7fd fec1 	bl	80002c0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002546:	3301      	adds	r3, #1
 8002548:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 800254a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800254e:	e025      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002550:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002558:	ea4f 114c 	mov.w	r1, ip, lsl #5
 800255c:	ebb1 000c 	subs.w	r0, r1, ip
 8002560:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002564:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800256c:	0181      	lsls	r1, r0, #6
 800256e:	1a09      	subs	r1, r1, r0
 8002570:	eb63 030e 	sbc.w	r3, r3, lr
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800257a:	00c9      	lsls	r1, r1, #3
 800257c:	eb11 0c0c 	adds.w	ip, r1, ip
 8002580:	f143 0300 	adc.w	r3, r3, #0
 8002584:	0299      	lsls	r1, r3, #10
 8002586:	2300      	movs	r3, #0
 8002588:	ea4f 208c 	mov.w	r0, ip, lsl #10
 800258c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002590:	f7fd fe96 	bl	80002c0 <__aeabi_uldivmod>
 8002594:	e7d3      	b.n	800253e <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002596:	4803      	ldr	r0, [pc, #12]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002598:	e000      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800259c:	bd08      	pop	{r3, pc}
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	007a1200 	.word	0x007a1200
 80025a8:	00f42400 	.word	0x00f42400

080025ac <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80025ac:	2800      	cmp	r0, #0
 80025ae:	f000 809d 	beq.w	80026ec <HAL_RCC_ClockConfig+0x140>
{
 80025b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b6:	460d      	mov	r5, r1
 80025b8:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025ba:	4b50      	ldr	r3, [pc, #320]	; (80026fc <HAL_RCC_ClockConfig+0x150>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	428b      	cmp	r3, r1
 80025c4:	d208      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	b2cb      	uxtb	r3, r1
 80025c8:	4a4c      	ldr	r2, [pc, #304]	; (80026fc <HAL_RCC_ClockConfig+0x150>)
 80025ca:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025cc:	6813      	ldr	r3, [r2, #0]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	428b      	cmp	r3, r1
 80025d4:	f040 808c 	bne.w	80026f0 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	6823      	ldr	r3, [r4, #0]
 80025da:	f013 0f02 	tst.w	r3, #2
 80025de:	d017      	beq.n	8002610 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e0:	f013 0f04 	tst.w	r3, #4
 80025e4:	d004      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025e6:	4a46      	ldr	r2, [pc, #280]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 80025e8:	6893      	ldr	r3, [r2, #8]
 80025ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ee:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	f013 0f08 	tst.w	r3, #8
 80025f6:	d004      	beq.n	8002602 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f8:	4a41      	ldr	r2, [pc, #260]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 80025fa:	6893      	ldr	r3, [r2, #8]
 80025fc:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002600:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002602:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 8002604:	6893      	ldr	r3, [r2, #8]
 8002606:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800260a:	68a1      	ldr	r1, [r4, #8]
 800260c:	430b      	orrs	r3, r1
 800260e:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	f013 0f01 	tst.w	r3, #1
 8002616:	d032      	beq.n	800267e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002618:	6862      	ldr	r2, [r4, #4]
 800261a:	2a01      	cmp	r2, #1
 800261c:	d021      	beq.n	8002662 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	1e93      	subs	r3, r2, #2
 8002620:	2b01      	cmp	r3, #1
 8002622:	d925      	bls.n	8002670 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b36      	ldr	r3, [pc, #216]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f013 0f02 	tst.w	r3, #2
 800262c:	d062      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4934      	ldr	r1, [pc, #208]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 8002630:	688b      	ldr	r3, [r1, #8]
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800263a:	f7fe fc8f 	bl	8000f5c <HAL_GetTick>
 800263e:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002640:	4f2f      	ldr	r7, [pc, #188]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002642:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	6862      	ldr	r2, [r4, #4]
 800264e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002652:	d014      	beq.n	800267e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002654:	f7fe fc82 	bl	8000f5c <HAL_GetTick>
 8002658:	1b80      	subs	r0, r0, r6
 800265a:	4540      	cmp	r0, r8
 800265c:	d9f3      	bls.n	8002646 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800265e:	2003      	movs	r0, #3
 8002660:	e042      	b.n	80026e8 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800266a:	d1e0      	bne.n	800262e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800266c:	2001      	movs	r0, #1
 800266e:	e03b      	b.n	80026e8 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002670:	4b23      	ldr	r3, [pc, #140]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002678:	d1d9      	bne.n	800262e <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800267a:	2001      	movs	r0, #1
 800267c:	e034      	b.n	80026e8 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800267e:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <HAL_RCC_ClockConfig+0x150>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	42ab      	cmp	r3, r5
 8002688:	d907      	bls.n	800269a <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800268a:	b2ea      	uxtb	r2, r5
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCC_ClockConfig+0x150>)
 800268e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 030f 	and.w	r3, r3, #15
 8002696:	42ab      	cmp	r3, r5
 8002698:	d12e      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	f013 0f04 	tst.w	r3, #4
 80026a0:	d006      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a2:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 80026a4:	6893      	ldr	r3, [r2, #8]
 80026a6:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80026aa:	68e1      	ldr	r1, [r4, #12]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	6823      	ldr	r3, [r4, #0]
 80026b2:	f013 0f08 	tst.w	r3, #8
 80026b6:	d007      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026b8:	4a11      	ldr	r2, [pc, #68]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 80026ba:	6893      	ldr	r3, [r2, #8]
 80026bc:	6921      	ldr	r1, [r4, #16]
 80026be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026c2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80026c6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026c8:	f7ff ff06 	bl	80024d8 <HAL_RCC_GetSysClockFreq>
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_RCC_ClockConfig+0x154>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026d4:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_ClockConfig+0x158>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	40d8      	lsrs	r0, r3
 80026da:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <HAL_RCC_ClockConfig+0x15c>)
 80026dc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80026de:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x160>)
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	f7fe fa35 	bl	8000b50 <HAL_InitTick>
  return HAL_OK;
 80026e6:	2000      	movs	r0, #0
}
 80026e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80026ec:	2001      	movs	r0, #1
}
 80026ee:	4770      	bx	lr
      return HAL_ERROR;
 80026f0:	2001      	movs	r0, #1
 80026f2:	e7f9      	b.n	80026e8 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80026f4:	2001      	movs	r0, #1
 80026f6:	e7f7      	b.n	80026e8 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80026f8:	2001      	movs	r0, #1
 80026fa:	e7f5      	b.n	80026e8 <HAL_RCC_ClockConfig+0x13c>
 80026fc:	40023c00 	.word	0x40023c00
 8002700:	40023800 	.word	0x40023800
 8002704:	0800f66c 	.word	0x0800f66c
 8002708:	20000010 	.word	0x20000010
 800270c:	20000018 	.word	0x20000018

08002710 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <HAL_RCC_GetHCLKFreq+0x8>)
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	20000010 	.word	0x20000010

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800271c:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_RCC_GetPCLK1Freq+0x14>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002724:	4a03      	ldr	r2, [pc, #12]	; (8002734 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002726:	5cd3      	ldrb	r3, [r2, r3]
 8002728:	4a03      	ldr	r2, [pc, #12]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800272a:	6810      	ldr	r0, [r2, #0]
}
 800272c:	40d8      	lsrs	r0, r3
 800272e:	4770      	bx	lr
 8002730:	40023800 	.word	0x40023800
 8002734:	0800f67c 	.word	0x0800f67c
 8002738:	20000010 	.word	0x20000010

0800273c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800273c:	4b04      	ldr	r3, [pc, #16]	; (8002750 <HAL_RCC_GetPCLK2Freq+0x14>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002744:	4a03      	ldr	r2, [pc, #12]	; (8002754 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002746:	5cd3      	ldrb	r3, [r2, r3]
 8002748:	4a03      	ldr	r2, [pc, #12]	; (8002758 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800274a:	6810      	ldr	r0, [r2, #0]
}
 800274c:	40d8      	lsrs	r0, r3
 800274e:	4770      	bx	lr
 8002750:	40023800 	.word	0x40023800
 8002754:	0800f67c 	.word	0x0800f67c
 8002758:	20000010 	.word	0x20000010

0800275c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800275c:	230f      	movs	r3, #15
 800275e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002760:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <HAL_RCC_GetClockConfig+0x34>)
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	f002 0203 	and.w	r2, r2, #3
 8002768:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002770:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002778:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	08db      	lsrs	r3, r3, #3
 800277e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002782:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCC_GetClockConfig+0x38>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 030f 	and.w	r3, r3, #15
 800278c:	600b      	str	r3, [r1, #0]
}
 800278e:	4770      	bx	lr
 8002790:	40023800 	.word	0x40023800
 8002794:	40023c00 	.word	0x40023c00

08002798 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002798:	4770      	bx	lr
	...

0800279c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800279c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d137      	bne.n	8002816 <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027ac:	6802      	ldr	r2, [r0, #0]
 80027ae:	68d3      	ldr	r3, [r2, #12]
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b6:	6803      	ldr	r3, [r0, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_TIM_Base_Start_IT+0x84>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d020      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d01d      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027c4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d019      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d015      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80027d8:	4293      	cmp	r3, r2
 80027da:	d011      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027dc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00d      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027e4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
 80027ec:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d005      	beq.n	8002800 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027fc:	2000      	movs	r0, #0
 80027fe:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002800:	689a      	ldr	r2, [r3, #8]
 8002802:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002806:	2a06      	cmp	r2, #6
 8002808:	d007      	beq.n	800281a <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002812:	2000      	movs	r0, #0
 8002814:	4770      	bx	lr
    return HAL_ERROR;
 8002816:	2001      	movs	r0, #1
 8002818:	4770      	bx	lr
  return HAL_OK;
 800281a:	2000      	movs	r0, #0
}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000

08002824 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002824:	4770      	bx	lr

08002826 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002826:	4770      	bx	lr

08002828 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002828:	4770      	bx	lr

0800282a <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800282a:	4770      	bx	lr

0800282c <HAL_TIM_IRQHandler>:
{
 800282c:	b510      	push	{r4, lr}
 800282e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002830:	6803      	ldr	r3, [r0, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	f012 0f02 	tst.w	r2, #2
 8002838:	d011      	beq.n	800285e <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	f012 0f02 	tst.w	r2, #2
 8002840:	d00d      	beq.n	800285e <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002842:	f06f 0202 	mvn.w	r2, #2
 8002846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002848:	2301      	movs	r3, #1
 800284a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800284c:	6803      	ldr	r3, [r0, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	f013 0f03 	tst.w	r3, #3
 8002854:	d070      	beq.n	8002938 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8002856:	f7ff ffe6 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	2300      	movs	r3, #0
 800285c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800285e:	6823      	ldr	r3, [r4, #0]
 8002860:	691a      	ldr	r2, [r3, #16]
 8002862:	f012 0f04 	tst.w	r2, #4
 8002866:	d012      	beq.n	800288e <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	f012 0f04 	tst.w	r2, #4
 800286e:	d00e      	beq.n	800288e <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002870:	f06f 0204 	mvn.w	r2, #4
 8002874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002876:	2302      	movs	r3, #2
 8002878:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800287a:	6823      	ldr	r3, [r4, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002882:	d05f      	beq.n	8002944 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff ffce 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	2300      	movs	r3, #0
 800288c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	691a      	ldr	r2, [r3, #16]
 8002892:	f012 0f08 	tst.w	r2, #8
 8002896:	d012      	beq.n	80028be <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	f012 0f08 	tst.w	r2, #8
 800289e:	d00e      	beq.n	80028be <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a0:	f06f 0208 	mvn.w	r2, #8
 80028a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028a6:	2304      	movs	r3, #4
 80028a8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f013 0f03 	tst.w	r3, #3
 80028b2:	d04e      	beq.n	8002952 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80028b4:	4620      	mov	r0, r4
 80028b6:	f7ff ffb6 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ba:	2300      	movs	r3, #0
 80028bc:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028be:	6823      	ldr	r3, [r4, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	f012 0f10 	tst.w	r2, #16
 80028c6:	d012      	beq.n	80028ee <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	f012 0f10 	tst.w	r2, #16
 80028ce:	d00e      	beq.n	80028ee <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028d0:	f06f 0210 	mvn.w	r2, #16
 80028d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028d6:	2308      	movs	r3, #8
 80028d8:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	f413 7f40 	tst.w	r3, #768	; 0x300
 80028e2:	d03d      	beq.n	8002960 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7ff ff9e 	bl	8002826 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ea:	2300      	movs	r3, #0
 80028ec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	691a      	ldr	r2, [r3, #16]
 80028f2:	f012 0f01 	tst.w	r2, #1
 80028f6:	d003      	beq.n	8002900 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	f012 0f01 	tst.w	r2, #1
 80028fe:	d136      	bne.n	800296e <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	691a      	ldr	r2, [r3, #16]
 8002904:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002908:	d003      	beq.n	8002912 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002910:	d134      	bne.n	800297c <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002912:	6823      	ldr	r3, [r4, #0]
 8002914:	691a      	ldr	r2, [r3, #16]
 8002916:	f012 0f40 	tst.w	r2, #64	; 0x40
 800291a:	d003      	beq.n	8002924 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002922:	d132      	bne.n	800298a <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	f012 0f20 	tst.w	r2, #32
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	f012 0f20 	tst.w	r2, #32
 8002934:	d130      	bne.n	8002998 <HAL_TIM_IRQHandler+0x16c>
}
 8002936:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002938:	f7ff ff74 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	4620      	mov	r0, r4
 800293e:	f7ff ff73 	bl	8002828 <HAL_TIM_PWM_PulseFinishedCallback>
 8002942:	e78a      	b.n	800285a <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002944:	4620      	mov	r0, r4
 8002946:	f7ff ff6d 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294a:	4620      	mov	r0, r4
 800294c:	f7ff ff6c 	bl	8002828 <HAL_TIM_PWM_PulseFinishedCallback>
 8002950:	e79b      	b.n	800288a <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002952:	4620      	mov	r0, r4
 8002954:	f7ff ff66 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002958:	4620      	mov	r0, r4
 800295a:	f7ff ff65 	bl	8002828 <HAL_TIM_PWM_PulseFinishedCallback>
 800295e:	e7ac      	b.n	80028ba <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff ff5f 	bl	8002824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ff5e 	bl	8002828 <HAL_TIM_PWM_PulseFinishedCallback>
 800296c:	e7bd      	b.n	80028ea <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800296e:	f06f 0201 	mvn.w	r2, #1
 8002972:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002974:	4620      	mov	r0, r4
 8002976:	f7fe f83f 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
 800297a:	e7c1      	b.n	8002900 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800297c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002980:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002982:	4620      	mov	r0, r4
 8002984:	f000 f8c1 	bl	8002b0a <HAL_TIMEx_BreakCallback>
 8002988:	e7c3      	b.n	8002912 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800298a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800298e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ff4a 	bl	800282a <HAL_TIM_TriggerCallback>
 8002996:	e7c5      	b.n	8002924 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002998:	f06f 0220 	mvn.w	r2, #32
 800299c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800299e:	4620      	mov	r0, r4
 80029a0:	f000 f8b2 	bl	8002b08 <HAL_TIMEx_CommutCallback>
}
 80029a4:	e7c7      	b.n	8002936 <HAL_TIM_IRQHandler+0x10a>
	...

080029a8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029a8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029aa:	4a40      	ldr	r2, [pc, #256]	; (8002aac <TIM_Base_SetConfig+0x104>)
 80029ac:	4290      	cmp	r0, r2
 80029ae:	d05d      	beq.n	8002a6c <TIM_Base_SetConfig+0xc4>
 80029b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029b4:	d031      	beq.n	8002a1a <TIM_Base_SetConfig+0x72>
 80029b6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029ba:	4290      	cmp	r0, r2
 80029bc:	d051      	beq.n	8002a62 <TIM_Base_SetConfig+0xba>
 80029be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029c2:	4290      	cmp	r0, r2
 80029c4:	d06d      	beq.n	8002aa2 <TIM_Base_SetConfig+0xfa>
 80029c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ca:	4290      	cmp	r0, r2
 80029cc:	d064      	beq.n	8002a98 <TIM_Base_SetConfig+0xf0>
 80029ce:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029d2:	4290      	cmp	r0, r2
 80029d4:	d033      	beq.n	8002a3e <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029d6:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80029da:	4290      	cmp	r0, r2
 80029dc:	d021      	beq.n	8002a22 <TIM_Base_SetConfig+0x7a>
 80029de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029e2:	4290      	cmp	r0, r2
 80029e4:	d01d      	beq.n	8002a22 <TIM_Base_SetConfig+0x7a>
 80029e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ea:	4290      	cmp	r0, r2
 80029ec:	d019      	beq.n	8002a22 <TIM_Base_SetConfig+0x7a>
 80029ee:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80029f2:	4290      	cmp	r0, r2
 80029f4:	d015      	beq.n	8002a22 <TIM_Base_SetConfig+0x7a>
 80029f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029fa:	4290      	cmp	r0, r2
 80029fc:	d011      	beq.n	8002a22 <TIM_Base_SetConfig+0x7a>
 80029fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a02:	4290      	cmp	r0, r2
 8002a04:	d00d      	beq.n	8002a22 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a0a:	694a      	ldr	r2, [r1, #20]
 8002a0c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002a0e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a10:	688b      	ldr	r3, [r1, #8]
 8002a12:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a14:	680b      	ldr	r3, [r1, #0]
 8002a16:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a18:	e03b      	b.n	8002a92 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a1e:	684a      	ldr	r2, [r1, #4]
 8002a20:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a26:	68ca      	ldr	r2, [r1, #12]
 8002a28:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a2e:	694a      	ldr	r2, [r1, #20]
 8002a30:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a32:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a34:	688b      	ldr	r3, [r1, #8]
 8002a36:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a38:	680b      	ldr	r3, [r1, #0]
 8002a3a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a3c:	e029      	b.n	8002a92 <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a42:	684a      	ldr	r2, [r1, #4]
 8002a44:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4a:	68ca      	ldr	r2, [r1, #12]
 8002a4c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a52:	694a      	ldr	r2, [r1, #20]
 8002a54:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a56:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a58:	688b      	ldr	r3, [r1, #8]
 8002a5a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a5c:	680b      	ldr	r3, [r1, #0]
 8002a5e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a60:	e015      	b.n	8002a8e <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a66:	684a      	ldr	r2, [r1, #4]
 8002a68:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a6a:	e7da      	b.n	8002a22 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a70:	684a      	ldr	r2, [r1, #4]
 8002a72:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a78:	68ca      	ldr	r2, [r1, #12]
 8002a7a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a80:	694a      	ldr	r2, [r1, #20]
 8002a82:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a84:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a86:	688b      	ldr	r3, [r1, #8]
 8002a88:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002a8a:	680b      	ldr	r3, [r1, #0]
 8002a8c:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a8e:	690b      	ldr	r3, [r1, #16]
 8002a90:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a92:	2301      	movs	r3, #1
 8002a94:	6143      	str	r3, [r0, #20]
}
 8002a96:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002a9c:	684a      	ldr	r2, [r1, #4]
 8002a9e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aa0:	e7bf      	b.n	8002a22 <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002aa6:	684a      	ldr	r2, [r1, #4]
 8002aa8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aaa:	e7ba      	b.n	8002a22 <TIM_Base_SetConfig+0x7a>
 8002aac:	40010000 	.word	0x40010000

08002ab0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002ab0:	b340      	cbz	r0, 8002b04 <HAL_TIM_Base_Init+0x54>
{
 8002ab2:	b510      	push	{r4, lr}
 8002ab4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ab6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002aba:	b1f3      	cbz	r3, 8002afa <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	2302      	movs	r3, #2
 8002abe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	f851 0b04 	ldr.w	r0, [r1], #4
 8002ac8:	f7ff ff6e 	bl	80029a8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002acc:	2301      	movs	r3, #1
 8002ace:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002ad6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002ada:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002ade:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ae6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002aea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002aee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002af2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002af6:	2000      	movs	r0, #0
}
 8002af8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002afa:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002afe:	f7ff fe4b 	bl	8002798 <HAL_TIM_Base_MspInit>
 8002b02:	e7db      	b.n	8002abc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002b04:	2001      	movs	r0, #1
}
 8002b06:	4770      	bx	lr

08002b08 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b08:	4770      	bx	lr

08002b0a <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b0a:	4770      	bx	lr

08002b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b10:	6802      	ldr	r2, [r0, #0]
 8002b12:	6913      	ldr	r3, [r2, #16]
 8002b14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b18:	68c1      	ldr	r1, [r0, #12]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002b1e:	6801      	ldr	r1, [r0, #0]
 8002b20:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002b22:	6883      	ldr	r3, [r0, #8]
 8002b24:	6900      	ldr	r0, [r0, #16]
 8002b26:	4303      	orrs	r3, r0
 8002b28:	6960      	ldr	r0, [r4, #20]
 8002b2a:	4303      	orrs	r3, r0
 8002b2c:	69e0      	ldr	r0, [r4, #28]
 8002b2e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002b30:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002b34:	f022 020c 	bic.w	r2, r2, #12
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b3c:	6822      	ldr	r2, [r4, #0]
 8002b3e:	6953      	ldr	r3, [r2, #20]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	69a1      	ldr	r1, [r4, #24]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	4a2e      	ldr	r2, [pc, #184]	; (8002c08 <UART_SetConfig+0xfc>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d006      	beq.n	8002b60 <UART_SetConfig+0x54>
 8002b52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d002      	beq.n	8002b60 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7ff fddf 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8002b5e:	e001      	b.n	8002b64 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002b60:	f7ff fdec 	bl	800273c <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b64:	69e3      	ldr	r3, [r4, #28]
 8002b66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b6a:	d024      	beq.n	8002bb6 <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	1803      	adds	r3, r0, r0
 8002b70:	4149      	adcs	r1, r1
 8002b72:	181b      	adds	r3, r3, r0
 8002b74:	f141 0100 	adc.w	r1, r1, #0
 8002b78:	00c9      	lsls	r1, r1, #3
 8002b7a:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	1818      	adds	r0, r3, r0
 8002b82:	6863      	ldr	r3, [r4, #4]
 8002b84:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002b88:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002b8c:	f141 0100 	adc.w	r1, r1, #0
 8002b90:	f7fd fb96 	bl	80002c0 <__aeabi_uldivmod>
 8002b94:	6821      	ldr	r1, [r4, #0]
 8002b96:	4a1d      	ldr	r2, [pc, #116]	; (8002c0c <UART_SetConfig+0x100>)
 8002b98:	fba2 4300 	umull	r4, r3, r2, r0
 8002b9c:	095b      	lsrs	r3, r3, #5
 8002b9e:	2464      	movs	r4, #100	; 0x64
 8002ba0:	fb04 0013 	mls	r0, r4, r3, r0
 8002ba4:	0100      	lsls	r0, r0, #4
 8002ba6:	3032      	adds	r0, #50	; 0x32
 8002ba8:	fba2 2000 	umull	r2, r0, r2, r0
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002bb2:	6088      	str	r0, [r1, #8]
  }
}
 8002bb4:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	1802      	adds	r2, r0, r0
 8002bba:	eb43 0103 	adc.w	r1, r3, r3
 8002bbe:	1812      	adds	r2, r2, r0
 8002bc0:	f141 0100 	adc.w	r1, r1, #0
 8002bc4:	00c9      	lsls	r1, r1, #3
 8002bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bca:	00d2      	lsls	r2, r2, #3
 8002bcc:	1810      	adds	r0, r2, r0
 8002bce:	f141 0100 	adc.w	r1, r1, #0
 8002bd2:	6862      	ldr	r2, [r4, #4]
 8002bd4:	1892      	adds	r2, r2, r2
 8002bd6:	415b      	adcs	r3, r3
 8002bd8:	f7fd fb72 	bl	80002c0 <__aeabi_uldivmod>
 8002bdc:	4d0b      	ldr	r5, [pc, #44]	; (8002c0c <UART_SetConfig+0x100>)
 8002bde:	fba5 3200 	umull	r3, r2, r5, r0
 8002be2:	0951      	lsrs	r1, r2, #5
 8002be4:	2364      	movs	r3, #100	; 0x64
 8002be6:	fb03 0311 	mls	r3, r3, r1, r0
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	3332      	adds	r3, #50	; 0x32
 8002bee:	fba5 2303 	umull	r2, r3, r5, r3
 8002bf2:	6820      	ldr	r0, [r4, #0]
 8002bf4:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002bf8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c02:	4413      	add	r3, r2
 8002c04:	6083      	str	r3, [r0, #8]
 8002c06:	e7d5      	b.n	8002bb4 <UART_SetConfig+0xa8>
 8002c08:	40011000 	.word	0x40011000
 8002c0c:	51eb851f 	.word	0x51eb851f

08002c10 <HAL_UART_Init>:
  if (huart == NULL)
 8002c10:	b358      	cbz	r0, 8002c6a <HAL_UART_Init+0x5a>
{
 8002c12:	b510      	push	{r4, lr}
 8002c14:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002c16:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002c1a:	b30b      	cbz	r3, 8002c60 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002c1c:	2324      	movs	r3, #36	; 0x24
 8002c1e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002c22:	6822      	ldr	r2, [r4, #0]
 8002c24:	68d3      	ldr	r3, [r2, #12]
 8002c26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c2a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f7ff ff6d 	bl	8002b0c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	6913      	ldr	r3, [r2, #16]
 8002c36:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002c3a:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c3c:	6822      	ldr	r2, [r4, #0]
 8002c3e:	6953      	ldr	r3, [r2, #20]
 8002c40:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002c44:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	68d3      	ldr	r3, [r2, #12]
 8002c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c4e:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c50:	2000      	movs	r0, #0
 8002c52:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c54:	2320      	movs	r3, #32
 8002c56:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c5a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002c5e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002c60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002c64:	f7fd fef8 	bl	8000a58 <HAL_UART_MspInit>
 8002c68:	e7d8      	b.n	8002c1c <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002c6a:	2001      	movs	r0, #1
}
 8002c6c:	4770      	bx	lr
	...

08002c70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002c70:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002c76:	4a11      	ldr	r2, [pc, #68]	; (8002cbc <USB_CoreReset+0x4c>)
    count++;
 8002c78:	9b01      	ldr	r3, [sp, #4]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002c7e:	9b01      	ldr	r3, [sp, #4]
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d815      	bhi.n	8002cb0 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002c84:	6903      	ldr	r3, [r0, #16]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	daf6      	bge.n	8002c78 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002c8e:	6903      	ldr	r3, [r0, #16]
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002c96:	4a09      	ldr	r2, [pc, #36]	; (8002cbc <USB_CoreReset+0x4c>)
    count++;
 8002c98:	9b01      	ldr	r3, [sp, #4]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002c9e:	9b01      	ldr	r3, [sp, #4]
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d808      	bhi.n	8002cb6 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002ca4:	6903      	ldr	r3, [r0, #16]
 8002ca6:	f013 0f01 	tst.w	r3, #1
 8002caa:	d1f5      	bne.n	8002c98 <USB_CoreReset+0x28>

  return HAL_OK;
 8002cac:	2000      	movs	r0, #0
 8002cae:	e000      	b.n	8002cb2 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002cb0:	2003      	movs	r0, #3
}
 8002cb2:	b002      	add	sp, #8
 8002cb4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002cb6:	2003      	movs	r0, #3
 8002cb8:	e7fb      	b.n	8002cb2 <USB_CoreReset+0x42>
 8002cba:	bf00      	nop
 8002cbc:	00030d40 	.word	0x00030d40

08002cc0 <USB_CoreInit>:
{
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	b510      	push	{r4, lr}
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	a803      	add	r0, sp, #12
 8002cc8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ccc:	9b08      	ldr	r3, [sp, #32]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d11f      	bne.n	8002d12 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002cd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002cda:	68e3      	ldr	r3, [r4, #12]
 8002cdc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ce4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ce6:	68e3      	ldr	r3, [r4, #12]
 8002ce8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002cec:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d009      	beq.n	8002d08 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff ffbb 	bl	8002c70 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002cfa:	9b06      	ldr	r3, [sp, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d01b      	beq.n	8002d38 <USB_CoreInit+0x78>
}
 8002d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d04:	b004      	add	sp, #16
 8002d06:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d08:	68e3      	ldr	r3, [r4, #12]
 8002d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d0e:	60e3      	str	r3, [r4, #12]
 8002d10:	e7f0      	b.n	8002cf4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d12:	68e3      	ldr	r3, [r4, #12]
 8002d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d18:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff ffa8 	bl	8002c70 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d22:	b923      	cbnz	r3, 8002d2e <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d2c:	e7e5      	b.n	8002cfa <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	63a3      	str	r3, [r4, #56]	; 0x38
 8002d36:	e7e0      	b.n	8002cfa <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d38:	68a3      	ldr	r3, [r4, #8]
 8002d3a:	f043 0306 	orr.w	r3, r3, #6
 8002d3e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d40:	68a3      	ldr	r3, [r4, #8]
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	60a3      	str	r3, [r4, #8]
 8002d48:	e7da      	b.n	8002d00 <USB_CoreInit+0x40>

08002d4a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d4a:	6883      	ldr	r3, [r0, #8]
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6083      	str	r3, [r0, #8]
}
 8002d52:	2000      	movs	r0, #0
 8002d54:	4770      	bx	lr

08002d56 <USB_SetCurrentMode>:
{
 8002d56:	b570      	push	{r4, r5, r6, lr}
 8002d58:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d5a:	68c3      	ldr	r3, [r0, #12]
 8002d5c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002d60:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002d62:	2901      	cmp	r1, #1
 8002d64:	d015      	beq.n	8002d92 <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8002d66:	bb29      	cbnz	r1, 8002db4 <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d68:	68c3      	ldr	r3, [r0, #12]
 8002d6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d6e:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002d70:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002d72:	2601      	movs	r6, #1
 8002d74:	4630      	mov	r0, r6
 8002d76:	f7fe f8f7 	bl	8000f68 <HAL_Delay>
      ms++;
 8002d7a:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002d7c:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002d7e:	f013 0f01 	tst.w	r3, #1
 8002d82:	d001      	beq.n	8002d88 <USB_SetCurrentMode+0x32>
 8002d84:	2c32      	cmp	r4, #50	; 0x32
 8002d86:	d1f5      	bne.n	8002d74 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002d88:	2c32      	cmp	r4, #50	; 0x32
 8002d8a:	bf14      	ite	ne
 8002d8c:	2000      	movne	r0, #0
 8002d8e:	2001      	moveq	r0, #1
}
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d92:	68c3      	ldr	r3, [r0, #12]
 8002d94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d98:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002d9a:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002d9c:	2601      	movs	r6, #1
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f7fe f8e2 	bl	8000f68 <HAL_Delay>
      ms++;
 8002da4:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002da6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002da8:	f013 0f01 	tst.w	r3, #1
 8002dac:	d1ec      	bne.n	8002d88 <USB_SetCurrentMode+0x32>
 8002dae:	2c32      	cmp	r4, #50	; 0x32
 8002db0:	d1f5      	bne.n	8002d9e <USB_SetCurrentMode+0x48>
 8002db2:	e7e9      	b.n	8002d88 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8002db4:	2001      	movs	r0, #1
 8002db6:	e7eb      	b.n	8002d90 <USB_SetCurrentMode+0x3a>

08002db8 <USB_FlushTxFifo>:
{
 8002db8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002dbe:	4a11      	ldr	r2, [pc, #68]	; (8002e04 <USB_FlushTxFifo+0x4c>)
    count++;
 8002dc0:	9b01      	ldr	r3, [sp, #4]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002dc6:	9b01      	ldr	r3, [sp, #4]
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d815      	bhi.n	8002df8 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002dcc:	6903      	ldr	r3, [r0, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	daf6      	bge.n	8002dc0 <USB_FlushTxFifo+0x8>
  count = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002dd6:	0189      	lsls	r1, r1, #6
 8002dd8:	f041 0120 	orr.w	r1, r1, #32
 8002ddc:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8002dde:	4a09      	ldr	r2, [pc, #36]	; (8002e04 <USB_FlushTxFifo+0x4c>)
    count++;
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	3301      	adds	r3, #1
 8002de4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d808      	bhi.n	8002dfe <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002dec:	6903      	ldr	r3, [r0, #16]
 8002dee:	f013 0f20 	tst.w	r3, #32
 8002df2:	d1f5      	bne.n	8002de0 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002df4:	2000      	movs	r0, #0
 8002df6:	e000      	b.n	8002dfa <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002df8:	2003      	movs	r0, #3
}
 8002dfa:	b002      	add	sp, #8
 8002dfc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002dfe:	2003      	movs	r0, #3
 8002e00:	e7fb      	b.n	8002dfa <USB_FlushTxFifo+0x42>
 8002e02:	bf00      	nop
 8002e04:	00030d40 	.word	0x00030d40

08002e08 <USB_FlushRxFifo>:
{
 8002e08:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002e0e:	4a10      	ldr	r2, [pc, #64]	; (8002e50 <USB_FlushRxFifo+0x48>)
    count++;
 8002e10:	9b01      	ldr	r3, [sp, #4]
 8002e12:	3301      	adds	r3, #1
 8002e14:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002e16:	9b01      	ldr	r3, [sp, #4]
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d813      	bhi.n	8002e44 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002e1c:	6903      	ldr	r3, [r0, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	daf6      	bge.n	8002e10 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002e26:	2310      	movs	r3, #16
 8002e28:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002e2a:	4a09      	ldr	r2, [pc, #36]	; (8002e50 <USB_FlushRxFifo+0x48>)
    count++;
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002e32:	9b01      	ldr	r3, [sp, #4]
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d808      	bhi.n	8002e4a <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002e38:	6903      	ldr	r3, [r0, #16]
 8002e3a:	f013 0f10 	tst.w	r3, #16
 8002e3e:	d1f5      	bne.n	8002e2c <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002e40:	2000      	movs	r0, #0
 8002e42:	e000      	b.n	8002e46 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002e44:	2003      	movs	r0, #3
}
 8002e46:	b002      	add	sp, #8
 8002e48:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	e7fb      	b.n	8002e46 <USB_FlushRxFifo+0x3e>
 8002e4e:	bf00      	nop
 8002e50:	00030d40 	.word	0x00030d40

08002e54 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002e54:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002e58:	4319      	orrs	r1, r3
 8002e5a:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002e5e:	2000      	movs	r0, #0
 8002e60:	4770      	bx	lr
	...

08002e64 <USB_DevInit>:
{
 8002e64:	b084      	sub	sp, #16
 8002e66:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	a809      	add	r0, sp, #36	; 0x24
 8002e6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002e72:	460d      	mov	r5, r1
 8002e74:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002e76:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002e7e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002e82:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002e84:	3301      	adds	r3, #1
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d1f7      	bne.n	8002e7a <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8002e8a:	bb26      	cbnz	r6, 8002ed6 <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002e8c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e9e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ea0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ea2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002ea6:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eae:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002eb6:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002eba:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002ebe:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d114      	bne.n	8002ef2 <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002eca:	b96b      	cbnz	r3, 8002ee8 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ecc:	2100      	movs	r1, #0
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7ff ffc0 	bl	8002e54 <USB_SetDevSpeed>
 8002ed4:	e011      	b.n	8002efa <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002ed6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ed8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002edc:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002ede:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ee4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ee6:	e7e3      	b.n	8002eb0 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4620      	mov	r0, r4
 8002eec:	f7ff ffb2 	bl	8002e54 <USB_SetDevSpeed>
 8002ef0:	e003      	b.n	8002efa <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002ef2:	2103      	movs	r1, #3
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff ffad 	bl	8002e54 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002efa:	2110      	movs	r1, #16
 8002efc:	4620      	mov	r0, r4
 8002efe:	f7ff ff5b 	bl	8002db8 <USB_FlushTxFifo>
 8002f02:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff ff7f 	bl	8002e08 <USB_FlushRxFifo>
 8002f0a:	ea48 0800 	orr.w	r8, r8, r0
 8002f0e:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 8002f12:	bf14      	ite	ne
 8002f14:	f04f 0e01 	movne.w	lr, #1
 8002f18:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f20:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002f22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f24:	2d00      	cmp	r5, #0
 8002f26:	d03f      	beq.n	8002fa8 <USB_DevInit+0x144>
 8002f28:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8002f2c:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f2e:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f30:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f34:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f38:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002f3c:	e00a      	b.n	8002f54 <USB_DevInit+0xf0>
      if (i == 0U)
 8002f3e:	b182      	cbz	r2, 8002f62 <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f40:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f44:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f48:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f4c:	3201      	adds	r2, #1
 8002f4e:	3320      	adds	r3, #32
 8002f50:	4295      	cmp	r5, r2
 8002f52:	d009      	beq.n	8002f68 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002f54:	4619      	mov	r1, r3
 8002f56:	6818      	ldr	r0, [r3, #0]
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	dbf0      	blt.n	8002f3e <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f5c:	f8c3 c000 	str.w	ip, [r3]
 8002f60:	e7f0      	b.n	8002f44 <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f62:	f8c3 a000 	str.w	sl, [r3]
 8002f66:	e7ed      	b.n	8002f44 <USB_DevInit+0xe0>
 8002f68:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f6c:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f6e:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f70:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f74:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f78:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002f7c:	e00a      	b.n	8002f94 <USB_DevInit+0x130>
      if (i == 0U)
 8002f7e:	b182      	cbz	r2, 8002fa2 <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f80:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f84:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f88:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f8c:	3201      	adds	r2, #1
 8002f8e:	3320      	adds	r3, #32
 8002f90:	4295      	cmp	r5, r2
 8002f92:	d009      	beq.n	8002fa8 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f94:	4619      	mov	r1, r3
 8002f96:	6818      	ldr	r0, [r3, #0]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	dbf0      	blt.n	8002f7e <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f9c:	f8c3 c000 	str.w	ip, [r3]
 8002fa0:	e7f0      	b.n	8002f84 <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fa2:	f8c3 a000 	str.w	sl, [r3]
 8002fa6:	e7ed      	b.n	8002f84 <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fae:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fb4:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002fb8:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002fbc:	b91b      	cbnz	r3, 8002fc6 <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fbe:	69a3      	ldr	r3, [r4, #24]
 8002fc0:	f043 0310 	orr.w	r3, r3, #16
 8002fc4:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fc6:	69a2      	ldr	r2, [r4, #24]
 8002fc8:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <USB_DevInit+0x194>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fd0:	b11b      	cbz	r3, 8002fda <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fd2:	69a3      	ldr	r3, [r4, #24]
 8002fd4:	f043 0308 	orr.w	r3, r3, #8
 8002fd8:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002fda:	2e01      	cmp	r6, #1
 8002fdc:	d004      	beq.n	8002fe8 <USB_DevInit+0x184>
}
 8002fde:	4670      	mov	r0, lr
 8002fe0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe4:	b004      	add	sp, #16
 8002fe6:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fe8:	69a3      	ldr	r3, [r4, #24]
 8002fea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fee:	f043 0304 	orr.w	r3, r3, #4
 8002ff2:	61a3      	str	r3, [r4, #24]
 8002ff4:	e7f3      	b.n	8002fde <USB_DevInit+0x17a>
 8002ff6:	bf00      	nop
 8002ff8:	803c3800 	.word	0x803c3800

08002ffc <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002ffc:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003000:	f023 0303 	bic.w	r3, r3, #3
 8003004:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003008:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800300c:	f043 0302 	orr.w	r3, r3, #2
 8003010:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003014:	2000      	movs	r0, #0
 8003016:	4770      	bx	lr

08003018 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8003018:	4770      	bx	lr
	...

0800301c <MX_LWIP_Init>:
{
 800301c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800301e:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 8003020:	4e37      	ldr	r6, [pc, #220]	; (8003100 <MX_LWIP_Init+0xe4>)
 8003022:	21a9      	movs	r1, #169	; 0xa9
 8003024:	7031      	strb	r1, [r6, #0]
  IP_ADDRESS[1] = 254;
 8003026:	22fe      	movs	r2, #254	; 0xfe
 8003028:	7072      	strb	r2, [r6, #1]
  IP_ADDRESS[2] = 101;
 800302a:	2365      	movs	r3, #101	; 0x65
 800302c:	70b3      	strb	r3, [r6, #2]
  IP_ADDRESS[3] = 15;
 800302e:	200f      	movs	r0, #15
 8003030:	70f0      	strb	r0, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 8003032:	4d34      	ldr	r5, [pc, #208]	; (8003104 <MX_LWIP_Init+0xe8>)
 8003034:	20ff      	movs	r0, #255	; 0xff
 8003036:	7028      	strb	r0, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8003038:	7068      	strb	r0, [r5, #1]
  NETMASK_ADDRESS[2] = 0;
 800303a:	2700      	movs	r7, #0
 800303c:	70af      	strb	r7, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 800303e:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 8003040:	4c31      	ldr	r4, [pc, #196]	; (8003108 <MX_LWIP_Init+0xec>)
 8003042:	7021      	strb	r1, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 8003044:	7062      	strb	r2, [r4, #1]
  GATEWAY_ADDRESS[2] = 101;
 8003046:	70a3      	strb	r3, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	70e3      	strb	r3, [r4, #3]
  tcpip_init( NULL, NULL );
 800304c:	4639      	mov	r1, r7
 800304e:	4638      	mov	r0, r7
 8003050:	f002 fff6 	bl	8006040 <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8003054:	7833      	ldrb	r3, [r6, #0]
 8003056:	7872      	ldrb	r2, [r6, #1]
 8003058:	f896 c003 	ldrb.w	ip, [r6, #3]
 800305c:	78b0      	ldrb	r0, [r6, #2]
 800305e:	492b      	ldr	r1, [pc, #172]	; (800310c <MX_LWIP_Init+0xf0>)
 8003060:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8003064:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003068:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800306c:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800306e:	782b      	ldrb	r3, [r5, #0]
 8003070:	7868      	ldrb	r0, [r5, #1]
 8003072:	78ee      	ldrb	r6, [r5, #3]
 8003074:	78ad      	ldrb	r5, [r5, #2]
 8003076:	4a26      	ldr	r2, [pc, #152]	; (8003110 <MX_LWIP_Init+0xf4>)
 8003078:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800307c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8003080:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003084:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8003086:	7820      	ldrb	r0, [r4, #0]
 8003088:	7865      	ldrb	r5, [r4, #1]
 800308a:	78e6      	ldrb	r6, [r4, #3]
 800308c:	78a4      	ldrb	r4, [r4, #2]
 800308e:	4b21      	ldr	r3, [pc, #132]	; (8003114 <MX_LWIP_Init+0xf8>)
 8003090:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8003094:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8003098:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800309c:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800309e:	4c1e      	ldr	r4, [pc, #120]	; (8003118 <MX_LWIP_Init+0xfc>)
 80030a0:	481e      	ldr	r0, [pc, #120]	; (800311c <MX_LWIP_Init+0x100>)
 80030a2:	9002      	str	r0, [sp, #8]
 80030a4:	481e      	ldr	r0, [pc, #120]	; (8003120 <MX_LWIP_Init+0x104>)
 80030a6:	9001      	str	r0, [sp, #4]
 80030a8:	9700      	str	r7, [sp, #0]
 80030aa:	4620      	mov	r0, r4
 80030ac:	f004 fbc4 	bl	8007838 <netif_add>
  netif_set_default(&gnetif);
 80030b0:	4620      	mov	r0, r4
 80030b2:	f004 fc59 	bl	8007968 <netif_set_default>
  if (netif_is_link_up(&gnetif))
 80030b6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80030ba:	f013 0f04 	tst.w	r3, #4
 80030be:	d01b      	beq.n	80030f8 <MX_LWIP_Init+0xdc>
    netif_set_up(&gnetif);
 80030c0:	4620      	mov	r0, r4
 80030c2:	f004 fc57 	bl	8007974 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80030c6:	4d14      	ldr	r5, [pc, #80]	; (8003118 <MX_LWIP_Init+0xfc>)
 80030c8:	4916      	ldr	r1, [pc, #88]	; (8003124 <MX_LWIP_Init+0x108>)
 80030ca:	4628      	mov	r0, r5
 80030cc:	f004 fcd2 	bl	8007a74 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80030d0:	4c15      	ldr	r4, [pc, #84]	; (8003128 <MX_LWIP_Init+0x10c>)
 80030d2:	2220      	movs	r2, #32
 80030d4:	2100      	movs	r1, #0
 80030d6:	1d20      	adds	r0, r4, #4
 80030d8:	f00b f8c5 	bl	800e266 <memset>
  attributes.name = "EthLink";
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <MX_LWIP_Init+0x110>)
 80030de:	6023      	str	r3, [r4, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80030e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030e4:	6163      	str	r3, [r4, #20]
  attributes.priority = osPriorityBelowNormal;
 80030e6:	2310      	movs	r3, #16
 80030e8:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80030ea:	4622      	mov	r2, r4
 80030ec:	4629      	mov	r1, r5
 80030ee:	4810      	ldr	r0, [pc, #64]	; (8003130 <MX_LWIP_Init+0x114>)
 80030f0:	f000 fb82 	bl	80037f8 <osThreadNew>
}
 80030f4:	b005      	add	sp, #20
 80030f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 80030f8:	4807      	ldr	r0, [pc, #28]	; (8003118 <MX_LWIP_Init+0xfc>)
 80030fa:	f004 fc59 	bl	80079b0 <netif_set_down>
 80030fe:	e7e2      	b.n	80030c6 <MX_LWIP_Init+0xaa>
 8003100:	20000698 	.word	0x20000698
 8003104:	2000069c 	.word	0x2000069c
 8003108:	20000694 	.word	0x20000694
 800310c:	200006fc 	.word	0x200006fc
 8003110:	20000700 	.word	0x20000700
 8003114:	200006f8 	.word	0x200006f8
 8003118:	200006c4 	.word	0x200006c4
 800311c:	08005fc1 	.word	0x08005fc1
 8003120:	080032fd 	.word	0x080032fd
 8003124:	08003019 	.word	0x08003019
 8003128:	200006a0 	.word	0x200006a0
 800312c:	0800f684 	.word	0x0800f684
 8003130:	0800361d 	.word	0x0800361d

08003134 <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 8003134:	2000      	movs	r0, #0
 8003136:	4770      	bx	lr

08003138 <ethernetif_input>:
{
 8003138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800313c:	b083      	sub	sp, #12
 800313e:	4606      	mov	r6, r0
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003140:	4d12      	ldr	r5, [pc, #72]	; (800318c <ethernetif_input+0x54>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003142:	4f13      	ldr	r7, [pc, #76]	; (8003190 <ethernetif_input+0x58>)
 8003144:	e010      	b.n	8003168 <ethernetif_input+0x30>
 8003146:	a901      	add	r1, sp, #4
 8003148:	4638      	mov	r0, r7
 800314a:	f7fe fbb3 	bl	80018b4 <HAL_ETH_ReadData>
  return p;
 800314e:	9c01      	ldr	r4, [sp, #4]
        if (p != NULL)
 8003150:	b154      	cbz	r4, 8003168 <ethernetif_input+0x30>
          if (netif->input( p, netif) != ERR_OK )
 8003152:	6933      	ldr	r3, [r6, #16]
 8003154:	4631      	mov	r1, r6
 8003156:	4620      	mov	r0, r4
 8003158:	4798      	blx	r3
 800315a:	b990      	cbnz	r0, 8003182 <ethernetif_input+0x4a>
  struct pbuf *p = NULL;
 800315c:	f8cd 9004 	str.w	r9, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003160:	f898 3000 	ldrb.w	r3, [r8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0ee      	beq.n	8003146 <ethernetif_input+0xe>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003168:	f04f 34ff 	mov.w	r4, #4294967295
 800316c:	4621      	mov	r1, r4
 800316e:	6828      	ldr	r0, [r5, #0]
 8003170:	f000 fc8a 	bl	8003a88 <osSemaphoreAcquire>
 8003174:	2800      	cmp	r0, #0
 8003176:	d1f9      	bne.n	800316c <ethernetif_input+0x34>
  struct pbuf *p = NULL;
 8003178:	f04f 0900 	mov.w	r9, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 800317c:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8003194 <ethernetif_input+0x5c>
 8003180:	e7ec      	b.n	800315c <ethernetif_input+0x24>
            pbuf_free(p);
 8003182:	4620      	mov	r0, r4
 8003184:	f004 fd6e 	bl	8007c64 <pbuf_free>
      } while(p!=NULL);
 8003188:	e7e8      	b.n	800315c <ethernetif_input+0x24>
 800318a:	bf00      	nop
 800318c:	20000868 	.word	0x20000868
 8003190:	200008a8 	.word	0x200008a8
 8003194:	20000864 	.word	0x20000864

08003198 <low_level_output>:
{
 8003198:	b530      	push	{r4, r5, lr}
 800319a:	b08d      	sub	sp, #52	; 0x34
 800319c:	460c      	mov	r4, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800319e:	2230      	movs	r2, #48	; 0x30
 80031a0:	2100      	movs	r1, #0
 80031a2:	4668      	mov	r0, sp
 80031a4:	f00b f85f 	bl	800e266 <memset>
  for(q = p; q != NULL; q = q->next)
 80031a8:	b32c      	cbz	r4, 80031f6 <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 80031aa:	6863      	ldr	r3, [r4, #4]
 80031ac:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 80031ae:	8963      	ldrh	r3, [r4, #10]
 80031b0:	9301      	str	r3, [sp, #4]
    if(i>0)
 80031b2:	a803      	add	r0, sp, #12
  for(q = p; q != NULL; q = q->next)
 80031b4:	4621      	mov	r1, r4
    Txbuffer[i].len = q->len;
 80031b6:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 80031b8:	2500      	movs	r5, #0
 80031ba:	e002      	b.n	80031c2 <low_level_output+0x2a>
 80031bc:	300c      	adds	r0, #12
 80031be:	3301      	adds	r3, #1
{
 80031c0:	4611      	mov	r1, r2
    if(q->next == NULL)
 80031c2:	680a      	ldr	r2, [r1, #0]
 80031c4:	b192      	cbz	r2, 80031ec <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d030      	beq.n	800322c <low_level_output+0x94>
    Txbuffer[i].buffer = q->payload;
 80031ca:	6851      	ldr	r1, [r2, #4]
 80031cc:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80031d0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80031d4:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 80031d8:	f84c 1c30 	str.w	r1, [ip, #-48]
    Txbuffer[i].len = q->len;
 80031dc:	8951      	ldrh	r1, [r2, #10]
 80031de:	f84c 1c2c 	str.w	r1, [ip, #-44]
    if(i>0)
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0ea      	beq.n	80031bc <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 80031e6:	f840 0c04 	str.w	r0, [r0, #-4]
 80031ea:	e7e7      	b.n	80031bc <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 80031ec:	f840 5c04 	str.w	r5, [r0, #-4]
  for(q = p; q != NULL; q = q->next)
 80031f0:	680a      	ldr	r2, [r1, #0]
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d1e7      	bne.n	80031c6 <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 80031f6:	4d0f      	ldr	r5, [pc, #60]	; (8003234 <low_level_output+0x9c>)
 80031f8:	8923      	ldrh	r3, [r4, #8]
 80031fa:	606b      	str	r3, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 80031fc:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.pData = p;
 8003200:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 8003202:	4620      	mov	r0, r4
 8003204:	f004 feb2 	bl	8007f6c <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003208:	4629      	mov	r1, r5
 800320a:	480b      	ldr	r0, [pc, #44]	; (8003238 <low_level_output+0xa0>)
 800320c:	f7fe fb16 	bl	800183c <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003210:	4d0a      	ldr	r5, [pc, #40]	; (800323c <low_level_output+0xa4>)
 8003212:	f04f 34ff 	mov.w	r4, #4294967295
 8003216:	4621      	mov	r1, r4
 8003218:	6828      	ldr	r0, [r5, #0]
 800321a:	f000 fc35 	bl	8003a88 <osSemaphoreAcquire>
 800321e:	2800      	cmp	r0, #0
 8003220:	d1f9      	bne.n	8003216 <low_level_output+0x7e>
  HAL_ETH_ReleaseTxPacket(&heth);
 8003222:	4805      	ldr	r0, [pc, #20]	; (8003238 <low_level_output+0xa0>)
 8003224:	f7fe fbe3 	bl	80019ee <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003228:	2000      	movs	r0, #0
 800322a:	e001      	b.n	8003230 <low_level_output+0x98>
      return ERR_IF;
 800322c:	f06f 000b 	mvn.w	r0, #11
}
 8003230:	b00d      	add	sp, #52	; 0x34
 8003232:	bd30      	pop	{r4, r5, pc}
 8003234:	2000086c 	.word	0x2000086c
 8003238:	200008a8 	.word	0x200008a8
 800323c:	200008a4 	.word	0x200008a4

08003240 <pbuf_free_custom>:
{
 8003240:	b508      	push	{r3, lr}
 8003242:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003244:	4807      	ldr	r0, [pc, #28]	; (8003264 <pbuf_free_custom+0x24>)
 8003246:	f004 fa35 	bl	80076b4 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 800324a:	4b07      	ldr	r3, [pc, #28]	; (8003268 <pbuf_free_custom+0x28>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d000      	beq.n	8003254 <pbuf_free_custom+0x14>
}
 8003252:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <pbuf_free_custom+0x28>)
 8003256:	2200      	movs	r2, #0
 8003258:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800325a:	4b04      	ldr	r3, [pc, #16]	; (800326c <pbuf_free_custom+0x2c>)
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	f000 fc47 	bl	8003af0 <osSemaphoreRelease>
}
 8003262:	e7f6      	b.n	8003252 <pbuf_free_custom+0x12>
 8003264:	0800f6e8 	.word	0x0800f6e8
 8003268:	20000864 	.word	0x20000864
 800326c:	20000868 	.word	0x20000868

08003270 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003270:	b508      	push	{r3, lr}
  return HAL_GetTick();
 8003272:	f7fd fe73 	bl	8000f5c <HAL_GetTick>
}
 8003276:	bd08      	pop	{r3, pc}

08003278 <ETH_PHY_IO_Init>:
{
 8003278:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 800327a:	4802      	ldr	r0, [pc, #8]	; (8003284 <ETH_PHY_IO_Init+0xc>)
 800327c:	f7fe fd38 	bl	8001cf0 <HAL_ETH_SetMDIOClockRange>
}
 8003280:	2000      	movs	r0, #0
 8003282:	bd08      	pop	{r3, pc}
 8003284:	200008a8 	.word	0x200008a8

08003288 <ETH_PHY_IO_ReadReg>:
{
 8003288:	b508      	push	{r3, lr}
 800328a:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800328c:	460a      	mov	r2, r1
 800328e:	4601      	mov	r1, r0
 8003290:	4803      	ldr	r0, [pc, #12]	; (80032a0 <ETH_PHY_IO_ReadReg+0x18>)
 8003292:	f7fe fc5f 	bl	8001b54 <HAL_ETH_ReadPHYRegister>
 8003296:	3800      	subs	r0, #0
 8003298:	bf18      	it	ne
 800329a:	2001      	movne	r0, #1
}
 800329c:	4240      	negs	r0, r0
 800329e:	bd08      	pop	{r3, pc}
 80032a0:	200008a8 	.word	0x200008a8

080032a4 <ETH_PHY_IO_WriteReg>:
{
 80032a4:	b508      	push	{r3, lr}
 80032a6:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80032a8:	460a      	mov	r2, r1
 80032aa:	4601      	mov	r1, r0
 80032ac:	4803      	ldr	r0, [pc, #12]	; (80032bc <ETH_PHY_IO_WriteReg+0x18>)
 80032ae:	f7fe fc77 	bl	8001ba0 <HAL_ETH_WritePHYRegister>
 80032b2:	3800      	subs	r0, #0
 80032b4:	bf18      	it	ne
 80032b6:	2001      	movne	r0, #1
}
 80032b8:	4240      	negs	r0, r0
 80032ba:	bd08      	pop	{r3, pc}
 80032bc:	200008a8 	.word	0x200008a8

080032c0 <HAL_ETH_RxCpltCallback>:
{
 80032c0:	b508      	push	{r3, lr}
  osSemaphoreRelease(RxPktSemaphore);
 80032c2:	4b02      	ldr	r3, [pc, #8]	; (80032cc <HAL_ETH_RxCpltCallback+0xc>)
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	f000 fc13 	bl	8003af0 <osSemaphoreRelease>
}
 80032ca:	bd08      	pop	{r3, pc}
 80032cc:	20000868 	.word	0x20000868

080032d0 <HAL_ETH_TxCpltCallback>:
{
 80032d0:	b508      	push	{r3, lr}
  osSemaphoreRelease(TxPktSemaphore);
 80032d2:	4b02      	ldr	r3, [pc, #8]	; (80032dc <HAL_ETH_TxCpltCallback+0xc>)
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	f000 fc0b 	bl	8003af0 <osSemaphoreRelease>
}
 80032da:	bd08      	pop	{r3, pc}
 80032dc:	200008a4 	.word	0x200008a4

080032e0 <HAL_ETH_ErrorCallback>:
{
 80032e0:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80032e2:	f7fe fd3f 	bl	8001d64 <HAL_ETH_GetDMAError>
 80032e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80032ea:	d100      	bne.n	80032ee <HAL_ETH_ErrorCallback+0xe>
}
 80032ec:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 80032ee:	4b02      	ldr	r3, [pc, #8]	; (80032f8 <HAL_ETH_ErrorCallback+0x18>)
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	f000 fbfd 	bl	8003af0 <osSemaphoreRelease>
}
 80032f6:	e7f9      	b.n	80032ec <HAL_ETH_ErrorCallback+0xc>
 80032f8:	20000868 	.word	0x20000868

080032fc <ethernetif_init>:
{
 80032fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003300:	b0a4      	sub	sp, #144	; 0x90
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003302:	4604      	mov	r4, r0
 8003304:	2800      	cmp	r0, #0
 8003306:	f000 80b0 	beq.w	800346a <ethernetif_init+0x16e>
  netif->name[0] = IFNAME0;
 800330a:	2373      	movs	r3, #115	; 0x73
 800330c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003310:	2374      	movs	r3, #116	; 0x74
 8003312:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 8003316:	4b63      	ldr	r3, [pc, #396]	; (80034a4 <ethernetif_init+0x1a8>)
 8003318:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 800331a:	4b63      	ldr	r3, [pc, #396]	; (80034a8 <ethernetif_init+0x1ac>)
 800331c:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 800331e:	2264      	movs	r2, #100	; 0x64
 8003320:	2100      	movs	r1, #0
 8003322:	a80b      	add	r0, sp, #44	; 0x2c
 8003324:	f00a ff9f 	bl	800e266 <memset>
  heth.Instance = ETH;
 8003328:	4e60      	ldr	r6, [pc, #384]	; (80034ac <ethernetif_init+0x1b0>)
 800332a:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <ethernetif_init+0x1b4>)
 800332c:	6033      	str	r3, [r6, #0]
  MACAddr[0] = 0x00;
 800332e:	2500      	movs	r5, #0
 8003330:	f88d 5000 	strb.w	r5, [sp]
  MACAddr[1] = 0x80;
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 800333a:	23e1      	movs	r3, #225	; 0xe1
 800333c:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 8003340:	f88d 5003 	strb.w	r5, [sp, #3]
  MACAddr[4] = 0x00;
 8003344:	f88d 5004 	strb.w	r5, [sp, #4]
  MACAddr[5] = 0x00;
 8003348:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800334c:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003350:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003354:	60b3      	str	r3, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <ethernetif_init+0x1b8>)
 8003358:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <ethernetif_init+0x1bc>)
 800335c:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1536;
 800335e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003362:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003364:	4630      	mov	r0, r6
 8003366:	f7fe f86f 	bl	8001448 <HAL_ETH_Init>
 800336a:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800336c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80034e4 <ethernetif_init+0x1e8>
 8003370:	2234      	movs	r2, #52	; 0x34
 8003372:	4629      	mov	r1, r5
 8003374:	f108 0004 	add.w	r0, r8, #4
 8003378:	f00a ff75 	bl	800e266 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800337c:	2321      	movs	r3, #33	; 0x21
 800337e:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003382:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8003386:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 800338a:	484c      	ldr	r0, [pc, #304]	; (80034bc <ethernetif_init+0x1c0>)
 800338c:	f004 f93e 	bl	800760c <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003390:	2306      	movs	r3, #6
 8003392:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003396:	6873      	ldr	r3, [r6, #4]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800339e:	785a      	ldrb	r2, [r3, #1]
 80033a0:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80033a4:	789a      	ldrb	r2, [r3, #2]
 80033a6:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80033aa:	78da      	ldrb	r2, [r3, #3]
 80033ac:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80033b0:	791a      	ldrb	r2, [r3, #4]
 80033b2:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80033b6:	795b      	ldrb	r3, [r3, #5]
 80033b8:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80033bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80033c0:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80033c2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80033c6:	f043 030a 	orr.w	r3, r3, #10
 80033ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80033ce:	462a      	mov	r2, r5
 80033d0:	2101      	movs	r1, #1
 80033d2:	4608      	mov	r0, r1
 80033d4:	f000 fafa 	bl	80039cc <osSemaphoreNew>
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <ethernetif_init+0x1c4>)
 80033da:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80033dc:	462a      	mov	r2, r5
 80033de:	2101      	movs	r1, #1
 80033e0:	4608      	mov	r0, r1
 80033e2:	f000 faf3 	bl	80039cc <osSemaphoreNew>
 80033e6:	4b37      	ldr	r3, [pc, #220]	; (80034c4 <ethernetif_init+0x1c8>)
 80033e8:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80033ea:	2220      	movs	r2, #32
 80033ec:	4629      	mov	r1, r5
 80033ee:	a803      	add	r0, sp, #12
 80033f0:	f00a ff39 	bl	800e266 <memset>
  attributes.name = "EthIf";
 80033f4:	4b34      	ldr	r3, [pc, #208]	; (80034c8 <ethernetif_init+0x1cc>)
 80033f6:	9302      	str	r3, [sp, #8]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80033f8:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80033fc:	9307      	str	r3, [sp, #28]
  attributes.priority = osPriorityRealtime;
 80033fe:	2330      	movs	r3, #48	; 0x30
 8003400:	9308      	str	r3, [sp, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 8003402:	aa02      	add	r2, sp, #8
 8003404:	4621      	mov	r1, r4
 8003406:	4831      	ldr	r0, [pc, #196]	; (80034cc <ethernetif_init+0x1d0>)
 8003408:	f000 f9f6 	bl	80037f8 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800340c:	4d30      	ldr	r5, [pc, #192]	; (80034d0 <ethernetif_init+0x1d4>)
 800340e:	4931      	ldr	r1, [pc, #196]	; (80034d4 <ethernetif_init+0x1d8>)
 8003410:	4628      	mov	r0, r5
 8003412:	f7fd fc92 	bl	8000d3a <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 8003416:	4628      	mov	r0, r5
 8003418:	f7fd fcae 	bl	8000d78 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 800341c:	2f00      	cmp	r7, #0
 800341e:	d13a      	bne.n	8003496 <ethernetif_init+0x19a>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003420:	4628      	mov	r0, r5
 8003422:	f7fd fd15 	bl	8000e50 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003426:	2801      	cmp	r0, #1
 8003428:	dd27      	ble.n	800347a <ethernetif_init+0x17e>
      switch (PHYLinkState)
 800342a:	2804      	cmp	r0, #4
 800342c:	d02c      	beq.n	8003488 <ethernetif_init+0x18c>
 800342e:	2805      	cmp	r0, #5
 8003430:	d02e      	beq.n	8003490 <ethernetif_init+0x194>
 8003432:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 8003436:	2803      	cmp	r0, #3
 8003438:	bf14      	ite	ne
 800343a:	f44f 6700 	movne.w	r7, #2048	; 0x800
 800343e:	2700      	moveq	r7, #0
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003440:	4d1a      	ldr	r5, [pc, #104]	; (80034ac <ethernetif_init+0x1b0>)
 8003442:	a90b      	add	r1, sp, #44	; 0x2c
 8003444:	4628      	mov	r0, r5
 8003446:	f7fe fbd0 	bl	8001bea <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800344a:	9711      	str	r7, [sp, #68]	; 0x44
    MACConf.Speed = speed;
 800344c:	9610      	str	r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800344e:	a90b      	add	r1, sp, #44	; 0x2c
 8003450:	4628      	mov	r0, r5
 8003452:	f7fe fc3e 	bl	8001cd2 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8003456:	4628      	mov	r0, r5
 8003458:	f7fe f946 	bl	80016e8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800345c:	4620      	mov	r0, r4
 800345e:	f004 fa89 	bl	8007974 <netif_set_up>
    netif_set_link_up(netif);
 8003462:	4620      	mov	r0, r4
 8003464:	f004 fac4 	bl	80079f0 <netif_set_link_up>
 8003468:	e017      	b.n	800349a <ethernetif_init+0x19e>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800346a:	4b1b      	ldr	r3, [pc, #108]	; (80034d8 <ethernetif_init+0x1dc>)
 800346c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8003470:	491a      	ldr	r1, [pc, #104]	; (80034dc <ethernetif_init+0x1e0>)
 8003472:	481b      	ldr	r0, [pc, #108]	; (80034e0 <ethernetif_init+0x1e4>)
 8003474:	f00a ff94 	bl	800e3a0 <iprintf>
 8003478:	e747      	b.n	800330a <ethernetif_init+0xe>
      netif_set_link_down(netif);
 800347a:	4620      	mov	r0, r4
 800347c:	f004 fadc 	bl	8007a38 <netif_set_link_down>
      netif_set_down(netif);
 8003480:	4620      	mov	r0, r4
 8003482:	f004 fa95 	bl	80079b0 <netif_set_down>
 8003486:	e008      	b.n	800349a <ethernetif_init+0x19e>
        speed = ETH_SPEED_10M;
 8003488:	2600      	movs	r6, #0
        duplex = ETH_FULLDUPLEX_MODE;
 800348a:	f44f 6700 	mov.w	r7, #2048	; 0x800
 800348e:	e7d7      	b.n	8003440 <ethernetif_init+0x144>
        speed = ETH_SPEED_10M;
 8003490:	2600      	movs	r6, #0
        duplex = ETH_HALFDUPLEX_MODE;
 8003492:	4637      	mov	r7, r6
 8003494:	e7d4      	b.n	8003440 <ethernetif_init+0x144>
    Error_Handler();
 8003496:	f7fd fabb 	bl	8000a10 <Error_Handler>
}
 800349a:	2000      	movs	r0, #0
 800349c:	b024      	add	sp, #144	; 0x90
 800349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034a2:	bf00      	nop
 80034a4:	0800cda1 	.word	0x0800cda1
 80034a8:	08003199 	.word	0x08003199
 80034ac:	200008a8 	.word	0x200008a8
 80034b0:	40028000 	.word	0x40028000
 80034b4:	200007a4 	.word	0x200007a4
 80034b8:	20000704 	.word	0x20000704
 80034bc:	0800f6e8 	.word	0x0800f6e8
 80034c0:	20000868 	.word	0x20000868
 80034c4:	200008a4 	.word	0x200008a4
 80034c8:	0800f6e0 	.word	0x0800f6e0
 80034cc:	08003139 	.word	0x08003139
 80034d0:	20000844 	.word	0x20000844
 80034d4:	2000001c 	.word	0x2000001c
 80034d8:	0800f68c 	.word	0x0800f68c
 80034dc:	0800f6a8 	.word	0x0800f6a8
 80034e0:	0800f6b8 	.word	0x0800f6b8
 80034e4:	2000086c 	.word	0x2000086c

080034e8 <sys_now>:
{
 80034e8:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80034ea:	f7fd fd37 	bl	8000f5c <HAL_GetTick>
}
 80034ee:	bd08      	pop	{r3, pc}

080034f0 <HAL_ETH_MspInit>:
{
 80034f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f2:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	2300      	movs	r3, #0
 80034f6:	9307      	str	r3, [sp, #28]
 80034f8:	9308      	str	r3, [sp, #32]
 80034fa:	9309      	str	r3, [sp, #36]	; 0x24
 80034fc:	930a      	str	r3, [sp, #40]	; 0x28
 80034fe:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8003500:	6802      	ldr	r2, [r0, #0]
 8003502:	4b41      	ldr	r3, [pc, #260]	; (8003608 <HAL_ETH_MspInit+0x118>)
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_ETH_MspInit+0x1c>
}
 8003508:	b00d      	add	sp, #52	; 0x34
 800350a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 800350c:	2400      	movs	r4, #0
 800350e:	9400      	str	r4, [sp, #0]
 8003510:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 8003514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003516:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800351a:	631a      	str	r2, [r3, #48]	; 0x30
 800351c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8003522:	9200      	str	r2, [sp, #0]
 8003524:	9a00      	ldr	r2, [sp, #0]
 8003526:	9401      	str	r4, [sp, #4]
 8003528:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800352a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800352e:	631a      	str	r2, [r3, #48]	; 0x30
 8003530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003532:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003536:	9201      	str	r2, [sp, #4]
 8003538:	9a01      	ldr	r2, [sp, #4]
 800353a:	9402      	str	r4, [sp, #8]
 800353c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800353e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
 8003544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003546:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800354a:	9202      	str	r2, [sp, #8]
 800354c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800354e:	9403      	str	r4, [sp, #12]
 8003550:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003552:	f042 0204 	orr.w	r2, r2, #4
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
 8003558:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800355a:	f002 0204 	and.w	r2, r2, #4
 800355e:	9203      	str	r2, [sp, #12]
 8003560:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003562:	9404      	str	r4, [sp, #16]
 8003564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	631a      	str	r2, [r3, #48]	; 0x30
 800356c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800356e:	f002 0201 	and.w	r2, r2, #1
 8003572:	9204      	str	r2, [sp, #16]
 8003574:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003576:	9405      	str	r4, [sp, #20]
 8003578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357a:	f042 0202 	orr.w	r2, r2, #2
 800357e:	631a      	str	r2, [r3, #48]	; 0x30
 8003580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003582:	f002 0202 	and.w	r2, r2, #2
 8003586:	9205      	str	r2, [sp, #20]
 8003588:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800358a:	9406      	str	r4, [sp, #24]
 800358c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800358e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003592:	631a      	str	r2, [r3, #48]	; 0x30
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	9306      	str	r3, [sp, #24]
 800359c:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800359e:	2332      	movs	r3, #50	; 0x32
 80035a0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2702      	movs	r7, #2
 80035a4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035a6:	2603      	movs	r6, #3
 80035a8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035aa:	250b      	movs	r5, #11
 80035ac:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035ae:	a907      	add	r1, sp, #28
 80035b0:	4816      	ldr	r0, [pc, #88]	; (800360c <HAL_ETH_MspInit+0x11c>)
 80035b2:	f7fe fbdb 	bl	8001d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80035b6:	2386      	movs	r3, #134	; 0x86
 80035b8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ba:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035bc:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035be:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035c0:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c2:	a907      	add	r1, sp, #28
 80035c4:	4812      	ldr	r0, [pc, #72]	; (8003610 <HAL_ETH_MspInit+0x120>)
 80035c6:	f7fe fbd1 	bl	8001d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80035ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035ce:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d0:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035d4:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035d6:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80035d8:	a907      	add	r1, sp, #28
 80035da:	480e      	ldr	r0, [pc, #56]	; (8003614 <HAL_ETH_MspInit+0x124>)
 80035dc:	f7fe fbc6 	bl	8001d6c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80035e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80035e4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e6:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80035ec:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80035ee:	a907      	add	r1, sp, #28
 80035f0:	4809      	ldr	r0, [pc, #36]	; (8003618 <HAL_ETH_MspInit+0x128>)
 80035f2:	f7fe fbbb 	bl	8001d6c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80035f6:	4622      	mov	r2, r4
 80035f8:	2105      	movs	r1, #5
 80035fa:	203d      	movs	r0, #61	; 0x3d
 80035fc:	f7fd fcda 	bl	8000fb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003600:	203d      	movs	r0, #61	; 0x3d
 8003602:	f7fd fd0d 	bl	8001020 <HAL_NVIC_EnableIRQ>
}
 8003606:	e77f      	b.n	8003508 <HAL_ETH_MspInit+0x18>
 8003608:	40028000 	.word	0x40028000
 800360c:	40020800 	.word	0x40020800
 8003610:	40020000 	.word	0x40020000
 8003614:	40020400 	.word	0x40020400
 8003618:	40021800 	.word	0x40021800

0800361c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800361c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003620:	b09a      	sub	sp, #104	; 0x68
 8003622:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 8003624:	2264      	movs	r2, #100	; 0x64
 8003626:	2100      	movs	r1, #0
 8003628:	a801      	add	r0, sp, #4
 800362a:	f00a fe1c 	bl	800e266 <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800362e:	2700      	movs	r7, #0
 8003630:	46b8      	mov	r8, r7
 8003632:	46ba      	mov	sl, r7

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003634:	4d29      	ldr	r5, [pc, #164]	; (80036dc <ethernet_link_thread+0xc0>)
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_100M;
      linkchanged = 1;
      break;
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8003636:	f44f 6900 	mov.w	r9, #2048	; 0x800
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800363a:	4e29      	ldr	r6, [pc, #164]	; (80036e0 <ethernet_link_thread+0xc4>)
 800363c:	e00b      	b.n	8003656 <ethernet_link_thread+0x3a>
    HAL_ETH_Stop_IT(&heth);
 800363e:	4630      	mov	r0, r6
 8003640:	f7fe f8ae 	bl	80017a0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8003644:	4620      	mov	r0, r4
 8003646:	f004 f9b3 	bl	80079b0 <netif_set_down>
    netif_set_link_down(netif);
 800364a:	4620      	mov	r0, r4
 800364c:	f004 f9f4 	bl	8007a38 <netif_set_link_down>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8003650:	2064      	movs	r0, #100	; 0x64
 8003652:	f000 f91d 	bl	8003890 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003656:	4628      	mov	r0, r5
 8003658:	f7fd fbfa 	bl	8000e50 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800365c:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003660:	f013 0f04 	tst.w	r3, #4
 8003664:	d00b      	beq.n	800367e <ethernet_link_thread+0x62>
 8003666:	2801      	cmp	r0, #1
 8003668:	dde9      	ble.n	800363e <ethernet_link_thread+0x22>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800366a:	f013 0f04 	tst.w	r3, #4
 800366e:	d1ef      	bne.n	8003650 <ethernet_link_thread+0x34>
    switch (PHYLinkState)
 8003670:	3802      	subs	r0, #2
 8003672:	2803      	cmp	r0, #3
 8003674:	d826      	bhi.n	80036c4 <ethernet_link_thread+0xa8>
 8003676:	e8df f000 	tbb	[pc, r0]
 800367a:	0829      	.short	0x0829
 800367c:	222d      	.short	0x222d
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800367e:	f013 0f04 	tst.w	r3, #4
 8003682:	d1e5      	bne.n	8003650 <ethernet_link_thread+0x34>
 8003684:	2801      	cmp	r0, #1
 8003686:	dde3      	ble.n	8003650 <ethernet_link_thread+0x34>
 8003688:	e7f2      	b.n	8003670 <ethernet_link_thread+0x54>
    switch (PHYLinkState)
 800368a:	2700      	movs	r7, #0
 800368c:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003690:	a901      	add	r1, sp, #4
 8003692:	4630      	mov	r0, r6
 8003694:	f7fe faa9 	bl	8001bea <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003698:	9707      	str	r7, [sp, #28]
      MACConf.Speed = speed;
 800369a:	f8cd 8018 	str.w	r8, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800369e:	a901      	add	r1, sp, #4
 80036a0:	4630      	mov	r0, r6
 80036a2:	f7fe fb16 	bl	8001cd2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 80036a6:	4630      	mov	r0, r6
 80036a8:	f7fd ffe2 	bl	8001670 <HAL_ETH_Start>
      netif_set_up(netif);
 80036ac:	4620      	mov	r0, r4
 80036ae:	f004 f961 	bl	8007974 <netif_set_up>
      netif_set_link_up(netif);
 80036b2:	4620      	mov	r0, r4
 80036b4:	f004 f99c 	bl	80079f0 <netif_set_link_up>
 80036b8:	f04f 0a01 	mov.w	sl, #1
 80036bc:	e7c8      	b.n	8003650 <ethernet_link_thread+0x34>
      duplex = ETH_HALFDUPLEX_MODE;
 80036be:	2700      	movs	r7, #0
      speed = ETH_SPEED_10M;
 80036c0:	46b8      	mov	r8, r7
      break;
 80036c2:	e7e5      	b.n	8003690 <ethernet_link_thread+0x74>
    if(linkchanged)
 80036c4:	f1ba 0f00 	cmp.w	sl, #0
 80036c8:	d0c2      	beq.n	8003650 <ethernet_link_thread+0x34>
 80036ca:	e7e1      	b.n	8003690 <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80036cc:	464f      	mov	r7, r9
      speed = ETH_SPEED_100M;
 80036ce:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80036d2:	e7dd      	b.n	8003690 <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80036d4:	464f      	mov	r7, r9
      speed = ETH_SPEED_10M;
 80036d6:	f04f 0800 	mov.w	r8, #0
    if(linkchanged)
 80036da:	e7d9      	b.n	8003690 <ethernet_link_thread+0x74>
 80036dc:	20000844 	.word	0x20000844
 80036e0:	200008a8 	.word	0x200008a8

080036e4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80036e4:	b510      	push	{r4, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80036ea:	480e      	ldr	r0, [pc, #56]	; (8003724 <HAL_ETH_RxAllocateCallback+0x40>)
 80036ec:	f003 ffb2 	bl	8007654 <memp_malloc_pool>
  if (p)
 80036f0:	b188      	cbz	r0, 8003716 <HAL_ETH_RxAllocateCallback+0x32>
 80036f2:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80036f4:	f100 0220 	add.w	r2, r0, #32
 80036f8:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80036fa:	4a0b      	ldr	r2, [pc, #44]	; (8003728 <HAL_ETH_RxAllocateCallback+0x44>)
 80036fc:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80036fe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003702:	9201      	str	r2, [sp, #4]
 8003704:	6822      	ldr	r2, [r4, #0]
 8003706:	9200      	str	r2, [sp, #0]
 8003708:	2241      	movs	r2, #65	; 0x41
 800370a:	2100      	movs	r1, #0
 800370c:	4608      	mov	r0, r1
 800370e:	f004 fa47 	bl	8007ba0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8003712:	b002      	add	sp, #8
 8003714:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_ETH_RxAllocateCallback+0x48>)
 8003718:	2201      	movs	r2, #1
 800371a:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	6023      	str	r3, [r4, #0]
}
 8003720:	e7f7      	b.n	8003712 <HAL_ETH_RxAllocateCallback+0x2e>
 8003722:	bf00      	nop
 8003724:	0800f6e8 	.word	0x0800f6e8
 8003728:	08003241 	.word	0x08003241
 800372c:	20000864 	.word	0x20000864

08003730 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003730:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8003732:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 8003736:	2500      	movs	r5, #0
 8003738:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 800373c:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 8003740:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 8003744:	6802      	ldr	r2, [r0, #0]
 8003746:	b162      	cbz	r2, 8003762 <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003748:	680a      	ldr	r2, [r1, #0]
 800374a:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 800374c:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800374e:	6802      	ldr	r2, [r0, #0]
 8003750:	b12a      	cbz	r2, 800375e <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 8003752:	8911      	ldrh	r1, [r2, #8]
 8003754:	4419      	add	r1, r3
 8003756:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003758:	6812      	ldr	r2, [r2, #0]
 800375a:	2a00      	cmp	r2, #0
 800375c:	d1f9      	bne.n	8003752 <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800375e:	bc30      	pop	{r4, r5}
 8003760:	4770      	bx	lr
    *ppStart = p;
 8003762:	6004      	str	r4, [r0, #0]
 8003764:	e7f2      	b.n	800374c <HAL_ETH_RxLinkCallback+0x1c>

08003766 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8003766:	b508      	push	{r3, lr}
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003768:	f004 fa7c 	bl	8007c64 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800376c:	bd08      	pop	{r3, pc}

0800376e <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800376e:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003770:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003774:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003776:	f001 fda5 	bl	80052c4 <xTaskGetSchedulerState>
 800377a:	2801      	cmp	r0, #1
 800377c:	d100      	bne.n	8003780 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800377e:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8003780:	f002 f988 	bl	8005a94 <xPortSysTickHandler>
}
 8003784:	e7fb      	b.n	800377e <SysTick_Handler+0x10>
	...

08003788 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003788:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800378c:	b92b      	cbnz	r3, 800379a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <osKernelInitialize+0x20>)
 8003790:	6818      	ldr	r0, [r3, #0]
 8003792:	b928      	cbnz	r0, 80037a0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003798:	4770      	bx	lr
    stat = osErrorISR;
 800379a:	f06f 0005 	mvn.w	r0, #5
 800379e:	4770      	bx	lr
    } else {
      stat = osError;
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20005b9c 	.word	0x20005b9c

080037ac <osKernelStart>:
 80037ac:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b0:	b973      	cbnz	r3, 80037d0 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <osKernelStart+0x30>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d10d      	bne.n	80037d6 <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80037ba:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	2400      	movs	r4, #0
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <osKernelStart+0x34>)
 80037c0:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <osKernelStart+0x30>)
 80037c4:	2202      	movs	r2, #2
 80037c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037c8:	f001 faac 	bl	8004d24 <vTaskStartScheduler>
      stat = osOK;
 80037cc:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80037ce:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80037d0:	f06f 0005 	mvn.w	r0, #5
 80037d4:	4770      	bx	lr
      stat = osError;
 80037d6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80037da:	4770      	bx	lr
 80037dc:	20005b9c 	.word	0x20005b9c
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80037e4:	b508      	push	{r3, lr}
 80037e6:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 80037ea:	b113      	cbz	r3, 80037f2 <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 80037ec:	f001 faf6 	bl	8004ddc <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 80037f0:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 80037f2:	f001 faed 	bl	8004dd0 <xTaskGetTickCount>
  return (ticks);
 80037f6:	e7fb      	b.n	80037f0 <osKernelGetTickCount+0xc>

080037f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80037f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fa:	b087      	sub	sp, #28
 80037fc:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80037fe:	2200      	movs	r2, #0
 8003800:	9205      	str	r2, [sp, #20]
 8003802:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8003806:	2a00      	cmp	r2, #0
 8003808:	d13d      	bne.n	8003886 <osThreadNew+0x8e>
 800380a:	2800      	cmp	r0, #0
 800380c:	d03b      	beq.n	8003886 <osThreadNew+0x8e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800380e:	b35c      	cbz	r4, 8003868 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003810:	69a3      	ldr	r3, [r4, #24]
 8003812:	b12b      	cbz	r3, 8003820 <osThreadNew+0x28>
        prio = (UBaseType_t)attr->priority;
 8003814:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003816:	3b01      	subs	r3, #1
 8003818:	2b37      	cmp	r3, #55	; 0x37
 800381a:	d902      	bls.n	8003822 <osThreadNew+0x2a>
        return (NULL);
 800381c:	2000      	movs	r0, #0
 800381e:	e033      	b.n	8003888 <osThreadNew+0x90>
 8003820:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003822:	6863      	ldr	r3, [r4, #4]
 8003824:	f013 0f01 	tst.w	r3, #1
 8003828:	d130      	bne.n	800388c <osThreadNew+0x94>
      }

      if (attr->stack_size > 0U) {
 800382a:	6963      	ldr	r3, [r4, #20]
 800382c:	b19b      	cbz	r3, 8003856 <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800382e:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8003830:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003834:	68a6      	ldr	r6, [r4, #8]
 8003836:	b18e      	cbz	r6, 800385c <osThreadNew+0x64>
 8003838:	68e7      	ldr	r7, [r4, #12]
 800383a:	2fbb      	cmp	r7, #187	; 0xbb
 800383c:	d923      	bls.n	8003886 <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800383e:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003840:	b30c      	cbz	r4, 8003886 <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003842:	b303      	cbz	r3, 8003886 <osThreadNew+0x8e>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003844:	9602      	str	r6, [sp, #8]
 8003846:	9401      	str	r4, [sp, #4]
 8003848:	9500      	str	r5, [sp, #0]
 800384a:	460b      	mov	r3, r1
 800384c:	4661      	mov	r1, ip
 800384e:	f001 f9fb 	bl	8004c48 <xTaskCreateStatic>
 8003852:	9005      	str	r0, [sp, #20]
 8003854:	e017      	b.n	8003886 <osThreadNew+0x8e>
    stack = configMINIMAL_STACK_SIZE;
 8003856:	f44f 7200 	mov.w	r2, #512	; 0x200
 800385a:	e7e9      	b.n	8003830 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800385c:	68e3      	ldr	r3, [r4, #12]
 800385e:	b993      	cbnz	r3, 8003886 <osThreadNew+0x8e>
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003860:	6923      	ldr	r3, [r4, #16]
 8003862:	4664      	mov	r4, ip
 8003864:	b97b      	cbnz	r3, 8003886 <osThreadNew+0x8e>
 8003866:	e002      	b.n	800386e <osThreadNew+0x76>
    prio  = (UBaseType_t)osPriorityNormal;
 8003868:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 800386a:	f44f 7200 	mov.w	r2, #512	; 0x200
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800386e:	ab05      	add	r3, sp, #20
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	9500      	str	r5, [sp, #0]
 8003874:	460b      	mov	r3, r1
 8003876:	b292      	uxth	r2, r2
 8003878:	4621      	mov	r1, r4
 800387a:	f001 fa20 	bl	8004cbe <xTaskCreate>
 800387e:	2801      	cmp	r0, #1
            hTask = NULL;
 8003880:	bf1c      	itt	ne
 8003882:	2300      	movne	r3, #0
 8003884:	9305      	strne	r3, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003886:	9805      	ldr	r0, [sp, #20]
}
 8003888:	b007      	add	sp, #28
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (NULL);
 800388c:	2000      	movs	r0, #0
 800388e:	e7fb      	b.n	8003888 <osThreadNew+0x90>

08003890 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003890:	b508      	push	{r3, lr}
 8003892:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8003896:	b933      	cbnz	r3, 80038a6 <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003898:	b908      	cbnz	r0, 800389e <osDelay+0xe>
    stat = osOK;
 800389a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800389c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800389e:	f001 fbc1 	bl	8005024 <vTaskDelay>
    stat = osOK;
 80038a2:	2000      	movs	r0, #0
 80038a4:	e7fa      	b.n	800389c <osDelay+0xc>
    stat = osErrorISR;
 80038a6:	f06f 0005 	mvn.w	r0, #5
 80038aa:	e7f7      	b.n	800389c <osDelay+0xc>

080038ac <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80038ac:	b570      	push	{r4, r5, r6, lr}
 80038ae:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80038b2:	2e00      	cmp	r6, #0
 80038b4:	d135      	bne.n	8003922 <osMutexNew+0x76>
 80038b6:	4604      	mov	r4, r0
    if (attr != NULL) {
 80038b8:	b370      	cbz	r0, 8003918 <osMutexNew+0x6c>
      type = attr->attr_bits;
 80038ba:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80038bc:	f013 0f08 	tst.w	r3, #8
 80038c0:	d132      	bne.n	8003928 <osMutexNew+0x7c>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80038c2:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 80038c6:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80038c8:	6881      	ldr	r1, [r0, #8]
 80038ca:	b121      	cbz	r1, 80038d6 <osMutexNew+0x2a>
 80038cc:	68c2      	ldr	r2, [r0, #12]
 80038ce:	2a4f      	cmp	r2, #79	; 0x4f
 80038d0:	d80d      	bhi.n	80038ee <osMutexNew+0x42>
  hMutex = NULL;
 80038d2:	2500      	movs	r5, #0
 80038d4:	e026      	b.n	8003924 <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80038d6:	68c2      	ldr	r2, [r0, #12]
 80038d8:	2a00      	cmp	r2, #0
 80038da:	d1fa      	bne.n	80038d2 <osMutexNew+0x26>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80038dc:	b1e3      	cbz	r3, 8003918 <osMutexNew+0x6c>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80038de:	2004      	movs	r0, #4
 80038e0:	f000 fcc8 	bl	8004274 <xQueueCreateMutex>
 80038e4:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80038e6:	2d00      	cmp	r5, #0
 80038e8:	d0f3      	beq.n	80038d2 <osMutexNew+0x26>
        if (attr != NULL) {
 80038ea:	b93c      	cbnz	r4, 80038fc <osMutexNew+0x50>
 80038ec:	e007      	b.n	80038fe <osMutexNew+0x52>
          if (rmtx != 0U) {
 80038ee:	b173      	cbz	r3, 800390e <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80038f0:	2004      	movs	r0, #4
 80038f2:	f000 fcca 	bl	800428a <xQueueCreateMutexStatic>
 80038f6:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80038f8:	2d00      	cmp	r5, #0
 80038fa:	d0ea      	beq.n	80038d2 <osMutexNew+0x26>
          name = attr->name;
 80038fc:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80038fe:	4621      	mov	r1, r4
 8003900:	4628      	mov	r0, r5
 8003902:	f000 ffab 	bl	800485c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003906:	b16e      	cbz	r6, 8003924 <osMutexNew+0x78>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003908:	f045 0501 	orr.w	r5, r5, #1
 800390c:	e00a      	b.n	8003924 <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800390e:	2001      	movs	r0, #1
 8003910:	f000 fcbb 	bl	800428a <xQueueCreateMutexStatic>
 8003914:	4605      	mov	r5, r0
 8003916:	e7ef      	b.n	80038f8 <osMutexNew+0x4c>
              hMutex = xSemaphoreCreateMutex ();
 8003918:	2001      	movs	r0, #1
 800391a:	f000 fcab 	bl	8004274 <xQueueCreateMutex>
 800391e:	4605      	mov	r5, r0
 8003920:	e7e1      	b.n	80038e6 <osMutexNew+0x3a>
  hMutex = NULL;
 8003922:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 8003924:	4628      	mov	r0, r5
 8003926:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8003928:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 800392a:	e7fb      	b.n	8003924 <osMutexNew+0x78>

0800392c <osMutexAcquire>:
 800392c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003930:	b9f2      	cbnz	r2, 8003970 <osMutexAcquire+0x44>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003932:	b510      	push	{r4, lr}
 8003934:	4603      	mov	r3, r0
 8003936:	460c      	mov	r4, r1
 8003938:	f020 0001 	bic.w	r0, r0, #1
 800393c:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003940:	b1c8      	cbz	r0, 8003976 <osMutexAcquire+0x4a>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003942:	b153      	cbz	r3, 800395a <osMutexAcquire+0x2e>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003944:	f000 ff15 	bl	8004772 <xQueueTakeMutexRecursive>
 8003948:	2801      	cmp	r0, #1
 800394a:	d017      	beq.n	800397c <osMutexAcquire+0x50>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800394c:	2c00      	cmp	r4, #0
 800394e:	bf14      	ite	ne
 8003950:	f06f 0001 	mvnne.w	r0, #1
 8003954:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003958:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800395a:	f000 fe37 	bl	80045cc <xQueueSemaphoreTake>
 800395e:	2801      	cmp	r0, #1
 8003960:	d00e      	beq.n	8003980 <osMutexAcquire+0x54>
          stat = osErrorResource;
 8003962:	2c00      	cmp	r4, #0
 8003964:	bf14      	ite	ne
 8003966:	f06f 0001 	mvnne.w	r0, #1
 800396a:	f06f 0002 	mvneq.w	r0, #2
 800396e:	e7f3      	b.n	8003958 <osMutexAcquire+0x2c>
    stat = osErrorISR;
 8003970:	f06f 0005 	mvn.w	r0, #5
}
 8003974:	4770      	bx	lr
    stat = osErrorParameter;
 8003976:	f06f 0003 	mvn.w	r0, #3
 800397a:	e7ed      	b.n	8003958 <osMutexAcquire+0x2c>
  stat = osOK;
 800397c:	2000      	movs	r0, #0
 800397e:	e7eb      	b.n	8003958 <osMutexAcquire+0x2c>
 8003980:	2000      	movs	r0, #0
 8003982:	e7e9      	b.n	8003958 <osMutexAcquire+0x2c>

08003984 <osMutexRelease>:
 8003984:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003988:	b9d2      	cbnz	r2, 80039c0 <osMutexRelease+0x3c>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800398a:	b508      	push	{r3, lr}
 800398c:	4603      	mov	r3, r0
 800398e:	f020 0001 	bic.w	r0, r0, #1
 8003992:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003996:	b1b0      	cbz	r0, 80039c6 <osMutexRelease+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003998:	b13b      	cbz	r3, 80039aa <osMutexRelease+0x26>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800399a:	f000 fc85 	bl	80042a8 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 800399e:	2801      	cmp	r0, #1
 80039a0:	bf0c      	ite	eq
 80039a2:	2000      	moveq	r0, #0
 80039a4:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 80039a8:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80039aa:	2300      	movs	r3, #0
 80039ac:	461a      	mov	r2, r3
 80039ae:	4619      	mov	r1, r3
 80039b0:	f000 fb88 	bl	80040c4 <xQueueGenericSend>
        stat = osErrorResource;
 80039b4:	2801      	cmp	r0, #1
 80039b6:	bf0c      	ite	eq
 80039b8:	2000      	moveq	r0, #0
 80039ba:	f06f 0002 	mvnne.w	r0, #2
 80039be:	e7f3      	b.n	80039a8 <osMutexRelease+0x24>
    stat = osErrorISR;
 80039c0:	f06f 0005 	mvn.w	r0, #5
}
 80039c4:	4770      	bx	lr
    stat = osErrorParameter;
 80039c6:	f06f 0003 	mvn.w	r0, #3
 80039ca:	e7ed      	b.n	80039a8 <osMutexRelease+0x24>

080039cc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d138      	bne.n	8003a4a <osSemaphoreNew+0x7e>
 80039d8:	460e      	mov	r6, r1
 80039da:	4614      	mov	r4, r2
 80039dc:	2800      	cmp	r0, #0
 80039de:	d038      	beq.n	8003a52 <osSemaphoreNew+0x86>
 80039e0:	4288      	cmp	r0, r1
 80039e2:	d338      	bcc.n	8003a56 <osSemaphoreNew+0x8a>
    mem = -1;

    if (attr != NULL) {
 80039e4:	2a00      	cmp	r2, #0
 80039e6:	d041      	beq.n	8003a6c <osSemaphoreNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80039e8:	6895      	ldr	r5, [r2, #8]
 80039ea:	b125      	cbz	r5, 80039f6 <osSemaphoreNew+0x2a>
 80039ec:	68d3      	ldr	r3, [r2, #12]
 80039ee:	2b4f      	cmp	r3, #79	; 0x4f
 80039f0:	d833      	bhi.n	8003a5a <osSemaphoreNew+0x8e>
  hSemaphore = NULL;
 80039f2:	2500      	movs	r5, #0
 80039f4:	e02a      	b.n	8003a4c <osSemaphoreNew+0x80>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80039f6:	68d3      	ldr	r3, [r2, #12]
 80039f8:	bb43      	cbnz	r3, 8003a4c <osSemaphoreNew+0x80>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80039fa:	2801      	cmp	r0, #1
 80039fc:	d13e      	bne.n	8003a7c <osSemaphoreNew+0xb0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80039fe:	2203      	movs	r2, #3
 8003a00:	2100      	movs	r1, #0
 8003a02:	2001      	movs	r0, #1
 8003a04:	f000 faf5 	bl	8003ff2 <xQueueGenericCreate>
 8003a08:	4605      	mov	r5, r0
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003a0a:	b1fd      	cbz	r5, 8003a4c <osSemaphoreNew+0x80>
 8003a0c:	b986      	cbnz	r6, 8003a30 <osSemaphoreNew+0x64>
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 8003a0e:	b104      	cbz	r4, 8003a12 <osSemaphoreNew+0x46>
          name = attr->name;
 8003a10:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003a12:	4621      	mov	r1, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	f000 ff21 	bl	800485c <vQueueAddToRegistry>
 8003a1a:	e017      	b.n	8003a4c <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	462b      	mov	r3, r5
 8003a22:	2200      	movs	r2, #0
 8003a24:	4611      	mov	r1, r2
 8003a26:	2001      	movs	r0, #1
 8003a28:	f000 fa8b 	bl	8003f42 <xQueueGenericCreateStatic>
 8003a2c:	4605      	mov	r5, r0
 8003a2e:	e7ec      	b.n	8003a0a <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a30:	2300      	movs	r3, #0
 8003a32:	461a      	mov	r2, r3
 8003a34:	4619      	mov	r1, r3
 8003a36:	4628      	mov	r0, r5
 8003a38:	f000 fb44 	bl	80040c4 <xQueueGenericSend>
 8003a3c:	2801      	cmp	r0, #1
 8003a3e:	d0e6      	beq.n	8003a0e <osSemaphoreNew+0x42>
            vSemaphoreDelete (hSemaphore);
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 ff37 	bl	80048b4 <vQueueDelete>
            hSemaphore = NULL;
 8003a46:	2500      	movs	r5, #0
 8003a48:	e000      	b.n	8003a4c <osSemaphoreNew+0x80>
  hSemaphore = NULL;
 8003a4a:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 8003a52:	2500      	movs	r5, #0
 8003a54:	e7fa      	b.n	8003a4c <osSemaphoreNew+0x80>
 8003a56:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8003a58:	e7f8      	b.n	8003a4c <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003a5a:	2801      	cmp	r0, #1
 8003a5c:	d0de      	beq.n	8003a1c <osSemaphoreNew+0x50>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003a5e:	462a      	mov	r2, r5
 8003a60:	f000 faef 	bl	8004042 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 8003a64:	4605      	mov	r5, r0
 8003a66:	2800      	cmp	r0, #0
 8003a68:	d1d2      	bne.n	8003a10 <osSemaphoreNew+0x44>
 8003a6a:	e7ef      	b.n	8003a4c <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003a6c:	2801      	cmp	r0, #1
 8003a6e:	d0c6      	beq.n	80039fe <osSemaphoreNew+0x32>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003a70:	f000 fb0a 	bl	8004088 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003a74:	4605      	mov	r5, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d0e8      	beq.n	8003a4c <osSemaphoreNew+0x80>
 8003a7a:	e7ca      	b.n	8003a12 <osSemaphoreNew+0x46>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003a7c:	f000 fb04 	bl	8004088 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003a80:	4605      	mov	r5, r0
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d1c4      	bne.n	8003a10 <osSemaphoreNew+0x44>
 8003a86:	e7e1      	b.n	8003a4c <osSemaphoreNew+0x80>

08003a88 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003a88:	b338      	cbz	r0, 8003ada <osSemaphoreAcquire+0x52>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	460c      	mov	r4, r1
 8003a90:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003a94:	b1b3      	cbz	r3, 8003ac4 <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 8003a96:	bb19      	cbnz	r1, 8003ae0 <osSemaphoreAcquire+0x58>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003a98:	2100      	movs	r1, #0
 8003a9a:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003a9c:	aa01      	add	r2, sp, #4
 8003a9e:	f000 fe88 	bl	80047b2 <xQueueReceiveFromISR>
 8003aa2:	2801      	cmp	r0, #1
 8003aa4:	d11f      	bne.n	8003ae6 <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003aa6:	9801      	ldr	r0, [sp, #4]
 8003aa8:	b150      	cbz	r0, 8003ac0 <osSemaphoreAcquire+0x38>
 8003aaa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003abe:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003ac4:	f000 fd82 	bl	80045cc <xQueueSemaphoreTake>
 8003ac8:	2801      	cmp	r0, #1
 8003aca:	d00f      	beq.n	8003aec <osSemaphoreAcquire+0x64>
        stat = osErrorResource;
 8003acc:	2c00      	cmp	r4, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	f06f 0001 	mvnne.w	r0, #1
 8003ad4:	f06f 0002 	mvneq.w	r0, #2
 8003ad8:	e7f2      	b.n	8003ac0 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 8003ada:	f06f 0003 	mvn.w	r0, #3
}
 8003ade:	4770      	bx	lr
      stat = osErrorParameter;
 8003ae0:	f06f 0003 	mvn.w	r0, #3
 8003ae4:	e7ec      	b.n	8003ac0 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 8003ae6:	f06f 0002 	mvn.w	r0, #2
 8003aea:	e7e9      	b.n	8003ac0 <osSemaphoreAcquire+0x38>
  stat = osOK;
 8003aec:	2000      	movs	r0, #0
 8003aee:	e7e7      	b.n	8003ac0 <osSemaphoreAcquire+0x38>

08003af0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003af0:	b330      	cbz	r0, 8003b40 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003af2:	b500      	push	{lr}
 8003af4:	b083      	sub	sp, #12
 8003af6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8003afa:	b1a3      	cbz	r3, 8003b26 <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b00:	a901      	add	r1, sp, #4
 8003b02:	f000 fc58 	bl	80043b6 <xQueueGiveFromISR>
 8003b06:	2801      	cmp	r0, #1
 8003b08:	d11d      	bne.n	8003b46 <osSemaphoreRelease+0x56>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8003b0a:	9801      	ldr	r0, [sp, #4]
 8003b0c:	b1a8      	cbz	r0, 8003b3a <osSemaphoreRelease+0x4a>
 8003b0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003b22:	2000      	movs	r0, #0
 8003b24:	e009      	b.n	8003b3a <osSemaphoreRelease+0x4a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b26:	2300      	movs	r3, #0
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	f000 faca 	bl	80040c4 <xQueueGenericSend>
      stat = osErrorResource;
 8003b30:	2801      	cmp	r0, #1
 8003b32:	bf0c      	ite	eq
 8003b34:	2000      	moveq	r0, #0
 8003b36:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 8003b3a:	b003      	add	sp, #12
 8003b3c:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8003b40:	f06f 0003 	mvn.w	r0, #3
}
 8003b44:	4770      	bx	lr
      stat = osErrorResource;
 8003b46:	f06f 0002 	mvn.w	r0, #2
 8003b4a:	e7f6      	b.n	8003b3a <osSemaphoreRelease+0x4a>

08003b4c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b54:	bb6b      	cbnz	r3, 8003bb2 <osMessageQueueNew+0x66>
 8003b56:	4614      	mov	r4, r2
 8003b58:	b378      	cbz	r0, 8003bba <osMessageQueueNew+0x6e>
 8003b5a:	b381      	cbz	r1, 8003bbe <osMessageQueueNew+0x72>
    mem = -1;

    if (attr != NULL) {
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d034      	beq.n	8003bca <osMessageQueueNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b60:	6895      	ldr	r5, [r2, #8]
 8003b62:	b15d      	cbz	r5, 8003b7c <osMessageQueueNew+0x30>
 8003b64:	68d3      	ldr	r3, [r2, #12]
 8003b66:	2b4f      	cmp	r3, #79	; 0x4f
 8003b68:	d92b      	bls.n	8003bc2 <osMessageQueueNew+0x76>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b6a:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b6c:	b35a      	cbz	r2, 8003bc6 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b6e:	fb01 f300 	mul.w	r3, r1, r0
 8003b72:	6966      	ldr	r6, [r4, #20]
 8003b74:	429e      	cmp	r6, r3
 8003b76:	d213      	bcs.n	8003ba0 <osMessageQueueNew+0x54>
  hQueue = NULL;
 8003b78:	2500      	movs	r5, #0
 8003b7a:	e01b      	b.n	8003bb4 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b7c:	68d3      	ldr	r3, [r2, #12]
 8003b7e:	b9cb      	cbnz	r3, 8003bb4 <osMessageQueueNew+0x68>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b80:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b82:	b9ba      	cbnz	r2, 8003bb4 <osMessageQueueNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003b84:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 8003b86:	4615      	mov	r5, r2
      if (mem == 0) {
 8003b88:	b9a3      	cbnz	r3, 8003bb4 <osMessageQueueNew+0x68>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f000 fa31 	bl	8003ff2 <xQueueGenericCreate>
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b90:	4605      	mov	r5, r0
 8003b92:	b178      	cbz	r0, 8003bb4 <osMessageQueueNew+0x68>
      if (attr != NULL) {
        name = attr->name;
 8003b94:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8003b96:	4621      	mov	r1, r4
 8003b98:	4628      	mov	r0, r5
 8003b9a:	f000 fe5f 	bl	800485c <vQueueAddToRegistry>
 8003b9e:	e009      	b.n	8003bb4 <osMessageQueueNew+0x68>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	f000 f9cc 	bl	8003f42 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003baa:	4605      	mov	r5, r0
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d1f1      	bne.n	8003b94 <osMessageQueueNew+0x48>
 8003bb0:	e000      	b.n	8003bb4 <osMessageQueueNew+0x68>
  hQueue = NULL;
 8003bb2:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003bb4:	4628      	mov	r0, r5
 8003bb6:	b002      	add	sp, #8
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8003bba:	2500      	movs	r5, #0
 8003bbc:	e7fa      	b.n	8003bb4 <osMessageQueueNew+0x68>
 8003bbe:	2500      	movs	r5, #0
 8003bc0:	e7f8      	b.n	8003bb4 <osMessageQueueNew+0x68>
 8003bc2:	2500      	movs	r5, #0
 8003bc4:	e7f6      	b.n	8003bb4 <osMessageQueueNew+0x68>
 8003bc6:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8003bc8:	e7f4      	b.n	8003bb4 <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f000 fa11 	bl	8003ff2 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003bd0:	4605      	mov	r5, r0
 8003bd2:	2800      	cmp	r0, #0
 8003bd4:	d0ee      	beq.n	8003bb4 <osMessageQueueNew+0x68>
 8003bd6:	e7de      	b.n	8003b96 <osMessageQueueNew+0x4a>

08003bd8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003bd8:	b510      	push	{r4, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	461c      	mov	r4, r3
 8003bde:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003be2:	b1bb      	cbz	r3, 8003c14 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003be4:	b330      	cbz	r0, 8003c34 <osMessageQueuePut+0x5c>
 8003be6:	b341      	cbz	r1, 8003c3a <osMessageQueuePut+0x62>
 8003be8:	bb54      	cbnz	r4, 8003c40 <osMessageQueuePut+0x68>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003bee:	aa01      	add	r2, sp, #4
 8003bf0:	f000 fb7a 	bl	80042e8 <xQueueGenericSendFromISR>
 8003bf4:	2801      	cmp	r0, #1
 8003bf6:	d126      	bne.n	8003c46 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003bf8:	9801      	ldr	r0, [sp, #4]
 8003bfa:	b1c8      	cbz	r0, 8003c30 <osMessageQueuePut+0x58>
 8003bfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003c10:	2000      	movs	r0, #0
 8003c12:	e00d      	b.n	8003c30 <osMessageQueuePut+0x58>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c14:	b1d0      	cbz	r0, 8003c4c <osMessageQueuePut+0x74>
 8003c16:	b1e1      	cbz	r1, 8003c52 <osMessageQueuePut+0x7a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c18:	2300      	movs	r3, #0
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	f000 fa52 	bl	80040c4 <xQueueGenericSend>
 8003c20:	2801      	cmp	r0, #1
 8003c22:	d019      	beq.n	8003c58 <osMessageQueuePut+0x80>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003c24:	2c00      	cmp	r4, #0
 8003c26:	bf14      	ite	ne
 8003c28:	f06f 0001 	mvnne.w	r0, #1
 8003c2c:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003c30:	b002      	add	sp, #8
 8003c32:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003c34:	f06f 0003 	mvn.w	r0, #3
 8003c38:	e7fa      	b.n	8003c30 <osMessageQueuePut+0x58>
 8003c3a:	f06f 0003 	mvn.w	r0, #3
 8003c3e:	e7f7      	b.n	8003c30 <osMessageQueuePut+0x58>
 8003c40:	f06f 0003 	mvn.w	r0, #3
 8003c44:	e7f4      	b.n	8003c30 <osMessageQueuePut+0x58>
        stat = osErrorResource;
 8003c46:	f06f 0002 	mvn.w	r0, #2
 8003c4a:	e7f1      	b.n	8003c30 <osMessageQueuePut+0x58>
      stat = osErrorParameter;
 8003c4c:	f06f 0003 	mvn.w	r0, #3
 8003c50:	e7ee      	b.n	8003c30 <osMessageQueuePut+0x58>
 8003c52:	f06f 0003 	mvn.w	r0, #3
 8003c56:	e7eb      	b.n	8003c30 <osMessageQueuePut+0x58>
  stat = osOK;
 8003c58:	2000      	movs	r0, #0
 8003c5a:	e7e9      	b.n	8003c30 <osMessageQueuePut+0x58>

08003c5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	461c      	mov	r4, r3
 8003c62:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003c66:	b1bb      	cbz	r3, 8003c98 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003c68:	b328      	cbz	r0, 8003cb6 <osMessageQueueGet+0x5a>
 8003c6a:	b339      	cbz	r1, 8003cbc <osMessageQueueGet+0x60>
 8003c6c:	bb4c      	cbnz	r4, 8003cc2 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003c72:	aa01      	add	r2, sp, #4
 8003c74:	f000 fd9d 	bl	80047b2 <xQueueReceiveFromISR>
 8003c78:	2801      	cmp	r0, #1
 8003c7a:	d125      	bne.n	8003cc8 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003c7c:	9801      	ldr	r0, [sp, #4]
 8003c7e:	b1c0      	cbz	r0, 8003cb2 <osMessageQueueGet+0x56>
 8003c80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c88:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003c94:	2000      	movs	r0, #0
 8003c96:	e00c      	b.n	8003cb2 <osMessageQueueGet+0x56>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003c98:	b1c8      	cbz	r0, 8003cce <osMessageQueueGet+0x72>
 8003c9a:	b1d9      	cbz	r1, 8003cd4 <osMessageQueueGet+0x78>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	f000 fbe3 	bl	8004468 <xQueueReceive>
 8003ca2:	2801      	cmp	r0, #1
 8003ca4:	d019      	beq.n	8003cda <osMessageQueueGet+0x7e>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003ca6:	2c00      	cmp	r4, #0
 8003ca8:	bf14      	ite	ne
 8003caa:	f06f 0001 	mvnne.w	r0, #1
 8003cae:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003cb2:	b002      	add	sp, #8
 8003cb4:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003cb6:	f06f 0003 	mvn.w	r0, #3
 8003cba:	e7fa      	b.n	8003cb2 <osMessageQueueGet+0x56>
 8003cbc:	f06f 0003 	mvn.w	r0, #3
 8003cc0:	e7f7      	b.n	8003cb2 <osMessageQueueGet+0x56>
 8003cc2:	f06f 0003 	mvn.w	r0, #3
 8003cc6:	e7f4      	b.n	8003cb2 <osMessageQueueGet+0x56>
        stat = osErrorResource;
 8003cc8:	f06f 0002 	mvn.w	r0, #2
 8003ccc:	e7f1      	b.n	8003cb2 <osMessageQueueGet+0x56>
      stat = osErrorParameter;
 8003cce:	f06f 0003 	mvn.w	r0, #3
 8003cd2:	e7ee      	b.n	8003cb2 <osMessageQueueGet+0x56>
 8003cd4:	f06f 0003 	mvn.w	r0, #3
 8003cd8:	e7eb      	b.n	8003cb2 <osMessageQueueGet+0x56>
  stat = osOK;
 8003cda:	2000      	movs	r0, #0
 8003cdc:	e7e9      	b.n	8003cb2 <osMessageQueueGet+0x56>
	...

08003ce0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <vApplicationGetIdleTaskMemory+0x10>)
 8003ce2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <vApplicationGetIdleTaskMemory+0x14>)
 8003ce6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ce8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cec:	6013      	str	r3, [r2, #0]
}
 8003cee:	4770      	bx	lr
 8003cf0:	20005ae0 	.word	0x20005ae0
 8003cf4:	200052e0 	.word	0x200052e0

08003cf8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <vApplicationGetTimerTaskMemory+0x10>)
 8003cfa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <vApplicationGetTimerTaskMemory+0x14>)
 8003cfe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	4770      	bx	lr
 8003d08:	20006ba0 	.word	0x20006ba0
 8003d0c:	20005ba0 	.word	0x20005ba0

08003d10 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d10:	f100 0308 	add.w	r3, r0, #8
 8003d14:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295
 8003d1a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d1e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d24:	4770      	bx	lr

08003d26 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d26:	2300      	movs	r3, #0
 8003d28:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d2a:	4770      	bx	lr

08003d2c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d2c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d2e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d34:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d36:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d38:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003d3a:	6803      	ldr	r3, [r0, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	6003      	str	r3, [r0, #0]
}
 8003d40:	4770      	bx	lr

08003d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d42:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d44:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d46:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003d4a:	d011      	beq.n	8003d70 <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d4c:	f100 0308 	add.w	r3, r0, #8
 8003d50:	461c      	mov	r4, r3
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	42aa      	cmp	r2, r5
 8003d58:	d9fa      	bls.n	8003d50 <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d5a:	6863      	ldr	r3, [r4, #4]
 8003d5c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d5e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d60:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d62:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d64:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003d66:	6803      	ldr	r3, [r0, #0]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	6003      	str	r3, [r0, #0]
}
 8003d6c:	bc30      	pop	{r4, r5}
 8003d6e:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d70:	6904      	ldr	r4, [r0, #16]
 8003d72:	e7f2      	b.n	8003d5a <vListInsert+0x18>

08003d74 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d74:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d76:	6841      	ldr	r1, [r0, #4]
 8003d78:	6882      	ldr	r2, [r0, #8]
 8003d7a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d7c:	6841      	ldr	r1, [r0, #4]
 8003d7e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d84:	bf04      	itt	eq
 8003d86:	6882      	ldreq	r2, [r0, #8]
 8003d88:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	3a01      	subs	r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d94:	6818      	ldr	r0, [r3, #0]
}
 8003d96:	4770      	bx	lr

08003d98 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d98:	b510      	push	{r4, lr}
 8003d9a:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d9c:	f001 fe0a 	bl	80059b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003da0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003da2:	f001 fe29 	bl	80059f8 <vPortExitCritical>

	return xReturn;
}
 8003da6:	fab4 f084 	clz	r0, r4
 8003daa:	0940      	lsrs	r0, r0, #5
 8003dac:	bd10      	pop	{r4, pc}

08003dae <prvCopyDataToQueue>:
{
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003db6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003db8:	b95a      	cbnz	r2, 8003dd2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dba:	6803      	ldr	r3, [r0, #0]
 8003dbc:	b11b      	cbz	r3, 8003dc6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003dbe:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003dc4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003dc6:	6880      	ldr	r0, [r0, #8]
 8003dc8:	f001 fad6 	bl	8005378 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60a3      	str	r3, [r4, #8]
 8003dd0:	e7f6      	b.n	8003dc0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003dd2:	b96d      	cbnz	r5, 8003df0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dd4:	6840      	ldr	r0, [r0, #4]
 8003dd6:	f00a fa1e 	bl	800e216 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dda:	6863      	ldr	r3, [r4, #4]
 8003ddc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003dde:	4413      	add	r3, r2
 8003de0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003de2:	68a2      	ldr	r2, [r4, #8]
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d319      	bcc.n	8003e1c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003dec:	4628      	mov	r0, r5
 8003dee:	e7e7      	b.n	8003dc0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003df0:	68c0      	ldr	r0, [r0, #12]
 8003df2:	f00a fa10 	bl	800e216 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003df6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003df8:	4251      	negs	r1, r2
 8003dfa:	68e3      	ldr	r3, [r4, #12]
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d202      	bcs.n	8003e0c <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e06:	68a3      	ldr	r3, [r4, #8]
 8003e08:	440b      	add	r3, r1
 8003e0a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003e0c:	2d02      	cmp	r5, #2
 8003e0e:	d001      	beq.n	8003e14 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003e10:	2000      	movs	r0, #0
 8003e12:	e7d5      	b.n	8003dc0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e14:	b126      	cbz	r6, 8003e20 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003e16:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003e18:	2000      	movs	r0, #0
 8003e1a:	e7d1      	b.n	8003dc0 <prvCopyDataToQueue+0x12>
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	e7cf      	b.n	8003dc0 <prvCopyDataToQueue+0x12>
 8003e20:	2000      	movs	r0, #0
 8003e22:	e7cd      	b.n	8003dc0 <prvCopyDataToQueue+0x12>

08003e24 <prvCopyDataFromQueue>:
{
 8003e24:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e26:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003e28:	b16a      	cbz	r2, 8003e46 <prvCopyDataFromQueue+0x22>
{
 8003e2a:	b510      	push	{r4, lr}
 8003e2c:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e2e:	68d9      	ldr	r1, [r3, #12]
 8003e30:	4411      	add	r1, r2
 8003e32:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e34:	689c      	ldr	r4, [r3, #8]
 8003e36:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e38:	bf24      	itt	cs
 8003e3a:	6819      	ldrcs	r1, [r3, #0]
 8003e3c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e3e:	68d9      	ldr	r1, [r3, #12]
 8003e40:	f00a f9e9 	bl	800e216 <memcpy>
}
 8003e44:	bd10      	pop	{r4, pc}
 8003e46:	4770      	bx	lr

08003e48 <prvUnlockQueue>:
{
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003e4c:	f001 fdb2 	bl	80059b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003e50:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003e54:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e56:	2c00      	cmp	r4, #0
 8003e58:	dd0f      	ble.n	8003e7a <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e5a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003e5e:	e002      	b.n	8003e66 <prvUnlockQueue+0x1e>
			--cTxLock;
 8003e60:	3c01      	subs	r4, #1
 8003e62:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e64:	b14c      	cbz	r4, 8003e7a <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003e68:	b13b      	cbz	r3, 8003e7a <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f001 f98c 	bl	8005188 <xTaskRemoveFromEventList>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d0f5      	beq.n	8003e60 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003e74:	f001 fa1a 	bl	80052ac <vTaskMissedYield>
 8003e78:	e7f2      	b.n	8003e60 <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8003e7a:	23ff      	movs	r3, #255	; 0xff
 8003e7c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003e80:	f001 fdba 	bl	80059f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003e84:	f001 fd96 	bl	80059b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003e88:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003e8c:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e8e:	2c00      	cmp	r4, #0
 8003e90:	dd0f      	ble.n	8003eb2 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e92:	f105 0610 	add.w	r6, r5, #16
 8003e96:	e002      	b.n	8003e9e <prvUnlockQueue+0x56>
				--cRxLock;
 8003e98:	3c01      	subs	r4, #1
 8003e9a:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e9c:	b14c      	cbz	r4, 8003eb2 <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9e:	692b      	ldr	r3, [r5, #16]
 8003ea0:	b13b      	cbz	r3, 8003eb2 <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f001 f970 	bl	8005188 <xTaskRemoveFromEventList>
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	d0f5      	beq.n	8003e98 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8003eac:	f001 f9fe 	bl	80052ac <vTaskMissedYield>
 8003eb0:	e7f2      	b.n	8003e98 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8003eb2:	23ff      	movs	r3, #255	; 0xff
 8003eb4:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003eb8:	f001 fd9e 	bl	80059f8 <vPortExitCritical>
}
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}

08003ebe <xQueueGenericReset>:
{
 8003ebe:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003ec0:	b1e0      	cbz	r0, 8003efc <xQueueGenericReset+0x3e>
 8003ec2:	460d      	mov	r5, r1
 8003ec4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003ec6:	f001 fd75 	bl	80059b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003eca:	6822      	ldr	r2, [r4, #0]
 8003ecc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003ece:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	18d0      	adds	r0, r2, r3
 8003ed6:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ed8:	2000      	movs	r0, #0
 8003eda:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003edc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ede:	1a5b      	subs	r3, r3, r1
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ee4:	23ff      	movs	r3, #255	; 0xff
 8003ee6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003eea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003eee:	b9fd      	cbnz	r5, 8003f30 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef0:	6923      	ldr	r3, [r4, #16]
 8003ef2:	b963      	cbnz	r3, 8003f0e <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003ef4:	f001 fd80 	bl	80059f8 <vPortExitCritical>
}
 8003ef8:	2001      	movs	r0, #1
 8003efa:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003f0c:	e7fe      	b.n	8003f0c <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f0e:	f104 0010 	add.w	r0, r4, #16
 8003f12:	f001 f939 	bl	8005188 <xTaskRemoveFromEventList>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d0ec      	beq.n	8003ef4 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003f1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	e7e1      	b.n	8003ef4 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f30:	f104 0010 	add.w	r0, r4, #16
 8003f34:	f7ff feec 	bl	8003d10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f38:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f3c:	f7ff fee8 	bl	8003d10 <vListInitialise>
 8003f40:	e7d8      	b.n	8003ef4 <xQueueGenericReset+0x36>

08003f42 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f42:	b940      	cbnz	r0, 8003f56 <xQueueGenericCreateStatic+0x14>
 8003f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f48:	f383 8811 	msr	BASEPRI, r3
 8003f4c:	f3bf 8f6f 	isb	sy
 8003f50:	f3bf 8f4f 	dsb	sy
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericCreateStatic+0x12>
	{
 8003f56:	b510      	push	{r4, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	461c      	mov	r4, r3
 8003f5c:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8003f5e:	b154      	cbz	r4, 8003f76 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f60:	b192      	cbz	r2, 8003f88 <xQueueGenericCreateStatic+0x46>
 8003f62:	b9d9      	cbnz	r1, 8003f9c <xQueueGenericCreateStatic+0x5a>
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	e7fe      	b.n	8003f74 <xQueueGenericCreateStatic+0x32>
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003f86:	e7fe      	b.n	8003f86 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f88:	b341      	cbz	r1, 8003fdc <xQueueGenericCreateStatic+0x9a>
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	e7fe      	b.n	8003f9a <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f9c:	2050      	movs	r0, #80	; 0x50
 8003f9e:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fa0:	9801      	ldr	r0, [sp, #4]
 8003fa2:	2850      	cmp	r0, #80	; 0x50
 8003fa4:	d008      	beq.n	8003fb8 <xQueueGenericCreateStatic+0x76>
 8003fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003faa:	f383 8811 	msr	BASEPRI, r3
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f3bf 8f4f 	dsb	sy
 8003fb6:	e7fe      	b.n	8003fb6 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fb8:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fc0:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003fc2:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fc4:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f7ff ff78 	bl	8003ebe <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003fce:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003fd2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	b002      	add	sp, #8
 8003fda:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fdc:	2250      	movs	r2, #80	; 0x50
 8003fde:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fe0:	9a01      	ldr	r2, [sp, #4]
 8003fe2:	2a50      	cmp	r2, #80	; 0x50
 8003fe4:	d1df      	bne.n	8003fa6 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fe6:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fee:	4622      	mov	r2, r4
 8003ff0:	e7e6      	b.n	8003fc0 <xQueueGenericCreateStatic+0x7e>

08003ff2 <xQueueGenericCreate>:
	{
 8003ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ff4:	b940      	cbnz	r0, 8004008 <xQueueGenericCreate+0x16>
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	e7fe      	b.n	8004006 <xQueueGenericCreate+0x14>
 8004008:	460d      	mov	r5, r1
 800400a:	4614      	mov	r4, r2
 800400c:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800400e:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004012:	3050      	adds	r0, #80	; 0x50
 8004014:	f001 fe54 	bl	8005cc0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004018:	4606      	mov	r6, r0
 800401a:	b170      	cbz	r0, 800403a <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800401c:	2300      	movs	r3, #0
 800401e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004022:	b165      	cbz	r5, 800403e <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004024:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004028:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800402a:	63f7      	str	r7, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800402c:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800402e:	2101      	movs	r1, #1
 8004030:	4630      	mov	r0, r6
 8004032:	f7ff ff44 	bl	8003ebe <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8004036:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
	}
 800403a:	4630      	mov	r0, r6
 800403c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800403e:	4603      	mov	r3, r0
 8004040:	e7f2      	b.n	8004028 <xQueueGenericCreate+0x36>

08004042 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8004042:	b940      	cbnz	r0, 8004056 <xQueueCreateCountingSemaphoreStatic+0x14>
 8004044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004048:	f383 8811 	msr	BASEPRI, r3
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	f3bf 8f4f 	dsb	sy
 8004054:	e7fe      	b.n	8004054 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8004056:	b510      	push	{r4, lr}
 8004058:	b082      	sub	sp, #8
 800405a:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 800405c:	4288      	cmp	r0, r1
 800405e:	d208      	bcs.n	8004072 <xQueueCreateCountingSemaphoreStatic+0x30>
 8004060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	e7fe      	b.n	8004070 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004072:	2302      	movs	r3, #2
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	2200      	movs	r2, #0
 800407a:	4611      	mov	r1, r2
 800407c:	f7ff ff61 	bl	8003f42 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8004080:	b100      	cbz	r0, 8004084 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004082:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8004084:	b002      	add	sp, #8
 8004086:	bd10      	pop	{r4, pc}

08004088 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8004088:	b940      	cbnz	r0, 800409c <xQueueCreateCountingSemaphore+0x14>
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	e7fe      	b.n	800409a <xQueueCreateCountingSemaphore+0x12>
	{
 800409c:	b510      	push	{r4, lr}
 800409e:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 80040a0:	4288      	cmp	r0, r1
 80040a2:	d208      	bcs.n	80040b6 <xQueueCreateCountingSemaphore+0x2e>
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	e7fe      	b.n	80040b4 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040b6:	2202      	movs	r2, #2
 80040b8:	2100      	movs	r1, #0
 80040ba:	f7ff ff9a 	bl	8003ff2 <xQueueGenericCreate>
		if( xHandle != NULL )
 80040be:	b100      	cbz	r0, 80040c2 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80040c0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80040c2:	bd10      	pop	{r4, pc}

080040c4 <xQueueGenericSend>:
{
 80040c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80040c8:	b085      	sub	sp, #20
 80040ca:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80040cc:	b188      	cbz	r0, 80040f2 <xQueueGenericSend+0x2e>
 80040ce:	460e      	mov	r6, r1
 80040d0:	461d      	mov	r5, r3
 80040d2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d4:	b1b1      	cbz	r1, 8004104 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040d6:	2d02      	cmp	r5, #2
 80040d8:	d120      	bne.n	800411c <xQueueGenericSend+0x58>
 80040da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d01d      	beq.n	800411c <xQueueGenericSend+0x58>
 80040e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	e7fe      	b.n	80040f0 <xQueueGenericSend+0x2c>
 80040f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004102:	e7fe      	b.n	8004102 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004104:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0e5      	beq.n	80040d6 <xQueueGenericSend+0x12>
 800410a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410e:	f383 8811 	msr	BASEPRI, r3
 8004112:	f3bf 8f6f 	isb	sy
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	e7fe      	b.n	800411a <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800411c:	f001 f8d2 	bl	80052c4 <xTaskGetSchedulerState>
 8004120:	b950      	cbnz	r0, 8004138 <xQueueGenericSend+0x74>
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	b163      	cbz	r3, 8004140 <xQueueGenericSend+0x7c>
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	e7fe      	b.n	8004136 <xQueueGenericSend+0x72>
 8004138:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800413c:	2700      	movs	r7, #0
 800413e:	e03a      	b.n	80041b6 <xQueueGenericSend+0xf2>
 8004140:	f04f 0800 	mov.w	r8, #0
 8004144:	e7fa      	b.n	800413c <xQueueGenericSend+0x78>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004146:	462a      	mov	r2, r5
 8004148:	4631      	mov	r1, r6
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff fe2f 	bl	8003dae <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004152:	b983      	cbnz	r3, 8004176 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 8004154:	b148      	cbz	r0, 800416a <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 8004156:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800415a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800415e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800416a:	f001 fc45 	bl	80059f8 <vPortExitCritical>
				return pdPASS;
 800416e:	2001      	movs	r0, #1
}
 8004170:	b005      	add	sp, #20
 8004172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004176:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800417a:	f001 f805 	bl	8005188 <xTaskRemoveFromEventList>
 800417e:	2800      	cmp	r0, #0
 8004180:	d0f3      	beq.n	800416a <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 8004182:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	f3bf 8f6f 	isb	sy
 8004196:	e7e8      	b.n	800416a <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 8004198:	f001 fc2e 	bl	80059f8 <vPortExitCritical>
					return errQUEUE_FULL;
 800419c:	2000      	movs	r0, #0
 800419e:	e7e7      	b.n	8004170 <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a0:	a802      	add	r0, sp, #8
 80041a2:	f001 f835 	bl	8005210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041a6:	e014      	b.n	80041d2 <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 80041a8:	4620      	mov	r0, r4
 80041aa:	f7ff fe4d 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041ae:	f000 feb7 	bl	8004f20 <xTaskResumeAll>
 80041b2:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80041b6:	f001 fbfd 	bl	80059b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80041bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80041be:	429a      	cmp	r2, r3
 80041c0:	d3c1      	bcc.n	8004146 <xQueueGenericSend+0x82>
 80041c2:	2d02      	cmp	r5, #2
 80041c4:	d0bf      	beq.n	8004146 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 80041c6:	9b01      	ldr	r3, [sp, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0e5      	beq.n	8004198 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 80041cc:	f1b8 0f00 	cmp.w	r8, #0
 80041d0:	d0e6      	beq.n	80041a0 <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 80041d2:	f001 fc11 	bl	80059f8 <vPortExitCritical>
		vTaskSuspendAll();
 80041d6:	f000 fdf3 	bl	8004dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041da:	f001 fbeb 	bl	80059b4 <vPortEnterCritical>
 80041de:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 80041e2:	b252      	sxtb	r2, r2
 80041e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80041e8:	bf08      	it	eq
 80041ea:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80041ee:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 80041f2:	b252      	sxtb	r2, r2
 80041f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80041f8:	bf08      	it	eq
 80041fa:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80041fe:	f001 fbfb 	bl	80059f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004202:	a901      	add	r1, sp, #4
 8004204:	a802      	add	r0, sp, #8
 8004206:	f001 f80f 	bl	8005228 <xTaskCheckForTimeOut>
 800420a:	bb00      	cbnz	r0, 800424e <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800420c:	f001 fbd2 	bl	80059b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004210:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8004214:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004218:	f001 fbee 	bl	80059f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800421c:	45c1      	cmp	r9, r8
 800421e:	d1c3      	bne.n	80041a8 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004220:	9901      	ldr	r1, [sp, #4]
 8004222:	f104 0010 	add.w	r0, r4, #16
 8004226:	f000 ff79 	bl	800511c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800422a:	4620      	mov	r0, r4
 800422c:	f7ff fe0c 	bl	8003e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004230:	f000 fe76 	bl	8004f20 <xTaskResumeAll>
 8004234:	2800      	cmp	r0, #0
 8004236:	d1bc      	bne.n	80041b2 <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8004238:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800423c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004240:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
 800424c:	e7b1      	b.n	80041b2 <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 800424e:	4620      	mov	r0, r4
 8004250:	f7ff fdfa 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004254:	f000 fe64 	bl	8004f20 <xTaskResumeAll>
			return errQUEUE_FULL;
 8004258:	2000      	movs	r0, #0
 800425a:	e789      	b.n	8004170 <xQueueGenericSend+0xac>

0800425c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800425c:	b148      	cbz	r0, 8004272 <prvInitialiseMutex+0x16>
	{
 800425e:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004260:	2100      	movs	r1, #0
 8004262:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004264:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004266:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004268:	460b      	mov	r3, r1
 800426a:	460a      	mov	r2, r1
 800426c:	f7ff ff2a 	bl	80040c4 <xQueueGenericSend>
	}
 8004270:	bd08      	pop	{r3, pc}
 8004272:	4770      	bx	lr

08004274 <xQueueCreateMutex>:
	{
 8004274:	b510      	push	{r4, lr}
 8004276:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004278:	2100      	movs	r1, #0
 800427a:	2001      	movs	r0, #1
 800427c:	f7ff feb9 	bl	8003ff2 <xQueueGenericCreate>
 8004280:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004282:	f7ff ffeb 	bl	800425c <prvInitialiseMutex>
	}
 8004286:	4620      	mov	r0, r4
 8004288:	bd10      	pop	{r4, pc}

0800428a <xQueueCreateMutexStatic>:
	{
 800428a:	b510      	push	{r4, lr}
 800428c:	b082      	sub	sp, #8
 800428e:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004290:	9000      	str	r0, [sp, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	4611      	mov	r1, r2
 8004296:	2001      	movs	r0, #1
 8004298:	f7ff fe53 	bl	8003f42 <xQueueGenericCreateStatic>
 800429c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800429e:	f7ff ffdd 	bl	800425c <prvInitialiseMutex>
	}
 80042a2:	4620      	mov	r0, r4
 80042a4:	b002      	add	sp, #8
 80042a6:	bd10      	pop	{r4, pc}

080042a8 <xQueueGiveMutexRecursive>:
	{
 80042a8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 80042aa:	b138      	cbz	r0, 80042bc <xQueueGiveMutexRecursive+0x14>
 80042ac:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80042ae:	6885      	ldr	r5, [r0, #8]
 80042b0:	f001 f802 	bl	80052b8 <xTaskGetCurrentTaskHandle>
 80042b4:	4285      	cmp	r5, r0
 80042b6:	d00a      	beq.n	80042ce <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 80042b8:	2000      	movs	r0, #0
	}
 80042ba:	bd38      	pop	{r3, r4, r5, pc}
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80042cc:	e7fe      	b.n	80042cc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80042ce:	68e3      	ldr	r3, [r4, #12]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80042d4:	b10b      	cbz	r3, 80042da <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 80042d6:	2001      	movs	r0, #1
		return xReturn;
 80042d8:	e7ef      	b.n	80042ba <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80042da:	461a      	mov	r2, r3
 80042dc:	4619      	mov	r1, r3
 80042de:	4620      	mov	r0, r4
 80042e0:	f7ff fef0 	bl	80040c4 <xQueueGenericSend>
			xReturn = pdPASS;
 80042e4:	2001      	movs	r0, #1
 80042e6:	e7e8      	b.n	80042ba <xQueueGiveMutexRecursive+0x12>

080042e8 <xQueueGenericSendFromISR>:
{
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80042ec:	b190      	cbz	r0, 8004314 <xQueueGenericSendFromISR+0x2c>
 80042ee:	460f      	mov	r7, r1
 80042f0:	4616      	mov	r6, r2
 80042f2:	461c      	mov	r4, r3
 80042f4:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042f6:	b1b1      	cbz	r1, 8004326 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042f8:	2c02      	cmp	r4, #2
 80042fa:	d120      	bne.n	800433e <xQueueGenericSendFromISR+0x56>
 80042fc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d01d      	beq.n	800433e <xQueueGenericSendFromISR+0x56>
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	e7fe      	b.n	8004312 <xQueueGenericSendFromISR+0x2a>
 8004314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004318:	f383 8811 	msr	BASEPRI, r3
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004324:	e7fe      	b.n	8004324 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004326:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0e5      	beq.n	80042f8 <xQueueGenericSendFromISR+0x10>
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	e7fe      	b.n	800433c <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800433e:	f001 fc61 	bl	8005c04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004342:	f3ef 8911 	mrs	r9, BASEPRI
 8004346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800434a:	f383 8811 	msr	BASEPRI, r3
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004356:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8004358:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800435a:	429a      	cmp	r2, r3
 800435c:	d306      	bcc.n	800436c <xQueueGenericSendFromISR+0x84>
 800435e:	2c02      	cmp	r4, #2
 8004360:	d004      	beq.n	800436c <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 8004362:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004364:	f389 8811 	msr	BASEPRI, r9
}
 8004368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 800436c:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 8004370:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004374:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004376:	4622      	mov	r2, r4
 8004378:	4639      	mov	r1, r7
 800437a:	4628      	mov	r0, r5
 800437c:	f7ff fd17 	bl	8003dae <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004380:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004384:	d006      	beq.n	8004394 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004386:	f108 0301 	add.w	r3, r8, #1
 800438a:	b25b      	sxtb	r3, r3
 800438c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8004390:	2001      	movs	r0, #1
 8004392:	e7e7      	b.n	8004364 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004394:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004396:	b90b      	cbnz	r3, 800439c <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 8004398:	2001      	movs	r0, #1
 800439a:	e7e3      	b.n	8004364 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800439c:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80043a0:	f000 fef2 	bl	8005188 <xTaskRemoveFromEventList>
 80043a4:	b118      	cbz	r0, 80043ae <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 80043a6:	b126      	cbz	r6, 80043b2 <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043a8:	2001      	movs	r0, #1
 80043aa:	6030      	str	r0, [r6, #0]
 80043ac:	e7da      	b.n	8004364 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 80043ae:	2001      	movs	r0, #1
 80043b0:	e7d8      	b.n	8004364 <xQueueGenericSendFromISR+0x7c>
 80043b2:	2001      	movs	r0, #1
 80043b4:	e7d6      	b.n	8004364 <xQueueGenericSendFromISR+0x7c>

080043b6 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 80043b6:	b168      	cbz	r0, 80043d4 <xQueueGiveFromISR+0x1e>
{
 80043b8:	b570      	push	{r4, r5, r6, lr}
 80043ba:	460c      	mov	r4, r1
 80043bc:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80043be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80043c0:	b18b      	cbz	r3, 80043e6 <xQueueGiveFromISR+0x30>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	e7fe      	b.n	80043d2 <xQueueGiveFromISR+0x1c>
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80043e4:	e7fe      	b.n	80043e4 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80043e6:	6803      	ldr	r3, [r0, #0]
 80043e8:	b1eb      	cbz	r3, 8004426 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043ea:	f001 fc0b 	bl	8005c04 <vPortValidateInterruptPriority>
	__asm volatile
 80043ee:	f3ef 8611 	mrs	r6, BASEPRI
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004402:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004404:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004406:	4293      	cmp	r3, r2
 8004408:	d926      	bls.n	8004458 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800440a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800440e:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004410:	3201      	adds	r2, #1
 8004412:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004418:	d011      	beq.n	800443e <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800441a:	3301      	adds	r3, #1
 800441c:	b25b      	sxtb	r3, r3
 800441e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 8004422:	2001      	movs	r0, #1
 8004424:	e019      	b.n	800445a <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004426:	6883      	ldr	r3, [r0, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0de      	beq.n	80043ea <xQueueGiveFromISR+0x34>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	e7fe      	b.n	800443c <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800443e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004440:	b90b      	cbnz	r3, 8004446 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8004442:	2001      	movs	r0, #1
 8004444:	e009      	b.n	800445a <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004446:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800444a:	f000 fe9d 	bl	8005188 <xTaskRemoveFromEventList>
 800444e:	b138      	cbz	r0, 8004460 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8004450:	b144      	cbz	r4, 8004464 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004452:	2001      	movs	r0, #1
 8004454:	6020      	str	r0, [r4, #0]
 8004456:	e000      	b.n	800445a <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 8004458:	2000      	movs	r0, #0
	__asm volatile
 800445a:	f386 8811 	msr	BASEPRI, r6
}
 800445e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8004460:	2001      	movs	r0, #1
 8004462:	e7fa      	b.n	800445a <xQueueGiveFromISR+0xa4>
 8004464:	2001      	movs	r0, #1
 8004466:	e7f8      	b.n	800445a <xQueueGiveFromISR+0xa4>

08004468 <xQueueReceive>:
{
 8004468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004470:	b180      	cbz	r0, 8004494 <xQueueReceive+0x2c>
 8004472:	460e      	mov	r6, r1
 8004474:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004476:	b1b1      	cbz	r1, 80044a6 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004478:	f000 ff24 	bl	80052c4 <xTaskGetSchedulerState>
 800447c:	b9f8      	cbnz	r0, 80044be <xQueueReceive+0x56>
 800447e:	9b01      	ldr	r3, [sp, #4]
 8004480:	b30b      	cbz	r3, 80044c6 <xQueueReceive+0x5e>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	e7fe      	b.n	8004492 <xQueueReceive+0x2a>
 8004494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80044a4:	e7fe      	b.n	80044a4 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0e5      	beq.n	8004478 <xQueueReceive+0x10>
 80044ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b0:	f383 8811 	msr	BASEPRI, r3
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	e7fe      	b.n	80044bc <xQueueReceive+0x54>
 80044be:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 80044c2:	2700      	movs	r7, #0
 80044c4:	e03b      	b.n	800453e <xQueueReceive+0xd6>
 80044c6:	f04f 0800 	mov.w	r8, #0
 80044ca:	e7fa      	b.n	80044c2 <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80044cc:	4631      	mov	r1, r6
 80044ce:	4620      	mov	r0, r4
 80044d0:	f7ff fca8 	bl	8003e24 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044d4:	3d01      	subs	r5, #1
 80044d6:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044d8:	6923      	ldr	r3, [r4, #16]
 80044da:	b92b      	cbnz	r3, 80044e8 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 80044dc:	f001 fa8c 	bl	80059f8 <vPortExitCritical>
				return pdPASS;
 80044e0:	2001      	movs	r0, #1
}
 80044e2:	b004      	add	sp, #16
 80044e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044e8:	f104 0010 	add.w	r0, r4, #16
 80044ec:	f000 fe4c 	bl	8005188 <xTaskRemoveFromEventList>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d0f3      	beq.n	80044dc <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 80044f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80044f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	e7e8      	b.n	80044dc <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 800450a:	f001 fa75 	bl	80059f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800450e:	2000      	movs	r0, #0
 8004510:	e7e7      	b.n	80044e2 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004512:	a802      	add	r0, sp, #8
 8004514:	f000 fe7c 	bl	8005210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004518:	e01c      	b.n	8004554 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 800451a:	4620      	mov	r0, r4
 800451c:	f7ff fc94 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004520:	f000 fcfe 	bl	8004f20 <xTaskResumeAll>
 8004524:	e009      	b.n	800453a <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8004526:	4620      	mov	r0, r4
 8004528:	f7ff fc8e 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800452c:	f000 fcf8 	bl	8004f20 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff fc31 	bl	8003d98 <prvIsQueueEmpty>
 8004536:	2800      	cmp	r0, #0
 8004538:	d146      	bne.n	80045c8 <xQueueReceive+0x160>
 800453a:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800453e:	f001 fa39 	bl	80059b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004542:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004544:	2d00      	cmp	r5, #0
 8004546:	d1c1      	bne.n	80044cc <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004548:	9b01      	ldr	r3, [sp, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0dd      	beq.n	800450a <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 800454e:	f1b8 0f00 	cmp.w	r8, #0
 8004552:	d0de      	beq.n	8004512 <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 8004554:	f001 fa50 	bl	80059f8 <vPortExitCritical>
		vTaskSuspendAll();
 8004558:	f000 fc32 	bl	8004dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800455c:	f001 fa2a 	bl	80059b4 <vPortEnterCritical>
 8004560:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004564:	b25b      	sxtb	r3, r3
 8004566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456a:	bf08      	it	eq
 800456c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004570:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004574:	b25b      	sxtb	r3, r3
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	bf08      	it	eq
 800457c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004580:	f001 fa3a 	bl	80059f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004584:	a901      	add	r1, sp, #4
 8004586:	a802      	add	r0, sp, #8
 8004588:	f000 fe4e 	bl	8005228 <xTaskCheckForTimeOut>
 800458c:	2800      	cmp	r0, #0
 800458e:	d1ca      	bne.n	8004526 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004590:	4620      	mov	r0, r4
 8004592:	f7ff fc01 	bl	8003d98 <prvIsQueueEmpty>
 8004596:	2800      	cmp	r0, #0
 8004598:	d0bf      	beq.n	800451a <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800459a:	9901      	ldr	r1, [sp, #4]
 800459c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80045a0:	f000 fdbc 	bl	800511c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff fc4f 	bl	8003e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80045aa:	f000 fcb9 	bl	8004f20 <xTaskResumeAll>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d1c3      	bne.n	800453a <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 80045b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	e7b8      	b.n	800453a <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 80045c8:	2000      	movs	r0, #0
 80045ca:	e78a      	b.n	80044e2 <xQueueReceive+0x7a>

080045cc <xQueueSemaphoreTake>:
{
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b085      	sub	sp, #20
 80045d0:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80045d2:	b158      	cbz	r0, 80045ec <xQueueSemaphoreTake+0x20>
 80045d4:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80045d6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80045d8:	b18b      	cbz	r3, 80045fe <xQueueSemaphoreTake+0x32>
 80045da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	e7fe      	b.n	80045ea <xQueueSemaphoreTake+0x1e>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 80045fc:	e7fe      	b.n	80045fc <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045fe:	f000 fe61 	bl	80052c4 <xTaskGetSchedulerState>
 8004602:	b950      	cbnz	r0, 800461a <xQueueSemaphoreTake+0x4e>
 8004604:	9b01      	ldr	r3, [sp, #4]
 8004606:	b163      	cbz	r3, 8004622 <xQueueSemaphoreTake+0x56>
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	e7fe      	b.n	8004618 <xQueueSemaphoreTake+0x4c>
 800461a:	2600      	movs	r6, #0
 800461c:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800461e:	2500      	movs	r5, #0
 8004620:	e04e      	b.n	80046c0 <xQueueSemaphoreTake+0xf4>
 8004622:	2600      	movs	r6, #0
 8004624:	4637      	mov	r7, r6
 8004626:	e7fa      	b.n	800461e <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004628:	3b01      	subs	r3, #1
 800462a:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	b13b      	cbz	r3, 8004640 <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004630:	6923      	ldr	r3, [r4, #16]
 8004632:	b94b      	cbnz	r3, 8004648 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 8004634:	f001 f9e0 	bl	80059f8 <vPortExitCritical>
				return pdPASS;
 8004638:	2601      	movs	r6, #1
}
 800463a:	4630      	mov	r0, r6
 800463c:	b005      	add	sp, #20
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004640:	f000 ff32 	bl	80054a8 <pvTaskIncrementMutexHeldCount>
 8004644:	60a0      	str	r0, [r4, #8]
 8004646:	e7f3      	b.n	8004630 <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004648:	f104 0010 	add.w	r0, r4, #16
 800464c:	f000 fd9c 	bl	8005188 <xTaskRemoveFromEventList>
 8004650:	2800      	cmp	r0, #0
 8004652:	d0ef      	beq.n	8004634 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 8004654:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800465c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	e7e4      	b.n	8004634 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800466a:	b146      	cbz	r6, 800467e <xQueueSemaphoreTake+0xb2>
 800466c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	e7fe      	b.n	800467c <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 800467e:	f001 f9bb 	bl	80059f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8004682:	e7da      	b.n	800463a <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004684:	a802      	add	r0, sp, #8
 8004686:	f000 fdc3 	bl	8005210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800468a:	e023      	b.n	80046d4 <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 800468c:	f001 f992 	bl	80059b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004690:	68a0      	ldr	r0, [r4, #8]
 8004692:	f000 fe27 	bl	80052e4 <xTaskPriorityInherit>
 8004696:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8004698:	f001 f9ae 	bl	80059f8 <vPortExitCritical>
 800469c:	e040      	b.n	8004720 <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 800469e:	4620      	mov	r0, r4
 80046a0:	f7ff fbd2 	bl	8003e48 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046a4:	f000 fc3c 	bl	8004f20 <xTaskResumeAll>
 80046a8:	e009      	b.n	80046be <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7ff fbcc 	bl	8003e48 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046b0:	f000 fc36 	bl	8004f20 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046b4:	4620      	mov	r0, r4
 80046b6:	f7ff fb6f 	bl	8003d98 <prvIsQueueEmpty>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d147      	bne.n	800474e <xQueueSemaphoreTake+0x182>
 80046be:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 80046c0:	f001 f978 	bl	80059b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ae      	bne.n	8004628 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80046ca:	9b01      	ldr	r3, [sp, #4]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0cc      	beq.n	800466a <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 80046d0:	2f00      	cmp	r7, #0
 80046d2:	d0d7      	beq.n	8004684 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 80046d4:	f001 f990 	bl	80059f8 <vPortExitCritical>
		vTaskSuspendAll();
 80046d8:	f000 fb72 	bl	8004dc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046dc:	f001 f96a 	bl	80059b4 <vPortEnterCritical>
 80046e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80046e4:	b25b      	sxtb	r3, r3
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	bf08      	it	eq
 80046ec:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 80046f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80046f4:	b25b      	sxtb	r3, r3
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	bf08      	it	eq
 80046fc:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 8004700:	f001 f97a 	bl	80059f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004704:	a901      	add	r1, sp, #4
 8004706:	a802      	add	r0, sp, #8
 8004708:	f000 fd8e 	bl	8005228 <xTaskCheckForTimeOut>
 800470c:	2800      	cmp	r0, #0
 800470e:	d1cc      	bne.n	80046aa <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004710:	4620      	mov	r0, r4
 8004712:	f7ff fb41 	bl	8003d98 <prvIsQueueEmpty>
 8004716:	2800      	cmp	r0, #0
 8004718:	d0c1      	beq.n	800469e <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0b5      	beq.n	800468c <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004720:	9901      	ldr	r1, [sp, #4]
 8004722:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004726:	f000 fcf9 	bl	800511c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800472a:	4620      	mov	r0, r4
 800472c:	f7ff fb8c 	bl	8003e48 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004730:	f000 fbf6 	bl	8004f20 <xTaskResumeAll>
 8004734:	2800      	cmp	r0, #0
 8004736:	d1c2      	bne.n	80046be <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8004738:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800473c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004740:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	e7b7      	b.n	80046be <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 800474e:	2e00      	cmp	r6, #0
 8004750:	f43f af73 	beq.w	800463a <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 8004754:	f001 f92e 	bl	80059b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004758:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800475a:	b119      	cbz	r1, 8004764 <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800475c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004764:	68a0      	ldr	r0, [r4, #8]
 8004766:	f000 fe4f 	bl	8005408 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800476a:	f001 f945 	bl	80059f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800476e:	2600      	movs	r6, #0
 8004770:	e763      	b.n	800463a <xQueueSemaphoreTake+0x6e>

08004772 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 8004772:	b180      	cbz	r0, 8004796 <xQueueTakeMutexRecursive+0x24>
	{
 8004774:	b570      	push	{r4, r5, r6, lr}
 8004776:	460c      	mov	r4, r1
 8004778:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800477a:	6886      	ldr	r6, [r0, #8]
 800477c:	f000 fd9c 	bl	80052b8 <xTaskGetCurrentTaskHandle>
 8004780:	4286      	cmp	r6, r0
 8004782:	d011      	beq.n	80047a8 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004784:	4621      	mov	r1, r4
 8004786:	4628      	mov	r0, r5
 8004788:	f7ff ff20 	bl	80045cc <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800478c:	b180      	cbz	r0, 80047b0 <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800478e:	68eb      	ldr	r3, [r5, #12]
 8004790:	3301      	adds	r3, #1
 8004792:	60eb      	str	r3, [r5, #12]
		return xReturn;
 8004794:	e00c      	b.n	80047b0 <xQueueTakeMutexRecursive+0x3e>
 8004796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 80047a6:	e7fe      	b.n	80047a6 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80047a8:	68eb      	ldr	r3, [r5, #12]
 80047aa:	3301      	adds	r3, #1
 80047ac:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 80047ae:	2001      	movs	r0, #1
	}
 80047b0:	bd70      	pop	{r4, r5, r6, pc}

080047b2 <xQueueReceiveFromISR>:
{
 80047b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80047b6:	b1b0      	cbz	r0, 80047e6 <xQueueReceiveFromISR+0x34>
 80047b8:	460d      	mov	r5, r1
 80047ba:	4616      	mov	r6, r2
 80047bc:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047be:	b1d9      	cbz	r1, 80047f8 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047c0:	f001 fa20 	bl	8005c04 <vPortValidateInterruptPriority>
	__asm volatile
 80047c4:	f3ef 8811 	mrs	r8, BASEPRI
 80047c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047cc:	f383 8811 	msr	BASEPRI, r3
 80047d0:	f3bf 8f6f 	isb	sy
 80047d4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047d8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047da:	b9cf      	cbnz	r7, 8004810 <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 80047dc:	2000      	movs	r0, #0
	__asm volatile
 80047de:	f388 8811 	msr	BASEPRI, r8
}
 80047e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80047f6:	e7fe      	b.n	80047f6 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0e0      	beq.n	80047c0 <xQueueReceiveFromISR+0xe>
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	e7fe      	b.n	800480e <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004810:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8004814:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004818:	4629      	mov	r1, r5
 800481a:	4620      	mov	r0, r4
 800481c:	f7ff fb02 	bl	8003e24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004820:	3f01      	subs	r7, #1
 8004822:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004824:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004828:	d006      	beq.n	8004838 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800482a:	f109 0301 	add.w	r3, r9, #1
 800482e:	b25b      	sxtb	r3, r3
 8004830:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8004834:	2001      	movs	r0, #1
 8004836:	e7d2      	b.n	80047de <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004838:	6923      	ldr	r3, [r4, #16]
 800483a:	b90b      	cbnz	r3, 8004840 <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800483c:	2001      	movs	r0, #1
 800483e:	e7ce      	b.n	80047de <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004840:	f104 0010 	add.w	r0, r4, #16
 8004844:	f000 fca0 	bl	8005188 <xTaskRemoveFromEventList>
 8004848:	b118      	cbz	r0, 8004852 <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 800484a:	b126      	cbz	r6, 8004856 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800484c:	2001      	movs	r0, #1
 800484e:	6030      	str	r0, [r6, #0]
 8004850:	e7c5      	b.n	80047de <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8004852:	2001      	movs	r0, #1
 8004854:	e7c3      	b.n	80047de <xQueueReceiveFromISR+0x2c>
 8004856:	2001      	movs	r0, #1
 8004858:	e7c1      	b.n	80047de <xQueueReceiveFromISR+0x2c>
	...

0800485c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800485c:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800485e:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004860:	4c08      	ldr	r4, [pc, #32]	; (8004884 <vQueueAddToRegistry+0x28>)
 8004862:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8004866:	b12a      	cbz	r2, 8004874 <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004868:	3301      	adds	r3, #1
 800486a:	2b08      	cmp	r3, #8
 800486c:	d1f9      	bne.n	8004862 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800486e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004872:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004874:	4a03      	ldr	r2, [pc, #12]	; (8004884 <vQueueAddToRegistry+0x28>)
 8004876:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800487a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800487e:	6058      	str	r0, [r3, #4]
				break;
 8004880:	e7f5      	b.n	800486e <vQueueAddToRegistry+0x12>
 8004882:	bf00      	nop
 8004884:	20006c5c 	.word	0x20006c5c

08004888 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004888:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800488a:	4909      	ldr	r1, [pc, #36]	; (80048b0 <vQueueUnregisterQueue+0x28>)
 800488c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8004890:	6852      	ldr	r2, [r2, #4]
 8004892:	4282      	cmp	r2, r0
 8004894:	d003      	beq.n	800489e <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004896:	3301      	adds	r3, #1
 8004898:	2b08      	cmp	r3, #8
 800489a:	d1f7      	bne.n	800488c <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800489c:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800489e:	4a04      	ldr	r2, [pc, #16]	; (80048b0 <vQueueUnregisterQueue+0x28>)
 80048a0:	2100      	movs	r1, #0
 80048a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80048a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80048aa:	6059      	str	r1, [r3, #4]
				break;
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20006c5c 	.word	0x20006c5c

080048b4 <vQueueDelete>:
	configASSERT( pxQueue );
 80048b4:	b138      	cbz	r0, 80048c6 <vQueueDelete+0x12>
{
 80048b6:	b510      	push	{r4, lr}
 80048b8:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 80048ba:	f7ff ffe5 	bl	8004888 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80048be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80048c2:	b14b      	cbz	r3, 80048d8 <vQueueDelete+0x24>
}
 80048c4:	bd10      	pop	{r4, pc}
 80048c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ca:	f383 8811 	msr	BASEPRI, r3
 80048ce:	f3bf 8f6f 	isb	sy
 80048d2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80048d6:	e7fe      	b.n	80048d6 <vQueueDelete+0x22>
			vPortFree( pxQueue );
 80048d8:	4620      	mov	r0, r4
 80048da:	f001 fa8d 	bl	8005df8 <vPortFree>
}
 80048de:	e7f1      	b.n	80048c4 <vQueueDelete+0x10>

080048e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	4604      	mov	r4, r0
 80048e4:	460d      	mov	r5, r1
 80048e6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80048e8:	f001 f864 	bl	80059b4 <vPortEnterCritical>
 80048ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80048f0:	b25b      	sxtb	r3, r3
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	bf04      	itt	eq
 80048f8:	2300      	moveq	r3, #0
 80048fa:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80048fe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004902:	b25b      	sxtb	r3, r3
 8004904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004908:	bf04      	itt	eq
 800490a:	2300      	moveq	r3, #0
 800490c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8004910:	f001 f872 	bl	80059f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004916:	b11b      	cbz	r3, 8004920 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004918:	4620      	mov	r0, r4
 800491a:	f7ff fa95 	bl	8003e48 <prvUnlockQueue>
	}
 800491e:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004920:	4632      	mov	r2, r6
 8004922:	4629      	mov	r1, r5
 8004924:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004928:	f000 fc10 	bl	800514c <vTaskPlaceOnEventListRestricted>
 800492c:	e7f4      	b.n	8004918 <vQueueWaitForMessageRestricted+0x38>
	...

08004930 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004930:	4b08      	ldr	r3, [pc, #32]	; (8004954 <prvResetNextTaskUnblockTime+0x24>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	b923      	cbnz	r3, 8004942 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004938:	4b07      	ldr	r3, [pc, #28]	; (8004958 <prvResetNextTaskUnblockTime+0x28>)
 800493a:	f04f 32ff 	mov.w	r2, #4294967295
 800493e:	601a      	str	r2, [r3, #0]
 8004940:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004942:	4b04      	ldr	r3, [pc, #16]	; (8004954 <prvResetNextTaskUnblockTime+0x24>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <prvResetNextTaskUnblockTime+0x28>)
 800494e:	601a      	str	r2, [r3, #0]
	}
}
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	20006ca0 	.word	0x20006ca0
 8004958:	20007144 	.word	0x20007144

0800495c <prvInitialiseNewTask>:
{
 800495c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004960:	4606      	mov	r6, r0
 8004962:	4689      	mov	r9, r1
 8004964:	461f      	mov	r7, r3
 8004966:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800496a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800496c:	0095      	lsls	r5, r2, #2
 800496e:	462a      	mov	r2, r5
 8004970:	21a5      	movs	r1, #165	; 0xa5
 8004972:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004974:	f009 fc77 	bl	800e266 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004978:	3d04      	subs	r5, #4
 800497a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800497c:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800497e:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 8004982:	f1b9 0f00 	cmp.w	r9, #0
 8004986:	d043      	beq.n	8004a10 <prvInitialiseNewTask+0xb4>
 8004988:	f109 3cff 	add.w	ip, r9, #4294967295
 800498c:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8004990:	f109 010f 	add.w	r1, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004994:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8004998:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800499c:	b10a      	cbz	r2, 80049a2 <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800499e:	458c      	cmp	ip, r1
 80049a0:	d1f8      	bne.n	8004994 <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80049a2:	2300      	movs	r3, #0
 80049a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80049a8:	9b08      	ldr	r3, [sp, #32]
 80049aa:	2b37      	cmp	r3, #55	; 0x37
 80049ac:	bf28      	it	cs
 80049ae:	2337      	movcs	r3, #55	; 0x37
 80049b0:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 80049b2:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80049b4:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80049b6:	f04f 0a00 	mov.w	sl, #0
 80049ba:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049be:	1d20      	adds	r0, r4, #4
 80049c0:	f7ff f9b1 	bl	8003d26 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049c4:	f104 0018 	add.w	r0, r4, #24
 80049c8:	f7ff f9ad 	bl	8003d26 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049cc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ce:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 80049d2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049d4:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 80049d6:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049da:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049de:	2260      	movs	r2, #96	; 0x60
 80049e0:	4651      	mov	r1, sl
 80049e2:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80049e6:	f009 fc3e 	bl	800e266 <memset>
 80049ea:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <prvInitialiseNewTask+0xbc>)
 80049ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <prvInitialiseNewTask+0xc0>)
 80049f0:	65e3      	str	r3, [r4, #92]	; 0x5c
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <prvInitialiseNewTask+0xc4>)
 80049f4:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80049f6:	463a      	mov	r2, r7
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	f000 ffb2 	bl	8005964 <pxPortInitialiseStack>
 8004a00:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8004a02:	f1b8 0f00 	cmp.w	r8, #0
 8004a06:	d001      	beq.n	8004a0c <prvInitialiseNewTask+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a08:	f8c8 4000 	str.w	r4, [r8]
}
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a10:	2300      	movs	r3, #0
 8004a12:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8004a16:	e7c7      	b.n	80049a8 <prvInitialiseNewTask+0x4c>
 8004a18:	08012a4c 	.word	0x08012a4c
 8004a1c:	08012a6c 	.word	0x08012a6c
 8004a20:	08012a2c 	.word	0x08012a2c

08004a24 <prvAddNewTaskToReadyList>:
{
 8004a24:	b570      	push	{r4, r5, r6, lr}
 8004a26:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8004a28:	f000 ffc4 	bl	80059b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004a2c:	4a30      	ldr	r2, [pc, #192]	; (8004af0 <prvAddNewTaskToReadyList+0xcc>)
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	3301      	adds	r3, #1
 8004a32:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a34:	4b2f      	ldr	r3, [pc, #188]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d034      	beq.n	8004aa6 <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 8004a3c:	4b2e      	ldr	r3, [pc, #184]	; (8004af8 <prvAddNewTaskToReadyList+0xd4>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	b93b      	cbnz	r3, 8004a52 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a42:	4b2c      	ldr	r3, [pc, #176]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a4a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004a4c:	bf9c      	itt	ls
 8004a4e:	4b29      	ldrls	r3, [pc, #164]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a50:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 8004a52:	4a2a      	ldr	r2, [pc, #168]	; (8004afc <prvAddNewTaskToReadyList+0xd8>)
 8004a54:	6813      	ldr	r3, [r2, #0]
 8004a56:	3301      	adds	r3, #1
 8004a58:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004a5a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8004a5c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8004a5e:	4b28      	ldr	r3, [pc, #160]	; (8004b00 <prvAddNewTaskToReadyList+0xdc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4298      	cmp	r0, r3
 8004a64:	bf84      	itt	hi
 8004a66:	4b26      	ldrhi	r3, [pc, #152]	; (8004b00 <prvAddNewTaskToReadyList+0xdc>)
 8004a68:	6018      	strhi	r0, [r3, #0]
 8004a6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a6e:	1d29      	adds	r1, r5, #4
 8004a70:	4b24      	ldr	r3, [pc, #144]	; (8004b04 <prvAddNewTaskToReadyList+0xe0>)
 8004a72:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a76:	f7ff f959 	bl	8003d2c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004a7a:	f000 ffbd 	bl	80059f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <prvAddNewTaskToReadyList+0xd4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	b17b      	cbz	r3, 8004aa4 <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a84:	4b1b      	ldr	r3, [pc, #108]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d209      	bcs.n	8004aa4 <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8004a90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	f3bf 8f6f 	isb	sy
}
 8004aa4:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <prvAddNewTaskToReadyList+0xd0>)
 8004aa8:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d1d0      	bne.n	8004a52 <prvAddNewTaskToReadyList+0x2e>
 8004ab0:	4c14      	ldr	r4, [pc, #80]	; (8004b04 <prvAddNewTaskToReadyList+0xe0>)
 8004ab2:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff f92a 	bl	8003d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004abc:	3414      	adds	r4, #20
 8004abe:	42b4      	cmp	r4, r6
 8004ac0:	d1f9      	bne.n	8004ab6 <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 8004ac2:	4e11      	ldr	r6, [pc, #68]	; (8004b08 <prvAddNewTaskToReadyList+0xe4>)
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f7ff f923 	bl	8003d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aca:	4c10      	ldr	r4, [pc, #64]	; (8004b0c <prvAddNewTaskToReadyList+0xe8>)
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7ff f91f 	bl	8003d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004ad2:	480f      	ldr	r0, [pc, #60]	; (8004b10 <prvAddNewTaskToReadyList+0xec>)
 8004ad4:	f7ff f91c 	bl	8003d10 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004ad8:	480e      	ldr	r0, [pc, #56]	; (8004b14 <prvAddNewTaskToReadyList+0xf0>)
 8004ada:	f7ff f919 	bl	8003d10 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004ade:	480e      	ldr	r0, [pc, #56]	; (8004b18 <prvAddNewTaskToReadyList+0xf4>)
 8004ae0:	f7ff f916 	bl	8003d10 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004ae4:	4b0d      	ldr	r3, [pc, #52]	; (8004b1c <prvAddNewTaskToReadyList+0xf8>)
 8004ae6:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <prvAddNewTaskToReadyList+0xfc>)
 8004aea:	601c      	str	r4, [r3, #0]
}
 8004aec:	e7b1      	b.n	8004a52 <prvAddNewTaskToReadyList+0x2e>
 8004aee:	bf00      	nop
 8004af0:	20007108 	.word	0x20007108
 8004af4:	20006c9c 	.word	0x20006c9c
 8004af8:	20007164 	.word	0x20007164
 8004afc:	20007114 	.word	0x20007114
 8004b00:	20007118 	.word	0x20007118
 8004b04:	20006ca8 	.word	0x20006ca8
 8004b08:	2000711c 	.word	0x2000711c
 8004b0c:	20007130 	.word	0x20007130
 8004b10:	20007150 	.word	0x20007150
 8004b14:	2000717c 	.word	0x2000717c
 8004b18:	20007168 	.word	0x20007168
 8004b1c:	20006ca0 	.word	0x20006ca0
 8004b20:	20006ca4 	.word	0x20006ca4

08004b24 <prvDeleteTCB>:
	{
 8004b24:	b510      	push	{r4, lr}
 8004b26:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004b28:	3054      	adds	r0, #84	; 0x54
 8004b2a:	f009 fc9d 	bl	800e468 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b2e:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8004b32:	b163      	cbz	r3, 8004b4e <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d011      	beq.n	8004b5c <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d00e      	beq.n	8004b5a <prvDeleteTCB+0x36>
 8004b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b40:	f383 8811 	msr	BASEPRI, r3
 8004b44:	f3bf 8f6f 	isb	sy
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	e7fe      	b.n	8004b4c <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8004b4e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004b50:	f001 f952 	bl	8005df8 <vPortFree>
				vPortFree( pxTCB );
 8004b54:	4620      	mov	r0, r4
 8004b56:	f001 f94f 	bl	8005df8 <vPortFree>
	}
 8004b5a:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004b5c:	4620      	mov	r0, r4
 8004b5e:	f001 f94b 	bl	8005df8 <vPortFree>
 8004b62:	e7fa      	b.n	8004b5a <prvDeleteTCB+0x36>

08004b64 <prvIdleTask>:
{
 8004b64:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b66:	4c15      	ldr	r4, [pc, #84]	; (8004bbc <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b68:	4f15      	ldr	r7, [pc, #84]	; (8004bc0 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8004b6a:	4e16      	ldr	r6, [pc, #88]	; (8004bc4 <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b6c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004bc8 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	b1a3      	cbz	r3, 8004b9e <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8004b74:	f000 ff1e 	bl	80059b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b7c:	1d28      	adds	r0, r5, #4
 8004b7e:	f7ff f8f9 	bl	8003d74 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b82:	6833      	ldr	r3, [r6, #0]
 8004b84:	3b01      	subs	r3, #1
 8004b86:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004b8e:	f000 ff33 	bl	80059f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004b92:	4628      	mov	r0, r5
 8004b94:	f7ff ffc6 	bl	8004b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b98:	6823      	ldr	r3, [r4, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1ea      	bne.n	8004b74 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d9e4      	bls.n	8004b70 <prvIdleTask+0xc>
				taskYIELD();
 8004ba6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bae:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	e7d9      	b.n	8004b70 <prvIdleTask+0xc>
 8004bbc:	2000710c 	.word	0x2000710c
 8004bc0:	2000717c 	.word	0x2000717c
 8004bc4:	20007108 	.word	0x20007108
 8004bc8:	20006ca8 	.word	0x20006ca8

08004bcc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4604      	mov	r4, r0
 8004bd0:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004bd2:	4b17      	ldr	r3, [pc, #92]	; (8004c30 <prvAddCurrentTaskToDelayedList+0x64>)
 8004bd4:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <prvAddCurrentTaskToDelayedList+0x68>)
 8004bd8:	6818      	ldr	r0, [r3, #0]
 8004bda:	3004      	adds	r0, #4
 8004bdc:	f7ff f8ca 	bl	8003d74 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004be0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004be4:	d00d      	beq.n	8004c02 <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004be6:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <prvAddCurrentTaskToDelayedList+0x68>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004bee:	42a6      	cmp	r6, r4
 8004bf0:	d910      	bls.n	8004c14 <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bf2:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004bf4:	6818      	ldr	r0, [r3, #0]
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <prvAddCurrentTaskToDelayedList+0x68>)
 8004bf8:	6819      	ldr	r1, [r3, #0]
 8004bfa:	3104      	adds	r1, #4
 8004bfc:	f7ff f8a1 	bl	8003d42 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c00:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c02:	2d00      	cmp	r5, #0
 8004c04:	d0ef      	beq.n	8004be6 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <prvAddCurrentTaskToDelayedList+0x68>)
 8004c08:	6819      	ldr	r1, [r3, #0]
 8004c0a:	3104      	adds	r1, #4
 8004c0c:	480b      	ldr	r0, [pc, #44]	; (8004c3c <prvAddCurrentTaskToDelayedList+0x70>)
 8004c0e:	f7ff f88d 	bl	8003d2c <vListInsertEnd>
 8004c12:	e7f5      	b.n	8004c00 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c14:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <prvAddCurrentTaskToDelayedList+0x74>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <prvAddCurrentTaskToDelayedList+0x68>)
 8004c1a:	6819      	ldr	r1, [r3, #0]
 8004c1c:	3104      	adds	r1, #4
 8004c1e:	f7ff f890 	bl	8003d42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c22:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <prvAddCurrentTaskToDelayedList+0x78>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004c28:	bf84      	itt	hi
 8004c2a:	4b06      	ldrhi	r3, [pc, #24]	; (8004c44 <prvAddCurrentTaskToDelayedList+0x78>)
 8004c2c:	601c      	strhi	r4, [r3, #0]
}
 8004c2e:	e7e7      	b.n	8004c00 <prvAddCurrentTaskToDelayedList+0x34>
 8004c30:	20007190 	.word	0x20007190
 8004c34:	20006c9c 	.word	0x20006c9c
 8004c38:	20006ca4 	.word	0x20006ca4
 8004c3c:	20007168 	.word	0x20007168
 8004c40:	20006ca0 	.word	0x20006ca0
 8004c44:	20007144 	.word	0x20007144

08004c48 <xTaskCreateStatic>:
	{
 8004c48:	b530      	push	{r4, r5, lr}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004c4e:	b17c      	cbz	r4, 8004c70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c50:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c52:	b1b5      	cbz	r5, 8004c82 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c54:	25bc      	movs	r5, #188	; 0xbc
 8004c56:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c58:	9d04      	ldr	r5, [sp, #16]
 8004c5a:	2dbc      	cmp	r5, #188	; 0xbc
 8004c5c:	d01a      	beq.n	8004c94 <xTaskCreateStatic+0x4c>
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	e7fe      	b.n	8004c6e <xTaskCreateStatic+0x26>
 8004c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004c80:	e7fe      	b.n	8004c80 <xTaskCreateStatic+0x38>
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004c92:	e7fe      	b.n	8004c92 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c94:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c98:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c9a:	2402      	movs	r4, #2
 8004c9c:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ca0:	2400      	movs	r4, #0
 8004ca2:	9403      	str	r4, [sp, #12]
 8004ca4:	9502      	str	r5, [sp, #8]
 8004ca6:	ac05      	add	r4, sp, #20
 8004ca8:	9401      	str	r4, [sp, #4]
 8004caa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004cac:	9400      	str	r4, [sp, #0]
 8004cae:	f7ff fe55 	bl	800495c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cb2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cb4:	f7ff feb6 	bl	8004a24 <prvAddNewTaskToReadyList>
	}
 8004cb8:	9805      	ldr	r0, [sp, #20]
 8004cba:	b007      	add	sp, #28
 8004cbc:	bd30      	pop	{r4, r5, pc}

08004cbe <xTaskCreate>:
	{
 8004cbe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	4607      	mov	r7, r0
 8004cc6:	4688      	mov	r8, r1
 8004cc8:	4614      	mov	r4, r2
 8004cca:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ccc:	0090      	lsls	r0, r2, #2
 8004cce:	f000 fff7 	bl	8005cc0 <pvPortMalloc>
			if( pxStack != NULL )
 8004cd2:	b308      	cbz	r0, 8004d18 <xTaskCreate+0x5a>
 8004cd4:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cd6:	20bc      	movs	r0, #188	; 0xbc
 8004cd8:	f000 fff2 	bl	8005cc0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004cdc:	4605      	mov	r5, r0
 8004cde:	b1a8      	cbz	r0, 8004d0c <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004ce0:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cea:	9303      	str	r3, [sp, #12]
 8004cec:	9002      	str	r0, [sp, #8]
 8004cee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004cf0:	9301      	str	r3, [sp, #4]
 8004cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4633      	mov	r3, r6
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	4641      	mov	r1, r8
 8004cfc:	4638      	mov	r0, r7
 8004cfe:	f7ff fe2d 	bl	800495c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d02:	4628      	mov	r0, r5
 8004d04:	f7ff fe8e 	bl	8004a24 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d08:	2001      	movs	r0, #1
 8004d0a:	e007      	b.n	8004d1c <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8004d0c:	4648      	mov	r0, r9
 8004d0e:	f001 f873 	bl	8005df8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	e001      	b.n	8004d1c <xTaskCreate+0x5e>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004d1c:	b005      	add	sp, #20
 8004d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004d24 <vTaskStartScheduler>:
{
 8004d24:	b510      	push	{r4, lr}
 8004d26:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d28:	2400      	movs	r4, #0
 8004d2a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d2c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d2e:	aa07      	add	r2, sp, #28
 8004d30:	a906      	add	r1, sp, #24
 8004d32:	a805      	add	r0, sp, #20
 8004d34:	f7fe ffd4 	bl	8003ce0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d38:	9b05      	ldr	r3, [sp, #20]
 8004d3a:	9302      	str	r3, [sp, #8]
 8004d3c:	9b06      	ldr	r3, [sp, #24]
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	9400      	str	r4, [sp, #0]
 8004d42:	4623      	mov	r3, r4
 8004d44:	9a07      	ldr	r2, [sp, #28]
 8004d46:	4917      	ldr	r1, [pc, #92]	; (8004da4 <vTaskStartScheduler+0x80>)
 8004d48:	4817      	ldr	r0, [pc, #92]	; (8004da8 <vTaskStartScheduler+0x84>)
 8004d4a:	f7ff ff7d 	bl	8004c48 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004d4e:	b338      	cbz	r0, 8004da0 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8004d50:	f000 fc14 	bl	800557c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004d54:	2801      	cmp	r0, #1
 8004d56:	d00b      	beq.n	8004d70 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004d5c:	d120      	bne.n	8004da0 <vTaskStartScheduler+0x7c>
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	e7fe      	b.n	8004d6e <vTaskStartScheduler+0x4a>
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d80:	4b0a      	ldr	r3, [pc, #40]	; (8004dac <vTaskStartScheduler+0x88>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3354      	adds	r3, #84	; 0x54
 8004d86:	4a0a      	ldr	r2, [pc, #40]	; (8004db0 <vTaskStartScheduler+0x8c>)
 8004d88:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <vTaskStartScheduler+0x90>)
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8004d90:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d92:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <vTaskStartScheduler+0x94>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d98:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <vTaskStartScheduler+0x98>)
 8004d9a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004d9c:	f000 fea4 	bl	8005ae8 <xPortStartScheduler>
}
 8004da0:	b008      	add	sp, #32
 8004da2:	bd10      	pop	{r4, pc}
 8004da4:	0800f6f4 	.word	0x0800f6f4
 8004da8:	08004b65 	.word	0x08004b65
 8004dac:	20006c9c 	.word	0x20006c9c
 8004db0:	2000003c 	.word	0x2000003c
 8004db4:	20007144 	.word	0x20007144
 8004db8:	20007164 	.word	0x20007164
 8004dbc:	20007190 	.word	0x20007190

08004dc0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004dc0:	4a02      	ldr	r2, [pc, #8]	; (8004dcc <vTaskSuspendAll+0xc>)
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	6013      	str	r3, [r2, #0]
}
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20007110 	.word	0x20007110

08004dd0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004dd0:	4b01      	ldr	r3, [pc, #4]	; (8004dd8 <xTaskGetTickCount+0x8>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20007190 	.word	0x20007190

08004ddc <xTaskGetTickCountFromISR>:
{
 8004ddc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dde:	f000 ff11 	bl	8005c04 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004de2:	4b01      	ldr	r3, [pc, #4]	; (8004de8 <xTaskGetTickCountFromISR+0xc>)
 8004de4:	6818      	ldr	r0, [r3, #0]
}
 8004de6:	bd08      	pop	{r3, pc}
 8004de8:	20007190 	.word	0x20007190

08004dec <xTaskIncrementTick>:
{
 8004dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004df0:	4b40      	ldr	r3, [pc, #256]	; (8004ef4 <xTaskIncrementTick+0x108>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d175      	bne.n	8004ee4 <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004df8:	4b3f      	ldr	r3, [pc, #252]	; (8004ef8 <xTaskIncrementTick+0x10c>)
 8004dfa:	681e      	ldr	r6, [r3, #0]
 8004dfc:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004dfe:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004e00:	b9c6      	cbnz	r6, 8004e34 <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8004e02:	4b3e      	ldr	r3, [pc, #248]	; (8004efc <xTaskIncrementTick+0x110>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	b143      	cbz	r3, 8004e1c <xTaskIncrementTick+0x30>
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	e7fe      	b.n	8004e1a <xTaskIncrementTick+0x2e>
 8004e1c:	4a37      	ldr	r2, [pc, #220]	; (8004efc <xTaskIncrementTick+0x110>)
 8004e1e:	6811      	ldr	r1, [r2, #0]
 8004e20:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <xTaskIncrementTick+0x114>)
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	6010      	str	r0, [r2, #0]
 8004e26:	6019      	str	r1, [r3, #0]
 8004e28:	4a36      	ldr	r2, [pc, #216]	; (8004f04 <xTaskIncrementTick+0x118>)
 8004e2a:	6813      	ldr	r3, [r2, #0]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	6013      	str	r3, [r2, #0]
 8004e30:	f7ff fd7e 	bl	8004930 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e34:	4b34      	ldr	r3, [pc, #208]	; (8004f08 <xTaskIncrementTick+0x11c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	42b3      	cmp	r3, r6
 8004e3a:	d841      	bhi.n	8004ec0 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e3c:	4b2f      	ldr	r3, [pc, #188]	; (8004efc <xTaskIncrementTick+0x110>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	b13b      	cbz	r3, 8004e54 <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8004e44:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e46:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8004efc <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8004e4a:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004f1c <xTaskIncrementTick+0x130>
 8004e4e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004f10 <xTaskIncrementTick+0x124>
 8004e52:	e022      	b.n	8004e9a <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8004e54:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e56:	4b2c      	ldr	r3, [pc, #176]	; (8004f08 <xTaskIncrementTick+0x11c>)
 8004e58:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5c:	601a      	str	r2, [r3, #0]
					break;
 8004e5e:	e030      	b.n	8004ec2 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8004e60:	4a29      	ldr	r2, [pc, #164]	; (8004f08 <xTaskIncrementTick+0x11c>)
 8004e62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e64:	e02d      	b.n	8004ec2 <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8004e66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004e68:	f8d9 3000 	ldr.w	r3, [r9]
 8004e6c:	4298      	cmp	r0, r3
 8004e6e:	bf88      	it	hi
 8004e70:	f8c9 0000 	strhi.w	r0, [r9]
 8004e74:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e78:	4639      	mov	r1, r7
 8004e7a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8004e7e:	f7fe ff55 	bl	8003d2c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e82:	4b22      	ldr	r3, [pc, #136]	; (8004f0c <xTaskIncrementTick+0x120>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	bf28      	it	cs
 8004e8e:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e90:	f8d8 3000 	ldr.w	r3, [r8]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0dd      	beq.n	8004e56 <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ea2:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8004ea4:	429e      	cmp	r6, r3
 8004ea6:	d3db      	bcc.n	8004e60 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea8:	1d27      	adds	r7, r4, #4
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f7fe ff62 	bl	8003d74 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004eb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0d7      	beq.n	8004e66 <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004eb6:	f104 0018 	add.w	r0, r4, #24
 8004eba:	f7fe ff5b 	bl	8003d74 <uxListRemove>
 8004ebe:	e7d2      	b.n	8004e66 <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8004ec0:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <xTaskIncrementTick+0x120>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <xTaskIncrementTick+0x124>)
 8004ed0:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	bf28      	it	cs
 8004ed6:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 8004ed8:	4b0e      	ldr	r3, [pc, #56]	; (8004f14 <xTaskIncrementTick+0x128>)
 8004eda:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	bf18      	it	ne
 8004ee0:	2501      	movne	r5, #1
 8004ee2:	e004      	b.n	8004eee <xTaskIncrementTick+0x102>
		++xPendedTicks;
 8004ee4:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <xTaskIncrementTick+0x12c>)
 8004ee6:	6813      	ldr	r3, [r2, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004eec:	2500      	movs	r5, #0
}
 8004eee:	4628      	mov	r0, r5
 8004ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef4:	20007110 	.word	0x20007110
 8004ef8:	20007190 	.word	0x20007190
 8004efc:	20006ca0 	.word	0x20006ca0
 8004f00:	20006ca4 	.word	0x20006ca4
 8004f04:	20007148 	.word	0x20007148
 8004f08:	20007144 	.word	0x20007144
 8004f0c:	20006c9c 	.word	0x20006c9c
 8004f10:	20006ca8 	.word	0x20006ca8
 8004f14:	20007194 	.word	0x20007194
 8004f18:	2000714c 	.word	0x2000714c
 8004f1c:	20007118 	.word	0x20007118

08004f20 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8004f20:	4b38      	ldr	r3, [pc, #224]	; (8005004 <xTaskResumeAll+0xe4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	b943      	cbnz	r3, 8004f38 <xTaskResumeAll+0x18>
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	e7fe      	b.n	8004f36 <xTaskResumeAll+0x16>
{
 8004f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8004f3c:	f000 fd3a 	bl	80059b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004f40:	4b30      	ldr	r3, [pc, #192]	; (8005004 <xTaskResumeAll+0xe4>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	3a01      	subs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d149      	bne.n	8004fe2 <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <xTaskResumeAll+0xe8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04b      	beq.n	8004fee <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f56:	4b2d      	ldr	r3, [pc, #180]	; (800500c <xTaskResumeAll+0xec>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d04b      	beq.n	8004ff6 <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5e:	4e2b      	ldr	r6, [pc, #172]	; (800500c <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8004f60:	4f2b      	ldr	r7, [pc, #172]	; (8005010 <xTaskResumeAll+0xf0>)
 8004f62:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8005020 <xTaskResumeAll+0x100>
 8004f66:	e002      	b.n	8004f6e <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d041      	beq.n	8004ff2 <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6e:	68f3      	ldr	r3, [r6, #12]
 8004f70:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f72:	f104 0018 	add.w	r0, r4, #24
 8004f76:	f7fe fefd 	bl	8003d74 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f7a:	1d25      	adds	r5, r4, #4
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f7fe fef9 	bl	8003d74 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f82:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	4298      	cmp	r0, r3
 8004f88:	bf88      	it	hi
 8004f8a:	6038      	strhi	r0, [r7, #0]
 8004f8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f90:	4629      	mov	r1, r5
 8004f92:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004f96:	f7fe fec9 	bl	8003d2c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f9a:	4b1e      	ldr	r3, [pc, #120]	; (8005014 <xTaskResumeAll+0xf4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d3e0      	bcc.n	8004f68 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <xTaskResumeAll+0xf8>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e7dc      	b.n	8004f68 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004fae:	3c01      	subs	r4, #1
 8004fb0:	d005      	beq.n	8004fbe <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8004fb2:	f7ff ff1b 	bl	8004dec <xTaskIncrementTick>
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d0f9      	beq.n	8004fae <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8004fba:	6035      	str	r5, [r6, #0]
 8004fbc:	e7f7      	b.n	8004fae <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 8004fbe:	4b17      	ldr	r3, [pc, #92]	; (800501c <xTaskResumeAll+0xfc>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <xTaskResumeAll+0xf8>)
 8004fc6:	681c      	ldr	r4, [r3, #0]
 8004fc8:	b164      	cbz	r4, 8004fe4 <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8004fca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004fde:	2401      	movs	r4, #1
 8004fe0:	e000      	b.n	8004fe4 <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8004fe2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004fe4:	f000 fd08 	bl	80059f8 <vPortExitCritical>
}
 8004fe8:	4620      	mov	r0, r4
 8004fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8004fee:	2400      	movs	r4, #0
 8004ff0:	e7f8      	b.n	8004fe4 <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8004ff2:	f7ff fc9d 	bl	8004930 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ff6:	4b09      	ldr	r3, [pc, #36]	; (800501c <xTaskResumeAll+0xfc>)
 8004ff8:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004ffa:	2c00      	cmp	r4, #0
 8004ffc:	d0e2      	beq.n	8004fc4 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8004ffe:	4e06      	ldr	r6, [pc, #24]	; (8005018 <xTaskResumeAll+0xf8>)
 8005000:	2501      	movs	r5, #1
 8005002:	e7d6      	b.n	8004fb2 <xTaskResumeAll+0x92>
 8005004:	20007110 	.word	0x20007110
 8005008:	20007108 	.word	0x20007108
 800500c:	20007150 	.word	0x20007150
 8005010:	20007118 	.word	0x20007118
 8005014:	20006c9c 	.word	0x20006c9c
 8005018:	20007194 	.word	0x20007194
 800501c:	2000714c 	.word	0x2000714c
 8005020:	20006ca8 	.word	0x20006ca8

08005024 <vTaskDelay>:
	{
 8005024:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005026:	b1a8      	cbz	r0, 8005054 <vTaskDelay+0x30>
 8005028:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800502a:	4b10      	ldr	r3, [pc, #64]	; (800506c <vTaskDelay+0x48>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	b143      	cbz	r3, 8005042 <vTaskDelay+0x1e>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	e7fe      	b.n	8005040 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005042:	f7ff febd 	bl	8004dc0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005046:	2100      	movs	r1, #0
 8005048:	4620      	mov	r0, r4
 800504a:	f7ff fdbf 	bl	8004bcc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800504e:	f7ff ff67 	bl	8004f20 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005052:	b948      	cbnz	r0, 8005068 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005054:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800505c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	f3bf 8f6f 	isb	sy
	}
 8005068:	bd10      	pop	{r4, pc}
 800506a:	bf00      	nop
 800506c:	20007110 	.word	0x20007110

08005070 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005070:	4b24      	ldr	r3, [pc, #144]	; (8005104 <vTaskSwitchContext+0x94>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	b11b      	cbz	r3, 800507e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <vTaskSwitchContext+0x98>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800507e:	4b22      	ldr	r3, [pc, #136]	; (8005108 <vTaskSwitchContext+0x98>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005084:	4b21      	ldr	r3, [pc, #132]	; (800510c <vTaskSwitchContext+0x9c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800508c:	0092      	lsls	r2, r2, #2
 800508e:	4920      	ldr	r1, [pc, #128]	; (8005110 <vTaskSwitchContext+0xa0>)
 8005090:	588a      	ldr	r2, [r1, r2]
 8005092:	b98a      	cbnz	r2, 80050b8 <vTaskSwitchContext+0x48>
 8005094:	b13b      	cbz	r3, 80050a6 <vTaskSwitchContext+0x36>
 8005096:	3b01      	subs	r3, #1
 8005098:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800509c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80050a0:	b952      	cbnz	r2, 80050b8 <vTaskSwitchContext+0x48>
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1f7      	bne.n	8005096 <vTaskSwitchContext+0x26>
 80050a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050aa:	f383 8811 	msr	BASEPRI, r3
 80050ae:	f3bf 8f6f 	isb	sy
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	e7fe      	b.n	80050b6 <vTaskSwitchContext+0x46>
 80050b8:	4a15      	ldr	r2, [pc, #84]	; (8005110 <vTaskSwitchContext+0xa0>)
 80050ba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80050be:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80050c2:	6848      	ldr	r0, [r1, #4]
 80050c4:	6840      	ldr	r0, [r0, #4]
 80050c6:	6048      	str	r0, [r1, #4]
 80050c8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80050cc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80050d0:	3208      	adds	r2, #8
 80050d2:	4290      	cmp	r0, r2
 80050d4:	d00f      	beq.n	80050f6 <vTaskSwitchContext+0x86>
 80050d6:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80050da:	4a0d      	ldr	r2, [pc, #52]	; (8005110 <vTaskSwitchContext+0xa0>)
 80050dc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80050e0:	6852      	ldr	r2, [r2, #4]
 80050e2:	68d1      	ldr	r1, [r2, #12]
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <vTaskSwitchContext+0xa4>)
 80050e6:	6011      	str	r1, [r2, #0]
 80050e8:	4908      	ldr	r1, [pc, #32]	; (800510c <vTaskSwitchContext+0x9c>)
 80050ea:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050ec:	6813      	ldr	r3, [r2, #0]
 80050ee:	3354      	adds	r3, #84	; 0x54
 80050f0:	4a09      	ldr	r2, [pc, #36]	; (8005118 <vTaskSwitchContext+0xa8>)
 80050f2:	6013      	str	r3, [r2, #0]
}
 80050f4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f6:	6840      	ldr	r0, [r0, #4]
 80050f8:	4a05      	ldr	r2, [pc, #20]	; (8005110 <vTaskSwitchContext+0xa0>)
 80050fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80050fe:	6050      	str	r0, [r2, #4]
 8005100:	e7e9      	b.n	80050d6 <vTaskSwitchContext+0x66>
 8005102:	bf00      	nop
 8005104:	20007110 	.word	0x20007110
 8005108:	20007194 	.word	0x20007194
 800510c:	20007118 	.word	0x20007118
 8005110:	20006ca8 	.word	0x20006ca8
 8005114:	20006c9c 	.word	0x20006c9c
 8005118:	2000003c 	.word	0x2000003c

0800511c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800511c:	b158      	cbz	r0, 8005136 <vTaskPlaceOnEventList+0x1a>
{
 800511e:	b510      	push	{r4, lr}
 8005120:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005122:	4a09      	ldr	r2, [pc, #36]	; (8005148 <vTaskPlaceOnEventList+0x2c>)
 8005124:	6811      	ldr	r1, [r2, #0]
 8005126:	3118      	adds	r1, #24
 8005128:	f7fe fe0b 	bl	8003d42 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800512c:	2101      	movs	r1, #1
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff fd4c 	bl	8004bcc <prvAddCurrentTaskToDelayedList>
}
 8005134:	bd10      	pop	{r4, pc}
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 8005146:	e7fe      	b.n	8005146 <vTaskPlaceOnEventList+0x2a>
 8005148:	20006c9c 	.word	0x20006c9c

0800514c <vTaskPlaceOnEventListRestricted>:
	{
 800514c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800514e:	b178      	cbz	r0, 8005170 <vTaskPlaceOnEventListRestricted+0x24>
 8005150:	460d      	mov	r5, r1
 8005152:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005154:	4a0b      	ldr	r2, [pc, #44]	; (8005184 <vTaskPlaceOnEventListRestricted+0x38>)
 8005156:	6811      	ldr	r1, [r2, #0]
 8005158:	3118      	adds	r1, #24
 800515a:	f7fe fde7 	bl	8003d2c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800515e:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005160:	4621      	mov	r1, r4
 8005162:	bf0c      	ite	eq
 8005164:	4628      	moveq	r0, r5
 8005166:	f04f 30ff 	movne.w	r0, #4294967295
 800516a:	f7ff fd2f 	bl	8004bcc <prvAddCurrentTaskToDelayedList>
	}
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005180:	e7fe      	b.n	8005180 <vTaskPlaceOnEventListRestricted+0x34>
 8005182:	bf00      	nop
 8005184:	20006c9c 	.word	0x20006c9c

08005188 <xTaskRemoveFromEventList>:
{
 8005188:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518a:	68c3      	ldr	r3, [r0, #12]
 800518c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800518e:	b32c      	cbz	r4, 80051dc <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005190:	f104 0518 	add.w	r5, r4, #24
 8005194:	4628      	mov	r0, r5
 8005196:	f7fe fded 	bl	8003d74 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4b17      	ldr	r3, [pc, #92]	; (80051f8 <xTaskRemoveFromEventList+0x70>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	bb33      	cbnz	r3, 80051ee <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051a0:	1d25      	adds	r5, r4, #4
 80051a2:	4628      	mov	r0, r5
 80051a4:	f7fe fde6 	bl	8003d74 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80051a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80051aa:	4b14      	ldr	r3, [pc, #80]	; (80051fc <xTaskRemoveFromEventList+0x74>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4298      	cmp	r0, r3
 80051b0:	bf84      	itt	hi
 80051b2:	4b12      	ldrhi	r3, [pc, #72]	; (80051fc <xTaskRemoveFromEventList+0x74>)
 80051b4:	6018      	strhi	r0, [r3, #0]
 80051b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80051ba:	4629      	mov	r1, r5
 80051bc:	4b10      	ldr	r3, [pc, #64]	; (8005200 <xTaskRemoveFromEventList+0x78>)
 80051be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80051c2:	f7fe fdb3 	bl	8003d2c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <xTaskRemoveFromEventList+0x7c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80051d0:	bf83      	ittte	hi
 80051d2:	2001      	movhi	r0, #1
 80051d4:	4b0c      	ldrhi	r3, [pc, #48]	; (8005208 <xTaskRemoveFromEventList+0x80>)
 80051d6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80051d8:	2000      	movls	r0, #0
}
 80051da:	bd38      	pop	{r3, r4, r5, pc}
 80051dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 80051ec:	e7fe      	b.n	80051ec <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051ee:	4629      	mov	r1, r5
 80051f0:	4806      	ldr	r0, [pc, #24]	; (800520c <xTaskRemoveFromEventList+0x84>)
 80051f2:	f7fe fd9b 	bl	8003d2c <vListInsertEnd>
 80051f6:	e7e6      	b.n	80051c6 <xTaskRemoveFromEventList+0x3e>
 80051f8:	20007110 	.word	0x20007110
 80051fc:	20007118 	.word	0x20007118
 8005200:	20006ca8 	.word	0x20006ca8
 8005204:	20006c9c 	.word	0x20006c9c
 8005208:	20007194 	.word	0x20007194
 800520c:	20007150 	.word	0x20007150

08005210 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005210:	4b03      	ldr	r3, [pc, #12]	; (8005220 <vTaskInternalSetTimeOutState+0x10>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005216:	4b03      	ldr	r3, [pc, #12]	; (8005224 <vTaskInternalSetTimeOutState+0x14>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6043      	str	r3, [r0, #4]
}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20007148 	.word	0x20007148
 8005224:	20007190 	.word	0x20007190

08005228 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8005228:	b1d0      	cbz	r0, 8005260 <xTaskCheckForTimeOut+0x38>
{
 800522a:	b570      	push	{r4, r5, r6, lr}
 800522c:	460c      	mov	r4, r1
 800522e:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8005230:	b1f9      	cbz	r1, 8005272 <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 8005232:	f000 fbbf 	bl	80059b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005236:	4b1b      	ldr	r3, [pc, #108]	; (80052a4 <xTaskCheckForTimeOut+0x7c>)
 8005238:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d028      	beq.n	8005294 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005242:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005244:	4818      	ldr	r0, [pc, #96]	; (80052a8 <xTaskCheckForTimeOut+0x80>)
 8005246:	6800      	ldr	r0, [r0, #0]
 8005248:	682e      	ldr	r6, [r5, #0]
 800524a:	4286      	cmp	r6, r0
 800524c:	d001      	beq.n	8005252 <xTaskCheckForTimeOut+0x2a>
 800524e:	4291      	cmp	r1, r2
 8005250:	d925      	bls.n	800529e <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005252:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005254:	4283      	cmp	r3, r0
 8005256:	d815      	bhi.n	8005284 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8005258:	2300      	movs	r3, #0
 800525a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800525c:	2401      	movs	r4, #1
 800525e:	e01a      	b.n	8005296 <xTaskCheckForTimeOut+0x6e>
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005270:	e7fe      	b.n	8005270 <xTaskCheckForTimeOut+0x48>
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8005282:	e7fe      	b.n	8005282 <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8005284:	1a9b      	subs	r3, r3, r2
 8005286:	440b      	add	r3, r1
 8005288:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800528a:	4628      	mov	r0, r5
 800528c:	f7ff ffc0 	bl	8005210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005290:	2400      	movs	r4, #0
 8005292:	e000      	b.n	8005296 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8005294:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005296:	f000 fbaf 	bl	80059f8 <vPortExitCritical>
}
 800529a:	4620      	mov	r0, r4
 800529c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800529e:	2401      	movs	r4, #1
 80052a0:	e7f9      	b.n	8005296 <xTaskCheckForTimeOut+0x6e>
 80052a2:	bf00      	nop
 80052a4:	20007190 	.word	0x20007190
 80052a8:	20007148 	.word	0x20007148

080052ac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80052ac:	4b01      	ldr	r3, [pc, #4]	; (80052b4 <vTaskMissedYield+0x8>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
}
 80052b2:	4770      	bx	lr
 80052b4:	20007194 	.word	0x20007194

080052b8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80052b8:	4b01      	ldr	r3, [pc, #4]	; (80052c0 <xTaskGetCurrentTaskHandle+0x8>)
 80052ba:	6818      	ldr	r0, [r3, #0]
	}
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20006c9c 	.word	0x20006c9c

080052c4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80052c4:	4b05      	ldr	r3, [pc, #20]	; (80052dc <xTaskGetSchedulerState+0x18>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	b133      	cbz	r3, 80052d8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <xTaskGetSchedulerState+0x1c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf0c      	ite	eq
 80052d2:	2002      	moveq	r0, #2
 80052d4:	2000      	movne	r0, #0
 80052d6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052d8:	2001      	movs	r0, #1
	}
 80052da:	4770      	bx	lr
 80052dc:	20007164 	.word	0x20007164
 80052e0:	20007110 	.word	0x20007110

080052e4 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d03f      	beq.n	8005368 <xTaskPriorityInherit+0x84>
	{
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80052ec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80052ee:	4a1f      	ldr	r2, [pc, #124]	; (800536c <xTaskPriorityInherit+0x88>)
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d22e      	bcs.n	8005356 <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80052f8:	6982      	ldr	r2, [r0, #24]
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	db05      	blt.n	800530a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	4a1b      	ldr	r2, [pc, #108]	; (800536c <xTaskPriorityInherit+0x88>)
 8005300:	6812      	ldr	r2, [r2, #0]
 8005302:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005304:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8005308:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800530a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800530e:	4a18      	ldr	r2, [pc, #96]	; (8005370 <xTaskPriorityInherit+0x8c>)
 8005310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005314:	6962      	ldr	r2, [r4, #20]
 8005316:	429a      	cmp	r2, r3
 8005318:	d005      	beq.n	8005326 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <xTaskPriorityInherit+0x88>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005320:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 8005322:	2001      	movs	r0, #1
 8005324:	e01f      	b.n	8005366 <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005326:	1d25      	adds	r5, r4, #4
 8005328:	4628      	mov	r0, r5
 800532a:	f7fe fd23 	bl	8003d74 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800532e:	4b0f      	ldr	r3, [pc, #60]	; (800536c <xTaskPriorityInherit+0x88>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005334:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005336:	4b0f      	ldr	r3, [pc, #60]	; (8005374 <xTaskPriorityInherit+0x90>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4298      	cmp	r0, r3
 800533c:	bf84      	itt	hi
 800533e:	4b0d      	ldrhi	r3, [pc, #52]	; (8005374 <xTaskPriorityInherit+0x90>)
 8005340:	6018      	strhi	r0, [r3, #0]
 8005342:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005346:	4629      	mov	r1, r5
 8005348:	4b09      	ldr	r3, [pc, #36]	; (8005370 <xTaskPriorityInherit+0x8c>)
 800534a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800534e:	f7fe fced 	bl	8003d2c <vListInsertEnd>
				xReturn = pdTRUE;
 8005352:	2001      	movs	r0, #1
 8005354:	e007      	b.n	8005366 <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005356:	4b05      	ldr	r3, [pc, #20]	; (800536c <xTaskPriorityInherit+0x88>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4298      	cmp	r0, r3
 8005360:	bf2c      	ite	cs
 8005362:	2000      	movcs	r0, #0
 8005364:	2001      	movcc	r0, #1
	}
 8005366:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8005368:	2000      	movs	r0, #0
	}
 800536a:	4770      	bx	lr
 800536c:	20006c9c 	.word	0x20006c9c
 8005370:	20006ca8 	.word	0x20006ca8
 8005374:	20007118 	.word	0x20007118

08005378 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005378:	2800      	cmp	r0, #0
 800537a:	d03b      	beq.n	80053f4 <xTaskPriorityDisinherit+0x7c>
	{
 800537c:	b538      	push	{r3, r4, r5, lr}
 800537e:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005380:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <xTaskPriorityDisinherit+0x84>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4283      	cmp	r3, r0
 8005386:	d008      	beq.n	800539a <xTaskPriorityDisinherit+0x22>
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	e7fe      	b.n	8005398 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800539a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800539c:	b943      	cbnz	r3, 80053b0 <xTaskPriorityDisinherit+0x38>
 800539e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a2:	f383 8811 	msr	BASEPRI, r3
 80053a6:	f3bf 8f6f 	isb	sy
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	e7fe      	b.n	80053ae <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 80053b0:	3b01      	subs	r3, #1
 80053b2:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80053b6:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80053b8:	4291      	cmp	r1, r2
 80053ba:	d01d      	beq.n	80053f8 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053bc:	b10b      	cbz	r3, 80053c2 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 80053be:	2000      	movs	r0, #0
	}
 80053c0:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c2:	1d05      	adds	r5, r0, #4
 80053c4:	4628      	mov	r0, r5
 80053c6:	f7fe fcd5 	bl	8003d74 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053ca:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80053cc:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ce:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 80053d2:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80053d4:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <xTaskPriorityDisinherit+0x88>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4298      	cmp	r0, r3
 80053da:	bf84      	itt	hi
 80053dc:	4b08      	ldrhi	r3, [pc, #32]	; (8005400 <xTaskPriorityDisinherit+0x88>)
 80053de:	6018      	strhi	r0, [r3, #0]
 80053e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80053e4:	4629      	mov	r1, r5
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <xTaskPriorityDisinherit+0x8c>)
 80053e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80053ec:	f7fe fc9e 	bl	8003d2c <vListInsertEnd>
					xReturn = pdTRUE;
 80053f0:	2001      	movs	r0, #1
 80053f2:	e7e5      	b.n	80053c0 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80053f4:	2000      	movs	r0, #0
	}
 80053f6:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80053f8:	2000      	movs	r0, #0
 80053fa:	e7e1      	b.n	80053c0 <xTaskPriorityDisinherit+0x48>
 80053fc:	20006c9c 	.word	0x20006c9c
 8005400:	20007118 	.word	0x20007118
 8005404:	20006ca8 	.word	0x20006ca8

08005408 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8005408:	2800      	cmp	r0, #0
 800540a:	d046      	beq.n	800549a <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 8005410:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005412:	b943      	cbnz	r3, 8005426 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	e7fe      	b.n	8005424 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005426:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005428:	4291      	cmp	r1, r2
 800542a:	bf38      	it	cc
 800542c:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 800542e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8005430:	428a      	cmp	r2, r1
 8005432:	d001      	beq.n	8005438 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005434:	2b01      	cmp	r3, #1
 8005436:	d000      	beq.n	800543a <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8005438:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800543a:	4b18      	ldr	r3, [pc, #96]	; (800549c <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4283      	cmp	r3, r0
 8005440:	d022      	beq.n	8005488 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 8005442:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005444:	6983      	ldr	r3, [r0, #24]
 8005446:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005448:	bfa4      	itt	ge
 800544a:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 800544e:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005450:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005454:	4b12      	ldr	r3, [pc, #72]	; (80054a0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8005456:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800545a:	6943      	ldr	r3, [r0, #20]
 800545c:	4293      	cmp	r3, r2
 800545e:	d1eb      	bne.n	8005438 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005460:	1d05      	adds	r5, r0, #4
 8005462:	4628      	mov	r0, r5
 8005464:	f7fe fc86 	bl	8003d74 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005468:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800546a:	4b0e      	ldr	r3, [pc, #56]	; (80054a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4298      	cmp	r0, r3
 8005470:	bf84      	itt	hi
 8005472:	4b0c      	ldrhi	r3, [pc, #48]	; (80054a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005474:	6018      	strhi	r0, [r3, #0]
 8005476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800547a:	4629      	mov	r1, r5
 800547c:	4b08      	ldr	r3, [pc, #32]	; (80054a0 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800547e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005482:	f7fe fc53 	bl	8003d2c <vListInsertEnd>
	}
 8005486:	e7d7      	b.n	8005438 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8005488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548c:	f383 8811 	msr	BASEPRI, r3
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005498:	e7fe      	b.n	8005498 <vTaskPriorityDisinheritAfterTimeout+0x90>
 800549a:	4770      	bx	lr
 800549c:	20006c9c 	.word	0x20006c9c
 80054a0:	20006ca8 	.word	0x20006ca8
 80054a4:	20007118 	.word	0x20007118

080054a8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80054a8:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <pvTaskIncrementMutexHeldCount+0x18>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b123      	cbz	r3, 80054b8 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 80054ae:	4b04      	ldr	r3, [pc, #16]	; (80054c0 <pvTaskIncrementMutexHeldCount+0x18>)
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80054b4:	3301      	adds	r3, #1
 80054b6:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 80054b8:	4b01      	ldr	r3, [pc, #4]	; (80054c0 <pvTaskIncrementMutexHeldCount+0x18>)
 80054ba:	6818      	ldr	r0, [r3, #0]
	}
 80054bc:	4770      	bx	lr
 80054be:	bf00      	nop
 80054c0:	20006c9c 	.word	0x20006c9c

080054c4 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054c4:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054c6:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054c8:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054ca:	4291      	cmp	r1, r2
 80054cc:	d80c      	bhi.n	80054e8 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054ce:	1ad2      	subs	r2, r2, r3
 80054d0:	6983      	ldr	r3, [r0, #24]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d301      	bcc.n	80054da <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054d6:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 80054d8:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054da:	1d01      	adds	r1, r0, #4
 80054dc:	4b09      	ldr	r3, [pc, #36]	; (8005504 <prvInsertTimerInActiveList+0x40>)
 80054de:	6818      	ldr	r0, [r3, #0]
 80054e0:	f7fe fc2f 	bl	8003d42 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80054e4:	2000      	movs	r0, #0
 80054e6:	e7f7      	b.n	80054d8 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d201      	bcs.n	80054f0 <prvInsertTimerInActiveList+0x2c>
 80054ec:	4299      	cmp	r1, r3
 80054ee:	d206      	bcs.n	80054fe <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054f0:	1d01      	adds	r1, r0, #4
 80054f2:	4b05      	ldr	r3, [pc, #20]	; (8005508 <prvInsertTimerInActiveList+0x44>)
 80054f4:	6818      	ldr	r0, [r3, #0]
 80054f6:	f7fe fc24 	bl	8003d42 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80054fa:	2000      	movs	r0, #0
 80054fc:	e7ec      	b.n	80054d8 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 80054fe:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005500:	e7ea      	b.n	80054d8 <prvInsertTimerInActiveList+0x14>
 8005502:	bf00      	nop
 8005504:	2000719c 	.word	0x2000719c
 8005508:	20007198 	.word	0x20007198

0800550c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800550c:	b530      	push	{r4, r5, lr}
 800550e:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005510:	f000 fa50 	bl	80059b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <prvCheckForValidListAndQueue+0x50>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	b11b      	cbz	r3, 8005522 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800551a:	f000 fa6d 	bl	80059f8 <vPortExitCritical>
}
 800551e:	b003      	add	sp, #12
 8005520:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8005522:	4d0f      	ldr	r5, [pc, #60]	; (8005560 <prvCheckForValidListAndQueue+0x54>)
 8005524:	4628      	mov	r0, r5
 8005526:	f7fe fbf3 	bl	8003d10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800552a:	4c0e      	ldr	r4, [pc, #56]	; (8005564 <prvCheckForValidListAndQueue+0x58>)
 800552c:	4620      	mov	r0, r4
 800552e:	f7fe fbef 	bl	8003d10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005532:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <prvCheckForValidListAndQueue+0x5c>)
 8005534:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <prvCheckForValidListAndQueue+0x60>)
 8005538:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800553a:	2300      	movs	r3, #0
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4b0c      	ldr	r3, [pc, #48]	; (8005570 <prvCheckForValidListAndQueue+0x64>)
 8005540:	4a0c      	ldr	r2, [pc, #48]	; (8005574 <prvCheckForValidListAndQueue+0x68>)
 8005542:	2110      	movs	r1, #16
 8005544:	200a      	movs	r0, #10
 8005546:	f7fe fcfc 	bl	8003f42 <xQueueGenericCreateStatic>
 800554a:	4b04      	ldr	r3, [pc, #16]	; (800555c <prvCheckForValidListAndQueue+0x50>)
 800554c:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800554e:	2800      	cmp	r0, #0
 8005550:	d0e3      	beq.n	800551a <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005552:	4909      	ldr	r1, [pc, #36]	; (8005578 <prvCheckForValidListAndQueue+0x6c>)
 8005554:	f7ff f982 	bl	800485c <vQueueAddToRegistry>
 8005558:	e7df      	b.n	800551a <prvCheckForValidListAndQueue+0xe>
 800555a:	bf00      	nop
 800555c:	200072bc 	.word	0x200072bc
 8005560:	20007240 	.word	0x20007240
 8005564:	20007254 	.word	0x20007254
 8005568:	20007198 	.word	0x20007198
 800556c:	2000719c 	.word	0x2000719c
 8005570:	2000726c 	.word	0x2000726c
 8005574:	200071a0 	.word	0x200071a0
 8005578:	0800f6fc 	.word	0x0800f6fc

0800557c <xTimerCreateTimerTask>:
{
 800557c:	b510      	push	{r4, lr}
 800557e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005580:	f7ff ffc4 	bl	800550c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8005584:	4b12      	ldr	r3, [pc, #72]	; (80055d0 <xTimerCreateTimerTask+0x54>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	b1cb      	cbz	r3, 80055be <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800558a:	2400      	movs	r4, #0
 800558c:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800558e:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005590:	aa07      	add	r2, sp, #28
 8005592:	a906      	add	r1, sp, #24
 8005594:	a805      	add	r0, sp, #20
 8005596:	f7fe fbaf 	bl	8003cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800559a:	9b05      	ldr	r3, [sp, #20]
 800559c:	9302      	str	r3, [sp, #8]
 800559e:	9b06      	ldr	r3, [sp, #24]
 80055a0:	9301      	str	r3, [sp, #4]
 80055a2:	2302      	movs	r3, #2
 80055a4:	9300      	str	r3, [sp, #0]
 80055a6:	4623      	mov	r3, r4
 80055a8:	9a07      	ldr	r2, [sp, #28]
 80055aa:	490a      	ldr	r1, [pc, #40]	; (80055d4 <xTimerCreateTimerTask+0x58>)
 80055ac:	480a      	ldr	r0, [pc, #40]	; (80055d8 <xTimerCreateTimerTask+0x5c>)
 80055ae:	f7ff fb4b 	bl	8004c48 <xTaskCreateStatic>
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <xTimerCreateTimerTask+0x60>)
 80055b4:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 80055b6:	b110      	cbz	r0, 80055be <xTimerCreateTimerTask+0x42>
}
 80055b8:	2001      	movs	r0, #1
 80055ba:	b008      	add	sp, #32
 80055bc:	bd10      	pop	{r4, pc}
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 80055ce:	e7fe      	b.n	80055ce <xTimerCreateTimerTask+0x52>
 80055d0:	200072bc 	.word	0x200072bc
 80055d4:	0800f704 	.word	0x0800f704
 80055d8:	080056f1 	.word	0x080056f1
 80055dc:	200072c0 	.word	0x200072c0

080055e0 <xTimerGenericCommand>:
	configASSERT( xTimer );
 80055e0:	b1d8      	cbz	r0, 800561a <xTimerGenericCommand+0x3a>
 80055e2:	469c      	mov	ip, r3
 80055e4:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 80055e6:	4815      	ldr	r0, [pc, #84]	; (800563c <xTimerGenericCommand+0x5c>)
 80055e8:	6800      	ldr	r0, [r0, #0]
 80055ea:	b328      	cbz	r0, 8005638 <xTimerGenericCommand+0x58>
{
 80055ec:	b500      	push	{lr}
 80055ee:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 80055f0:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055f2:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055f4:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055f6:	2905      	cmp	r1, #5
 80055f8:	dc18      	bgt.n	800562c <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055fa:	f7ff fe63 	bl	80052c4 <xTaskGetSchedulerState>
 80055fe:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005600:	f04f 0300 	mov.w	r3, #0
 8005604:	bf0c      	ite	eq
 8005606:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005608:	461a      	movne	r2, r3
 800560a:	4669      	mov	r1, sp
 800560c:	480b      	ldr	r0, [pc, #44]	; (800563c <xTimerGenericCommand+0x5c>)
 800560e:	6800      	ldr	r0, [r0, #0]
 8005610:	f7fe fd58 	bl	80040c4 <xQueueGenericSend>
}
 8005614:	b005      	add	sp, #20
 8005616:	f85d fb04 	ldr.w	pc, [sp], #4
 800561a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561e:	f383 8811 	msr	BASEPRI, r3
 8005622:	f3bf 8f6f 	isb	sy
 8005626:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 800562a:	e7fe      	b.n	800562a <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800562c:	2300      	movs	r3, #0
 800562e:	4662      	mov	r2, ip
 8005630:	4669      	mov	r1, sp
 8005632:	f7fe fe59 	bl	80042e8 <xQueueGenericSendFromISR>
 8005636:	e7ed      	b.n	8005614 <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 8005638:	2000      	movs	r0, #0
}
 800563a:	4770      	bx	lr
 800563c:	200072bc 	.word	0x200072bc

08005640 <prvSampleTimeNow>:
{
 8005640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005644:	b082      	sub	sp, #8
 8005646:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 8005648:	f7ff fbc2 	bl	8004dd0 <xTaskGetTickCount>
 800564c:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <prvSampleTimeNow+0xa4>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4283      	cmp	r3, r0
 8005654:	d808      	bhi.n	8005668 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 8005656:	2300      	movs	r3, #0
 8005658:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 800565c:	4b21      	ldr	r3, [pc, #132]	; (80056e4 <prvSampleTimeNow+0xa4>)
 800565e:	601e      	str	r6, [r3, #0]
}
 8005660:	4630      	mov	r0, r6
 8005662:	b002      	add	sp, #8
 8005664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005668:	4d1f      	ldr	r5, [pc, #124]	; (80056e8 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800566a:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	b36a      	cbz	r2, 80056d0 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005678:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800567a:	f104 0904 	add.w	r9, r4, #4
 800567e:	4648      	mov	r0, r9
 8005680:	f7fe fb78 	bl	8003d74 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005684:	6a23      	ldr	r3, [r4, #32]
 8005686:	4620      	mov	r0, r4
 8005688:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800568e:	f013 0f04 	tst.w	r3, #4
 8005692:	d0ec      	beq.n	800566e <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005694:	69a3      	ldr	r3, [r4, #24]
 8005696:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8005698:	429f      	cmp	r7, r3
 800569a:	d206      	bcs.n	80056aa <prvSampleTimeNow+0x6a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800569c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800569e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056a0:	4649      	mov	r1, r9
 80056a2:	6828      	ldr	r0, [r5, #0]
 80056a4:	f7fe fb4d 	bl	8003d42 <vListInsert>
 80056a8:	e7e1      	b.n	800566e <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056aa:	f8cd 8000 	str.w	r8, [sp]
 80056ae:	4643      	mov	r3, r8
 80056b0:	463a      	mov	r2, r7
 80056b2:	4641      	mov	r1, r8
 80056b4:	4620      	mov	r0, r4
 80056b6:	f7ff ff93 	bl	80055e0 <xTimerGenericCommand>
				configASSERT( xResult );
 80056ba:	2800      	cmp	r0, #0
 80056bc:	d1d7      	bne.n	800566e <prvSampleTimeNow+0x2e>
 80056be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c2:	f383 8811 	msr	BASEPRI, r3
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	e7fe      	b.n	80056ce <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 80056d0:	4a06      	ldr	r2, [pc, #24]	; (80056ec <prvSampleTimeNow+0xac>)
 80056d2:	6810      	ldr	r0, [r2, #0]
 80056d4:	4904      	ldr	r1, [pc, #16]	; (80056e8 <prvSampleTimeNow+0xa8>)
 80056d6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80056d8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80056da:	2301      	movs	r3, #1
 80056dc:	f8ca 3000 	str.w	r3, [sl]
 80056e0:	e7bc      	b.n	800565c <prvSampleTimeNow+0x1c>
 80056e2:	bf00      	nop
 80056e4:	20007268 	.word	0x20007268
 80056e8:	20007198 	.word	0x20007198
 80056ec:	2000719c 	.word	0x2000719c

080056f0 <prvTimerTask>:
{
 80056f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056f4:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056f6:	4e79      	ldr	r6, [pc, #484]	; (80058dc <prvTimerTask+0x1ec>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80056f8:	4d79      	ldr	r5, [pc, #484]	; (80058e0 <prvTimerTask+0x1f0>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056fa:	4f7a      	ldr	r7, [pc, #488]	; (80058e4 <prvTimerTask+0x1f4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8005702:	f1b8 0f00 	cmp.w	r8, #0
 8005706:	d025      	beq.n	8005754 <prvTimerTask+0x64>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800570e:	f7ff fb57 	bl	8004dc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005712:	a804      	add	r0, sp, #16
 8005714:	f7ff ff94 	bl	8005640 <prvSampleTimeNow>
 8005718:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800571a:	9a04      	ldr	r2, [sp, #16]
 800571c:	2a00      	cmp	r2, #0
 800571e:	d155      	bne.n	80057cc <prvTimerTask+0xdc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005720:	4580      	cmp	r8, r0
 8005722:	d824      	bhi.n	800576e <prvTimerTask+0x7e>
				( void ) xTaskResumeAll();
 8005724:	f7ff fbfc 	bl	8004f20 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005730:	f109 0004 	add.w	r0, r9, #4
 8005734:	f7fe fb1e 	bl	8003d74 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005738:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800573c:	f013 0f04 	tst.w	r3, #4
 8005740:	d128      	bne.n	8005794 <prvTimerTask+0xa4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005742:	f023 0301 	bic.w	r3, r3, #1
 8005746:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800574a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800574e:	4648      	mov	r0, r9
 8005750:	4798      	blx	r3
}
 8005752:	e03d      	b.n	80057d0 <prvTimerTask+0xe0>
	vTaskSuspendAll();
 8005754:	f7ff fb34 	bl	8004dc0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005758:	a804      	add	r0, sp, #16
 800575a:	f7ff ff71 	bl	8005640 <prvSampleTimeNow>
 800575e:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8005760:	9b04      	ldr	r3, [sp, #16]
 8005762:	bb9b      	cbnz	r3, 80057cc <prvTimerTask+0xdc>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	fab2 f282 	clz	r2, r2
 800576c:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800576e:	eba8 0104 	sub.w	r1, r8, r4
 8005772:	6828      	ldr	r0, [r5, #0]
 8005774:	f7ff f8b4 	bl	80048e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005778:	f7ff fbd2 	bl	8004f20 <xTaskResumeAll>
 800577c:	bb40      	cbnz	r0, 80057d0 <prvTimerTask+0xe0>
					portYIELD_WITHIN_API();
 800577e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	e01d      	b.n	80057d0 <prvTimerTask+0xe0>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005794:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005798:	4643      	mov	r3, r8
 800579a:	4622      	mov	r2, r4
 800579c:	4441      	add	r1, r8
 800579e:	4648      	mov	r0, r9
 80057a0:	f7ff fe90 	bl	80054c4 <prvInsertTimerInActiveList>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	d0d0      	beq.n	800574a <prvTimerTask+0x5a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80057a8:	2100      	movs	r1, #0
 80057aa:	9100      	str	r1, [sp, #0]
 80057ac:	460b      	mov	r3, r1
 80057ae:	4642      	mov	r2, r8
 80057b0:	4648      	mov	r0, r9
 80057b2:	f7ff ff15 	bl	80055e0 <xTimerGenericCommand>
			configASSERT( xResult );
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d1c7      	bne.n	800574a <prvTimerTask+0x5a>
 80057ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057be:	f383 8811 	msr	BASEPRI, r3
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	e7fe      	b.n	80057ca <prvTimerTask+0xda>
			( void ) xTaskResumeAll();
 80057cc:	f7ff fba8 	bl	8004f20 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057d0:	2400      	movs	r4, #0
}
 80057d2:	e006      	b.n	80057e2 <prvTimerTask+0xf2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80057d4:	9907      	ldr	r1, [sp, #28]
 80057d6:	9806      	ldr	r0, [sp, #24]
 80057d8:	9b05      	ldr	r3, [sp, #20]
 80057da:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80057dc:	9b04      	ldr	r3, [sp, #16]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da09      	bge.n	80057f6 <prvTimerTask+0x106>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057e2:	4622      	mov	r2, r4
 80057e4:	a904      	add	r1, sp, #16
 80057e6:	6828      	ldr	r0, [r5, #0]
 80057e8:	f7fe fe3e 	bl	8004468 <xQueueReceive>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d085      	beq.n	80056fc <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057f0:	9b04      	ldr	r3, [sp, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dbee      	blt.n	80057d4 <prvTimerTask+0xe4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80057f6:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057fa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80057fe:	b11b      	cbz	r3, 8005808 <prvTimerTask+0x118>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005800:	f108 0004 	add.w	r0, r8, #4
 8005804:	f7fe fab6 	bl	8003d74 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005808:	a803      	add	r0, sp, #12
 800580a:	f7ff ff19 	bl	8005640 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800580e:	9b04      	ldr	r3, [sp, #16]
 8005810:	2b09      	cmp	r3, #9
 8005812:	d8e6      	bhi.n	80057e2 <prvTimerTask+0xf2>
 8005814:	e8df f003 	tbb	[pc, r3]
 8005818:	33050505 	.word	0x33050505
 800581c:	0505543a 	.word	0x0505543a
 8005820:	3a33      	.short	0x3a33
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005822:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005826:	f043 0301 	orr.w	r3, r3, #1
 800582a:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800582e:	9b05      	ldr	r3, [sp, #20]
 8005830:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8005834:	4602      	mov	r2, r0
 8005836:	4419      	add	r1, r3
 8005838:	4640      	mov	r0, r8
 800583a:	f7ff fe43 	bl	80054c4 <prvInsertTimerInActiveList>
 800583e:	2800      	cmp	r0, #0
 8005840:	d0cf      	beq.n	80057e2 <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005842:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8005846:	4640      	mov	r0, r8
 8005848:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800584a:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800584e:	f013 0f04 	tst.w	r3, #4
 8005852:	d0c6      	beq.n	80057e2 <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005854:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8005858:	9400      	str	r4, [sp, #0]
 800585a:	4623      	mov	r3, r4
 800585c:	9905      	ldr	r1, [sp, #20]
 800585e:	440a      	add	r2, r1
 8005860:	4621      	mov	r1, r4
 8005862:	4640      	mov	r0, r8
 8005864:	f7ff febc 	bl	80055e0 <xTimerGenericCommand>
							configASSERT( xResult );
 8005868:	2800      	cmp	r0, #0
 800586a:	d1ba      	bne.n	80057e2 <prvTimerTask+0xf2>
 800586c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	e7fe      	b.n	800587c <prvTimerTask+0x18c>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800587e:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005882:	f023 0301 	bic.w	r3, r3, #1
 8005886:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					break;
 800588a:	e7aa      	b.n	80057e2 <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800588c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005890:	f043 0301 	orr.w	r3, r3, #1
 8005894:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005898:	9905      	ldr	r1, [sp, #20]
 800589a:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800589e:	b131      	cbz	r1, 80058ae <prvTimerTask+0x1be>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058a0:	4603      	mov	r3, r0
 80058a2:	4602      	mov	r2, r0
 80058a4:	4401      	add	r1, r0
 80058a6:	4640      	mov	r0, r8
 80058a8:	f7ff fe0c 	bl	80054c4 <prvInsertTimerInActiveList>
					break;
 80058ac:	e799      	b.n	80057e2 <prvTimerTask+0xf2>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	f383 8811 	msr	BASEPRI, r3
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80058be:	e7fe      	b.n	80058be <prvTimerTask+0x1ce>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058c0:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80058c4:	f013 0f02 	tst.w	r3, #2
 80058c8:	d004      	beq.n	80058d4 <prvTimerTask+0x1e4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058ca:	f023 0301 	bic.w	r3, r3, #1
 80058ce:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
 80058d2:	e786      	b.n	80057e2 <prvTimerTask+0xf2>
							vPortFree( pxTimer );
 80058d4:	4640      	mov	r0, r8
 80058d6:	f000 fa8f 	bl	8005df8 <vPortFree>
 80058da:	e782      	b.n	80057e2 <prvTimerTask+0xf2>
 80058dc:	20007198 	.word	0x20007198
 80058e0:	200072bc 	.word	0x200072bc
 80058e4:	2000719c 	.word	0x2000719c

080058e8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058ee:	4b0d      	ldr	r3, [pc, #52]	; (8005924 <prvTaskExitError+0x3c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f6:	d008      	beq.n	800590a <prvTaskExitError+0x22>
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	e7fe      	b.n	8005908 <prvTaskExitError+0x20>
 800590a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800591a:	9b01      	ldr	r3, [sp, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0fc      	beq.n	800591a <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005920:	b002      	add	sp, #8
 8005922:	4770      	bx	lr
 8005924:	20000030 	.word	0x20000030

08005928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005928:	4808      	ldr	r0, [pc, #32]	; (800594c <prvPortStartFirstTask+0x24>)
 800592a:	6800      	ldr	r0, [r0, #0]
 800592c:	6800      	ldr	r0, [r0, #0]
 800592e:	f380 8808 	msr	MSP, r0
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f380 8814 	msr	CONTROL, r0
 800593a:	b662      	cpsie	i
 800593c:	b661      	cpsie	f
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	df00      	svc	0
 8005948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800594a:	0000      	.short	0x0000
 800594c:	e000ed08 	.word	0xe000ed08

08005950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005960 <vPortEnableVFP+0x10>
 8005954:	6801      	ldr	r1, [r0, #0]
 8005956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595a:	6001      	str	r1, [r0, #0]
 800595c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800595e:	0000      	.short	0x0000
 8005960:	e000ed88 	.word	0xe000ed88

08005964 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005968:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800596c:	f021 0101 	bic.w	r1, r1, #1
 8005970:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005974:	4b05      	ldr	r3, [pc, #20]	; (800598c <pxPortInitialiseStack+0x28>)
 8005976:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800597a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800597e:	f06f 0302 	mvn.w	r3, #2
 8005982:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8005986:	3844      	subs	r0, #68	; 0x44
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	080058e9 	.word	0x080058e9

08005990 <SVC_Handler>:
	__asm volatile (
 8005990:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <pxCurrentTCBConst2>)
 8005992:	6819      	ldr	r1, [r3, #0]
 8005994:	6808      	ldr	r0, [r1, #0]
 8005996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599a:	f380 8809 	msr	PSP, r0
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f04f 0000 	mov.w	r0, #0
 80059a6:	f380 8811 	msr	BASEPRI, r0
 80059aa:	4770      	bx	lr
 80059ac:	f3af 8000 	nop.w

080059b0 <pxCurrentTCBConst2>:
 80059b0:	20006c9c 	.word	0x20006c9c

080059b4 <vPortEnterCritical>:
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80059c4:	4a0b      	ldr	r2, [pc, #44]	; (80059f4 <vPortEnterCritical+0x40>)
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d000      	beq.n	80059d2 <vPortEnterCritical+0x1e>
}
 80059d0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80059d6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 80059da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80059de:	d0f7      	beq.n	80059d0 <vPortEnterCritical+0x1c>
 80059e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	e7fe      	b.n	80059f0 <vPortEnterCritical+0x3c>
 80059f2:	bf00      	nop
 80059f4:	20000030 	.word	0x20000030

080059f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80059f8:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <vPortExitCritical+0x28>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	b943      	cbnz	r3, 8005a10 <vPortExitCritical+0x18>
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	e7fe      	b.n	8005a0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8005a10:	3b01      	subs	r3, #1
 8005a12:	4a03      	ldr	r2, [pc, #12]	; (8005a20 <vPortExitCritical+0x28>)
 8005a14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a16:	b90b      	cbnz	r3, 8005a1c <vPortExitCritical+0x24>
	__asm volatile
 8005a18:	f383 8811 	msr	BASEPRI, r3
}
 8005a1c:	4770      	bx	lr
 8005a1e:	bf00      	nop
 8005a20:	20000030 	.word	0x20000030
	...

08005a30 <PendSV_Handler>:
	__asm volatile
 8005a30:	f3ef 8009 	mrs	r0, PSP
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	4b15      	ldr	r3, [pc, #84]	; (8005a90 <pxCurrentTCBConst>)
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	f01e 0f10 	tst.w	lr, #16
 8005a40:	bf08      	it	eq
 8005a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a4a:	6010      	str	r0, [r2, #0]
 8005a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005a54:	f380 8811 	msr	BASEPRI, r0
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f7ff fb06 	bl	8005070 <vTaskSwitchContext>
 8005a64:	f04f 0000 	mov.w	r0, #0
 8005a68:	f380 8811 	msr	BASEPRI, r0
 8005a6c:	bc09      	pop	{r0, r3}
 8005a6e:	6819      	ldr	r1, [r3, #0]
 8005a70:	6808      	ldr	r0, [r1, #0]
 8005a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a76:	f01e 0f10 	tst.w	lr, #16
 8005a7a:	bf08      	it	eq
 8005a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a80:	f380 8809 	msr	PSP, r0
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	f3af 8000 	nop.w

08005a90 <pxCurrentTCBConst>:
 8005a90:	20006c9c 	.word	0x20006c9c

08005a94 <xPortSysTickHandler>:
{
 8005a94:	b508      	push	{r3, lr}
	__asm volatile
 8005a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9a:	f383 8811 	msr	BASEPRI, r3
 8005a9e:	f3bf 8f6f 	isb	sy
 8005aa2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005aa6:	f7ff f9a1 	bl	8004dec <xTaskIncrementTick>
 8005aaa:	b128      	cbz	r0, 8005ab8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005aac:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005ab8:	2300      	movs	r3, #0
 8005aba:	f383 8811 	msr	BASEPRI, r3
}
 8005abe:	bd08      	pop	{r3, pc}

08005ac0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ac0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ac8:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <vPortSetupTimerInterrupt+0x20>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4905      	ldr	r1, [pc, #20]	; (8005ae4 <vPortSetupTimerInterrupt+0x24>)
 8005ad0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ad4:	099b      	lsrs	r3, r3, #6
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005ada:	2307      	movs	r3, #7
 8005adc:	6113      	str	r3, [r2, #16]
}
 8005ade:	4770      	bx	lr
 8005ae0:	20000010 	.word	0x20000010
 8005ae4:	10624dd3 	.word	0x10624dd3

08005ae8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ae8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005aec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005af0:	4b3e      	ldr	r3, [pc, #248]	; (8005bec <xPortStartScheduler+0x104>)
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d03b      	beq.n	8005b6e <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005af6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005afa:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005afe:	4b3c      	ldr	r3, [pc, #240]	; (8005bf0 <xPortStartScheduler+0x108>)
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d03d      	beq.n	8005b80 <xPortStartScheduler+0x98>
{
 8005b04:	b530      	push	{r4, r5, lr}
 8005b06:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b08:	4b3a      	ldr	r3, [pc, #232]	; (8005bf4 <xPortStartScheduler+0x10c>)
 8005b0a:	781a      	ldrb	r2, [r3, #0]
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b10:	22ff      	movs	r2, #255	; 0xff
 8005b12:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b1c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005b20:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b24:	4a34      	ldr	r2, [pc, #208]	; (8005bf8 <xPortStartScheduler+0x110>)
 8005b26:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b28:	4b34      	ldr	r3, [pc, #208]	; (8005bfc <xPortStartScheduler+0x114>)
 8005b2a:	2207      	movs	r2, #7
 8005b2c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b2e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005b32:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b36:	d011      	beq.n	8005b5c <xPortStartScheduler+0x74>
 8005b38:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b3a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	3a01      	subs	r2, #1
 8005b4e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b52:	d1f2      	bne.n	8005b3a <xPortStartScheduler+0x52>
 8005b54:	4b29      	ldr	r3, [pc, #164]	; (8005bfc <xPortStartScheduler+0x114>)
 8005b56:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b58:	2903      	cmp	r1, #3
 8005b5a:	d01a      	beq.n	8005b92 <xPortStartScheduler+0xaa>
	__asm volatile
 8005b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b60:	f383 8811 	msr	BASEPRI, r3
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	f3bf 8f4f 	dsb	sy
 8005b6c:	e7fe      	b.n	8005b6c <xPortStartScheduler+0x84>
 8005b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b7e:	e7fe      	b.n	8005b7e <xPortStartScheduler+0x96>
 8005b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b90:	e7fe      	b.n	8005b90 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b92:	4b1a      	ldr	r3, [pc, #104]	; (8005bfc <xPortStartScheduler+0x114>)
 8005b94:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005b98:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b9a:	9b01      	ldr	r3, [sp, #4]
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	4a15      	ldr	r2, [pc, #84]	; (8005bf4 <xPortStartScheduler+0x10c>)
 8005ba0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005ba2:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8005ba6:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005baa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bae:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bb2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005bb6:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005bba:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005bbe:	f7ff ff7f 	bl	8005ac0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <xPortStartScheduler+0x118>)
 8005bc6:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005bc8:	f7ff fec2 	bl	8005950 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005bcc:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005bd0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005bd4:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005bd8:	f7ff fea6 	bl	8005928 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005bdc:	f7ff fa48 	bl	8005070 <vTaskSwitchContext>
	prvTaskExitError();
 8005be0:	f7ff fe82 	bl	80058e8 <prvTaskExitError>
}
 8005be4:	4628      	mov	r0, r5
 8005be6:	b003      	add	sp, #12
 8005be8:	bd30      	pop	{r4, r5, pc}
 8005bea:	bf00      	nop
 8005bec:	410fc271 	.word	0x410fc271
 8005bf0:	410fc270 	.word	0x410fc270
 8005bf4:	e000e400 	.word	0xe000e400
 8005bf8:	200072c4 	.word	0x200072c4
 8005bfc:	200072c8 	.word	0x200072c8
 8005c00:	20000030 	.word	0x20000030

08005c04 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c04:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c08:	2b0f      	cmp	r3, #15
 8005c0a:	d90f      	bls.n	8005c2c <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c0c:	4a11      	ldr	r2, [pc, #68]	; (8005c54 <vPortValidateInterruptPriority+0x50>)
 8005c0e:	5c9b      	ldrb	r3, [r3, r2]
 8005c10:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c12:	4a11      	ldr	r2, [pc, #68]	; (8005c58 <vPortValidateInterruptPriority+0x54>)
 8005c14:	7812      	ldrb	r2, [r2, #0]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d908      	bls.n	8005c2c <vPortValidateInterruptPriority+0x28>
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	e7fe      	b.n	8005c2a <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c2c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005c30:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005c34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c38:	4a08      	ldr	r2, [pc, #32]	; (8005c5c <vPortValidateInterruptPriority+0x58>)
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d908      	bls.n	8005c52 <vPortValidateInterruptPriority+0x4e>
 8005c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	e7fe      	b.n	8005c50 <vPortValidateInterruptPriority+0x4c>
	}
 8005c52:	4770      	bx	lr
 8005c54:	e000e3f0 	.word	0xe000e3f0
 8005c58:	200072c4 	.word	0x200072c4
 8005c5c:	200072c8 	.word	0x200072c8

08005c60 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c60:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <prvInsertBlockIntoFreeList+0x58>)
 8005c62:	461a      	mov	r2, r3
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4283      	cmp	r3, r0
 8005c68:	d3fb      	bcc.n	8005c62 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c6a:	6851      	ldr	r1, [r2, #4]
 8005c6c:	eb02 0c01 	add.w	ip, r2, r1
 8005c70:	4560      	cmp	r0, ip
 8005c72:	d009      	beq.n	8005c88 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c74:	6841      	ldr	r1, [r0, #4]
 8005c76:	eb00 0c01 	add.w	ip, r0, r1
 8005c7a:	4563      	cmp	r3, ip
 8005c7c:	d009      	beq.n	8005c92 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c7e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c80:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c82:	bf18      	it	ne
 8005c84:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005c86:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c88:	6840      	ldr	r0, [r0, #4]
 8005c8a:	4401      	add	r1, r0
 8005c8c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005c8e:	4610      	mov	r0, r2
 8005c90:	e7f0      	b.n	8005c74 <prvInsertBlockIntoFreeList+0x14>
{
 8005c92:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c94:	4c09      	ldr	r4, [pc, #36]	; (8005cbc <prvInsertBlockIntoFreeList+0x5c>)
 8005c96:	6824      	ldr	r4, [r4, #0]
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	d00b      	beq.n	8005cb4 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	4419      	add	r1, r3
 8005ca0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ca2:	6813      	ldr	r3, [r2, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005ca8:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005caa:	bf18      	it	ne
 8005cac:	6010      	strne	r0, [r2, #0]
	}
}
 8005cae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cb2:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005cb4:	6004      	str	r4, [r0, #0]
 8005cb6:	e7f7      	b.n	8005ca8 <prvInsertBlockIntoFreeList+0x48>
 8005cb8:	2000aee4 	.word	0x2000aee4
 8005cbc:	200072cc 	.word	0x200072cc

08005cc0 <pvPortMalloc>:
{
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005cc4:	f7ff f87c 	bl	8004dc0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005cc8:	4b44      	ldr	r3, [pc, #272]	; (8005ddc <pvPortMalloc+0x11c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	b1b3      	cbz	r3, 8005cfc <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005cce:	4b44      	ldr	r3, [pc, #272]	; (8005de0 <pvPortMalloc+0x120>)
 8005cd0:	681d      	ldr	r5, [r3, #0]
 8005cd2:	4225      	tst	r5, r4
 8005cd4:	d17d      	bne.n	8005dd2 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8005cd6:	2c00      	cmp	r4, #0
 8005cd8:	d07b      	beq.n	8005dd2 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 8005cda:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cde:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ce2:	bf1c      	itt	ne
 8005ce4:	f022 0207 	bicne.w	r2, r2, #7
 8005ce8:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d071      	beq.n	8005dd2 <pvPortMalloc+0x112>
 8005cee:	4b3d      	ldr	r3, [pc, #244]	; (8005de4 <pvPortMalloc+0x124>)
 8005cf0:	681e      	ldr	r6, [r3, #0]
 8005cf2:	4296      	cmp	r6, r2
 8005cf4:	d36d      	bcc.n	8005dd2 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 8005cf6:	493c      	ldr	r1, [pc, #240]	; (8005de8 <pvPortMalloc+0x128>)
 8005cf8:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cfa:	e027      	b.n	8005d4c <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8005cfc:	4a3b      	ldr	r2, [pc, #236]	; (8005dec <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cfe:	f012 0f07 	tst.w	r2, #7
 8005d02:	d007      	beq.n	8005d14 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d04:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d06:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d0a:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8005d0e:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d10:	460a      	mov	r2, r1
 8005d12:	e001      	b.n	8005d18 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d14:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d18:	4833      	ldr	r0, [pc, #204]	; (8005de8 <pvPortMalloc+0x128>)
 8005d1a:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d20:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005d22:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d24:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005d28:	482c      	ldr	r0, [pc, #176]	; (8005ddc <pvPortMalloc+0x11c>)
 8005d2a:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005d2c:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d2e:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d30:	1a99      	subs	r1, r3, r2
 8005d32:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d34:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <pvPortMalloc+0x130>)
 8005d38:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d3a:	4b2a      	ldr	r3, [pc, #168]	; (8005de4 <pvPortMalloc+0x124>)
 8005d3c:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d3e:	4b28      	ldr	r3, [pc, #160]	; (8005de0 <pvPortMalloc+0x120>)
 8005d40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d44:	601a      	str	r2, [r3, #0]
}
 8005d46:	e7c2      	b.n	8005cce <pvPortMalloc+0xe>
 8005d48:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d4a:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d4c:	6863      	ldr	r3, [r4, #4]
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d202      	bcs.n	8005d58 <pvPortMalloc+0x98>
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d1f7      	bne.n	8005d48 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8005d58:	4b20      	ldr	r3, [pc, #128]	; (8005ddc <pvPortMalloc+0x11c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	42a3      	cmp	r3, r4
 8005d5e:	d038      	beq.n	8005dd2 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d60:	680f      	ldr	r7, [r1, #0]
 8005d62:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d68:	6863      	ldr	r3, [r4, #4]
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d910      	bls.n	8005d92 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d70:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d72:	f010 0f07 	tst.w	r0, #7
 8005d76:	d008      	beq.n	8005d8a <pvPortMalloc+0xca>
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	e7fe      	b.n	8005d88 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d8a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d8c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d8e:	f7ff ff67 	bl	8005c60 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d92:	6863      	ldr	r3, [r4, #4]
 8005d94:	1af6      	subs	r6, r6, r3
 8005d96:	4a13      	ldr	r2, [pc, #76]	; (8005de4 <pvPortMalloc+0x124>)
 8005d98:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <pvPortMalloc+0x130>)
 8005d9c:	6812      	ldr	r2, [r2, #0]
 8005d9e:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005da0:	bf3c      	itt	cc
 8005da2:	4a13      	ldrcc	r2, [pc, #76]	; (8005df0 <pvPortMalloc+0x130>)
 8005da4:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005da6:	431d      	orrs	r5, r3
 8005da8:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005daa:	2300      	movs	r3, #0
 8005dac:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005dae:	4a11      	ldr	r2, [pc, #68]	; (8005df4 <pvPortMalloc+0x134>)
 8005db0:	6813      	ldr	r3, [r2, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005db6:	f7ff f8b3 	bl	8004f20 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dba:	f017 0f07 	tst.w	r7, #7
 8005dbe:	d00b      	beq.n	8005dd8 <pvPortMalloc+0x118>
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	e7fe      	b.n	8005dd0 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8005dd2:	f7ff f8a5 	bl	8004f20 <xTaskResumeAll>
 8005dd6:	2700      	movs	r7, #0
}
 8005dd8:	4638      	mov	r0, r7
 8005dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ddc:	200072cc 	.word	0x200072cc
 8005de0:	2000aed0 	.word	0x2000aed0
 8005de4:	2000aed4 	.word	0x2000aed4
 8005de8:	2000aee4 	.word	0x2000aee4
 8005dec:	200072d0 	.word	0x200072d0
 8005df0:	2000aed8 	.word	0x2000aed8
 8005df4:	2000aedc 	.word	0x2000aedc

08005df8 <vPortFree>:
	if( pv != NULL )
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d033      	beq.n	8005e64 <vPortFree+0x6c>
{
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e00:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005e04:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <vPortFree+0x70>)
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	4213      	tst	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <vPortFree+0x26>
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	e7fe      	b.n	8005e1c <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e1e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005e22:	b141      	cbz	r1, 8005e36 <vPortFree+0x3e>
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	e7fe      	b.n	8005e34 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e36:	ea23 0302 	bic.w	r3, r3, r2
 8005e3a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005e3e:	f7fe ffbf 	bl	8004dc0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e42:	4a0a      	ldr	r2, [pc, #40]	; (8005e6c <vPortFree+0x74>)
 8005e44:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005e48:	6811      	ldr	r1, [r2, #0]
 8005e4a:	440b      	add	r3, r1
 8005e4c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e4e:	f1a4 0008 	sub.w	r0, r4, #8
 8005e52:	f7ff ff05 	bl	8005c60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e56:	4a06      	ldr	r2, [pc, #24]	; (8005e70 <vPortFree+0x78>)
 8005e58:	6813      	ldr	r3, [r2, #0]
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005e5e:	f7ff f85f 	bl	8004f20 <xTaskResumeAll>
}
 8005e62:	bd10      	pop	{r4, pc}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	2000aed0 	.word	0x2000aed0
 8005e6c:	2000aed4 	.word	0x2000aed4
 8005e70:	2000aee0 	.word	0x2000aee0

08005e74 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8005e74:	b500      	push	{lr}
 8005e76:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8005e78:	4831      	ldr	r0, [pc, #196]	; (8005f40 <tcpip_thread+0xcc>)
 8005e7a:	f008 f868 	bl	800df4e <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8005e7e:	4b31      	ldr	r3, [pc, #196]	; (8005f44 <tcpip_thread+0xd0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	b113      	cbz	r3, 8005e8a <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8005e84:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <tcpip_thread+0xd4>)
 8005e86:	6810      	ldr	r0, [r2, #0]
 8005e88:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8005e8a:	4d2d      	ldr	r5, [pc, #180]	; (8005f40 <tcpip_thread+0xcc>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005e8c:	4e2f      	ldr	r6, [pc, #188]	; (8005f4c <tcpip_thread+0xd8>)
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
 8005e8e:	e01e      	b.n	8005ece <tcpip_thread+0x5a>
    UNLOCK_TCPIP_CORE();
 8005e90:	4628      	mov	r0, r5
 8005e92:	f008 f863 	bl	800df5c <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8005e96:	2200      	movs	r2, #0
 8005e98:	a901      	add	r1, sp, #4
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f008 f81b 	bl	800ded6 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	f008 f854 	bl	800df4e <sys_mutex_lock>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 8005ea6:	9c01      	ldr	r4, [sp, #4]
 8005ea8:	b34c      	cbz	r4, 8005efe <tcpip_thread+0x8a>
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
  switch (msg->type) {
 8005eaa:	7823      	ldrb	r3, [r4, #0]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d03b      	beq.n	8005f28 <tcpip_thread+0xb4>
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d041      	beq.n	8005f38 <tcpip_thread+0xc4>
 8005eb4:	b353      	cbz	r3, 8005f0c <tcpip_thread+0x98>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005eb6:	4b26      	ldr	r3, [pc, #152]	; (8005f50 <tcpip_thread+0xdc>)
 8005eb8:	22cf      	movs	r2, #207	; 0xcf
 8005eba:	4926      	ldr	r1, [pc, #152]	; (8005f54 <tcpip_thread+0xe0>)
 8005ebc:	4826      	ldr	r0, [pc, #152]	; (8005f58 <tcpip_thread+0xe4>)
 8005ebe:	f008 fa6f 	bl	800e3a0 <iprintf>
      break;
 8005ec2:	e004      	b.n	8005ece <tcpip_thread+0x5a>
    sys_check_timeouts();
 8005ec4:	f006 fa9c 	bl	800c400 <sys_check_timeouts>
    goto again;
 8005ec8:	e001      	b.n	8005ece <tcpip_thread+0x5a>
    sys_check_timeouts();
 8005eca:	f006 fa99 	bl	800c400 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8005ece:	f006 fabb 	bl	800c448 <sys_timeouts_sleeptime>
 8005ed2:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8005ed4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ed8:	d0da      	beq.n	8005e90 <tcpip_thread+0x1c>
  } else if (sleeptime == 0) {
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0f2      	beq.n	8005ec4 <tcpip_thread+0x50>
  UNLOCK_TCPIP_CORE();
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f008 f83c 	bl	800df5c <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8005ee4:	4622      	mov	r2, r4
 8005ee6:	a901      	add	r1, sp, #4
 8005ee8:	4630      	mov	r0, r6
 8005eea:	f007 fff4 	bl	800ded6 <sys_arch_mbox_fetch>
 8005eee:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	f008 f82c 	bl	800df4e <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8005ef6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005efa:	d0e6      	beq.n	8005eca <tcpip_thread+0x56>
 8005efc:	e7d3      	b.n	8005ea6 <tcpip_thread+0x32>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8005efe:	4b14      	ldr	r3, [pc, #80]	; (8005f50 <tcpip_thread+0xdc>)
 8005f00:	2291      	movs	r2, #145	; 0x91
 8005f02:	4914      	ldr	r1, [pc, #80]	; (8005f54 <tcpip_thread+0xe0>)
 8005f04:	4814      	ldr	r0, [pc, #80]	; (8005f58 <tcpip_thread+0xe4>)
 8005f06:	f008 fa4b 	bl	800e3a0 <iprintf>
      continue;
 8005f0a:	e7e0      	b.n	8005ece <tcpip_thread+0x5a>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8005f0c:	68e3      	ldr	r3, [r4, #12]
 8005f0e:	68a1      	ldr	r1, [r4, #8]
 8005f10:	6860      	ldr	r0, [r4, #4]
 8005f12:	4798      	blx	r3
 8005f14:	b920      	cbnz	r0, 8005f20 <tcpip_thread+0xac>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005f16:	4621      	mov	r1, r4
 8005f18:	2009      	movs	r0, #9
 8005f1a:	f001 fbe1 	bl	80076e0 <memp_free>
      break;
 8005f1e:	e7d6      	b.n	8005ece <tcpip_thread+0x5a>
        pbuf_free(msg->msg.inp.p);
 8005f20:	6860      	ldr	r0, [r4, #4]
 8005f22:	f001 fe9f 	bl	8007c64 <pbuf_free>
 8005f26:	e7f6      	b.n	8005f16 <tcpip_thread+0xa2>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005f28:	6863      	ldr	r3, [r4, #4]
 8005f2a:	68a0      	ldr	r0, [r4, #8]
 8005f2c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8005f2e:	4621      	mov	r1, r4
 8005f30:	2008      	movs	r0, #8
 8005f32:	f001 fbd5 	bl	80076e0 <memp_free>
      break;
 8005f36:	e7ca      	b.n	8005ece <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8005f38:	6863      	ldr	r3, [r4, #4]
 8005f3a:	68a0      	ldr	r0, [r4, #8]
 8005f3c:	4798      	blx	r3
      break;
 8005f3e:	e7c6      	b.n	8005ece <tcpip_thread+0x5a>
 8005f40:	2000aeec 	.word	0x2000aeec
 8005f44:	2000aef0 	.word	0x2000aef0
 8005f48:	2000aef4 	.word	0x2000aef4
 8005f4c:	2000aef8 	.word	0x2000aef8
 8005f50:	0800f70c 	.word	0x0800f70c
 8005f54:	0800f73c 	.word	0x0800f73c
 8005f58:	0800f6b8 	.word	0x0800f6b8

08005f5c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8005f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5e:	4607      	mov	r7, r0
 8005f60:	460e      	mov	r6, r1
 8005f62:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005f64:	4812      	ldr	r0, [pc, #72]	; (8005fb0 <tcpip_inpkt+0x54>)
 8005f66:	f007 ffd7 	bl	800df18 <sys_mbox_valid>
 8005f6a:	b178      	cbz	r0, 8005f8c <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8005f6c:	2009      	movs	r0, #9
 8005f6e:	f001 fb87 	bl	8007680 <memp_malloc>
  if (msg == NULL) {
 8005f72:	4604      	mov	r4, r0
 8005f74:	b1c0      	cbz	r0, 8005fa8 <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8005f76:	2300      	movs	r3, #0
 8005f78:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 8005f7a:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8005f7c:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8005f7e:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8005f80:	4601      	mov	r1, r0
 8005f82:	480b      	ldr	r0, [pc, #44]	; (8005fb0 <tcpip_inpkt+0x54>)
 8005f84:	f007 ff97 	bl	800deb6 <sys_mbox_trypost>
 8005f88:	b938      	cbnz	r0, 8005f9a <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8005f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <tcpip_inpkt+0x58>)
 8005f8e:	22fc      	movs	r2, #252	; 0xfc
 8005f90:	4909      	ldr	r1, [pc, #36]	; (8005fb8 <tcpip_inpkt+0x5c>)
 8005f92:	480a      	ldr	r0, [pc, #40]	; (8005fbc <tcpip_inpkt+0x60>)
 8005f94:	f008 fa04 	bl	800e3a0 <iprintf>
 8005f98:	e7e8      	b.n	8005f6c <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8005f9a:	4621      	mov	r1, r4
 8005f9c:	2009      	movs	r0, #9
 8005f9e:	f001 fb9f 	bl	80076e0 <memp_free>
    return ERR_MEM;
 8005fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa6:	e7f0      	b.n	8005f8a <tcpip_inpkt+0x2e>
    return ERR_MEM;
 8005fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fac:	e7ed      	b.n	8005f8a <tcpip_inpkt+0x2e>
 8005fae:	bf00      	nop
 8005fb0:	2000aef8 	.word	0x2000aef8
 8005fb4:	0800f70c 	.word	0x0800f70c
 8005fb8:	0800f75c 	.word	0x0800f75c
 8005fbc:	0800f6b8 	.word	0x0800f6b8

08005fc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8005fc0:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8005fc2:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 8005fc6:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8005fca:	bf14      	ite	ne
 8005fcc:	4a02      	ldrne	r2, [pc, #8]	; (8005fd8 <tcpip_input+0x18>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8005fce:	4a03      	ldreq	r2, [pc, #12]	; (8005fdc <tcpip_input+0x1c>)
 8005fd0:	f7ff ffc4 	bl	8005f5c <tcpip_inpkt>
}
 8005fd4:	bd08      	pop	{r3, pc}
 8005fd6:	bf00      	nop
 8005fd8:	0800dd85 	.word	0x0800dd85
 8005fdc:	0800d1c1 	.word	0x0800d1c1

08005fe0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460d      	mov	r5, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8005fe6:	4812      	ldr	r0, [pc, #72]	; (8006030 <tcpip_try_callback+0x50>)
 8005fe8:	f007 ff96 	bl	800df18 <sys_mbox_valid>
 8005fec:	b170      	cbz	r0, 800600c <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8005fee:	2008      	movs	r0, #8
 8005ff0:	f001 fb46 	bl	8007680 <memp_malloc>
  if (msg == NULL) {
 8005ff4:	4604      	mov	r4, r0
 8005ff6:	b1c0      	cbz	r0, 800602a <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 8005ffc:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8005ffe:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8006000:	4601      	mov	r1, r0
 8006002:	480b      	ldr	r0, [pc, #44]	; (8006030 <tcpip_try_callback+0x50>)
 8006004:	f007 ff57 	bl	800deb6 <sys_mbox_trypost>
 8006008:	b940      	cbnz	r0, 800601c <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 800600a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800600c:	4b09      	ldr	r3, [pc, #36]	; (8006034 <tcpip_try_callback+0x54>)
 800600e:	f240 125d 	movw	r2, #349	; 0x15d
 8006012:	4909      	ldr	r1, [pc, #36]	; (8006038 <tcpip_try_callback+0x58>)
 8006014:	4809      	ldr	r0, [pc, #36]	; (800603c <tcpip_try_callback+0x5c>)
 8006016:	f008 f9c3 	bl	800e3a0 <iprintf>
 800601a:	e7e8      	b.n	8005fee <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800601c:	4621      	mov	r1, r4
 800601e:	2008      	movs	r0, #8
 8006020:	f001 fb5e 	bl	80076e0 <memp_free>
    return ERR_MEM;
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	e7ef      	b.n	800600a <tcpip_try_callback+0x2a>
    return ERR_MEM;
 800602a:	f04f 30ff 	mov.w	r0, #4294967295
 800602e:	e7ec      	b.n	800600a <tcpip_try_callback+0x2a>
 8006030:	2000aef8 	.word	0x2000aef8
 8006034:	0800f70c 	.word	0x0800f70c
 8006038:	0800f75c 	.word	0x0800f75c
 800603c:	0800f6b8 	.word	0x0800f6b8

08006040 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006040:	b530      	push	{r4, r5, lr}
 8006042:	b083      	sub	sp, #12
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
  lwip_init();
 8006048:	f000 ffde 	bl	8007008 <lwip_init>

  tcpip_init_done = initfunc;
 800604c:	4b13      	ldr	r3, [pc, #76]	; (800609c <tcpip_init+0x5c>)
 800604e:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8006050:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <tcpip_init+0x60>)
 8006052:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006054:	2106      	movs	r1, #6
 8006056:	4813      	ldr	r0, [pc, #76]	; (80060a4 <tcpip_init+0x64>)
 8006058:	f007 ff20 	bl	800de9c <sys_mbox_new>
 800605c:	b970      	cbnz	r0, 800607c <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800605e:	4812      	ldr	r0, [pc, #72]	; (80060a8 <tcpip_init+0x68>)
 8006060:	f007 ff6a 	bl	800df38 <sys_mutex_new>
 8006064:	b990      	cbnz	r0, 800608c <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006066:	2318      	movs	r3, #24
 8006068:	9300      	str	r3, [sp, #0]
 800606a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800606e:	2200      	movs	r2, #0
 8006070:	490e      	ldr	r1, [pc, #56]	; (80060ac <tcpip_init+0x6c>)
 8006072:	480f      	ldr	r0, [pc, #60]	; (80060b0 <tcpip_init+0x70>)
 8006074:	f007 ff77 	bl	800df66 <sys_thread_new>
}
 8006078:	b003      	add	sp, #12
 800607a:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <tcpip_init+0x74>)
 800607e:	f240 2261 	movw	r2, #609	; 0x261
 8006082:	490d      	ldr	r1, [pc, #52]	; (80060b8 <tcpip_init+0x78>)
 8006084:	480d      	ldr	r0, [pc, #52]	; (80060bc <tcpip_init+0x7c>)
 8006086:	f008 f98b 	bl	800e3a0 <iprintf>
 800608a:	e7e8      	b.n	800605e <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800608c:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <tcpip_init+0x74>)
 800608e:	f240 2265 	movw	r2, #613	; 0x265
 8006092:	490b      	ldr	r1, [pc, #44]	; (80060c0 <tcpip_init+0x80>)
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <tcpip_init+0x7c>)
 8006096:	f008 f983 	bl	800e3a0 <iprintf>
 800609a:	e7e4      	b.n	8006066 <tcpip_init+0x26>
 800609c:	2000aef0 	.word	0x2000aef0
 80060a0:	2000aef4 	.word	0x2000aef4
 80060a4:	2000aef8 	.word	0x2000aef8
 80060a8:	2000aeec 	.word	0x2000aeec
 80060ac:	08005e75 	.word	0x08005e75
 80060b0:	0800f7b4 	.word	0x0800f7b4
 80060b4:	0800f70c 	.word	0x0800f70c
 80060b8:	0800f76c 	.word	0x0800f76c
 80060bc:	0800f6b8 	.word	0x0800f6b8
 80060c0:	0800f790 	.word	0x0800f790

080060c4 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80060c4:	b1c0      	cbz	r0, 80060f8 <fs_open+0x34>
{
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	460d      	mov	r5, r1
 80060ca:	4606      	mov	r6, r0
  if ((file == NULL) || (name == NULL)) {
 80060cc:	b1b9      	cbz	r1, 80060fe <fs_open+0x3a>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80060ce:	4c0d      	ldr	r4, [pc, #52]	; (8006104 <fs_open+0x40>)
    if (!strcmp(name, (const char *)f->name)) {
 80060d0:	6861      	ldr	r1, [r4, #4]
 80060d2:	4628      	mov	r0, r5
 80060d4:	f7fa f88c 	bl	80001f0 <strcmp>
 80060d8:	b128      	cbz	r0, 80060e6 <fs_open+0x22>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 80060da:	6824      	ldr	r4, [r4, #0]
 80060dc:	2c00      	cmp	r4, #0
 80060de:	d1f7      	bne.n	80060d0 <fs_open+0xc>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 80060e0:	f06f 0005 	mvn.w	r0, #5
 80060e4:	e007      	b.n	80060f6 <fs_open+0x32>
      file->data = (const char *)f->data;
 80060e6:	68a3      	ldr	r3, [r4, #8]
 80060e8:	6033      	str	r3, [r6, #0]
      file->len = f->len;
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	6073      	str	r3, [r6, #4]
      file->index = f->len;
 80060ee:	60b3      	str	r3, [r6, #8]
      file->pextension = NULL;
 80060f0:	60f0      	str	r0, [r6, #12]
      file->flags = f->flags;
 80060f2:	7c23      	ldrb	r3, [r4, #16]
 80060f4:	7433      	strb	r3, [r6, #16]
}
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 80060f8:	f06f 000f 	mvn.w	r0, #15
}
 80060fc:	4770      	bx	lr
    return ERR_ARG;
 80060fe:	f06f 000f 	mvn.w	r0, #15
 8006102:	e7f8      	b.n	80060f6 <fs_open+0x32>
 8006104:	080106d0 	.word	0x080106d0

08006108 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8006108:	4770      	bx	lr

0800610a <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 800610a:	6842      	ldr	r2, [r0, #4]
 800610c:	6880      	ldr	r0, [r0, #8]
}
 800610e:	1a10      	subs	r0, r2, r0
 8006110:	4770      	bx	lr
	...

08006114 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8006114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006118:	4605      	mov	r5, r0
 800611a:	460e      	mov	r6, r1
 800611c:	461f      	mov	r7, r3
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800611e:	4690      	mov	r8, r2
 8006120:	b182      	cbz	r2, 8006144 <http_write+0x30>
  len = *length;
 8006122:	f8b8 3000 	ldrh.w	r3, [r8]
  if (len == 0) {
 8006126:	b3a3      	cbz	r3, 8006192 <http_write+0x7e>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8006128:	8e6c      	ldrh	r4, [r5, #50]	; 0x32
 800612a:	0064      	lsls	r4, r4, #1
 800612c:	b2a4      	uxth	r4, r4
 800612e:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 8006132:	4294      	cmp	r4, r2
 8006134:	bf28      	it	cs
 8006136:	4614      	movcs	r4, r2
 8006138:	429c      	cmp	r4, r3
 800613a:	bf28      	it	cs
 800613c:	461c      	movcs	r4, r3
 800613e:	f04f 0901 	mov.w	r9, #1
 8006142:	e011      	b.n	8006168 <http_write+0x54>
  LWIP_ASSERT("length != NULL", length != NULL);
 8006144:	4b14      	ldr	r3, [pc, #80]	; (8006198 <http_write+0x84>)
 8006146:	f240 2219 	movw	r2, #537	; 0x219
 800614a:	4914      	ldr	r1, [pc, #80]	; (800619c <http_write+0x88>)
 800614c:	4814      	ldr	r0, [pc, #80]	; (80061a0 <http_write+0x8c>)
 800614e:	f008 f927 	bl	800e3a0 <iprintf>
 8006152:	e7e6      	b.n	8006122 <http_write+0xe>
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
    if (err == ERR_MEM) {
      if ((altcp_sndbuf(pcb) == 0) ||
 8006154:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 8006158:	b19b      	cbz	r3, 8006182 <http_write+0x6e>
 800615a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 800615e:	2b08      	cmp	r3, #8
 8006160:	d811      	bhi.n	8006186 <http_write+0x72>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
        /* no need to try smaller sizes */
        len = 1;
      } else {
        len /= 2;
 8006162:	0864      	lsrs	r4, r4, #1
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8006164:	2c01      	cmp	r4, #1
 8006166:	d910      	bls.n	800618a <http_write+0x76>
    err = altcp_write(pcb, ptr, len, apiflags);
 8006168:	463b      	mov	r3, r7
 800616a:	4622      	mov	r2, r4
 800616c:	4631      	mov	r1, r6
 800616e:	4628      	mov	r0, r5
 8006170:	f004 ffb0 	bl	800b0d4 <tcp_write>
    if (err == ERR_MEM) {
 8006174:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006178:	d0ec      	beq.n	8006154 <http_write+0x40>

  if (err == ERR_OK) {
 800617a:	b930      	cbnz	r0, 800618a <http_write+0x76>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800617c:	f8a8 4000 	strh.w	r4, [r8]
 8006180:	e008      	b.n	8006194 <http_write+0x80>
 8006182:	464c      	mov	r4, r9
 8006184:	e7ee      	b.n	8006164 <http_write+0x50>
 8006186:	464c      	mov	r4, r9
 8006188:	e7ec      	b.n	8006164 <http_write+0x50>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800618a:	2300      	movs	r3, #0
 800618c:	f8a8 3000 	strh.w	r3, [r8]
 8006190:	e000      	b.n	8006194 <http_write+0x80>
    return ERR_OK;
 8006192:	2000      	movs	r0, #0
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
}
 8006194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006198:	080106e4 	.word	0x080106e4
 800619c:	0801071c 	.word	0x0801071c
 80061a0:	0800f6b8 	.word	0x0800f6b8

080061a4 <http_state_eof>:
{
 80061a4:	b510      	push	{r4, lr}
 80061a6:	4604      	mov	r4, r0
  if (hs->handle) {
 80061a8:	6940      	ldr	r0, [r0, #20]
 80061aa:	b118      	cbz	r0, 80061b4 <http_state_eof+0x10>
    fs_close(hs->handle);
 80061ac:	f7ff ffac 	bl	8006108 <fs_close>
    hs->handle = NULL;
 80061b0:	2300      	movs	r3, #0
 80061b2:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 80061b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80061b6:	b118      	cbz	r0, 80061c0 <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 80061b8:	f000 ff6e 	bl	8007098 <mem_free>
    hs->ssi = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 80061c0:	6a20      	ldr	r0, [r4, #32]
 80061c2:	b118      	cbz	r0, 80061cc <http_state_eof+0x28>
    pbuf_free(hs->req);
 80061c4:	f001 fd4e 	bl	8007c64 <pbuf_free>
    hs->req = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	6223      	str	r3, [r4, #32]
}
 80061cc:	bd10      	pop	{r4, pc}
	...

080061d0 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	4606      	mov	r6, r0
 80061d4:	460c      	mov	r4, r1
  err_t err;

  *uri = "/404.html";
 80061d6:	490c      	ldr	r1, [pc, #48]	; (8006208 <http_get_404_file+0x38>)
 80061d8:	6021      	str	r1, [r4, #0]
  err = fs_open(&hs->file_handle, *uri);
 80061da:	4605      	mov	r5, r0
 80061dc:	f7ff ff72 	bl	80060c4 <fs_open>
  if (err != ERR_OK) {
 80061e0:	b908      	cbnz	r0, 80061e6 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 80061e2:	4628      	mov	r0, r5
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
    *uri = "/404.htm";
 80061e6:	4909      	ldr	r1, [pc, #36]	; (800620c <http_get_404_file+0x3c>)
 80061e8:	6021      	str	r1, [r4, #0]
    err = fs_open(&hs->file_handle, *uri);
 80061ea:	4630      	mov	r0, r6
 80061ec:	f7ff ff6a 	bl	80060c4 <fs_open>
    if (err != ERR_OK) {
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d0f6      	beq.n	80061e2 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 80061f4:	4906      	ldr	r1, [pc, #24]	; (8006210 <http_get_404_file+0x40>)
 80061f6:	6021      	str	r1, [r4, #0]
      err = fs_open(&hs->file_handle, *uri);
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff ff63 	bl	80060c4 <fs_open>
      if (err != ERR_OK) {
 80061fe:	2800      	cmp	r0, #0
 8006200:	d0ef      	beq.n	80061e2 <http_get_404_file+0x12>
        *uri = NULL;
 8006202:	2500      	movs	r5, #0
 8006204:	6025      	str	r5, [r4, #0]
        return NULL;
 8006206:	e7ec      	b.n	80061e2 <http_get_404_file+0x12>
 8006208:	0801072c 	.word	0x0801072c
 800620c:	08010738 	.word	0x08010738
 8006210:	08010744 	.word	0x08010744

08006214 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8006214:	bb42      	cbnz	r2, 8006268 <http_accept+0x54>
{
 8006216:	b570      	push	{r4, r5, r6, lr}
 8006218:	460c      	mov	r4, r1
 800621a:	4615      	mov	r5, r2
  if ((err != ERR_OK) || (pcb == NULL)) {
 800621c:	b339      	cbz	r1, 800626e <http_accept+0x5a>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800621e:	2101      	movs	r1, #1
 8006220:	4620      	mov	r0, r4
 8006222:	f002 f9f7 	bl	8008614 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8006226:	20b0      	movs	r0, #176	; 0xb0
 8006228:	f001 f8f2 	bl	8007410 <mem_malloc>
  if (ret != NULL) {
 800622c:	4606      	mov	r6, r0
 800622e:	b308      	cbz	r0, 8006274 <http_accept+0x60>
  memset(hs, 0, sizeof(struct http_state));
 8006230:	22b0      	movs	r2, #176	; 0xb0
 8006232:	2100      	movs	r1, #0
 8006234:	f008 f817 	bl	800e266 <memset>
  hs = http_state_alloc();
  if (hs == NULL) {
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
  }
  hs->pcb = pcb;
 8006238:	61f4      	str	r4, [r6, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800623a:	4631      	mov	r1, r6
 800623c:	4620      	mov	r0, r4
 800623e:	f002 fa1f 	bl	8008680 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8006242:	490e      	ldr	r1, [pc, #56]	; (800627c <http_accept+0x68>)
 8006244:	4620      	mov	r0, r4
 8006246:	f002 fa1f 	bl	8008688 <tcp_recv>
  altcp_err(pcb, http_err);
 800624a:	490d      	ldr	r1, [pc, #52]	; (8006280 <http_accept+0x6c>)
 800624c:	4620      	mov	r0, r4
 800624e:	f002 fa4f 	bl	80086f0 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8006252:	2204      	movs	r2, #4
 8006254:	490b      	ldr	r1, [pc, #44]	; (8006284 <http_accept+0x70>)
 8006256:	4620      	mov	r0, r4
 8006258:	f002 fa6a 	bl	8008730 <tcp_poll>
  altcp_sent(pcb, http_sent);
 800625c:	490a      	ldr	r1, [pc, #40]	; (8006288 <http_accept+0x74>)
 800625e:	4620      	mov	r0, r4
 8006260:	f002 fa2c 	bl	80086bc <tcp_sent>

  return ERR_OK;
 8006264:	4628      	mov	r0, r5
}
 8006266:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8006268:	f06f 0005 	mvn.w	r0, #5
}
 800626c:	4770      	bx	lr
    return ERR_VAL;
 800626e:	f06f 0005 	mvn.w	r0, #5
 8006272:	e7f8      	b.n	8006266 <http_accept+0x52>
    return ERR_MEM;
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e7f5      	b.n	8006266 <http_accept+0x52>
 800627a:	bf00      	nop
 800627c:	080068a5 	.word	0x080068a5
 8006280:	08006de5 	.word	0x08006de5
 8006284:	08006861 	.word	0x08006861
 8006288:	08006845 	.word	0x08006845

0800628c <http_close_conn>:
{
 800628c:	b538      	push	{r3, r4, r5, lr}
 800628e:	4604      	mov	r4, r0
 8006290:	460d      	mov	r5, r1
  altcp_arg(pcb, NULL);
 8006292:	2100      	movs	r1, #0
 8006294:	f002 f9f4 	bl	8008680 <tcp_arg>
  altcp_recv(pcb, NULL);
 8006298:	2100      	movs	r1, #0
 800629a:	4620      	mov	r0, r4
 800629c:	f002 f9f4 	bl	8008688 <tcp_recv>
  altcp_err(pcb, NULL);
 80062a0:	2100      	movs	r1, #0
 80062a2:	4620      	mov	r0, r4
 80062a4:	f002 fa24 	bl	80086f0 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80062a8:	2200      	movs	r2, #0
 80062aa:	4611      	mov	r1, r2
 80062ac:	4620      	mov	r0, r4
 80062ae:	f002 fa3f 	bl	8008730 <tcp_poll>
  altcp_sent(pcb, NULL);
 80062b2:	2100      	movs	r1, #0
 80062b4:	4620      	mov	r0, r4
 80062b6:	f002 fa01 	bl	80086bc <tcp_sent>
  if (hs != NULL) {
 80062ba:	b12d      	cbz	r5, 80062c8 <http_close_conn+0x3c>
    http_state_eof(hs);
 80062bc:	4628      	mov	r0, r5
 80062be:	f7ff ff71 	bl	80061a4 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80062c2:	4628      	mov	r0, r5
 80062c4:	f000 fee8 	bl	8007098 <mem_free>
  err = altcp_close(pcb);
 80062c8:	4620      	mov	r0, r4
 80062ca:	f002 fdc7 	bl	8008e5c <tcp_close>
  if (err != ERR_OK) {
 80062ce:	4605      	mov	r5, r0
 80062d0:	b908      	cbnz	r0, 80062d6 <http_close_conn+0x4a>
}
 80062d2:	4628      	mov	r0, r5
 80062d4:	bd38      	pop	{r3, r4, r5, pc}
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80062d6:	2204      	movs	r2, #4
 80062d8:	4902      	ldr	r1, [pc, #8]	; (80062e4 <http_close_conn+0x58>)
 80062da:	4620      	mov	r0, r4
 80062dc:	f002 fa28 	bl	8008730 <tcp_poll>
 80062e0:	e7f7      	b.n	80062d2 <http_close_conn+0x46>
 80062e2:	bf00      	nop
 80062e4:	08006861 	.word	0x08006861

080062e8 <http_send>:
{
 80062e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ec:	b087      	sub	sp, #28
  if (hs == NULL) {
 80062ee:	2900      	cmp	r1, #0
 80062f0:	f000 8255 	beq.w	800679e <http_send+0x4b6>
 80062f4:	4682      	mov	sl, r0
 80062f6:	460d      	mov	r5, r1
  if (hs->left == 0) {
 80062f8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80062fa:	b333      	cbz	r3, 800634a <http_send+0x62>
  if (hs->ssi) {
 80062fc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80062fe:	2c00      	cmp	r4, #0
 8006300:	f000 821c 	beq.w	800673c <http_send+0x454>
  len = altcp_sndbuf(pcb);
 8006304:	f8ba 3064 	ldrh.w	r3, [sl, #100]	; 0x64
 8006308:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (ssi->parsed > hs->file) {
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	69a9      	ldr	r1, [r5, #24]
 8006310:	428b      	cmp	r3, r1
 8006312:	d939      	bls.n	8006388 <http_send+0xa0>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8006314:	1a5b      	subs	r3, r3, r1
 8006316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800631a:	4293      	cmp	r3, r2
 800631c:	bfa8      	it	ge
 800631e:	4613      	movge	r3, r2
 8006320:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006324:	2300      	movs	r3, #0
 8006326:	f10d 0216 	add.w	r2, sp, #22
 800632a:	4650      	mov	r0, sl
 800632c:	f7ff fef2 	bl	8006114 <http_write>
    if (err == ERR_OK) {
 8006330:	4606      	mov	r6, r0
 8006332:	bb18      	cbnz	r0, 800637c <http_send+0x94>
      hs->file += len;
 8006334:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8006338:	69ab      	ldr	r3, [r5, #24]
 800633a:	4413      	add	r3, r2
 800633c:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 800633e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006340:	1a9b      	subs	r3, r3, r2
 8006342:	626b      	str	r3, [r5, #36]	; 0x24
      data_to_send = 1;
 8006344:	f04f 0b01 	mov.w	fp, #1
 8006348:	e01a      	b.n	8006380 <http_send+0x98>
  if (hs->handle == NULL) {
 800634a:	6948      	ldr	r0, [r1, #20]
 800634c:	b158      	cbz	r0, 8006366 <http_send+0x7e>
  bytes_left = fs_bytes_left(hs->handle);
 800634e:	f7ff fedc 	bl	800610a <fs_bytes_left>
  if (bytes_left <= 0) {
 8006352:	2800      	cmp	r0, #0
 8006354:	dd0b      	ble.n	800636e <http_send+0x86>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8006356:	4b6a      	ldr	r3, [pc, #424]	; (8006500 <http_send+0x218>)
 8006358:	f240 429d 	movw	r2, #1181	; 0x49d
 800635c:	4969      	ldr	r1, [pc, #420]	; (8006504 <http_send+0x21c>)
 800635e:	486a      	ldr	r0, [pc, #424]	; (8006508 <http_send+0x220>)
 8006360:	f008 f81e 	bl	800e3a0 <iprintf>
  return 1;
 8006364:	e7ca      	b.n	80062fc <http_send+0x14>
    http_close_conn(pcb, hs);
 8006366:	4650      	mov	r0, sl
 8006368:	f7ff ff90 	bl	800628c <http_close_conn>
}
 800636c:	e003      	b.n	8006376 <http_send+0x8e>
    http_close_conn(pcb, hs);
 800636e:	4629      	mov	r1, r5
 8006370:	4650      	mov	r0, sl
 8006372:	f7ff ff8b 	bl	800628c <http_close_conn>
      return 0;
 8006376:	f04f 0b00 	mov.w	fp, #0
 800637a:	e200      	b.n	800677e <http_send+0x496>
  u8_t data_to_send = 0;
 800637c:	f04f 0b00 	mov.w	fp, #0
    if (altcp_sndbuf(pcb) == 0) {
 8006380:	f8ba 3064 	ldrh.w	r3, [sl, #100]	; 0x64
 8006384:	b91b      	cbnz	r3, 800638e <http_send+0xa6>
 8006386:	e1f8      	b.n	800677a <http_send+0x492>
  u8_t data_to_send = 0;
 8006388:	f04f 0b00 	mov.w	fp, #0
  err_t err = ERR_OK;
 800638c:	465e      	mov	r6, fp
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800638e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8006514 <http_send+0x22c>
 8006392:	e00a      	b.n	80063aa <http_send+0xc2>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8006394:	6822      	ldr	r2, [r4, #0]
 8006396:	7811      	ldrb	r1, [r2, #0]
 8006398:	293c      	cmp	r1, #60	; 0x3c
 800639a:	d026      	beq.n	80063ea <http_send+0x102>
 800639c:	292f      	cmp	r1, #47	; 0x2f
 800639e:	d023      	beq.n	80063e8 <http_send+0x100>
        ssi->parse_left--;
 80063a0:	68a3      	ldr	r3, [r4, #8]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 80063a6:	3201      	adds	r2, #1
 80063a8:	6022      	str	r2, [r4, #0]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80063aa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    if (len == 0) {
 80063ae:	f8bd 2016 	ldrh.w	r2, [sp, #22]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d003      	beq.n	80063be <http_send+0xd6>
 80063b6:	68a1      	ldr	r1, [r4, #8]
 80063b8:	2900      	cmp	r1, #0
 80063ba:	f000 81a1 	beq.w	8006700 <http_send+0x418>
 80063be:	2e00      	cmp	r6, #0
 80063c0:	f040 819c 	bne.w	80066fc <http_send+0x414>
    if (len == 0) {
 80063c4:	2a00      	cmp	r2, #0
 80063c6:	f000 81d8 	beq.w	800677a <http_send+0x492>
    switch (ssi->tag_state) {
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d8f1      	bhi.n	80063b2 <http_send+0xca>
 80063ce:	a101      	add	r1, pc, #4	; (adr r1, 80063d4 <http_send+0xec>)
 80063d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063d4:	08006395 	.word	0x08006395
 80063d8:	080063f7 	.word	0x080063f7
 80063dc:	0800642d 	.word	0x0800642d
 80063e0:	080064b5 	.word	0x080064b5
 80063e4:	08006687 	.word	0x08006687
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80063e8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 80063ea:	7423      	strb	r3, [r4, #16]
            ssi->tag_state = TAG_LEADIN;
 80063ec:	2301      	movs	r3, #1
 80063ee:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            ssi->tag_index = 1;
 80063f2:	81a3      	strh	r3, [r4, #12]
            break;
 80063f4:	e7d4      	b.n	80063a0 <http_send+0xb8>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80063f6:	89a1      	ldrh	r1, [r4, #12]
 80063f8:	7c23      	ldrb	r3, [r4, #16]
 80063fa:	f859 3033 	ldr.w	r3, [r9, r3, lsl #3]
 80063fe:	5c5a      	ldrb	r2, [r3, r1]
 8006400:	b92a      	cbnz	r2, 800640e <http_send+0x126>
          ssi->tag_index = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	81a3      	strh	r3, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 8006406:	2302      	movs	r3, #2
 8006408:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 800640c:	e7cd      	b.n	80063aa <http_send+0xc2>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800640e:	6823      	ldr	r3, [r4, #0]
 8006410:	7818      	ldrb	r0, [r3, #0]
 8006412:	4290      	cmp	r0, r2
            ssi->tag_index++;
 8006414:	bf07      	ittee	eq
 8006416:	3101      	addeq	r1, #1
 8006418:	81a1      	strheq	r1, [r4, #12]
            ssi->tag_state = TAG_NONE;
 800641a:	2200      	movne	r2, #0
 800641c:	f884 20e4 	strbne.w	r2, [r4, #228]	; 0xe4
          ssi->parse_left--;
 8006420:	68a2      	ldr	r2, [r4, #8]
 8006422:	3a01      	subs	r2, #1
 8006424:	60a2      	str	r2, [r4, #8]
          ssi->parsed++;
 8006426:	3301      	adds	r3, #1
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	e7be      	b.n	80063aa <http_send+0xc2>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800642c:	89a0      	ldrh	r0, [r4, #12]
 800642e:	2800      	cmp	r0, #0
 8006430:	f040 81c0 	bne.w	80067b4 <http_send+0x4cc>
 8006434:	6821      	ldr	r1, [r4, #0]
 8006436:	780b      	ldrb	r3, [r1, #0]
 8006438:	f1a3 0209 	sub.w	r2, r3, #9
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	2a17      	cmp	r2, #23
 8006440:	f200 81b0 	bhi.w	80067a4 <http_send+0x4bc>
 8006444:	4f31      	ldr	r7, [pc, #196]	; (800650c <http_send+0x224>)
 8006446:	fa27 f202 	lsr.w	r2, r7, r2
 800644a:	f012 0f01 	tst.w	r2, #1
 800644e:	f000 81a9 	beq.w	80067a4 <http_send+0x4bc>
          ssi->parse_left--;
 8006452:	68a3      	ldr	r3, [r4, #8]
 8006454:	3b01      	subs	r3, #1
 8006456:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 8006458:	3101      	adds	r1, #1
 800645a:	6021      	str	r1, [r4, #0]
          break;
 800645c:	e7a5      	b.n	80063aa <http_send+0xc2>
            ssi->tag_state = TAG_LEADOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8006464:	28ff      	cmp	r0, #255	; 0xff
 8006466:	d811      	bhi.n	800648c <http_send+0x1a4>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	7463      	strb	r3, [r4, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800646c:	4423      	add	r3, r4
 800646e:	2200      	movs	r2, #0
 8006470:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8006472:	6822      	ldr	r2, [r4, #0]
 8006474:	7c23      	ldrb	r3, [r4, #16]
 8006476:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	7812      	ldrb	r2, [r2, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	429a      	cmp	r2, r3
              ssi->tag_index = 1;
 8006482:	bf0c      	ite	eq
 8006484:	2301      	moveq	r3, #1
              ssi->tag_index = 0;
 8006486:	2300      	movne	r3, #0
 8006488:	81a3      	strh	r3, [r4, #12]
 800648a:	e1af      	b.n	80067ec <http_send+0x504>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800648c:	4b1c      	ldr	r3, [pc, #112]	; (8006500 <http_send+0x218>)
 800648e:	f240 523a 	movw	r2, #1338	; 0x53a
 8006492:	491f      	ldr	r1, [pc, #124]	; (8006510 <http_send+0x228>)
 8006494:	481c      	ldr	r0, [pc, #112]	; (8006508 <http_send+0x220>)
 8006496:	f007 ff83 	bl	800e3a0 <iprintf>
 800649a:	e7e5      	b.n	8006468 <http_send+0x180>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800649c:	280f      	cmp	r0, #15
 800649e:	d805      	bhi.n	80064ac <http_send+0x1c4>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	81a3      	strh	r3, [r4, #12]
 80064a4:	780b      	ldrb	r3, [r1, #0]
 80064a6:	4420      	add	r0, r4
 80064a8:	7483      	strb	r3, [r0, #18]
 80064aa:	e19f      	b.n	80067ec <http_send+0x504>
            ssi->tag_state = TAG_NONE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80064b2:	e19b      	b.n	80067ec <http_send+0x504>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80064b4:	89a0      	ldrh	r0, [r4, #12]
 80064b6:	b988      	cbnz	r0, 80064dc <http_send+0x1f4>
 80064b8:	6821      	ldr	r1, [r4, #0]
 80064ba:	780a      	ldrb	r2, [r1, #0]
 80064bc:	3a09      	subs	r2, #9
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	2a17      	cmp	r2, #23
 80064c2:	d80b      	bhi.n	80064dc <http_send+0x1f4>
 80064c4:	4b11      	ldr	r3, [pc, #68]	; (800650c <http_send+0x224>)
 80064c6:	fa23 f202 	lsr.w	r2, r3, r2
 80064ca:	f012 0f01 	tst.w	r2, #1
 80064ce:	d005      	beq.n	80064dc <http_send+0x1f4>
          ssi->parse_left--;
 80064d0:	68a3      	ldr	r3, [r4, #8]
 80064d2:	3b01      	subs	r3, #1
 80064d4:	60a3      	str	r3, [r4, #8]
          ssi->parsed++;
 80064d6:	3101      	adds	r1, #1
 80064d8:	6021      	str	r1, [r4, #0]
          break;
 80064da:	e766      	b.n	80063aa <http_send+0xc2>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80064dc:	6823      	ldr	r3, [r4, #0]
 80064de:	7c22      	ldrb	r2, [r4, #16]
 80064e0:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80064e4:	6852      	ldr	r2, [r2, #4]
 80064e6:	781f      	ldrb	r7, [r3, #0]
 80064e8:	5c11      	ldrb	r1, [r2, r0]
 80064ea:	428f      	cmp	r7, r1
 80064ec:	d014      	beq.n	8006518 <http_send+0x230>
          ssi->parse_left--;
 80064ee:	68a2      	ldr	r2, [r4, #8]
 80064f0:	3a01      	subs	r2, #1
 80064f2:	60a2      	str	r2, [r4, #8]
          ssi->parsed++;
 80064f4:	3301      	adds	r3, #1
 80064f6:	6023      	str	r3, [r4, #0]
          ssi->tag_state = TAG_NONE;
 80064f8:	2300      	movs	r3, #0
 80064fa:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80064fe:	e754      	b.n	80063aa <http_send+0xc2>
 8006500:	080106e4 	.word	0x080106e4
 8006504:	08010750 	.word	0x08010750
 8006508:	0800f6b8 	.word	0x0800f6b8
 800650c:	00800013 	.word	0x00800013
 8006510:	08010788 	.word	0x08010788
 8006514:	0801099c 	.word	0x0801099c
          ssi->parse_left--;
 8006518:	68a1      	ldr	r1, [r4, #8]
 800651a:	3901      	subs	r1, #1
 800651c:	60a1      	str	r1, [r4, #8]
          ssi->parsed++;
 800651e:	3301      	adds	r3, #1
 8006520:	6023      	str	r3, [r4, #0]
          ssi->tag_index++;
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	b29b      	uxth	r3, r3
 8006526:	81a3      	strh	r3, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f47f af3d 	bne.w	80063aa <http_send+0xc2>
  ssi = hs->ssi;
 8006530:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8006534:	f1b8 0f00 	cmp.w	r8, #0
 8006538:	f000 8087 	beq.w	800664a <http_send+0x362>
  if (httpd_ssi_handler
 800653c:	4baf      	ldr	r3, [pc, #700]	; (80067fc <http_send+0x514>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	b1eb      	cbz	r3, 8006580 <http_send+0x298>
      && httpd_tags && httpd_num_tags
 8006544:	4bae      	ldr	r3, [pc, #696]	; (8006800 <http_send+0x518>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	b1d3      	cbz	r3, 8006580 <http_send+0x298>
 800654a:	4aae      	ldr	r2, [pc, #696]	; (8006804 <http_send+0x51c>)
 800654c:	6812      	ldr	r2, [r2, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 800654e:	2a00      	cmp	r2, #0
 8006550:	dd16      	ble.n	8006580 <http_send+0x298>
 8006552:	3b04      	subs	r3, #4
 8006554:	2700      	movs	r7, #0
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8006556:	f108 0112 	add.w	r1, r8, #18
 800655a:	9401      	str	r4, [sp, #4]
 800655c:	461c      	mov	r4, r3
 800655e:	9602      	str	r6, [sp, #8]
 8006560:	4616      	mov	r6, r2
 8006562:	9503      	str	r5, [sp, #12]
 8006564:	460d      	mov	r5, r1
 8006566:	f854 1f04 	ldr.w	r1, [r4, #4]!
 800656a:	4628      	mov	r0, r5
 800656c:	f7f9 fe40 	bl	80001f0 <strcmp>
 8006570:	2800      	cmp	r0, #0
 8006572:	d072      	beq.n	800665a <http_send+0x372>
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8006574:	3701      	adds	r7, #1
 8006576:	42be      	cmp	r6, r7
 8006578:	d1f5      	bne.n	8006566 <http_send+0x27e>
 800657a:	9c01      	ldr	r4, [sp, #4]
 800657c:	9e02      	ldr	r6, [sp, #8]
 800657e:	9d03      	ldr	r5, [sp, #12]
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8006580:	f108 0312 	add.w	r3, r8, #18
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f7f9 fe3c 	bl	8000204 <strlen>
 800658c:	28a6      	cmp	r0, #166	; 0xa6
 800658e:	d870      	bhi.n	8006672 <http_send+0x38a>
 8006590:	2811      	cmp	r0, #17
 8006592:	bf28      	it	cs
 8006594:	2011      	movcs	r0, #17
 8006596:	4607      	mov	r7, r0
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8006598:	f8df c284 	ldr.w	ip, [pc, #644]	; 8006820 <http_send+0x538>
 800659c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80065a0:	f8c8 0023 	str.w	r0, [r8, #35]	; 0x23
 80065a4:	f8c8 1027 	str.w	r1, [r8, #39]	; 0x27
 80065a8:	f8c8 202b 	str.w	r2, [r8, #43]	; 0x2b
 80065ac:	f8c8 302f 	str.w	r3, [r8, #47]	; 0x2f
 80065b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80065b4:	f8a8 3033 	strh.w	r3, [r8, #51]	; 0x33
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80065b8:	463a      	mov	r2, r7
 80065ba:	9900      	ldr	r1, [sp, #0]
 80065bc:	f108 0035 	add.w	r0, r8, #53	; 0x35
 80065c0:	f007 fe29 	bl	800e216 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80065c4:	f107 0135 	add.w	r1, r7, #53	; 0x35
 80065c8:	eb08 0201 	add.w	r2, r8, r1
 80065cc:	4b8e      	ldr	r3, [pc, #568]	; (8006808 <http_send+0x520>)
 80065ce:	6818      	ldr	r0, [r3, #0]
 80065d0:	f848 0001 	str.w	r0, [r8, r1]
 80065d4:	8899      	ldrh	r1, [r3, #4]
 80065d6:	799b      	ldrb	r3, [r3, #6]
 80065d8:	8091      	strh	r1, [r2, #4]
 80065da:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80065dc:	eb08 0207 	add.w	r2, r8, r7
 80065e0:	2300      	movs	r3, #0
 80065e2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
  len = strlen(ssi->tag_insert);
 80065e6:	f108 0023 	add.w	r0, r8, #35	; 0x23
 80065ea:	f7f9 fe0b 	bl	8000204 <strlen>
 80065ee:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80065f0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80065f4:	d23f      	bcs.n	8006676 <http_send+0x38e>
  ssi->tag_insert_len = (u16_t)len;
 80065f6:	f8a8 700e 	strh.w	r7, [r8, #14]
            ssi->tag_index = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	81a3      	strh	r3, [r4, #12]
            ssi->tag_state = TAG_SENDING;
 80065fe:	2304      	movs	r3, #4
 8006600:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
            ssi->tag_end = ssi->parsed;
 8006604:	6823      	ldr	r3, [r4, #0]
 8006606:	6063      	str	r3, [r4, #4]
            if (ssi->tag_end > hs->file) {
 8006608:	69a9      	ldr	r1, [r5, #24]
 800660a:	428b      	cmp	r3, r1
 800660c:	f67f aecd 	bls.w	80063aa <http_send+0xc2>
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8006610:	1a5b      	subs	r3, r3, r1
 8006612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006616:	4293      	cmp	r3, r2
 8006618:	bfa8      	it	ge
 800661a:	4613      	movge	r3, r2
 800661c:	f8ad 3016 	strh.w	r3, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006620:	2300      	movs	r3, #0
 8006622:	f10d 0216 	add.w	r2, sp, #22
 8006626:	4650      	mov	r0, sl
 8006628:	f7ff fd74 	bl	8006114 <http_write>
              if (err == ERR_OK) {
 800662c:	4606      	mov	r6, r0
 800662e:	2800      	cmp	r0, #0
 8006630:	f47f aebb 	bne.w	80063aa <http_send+0xc2>
                hs->file += len;
 8006634:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8006638:	69ab      	ldr	r3, [r5, #24]
 800663a:	4413      	add	r3, r2
 800663c:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 800663e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	626b      	str	r3, [r5, #36]	; 0x24
                data_to_send = 1;
 8006644:	f04f 0b01 	mov.w	fp, #1
 8006648:	e6af      	b.n	80063aa <http_send+0xc2>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800664a:	4b70      	ldr	r3, [pc, #448]	; (800680c <http_send+0x524>)
 800664c:	f240 3206 	movw	r2, #774	; 0x306
 8006650:	496f      	ldr	r1, [pc, #444]	; (8006810 <http_send+0x528>)
 8006652:	4870      	ldr	r0, [pc, #448]	; (8006814 <http_send+0x52c>)
 8006654:	f007 fea4 	bl	800e3a0 <iprintf>
 8006658:	e770      	b.n	800653c <http_send+0x254>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800665a:	9c01      	ldr	r4, [sp, #4]
 800665c:	9e02      	ldr	r6, [sp, #8]
 800665e:	9d03      	ldr	r5, [sp, #12]
 8006660:	22c0      	movs	r2, #192	; 0xc0
 8006662:	f108 0123 	add.w	r1, r8, #35	; 0x23
 8006666:	4638      	mov	r0, r7
 8006668:	9b00      	ldr	r3, [sp, #0]
 800666a:	4798      	blx	r3
 800666c:	f8a8 000e 	strh.w	r0, [r8, #14]
          return;
 8006670:	e7c3      	b.n	80065fa <http_send+0x312>
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8006672:	2711      	movs	r7, #17
 8006674:	e790      	b.n	8006598 <http_send+0x2b0>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8006676:	4b65      	ldr	r3, [pc, #404]	; (800680c <http_send+0x524>)
 8006678:	f240 323f 	movw	r2, #831	; 0x33f
 800667c:	4966      	ldr	r1, [pc, #408]	; (8006818 <http_send+0x530>)
 800667e:	4865      	ldr	r0, [pc, #404]	; (8006814 <http_send+0x52c>)
 8006680:	f007 fe8e 	bl	800e3a0 <iprintf>
 8006684:	e7b7      	b.n	80065f6 <http_send+0x30e>
        if (ssi->tag_end > hs->file) {
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	69a9      	ldr	r1, [r5, #24]
 800668a:	428b      	cmp	r3, r1
 800668c:	d916      	bls.n	80066bc <http_send+0x3d4>
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006694:	4293      	cmp	r3, r2
 8006696:	f300 80c5 	bgt.w	8006824 <http_send+0x53c>
 800669a:	b29b      	uxth	r3, r3
 800669c:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 80c3 	bne.w	800682c <http_send+0x544>
            hs->file += len;
 80066a6:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80066aa:	69aa      	ldr	r2, [r5, #24]
 80066ac:	440a      	add	r2, r1
 80066ae:	61aa      	str	r2, [r5, #24]
            hs->left -= len;
 80066b0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80066b2:	1a5b      	subs	r3, r3, r1
 80066b4:	626b      	str	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 80066b6:	f04f 0b01 	mov.w	fp, #1
 80066ba:	e676      	b.n	80063aa <http_send+0xc2>
          if (ssi->tag_index < ssi->tag_insert_len) {
 80066bc:	89a1      	ldrh	r1, [r4, #12]
 80066be:	89e3      	ldrh	r3, [r4, #14]
 80066c0:	4299      	cmp	r1, r3
 80066c2:	d304      	bcc.n	80066ce <http_send+0x3e6>
              ssi->tag_index = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	81a3      	strh	r3, [r4, #12]
              ssi->tag_state = TAG_NONE;
 80066c8:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
 80066cc:	e66d      	b.n	80063aa <http_send+0xc2>
            len = (ssi->tag_insert_len - ssi->tag_index);
 80066ce:	1a5b      	subs	r3, r3, r1
 80066d0:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80066d4:	3123      	adds	r1, #35	; 0x23
 80066d6:	2301      	movs	r3, #1
 80066d8:	f10d 0216 	add.w	r2, sp, #22
 80066dc:	4421      	add	r1, r4
 80066de:	4650      	mov	r0, sl
 80066e0:	f7ff fd18 	bl	8006114 <http_write>
            if (err == ERR_OK) {
 80066e4:	4606      	mov	r6, r0
 80066e6:	2800      	cmp	r0, #0
 80066e8:	f47f ae5f 	bne.w	80063aa <http_send+0xc2>
              ssi->tag_index += len;
 80066ec:	89a3      	ldrh	r3, [r4, #12]
 80066ee:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80066f2:	4413      	add	r3, r2
 80066f4:	81a3      	strh	r3, [r4, #12]
              data_to_send = 1;
 80066f6:	f04f 0b01 	mov.w	fp, #1
 80066fa:	e656      	b.n	80063aa <http_send+0xc2>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80066fc:	2b04      	cmp	r3, #4
 80066fe:	d03c      	beq.n	800677a <http_send+0x492>
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	69a9      	ldr	r1, [r5, #24]
 8006704:	428b      	cmp	r3, r1
 8006706:	d938      	bls.n	800677a <http_send+0x492>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8006708:	1a5b      	subs	r3, r3, r1
 800670a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800670e:	4293      	cmp	r3, r2
 8006710:	bfa8      	it	ge
 8006712:	4613      	movge	r3, r2
 8006714:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006718:	2300      	movs	r3, #0
 800671a:	f10d 0216 	add.w	r2, sp, #22
 800671e:	4650      	mov	r0, sl
 8006720:	f7ff fcf8 	bl	8006114 <http_write>
    if (err == ERR_OK) {
 8006724:	bb48      	cbnz	r0, 800677a <http_send+0x492>
      hs->file += len;
 8006726:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 800672a:	69ab      	ldr	r3, [r5, #24]
 800672c:	4413      	add	r3, r2
 800672e:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8006730:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006732:	1a9b      	subs	r3, r3, r2
 8006734:	626b      	str	r3, [r5, #36]	; 0x24
      data_to_send = 1;
 8006736:	f04f 0b01 	mov.w	fp, #1
 800673a:	e01e      	b.n	800677a <http_send+0x492>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800673c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800673e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8006742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006746:	428b      	cmp	r3, r1
 8006748:	bf88      	it	hi
 800674a:	4613      	movhi	r3, r2
 800674c:	f8ad 3016 	strh.w	r3, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8006750:	2300      	movs	r3, #0
 8006752:	f10d 0216 	add.w	r2, sp, #22
 8006756:	69a9      	ldr	r1, [r5, #24]
 8006758:	4650      	mov	r0, sl
 800675a:	f7ff fcdb 	bl	8006114 <http_write>
  if (err == ERR_OK) {
 800675e:	b950      	cbnz	r0, 8006776 <http_send+0x48e>
    hs->file += len;
 8006760:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8006764:	69ab      	ldr	r3, [r5, #24]
 8006766:	4413      	add	r3, r2
 8006768:	61ab      	str	r3, [r5, #24]
    hs->left -= len;
 800676a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800676c:	1a9b      	subs	r3, r3, r2
 800676e:	626b      	str	r3, [r5, #36]	; 0x24
    data_to_send = 1;
 8006770:	f04f 0b01 	mov.w	fp, #1
 8006774:	e001      	b.n	800677a <http_send+0x492>
  u8_t data_to_send = 0;
 8006776:	f04f 0b00 	mov.w	fp, #0
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800677a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800677c:	b11b      	cbz	r3, 8006786 <http_send+0x49e>
}
 800677e:	4658      	mov	r0, fp
 8006780:	b007      	add	sp, #28
 8006782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 8006786:	6968      	ldr	r0, [r5, #20]
 8006788:	f7ff fcbf 	bl	800610a <fs_bytes_left>
 800678c:	2800      	cmp	r0, #0
 800678e:	dcf6      	bgt.n	800677e <http_send+0x496>
    http_close_conn(pcb, hs);
 8006790:	4629      	mov	r1, r5
 8006792:	4650      	mov	r0, sl
 8006794:	f7ff fd7a 	bl	800628c <http_close_conn>
    return 0;
 8006798:	f04f 0b00 	mov.w	fp, #0
}
 800679c:	e7ef      	b.n	800677e <http_send+0x496>
    return 0;
 800679e:	f04f 0b00 	mov.w	fp, #0
 80067a2:	e7ec      	b.n	800677e <http_send+0x496>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 80067a4:	7c22      	ldrb	r2, [r4, #16]
 80067a6:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	7812      	ldrb	r2, [r2, #0]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d10a      	bne.n	80067c8 <http_send+0x4e0>
 80067b2:	e018      	b.n	80067e6 <http_send+0x4fe>
 80067b4:	6821      	ldr	r1, [r4, #0]
 80067b6:	780b      	ldrb	r3, [r1, #0]
 80067b8:	7c22      	ldrb	r2, [r4, #16]
 80067ba:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 80067be:	6852      	ldr	r2, [r2, #4]
 80067c0:	7812      	ldrb	r2, [r2, #0]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	f43f ae4b 	beq.w	800645e <http_send+0x176>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 80067c8:	3b09      	subs	r3, #9
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b17      	cmp	r3, #23
 80067ce:	f63f ae65 	bhi.w	800649c <http_send+0x1b4>
 80067d2:	4a12      	ldr	r2, [pc, #72]	; (800681c <http_send+0x534>)
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
 80067d8:	f013 0f01 	tst.w	r3, #1
 80067dc:	f43f ae5e 	beq.w	800649c <http_send+0x1b4>
          if (ssi->tag_index == 0) {
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f47f ae3c 	bne.w	800645e <http_send+0x176>
            ssi->tag_state = TAG_NONE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
        ssi->parse_left--;
 80067ec:	68a3      	ldr	r3, [r4, #8]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	60a3      	str	r3, [r4, #8]
        ssi->parsed++;
 80067f2:	6823      	ldr	r3, [r4, #0]
 80067f4:	3301      	adds	r3, #1
 80067f6:	6023      	str	r3, [r4, #0]
        break;
 80067f8:	e5d7      	b.n	80063aa <http_send+0xc2>
 80067fa:	bf00      	nop
 80067fc:	2000b348 	.word	0x2000b348
 8006800:	2000b34c 	.word	0x2000b34c
 8006804:	2000af44 	.word	0x2000af44
 8006808:	080107c0 	.word	0x080107c0
 800680c:	080106e4 	.word	0x080106e4
 8006810:	080107a0 	.word	0x080107a0
 8006814:	0800f6b8 	.word	0x0800f6b8
 8006818:	080107c8 	.word	0x080107c8
 800681c:	00800013 	.word	0x00800013
 8006820:	080107ac 	.word	0x080107ac
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8006824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006828:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800682c:	2300      	movs	r3, #0
 800682e:	f10d 0216 	add.w	r2, sp, #22
 8006832:	4650      	mov	r0, sl
 8006834:	f7ff fc6e 	bl	8006114 <http_write>
          if (err == ERR_OK) {
 8006838:	2800      	cmp	r0, #0
 800683a:	f43f af34 	beq.w	80066a6 <http_send+0x3be>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800683e:	4606      	mov	r6, r0
 8006840:	e5b3      	b.n	80063aa <http_send+0xc2>
 8006842:	bf00      	nop

08006844 <http_sent>:
  if (hs == NULL) {
 8006844:	b150      	cbz	r0, 800685c <http_sent+0x18>
{
 8006846:	b508      	push	{r3, lr}
 8006848:	460b      	mov	r3, r1
 800684a:	4601      	mov	r1, r0
  hs->retries = 0;
 800684c:	2200      	movs	r2, #0
 800684e:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
  http_send(pcb, hs);
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff fd48 	bl	80062e8 <http_send>
}
 8006858:	2000      	movs	r0, #0
 800685a:	bd08      	pop	{r3, pc}
 800685c:	2000      	movs	r0, #0
 800685e:	4770      	bx	lr

08006860 <http_poll>:
{
 8006860:	b510      	push	{r4, lr}
 8006862:	460c      	mov	r4, r1
  if (hs == NULL) {
 8006864:	b180      	cbz	r0, 8006888 <http_poll+0x28>
 8006866:	4601      	mov	r1, r0
    hs->retries++;
 8006868:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800686c:	3301      	adds	r3, #1
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8006874:	2b04      	cmp	r3, #4
 8006876:	d00c      	beq.n	8006892 <http_poll+0x32>
    if (hs->handle) {
 8006878:	6943      	ldr	r3, [r0, #20]
 800687a:	b11b      	cbz	r3, 8006884 <http_poll+0x24>
      if (http_send(pcb, hs)) {
 800687c:	4620      	mov	r0, r4
 800687e:	f7ff fd33 	bl	80062e8 <http_send>
 8006882:	b950      	cbnz	r0, 800689a <http_poll+0x3a>
}
 8006884:	2000      	movs	r0, #0
 8006886:	bd10      	pop	{r4, pc}
    closed = http_close_conn(pcb, NULL);
 8006888:	2100      	movs	r1, #0
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff fcfe 	bl	800628c <http_close_conn>
    return ERR_OK;
 8006890:	e7f8      	b.n	8006884 <http_poll+0x24>
      http_close_conn(pcb, hs);
 8006892:	4620      	mov	r0, r4
 8006894:	f7ff fcfa 	bl	800628c <http_close_conn>
      return ERR_OK;
 8006898:	e7f4      	b.n	8006884 <http_poll+0x24>
        altcp_output(pcb);
 800689a:	4620      	mov	r0, r4
 800689c:	f005 fa50 	bl	800bd40 <tcp_output>
 80068a0:	e7f0      	b.n	8006884 <http_poll+0x24>
	...

080068a4 <http_recv>:
{
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	b089      	sub	sp, #36	; 0x24
 80068aa:	4605      	mov	r5, r0
 80068ac:	460e      	mov	r6, r1
 80068ae:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 80068b0:	b963      	cbnz	r3, 80068cc <http_recv+0x28>
 80068b2:	461f      	mov	r7, r3
 80068b4:	b192      	cbz	r2, 80068dc <http_recv+0x38>
 80068b6:	b150      	cbz	r0, 80068ce <http_recv+0x2a>
    altcp_recved(pcb, p->tot_len);
 80068b8:	8911      	ldrh	r1, [r2, #8]
 80068ba:	4630      	mov	r0, r6
 80068bc:	f001 fe56 	bl	800856c <tcp_recved>
    if (hs->handle == NULL) {
 80068c0:	696b      	ldr	r3, [r5, #20]
 80068c2:	b19b      	cbz	r3, 80068ec <http_recv+0x48>
      pbuf_free(p);
 80068c4:	4620      	mov	r0, r4
 80068c6:	f001 f9cd 	bl	8007c64 <pbuf_free>
 80068ca:	e00b      	b.n	80068e4 <http_recv+0x40>
    if (p != NULL) {
 80068cc:	b132      	cbz	r2, 80068dc <http_recv+0x38>
      altcp_recved(pcb, p->tot_len);
 80068ce:	8921      	ldrh	r1, [r4, #8]
 80068d0:	4630      	mov	r0, r6
 80068d2:	f001 fe4b 	bl	800856c <tcp_recved>
      pbuf_free(p);
 80068d6:	4620      	mov	r0, r4
 80068d8:	f001 f9c4 	bl	8007c64 <pbuf_free>
    http_close_conn(pcb, hs);
 80068dc:	4629      	mov	r1, r5
 80068de:	4630      	mov	r0, r6
 80068e0:	f7ff fcd4 	bl	800628c <http_close_conn>
}
 80068e4:	2000      	movs	r0, #0
 80068e6:	b009      	add	sp, #36	; 0x24
 80068e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 80068ec:	69ab      	ldr	r3, [r5, #24]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	f040 8254 	bne.w	8006d9c <http_recv+0x4f8>
  if (hs->req == NULL) {
 80068f4:	6a28      	ldr	r0, [r5, #32]
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d05f      	beq.n	80069ba <http_recv+0x116>
    pbuf_cat(hs->req, p);
 80068fa:	4621      	mov	r1, r4
 80068fc:	f001 fb52 	bl	8007fa4 <pbuf_cat>
  pbuf_ref(p);
 8006900:	4620      	mov	r0, r4
 8006902:	f001 fb33 	bl	8007f6c <pbuf_ref>
  if (hs->req->next != NULL) {
 8006906:	6a28      	ldr	r0, [r5, #32]
 8006908:	6803      	ldr	r3, [r0, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d057      	beq.n	80069be <http_recv+0x11a>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800690e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
 8006912:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8006916:	4598      	cmp	r8, r3
 8006918:	bf28      	it	cs
 800691a:	4698      	movcs	r8, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800691c:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8006be0 <http_recv+0x33c>
 8006920:	2300      	movs	r3, #0
 8006922:	4642      	mov	r2, r8
 8006924:	4649      	mov	r1, r9
 8006926:	f001 fc1d 	bl	8008164 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 800692a:	f1b8 0f06 	cmp.w	r8, #6
 800692e:	d924      	bls.n	800697a <http_recv+0xd6>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8006930:	f8cd 8004 	str.w	r8, [sp, #4]
 8006934:	4642      	mov	r2, r8
 8006936:	49a2      	ldr	r1, [pc, #648]	; (8006bc0 <http_recv+0x31c>)
 8006938:	4648      	mov	r0, r9
 800693a:	f000 fb0e 	bl	8006f5a <lwip_strnstr>
    if (crlf != NULL) {
 800693e:	b1e0      	cbz	r0, 800697a <http_recv+0xd6>
      if (!strncmp(data, "GET ", 4)) {
 8006940:	2204      	movs	r2, #4
 8006942:	49a0      	ldr	r1, [pc, #640]	; (8006bc4 <http_recv+0x320>)
 8006944:	4648      	mov	r0, r9
 8006946:	f007 fe73 	bl	800e630 <strncmp>
 800694a:	4683      	mov	fp, r0
 800694c:	2800      	cmp	r0, #0
 800694e:	d13b      	bne.n	80069c8 <http_recv+0x124>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8006950:	f109 0a04 	add.w	sl, r9, #4
 8006954:	f1a8 0804 	sub.w	r8, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8006958:	fa1f f888 	uxth.w	r8, r8
 800695c:	4642      	mov	r2, r8
 800695e:	499a      	ldr	r1, [pc, #616]	; (8006bc8 <http_recv+0x324>)
 8006960:	4650      	mov	r0, sl
 8006962:	f000 fafa 	bl	8006f5a <lwip_strnstr>
      if (sp2 == NULL) {
 8006966:	4603      	mov	r3, r0
 8006968:	b390      	cbz	r0, 80069d0 <http_recv+0x12c>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800696a:	eba0 080a 	sub.w	r8, r0, sl
      int is_09 = 0;
 800696e:	f8cd b008 	str.w	fp, [sp, #8]
        sp1 = data + 3;
 8006972:	f109 0203 	add.w	r2, r9, #3
      if ((sp2 != 0) && (sp2 > sp1)) {
 8006976:	4293      	cmp	r3, r2
 8006978:	d837      	bhi.n	80069ea <http_recv+0x146>
  clen = pbuf_clen(hs->req);
 800697a:	6a28      	ldr	r0, [r5, #32]
 800697c:	f001 faea 	bl	8007f54 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8006980:	6a2b      	ldr	r3, [r5, #32]
 8006982:	891b      	ldrh	r3, [r3, #8]
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006988:	d202      	bcs.n	8006990 <http_recv+0xec>
 800698a:	2805      	cmp	r0, #5
 800698c:	f240 81fa 	bls.w	8006d84 <http_recv+0x4e0>
        if (hs->req != NULL) {
 8006990:	6a28      	ldr	r0, [r5, #32]
 8006992:	2800      	cmp	r0, #0
 8006994:	f000 81fa 	beq.w	8006d8c <http_recv+0x4e8>
 8006998:	f06f 070f 	mvn.w	r7, #15
          pbuf_free(hs->req);
 800699c:	f001 f962 	bl	8007c64 <pbuf_free>
          hs->req = NULL;
 80069a0:	2300      	movs	r3, #0
 80069a2:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 80069a4:	4620      	mov	r0, r4
 80069a6:	f001 f95d 	bl	8007c64 <pbuf_free>
      if (parsed == ERR_OK) {
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	f040 81e1 	bne.w	8006d72 <http_recv+0x4ce>
          http_send(pcb, hs);
 80069b0:	4629      	mov	r1, r5
 80069b2:	4630      	mov	r0, r6
 80069b4:	f7ff fc98 	bl	80062e8 <http_send>
 80069b8:	e794      	b.n	80068e4 <http_recv+0x40>
    hs->req = p;
 80069ba:	622c      	str	r4, [r5, #32]
 80069bc:	e7a0      	b.n	8006900 <http_recv+0x5c>
    data = (char *)p->payload;
 80069be:	f8d4 9004 	ldr.w	r9, [r4, #4]
    data_len = p->len;
 80069c2:	f8b4 800a 	ldrh.w	r8, [r4, #10]
    if (p->len != p->tot_len) {
 80069c6:	e7b0      	b.n	800692a <http_recv+0x86>
        data[4] = 0;
 80069c8:	2300      	movs	r3, #0
 80069ca:	f889 3004 	strb.w	r3, [r9, #4]
        return http_find_error_file(hs, 501);
 80069ce:	e7df      	b.n	8006990 <http_recv+0xec>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 80069d0:	4642      	mov	r2, r8
 80069d2:	497b      	ldr	r1, [pc, #492]	; (8006bc0 <http_recv+0x31c>)
 80069d4:	4650      	mov	r0, sl
 80069d6:	f000 fac0 	bl	8006f5a <lwip_strnstr>
      if ((sp2 != 0) && (sp2 > sp1)) {
 80069da:	4603      	mov	r3, r0
 80069dc:	2800      	cmp	r0, #0
 80069de:	d0cc      	beq.n	800697a <http_recv+0xd6>
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 80069e0:	eba0 080a 	sub.w	r8, r0, sl
        is_09 = 1;
 80069e4:	2201      	movs	r2, #1
 80069e6:	9202      	str	r2, [sp, #8]
 80069e8:	e7c3      	b.n	8006972 <http_recv+0xce>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 80069ea:	9a01      	ldr	r2, [sp, #4]
 80069ec:	4977      	ldr	r1, [pc, #476]	; (8006bcc <http_recv+0x328>)
 80069ee:	4648      	mov	r0, r9
 80069f0:	f000 fab3 	bl	8006f5a <lwip_strnstr>
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d0c0      	beq.n	800697a <http_recv+0xd6>
          *sp1 = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	f889 3003 	strb.w	r3, [r9, #3]
          uri[uri_len] = 0;
 80069fe:	fa1f f888 	uxth.w	r8, r8
 8006a02:	f80a 3008 	strb.w	r3, [sl, r8]
            return http_find_file(hs, uri, is_09);
 8006a06:	f8cd a01c 	str.w	sl, [sp, #28]
  size_t uri_len = strlen(uri);
 8006a0a:	4650      	mov	r0, sl
 8006a0c:	f7f9 fbfa 	bl	8000204 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006a10:	9001      	str	r0, [sp, #4]
 8006a12:	b120      	cbz	r0, 8006a1e <http_recv+0x17a>
 8006a14:	1e42      	subs	r2, r0, #1
 8006a16:	f81a 3002 	ldrb.w	r3, [sl, r2]
 8006a1a:	2b2f      	cmp	r3, #47	; 0x2f
 8006a1c:	d02f      	beq.n	8006a7e <http_recv+0x1da>
    params = (char *)strchr(uri, '?');
 8006a1e:	213f      	movs	r1, #63	; 0x3f
 8006a20:	9807      	ldr	r0, [sp, #28]
 8006a22:	f007 fdf0 	bl	800e606 <strchr>
    if (params != NULL) {
 8006a26:	4682      	mov	sl, r0
 8006a28:	b110      	cbz	r0, 8006a30 <http_recv+0x18c>
      *params = '\0';
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	f80a 3b01 	strb.w	r3, [sl], #1
    if (httpd_num_cgis && httpd_cgis) {
 8006a30:	4b67      	ldr	r3, [pc, #412]	; (8006bd0 <http_recv+0x32c>)
 8006a32:	f8d3 9000 	ldr.w	r9, [r3]
 8006a36:	f1b9 0f00 	cmp.w	r9, #0
 8006a3a:	f000 80e1 	beq.w	8006c00 <http_recv+0x35c>
 8006a3e:	4b65      	ldr	r3, [pc, #404]	; (8006bd4 <http_recv+0x330>)
 8006a40:	f8d3 8000 	ldr.w	r8, [r3]
 8006a44:	f1b8 0f00 	cmp.w	r8, #0
 8006a48:	f000 80da 	beq.w	8006c00 <http_recv+0x35c>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006a4c:	f1b9 0f00 	cmp.w	r9, #0
 8006a50:	f340 80d6 	ble.w	8006c00 <http_recv+0x35c>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 8006a54:	9b07      	ldr	r3, [sp, #28]
 8006a56:	f8cd a00c 	str.w	sl, [sp, #12]
 8006a5a:	9401      	str	r4, [sp, #4]
 8006a5c:	461c      	mov	r4, r3
 8006a5e:	eb08 0acb 	add.w	sl, r8, fp, lsl #3
 8006a62:	f858 103b 	ldr.w	r1, [r8, fp, lsl #3]
 8006a66:	4620      	mov	r0, r4
 8006a68:	f7f9 fbc2 	bl	80001f0 <strcmp>
 8006a6c:	4601      	mov	r1, r0
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	d05d      	beq.n	8006b2e <http_recv+0x28a>
      for (i = 0; i < httpd_num_cgis; i++) {
 8006a72:	f10b 0b01 	add.w	fp, fp, #1
 8006a76:	45d9      	cmp	r9, fp
 8006a78:	d1f1      	bne.n	8006a5e <http_recv+0x1ba>
 8006a7a:	9c01      	ldr	r4, [sp, #4]
 8006a7c:	e0c0      	b.n	8006c00 <http_recv+0x35c>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8006a7e:	4b56      	ldr	r3, [pc, #344]	; (8006bd8 <http_recv+0x334>)
 8006a80:	459a      	cmp	sl, r3
 8006a82:	d019      	beq.n	8006ab8 <http_recv+0x214>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006a84:	4613      	mov	r3, r2
 8006a86:	2a3f      	cmp	r2, #63	; 0x3f
 8006a88:	bf28      	it	cs
 8006a8a:	233f      	movcs	r3, #63	; 0x3f
 8006a8c:	9303      	str	r3, [sp, #12]
    if (copy_len > 0) {
 8006a8e:	9a01      	ldr	r2, [sp, #4]
 8006a90:	2a01      	cmp	r2, #1
 8006a92:	d00a      	beq.n	8006aaa <http_recv+0x206>
      MEMCPY(http_uri_buf, uri, copy_len);
 8006a94:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8006bd8 <http_recv+0x334>
 8006a98:	4699      	mov	r9, r3
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	4651      	mov	r1, sl
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	f007 fbb9 	bl	800e216 <memcpy>
      http_uri_buf[copy_len] = 0;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f808 3009 	strb.w	r3, [r8, r9]
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006aaa:	f04f 0900 	mov.w	r9, #0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006aae:	4b4a      	ldr	r3, [pc, #296]	; (8006bd8 <http_recv+0x334>)
 8006ab0:	9a03      	ldr	r2, [sp, #12]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	e028      	b.n	8006b0a <http_recv+0x266>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8006ab8:	2801      	cmp	r0, #1
 8006aba:	d1b0      	bne.n	8006a1e <http_recv+0x17a>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8006abc:	2300      	movs	r3, #0
 8006abe:	9303      	str	r3, [sp, #12]
 8006ac0:	e7f3      	b.n	8006aaa <http_recv+0x206>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8006ac2:	4b46      	ldr	r3, [pc, #280]	; (8006bdc <http_recv+0x338>)
 8006ac4:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
 8006ac8:	4650      	mov	r0, sl
 8006aca:	f7f9 fb9b 	bl	8000204 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8006ace:	4580      	cmp	r8, r0
 8006ad0:	bf28      	it	cs
 8006ad2:	4680      	movcs	r8, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8006ad4:	4642      	mov	r2, r8
 8006ad6:	4651      	mov	r1, sl
 8006ad8:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006adc:	4650      	mov	r0, sl
 8006ade:	f007 fb9a 	bl	800e216 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	f80a 3008 	strb.w	r3, [sl, r8]
        file_name = http_uri_buf;
 8006ae8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8006bd8 <http_recv+0x334>
 8006aec:	e002      	b.n	8006af4 <http_recv+0x250>
        file_name = httpd_default_filenames[loop].name;
 8006aee:	4b3b      	ldr	r3, [pc, #236]	; (8006bdc <http_recv+0x338>)
 8006af0:	f853 a039 	ldr.w	sl, [r3, r9, lsl #3]
      err = fs_open(&hs->file_handle, file_name);
 8006af4:	46a8      	mov	r8, r5
 8006af6:	4651      	mov	r1, sl
 8006af8:	4628      	mov	r0, r5
 8006afa:	f7ff fae3 	bl	80060c4 <fs_open>
      if (err == ERR_OK) {
 8006afe:	b170      	cbz	r0, 8006b1e <http_recv+0x27a>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8006b00:	f109 0901 	add.w	r9, r9, #1
 8006b04:	f1b9 0f05 	cmp.w	r9, #5
 8006b08:	d089      	beq.n	8006a1e <http_recv+0x17a>
      if (copy_len > 0) {
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d0ee      	beq.n	8006aee <http_recv+0x24a>
        if (len_left > 0) {
 8006b10:	9b03      	ldr	r3, [sp, #12]
 8006b12:	f1d3 083f 	rsbs	r8, r3, #63	; 0x3f
 8006b16:	d1d4      	bne.n	8006ac2 <http_recv+0x21e>
        file_name = http_uri_buf;
 8006b18:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006bd8 <http_recv+0x334>
 8006b1c:	e7ea      	b.n	8006af4 <http_recv+0x250>
        uri = file_name;
 8006b1e:	f8cd a01c 	str.w	sl, [sp, #28]
        tag_check = httpd_default_filenames[loop].shtml;
 8006b22:	4b2e      	ldr	r3, [pc, #184]	; (8006bdc <http_recv+0x338>)
 8006b24:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006b28:	f899 9004 	ldrb.w	r9, [r9, #4]
  if (file == NULL) {
 8006b2c:	e075      	b.n	8006c1a <http_recv+0x376>
  if (!params || (params[0] == '\0')) {
 8006b2e:	f8cd a014 	str.w	sl, [sp, #20]
 8006b32:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006b36:	9c01      	ldr	r4, [sp, #4]
 8006b38:	f1ba 0f00 	cmp.w	sl, #0
 8006b3c:	d056      	beq.n	8006bec <http_recv+0x348>
 8006b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d052      	beq.n	8006bec <http_recv+0x348>
 8006b46:	f105 092c 	add.w	r9, r5, #44	; 0x2c
 8006b4a:	9503      	str	r5, [sp, #12]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	9604      	str	r6, [sp, #16]
 8006b50:	46a0      	mov	r8, r4
 8006b52:	e011      	b.n	8006b78 <http_recv+0x2d4>
      pair = strchr(equals, ' ');
 8006b54:	2120      	movs	r1, #32
 8006b56:	4650      	mov	r0, sl
 8006b58:	f007 fd55 	bl	800e606 <strchr>
      if (pair) {
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	b1e0      	cbz	r0, 8006b9a <http_recv+0x2f6>
        *pair = '\0';
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	7003      	strb	r3, [r0, #0]
      pair = NULL;
 8006b66:	9c01      	ldr	r4, [sp, #4]
 8006b68:	e017      	b.n	8006b9a <http_recv+0x2f6>
      http_cgi_param_vals[loop] = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	6433      	str	r3, [r6, #64]	; 0x40
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8006b6e:	3501      	adds	r5, #1
 8006b70:	2d10      	cmp	r5, #16
 8006b72:	d037      	beq.n	8006be4 <http_recv+0x340>
 8006b74:	b1f4      	cbz	r4, 8006bb4 <http_recv+0x310>
 8006b76:	46a2      	mov	sl, r4
    http_cgi_params[loop] = pair;
 8006b78:	f109 0904 	add.w	r9, r9, #4
 8006b7c:	464e      	mov	r6, r9
 8006b7e:	f8c9 a000 	str.w	sl, [r9]
    pair = strchr(pair, '&');
 8006b82:	2126      	movs	r1, #38	; 0x26
 8006b84:	4650      	mov	r0, sl
 8006b86:	f007 fd3e 	bl	800e606 <strchr>
    if (pair) {
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	9001      	str	r0, [sp, #4]
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0e0      	beq.n	8006b54 <http_recv+0x2b0>
      *pair = '\0';
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	f804 3b01 	strb.w	r3, [r4], #1
    equals = strchr(equals, '=');
 8006b9a:	213d      	movs	r1, #61	; 0x3d
 8006b9c:	4650      	mov	r0, sl
 8006b9e:	f007 fd32 	bl	800e606 <strchr>
    if (equals) {
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d0e0      	beq.n	8006b6a <http_recv+0x2c6>
      *equals = '\0';
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f803 2b01 	strb.w	r2, [r3], #1
      http_cgi_param_vals[loop] = equals + 1;
 8006bb0:	6433      	str	r3, [r6, #64]	; 0x40
 8006bb2:	e7dc      	b.n	8006b6e <http_recv+0x2ca>
 8006bb4:	4629      	mov	r1, r5
 8006bb6:	9d03      	ldr	r5, [sp, #12]
 8006bb8:	9e04      	ldr	r6, [sp, #16]
 8006bba:	4644      	mov	r4, r8
 8006bbc:	e016      	b.n	8006bec <http_recv+0x348>
 8006bbe:	bf00      	nop
 8006bc0:	080107d8 	.word	0x080107d8
 8006bc4:	080107dc 	.word	0x080107dc
 8006bc8:	080107e4 	.word	0x080107e4
 8006bcc:	080107e8 	.word	0x080107e8
 8006bd0:	2000af40 	.word	0x2000af40
 8006bd4:	2000af3c 	.word	0x2000af3c
 8006bd8:	2000aefc 	.word	0x2000aefc
 8006bdc:	080109ac 	.word	0x080109ac
 8006be0:	2000af48 	.word	0x2000af48
 8006be4:	4629      	mov	r1, r5
 8006be6:	9d03      	ldr	r5, [sp, #12]
 8006be8:	9e04      	ldr	r6, [sp, #16]
 8006bea:	4644      	mov	r4, r8
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 8006bec:	9b05      	ldr	r3, [sp, #20]
 8006bee:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006bf2:	f105 0370 	add.w	r3, r5, #112	; 0x70
 8006bf6:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8006bfa:	4658      	mov	r0, fp
 8006bfc:	47c0      	blx	r8
 8006bfe:	9007      	str	r0, [sp, #28]
    err = fs_open(&hs->file_handle, uri);
 8006c00:	46a8      	mov	r8, r5
 8006c02:	9907      	ldr	r1, [sp, #28]
 8006c04:	4628      	mov	r0, r5
 8006c06:	f7ff fa5d 	bl	80060c4 <fs_open>
    if (err == ERR_OK) {
 8006c0a:	bb68      	cbnz	r0, 8006c68 <http_recv+0x3c4>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8006c0c:	f898 9010 	ldrb.w	r9, [r8, #16]
 8006c10:	f019 0908 	ands.w	r9, r9, #8
 8006c14:	d03e      	beq.n	8006c94 <http_recv+0x3f0>
        tag_check = 1;
 8006c16:	f04f 0901 	mov.w	r9, #1
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80c8 	beq.w	8006db4 <http_recv+0x510>
    if (tag_check) {
 8006c24:	f1b9 0f00 	cmp.w	r9, #0
 8006c28:	d162      	bne.n	8006cf0 <http_recv+0x44c>
    hs->handle = file;
 8006c2a:	f8c5 8014 	str.w	r8, [r5, #20]
    hs->file = file->data;
 8006c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c32:	61ab      	str	r3, [r5, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006c34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db72      	blt.n	8006d22 <http_recv+0x47e>
      hs->left = (u32_t)file->len;
 8006c3c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c40:	626b      	str	r3, [r5, #36]	; 0x24
    hs->retries = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8006c48:	696b      	ldr	r3, [r5, #20]
 8006c4a:	7c1b      	ldrb	r3, [r3, #16]
 8006c4c:	f013 0f01 	tst.w	r3, #1
 8006c50:	d06f      	beq.n	8006d32 <http_recv+0x48e>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8006c52:	9b02      	ldr	r3, [sp, #8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d17b      	bne.n	8006d50 <http_recv+0x4ac>
        if (hs->req != NULL) {
 8006c58:	6a28      	ldr	r0, [r5, #32]
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	f47f ae9e 	bne.w	800699c <http_recv+0xf8>
      pbuf_free(p);
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 ffff 	bl	8007c64 <pbuf_free>
      if (parsed == ERR_OK) {
 8006c66:	e6a3      	b.n	80069b0 <http_recv+0x10c>
      file = http_get_404_file(hs, &uri);
 8006c68:	a907      	add	r1, sp, #28
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	f7ff fab0 	bl	80061d0 <http_get_404_file>
    if (file != NULL) {
 8006c70:	4680      	mov	r8, r0
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d1ca      	bne.n	8006c0c <http_recv+0x368>
    file = http_get_404_file(hs, &uri);
 8006c76:	a907      	add	r1, sp, #28
 8006c78:	4628      	mov	r0, r5
 8006c7a:	f7ff faa9 	bl	80061d0 <http_get_404_file>
  if (file != NULL) {
 8006c7e:	4680      	mov	r8, r0
 8006c80:	2800      	cmp	r0, #0
 8006c82:	f040 8091 	bne.w	8006da8 <http_recv+0x504>
    hs->handle = NULL;
 8006c86:	2300      	movs	r3, #0
 8006c88:	616b      	str	r3, [r5, #20]
    hs->file = NULL;
 8006c8a:	61ab      	str	r3, [r5, #24]
    hs->left = 0;
 8006c8c:	626b      	str	r3, [r5, #36]	; 0x24
    hs->retries = 0;
 8006c8e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
 8006c92:	e7e1      	b.n	8006c58 <http_recv+0x3b4>
        tag_check = http_uri_is_ssi(file, uri);
 8006c94:	f8dd b01c 	ldr.w	fp, [sp, #28]
    char *param = (char *)strstr(uri, "?");
 8006c98:	213f      	movs	r1, #63	; 0x3f
 8006c9a:	4658      	mov	r0, fp
 8006c9c:	f007 fcb3 	bl	800e606 <strchr>
    if (param != NULL) {
 8006ca0:	9001      	str	r0, [sp, #4]
 8006ca2:	b108      	cbz	r0, 8006ca8 <http_recv+0x404>
      *param = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	7003      	strb	r3, [r0, #0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8006ca8:	212e      	movs	r1, #46	; 0x2e
 8006caa:	4658      	mov	r0, fp
 8006cac:	f007 fcab 	bl	800e606 <strchr>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	b148      	cbz	r0, 8006cc8 <http_recv+0x424>
 8006cb4:	f04f 0a2e 	mov.w	sl, #46	; 0x2e
 8006cb8:	469b      	mov	fp, r3
 8006cba:	4651      	mov	r1, sl
 8006cbc:	1c58      	adds	r0, r3, #1
 8006cbe:	f007 fca2 	bl	800e606 <strchr>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1f7      	bne.n	8006cb8 <http_recv+0x414>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006cc8:	f8df a114 	ldr.w	sl, [pc, #276]	; 8006de0 <http_recv+0x53c>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8006ccc:	f85a 1b04 	ldr.w	r1, [sl], #4
 8006cd0:	4658      	mov	r0, fp
 8006cd2:	f000 f971 	bl	8006fb8 <lwip_stricmp>
 8006cd6:	b140      	cbz	r0, 8006cea <http_recv+0x446>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8006cd8:	4b3a      	ldr	r3, [pc, #232]	; (8006dc4 <http_recv+0x520>)
 8006cda:	4553      	cmp	r3, sl
 8006cdc:	d1f6      	bne.n	8006ccc <http_recv+0x428>
    if (param != NULL) {
 8006cde:	9a01      	ldr	r2, [sp, #4]
 8006ce0:	2a00      	cmp	r2, #0
 8006ce2:	d09a      	beq.n	8006c1a <http_recv+0x376>
      *param = '?';
 8006ce4:	233f      	movs	r3, #63	; 0x3f
 8006ce6:	7013      	strb	r3, [r2, #0]
 8006ce8:	e797      	b.n	8006c1a <http_recv+0x376>
        tag_check = 1;
 8006cea:	f04f 0901 	mov.w	r9, #1
 8006cee:	e7f6      	b.n	8006cde <http_recv+0x43a>
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8006cf0:	20e8      	movs	r0, #232	; 0xe8
 8006cf2:	f000 fb8d 	bl	8007410 <mem_malloc>
  if (ret != NULL) {
 8006cf6:	4681      	mov	r9, r0
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d096      	beq.n	8006c2a <http_recv+0x386>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8006cfc:	22e8      	movs	r2, #232	; 0xe8
 8006cfe:	2100      	movs	r1, #0
 8006d00:	f007 fab1 	bl	800e266 <memset>
        ssi->parsed = file->data;
 8006d04:	f8d8 3000 	ldr.w	r3, [r8]
 8006d08:	f8c9 3000 	str.w	r3, [r9]
        ssi->parse_left = file->len;
 8006d0c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d10:	f8c9 3008 	str.w	r3, [r9, #8]
        ssi->tag_end = file->data;
 8006d14:	f8d8 3000 	ldr.w	r3, [r8]
 8006d18:	f8c9 3004 	str.w	r3, [r9, #4]
        hs->ssi = ssi;
 8006d1c:	f8c5 902c 	str.w	r9, [r5, #44]	; 0x2c
 8006d20:	e783      	b.n	8006c2a <http_recv+0x386>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8006d22:	4b29      	ldr	r3, [pc, #164]	; (8006dc8 <http_recv+0x524>)
 8006d24:	f640 1234 	movw	r2, #2356	; 0x934
 8006d28:	4928      	ldr	r1, [pc, #160]	; (8006dcc <http_recv+0x528>)
 8006d2a:	4829      	ldr	r0, [pc, #164]	; (8006dd0 <http_recv+0x52c>)
 8006d2c:	f007 fb38 	bl	800e3a0 <iprintf>
 8006d30:	e784      	b.n	8006c3c <http_recv+0x398>
    LWIP_ASSERT("HTTP headers not included in file system",
 8006d32:	4b25      	ldr	r3, [pc, #148]	; (8006dc8 <http_recv+0x524>)
 8006d34:	f640 1243 	movw	r2, #2371	; 0x943
 8006d38:	4926      	ldr	r1, [pc, #152]	; (8006dd4 <http_recv+0x530>)
 8006d3a:	4825      	ldr	r0, [pc, #148]	; (8006dd0 <http_recv+0x52c>)
 8006d3c:	f007 fb30 	bl	800e3a0 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8006d40:	9b02      	ldr	r3, [sp, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d088      	beq.n	8006c58 <http_recv+0x3b4>
 8006d46:	696b      	ldr	r3, [r5, #20]
 8006d48:	7c1b      	ldrb	r3, [r3, #16]
 8006d4a:	f013 0f01 	tst.w	r3, #1
 8006d4e:	d083      	beq.n	8006c58 <http_recv+0x3b4>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8006d50:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006d52:	4921      	ldr	r1, [pc, #132]	; (8006dd8 <http_recv+0x534>)
 8006d54:	69a8      	ldr	r0, [r5, #24]
 8006d56:	f000 f900 	bl	8006f5a <lwip_strnstr>
      if (file_start != NULL) {
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	f43f af7b 	beq.w	8006c58 <http_recv+0x3b4>
        int diff = file_start + 4 - hs->file;
 8006d62:	3304      	adds	r3, #4
 8006d64:	69aa      	ldr	r2, [r5, #24]
 8006d66:	1a9a      	subs	r2, r3, r2
        hs->file += diff;
 8006d68:	61ab      	str	r3, [r5, #24]
        hs->left -= (u32_t)diff;
 8006d6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	626b      	str	r3, [r5, #36]	; 0x24
 8006d70:	e772      	b.n	8006c58 <http_recv+0x3b4>
      } else if (parsed == ERR_ARG) {
 8006d72:	f117 0f10 	cmn.w	r7, #16
 8006d76:	f47f adb5 	bne.w	80068e4 <http_recv+0x40>
        http_close_conn(pcb, hs);
 8006d7a:	4629      	mov	r1, r5
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	f7ff fa85 	bl	800628c <http_close_conn>
 8006d82:	e5af      	b.n	80068e4 <http_recv+0x40>
      pbuf_free(p);
 8006d84:	4620      	mov	r0, r4
 8006d86:	f000 ff6d 	bl	8007c64 <pbuf_free>
      if (parsed == ERR_OK) {
 8006d8a:	e5ab      	b.n	80068e4 <http_recv+0x40>
      pbuf_free(p);
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 ff69 	bl	8007c64 <pbuf_free>
      } else if (parsed == ERR_ARG) {
 8006d92:	e7f2      	b.n	8006d7a <http_recv+0x4d6>
      pbuf_free(p);
 8006d94:	4620      	mov	r0, r4
 8006d96:	f000 ff65 	bl	8007c64 <pbuf_free>
      } else if (parsed == ERR_ARG) {
 8006d9a:	e5a3      	b.n	80068e4 <http_recv+0x40>
        if (hs->req != NULL) {
 8006d9c:	6a28      	ldr	r0, [r5, #32]
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	d0f8      	beq.n	8006d94 <http_recv+0x4f0>
    return ERR_USE;
 8006da2:	f06f 0707 	mvn.w	r7, #7
 8006da6:	e5f9      	b.n	800699c <http_recv+0xf8>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8006da8:	6803      	ldr	r3, [r0, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f47f af3d 	bne.w	8006c2a <http_recv+0x386>
 8006db0:	f04f 0900 	mov.w	r9, #0
 8006db4:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <http_recv+0x524>)
 8006db6:	f640 120b 	movw	r2, #2315	; 0x90b
 8006dba:	4908      	ldr	r1, [pc, #32]	; (8006ddc <http_recv+0x538>)
 8006dbc:	4804      	ldr	r0, [pc, #16]	; (8006dd0 <http_recv+0x52c>)
 8006dbe:	f007 faef 	bl	800e3a0 <iprintf>
 8006dc2:	e72f      	b.n	8006c24 <http_recv+0x380>
 8006dc4:	0801099c 	.word	0x0801099c
 8006dc8:	080106e4 	.word	0x080106e4
 8006dcc:	08010804 	.word	0x08010804
 8006dd0:	0800f6b8 	.word	0x0800f6b8
 8006dd4:	08010824 	.word	0x08010824
 8006dd8:	080107e8 	.word	0x080107e8
 8006ddc:	080107f0 	.word	0x080107f0
 8006de0:	08010988 	.word	0x08010988

08006de4 <http_err>:
  if (hs != NULL) {
 8006de4:	b138      	cbz	r0, 8006df6 <http_err+0x12>
{
 8006de6:	b510      	push	{r4, lr}
 8006de8:	4604      	mov	r4, r0
    http_state_eof(hs);
 8006dea:	f7ff f9db 	bl	80061a4 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 f952 	bl	8007098 <mem_free>
}
 8006df4:	bd10      	pop	{r4, pc}
 8006df6:	4770      	bx	lr

08006df8 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8006df8:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8006dfa:	202e      	movs	r0, #46	; 0x2e
 8006dfc:	f001 ff64 	bl	8008cc8 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006e00:	b1a0      	cbz	r0, 8006e2c <httpd_init+0x34>
 8006e02:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8006e04:	2101      	movs	r1, #1
 8006e06:	f001 fc05 	bl	8008614 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8006e0a:	2250      	movs	r2, #80	; 0x50
 8006e0c:	4913      	ldr	r1, [pc, #76]	; (8006e5c <httpd_init+0x64>)
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f001 fa9e 	bl	8008350 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006e14:	b990      	cbnz	r0, 8006e3c <httpd_init+0x44>
    pcb = altcp_listen(pcb);
 8006e16:	21ff      	movs	r1, #255	; 0xff
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f001 fb67 	bl	80084ec <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006e1e:	4604      	mov	r4, r0
 8006e20:	b1a0      	cbz	r0, 8006e4c <httpd_init+0x54>
    altcp_accept(pcb, http_accept);
 8006e22:	490f      	ldr	r1, [pc, #60]	; (8006e60 <httpd_init+0x68>)
 8006e24:	4620      	mov	r0, r4
 8006e26:	f001 fc7d 	bl	8008724 <tcp_accept>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
}
 8006e2a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8006e2c:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <httpd_init+0x6c>)
 8006e2e:	f640 2272 	movw	r2, #2674	; 0xa72
 8006e32:	490d      	ldr	r1, [pc, #52]	; (8006e68 <httpd_init+0x70>)
 8006e34:	480d      	ldr	r0, [pc, #52]	; (8006e6c <httpd_init+0x74>)
 8006e36:	f007 fab3 	bl	800e3a0 <iprintf>
  if (pcb) {
 8006e3a:	e7f6      	b.n	8006e2a <httpd_init+0x32>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <httpd_init+0x6c>)
 8006e3e:	f640 2257 	movw	r2, #2647	; 0xa57
 8006e42:	490b      	ldr	r1, [pc, #44]	; (8006e70 <httpd_init+0x78>)
 8006e44:	4809      	ldr	r0, [pc, #36]	; (8006e6c <httpd_init+0x74>)
 8006e46:	f007 faab 	bl	800e3a0 <iprintf>
 8006e4a:	e7e4      	b.n	8006e16 <httpd_init+0x1e>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <httpd_init+0x6c>)
 8006e4e:	f640 2259 	movw	r2, #2649	; 0xa59
 8006e52:	4908      	ldr	r1, [pc, #32]	; (8006e74 <httpd_init+0x7c>)
 8006e54:	4805      	ldr	r0, [pc, #20]	; (8006e6c <httpd_init+0x74>)
 8006e56:	f007 faa3 	bl	800e3a0 <iprintf>
 8006e5a:	e7e2      	b.n	8006e22 <httpd_init+0x2a>
 8006e5c:	0801281c 	.word	0x0801281c
 8006e60:	08006215 	.word	0x08006215
 8006e64:	080106e4 	.word	0x080106e4
 8006e68:	08010850 	.word	0x08010850
 8006e6c:	0800f6b8 	.word	0x0800f6b8
 8006e70:	0801086c 	.word	0x0801086c
 8006e74:	08010888 	.word	0x08010888

08006e78 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	4614      	mov	r4, r2
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8006e7e:	4606      	mov	r6, r0
 8006e80:	b148      	cbz	r0, 8006e96 <http_set_ssi_handler+0x1e>
  httpd_ssi_handler = ssi_handler;
 8006e82:	4b11      	ldr	r3, [pc, #68]	; (8006ec8 <http_set_ssi_handler+0x50>)
 8006e84:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8006e86:	b175      	cbz	r5, 8006ea6 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8006e88:	2c00      	cmp	r4, #0
 8006e8a:	dd14      	ble.n	8006eb6 <http_set_ssi_handler+0x3e>

  httpd_tags = tags;
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <http_set_ssi_handler+0x54>)
 8006e8e:	601d      	str	r5, [r3, #0]
  httpd_num_tags = num_tags;
 8006e90:	4b0f      	ldr	r3, [pc, #60]	; (8006ed0 <http_set_ssi_handler+0x58>)
 8006e92:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8006e96:	4b0f      	ldr	r3, [pc, #60]	; (8006ed4 <http_set_ssi_handler+0x5c>)
 8006e98:	f640 2297 	movw	r2, #2711	; 0xa97
 8006e9c:	490e      	ldr	r1, [pc, #56]	; (8006ed8 <http_set_ssi_handler+0x60>)
 8006e9e:	480f      	ldr	r0, [pc, #60]	; (8006edc <http_set_ssi_handler+0x64>)
 8006ea0:	f007 fa7e 	bl	800e3a0 <iprintf>
 8006ea4:	e7ed      	b.n	8006e82 <http_set_ssi_handler+0xa>
  LWIP_ASSERT("no tags given", tags != NULL);
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <http_set_ssi_handler+0x5c>)
 8006ea8:	f640 229e 	movw	r2, #2718	; 0xa9e
 8006eac:	490c      	ldr	r1, [pc, #48]	; (8006ee0 <http_set_ssi_handler+0x68>)
 8006eae:	480b      	ldr	r0, [pc, #44]	; (8006edc <http_set_ssi_handler+0x64>)
 8006eb0:	f007 fa76 	bl	800e3a0 <iprintf>
 8006eb4:	e7e8      	b.n	8006e88 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <http_set_ssi_handler+0x5c>)
 8006eb8:	f640 229f 	movw	r2, #2719	; 0xa9f
 8006ebc:	4909      	ldr	r1, [pc, #36]	; (8006ee4 <http_set_ssi_handler+0x6c>)
 8006ebe:	4807      	ldr	r0, [pc, #28]	; (8006edc <http_set_ssi_handler+0x64>)
 8006ec0:	f007 fa6e 	bl	800e3a0 <iprintf>
 8006ec4:	e7e2      	b.n	8006e8c <http_set_ssi_handler+0x14>
 8006ec6:	bf00      	nop
 8006ec8:	2000b348 	.word	0x2000b348
 8006ecc:	2000b34c 	.word	0x2000b34c
 8006ed0:	2000af44 	.word	0x2000af44
 8006ed4:	080106e4 	.word	0x080106e4
 8006ed8:	080108a8 	.word	0x080108a8
 8006edc:	0800f6b8 	.word	0x0800f6b8
 8006ee0:	080108c0 	.word	0x080108c0
 8006ee4:	080108d0 	.word	0x080108d0

08006ee8 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	460c      	mov	r4, r1
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006eec:	4605      	mov	r5, r0
 8006eee:	b130      	cbz	r0, 8006efe <http_set_cgi_handlers+0x16>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	dd0c      	ble.n	8006f0e <http_set_cgi_handlers+0x26>

  httpd_cgis = cgis;
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	; (8006f20 <http_set_cgi_handlers+0x38>)
 8006ef6:	601d      	str	r5, [r3, #0]
  httpd_num_cgis = num_handlers;
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <http_set_cgi_handlers+0x3c>)
 8006efa:	601c      	str	r4, [r3, #0]
}
 8006efc:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("no cgis given", cgis != NULL);
 8006efe:	4b0a      	ldr	r3, [pc, #40]	; (8006f28 <http_set_cgi_handlers+0x40>)
 8006f00:	f640 22b2 	movw	r2, #2738	; 0xab2
 8006f04:	4909      	ldr	r1, [pc, #36]	; (8006f2c <http_set_cgi_handlers+0x44>)
 8006f06:	480a      	ldr	r0, [pc, #40]	; (8006f30 <http_set_cgi_handlers+0x48>)
 8006f08:	f007 fa4a 	bl	800e3a0 <iprintf>
 8006f0c:	e7f0      	b.n	8006ef0 <http_set_cgi_handlers+0x8>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <http_set_cgi_handlers+0x40>)
 8006f10:	f640 22b3 	movw	r2, #2739	; 0xab3
 8006f14:	4907      	ldr	r1, [pc, #28]	; (8006f34 <http_set_cgi_handlers+0x4c>)
 8006f16:	4806      	ldr	r0, [pc, #24]	; (8006f30 <http_set_cgi_handlers+0x48>)
 8006f18:	f007 fa42 	bl	800e3a0 <iprintf>
 8006f1c:	e7ea      	b.n	8006ef4 <http_set_cgi_handlers+0xc>
 8006f1e:	bf00      	nop
 8006f20:	2000af3c 	.word	0x2000af3c
 8006f24:	2000af40 	.word	0x2000af40
 8006f28:	080106e4 	.word	0x080106e4
 8006f2c:	080108e8 	.word	0x080108e8
 8006f30:	0800f6b8 	.word	0x0800f6b8
 8006f34:	080108f8 	.word	0x080108f8

08006f38 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8006f38:	0a03      	lsrs	r3, r0, #8
 8006f3a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 8006f3e:	b280      	uxth	r0, r0
 8006f40:	4770      	bx	lr

08006f42 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8006f42:	0e03      	lsrs	r3, r0, #24
 8006f44:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8006f48:	0202      	lsls	r2, r0, #8
 8006f4a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	0a00      	lsrs	r0, r0, #8
 8006f52:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 8006f56:	4318      	orrs	r0, r3
 8006f58:	4770      	bx	lr

08006f5a <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8006f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	4604      	mov	r4, r0
 8006f60:	460f      	mov	r7, r1
 8006f62:	4615      	mov	r5, r2
  const char *p;
  size_t tokenlen = strlen(token);
 8006f64:	4608      	mov	r0, r1
 8006f66:	f7f9 f94d 	bl	8000204 <strlen>
  if (tokenlen == 0) {
 8006f6a:	b1e0      	cbz	r0, 8006fa6 <lwip_strnstr+0x4c>
 8006f6c:	4680      	mov	r8, r0
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006f6e:	7823      	ldrb	r3, [r4, #0]
 8006f70:	b1e3      	cbz	r3, 8006fac <lwip_strnstr+0x52>
 8006f72:	4425      	add	r5, r4
 8006f74:	1822      	adds	r2, r4, r0
 8006f76:	4295      	cmp	r5, r2
 8006f78:	d31a      	bcc.n	8006fb0 <lwip_strnstr+0x56>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006f7a:	783e      	ldrb	r6, [r7, #0]
 8006f7c:	e006      	b.n	8006f8c <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8006f7e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006f82:	b1bb      	cbz	r3, 8006fb4 <lwip_strnstr+0x5a>
 8006f84:	eb04 0208 	add.w	r2, r4, r8
 8006f88:	4295      	cmp	r5, r2
 8006f8a:	d30a      	bcc.n	8006fa2 <lwip_strnstr+0x48>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8006f8c:	429e      	cmp	r6, r3
 8006f8e:	d1f6      	bne.n	8006f7e <lwip_strnstr+0x24>
 8006f90:	4642      	mov	r2, r8
 8006f92:	4639      	mov	r1, r7
 8006f94:	4620      	mov	r0, r4
 8006f96:	f007 fb4b 	bl	800e630 <strncmp>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d1ef      	bne.n	8006f7e <lwip_strnstr+0x24>
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	e002      	b.n	8006fa8 <lwip_strnstr+0x4e>
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e000      	b.n	8006fa8 <lwip_strnstr+0x4e>
    return LWIP_CONST_CAST(char *, buffer);
 8006fa6:	4620      	mov	r0, r4
}
 8006fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8006fac:	2000      	movs	r0, #0
 8006fae:	e7fb      	b.n	8006fa8 <lwip_strnstr+0x4e>
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e7f9      	b.n	8006fa8 <lwip_strnstr+0x4e>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e7f7      	b.n	8006fa8 <lwip_strnstr+0x4e>

08006fb8 <lwip_stricmp>:
 * lwIP default implementation for stricmp() non-standard function.
 * This can be \#defined to stricmp() depending on your platform port.
 */
int
lwip_stricmp(const char *str1, const char *str2)
{
 8006fb8:	e007      	b.n	8006fca <lwip_stricmp+0x12>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
  return 0;
 8006fba:	2000      	movs	r0, #0
 8006fbc:	e000      	b.n	8006fc0 <lwip_stricmp+0x8>
        return 1;
 8006fbe:	2001      	movs	r0, #1
}
 8006fc0:	f85d fb04 	ldr.w	pc, [sp], #4
          return 1;
 8006fc4:	2001      	movs	r0, #1
 8006fc6:	e7fb      	b.n	8006fc0 <lwip_stricmp+0x8>
  } while (c1 != 0);
 8006fc8:	b1e2      	cbz	r2, 8007004 <lwip_stricmp+0x4c>
    c1 = *str1++;
 8006fca:	f810 2b01 	ldrb.w	r2, [r0], #1
    c2 = *str2++;
 8006fce:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d0f8      	beq.n	8006fc8 <lwip_stricmp+0x10>
{
 8006fd6:	b500      	push	{lr}
      char c1_upc = c1 | 0x20;
 8006fd8:	f042 0e20 	orr.w	lr, r2, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8006fdc:	f1ae 0c61 	sub.w	ip, lr, #97	; 0x61
 8006fe0:	fa5f fc8c 	uxtb.w	ip, ip
 8006fe4:	f1bc 0f19 	cmp.w	ip, #25
 8006fe8:	d8e9      	bhi.n	8006fbe <lwip_stricmp+0x6>
        if (c1_upc != c2_upc) {
 8006fea:	f043 0320 	orr.w	r3, r3, #32
 8006fee:	459e      	cmp	lr, r3
 8006ff0:	d1e8      	bne.n	8006fc4 <lwip_stricmp+0xc>
  } while (c1 != 0);
 8006ff2:	2a00      	cmp	r2, #0
 8006ff4:	d0e1      	beq.n	8006fba <lwip_stricmp+0x2>
    c1 = *str1++;
 8006ff6:	f810 2b01 	ldrb.w	r2, [r0], #1
    c2 = *str2++;
 8006ffa:	f811 3b01 	ldrb.w	r3, [r1], #1
    if (c1 != c2) {
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d1ea      	bne.n	8006fd8 <lwip_stricmp+0x20>
 8007002:	e7f6      	b.n	8006ff2 <lwip_stricmp+0x3a>
  return 0;
 8007004:	2000      	movs	r0, #0
}
 8007006:	4770      	bx	lr

08007008 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8007008:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800700a:	f006 ff8b 	bl	800df24 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800700e:	f000 f80b 	bl	8007028 <mem_init>
  memp_init();
 8007012:	f000 fb11 	bl	8007638 <memp_init>
  pbuf_init();
  netif_init();
 8007016:	f000 fbdd 	bl	80077d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800701a:	f005 fa39 	bl	800c490 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800701e:	f001 f973 	bl	8008308 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8007022:	f005 f9d7 	bl	800c3d4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8007026:	bd08      	pop	{r3, pc}

08007028 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8007028:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800702a:	4b13      	ldr	r3, [pc, #76]	; (8007078 <mem_init+0x50>)
 800702c:	f023 0303 	bic.w	r3, r3, #3
 8007030:	4a12      	ldr	r2, [pc, #72]	; (800707c <mem_init+0x54>)
 8007032:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8007034:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 8007038:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 800703a:	2200      	movs	r2, #0
 800703c:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800703e:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 8007040:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007042:	4a0f      	ldr	r2, [pc, #60]	; (8007080 <mem_init+0x58>)
 8007044:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 8007046:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 800704a:	2001      	movs	r0, #1
 800704c:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 8007050:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 8007054:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8007058:	4a0a      	ldr	r2, [pc, #40]	; (8007084 <mem_init+0x5c>)
 800705a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800705c:	480a      	ldr	r0, [pc, #40]	; (8007088 <mem_init+0x60>)
 800705e:	f006 ff6b 	bl	800df38 <sys_mutex_new>
 8007062:	b900      	cbnz	r0, 8007066 <mem_init+0x3e>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007064:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007066:	4b09      	ldr	r3, [pc, #36]	; (800708c <mem_init+0x64>)
 8007068:	f240 221f 	movw	r2, #543	; 0x21f
 800706c:	4908      	ldr	r1, [pc, #32]	; (8007090 <mem_init+0x68>)
 800706e:	4809      	ldr	r0, [pc, #36]	; (8007094 <mem_init+0x6c>)
 8007070:	f007 f996 	bl	800e3a0 <iprintf>
}
 8007074:	e7f6      	b.n	8007064 <mem_init+0x3c>
 8007076:	bf00      	nop
 8007078:	2000b37b 	.word	0x2000b37b
 800707c:	2000b370 	.word	0x2000b370
 8007080:	2000b374 	.word	0x2000b374
 8007084:	2000b368 	.word	0x2000b368
 8007088:	2000b36c 	.word	0x2000b36c
 800708c:	080109d4 	.word	0x080109d4
 8007090:	08010a04 	.word	0x08010a04
 8007094:	0800f6b8 	.word	0x0800f6b8

08007098 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007098:	2800      	cmp	r0, #0
 800709a:	f000 80da 	beq.w	8007252 <mem_free+0x1ba>
{
 800709e:	b538      	push	{r3, r4, r5, lr}
 80070a0:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80070a2:	f010 0f03 	tst.w	r0, #3
 80070a6:	d117      	bne.n	80070d8 <mem_free+0x40>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80070a8:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80070ac:	4b69      	ldr	r3, [pc, #420]	; (8007254 <mem_free+0x1bc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	42ab      	cmp	r3, r5
 80070b2:	d805      	bhi.n	80070c0 <mem_free+0x28>
 80070b4:	f100 030c 	add.w	r3, r0, #12
 80070b8:	4a67      	ldr	r2, [pc, #412]	; (8007258 <mem_free+0x1c0>)
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d217      	bcs.n	80070f0 <mem_free+0x58>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80070c0:	4b66      	ldr	r3, [pc, #408]	; (800725c <mem_free+0x1c4>)
 80070c2:	f240 227f 	movw	r2, #639	; 0x27f
 80070c6:	4966      	ldr	r1, [pc, #408]	; (8007260 <mem_free+0x1c8>)
 80070c8:	4866      	ldr	r0, [pc, #408]	; (8007264 <mem_free+0x1cc>)
 80070ca:	f007 f969 	bl	800e3a0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80070ce:	f006 ff61 	bl	800df94 <sys_arch_protect>
 80070d2:	f006 ff6b 	bl	800dfac <sys_arch_unprotect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80070d6:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80070d8:	4b60      	ldr	r3, [pc, #384]	; (800725c <mem_free+0x1c4>)
 80070da:	f240 2273 	movw	r2, #627	; 0x273
 80070de:	4962      	ldr	r1, [pc, #392]	; (8007268 <mem_free+0x1d0>)
 80070e0:	4860      	ldr	r0, [pc, #384]	; (8007264 <mem_free+0x1cc>)
 80070e2:	f007 f95d 	bl	800e3a0 <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 80070e6:	f006 ff55 	bl	800df94 <sys_arch_protect>
 80070ea:	f006 ff5f 	bl	800dfac <sys_arch_unprotect>
    return;
 80070ee:	e7f2      	b.n	80070d6 <mem_free+0x3e>
  LWIP_MEM_FREE_PROTECT();
 80070f0:	485e      	ldr	r0, [pc, #376]	; (800726c <mem_free+0x1d4>)
 80070f2:	f006 ff2c 	bl	800df4e <sys_mutex_lock>
  if (!mem->used) {
 80070f6:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d062      	beq.n	80071c4 <mem_free+0x12c>
  nmem = ptr_to_mem(mem->next);
 80070fe:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007102:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007106:	f200 8095 	bhi.w	8007234 <mem_free+0x19c>
  pmem = ptr_to_mem(mem->prev);
 800710a:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800710e:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8007112:	f200 808f 	bhi.w	8007234 <mem_free+0x19c>
  return (mem_size_t)((u8_t *)mem - ram);
 8007116:	4a4f      	ldr	r2, [pc, #316]	; (8007254 <mem_free+0x1bc>)
 8007118:	6812      	ldr	r2, [r2, #0]
 800711a:	1aa9      	subs	r1, r5, r2
 800711c:	b289      	uxth	r1, r1
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800711e:	4288      	cmp	r0, r1
 8007120:	d003      	beq.n	800712a <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007122:	5a10      	ldrh	r0, [r2, r0]
 8007124:	4288      	cmp	r0, r1
 8007126:	f040 8085 	bne.w	8007234 <mem_free+0x19c>
  return (struct mem *)(void *)&ram[ptr];
 800712a:	4413      	add	r3, r2
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800712c:	484a      	ldr	r0, [pc, #296]	; (8007258 <mem_free+0x1c0>)
 800712e:	6800      	ldr	r0, [r0, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007130:	4298      	cmp	r0, r3
 8007132:	d002      	beq.n	800713a <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007134:	885b      	ldrh	r3, [r3, #2]
 8007136:	428b      	cmp	r3, r1
 8007138:	d17c      	bne.n	8007234 <mem_free+0x19c>
  mem->used = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007140:	4b4b      	ldr	r3, [pc, #300]	; (8007270 <mem_free+0x1d8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	42ab      	cmp	r3, r5
 8007146:	d901      	bls.n	800714c <mem_free+0xb4>
    lfree = mem;
 8007148:	4b49      	ldr	r3, [pc, #292]	; (8007270 <mem_free+0x1d8>)
 800714a:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800714c:	4295      	cmp	r5, r2
 800714e:	d348      	bcc.n	80071e2 <mem_free+0x14a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007150:	4285      	cmp	r5, r0
 8007152:	d251      	bcs.n	80071f8 <mem_free+0x160>
  return (struct mem *)(void *)&ram[ptr];
 8007154:	4b3f      	ldr	r3, [pc, #252]	; (8007254 <mem_free+0x1bc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800715c:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800715e:	4295      	cmp	r5, r2
 8007160:	d015      	beq.n	800718e <mem_free+0xf6>
 8007162:	7910      	ldrb	r0, [r2, #4]
 8007164:	b998      	cbnz	r0, 800718e <mem_free+0xf6>
 8007166:	483c      	ldr	r0, [pc, #240]	; (8007258 <mem_free+0x1c0>)
 8007168:	6800      	ldr	r0, [r0, #0]
 800716a:	4290      	cmp	r0, r2
 800716c:	d00f      	beq.n	800718e <mem_free+0xf6>
    if (lfree == nmem) {
 800716e:	4840      	ldr	r0, [pc, #256]	; (8007270 <mem_free+0x1d8>)
 8007170:	6800      	ldr	r0, [r0, #0]
 8007172:	4290      	cmp	r0, r2
      lfree = mem;
 8007174:	bf04      	itt	eq
 8007176:	4a3e      	ldreq	r2, [pc, #248]	; (8007270 <mem_free+0x1d8>)
 8007178:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 800717a:	5a5a      	ldrh	r2, [r3, r1]
 800717c:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007180:	5a5a      	ldrh	r2, [r3, r1]
 8007182:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007186:	d002      	beq.n	800718e <mem_free+0xf6>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007188:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 800718a:	1ae9      	subs	r1, r5, r3
 800718c:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 800718e:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007192:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007194:	4295      	cmp	r5, r2
 8007196:	d011      	beq.n	80071bc <mem_free+0x124>
 8007198:	7910      	ldrb	r0, [r2, #4]
 800719a:	b978      	cbnz	r0, 80071bc <mem_free+0x124>
    if (lfree == mem) {
 800719c:	4834      	ldr	r0, [pc, #208]	; (8007270 <mem_free+0x1d8>)
 800719e:	6800      	ldr	r0, [r0, #0]
 80071a0:	4285      	cmp	r5, r0
      lfree = pmem;
 80071a2:	bf04      	itt	eq
 80071a4:	4832      	ldreq	r0, [pc, #200]	; (8007270 <mem_free+0x1d8>)
 80071a6:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 80071a8:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80071ac:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80071ae:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 80071b2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80071b6:	bf1c      	itt	ne
 80071b8:	189b      	addne	r3, r3, r2
 80071ba:	8059      	strhne	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80071bc:	482b      	ldr	r0, [pc, #172]	; (800726c <mem_free+0x1d4>)
 80071be:	f006 fecd 	bl	800df5c <sys_mutex_unlock>
 80071c2:	e788      	b.n	80070d6 <mem_free+0x3e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80071c4:	4b25      	ldr	r3, [pc, #148]	; (800725c <mem_free+0x1c4>)
 80071c6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80071ca:	492a      	ldr	r1, [pc, #168]	; (8007274 <mem_free+0x1dc>)
 80071cc:	4825      	ldr	r0, [pc, #148]	; (8007264 <mem_free+0x1cc>)
 80071ce:	f007 f8e7 	bl	800e3a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80071d2:	4826      	ldr	r0, [pc, #152]	; (800726c <mem_free+0x1d4>)
 80071d4:	f006 fec2 	bl	800df5c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 80071d8:	f006 fedc 	bl	800df94 <sys_arch_protect>
 80071dc:	f006 fee6 	bl	800dfac <sys_arch_unprotect>
    return;
 80071e0:	e779      	b.n	80070d6 <mem_free+0x3e>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80071e2:	4b1e      	ldr	r3, [pc, #120]	; (800725c <mem_free+0x1c4>)
 80071e4:	f240 12df 	movw	r2, #479	; 0x1df
 80071e8:	4923      	ldr	r1, [pc, #140]	; (8007278 <mem_free+0x1e0>)
 80071ea:	481e      	ldr	r0, [pc, #120]	; (8007264 <mem_free+0x1cc>)
 80071ec:	f007 f8d8 	bl	800e3a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80071f0:	4b19      	ldr	r3, [pc, #100]	; (8007258 <mem_free+0x1c0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	429d      	cmp	r5, r3
 80071f6:	d306      	bcc.n	8007206 <mem_free+0x16e>
 80071f8:	4b18      	ldr	r3, [pc, #96]	; (800725c <mem_free+0x1c4>)
 80071fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80071fe:	491f      	ldr	r1, [pc, #124]	; (800727c <mem_free+0x1e4>)
 8007200:	4818      	ldr	r0, [pc, #96]	; (8007264 <mem_free+0x1cc>)
 8007202:	f007 f8cd 	bl	800e3a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007206:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800720a:	b133      	cbz	r3, 800721a <mem_free+0x182>
 800720c:	4b13      	ldr	r3, [pc, #76]	; (800725c <mem_free+0x1c4>)
 800720e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007212:	491b      	ldr	r1, [pc, #108]	; (8007280 <mem_free+0x1e8>)
 8007214:	4813      	ldr	r0, [pc, #76]	; (8007264 <mem_free+0x1cc>)
 8007216:	f007 f8c3 	bl	800e3a0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800721a:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 800721e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007222:	d997      	bls.n	8007154 <mem_free+0xbc>
 8007224:	4b0d      	ldr	r3, [pc, #52]	; (800725c <mem_free+0x1c4>)
 8007226:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800722a:	4916      	ldr	r1, [pc, #88]	; (8007284 <mem_free+0x1ec>)
 800722c:	480d      	ldr	r0, [pc, #52]	; (8007264 <mem_free+0x1cc>)
 800722e:	f007 f8b7 	bl	800e3a0 <iprintf>
 8007232:	e78f      	b.n	8007154 <mem_free+0xbc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007234:	4b09      	ldr	r3, [pc, #36]	; (800725c <mem_free+0x1c4>)
 8007236:	f240 2295 	movw	r2, #661	; 0x295
 800723a:	4913      	ldr	r1, [pc, #76]	; (8007288 <mem_free+0x1f0>)
 800723c:	4809      	ldr	r0, [pc, #36]	; (8007264 <mem_free+0x1cc>)
 800723e:	f007 f8af 	bl	800e3a0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007242:	480a      	ldr	r0, [pc, #40]	; (800726c <mem_free+0x1d4>)
 8007244:	f006 fe8a 	bl	800df5c <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007248:	f006 fea4 	bl	800df94 <sys_arch_protect>
 800724c:	f006 feae 	bl	800dfac <sys_arch_unprotect>
    return;
 8007250:	e741      	b.n	80070d6 <mem_free+0x3e>
 8007252:	4770      	bx	lr
 8007254:	2000b370 	.word	0x2000b370
 8007258:	2000b374 	.word	0x2000b374
 800725c:	080109d4 	.word	0x080109d4
 8007260:	08010a44 	.word	0x08010a44
 8007264:	0800f6b8 	.word	0x0800f6b8
 8007268:	08010a20 	.word	0x08010a20
 800726c:	2000b36c 	.word	0x2000b36c
 8007270:	2000b368 	.word	0x2000b368
 8007274:	08010a60 	.word	0x08010a60
 8007278:	08010a88 	.word	0x08010a88
 800727c:	08010aa0 	.word	0x08010aa0
 8007280:	08010abc 	.word	0x08010abc
 8007284:	08010ad8 	.word	0x08010ad8
 8007288:	08010b04 	.word	0x08010b04

0800728c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007290:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007292:	1ccc      	adds	r4, r1, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 800729a:	2c0b      	cmp	r4, #11
 800729c:	d904      	bls.n	80072a8 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800729e:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 80072a2:	d902      	bls.n	80072aa <mem_trim+0x1e>
    return NULL;
 80072a4:	2000      	movs	r0, #0
 80072a6:	e01f      	b.n	80072e8 <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 80072a8:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80072aa:	42a1      	cmp	r1, r4
 80072ac:	f200 809a 	bhi.w	80073e4 <mem_trim+0x158>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80072b0:	4b4e      	ldr	r3, [pc, #312]	; (80073ec <mem_trim+0x160>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	42ab      	cmp	r3, r5
 80072b6:	d803      	bhi.n	80072c0 <mem_trim+0x34>
 80072b8:	4a4d      	ldr	r2, [pc, #308]	; (80073f0 <mem_trim+0x164>)
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	42aa      	cmp	r2, r5
 80072be:	d815      	bhi.n	80072ec <mem_trim+0x60>
 80072c0:	4b4c      	ldr	r3, [pc, #304]	; (80073f4 <mem_trim+0x168>)
 80072c2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80072c6:	494c      	ldr	r1, [pc, #304]	; (80073f8 <mem_trim+0x16c>)
 80072c8:	484c      	ldr	r0, [pc, #304]	; (80073fc <mem_trim+0x170>)
 80072ca:	f007 f869 	bl	800e3a0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80072ce:	4b47      	ldr	r3, [pc, #284]	; (80073ec <mem_trim+0x160>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	42ab      	cmp	r3, r5
 80072d4:	d803      	bhi.n	80072de <mem_trim+0x52>
 80072d6:	4a46      	ldr	r2, [pc, #280]	; (80073f0 <mem_trim+0x164>)
 80072d8:	6812      	ldr	r2, [r2, #0]
 80072da:	42aa      	cmp	r2, r5
 80072dc:	d806      	bhi.n	80072ec <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80072de:	f006 fe59 	bl	800df94 <sys_arch_protect>
 80072e2:	f006 fe63 	bl	800dfac <sys_arch_unprotect>
    return rmem;
 80072e6:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80072ec:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 80072f0:	1afb      	subs	r3, r7, r3
 80072f2:	b29f      	uxth	r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80072f4:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 80072f8:	3e08      	subs	r6, #8
 80072fa:	1bf6      	subs	r6, r6, r7
 80072fc:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d32f      	bcc.n	8007362 <mem_trim+0xd6>
  if (newsize == size) {
 8007302:	42a6      	cmp	r6, r4
 8007304:	d070      	beq.n	80073e8 <mem_trim+0x15c>
  LWIP_MEM_FREE_PROTECT();
 8007306:	483e      	ldr	r0, [pc, #248]	; (8007400 <mem_trim+0x174>)
 8007308:	f006 fe21 	bl	800df4e <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 800730c:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007310:	4b36      	ldr	r3, [pc, #216]	; (80073ec <mem_trim+0x160>)
 8007312:	f8d3 a000 	ldr.w	sl, [r3]
 8007316:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 800731a:	f899 3004 	ldrb.w	r3, [r9, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d136      	bne.n	8007390 <mem_trim+0x104>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007322:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007326:	d025      	beq.n	8007374 <mem_trim+0xe8>
    next = mem2->next;
 8007328:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800732c:	3408      	adds	r4, #8
 800732e:	443c      	add	r4, r7
 8007330:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007332:	4b34      	ldr	r3, [pc, #208]	; (8007404 <mem_trim+0x178>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	454b      	cmp	r3, r9
 8007338:	d024      	beq.n	8007384 <mem_trim+0xf8>
  return (struct mem *)(void *)&ram[ptr];
 800733a:	4b2c      	ldr	r3, [pc, #176]	; (80073ec <mem_trim+0x160>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 8007340:	2000      	movs	r0, #0
 8007342:	7110      	strb	r0, [r2, #4]
    mem2->next = next;
 8007344:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007346:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007348:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800734c:	5b1a      	ldrh	r2, [r3, r4]
 800734e:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007352:	d001      	beq.n	8007358 <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007354:	4413      	add	r3, r2
 8007356:	805c      	strh	r4, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007358:	4829      	ldr	r0, [pc, #164]	; (8007400 <mem_trim+0x174>)
 800735a:	f006 fdff 	bl	800df5c <sys_mutex_unlock>
  return rmem;
 800735e:	4628      	mov	r0, r5
 8007360:	e7c2      	b.n	80072e8 <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007362:	4b24      	ldr	r3, [pc, #144]	; (80073f4 <mem_trim+0x168>)
 8007364:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007368:	4927      	ldr	r1, [pc, #156]	; (8007408 <mem_trim+0x17c>)
 800736a:	4824      	ldr	r0, [pc, #144]	; (80073fc <mem_trim+0x170>)
 800736c:	f007 f818 	bl	800e3a0 <iprintf>
    return NULL;
 8007370:	2000      	movs	r0, #0
 8007372:	e7b9      	b.n	80072e8 <mem_trim+0x5c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007374:	4b1f      	ldr	r3, [pc, #124]	; (80073f4 <mem_trim+0x168>)
 8007376:	f240 22f5 	movw	r2, #757	; 0x2f5
 800737a:	4924      	ldr	r1, [pc, #144]	; (800740c <mem_trim+0x180>)
 800737c:	481f      	ldr	r0, [pc, #124]	; (80073fc <mem_trim+0x170>)
 800737e:	f007 f80f 	bl	800e3a0 <iprintf>
 8007382:	e7d1      	b.n	8007328 <mem_trim+0x9c>
  return (struct mem *)(void *)&ram[ptr];
 8007384:	4b19      	ldr	r3, [pc, #100]	; (80073ec <mem_trim+0x160>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 800738a:	4a1e      	ldr	r2, [pc, #120]	; (8007404 <mem_trim+0x178>)
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	e7d4      	b.n	800733a <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007390:	f104 0314 	add.w	r3, r4, #20
 8007394:	42b3      	cmp	r3, r6
 8007396:	d8df      	bhi.n	8007358 <mem_trim+0xcc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007398:	3408      	adds	r4, #8
 800739a:	443c      	add	r4, r7
 800739c:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800739e:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 80073a2:	d017      	beq.n	80073d4 <mem_trim+0x148>
  return (struct mem *)(void *)&ram[ptr];
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <mem_trim+0x160>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 80073aa:	4916      	ldr	r1, [pc, #88]	; (8007404 <mem_trim+0x178>)
 80073ac:	6809      	ldr	r1, [r1, #0]
 80073ae:	4291      	cmp	r1, r2
      lfree = mem2;
 80073b0:	bf84      	itt	hi
 80073b2:	4914      	ldrhi	r1, [pc, #80]	; (8007404 <mem_trim+0x178>)
 80073b4:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 80073b6:	2100      	movs	r1, #0
 80073b8:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 80073ba:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 80073be:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 80073c0:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 80073c2:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80073c6:	5b1a      	ldrh	r2, [r3, r4]
 80073c8:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 80073cc:	bf1c      	itt	ne
 80073ce:	189b      	addne	r3, r3, r2
 80073d0:	805c      	strhne	r4, [r3, #2]
 80073d2:	e7c1      	b.n	8007358 <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80073d4:	4b07      	ldr	r3, [pc, #28]	; (80073f4 <mem_trim+0x168>)
 80073d6:	f240 3216 	movw	r2, #790	; 0x316
 80073da:	490c      	ldr	r1, [pc, #48]	; (800740c <mem_trim+0x180>)
 80073dc:	4807      	ldr	r0, [pc, #28]	; (80073fc <mem_trim+0x170>)
 80073de:	f006 ffdf 	bl	800e3a0 <iprintf>
 80073e2:	e7df      	b.n	80073a4 <mem_trim+0x118>
    return NULL;
 80073e4:	2000      	movs	r0, #0
 80073e6:	e77f      	b.n	80072e8 <mem_trim+0x5c>
    return rmem;
 80073e8:	4628      	mov	r0, r5
 80073ea:	e77d      	b.n	80072e8 <mem_trim+0x5c>
 80073ec:	2000b370 	.word	0x2000b370
 80073f0:	2000b374 	.word	0x2000b374
 80073f4:	080109d4 	.word	0x080109d4
 80073f8:	08010b38 	.word	0x08010b38
 80073fc:	0800f6b8 	.word	0x0800f6b8
 8007400:	2000b36c 	.word	0x2000b36c
 8007404:	2000b368 	.word	0x2000b368
 8007408:	08010b50 	.word	0x08010b50
 800740c:	08010b70 	.word	0x08010b70

08007410 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007410:	2800      	cmp	r0, #0
 8007412:	f000 809c 	beq.w	800754e <mem_malloc+0x13e>
{
 8007416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007418:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800741a:	1cc6      	adds	r6, r0, #3
 800741c:	f026 0603 	bic.w	r6, r6, #3
 8007420:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007422:	2e0b      	cmp	r6, #11
 8007424:	d904      	bls.n	8007430 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007426:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 800742a:	d902      	bls.n	8007432 <mem_malloc+0x22>
    return NULL;
 800742c:	2000      	movs	r0, #0
 800742e:	e08d      	b.n	800754c <mem_malloc+0x13c>
    size = MIN_SIZE_ALIGNED;
 8007430:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007432:	42b3      	cmp	r3, r6
 8007434:	f200 808d 	bhi.w	8007552 <mem_malloc+0x142>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007438:	4849      	ldr	r0, [pc, #292]	; (8007560 <mem_malloc+0x150>)
 800743a:	f006 fd88 	bl	800df4e <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 800743e:	4b49      	ldr	r3, [pc, #292]	; (8007564 <mem_malloc+0x154>)
 8007440:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007442:	4b49      	ldr	r3, [pc, #292]	; (8007568 <mem_malloc+0x158>)
  return (mem_size_t)((u8_t *)mem - ram);
 8007444:	681c      	ldr	r4, [r3, #0]
 8007446:	1a64      	subs	r4, r4, r1
 8007448:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800744a:	4623      	mov	r3, r4
 800744c:	4637      	mov	r7, r6
 800744e:	f5c6 5020 	rsb	r0, r6, #10240	; 0x2800
 8007452:	4284      	cmp	r4, r0
 8007454:	d276      	bcs.n	8007544 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007456:	f06f 0c07 	mvn.w	ip, #7
 800745a:	e039      	b.n	80074d0 <mem_malloc+0xc0>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800745c:	4b43      	ldr	r3, [pc, #268]	; (800756c <mem_malloc+0x15c>)
 800745e:	f240 3287 	movw	r2, #903	; 0x387
 8007462:	4943      	ldr	r1, [pc, #268]	; (8007570 <mem_malloc+0x160>)
 8007464:	4843      	ldr	r0, [pc, #268]	; (8007574 <mem_malloc+0x164>)
 8007466:	f006 ff9b 	bl	800e3a0 <iprintf>
 800746a:	e045      	b.n	80074f8 <mem_malloc+0xe8>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800746c:	2301      	movs	r3, #1
 800746e:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007470:	4b3d      	ldr	r3, [pc, #244]	; (8007568 <mem_malloc+0x158>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	42ab      	cmp	r3, r5
 8007476:	d056      	beq.n	8007526 <mem_malloc+0x116>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007478:	4839      	ldr	r0, [pc, #228]	; (8007560 <mem_malloc+0x150>)
 800747a:	f006 fd6f 	bl	800df5c <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800747e:	3708      	adds	r7, #8
 8007480:	442f      	add	r7, r5
 8007482:	4b3d      	ldr	r3, [pc, #244]	; (8007578 <mem_malloc+0x168>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	42bb      	cmp	r3, r7
 8007488:	d305      	bcc.n	8007496 <mem_malloc+0x86>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800748a:	f015 0f03 	tst.w	r5, #3
 800748e:	d10a      	bne.n	80074a6 <mem_malloc+0x96>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007490:	f105 0008 	add.w	r0, r5, #8
 8007494:	e05a      	b.n	800754c <mem_malloc+0x13c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007496:	4b35      	ldr	r3, [pc, #212]	; (800756c <mem_malloc+0x15c>)
 8007498:	f240 32b9 	movw	r2, #953	; 0x3b9
 800749c:	4937      	ldr	r1, [pc, #220]	; (800757c <mem_malloc+0x16c>)
 800749e:	4835      	ldr	r0, [pc, #212]	; (8007574 <mem_malloc+0x164>)
 80074a0:	f006 ff7e 	bl	800e3a0 <iprintf>
 80074a4:	e7f1      	b.n	800748a <mem_malloc+0x7a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80074a6:	4e31      	ldr	r6, [pc, #196]	; (800756c <mem_malloc+0x15c>)
 80074a8:	4c32      	ldr	r4, [pc, #200]	; (8007574 <mem_malloc+0x164>)
 80074aa:	4633      	mov	r3, r6
 80074ac:	f240 32bb 	movw	r2, #955	; 0x3bb
 80074b0:	4933      	ldr	r1, [pc, #204]	; (8007580 <mem_malloc+0x170>)
 80074b2:	4620      	mov	r0, r4
 80074b4:	f006 ff74 	bl	800e3a0 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80074b8:	4633      	mov	r3, r6
 80074ba:	f240 32bd 	movw	r2, #957	; 0x3bd
 80074be:	4931      	ldr	r1, [pc, #196]	; (8007584 <mem_malloc+0x174>)
 80074c0:	4620      	mov	r0, r4
 80074c2:	f006 ff6d 	bl	800e3a0 <iprintf>
 80074c6:	e7e3      	b.n	8007490 <mem_malloc+0x80>
         ptr = ptr_to_mem(ptr)->next) {
 80074c8:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80074ca:	4623      	mov	r3, r4
 80074cc:	4284      	cmp	r4, r0
 80074ce:	d239      	bcs.n	8007544 <mem_malloc+0x134>
  return (struct mem *)(void *)&ram[ptr];
 80074d0:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 80074d2:	792a      	ldrb	r2, [r5, #4]
 80074d4:	2a00      	cmp	r2, #0
 80074d6:	d1f7      	bne.n	80074c8 <mem_malloc+0xb8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80074d8:	5aca      	ldrh	r2, [r1, r3]
 80074da:	ebac 0303 	sub.w	r3, ip, r3
 80074de:	4413      	add	r3, r2
      if ((!mem->used) &&
 80074e0:	42bb      	cmp	r3, r7
 80074e2:	d3f1      	bcc.n	80074c8 <mem_malloc+0xb8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80074e4:	f107 0214 	add.w	r2, r7, #20
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d3bf      	bcc.n	800746c <mem_malloc+0x5c>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80074ec:	3608      	adds	r6, #8
 80074ee:	4426      	add	r6, r4
 80074f0:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80074f2:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 80074f6:	d0b1      	beq.n	800745c <mem_malloc+0x4c>
  return (struct mem *)(void *)&ram[ptr];
 80074f8:	4b1a      	ldr	r3, [pc, #104]	; (8007564 <mem_malloc+0x154>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	199a      	adds	r2, r3, r6
          mem2->used = 0;
 80074fe:	2100      	movs	r1, #0
 8007500:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007502:	8829      	ldrh	r1, [r5, #0]
 8007504:	5399      	strh	r1, [r3, r6]
          mem2->prev = ptr;
 8007506:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8007508:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 800750a:	2201      	movs	r2, #1
 800750c:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 800750e:	5b9a      	ldrh	r2, [r3, r6]
 8007510:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007514:	d0ac      	beq.n	8007470 <mem_malloc+0x60>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007516:	4413      	add	r3, r2
 8007518:	805e      	strh	r6, [r3, #2]
        if (mem == lfree) {
 800751a:	4b13      	ldr	r3, [pc, #76]	; (8007568 <mem_malloc+0x158>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	42ab      	cmp	r3, r5
 8007520:	d1aa      	bne.n	8007478 <mem_malloc+0x68>
          while (cur->used && cur != ram_end) {
 8007522:	792b      	ldrb	r3, [r5, #4]
 8007524:	b1d3      	cbz	r3, 800755c <mem_malloc+0x14c>
 8007526:	4b14      	ldr	r3, [pc, #80]	; (8007578 <mem_malloc+0x168>)
 8007528:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 800752a:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <mem_malloc+0x154>)
 800752c:	6818      	ldr	r0, [r3, #0]
 800752e:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8007530:	4299      	cmp	r1, r3
 8007532:	d010      	beq.n	8007556 <mem_malloc+0x146>
  return (struct mem *)(void *)&ram[ptr];
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8007538:	791a      	ldrb	r2, [r3, #4]
 800753a:	2a00      	cmp	r2, #0
 800753c:	d1f8      	bne.n	8007530 <mem_malloc+0x120>
          lfree = cur;
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <mem_malloc+0x158>)
 8007540:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007542:	e799      	b.n	8007478 <mem_malloc+0x68>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007544:	4806      	ldr	r0, [pc, #24]	; (8007560 <mem_malloc+0x150>)
 8007546:	f006 fd09 	bl	800df5c <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800754a:	2000      	movs	r0, #0
}
 800754c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 800754e:	2000      	movs	r0, #0
}
 8007550:	4770      	bx	lr
    return NULL;
 8007552:	2000      	movs	r0, #0
 8007554:	e7fa      	b.n	800754c <mem_malloc+0x13c>
          lfree = cur;
 8007556:	4a04      	ldr	r2, [pc, #16]	; (8007568 <mem_malloc+0x158>)
 8007558:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800755a:	e78d      	b.n	8007478 <mem_malloc+0x68>
  return (struct mem *)(void *)&ram[ptr];
 800755c:	462b      	mov	r3, r5
 800755e:	e7ee      	b.n	800753e <mem_malloc+0x12e>
 8007560:	2000b36c 	.word	0x2000b36c
 8007564:	2000b370 	.word	0x2000b370
 8007568:	2000b368 	.word	0x2000b368
 800756c:	080109d4 	.word	0x080109d4
 8007570:	08010b70 	.word	0x08010b70
 8007574:	0800f6b8 	.word	0x0800f6b8
 8007578:	2000b374 	.word	0x2000b374
 800757c:	08010b84 	.word	0x08010b84
 8007580:	08010bb4 	.word	0x08010bb4
 8007584:	08010be4 	.word	0x08010be4

08007588 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800758c:	f006 fd02 	bl	800df94 <sys_arch_protect>
 8007590:	4605      	mov	r5, r0

  memp = *desc->tab;
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007596:	b18c      	cbz	r4, 80075bc <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007598:	6822      	ldr	r2, [r4, #0]
 800759a:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800759c:	f014 0f03 	tst.w	r4, #3
 80075a0:	d104      	bne.n	80075ac <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80075a2:	4628      	mov	r0, r5
 80075a4:	f006 fd02 	bl	800dfac <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80075a8:	4620      	mov	r0, r4
 80075aa:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <do_memp_malloc_pool+0x3c>)
 80075ae:	f44f 728c 	mov.w	r2, #280	; 0x118
 80075b2:	4905      	ldr	r1, [pc, #20]	; (80075c8 <do_memp_malloc_pool+0x40>)
 80075b4:	4805      	ldr	r0, [pc, #20]	; (80075cc <do_memp_malloc_pool+0x44>)
 80075b6:	f006 fef3 	bl	800e3a0 <iprintf>
 80075ba:	e7f2      	b.n	80075a2 <do_memp_malloc_pool+0x1a>
    SYS_ARCH_UNPROTECT(old_level);
 80075bc:	f006 fcf6 	bl	800dfac <sys_arch_unprotect>
  return NULL;
 80075c0:	e7f2      	b.n	80075a8 <do_memp_malloc_pool+0x20>
 80075c2:	bf00      	nop
 80075c4:	08010c08 	.word	0x08010c08
 80075c8:	08010c38 	.word	0x08010c38
 80075cc:	0800f6b8 	.word	0x0800f6b8

080075d0 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80075d6:	f011 0f03 	tst.w	r1, #3
 80075da:	d109      	bne.n	80075f0 <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80075dc:	f006 fcda 	bl	800df94 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80075e0:	68ab      	ldr	r3, [r5, #8]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 80075e6:	68ab      	ldr	r3, [r5, #8]
 80075e8:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80075ea:	f006 fcdf 	bl	800dfac <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 80075f0:	4b03      	ldr	r3, [pc, #12]	; (8007600 <do_memp_free_pool+0x30>)
 80075f2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80075f6:	4903      	ldr	r1, [pc, #12]	; (8007604 <do_memp_free_pool+0x34>)
 80075f8:	4803      	ldr	r0, [pc, #12]	; (8007608 <do_memp_free_pool+0x38>)
 80075fa:	f006 fed1 	bl	800e3a0 <iprintf>
 80075fe:	e7ed      	b.n	80075dc <do_memp_free_pool+0xc>
 8007600:	08010c08 	.word	0x08010c08
 8007604:	08010c5c 	.word	0x08010c5c
 8007608:	0800f6b8 	.word	0x0800f6b8

0800760c <memp_init_pool>:
  *desc->tab = NULL;
 800760c:	6883      	ldr	r3, [r0, #8]
 800760e:	2200      	movs	r2, #0
 8007610:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007612:	6843      	ldr	r3, [r0, #4]
 8007614:	3303      	adds	r3, #3
 8007616:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 800761a:	8842      	ldrh	r2, [r0, #2]
 800761c:	b15a      	cbz	r2, 8007636 <memp_init_pool+0x2a>
 800761e:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8007620:	6881      	ldr	r1, [r0, #8]
 8007622:	6809      	ldr	r1, [r1, #0]
 8007624:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007626:	6881      	ldr	r1, [r0, #8]
 8007628:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800762a:	8801      	ldrh	r1, [r0, #0]
 800762c:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 800762e:	3201      	adds	r2, #1
 8007630:	8841      	ldrh	r1, [r0, #2]
 8007632:	4291      	cmp	r1, r2
 8007634:	dcf4      	bgt.n	8007620 <memp_init_pool+0x14>
}
 8007636:	4770      	bx	lr

08007638 <memp_init>:
{
 8007638:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800763a:	4c05      	ldr	r4, [pc, #20]	; (8007650 <memp_init+0x18>)
 800763c:	f104 0534 	add.w	r5, r4, #52	; 0x34
    memp_init_pool(memp_pools[i]);
 8007640:	f854 0b04 	ldr.w	r0, [r4], #4
 8007644:	f7ff ffe2 	bl	800760c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007648:	42ac      	cmp	r4, r5
 800764a:	d1f9      	bne.n	8007640 <memp_init+0x8>
}
 800764c:	bd38      	pop	{r3, r4, r5, pc}
 800764e:	bf00      	nop
 8007650:	08010d68 	.word	0x08010d68

08007654 <memp_malloc_pool>:
{
 8007654:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007656:	4604      	mov	r4, r0
 8007658:	b110      	cbz	r0, 8007660 <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 800765a:	f7ff ff95 	bl	8007588 <do_memp_malloc_pool>
}
 800765e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007660:	4b04      	ldr	r3, [pc, #16]	; (8007674 <memp_malloc_pool+0x20>)
 8007662:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007666:	4904      	ldr	r1, [pc, #16]	; (8007678 <memp_malloc_pool+0x24>)
 8007668:	4804      	ldr	r0, [pc, #16]	; (800767c <memp_malloc_pool+0x28>)
 800766a:	f006 fe99 	bl	800e3a0 <iprintf>
    return NULL;
 800766e:	4620      	mov	r0, r4
 8007670:	e7f5      	b.n	800765e <memp_malloc_pool+0xa>
 8007672:	bf00      	nop
 8007674:	08010c08 	.word	0x08010c08
 8007678:	08010c7c 	.word	0x08010c7c
 800767c:	0800f6b8 	.word	0x0800f6b8

08007680 <memp_malloc>:
{
 8007680:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007682:	280c      	cmp	r0, #12
 8007684:	d805      	bhi.n	8007692 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007686:	4b07      	ldr	r3, [pc, #28]	; (80076a4 <memp_malloc+0x24>)
 8007688:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800768c:	f7ff ff7c 	bl	8007588 <do_memp_malloc_pool>
}
 8007690:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007692:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <memp_malloc+0x28>)
 8007694:	f240 1257 	movw	r2, #343	; 0x157
 8007698:	4904      	ldr	r1, [pc, #16]	; (80076ac <memp_malloc+0x2c>)
 800769a:	4805      	ldr	r0, [pc, #20]	; (80076b0 <memp_malloc+0x30>)
 800769c:	f006 fe80 	bl	800e3a0 <iprintf>
 80076a0:	2000      	movs	r0, #0
 80076a2:	e7f5      	b.n	8007690 <memp_malloc+0x10>
 80076a4:	08010d68 	.word	0x08010d68
 80076a8:	08010c08 	.word	0x08010c08
 80076ac:	08010c90 	.word	0x08010c90
 80076b0:	0800f6b8 	.word	0x0800f6b8

080076b4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80076b4:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80076b6:	b128      	cbz	r0, 80076c4 <memp_free_pool+0x10>
 80076b8:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 80076ba:	b111      	cbz	r1, 80076c2 <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ff87 	bl	80075d0 <do_memp_free_pool>
}
 80076c2:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80076c4:	4b03      	ldr	r3, [pc, #12]	; (80076d4 <memp_free_pool+0x20>)
 80076c6:	f240 1295 	movw	r2, #405	; 0x195
 80076ca:	4903      	ldr	r1, [pc, #12]	; (80076d8 <memp_free_pool+0x24>)
 80076cc:	4803      	ldr	r0, [pc, #12]	; (80076dc <memp_free_pool+0x28>)
 80076ce:	f006 fe67 	bl	800e3a0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80076d2:	e7f6      	b.n	80076c2 <memp_free_pool+0xe>
 80076d4:	08010c08 	.word	0x08010c08
 80076d8:	08010c7c 	.word	0x08010c7c
 80076dc:	0800f6b8 	.word	0x0800f6b8

080076e0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80076e0:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80076e2:	280c      	cmp	r0, #12
 80076e4:	d806      	bhi.n	80076f4 <memp_free+0x14>

  if (mem == NULL) {
 80076e6:	b121      	cbz	r1, 80076f2 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <memp_free+0x24>)
 80076ea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80076ee:	f7ff ff6f 	bl	80075d0 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80076f2:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80076f4:	4b04      	ldr	r3, [pc, #16]	; (8007708 <memp_free+0x28>)
 80076f6:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80076fa:	4904      	ldr	r1, [pc, #16]	; (800770c <memp_free+0x2c>)
 80076fc:	4804      	ldr	r0, [pc, #16]	; (8007710 <memp_free+0x30>)
 80076fe:	f006 fe4f 	bl	800e3a0 <iprintf>
 8007702:	e7f6      	b.n	80076f2 <memp_free+0x12>
 8007704:	08010d68 	.word	0x08010d68
 8007708:	08010c08 	.word	0x08010c08
 800770c:	08010cb0 	.word	0x08010cb0
 8007710:	0800f6b8 	.word	0x0800f6b8

08007714 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007714:	f06f 000b 	mvn.w	r0, #11
 8007718:	4770      	bx	lr
	...

0800771c <netif_issue_reports>:
{
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007720:	4605      	mov	r5, r0
 8007722:	b170      	cbz	r0, 8007742 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007724:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8007728:	f003 0205 	and.w	r2, r3, #5
 800772c:	2a05      	cmp	r2, #5
 800772e:	d107      	bne.n	8007740 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007730:	f014 0f01 	tst.w	r4, #1
 8007734:	d004      	beq.n	8007740 <netif_issue_reports+0x24>
 8007736:	686a      	ldr	r2, [r5, #4]
 8007738:	b112      	cbz	r2, 8007740 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800773a:	f013 0f08 	tst.w	r3, #8
 800773e:	d108      	bne.n	8007752 <netif_issue_reports+0x36>
}
 8007740:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007742:	4b06      	ldr	r3, [pc, #24]	; (800775c <netif_issue_reports+0x40>)
 8007744:	f240 326d 	movw	r2, #877	; 0x36d
 8007748:	4905      	ldr	r1, [pc, #20]	; (8007760 <netif_issue_reports+0x44>)
 800774a:	4806      	ldr	r0, [pc, #24]	; (8007764 <netif_issue_reports+0x48>)
 800774c:	f006 fe28 	bl	800e3a0 <iprintf>
 8007750:	e7e8      	b.n	8007724 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8007752:	1d29      	adds	r1, r5, #4
 8007754:	4628      	mov	r0, r5
 8007756:	f005 f9b1 	bl	800cabc <etharp_request>
 800775a:	e7f1      	b.n	8007740 <netif_issue_reports+0x24>
 800775c:	08010d9c 	.word	0x08010d9c
 8007760:	08010dd0 	.word	0x08010dd0
 8007764:	0800f6b8 	.word	0x0800f6b8

08007768 <netif_do_set_ipaddr>:
{
 8007768:	b570      	push	{r4, r5, r6, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	4605      	mov	r5, r0
 800776e:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007770:	460e      	mov	r6, r1
 8007772:	b139      	cbz	r1, 8007784 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007774:	b174      	cbz	r4, 8007794 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8007776:	686b      	ldr	r3, [r5, #4]
 8007778:	6832      	ldr	r2, [r6, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d112      	bne.n	80077a4 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 800777e:	2000      	movs	r0, #0
}
 8007780:	b002      	add	sp, #8
 8007782:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8007784:	4b10      	ldr	r3, [pc, #64]	; (80077c8 <netif_do_set_ipaddr+0x60>)
 8007786:	f240 12cb 	movw	r2, #459	; 0x1cb
 800778a:	4910      	ldr	r1, [pc, #64]	; (80077cc <netif_do_set_ipaddr+0x64>)
 800778c:	4810      	ldr	r0, [pc, #64]	; (80077d0 <netif_do_set_ipaddr+0x68>)
 800778e:	f006 fe07 	bl	800e3a0 <iprintf>
 8007792:	e7ef      	b.n	8007774 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <netif_do_set_ipaddr+0x60>)
 8007796:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800779a:	490c      	ldr	r1, [pc, #48]	; (80077cc <netif_do_set_ipaddr+0x64>)
 800779c:	480c      	ldr	r0, [pc, #48]	; (80077d0 <netif_do_set_ipaddr+0x68>)
 800779e:	f006 fdff 	bl	800e3a0 <iprintf>
 80077a2:	e7e8      	b.n	8007776 <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 80077a4:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80077a6:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80077a8:	a901      	add	r1, sp, #4
 80077aa:	4620      	mov	r0, r4
 80077ac:	f001 f988 	bl	8008ac0 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80077b0:	a901      	add	r1, sp, #4
 80077b2:	4620      	mov	r0, r4
 80077b4:	f004 ff68 	bl	800c688 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80077bc:	2101      	movs	r1, #1
 80077be:	4628      	mov	r0, r5
 80077c0:	f7ff ffac 	bl	800771c <netif_issue_reports>
    return 1; /* address changed */
 80077c4:	2001      	movs	r0, #1
 80077c6:	e7db      	b.n	8007780 <netif_do_set_ipaddr+0x18>
 80077c8:	08010d9c 	.word	0x08010d9c
 80077cc:	08010df4 	.word	0x08010df4
 80077d0:	0800f6b8 	.word	0x0800f6b8

080077d4 <netif_init>:
}
 80077d4:	4770      	bx	lr
	...

080077d8 <netif_set_addr>:
{
 80077d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077da:	b083      	sub	sp, #12
 80077dc:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80077de:	4d15      	ldr	r5, [pc, #84]	; (8007834 <netif_set_addr+0x5c>)
 80077e0:	2900      	cmp	r1, #0
 80077e2:	bf18      	it	ne
 80077e4:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 80077e6:	4f13      	ldr	r7, [pc, #76]	; (8007834 <netif_set_addr+0x5c>)
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	bf18      	it	ne
 80077ec:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 80077ee:	4e11      	ldr	r6, [pc, #68]	; (8007834 <netif_set_addr+0x5c>)
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf18      	it	ne
 80077f4:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 80077f6:	b10d      	cbz	r5, 80077fc <netif_set_addr+0x24>
 80077f8:	682b      	ldr	r3, [r5, #0]
 80077fa:	b993      	cbnz	r3, 8007822 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80077fc:	aa01      	add	r2, sp, #4
 80077fe:	4629      	mov	r1, r5
 8007800:	4620      	mov	r0, r4
 8007802:	f7ff ffb1 	bl	8007768 <netif_do_set_ipaddr>
 8007806:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68a2      	ldr	r2, [r4, #8]
 800780c:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800780e:	bf18      	it	ne
 8007810:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007812:	6833      	ldr	r3, [r6, #0]
 8007814:	68e2      	ldr	r2, [r4, #12]
 8007816:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007818:	bf18      	it	ne
 800781a:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 800781c:	b119      	cbz	r1, 8007826 <netif_set_addr+0x4e>
}
 800781e:	b003      	add	sp, #12
 8007820:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 8007822:	2100      	movs	r1, #0
 8007824:	e7f0      	b.n	8007808 <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007826:	aa01      	add	r2, sp, #4
 8007828:	4629      	mov	r1, r5
 800782a:	4620      	mov	r0, r4
 800782c:	f7ff ff9c 	bl	8007768 <netif_do_set_ipaddr>
}
 8007830:	e7f5      	b.n	800781e <netif_set_addr+0x46>
 8007832:	bf00      	nop
 8007834:	0801281c 	.word	0x0801281c

08007838 <netif_add>:
{
 8007838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800783c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800783e:	4606      	mov	r6, r0
 8007840:	2800      	cmp	r0, #0
 8007842:	d02c      	beq.n	800789e <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007844:	2c00      	cmp	r4, #0
 8007846:	d033      	beq.n	80078b0 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007848:	2000      	movs	r0, #0
 800784a:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800784c:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800784e:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 8007850:	4d3b      	ldr	r5, [pc, #236]	; (8007940 <netif_add+0x108>)
 8007852:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 8007854:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 8007856:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 800785a:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 800785c:	9808      	ldr	r0, [sp, #32]
 800785e:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8007860:	4838      	ldr	r0, [pc, #224]	; (8007944 <netif_add+0x10c>)
 8007862:	7800      	ldrb	r0, [r0, #0]
 8007864:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 8007868:	980a      	ldr	r0, [sp, #40]	; 0x28
 800786a:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 800786c:	4836      	ldr	r0, [pc, #216]	; (8007948 <netif_add+0x110>)
 800786e:	2b00      	cmp	r3, #0
 8007870:	bf08      	it	eq
 8007872:	4603      	moveq	r3, r0
 8007874:	2a00      	cmp	r2, #0
 8007876:	bf08      	it	eq
 8007878:	4602      	moveq	r2, r0
 800787a:	2900      	cmp	r1, #0
 800787c:	bf08      	it	eq
 800787e:	4601      	moveq	r1, r0
 8007880:	4630      	mov	r0, r6
 8007882:	f7ff ffa9 	bl	80077d8 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007886:	4630      	mov	r0, r6
 8007888:	47a0      	blx	r4
 800788a:	2800      	cmp	r0, #0
 800788c:	d147      	bne.n	800791e <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800788e:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8007960 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8007892:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8007950 <netif_add+0x118>
 8007896:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8007964 <netif_add+0x12c>
 800789a:	4f2c      	ldr	r7, [pc, #176]	; (800794c <netif_add+0x114>)
 800789c:	e031      	b.n	8007902 <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800789e:	4b2c      	ldr	r3, [pc, #176]	; (8007950 <netif_add+0x118>)
 80078a0:	f240 1227 	movw	r2, #295	; 0x127
 80078a4:	492b      	ldr	r1, [pc, #172]	; (8007954 <netif_add+0x11c>)
 80078a6:	4829      	ldr	r0, [pc, #164]	; (800794c <netif_add+0x114>)
 80078a8:	f006 fd7a 	bl	800e3a0 <iprintf>
 80078ac:	4630      	mov	r0, r6
 80078ae:	e045      	b.n	800793c <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80078b0:	4b27      	ldr	r3, [pc, #156]	; (8007950 <netif_add+0x118>)
 80078b2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80078b6:	4928      	ldr	r1, [pc, #160]	; (8007958 <netif_add+0x120>)
 80078b8:	4824      	ldr	r0, [pc, #144]	; (800794c <netif_add+0x114>)
 80078ba:	f006 fd71 	bl	800e3a0 <iprintf>
 80078be:	2000      	movs	r0, #0
 80078c0:	e03c      	b.n	800793c <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80078c2:	4643      	mov	r3, r8
 80078c4:	f240 128b 	movw	r2, #395	; 0x18b
 80078c8:	4649      	mov	r1, r9
 80078ca:	4638      	mov	r0, r7
 80078cc:	f006 fd68 	bl	800e3a0 <iprintf>
 80078d0:	e009      	b.n	80078e6 <netif_add+0xae>
        if (netif2->num == netif->num) {
 80078d2:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80078d6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80078da:	429a      	cmp	r2, r3
 80078dc:	d00e      	beq.n	80078fc <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80078de:	6824      	ldr	r4, [r4, #0]
 80078e0:	b1fc      	cbz	r4, 8007922 <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80078e2:	42a6      	cmp	r6, r4
 80078e4:	d0ed      	beq.n	80078c2 <netif_add+0x8a>
        num_netifs++;
 80078e6:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80078e8:	2dff      	cmp	r5, #255	; 0xff
 80078ea:	ddf2      	ble.n	80078d2 <netif_add+0x9a>
 80078ec:	4643      	mov	r3, r8
 80078ee:	f240 128d 	movw	r2, #397	; 0x18d
 80078f2:	491a      	ldr	r1, [pc, #104]	; (800795c <netif_add+0x124>)
 80078f4:	4638      	mov	r0, r7
 80078f6:	f006 fd53 	bl	800e3a0 <iprintf>
 80078fa:	e7ea      	b.n	80078d2 <netif_add+0x9a>
          netif->num++;
 80078fc:	3301      	adds	r3, #1
 80078fe:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 8007902:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8007906:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 8007908:	bf04      	itt	eq
 800790a:	2300      	moveq	r3, #0
 800790c:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007910:	f8da 4000 	ldr.w	r4, [sl]
 8007914:	b12c      	cbz	r4, 8007922 <netif_add+0xea>
      num_netifs = 0;
 8007916:	2500      	movs	r5, #0
 8007918:	e7e3      	b.n	80078e2 <netif_add+0xaa>
    netif_num = 0;
 800791a:	2300      	movs	r3, #0
 800791c:	e007      	b.n	800792e <netif_add+0xf6>
    return NULL;
 800791e:	2000      	movs	r0, #0
 8007920:	e00c      	b.n	800793c <netif_add+0x104>
  if (netif->num == 254) {
 8007922:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 8007926:	2bfe      	cmp	r3, #254	; 0xfe
 8007928:	d0f7      	beq.n	800791a <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 800792a:	3301      	adds	r3, #1
 800792c:	b2db      	uxtb	r3, r3
 800792e:	4a05      	ldr	r2, [pc, #20]	; (8007944 <netif_add+0x10c>)
 8007930:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 8007932:	4b0b      	ldr	r3, [pc, #44]	; (8007960 <netif_add+0x128>)
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 8007938:	601e      	str	r6, [r3, #0]
  return netif;
 800793a:	4630      	mov	r0, r6
}
 800793c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007940:	08007715 	.word	0x08007715
 8007944:	20010c60 	.word	0x20010c60
 8007948:	0801281c 	.word	0x0801281c
 800794c:	0800f6b8 	.word	0x0800f6b8
 8007950:	08010d9c 	.word	0x08010d9c
 8007954:	08010e04 	.word	0x08010e04
 8007958:	08010e20 	.word	0x08010e20
 800795c:	08010e58 	.word	0x08010e58
 8007960:	20010c5c 	.word	0x20010c5c
 8007964:	08010e44 	.word	0x08010e44

08007968 <netif_set_default>:
  netif_default = netif;
 8007968:	4b01      	ldr	r3, [pc, #4]	; (8007970 <netif_set_default+0x8>)
 800796a:	6018      	str	r0, [r3, #0]
}
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	20010c58 	.word	0x20010c58

08007974 <netif_set_up>:
{
 8007974:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007976:	b128      	cbz	r0, 8007984 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007978:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800797c:	f013 0f01 	tst.w	r3, #1
 8007980:	d008      	beq.n	8007994 <netif_set_up+0x20>
}
 8007982:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007984:	4b07      	ldr	r3, [pc, #28]	; (80079a4 <netif_set_up+0x30>)
 8007986:	f44f 7254 	mov.w	r2, #848	; 0x350
 800798a:	4907      	ldr	r1, [pc, #28]	; (80079a8 <netif_set_up+0x34>)
 800798c:	4807      	ldr	r0, [pc, #28]	; (80079ac <netif_set_up+0x38>)
 800798e:	f006 fd07 	bl	800e3a0 <iprintf>
 8007992:	e7f6      	b.n	8007982 <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007994:	f043 0301 	orr.w	r3, r3, #1
 8007998:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800799c:	2103      	movs	r1, #3
 800799e:	f7ff febd 	bl	800771c <netif_issue_reports>
 80079a2:	e7ee      	b.n	8007982 <netif_set_up+0xe>
 80079a4:	08010d9c 	.word	0x08010d9c
 80079a8:	08010e88 	.word	0x08010e88
 80079ac:	0800f6b8 	.word	0x0800f6b8

080079b0 <netif_set_down>:
{
 80079b0:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80079b2:	b160      	cbz	r0, 80079ce <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 80079b4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80079b8:	f013 0f01 	tst.w	r3, #1
 80079bc:	d006      	beq.n	80079cc <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80079be:	f023 0101 	bic.w	r1, r3, #1
 80079c2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80079c6:	f013 0f08 	tst.w	r3, #8
 80079ca:	d108      	bne.n	80079de <netif_set_down+0x2e>
}
 80079cc:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80079ce:	4b05      	ldr	r3, [pc, #20]	; (80079e4 <netif_set_down+0x34>)
 80079d0:	f240 329b 	movw	r2, #923	; 0x39b
 80079d4:	4904      	ldr	r1, [pc, #16]	; (80079e8 <netif_set_down+0x38>)
 80079d6:	4805      	ldr	r0, [pc, #20]	; (80079ec <netif_set_down+0x3c>)
 80079d8:	f006 fce2 	bl	800e3a0 <iprintf>
 80079dc:	e7f6      	b.n	80079cc <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 80079de:	f004 ffa9 	bl	800c934 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 80079e2:	e7f3      	b.n	80079cc <netif_set_down+0x1c>
 80079e4:	08010d9c 	.word	0x08010d9c
 80079e8:	08010ea4 	.word	0x08010ea4
 80079ec:	0800f6b8 	.word	0x0800f6b8

080079f0 <netif_set_link_up>:
{
 80079f0:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80079f2:	b130      	cbz	r0, 8007a02 <netif_set_link_up+0x12>
 80079f4:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80079f6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80079fa:	f013 0f04 	tst.w	r3, #4
 80079fe:	d008      	beq.n	8007a12 <netif_set_link_up+0x22>
}
 8007a00:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <netif_set_link_up+0x3c>)
 8007a04:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8007a08:	4909      	ldr	r1, [pc, #36]	; (8007a30 <netif_set_link_up+0x40>)
 8007a0a:	480a      	ldr	r0, [pc, #40]	; (8007a34 <netif_set_link_up+0x44>)
 8007a0c:	f006 fcc8 	bl	800e3a0 <iprintf>
 8007a10:	e7f6      	b.n	8007a00 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007a12:	f043 0304 	orr.w	r3, r3, #4
 8007a16:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007a1a:	2103      	movs	r1, #3
 8007a1c:	f7ff fe7e 	bl	800771c <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8007a20:	69e3      	ldr	r3, [r4, #28]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d0ec      	beq.n	8007a00 <netif_set_link_up+0x10>
 8007a26:	4620      	mov	r0, r4
 8007a28:	4798      	blx	r3
 8007a2a:	e7e9      	b.n	8007a00 <netif_set_link_up+0x10>
 8007a2c:	08010d9c 	.word	0x08010d9c
 8007a30:	08010ec4 	.word	0x08010ec4
 8007a34:	0800f6b8 	.word	0x0800f6b8

08007a38 <netif_set_link_down>:
{
 8007a38:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007a3a:	b160      	cbz	r0, 8007a56 <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007a3c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007a40:	f013 0f04 	tst.w	r3, #4
 8007a44:	d006      	beq.n	8007a54 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007a46:	f023 0304 	bic.w	r3, r3, #4
 8007a4a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8007a4e:	69c3      	ldr	r3, [r0, #28]
 8007a50:	b103      	cbz	r3, 8007a54 <netif_set_link_down+0x1c>
 8007a52:	4798      	blx	r3
}
 8007a54:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <netif_set_link_down+0x30>)
 8007a58:	f240 4206 	movw	r2, #1030	; 0x406
 8007a5c:	4903      	ldr	r1, [pc, #12]	; (8007a6c <netif_set_link_down+0x34>)
 8007a5e:	4804      	ldr	r0, [pc, #16]	; (8007a70 <netif_set_link_down+0x38>)
 8007a60:	f006 fc9e 	bl	800e3a0 <iprintf>
 8007a64:	e7f6      	b.n	8007a54 <netif_set_link_down+0x1c>
 8007a66:	bf00      	nop
 8007a68:	08010d9c 	.word	0x08010d9c
 8007a6c:	08010ee8 	.word	0x08010ee8
 8007a70:	0800f6b8 	.word	0x0800f6b8

08007a74 <netif_set_link_callback>:
  if (netif) {
 8007a74:	b100      	cbz	r0, 8007a78 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8007a76:	61c1      	str	r1, [r0, #28]
}
 8007a78:	4770      	bx	lr
	...

08007a7c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	b160      	cbz	r0, 8007a9a <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8007a80:	4b07      	ldr	r3, [pc, #28]	; (8007aa0 <netif_get_by_index+0x24>)
 8007a82:	6818      	ldr	r0, [r3, #0]
 8007a84:	b150      	cbz	r0, 8007a9c <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 8007a86:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d004      	beq.n	8007a9c <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8007a92:	6800      	ldr	r0, [r0, #0]
 8007a94:	2800      	cmp	r0, #0
 8007a96:	d1f6      	bne.n	8007a86 <netif_get_by_index+0xa>
 8007a98:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 8007a9a:	2000      	movs	r0, #0
}
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	20010c5c 	.word	0x20010c5c

08007aa4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8007aa4:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007aa6:	b1d8      	cbz	r0, 8007ae0 <pbuf_add_header_impl+0x3c>
 8007aa8:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8007aaa:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007aae:	d22e      	bcs.n	8007b0e <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 8007ab0:	b339      	cbz	r1, 8007b02 <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8007ab2:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8007ab6:	8918      	ldrh	r0, [r3, #8]
 8007ab8:	4460      	add	r0, ip
 8007aba:	b280      	uxth	r0, r0
 8007abc:	4560      	cmp	r0, ip
 8007abe:	d322      	bcc.n	8007b06 <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8007ac0:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 8007ac4:	f1be 0f00 	cmp.w	lr, #0
 8007ac8:	db13      	blt.n	8007af2 <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8007aca:	b1f2      	cbz	r2, 8007b0a <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8007ad0:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8007ad2:	895a      	ldrh	r2, [r3, #10]
 8007ad4:	4494      	add	ip, r2
 8007ad6:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8007ada:	8118      	strh	r0, [r3, #8]


  return 0;
 8007adc:	2000      	movs	r0, #0
 8007ade:	e017      	b.n	8007b10 <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <pbuf_add_header_impl+0x70>)
 8007ae2:	f240 12df 	movw	r2, #479	; 0x1df
 8007ae6:	490c      	ldr	r1, [pc, #48]	; (8007b18 <pbuf_add_header_impl+0x74>)
 8007ae8:	480c      	ldr	r0, [pc, #48]	; (8007b1c <pbuf_add_header_impl+0x78>)
 8007aea:	f006 fc59 	bl	800e3a0 <iprintf>
    return 1;
 8007aee:	2001      	movs	r0, #1
 8007af0:	e00e      	b.n	8007b10 <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8007af6:	f103 0210 	add.w	r2, r3, #16
 8007afa:	4291      	cmp	r1, r2
 8007afc:	d2e8      	bcs.n	8007ad0 <pbuf_add_header_impl+0x2c>
      return 1;
 8007afe:	2001      	movs	r0, #1
 8007b00:	e006      	b.n	8007b10 <pbuf_add_header_impl+0x6c>
    return 0;
 8007b02:	2000      	movs	r0, #0
 8007b04:	e004      	b.n	8007b10 <pbuf_add_header_impl+0x6c>
    return 1;
 8007b06:	2001      	movs	r0, #1
 8007b08:	e002      	b.n	8007b10 <pbuf_add_header_impl+0x6c>
      return 1;
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	e000      	b.n	8007b10 <pbuf_add_header_impl+0x6c>
    return 1;
 8007b0e:	2001      	movs	r0, #1
}
 8007b10:	bd08      	pop	{r3, pc}
 8007b12:	bf00      	nop
 8007b14:	08010f0c 	.word	0x08010f0c
 8007b18:	08010f3c 	.word	0x08010f3c
 8007b1c:	0800f6b8 	.word	0x0800f6b8

08007b20 <pbuf_free_ooseq_callback>:
{
 8007b20:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8007b22:	f006 fa37 	bl	800df94 <sys_arch_protect>
 8007b26:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <pbuf_free_ooseq_callback+0x28>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
 8007b2c:	f006 fa3e 	bl	800dfac <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007b30:	4b06      	ldr	r3, [pc, #24]	; (8007b4c <pbuf_free_ooseq_callback+0x2c>)
 8007b32:	6818      	ldr	r0, [r3, #0]
 8007b34:	b138      	cbz	r0, 8007b46 <pbuf_free_ooseq_callback+0x26>
    if (pcb->ooseq != NULL) {
 8007b36:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007b38:	b91b      	cbnz	r3, 8007b42 <pbuf_free_ooseq_callback+0x22>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007b3a:	68c0      	ldr	r0, [r0, #12]
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d1fa      	bne.n	8007b36 <pbuf_free_ooseq_callback+0x16>
 8007b40:	e001      	b.n	8007b46 <pbuf_free_ooseq_callback+0x26>
      tcp_free_ooseq(pcb);
 8007b42:	f000 fe55 	bl	80087f0 <tcp_free_ooseq>
}
 8007b46:	bd08      	pop	{r3, pc}
 8007b48:	20010c61 	.word	0x20010c61
 8007b4c:	20010c64 	.word	0x20010c64

08007b50 <pbuf_alloc_reference>:
{
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4606      	mov	r6, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007b58:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d110      	bne.n	8007b84 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8007b62:	200b      	movs	r0, #11
 8007b64:	f7ff fd8c 	bl	8007680 <memp_malloc>
  if (p == NULL) {
 8007b68:	4603      	mov	r3, r0
 8007b6a:	b148      	cbz	r0, 8007b80 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8007b70:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8007b72:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8007b74:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8007b76:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 8007b78:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007b7e:	73c2      	strb	r2, [r0, #15]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <pbuf_alloc_reference+0x44>)
 8007b86:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8007b8a:	4903      	ldr	r1, [pc, #12]	; (8007b98 <pbuf_alloc_reference+0x48>)
 8007b8c:	4803      	ldr	r0, [pc, #12]	; (8007b9c <pbuf_alloc_reference+0x4c>)
 8007b8e:	f006 fc07 	bl	800e3a0 <iprintf>
 8007b92:	e7e6      	b.n	8007b62 <pbuf_alloc_reference+0x12>
 8007b94:	08010f0c 	.word	0x08010f0c
 8007b98:	08010f48 	.word	0x08010f48
 8007b9c:	0800f6b8 	.word	0x0800f6b8

08007ba0 <pbuf_alloced_custom>:
{
 8007ba0:	b430      	push	{r4, r5}
 8007ba2:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007ba4:	3003      	adds	r0, #3
 8007ba6:	f020 0003 	bic.w	r0, r0, #3
 8007baa:	eb01 0c00 	add.w	ip, r1, r0
 8007bae:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8007bb2:	45ac      	cmp	ip, r5
 8007bb4:	d80f      	bhi.n	8007bd6 <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 8007bb6:	b104      	cbz	r4, 8007bba <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8007bb8:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8007bba:	4618      	mov	r0, r3
  p->next = NULL;
 8007bbc:	2500      	movs	r5, #0
 8007bbe:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8007bc0:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8007bc2:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8007bc4:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 8007bc6:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007bc8:	2202      	movs	r2, #2
 8007bca:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007bcc:	2201      	movs	r2, #1
 8007bce:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007bd0:	73dd      	strb	r5, [r3, #15]
}
 8007bd2:	bc30      	pop	{r4, r5}
 8007bd4:	4770      	bx	lr
    return NULL;
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	e7fb      	b.n	8007bd2 <pbuf_alloced_custom+0x32>

08007bda <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8007bda:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f7ff ff61 	bl	8007aa4 <pbuf_add_header_impl>
}
 8007be2:	bd08      	pop	{r3, pc}

08007be4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8007be4:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8007be6:	b190      	cbz	r0, 8007c0e <pbuf_remove_header+0x2a>
 8007be8:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8007bea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007bee:	d222      	bcs.n	8007c36 <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 8007bf0:	b1f9      	cbz	r1, 8007c32 <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8007bf2:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007bf4:	895a      	ldrh	r2, [r3, #10]
 8007bf6:	4282      	cmp	r2, r0
 8007bf8:	d312      	bcc.n	8007c20 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8007bfa:	685c      	ldr	r4, [r3, #4]
 8007bfc:	4421      	add	r1, r4
 8007bfe:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8007c00:	1a12      	subs	r2, r2, r0
 8007c02:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8007c04:	891a      	ldrh	r2, [r3, #8]
 8007c06:	1a10      	subs	r0, r2, r0
 8007c08:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8007c0a:	2000      	movs	r0, #0
}
 8007c0c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007c0e:	4b0b      	ldr	r3, [pc, #44]	; (8007c3c <pbuf_remove_header+0x58>)
 8007c10:	f240 224b 	movw	r2, #587	; 0x24b
 8007c14:	490a      	ldr	r1, [pc, #40]	; (8007c40 <pbuf_remove_header+0x5c>)
 8007c16:	480b      	ldr	r0, [pc, #44]	; (8007c44 <pbuf_remove_header+0x60>)
 8007c18:	f006 fbc2 	bl	800e3a0 <iprintf>
    return 1;
 8007c1c:	2001      	movs	r0, #1
 8007c1e:	e7f5      	b.n	8007c0c <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007c20:	4b06      	ldr	r3, [pc, #24]	; (8007c3c <pbuf_remove_header+0x58>)
 8007c22:	f240 2255 	movw	r2, #597	; 0x255
 8007c26:	4908      	ldr	r1, [pc, #32]	; (8007c48 <pbuf_remove_header+0x64>)
 8007c28:	4806      	ldr	r0, [pc, #24]	; (8007c44 <pbuf_remove_header+0x60>)
 8007c2a:	f006 fbb9 	bl	800e3a0 <iprintf>
 8007c2e:	2001      	movs	r0, #1
 8007c30:	e7ec      	b.n	8007c0c <pbuf_remove_header+0x28>
    return 0;
 8007c32:	2000      	movs	r0, #0
 8007c34:	e7ea      	b.n	8007c0c <pbuf_remove_header+0x28>
    return 1;
 8007c36:	2001      	movs	r0, #1
 8007c38:	e7e8      	b.n	8007c0c <pbuf_remove_header+0x28>
 8007c3a:	bf00      	nop
 8007c3c:	08010f0c 	.word	0x08010f0c
 8007c40:	08010f3c 	.word	0x08010f3c
 8007c44:	0800f6b8 	.word	0x0800f6b8
 8007c48:	08010f5c 	.word	0x08010f5c

08007c4c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8007c4c:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 8007c4e:	2900      	cmp	r1, #0
 8007c50:	db03      	blt.n	8007c5a <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8007c52:	2201      	movs	r2, #1
 8007c54:	f7ff ff26 	bl	8007aa4 <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 8007c58:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8007c5a:	4249      	negs	r1, r1
 8007c5c:	f7ff ffc2 	bl	8007be4 <pbuf_remove_header>
 8007c60:	e7fa      	b.n	8007c58 <pbuf_header_force+0xc>
	...

08007c64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007c68:	b140      	cbz	r0, 8007c7c <pbuf_free+0x18>
 8007c6a:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8007c6c:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007c6e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8007d2c <pbuf_free+0xc8>
 8007c72:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8007d40 <pbuf_free+0xdc>
 8007c76:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8007d34 <pbuf_free+0xd0>
 8007c7a:	e01a      	b.n	8007cb2 <pbuf_free+0x4e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8007c7c:	4b2b      	ldr	r3, [pc, #172]	; (8007d2c <pbuf_free+0xc8>)
 8007c7e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8007c82:	492b      	ldr	r1, [pc, #172]	; (8007d30 <pbuf_free+0xcc>)
 8007c84:	482b      	ldr	r0, [pc, #172]	; (8007d34 <pbuf_free+0xd0>)
 8007c86:	f006 fb8b 	bl	800e3a0 <iprintf>
    return 0;
 8007c8a:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007c92:	464b      	mov	r3, r9
 8007c94:	f240 22f1 	movw	r2, #753	; 0x2f1
 8007c98:	4651      	mov	r1, sl
 8007c9a:	4640      	mov	r0, r8
 8007c9c:	f006 fb80 	bl	800e3a0 <iprintf>
 8007ca0:	e00d      	b.n	8007cbe <pbuf_free+0x5a>
        pc->custom_free_function(p);
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	4620      	mov	r0, r4
 8007ca6:	4798      	blx	r3
      count++;
 8007ca8:	3601      	adds	r6, #1
 8007caa:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8007cac:	2d00      	cmp	r5, #0
 8007cae:	d0ed      	beq.n	8007c8c <pbuf_free+0x28>
      p = q;
 8007cb0:	462c      	mov	r4, r5
    SYS_ARCH_PROTECT(old_level);
 8007cb2:	f006 f96f 	bl	800df94 <sys_arch_protect>
 8007cb6:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007cb8:	7ba3      	ldrb	r3, [r4, #14]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0e9      	beq.n	8007c92 <pbuf_free+0x2e>
    ref = --(p->ref);
 8007cbe:	7ba5      	ldrb	r5, [r4, #14]
 8007cc0:	3d01      	subs	r5, #1
 8007cc2:	b2ed      	uxtb	r5, r5
 8007cc4:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	f006 f970 	bl	800dfac <sys_arch_unprotect>
    if (ref == 0) {
 8007ccc:	2d00      	cmp	r5, #0
 8007cce:	d1dd      	bne.n	8007c8c <pbuf_free+0x28>
      q = p->next;
 8007cd0:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007cd2:	7b63      	ldrb	r3, [r4, #13]
 8007cd4:	f013 0f02 	tst.w	r3, #2
 8007cd8:	d00a      	beq.n	8007cf0 <pbuf_free+0x8c>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007cda:	6923      	ldr	r3, [r4, #16]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d1e0      	bne.n	8007ca2 <pbuf_free+0x3e>
 8007ce0:	464b      	mov	r3, r9
 8007ce2:	f240 22ff 	movw	r2, #767	; 0x2ff
 8007ce6:	4914      	ldr	r1, [pc, #80]	; (8007d38 <pbuf_free+0xd4>)
 8007ce8:	4640      	mov	r0, r8
 8007cea:	f006 fb59 	bl	800e3a0 <iprintf>
 8007cee:	e7d8      	b.n	8007ca2 <pbuf_free+0x3e>
      alloc_src = pbuf_get_allocsrc(p);
 8007cf0:	7b23      	ldrb	r3, [r4, #12]
 8007cf2:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d006      	beq.n	8007d08 <pbuf_free+0xa4>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d009      	beq.n	8007d12 <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8007cfe:	b96b      	cbnz	r3, 8007d1c <pbuf_free+0xb8>
          mem_free(p);
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7ff f9c9 	bl	8007098 <mem_free>
 8007d06:	e7cf      	b.n	8007ca8 <pbuf_free+0x44>
          memp_free(MEMP_PBUF_POOL, p);
 8007d08:	4621      	mov	r1, r4
 8007d0a:	200c      	movs	r0, #12
 8007d0c:	f7ff fce8 	bl	80076e0 <memp_free>
 8007d10:	e7ca      	b.n	8007ca8 <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 8007d12:	4621      	mov	r1, r4
 8007d14:	200b      	movs	r0, #11
 8007d16:	f7ff fce3 	bl	80076e0 <memp_free>
 8007d1a:	e7c5      	b.n	8007ca8 <pbuf_free+0x44>
          LWIP_ASSERT("invalid pbuf type", 0);
 8007d1c:	464b      	mov	r3, r9
 8007d1e:	f240 320f 	movw	r2, #783	; 0x30f
 8007d22:	4906      	ldr	r1, [pc, #24]	; (8007d3c <pbuf_free+0xd8>)
 8007d24:	4640      	mov	r0, r8
 8007d26:	f006 fb3b 	bl	800e3a0 <iprintf>
 8007d2a:	e7bd      	b.n	8007ca8 <pbuf_free+0x44>
 8007d2c:	08010f0c 	.word	0x08010f0c
 8007d30:	08010f3c 	.word	0x08010f3c
 8007d34:	0800f6b8 	.word	0x0800f6b8
 8007d38:	08010f94 	.word	0x08010f94
 8007d3c:	08010fb8 	.word	0x08010fb8
 8007d40:	08010f7c 	.word	0x08010f7c

08007d44 <pbuf_alloc>:
{
 8007d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 8007d4a:	b285      	uxth	r5, r0
  switch (type) {
 8007d4c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 8007d50:	d03d      	beq.n	8007dce <pbuf_alloc+0x8a>
 8007d52:	4604      	mov	r4, r0
 8007d54:	d80e      	bhi.n	8007d74 <pbuf_alloc+0x30>
 8007d56:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d02f      	beq.n	8007dc0 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007d60:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <pbuf_alloc+0x13c>)
 8007d62:	f240 1227 	movw	r2, #295	; 0x127
 8007d66:	4947      	ldr	r1, [pc, #284]	; (8007e84 <pbuf_alloc+0x140>)
 8007d68:	4847      	ldr	r0, [pc, #284]	; (8007e88 <pbuf_alloc+0x144>)
 8007d6a:	f006 fb19 	bl	800e3a0 <iprintf>
      return NULL;
 8007d6e:	f04f 0800 	mov.w	r8, #0
 8007d72:	e029      	b.n	8007dc8 <pbuf_alloc+0x84>
  switch (type) {
 8007d74:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8007d78:	d1f2      	bne.n	8007d60 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007d7a:	1ceb      	adds	r3, r5, #3
 8007d7c:	f023 0303 	bic.w	r3, r3, #3
 8007d80:	1cca      	adds	r2, r1, #3
 8007d82:	f022 0503 	bic.w	r5, r2, #3
 8007d86:	442b      	add	r3, r5
 8007d88:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007d8a:	f103 0010 	add.w	r0, r3, #16
 8007d8e:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	d36e      	bcc.n	8007e72 <pbuf_alloc+0x12e>
 8007d94:	4285      	cmp	r5, r0
 8007d96:	d86f      	bhi.n	8007e78 <pbuf_alloc+0x134>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007d98:	f7ff fb3a 	bl	8007410 <mem_malloc>
      if (p == NULL) {
 8007d9c:	4680      	mov	r8, r0
 8007d9e:	b198      	cbz	r0, 8007dc8 <pbuf_alloc+0x84>
  p->next = NULL;
 8007da0:	2200      	movs	r2, #0
 8007da2:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007da4:	1903      	adds	r3, r0, r4
 8007da6:	3313      	adds	r3, #19
 8007da8:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 8007dac:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8007dae:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8007db0:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8007db2:	2380      	movs	r3, #128	; 0x80
 8007db4:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 8007db6:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 8007db8:	2301      	movs	r3, #1
 8007dba:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007dbc:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007dbe:	e003      	b.n	8007dc8 <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8007dc0:	2000      	movs	r0, #0
 8007dc2:	f7ff fec5 	bl	8007b50 <pbuf_alloc_reference>
 8007dc6:	4680      	mov	r8, r0
}
 8007dc8:	4640      	mov	r0, r8
 8007dca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8007dce:	2400      	movs	r4, #0
 8007dd0:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007dd2:	f04f 0a0c 	mov.w	sl, #12
  p->next = NULL;
 8007dd6:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 8007dd8:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8007ddc:	e026      	b.n	8007e2c <pbuf_alloc+0xe8>
  SYS_ARCH_PROTECT(old_level);
 8007dde:	f006 f8d9 	bl	800df94 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8007de2:	4b2a      	ldr	r3, [pc, #168]	; (8007e8c <pbuf_alloc+0x148>)
 8007de4:	781d      	ldrb	r5, [r3, #0]
 8007de6:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 8007de8:	2201      	movs	r2, #1
 8007dea:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8007dec:	f006 f8de 	bl	800dfac <sys_arch_unprotect>
  if (!queued) {
 8007df0:	b13d      	cbz	r5, 8007e02 <pbuf_alloc+0xbe>
          if (p) {
 8007df2:	f1b8 0f00 	cmp.w	r8, #0
 8007df6:	d0e7      	beq.n	8007dc8 <pbuf_alloc+0x84>
            pbuf_free(p);
 8007df8:	4640      	mov	r0, r8
 8007dfa:	f7ff ff33 	bl	8007c64 <pbuf_free>
          return NULL;
 8007dfe:	46a0      	mov	r8, r4
 8007e00:	e7e2      	b.n	8007dc8 <pbuf_alloc+0x84>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007e02:	2100      	movs	r1, #0
 8007e04:	4822      	ldr	r0, [pc, #136]	; (8007e90 <pbuf_alloc+0x14c>)
 8007e06:	f7fe f8eb 	bl	8005fe0 <tcpip_try_callback>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d0f1      	beq.n	8007df2 <pbuf_alloc+0xae>
 8007e0e:	f006 f8c1 	bl	800df94 <sys_arch_protect>
 8007e12:	4b1e      	ldr	r3, [pc, #120]	; (8007e8c <pbuf_alloc+0x148>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	f006 f8c8 	bl	800dfac <sys_arch_unprotect>
 8007e1c:	e7e9      	b.n	8007df2 <pbuf_alloc+0xae>
          last->next = q;
 8007e1e:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 8007e22:	1a76      	subs	r6, r6, r1
 8007e24:	b2b6      	uxth	r6, r6
        offset = 0;
 8007e26:	463d      	mov	r5, r7
      } while (rem_len > 0);
 8007e28:	2e00      	cmp	r6, #0
 8007e2a:	d0cd      	beq.n	8007dc8 <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007e2c:	46a1      	mov	r9, r4
 8007e2e:	4650      	mov	r0, sl
 8007e30:	f7ff fc26 	bl	8007680 <memp_malloc>
        if (q == NULL) {
 8007e34:	4604      	mov	r4, r0
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0d1      	beq.n	8007dde <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007e3a:	1ce9      	adds	r1, r5, #3
 8007e3c:	f021 0103 	bic.w	r1, r1, #3
 8007e40:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 8007e44:	b289      	uxth	r1, r1
 8007e46:	42b1      	cmp	r1, r6
 8007e48:	bf28      	it	cs
 8007e4a:	4631      	movcs	r1, r6
  p->next = NULL;
 8007e4c:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007e4e:	4405      	add	r5, r0
 8007e50:	3513      	adds	r5, #19
 8007e52:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 8007e56:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 8007e58:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8007e5a:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8007e5c:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8007e60:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8007e62:	2301      	movs	r3, #1
 8007e64:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007e66:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 8007e68:	f1b8 0f00 	cmp.w	r8, #0
 8007e6c:	d1d7      	bne.n	8007e1e <pbuf_alloc+0xda>
          p = q;
 8007e6e:	4680      	mov	r8, r0
 8007e70:	e7d7      	b.n	8007e22 <pbuf_alloc+0xde>
        return NULL;
 8007e72:	f04f 0800 	mov.w	r8, #0
 8007e76:	e7a7      	b.n	8007dc8 <pbuf_alloc+0x84>
 8007e78:	f04f 0800 	mov.w	r8, #0
 8007e7c:	e7a4      	b.n	8007dc8 <pbuf_alloc+0x84>
 8007e7e:	bf00      	nop
 8007e80:	08010f0c 	.word	0x08010f0c
 8007e84:	08010fcc 	.word	0x08010fcc
 8007e88:	0800f6b8 	.word	0x0800f6b8
 8007e8c:	20010c61 	.word	0x20010c61
 8007e90:	08007b21 	.word	0x08007b21

08007e94 <pbuf_realloc>:
{
 8007e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e98:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	b168      	cbz	r0, 8007eba <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 8007e9e:	8927      	ldrh	r7, [r4, #8]
 8007ea0:	42b7      	cmp	r7, r6
 8007ea2:	d939      	bls.n	8007f18 <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 8007ea4:	8963      	ldrh	r3, [r4, #10]
 8007ea6:	429e      	cmp	r6, r3
 8007ea8:	d923      	bls.n	8007ef2 <pbuf_realloc+0x5e>
  rem_len = new_len;
 8007eaa:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007eac:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007f40 <pbuf_realloc+0xac>
 8007eb0:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8007f50 <pbuf_realloc+0xbc>
 8007eb4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007f48 <pbuf_realloc+0xb4>
 8007eb8:	e00a      	b.n	8007ed0 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007eba:	4b21      	ldr	r3, [pc, #132]	; (8007f40 <pbuf_realloc+0xac>)
 8007ebc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8007ec0:	4920      	ldr	r1, [pc, #128]	; (8007f44 <pbuf_realloc+0xb0>)
 8007ec2:	4821      	ldr	r0, [pc, #132]	; (8007f48 <pbuf_realloc+0xb4>)
 8007ec4:	f006 fa6c 	bl	800e3a0 <iprintf>
 8007ec8:	e7e9      	b.n	8007e9e <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 8007eca:	8963      	ldrh	r3, [r4, #10]
 8007ecc:	42ab      	cmp	r3, r5
 8007ece:	d211      	bcs.n	8007ef4 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8007ed0:	1aed      	subs	r5, r5, r3
 8007ed2:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8007ed4:	1bf3      	subs	r3, r6, r7
 8007ed6:	8922      	ldrh	r2, [r4, #8]
 8007ed8:	4413      	add	r3, r2
 8007eda:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007edc:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007ede:	2c00      	cmp	r4, #0
 8007ee0:	d1f3      	bne.n	8007eca <pbuf_realloc+0x36>
 8007ee2:	4653      	mov	r3, sl
 8007ee4:	f240 12af 	movw	r2, #431	; 0x1af
 8007ee8:	4649      	mov	r1, r9
 8007eea:	4640      	mov	r0, r8
 8007eec:	f006 fa58 	bl	800e3a0 <iprintf>
 8007ef0:	e7eb      	b.n	8007eca <pbuf_realloc+0x36>
  rem_len = new_len;
 8007ef2:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8007ef4:	7b22      	ldrb	r2, [r4, #12]
 8007ef6:	f012 0f0f 	tst.w	r2, #15
 8007efa:	d105      	bne.n	8007f08 <pbuf_realloc+0x74>
 8007efc:	42ab      	cmp	r3, r5
 8007efe:	d003      	beq.n	8007f08 <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8007f00:	7b63      	ldrb	r3, [r4, #13]
 8007f02:	f013 0f02 	tst.w	r3, #2
 8007f06:	d009      	beq.n	8007f1c <pbuf_realloc+0x88>
  q->len = rem_len;
 8007f08:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8007f0a:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007f0c:	6820      	ldr	r0, [r4, #0]
 8007f0e:	b108      	cbz	r0, 8007f14 <pbuf_realloc+0x80>
    pbuf_free(q->next);
 8007f10:	f7ff fea8 	bl	8007c64 <pbuf_free>
  q->next = NULL;
 8007f14:	2300      	movs	r3, #0
 8007f16:	6023      	str	r3, [r4, #0]
}
 8007f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	1b1b      	subs	r3, r3, r4
 8007f20:	18e9      	adds	r1, r5, r3
 8007f22:	b289      	uxth	r1, r1
 8007f24:	4620      	mov	r0, r4
 8007f26:	f7ff f9b1 	bl	800728c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d1eb      	bne.n	8007f08 <pbuf_realloc+0x74>
 8007f30:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <pbuf_realloc+0xac>)
 8007f32:	f240 12bd 	movw	r2, #445	; 0x1bd
 8007f36:	4905      	ldr	r1, [pc, #20]	; (8007f4c <pbuf_realloc+0xb8>)
 8007f38:	4803      	ldr	r0, [pc, #12]	; (8007f48 <pbuf_realloc+0xb4>)
 8007f3a:	f006 fa31 	bl	800e3a0 <iprintf>
 8007f3e:	e7e3      	b.n	8007f08 <pbuf_realloc+0x74>
 8007f40:	08010f0c 	.word	0x08010f0c
 8007f44:	08010fe8 	.word	0x08010fe8
 8007f48:	0800f6b8 	.word	0x0800f6b8
 8007f4c:	08011018 	.word	0x08011018
 8007f50:	08011000 	.word	0x08011000

08007f54 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 8007f54:	4603      	mov	r3, r0
 8007f56:	b130      	cbz	r0, 8007f66 <pbuf_clen+0x12>
  len = 0;
 8007f58:	2000      	movs	r0, #0
    ++len;
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	b280      	uxth	r0, r0
    p = p->next;
 8007f5e:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d1fa      	bne.n	8007f5a <pbuf_clen+0x6>
 8007f64:	4770      	bx	lr
  len = 0;
 8007f66:	2000      	movs	r0, #0
  }
  return len;
}
 8007f68:	4770      	bx	lr
	...

08007f6c <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8007f6c:	b198      	cbz	r0, 8007f96 <pbuf_ref+0x2a>
{
 8007f6e:	b510      	push	{r4, lr}
 8007f70:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8007f72:	f006 f80f 	bl	800df94 <sys_arch_protect>
 8007f76:	7ba3      	ldrb	r3, [r4, #14]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	73a3      	strb	r3, [r4, #14]
 8007f7c:	f006 f816 	bl	800dfac <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007f80:	7ba3      	ldrb	r3, [r4, #14]
 8007f82:	b103      	cbz	r3, 8007f86 <pbuf_ref+0x1a>
  }
}
 8007f84:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007f86:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <pbuf_ref+0x2c>)
 8007f88:	f240 3242 	movw	r2, #834	; 0x342
 8007f8c:	4903      	ldr	r1, [pc, #12]	; (8007f9c <pbuf_ref+0x30>)
 8007f8e:	4804      	ldr	r0, [pc, #16]	; (8007fa0 <pbuf_ref+0x34>)
 8007f90:	f006 fa06 	bl	800e3a0 <iprintf>
}
 8007f94:	e7f6      	b.n	8007f84 <pbuf_ref+0x18>
 8007f96:	4770      	bx	lr
 8007f98:	08010f0c 	.word	0x08010f0c
 8007f9c:	08011034 	.word	0x08011034
 8007fa0:	0800f6b8 	.word	0x0800f6b8

08007fa4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007fa4:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007fa6:	b130      	cbz	r0, 8007fb6 <pbuf_cat+0x12>
 8007fa8:	460d      	mov	r5, r1
 8007faa:	4602      	mov	r2, r0
 8007fac:	b119      	cbz	r1, 8007fb6 <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8007fae:	6804      	ldr	r4, [r0, #0]
 8007fb0:	b954      	cbnz	r4, 8007fc8 <pbuf_cat+0x24>
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	e010      	b.n	8007fd8 <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007fb6:	4b15      	ldr	r3, [pc, #84]	; (800800c <pbuf_cat+0x68>)
 8007fb8:	f240 3259 	movw	r2, #857	; 0x359
 8007fbc:	4914      	ldr	r1, [pc, #80]	; (8008010 <pbuf_cat+0x6c>)
 8007fbe:	4815      	ldr	r0, [pc, #84]	; (8008014 <pbuf_cat+0x70>)
 8007fc0:	f006 f9ee 	bl	800e3a0 <iprintf>
 8007fc4:	e021      	b.n	800800a <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 8007fc6:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8007fc8:	8913      	ldrh	r3, [r2, #8]
 8007fca:	8928      	ldrh	r0, [r5, #8]
 8007fcc:	4403      	add	r3, r0
 8007fce:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	4622      	mov	r2, r4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1f6      	bne.n	8007fc6 <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007fd8:	8922      	ldrh	r2, [r4, #8]
 8007fda:	8963      	ldrh	r3, [r4, #10]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d00f      	beq.n	8008000 <pbuf_cat+0x5c>
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <pbuf_cat+0x68>)
 8007fe2:	f240 3262 	movw	r2, #866	; 0x362
 8007fe6:	490c      	ldr	r1, [pc, #48]	; (8008018 <pbuf_cat+0x74>)
 8007fe8:	480a      	ldr	r0, [pc, #40]	; (8008014 <pbuf_cat+0x70>)
 8007fea:	f006 f9d9 	bl	800e3a0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007fee:	6823      	ldr	r3, [r4, #0]
 8007ff0:	b133      	cbz	r3, 8008000 <pbuf_cat+0x5c>
 8007ff2:	4b06      	ldr	r3, [pc, #24]	; (800800c <pbuf_cat+0x68>)
 8007ff4:	f240 3263 	movw	r2, #867	; 0x363
 8007ff8:	4908      	ldr	r1, [pc, #32]	; (800801c <pbuf_cat+0x78>)
 8007ffa:	4806      	ldr	r0, [pc, #24]	; (8008014 <pbuf_cat+0x70>)
 8007ffc:	f006 f9d0 	bl	800e3a0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8008000:	8923      	ldrh	r3, [r4, #8]
 8008002:	892a      	ldrh	r2, [r5, #8]
 8008004:	4413      	add	r3, r2
 8008006:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8008008:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800800a:	bd38      	pop	{r3, r4, r5, pc}
 800800c:	08010f0c 	.word	0x08010f0c
 8008010:	08011048 	.word	0x08011048
 8008014:	0800f6b8 	.word	0x0800f6b8
 8008018:	08011080 	.word	0x08011080
 800801c:	080110b0 	.word	0x080110b0

08008020 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008024:	b178      	cbz	r0, 8008046 <pbuf_copy+0x26>
 8008026:	460c      	mov	r4, r1
 8008028:	4606      	mov	r6, r0
 800802a:	b161      	cbz	r1, 8008046 <pbuf_copy+0x26>
 800802c:	8902      	ldrh	r2, [r0, #8]
 800802e:	890b      	ldrh	r3, [r1, #8]
 8008030:	429a      	cmp	r2, r3
 8008032:	d308      	bcc.n	8008046 <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 8008034:	2700      	movs	r7, #0
 8008036:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008038:	f8df a10c 	ldr.w	sl, [pc, #268]	; 8008148 <pbuf_copy+0x128>
 800803c:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008160 <pbuf_copy+0x140>
 8008040:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8008150 <pbuf_copy+0x130>
 8008044:	e050      	b.n	80080e8 <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008046:	4b40      	ldr	r3, [pc, #256]	; (8008148 <pbuf_copy+0x128>)
 8008048:	f240 32c9 	movw	r2, #969	; 0x3c9
 800804c:	493f      	ldr	r1, [pc, #252]	; (800814c <pbuf_copy+0x12c>)
 800804e:	4840      	ldr	r0, [pc, #256]	; (8008150 <pbuf_copy+0x130>)
 8008050:	f006 f9a6 	bl	800e3a0 <iprintf>
 8008054:	f06f 000f 	mvn.w	r0, #15
 8008058:	e016      	b.n	8008088 <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800805a:	4653      	mov	r3, sl
 800805c:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008060:	4659      	mov	r1, fp
 8008062:	4648      	mov	r0, r9
 8008064:	f006 f99c 	bl	800e3a0 <iprintf>
 8008068:	e052      	b.n	8008110 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800806a:	4653      	mov	r3, sl
 800806c:	f240 32da 	movw	r2, #986	; 0x3da
 8008070:	4938      	ldr	r1, [pc, #224]	; (8008154 <pbuf_copy+0x134>)
 8008072:	4648      	mov	r0, r9
 8008074:	f006 f994 	bl	800e3a0 <iprintf>
 8008078:	e04d      	b.n	8008116 <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800807a:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800807c:	b116      	cbz	r6, 8008084 <pbuf_copy+0x64>
      offset_to = 0;
 800807e:	f04f 0800 	mov.w	r8, #0
 8008082:	e050      	b.n	8008126 <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008084:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008086:	b90c      	cbnz	r4, 800808c <pbuf_copy+0x6c>
}
 8008088:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800808c:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <pbuf_copy+0x128>)
 800808e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008092:	4931      	ldr	r1, [pc, #196]	; (8008158 <pbuf_copy+0x138>)
 8008094:	482e      	ldr	r0, [pc, #184]	; (8008150 <pbuf_copy+0x130>)
 8008096:	f006 f983 	bl	800e3a0 <iprintf>
 800809a:	f06f 000f 	mvn.w	r0, #15
 800809e:	e7f3      	b.n	8008088 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080a0:	6823      	ldr	r3, [r4, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d045      	beq.n	8008132 <pbuf_copy+0x112>
 80080a6:	4b28      	ldr	r3, [pc, #160]	; (8008148 <pbuf_copy+0x128>)
 80080a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80080ac:	492b      	ldr	r1, [pc, #172]	; (800815c <pbuf_copy+0x13c>)
 80080ae:	4828      	ldr	r0, [pc, #160]	; (8008150 <pbuf_copy+0x130>)
 80080b0:	f006 f976 	bl	800e3a0 <iprintf>
 80080b4:	f06f 0005 	mvn.w	r0, #5
 80080b8:	e7e6      	b.n	8008088 <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080ba:	4b23      	ldr	r3, [pc, #140]	; (8008148 <pbuf_copy+0x128>)
 80080bc:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80080c0:	4926      	ldr	r1, [pc, #152]	; (800815c <pbuf_copy+0x13c>)
 80080c2:	4823      	ldr	r0, [pc, #140]	; (8008150 <pbuf_copy+0x130>)
 80080c4:	f006 f96c 	bl	800e3a0 <iprintf>
 80080c8:	f06f 0005 	mvn.w	r0, #5
 80080cc:	e7dc      	b.n	8008088 <pbuf_copy+0x68>
  return ERR_OK;
 80080ce:	2000      	movs	r0, #0
 80080d0:	e7da      	b.n	8008088 <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80080d2:	2e00      	cmp	r6, #0
 80080d4:	d034      	beq.n	8008140 <pbuf_copy+0x120>
 80080d6:	8972      	ldrh	r2, [r6, #10]
 80080d8:	8933      	ldrh	r3, [r6, #8]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d132      	bne.n	8008144 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80080de:	6833      	ldr	r3, [r6, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1ea      	bne.n	80080ba <pbuf_copy+0x9a>
  } while (p_from);
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	d0f2      	beq.n	80080ce <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80080e8:	8975      	ldrh	r5, [r6, #10]
 80080ea:	eba5 0508 	sub.w	r5, r5, r8
 80080ee:	8963      	ldrh	r3, [r4, #10]
 80080f0:	1bdb      	subs	r3, r3, r7
 80080f2:	429d      	cmp	r5, r3
 80080f4:	bf28      	it	cs
 80080f6:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80080f8:	6870      	ldr	r0, [r6, #4]
 80080fa:	6861      	ldr	r1, [r4, #4]
 80080fc:	462a      	mov	r2, r5
 80080fe:	4439      	add	r1, r7
 8008100:	4440      	add	r0, r8
 8008102:	f006 f888 	bl	800e216 <memcpy>
    offset_to += len;
 8008106:	44a8      	add	r8, r5
    offset_from += len;
 8008108:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800810a:	8973      	ldrh	r3, [r6, #10]
 800810c:	4543      	cmp	r3, r8
 800810e:	d3a4      	bcc.n	800805a <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008110:	8963      	ldrh	r3, [r4, #10]
 8008112:	42bb      	cmp	r3, r7
 8008114:	d3a9      	bcc.n	800806a <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 8008116:	8963      	ldrh	r3, [r4, #10]
 8008118:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 800811a:	bf9c      	itt	ls
 800811c:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 800811e:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 8008120:	8973      	ldrh	r3, [r6, #10]
 8008122:	4543      	cmp	r3, r8
 8008124:	d0a9      	beq.n	800807a <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008126:	2c00      	cmp	r4, #0
 8008128:	d0d3      	beq.n	80080d2 <pbuf_copy+0xb2>
 800812a:	8962      	ldrh	r2, [r4, #10]
 800812c:	8923      	ldrh	r3, [r4, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	d0b6      	beq.n	80080a0 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008132:	2e00      	cmp	r6, #0
 8008134:	d0d8      	beq.n	80080e8 <pbuf_copy+0xc8>
 8008136:	8972      	ldrh	r2, [r6, #10]
 8008138:	8933      	ldrh	r3, [r6, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	d1d4      	bne.n	80080e8 <pbuf_copy+0xc8>
 800813e:	e7ce      	b.n	80080de <pbuf_copy+0xbe>
  return ERR_OK;
 8008140:	2000      	movs	r0, #0
 8008142:	e7a1      	b.n	8008088 <pbuf_copy+0x68>
 8008144:	2000      	movs	r0, #0
 8008146:	e79f      	b.n	8008088 <pbuf_copy+0x68>
 8008148:	08010f0c 	.word	0x08010f0c
 800814c:	080110c0 	.word	0x080110c0
 8008150:	0800f6b8 	.word	0x0800f6b8
 8008154:	08011108 	.word	0x08011108
 8008158:	08011124 	.word	0x08011124
 800815c:	08011134 	.word	0x08011134
 8008160:	080110f0 	.word	0x080110f0

08008164 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008168:	b148      	cbz	r0, 800817e <pbuf_copy_partial+0x1a>
 800816a:	4688      	mov	r8, r1
 800816c:	4692      	mov	sl, r2
 800816e:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008170:	b181      	cbz	r1, 8008194 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8008172:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008174:	b15a      	cbz	r2, 800818e <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8008176:	2700      	movs	r7, #0
  u16_t left = 0;
 8008178:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 800817a:	46b9      	mov	r9, r7
 800817c:	e02f      	b.n	80081de <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800817e:	4b1c      	ldr	r3, [pc, #112]	; (80081f0 <pbuf_copy_partial+0x8c>)
 8008180:	f240 420a 	movw	r2, #1034	; 0x40a
 8008184:	491b      	ldr	r1, [pc, #108]	; (80081f4 <pbuf_copy_partial+0x90>)
 8008186:	481c      	ldr	r0, [pc, #112]	; (80081f8 <pbuf_copy_partial+0x94>)
 8008188:	f006 f90a 	bl	800e3a0 <iprintf>
 800818c:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 800818e:	4638      	mov	r0, r7
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008194:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <pbuf_copy_partial+0x8c>)
 8008196:	f240 420b 	movw	r2, #1035	; 0x40b
 800819a:	4918      	ldr	r1, [pc, #96]	; (80081fc <pbuf_copy_partial+0x98>)
 800819c:	4816      	ldr	r0, [pc, #88]	; (80081f8 <pbuf_copy_partial+0x94>)
 800819e:	f006 f8ff 	bl	800e3a0 <iprintf>
 80081a2:	2700      	movs	r7, #0
 80081a4:	e7f3      	b.n	800818e <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 80081a6:	896c      	ldrh	r4, [r5, #10]
 80081a8:	1ae4      	subs	r4, r4, r3
 80081aa:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 80081ac:	4554      	cmp	r4, sl
 80081ae:	bf28      	it	cs
 80081b0:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80081b2:	6869      	ldr	r1, [r5, #4]
 80081b4:	4622      	mov	r2, r4
 80081b6:	4419      	add	r1, r3
 80081b8:	eb08 0006 	add.w	r0, r8, r6
 80081bc:	f006 f82b 	bl	800e216 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80081c0:	4427      	add	r7, r4
 80081c2:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 80081c4:	4426      	add	r6, r4
 80081c6:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 80081c8:	ebaa 0404 	sub.w	r4, sl, r4
 80081cc:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 80081d0:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80081d2:	682d      	ldr	r5, [r5, #0]
 80081d4:	f1ba 0f00 	cmp.w	sl, #0
 80081d8:	d0d9      	beq.n	800818e <pbuf_copy_partial+0x2a>
 80081da:	2d00      	cmp	r5, #0
 80081dc:	d0d7      	beq.n	800818e <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0e1      	beq.n	80081a6 <pbuf_copy_partial+0x42>
 80081e2:	896a      	ldrh	r2, [r5, #10]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d8de      	bhi.n	80081a6 <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	e7f1      	b.n	80081d2 <pbuf_copy_partial+0x6e>
 80081ee:	bf00      	nop
 80081f0:	08010f0c 	.word	0x08010f0c
 80081f4:	08011160 	.word	0x08011160
 80081f8:	0800f6b8 	.word	0x0800f6b8
 80081fc:	08011180 	.word	0x08011180

08008200 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008204:	460a      	mov	r2, r1
 8008206:	8921      	ldrh	r1, [r4, #8]
 8008208:	f7ff fd9c 	bl	8007d44 <pbuf_alloc>
  if (q == NULL) {
 800820c:	4605      	mov	r5, r0
 800820e:	b118      	cbz	r0, 8008218 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008210:	4621      	mov	r1, r4
 8008212:	f7ff ff05 	bl	8008020 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008216:	b908      	cbnz	r0, 800821c <pbuf_clone+0x1c>
  return q;
}
 8008218:	4628      	mov	r0, r5
 800821a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <pbuf_clone+0x2c>)
 800821e:	f240 5224 	movw	r2, #1316	; 0x524
 8008222:	4903      	ldr	r1, [pc, #12]	; (8008230 <pbuf_clone+0x30>)
 8008224:	4803      	ldr	r0, [pc, #12]	; (8008234 <pbuf_clone+0x34>)
 8008226:	f006 f8bb 	bl	800e3a0 <iprintf>
 800822a:	e7f5      	b.n	8008218 <pbuf_clone+0x18>
 800822c:	08010f0c 	.word	0x08010f0c
 8008230:	080111a4 	.word	0x080111a4
 8008234:	0800f6b8 	.word	0x0800f6b8

08008238 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008238:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 800823a:	4b13      	ldr	r3, [pc, #76]	; (8008288 <tcp_new_port+0x50>)
 800823c:	8818      	ldrh	r0, [r3, #0]
{
 800823e:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008242:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8008246:	e002      	b.n	800824e <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008248:	3c01      	subs	r4, #1
 800824a:	b2a4      	uxth	r4, r4
 800824c:	b1bc      	cbz	r4, 800827e <tcp_new_port+0x46>
  tcp_port++;
 800824e:	3001      	adds	r0, #1
 8008250:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008252:	4570      	cmp	r0, lr
 8008254:	bf08      	it	eq
 8008256:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800825a:	490c      	ldr	r1, [pc, #48]	; (800828c <tcp_new_port+0x54>)
 800825c:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008260:	f851 3b04 	ldr.w	r3, [r1], #4
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	b12b      	cbz	r3, 8008274 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8008268:	8ada      	ldrh	r2, [r3, #22]
 800826a:	4282      	cmp	r2, r0
 800826c:	d0ec      	beq.n	8008248 <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1f9      	bne.n	8008268 <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008274:	4561      	cmp	r1, ip
 8008276:	d1f3      	bne.n	8008260 <tcp_new_port+0x28>
 8008278:	4b03      	ldr	r3, [pc, #12]	; (8008288 <tcp_new_port+0x50>)
 800827a:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 800827c:	bd10      	pop	{r4, pc}
 800827e:	4b02      	ldr	r3, [pc, #8]	; (8008288 <tcp_new_port+0x50>)
 8008280:	8018      	strh	r0, [r3, #0]
          return 0;
 8008282:	4620      	mov	r0, r4
 8008284:	e7fa      	b.n	800827c <tcp_new_port+0x44>
 8008286:	bf00      	nop
 8008288:	20000038 	.word	0x20000038
 800828c:	08011844 	.word	0x08011844

08008290 <tcp_close_shutdown_fin>:
{
 8008290:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008292:	4604      	mov	r4, r0
 8008294:	b140      	cbz	r0, 80082a8 <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8008296:	7d23      	ldrb	r3, [r4, #20]
 8008298:	2b04      	cmp	r3, #4
 800829a:	d018      	beq.n	80082ce <tcp_close_shutdown_fin+0x3e>
 800829c:	2b07      	cmp	r3, #7
 800829e:	d01d      	beq.n	80082dc <tcp_close_shutdown_fin+0x4c>
 80082a0:	2b03      	cmp	r3, #3
 80082a2:	d009      	beq.n	80082b8 <tcp_close_shutdown_fin+0x28>
 80082a4:	2000      	movs	r0, #0
}
 80082a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80082a8:	4b14      	ldr	r3, [pc, #80]	; (80082fc <tcp_close_shutdown_fin+0x6c>)
 80082aa:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80082ae:	4914      	ldr	r1, [pc, #80]	; (8008300 <tcp_close_shutdown_fin+0x70>)
 80082b0:	4814      	ldr	r0, [pc, #80]	; (8008304 <tcp_close_shutdown_fin+0x74>)
 80082b2:	f006 f875 	bl	800e3a0 <iprintf>
 80082b6:	e7ee      	b.n	8008296 <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 80082b8:	4620      	mov	r0, r4
 80082ba:	f003 fbbb 	bl	800ba34 <tcp_send_fin>
      if (err == ERR_OK) {
 80082be:	b9a0      	cbnz	r0, 80082ea <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80082c0:	2305      	movs	r3, #5
 80082c2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80082c4:	4620      	mov	r0, r4
 80082c6:	f003 fd3b 	bl	800bd40 <tcp_output>
  return err;
 80082ca:	2000      	movs	r0, #0
 80082cc:	e7eb      	b.n	80082a6 <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 80082ce:	4620      	mov	r0, r4
 80082d0:	f003 fbb0 	bl	800ba34 <tcp_send_fin>
      if (err == ERR_OK) {
 80082d4:	b948      	cbnz	r0, 80082ea <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 80082d6:	2305      	movs	r3, #5
 80082d8:	7523      	strb	r3, [r4, #20]
 80082da:	e7f3      	b.n	80082c4 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 80082dc:	4620      	mov	r0, r4
 80082de:	f003 fba9 	bl	800ba34 <tcp_send_fin>
      if (err == ERR_OK) {
 80082e2:	b910      	cbnz	r0, 80082ea <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 80082e4:	2309      	movs	r3, #9
 80082e6:	7523      	strb	r3, [r4, #20]
 80082e8:	e7ec      	b.n	80082c4 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 80082ea:	f1b0 3fff 	cmp.w	r0, #4294967295
 80082ee:	d1da      	bne.n	80082a6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80082f0:	8b63      	ldrh	r3, [r4, #26]
 80082f2:	f043 0308 	orr.w	r3, r3, #8
 80082f6:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 80082f8:	2000      	movs	r0, #0
 80082fa:	e7d4      	b.n	80082a6 <tcp_close_shutdown_fin+0x16>
 80082fc:	080111b8 	.word	0x080111b8
 8008300:	080111e8 	.word	0x080111e8
 8008304:	0800f6b8 	.word	0x0800f6b8

08008308 <tcp_init>:
{
 8008308:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800830a:	f006 f861 	bl	800e3d0 <rand>
 800830e:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008312:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008316:	4b01      	ldr	r3, [pc, #4]	; (800831c <tcp_init+0x14>)
 8008318:	8018      	strh	r0, [r3, #0]
}
 800831a:	bd08      	pop	{r3, pc}
 800831c:	20000038 	.word	0x20000038

08008320 <tcp_free>:
{
 8008320:	b510      	push	{r4, lr}
 8008322:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008324:	7d03      	ldrb	r3, [r0, #20]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d004      	beq.n	8008334 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 800832a:	4621      	mov	r1, r4
 800832c:	2001      	movs	r0, #1
 800832e:	f7ff f9d7 	bl	80076e0 <memp_free>
}
 8008332:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008334:	4b03      	ldr	r3, [pc, #12]	; (8008344 <tcp_free+0x24>)
 8008336:	22d4      	movs	r2, #212	; 0xd4
 8008338:	4903      	ldr	r1, [pc, #12]	; (8008348 <tcp_free+0x28>)
 800833a:	4804      	ldr	r0, [pc, #16]	; (800834c <tcp_free+0x2c>)
 800833c:	f006 f830 	bl	800e3a0 <iprintf>
 8008340:	e7f3      	b.n	800832a <tcp_free+0xa>
 8008342:	bf00      	nop
 8008344:	080111b8 	.word	0x080111b8
 8008348:	080111f4 	.word	0x080111f4
 800834c:	0800f6b8 	.word	0x0800f6b8

08008350 <tcp_bind>:
{
 8008350:	b570      	push	{r4, r5, r6, lr}
    ipaddr = IP4_ADDR_ANY;
 8008352:	4c2a      	ldr	r4, [pc, #168]	; (80083fc <tcp_bind+0xac>)
 8008354:	2900      	cmp	r1, #0
 8008356:	bf18      	it	ne
 8008358:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800835a:	b168      	cbz	r0, 8008378 <tcp_bind+0x28>
 800835c:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800835e:	7d03      	ldrb	r3, [r0, #20]
 8008360:	b9a3      	cbnz	r3, 800838c <tcp_bind+0x3c>
  if (port == 0) {
 8008362:	b1ea      	cbz	r2, 80083a0 <tcp_bind+0x50>
 8008364:	4e26      	ldr	r6, [pc, #152]	; (8008400 <tcp_bind+0xb0>)
 8008366:	f106 0c10 	add.w	ip, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800836a:	f856 3b04 	ldr.w	r3, [r6], #4
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	bb53      	cbnz	r3, 80083c8 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8008372:	4566      	cmp	r6, ip
 8008374:	d1f9      	bne.n	800836a <tcp_bind+0x1a>
 8008376:	e017      	b.n	80083a8 <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008378:	4b22      	ldr	r3, [pc, #136]	; (8008404 <tcp_bind+0xb4>)
 800837a:	f240 22a9 	movw	r2, #681	; 0x2a9
 800837e:	4922      	ldr	r1, [pc, #136]	; (8008408 <tcp_bind+0xb8>)
 8008380:	4822      	ldr	r0, [pc, #136]	; (800840c <tcp_bind+0xbc>)
 8008382:	f006 f80d 	bl	800e3a0 <iprintf>
 8008386:	f06f 000f 	mvn.w	r0, #15
 800838a:	e019      	b.n	80083c0 <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800838c:	4b1d      	ldr	r3, [pc, #116]	; (8008404 <tcp_bind+0xb4>)
 800838e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008392:	491f      	ldr	r1, [pc, #124]	; (8008410 <tcp_bind+0xc0>)
 8008394:	481d      	ldr	r0, [pc, #116]	; (800840c <tcp_bind+0xbc>)
 8008396:	f006 f803 	bl	800e3a0 <iprintf>
 800839a:	f06f 0005 	mvn.w	r0, #5
 800839e:	e00f      	b.n	80083c0 <tcp_bind+0x70>
    port = tcp_new_port();
 80083a0:	f7ff ff4a 	bl	8008238 <tcp_new_port>
    if (port == 0) {
 80083a4:	4602      	mov	r2, r0
 80083a6:	b1e0      	cbz	r0, 80083e2 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 80083a8:	b114      	cbz	r4, 80083b0 <tcp_bind+0x60>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80083ae:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 80083b0:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80083b2:	4b18      	ldr	r3, [pc, #96]	; (8008414 <tcp_bind+0xc4>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	60ea      	str	r2, [r5, #12]
 80083b8:	601d      	str	r5, [r3, #0]
 80083ba:	f003 ffd1 	bl	800c360 <tcp_timer_needed>
  return ERR_OK;
 80083be:	2000      	movs	r0, #0
}
 80083c0:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d0d4      	beq.n	8008372 <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 80083c8:	8ad9      	ldrh	r1, [r3, #22]
 80083ca:	4291      	cmp	r1, r2
 80083cc:	d1f9      	bne.n	80083c2 <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 80083ce:	6819      	ldr	r1, [r3, #0]
 80083d0:	b151      	cbz	r1, 80083e8 <tcp_bind+0x98>
 80083d2:	b164      	cbz	r4, 80083ee <tcp_bind+0x9e>
                 ip_addr_isany(ipaddr) ||
 80083d4:	6820      	ldr	r0, [r4, #0]
 80083d6:	b168      	cbz	r0, 80083f4 <tcp_bind+0xa4>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80083d8:	4281      	cmp	r1, r0
 80083da:	d1f2      	bne.n	80083c2 <tcp_bind+0x72>
              return ERR_USE;
 80083dc:	f06f 0007 	mvn.w	r0, #7
 80083e0:	e7ee      	b.n	80083c0 <tcp_bind+0x70>
      return ERR_BUF;
 80083e2:	f06f 0001 	mvn.w	r0, #1
 80083e6:	e7eb      	b.n	80083c0 <tcp_bind+0x70>
              return ERR_USE;
 80083e8:	f06f 0007 	mvn.w	r0, #7
 80083ec:	e7e8      	b.n	80083c0 <tcp_bind+0x70>
 80083ee:	f06f 0007 	mvn.w	r0, #7
 80083f2:	e7e5      	b.n	80083c0 <tcp_bind+0x70>
 80083f4:	f06f 0007 	mvn.w	r0, #7
 80083f8:	e7e2      	b.n	80083c0 <tcp_bind+0x70>
 80083fa:	bf00      	nop
 80083fc:	0801281c 	.word	0x0801281c
 8008400:	08011844 	.word	0x08011844
 8008404:	080111b8 	.word	0x080111b8
 8008408:	08011208 	.word	0x08011208
 800840c:	0800f6b8 	.word	0x0800f6b8
 8008410:	08011220 	.word	0x08011220
 8008414:	20010c6c 	.word	0x20010c6c

08008418 <tcp_listen_with_backlog_and_err>:
{
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800841c:	4604      	mov	r4, r0
 800841e:	b330      	cbz	r0, 800846e <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008420:	7d03      	ldrb	r3, [r0, #20]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d12e      	bne.n	8008484 <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008426:	2002      	movs	r0, #2
 8008428:	f7ff f92a 	bl	8007680 <memp_malloc>
  if (lpcb == NULL) {
 800842c:	4605      	mov	r5, r0
 800842e:	2800      	cmp	r0, #0
 8008430:	d04b      	beq.n	80084ca <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 8008432:	6923      	ldr	r3, [r4, #16]
 8008434:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008436:	8ae3      	ldrh	r3, [r4, #22]
 8008438:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 800843a:	2301      	movs	r3, #1
 800843c:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 800843e:	7d63      	ldrb	r3, [r4, #21]
 8008440:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008442:	7a63      	ldrb	r3, [r4, #9]
 8008444:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008446:	2300      	movs	r3, #0
 8008448:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 800844a:	7ae3      	ldrb	r3, [r4, #11]
 800844c:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 800844e:	7aa3      	ldrb	r3, [r4, #10]
 8008450:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8008456:	8ae3      	ldrh	r3, [r4, #22]
 8008458:	b33b      	cbz	r3, 80084aa <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800845a:	4b1d      	ldr	r3, [pc, #116]	; (80084d0 <tcp_listen_with_backlog_and_err+0xb8>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	42a3      	cmp	r3, r4
 8008460:	d01b      	beq.n	800849a <tcp_listen_with_backlog_and_err+0x82>
 8008462:	b303      	cbz	r3, 80084a6 <tcp_listen_with_backlog_and_err+0x8e>
 8008464:	68da      	ldr	r2, [r3, #12]
 8008466:	42a2      	cmp	r2, r4
 8008468:	d01b      	beq.n	80084a2 <tcp_listen_with_backlog_and_err+0x8a>
 800846a:	4613      	mov	r3, r2
 800846c:	e7f9      	b.n	8008462 <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800846e:	4b19      	ldr	r3, [pc, #100]	; (80084d4 <tcp_listen_with_backlog_and_err+0xbc>)
 8008470:	f240 3259 	movw	r2, #857	; 0x359
 8008474:	4918      	ldr	r1, [pc, #96]	; (80084d8 <tcp_listen_with_backlog_and_err+0xc0>)
 8008476:	4819      	ldr	r0, [pc, #100]	; (80084dc <tcp_listen_with_backlog_and_err+0xc4>)
 8008478:	f005 ff92 	bl	800e3a0 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 800847c:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800847e:	f06f 030f 	mvn.w	r3, #15
 8008482:	e01e      	b.n	80084c2 <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008484:	4b13      	ldr	r3, [pc, #76]	; (80084d4 <tcp_listen_with_backlog_and_err+0xbc>)
 8008486:	f240 325a 	movw	r2, #858	; 0x35a
 800848a:	4915      	ldr	r1, [pc, #84]	; (80084e0 <tcp_listen_with_backlog_and_err+0xc8>)
 800848c:	4813      	ldr	r0, [pc, #76]	; (80084dc <tcp_listen_with_backlog_and_err+0xc4>)
 800848e:	f005 ff87 	bl	800e3a0 <iprintf>
 8008492:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008496:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008498:	e013      	b.n	80084c2 <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800849a:	68e2      	ldr	r2, [r4, #12]
 800849c:	4b0c      	ldr	r3, [pc, #48]	; (80084d0 <tcp_listen_with_backlog_and_err+0xb8>)
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e001      	b.n	80084a6 <tcp_listen_with_backlog_and_err+0x8e>
 80084a2:	68e2      	ldr	r2, [r4, #12]
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	2300      	movs	r3, #0
 80084a8:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7ff ff38 	bl	8008320 <tcp_free>
  lpcb->accept = tcp_accept_null;
 80084b0:	4b0c      	ldr	r3, [pc, #48]	; (80084e4 <tcp_listen_with_backlog_and_err+0xcc>)
 80084b2:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80084b4:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <tcp_listen_with_backlog_and_err+0xd0>)
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	60ea      	str	r2, [r5, #12]
 80084ba:	601d      	str	r5, [r3, #0]
 80084bc:	f003 ff50 	bl	800c360 <tcp_timer_needed>
  res = ERR_OK;
 80084c0:	2300      	movs	r3, #0
  if (err != NULL) {
 80084c2:	b106      	cbz	r6, 80084c6 <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 80084c4:	7033      	strb	r3, [r6, #0]
}
 80084c6:	4628      	mov	r0, r5
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 80084ca:	f04f 33ff 	mov.w	r3, #4294967295
 80084ce:	e7f8      	b.n	80084c2 <tcp_listen_with_backlog_and_err+0xaa>
 80084d0:	20010c6c 	.word	0x20010c6c
 80084d4:	080111b8 	.word	0x080111b8
 80084d8:	08011248 	.word	0x08011248
 80084dc:	0800f6b8 	.word	0x0800f6b8
 80084e0:	08011278 	.word	0x08011278
 80084e4:	08008a4d 	.word	0x08008a4d
 80084e8:	20010c70 	.word	0x20010c70

080084ec <tcp_listen_with_backlog>:
{
 80084ec:	b508      	push	{r3, lr}
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80084ee:	2200      	movs	r2, #0
 80084f0:	f7ff ff92 	bl	8008418 <tcp_listen_with_backlog_and_err>
}
 80084f4:	bd08      	pop	{r3, pc}
	...

080084f8 <tcp_update_rcv_ann_wnd>:
{
 80084f8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80084fa:	4604      	mov	r4, r0
 80084fc:	b188      	cbz	r0, 8008522 <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80084fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008500:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008504:	1950      	adds	r0, r2, r5
 8008506:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008508:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 800850c:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 8008510:	bf94      	ite	ls
 8008512:	eba0 010c 	subls.w	r1, r0, ip
 8008516:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 800851a:	2900      	cmp	r1, #0
 800851c:	db09      	blt.n	8008532 <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800851e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8008520:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008522:	4b0e      	ldr	r3, [pc, #56]	; (800855c <tcp_update_rcv_ann_wnd+0x64>)
 8008524:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008528:	490d      	ldr	r1, [pc, #52]	; (8008560 <tcp_update_rcv_ann_wnd+0x68>)
 800852a:	480e      	ldr	r0, [pc, #56]	; (8008564 <tcp_update_rcv_ann_wnd+0x6c>)
 800852c:	f005 ff38 	bl	800e3a0 <iprintf>
 8008530:	e7e5      	b.n	80084fe <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008532:	1aea      	subs	r2, r5, r3
 8008534:	2a00      	cmp	r2, #0
 8008536:	dd02      	ble.n	800853e <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8008538:	2000      	movs	r0, #0
 800853a:	8560      	strh	r0, [r4, #42]	; 0x2a
 800853c:	e7f0      	b.n	8008520 <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800853e:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008540:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008544:	d202      	bcs.n	800854c <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008546:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008548:	2000      	movs	r0, #0
 800854a:	e7e9      	b.n	8008520 <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800854c:	4b03      	ldr	r3, [pc, #12]	; (800855c <tcp_update_rcv_ann_wnd+0x64>)
 800854e:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008552:	4905      	ldr	r1, [pc, #20]	; (8008568 <tcp_update_rcv_ann_wnd+0x70>)
 8008554:	4803      	ldr	r0, [pc, #12]	; (8008564 <tcp_update_rcv_ann_wnd+0x6c>)
 8008556:	f005 ff23 	bl	800e3a0 <iprintf>
 800855a:	e7f4      	b.n	8008546 <tcp_update_rcv_ann_wnd+0x4e>
 800855c:	080111b8 	.word	0x080111b8
 8008560:	080112b0 	.word	0x080112b0
 8008564:	0800f6b8 	.word	0x0800f6b8
 8008568:	080112d4 	.word	0x080112d4

0800856c <tcp_recved>:
{
 800856c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800856e:	b178      	cbz	r0, 8008590 <tcp_recved+0x24>
 8008570:	460c      	mov	r4, r1
 8008572:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008574:	7d03      	ldrb	r3, [r0, #20]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d012      	beq.n	80085a0 <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800857a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800857c:	1919      	adds	r1, r3, r4
 800857e:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008580:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008584:	d814      	bhi.n	80085b0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008586:	428b      	cmp	r3, r1
 8008588:	bf88      	it	hi
 800858a:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 800858e:	e011      	b.n	80085b4 <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008590:	4b10      	ldr	r3, [pc, #64]	; (80085d4 <tcp_recved+0x68>)
 8008592:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008596:	4910      	ldr	r1, [pc, #64]	; (80085d8 <tcp_recved+0x6c>)
 8008598:	4810      	ldr	r0, [pc, #64]	; (80085dc <tcp_recved+0x70>)
 800859a:	f005 ff01 	bl	800e3a0 <iprintf>
 800859e:	e010      	b.n	80085c2 <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80085a0:	4b0c      	ldr	r3, [pc, #48]	; (80085d4 <tcp_recved+0x68>)
 80085a2:	f240 32d2 	movw	r2, #978	; 0x3d2
 80085a6:	490e      	ldr	r1, [pc, #56]	; (80085e0 <tcp_recved+0x74>)
 80085a8:	480c      	ldr	r0, [pc, #48]	; (80085dc <tcp_recved+0x70>)
 80085aa:	f005 fef9 	bl	800e3a0 <iprintf>
 80085ae:	e7e4      	b.n	800857a <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80085b0:	f44f 6106 	mov.w	r1, #2144	; 0x860
 80085b4:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80085b6:	4628      	mov	r0, r5
 80085b8:	f7ff ff9e 	bl	80084f8 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80085bc:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80085c0:	d200      	bcs.n	80085c4 <tcp_recved+0x58>
}
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 80085c4:	8b6b      	ldrh	r3, [r5, #26]
 80085c6:	f043 0302 	orr.w	r3, r3, #2
 80085ca:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 80085cc:	4628      	mov	r0, r5
 80085ce:	f003 fbb7 	bl	800bd40 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 80085d2:	e7f6      	b.n	80085c2 <tcp_recved+0x56>
 80085d4:	080111b8 	.word	0x080111b8
 80085d8:	080112f0 	.word	0x080112f0
 80085dc:	0800f6b8 	.word	0x0800f6b8
 80085e0:	08011308 	.word	0x08011308

080085e4 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 80085e4:	b150      	cbz	r0, 80085fc <tcp_seg_free+0x18>
{
 80085e6:	b510      	push	{r4, lr}
 80085e8:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 80085ea:	6840      	ldr	r0, [r0, #4]
 80085ec:	b108      	cbz	r0, 80085f2 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 80085ee:	f7ff fb39 	bl	8007c64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80085f2:	4621      	mov	r1, r4
 80085f4:	2003      	movs	r0, #3
 80085f6:	f7ff f873 	bl	80076e0 <memp_free>
  }
}
 80085fa:	bd10      	pop	{r4, pc}
 80085fc:	4770      	bx	lr

080085fe <tcp_segs_free>:
{
 80085fe:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8008600:	4604      	mov	r4, r0
 8008602:	b128      	cbz	r0, 8008610 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 8008604:	4620      	mov	r0, r4
 8008606:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8008608:	f7ff ffec 	bl	80085e4 <tcp_seg_free>
  while (seg != NULL) {
 800860c:	2c00      	cmp	r4, #0
 800860e:	d1f9      	bne.n	8008604 <tcp_segs_free+0x6>
}
 8008610:	bd10      	pop	{r4, pc}
	...

08008614 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8008614:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8008616:	b108      	cbz	r0, 800861c <tcp_setprio+0x8>

  pcb->prio = prio;
 8008618:	7541      	strb	r1, [r0, #21]
}
 800861a:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800861c:	4b03      	ldr	r3, [pc, #12]	; (800862c <tcp_setprio+0x18>)
 800861e:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8008622:	4903      	ldr	r1, [pc, #12]	; (8008630 <tcp_setprio+0x1c>)
 8008624:	4803      	ldr	r0, [pc, #12]	; (8008634 <tcp_setprio+0x20>)
 8008626:	f005 febb 	bl	800e3a0 <iprintf>
 800862a:	e7f6      	b.n	800861a <tcp_setprio+0x6>
 800862c:	080111b8 	.word	0x080111b8
 8008630:	08011330 	.word	0x08011330
 8008634:	0800f6b8 	.word	0x0800f6b8

08008638 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008638:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800863a:	4605      	mov	r5, r0
 800863c:	b188      	cbz	r0, 8008662 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800863e:	2003      	movs	r0, #3
 8008640:	f7ff f81e 	bl	8007680 <memp_malloc>
  if (cseg == NULL) {
 8008644:	4604      	mov	r4, r0
 8008646:	b150      	cbz	r0, 800865e <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008648:	6828      	ldr	r0, [r5, #0]
 800864a:	6869      	ldr	r1, [r5, #4]
 800864c:	68aa      	ldr	r2, [r5, #8]
 800864e:	68eb      	ldr	r3, [r5, #12]
 8008650:	6020      	str	r0, [r4, #0]
 8008652:	6061      	str	r1, [r4, #4]
 8008654:	60a2      	str	r2, [r4, #8]
 8008656:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8008658:	6860      	ldr	r0, [r4, #4]
 800865a:	f7ff fc87 	bl	8007f6c <pbuf_ref>
  return cseg;
}
 800865e:	4620      	mov	r0, r4
 8008660:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008662:	4b04      	ldr	r3, [pc, #16]	; (8008674 <tcp_seg_copy+0x3c>)
 8008664:	f240 6282 	movw	r2, #1666	; 0x682
 8008668:	4903      	ldr	r1, [pc, #12]	; (8008678 <tcp_seg_copy+0x40>)
 800866a:	4804      	ldr	r0, [pc, #16]	; (800867c <tcp_seg_copy+0x44>)
 800866c:	f005 fe98 	bl	800e3a0 <iprintf>
 8008670:	e7e5      	b.n	800863e <tcp_seg_copy+0x6>
 8008672:	bf00      	nop
 8008674:	080111b8 	.word	0x080111b8
 8008678:	0801134c 	.word	0x0801134c
 800867c:	0800f6b8 	.word	0x0800f6b8

08008680 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008680:	b100      	cbz	r0, 8008684 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008682:	6101      	str	r1, [r0, #16]
  }
}
 8008684:	4770      	bx	lr
	...

08008688 <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008688:	b180      	cbz	r0, 80086ac <tcp_recv+0x24>
{
 800868a:	b538      	push	{r3, r4, r5, lr}
 800868c:	460c      	mov	r4, r1
 800868e:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008690:	7d03      	ldrb	r3, [r0, #20]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d002      	beq.n	800869c <tcp_recv+0x14>
    pcb->recv = recv;
 8008696:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 800869a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800869c:	4b04      	ldr	r3, [pc, #16]	; (80086b0 <tcp_recv+0x28>)
 800869e:	f240 72df 	movw	r2, #2015	; 0x7df
 80086a2:	4904      	ldr	r1, [pc, #16]	; (80086b4 <tcp_recv+0x2c>)
 80086a4:	4804      	ldr	r0, [pc, #16]	; (80086b8 <tcp_recv+0x30>)
 80086a6:	f005 fe7b 	bl	800e3a0 <iprintf>
 80086aa:	e7f4      	b.n	8008696 <tcp_recv+0xe>
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	080111b8 	.word	0x080111b8
 80086b4:	08011368 	.word	0x08011368
 80086b8:	0800f6b8 	.word	0x0800f6b8

080086bc <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086bc:	b180      	cbz	r0, 80086e0 <tcp_sent+0x24>
{
 80086be:	b538      	push	{r3, r4, r5, lr}
 80086c0:	460c      	mov	r4, r1
 80086c2:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80086c4:	7d03      	ldrb	r3, [r0, #20]
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d002      	beq.n	80086d0 <tcp_sent+0x14>
    pcb->sent = sent;
 80086ca:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80086d0:	4b04      	ldr	r3, [pc, #16]	; (80086e4 <tcp_sent+0x28>)
 80086d2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80086d6:	4904      	ldr	r1, [pc, #16]	; (80086e8 <tcp_sent+0x2c>)
 80086d8:	4804      	ldr	r0, [pc, #16]	; (80086ec <tcp_sent+0x30>)
 80086da:	f005 fe61 	bl	800e3a0 <iprintf>
 80086de:	e7f4      	b.n	80086ca <tcp_sent+0xe>
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	080111b8 	.word	0x080111b8
 80086e8:	08011390 	.word	0x08011390
 80086ec:	0800f6b8 	.word	0x0800f6b8

080086f0 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80086f0:	b180      	cbz	r0, 8008714 <tcp_err+0x24>
{
 80086f2:	b538      	push	{r3, r4, r5, lr}
 80086f4:	460c      	mov	r4, r1
 80086f6:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80086f8:	7d03      	ldrb	r3, [r0, #20]
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d002      	beq.n	8008704 <tcp_err+0x14>
    pcb->errf = err;
 80086fe:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8008702:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008704:	4b04      	ldr	r3, [pc, #16]	; (8008718 <tcp_err+0x28>)
 8008706:	f640 020d 	movw	r2, #2061	; 0x80d
 800870a:	4904      	ldr	r1, [pc, #16]	; (800871c <tcp_err+0x2c>)
 800870c:	4804      	ldr	r0, [pc, #16]	; (8008720 <tcp_err+0x30>)
 800870e:	f005 fe47 	bl	800e3a0 <iprintf>
 8008712:	e7f4      	b.n	80086fe <tcp_err+0xe>
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	080111b8 	.word	0x080111b8
 800871c:	080113b8 	.word	0x080113b8
 8008720:	0800f6b8 	.word	0x0800f6b8

08008724 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008724:	b118      	cbz	r0, 800872e <tcp_accept+0xa>
 8008726:	7d02      	ldrb	r2, [r0, #20]
 8008728:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 800872a:	bf08      	it	eq
 800872c:	6181      	streq	r1, [r0, #24]
  }
}
 800872e:	4770      	bx	lr

08008730 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008730:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008732:	b148      	cbz	r0, 8008748 <tcp_poll+0x18>
 8008734:	460d      	mov	r5, r1
 8008736:	4614      	mov	r4, r2
 8008738:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800873a:	7d03      	ldrb	r3, [r0, #20]
 800873c:	2b01      	cmp	r3, #1
 800873e:	d00b      	beq.n	8008758 <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008740:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008744:	7774      	strb	r4, [r6, #29]
}
 8008746:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008748:	4b07      	ldr	r3, [pc, #28]	; (8008768 <tcp_poll+0x38>)
 800874a:	f640 023d 	movw	r2, #2109	; 0x83d
 800874e:	4907      	ldr	r1, [pc, #28]	; (800876c <tcp_poll+0x3c>)
 8008750:	4807      	ldr	r0, [pc, #28]	; (8008770 <tcp_poll+0x40>)
 8008752:	f005 fe25 	bl	800e3a0 <iprintf>
 8008756:	e7f6      	b.n	8008746 <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008758:	4b03      	ldr	r3, [pc, #12]	; (8008768 <tcp_poll+0x38>)
 800875a:	f640 023e 	movw	r2, #2110	; 0x83e
 800875e:	4905      	ldr	r1, [pc, #20]	; (8008774 <tcp_poll+0x44>)
 8008760:	4803      	ldr	r0, [pc, #12]	; (8008770 <tcp_poll+0x40>)
 8008762:	f005 fe1d 	bl	800e3a0 <iprintf>
 8008766:	e7eb      	b.n	8008740 <tcp_poll+0x10>
 8008768:	080111b8 	.word	0x080111b8
 800876c:	080113e0 	.word	0x080113e0
 8008770:	0800f6b8 	.word	0x0800f6b8
 8008774:	080113f8 	.word	0x080113f8

08008778 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008778:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800877a:	b130      	cbz	r0, 800878a <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800877c:	4b07      	ldr	r3, [pc, #28]	; (800879c <tcp_next_iss+0x24>)
 800877e:	6818      	ldr	r0, [r3, #0]
 8008780:	4a07      	ldr	r2, [pc, #28]	; (80087a0 <tcp_next_iss+0x28>)
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	4410      	add	r0, r2
 8008786:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008788:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800878a:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <tcp_next_iss+0x2c>)
 800878c:	f640 02af 	movw	r2, #2223	; 0x8af
 8008790:	4905      	ldr	r1, [pc, #20]	; (80087a8 <tcp_next_iss+0x30>)
 8008792:	4806      	ldr	r0, [pc, #24]	; (80087ac <tcp_next_iss+0x34>)
 8008794:	f005 fe04 	bl	800e3a0 <iprintf>
 8008798:	e7f0      	b.n	800877c <tcp_next_iss+0x4>
 800879a:	bf00      	nop
 800879c:	20000034 	.word	0x20000034
 80087a0:	20010c74 	.word	0x20010c74
 80087a4:	080111b8 	.word	0x080111b8
 80087a8:	08011418 	.word	0x08011418
 80087ac:	0800f6b8 	.word	0x0800f6b8

080087b0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80087b0:	b538      	push	{r3, r4, r5, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80087b6:	b162      	cbz	r2, 80087d2 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80087b8:	b14c      	cbz	r4, 80087ce <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 80087ba:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80087bc:	b13b      	cbz	r3, 80087ce <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80087be:	2b28      	cmp	r3, #40	; 0x28
 80087c0:	bf86      	itte	hi
 80087c2:	3b28      	subhi	r3, #40	; 0x28
 80087c4:	b29b      	uxthhi	r3, r3
 80087c6:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80087c8:	429d      	cmp	r5, r3
 80087ca:	bf28      	it	cs
 80087cc:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 80087ce:	4628      	mov	r0, r5
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80087d2:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <tcp_eff_send_mss_netif+0x34>)
 80087d4:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80087d8:	4903      	ldr	r1, [pc, #12]	; (80087e8 <tcp_eff_send_mss_netif+0x38>)
 80087da:	4804      	ldr	r0, [pc, #16]	; (80087ec <tcp_eff_send_mss_netif+0x3c>)
 80087dc:	f005 fde0 	bl	800e3a0 <iprintf>
 80087e0:	e7ea      	b.n	80087b8 <tcp_eff_send_mss_netif+0x8>
 80087e2:	bf00      	nop
 80087e4:	080111b8 	.word	0x080111b8
 80087e8:	08011434 	.word	0x08011434
 80087ec:	0800f6b8 	.word	0x0800f6b8

080087f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80087f0:	b510      	push	{r4, lr}
 80087f2:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 80087f4:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80087f6:	b118      	cbz	r0, 8008800 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 80087f8:	f7ff ff01 	bl	80085fe <tcp_segs_free>
    pcb->ooseq = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8008800:	bd10      	pop	{r4, pc}
	...

08008804 <tcp_pcb_purge>:
{
 8008804:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008806:	b1f8      	cbz	r0, 8008848 <tcp_pcb_purge+0x44>
 8008808:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800880a:	7d03      	ldrb	r3, [r0, #20]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d91a      	bls.n	8008846 <tcp_pcb_purge+0x42>
 8008810:	2b0a      	cmp	r3, #10
 8008812:	d018      	beq.n	8008846 <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8008814:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8008816:	b118      	cbz	r0, 8008820 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 8008818:	f7ff fa24 	bl	8007c64 <pbuf_free>
      pcb->refused_data = NULL;
 800881c:	2300      	movs	r3, #0
 800881e:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8008820:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008822:	b113      	cbz	r3, 800882a <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8008824:	4620      	mov	r0, r4
 8008826:	f7ff ffe3 	bl	80087f0 <tcp_free_ooseq>
    pcb->rtime = -1;
 800882a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800882e:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8008830:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008832:	f7ff fee4 	bl	80085fe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008836:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008838:	f7ff fee1 	bl	80085fe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800883c:	2300      	movs	r3, #0
 800883e:	66e3      	str	r3, [r4, #108]	; 0x6c
 8008840:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 8008842:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8008846:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008848:	4b03      	ldr	r3, [pc, #12]	; (8008858 <tcp_pcb_purge+0x54>)
 800884a:	f640 0251 	movw	r2, #2129	; 0x851
 800884e:	4903      	ldr	r1, [pc, #12]	; (800885c <tcp_pcb_purge+0x58>)
 8008850:	4803      	ldr	r0, [pc, #12]	; (8008860 <tcp_pcb_purge+0x5c>)
 8008852:	f005 fda5 	bl	800e3a0 <iprintf>
 8008856:	e7f6      	b.n	8008846 <tcp_pcb_purge+0x42>
 8008858:	080111b8 	.word	0x080111b8
 800885c:	0801145c 	.word	0x0801145c
 8008860:	0800f6b8 	.word	0x0800f6b8

08008864 <tcp_pcb_remove>:
{
 8008864:	b538      	push	{r3, r4, r5, lr}
 8008866:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008868:	460c      	mov	r4, r1
 800886a:	b149      	cbz	r1, 8008880 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800886c:	b185      	cbz	r5, 8008890 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 800886e:	682b      	ldr	r3, [r5, #0]
 8008870:	42a3      	cmp	r3, r4
 8008872:	d015      	beq.n	80088a0 <tcp_pcb_remove+0x3c>
 8008874:	b1cb      	cbz	r3, 80088aa <tcp_pcb_remove+0x46>
 8008876:	68da      	ldr	r2, [r3, #12]
 8008878:	42a2      	cmp	r2, r4
 800887a:	d014      	beq.n	80088a6 <tcp_pcb_remove+0x42>
 800887c:	4613      	mov	r3, r2
 800887e:	e7f9      	b.n	8008874 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8008880:	4b25      	ldr	r3, [pc, #148]	; (8008918 <tcp_pcb_remove+0xb4>)
 8008882:	f640 0283 	movw	r2, #2179	; 0x883
 8008886:	4925      	ldr	r1, [pc, #148]	; (800891c <tcp_pcb_remove+0xb8>)
 8008888:	4825      	ldr	r0, [pc, #148]	; (8008920 <tcp_pcb_remove+0xbc>)
 800888a:	f005 fd89 	bl	800e3a0 <iprintf>
 800888e:	e7ed      	b.n	800886c <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8008890:	4b21      	ldr	r3, [pc, #132]	; (8008918 <tcp_pcb_remove+0xb4>)
 8008892:	f640 0284 	movw	r2, #2180	; 0x884
 8008896:	4923      	ldr	r1, [pc, #140]	; (8008924 <tcp_pcb_remove+0xc0>)
 8008898:	4821      	ldr	r0, [pc, #132]	; (8008920 <tcp_pcb_remove+0xbc>)
 800889a:	f005 fd81 	bl	800e3a0 <iprintf>
 800889e:	e7e6      	b.n	800886e <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 80088a0:	68e3      	ldr	r3, [r4, #12]
 80088a2:	602b      	str	r3, [r5, #0]
 80088a4:	e001      	b.n	80088aa <tcp_pcb_remove+0x46>
 80088a6:	68e2      	ldr	r2, [r4, #12]
 80088a8:	60da      	str	r2, [r3, #12]
 80088aa:	2300      	movs	r3, #0
 80088ac:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80088ae:	4620      	mov	r0, r4
 80088b0:	f7ff ffa8 	bl	8008804 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 80088b4:	7d23      	ldrb	r3, [r4, #20]
 80088b6:	2b0a      	cmp	r3, #10
 80088b8:	d005      	beq.n	80088c6 <tcp_pcb_remove+0x62>
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d01e      	beq.n	80088fc <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 80088be:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 80088c0:	f013 0f01 	tst.w	r3, #1
 80088c4:	d11e      	bne.n	8008904 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80088c6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80088c8:	b133      	cbz	r3, 80088d8 <tcp_pcb_remove+0x74>
 80088ca:	4b13      	ldr	r3, [pc, #76]	; (8008918 <tcp_pcb_remove+0xb4>)
 80088cc:	f640 0293 	movw	r2, #2195	; 0x893
 80088d0:	4915      	ldr	r1, [pc, #84]	; (8008928 <tcp_pcb_remove+0xc4>)
 80088d2:	4813      	ldr	r0, [pc, #76]	; (8008920 <tcp_pcb_remove+0xbc>)
 80088d4:	f005 fd64 	bl	800e3a0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80088d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80088da:	b133      	cbz	r3, 80088ea <tcp_pcb_remove+0x86>
 80088dc:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <tcp_pcb_remove+0xb4>)
 80088de:	f640 0294 	movw	r2, #2196	; 0x894
 80088e2:	4912      	ldr	r1, [pc, #72]	; (800892c <tcp_pcb_remove+0xc8>)
 80088e4:	480e      	ldr	r0, [pc, #56]	; (8008920 <tcp_pcb_remove+0xbc>)
 80088e6:	f005 fd5b 	bl	800e3a0 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80088ea:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80088ec:	b133      	cbz	r3, 80088fc <tcp_pcb_remove+0x98>
 80088ee:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <tcp_pcb_remove+0xb4>)
 80088f0:	f640 0296 	movw	r2, #2198	; 0x896
 80088f4:	490e      	ldr	r1, [pc, #56]	; (8008930 <tcp_pcb_remove+0xcc>)
 80088f6:	480a      	ldr	r0, [pc, #40]	; (8008920 <tcp_pcb_remove+0xbc>)
 80088f8:	f005 fd52 	bl	800e3a0 <iprintf>
  pcb->state = CLOSED;
 80088fc:	2300      	movs	r3, #0
 80088fe:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8008900:	82e3      	strh	r3, [r4, #22]
}
 8008902:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8008904:	f043 0302 	orr.w	r3, r3, #2
 8008908:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800890a:	4620      	mov	r0, r4
 800890c:	f003 fa18 	bl	800bd40 <tcp_output>
  if (pcb->state != LISTEN) {
 8008910:	7d23      	ldrb	r3, [r4, #20]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d0f2      	beq.n	80088fc <tcp_pcb_remove+0x98>
 8008916:	e7d6      	b.n	80088c6 <tcp_pcb_remove+0x62>
 8008918:	080111b8 	.word	0x080111b8
 800891c:	08011478 	.word	0x08011478
 8008920:	0800f6b8 	.word	0x0800f6b8
 8008924:	08011494 	.word	0x08011494
 8008928:	080114b4 	.word	0x080114b4
 800892c:	080114cc 	.word	0x080114cc
 8008930:	080114e8 	.word	0x080114e8

08008934 <tcp_abandon>:
{
 8008934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008938:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800893a:	b1f8      	cbz	r0, 800897c <tcp_abandon+0x48>
 800893c:	460d      	mov	r5, r1
 800893e:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8008940:	7d03      	ldrb	r3, [r0, #20]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d022      	beq.n	800898c <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 8008946:	7d23      	ldrb	r3, [r4, #20]
 8008948:	2b0a      	cmp	r3, #10
 800894a:	d027      	beq.n	800899c <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 800894c:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8008950:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 8008954:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 8008958:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 800895a:	2b00      	cmp	r3, #0
 800895c:	d147      	bne.n	80089ee <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 800895e:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 8008962:	f1ba 0f00 	cmp.w	sl, #0
 8008966:	d04c      	beq.n	8008a02 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008968:	4b2d      	ldr	r3, [pc, #180]	; (8008a20 <tcp_abandon+0xec>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	42a3      	cmp	r3, r4
 800896e:	d01d      	beq.n	80089ac <tcp_abandon+0x78>
 8008970:	b313      	cbz	r3, 80089b8 <tcp_abandon+0x84>
 8008972:	68da      	ldr	r2, [r3, #12]
 8008974:	42a2      	cmp	r2, r4
 8008976:	d01d      	beq.n	80089b4 <tcp_abandon+0x80>
 8008978:	4613      	mov	r3, r2
 800897a:	e7f9      	b.n	8008970 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800897c:	4b29      	ldr	r3, [pc, #164]	; (8008a24 <tcp_abandon+0xf0>)
 800897e:	f240 223d 	movw	r2, #573	; 0x23d
 8008982:	4929      	ldr	r1, [pc, #164]	; (8008a28 <tcp_abandon+0xf4>)
 8008984:	4829      	ldr	r0, [pc, #164]	; (8008a2c <tcp_abandon+0xf8>)
 8008986:	f005 fd0b 	bl	800e3a0 <iprintf>
 800898a:	e02d      	b.n	80089e8 <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800898c:	4b25      	ldr	r3, [pc, #148]	; (8008a24 <tcp_abandon+0xf0>)
 800898e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8008992:	4927      	ldr	r1, [pc, #156]	; (8008a30 <tcp_abandon+0xfc>)
 8008994:	4825      	ldr	r0, [pc, #148]	; (8008a2c <tcp_abandon+0xf8>)
 8008996:	f005 fd03 	bl	800e3a0 <iprintf>
 800899a:	e7d4      	b.n	8008946 <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800899c:	4621      	mov	r1, r4
 800899e:	4825      	ldr	r0, [pc, #148]	; (8008a34 <tcp_abandon+0x100>)
 80089a0:	f7ff ff60 	bl	8008864 <tcp_pcb_remove>
    tcp_free(pcb);
 80089a4:	4620      	mov	r0, r4
 80089a6:	f7ff fcbb 	bl	8008320 <tcp_free>
 80089aa:	e01d      	b.n	80089e8 <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80089ac:	68e2      	ldr	r2, [r4, #12]
 80089ae:	4b1c      	ldr	r3, [pc, #112]	; (8008a20 <tcp_abandon+0xec>)
 80089b0:	601a      	str	r2, [r3, #0]
 80089b2:	e001      	b.n	80089b8 <tcp_abandon+0x84>
 80089b4:	68e2      	ldr	r2, [r4, #12]
 80089b6:	60da      	str	r2, [r3, #12]
 80089b8:	2500      	movs	r5, #0
 80089ba:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 80089bc:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 80089be:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80089c0:	b108      	cbz	r0, 80089c6 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 80089c2:	f7ff fe1c 	bl	80085fe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 80089c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80089c8:	b108      	cbz	r0, 80089ce <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 80089ca:	f7ff fe18 	bl	80085fe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 80089ce:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80089d0:	b108      	cbz	r0, 80089d6 <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 80089d2:	f7ff fe14 	bl	80085fe <tcp_segs_free>
    if (send_rst) {
 80089d6:	b9b5      	cbnz	r5, 8008a06 <tcp_abandon+0xd2>
    tcp_free(pcb);
 80089d8:	4620      	mov	r0, r4
 80089da:	f7ff fca1 	bl	8008320 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80089de:	b11e      	cbz	r6, 80089e8 <tcp_abandon+0xb4>
 80089e0:	f06f 010c 	mvn.w	r1, #12
 80089e4:	4638      	mov	r0, r7
 80089e6:	47b0      	blx	r6
}
 80089e8:	b004      	add	sp, #16
 80089ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 80089ee:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80089f2:	4621      	mov	r1, r4
 80089f4:	4810      	ldr	r0, [pc, #64]	; (8008a38 <tcp_abandon+0x104>)
 80089f6:	f7ff ff35 	bl	8008864 <tcp_pcb_remove>
 80089fa:	4b10      	ldr	r3, [pc, #64]	; (8008a3c <tcp_abandon+0x108>)
 80089fc:	2201      	movs	r2, #1
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	e7dd      	b.n	80089be <tcp_abandon+0x8a>
    int send_rst = 0;
 8008a02:	2500      	movs	r5, #0
 8008a04:	e7db      	b.n	80089be <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8008a06:	8b23      	ldrh	r3, [r4, #24]
 8008a08:	9302      	str	r3, [sp, #8]
 8008a0a:	f8cd a004 	str.w	sl, [sp, #4]
 8008a0e:	1d23      	adds	r3, r4, #4
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	4623      	mov	r3, r4
 8008a14:	464a      	mov	r2, r9
 8008a16:	4641      	mov	r1, r8
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f003 f90f 	bl	800bc3c <tcp_rst>
 8008a1e:	e7db      	b.n	80089d8 <tcp_abandon+0xa4>
 8008a20:	20010c6c 	.word	0x20010c6c
 8008a24:	080111b8 	.word	0x080111b8
 8008a28:	08011500 	.word	0x08011500
 8008a2c:	0800f6b8 	.word	0x0800f6b8
 8008a30:	0801151c 	.word	0x0801151c
 8008a34:	20010c7c 	.word	0x20010c7c
 8008a38:	20010c64 	.word	0x20010c64
 8008a3c:	20010c68 	.word	0x20010c68

08008a40 <tcp_abort>:
{
 8008a40:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 8008a42:	2101      	movs	r1, #1
 8008a44:	f7ff ff76 	bl	8008934 <tcp_abandon>
}
 8008a48:	bd08      	pop	{r3, pc}
	...

08008a4c <tcp_accept_null>:
{
 8008a4c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008a4e:	460c      	mov	r4, r1
 8008a50:	b129      	cbz	r1, 8008a5e <tcp_accept_null+0x12>
  tcp_abort(pcb);
 8008a52:	4620      	mov	r0, r4
 8008a54:	f7ff fff4 	bl	8008a40 <tcp_abort>
}
 8008a58:	f06f 000c 	mvn.w	r0, #12
 8008a5c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8008a5e:	4b04      	ldr	r3, [pc, #16]	; (8008a70 <tcp_accept_null+0x24>)
 8008a60:	f240 320f 	movw	r2, #783	; 0x30f
 8008a64:	4903      	ldr	r1, [pc, #12]	; (8008a74 <tcp_accept_null+0x28>)
 8008a66:	4804      	ldr	r0, [pc, #16]	; (8008a78 <tcp_accept_null+0x2c>)
 8008a68:	f005 fc9a 	bl	800e3a0 <iprintf>
 8008a6c:	e7f1      	b.n	8008a52 <tcp_accept_null+0x6>
 8008a6e:	bf00      	nop
 8008a70:	080111b8 	.word	0x080111b8
 8008a74:	08011550 	.word	0x08011550
 8008a78:	0800f6b8 	.word	0x0800f6b8

08008a7c <tcp_netif_ip_addr_changed_pcblist>:
{
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a80:	4605      	mov	r5, r0
 8008a82:	b108      	cbz	r0, 8008a88 <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 8008a84:	b97c      	cbnz	r4, 8008aa6 <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 8008a86:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8008a88:	4b0a      	ldr	r3, [pc, #40]	; (8008ab4 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 8008a8a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8008a8e:	490a      	ldr	r1, [pc, #40]	; (8008ab8 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8008a90:	480a      	ldr	r0, [pc, #40]	; (8008abc <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8008a92:	f005 fc85 	bl	800e3a0 <iprintf>
 8008a96:	e7f5      	b.n	8008a84 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 8008a98:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f7ff ffd0 	bl	8008a40 <tcp_abort>
      pcb = next;
 8008aa0:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	d0ef      	beq.n	8008a86 <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8008aa6:	6822      	ldr	r2, [r4, #0]
 8008aa8:	682b      	ldr	r3, [r5, #0]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d0f4      	beq.n	8008a98 <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8008aae:	68e4      	ldr	r4, [r4, #12]
 8008ab0:	e7f7      	b.n	8008aa2 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8008ab2:	bf00      	nop
 8008ab4:	080111b8 	.word	0x080111b8
 8008ab8:	08011570 	.word	0x08011570
 8008abc:	0800f6b8 	.word	0x0800f6b8

08008ac0 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8008ac0:	b308      	cbz	r0, 8008b06 <tcp_netif_ip_addr_changed+0x46>
{
 8008ac2:	b538      	push	{r3, r4, r5, lr}
 8008ac4:	460d      	mov	r5, r1
 8008ac6:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 8008ac8:	6803      	ldr	r3, [r0, #0]
 8008aca:	b903      	cbnz	r3, 8008ace <tcp_netif_ip_addr_changed+0xe>
}
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008ace:	4b0e      	ldr	r3, [pc, #56]	; (8008b08 <tcp_netif_ip_addr_changed+0x48>)
 8008ad0:	6819      	ldr	r1, [r3, #0]
 8008ad2:	f7ff ffd3 	bl	8008a7c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8008ad6:	4b0d      	ldr	r3, [pc, #52]	; (8008b0c <tcp_netif_ip_addr_changed+0x4c>)
 8008ad8:	6819      	ldr	r1, [r3, #0]
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff ffce 	bl	8008a7c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8008ae0:	2d00      	cmp	r5, #0
 8008ae2:	d0f3      	beq.n	8008acc <tcp_netif_ip_addr_changed+0xc>
 8008ae4:	682b      	ldr	r3, [r5, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0f0      	beq.n	8008acc <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008aea:	4b09      	ldr	r3, [pc, #36]	; (8008b10 <tcp_netif_ip_addr_changed+0x50>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d0ec      	beq.n	8008acc <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008af2:	6819      	ldr	r1, [r3, #0]
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8008af8:	bf04      	itt	eq
 8008afa:	682a      	ldreq	r2, [r5, #0]
 8008afc:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1f6      	bne.n	8008af2 <tcp_netif_ip_addr_changed+0x32>
 8008b04:	e7e2      	b.n	8008acc <tcp_netif_ip_addr_changed+0xc>
 8008b06:	4770      	bx	lr
 8008b08:	20010c64 	.word	0x20010c64
 8008b0c:	20010c6c 	.word	0x20010c6c
 8008b10:	20010c70 	.word	0x20010c70

08008b14 <tcp_kill_state>:
{
 8008b14:	b538      	push	{r3, r4, r5, lr}
 8008b16:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008b18:	f1a0 0308 	sub.w	r3, r0, #8
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d807      	bhi.n	8008b32 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b22:	4b10      	ldr	r3, [pc, #64]	; (8008b64 <tcp_kill_state+0x50>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	b1e3      	cbz	r3, 8008b62 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b28:	4a0f      	ldr	r2, [pc, #60]	; (8008b68 <tcp_kill_state+0x54>)
 8008b2a:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 8008b2c:	2100      	movs	r1, #0
  inactive = NULL;
 8008b2e:	4608      	mov	r0, r1
 8008b30:	e009      	b.n	8008b46 <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8008b32:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <tcp_kill_state+0x58>)
 8008b34:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8008b38:	490d      	ldr	r1, [pc, #52]	; (8008b70 <tcp_kill_state+0x5c>)
 8008b3a:	480e      	ldr	r0, [pc, #56]	; (8008b74 <tcp_kill_state+0x60>)
 8008b3c:	f005 fc30 	bl	800e3a0 <iprintf>
 8008b40:	e7ef      	b.n	8008b22 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	b14b      	cbz	r3, 8008b5a <tcp_kill_state+0x46>
    if (pcb->state == state) {
 8008b46:	7d1a      	ldrb	r2, [r3, #20]
 8008b48:	42a2      	cmp	r2, r4
 8008b4a:	d1fa      	bne.n	8008b42 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b4c:	6a1a      	ldr	r2, [r3, #32]
 8008b4e:	1aaa      	subs	r2, r5, r2
 8008b50:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 8008b52:	bf24      	itt	cs
 8008b54:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008b56:	4618      	movcs	r0, r3
 8008b58:	e7f3      	b.n	8008b42 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 8008b5a:	b110      	cbz	r0, 8008b62 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	f7ff fee9 	bl	8008934 <tcp_abandon>
}
 8008b62:	bd38      	pop	{r3, r4, r5, pc}
 8008b64:	20010c64 	.word	0x20010c64
 8008b68:	20010c74 	.word	0x20010c74
 8008b6c:	080111b8 	.word	0x080111b8
 8008b70:	080115a4 	.word	0x080115a4
 8008b74:	0800f6b8 	.word	0x0800f6b8

08008b78 <tcp_alloc>:
{
 8008b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7a:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f7fe fd7f 	bl	8007680 <memp_malloc>
  if (pcb == NULL) {
 8008b82:	4604      	mov	r4, r0
 8008b84:	b360      	cbz	r0, 8008be0 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008b86:	229c      	movs	r2, #156	; 0x9c
 8008b88:	2100      	movs	r1, #0
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	f005 fb6b 	bl	800e266 <memset>
    pcb->prio = prio;
 8008b90:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8008b92:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8008b96:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008b9a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8008b9e:	8562      	strh	r2, [r4, #42]	; 0x2a
 8008ba0:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8008ba2:	22ff      	movs	r2, #255	; 0xff
 8008ba4:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 8008ba6:	f44f 7206 	mov.w	r2, #536	; 0x218
 8008baa:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8008bac:	2206      	movs	r2, #6
 8008bae:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8008bb2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8008bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bb8:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8008bc0:	4a3b      	ldr	r2, [pc, #236]	; (8008cb0 <tcp_alloc+0x138>)
 8008bc2:	6812      	ldr	r2, [r2, #0]
 8008bc4:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8008bc6:	4a3b      	ldr	r2, [pc, #236]	; (8008cb4 <tcp_alloc+0x13c>)
 8008bc8:	7812      	ldrb	r2, [r2, #0]
 8008bca:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8008bcc:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8008bd0:	4b39      	ldr	r3, [pc, #228]	; (8008cb8 <tcp_alloc+0x140>)
 8008bd2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8008bd6:	4b39      	ldr	r3, [pc, #228]	; (8008cbc <tcp_alloc+0x144>)
 8008bd8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8008bdc:	4620      	mov	r0, r4
 8008bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8008be0:	4b37      	ldr	r3, [pc, #220]	; (8008cc0 <tcp_alloc+0x148>)
 8008be2:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8008be4:	2d00      	cmp	r5, #0
 8008be6:	d132      	bne.n	8008c4e <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008be8:	4b36      	ldr	r3, [pc, #216]	; (8008cc4 <tcp_alloc+0x14c>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	b17b      	cbz	r3, 8008c0e <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008bee:	4a30      	ldr	r2, [pc, #192]	; (8008cb0 <tcp_alloc+0x138>)
 8008bf0:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 8008bf2:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008bf4:	6a1a      	ldr	r2, [r3, #32]
 8008bf6:	1a82      	subs	r2, r0, r2
 8008bf8:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8008bfa:	bf24      	itt	cs
 8008bfc:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008bfe:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f6      	bne.n	8008bf4 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 8008c06:	b114      	cbz	r4, 8008c0e <tcp_alloc+0x96>
    tcp_abort(inactive);
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f7ff ff19 	bl	8008a40 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c0e:	2001      	movs	r0, #1
 8008c10:	f7fe fd36 	bl	8007680 <memp_malloc>
    if (pcb == NULL) {
 8008c14:	4604      	mov	r4, r0
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d1b5      	bne.n	8008b86 <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 8008c1a:	2009      	movs	r0, #9
 8008c1c:	f7ff ff7a 	bl	8008b14 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c20:	2001      	movs	r0, #1
 8008c22:	f7fe fd2d 	bl	8007680 <memp_malloc>
      if (pcb == NULL) {
 8008c26:	4604      	mov	r4, r0
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1ac      	bne.n	8008b86 <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 8008c2c:	2008      	movs	r0, #8
 8008c2e:	f7ff ff71 	bl	8008b14 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008c32:	2001      	movs	r0, #1
 8008c34:	f7fe fd24 	bl	8007680 <memp_malloc>
        if (pcb == NULL) {
 8008c38:	4604      	mov	r4, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d1a3      	bne.n	8008b86 <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008c3e:	f016 0f80 	tst.w	r6, #128	; 0x80
 8008c42:	d110      	bne.n	8008c66 <tcp_alloc+0xee>
  if (mprio == 0) {
 8008c44:	b36e      	cbz	r6, 8008ca2 <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008c46:	4633      	mov	r3, r6
 8008c48:	e00e      	b.n	8008c68 <tcp_alloc+0xf0>
  while (pcb != NULL) {
 8008c4a:	2d00      	cmp	r5, #0
 8008c4c:	d0cc      	beq.n	8008be8 <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 8008c4e:	4628      	mov	r0, r5
 8008c50:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 8008c52:	8b43      	ldrh	r3, [r0, #26]
 8008c54:	f013 0f08 	tst.w	r3, #8
 8008c58:	d0f7      	beq.n	8008c4a <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008c5a:	f023 0308 	bic.w	r3, r3, #8
 8008c5e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8008c60:	f7ff fb16 	bl	8008290 <tcp_close_shutdown_fin>
 8008c64:	e7f1      	b.n	8008c4a <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008c66:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 8008c68:	3b01      	subs	r3, #1
 8008c6a:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c6c:	4b14      	ldr	r3, [pc, #80]	; (8008cc0 <tcp_alloc+0x148>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	b1bb      	cbz	r3, 8008ca2 <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008c72:	490f      	ldr	r1, [pc, #60]	; (8008cb0 <tcp_alloc+0x138>)
 8008c74:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 8008c76:	2000      	movs	r0, #0
 8008c78:	e005      	b.n	8008c86 <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 8008c7a:	6a1a      	ldr	r2, [r3, #32]
 8008c7c:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 8008c7e:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 8008c80:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	b14b      	cbz	r3, 8008c9a <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 8008c86:	7d59      	ldrb	r1, [r3, #21]
 8008c88:	4291      	cmp	r1, r2
 8008c8a:	d3f6      	bcc.n	8008c7a <tcp_alloc+0x102>
 8008c8c:	d1f9      	bne.n	8008c82 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8008c8e:	6a1f      	ldr	r7, [r3, #32]
 8008c90:	eba5 0c07 	sub.w	ip, r5, r7
 8008c94:	4584      	cmp	ip, r0
 8008c96:	d3f4      	bcc.n	8008c82 <tcp_alloc+0x10a>
 8008c98:	e7ef      	b.n	8008c7a <tcp_alloc+0x102>
  if (inactive != NULL) {
 8008c9a:	b114      	cbz	r4, 8008ca2 <tcp_alloc+0x12a>
    tcp_abort(inactive);
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff fecf 	bl	8008a40 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008ca2:	2001      	movs	r0, #1
 8008ca4:	f7fe fcec 	bl	8007680 <memp_malloc>
  if (pcb != NULL) {
 8008ca8:	4604      	mov	r4, r0
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d096      	beq.n	8008bdc <tcp_alloc+0x64>
 8008cae:	e76a      	b.n	8008b86 <tcp_alloc+0xe>
 8008cb0:	20010c74 	.word	0x20010c74
 8008cb4:	20010c79 	.word	0x20010c79
 8008cb8:	08008e9d 	.word	0x08008e9d
 8008cbc:	006ddd00 	.word	0x006ddd00
 8008cc0:	20010c64 	.word	0x20010c64
 8008cc4:	20010c7c 	.word	0x20010c7c

08008cc8 <tcp_new_ip_type>:
{
 8008cc8:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8008cca:	2040      	movs	r0, #64	; 0x40
 8008ccc:	f7ff ff54 	bl	8008b78 <tcp_alloc>
}
 8008cd0:	bd08      	pop	{r3, pc}
	...

08008cd4 <tcp_close_shutdown>:
{
 8008cd4:	b530      	push	{r4, r5, lr}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008cda:	4604      	mov	r4, r0
 8008cdc:	b188      	cbz	r0, 8008d02 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8008cde:	b125      	cbz	r5, 8008cea <tcp_close_shutdown+0x16>
 8008ce0:	7d23      	ldrb	r3, [r4, #20]
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d015      	beq.n	8008d12 <tcp_close_shutdown+0x3e>
 8008ce6:	2b07      	cmp	r3, #7
 8008ce8:	d013      	beq.n	8008d12 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 8008cea:	7d23      	ldrb	r3, [r4, #20]
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d06d      	beq.n	8008dcc <tcp_close_shutdown+0xf8>
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	f000 8091 	beq.w	8008e18 <tcp_close_shutdown+0x144>
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d04f      	beq.n	8008d9a <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f7ff fac8 	bl	8008290 <tcp_close_shutdown_fin>
 8008d00:	e081      	b.n	8008e06 <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8008d02:	4b4b      	ldr	r3, [pc, #300]	; (8008e30 <tcp_close_shutdown+0x15c>)
 8008d04:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8008d08:	494a      	ldr	r1, [pc, #296]	; (8008e34 <tcp_close_shutdown+0x160>)
 8008d0a:	484b      	ldr	r0, [pc, #300]	; (8008e38 <tcp_close_shutdown+0x164>)
 8008d0c:	f005 fb48 	bl	800e3a0 <iprintf>
 8008d10:	e7e5      	b.n	8008cde <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008d12:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008d14:	b1e3      	cbz	r3, 8008d50 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008d16:	8b63      	ldrh	r3, [r4, #26]
 8008d18:	f013 0f10 	tst.w	r3, #16
 8008d1c:	d01d      	beq.n	8008d5a <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008d1e:	8b23      	ldrh	r3, [r4, #24]
 8008d20:	9302      	str	r3, [sp, #8]
 8008d22:	8ae3      	ldrh	r3, [r4, #22]
 8008d24:	9301      	str	r3, [sp, #4]
 8008d26:	1d23      	adds	r3, r4, #4
 8008d28:	9300      	str	r3, [sp, #0]
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008d2e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008d30:	4620      	mov	r0, r4
 8008d32:	f002 ff83 	bl	800bc3c <tcp_rst>
      tcp_pcb_purge(pcb);
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7ff fd64 	bl	8008804 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8008d3c:	4b3f      	ldr	r3, [pc, #252]	; (8008e3c <tcp_close_shutdown+0x168>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	d012      	beq.n	8008d6a <tcp_close_shutdown+0x96>
 8008d44:	b1bb      	cbz	r3, 8008d76 <tcp_close_shutdown+0xa2>
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	42a2      	cmp	r2, r4
 8008d4a:	d012      	beq.n	8008d72 <tcp_close_shutdown+0x9e>
 8008d4c:	4613      	mov	r3, r2
 8008d4e:	e7f9      	b.n	8008d44 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8008d50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8008d56:	d0c8      	beq.n	8008cea <tcp_close_shutdown+0x16>
 8008d58:	e7dd      	b.n	8008d16 <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8008d5a:	4b35      	ldr	r3, [pc, #212]	; (8008e30 <tcp_close_shutdown+0x15c>)
 8008d5c:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8008d60:	4937      	ldr	r1, [pc, #220]	; (8008e40 <tcp_close_shutdown+0x16c>)
 8008d62:	4835      	ldr	r0, [pc, #212]	; (8008e38 <tcp_close_shutdown+0x164>)
 8008d64:	f005 fb1c 	bl	800e3a0 <iprintf>
 8008d68:	e7d9      	b.n	8008d1e <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 8008d6a:	68e2      	ldr	r2, [r4, #12]
 8008d6c:	4b33      	ldr	r3, [pc, #204]	; (8008e3c <tcp_close_shutdown+0x168>)
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	e001      	b.n	8008d76 <tcp_close_shutdown+0xa2>
 8008d72:	68e2      	ldr	r2, [r4, #12]
 8008d74:	60da      	str	r2, [r3, #12]
 8008d76:	2300      	movs	r3, #0
 8008d78:	60e3      	str	r3, [r4, #12]
 8008d7a:	4b32      	ldr	r3, [pc, #200]	; (8008e44 <tcp_close_shutdown+0x170>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 8008d80:	4b31      	ldr	r3, [pc, #196]	; (8008e48 <tcp_close_shutdown+0x174>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	42a3      	cmp	r3, r4
 8008d86:	d004      	beq.n	8008d92 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f7ff fac9 	bl	8008320 <tcp_free>
      return ERR_OK;
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e039      	b.n	8008e06 <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 8008d92:	f001 ffcf 	bl	800ad34 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 8008d96:	2000      	movs	r0, #0
 8008d98:	e035      	b.n	8008e06 <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 8008d9a:	8ae3      	ldrh	r3, [r4, #22]
 8008d9c:	b18b      	cbz	r3, 8008dc2 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d9e:	4b2b      	ldr	r3, [pc, #172]	; (8008e4c <tcp_close_shutdown+0x178>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	42a3      	cmp	r3, r4
 8008da4:	d005      	beq.n	8008db2 <tcp_close_shutdown+0xde>
 8008da6:	b153      	cbz	r3, 8008dbe <tcp_close_shutdown+0xea>
 8008da8:	68da      	ldr	r2, [r3, #12]
 8008daa:	42a2      	cmp	r2, r4
 8008dac:	d005      	beq.n	8008dba <tcp_close_shutdown+0xe6>
 8008dae:	4613      	mov	r3, r2
 8008db0:	e7f9      	b.n	8008da6 <tcp_close_shutdown+0xd2>
 8008db2:	68e2      	ldr	r2, [r4, #12]
 8008db4:	4b25      	ldr	r3, [pc, #148]	; (8008e4c <tcp_close_shutdown+0x178>)
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	e001      	b.n	8008dbe <tcp_close_shutdown+0xea>
 8008dba:	68e2      	ldr	r2, [r4, #12]
 8008dbc:	60da      	str	r2, [r3, #12]
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8008dc2:	4620      	mov	r0, r4
 8008dc4:	f7ff faac 	bl	8008320 <tcp_free>
  return ERR_OK;
 8008dc8:	2000      	movs	r0, #0
      break;
 8008dca:	e01c      	b.n	8008e06 <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008dcc:	4d20      	ldr	r5, [pc, #128]	; (8008e50 <tcp_close_shutdown+0x17c>)
 8008dce:	1d29      	adds	r1, r5, #4
 8008dd0:	3510      	adds	r5, #16
      pcb->listener = NULL;
 8008dd2:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8008dd4:	f851 3b04 	ldr.w	r3, [r1], #4
 8008dd8:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008dda:	b133      	cbz	r3, 8008dea <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 8008ddc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008dde:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8008de0:	bf08      	it	eq
 8008de2:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d1f8      	bne.n	8008ddc <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8008dea:	428d      	cmp	r5, r1
 8008dec:	d1f2      	bne.n	8008dd4 <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8008dee:	4621      	mov	r1, r4
 8008df0:	4818      	ldr	r0, [pc, #96]	; (8008e54 <tcp_close_shutdown+0x180>)
 8008df2:	f7ff fd37 	bl	8008864 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008df6:	7d23      	ldrb	r3, [r4, #20]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d006      	beq.n	8008e0a <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8008dfc:	4621      	mov	r1, r4
 8008dfe:	2002      	movs	r0, #2
 8008e00:	f7fe fc6e 	bl	80076e0 <memp_free>
  return ERR_OK;
 8008e04:	2000      	movs	r0, #0
}
 8008e06:	b005      	add	sp, #20
 8008e08:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8008e0a:	4b09      	ldr	r3, [pc, #36]	; (8008e30 <tcp_close_shutdown+0x15c>)
 8008e0c:	22df      	movs	r2, #223	; 0xdf
 8008e0e:	4912      	ldr	r1, [pc, #72]	; (8008e58 <tcp_close_shutdown+0x184>)
 8008e10:	4809      	ldr	r0, [pc, #36]	; (8008e38 <tcp_close_shutdown+0x164>)
 8008e12:	f005 fac5 	bl	800e3a0 <iprintf>
 8008e16:	e7f1      	b.n	8008dfc <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4808      	ldr	r0, [pc, #32]	; (8008e3c <tcp_close_shutdown+0x168>)
 8008e1c:	f7ff fd22 	bl	8008864 <tcp_pcb_remove>
 8008e20:	4b08      	ldr	r3, [pc, #32]	; (8008e44 <tcp_close_shutdown+0x170>)
 8008e22:	2201      	movs	r2, #1
 8008e24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7ff fa7a 	bl	8008320 <tcp_free>
  return ERR_OK;
 8008e2c:	2000      	movs	r0, #0
      break;
 8008e2e:	e7ea      	b.n	8008e06 <tcp_close_shutdown+0x132>
 8008e30:	080111b8 	.word	0x080111b8
 8008e34:	080115b4 	.word	0x080115b4
 8008e38:	0800f6b8 	.word	0x0800f6b8
 8008e3c:	20010c64 	.word	0x20010c64
 8008e40:	080115d4 	.word	0x080115d4
 8008e44:	20010c68 	.word	0x20010c68
 8008e48:	20010ca8 	.word	0x20010ca8
 8008e4c:	20010c6c 	.word	0x20010c6c
 8008e50:	08011844 	.word	0x08011844
 8008e54:	20010c70 	.word	0x20010c70
 8008e58:	080115f0 	.word	0x080115f0

08008e5c <tcp_close>:
{
 8008e5c:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e5e:	b160      	cbz	r0, 8008e7a <tcp_close+0x1e>
 8008e60:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 8008e62:	7d02      	ldrb	r2, [r0, #20]
 8008e64:	2a01      	cmp	r2, #1
 8008e66:	d003      	beq.n	8008e70 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8008e68:	8b42      	ldrh	r2, [r0, #26]
 8008e6a:	f042 0210 	orr.w	r2, r2, #16
 8008e6e:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8008e70:	2101      	movs	r1, #1
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff ff2e 	bl	8008cd4 <tcp_close_shutdown>
}
 8008e78:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <tcp_close+0x34>)
 8008e7c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8008e80:	4904      	ldr	r1, [pc, #16]	; (8008e94 <tcp_close+0x38>)
 8008e82:	4805      	ldr	r0, [pc, #20]	; (8008e98 <tcp_close+0x3c>)
 8008e84:	f005 fa8c 	bl	800e3a0 <iprintf>
 8008e88:	f06f 000f 	mvn.w	r0, #15
 8008e8c:	e7f4      	b.n	8008e78 <tcp_close+0x1c>
 8008e8e:	bf00      	nop
 8008e90:	080111b8 	.word	0x080111b8
 8008e94:	0801160c 	.word	0x0801160c
 8008e98:	0800f6b8 	.word	0x0800f6b8

08008e9c <tcp_recv_null>:
{
 8008e9c:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e9e:	b151      	cbz	r1, 8008eb6 <tcp_recv_null+0x1a>
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	4608      	mov	r0, r1
  if (p != NULL) {
 8008ea4:	b18a      	cbz	r2, 8008eca <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 8008ea6:	8911      	ldrh	r1, [r2, #8]
 8008ea8:	f7ff fb60 	bl	800856c <tcp_recved>
    pbuf_free(p);
 8008eac:	4620      	mov	r0, r4
 8008eae:	f7fe fed9 	bl	8007c64 <pbuf_free>
  return ERR_OK;
 8008eb2:	2000      	movs	r0, #0
}
 8008eb4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8008eb6:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <tcp_recv_null+0x3c>)
 8008eb8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8008ebc:	4907      	ldr	r1, [pc, #28]	; (8008edc <tcp_recv_null+0x40>)
 8008ebe:	4808      	ldr	r0, [pc, #32]	; (8008ee0 <tcp_recv_null+0x44>)
 8008ec0:	f005 fa6e 	bl	800e3a0 <iprintf>
 8008ec4:	f06f 000f 	mvn.w	r0, #15
 8008ec8:	e7f4      	b.n	8008eb4 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 8008eca:	b10b      	cbz	r3, 8008ed0 <tcp_recv_null+0x34>
  return ERR_OK;
 8008ecc:	2000      	movs	r0, #0
 8008ece:	e7f1      	b.n	8008eb4 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8008ed0:	f7ff ffc4 	bl	8008e5c <tcp_close>
 8008ed4:	e7ee      	b.n	8008eb4 <tcp_recv_null+0x18>
 8008ed6:	bf00      	nop
 8008ed8:	080111b8 	.word	0x080111b8
 8008edc:	08011624 	.word	0x08011624
 8008ee0:	0800f6b8 	.word	0x0800f6b8

08008ee4 <tcp_process_refused_data>:
{
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ee6:	b318      	cbz	r0, 8008f30 <tcp_process_refused_data+0x4c>
 8008ee8:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8008eea:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8008eec:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008ef2:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 8008ef6:	b32d      	cbz	r5, 8008f44 <tcp_process_refused_data+0x60>
 8008ef8:	4632      	mov	r2, r6
 8008efa:	4601      	mov	r1, r0
 8008efc:	6900      	ldr	r0, [r0, #16]
 8008efe:	47a8      	blx	r5
 8008f00:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8008f02:	bb3d      	cbnz	r5, 8008f54 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8008f04:	f017 0f20 	tst.w	r7, #32
 8008f08:	d02a      	beq.n	8008f60 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8008f0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008f0c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8008f10:	bf1c      	itt	ne
 8008f12:	3301      	addne	r3, #1
 8008f14:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8008f16:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 8008f1a:	b30e      	cbz	r6, 8008f60 <tcp_process_refused_data+0x7c>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	461a      	mov	r2, r3
 8008f20:	4621      	mov	r1, r4
 8008f22:	6920      	ldr	r0, [r4, #16]
 8008f24:	47b0      	blx	r6
          return ERR_ABRT;
 8008f26:	f110 0f0d 	cmn.w	r0, #13
 8008f2a:	bf08      	it	eq
 8008f2c:	4605      	moveq	r5, r0
 8008f2e:	e017      	b.n	8008f60 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f30:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <tcp_process_refused_data+0x80>)
 8008f32:	f240 6209 	movw	r2, #1545	; 0x609
 8008f36:	490c      	ldr	r1, [pc, #48]	; (8008f68 <tcp_process_refused_data+0x84>)
 8008f38:	480c      	ldr	r0, [pc, #48]	; (8008f6c <tcp_process_refused_data+0x88>)
 8008f3a:	f005 fa31 	bl	800e3a0 <iprintf>
 8008f3e:	f06f 050f 	mvn.w	r5, #15
 8008f42:	e00d      	b.n	8008f60 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8008f44:	2300      	movs	r3, #0
 8008f46:	4632      	mov	r2, r6
 8008f48:	4601      	mov	r1, r0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f7ff ffa6 	bl	8008e9c <tcp_recv_null>
 8008f50:	4605      	mov	r5, r0
 8008f52:	e7d6      	b.n	8008f02 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 8008f54:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 8008f58:	bf1c      	itt	ne
 8008f5a:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 8008f5c:	f06f 0504 	mvnne.w	r5, #4
}
 8008f60:	4628      	mov	r0, r5
 8008f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f64:	080111b8 	.word	0x080111b8
 8008f68:	08011640 	.word	0x08011640
 8008f6c:	0800f6b8 	.word	0x0800f6b8

08008f70 <tcp_fasttmr>:
{
 8008f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8008f74:	4a1f      	ldr	r2, [pc, #124]	; (8008ff4 <tcp_fasttmr+0x84>)
 8008f76:	7813      	ldrb	r3, [r2, #0]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8008f7c:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8008ffc <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 8008f80:	4e1d      	ldr	r6, [pc, #116]	; (8008ff8 <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 8008f82:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	d032      	beq.n	8008ff0 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008f8a:	4d1a      	ldr	r5, [pc, #104]	; (8008ff4 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 8008f8c:	2700      	movs	r7, #0
 8008f8e:	e013      	b.n	8008fb8 <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 8008f90:	f043 0302 	orr.w	r3, r3, #2
 8008f94:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8008f96:	4620      	mov	r0, r4
 8008f98:	f002 fed2 	bl	800bd40 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8008f9c:	8b63      	ldrh	r3, [r4, #26]
 8008f9e:	f023 0303 	bic.w	r3, r3, #3
 8008fa2:	8363      	strh	r3, [r4, #26]
 8008fa4:	e011      	b.n	8008fca <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8008fa6:	f023 0308 	bic.w	r3, r3, #8
 8008faa:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7ff f96f 	bl	8008290 <tcp_close_shutdown_fin>
 8008fb2:	e00e      	b.n	8008fd2 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 8008fb4:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8008fb6:	b1dc      	cbz	r4, 8008ff0 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 8008fb8:	782b      	ldrb	r3, [r5, #0]
 8008fba:	7fa2      	ldrb	r2, [r4, #30]
 8008fbc:	429a      	cmp	r2, r3
 8008fbe:	d0f9      	beq.n	8008fb4 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8008fc0:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8008fc2:	8b63      	ldrh	r3, [r4, #26]
 8008fc4:	f013 0f01 	tst.w	r3, #1
 8008fc8:	d1e2      	bne.n	8008f90 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 8008fca:	8b63      	ldrh	r3, [r4, #26]
 8008fcc:	f013 0f08 	tst.w	r3, #8
 8008fd0:	d1e9      	bne.n	8008fa6 <tcp_fasttmr+0x36>
      next = pcb->next;
 8008fd2:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008fd6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8008fd8:	b143      	cbz	r3, 8008fec <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 8008fda:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f7ff ff81 	bl	8008ee4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008fe2:	7833      	ldrb	r3, [r6, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1cc      	bne.n	8008f82 <tcp_fasttmr+0x12>
      pcb = next;
 8008fe8:	464c      	mov	r4, r9
 8008fea:	e7e4      	b.n	8008fb6 <tcp_fasttmr+0x46>
 8008fec:	464c      	mov	r4, r9
 8008fee:	e7e2      	b.n	8008fb6 <tcp_fasttmr+0x46>
}
 8008ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ff4:	20010c79 	.word	0x20010c79
 8008ff8:	20010c68 	.word	0x20010c68
 8008ffc:	20010c64 	.word	0x20010c64

08009000 <tcp_slowtmr>:
{
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	b085      	sub	sp, #20
  ++tcp_ticks;
 8009006:	4ab4      	ldr	r2, [pc, #720]	; (80092d8 <tcp_slowtmr+0x2d8>)
 8009008:	6813      	ldr	r3, [r2, #0]
 800900a:	3301      	adds	r3, #1
 800900c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800900e:	4ab3      	ldr	r2, [pc, #716]	; (80092dc <tcp_slowtmr+0x2dc>)
 8009010:	7813      	ldrb	r3, [r2, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 8009016:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8009304 <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800901a:	4eb1      	ldr	r6, [pc, #708]	; (80092e0 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800901c:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8009308 <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 8009020:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 8009024:	2c00      	cmp	r4, #0
 8009026:	f000 81f4 	beq.w	8009412 <tcp_slowtmr+0x412>
  prev = NULL;
 800902a:	2500      	movs	r5, #0
 800902c:	e19e      	b.n	800936c <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800902e:	4633      	mov	r3, r6
 8009030:	f240 42be 	movw	r2, #1214	; 0x4be
 8009034:	49ab      	ldr	r1, [pc, #684]	; (80092e4 <tcp_slowtmr+0x2e4>)
 8009036:	48ac      	ldr	r0, [pc, #688]	; (80092e8 <tcp_slowtmr+0x2e8>)
 8009038:	f005 f9b2 	bl	800e3a0 <iprintf>
 800903c:	e19a      	b.n	8009374 <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800903e:	4633      	mov	r3, r6
 8009040:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009044:	49a9      	ldr	r1, [pc, #676]	; (80092ec <tcp_slowtmr+0x2ec>)
 8009046:	48a8      	ldr	r0, [pc, #672]	; (80092e8 <tcp_slowtmr+0x2e8>)
 8009048:	f005 f9aa 	bl	800e3a0 <iprintf>
 800904c:	e196      	b.n	800937c <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800904e:	4633      	mov	r3, r6
 8009050:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009054:	49a6      	ldr	r1, [pc, #664]	; (80092f0 <tcp_slowtmr+0x2f0>)
 8009056:	48a4      	ldr	r0, [pc, #656]	; (80092e8 <tcp_slowtmr+0x2e8>)
 8009058:	f005 f9a2 	bl	800e3a0 <iprintf>
 800905c:	e192      	b.n	8009384 <tcp_slowtmr+0x384>
      continue;
 800905e:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009060:	68e4      	ldr	r4, [r4, #12]
      continue;
 8009062:	e181      	b.n	8009368 <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009064:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009068:	2b05      	cmp	r3, #5
 800906a:	f240 819b 	bls.w	80093a4 <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 800906e:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 8009072:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 8009074:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009076:	b15b      	cbz	r3, 8009090 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8009078:	4b97      	ldr	r3, [pc, #604]	; (80092d8 <tcp_slowtmr+0x2d8>)
 800907a:	681a      	ldr	r2, [r3, #0]
 800907c:	6a23      	ldr	r3, [r4, #32]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8009088:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 800908c:	f080 80f8 	bcs.w	8009280 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 8009090:	7d23      	ldrb	r3, [r4, #20]
 8009092:	2b03      	cmp	r3, #3
 8009094:	f000 80f8 	beq.w	8009288 <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 8009098:	2b09      	cmp	r3, #9
 800909a:	f040 80fc 	bne.w	8009296 <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800909e:	4b8e      	ldr	r3, [pc, #568]	; (80092d8 <tcp_slowtmr+0x2d8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	6a22      	ldr	r2, [r4, #32]
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	2bf0      	cmp	r3, #240	; 0xf0
 80090a8:	f240 80f5 	bls.w	8009296 <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 80090ac:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80090b0:	4620      	mov	r0, r4
 80090b2:	f7ff fba7 	bl	8008804 <tcp_pcb_purge>
      if (prev != NULL) {
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	f000 8130 	beq.w	800931c <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80090bc:	f8da 3000 	ldr.w	r3, [sl]
 80090c0:	42a3      	cmp	r3, r4
 80090c2:	f000 8123 	beq.w	800930c <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 80090c6:	68e3      	ldr	r3, [r4, #12]
 80090c8:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 80090ca:	f1b8 0f00 	cmp.w	r8, #0
 80090ce:	f040 8134 	bne.w	800933a <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 80090d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 80090d6:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff f920 	bl	8008320 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80090e0:	4b84      	ldr	r3, [pc, #528]	; (80092f4 <tcp_slowtmr+0x2f4>)
 80090e2:	2200      	movs	r2, #0
 80090e4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80090e6:	2f00      	cmp	r7, #0
 80090e8:	f000 813a 	beq.w	8009360 <tcp_slowtmr+0x360>
 80090ec:	f06f 010c 	mvn.w	r1, #12
 80090f0:	4648      	mov	r0, r9
 80090f2:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 80090f4:	4b7f      	ldr	r3, [pc, #508]	; (80092f4 <tcp_slowtmr+0x2f4>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d191      	bne.n	8009020 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 80090fc:	4644      	mov	r4, r8
 80090fe:	e133      	b.n	8009368 <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009100:	4633      	mov	r3, r6
 8009102:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8009106:	497c      	ldr	r1, [pc, #496]	; (80092f8 <tcp_slowtmr+0x2f8>)
 8009108:	4877      	ldr	r0, [pc, #476]	; (80092e8 <tcp_slowtmr+0x2e8>)
 800910a:	f005 f949 	bl	800e3a0 <iprintf>
 800910e:	e15b      	b.n	80093c8 <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009110:	4620      	mov	r0, r4
 8009112:	f002 fb0d 	bl	800b730 <tcp_split_unsent_seg>
 8009116:	b158      	cbz	r0, 8009130 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800911e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8009122:	2b06      	cmp	r3, #6
 8009124:	d876      	bhi.n	8009214 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 8009126:	3301      	adds	r3, #1
 8009128:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 800912c:	2700      	movs	r7, #0
 800912e:	e050      	b.n	80091d2 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8009130:	4620      	mov	r0, r4
 8009132:	f002 fe05 	bl	800bd40 <tcp_output>
 8009136:	2800      	cmp	r0, #0
 8009138:	d1ee      	bne.n	8009118 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800913a:	2700      	movs	r7, #0
 800913c:	e049      	b.n	80091d2 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800913e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009140:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009144:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8009146:	bf9c      	itt	ls
 8009148:	3301      	addls	r3, #1
 800914a:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 800914c:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009150:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009154:	429a      	cmp	r2, r3
 8009156:	db3c      	blt.n	80091d2 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009158:	4620      	mov	r0, r4
 800915a:	f002 fc9d 	bl	800ba98 <tcp_rexmit_rto_prepare>
 800915e:	b118      	cbz	r0, 8009168 <tcp_slowtmr+0x168>
 8009160:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009162:	bbb3      	cbnz	r3, 80091d2 <tcp_slowtmr+0x1d2>
 8009164:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009166:	b3a3      	cbz	r3, 80091d2 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 8009168:	7d23      	ldrb	r3, [r4, #20]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d014      	beq.n	8009198 <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800916e:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009172:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8009176:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800917a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800917e:	2a0c      	cmp	r2, #12
 8009180:	bf28      	it	cs
 8009182:	220c      	movcs	r2, #12
 8009184:	495d      	ldr	r1, [pc, #372]	; (80092fc <tcp_slowtmr+0x2fc>)
 8009186:	5c8a      	ldrb	r2, [r1, r2]
 8009188:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800918a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800918e:	4293      	cmp	r3, r2
 8009190:	bfa8      	it	ge
 8009192:	4613      	movge	r3, r2
 8009194:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800919c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80091a0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 80091a4:	429a      	cmp	r2, r3
 80091a6:	bf28      	it	cs
 80091a8:	461a      	movcs	r2, r3
 80091aa:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80091ac:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 80091ae:	0043      	lsls	r3, r0, #1
 80091b0:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80091b2:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 80091b6:	bf98      	it	ls
 80091b8:	460b      	movls	r3, r1
 80091ba:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 80091be:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 80091c8:	4620      	mov	r0, r4
 80091ca:	f002 ff85 	bl	800c0d8 <tcp_rexmit_rto_commit>
 80091ce:	e000      	b.n	80091d2 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 80091d0:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 80091d2:	7d23      	ldrb	r3, [r4, #20]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d01f      	beq.n	8009218 <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80091d8:	f894 8009 	ldrb.w	r8, [r4, #9]
 80091dc:	f018 0808 	ands.w	r8, r8, #8
 80091e0:	f43f af48 	beq.w	8009074 <tcp_slowtmr+0x74>
 80091e4:	2b04      	cmp	r3, #4
 80091e6:	d12a      	bne.n	800923e <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80091e8:	4b3b      	ldr	r3, [pc, #236]	; (80092d8 <tcp_slowtmr+0x2d8>)
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	6a23      	ldr	r3, [r4, #32]
 80091ee:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80091f0:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80091f4:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 80091f8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80091fc:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009200:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009204:	d920      	bls.n	8009248 <tcp_slowtmr+0x248>
        ++pcb_remove;
 8009206:	3701      	adds	r7, #1
 8009208:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 800920a:	f04f 0801 	mov.w	r8, #1
 800920e:	e731      	b.n	8009074 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 8009210:	2701      	movs	r7, #1
 8009212:	e7de      	b.n	80091d2 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 8009214:	2700      	movs	r7, #0
 8009216:	e7dc      	b.n	80091d2 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 8009218:	8b63      	ldrh	r3, [r4, #26]
 800921a:	f013 0f10 	tst.w	r3, #16
 800921e:	d007      	beq.n	8009230 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009220:	4b2d      	ldr	r3, [pc, #180]	; (80092d8 <tcp_slowtmr+0x2d8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6a22      	ldr	r2, [r4, #32]
 8009226:	1a9b      	subs	r3, r3, r2
 8009228:	2b28      	cmp	r3, #40	; 0x28
 800922a:	d901      	bls.n	8009230 <tcp_slowtmr+0x230>
          ++pcb_remove;
 800922c:	3701      	adds	r7, #1
 800922e:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8009230:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 8134 	beq.w	80094a0 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 8009238:	f04f 0800 	mov.w	r8, #0
 800923c:	e71c      	b.n	8009078 <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 800923e:	2b07      	cmp	r3, #7
 8009240:	d0d2      	beq.n	80091e8 <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8009242:	f04f 0800 	mov.w	r8, #0
 8009246:	e715      	b.n	8009074 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009248:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800924c:	482c      	ldr	r0, [pc, #176]	; (8009300 <tcp_slowtmr+0x300>)
 800924e:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009252:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009256:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 800925a:	d802      	bhi.n	8009262 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 800925c:	f04f 0800 	mov.w	r8, #0
 8009260:	e708      	b.n	8009074 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8009262:	4620      	mov	r0, r4
 8009264:	f002 ff6e 	bl	800c144 <tcp_keepalive>
        if (err == ERR_OK) {
 8009268:	b938      	cbnz	r0, 800927a <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 800926a:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 800926e:	3301      	adds	r3, #1
 8009270:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8009274:	f04f 0800 	mov.w	r8, #0
 8009278:	e6fc      	b.n	8009074 <tcp_slowtmr+0x74>
 800927a:	f04f 0800 	mov.w	r8, #0
 800927e:	e6f9      	b.n	8009074 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8009280:	4620      	mov	r0, r4
 8009282:	f7ff fab5 	bl	80087f0 <tcp_free_ooseq>
 8009286:	e703      	b.n	8009090 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009288:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <tcp_slowtmr+0x2d8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6a22      	ldr	r2, [r4, #32]
 800928e:	1a9b      	subs	r3, r3, r2
 8009290:	2b28      	cmp	r3, #40	; 0x28
 8009292:	f63f af0b 	bhi.w	80090ac <tcp_slowtmr+0xac>
    if (pcb_remove) {
 8009296:	2f00      	cmp	r7, #0
 8009298:	f47f af08 	bne.w	80090ac <tcp_slowtmr+0xac>
      pcb = pcb->next;
 800929c:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 800929e:	7f23      	ldrb	r3, [r4, #28]
 80092a0:	3301      	adds	r3, #1
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80092a6:	7f62      	ldrb	r2, [r4, #29]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d85b      	bhi.n	8009364 <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 80092ac:	2300      	movs	r3, #0
 80092ae:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 80092b0:	4a10      	ldr	r2, [pc, #64]	; (80092f4 <tcp_slowtmr+0x2f4>)
 80092b2:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 80092b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d04b      	beq.n	8009354 <tcp_slowtmr+0x354>
 80092bc:	4621      	mov	r1, r4
 80092be:	6920      	ldr	r0, [r4, #16]
 80092c0:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 80092c2:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <tcp_slowtmr+0x2f4>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	f47f aeaa 	bne.w	8009020 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 80092cc:	2800      	cmp	r0, #0
 80092ce:	d041      	beq.n	8009354 <tcp_slowtmr+0x354>
 80092d0:	4625      	mov	r5, r4
      pcb = pcb->next;
 80092d2:	463c      	mov	r4, r7
 80092d4:	e048      	b.n	8009368 <tcp_slowtmr+0x368>
 80092d6:	bf00      	nop
 80092d8:	20010c74 	.word	0x20010c74
 80092dc:	20010c79 	.word	0x20010c79
 80092e0:	080111b8 	.word	0x080111b8
 80092e4:	08011668 	.word	0x08011668
 80092e8:	0800f6b8 	.word	0x0800f6b8
 80092ec:	08011694 	.word	0x08011694
 80092f0:	080116c0 	.word	0x080116c0
 80092f4:	20010c68 	.word	0x20010c68
 80092f8:	08011724 	.word	0x08011724
 80092fc:	08011834 	.word	0x08011834
 8009300:	000124f8 	.word	0x000124f8
 8009304:	20010c64 	.word	0x20010c64
 8009308:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800930c:	4633      	mov	r3, r6
 800930e:	f240 526d 	movw	r2, #1389	; 0x56d
 8009312:	4966      	ldr	r1, [pc, #408]	; (80094ac <tcp_slowtmr+0x4ac>)
 8009314:	4866      	ldr	r0, [pc, #408]	; (80094b0 <tcp_slowtmr+0x4b0>)
 8009316:	f005 f843 	bl	800e3a0 <iprintf>
 800931a:	e6d4      	b.n	80090c6 <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800931c:	f8da 3000 	ldr.w	r3, [sl]
 8009320:	42a3      	cmp	r3, r4
 8009322:	d006      	beq.n	8009332 <tcp_slowtmr+0x332>
 8009324:	4633      	mov	r3, r6
 8009326:	f240 5271 	movw	r2, #1393	; 0x571
 800932a:	4962      	ldr	r1, [pc, #392]	; (80094b4 <tcp_slowtmr+0x4b4>)
 800932c:	4860      	ldr	r0, [pc, #384]	; (80094b0 <tcp_slowtmr+0x4b0>)
 800932e:	f005 f837 	bl	800e3a0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009332:	68e3      	ldr	r3, [r4, #12]
 8009334:	f8ca 3000 	str.w	r3, [sl]
 8009338:	e6c7      	b.n	80090ca <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800933a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800933c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800933e:	8b23      	ldrh	r3, [r4, #24]
 8009340:	9302      	str	r3, [sp, #8]
 8009342:	8ae3      	ldrh	r3, [r4, #22]
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	1d23      	adds	r3, r4, #4
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	4623      	mov	r3, r4
 800934c:	4620      	mov	r0, r4
 800934e:	f002 fc75 	bl	800bc3c <tcp_rst>
 8009352:	e6be      	b.n	80090d2 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 8009354:	4620      	mov	r0, r4
 8009356:	f002 fcf3 	bl	800bd40 <tcp_output>
 800935a:	4625      	mov	r5, r4
      pcb = pcb->next;
 800935c:	463c      	mov	r4, r7
 800935e:	e003      	b.n	8009368 <tcp_slowtmr+0x368>
      pcb = pcb->next;
 8009360:	4644      	mov	r4, r8
 8009362:	e001      	b.n	8009368 <tcp_slowtmr+0x368>
 8009364:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009366:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8009368:	2c00      	cmp	r4, #0
 800936a:	d052      	beq.n	8009412 <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800936c:	7d23      	ldrb	r3, [r4, #20]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f43f ae5d 	beq.w	800902e <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009374:	7d23      	ldrb	r3, [r4, #20]
 8009376:	2b01      	cmp	r3, #1
 8009378:	f43f ae61 	beq.w	800903e <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800937c:	7d23      	ldrb	r3, [r4, #20]
 800937e:	2b0a      	cmp	r3, #10
 8009380:	f43f ae65 	beq.w	800904e <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009384:	4b4c      	ldr	r3, [pc, #304]	; (80094b8 <tcp_slowtmr+0x4b8>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	7fa2      	ldrb	r2, [r4, #30]
 800938a:	429a      	cmp	r2, r3
 800938c:	f43f ae67 	beq.w	800905e <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8009390:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009392:	7d23      	ldrb	r3, [r4, #20]
 8009394:	2b02      	cmp	r3, #2
 8009396:	f43f ae65 	beq.w	8009064 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800939a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800939e:	2b0b      	cmp	r3, #11
 80093a0:	f63f af16 	bhi.w	80091d0 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 80093a4:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 80093a8:	2f00      	cmp	r7, #0
 80093aa:	f43f aec8 	beq.w	800913e <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80093ae:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80093b0:	b133      	cbz	r3, 80093c0 <tcp_slowtmr+0x3c0>
 80093b2:	4633      	mov	r3, r6
 80093b4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80093b8:	4940      	ldr	r1, [pc, #256]	; (80094bc <tcp_slowtmr+0x4bc>)
 80093ba:	483d      	ldr	r0, [pc, #244]	; (80094b0 <tcp_slowtmr+0x4b0>)
 80093bc:	f004 fff0 	bl	800e3a0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80093c0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	f43f ae9c 	beq.w	8009100 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80093c8:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80093cc:	2b0b      	cmp	r3, #11
 80093ce:	f63f af1f 	bhi.w	8009210 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80093d2:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 80093d6:	4b3a      	ldr	r3, [pc, #232]	; (80094c0 <tcp_slowtmr+0x4c0>)
 80093d8:	4413      	add	r3, r2
 80093da:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 80093de:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d208      	bcs.n	80093f8 <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 80093e6:	3301      	adds	r3, #1
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80093ee:	4293      	cmp	r3, r2
    pcb_remove = 0;
 80093f0:	bf38      	it	cc
 80093f2:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 80093f4:	f4ff aeed 	bcc.w	80091d2 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 80093f8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 80093fc:	2900      	cmp	r1, #0
 80093fe:	f47f ae87 	bne.w	8009110 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009402:	4620      	mov	r0, r4
 8009404:	f002 fecc 	bl	800c1a0 <tcp_zero_window_probe>
 8009408:	2800      	cmp	r0, #0
 800940a:	f43f ae85 	beq.w	8009118 <tcp_slowtmr+0x118>
    pcb_remove = 0;
 800940e:	2700      	movs	r7, #0
 8009410:	e6df      	b.n	80091d2 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 8009412:	4b2c      	ldr	r3, [pc, #176]	; (80094c4 <tcp_slowtmr+0x4c4>)
 8009414:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009416:	2c00      	cmp	r4, #0
 8009418:	d045      	beq.n	80094a6 <tcp_slowtmr+0x4a6>
  prev = NULL;
 800941a:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800941c:	4f2a      	ldr	r7, [pc, #168]	; (80094c8 <tcp_slowtmr+0x4c8>)
 800941e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80094d8 <tcp_slowtmr+0x4d8>
 8009422:	4e23      	ldr	r6, [pc, #140]	; (80094b0 <tcp_slowtmr+0x4b0>)
 8009424:	e009      	b.n	800943a <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009426:	4b29      	ldr	r3, [pc, #164]	; (80094cc <tcp_slowtmr+0x4cc>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	6a22      	ldr	r2, [r4, #32]
 800942c:	1a9b      	subs	r3, r3, r2
 800942e:	2bf0      	cmp	r3, #240	; 0xf0
 8009430:	d80e      	bhi.n	8009450 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8009432:	4625      	mov	r5, r4
 8009434:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8009436:	2c00      	cmp	r4, #0
 8009438:	d035      	beq.n	80094a6 <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800943a:	7d23      	ldrb	r3, [r4, #20]
 800943c:	2b0a      	cmp	r3, #10
 800943e:	d0f2      	beq.n	8009426 <tcp_slowtmr+0x426>
 8009440:	463b      	mov	r3, r7
 8009442:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009446:	4641      	mov	r1, r8
 8009448:	4630      	mov	r0, r6
 800944a:	f004 ffa9 	bl	800e3a0 <iprintf>
 800944e:	e7ea      	b.n	8009426 <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8009450:	4620      	mov	r0, r4
 8009452:	f7ff f9d7 	bl	8008804 <tcp_pcb_purge>
      if (prev != NULL) {
 8009456:	b1a5      	cbz	r5, 8009482 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009458:	4b1a      	ldr	r3, [pc, #104]	; (80094c4 <tcp_slowtmr+0x4c4>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	42a3      	cmp	r3, r4
 800945e:	d008      	beq.n	8009472 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8009460:	68e3      	ldr	r3, [r4, #12]
 8009462:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8009464:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 8009468:	4620      	mov	r0, r4
 800946a:	f7fe ff59 	bl	8008320 <tcp_free>
      pcb = pcb->next;
 800946e:	464c      	mov	r4, r9
 8009470:	e7e1      	b.n	8009436 <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009472:	463b      	mov	r3, r7
 8009474:	f240 52af 	movw	r2, #1455	; 0x5af
 8009478:	4915      	ldr	r1, [pc, #84]	; (80094d0 <tcp_slowtmr+0x4d0>)
 800947a:	4630      	mov	r0, r6
 800947c:	f004 ff90 	bl	800e3a0 <iprintf>
 8009480:	e7ee      	b.n	8009460 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009482:	4b10      	ldr	r3, [pc, #64]	; (80094c4 <tcp_slowtmr+0x4c4>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	42a3      	cmp	r3, r4
 8009488:	d006      	beq.n	8009498 <tcp_slowtmr+0x498>
 800948a:	463b      	mov	r3, r7
 800948c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009490:	4910      	ldr	r1, [pc, #64]	; (80094d4 <tcp_slowtmr+0x4d4>)
 8009492:	4630      	mov	r0, r6
 8009494:	f004 ff84 	bl	800e3a0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009498:	68e2      	ldr	r2, [r4, #12]
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <tcp_slowtmr+0x4c4>)
 800949c:	601a      	str	r2, [r3, #0]
 800949e:	e7e1      	b.n	8009464 <tcp_slowtmr+0x464>
    pcb_reset = 0;
 80094a0:	f04f 0800 	mov.w	r8, #0
 80094a4:	e6f7      	b.n	8009296 <tcp_slowtmr+0x296>
}
 80094a6:	b005      	add	sp, #20
 80094a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094ac:	0801175c 	.word	0x0801175c
 80094b0:	0800f6b8 	.word	0x0800f6b8
 80094b4:	08011788 	.word	0x08011788
 80094b8:	20010c79 	.word	0x20010c79
 80094bc:	080116f0 	.word	0x080116f0
 80094c0:	08011854 	.word	0x08011854
 80094c4:	20010c7c 	.word	0x20010c7c
 80094c8:	080111b8 	.word	0x080111b8
 80094cc:	20010c74 	.word	0x20010c74
 80094d0:	080117e4 	.word	0x080117e4
 80094d4:	0801180c 	.word	0x0801180c
 80094d8:	080117b4 	.word	0x080117b4

080094dc <tcp_tmr>:
{
 80094dc:	b508      	push	{r3, lr}
  tcp_fasttmr();
 80094de:	f7ff fd47 	bl	8008f70 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 80094e2:	4a06      	ldr	r2, [pc, #24]	; (80094fc <tcp_tmr+0x20>)
 80094e4:	7813      	ldrb	r3, [r2, #0]
 80094e6:	3301      	adds	r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	7013      	strb	r3, [r2, #0]
 80094ec:	f013 0f01 	tst.w	r3, #1
 80094f0:	d100      	bne.n	80094f4 <tcp_tmr+0x18>
}
 80094f2:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 80094f4:	f7ff fd84 	bl	8009000 <tcp_slowtmr>
}
 80094f8:	e7fb      	b.n	80094f2 <tcp_tmr+0x16>
 80094fa:	bf00      	nop
 80094fc:	20010c78 	.word	0x20010c78

08009500 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8009500:	4a09      	ldr	r2, [pc, #36]	; (8009528 <tcp_get_next_optbyte+0x28>)
 8009502:	8813      	ldrh	r3, [r2, #0]
 8009504:	1c59      	adds	r1, r3, #1
 8009506:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009508:	4a08      	ldr	r2, [pc, #32]	; (800952c <tcp_get_next_optbyte+0x2c>)
 800950a:	6812      	ldr	r2, [r2, #0]
 800950c:	b11a      	cbz	r2, 8009516 <tcp_get_next_optbyte+0x16>
 800950e:	4908      	ldr	r1, [pc, #32]	; (8009530 <tcp_get_next_optbyte+0x30>)
 8009510:	8809      	ldrh	r1, [r1, #0]
 8009512:	428b      	cmp	r3, r1
 8009514:	d204      	bcs.n	8009520 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009516:	4a07      	ldr	r2, [pc, #28]	; (8009534 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8009518:	6812      	ldr	r2, [r2, #0]
 800951a:	4413      	add	r3, r2
 800951c:	7d18      	ldrb	r0, [r3, #20]
 800951e:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009520:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8009522:	b2db      	uxtb	r3, r3
 8009524:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8009526:	4770      	bx	lr
 8009528:	20010cac 	.word	0x20010cac
 800952c:	20010cb8 	.word	0x20010cb8
 8009530:	20010cb4 	.word	0x20010cb4
 8009534:	20010cb0 	.word	0x20010cb0

08009538 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800953a:	4607      	mov	r7, r0
 800953c:	b1d0      	cbz	r0, 8009574 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800953e:	4b1e      	ldr	r3, [pc, #120]	; (80095b8 <tcp_parseopt+0x80>)
 8009540:	881d      	ldrh	r5, [r3, #0]
 8009542:	2d00      	cmp	r5, #0
 8009544:	d037      	beq.n	80095b6 <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009546:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <tcp_parseopt+0x84>)
 8009548:	2200      	movs	r2, #0
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	461e      	mov	r6, r3
 800954e:	8833      	ldrh	r3, [r6, #0]
 8009550:	42ab      	cmp	r3, r5
 8009552:	d230      	bcs.n	80095b6 <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8009554:	f7ff ffd4 	bl	8009500 <tcp_get_next_optbyte>
      switch (opt) {
 8009558:	2801      	cmp	r0, #1
 800955a:	d0f8      	beq.n	800954e <tcp_parseopt+0x16>
 800955c:	2802      	cmp	r0, #2
 800955e:	d011      	beq.n	8009584 <tcp_parseopt+0x4c>
 8009560:	b348      	cbz	r0, 80095b6 <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009562:	f7ff ffcd 	bl	8009500 <tcp_get_next_optbyte>
          if (data < 2) {
 8009566:	2801      	cmp	r0, #1
 8009568:	d925      	bls.n	80095b6 <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800956a:	8833      	ldrh	r3, [r6, #0]
 800956c:	3b02      	subs	r3, #2
 800956e:	4418      	add	r0, r3
 8009570:	8030      	strh	r0, [r6, #0]
 8009572:	e7ec      	b.n	800954e <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009574:	4b12      	ldr	r3, [pc, #72]	; (80095c0 <tcp_parseopt+0x88>)
 8009576:	f240 727d 	movw	r2, #1917	; 0x77d
 800957a:	4912      	ldr	r1, [pc, #72]	; (80095c4 <tcp_parseopt+0x8c>)
 800957c:	4812      	ldr	r0, [pc, #72]	; (80095c8 <tcp_parseopt+0x90>)
 800957e:	f004 ff0f 	bl	800e3a0 <iprintf>
 8009582:	e7dc      	b.n	800953e <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009584:	f7ff ffbc 	bl	8009500 <tcp_get_next_optbyte>
 8009588:	2804      	cmp	r0, #4
 800958a:	d114      	bne.n	80095b6 <tcp_parseopt+0x7e>
 800958c:	8833      	ldrh	r3, [r6, #0]
 800958e:	3301      	adds	r3, #1
 8009590:	42ab      	cmp	r3, r5
 8009592:	da10      	bge.n	80095b6 <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009594:	f7ff ffb4 	bl	8009500 <tcp_get_next_optbyte>
 8009598:	0204      	lsls	r4, r0, #8
 800959a:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 800959c:	f7ff ffb0 	bl	8009500 <tcp_get_next_optbyte>
 80095a0:	4320      	orrs	r0, r4
 80095a2:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80095a4:	1e43      	subs	r3, r0, #1
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80095ac:	bf28      	it	cs
 80095ae:	f44f 7006 	movcs.w	r0, #536	; 0x218
 80095b2:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 80095b4:	e7cb      	b.n	800954e <tcp_parseopt+0x16>
      }
    }
  }
}
 80095b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095b8:	20010cbc 	.word	0x20010cbc
 80095bc:	20010cac 	.word	0x20010cac
 80095c0:	0801185c 	.word	0x0801185c
 80095c4:	08011890 	.word	0x08011890
 80095c8:	0800f6b8 	.word	0x0800f6b8

080095cc <tcp_input_delayed_close>:
{
 80095cc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80095ce:	4604      	mov	r4, r0
 80095d0:	b130      	cbz	r0, 80095e0 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 80095d2:	4b11      	ldr	r3, [pc, #68]	; (8009618 <tcp_input_delayed_close+0x4c>)
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	f013 0f10 	tst.w	r3, #16
 80095da:	d109      	bne.n	80095f0 <tcp_input_delayed_close+0x24>
  return 0;
 80095dc:	2000      	movs	r0, #0
}
 80095de:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80095e0:	4b0e      	ldr	r3, [pc, #56]	; (800961c <tcp_input_delayed_close+0x50>)
 80095e2:	f240 225a 	movw	r2, #602	; 0x25a
 80095e6:	490e      	ldr	r1, [pc, #56]	; (8009620 <tcp_input_delayed_close+0x54>)
 80095e8:	480e      	ldr	r0, [pc, #56]	; (8009624 <tcp_input_delayed_close+0x58>)
 80095ea:	f004 fed9 	bl	800e3a0 <iprintf>
 80095ee:	e7f0      	b.n	80095d2 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80095f0:	8b63      	ldrh	r3, [r4, #26]
 80095f2:	f013 0f10 	tst.w	r3, #16
 80095f6:	d106      	bne.n	8009606 <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80095f8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80095fc:	b11b      	cbz	r3, 8009606 <tcp_input_delayed_close+0x3a>
 80095fe:	f06f 010e 	mvn.w	r1, #14
 8009602:	6920      	ldr	r0, [r4, #16]
 8009604:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009606:	4621      	mov	r1, r4
 8009608:	4807      	ldr	r0, [pc, #28]	; (8009628 <tcp_input_delayed_close+0x5c>)
 800960a:	f7ff f92b 	bl	8008864 <tcp_pcb_remove>
    tcp_free(pcb);
 800960e:	4620      	mov	r0, r4
 8009610:	f7fe fe86 	bl	8008320 <tcp_free>
    return 1;
 8009614:	2001      	movs	r0, #1
 8009616:	e7e2      	b.n	80095de <tcp_input_delayed_close+0x12>
 8009618:	20010ca0 	.word	0x20010ca0
 800961c:	0801185c 	.word	0x0801185c
 8009620:	080118ac 	.word	0x080118ac
 8009624:	0800f6b8 	.word	0x0800f6b8
 8009628:	20010c64 	.word	0x20010c64

0800962c <tcp_free_acked_segments>:
{
 800962c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8009630:	460d      	mov	r5, r1
 8009632:	b139      	cbz	r1, 8009644 <tcp_free_acked_segments+0x18>
 8009634:	4606      	mov	r6, r0
 8009636:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009638:	4f2c      	ldr	r7, [pc, #176]	; (80096ec <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800963a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80096f4 <tcp_free_acked_segments+0xc8>
 800963e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8009700 <tcp_free_acked_segments+0xd4>
 8009642:	e01b      	b.n	800967c <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8009644:	468b      	mov	fp, r1
 8009646:	e00a      	b.n	800965e <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009648:	4653      	mov	r3, sl
 800964a:	f240 4257 	movw	r2, #1111	; 0x457
 800964e:	4649      	mov	r1, r9
 8009650:	4827      	ldr	r0, [pc, #156]	; (80096f0 <tcp_free_acked_segments+0xc4>)
 8009652:	f004 fea5 	bl	800e3a0 <iprintf>
 8009656:	e030      	b.n	80096ba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009658:	f1b8 0f00 	cmp.w	r8, #0
 800965c:	d002      	beq.n	8009664 <tcp_free_acked_segments+0x38>
}
 800965e:	4658      	mov	r0, fp
 8009660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009664:	4b23      	ldr	r3, [pc, #140]	; (80096f4 <tcp_free_acked_segments+0xc8>)
 8009666:	f240 4261 	movw	r2, #1121	; 0x461
 800966a:	4923      	ldr	r1, [pc, #140]	; (80096f8 <tcp_free_acked_segments+0xcc>)
 800966c:	4820      	ldr	r0, [pc, #128]	; (80096f0 <tcp_free_acked_segments+0xc4>)
 800966e:	f004 fe97 	bl	800e3a0 <iprintf>
 8009672:	e7f4      	b.n	800965e <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8009674:	f1bb 0f00 	cmp.w	fp, #0
 8009678:	d0f1      	beq.n	800965e <tcp_free_acked_segments+0x32>
 800967a:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800967c:	68eb      	ldr	r3, [r5, #12]
 800967e:	6858      	ldr	r0, [r3, #4]
 8009680:	f7fd fc5f 	bl	8006f42 <lwip_htonl>
 8009684:	4604      	mov	r4, r0
 8009686:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 800968a:	68eb      	ldr	r3, [r5, #12]
 800968c:	8998      	ldrh	r0, [r3, #12]
 800968e:	f7fd fc53 	bl	8006f38 <lwip_htons>
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	1ae4      	subs	r4, r4, r3
 8009696:	445c      	add	r4, fp
 8009698:	f010 0003 	ands.w	r0, r0, #3
 800969c:	bf18      	it	ne
 800969e:	2001      	movne	r0, #1
 80096a0:	4404      	add	r4, r0
  while (seg_list != NULL &&
 80096a2:	2c00      	cmp	r4, #0
 80096a4:	dc1f      	bgt.n	80096e6 <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 80096a6:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 80096aa:	6868      	ldr	r0, [r5, #4]
 80096ac:	f7fe fc52 	bl	8007f54 <pbuf_clen>
 80096b0:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80096b2:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80096b6:	4283      	cmp	r3, r0
 80096b8:	d3c6      	bcc.n	8009648 <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80096ba:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 80096be:	1b04      	subs	r4, r0, r4
 80096c0:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80096c4:	4a0d      	ldr	r2, [pc, #52]	; (80096fc <tcp_free_acked_segments+0xd0>)
 80096c6:	892b      	ldrh	r3, [r5, #8]
 80096c8:	8811      	ldrh	r1, [r2, #0]
 80096ca:	440b      	add	r3, r1
 80096cc:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 80096ce:	4628      	mov	r0, r5
 80096d0:	f7fe ff88 	bl	80085e4 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 80096d4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d0cb      	beq.n	8009674 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80096dc:	f1bb 0f00 	cmp.w	fp, #0
 80096e0:	d0ba      	beq.n	8009658 <tcp_free_acked_segments+0x2c>
 80096e2:	465d      	mov	r5, fp
 80096e4:	e7ca      	b.n	800967c <tcp_free_acked_segments+0x50>
 80096e6:	46ab      	mov	fp, r5
  return seg_list;
 80096e8:	e7b9      	b.n	800965e <tcp_free_acked_segments+0x32>
 80096ea:	bf00      	nop
 80096ec:	20010c80 	.word	0x20010c80
 80096f0:	0800f6b8 	.word	0x0800f6b8
 80096f4:	0801185c 	.word	0x0801185c
 80096f8:	080118fc 	.word	0x080118fc
 80096fc:	20010c98 	.word	0x20010c98
 8009700:	080118d4 	.word	0x080118d4

08009704 <tcp_oos_insert_segment>:
{
 8009704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009708:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800970a:	4605      	mov	r5, r0
 800970c:	b160      	cbz	r0, 8009728 <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800970e:	68eb      	ldr	r3, [r5, #12]
 8009710:	8998      	ldrh	r0, [r3, #12]
 8009712:	f7fd fc11 	bl	8006f38 <lwip_htons>
 8009716:	f010 0f01 	tst.w	r0, #1
 800971a:	d10d      	bne.n	8009738 <tcp_oos_insert_segment+0x34>
    while (next &&
 800971c:	2c00      	cmp	r4, #0
 800971e:	d035      	beq.n	800978c <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009720:	4e20      	ldr	r6, [pc, #128]	; (80097a4 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009722:	f04f 0901 	mov.w	r9, #1
 8009726:	e014      	b.n	8009752 <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009728:	4b1f      	ldr	r3, [pc, #124]	; (80097a8 <tcp_oos_insert_segment+0xa4>)
 800972a:	f240 421f 	movw	r2, #1055	; 0x41f
 800972e:	491f      	ldr	r1, [pc, #124]	; (80097ac <tcp_oos_insert_segment+0xa8>)
 8009730:	481f      	ldr	r0, [pc, #124]	; (80097b0 <tcp_oos_insert_segment+0xac>)
 8009732:	f004 fe35 	bl	800e3a0 <iprintf>
 8009736:	e7ea      	b.n	800970e <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 8009738:	4620      	mov	r0, r4
 800973a:	f7fe ff60 	bl	80085fe <tcp_segs_free>
    next = NULL;
 800973e:	2400      	movs	r4, #0
  cseg->next = next;
 8009740:	602c      	str	r4, [r5, #0]
}
 8009742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 8009746:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8009748:	4620      	mov	r0, r4
 800974a:	f7fe ff4b 	bl	80085e4 <tcp_seg_free>
    while (next &&
 800974e:	b1ef      	cbz	r7, 800978c <tcp_oos_insert_segment+0x88>
      next = next->next;
 8009750:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 8009752:	f8d6 c000 	ldr.w	ip, [r6]
 8009756:	68e1      	ldr	r1, [r4, #12]
 8009758:	6848      	ldr	r0, [r1, #4]
 800975a:	892b      	ldrh	r3, [r5, #8]
 800975c:	4463      	add	r3, ip
 800975e:	1a1b      	subs	r3, r3, r0
 8009760:	8922      	ldrh	r2, [r4, #8]
 8009762:	1a9a      	subs	r2, r3, r2
    while (next &&
 8009764:	2a00      	cmp	r2, #0
 8009766:	db13      	blt.n	8009790 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009768:	8988      	ldrh	r0, [r1, #12]
 800976a:	f7fd fbe5 	bl	8006f38 <lwip_htons>
 800976e:	f010 0f01 	tst.w	r0, #1
 8009772:	d0e8      	beq.n	8009746 <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8009774:	68eb      	ldr	r3, [r5, #12]
 8009776:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800977a:	4648      	mov	r0, r9
 800977c:	f7fd fbdc 	bl	8006f38 <lwip_htons>
 8009780:	68eb      	ldr	r3, [r5, #12]
 8009782:	ea48 0800 	orr.w	r8, r8, r0
 8009786:	f8a3 800c 	strh.w	r8, [r3, #12]
 800978a:	e7dc      	b.n	8009746 <tcp_oos_insert_segment+0x42>
    next = NULL;
 800978c:	2400      	movs	r4, #0
 800978e:	e7d7      	b.n	8009740 <tcp_oos_insert_segment+0x3c>
    if (next &&
 8009790:	2b00      	cmp	r3, #0
 8009792:	ddd5      	ble.n	8009740 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8009794:	eba0 010c 	sub.w	r1, r0, ip
 8009798:	b289      	uxth	r1, r1
 800979a:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800979c:	6868      	ldr	r0, [r5, #4]
 800979e:	f7fe fb79 	bl	8007e94 <pbuf_realloc>
 80097a2:	e7cd      	b.n	8009740 <tcp_oos_insert_segment+0x3c>
 80097a4:	20010ca4 	.word	0x20010ca4
 80097a8:	0801185c 	.word	0x0801185c
 80097ac:	0801191c 	.word	0x0801191c
 80097b0:	0800f6b8 	.word	0x0800f6b8

080097b4 <tcp_receive>:
{
 80097b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80097b8:	4604      	mov	r4, r0
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d066      	beq.n	800988c <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80097be:	7d23      	ldrb	r3, [r4, #20]
 80097c0:	2b03      	cmp	r3, #3
 80097c2:	d96b      	bls.n	800989c <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 80097c4:	4ba4      	ldr	r3, [pc, #656]	; (8009a58 <tcp_receive+0x2a4>)
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	f013 0f10 	tst.w	r3, #16
 80097cc:	d03a      	beq.n	8009844 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80097ce:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80097d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80097d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80097d6:	4ba1      	ldr	r3, [pc, #644]	; (8009a5c <tcp_receive+0x2a8>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	1ad1      	subs	r1, r2, r3
 80097dc:	2900      	cmp	r1, #0
 80097de:	db0a      	blt.n	80097f6 <tcp_receive+0x42>
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d063      	beq.n	80098ac <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80097e4:	4a9e      	ldr	r2, [pc, #632]	; (8009a60 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80097e6:	6812      	ldr	r2, [r2, #0]
 80097e8:	4290      	cmp	r0, r2
 80097ea:	d114      	bne.n	8009816 <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80097ec:	4a9d      	ldr	r2, [pc, #628]	; (8009a64 <tcp_receive+0x2b0>)
 80097ee:	6812      	ldr	r2, [r2, #0]
 80097f0:	89d2      	ldrh	r2, [r2, #14]
 80097f2:	42aa      	cmp	r2, r5
 80097f4:	d90f      	bls.n	8009816 <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80097f6:	4a9b      	ldr	r2, [pc, #620]	; (8009a64 <tcp_receive+0x2b0>)
 80097f8:	6812      	ldr	r2, [r2, #0]
 80097fa:	89d2      	ldrh	r2, [r2, #14]
 80097fc:	b291      	uxth	r1, r2
 80097fe:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009802:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 8009806:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009808:	bf38      	it	cc
 800980a:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800980e:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8009810:	4b93      	ldr	r3, [pc, #588]	; (8009a60 <tcp_receive+0x2ac>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009816:	4b92      	ldr	r3, [pc, #584]	; (8009a60 <tcp_receive+0x2ac>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800981c:	1a5a      	subs	r2, r3, r1
 800981e:	2a00      	cmp	r2, #0
 8009820:	dd4a      	ble.n	80098b8 <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009822:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8009824:	1a9a      	subs	r2, r3, r2
 8009826:	2a00      	cmp	r2, #0
 8009828:	f340 808a 	ble.w	8009940 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 800982c:	4620      	mov	r0, r4
 800982e:	f002 fa4d 	bl	800bccc <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009834:	b133      	cbz	r3, 8009844 <tcp_receive+0x90>
 8009836:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8009838:	4989      	ldr	r1, [pc, #548]	; (8009a60 <tcp_receive+0x2ac>)
 800983a:	6809      	ldr	r1, [r1, #0]
 800983c:	1a52      	subs	r2, r2, r1
 800983e:	2a00      	cmp	r2, #0
 8009840:	f2c0 8131 	blt.w	8009aa6 <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009844:	4b88      	ldr	r3, [pc, #544]	; (8009a68 <tcp_receive+0x2b4>)
 8009846:	881a      	ldrh	r2, [r3, #0]
 8009848:	2a00      	cmp	r2, #0
 800984a:	d058      	beq.n	80098fe <tcp_receive+0x14a>
 800984c:	7d23      	ldrb	r3, [r4, #20]
 800984e:	2b06      	cmp	r3, #6
 8009850:	d855      	bhi.n	80098fe <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009852:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009854:	4b81      	ldr	r3, [pc, #516]	; (8009a5c <tcp_receive+0x2a8>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	1ace      	subs	r6, r1, r3
 800985a:	2e01      	cmp	r6, #1
 800985c:	d406      	bmi.n	800986c <tcp_receive+0xb8>
 800985e:	f1c3 0001 	rsb	r0, r3, #1
 8009862:	1a82      	subs	r2, r0, r2
 8009864:	440a      	add	r2, r1
 8009866:	2a00      	cmp	r2, #0
 8009868:	f340 813f 	ble.w	8009aea <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800986c:	1a5a      	subs	r2, r3, r1
 800986e:	2a00      	cmp	r2, #0
 8009870:	f2c0 8185 	blt.w	8009b7e <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009874:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009876:	f1c2 0201 	rsb	r2, r2, #1
 800987a:	441a      	add	r2, r3
 800987c:	1a52      	subs	r2, r2, r1
 800987e:	2a00      	cmp	r2, #0
 8009880:	f340 8182 	ble.w	8009b88 <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 8009884:	4620      	mov	r0, r4
 8009886:	f002 fa21 	bl	800bccc <tcp_send_empty_ack>
 800988a:	e048      	b.n	800991e <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800988c:	4b77      	ldr	r3, [pc, #476]	; (8009a6c <tcp_receive+0x2b8>)
 800988e:	f240 427b 	movw	r2, #1147	; 0x47b
 8009892:	4977      	ldr	r1, [pc, #476]	; (8009a70 <tcp_receive+0x2bc>)
 8009894:	4877      	ldr	r0, [pc, #476]	; (8009a74 <tcp_receive+0x2c0>)
 8009896:	f004 fd83 	bl	800e3a0 <iprintf>
 800989a:	e790      	b.n	80097be <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800989c:	4b73      	ldr	r3, [pc, #460]	; (8009a6c <tcp_receive+0x2b8>)
 800989e:	f240 427c 	movw	r2, #1148	; 0x47c
 80098a2:	4975      	ldr	r1, [pc, #468]	; (8009a78 <tcp_receive+0x2c4>)
 80098a4:	4873      	ldr	r0, [pc, #460]	; (8009a74 <tcp_receive+0x2c0>)
 80098a6:	f004 fd7b 	bl	800e3a0 <iprintf>
 80098aa:	e78b      	b.n	80097c4 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80098ac:	4a6c      	ldr	r2, [pc, #432]	; (8009a60 <tcp_receive+0x2ac>)
 80098ae:	6812      	ldr	r2, [r2, #0]
 80098b0:	1a82      	subs	r2, r0, r2
 80098b2:	2a00      	cmp	r2, #0
 80098b4:	da96      	bge.n	80097e4 <tcp_receive+0x30>
 80098b6:	e79e      	b.n	80097f6 <tcp_receive+0x42>
      if (tcplen == 0) {
 80098b8:	4a6b      	ldr	r2, [pc, #428]	; (8009a68 <tcp_receive+0x2b4>)
 80098ba:	8812      	ldrh	r2, [r2, #0]
 80098bc:	b932      	cbnz	r2, 80098cc <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80098be:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 80098c2:	6da6      	ldr	r6, [r4, #88]	; 0x58
 80098c4:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80098c6:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80098c8:	4282      	cmp	r2, r0
 80098ca:	d003      	beq.n	80098d4 <tcp_receive+0x120>
        pcb->dupacks = 0;
 80098cc:	2300      	movs	r3, #0
 80098ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098d2:	e7ae      	b.n	8009832 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 80098d4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80098d8:	2a00      	cmp	r2, #0
 80098da:	dbf7      	blt.n	80098cc <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 80098dc:	428b      	cmp	r3, r1
 80098de:	d1f5      	bne.n	80098cc <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80098e0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80098e4:	2bff      	cmp	r3, #255	; 0xff
 80098e6:	d01c      	beq.n	8009922 <tcp_receive+0x16e>
                ++pcb->dupacks;
 80098e8:	3301      	adds	r3, #1
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 80098f0:	2b03      	cmp	r3, #3
 80098f2:	d816      	bhi.n	8009922 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	d01f      	beq.n	8009938 <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80098f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d19b      	bne.n	8009836 <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80098fe:	4b57      	ldr	r3, [pc, #348]	; (8009a5c <tcp_receive+0x2a8>)
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009904:	1a99      	subs	r1, r3, r2
 8009906:	2900      	cmp	r1, #0
 8009908:	db05      	blt.n	8009916 <tcp_receive+0x162>
 800990a:	3301      	adds	r3, #1
 800990c:	1a9b      	subs	r3, r3, r2
 800990e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	2b00      	cmp	r3, #0
 8009914:	dd03      	ble.n	800991e <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 8009916:	8b63      	ldrh	r3, [r4, #26]
 8009918:	f043 0302 	orr.w	r3, r3, #2
 800991c:	8363      	strh	r3, [r4, #26]
}
 800991e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009922:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009926:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009928:	4413      	add	r3, r2
 800992a:	b29b      	uxth	r3, r3
 800992c:	429a      	cmp	r2, r3
 800992e:	bf88      	it	hi
 8009930:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8009934:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009938:	4620      	mov	r0, r4
 800993a:	f002 f943 	bl	800bbc4 <tcp_rexmit_fast>
      if (!found_dupack) {
 800993e:	e778      	b.n	8009832 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 8009940:	8b62      	ldrh	r2, [r4, #26]
 8009942:	f012 0f04 	tst.w	r2, #4
 8009946:	d009      	beq.n	800995c <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 8009948:	f022 0204 	bic.w	r2, r2, #4
 800994c:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800994e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009952:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009956:	2200      	movs	r2, #0
 8009958:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 800995c:	2000      	movs	r0, #0
 800995e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009962:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8009966:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8009968:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800996c:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 8009970:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 8009974:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 8009976:	7d22      	ldrb	r2, [r4, #20]
 8009978:	2a03      	cmp	r2, #3
 800997a:	d91c      	bls.n	80099b6 <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800997c:	1a5b      	subs	r3, r3, r1
 800997e:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8009980:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009984:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8009988:	4291      	cmp	r1, r2
 800998a:	d948      	bls.n	8009a1e <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800998c:	8b61      	ldrh	r1, [r4, #26]
 800998e:	f411 6f00 	tst.w	r1, #2048	; 0x800
 8009992:	bf14      	ite	ne
 8009994:	2001      	movne	r0, #1
 8009996:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009998:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800999a:	fb11 f100 	smulbb	r1, r1, r0
 800999e:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 80099a0:	4299      	cmp	r1, r3
 80099a2:	bf94      	ite	ls
 80099a4:	1850      	addls	r0, r2, r1
 80099a6:	18d0      	addhi	r0, r2, r3
 80099a8:	b283      	uxth	r3, r0
 80099aa:	429a      	cmp	r2, r3
 80099ac:	bf88      	it	hi
 80099ae:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 80099b2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80099b6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80099b8:	4a30      	ldr	r2, [pc, #192]	; (8009a7c <tcp_receive+0x2c8>)
 80099ba:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80099bc:	4620      	mov	r0, r4
 80099be:	f7ff fe35 	bl	800962c <tcp_free_acked_segments>
 80099c2:	4603      	mov	r3, r0
 80099c4:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80099c6:	4a2e      	ldr	r2, [pc, #184]	; (8009a80 <tcp_receive+0x2cc>)
 80099c8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80099ca:	4620      	mov	r0, r4
 80099cc:	f7ff fe2e 	bl	800962c <tcp_free_acked_segments>
 80099d0:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 80099d2:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80099d4:	fab2 f382 	clz	r3, r2
 80099d8:	095b      	lsrs	r3, r3, #5
 80099da:	425b      	negs	r3, r3
 80099dc:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80099de:	2300      	movs	r3, #0
 80099e0:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 80099e2:	2800      	cmp	r0, #0
 80099e4:	d035      	beq.n	8009a52 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80099e6:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80099ea:	4926      	ldr	r1, [pc, #152]	; (8009a84 <tcp_receive+0x2d0>)
 80099ec:	8809      	ldrh	r1, [r1, #0]
 80099ee:	440b      	add	r3, r1
 80099f0:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 80099f4:	8b63      	ldrh	r3, [r4, #26]
 80099f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80099fa:	f43f af1a 	beq.w	8009832 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d042      	beq.n	8009a88 <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8009a02:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009a04:	68d3      	ldr	r3, [r2, #12]
 8009a06:	6858      	ldr	r0, [r3, #4]
 8009a08:	f7fd fa9b 	bl	8006f42 <lwip_htonl>
 8009a0c:	1a2d      	subs	r5, r5, r0
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	f73f af0f 	bgt.w	8009832 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 8009a14:	8b63      	ldrh	r3, [r4, #26]
 8009a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a1a:	8363      	strh	r3, [r4, #26]
 8009a1c:	e709      	b.n	8009832 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009a1e:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 8009a22:	440b      	add	r3, r1
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	4299      	cmp	r1, r3
 8009a28:	d804      	bhi.n	8009a34 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d904      	bls.n	8009a38 <tcp_receive+0x284>
 8009a2e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8009a32:	e7c0      	b.n	80099b6 <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009a34:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009a3e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009a40:	4413      	add	r3, r2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	429a      	cmp	r2, r3
 8009a46:	bf88      	it	hi
 8009a48:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 8009a4c:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009a50:	e7b1      	b.n	80099b6 <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 8009a52:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8009a56:	e7c6      	b.n	80099e6 <tcp_receive+0x232>
 8009a58:	20010c84 	.word	0x20010c84
 8009a5c:	20010ca4 	.word	0x20010ca4
 8009a60:	20010c80 	.word	0x20010c80
 8009a64:	20010cb0 	.word	0x20010cb0
 8009a68:	20010cbe 	.word	0x20010cbe
 8009a6c:	0801185c 	.word	0x0801185c
 8009a70:	08011944 	.word	0x08011944
 8009a74:	0800f6b8 	.word	0x0800f6b8
 8009a78:	08011960 	.word	0x08011960
 8009a7c:	0801197c 	.word	0x0801197c
 8009a80:	08011984 	.word	0x08011984
 8009a84:	20010c98 	.word	0x20010c98
          if ((pcb->unsent == NULL) ||
 8009a88:	b140      	cbz	r0, 8009a9c <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8009a8a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8009a8c:	68c3      	ldr	r3, [r0, #12]
 8009a8e:	6858      	ldr	r0, [r3, #4]
 8009a90:	f7fd fa57 	bl	8006f42 <lwip_htonl>
 8009a94:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	f73f aecb 	bgt.w	8009832 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 8009a9c:	8b63      	ldrh	r3, [r4, #26]
 8009a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009aa2:	8363      	strh	r3, [r4, #26]
 8009aa4:	e6c5      	b.n	8009832 <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009aa6:	4a9a      	ldr	r2, [pc, #616]	; (8009d10 <tcp_receive+0x55c>)
 8009aa8:	8816      	ldrh	r6, [r2, #0]
 8009aaa:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 8009aac:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 8009ab0:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 8009ab4:	1ab1      	subs	r1, r6, r2
 8009ab6:	1ac9      	subs	r1, r1, r3
 8009ab8:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8009aba:	fa15 f181 	uxtah	r1, r5, r1
 8009abe:	b209      	sxth	r1, r1
 8009ac0:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	db0d      	blt.n	8009ae2 <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 8009ac6:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 8009aca:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 8009ace:	1813      	adds	r3, r2, r0
 8009ad0:	b29b      	uxth	r3, r3
 8009ad2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009ad4:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009ad8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	6363      	str	r3, [r4, #52]	; 0x34
 8009ae0:	e6b0      	b.n	8009844 <tcp_receive+0x90>
        m = (s16_t) - m;
 8009ae2:	1b92      	subs	r2, r2, r6
 8009ae4:	4413      	add	r3, r2
 8009ae6:	b218      	sxth	r0, r3
 8009ae8:	e7ed      	b.n	8009ac6 <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 8009aea:	4b8a      	ldr	r3, [pc, #552]	; (8009d14 <tcp_receive+0x560>)
 8009aec:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009aee:	2d00      	cmp	r5, #0
 8009af0:	d02d      	beq.n	8009b4e <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009af2:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009af6:	429e      	cmp	r6, r3
 8009af8:	d831      	bhi.n	8009b5e <tcp_receive+0x3aa>
      off = (u16_t)off32;
 8009afa:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009afc:	4b85      	ldr	r3, [pc, #532]	; (8009d14 <tcp_receive+0x560>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	891b      	ldrh	r3, [r3, #8]
 8009b02:	42b3      	cmp	r3, r6
 8009b04:	d333      	bcc.n	8009b6e <tcp_receive+0x3ba>
      inseg.len -= off;
 8009b06:	4b83      	ldr	r3, [pc, #524]	; (8009d14 <tcp_receive+0x560>)
 8009b08:	891a      	ldrh	r2, [r3, #8]
 8009b0a:	1b92      	subs	r2, r2, r6
 8009b0c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	891a      	ldrh	r2, [r3, #8]
 8009b12:	1b92      	subs	r2, r2, r6
 8009b14:	b292      	uxth	r2, r2
      while (p->len < off) {
 8009b16:	896b      	ldrh	r3, [r5, #10]
 8009b18:	429e      	cmp	r6, r3
 8009b1a:	d908      	bls.n	8009b2e <tcp_receive+0x37a>
        p->len = 0;
 8009b1c:	2100      	movs	r1, #0
        off -= p->len;
 8009b1e:	1af3      	subs	r3, r6, r3
 8009b20:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 8009b22:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 8009b24:	8169      	strh	r1, [r5, #10]
        p = p->next;
 8009b26:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 8009b28:	896b      	ldrh	r3, [r5, #10]
 8009b2a:	42b3      	cmp	r3, r6
 8009b2c:	d3f7      	bcc.n	8009b1e <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7fe f857 	bl	8007be4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b38:	4a77      	ldr	r2, [pc, #476]	; (8009d18 <tcp_receive+0x564>)
 8009b3a:	6013      	str	r3, [r2, #0]
 8009b3c:	4a75      	ldr	r2, [pc, #468]	; (8009d14 <tcp_receive+0x560>)
 8009b3e:	68d2      	ldr	r2, [r2, #12]
 8009b40:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b42:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009b44:	1a5a      	subs	r2, r3, r1
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	f6bf ae94 	bge.w	8009874 <tcp_receive+0xc0>
 8009b4c:	e69a      	b.n	8009884 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009b4e:	4b73      	ldr	r3, [pc, #460]	; (8009d1c <tcp_receive+0x568>)
 8009b50:	f240 5294 	movw	r2, #1428	; 0x594
 8009b54:	4972      	ldr	r1, [pc, #456]	; (8009d20 <tcp_receive+0x56c>)
 8009b56:	4873      	ldr	r0, [pc, #460]	; (8009d24 <tcp_receive+0x570>)
 8009b58:	f004 fc22 	bl	800e3a0 <iprintf>
 8009b5c:	e7c9      	b.n	8009af2 <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009b5e:	4b6f      	ldr	r3, [pc, #444]	; (8009d1c <tcp_receive+0x568>)
 8009b60:	f240 5295 	movw	r2, #1429	; 0x595
 8009b64:	4970      	ldr	r1, [pc, #448]	; (8009d28 <tcp_receive+0x574>)
 8009b66:	486f      	ldr	r0, [pc, #444]	; (8009d24 <tcp_receive+0x570>)
 8009b68:	f004 fc1a 	bl	800e3a0 <iprintf>
 8009b6c:	e7c5      	b.n	8009afa <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009b6e:	4b6b      	ldr	r3, [pc, #428]	; (8009d1c <tcp_receive+0x568>)
 8009b70:	f240 5297 	movw	r2, #1431	; 0x597
 8009b74:	496d      	ldr	r1, [pc, #436]	; (8009d2c <tcp_receive+0x578>)
 8009b76:	486b      	ldr	r0, [pc, #428]	; (8009d24 <tcp_receive+0x570>)
 8009b78:	f004 fc12 	bl	800e3a0 <iprintf>
 8009b7c:	e7c3      	b.n	8009b06 <tcp_receive+0x352>
        tcp_ack_now(pcb);
 8009b7e:	8b63      	ldrh	r3, [r4, #26]
 8009b80:	f043 0302 	orr.w	r3, r3, #2
 8009b84:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b86:	e67d      	b.n	8009884 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 8009b88:	428b      	cmp	r3, r1
 8009b8a:	d008      	beq.n	8009b9e <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 8009b8c:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	f000 817a 	beq.w	8009e88 <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 8009b94:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009b96:	1e5f      	subs	r7, r3, #1
 8009b98:	f103 0c01 	add.w	ip, r3, #1
 8009b9c:	e195      	b.n	8009eca <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 8009b9e:	4b5d      	ldr	r3, [pc, #372]	; (8009d14 <tcp_receive+0x560>)
 8009ba0:	891d      	ldrh	r5, [r3, #8]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	8998      	ldrh	r0, [r3, #12]
 8009ba6:	f7fd f9c7 	bl	8006f38 <lwip_htons>
 8009baa:	f010 0303 	ands.w	r3, r0, #3
 8009bae:	bf18      	it	ne
 8009bb0:	2301      	movne	r3, #1
 8009bb2:	442b      	add	r3, r5
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	4a5e      	ldr	r2, [pc, #376]	; (8009d30 <tcp_receive+0x57c>)
 8009bb8:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 8009bba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d317      	bcc.n	8009bf0 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 8009bc0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 823e 	beq.w	800a044 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bc8:	4b52      	ldr	r3, [pc, #328]	; (8009d14 <tcp_receive+0x560>)
 8009bca:	68db      	ldr	r3, [r3, #12]
 8009bcc:	8998      	ldrh	r0, [r3, #12]
 8009bce:	f7fd f9b3 	bl	8006f38 <lwip_htons>
 8009bd2:	f010 0f01 	tst.w	r0, #1
 8009bd6:	d053      	beq.n	8009c80 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 8009bd8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	f000 8232 	beq.w	800a044 <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 8009be0:	6803      	ldr	r3, [r0, #0]
 8009be2:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009be4:	f7fe fcfe 	bl	80085e4 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8009be8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d1f8      	bne.n	8009be0 <tcp_receive+0x42c>
 8009bee:	e229      	b.n	800a044 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009bf0:	4b48      	ldr	r3, [pc, #288]	; (8009d14 <tcp_receive+0x560>)
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	8998      	ldrh	r0, [r3, #12]
 8009bf6:	f7fd f99f 	bl	8006f38 <lwip_htons>
 8009bfa:	f010 0f01 	tst.w	r0, #1
 8009bfe:	d12f      	bne.n	8009c60 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009c00:	4b44      	ldr	r3, [pc, #272]	; (8009d14 <tcp_receive+0x560>)
 8009c02:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009c04:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	8998      	ldrh	r0, [r3, #12]
 8009c0a:	f7fd f995 	bl	8006f38 <lwip_htons>
 8009c0e:	f010 0f02 	tst.w	r0, #2
 8009c12:	d003      	beq.n	8009c1c <tcp_receive+0x468>
            inseg.len -= 1;
 8009c14:	4a3f      	ldr	r2, [pc, #252]	; (8009d14 <tcp_receive+0x560>)
 8009c16:	8913      	ldrh	r3, [r2, #8]
 8009c18:	3b01      	subs	r3, #1
 8009c1a:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 8009c1c:	4e3d      	ldr	r6, [pc, #244]	; (8009d14 <tcp_receive+0x560>)
 8009c1e:	8931      	ldrh	r1, [r6, #8]
 8009c20:	6870      	ldr	r0, [r6, #4]
 8009c22:	f7fe f937 	bl	8007e94 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009c26:	8935      	ldrh	r5, [r6, #8]
 8009c28:	68f3      	ldr	r3, [r6, #12]
 8009c2a:	8998      	ldrh	r0, [r3, #12]
 8009c2c:	f7fd f984 	bl	8006f38 <lwip_htons>
 8009c30:	f010 0303 	ands.w	r3, r0, #3
 8009c34:	bf18      	it	ne
 8009c36:	2301      	movne	r3, #1
 8009c38:	442b      	add	r3, r5
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	4a3c      	ldr	r2, [pc, #240]	; (8009d30 <tcp_receive+0x57c>)
 8009c3e:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009c40:	4a35      	ldr	r2, [pc, #212]	; (8009d18 <tcp_receive+0x564>)
 8009c42:	6812      	ldr	r2, [r2, #0]
 8009c44:	4413      	add	r3, r2
 8009c46:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009c48:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009c4a:	440a      	add	r2, r1
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d0b7      	beq.n	8009bc0 <tcp_receive+0x40c>
 8009c50:	4b32      	ldr	r3, [pc, #200]	; (8009d1c <tcp_receive+0x568>)
 8009c52:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009c56:	4937      	ldr	r1, [pc, #220]	; (8009d34 <tcp_receive+0x580>)
 8009c58:	4832      	ldr	r0, [pc, #200]	; (8009d24 <tcp_receive+0x570>)
 8009c5a:	f004 fba1 	bl	800e3a0 <iprintf>
 8009c5e:	e7af      	b.n	8009bc0 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009c60:	4e2c      	ldr	r6, [pc, #176]	; (8009d14 <tcp_receive+0x560>)
 8009c62:	68f3      	ldr	r3, [r6, #12]
 8009c64:	899d      	ldrh	r5, [r3, #12]
 8009c66:	4628      	mov	r0, r5
 8009c68:	f7fd f966 	bl	8006f38 <lwip_htons>
 8009c6c:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009c70:	f7fd f962 	bl	8006f38 <lwip_htons>
 8009c74:	68f3      	ldr	r3, [r6, #12]
 8009c76:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009c7a:	4305      	orrs	r5, r0
 8009c7c:	819d      	strh	r5, [r3, #12]
 8009c7e:	e7bf      	b.n	8009c00 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 8009c80:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 8009c82:	2d00      	cmp	r5, #0
 8009c84:	f000 81d8 	beq.w	800a038 <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009c88:	4f23      	ldr	r7, [pc, #140]	; (8009d18 <tcp_receive+0x564>)
 8009c8a:	4e29      	ldr	r6, [pc, #164]	; (8009d30 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009c8c:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8009d14 <tcp_receive+0x560>
 8009c90:	e009      	b.n	8009ca6 <tcp_receive+0x4f2>
              next = next->next;
 8009c92:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 8009c96:	4628      	mov	r0, r5
 8009c98:	f7fe fca4 	bl	80085e4 <tcp_seg_free>
            while (next &&
 8009c9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ca0:	f000 81ca 	beq.w	800a038 <tcp_receive+0x884>
              next = next->next;
 8009ca4:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 8009ca6:	f8d7 c000 	ldr.w	ip, [r7]
 8009caa:	68e9      	ldr	r1, [r5, #12]
 8009cac:	6848      	ldr	r0, [r1, #4]
 8009cae:	8833      	ldrh	r3, [r6, #0]
 8009cb0:	4463      	add	r3, ip
 8009cb2:	1a1b      	subs	r3, r3, r0
 8009cb4:	892a      	ldrh	r2, [r5, #8]
 8009cb6:	1a9a      	subs	r2, r3, r2
            while (next &&
 8009cb8:	2a00      	cmp	r2, #0
 8009cba:	f2c0 81bf 	blt.w	800a03c <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009cbe:	8988      	ldrh	r0, [r1, #12]
 8009cc0:	f7fd f93a 	bl	8006f38 <lwip_htons>
 8009cc4:	f010 0f01 	tst.w	r0, #1
 8009cc8:	d0e3      	beq.n	8009c92 <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8009cca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cce:	8998      	ldrh	r0, [r3, #12]
 8009cd0:	f7fd f932 	bl	8006f38 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8009cd4:	f010 0f02 	tst.w	r0, #2
 8009cd8:	d1db      	bne.n	8009c92 <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8009cda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cde:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8009ce2:	2001      	movs	r0, #1
 8009ce4:	f7fd f928 	bl	8006f38 <lwip_htons>
 8009ce8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cec:	ea49 0900 	orr.w	r9, r9, r0
 8009cf0:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009cf4:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 8009cf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cfc:	8998      	ldrh	r0, [r3, #12]
 8009cfe:	f7fd f91b 	bl	8006f38 <lwip_htons>
 8009d02:	f010 0303 	ands.w	r3, r0, #3
 8009d06:	bf18      	it	ne
 8009d08:	2301      	movne	r3, #1
 8009d0a:	444b      	add	r3, r9
 8009d0c:	8033      	strh	r3, [r6, #0]
 8009d0e:	e7c0      	b.n	8009c92 <tcp_receive+0x4de>
 8009d10:	20010c74 	.word	0x20010c74
 8009d14:	20010c88 	.word	0x20010c88
 8009d18:	20010ca4 	.word	0x20010ca4
 8009d1c:	0801185c 	.word	0x0801185c
 8009d20:	0801198c 	.word	0x0801198c
 8009d24:	0800f6b8 	.word	0x0800f6b8
 8009d28:	0801199c 	.word	0x0801199c
 8009d2c:	080119ac 	.word	0x080119ac
 8009d30:	20010cbe 	.word	0x20010cbe
 8009d34:	080119bc 	.word	0x080119bc
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009d38:	4b81      	ldr	r3, [pc, #516]	; (8009f40 <tcp_receive+0x78c>)
 8009d3a:	eba0 000c 	sub.w	r0, r0, ip
 8009d3e:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	8998      	ldrh	r0, [r3, #12]
 8009d44:	f7fd f8f8 	bl	8006f38 <lwip_htons>
 8009d48:	f010 0f02 	tst.w	r0, #2
 8009d4c:	d003      	beq.n	8009d56 <tcp_receive+0x5a2>
                inseg.len -= 1;
 8009d4e:	4a7c      	ldr	r2, [pc, #496]	; (8009f40 <tcp_receive+0x78c>)
 8009d50:	8913      	ldrh	r3, [r2, #8]
 8009d52:	3b01      	subs	r3, #1
 8009d54:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8009d56:	4f7a      	ldr	r7, [pc, #488]	; (8009f40 <tcp_receive+0x78c>)
 8009d58:	8939      	ldrh	r1, [r7, #8]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f7fe f89a 	bl	8007e94 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8009d60:	893e      	ldrh	r6, [r7, #8]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	8998      	ldrh	r0, [r3, #12]
 8009d66:	f7fd f8e7 	bl	8006f38 <lwip_htons>
 8009d6a:	f010 0303 	ands.w	r3, r0, #3
 8009d6e:	bf18      	it	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	4433      	add	r3, r6
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	4a73      	ldr	r2, [pc, #460]	; (8009f44 <tcp_receive+0x790>)
 8009d78:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009d7a:	4a73      	ldr	r2, [pc, #460]	; (8009f48 <tcp_receive+0x794>)
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	4413      	add	r3, r2
 8009d80:	68ea      	ldr	r2, [r5, #12]
 8009d82:	6852      	ldr	r2, [r2, #4]
 8009d84:	4293      	cmp	r3, r2
 8009d86:	f000 815c 	beq.w	800a042 <tcp_receive+0x88e>
 8009d8a:	4b70      	ldr	r3, [pc, #448]	; (8009f4c <tcp_receive+0x798>)
 8009d8c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8009d90:	496f      	ldr	r1, [pc, #444]	; (8009f50 <tcp_receive+0x79c>)
 8009d92:	4870      	ldr	r0, [pc, #448]	; (8009f54 <tcp_receive+0x7a0>)
 8009d94:	f004 fb04 	bl	800e3a0 <iprintf>
 8009d98:	e153      	b.n	800a042 <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009d9a:	4b6c      	ldr	r3, [pc, #432]	; (8009f4c <tcp_receive+0x798>)
 8009d9c:	f240 6207 	movw	r2, #1543	; 0x607
 8009da0:	496d      	ldr	r1, [pc, #436]	; (8009f58 <tcp_receive+0x7a4>)
 8009da2:	486c      	ldr	r0, [pc, #432]	; (8009f54 <tcp_receive+0x7a0>)
 8009da4:	f004 fafc 	bl	800e3a0 <iprintf>
 8009da8:	e156      	b.n	800a058 <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009daa:	4643      	mov	r3, r8
 8009dac:	f240 622b 	movw	r2, #1579	; 0x62b
 8009db0:	4639      	mov	r1, r7
 8009db2:	4868      	ldr	r0, [pc, #416]	; (8009f54 <tcp_receive+0x7a0>)
 8009db4:	f004 faf4 	bl	800e3a0 <iprintf>
 8009db8:	e03e      	b.n	8009e38 <tcp_receive+0x684>
              recv_data = cseg->p;
 8009dba:	4b68      	ldr	r3, [pc, #416]	; (8009f5c <tcp_receive+0x7a8>)
 8009dbc:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8009dc2:	68eb      	ldr	r3, [r5, #12]
 8009dc4:	8998      	ldrh	r0, [r3, #12]
 8009dc6:	f7fd f8b7 	bl	8006f38 <lwip_htons>
 8009dca:	f010 0f01 	tst.w	r0, #1
 8009dce:	d009      	beq.n	8009de4 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 8009dd0:	4a63      	ldr	r2, [pc, #396]	; (8009f60 <tcp_receive+0x7ac>)
 8009dd2:	7813      	ldrb	r3, [r2, #0]
 8009dd4:	f043 0320 	orr.w	r3, r3, #32
 8009dd8:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009dda:	7d23      	ldrb	r3, [r4, #20]
 8009ddc:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8009dde:	bf04      	itt	eq
 8009de0:	2307      	moveq	r3, #7
 8009de2:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8009de4:	682b      	ldr	r3, [r5, #0]
 8009de6:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 8009de8:	4628      	mov	r0, r5
 8009dea:	f7fe fbfb 	bl	80085e4 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8009dee:	6f65      	ldr	r5, [r4, #116]	; 0x74
 8009df0:	2d00      	cmp	r5, #0
 8009df2:	d03d      	beq.n	8009e70 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009df4:	68ea      	ldr	r2, [r5, #12]
 8009df6:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8009df8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009dfa:	428b      	cmp	r3, r1
 8009dfc:	d138      	bne.n	8009e70 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 8009dfe:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8009e00:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8009e04:	8990      	ldrh	r0, [r2, #12]
 8009e06:	f7fd f897 	bl	8006f38 <lwip_htons>
 8009e0a:	f010 0003 	ands.w	r0, r0, #3
 8009e0e:	bf18      	it	ne
 8009e10:	2001      	movne	r0, #1
 8009e12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e14:	4499      	add	r9, r3
 8009e16:	4448      	add	r0, r9
 8009e18:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009e1a:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 8009e1e:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009e22:	68eb      	ldr	r3, [r5, #12]
 8009e24:	8998      	ldrh	r0, [r3, #12]
 8009e26:	f7fd f887 	bl	8006f38 <lwip_htons>
 8009e2a:	f010 0003 	ands.w	r0, r0, #3
 8009e2e:	bf18      	it	ne
 8009e30:	2001      	movne	r0, #1
 8009e32:	4450      	add	r0, sl
 8009e34:	4581      	cmp	r9, r0
 8009e36:	d3b8      	bcc.n	8009daa <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009e38:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8009e3c:	68eb      	ldr	r3, [r5, #12]
 8009e3e:	8998      	ldrh	r0, [r3, #12]
 8009e40:	f7fd f87a 	bl	8006f38 <lwip_htons>
 8009e44:	f010 0003 	ands.w	r0, r0, #3
 8009e48:	bf18      	it	ne
 8009e4a:	2001      	movne	r0, #1
 8009e4c:	4448      	add	r0, r9
 8009e4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009e50:	1a18      	subs	r0, r3, r0
 8009e52:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8009e54:	4620      	mov	r0, r4
 8009e56:	f7fe fb4f 	bl	80084f8 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8009e5a:	6869      	ldr	r1, [r5, #4]
 8009e5c:	890b      	ldrh	r3, [r1, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d0af      	beq.n	8009dc2 <tcp_receive+0x60e>
            if (recv_data) {
 8009e62:	4b3e      	ldr	r3, [pc, #248]	; (8009f5c <tcp_receive+0x7a8>)
 8009e64:	6818      	ldr	r0, [r3, #0]
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d0a7      	beq.n	8009dba <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 8009e6a:	f7fe f89b 	bl	8007fa4 <pbuf_cat>
 8009e6e:	e7a6      	b.n	8009dbe <tcp_receive+0x60a>
        tcp_ack(pcb);
 8009e70:	8b63      	ldrh	r3, [r4, #26]
 8009e72:	f013 0f01 	tst.w	r3, #1
 8009e76:	bf1a      	itte	ne
 8009e78:	f023 0301 	bicne.w	r3, r3, #1
 8009e7c:	f043 0302 	orrne.w	r3, r3, #2
 8009e80:	f043 0301 	orreq.w	r3, r3, #1
 8009e84:	8363      	strh	r3, [r4, #26]
 8009e86:	e54a      	b.n	800991e <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8009e88:	482d      	ldr	r0, [pc, #180]	; (8009f40 <tcp_receive+0x78c>)
 8009e8a:	f7fe fbd5 	bl	8008638 <tcp_seg_copy>
 8009e8e:	6760      	str	r0, [r4, #116]	; 0x74
 8009e90:	e051      	b.n	8009f36 <tcp_receive+0x782>
              if (inseg.len > next->len) {
 8009e92:	4b2b      	ldr	r3, [pc, #172]	; (8009f40 <tcp_receive+0x78c>)
 8009e94:	891a      	ldrh	r2, [r3, #8]
 8009e96:	892b      	ldrh	r3, [r5, #8]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d94c      	bls.n	8009f36 <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009e9c:	4828      	ldr	r0, [pc, #160]	; (8009f40 <tcp_receive+0x78c>)
 8009e9e:	f7fe fbcb 	bl	8008638 <tcp_seg_copy>
                if (cseg != NULL) {
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d046      	beq.n	8009f36 <tcp_receive+0x782>
                  if (prev != NULL) {
 8009ea8:	b12e      	cbz	r6, 8009eb6 <tcp_receive+0x702>
                    prev->next = cseg;
 8009eaa:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 8009eac:	4629      	mov	r1, r5
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff fc28 	bl	8009704 <tcp_oos_insert_segment>
 8009eb4:	e03f      	b.n	8009f36 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8009eb6:	6760      	str	r0, [r4, #116]	; 0x74
 8009eb8:	e7f8      	b.n	8009eac <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8009eba:	1a99      	subs	r1, r3, r2
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	db27      	blt.n	8009f10 <tcp_receive+0x75c>
              if (next->next == NULL &&
 8009ec0:	6829      	ldr	r1, [r5, #0]
 8009ec2:	462e      	mov	r6, r5
 8009ec4:	2900      	cmp	r1, #0
 8009ec6:	d033      	beq.n	8009f30 <tcp_receive+0x77c>
 8009ec8:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 8009eca:	68e8      	ldr	r0, [r5, #12]
 8009ecc:	6842      	ldr	r2, [r0, #4]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d0df      	beq.n	8009e92 <tcp_receive+0x6de>
              if (prev == NULL) {
 8009ed2:	2e00      	cmp	r6, #0
 8009ed4:	d0f1      	beq.n	8009eba <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009ed6:	68f1      	ldr	r1, [r6, #12]
 8009ed8:	6849      	ldr	r1, [r1, #4]
 8009eda:	1a79      	subs	r1, r7, r1
 8009edc:	2900      	cmp	r1, #0
 8009ede:	dbef      	blt.n	8009ec0 <tcp_receive+0x70c>
 8009ee0:	ebac 0102 	sub.w	r1, ip, r2
 8009ee4:	2900      	cmp	r1, #0
 8009ee6:	dceb      	bgt.n	8009ec0 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009ee8:	4815      	ldr	r0, [pc, #84]	; (8009f40 <tcp_receive+0x78c>)
 8009eea:	f7fe fba5 	bl	8008638 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009eee:	4607      	mov	r7, r0
 8009ef0:	b308      	cbz	r0, 8009f36 <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009ef2:	68f3      	ldr	r3, [r6, #12]
 8009ef4:	6859      	ldr	r1, [r3, #4]
 8009ef6:	4b14      	ldr	r3, [pc, #80]	; (8009f48 <tcp_receive+0x794>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	8933      	ldrh	r3, [r6, #8]
 8009efc:	440b      	add	r3, r1
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dc0e      	bgt.n	8009f22 <tcp_receive+0x76e>
                    prev->next = cseg;
 8009f04:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 8009f06:	4629      	mov	r1, r5
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f7ff fbfb 	bl	8009704 <tcp_oos_insert_segment>
 8009f0e:	e012      	b.n	8009f36 <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009f10:	480b      	ldr	r0, [pc, #44]	; (8009f40 <tcp_receive+0x78c>)
 8009f12:	f7fe fb91 	bl	8008638 <tcp_seg_copy>
                  if (cseg != NULL) {
 8009f16:	b170      	cbz	r0, 8009f36 <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 8009f18:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	f7ff fbf2 	bl	8009704 <tcp_oos_insert_segment>
 8009f20:	e009      	b.n	8009f36 <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8009f22:	1a52      	subs	r2, r2, r1
 8009f24:	b291      	uxth	r1, r2
 8009f26:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009f28:	6870      	ldr	r0, [r6, #4]
 8009f2a:	f7fd ffb3 	bl	8007e94 <pbuf_realloc>
 8009f2e:	e7e9      	b.n	8009f04 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009f30:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dc16      	bgt.n	8009f64 <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 8009f36:	4620      	mov	r0, r4
 8009f38:	f001 fec8 	bl	800bccc <tcp_send_empty_ack>
 8009f3c:	e4ef      	b.n	800991e <tcp_receive+0x16a>
 8009f3e:	bf00      	nop
 8009f40:	20010c88 	.word	0x20010c88
 8009f44:	20010cbe 	.word	0x20010cbe
 8009f48:	20010ca4 	.word	0x20010ca4
 8009f4c:	0801185c 	.word	0x0801185c
 8009f50:	080119f4 	.word	0x080119f4
 8009f54:	0800f6b8 	.word	0x0800f6b8
 8009f58:	08011a30 	.word	0x08011a30
 8009f5c:	20010c9c 	.word	0x20010c9c
 8009f60:	20010ca0 	.word	0x20010ca0
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8009f64:	8980      	ldrh	r0, [r0, #12]
 8009f66:	f7fc ffe7 	bl	8006f38 <lwip_htons>
 8009f6a:	f010 0f01 	tst.w	r0, #1
 8009f6e:	d1e2      	bne.n	8009f36 <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 8009f70:	484d      	ldr	r0, [pc, #308]	; (800a0a8 <tcp_receive+0x8f4>)
 8009f72:	f7fe fb61 	bl	8008638 <tcp_seg_copy>
 8009f76:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d0dc      	beq.n	8009f36 <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8009f7c:	68eb      	ldr	r3, [r5, #12]
 8009f7e:	6859      	ldr	r1, [r3, #4]
 8009f80:	4b4a      	ldr	r3, [pc, #296]	; (800a0ac <tcp_receive+0x8f8>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	892a      	ldrh	r2, [r5, #8]
 8009f86:	440a      	add	r2, r1
 8009f88:	1ad2      	subs	r2, r2, r3
 8009f8a:	2a00      	cmp	r2, #0
 8009f8c:	dc3c      	bgt.n	800a008 <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009f8e:	4b48      	ldr	r3, [pc, #288]	; (800a0b0 <tcp_receive+0x8fc>)
 8009f90:	881b      	ldrh	r3, [r3, #0]
 8009f92:	4a46      	ldr	r2, [pc, #280]	; (800a0ac <tcp_receive+0x8f8>)
 8009f94:	6812      	ldr	r2, [r2, #0]
 8009f96:	4413      	add	r3, r2
 8009f98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009f9e:	1a9b      	subs	r3, r3, r2
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	ddc8      	ble.n	8009f36 <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	68db      	ldr	r3, [r3, #12]
 8009fa8:	8998      	ldrh	r0, [r3, #12]
 8009faa:	f7fc ffc5 	bl	8006f38 <lwip_htons>
 8009fae:	f010 0f01 	tst.w	r0, #1
 8009fb2:	d130      	bne.n	800a016 <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009fb4:	682a      	ldr	r2, [r5, #0]
 8009fb6:	4e3d      	ldr	r6, [pc, #244]	; (800a0ac <tcp_receive+0x8f8>)
 8009fb8:	6831      	ldr	r1, [r6, #0]
 8009fba:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009fbc:	1a5b      	subs	r3, r3, r1
 8009fbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009fc0:	440b      	add	r3, r1
 8009fc2:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	8919      	ldrh	r1, [r3, #8]
 8009fc8:	6858      	ldr	r0, [r3, #4]
 8009fca:	f7fd ff63 	bl	8007e94 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009fce:	682b      	ldr	r3, [r5, #0]
 8009fd0:	891d      	ldrh	r5, [r3, #8]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	8998      	ldrh	r0, [r3, #12]
 8009fd6:	f7fc ffaf 	bl	8006f38 <lwip_htons>
 8009fda:	f010 0303 	ands.w	r3, r0, #3
 8009fde:	bf18      	it	ne
 8009fe0:	2301      	movne	r3, #1
 8009fe2:	442b      	add	r3, r5
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	4a32      	ldr	r2, [pc, #200]	; (800a0b0 <tcp_receive+0x8fc>)
 8009fe8:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009fea:	6832      	ldr	r2, [r6, #0]
 8009fec:	4413      	add	r3, r2
 8009fee:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8009ff0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ff2:	440a      	add	r2, r1
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d09e      	beq.n	8009f36 <tcp_receive+0x782>
 8009ff8:	4b2e      	ldr	r3, [pc, #184]	; (800a0b4 <tcp_receive+0x900>)
 8009ffa:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8009ffe:	492e      	ldr	r1, [pc, #184]	; (800a0b8 <tcp_receive+0x904>)
 800a000:	482e      	ldr	r0, [pc, #184]	; (800a0bc <tcp_receive+0x908>)
 800a002:	f004 f9cd 	bl	800e3a0 <iprintf>
 800a006:	e796      	b.n	8009f36 <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a008:	1a5b      	subs	r3, r3, r1
 800a00a:	b299      	uxth	r1, r3
 800a00c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a00e:	6868      	ldr	r0, [r5, #4]
 800a010:	f7fd ff40 	bl	8007e94 <pbuf_realloc>
 800a014:	e7bb      	b.n	8009f8e <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a016:	682b      	ldr	r3, [r5, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	899e      	ldrh	r6, [r3, #12]
 800a01c:	4630      	mov	r0, r6
 800a01e:	f7fc ff8b 	bl	8006f38 <lwip_htons>
 800a022:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a026:	f7fc ff87 	bl	8006f38 <lwip_htons>
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a032:	4306      	orrs	r6, r0
 800a034:	819e      	strh	r6, [r3, #12]
 800a036:	e7bd      	b.n	8009fb4 <tcp_receive+0x800>
              next = next->next;
 800a038:	2500      	movs	r5, #0
 800a03a:	e002      	b.n	800a042 <tcp_receive+0x88e>
            if (next &&
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	f73f ae7b 	bgt.w	8009d38 <tcp_receive+0x584>
            pcb->ooseq = next;
 800a042:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800a044:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <tcp_receive+0x8fc>)
 800a046:	881a      	ldrh	r2, [r3, #0]
 800a048:	4b18      	ldr	r3, [pc, #96]	; (800a0ac <tcp_receive+0x8f8>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4413      	add	r3, r2
 800a04e:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a050:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a052:	4293      	cmp	r3, r2
 800a054:	f4ff aea1 	bcc.w	8009d9a <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800a058:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a05a:	4a15      	ldr	r2, [pc, #84]	; (800a0b0 <tcp_receive+0x8fc>)
 800a05c:	8812      	ldrh	r2, [r2, #0]
 800a05e:	1a9b      	subs	r3, r3, r2
 800a060:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a062:	4620      	mov	r0, r4
 800a064:	f7fe fa48 	bl	80084f8 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a068:	4b0f      	ldr	r3, [pc, #60]	; (800a0a8 <tcp_receive+0x8f4>)
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	891a      	ldrh	r2, [r3, #8]
 800a06e:	b122      	cbz	r2, 800a07a <tcp_receive+0x8c6>
          recv_data = inseg.p;
 800a070:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <tcp_receive+0x90c>)
 800a072:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <tcp_receive+0x8f4>)
 800a076:	2200      	movs	r2, #0
 800a078:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a07a:	4b0b      	ldr	r3, [pc, #44]	; (800a0a8 <tcp_receive+0x8f4>)
 800a07c:	68db      	ldr	r3, [r3, #12]
 800a07e:	8998      	ldrh	r0, [r3, #12]
 800a080:	f7fc ff5a 	bl	8006f38 <lwip_htons>
 800a084:	f010 0f01 	tst.w	r0, #1
 800a088:	d004      	beq.n	800a094 <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 800a08a:	4a0e      	ldr	r2, [pc, #56]	; (800a0c4 <tcp_receive+0x910>)
 800a08c:	7813      	ldrb	r3, [r2, #0]
 800a08e:	f043 0320 	orr.w	r3, r3, #32
 800a092:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800a094:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a096:	2d00      	cmp	r5, #0
 800a098:	f43f aeea 	beq.w	8009e70 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a09c:	4e03      	ldr	r6, [pc, #12]	; (800a0ac <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a09e:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800a0b4 <tcp_receive+0x900>
 800a0a2:	4f09      	ldr	r7, [pc, #36]	; (800a0c8 <tcp_receive+0x914>)
 800a0a4:	e6a6      	b.n	8009df4 <tcp_receive+0x640>
 800a0a6:	bf00      	nop
 800a0a8:	20010c88 	.word	0x20010c88
 800a0ac:	20010ca4 	.word	0x20010ca4
 800a0b0:	20010cbe 	.word	0x20010cbe
 800a0b4:	0801185c 	.word	0x0801185c
 800a0b8:	080119bc 	.word	0x080119bc
 800a0bc:	0800f6b8 	.word	0x0800f6b8
 800a0c0:	20010c9c 	.word	0x20010c9c
 800a0c4:	20010ca0 	.word	0x20010ca0
 800a0c8:	08011a50 	.word	0x08011a50

0800a0cc <tcp_input>:
{
 800a0cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0d0:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0d2:	4605      	mov	r5, r0
 800a0d4:	b158      	cbz	r0, 800a0ee <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0d6:	686a      	ldr	r2, [r5, #4]
 800a0d8:	4b77      	ldr	r3, [pc, #476]	; (800a2b8 <tcp_input+0x1ec>)
 800a0da:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800a0dc:	896b      	ldrh	r3, [r5, #10]
 800a0de:	2b13      	cmp	r3, #19
 800a0e0:	d80c      	bhi.n	800a0fc <tcp_input+0x30>
  pbuf_free(p);
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f7fd fdbe 	bl	8007c64 <pbuf_free>
}
 800a0e8:	b005      	add	sp, #20
 800a0ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0ee:	4b73      	ldr	r3, [pc, #460]	; (800a2bc <tcp_input+0x1f0>)
 800a0f0:	2283      	movs	r2, #131	; 0x83
 800a0f2:	4973      	ldr	r1, [pc, #460]	; (800a2c0 <tcp_input+0x1f4>)
 800a0f4:	4873      	ldr	r0, [pc, #460]	; (800a2c4 <tcp_input+0x1f8>)
 800a0f6:	f004 f953 	bl	800e3a0 <iprintf>
 800a0fa:	e7ec      	b.n	800a0d6 <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a0fc:	4b72      	ldr	r3, [pc, #456]	; (800a2c8 <tcp_input+0x1fc>)
 800a0fe:	6819      	ldr	r1, [r3, #0]
 800a100:	6958      	ldr	r0, [r3, #20]
 800a102:	f003 f9c2 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800a106:	2800      	cmp	r0, #0
 800a108:	d1eb      	bne.n	800a0e2 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a10a:	4b6f      	ldr	r3, [pc, #444]	; (800a2c8 <tcp_input+0x1fc>)
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a112:	2be0      	cmp	r3, #224	; 0xe0
 800a114:	d0e5      	beq.n	800a0e2 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a116:	4b68      	ldr	r3, [pc, #416]	; (800a2b8 <tcp_input+0x1ec>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	8998      	ldrh	r0, [r3, #12]
 800a11c:	f7fc ff0c 	bl	8006f38 <lwip_htons>
 800a120:	0a81      	lsrs	r1, r0, #10
 800a122:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a126:	2913      	cmp	r1, #19
 800a128:	d9db      	bls.n	800a0e2 <tcp_input+0x16>
 800a12a:	b28b      	uxth	r3, r1
 800a12c:	892a      	ldrh	r2, [r5, #8]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d3d7      	bcc.n	800a0e2 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a132:	f1a3 0214 	sub.w	r2, r3, #20
 800a136:	b292      	uxth	r2, r2
 800a138:	4864      	ldr	r0, [pc, #400]	; (800a2cc <tcp_input+0x200>)
 800a13a:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800a13c:	4864      	ldr	r0, [pc, #400]	; (800a2d0 <tcp_input+0x204>)
 800a13e:	2400      	movs	r4, #0
 800a140:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800a142:	8968      	ldrh	r0, [r5, #10]
 800a144:	4298      	cmp	r0, r3
 800a146:	d22e      	bcs.n	800a1a6 <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a148:	682b      	ldr	r3, [r5, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d068      	beq.n	800a220 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800a14e:	2114      	movs	r1, #20
 800a150:	4628      	mov	r0, r5
 800a152:	f7fd fd47 	bl	8007be4 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a156:	896c      	ldrh	r4, [r5, #10]
 800a158:	4b5e      	ldr	r3, [pc, #376]	; (800a2d4 <tcp_input+0x208>)
 800a15a:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a15c:	4b5b      	ldr	r3, [pc, #364]	; (800a2cc <tcp_input+0x200>)
 800a15e:	881f      	ldrh	r7, [r3, #0]
 800a160:	1b3e      	subs	r6, r7, r4
 800a162:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800a164:	4621      	mov	r1, r4
 800a166:	4628      	mov	r0, r5
 800a168:	f7fd fd3c 	bl	8007be4 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a16c:	6828      	ldr	r0, [r5, #0]
 800a16e:	8943      	ldrh	r3, [r0, #10]
 800a170:	42b3      	cmp	r3, r6
 800a172:	d3b6      	bcc.n	800a0e2 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a174:	6842      	ldr	r2, [r0, #4]
 800a176:	4b56      	ldr	r3, [pc, #344]	; (800a2d0 <tcp_input+0x204>)
 800a178:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800a17a:	4631      	mov	r1, r6
 800a17c:	f7fd fd32 	bl	8007be4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a180:	892b      	ldrh	r3, [r5, #8]
 800a182:	441c      	add	r4, r3
 800a184:	1be4      	subs	r4, r4, r7
 800a186:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a188:	896b      	ldrh	r3, [r5, #10]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d14f      	bne.n	800a22e <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a18e:	682b      	ldr	r3, [r5, #0]
 800a190:	892a      	ldrh	r2, [r5, #8]
 800a192:	891b      	ldrh	r3, [r3, #8]
 800a194:	429a      	cmp	r2, r3
 800a196:	d00b      	beq.n	800a1b0 <tcp_input+0xe4>
 800a198:	4b48      	ldr	r3, [pc, #288]	; (800a2bc <tcp_input+0x1f0>)
 800a19a:	22e0      	movs	r2, #224	; 0xe0
 800a19c:	494e      	ldr	r1, [pc, #312]	; (800a2d8 <tcp_input+0x20c>)
 800a19e:	4849      	ldr	r0, [pc, #292]	; (800a2c4 <tcp_input+0x1f8>)
 800a1a0:	f004 f8fe 	bl	800e3a0 <iprintf>
 800a1a4:	e004      	b.n	800a1b0 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800a1a6:	4b4b      	ldr	r3, [pc, #300]	; (800a2d4 <tcp_input+0x208>)
 800a1a8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7fd fd1a 	bl	8007be4 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a1b0:	4c41      	ldr	r4, [pc, #260]	; (800a2b8 <tcp_input+0x1ec>)
 800a1b2:	6826      	ldr	r6, [r4, #0]
 800a1b4:	8830      	ldrh	r0, [r6, #0]
 800a1b6:	f7fc febf 	bl	8006f38 <lwip_htons>
 800a1ba:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a1bc:	6826      	ldr	r6, [r4, #0]
 800a1be:	8870      	ldrh	r0, [r6, #2]
 800a1c0:	f7fc feba 	bl	8006f38 <lwip_htons>
 800a1c4:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a1c6:	6826      	ldr	r6, [r4, #0]
 800a1c8:	6870      	ldr	r0, [r6, #4]
 800a1ca:	f7fc feba 	bl	8006f42 <lwip_htonl>
 800a1ce:	6070      	str	r0, [r6, #4]
 800a1d0:	4b42      	ldr	r3, [pc, #264]	; (800a2dc <tcp_input+0x210>)
 800a1d2:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a1d4:	6826      	ldr	r6, [r4, #0]
 800a1d6:	68b0      	ldr	r0, [r6, #8]
 800a1d8:	f7fc feb3 	bl	8006f42 <lwip_htonl>
 800a1dc:	60b0      	str	r0, [r6, #8]
 800a1de:	4b40      	ldr	r3, [pc, #256]	; (800a2e0 <tcp_input+0x214>)
 800a1e0:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a1e2:	6826      	ldr	r6, [r4, #0]
 800a1e4:	89f0      	ldrh	r0, [r6, #14]
 800a1e6:	f7fc fea7 	bl	8006f38 <lwip_htons>
 800a1ea:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	8998      	ldrh	r0, [r3, #12]
 800a1f0:	f7fc fea2 	bl	8006f38 <lwip_htons>
 800a1f4:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800a1f8:	4b3a      	ldr	r3, [pc, #232]	; (800a2e4 <tcp_input+0x218>)
 800a1fa:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800a1fc:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a1fe:	f010 0f03 	tst.w	r0, #3
 800a202:	d11b      	bne.n	800a23c <tcp_input+0x170>
  tcplen = p->tot_len;
 800a204:	4b38      	ldr	r3, [pc, #224]	; (800a2e8 <tcp_input+0x21c>)
 800a206:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a208:	4b38      	ldr	r3, [pc, #224]	; (800a2ec <tcp_input+0x220>)
 800a20a:	681c      	ldr	r4, [r3, #0]
 800a20c:	2c00      	cmp	r4, #0
 800a20e:	f000 8563 	beq.w	800acd8 <tcp_input+0xc0c>
  prev = NULL;
 800a212:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a214:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a2bc <tcp_input+0x1f0>
 800a218:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800a300 <tcp_input+0x234>
 800a21c:	4f29      	ldr	r7, [pc, #164]	; (800a2c4 <tcp_input+0x1f8>)
 800a21e:	e035      	b.n	800a28c <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a220:	4b26      	ldr	r3, [pc, #152]	; (800a2bc <tcp_input+0x1f0>)
 800a222:	22c2      	movs	r2, #194	; 0xc2
 800a224:	4932      	ldr	r1, [pc, #200]	; (800a2f0 <tcp_input+0x224>)
 800a226:	4827      	ldr	r0, [pc, #156]	; (800a2c4 <tcp_input+0x1f8>)
 800a228:	f004 f8ba 	bl	800e3a0 <iprintf>
 800a22c:	e78f      	b.n	800a14e <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a22e:	4b23      	ldr	r3, [pc, #140]	; (800a2bc <tcp_input+0x1f0>)
 800a230:	22df      	movs	r2, #223	; 0xdf
 800a232:	4930      	ldr	r1, [pc, #192]	; (800a2f4 <tcp_input+0x228>)
 800a234:	4823      	ldr	r0, [pc, #140]	; (800a2c4 <tcp_input+0x1f8>)
 800a236:	f004 f8b3 	bl	800e3a0 <iprintf>
 800a23a:	e7a8      	b.n	800a18e <tcp_input+0xc2>
    tcplen++;
 800a23c:	1c53      	adds	r3, r2, #1
 800a23e:	b29b      	uxth	r3, r3
 800a240:	4929      	ldr	r1, [pc, #164]	; (800a2e8 <tcp_input+0x21c>)
 800a242:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800a244:	429a      	cmp	r2, r3
 800a246:	d9df      	bls.n	800a208 <tcp_input+0x13c>
 800a248:	e74b      	b.n	800a0e2 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a24a:	4643      	mov	r3, r8
 800a24c:	22fb      	movs	r2, #251	; 0xfb
 800a24e:	4649      	mov	r1, r9
 800a250:	4638      	mov	r0, r7
 800a252:	f004 f8a5 	bl	800e3a0 <iprintf>
 800a256:	e01c      	b.n	800a292 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a258:	4643      	mov	r3, r8
 800a25a:	22fc      	movs	r2, #252	; 0xfc
 800a25c:	4926      	ldr	r1, [pc, #152]	; (800a2f8 <tcp_input+0x22c>)
 800a25e:	4638      	mov	r0, r7
 800a260:	f004 f89e 	bl	800e3a0 <iprintf>
 800a264:	e018      	b.n	800a298 <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a266:	4643      	mov	r3, r8
 800a268:	22fd      	movs	r2, #253	; 0xfd
 800a26a:	4924      	ldr	r1, [pc, #144]	; (800a2fc <tcp_input+0x230>)
 800a26c:	4638      	mov	r0, r7
 800a26e:	f004 f897 	bl	800e3a0 <iprintf>
 800a272:	e014      	b.n	800a29e <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 800a274:	4b10      	ldr	r3, [pc, #64]	; (800a2b8 <tcp_input+0x1ec>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	8b21      	ldrh	r1, [r4, #24]
 800a27a:	881a      	ldrh	r2, [r3, #0]
 800a27c:	4291      	cmp	r1, r2
 800a27e:	d041      	beq.n	800a304 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a280:	68e3      	ldr	r3, [r4, #12]
 800a282:	4626      	mov	r6, r4
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 8527 	beq.w	800acd8 <tcp_input+0xc0c>
 800a28a:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a28c:	7d23      	ldrb	r3, [r4, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d0db      	beq.n	800a24a <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a292:	7d23      	ldrb	r3, [r4, #20]
 800a294:	2b0a      	cmp	r3, #10
 800a296:	d0df      	beq.n	800a258 <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a298:	7d23      	ldrb	r3, [r4, #20]
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d0e3      	beq.n	800a266 <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a29e:	7a22      	ldrb	r2, [r4, #8]
 800a2a0:	2a00      	cmp	r2, #0
 800a2a2:	d0e7      	beq.n	800a274 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a2a4:	4b08      	ldr	r3, [pc, #32]	; (800a2c8 <tcp_input+0x1fc>)
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a2ac:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d0df      	beq.n	800a274 <tcp_input+0x1a8>
 800a2b4:	e7e4      	b.n	800a280 <tcp_input+0x1b4>
 800a2b6:	bf00      	nop
 800a2b8:	20010cb0 	.word	0x20010cb0
 800a2bc:	0801185c 	.word	0x0801185c
 800a2c0:	08011a78 	.word	0x08011a78
 800a2c4:	0800f6b8 	.word	0x0800f6b8
 800a2c8:	2000b350 	.word	0x2000b350
 800a2cc:	20010cbc 	.word	0x20010cbc
 800a2d0:	20010cb8 	.word	0x20010cb8
 800a2d4:	20010cb4 	.word	0x20010cb4
 800a2d8:	08011aac 	.word	0x08011aac
 800a2dc:	20010ca4 	.word	0x20010ca4
 800a2e0:	20010c80 	.word	0x20010c80
 800a2e4:	20010c84 	.word	0x20010c84
 800a2e8:	20010cbe 	.word	0x20010cbe
 800a2ec:	20010c64 	.word	0x20010c64
 800a2f0:	08011a90 	.word	0x08011a90
 800a2f4:	08011aa0 	.word	0x08011aa0
 800a2f8:	08011af4 	.word	0x08011af4
 800a2fc:	08011b20 	.word	0x08011b20
 800a300:	08011acc 	.word	0x08011acc
    if (pcb->remote_port == tcphdr->src &&
 800a304:	8ae2      	ldrh	r2, [r4, #22]
 800a306:	885b      	ldrh	r3, [r3, #2]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d1b9      	bne.n	800a280 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800a30c:	6862      	ldr	r2, [r4, #4]
 800a30e:	4b8f      	ldr	r3, [pc, #572]	; (800a54c <tcp_input+0x480>)
 800a310:	691b      	ldr	r3, [r3, #16]
 800a312:	429a      	cmp	r2, r3
 800a314:	d1b4      	bne.n	800a280 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a316:	6822      	ldr	r2, [r4, #0]
 800a318:	4b8c      	ldr	r3, [pc, #560]	; (800a54c <tcp_input+0x480>)
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d1af      	bne.n	800a280 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a320:	68e3      	ldr	r3, [r4, #12]
 800a322:	42a3      	cmp	r3, r4
 800a324:	d04d      	beq.n	800a3c2 <tcp_input+0x2f6>
      if (prev != NULL) {
 800a326:	b146      	cbz	r6, 800a33a <tcp_input+0x26e>
        prev->next = pcb->next;
 800a328:	68e3      	ldr	r3, [r4, #12]
 800a32a:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800a32c:	4b88      	ldr	r3, [pc, #544]	; (800a550 <tcp_input+0x484>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800a332:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a334:	68e3      	ldr	r3, [r4, #12]
 800a336:	42a3      	cmp	r3, r4
 800a338:	d04d      	beq.n	800a3d6 <tcp_input+0x30a>
    inseg.next = NULL;
 800a33a:	4a86      	ldr	r2, [pc, #536]	; (800a554 <tcp_input+0x488>)
 800a33c:	2300      	movs	r3, #0
 800a33e:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800a340:	8929      	ldrh	r1, [r5, #8]
 800a342:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800a344:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800a346:	4984      	ldr	r1, [pc, #528]	; (800a558 <tcp_input+0x48c>)
 800a348:	6809      	ldr	r1, [r1, #0]
 800a34a:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800a34c:	4a83      	ldr	r2, [pc, #524]	; (800a55c <tcp_input+0x490>)
 800a34e:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800a350:	4a83      	ldr	r2, [pc, #524]	; (800a560 <tcp_input+0x494>)
 800a352:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800a354:	4a83      	ldr	r2, [pc, #524]	; (800a564 <tcp_input+0x498>)
 800a356:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800a358:	4b83      	ldr	r3, [pc, #524]	; (800a568 <tcp_input+0x49c>)
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	f013 0f08 	tst.w	r3, #8
 800a360:	f040 817c 	bne.w	800a65c <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 800a364:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a366:	b16b      	cbz	r3, 800a384 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a368:	4620      	mov	r0, r4
 800a36a:	f7fe fdbb 	bl	8008ee4 <tcp_process_refused_data>
 800a36e:	f110 0f0d 	cmn.w	r0, #13
 800a372:	f000 8178 	beq.w	800a666 <tcp_input+0x59a>
 800a376:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a378:	b123      	cbz	r3, 800a384 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a37a:	4b7c      	ldr	r3, [pc, #496]	; (800a56c <tcp_input+0x4a0>)
 800a37c:	881b      	ldrh	r3, [r3, #0]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f040 8171 	bne.w	800a666 <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 800a384:	4b7a      	ldr	r3, [pc, #488]	; (800a570 <tcp_input+0x4a4>)
 800a386:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800a388:	4b77      	ldr	r3, [pc, #476]	; (800a568 <tcp_input+0x49c>)
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	f013 0f04 	tst.w	r3, #4
 800a390:	f000 81aa 	beq.w	800a6e8 <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 800a394:	7d21      	ldrb	r1, [r4, #20]
 800a396:	2902      	cmp	r1, #2
 800a398:	f000 816b 	beq.w	800a672 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800a39c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a39e:	4b75      	ldr	r3, [pc, #468]	; (800a574 <tcp_input+0x4a8>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	429a      	cmp	r2, r3
 800a3a4:	f000 818e 	beq.w	800a6c4 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	f100 8167 	bmi.w	800a67c <tcp_input+0x5b0>
 800a3ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a3b0:	1a9b      	subs	r3, r3, r2
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f300 8162 	bgt.w	800a67c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800a3b8:	8b63      	ldrh	r3, [r4, #26]
 800a3ba:	f043 0302 	orr.w	r3, r3, #2
 800a3be:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 800a3c0:	e15c      	b.n	800a67c <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a3c2:	4b6d      	ldr	r3, [pc, #436]	; (800a578 <tcp_input+0x4ac>)
 800a3c4:	f240 120d 	movw	r2, #269	; 0x10d
 800a3c8:	496c      	ldr	r1, [pc, #432]	; (800a57c <tcp_input+0x4b0>)
 800a3ca:	486d      	ldr	r0, [pc, #436]	; (800a580 <tcp_input+0x4b4>)
 800a3cc:	f003 ffe8 	bl	800e3a0 <iprintf>
      if (prev != NULL) {
 800a3d0:	2e00      	cmp	r6, #0
 800a3d2:	d1a9      	bne.n	800a328 <tcp_input+0x25c>
 800a3d4:	e7ae      	b.n	800a334 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a3d6:	4b68      	ldr	r3, [pc, #416]	; (800a578 <tcp_input+0x4ac>)
 800a3d8:	f240 1215 	movw	r2, #277	; 0x115
 800a3dc:	4969      	ldr	r1, [pc, #420]	; (800a584 <tcp_input+0x4b8>)
 800a3de:	4868      	ldr	r0, [pc, #416]	; (800a580 <tcp_input+0x4b4>)
 800a3e0:	f003 ffde 	bl	800e3a0 <iprintf>
 800a3e4:	e7a9      	b.n	800a33a <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a3e6:	4643      	mov	r3, r8
 800a3e8:	f240 121f 	movw	r2, #287	; 0x11f
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	4630      	mov	r0, r6
 800a3f0:	f003 ffd6 	bl	800e3a0 <iprintf>
 800a3f4:	e00b      	b.n	800a40e <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 800a3f6:	4b58      	ldr	r3, [pc, #352]	; (800a558 <tcp_input+0x48c>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	8819      	ldrh	r1, [r3, #0]
 800a3fc:	8b22      	ldrh	r2, [r4, #24]
 800a3fe:	428a      	cmp	r2, r1
 800a400:	d011      	beq.n	800a426 <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a402:	68e4      	ldr	r4, [r4, #12]
 800a404:	2c00      	cmp	r4, #0
 800a406:	d051      	beq.n	800a4ac <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a408:	7d23      	ldrb	r3, [r4, #20]
 800a40a:	2b0a      	cmp	r3, #10
 800a40c:	d1eb      	bne.n	800a3e6 <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a40e:	7a22      	ldrb	r2, [r4, #8]
 800a410:	2a00      	cmp	r2, #0
 800a412:	d0f0      	beq.n	800a3f6 <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a414:	4b4d      	ldr	r3, [pc, #308]	; (800a54c <tcp_input+0x480>)
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a41c:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a41e:	b2db      	uxtb	r3, r3
 800a420:	429a      	cmp	r2, r3
 800a422:	d0e8      	beq.n	800a3f6 <tcp_input+0x32a>
 800a424:	e7ed      	b.n	800a402 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800a426:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a428:	8ae3      	ldrh	r3, [r4, #22]
 800a42a:	4283      	cmp	r3, r0
 800a42c:	d1e9      	bne.n	800a402 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800a42e:	6862      	ldr	r2, [r4, #4]
 800a430:	4b46      	ldr	r3, [pc, #280]	; (800a54c <tcp_input+0x480>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	429a      	cmp	r2, r3
 800a436:	d1e4      	bne.n	800a402 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a438:	6822      	ldr	r2, [r4, #0]
 800a43a:	4b44      	ldr	r3, [pc, #272]	; (800a54c <tcp_input+0x480>)
 800a43c:	695b      	ldr	r3, [r3, #20]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d1df      	bne.n	800a402 <tcp_input+0x336>
  if (flags & TCP_RST) {
 800a442:	4b49      	ldr	r3, [pc, #292]	; (800a568 <tcp_input+0x49c>)
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	f013 0f04 	tst.w	r3, #4
 800a44a:	d10e      	bne.n	800a46a <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800a44c:	f013 0f02 	tst.w	r3, #2
 800a450:	d01d      	beq.n	800a48e <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a452:	4b48      	ldr	r3, [pc, #288]	; (800a574 <tcp_input+0x4a8>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	d403      	bmi.n	800a464 <tcp_input+0x398>
 800a45c:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800a45e:	1b9b      	subs	r3, r3, r6
 800a460:	2b00      	cmp	r3, #0
 800a462:	dd06      	ble.n	800a472 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 800a464:	4b41      	ldr	r3, [pc, #260]	; (800a56c <tcp_input+0x4a0>)
 800a466:	881b      	ldrh	r3, [r3, #0]
 800a468:	b9c3      	cbnz	r3, 800a49c <tcp_input+0x3d0>
        pbuf_free(p);
 800a46a:	4628      	mov	r0, r5
 800a46c:	f7fd fbfa 	bl	8007c64 <pbuf_free>
        return;
 800a470:	e63a      	b.n	800a0e8 <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a472:	4b45      	ldr	r3, [pc, #276]	; (800a588 <tcp_input+0x4bc>)
 800a474:	4e3d      	ldr	r6, [pc, #244]	; (800a56c <tcp_input+0x4a0>)
 800a476:	8836      	ldrh	r6, [r6, #0]
 800a478:	9102      	str	r1, [sp, #8]
 800a47a:	9001      	str	r0, [sp, #4]
 800a47c:	1f19      	subs	r1, r3, #4
 800a47e:	9100      	str	r1, [sp, #0]
 800a480:	4432      	add	r2, r6
 800a482:	4942      	ldr	r1, [pc, #264]	; (800a58c <tcp_input+0x4c0>)
 800a484:	6809      	ldr	r1, [r1, #0]
 800a486:	4620      	mov	r0, r4
 800a488:	f001 fbd8 	bl	800bc3c <tcp_rst>
      return;
 800a48c:	e7ed      	b.n	800a46a <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800a48e:	f013 0f01 	tst.w	r3, #1
 800a492:	d0e7      	beq.n	800a464 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 800a494:	4b3e      	ldr	r3, [pc, #248]	; (800a590 <tcp_input+0x4c4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	6223      	str	r3, [r4, #32]
 800a49a:	e7e3      	b.n	800a464 <tcp_input+0x398>
    tcp_ack_now(pcb);
 800a49c:	8b63      	ldrh	r3, [r4, #26]
 800a49e:	f043 0302 	orr.w	r3, r3, #2
 800a4a2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a4a4:	4620      	mov	r0, r4
 800a4a6:	f001 fc4b 	bl	800bd40 <tcp_output>
 800a4aa:	e7de      	b.n	800a46a <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4ac:	4b39      	ldr	r3, [pc, #228]	; (800a594 <tcp_input+0x4c8>)
 800a4ae:	f8d3 c000 	ldr.w	ip, [r3]
 800a4b2:	f1bc 0f00 	cmp.w	ip, #0
 800a4b6:	f000 8402 	beq.w	800acbe <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <tcp_input+0x480>)
 800a4bc:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800a4be:	4a26      	ldr	r2, [pc, #152]	; (800a558 <tcp_input+0x48c>)
 800a4c0:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4c2:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4c4:	4664      	mov	r4, ip
    prev = NULL;
 800a4c6:	2100      	movs	r1, #0
 800a4c8:	e009      	b.n	800a4de <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800a4ca:	8ae2      	ldrh	r2, [r4, #22]
 800a4cc:	8843      	ldrh	r3, [r0, #2]
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d00f      	beq.n	800a4f2 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4d2:	68e3      	ldr	r3, [r4, #12]
 800a4d4:	4621      	mov	r1, r4
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 83f1 	beq.w	800acbe <tcp_input+0xbf2>
 800a4dc:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4de:	7a22      	ldrb	r2, [r4, #8]
 800a4e0:	2a00      	cmp	r2, #0
 800a4e2:	d0f2      	beq.n	800a4ca <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a4e4:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800a4e8:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d0ec      	beq.n	800a4ca <tcp_input+0x3fe>
 800a4f0:	e7ef      	b.n	800a4d2 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a4f2:	6823      	ldr	r3, [r4, #0]
 800a4f4:	42bb      	cmp	r3, r7
 800a4f6:	d001      	beq.n	800a4fc <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1ea      	bne.n	800a4d2 <tcp_input+0x406>
      if (prev != NULL) {
 800a4fc:	b129      	cbz	r1, 800a50a <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800a4fe:	68e3      	ldr	r3, [r4, #12]
 800a500:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800a502:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800a506:	4b23      	ldr	r3, [pc, #140]	; (800a594 <tcp_input+0x4c8>)
 800a508:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800a50a:	4b17      	ldr	r3, [pc, #92]	; (800a568 <tcp_input+0x49c>)
 800a50c:	781b      	ldrb	r3, [r3, #0]
 800a50e:	f013 0f04 	tst.w	r3, #4
 800a512:	d105      	bne.n	800a520 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 800a514:	f013 0f10 	tst.w	r3, #16
 800a518:	d106      	bne.n	800a528 <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 800a51a:	f013 0f02 	tst.w	r3, #2
 800a51e:	d13b      	bne.n	800a598 <tcp_input+0x4cc>
      pbuf_free(p);
 800a520:	4628      	mov	r0, r5
 800a522:	f7fd fb9f 	bl	8007c64 <pbuf_free>
      return;
 800a526:	e5df      	b.n	800a0e8 <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a528:	4b17      	ldr	r3, [pc, #92]	; (800a588 <tcp_input+0x4bc>)
 800a52a:	4a10      	ldr	r2, [pc, #64]	; (800a56c <tcp_input+0x4a0>)
 800a52c:	8811      	ldrh	r1, [r2, #0]
 800a52e:	4a11      	ldr	r2, [pc, #68]	; (800a574 <tcp_input+0x4a8>)
 800a530:	6812      	ldr	r2, [r2, #0]
 800a532:	8806      	ldrh	r6, [r0, #0]
 800a534:	9602      	str	r6, [sp, #8]
 800a536:	8840      	ldrh	r0, [r0, #2]
 800a538:	9001      	str	r0, [sp, #4]
 800a53a:	1f18      	subs	r0, r3, #4
 800a53c:	9000      	str	r0, [sp, #0]
 800a53e:	440a      	add	r2, r1
 800a540:	4912      	ldr	r1, [pc, #72]	; (800a58c <tcp_input+0x4c0>)
 800a542:	6809      	ldr	r1, [r1, #0]
 800a544:	4620      	mov	r0, r4
 800a546:	f001 fb79 	bl	800bc3c <tcp_rst>
 800a54a:	e7e9      	b.n	800a520 <tcp_input+0x454>
 800a54c:	2000b350 	.word	0x2000b350
 800a550:	20010c64 	.word	0x20010c64
 800a554:	20010c88 	.word	0x20010c88
 800a558:	20010cb0 	.word	0x20010cb0
 800a55c:	20010c9c 	.word	0x20010c9c
 800a560:	20010ca0 	.word	0x20010ca0
 800a564:	20010c98 	.word	0x20010c98
 800a568:	20010c84 	.word	0x20010c84
 800a56c:	20010cbe 	.word	0x20010cbe
 800a570:	20010ca8 	.word	0x20010ca8
 800a574:	20010ca4 	.word	0x20010ca4
 800a578:	0801185c 	.word	0x0801185c
 800a57c:	08011b48 	.word	0x08011b48
 800a580:	0800f6b8 	.word	0x0800f6b8
 800a584:	08011b74 	.word	0x08011b74
 800a588:	2000b364 	.word	0x2000b364
 800a58c:	20010c80 	.word	0x20010c80
 800a590:	20010c74 	.word	0x20010c74
 800a594:	20010c70 	.word	0x20010c70
    npcb = tcp_alloc(pcb->prio);
 800a598:	7d60      	ldrb	r0, [r4, #21]
 800a59a:	f7fe faed 	bl	8008b78 <tcp_alloc>
    if (npcb == NULL) {
 800a59e:	4606      	mov	r6, r0
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d04c      	beq.n	800a63e <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a5a4:	4ba5      	ldr	r3, [pc, #660]	; (800a83c <tcp_input+0x770>)
 800a5a6:	695a      	ldr	r2, [r3, #20]
 800a5a8:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800a5ae:	8ae3      	ldrh	r3, [r4, #22]
 800a5b0:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800a5b2:	4fa3      	ldr	r7, [pc, #652]	; (800a840 <tcp_input+0x774>)
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	881b      	ldrh	r3, [r3, #0]
 800a5b8:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800a5be:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800a87c <tcp_input+0x7b0>
 800a5c2:	f8d8 3000 	ldr.w	r3, [r8]
 800a5c6:	3301      	adds	r3, #1
 800a5c8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a5ca:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a5cc:	f7fe f8d4 	bl	8008778 <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800a5d0:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 800a5d2:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 800a5d4:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 800a5d6:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a5d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a5e0:	6923      	ldr	r3, [r4, #16]
 800a5e2:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 800a5e4:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a5e6:	7a63      	ldrb	r3, [r4, #9]
 800a5e8:	f003 030c 	and.w	r3, r3, #12
 800a5ec:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a5ee:	7a23      	ldrb	r3, [r4, #8]
 800a5f0:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800a5f2:	4b94      	ldr	r3, [pc, #592]	; (800a844 <tcp_input+0x778>)
 800a5f4:	681a      	ldr	r2, [r3, #0]
 800a5f6:	60f2      	str	r2, [r6, #12]
 800a5f8:	601e      	str	r6, [r3, #0]
 800a5fa:	f001 feb1 	bl	800c360 <tcp_timer_needed>
 800a5fe:	4b92      	ldr	r3, [pc, #584]	; (800a848 <tcp_input+0x77c>)
 800a600:	2201      	movs	r2, #1
 800a602:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a604:	4630      	mov	r0, r6
 800a606:	f7fe ff97 	bl	8009538 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	89db      	ldrh	r3, [r3, #14]
 800a60e:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a612:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a616:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 800a618:	1d34      	adds	r4, r6, #4
 800a61a:	4620      	mov	r0, r4
 800a61c:	f002 fd94 	bl	800d148 <ip4_route>
 800a620:	4601      	mov	r1, r0
 800a622:	4622      	mov	r2, r4
 800a624:	4638      	mov	r0, r7
 800a626:	f7fe f8c3 	bl	80087b0 <tcp_eff_send_mss_netif>
 800a62a:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a62c:	2112      	movs	r1, #18
 800a62e:	4630      	mov	r0, r6
 800a630:	f001 f956 	bl	800b8e0 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a634:	b968      	cbnz	r0, 800a652 <tcp_input+0x586>
    tcp_output(npcb);
 800a636:	4630      	mov	r0, r6
 800a638:	f001 fb82 	bl	800bd40 <tcp_output>
 800a63c:	e770      	b.n	800a520 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a63e:	69a3      	ldr	r3, [r4, #24]
 800a640:	2b00      	cmp	r3, #0
 800a642:	f43f af6d 	beq.w	800a520 <tcp_input+0x454>
 800a646:	f04f 32ff 	mov.w	r2, #4294967295
 800a64a:	2100      	movs	r1, #0
 800a64c:	6920      	ldr	r0, [r4, #16]
 800a64e:	4798      	blx	r3
 800a650:	e766      	b.n	800a520 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 800a652:	2100      	movs	r1, #0
 800a654:	4630      	mov	r0, r6
 800a656:	f7fe f96d 	bl	8008934 <tcp_abandon>
      return;
 800a65a:	e761      	b.n	800a520 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 800a65c:	7b6b      	ldrb	r3, [r5, #13]
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	736b      	strb	r3, [r5, #13]
 800a664:	e67e      	b.n	800a364 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800a666:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a668:	b9e3      	cbnz	r3, 800a6a4 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800a66a:	4620      	mov	r0, r4
 800a66c:	f001 fb2e 	bl	800bccc <tcp_send_empty_ack>
 800a670:	e018      	b.n	800a6a4 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 800a672:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a674:	4b75      	ldr	r3, [pc, #468]	; (800a84c <tcp_input+0x780>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d02b      	beq.n	800a6d4 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 800a67c:	4b74      	ldr	r3, [pc, #464]	; (800a850 <tcp_input+0x784>)
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f013 0f08 	tst.w	r3, #8
 800a684:	f000 8295 	beq.w	800abb2 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a688:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a68c:	b11b      	cbz	r3, 800a696 <tcp_input+0x5ca>
 800a68e:	f06f 010d 	mvn.w	r1, #13
 800a692:	6920      	ldr	r0, [r4, #16]
 800a694:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a696:	4621      	mov	r1, r4
 800a698:	486a      	ldr	r0, [pc, #424]	; (800a844 <tcp_input+0x778>)
 800a69a:	f7fe f8e3 	bl	8008864 <tcp_pcb_remove>
        tcp_free(pcb);
 800a69e:	4620      	mov	r0, r4
 800a6a0:	f7fd fe3e 	bl	8008320 <tcp_free>
    tcp_input_pcb = NULL;
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4a6b      	ldr	r2, [pc, #428]	; (800a854 <tcp_input+0x788>)
 800a6a8:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800a6aa:	4a6b      	ldr	r2, [pc, #428]	; (800a858 <tcp_input+0x78c>)
 800a6ac:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800a6ae:	4b6b      	ldr	r3, [pc, #428]	; (800a85c <tcp_input+0x790>)
 800a6b0:	6858      	ldr	r0, [r3, #4]
 800a6b2:	2800      	cmp	r0, #0
 800a6b4:	f43f ad18 	beq.w	800a0e8 <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800a6b8:	f7fd fad4 	bl	8007c64 <pbuf_free>
      inseg.p = NULL;
 800a6bc:	4b67      	ldr	r3, [pc, #412]	; (800a85c <tcp_input+0x790>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	605a      	str	r2, [r3, #4]
 800a6c2:	e511      	b.n	800a0e8 <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a6c4:	b931      	cbnz	r1, 800a6d4 <tcp_input+0x608>
 800a6c6:	4b66      	ldr	r3, [pc, #408]	; (800a860 <tcp_input+0x794>)
 800a6c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a6cc:	4965      	ldr	r1, [pc, #404]	; (800a864 <tcp_input+0x798>)
 800a6ce:	4866      	ldr	r0, [pc, #408]	; (800a868 <tcp_input+0x79c>)
 800a6d0:	f003 fe66 	bl	800e3a0 <iprintf>
      recv_flags |= TF_RESET;
 800a6d4:	4a5e      	ldr	r2, [pc, #376]	; (800a850 <tcp_input+0x784>)
 800a6d6:	7813      	ldrb	r3, [r2, #0]
 800a6d8:	f043 0308 	orr.w	r3, r3, #8
 800a6dc:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a6de:	8b63      	ldrh	r3, [r4, #26]
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800a6e6:	e7c9      	b.n	800a67c <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a6e8:	f013 0f02 	tst.w	r3, #2
 800a6ec:	d004      	beq.n	800a6f8 <tcp_input+0x62c>
 800a6ee:	7d23      	ldrb	r3, [r4, #20]
 800a6f0:	3b02      	subs	r3, #2
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d81c      	bhi.n	800a732 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a6f8:	8b63      	ldrh	r3, [r4, #26]
 800a6fa:	f013 0f10 	tst.w	r3, #16
 800a6fe:	d102      	bne.n	800a706 <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 800a700:	4b5a      	ldr	r3, [pc, #360]	; (800a86c <tcp_input+0x7a0>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800a70c:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800a710:	4620      	mov	r0, r4
 800a712:	f7fe ff11 	bl	8009538 <tcp_parseopt>
  switch (pcb->state) {
 800a716:	7d23      	ldrb	r3, [r4, #20]
 800a718:	3b02      	subs	r3, #2
 800a71a:	2b07      	cmp	r3, #7
 800a71c:	d8ae      	bhi.n	800a67c <tcp_input+0x5b0>
 800a71e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a722:	000d      	.short	0x000d
 800a724:	014f00d1 	.word	0x014f00d1
 800a728:	01b1015f 	.word	0x01b1015f
 800a72c:	01fd014f 	.word	0x01fd014f
 800a730:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 800a732:	8b63      	ldrh	r3, [r4, #26]
 800a734:	f043 0302 	orr.w	r3, r3, #2
 800a738:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800a73a:	e79f      	b.n	800a67c <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a73c:	4b4c      	ldr	r3, [pc, #304]	; (800a870 <tcp_input+0x7a4>)
 800a73e:	781a      	ldrb	r2, [r3, #0]
 800a740:	f002 0312 	and.w	r3, r2, #18
 800a744:	2b12      	cmp	r3, #18
 800a746:	d020      	beq.n	800a78a <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800a748:	f012 0f10 	tst.w	r2, #16
 800a74c:	d096      	beq.n	800a67c <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a74e:	4b3c      	ldr	r3, [pc, #240]	; (800a840 <tcp_input+0x774>)
 800a750:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a752:	4b48      	ldr	r3, [pc, #288]	; (800a874 <tcp_input+0x7a8>)
 800a754:	4a48      	ldr	r2, [pc, #288]	; (800a878 <tcp_input+0x7ac>)
 800a756:	8810      	ldrh	r0, [r2, #0]
 800a758:	4a48      	ldr	r2, [pc, #288]	; (800a87c <tcp_input+0x7b0>)
 800a75a:	6812      	ldr	r2, [r2, #0]
 800a75c:	880d      	ldrh	r5, [r1, #0]
 800a75e:	9502      	str	r5, [sp, #8]
 800a760:	8849      	ldrh	r1, [r1, #2]
 800a762:	9101      	str	r1, [sp, #4]
 800a764:	1f19      	subs	r1, r3, #4
 800a766:	9100      	str	r1, [sp, #0]
 800a768:	4402      	add	r2, r0
 800a76a:	4938      	ldr	r1, [pc, #224]	; (800a84c <tcp_input+0x780>)
 800a76c:	6809      	ldr	r1, [r1, #0]
 800a76e:	4620      	mov	r0, r4
 800a770:	f001 fa64 	bl	800bc3c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a774:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a778:	2b05      	cmp	r3, #5
 800a77a:	f63f af7f 	bhi.w	800a67c <tcp_input+0x5b0>
          pcb->rtime = 0;
 800a77e:	2300      	movs	r3, #0
 800a780:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a782:	4620      	mov	r0, r4
 800a784:	f001 fcc4 	bl	800c110 <tcp_rexmit_rto>
 800a788:	e778      	b.n	800a67c <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800a78a:	4b30      	ldr	r3, [pc, #192]	; (800a84c <tcp_input+0x780>)
 800a78c:	6819      	ldr	r1, [r3, #0]
 800a78e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a790:	3301      	adds	r3, #1
 800a792:	428b      	cmp	r3, r1
 800a794:	d1d8      	bne.n	800a748 <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800a796:	4b39      	ldr	r3, [pc, #228]	; (800a87c <tcp_input+0x7b0>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	1c5a      	adds	r2, r3, #1
 800a79c:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a79e:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800a7a0:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800a7a2:	4a27      	ldr	r2, [pc, #156]	; (800a840 <tcp_input+0x774>)
 800a7a4:	6812      	ldr	r2, [r2, #0]
 800a7a6:	89d2      	ldrh	r2, [r2, #14]
 800a7a8:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a7ac:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a7b4:	2304      	movs	r3, #4
 800a7b6:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a7b8:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800a7ba:	18e5      	adds	r5, r4, r3
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f002 fcc3 	bl	800d148 <ip4_route>
 800a7c2:	4601      	mov	r1, r0
 800a7c4:	462a      	mov	r2, r5
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7fd fff2 	bl	80087b0 <tcp_eff_send_mss_netif>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7d0:	0041      	lsls	r1, r0, #1
 800a7d2:	f241 121c 	movw	r2, #4380	; 0x111c
 800a7d6:	428a      	cmp	r2, r1
 800a7d8:	bf38      	it	cc
 800a7da:	460a      	movcc	r2, r1
 800a7dc:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800a7e0:	d94e      	bls.n	800a880 <tcp_input+0x7b4>
 800a7e2:	0083      	lsls	r3, r0, #2
 800a7e4:	b29b      	uxth	r3, r3
 800a7e6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a7ea:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d04f      	beq.n	800a892 <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 800a7f2:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800a7fc:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800a7fe:	2d00      	cmp	r5, #0
 800a800:	d04f      	beq.n	800a8a2 <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 800a802:	682b      	ldr	r3, [r5, #0]
 800a804:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800a806:	4628      	mov	r0, r5
 800a808:	f7fd feec 	bl	80085e4 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a80c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d054      	beq.n	800a8bc <tcp_input+0x7f0>
          pcb->rtime = 0;
 800a812:	2300      	movs	r3, #0
 800a814:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800a816:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a81a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800a81e:	b13b      	cbz	r3, 800a830 <tcp_input+0x764>
 800a820:	2200      	movs	r2, #0
 800a822:	4621      	mov	r1, r4
 800a824:	6920      	ldr	r0, [r4, #16]
 800a826:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a828:	f110 0f0d 	cmn.w	r0, #13
 800a82c:	f43f af3a 	beq.w	800a6a4 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 800a830:	8b63      	ldrh	r3, [r4, #26]
 800a832:	f043 0302 	orr.w	r3, r3, #2
 800a836:	8363      	strh	r3, [r4, #26]
 800a838:	e720      	b.n	800a67c <tcp_input+0x5b0>
 800a83a:	bf00      	nop
 800a83c:	2000b350 	.word	0x2000b350
 800a840:	20010cb0 	.word	0x20010cb0
 800a844:	20010c64 	.word	0x20010c64
 800a848:	20010c68 	.word	0x20010c68
 800a84c:	20010c80 	.word	0x20010c80
 800a850:	20010ca0 	.word	0x20010ca0
 800a854:	20010ca8 	.word	0x20010ca8
 800a858:	20010c9c 	.word	0x20010c9c
 800a85c:	20010c88 	.word	0x20010c88
 800a860:	0801185c 	.word	0x0801185c
 800a864:	08011bd0 	.word	0x08011bd0
 800a868:	0800f6b8 	.word	0x0800f6b8
 800a86c:	20010c74 	.word	0x20010c74
 800a870:	20010c84 	.word	0x20010c84
 800a874:	2000b364 	.word	0x2000b364
 800a878:	20010cbe 	.word	0x20010cbe
 800a87c:	20010ca4 	.word	0x20010ca4
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a880:	f241 121c 	movw	r2, #4380	; 0x111c
 800a884:	4291      	cmp	r1, r2
 800a886:	bf86      	itte	hi
 800a888:	0043      	lslhi	r3, r0, #1
 800a88a:	b29b      	uxthhi	r3, r3
 800a88c:	f241 131c 	movwls	r3, #4380	; 0x111c
 800a890:	e7a9      	b.n	800a7e6 <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a892:	4b92      	ldr	r3, [pc, #584]	; (800aadc <tcp_input+0xa10>)
 800a894:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a898:	4991      	ldr	r1, [pc, #580]	; (800aae0 <tcp_input+0xa14>)
 800a89a:	4892      	ldr	r0, [pc, #584]	; (800aae4 <tcp_input+0xa18>)
 800a89c:	f003 fd80 	bl	800e3a0 <iprintf>
 800a8a0:	e7a7      	b.n	800a7f2 <tcp_input+0x726>
          rseg = pcb->unsent;
 800a8a2:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a8a4:	b115      	cbz	r5, 800a8ac <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 800a8a6:	682b      	ldr	r3, [r5, #0]
 800a8a8:	66e3      	str	r3, [r4, #108]	; 0x6c
 800a8aa:	e7ac      	b.n	800a806 <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a8ac:	4b8b      	ldr	r3, [pc, #556]	; (800aadc <tcp_input+0xa10>)
 800a8ae:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a8b2:	498d      	ldr	r1, [pc, #564]	; (800aae8 <tcp_input+0xa1c>)
 800a8b4:	488b      	ldr	r0, [pc, #556]	; (800aae4 <tcp_input+0xa18>)
 800a8b6:	f003 fd73 	bl	800e3a0 <iprintf>
 800a8ba:	e7f4      	b.n	800a8a6 <tcp_input+0x7da>
          pcb->rtime = -1;
 800a8bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8c0:	8623      	strh	r3, [r4, #48]	; 0x30
 800a8c2:	e7aa      	b.n	800a81a <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 800a8c4:	4b89      	ldr	r3, [pc, #548]	; (800aaec <tcp_input+0xa20>)
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	f013 0f10 	tst.w	r3, #16
 800a8cc:	d069      	beq.n	800a9a2 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a8ce:	4b88      	ldr	r3, [pc, #544]	; (800aaf0 <tcp_input+0xa24>)
 800a8d0:	6819      	ldr	r1, [r3, #0]
 800a8d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a8d4:	43db      	mvns	r3, r3
 800a8d6:	42cb      	cmn	r3, r1
 800a8d8:	d403      	bmi.n	800a8e2 <tcp_input+0x816>
 800a8da:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a8dc:	1acb      	subs	r3, r1, r3
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	dd11      	ble.n	800a906 <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a8e2:	4b84      	ldr	r3, [pc, #528]	; (800aaf4 <tcp_input+0xa28>)
 800a8e4:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a8e6:	4b84      	ldr	r3, [pc, #528]	; (800aaf8 <tcp_input+0xa2c>)
 800a8e8:	4a84      	ldr	r2, [pc, #528]	; (800aafc <tcp_input+0xa30>)
 800a8ea:	8815      	ldrh	r5, [r2, #0]
 800a8ec:	4a84      	ldr	r2, [pc, #528]	; (800ab00 <tcp_input+0xa34>)
 800a8ee:	6812      	ldr	r2, [r2, #0]
 800a8f0:	8806      	ldrh	r6, [r0, #0]
 800a8f2:	9602      	str	r6, [sp, #8]
 800a8f4:	8840      	ldrh	r0, [r0, #2]
 800a8f6:	9001      	str	r0, [sp, #4]
 800a8f8:	1f18      	subs	r0, r3, #4
 800a8fa:	9000      	str	r0, [sp, #0]
 800a8fc:	442a      	add	r2, r5
 800a8fe:	4620      	mov	r0, r4
 800a900:	f001 f99c 	bl	800bc3c <tcp_rst>
 800a904:	e6ba      	b.n	800a67c <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 800a906:	2304      	movs	r3, #4
 800a908:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800a90a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d03b      	beq.n	800a988 <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	b34b      	cbz	r3, 800a968 <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a914:	2200      	movs	r2, #0
 800a916:	4621      	mov	r1, r4
 800a918:	6920      	ldr	r0, [r4, #16]
 800a91a:	4798      	blx	r3
          if (err != ERR_OK) {
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d12f      	bne.n	800a980 <tcp_input+0x8b4>
          tcp_receive(pcb);
 800a920:	4620      	mov	r0, r4
 800a922:	f7fe ff47 	bl	80097b4 <tcp_receive>
          if (recv_acked != 0) {
 800a926:	4b77      	ldr	r3, [pc, #476]	; (800ab04 <tcp_input+0xa38>)
 800a928:	881b      	ldrh	r3, [r3, #0]
 800a92a:	b113      	cbz	r3, 800a932 <tcp_input+0x866>
            recv_acked--;
 800a92c:	3b01      	subs	r3, #1
 800a92e:	4a75      	ldr	r2, [pc, #468]	; (800ab04 <tcp_input+0xa38>)
 800a930:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a932:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a934:	0059      	lsls	r1, r3, #1
 800a936:	f241 121c 	movw	r2, #4380	; 0x111c
 800a93a:	428a      	cmp	r2, r1
 800a93c:	bf38      	it	cc
 800a93e:	460a      	movcc	r2, r1
 800a940:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800a944:	d924      	bls.n	800a990 <tcp_input+0x8c4>
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800a94e:	4b6e      	ldr	r3, [pc, #440]	; (800ab08 <tcp_input+0xa3c>)
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	f013 0f20 	tst.w	r3, #32
 800a956:	f43f ae91 	beq.w	800a67c <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 800a95a:	8b63      	ldrh	r3, [r4, #26]
 800a95c:	f043 0302 	orr.w	r3, r3, #2
 800a960:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800a962:	2307      	movs	r3, #7
 800a964:	7523      	strb	r3, [r4, #20]
 800a966:	e689      	b.n	800a67c <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a968:	4b5c      	ldr	r3, [pc, #368]	; (800aadc <tcp_input+0xa10>)
 800a96a:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a96e:	4967      	ldr	r1, [pc, #412]	; (800ab0c <tcp_input+0xa40>)
 800a970:	485c      	ldr	r0, [pc, #368]	; (800aae4 <tcp_input+0xa18>)
 800a972:	f003 fd15 	bl	800e3a0 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a976:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a978:	699b      	ldr	r3, [r3, #24]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d1ca      	bne.n	800a914 <tcp_input+0x848>
 800a97e:	e003      	b.n	800a988 <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 800a980:	f110 0f0d 	cmn.w	r0, #13
 800a984:	f43f ae8e 	beq.w	800a6a4 <tcp_input+0x5d8>
              tcp_abort(pcb);
 800a988:	4620      	mov	r0, r4
 800a98a:	f7fe f859 	bl	8008a40 <tcp_abort>
 800a98e:	e689      	b.n	800a6a4 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a990:	f241 121c 	movw	r2, #4380	; 0x111c
 800a994:	4291      	cmp	r1, r2
 800a996:	bf86      	itte	hi
 800a998:	005b      	lslhi	r3, r3, #1
 800a99a:	b29b      	uxthhi	r3, r3
 800a99c:	f241 131c 	movwls	r3, #4380	; 0x111c
 800a9a0:	e7d3      	b.n	800a94a <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a9a2:	f013 0f02 	tst.w	r3, #2
 800a9a6:	f43f ae69 	beq.w	800a67c <tcp_input+0x5b0>
 800a9aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	4a54      	ldr	r2, [pc, #336]	; (800ab00 <tcp_input+0xa34>)
 800a9b0:	6812      	ldr	r2, [r2, #0]
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	f47f ae62 	bne.w	800a67c <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f001 f8bb 	bl	800bb34 <tcp_rexmit>
 800a9be:	e65d      	b.n	800a67c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7fe fef7 	bl	80097b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a9c6:	4b50      	ldr	r3, [pc, #320]	; (800ab08 <tcp_input+0xa3c>)
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	f013 0f20 	tst.w	r3, #32
 800a9ce:	f43f ae55 	beq.w	800a67c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800a9d2:	8b63      	ldrh	r3, [r4, #26]
 800a9d4:	f043 0302 	orr.w	r3, r3, #2
 800a9d8:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800a9da:	2307      	movs	r3, #7
 800a9dc:	7523      	strb	r3, [r4, #20]
 800a9de:	e64d      	b.n	800a67c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f7fe fee7 	bl	80097b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a9e6:	4b48      	ldr	r3, [pc, #288]	; (800ab08 <tcp_input+0xa3c>)
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	f013 0f20 	tst.w	r3, #32
 800a9ee:	d036      	beq.n	800aa5e <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a9f0:	4b3e      	ldr	r3, [pc, #248]	; (800aaec <tcp_input+0xa20>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f013 0f10 	tst.w	r3, #16
 800a9f8:	d004      	beq.n	800aa04 <tcp_input+0x938>
 800a9fa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a9fc:	4b3c      	ldr	r3, [pc, #240]	; (800aaf0 <tcp_input+0xa24>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d006      	beq.n	800aa12 <tcp_input+0x946>
          tcp_ack_now(pcb);
 800aa04:	8b63      	ldrh	r3, [r4, #26]
 800aa06:	f043 0302 	orr.w	r3, r3, #2
 800aa0a:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800aa0c:	2308      	movs	r3, #8
 800aa0e:	7523      	strb	r3, [r4, #20]
 800aa10:	e634      	b.n	800a67c <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa12:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1f5      	bne.n	800aa04 <tcp_input+0x938>
          tcp_ack_now(pcb);
 800aa18:	8b63      	ldrh	r3, [r4, #26]
 800aa1a:	f043 0302 	orr.w	r3, r3, #2
 800aa1e:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800aa20:	4620      	mov	r0, r4
 800aa22:	f7fd feef 	bl	8008804 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800aa26:	4b3a      	ldr	r3, [pc, #232]	; (800ab10 <tcp_input+0xa44>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	42a3      	cmp	r3, r4
 800aa2c:	d005      	beq.n	800aa3a <tcp_input+0x96e>
 800aa2e:	b153      	cbz	r3, 800aa46 <tcp_input+0x97a>
 800aa30:	68da      	ldr	r2, [r3, #12]
 800aa32:	42a2      	cmp	r2, r4
 800aa34:	d005      	beq.n	800aa42 <tcp_input+0x976>
 800aa36:	4613      	mov	r3, r2
 800aa38:	e7f9      	b.n	800aa2e <tcp_input+0x962>
 800aa3a:	68e2      	ldr	r2, [r4, #12]
 800aa3c:	4b34      	ldr	r3, [pc, #208]	; (800ab10 <tcp_input+0xa44>)
 800aa3e:	601a      	str	r2, [r3, #0]
 800aa40:	e001      	b.n	800aa46 <tcp_input+0x97a>
 800aa42:	68e2      	ldr	r2, [r4, #12]
 800aa44:	60da      	str	r2, [r3, #12]
 800aa46:	4b33      	ldr	r3, [pc, #204]	; (800ab14 <tcp_input+0xa48>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800aa4c:	230a      	movs	r3, #10
 800aa4e:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800aa50:	4b31      	ldr	r3, [pc, #196]	; (800ab18 <tcp_input+0xa4c>)
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	60e2      	str	r2, [r4, #12]
 800aa56:	601c      	str	r4, [r3, #0]
 800aa58:	f001 fc82 	bl	800c360 <tcp_timer_needed>
 800aa5c:	e60e      	b.n	800a67c <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800aa5e:	4b23      	ldr	r3, [pc, #140]	; (800aaec <tcp_input+0xa20>)
 800aa60:	781b      	ldrb	r3, [r3, #0]
 800aa62:	f013 0f10 	tst.w	r3, #16
 800aa66:	f43f ae09 	beq.w	800a67c <tcp_input+0x5b0>
 800aa6a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800aa6c:	4b20      	ldr	r3, [pc, #128]	; (800aaf0 <tcp_input+0xa24>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	f47f ae03 	bne.w	800a67c <tcp_input+0x5b0>
 800aa76:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	f47f adff 	bne.w	800a67c <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 800aa7e:	2306      	movs	r3, #6
 800aa80:	7523      	strb	r3, [r4, #20]
 800aa82:	e5fb      	b.n	800a67c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800aa84:	4620      	mov	r0, r4
 800aa86:	f7fe fe95 	bl	80097b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800aa8a:	4b1f      	ldr	r3, [pc, #124]	; (800ab08 <tcp_input+0xa3c>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	f013 0f20 	tst.w	r3, #32
 800aa92:	f43f adf3 	beq.w	800a67c <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800aa96:	8b63      	ldrh	r3, [r4, #26]
 800aa98:	f043 0302 	orr.w	r3, r3, #2
 800aa9c:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f7fd feb0 	bl	8008804 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800aaa4:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <tcp_input+0xa44>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	42a3      	cmp	r3, r4
 800aaaa:	d005      	beq.n	800aab8 <tcp_input+0x9ec>
 800aaac:	b153      	cbz	r3, 800aac4 <tcp_input+0x9f8>
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	42a2      	cmp	r2, r4
 800aab2:	d005      	beq.n	800aac0 <tcp_input+0x9f4>
 800aab4:	4613      	mov	r3, r2
 800aab6:	e7f9      	b.n	800aaac <tcp_input+0x9e0>
 800aab8:	68e2      	ldr	r2, [r4, #12]
 800aaba:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <tcp_input+0xa44>)
 800aabc:	601a      	str	r2, [r3, #0]
 800aabe:	e001      	b.n	800aac4 <tcp_input+0x9f8>
 800aac0:	68e2      	ldr	r2, [r4, #12]
 800aac2:	60da      	str	r2, [r3, #12]
 800aac4:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <tcp_input+0xa48>)
 800aac6:	2201      	movs	r2, #1
 800aac8:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800aaca:	230a      	movs	r3, #10
 800aacc:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800aace:	4b12      	ldr	r3, [pc, #72]	; (800ab18 <tcp_input+0xa4c>)
 800aad0:	681a      	ldr	r2, [r3, #0]
 800aad2:	60e2      	str	r2, [r4, #12]
 800aad4:	601c      	str	r4, [r3, #0]
 800aad6:	f001 fc43 	bl	800c360 <tcp_timer_needed>
 800aada:	e5cf      	b.n	800a67c <tcp_input+0x5b0>
 800aadc:	0801185c 	.word	0x0801185c
 800aae0:	08011bf0 	.word	0x08011bf0
 800aae4:	0800f6b8 	.word	0x0800f6b8
 800aae8:	08011c08 	.word	0x08011c08
 800aaec:	20010c84 	.word	0x20010c84
 800aaf0:	20010c80 	.word	0x20010c80
 800aaf4:	20010cb0 	.word	0x20010cb0
 800aaf8:	2000b364 	.word	0x2000b364
 800aafc:	20010cbe 	.word	0x20010cbe
 800ab00:	20010ca4 	.word	0x20010ca4
 800ab04:	20010c98 	.word	0x20010c98
 800ab08:	20010ca0 	.word	0x20010ca0
 800ab0c:	08011c1c 	.word	0x08011c1c
 800ab10:	20010c64 	.word	0x20010c64
 800ab14:	20010c68 	.word	0x20010c68
 800ab18:	20010c7c 	.word	0x20010c7c
      tcp_receive(pcb);
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f7fe fe49 	bl	80097b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab22:	4b73      	ldr	r3, [pc, #460]	; (800acf0 <tcp_input+0xc24>)
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	f013 0f10 	tst.w	r3, #16
 800ab2a:	f43f ada7 	beq.w	800a67c <tcp_input+0x5b0>
 800ab2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ab30:	4b70      	ldr	r3, [pc, #448]	; (800acf4 <tcp_input+0xc28>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	429a      	cmp	r2, r3
 800ab36:	f47f ada1 	bne.w	800a67c <tcp_input+0x5b0>
 800ab3a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f47f ad9d 	bne.w	800a67c <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 800ab42:	4620      	mov	r0, r4
 800ab44:	f7fd fe5e 	bl	8008804 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ab48:	4b6b      	ldr	r3, [pc, #428]	; (800acf8 <tcp_input+0xc2c>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	42a3      	cmp	r3, r4
 800ab4e:	d005      	beq.n	800ab5c <tcp_input+0xa90>
 800ab50:	b153      	cbz	r3, 800ab68 <tcp_input+0xa9c>
 800ab52:	68da      	ldr	r2, [r3, #12]
 800ab54:	42a2      	cmp	r2, r4
 800ab56:	d005      	beq.n	800ab64 <tcp_input+0xa98>
 800ab58:	4613      	mov	r3, r2
 800ab5a:	e7f9      	b.n	800ab50 <tcp_input+0xa84>
 800ab5c:	68e2      	ldr	r2, [r4, #12]
 800ab5e:	4b66      	ldr	r3, [pc, #408]	; (800acf8 <tcp_input+0xc2c>)
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	e001      	b.n	800ab68 <tcp_input+0xa9c>
 800ab64:	68e2      	ldr	r2, [r4, #12]
 800ab66:	60da      	str	r2, [r3, #12]
 800ab68:	4b64      	ldr	r3, [pc, #400]	; (800acfc <tcp_input+0xc30>)
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ab6e:	230a      	movs	r3, #10
 800ab70:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ab72:	4b63      	ldr	r3, [pc, #396]	; (800ad00 <tcp_input+0xc34>)
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	60e2      	str	r2, [r4, #12]
 800ab78:	601c      	str	r4, [r3, #0]
 800ab7a:	f001 fbf1 	bl	800c360 <tcp_timer_needed>
 800ab7e:	e57d      	b.n	800a67c <tcp_input+0x5b0>
      tcp_receive(pcb);
 800ab80:	4620      	mov	r0, r4
 800ab82:	f7fe fe17 	bl	80097b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ab86:	4b5a      	ldr	r3, [pc, #360]	; (800acf0 <tcp_input+0xc24>)
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	f013 0f10 	tst.w	r3, #16
 800ab8e:	f43f ad75 	beq.w	800a67c <tcp_input+0x5b0>
 800ab92:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ab94:	4b57      	ldr	r3, [pc, #348]	; (800acf4 <tcp_input+0xc28>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	f47f ad6f 	bne.w	800a67c <tcp_input+0x5b0>
 800ab9e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f47f ad6b 	bne.w	800a67c <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 800aba6:	4a57      	ldr	r2, [pc, #348]	; (800ad04 <tcp_input+0xc38>)
 800aba8:	7813      	ldrb	r3, [r2, #0]
 800abaa:	f043 0310 	orr.w	r3, r3, #16
 800abae:	7013      	strb	r3, [r2, #0]
 800abb0:	e564      	b.n	800a67c <tcp_input+0x5b0>
        if (recv_acked > 0) {
 800abb2:	4b55      	ldr	r3, [pc, #340]	; (800ad08 <tcp_input+0xc3c>)
 800abb4:	881a      	ldrh	r2, [r3, #0]
 800abb6:	b162      	cbz	r2, 800abd2 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800abb8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800abbc:	b133      	cbz	r3, 800abcc <tcp_input+0xb00>
 800abbe:	4621      	mov	r1, r4
 800abc0:	6920      	ldr	r0, [r4, #16]
 800abc2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800abc4:	f110 0f0d 	cmn.w	r0, #13
 800abc8:	f43f ad6c 	beq.w	800a6a4 <tcp_input+0x5d8>
          recv_acked = 0;
 800abcc:	4b4e      	ldr	r3, [pc, #312]	; (800ad08 <tcp_input+0xc3c>)
 800abce:	2200      	movs	r2, #0
 800abd0:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800abd2:	4620      	mov	r0, r4
 800abd4:	f7fe fcfa 	bl	80095cc <tcp_input_delayed_close>
 800abd8:	2800      	cmp	r0, #0
 800abda:	f47f ad63 	bne.w	800a6a4 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800abde:	4b4b      	ldr	r3, [pc, #300]	; (800ad0c <tcp_input+0xc40>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	b1eb      	cbz	r3, 800ac20 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800abe4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800abe6:	b133      	cbz	r3, 800abf6 <tcp_input+0xb2a>
 800abe8:	4b49      	ldr	r3, [pc, #292]	; (800ad10 <tcp_input+0xc44>)
 800abea:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800abee:	4949      	ldr	r1, [pc, #292]	; (800ad14 <tcp_input+0xc48>)
 800abf0:	4849      	ldr	r0, [pc, #292]	; (800ad18 <tcp_input+0xc4c>)
 800abf2:	f003 fbd5 	bl	800e3a0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800abf6:	8b63      	ldrh	r3, [r4, #26]
 800abf8:	f013 0f10 	tst.w	r3, #16
 800abfc:	d128      	bne.n	800ac50 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800abfe:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800ac02:	b36d      	cbz	r5, 800ac60 <tcp_input+0xb94>
 800ac04:	2300      	movs	r3, #0
 800ac06:	4a41      	ldr	r2, [pc, #260]	; (800ad0c <tcp_input+0xc40>)
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	6920      	ldr	r0, [r4, #16]
 800ac0e:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800ac10:	f110 0f0d 	cmn.w	r0, #13
 800ac14:	f43f ad46 	beq.w	800a6a4 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 800ac18:	b110      	cbz	r0, 800ac20 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800ac1a:	4b3c      	ldr	r3, [pc, #240]	; (800ad0c <tcp_input+0xc40>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800ac20:	4b38      	ldr	r3, [pc, #224]	; (800ad04 <tcp_input+0xc38>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f013 0f20 	tst.w	r3, #32
 800ac28:	d005      	beq.n	800ac36 <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800ac2a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac2c:	b303      	cbz	r3, 800ac70 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800ac2e:	7b5a      	ldrb	r2, [r3, #13]
 800ac30:	f042 0220 	orr.w	r2, r2, #32
 800ac34:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800ac36:	4b39      	ldr	r3, [pc, #228]	; (800ad1c <tcp_input+0xc50>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f7fe fcc5 	bl	80095cc <tcp_input_delayed_close>
 800ac42:	2800      	cmp	r0, #0
 800ac44:	f47f ad2e 	bne.w	800a6a4 <tcp_input+0x5d8>
        tcp_output(pcb);
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f001 f879 	bl	800bd40 <tcp_output>
 800ac4e:	e529      	b.n	800a6a4 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 800ac50:	4b2e      	ldr	r3, [pc, #184]	; (800ad0c <tcp_input+0xc40>)
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	f7fd f806 	bl	8007c64 <pbuf_free>
            tcp_abort(pcb);
 800ac58:	4620      	mov	r0, r4
 800ac5a:	f7fd fef1 	bl	8008a40 <tcp_abort>
            goto aborted;
 800ac5e:	e521      	b.n	800a6a4 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ac60:	2300      	movs	r3, #0
 800ac62:	4a2a      	ldr	r2, [pc, #168]	; (800ad0c <tcp_input+0xc40>)
 800ac64:	6812      	ldr	r2, [r2, #0]
 800ac66:	4621      	mov	r1, r4
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fe f917 	bl	8008e9c <tcp_recv_null>
 800ac6e:	e7cf      	b.n	800ac10 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ac70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800ac72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800ac76:	bf1c      	itt	ne
 800ac78:	3301      	addne	r3, #1
 800ac7a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800ac7c:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800ac80:	2d00      	cmp	r5, #0
 800ac82:	d0d8      	beq.n	800ac36 <tcp_input+0xb6a>
 800ac84:	2300      	movs	r3, #0
 800ac86:	461a      	mov	r2, r3
 800ac88:	4621      	mov	r1, r4
 800ac8a:	6920      	ldr	r0, [r4, #16]
 800ac8c:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800ac8e:	f110 0f0d 	cmn.w	r0, #13
 800ac92:	d1d0      	bne.n	800ac36 <tcp_input+0xb6a>
 800ac94:	e506      	b.n	800a6a4 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ac96:	4b22      	ldr	r3, [pc, #136]	; (800ad20 <tcp_input+0xc54>)
 800ac98:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ac9a:	4b22      	ldr	r3, [pc, #136]	; (800ad24 <tcp_input+0xc58>)
 800ac9c:	4a22      	ldr	r2, [pc, #136]	; (800ad28 <tcp_input+0xc5c>)
 800ac9e:	8810      	ldrh	r0, [r2, #0]
 800aca0:	4a22      	ldr	r2, [pc, #136]	; (800ad2c <tcp_input+0xc60>)
 800aca2:	6812      	ldr	r2, [r2, #0]
 800aca4:	880c      	ldrh	r4, [r1, #0]
 800aca6:	9402      	str	r4, [sp, #8]
 800aca8:	8849      	ldrh	r1, [r1, #2]
 800acaa:	9101      	str	r1, [sp, #4]
 800acac:	1f19      	subs	r1, r3, #4
 800acae:	9100      	str	r1, [sp, #0]
 800acb0:	4402      	add	r2, r0
 800acb2:	4910      	ldr	r1, [pc, #64]	; (800acf4 <tcp_input+0xc28>)
 800acb4:	6809      	ldr	r1, [r1, #0]
 800acb6:	2000      	movs	r0, #0
 800acb8:	f000 ffc0 	bl	800bc3c <tcp_rst>
 800acbc:	e007      	b.n	800acce <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800acbe:	4b18      	ldr	r3, [pc, #96]	; (800ad20 <tcp_input+0xc54>)
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	8998      	ldrh	r0, [r3, #12]
 800acc4:	f7fc f938 	bl	8006f38 <lwip_htons>
 800acc8:	f010 0f04 	tst.w	r0, #4
 800accc:	d0e3      	beq.n	800ac96 <tcp_input+0xbca>
    pbuf_free(p);
 800acce:	4628      	mov	r0, r5
 800acd0:	f7fc ffc8 	bl	8007c64 <pbuf_free>
 800acd4:	f7ff ba08 	b.w	800a0e8 <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acd8:	4b09      	ldr	r3, [pc, #36]	; (800ad00 <tcp_input+0xc34>)
 800acda:	681c      	ldr	r4, [r3, #0]
 800acdc:	2c00      	cmp	r4, #0
 800acde:	f43f abe5 	beq.w	800a4ac <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ace2:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800ad10 <tcp_input+0xc44>
 800ace6:	4f12      	ldr	r7, [pc, #72]	; (800ad30 <tcp_input+0xc64>)
 800ace8:	4e0b      	ldr	r6, [pc, #44]	; (800ad18 <tcp_input+0xc4c>)
 800acea:	f7ff bb8d 	b.w	800a408 <tcp_input+0x33c>
 800acee:	bf00      	nop
 800acf0:	20010c84 	.word	0x20010c84
 800acf4:	20010c80 	.word	0x20010c80
 800acf8:	20010c64 	.word	0x20010c64
 800acfc:	20010c68 	.word	0x20010c68
 800ad00:	20010c7c 	.word	0x20010c7c
 800ad04:	20010ca0 	.word	0x20010ca0
 800ad08:	20010c98 	.word	0x20010c98
 800ad0c:	20010c9c 	.word	0x20010c9c
 800ad10:	0801185c 	.word	0x0801185c
 800ad14:	08011c3c 	.word	0x08011c3c
 800ad18:	0800f6b8 	.word	0x0800f6b8
 800ad1c:	20010ca8 	.word	0x20010ca8
 800ad20:	20010cb0 	.word	0x20010cb0
 800ad24:	2000b364 	.word	0x2000b364
 800ad28:	20010cbe 	.word	0x20010cbe
 800ad2c:	20010ca4 	.word	0x20010ca4
 800ad30:	08011ba0 	.word	0x08011ba0

0800ad34 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800ad34:	4a02      	ldr	r2, [pc, #8]	; (800ad40 <tcp_trigger_input_pcb_close+0xc>)
 800ad36:	7813      	ldrb	r3, [r2, #0]
 800ad38:	f043 0310 	orr.w	r3, r3, #16
 800ad3c:	7013      	strb	r3, [r2, #0]
}
 800ad3e:	4770      	bx	lr
 800ad40:	20010ca0 	.word	0x20010ca0

0800ad44 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800ad44:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ad46:	4604      	mov	r4, r0
 800ad48:	b128      	cbz	r0, 800ad56 <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800ad4a:	6863      	ldr	r3, [r4, #4]
 800ad4c:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800ad4e:	3801      	subs	r0, #1
 800ad50:	bf18      	it	ne
 800ad52:	2001      	movne	r0, #1
 800ad54:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800ad56:	4b04      	ldr	r3, [pc, #16]	; (800ad68 <tcp_output_segment_busy+0x24>)
 800ad58:	f240 529a 	movw	r2, #1434	; 0x59a
 800ad5c:	4903      	ldr	r1, [pc, #12]	; (800ad6c <tcp_output_segment_busy+0x28>)
 800ad5e:	4804      	ldr	r0, [pc, #16]	; (800ad70 <tcp_output_segment_busy+0x2c>)
 800ad60:	f003 fb1e 	bl	800e3a0 <iprintf>
 800ad64:	e7f1      	b.n	800ad4a <tcp_output_segment_busy+0x6>
 800ad66:	bf00      	nop
 800ad68:	08011c58 	.word	0x08011c58
 800ad6c:	08011c8c 	.word	0x08011c8c
 800ad70:	0800f6b8 	.word	0x0800f6b8

0800ad74 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ad78:	460d      	mov	r5, r1
 800ad7a:	b181      	cbz	r1, 800ad9e <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800ad7c:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ad7e:	00a4      	lsls	r4, r4, #2
 800ad80:	f004 0404 	and.w	r4, r4, #4
 800ad84:	3414      	adds	r4, #20
 800ad86:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800ad88:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800ad8a:	429c      	cmp	r4, r3
 800ad8c:	d006      	beq.n	800ad9c <tcp_output_fill_options+0x28>
 800ad8e:	4b08      	ldr	r3, [pc, #32]	; (800adb0 <tcp_output_fill_options+0x3c>)
 800ad90:	f240 7275 	movw	r2, #1909	; 0x775
 800ad94:	4907      	ldr	r1, [pc, #28]	; (800adb4 <tcp_output_fill_options+0x40>)
 800ad96:	4808      	ldr	r0, [pc, #32]	; (800adb8 <tcp_output_fill_options+0x44>)
 800ad98:	f003 fb02 	bl	800e3a0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ad9c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ad9e:	4b04      	ldr	r3, [pc, #16]	; (800adb0 <tcp_output_fill_options+0x3c>)
 800ada0:	f240 7256 	movw	r2, #1878	; 0x756
 800ada4:	4905      	ldr	r1, [pc, #20]	; (800adbc <tcp_output_fill_options+0x48>)
 800ada6:	4804      	ldr	r0, [pc, #16]	; (800adb8 <tcp_output_fill_options+0x44>)
 800ada8:	f003 fafa 	bl	800e3a0 <iprintf>
 800adac:	e7e6      	b.n	800ad7c <tcp_output_fill_options+0x8>
 800adae:	bf00      	nop
 800adb0:	08011c58 	.word	0x08011c58
 800adb4:	08011cdc 	.word	0x08011cdc
 800adb8:	0800f6b8 	.word	0x0800f6b8
 800adbc:	08011cb4 	.word	0x08011cb4

0800adc0 <tcp_pbuf_prealloc>:
{
 800adc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adc4:	4680      	mov	r8, r0
 800adc6:	460c      	mov	r4, r1
 800adc8:	4615      	mov	r5, r2
 800adca:	9e08      	ldr	r6, [sp, #32]
 800adcc:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800add0:	461f      	mov	r7, r3
 800add2:	b1cb      	cbz	r3, 800ae08 <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800add4:	b1fe      	cbz	r6, 800ae16 <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800add6:	42ac      	cmp	r4, r5
 800add8:	d229      	bcs.n	800ae2e <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800adda:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800adde:	f013 0f02 	tst.w	r3, #2
 800ade2:	d108      	bne.n	800adf6 <tcp_pbuf_prealloc+0x36>
 800ade4:	8b73      	ldrh	r3, [r6, #26]
 800ade6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800adea:	d139      	bne.n	800ae60 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800adec:	f1b9 0f00 	cmp.w	r9, #0
 800adf0:	d001      	beq.n	800adf6 <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800adf2:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800adf4:	b1b3      	cbz	r3, 800ae24 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800adf6:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800adfa:	f021 0103 	bic.w	r1, r1, #3
 800adfe:	428d      	cmp	r5, r1
 800ae00:	bf28      	it	cs
 800ae02:	460d      	movcs	r5, r1
 800ae04:	b2a9      	uxth	r1, r5
 800ae06:	e013      	b.n	800ae30 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800ae08:	4b16      	ldr	r3, [pc, #88]	; (800ae64 <tcp_pbuf_prealloc+0xa4>)
 800ae0a:	22e8      	movs	r2, #232	; 0xe8
 800ae0c:	4916      	ldr	r1, [pc, #88]	; (800ae68 <tcp_pbuf_prealloc+0xa8>)
 800ae0e:	4817      	ldr	r0, [pc, #92]	; (800ae6c <tcp_pbuf_prealloc+0xac>)
 800ae10:	f003 fac6 	bl	800e3a0 <iprintf>
 800ae14:	e7de      	b.n	800add4 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800ae16:	4b13      	ldr	r3, [pc, #76]	; (800ae64 <tcp_pbuf_prealloc+0xa4>)
 800ae18:	22e9      	movs	r2, #233	; 0xe9
 800ae1a:	4915      	ldr	r1, [pc, #84]	; (800ae70 <tcp_pbuf_prealloc+0xb0>)
 800ae1c:	4813      	ldr	r0, [pc, #76]	; (800ae6c <tcp_pbuf_prealloc+0xac>)
 800ae1e:	f003 fabf 	bl	800e3a0 <iprintf>
 800ae22:	e7d8      	b.n	800add6 <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800ae24:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e5      	bne.n	800adf6 <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	e000      	b.n	800ae30 <tcp_pbuf_prealloc+0x70>
 800ae2e:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ae30:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ae34:	4640      	mov	r0, r8
 800ae36:	f7fc ff85 	bl	8007d44 <pbuf_alloc>
  if (p == NULL) {
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b168      	cbz	r0, 800ae5a <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ae3e:	6803      	ldr	r3, [r0, #0]
 800ae40:	b133      	cbz	r3, 800ae50 <tcp_pbuf_prealloc+0x90>
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <tcp_pbuf_prealloc+0xa4>)
 800ae44:	f240 120b 	movw	r2, #267	; 0x10b
 800ae48:	490a      	ldr	r1, [pc, #40]	; (800ae74 <tcp_pbuf_prealloc+0xb4>)
 800ae4a:	4808      	ldr	r0, [pc, #32]	; (800ae6c <tcp_pbuf_prealloc+0xac>)
 800ae4c:	f003 faa8 	bl	800e3a0 <iprintf>
  *oversize = p->len - length;
 800ae50:	896b      	ldrh	r3, [r5, #10]
 800ae52:	1b1b      	subs	r3, r3, r4
 800ae54:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800ae56:	812c      	strh	r4, [r5, #8]
 800ae58:	816c      	strh	r4, [r5, #10]
}
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800ae60:	4621      	mov	r1, r4
 800ae62:	e7e5      	b.n	800ae30 <tcp_pbuf_prealloc+0x70>
 800ae64:	08011c58 	.word	0x08011c58
 800ae68:	08011cf0 	.word	0x08011cf0
 800ae6c:	0800f6b8 	.word	0x0800f6b8
 800ae70:	08011d14 	.word	0x08011d14
 800ae74:	08011d34 	.word	0x08011d34

0800ae78 <tcp_create_segment>:
{
 800ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	460e      	mov	r6, r1
 800ae7e:	4617      	mov	r7, r2
 800ae80:	4698      	mov	r8, r3
 800ae82:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ae86:	4681      	mov	r9, r0
 800ae88:	2800      	cmp	r0, #0
 800ae8a:	d041      	beq.n	800af10 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ae8c:	2e00      	cmp	r6, #0
 800ae8e:	d046      	beq.n	800af1e <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ae90:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800ae94:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800ae98:	2003      	movs	r0, #3
 800ae9a:	f7fc fbf1 	bl	8007680 <memp_malloc>
 800ae9e:	4604      	mov	r4, r0
 800aea0:	2800      	cmp	r0, #0
 800aea2:	d043      	beq.n	800af2c <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800aea4:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800aeac:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800aeae:	fa1f fa85 	uxth.w	sl, r5
 800aeb2:	8933      	ldrh	r3, [r6, #8]
 800aeb4:	4553      	cmp	r3, sl
 800aeb6:	d33d      	bcc.n	800af34 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800aeb8:	8931      	ldrh	r1, [r6, #8]
 800aeba:	eba1 010a 	sub.w	r1, r1, sl
 800aebe:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800aec0:	2114      	movs	r1, #20
 800aec2:	4630      	mov	r0, r6
 800aec4:	f7fc fe89 	bl	8007bda <pbuf_add_header>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d13a      	bne.n	800af42 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800aecc:	6863      	ldr	r3, [r4, #4]
 800aece:	685e      	ldr	r6, [r3, #4]
 800aed0:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800aed2:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800aed6:	f7fc f82f 	bl	8006f38 <lwip_htons>
 800aeda:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800aedc:	68e6      	ldr	r6, [r4, #12]
 800aede:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800aee2:	f7fc f829 	bl	8006f38 <lwip_htons>
 800aee6:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800aee8:	68e6      	ldr	r6, [r4, #12]
 800aeea:	4640      	mov	r0, r8
 800aeec:	f7fc f829 	bl	8006f42 <lwip_htonl>
 800aef0:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800aef2:	68e6      	ldr	r6, [r4, #12]
 800aef4:	02a8      	lsls	r0, r5, #10
 800aef6:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 800aefa:	4338      	orrs	r0, r7
 800aefc:	f7fc f81c 	bl	8006f38 <lwip_htons>
 800af00:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800af02:	68e3      	ldr	r3, [r4, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	749a      	strb	r2, [r3, #18]
 800af08:	74da      	strb	r2, [r3, #19]
}
 800af0a:	4620      	mov	r0, r4
 800af0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <tcp_create_segment+0xd4>)
 800af12:	22a3      	movs	r2, #163	; 0xa3
 800af14:	490e      	ldr	r1, [pc, #56]	; (800af50 <tcp_create_segment+0xd8>)
 800af16:	480f      	ldr	r0, [pc, #60]	; (800af54 <tcp_create_segment+0xdc>)
 800af18:	f003 fa42 	bl	800e3a0 <iprintf>
 800af1c:	e7b6      	b.n	800ae8c <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800af1e:	4b0b      	ldr	r3, [pc, #44]	; (800af4c <tcp_create_segment+0xd4>)
 800af20:	22a4      	movs	r2, #164	; 0xa4
 800af22:	490d      	ldr	r1, [pc, #52]	; (800af58 <tcp_create_segment+0xe0>)
 800af24:	480b      	ldr	r0, [pc, #44]	; (800af54 <tcp_create_segment+0xdc>)
 800af26:	f003 fa3b 	bl	800e3a0 <iprintf>
 800af2a:	e7b1      	b.n	800ae90 <tcp_create_segment+0x18>
    pbuf_free(p);
 800af2c:	4630      	mov	r0, r6
 800af2e:	f7fc fe99 	bl	8007c64 <pbuf_free>
    return NULL;
 800af32:	e7ea      	b.n	800af0a <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800af34:	4b05      	ldr	r3, [pc, #20]	; (800af4c <tcp_create_segment+0xd4>)
 800af36:	22b0      	movs	r2, #176	; 0xb0
 800af38:	4908      	ldr	r1, [pc, #32]	; (800af5c <tcp_create_segment+0xe4>)
 800af3a:	4806      	ldr	r0, [pc, #24]	; (800af54 <tcp_create_segment+0xdc>)
 800af3c:	f003 fa30 	bl	800e3a0 <iprintf>
 800af40:	e7ba      	b.n	800aeb8 <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800af42:	4620      	mov	r0, r4
 800af44:	f7fd fb4e 	bl	80085e4 <tcp_seg_free>
    return NULL;
 800af48:	2400      	movs	r4, #0
 800af4a:	e7de      	b.n	800af0a <tcp_create_segment+0x92>
 800af4c:	08011c58 	.word	0x08011c58
 800af50:	08011d48 	.word	0x08011d48
 800af54:	0800f6b8 	.word	0x0800f6b8
 800af58:	08011d68 	.word	0x08011d68
 800af5c:	08011d8c 	.word	0x08011d8c

0800af60 <tcp_output_alloc_header_common>:
{
 800af60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af64:	4607      	mov	r7, r0
 800af66:	460c      	mov	r4, r1
 800af68:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800af6a:	3214      	adds	r2, #20
 800af6c:	4411      	add	r1, r2
 800af6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800af72:	b289      	uxth	r1, r1
 800af74:	2022      	movs	r0, #34	; 0x22
 800af76:	f7fc fee5 	bl	8007d44 <pbuf_alloc>
  if (p != NULL) {
 800af7a:	4606      	mov	r6, r0
 800af7c:	b348      	cbz	r0, 800afd2 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800af7e:	f104 0313 	add.w	r3, r4, #19
 800af82:	8942      	ldrh	r2, [r0, #10]
 800af84:	4293      	cmp	r3, r2
 800af86:	da27      	bge.n	800afd8 <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800af88:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800af8a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800af8e:	f7fb ffd3 	bl	8006f38 <lwip_htons>
 800af92:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800af94:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800af98:	f7fb ffce 	bl	8006f38 <lwip_htons>
 800af9c:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800af9e:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800afa2:	4638      	mov	r0, r7
 800afa4:	f7fb ffcd 	bl	8006f42 <lwip_htonl>
 800afa8:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800afaa:	08a4      	lsrs	r4, r4, #2
 800afac:	3405      	adds	r4, #5
 800afae:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800afb2:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800afb6:	b2a0      	uxth	r0, r4
 800afb8:	f7fb ffbe 	bl	8006f38 <lwip_htons>
 800afbc:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800afbe:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800afc2:	f7fb ffb9 	bl	8006f38 <lwip_htons>
 800afc6:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800afc8:	2300      	movs	r3, #0
 800afca:	742b      	strb	r3, [r5, #16]
 800afcc:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800afce:	74ab      	strb	r3, [r5, #18]
 800afd0:	74eb      	strb	r3, [r5, #19]
}
 800afd2:	4630      	mov	r0, r6
 800afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800afd8:	4b03      	ldr	r3, [pc, #12]	; (800afe8 <tcp_output_alloc_header_common+0x88>)
 800afda:	f240 7223 	movw	r2, #1827	; 0x723
 800afde:	4903      	ldr	r1, [pc, #12]	; (800afec <tcp_output_alloc_header_common+0x8c>)
 800afe0:	4803      	ldr	r0, [pc, #12]	; (800aff0 <tcp_output_alloc_header_common+0x90>)
 800afe2:	f003 f9dd 	bl	800e3a0 <iprintf>
 800afe6:	e7cf      	b.n	800af88 <tcp_output_alloc_header_common+0x28>
 800afe8:	08011c58 	.word	0x08011c58
 800afec:	08011da4 	.word	0x08011da4
 800aff0:	0800f6b8 	.word	0x0800f6b8

0800aff4 <tcp_output_alloc_header>:
{
 800aff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aff6:	b085      	sub	sp, #20
 800aff8:	460d      	mov	r5, r1
 800affa:	4616      	mov	r6, r2
 800affc:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800affe:	4604      	mov	r4, r0
 800b000:	b1a0      	cbz	r0, 800b02c <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b002:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b004:	9303      	str	r3, [sp, #12]
 800b006:	2310      	movs	r3, #16
 800b008:	9302      	str	r3, [sp, #8]
 800b00a:	8b23      	ldrh	r3, [r4, #24]
 800b00c:	9301      	str	r3, [sp, #4]
 800b00e:	8ae3      	ldrh	r3, [r4, #22]
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	463b      	mov	r3, r7
 800b014:	4632      	mov	r2, r6
 800b016:	4629      	mov	r1, r5
 800b018:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b01a:	f7ff ffa1 	bl	800af60 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800b01e:	b118      	cbz	r0, 800b028 <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b020:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b022:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b024:	4413      	add	r3, r2
 800b026:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800b028:	b005      	add	sp, #20
 800b02a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b02c:	4b03      	ldr	r3, [pc, #12]	; (800b03c <tcp_output_alloc_header+0x48>)
 800b02e:	f240 7242 	movw	r2, #1858	; 0x742
 800b032:	4903      	ldr	r1, [pc, #12]	; (800b040 <tcp_output_alloc_header+0x4c>)
 800b034:	4803      	ldr	r0, [pc, #12]	; (800b044 <tcp_output_alloc_header+0x50>)
 800b036:	f003 f9b3 	bl	800e3a0 <iprintf>
 800b03a:	e7e2      	b.n	800b002 <tcp_output_alloc_header+0xe>
 800b03c:	08011c58 	.word	0x08011c58
 800b040:	08011dd4 	.word	0x08011dd4
 800b044:	0800f6b8 	.word	0x0800f6b8

0800b048 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b04a:	b085      	sub	sp, #20
 800b04c:	4604      	mov	r4, r0
 800b04e:	4616      	mov	r6, r2
 800b050:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b052:	460f      	mov	r7, r1
 800b054:	b1c9      	cbz	r1, 800b08a <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b056:	b374      	cbz	r4, 800b0b6 <tcp_output_control_segment+0x6e>
 800b058:	7a20      	ldrb	r0, [r4, #8]
 800b05a:	b9f0      	cbnz	r0, 800b09a <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800b05c:	4628      	mov	r0, r5
 800b05e:	f002 f873 	bl	800d148 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b062:	4602      	mov	r2, r0
 800b064:	b308      	cbz	r0, 800b0aa <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b066:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b068:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b06a:	9202      	str	r2, [sp, #8]
 800b06c:	2206      	movs	r2, #6
 800b06e:	9201      	str	r2, [sp, #4]
 800b070:	9100      	str	r1, [sp, #0]
 800b072:	462a      	mov	r2, r5
 800b074:	4631      	mov	r1, r6
 800b076:	4638      	mov	r0, r7
 800b078:	f002 f9f2 	bl	800d460 <ip4_output_if>
 800b07c:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b07e:	4638      	mov	r0, r7
 800b080:	f7fc fdf0 	bl	8007c64 <pbuf_free>
  return err;
}
 800b084:	4620      	mov	r0, r4
 800b086:	b005      	add	sp, #20
 800b088:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b08a:	4b0f      	ldr	r3, [pc, #60]	; (800b0c8 <tcp_output_control_segment+0x80>)
 800b08c:	f240 7287 	movw	r2, #1927	; 0x787
 800b090:	490e      	ldr	r1, [pc, #56]	; (800b0cc <tcp_output_control_segment+0x84>)
 800b092:	480f      	ldr	r0, [pc, #60]	; (800b0d0 <tcp_output_control_segment+0x88>)
 800b094:	f003 f984 	bl	800e3a0 <iprintf>
 800b098:	e7dd      	b.n	800b056 <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800b09a:	f7fc fcef 	bl	8007a7c <netif_get_by_index>
  if (netif == NULL) {
 800b09e:	4602      	mov	r2, r0
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d1e0      	bne.n	800b066 <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 800b0a4:	f06f 0403 	mvn.w	r4, #3
 800b0a8:	e7e9      	b.n	800b07e <tcp_output_control_segment+0x36>
 800b0aa:	f06f 0403 	mvn.w	r4, #3
 800b0ae:	e7e6      	b.n	800b07e <tcp_output_control_segment+0x36>
 800b0b0:	f06f 0403 	mvn.w	r4, #3
 800b0b4:	e7e3      	b.n	800b07e <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f002 f846 	bl	800d148 <ip4_route>
  if (netif == NULL) {
 800b0bc:	4602      	mov	r2, r0
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	d0f6      	beq.n	800b0b0 <tcp_output_control_segment+0x68>
      tos = 0;
 800b0c2:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800b0c4:	23ff      	movs	r3, #255	; 0xff
 800b0c6:	e7d0      	b.n	800b06a <tcp_output_control_segment+0x22>
 800b0c8:	08011c58 	.word	0x08011c58
 800b0cc:	08011dfc 	.word	0x08011dfc
 800b0d0:	0800f6b8 	.word	0x0800f6b8

0800b0d4 <tcp_write>:
{
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	b091      	sub	sp, #68	; 0x44
 800b0da:	9107      	str	r1, [sp, #28]
 800b0dc:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0e4:	b1c0      	cbz	r0, 800b118 <tcp_write+0x44>
 800b0e6:	4692      	mov	sl, r2
 800b0e8:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b0ea:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b0ec:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b0f0:	085b      	lsrs	r3, r3, #1
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	bf28      	it	cs
 800b0f6:	4613      	movcs	r3, r2
 800b0f8:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	bf08      	it	eq
 800b0fe:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b100:	9b07      	ldr	r3, [sp, #28]
 800b102:	b19b      	cbz	r3, 800b12c <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 800b104:	7d03      	ldrb	r3, [r0, #20]
 800b106:	2b07      	cmp	r3, #7
 800b108:	d01a      	beq.n	800b140 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800b10a:	3b02      	subs	r3, #2
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d916      	bls.n	800b140 <tcp_write+0x6c>
    return ERR_CONN;
 800b112:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800b116:	e203      	b.n	800b520 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b118:	4ba5      	ldr	r3, [pc, #660]	; (800b3b0 <tcp_write+0x2dc>)
 800b11a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800b11e:	49a5      	ldr	r1, [pc, #660]	; (800b3b4 <tcp_write+0x2e0>)
 800b120:	48a5      	ldr	r0, [pc, #660]	; (800b3b8 <tcp_write+0x2e4>)
 800b122:	f003 f93d 	bl	800e3a0 <iprintf>
 800b126:	f06f 000f 	mvn.w	r0, #15
 800b12a:	e1f9      	b.n	800b520 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b12c:	4ba0      	ldr	r3, [pc, #640]	; (800b3b0 <tcp_write+0x2dc>)
 800b12e:	f240 12ad 	movw	r2, #429	; 0x1ad
 800b132:	49a2      	ldr	r1, [pc, #648]	; (800b3bc <tcp_write+0x2e8>)
 800b134:	48a0      	ldr	r0, [pc, #640]	; (800b3b8 <tcp_write+0x2e4>)
 800b136:	f003 f933 	bl	800e3a0 <iprintf>
 800b13a:	f06f 000f 	mvn.w	r0, #15
 800b13e:	e1ef      	b.n	800b520 <tcp_write+0x44c>
  } else if (len == 0) {
 800b140:	f1ba 0f00 	cmp.w	sl, #0
 800b144:	d039      	beq.n	800b1ba <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 800b146:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800b14a:	4553      	cmp	r3, sl
 800b14c:	d310      	bcc.n	800b170 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800b14e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800b152:	2b08      	cmp	r3, #8
 800b154:	d815      	bhi.n	800b182 <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 800b156:	b32b      	cbz	r3, 800b1a4 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b158:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b15c:	bb6b      	cbnz	r3, 800b1ba <tcp_write+0xe6>
 800b15e:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b162:	b1bb      	cbz	r3, 800b194 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 800b164:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b168:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800b16c:	464b      	mov	r3, r9
 800b16e:	e02c      	b.n	800b1ca <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b170:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b178:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800b17c:	f04f 30ff 	mov.w	r0, #4294967295
 800b180:	e1ce      	b.n	800b520 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b182:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b18a:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800b18e:	f04f 30ff 	mov.w	r0, #4294967295
 800b192:	e1c5      	b.n	800b520 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800b194:	4b86      	ldr	r3, [pc, #536]	; (800b3b0 <tcp_write+0x2dc>)
 800b196:	f240 1255 	movw	r2, #341	; 0x155
 800b19a:	4989      	ldr	r1, [pc, #548]	; (800b3c0 <tcp_write+0x2ec>)
 800b19c:	4886      	ldr	r0, [pc, #536]	; (800b3b8 <tcp_write+0x2e4>)
 800b19e:	f003 f8ff 	bl	800e3a0 <iprintf>
 800b1a2:	e00a      	b.n	800b1ba <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b1a4:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d04f      	beq.n	800b24c <tcp_write+0x178>
 800b1ac:	4b80      	ldr	r3, [pc, #512]	; (800b3b0 <tcp_write+0x2dc>)
 800b1ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800b1b2:	4984      	ldr	r1, [pc, #528]	; (800b3c4 <tcp_write+0x2f0>)
 800b1b4:	4880      	ldr	r0, [pc, #512]	; (800b3b8 <tcp_write+0x2e4>)
 800b1b6:	f003 f8f3 	bl	800e3a0 <iprintf>
  queuelen = pcb->snd_queuelen;
 800b1ba:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800b1be:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800b1c2:	f1b9 0f00 	cmp.w	r9, #0
 800b1c6:	d047      	beq.n	800b258 <tcp_write+0x184>
 800b1c8:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d1fb      	bne.n	800b1ca <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800b1d2:	4699      	mov	r9, r3
 800b1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d6:	7a9c      	ldrb	r4, [r3, #10]
 800b1d8:	00a4      	lsls	r4, r4, #2
 800b1da:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b1de:	891b      	ldrh	r3, [r3, #8]
 800b1e0:	4423      	add	r3, r4
 800b1e2:	459b      	cmp	fp, r3
 800b1e4:	db4f      	blt.n	800b286 <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800b1e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e8:	891b      	ldrh	r3, [r3, #8]
 800b1ea:	ebab 0303 	sub.w	r3, fp, r3
 800b1ee:	1b1c      	subs	r4, r3, r4
 800b1f0:	b2a3      	uxth	r3, r4
 800b1f2:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800b1f4:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800b1f8:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800b1fc:	2c00      	cmp	r4, #0
 800b1fe:	d05b      	beq.n	800b2b8 <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b200:	429c      	cmp	r4, r3
 800b202:	d848      	bhi.n	800b296 <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800b204:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b208:	461c      	mov	r4, r3
 800b20a:	4553      	cmp	r3, sl
 800b20c:	bf28      	it	cs
 800b20e:	4654      	movcs	r4, sl
 800b210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b212:	4294      	cmp	r4, r2
 800b214:	bf28      	it	cs
 800b216:	4614      	movcs	r4, r2
 800b218:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800b21a:	1b1b      	subs	r3, r3, r4
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800b222:	1b12      	subs	r2, r2, r4
 800b224:	b292      	uxth	r2, r2
 800b226:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8082 	beq.w	800b332 <tcp_write+0x25e>
 800b22e:	45a2      	cmp	sl, r4
 800b230:	d139      	bne.n	800b2a6 <tcp_write+0x1d2>
 800b232:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 800b234:	2c00      	cmp	r4, #0
 800b236:	f000 8266 	beq.w	800b706 <tcp_write+0x632>
 800b23a:	46cb      	mov	fp, r9
 800b23c:	2300      	movs	r3, #0
 800b23e:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 800b240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b242:	685d      	ldr	r5, [r3, #4]
 800b244:	2d00      	cmp	r5, #0
 800b246:	f040 8187 	bne.w	800b558 <tcp_write+0x484>
 800b24a:	e198      	b.n	800b57e <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800b24c:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1ab      	bne.n	800b1ac <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 800b254:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b258:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800b25c:	2c00      	cmp	r4, #0
 800b25e:	f040 8094 	bne.w	800b38a <tcp_write+0x2b6>
  u16_t extendlen = 0;
 800b262:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b264:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b266:	2300      	movs	r3, #0
 800b268:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800b26a:	4699      	mov	r9, r3
  while (pos < len) {
 800b26c:	45a2      	cmp	sl, r4
 800b26e:	f240 816e 	bls.w	800b54e <tcp_write+0x47a>
 800b272:	2300      	movs	r3, #0
 800b274:	9306      	str	r3, [sp, #24]
 800b276:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	9308      	str	r3, [sp, #32]
 800b280:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b284:	e110      	b.n	800b4a8 <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800b286:	4b4a      	ldr	r3, [pc, #296]	; (800b3b0 <tcp_write+0x2dc>)
 800b288:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b28c:	494e      	ldr	r1, [pc, #312]	; (800b3c8 <tcp_write+0x2f4>)
 800b28e:	484a      	ldr	r0, [pc, #296]	; (800b3b8 <tcp_write+0x2e4>)
 800b290:	f003 f886 	bl	800e3a0 <iprintf>
 800b294:	e7a7      	b.n	800b1e6 <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800b296:	4b46      	ldr	r3, [pc, #280]	; (800b3b0 <tcp_write+0x2dc>)
 800b298:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800b29c:	494b      	ldr	r1, [pc, #300]	; (800b3cc <tcp_write+0x2f8>)
 800b29e:	4846      	ldr	r0, [pc, #280]	; (800b3b8 <tcp_write+0x2e4>)
 800b2a0:	f003 f87e 	bl	800e3a0 <iprintf>
 800b2a4:	e7ae      	b.n	800b204 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800b2a6:	4b42      	ldr	r3, [pc, #264]	; (800b3b0 <tcp_write+0x2dc>)
 800b2a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2ac:	4948      	ldr	r1, [pc, #288]	; (800b3d0 <tcp_write+0x2fc>)
 800b2ae:	4842      	ldr	r0, [pc, #264]	; (800b3b8 <tcp_write+0x2e4>)
 800b2b0:	f003 f876 	bl	800e3a0 <iprintf>
 800b2b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b2b6:	e000      	b.n	800b2ba <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b2b8:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800b2ba:	45a2      	cmp	sl, r4
 800b2bc:	d9ba      	bls.n	800b234 <tcp_write+0x160>
 800b2be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2c0:	2a00      	cmp	r2, #0
 800b2c2:	d070      	beq.n	800b3a6 <tcp_write+0x2d2>
 800b2c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c6:	891b      	ldrh	r3, [r3, #8]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d06e      	beq.n	800b3aa <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800b2cc:	ebaa 0704 	sub.w	r7, sl, r4
 800b2d0:	4297      	cmp	r7, r2
 800b2d2:	bfa8      	it	ge
 800b2d4:	4617      	movge	r7, r2
 800b2d6:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2da:	f013 0f01 	tst.w	r3, #1
 800b2de:	d12a      	bne.n	800b336 <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800b2e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800b2e6:	464a      	mov	r2, r9
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	2a00      	cmp	r2, #0
 800b2ee:	d1fb      	bne.n	800b2e8 <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b2f0:	4691      	mov	r9, r2
 800b2f2:	7b1a      	ldrb	r2, [r3, #12]
 800b2f4:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800b2f8:	d105      	bne.n	800b306 <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800b2fa:	895a      	ldrh	r2, [r3, #10]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800b300:	9a07      	ldr	r2, [sp, #28]
 800b302:	429a      	cmp	r2, r3
 800b304:	d035      	beq.n	800b372 <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800b306:	2201      	movs	r2, #1
 800b308:	4629      	mov	r1, r5
 800b30a:	2000      	movs	r0, #0
 800b30c:	f7fc fd1a 	bl	8007d44 <pbuf_alloc>
 800b310:	4681      	mov	r9, r0
 800b312:	2800      	cmp	r0, #0
 800b314:	f000 81d6 	beq.w	800b6c4 <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b318:	9b07      	ldr	r3, [sp, #28]
 800b31a:	4423      	add	r3, r4
 800b31c:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800b31e:	f7fc fe19 	bl	8007f54 <pbuf_clen>
 800b322:	4406      	add	r6, r0
 800b324:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b326:	2300      	movs	r3, #0
 800b328:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800b32a:	4425      	add	r5, r4
 800b32c:	940d      	str	r4, [sp, #52]	; 0x34
 800b32e:	b2ac      	uxth	r4, r5
 800b330:	e79c      	b.n	800b26c <tcp_write+0x198>
 800b332:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b334:	e7c1      	b.n	800b2ba <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800b336:	2301      	movs	r3, #1
 800b338:	9302      	str	r3, [sp, #8]
 800b33a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	f8cd 8000 	str.w	r8, [sp]
 800b342:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b346:	4629      	mov	r1, r5
 800b348:	2000      	movs	r0, #0
 800b34a:	f7ff fd39 	bl	800adc0 <tcp_pbuf_prealloc>
 800b34e:	4681      	mov	r9, r0
 800b350:	2800      	cmp	r0, #0
 800b352:	f000 81b7 	beq.w	800b6c4 <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800b356:	462a      	mov	r2, r5
 800b358:	9b07      	ldr	r3, [sp, #28]
 800b35a:	1919      	adds	r1, r3, r4
 800b35c:	6840      	ldr	r0, [r0, #4]
 800b35e:	f002 ff5a 	bl	800e216 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800b362:	4648      	mov	r0, r9
 800b364:	f7fc fdf6 	bl	8007f54 <pbuf_clen>
 800b368:	4406      	add	r6, r0
 800b36a:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b370:	e7db      	b.n	800b32a <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b372:	b90c      	cbnz	r4, 800b378 <tcp_write+0x2a4>
          extendlen = seglen;
 800b374:	950b      	str	r5, [sp, #44]	; 0x2c
 800b376:	e7d8      	b.n	800b32a <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800b378:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <tcp_write+0x2dc>)
 800b37a:	f240 2231 	movw	r2, #561	; 0x231
 800b37e:	4915      	ldr	r1, [pc, #84]	; (800b3d4 <tcp_write+0x300>)
 800b380:	480d      	ldr	r0, [pc, #52]	; (800b3b8 <tcp_write+0x2e4>)
 800b382:	f003 f80d 	bl	800e3a0 <iprintf>
          extendlen = seglen;
 800b386:	950b      	str	r5, [sp, #44]	; 0x2c
 800b388:	e7cf      	b.n	800b32a <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800b38a:	4b09      	ldr	r3, [pc, #36]	; (800b3b0 <tcp_write+0x2dc>)
 800b38c:	f240 224a 	movw	r2, #586	; 0x24a
 800b390:	4911      	ldr	r1, [pc, #68]	; (800b3d8 <tcp_write+0x304>)
 800b392:	4809      	ldr	r0, [pc, #36]	; (800b3b8 <tcp_write+0x2e4>)
 800b394:	f003 f804 	bl	800e3a0 <iprintf>
  u16_t extendlen = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800b39c:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800b39e:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b3a0:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800b3a2:	4699      	mov	r9, r3
 800b3a4:	e762      	b.n	800b26c <tcp_write+0x198>
 800b3a6:	940d      	str	r4, [sp, #52]	; 0x34
 800b3a8:	e763      	b.n	800b272 <tcp_write+0x19e>
 800b3aa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3ac:	940d      	str	r4, [sp, #52]	; 0x34
 800b3ae:	e760      	b.n	800b272 <tcp_write+0x19e>
 800b3b0:	08011c58 	.word	0x08011c58
 800b3b4:	08011e28 	.word	0x08011e28
 800b3b8:	0800f6b8 	.word	0x0800f6b8
 800b3bc:	08011e40 	.word	0x08011e40
 800b3c0:	08011e74 	.word	0x08011e74
 800b3c4:	08011eb0 	.word	0x08011eb0
 800b3c8:	08011ee4 	.word	0x08011ee4
 800b3cc:	08011efc 	.word	0x08011efc
 800b3d0:	08011f1c 	.word	0x08011f1c
 800b3d4:	08011f3c 	.word	0x08011f3c
 800b3d8:	08011f68 	.word	0x08011f68
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b3dc:	9b06      	ldr	r3, [sp, #24]
 800b3de:	fab3 f383 	clz	r3, r3
 800b3e2:	095b      	lsrs	r3, r3, #5
 800b3e4:	9302      	str	r3, [sp, #8]
 800b3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	f8cd 8000 	str.w	r8, [sp]
 800b3ee:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800b3f2:	465a      	mov	r2, fp
 800b3f4:	4629      	mov	r1, r5
 800b3f6:	2036      	movs	r0, #54	; 0x36
 800b3f8:	f7ff fce2 	bl	800adc0 <tcp_pbuf_prealloc>
 800b3fc:	4607      	mov	r7, r0
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f000 8143 	beq.w	800b68a <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b404:	8943      	ldrh	r3, [r0, #10]
 800b406:	42ab      	cmp	r3, r5
 800b408:	d306      	bcc.n	800b418 <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b40a:	462a      	mov	r2, r5
 800b40c:	9b07      	ldr	r3, [sp, #28]
 800b40e:	1919      	adds	r1, r3, r4
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f002 ff00 	bl	800e216 <memcpy>
 800b416:	e026      	b.n	800b466 <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b418:	4bae      	ldr	r3, [pc, #696]	; (800b6d4 <tcp_write+0x600>)
 800b41a:	f240 2266 	movw	r2, #614	; 0x266
 800b41e:	49ae      	ldr	r1, [pc, #696]	; (800b6d8 <tcp_write+0x604>)
 800b420:	48ae      	ldr	r0, [pc, #696]	; (800b6dc <tcp_write+0x608>)
 800b422:	f002 ffbd 	bl	800e3a0 <iprintf>
 800b426:	e7f0      	b.n	800b40a <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b428:	4baa      	ldr	r3, [pc, #680]	; (800b6d4 <tcp_write+0x600>)
 800b42a:	f240 2271 	movw	r2, #625	; 0x271
 800b42e:	49ac      	ldr	r1, [pc, #688]	; (800b6e0 <tcp_write+0x60c>)
 800b430:	48aa      	ldr	r0, [pc, #680]	; (800b6dc <tcp_write+0x608>)
 800b432:	f002 ffb5 	bl	800e3a0 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b436:	2201      	movs	r2, #1
 800b438:	4629      	mov	r1, r5
 800b43a:	2036      	movs	r0, #54	; 0x36
 800b43c:	f7fc fc82 	bl	8007d44 <pbuf_alloc>
 800b440:	4681      	mov	r9, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	f000 8124 	beq.w	800b690 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b448:	9b07      	ldr	r3, [sp, #28]
 800b44a:	4423      	add	r3, r4
 800b44c:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b44e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b452:	2100      	movs	r1, #0
 800b454:	2036      	movs	r0, #54	; 0x36
 800b456:	f7fc fc75 	bl	8007d44 <pbuf_alloc>
 800b45a:	4607      	mov	r7, r0
 800b45c:	2800      	cmp	r0, #0
 800b45e:	d032      	beq.n	800b4c6 <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b460:	4649      	mov	r1, r9
 800b462:	f7fc fd9f 	bl	8007fa4 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800b466:	4638      	mov	r0, r7
 800b468:	f7fc fd74 	bl	8007f54 <pbuf_clen>
 800b46c:	4406      	add	r6, r0
 800b46e:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b470:	2e09      	cmp	r6, #9
 800b472:	d82e      	bhi.n	800b4d2 <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b474:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800b478:	2200      	movs	r2, #0
 800b47a:	9200      	str	r2, [sp, #0]
 800b47c:	4423      	add	r3, r4
 800b47e:	4639      	mov	r1, r7
 800b480:	4640      	mov	r0, r8
 800b482:	f7ff fcf9 	bl	800ae78 <tcp_create_segment>
 800b486:	4607      	mov	r7, r0
 800b488:	2800      	cmp	r0, #0
 800b48a:	f000 8104 	beq.w	800b696 <tcp_write+0x5c2>
    if (queue == NULL) {
 800b48e:	9b06      	ldr	r3, [sp, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d050      	beq.n	800b536 <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b494:	9b05      	ldr	r3, [sp, #20]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d045      	beq.n	800b526 <tcp_write+0x452>
      prev_seg->next = seg;
 800b49a:	9b05      	ldr	r3, [sp, #20]
 800b49c:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800b49e:	442c      	add	r4, r5
 800b4a0:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800b4a2:	45a2      	cmp	sl, r4
 800b4a4:	d949      	bls.n	800b53a <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b4a6:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800b4a8:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800b4ac:	b2ad      	uxth	r5, r5
 800b4ae:	455d      	cmp	r5, fp
 800b4b0:	bf28      	it	cs
 800b4b2:	465d      	movcs	r5, fp
 800b4b4:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b4b6:	9b08      	ldr	r3, [sp, #32]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d18f      	bne.n	800b3dc <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b4bc:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d0b8      	beq.n	800b436 <tcp_write+0x362>
 800b4c4:	e7b0      	b.n	800b428 <tcp_write+0x354>
        pbuf_free(p2);
 800b4c6:	4648      	mov	r0, r9
 800b4c8:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b4cc:	f7fc fbca 	bl	8007c64 <pbuf_free>
        goto memerr;
 800b4d0:	e004      	b.n	800b4dc <tcp_write+0x408>
      pbuf_free(p);
 800b4d2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b4d6:	4638      	mov	r0, r7
 800b4d8:	f7fc fbc4 	bl	8007c64 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4dc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b4e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e4:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800b4e8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ec:	d002      	beq.n	800b4f4 <tcp_write+0x420>
    pbuf_free(concat_p);
 800b4ee:	4648      	mov	r0, r9
 800b4f0:	f7fc fbb8 	bl	8007c64 <pbuf_free>
  if (queue != NULL) {
 800b4f4:	9b06      	ldr	r3, [sp, #24]
 800b4f6:	b113      	cbz	r3, 800b4fe <tcp_write+0x42a>
    tcp_segs_free(queue);
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7fd f880 	bl	80085fe <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b4fe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800b502:	2b00      	cmp	r3, #0
 800b504:	f000 80d8 	beq.w	800b6b8 <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b508:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f040 80d6 	bne.w	800b6be <tcp_write+0x5ea>
 800b512:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 80c0 	beq.w	800b69c <tcp_write+0x5c8>
  return ERR_MEM;
 800b51c:	f04f 30ff 	mov.w	r0, #4294967295
}
 800b520:	b011      	add	sp, #68	; 0x44
 800b522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b526:	4b6b      	ldr	r3, [pc, #428]	; (800b6d4 <tcp_write+0x600>)
 800b528:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b52c:	496d      	ldr	r1, [pc, #436]	; (800b6e4 <tcp_write+0x610>)
 800b52e:	486b      	ldr	r0, [pc, #428]	; (800b6dc <tcp_write+0x608>)
 800b530:	f002 ff36 	bl	800e3a0 <iprintf>
 800b534:	e7b1      	b.n	800b49a <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b536:	9006      	str	r0, [sp, #24]
 800b538:	e7b1      	b.n	800b49e <tcp_write+0x3ca>
 800b53a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 800b53e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b540:	2b00      	cmp	r3, #0
 800b542:	d052      	beq.n	800b5ea <tcp_write+0x516>
 800b544:	461c      	mov	r4, r3
 800b546:	46cb      	mov	fp, r9
 800b548:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b54c:	e678      	b.n	800b240 <tcp_write+0x16c>
  while (pos < len) {
 800b54e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b550:	2300      	movs	r3, #0
 800b552:	9306      	str	r3, [sp, #24]
 800b554:	e7f3      	b.n	800b53e <tcp_write+0x46a>
  if (oversize_used > 0) {
 800b556:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 800b558:	892b      	ldrh	r3, [r5, #8]
 800b55a:	4423      	add	r3, r4
 800b55c:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 800b55e:	682b      	ldr	r3, [r5, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f8      	bne.n	800b556 <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b564:	896b      	ldrh	r3, [r5, #10]
 800b566:	6868      	ldr	r0, [r5, #4]
 800b568:	4622      	mov	r2, r4
 800b56a:	9907      	ldr	r1, [sp, #28]
 800b56c:	4418      	add	r0, r3
 800b56e:	f002 fe52 	bl	800e216 <memcpy>
        p->len += oversize_used;
 800b572:	896b      	ldrh	r3, [r5, #10]
 800b574:	4423      	add	r3, r4
 800b576:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d1eb      	bne.n	800b556 <tcp_write+0x482>
    last_unsent->len += oversize_used;
 800b57e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b580:	8913      	ldrh	r3, [r2, #8]
 800b582:	441c      	add	r4, r3
 800b584:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 800b586:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b58a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800b58e:	f1bb 0f00 	cmp.w	fp, #0
 800b592:	f000 80af 	beq.w	800b6f4 <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 800b596:	4659      	mov	r1, fp
 800b598:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800b59a:	6860      	ldr	r0, [r4, #4]
 800b59c:	f7fc fd02 	bl	8007fa4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b5a0:	8923      	ldrh	r3, [r4, #8]
 800b5a2:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800b5aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ac:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 800b5b0:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800b5b4:	4453      	add	r3, sl
 800b5b6:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b5ba:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800b5be:	eba3 0a0a 	sub.w	sl, r3, sl
 800b5c2:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b5c6:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b5ca:	b11e      	cbz	r6, 800b5d4 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b5cc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d045      	beq.n	800b660 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b5d4:	2f00      	cmp	r7, #0
 800b5d6:	d06b      	beq.n	800b6b0 <tcp_write+0x5dc>
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d06a      	beq.n	800b6b4 <tcp_write+0x5e0>
 800b5de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5e0:	f012 0f02 	tst.w	r2, #2
 800b5e4:	d048      	beq.n	800b678 <tcp_write+0x5a4>
  return ERR_OK;
 800b5e6:	2000      	movs	r0, #0
 800b5e8:	e79a      	b.n	800b520 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 800b5ea:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b5ee:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800b5f2:	f1b9 0f00 	cmp.w	r9, #0
 800b5f6:	d010      	beq.n	800b61a <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b5f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5fa:	b11b      	cbz	r3, 800b604 <tcp_write+0x530>
 800b5fc:	46cb      	mov	fp, r9
 800b5fe:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b602:	e7c8      	b.n	800b596 <tcp_write+0x4c2>
 800b604:	4b33      	ldr	r3, [pc, #204]	; (800b6d4 <tcp_write+0x600>)
 800b606:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b60a:	4937      	ldr	r1, [pc, #220]	; (800b6e8 <tcp_write+0x614>)
 800b60c:	4833      	ldr	r0, [pc, #204]	; (800b6dc <tcp_write+0x608>)
 800b60e:	f002 fec7 	bl	800e3a0 <iprintf>
 800b612:	46cb      	mov	fp, r9
 800b614:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b618:	e7bd      	b.n	800b596 <tcp_write+0x4c2>
 800b61a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b61c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800b620:	e075      	b.n	800b70e <tcp_write+0x63a>
 800b622:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b624:	4b2b      	ldr	r3, [pc, #172]	; (800b6d4 <tcp_write+0x600>)
 800b626:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b62a:	4930      	ldr	r1, [pc, #192]	; (800b6ec <tcp_write+0x618>)
 800b62c:	482b      	ldr	r0, [pc, #172]	; (800b6dc <tcp_write+0x608>)
 800b62e:	f002 feb7 	bl	800e3a0 <iprintf>
 800b632:	e076      	b.n	800b722 <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b634:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800b636:	890b      	ldrh	r3, [r1, #8]
 800b638:	4403      	add	r3, r0
 800b63a:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b63c:	6813      	ldr	r3, [r2, #0]
 800b63e:	4611      	mov	r1, r2
 800b640:	2b00      	cmp	r3, #0
 800b642:	d1f7      	bne.n	800b634 <tcp_write+0x560>
    p->tot_len += extendlen;
 800b644:	8913      	ldrh	r3, [r2, #8]
 800b646:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b648:	440b      	add	r3, r1
 800b64a:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800b64c:	8953      	ldrh	r3, [r2, #10]
 800b64e:	440b      	add	r3, r1
 800b650:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800b652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b654:	8913      	ldrh	r3, [r2, #8]
 800b656:	440b      	add	r3, r1
 800b658:	8113      	strh	r3, [r2, #8]
 800b65a:	e7a6      	b.n	800b5aa <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b65c:	460a      	mov	r2, r1
 800b65e:	e7f1      	b.n	800b644 <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b660:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d1b5      	bne.n	800b5d4 <tcp_write+0x500>
 800b668:	4b1a      	ldr	r3, [pc, #104]	; (800b6d4 <tcp_write+0x600>)
 800b66a:	f240 3212 	movw	r2, #786	; 0x312
 800b66e:	4920      	ldr	r1, [pc, #128]	; (800b6f0 <tcp_write+0x61c>)
 800b670:	481a      	ldr	r0, [pc, #104]	; (800b6dc <tcp_write+0x608>)
 800b672:	f002 fe95 	bl	800e3a0 <iprintf>
 800b676:	e7ad      	b.n	800b5d4 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b678:	899c      	ldrh	r4, [r3, #12]
 800b67a:	2008      	movs	r0, #8
 800b67c:	f7fb fc5c 	bl	8006f38 <lwip_htons>
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	4304      	orrs	r4, r0
 800b684:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800b686:	2000      	movs	r0, #0
 800b688:	e74a      	b.n	800b520 <tcp_write+0x44c>
 800b68a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b68e:	e725      	b.n	800b4dc <tcp_write+0x408>
 800b690:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b694:	e722      	b.n	800b4dc <tcp_write+0x408>
 800b696:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800b69a:	e71f      	b.n	800b4dc <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b69c:	4b0d      	ldr	r3, [pc, #52]	; (800b6d4 <tcp_write+0x600>)
 800b69e:	f240 3227 	movw	r2, #807	; 0x327
 800b6a2:	4913      	ldr	r1, [pc, #76]	; (800b6f0 <tcp_write+0x61c>)
 800b6a4:	480d      	ldr	r0, [pc, #52]	; (800b6dc <tcp_write+0x608>)
 800b6a6:	f002 fe7b 	bl	800e3a0 <iprintf>
  return ERR_MEM;
 800b6aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ae:	e737      	b.n	800b520 <tcp_write+0x44c>
  return ERR_OK;
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	e735      	b.n	800b520 <tcp_write+0x44c>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	e733      	b.n	800b520 <tcp_write+0x44c>
  return ERR_MEM;
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e730      	b.n	800b520 <tcp_write+0x44c>
 800b6be:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c2:	e72d      	b.n	800b520 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b6c4:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800b6c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6cc:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800b6d0:	e715      	b.n	800b4fe <tcp_write+0x42a>
 800b6d2:	bf00      	nop
 800b6d4:	08011c58 	.word	0x08011c58
 800b6d8:	08011f98 	.word	0x08011f98
 800b6dc:	0800f6b8 	.word	0x0800f6b8
 800b6e0:	08011fd8 	.word	0x08011fd8
 800b6e4:	08011fe8 	.word	0x08011fe8
 800b6e8:	08011ffc 	.word	0x08011ffc
 800b6ec:	08012034 	.word	0x08012034
 800b6f0:	0801206c 	.word	0x0801206c
  } else if (extendlen > 0) {
 800b6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6f6:	b983      	cbnz	r3, 800b71a <tcp_write+0x646>
  if (last_unsent == NULL) {
 800b6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f47f af55 	bne.w	800b5aa <tcp_write+0x4d6>
    pcb->unsent = queue;
 800b700:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 800b704:	e754      	b.n	800b5b0 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 800b706:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800b70a:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 800b70e:	2c00      	cmp	r4, #0
 800b710:	d0f2      	beq.n	800b6f8 <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b714:	2b00      	cmp	r3, #0
 800b716:	d084      	beq.n	800b622 <tcp_write+0x54e>
 800b718:	940b      	str	r4, [sp, #44]	; 0x2c
 800b71a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d080      	beq.n	800b624 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b724:	6859      	ldr	r1, [r3, #4]
 800b726:	680a      	ldr	r2, [r1, #0]
 800b728:	2a00      	cmp	r2, #0
 800b72a:	d097      	beq.n	800b65c <tcp_write+0x588>
 800b72c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b72e:	e782      	b.n	800b636 <tcp_write+0x562>

0800b730 <tcp_split_unsent_seg>:
{
 800b730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b734:	b083      	sub	sp, #12
 800b736:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b738:	4607      	mov	r7, r0
 800b73a:	2800      	cmp	r0, #0
 800b73c:	d037      	beq.n	800b7ae <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 800b73e:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 800b740:	2d00      	cmp	r5, #0
 800b742:	f000 80b7 	beq.w	800b8b4 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 800b746:	2c00      	cmp	r4, #0
 800b748:	d039      	beq.n	800b7be <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 800b74a:	892b      	ldrh	r3, [r5, #8]
 800b74c:	42a3      	cmp	r3, r4
 800b74e:	f240 80b4 	bls.w	800b8ba <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b752:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b754:	42a3      	cmp	r3, r4
 800b756:	d33c      	bcc.n	800b7d2 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 800b758:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b75c:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800b760:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800b764:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800b768:	ebaa 0604 	sub.w	r6, sl, r4
 800b76c:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b76e:	eb06 010b 	add.w	r1, r6, fp
 800b772:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b776:	b289      	uxth	r1, r1
 800b778:	2036      	movs	r0, #54	; 0x36
 800b77a:	f7fc fae3 	bl	8007d44 <pbuf_alloc>
  if (p == NULL) {
 800b77e:	4680      	mov	r8, r0
 800b780:	2800      	cmp	r0, #0
 800b782:	f000 809e 	beq.w	800b8c2 <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 800b786:	6868      	ldr	r0, [r5, #4]
 800b788:	8903      	ldrh	r3, [r0, #8]
 800b78a:	892a      	ldrh	r2, [r5, #8]
 800b78c:	1a9b      	subs	r3, r3, r2
 800b78e:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b790:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b794:	b29b      	uxth	r3, r3
 800b796:	4632      	mov	r2, r6
 800b798:	4459      	add	r1, fp
 800b79a:	f7fc fce3 	bl	8008164 <pbuf_copy_partial>
 800b79e:	42b0      	cmp	r0, r6
 800b7a0:	d029      	beq.n	800b7f6 <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 800b7a2:	4640      	mov	r0, r8
 800b7a4:	f7fc fa5e 	bl	8007c64 <pbuf_free>
  return ERR_MEM;
 800b7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ac:	e086      	b.n	800b8bc <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b7ae:	4b46      	ldr	r3, [pc, #280]	; (800b8c8 <tcp_split_unsent_seg+0x198>)
 800b7b0:	f240 324b 	movw	r2, #843	; 0x34b
 800b7b4:	4945      	ldr	r1, [pc, #276]	; (800b8cc <tcp_split_unsent_seg+0x19c>)
 800b7b6:	4846      	ldr	r0, [pc, #280]	; (800b8d0 <tcp_split_unsent_seg+0x1a0>)
 800b7b8:	f002 fdf2 	bl	800e3a0 <iprintf>
 800b7bc:	e7bf      	b.n	800b73e <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b7be:	4b42      	ldr	r3, [pc, #264]	; (800b8c8 <tcp_split_unsent_seg+0x198>)
 800b7c0:	f240 3253 	movw	r2, #851	; 0x353
 800b7c4:	4943      	ldr	r1, [pc, #268]	; (800b8d4 <tcp_split_unsent_seg+0x1a4>)
 800b7c6:	4842      	ldr	r0, [pc, #264]	; (800b8d0 <tcp_split_unsent_seg+0x1a0>)
 800b7c8:	f002 fdea 	bl	800e3a0 <iprintf>
    return ERR_VAL;
 800b7cc:	f06f 0005 	mvn.w	r0, #5
 800b7d0:	e074      	b.n	800b8bc <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b7d2:	4b3d      	ldr	r3, [pc, #244]	; (800b8c8 <tcp_split_unsent_seg+0x198>)
 800b7d4:	f240 325b 	movw	r2, #859	; 0x35b
 800b7d8:	493f      	ldr	r1, [pc, #252]	; (800b8d8 <tcp_split_unsent_seg+0x1a8>)
 800b7da:	483d      	ldr	r0, [pc, #244]	; (800b8d0 <tcp_split_unsent_seg+0x1a0>)
 800b7dc:	f002 fde0 	bl	800e3a0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b7e0:	892b      	ldrh	r3, [r5, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1b8      	bne.n	800b758 <tcp_split_unsent_seg+0x28>
 800b7e6:	4b38      	ldr	r3, [pc, #224]	; (800b8c8 <tcp_split_unsent_seg+0x198>)
 800b7e8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b7ec:	493b      	ldr	r1, [pc, #236]	; (800b8dc <tcp_split_unsent_seg+0x1ac>)
 800b7ee:	4838      	ldr	r0, [pc, #224]	; (800b8d0 <tcp_split_unsent_seg+0x1a0>)
 800b7f0:	f002 fdd6 	bl	800e3a0 <iprintf>
 800b7f4:	e7b0      	b.n	800b758 <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b7f6:	68eb      	ldr	r3, [r5, #12]
 800b7f8:	8998      	ldrh	r0, [r3, #12]
 800b7fa:	f7fb fb9d 	bl	8006f38 <lwip_htons>
 800b7fe:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800b800:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b804:	bf0e      	itee	eq
 800b806:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800b80a:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800b80e:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 800b812:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 800b816:	bf1c      	itt	ne
 800b818:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800b81c:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b820:	68eb      	ldr	r3, [r5, #12]
 800b822:	6858      	ldr	r0, [r3, #4]
 800b824:	f7fb fb8d 	bl	8006f42 <lwip_htonl>
 800b828:	f8cd 9000 	str.w	r9, [sp]
 800b82c:	1823      	adds	r3, r4, r0
 800b82e:	465a      	mov	r2, fp
 800b830:	4641      	mov	r1, r8
 800b832:	4638      	mov	r0, r7
 800b834:	f7ff fb20 	bl	800ae78 <tcp_create_segment>
  if (seg == NULL) {
 800b838:	4681      	mov	r9, r0
 800b83a:	2800      	cmp	r0, #0
 800b83c:	d0b1      	beq.n	800b7a2 <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b83e:	6868      	ldr	r0, [r5, #4]
 800b840:	f7fc fb88 	bl	8007f54 <pbuf_clen>
 800b844:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b848:	1a1b      	subs	r3, r3, r0
 800b84a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b84e:	6868      	ldr	r0, [r5, #4]
 800b850:	eba4 040a 	sub.w	r4, r4, sl
 800b854:	b2a4      	uxth	r4, r4
 800b856:	8901      	ldrh	r1, [r0, #8]
 800b858:	4421      	add	r1, r4
 800b85a:	b289      	uxth	r1, r1
 800b85c:	f7fc fb1a 	bl	8007e94 <pbuf_realloc>
  useg->len -= remainder;
 800b860:	892b      	ldrh	r3, [r5, #8]
 800b862:	441c      	add	r4, r3
 800b864:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b866:	68eb      	ldr	r3, [r5, #12]
 800b868:	899c      	ldrh	r4, [r3, #12]
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7fb fb64 	bl	8006f38 <lwip_htons>
 800b870:	68eb      	ldr	r3, [r5, #12]
 800b872:	4304      	orrs	r4, r0
 800b874:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b876:	6868      	ldr	r0, [r5, #4]
 800b878:	f7fc fb6c 	bl	8007f54 <pbuf_clen>
 800b87c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b880:	4418      	add	r0, r3
 800b882:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b886:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b88a:	f7fc fb63 	bl	8007f54 <pbuf_clen>
 800b88e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b892:	4418      	add	r0, r3
 800b894:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800b89e:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800b8a2:	f8d9 3000 	ldr.w	r3, [r9]
 800b8a6:	b10b      	cbz	r3, 800b8ac <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 800b8a8:	2000      	movs	r0, #0
 800b8aa:	e007      	b.n	800b8bc <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 800b8b2:	e003      	b.n	800b8bc <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 800b8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b8:	e000      	b.n	800b8bc <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 800b8ba:	2000      	movs	r0, #0
}
 800b8bc:	b003      	add	sp, #12
 800b8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800b8c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c6:	e7f9      	b.n	800b8bc <tcp_split_unsent_seg+0x18c>
 800b8c8:	08011c58 	.word	0x08011c58
 800b8cc:	0801208c 	.word	0x0801208c
 800b8d0:	0800f6b8 	.word	0x0800f6b8
 800b8d4:	080120b0 	.word	0x080120b0
 800b8d8:	080120d4 	.word	0x080120d4
 800b8dc:	080120e4 	.word	0x080120e4

0800b8e0 <tcp_enqueue_flags>:
{
 800b8e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	4604      	mov	r4, r0
 800b8e8:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b8ea:	f011 0703 	ands.w	r7, r1, #3
 800b8ee:	d048      	beq.n	800b982 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b8f0:	2c00      	cmp	r4, #0
 800b8f2:	d04e      	beq.n	800b992 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800b8f4:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b8f8:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800b8fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b900:	4641      	mov	r1, r8
 800b902:	2036      	movs	r0, #54	; 0x36
 800b904:	f7fc fa1e 	bl	8007d44 <pbuf_alloc>
 800b908:	4681      	mov	r9, r0
 800b90a:	2800      	cmp	r0, #0
 800b90c:	d049      	beq.n	800b9a2 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b90e:	8943      	ldrh	r3, [r0, #10]
 800b910:	4543      	cmp	r3, r8
 800b912:	d34d      	bcc.n	800b9b0 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b914:	9600      	str	r6, [sp, #0]
 800b916:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b918:	462a      	mov	r2, r5
 800b91a:	4649      	mov	r1, r9
 800b91c:	4620      	mov	r0, r4
 800b91e:	f7ff faab 	bl	800ae78 <tcp_create_segment>
 800b922:	4606      	mov	r6, r0
 800b924:	2800      	cmp	r0, #0
 800b926:	d04b      	beq.n	800b9c0 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b928:	68c3      	ldr	r3, [r0, #12]
 800b92a:	f013 0f03 	tst.w	r3, #3
 800b92e:	d14e      	bne.n	800b9ce <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b930:	8933      	ldrh	r3, [r6, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d153      	bne.n	800b9de <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800b936:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d058      	beq.n	800b9ee <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b93c:	461a      	mov	r2, r3
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1fb      	bne.n	800b93c <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800b944:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800b946:	2300      	movs	r3, #0
 800b948:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b94c:	b117      	cbz	r7, 800b954 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800b94e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b950:	3301      	adds	r3, #1
 800b952:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800b954:	f015 0f01 	tst.w	r5, #1
 800b958:	d003      	beq.n	800b962 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800b95a:	8b63      	ldrh	r3, [r4, #26]
 800b95c:	f043 0320 	orr.w	r3, r3, #32
 800b960:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b962:	6870      	ldr	r0, [r6, #4]
 800b964:	f7fc faf6 	bl	8007f54 <pbuf_clen>
 800b968:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b96c:	4418      	add	r0, r3
 800b96e:	b280      	uxth	r0, r0
 800b970:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b974:	2800      	cmp	r0, #0
 800b976:	d049      	beq.n	800ba0c <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b978:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d039      	beq.n	800b9f2 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800b97e:	2000      	movs	r0, #0
 800b980:	e045      	b.n	800ba0e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b982:	4b24      	ldr	r3, [pc, #144]	; (800ba14 <tcp_enqueue_flags+0x134>)
 800b984:	f240 4211 	movw	r2, #1041	; 0x411
 800b988:	4923      	ldr	r1, [pc, #140]	; (800ba18 <tcp_enqueue_flags+0x138>)
 800b98a:	4824      	ldr	r0, [pc, #144]	; (800ba1c <tcp_enqueue_flags+0x13c>)
 800b98c:	f002 fd08 	bl	800e3a0 <iprintf>
 800b990:	e7ae      	b.n	800b8f0 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b992:	4b20      	ldr	r3, [pc, #128]	; (800ba14 <tcp_enqueue_flags+0x134>)
 800b994:	f240 4213 	movw	r2, #1043	; 0x413
 800b998:	4921      	ldr	r1, [pc, #132]	; (800ba20 <tcp_enqueue_flags+0x140>)
 800b99a:	4820      	ldr	r0, [pc, #128]	; (800ba1c <tcp_enqueue_flags+0x13c>)
 800b99c:	f002 fd00 	bl	800e3a0 <iprintf>
 800b9a0:	e7a8      	b.n	800b8f4 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9a2:	8b63      	ldrh	r3, [r4, #26]
 800b9a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a8:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800b9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ae:	e02e      	b.n	800ba0e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b9b0:	4b18      	ldr	r3, [pc, #96]	; (800ba14 <tcp_enqueue_flags+0x134>)
 800b9b2:	f240 4239 	movw	r2, #1081	; 0x439
 800b9b6:	491b      	ldr	r1, [pc, #108]	; (800ba24 <tcp_enqueue_flags+0x144>)
 800b9b8:	4818      	ldr	r0, [pc, #96]	; (800ba1c <tcp_enqueue_flags+0x13c>)
 800b9ba:	f002 fcf1 	bl	800e3a0 <iprintf>
 800b9be:	e7a9      	b.n	800b914 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b9c0:	8b63      	ldrh	r3, [r4, #26]
 800b9c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800b9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b9cc:	e01f      	b.n	800ba0e <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b9ce:	4b11      	ldr	r3, [pc, #68]	; (800ba14 <tcp_enqueue_flags+0x134>)
 800b9d0:	f240 4242 	movw	r2, #1090	; 0x442
 800b9d4:	4914      	ldr	r1, [pc, #80]	; (800ba28 <tcp_enqueue_flags+0x148>)
 800b9d6:	4811      	ldr	r0, [pc, #68]	; (800ba1c <tcp_enqueue_flags+0x13c>)
 800b9d8:	f002 fce2 	bl	800e3a0 <iprintf>
 800b9dc:	e7a8      	b.n	800b930 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b9de:	4b0d      	ldr	r3, [pc, #52]	; (800ba14 <tcp_enqueue_flags+0x134>)
 800b9e0:	f240 4243 	movw	r2, #1091	; 0x443
 800b9e4:	4911      	ldr	r1, [pc, #68]	; (800ba2c <tcp_enqueue_flags+0x14c>)
 800b9e6:	480d      	ldr	r0, [pc, #52]	; (800ba1c <tcp_enqueue_flags+0x13c>)
 800b9e8:	f002 fcda 	bl	800e3a0 <iprintf>
 800b9ec:	e7a3      	b.n	800b936 <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800b9ee:	66e6      	str	r6, [r4, #108]	; 0x6c
 800b9f0:	e7a9      	b.n	800b946 <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b9f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b9f4:	b10b      	cbz	r3, 800b9fa <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800b9f6:	2000      	movs	r0, #0
 800b9f8:	e009      	b.n	800ba0e <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b9fa:	4b06      	ldr	r3, [pc, #24]	; (800ba14 <tcp_enqueue_flags+0x134>)
 800b9fc:	f240 4265 	movw	r2, #1125	; 0x465
 800ba00:	490b      	ldr	r1, [pc, #44]	; (800ba30 <tcp_enqueue_flags+0x150>)
 800ba02:	4806      	ldr	r0, [pc, #24]	; (800ba1c <tcp_enqueue_flags+0x13c>)
 800ba04:	f002 fccc 	bl	800e3a0 <iprintf>
  return ERR_OK;
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e000      	b.n	800ba0e <tcp_enqueue_flags+0x12e>
 800ba0c:	2000      	movs	r0, #0
}
 800ba0e:	b003      	add	sp, #12
 800ba10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba14:	08011c58 	.word	0x08011c58
 800ba18:	080120f4 	.word	0x080120f4
 800ba1c:	0800f6b8 	.word	0x0800f6b8
 800ba20:	0801214c 	.word	0x0801214c
 800ba24:	0801216c 	.word	0x0801216c
 800ba28:	080121a8 	.word	0x080121a8
 800ba2c:	080121c0 	.word	0x080121c0
 800ba30:	080121ec 	.word	0x080121ec

0800ba34 <tcp_send_fin>:
{
 800ba34:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ba36:	4605      	mov	r5, r0
 800ba38:	b188      	cbz	r0, 800ba5e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800ba3a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ba3c:	b153      	cbz	r3, 800ba54 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ba3e:	461c      	mov	r4, r3
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1fb      	bne.n	800ba3e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ba46:	68e3      	ldr	r3, [r4, #12]
 800ba48:	8998      	ldrh	r0, [r3, #12]
 800ba4a:	f7fb fa75 	bl	8006f38 <lwip_htons>
 800ba4e:	f010 0f07 	tst.w	r0, #7
 800ba52:	d00c      	beq.n	800ba6e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ba54:	2101      	movs	r1, #1
 800ba56:	4628      	mov	r0, r5
 800ba58:	f7ff ff42 	bl	800b8e0 <tcp_enqueue_flags>
}
 800ba5c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ba5e:	4b0b      	ldr	r3, [pc, #44]	; (800ba8c <tcp_send_fin+0x58>)
 800ba60:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ba64:	490a      	ldr	r1, [pc, #40]	; (800ba90 <tcp_send_fin+0x5c>)
 800ba66:	480b      	ldr	r0, [pc, #44]	; (800ba94 <tcp_send_fin+0x60>)
 800ba68:	f002 fc9a 	bl	800e3a0 <iprintf>
 800ba6c:	e7e5      	b.n	800ba3a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ba6e:	68e3      	ldr	r3, [r4, #12]
 800ba70:	899e      	ldrh	r6, [r3, #12]
 800ba72:	2001      	movs	r0, #1
 800ba74:	f7fb fa60 	bl	8006f38 <lwip_htons>
 800ba78:	68e3      	ldr	r3, [r4, #12]
 800ba7a:	4306      	orrs	r6, r0
 800ba7c:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ba7e:	8b6b      	ldrh	r3, [r5, #26]
 800ba80:	f043 0320 	orr.w	r3, r3, #32
 800ba84:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800ba86:	2000      	movs	r0, #0
 800ba88:	e7e8      	b.n	800ba5c <tcp_send_fin+0x28>
 800ba8a:	bf00      	nop
 800ba8c:	08011c58 	.word	0x08011c58
 800ba90:	08012214 	.word	0x08012214
 800ba94:	0800f6b8 	.word	0x0800f6b8

0800ba98 <tcp_rexmit_rto_prepare>:
{
 800ba98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800ba9c:	4605      	mov	r5, r0
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d031      	beq.n	800bb06 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800baa2:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800baa4:	2c00      	cmp	r4, #0
 800baa6:	d036      	beq.n	800bb16 <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	b143      	cbz	r3, 800babe <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800baac:	4620      	mov	r0, r4
 800baae:	f7ff f949 	bl	800ad44 <tcp_output_segment_busy>
 800bab2:	2800      	cmp	r0, #0
 800bab4:	d132      	bne.n	800bb1c <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800bab6:	6824      	ldr	r4, [r4, #0]
 800bab8:	6823      	ldr	r3, [r4, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1f6      	bne.n	800baac <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800babe:	4620      	mov	r0, r4
 800bac0:	f7ff f940 	bl	800ad44 <tcp_output_segment_busy>
 800bac4:	bb68      	cbnz	r0, 800bb22 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 800bac6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800bac8:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800baca:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bacc:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800bace:	2600      	movs	r6, #0
 800bad0:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800bad2:	8b6b      	ldrh	r3, [r5, #26]
 800bad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bad8:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800bada:	68e3      	ldr	r3, [r4, #12]
 800badc:	6858      	ldr	r0, [r3, #4]
 800bade:	f7fb fa30 	bl	8006f42 <lwip_htonl>
 800bae2:	4607      	mov	r7, r0
 800bae4:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800bae8:	68e3      	ldr	r3, [r4, #12]
 800baea:	8998      	ldrh	r0, [r3, #12]
 800baec:	f7fb fa24 	bl	8006f38 <lwip_htons>
 800baf0:	f010 0303 	ands.w	r3, r0, #3
 800baf4:	bf18      	it	ne
 800baf6:	2301      	movne	r3, #1
 800baf8:	4447      	add	r7, r8
 800bafa:	443b      	add	r3, r7
 800bafc:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800bafe:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 800bb00:	4630      	mov	r0, r6
}
 800bb02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800bb06:	4b08      	ldr	r3, [pc, #32]	; (800bb28 <tcp_rexmit_rto_prepare+0x90>)
 800bb08:	f240 6263 	movw	r2, #1635	; 0x663
 800bb0c:	4907      	ldr	r1, [pc, #28]	; (800bb2c <tcp_rexmit_rto_prepare+0x94>)
 800bb0e:	4808      	ldr	r0, [pc, #32]	; (800bb30 <tcp_rexmit_rto_prepare+0x98>)
 800bb10:	f002 fc46 	bl	800e3a0 <iprintf>
 800bb14:	e7c5      	b.n	800baa2 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 800bb16:	f06f 0005 	mvn.w	r0, #5
 800bb1a:	e7f2      	b.n	800bb02 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800bb1c:	f06f 0005 	mvn.w	r0, #5
 800bb20:	e7ef      	b.n	800bb02 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 800bb22:	f06f 0005 	mvn.w	r0, #5
 800bb26:	e7ec      	b.n	800bb02 <tcp_rexmit_rto_prepare+0x6a>
 800bb28:	08011c58 	.word	0x08011c58
 800bb2c:	08012230 	.word	0x08012230
 800bb30:	0800f6b8 	.word	0x0800f6b8

0800bb34 <tcp_rexmit>:
{
 800bb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bb36:	4607      	mov	r7, r0
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	d02c      	beq.n	800bb96 <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800bb3c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800bb3e:	2e00      	cmp	r6, #0
 800bb40:	d034      	beq.n	800bbac <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 800bb42:	4630      	mov	r0, r6
 800bb44:	f7ff f8fe 	bl	800ad44 <tcp_output_segment_busy>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	d132      	bne.n	800bbb2 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800bb4c:	6833      	ldr	r3, [r6, #0]
 800bb4e:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800bb50:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800bb54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb56:	b17b      	cbz	r3, 800bb78 <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	6858      	ldr	r0, [r3, #4]
 800bb5c:	f7fb f9f1 	bl	8006f42 <lwip_htonl>
 800bb60:	4604      	mov	r4, r0
 800bb62:	68f3      	ldr	r3, [r6, #12]
 800bb64:	6858      	ldr	r0, [r3, #4]
 800bb66:	f7fb f9ec 	bl	8006f42 <lwip_htonl>
 800bb6a:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800bb6c:	2c00      	cmp	r4, #0
 800bb6e:	da03      	bge.n	800bb78 <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 800bb70:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800bb72:	682b      	ldr	r3, [r5, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1ef      	bne.n	800bb58 <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800bb7c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800bb7e:	6833      	ldr	r3, [r6, #0]
 800bb80:	b18b      	cbz	r3, 800bba6 <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 800bb82:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800bb86:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800bb88:	bf1c      	itt	ne
 800bb8a:	3301      	addne	r3, #1
 800bb8c:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800bb90:	2000      	movs	r0, #0
 800bb92:	6378      	str	r0, [r7, #52]	; 0x34
}
 800bb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800bb96:	4b08      	ldr	r3, [pc, #32]	; (800bbb8 <tcp_rexmit+0x84>)
 800bb98:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800bb9c:	4907      	ldr	r1, [pc, #28]	; (800bbbc <tcp_rexmit+0x88>)
 800bb9e:	4808      	ldr	r0, [pc, #32]	; (800bbc0 <tcp_rexmit+0x8c>)
 800bba0:	f002 fbfe 	bl	800e3a0 <iprintf>
 800bba4:	e7ca      	b.n	800bb3c <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 800bba6:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800bbaa:	e7ea      	b.n	800bb82 <tcp_rexmit+0x4e>
    return ERR_VAL;
 800bbac:	f06f 0005 	mvn.w	r0, #5
 800bbb0:	e7f0      	b.n	800bb94 <tcp_rexmit+0x60>
    return ERR_VAL;
 800bbb2:	f06f 0005 	mvn.w	r0, #5
 800bbb6:	e7ed      	b.n	800bb94 <tcp_rexmit+0x60>
 800bbb8:	08011c58 	.word	0x08011c58
 800bbbc:	08012254 	.word	0x08012254
 800bbc0:	0800f6b8 	.word	0x0800f6b8

0800bbc4 <tcp_rexmit_fast>:
{
 800bbc4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	b130      	cbz	r0, 800bbd8 <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800bbca:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bbcc:	b11b      	cbz	r3, 800bbd6 <tcp_rexmit_fast+0x12>
 800bbce:	8b63      	ldrh	r3, [r4, #26]
 800bbd0:	f013 0f04 	tst.w	r3, #4
 800bbd4:	d008      	beq.n	800bbe8 <tcp_rexmit_fast+0x24>
}
 800bbd6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800bbd8:	4b15      	ldr	r3, [pc, #84]	; (800bc30 <tcp_rexmit_fast+0x6c>)
 800bbda:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800bbde:	4915      	ldr	r1, [pc, #84]	; (800bc34 <tcp_rexmit_fast+0x70>)
 800bbe0:	4815      	ldr	r0, [pc, #84]	; (800bc38 <tcp_rexmit_fast+0x74>)
 800bbe2:	f002 fbdd 	bl	800e3a0 <iprintf>
 800bbe6:	e7f0      	b.n	800bbca <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f7ff ffa3 	bl	800bb34 <tcp_rexmit>
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d1f1      	bne.n	800bbd6 <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800bbf2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800bbf6:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	bf28      	it	cs
 800bbfe:	461a      	movcs	r2, r3
 800bc00:	1052      	asrs	r2, r2, #1
 800bc02:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800bc06:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bc08:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800bc0c:	bf3c      	itt	cc
 800bc0e:	005a      	lslcc	r2, r3, #1
 800bc10:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800bc14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800bc18:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800bc1c:	4413      	add	r3, r2
 800bc1e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800bc22:	8b63      	ldrh	r3, [r4, #26]
 800bc24:	f043 0304 	orr.w	r3, r3, #4
 800bc28:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800bc2e:	e7d2      	b.n	800bbd6 <tcp_rexmit_fast+0x12>
 800bc30:	08011c58 	.word	0x08011c58
 800bc34:	0801226c 	.word	0x0801226c
 800bc38:	0800f6b8 	.word	0x0800f6b8

0800bc3c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	4604      	mov	r4, r0
 800bc44:	460e      	mov	r6, r1
 800bc46:	4615      	mov	r5, r2
 800bc48:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bc4a:	4698      	mov	r8, r3
 800bc4c:	b32b      	cbz	r3, 800bc9a <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bc4e:	b367      	cbz	r7, 800bcaa <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800bc50:	4630      	mov	r0, r6
 800bc52:	f7fb f976 	bl	8006f42 <lwip_htonl>
 800bc56:	4603      	mov	r3, r0
 800bc58:	f246 0208 	movw	r2, #24584	; 0x6008
 800bc5c:	9203      	str	r2, [sp, #12]
 800bc5e:	2214      	movs	r2, #20
 800bc60:	9202      	str	r2, [sp, #8]
 800bc62:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800bc66:	9201      	str	r2, [sp, #4]
 800bc68:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800bc6c:	9200      	str	r2, [sp, #0]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	4611      	mov	r1, r2
 800bc72:	4628      	mov	r0, r5
 800bc74:	f7ff f974 	bl	800af60 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800bc78:	4605      	mov	r5, r0
 800bc7a:	b158      	cbz	r0, 800bc94 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	461a      	mov	r2, r3
 800bc80:	4601      	mov	r1, r0
 800bc82:	4620      	mov	r0, r4
 800bc84:	f7ff f876 	bl	800ad74 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800bc88:	463b      	mov	r3, r7
 800bc8a:	4642      	mov	r2, r8
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f7ff f9da 	bl	800b048 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800bc94:	b004      	add	sp, #16
 800bc96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800bc9a:	4b08      	ldr	r3, [pc, #32]	; (800bcbc <tcp_rst+0x80>)
 800bc9c:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800bca0:	4907      	ldr	r1, [pc, #28]	; (800bcc0 <tcp_rst+0x84>)
 800bca2:	4808      	ldr	r0, [pc, #32]	; (800bcc4 <tcp_rst+0x88>)
 800bca4:	f002 fb7c 	bl	800e3a0 <iprintf>
 800bca8:	e7d1      	b.n	800bc4e <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800bcaa:	4b04      	ldr	r3, [pc, #16]	; (800bcbc <tcp_rst+0x80>)
 800bcac:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800bcb0:	4905      	ldr	r1, [pc, #20]	; (800bcc8 <tcp_rst+0x8c>)
 800bcb2:	4804      	ldr	r0, [pc, #16]	; (800bcc4 <tcp_rst+0x88>)
 800bcb4:	f002 fb74 	bl	800e3a0 <iprintf>
 800bcb8:	e7ca      	b.n	800bc50 <tcp_rst+0x14>
 800bcba:	bf00      	nop
 800bcbc:	08011c58 	.word	0x08011c58
 800bcc0:	0801228c 	.word	0x0801228c
 800bcc4:	0800f6b8 	.word	0x0800f6b8
 800bcc8:	080122a8 	.word	0x080122a8

0800bccc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800bccc:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bcce:	4604      	mov	r4, r0
 800bcd0:	b1e0      	cbz	r0, 800bd0c <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800bcd2:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bcd4:	f7fb f935 	bl	8006f42 <lwip_htonl>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2200      	movs	r2, #0
 800bcdc:	4611      	mov	r1, r2
 800bcde:	4620      	mov	r0, r4
 800bce0:	f7ff f988 	bl	800aff4 <tcp_output_alloc_header>
  if (p == NULL) {
 800bce4:	4605      	mov	r5, r0
 800bce6:	b1c8      	cbz	r0, 800bd1c <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800bce8:	2300      	movs	r3, #0
 800bcea:	461a      	mov	r2, r3
 800bcec:	4601      	mov	r1, r0
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f7ff f840 	bl	800ad74 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bcf4:	1d23      	adds	r3, r4, #4
 800bcf6:	4622      	mov	r2, r4
 800bcf8:	4629      	mov	r1, r5
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f7ff f9a4 	bl	800b048 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800bd00:	b198      	cbz	r0, 800bd2a <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd02:	8b63      	ldrh	r3, [r4, #26]
 800bd04:	f043 0303 	orr.w	r3, r3, #3
 800bd08:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800bd0a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800bd0c:	4b09      	ldr	r3, [pc, #36]	; (800bd34 <tcp_send_empty_ack+0x68>)
 800bd0e:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800bd12:	4909      	ldr	r1, [pc, #36]	; (800bd38 <tcp_send_empty_ack+0x6c>)
 800bd14:	4809      	ldr	r0, [pc, #36]	; (800bd3c <tcp_send_empty_ack+0x70>)
 800bd16:	f002 fb43 	bl	800e3a0 <iprintf>
 800bd1a:	e7da      	b.n	800bcd2 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd1c:	8b63      	ldrh	r3, [r4, #26]
 800bd1e:	f043 0303 	orr.w	r3, r3, #3
 800bd22:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800bd24:	f06f 0001 	mvn.w	r0, #1
 800bd28:	e7ef      	b.n	800bd0a <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800bd2a:	8b63      	ldrh	r3, [r4, #26]
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	8363      	strh	r3, [r4, #26]
 800bd32:	e7ea      	b.n	800bd0a <tcp_send_empty_ack+0x3e>
 800bd34:	08011c58 	.word	0x08011c58
 800bd38:	080122c4 	.word	0x080122c4
 800bd3c:	0800f6b8 	.word	0x0800f6b8

0800bd40 <tcp_output>:
{
 800bd40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd44:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bd46:	4605      	mov	r5, r0
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	d03a      	beq.n	800bdc2 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bd4c:	7d2b      	ldrb	r3, [r5, #20]
 800bd4e:	2b01      	cmp	r3, #1
 800bd50:	d03f      	beq.n	800bdd2 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 800bd52:	4b9b      	ldr	r3, [pc, #620]	; (800bfc0 <tcp_output+0x280>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	42ab      	cmp	r3, r5
 800bd58:	f000 81b8 	beq.w	800c0cc <tcp_output+0x38c>
  seg = pcb->unsent;
 800bd5c:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800bd5e:	2c00      	cmp	r4, #0
 800bd60:	d03f      	beq.n	800bde2 <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bd62:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800bd66:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800bd6a:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800bd6e:	7a28      	ldrb	r0, [r5, #8]
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d148      	bne.n	800be06 <tcp_output+0xc6>
    return ip_route(src, dst);
 800bd74:	4650      	mov	r0, sl
 800bd76:	f001 f9e7 	bl	800d148 <ip4_route>
 800bd7a:	4681      	mov	r9, r0
  if (netif == NULL) {
 800bd7c:	f1b9 0f00 	cmp.w	r9, #0
 800bd80:	f000 81a6 	beq.w	800c0d0 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800bd84:	682b      	ldr	r3, [r5, #0]
 800bd86:	b913      	cbnz	r3, 800bd8e <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800bd88:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800bd8c:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800bd8e:	42b7      	cmp	r7, r6
 800bd90:	bf28      	it	cs
 800bd92:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800bd94:	68e3      	ldr	r3, [r4, #12]
 800bd96:	6858      	ldr	r0, [r3, #4]
 800bd98:	f7fb f8d3 	bl	8006f42 <lwip_htonl>
 800bd9c:	8923      	ldrh	r3, [r4, #8]
 800bd9e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	4403      	add	r3, r0
 800bda4:	42bb      	cmp	r3, r7
 800bda6:	d941      	bls.n	800be2c <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800bda8:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800bdac:	42bb      	cmp	r3, r7
 800bdae:	d02e      	beq.n	800be0e <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 800bdb0:	8b6b      	ldrh	r3, [r5, #26]
 800bdb2:	f013 0f02 	tst.w	r3, #2
 800bdb6:	d018      	beq.n	800bdea <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 800bdb8:	4628      	mov	r0, r5
 800bdba:	f7ff ff87 	bl	800bccc <tcp_send_empty_ack>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	e018      	b.n	800bdf4 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800bdc2:	4b80      	ldr	r3, [pc, #512]	; (800bfc4 <tcp_output+0x284>)
 800bdc4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800bdc8:	497f      	ldr	r1, [pc, #508]	; (800bfc8 <tcp_output+0x288>)
 800bdca:	4880      	ldr	r0, [pc, #512]	; (800bfcc <tcp_output+0x28c>)
 800bdcc:	f002 fae8 	bl	800e3a0 <iprintf>
 800bdd0:	e7bc      	b.n	800bd4c <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800bdd2:	4b7c      	ldr	r3, [pc, #496]	; (800bfc4 <tcp_output+0x284>)
 800bdd4:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800bdd8:	497d      	ldr	r1, [pc, #500]	; (800bfd0 <tcp_output+0x290>)
 800bdda:	487c      	ldr	r0, [pc, #496]	; (800bfcc <tcp_output+0x28c>)
 800bddc:	f002 fae0 	bl	800e3a0 <iprintf>
 800bde0:	e7b7      	b.n	800bd52 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800bde2:	8b6b      	ldrh	r3, [r5, #26]
 800bde4:	f013 0f02 	tst.w	r3, #2
 800bde8:	d108      	bne.n	800bdfc <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bdea:	8b6b      	ldrh	r3, [r5, #26]
 800bdec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdf0:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	b005      	add	sp, #20
 800bdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800bdfc:	4628      	mov	r0, r5
 800bdfe:	f7ff ff65 	bl	800bccc <tcp_send_empty_ack>
 800be02:	4603      	mov	r3, r0
 800be04:	e7f6      	b.n	800bdf4 <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 800be06:	f7fb fe39 	bl	8007a7c <netif_get_by_index>
 800be0a:	4681      	mov	r9, r0
 800be0c:	e7b6      	b.n	800bd7c <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800be0e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1cd      	bne.n	800bdb0 <tcp_output+0x70>
 800be14:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d1c9      	bne.n	800bdb0 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800be1c:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800be20:	2201      	movs	r2, #1
 800be22:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800be26:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800be2a:	e7c1      	b.n	800bdb0 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800be32:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 8147 	beq.w	800c0c8 <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800be3a:	4698      	mov	r8, r3
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d1fb      	bne.n	800be3a <tcp_output+0xfa>
 800be42:	e0d4      	b.n	800bfee <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 800be44:	4b5f      	ldr	r3, [pc, #380]	; (800bfc4 <tcp_output+0x284>)
 800be46:	f240 5236 	movw	r2, #1334	; 0x536
 800be4a:	4962      	ldr	r1, [pc, #392]	; (800bfd4 <tcp_output+0x294>)
 800be4c:	485f      	ldr	r0, [pc, #380]	; (800bfcc <tcp_output+0x28c>)
 800be4e:	f002 faa7 	bl	800e3a0 <iprintf>
 800be52:	e0df      	b.n	800c014 <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800be54:	8911      	ldrh	r1, [r2, #8]
 800be56:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800be58:	4291      	cmp	r1, r2
 800be5a:	f080 80e9 	bcs.w	800c030 <tcp_output+0x2f0>
 800be5e:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800be62:	2a00      	cmp	r2, #0
 800be64:	f000 80e4 	beq.w	800c030 <tcp_output+0x2f0>
 800be68:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800be6c:	2a08      	cmp	r2, #8
 800be6e:	f200 80df 	bhi.w	800c030 <tcp_output+0x2f0>
 800be72:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800be76:	f040 80db 	bne.w	800c030 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 800be7a:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d1b4      	bne.n	800bdea <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800be86:	e7b0      	b.n	800bdea <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800be88:	68e3      	ldr	r3, [r4, #12]
 800be8a:	899e      	ldrh	r6, [r3, #12]
 800be8c:	2010      	movs	r0, #16
 800be8e:	f7fb f853 	bl	8006f38 <lwip_htons>
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	4330      	orrs	r0, r6
 800be96:	8198      	strh	r0, [r3, #12]
 800be98:	e0ce      	b.n	800c038 <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800be9a:	68e6      	ldr	r6, [r4, #12]
 800be9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800be9e:	f7fb f850 	bl	8006f42 <lwip_htonl>
 800bea2:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800bea4:	68e6      	ldr	r6, [r4, #12]
 800bea6:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800bea8:	f7fb f846 	bl	8006f38 <lwip_htons>
 800beac:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800beae:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800beb0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800beb2:	4413      	add	r3, r2
 800beb4:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800beb6:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800beb8:	7aa3      	ldrb	r3, [r4, #10]
 800beba:	f013 0f01 	tst.w	r3, #1
 800bebe:	d140      	bne.n	800bf42 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800bec0:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 800bec2:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800bec6:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800bec8:	bfbc      	itt	lt
 800beca:	2300      	movlt	r3, #0
 800becc:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 800bece:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d043      	beq.n	800bf5c <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800bed4:	6862      	ldr	r2, [r4, #4]
 800bed6:	68e3      	ldr	r3, [r4, #12]
 800bed8:	6851      	ldr	r1, [r2, #4]
 800beda:	1a5b      	subs	r3, r3, r1
 800bedc:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800bede:	8951      	ldrh	r1, [r2, #10]
 800bee0:	1ac9      	subs	r1, r1, r3
 800bee2:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800bee4:	6861      	ldr	r1, [r4, #4]
 800bee6:	890a      	ldrh	r2, [r1, #8]
 800bee8:	1ad3      	subs	r3, r2, r3
 800beea:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800beec:	6862      	ldr	r2, [r4, #4]
 800beee:	68e3      	ldr	r3, [r4, #12]
 800bef0:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800bef2:	2200      	movs	r2, #0
 800bef4:	741a      	strb	r2, [r3, #16]
 800bef6:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800bef8:	7aa3      	ldrb	r3, [r4, #10]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	f003 0304 	and.w	r3, r3, #4
 800bf00:	3314      	adds	r3, #20
 800bf02:	68e2      	ldr	r2, [r4, #12]
 800bf04:	4413      	add	r3, r2
 800bf06:	429e      	cmp	r6, r3
 800bf08:	d006      	beq.n	800bf18 <tcp_output+0x1d8>
 800bf0a:	4b2e      	ldr	r3, [pc, #184]	; (800bfc4 <tcp_output+0x284>)
 800bf0c:	f240 621c 	movw	r2, #1564	; 0x61c
 800bf10:	4931      	ldr	r1, [pc, #196]	; (800bfd8 <tcp_output+0x298>)
 800bf12:	482e      	ldr	r0, [pc, #184]	; (800bfcc <tcp_output+0x28c>)
 800bf14:	f002 fa44 	bl	800e3a0 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800bf18:	6860      	ldr	r0, [r4, #4]
 800bf1a:	f8cd 9008 	str.w	r9, [sp, #8]
 800bf1e:	2306      	movs	r3, #6
 800bf20:	9301      	str	r3, [sp, #4]
 800bf22:	7aab      	ldrb	r3, [r5, #10]
 800bf24:	9300      	str	r3, [sp, #0]
 800bf26:	7aeb      	ldrb	r3, [r5, #11]
 800bf28:	4652      	mov	r2, sl
 800bf2a:	4629      	mov	r1, r5
 800bf2c:	f001 fa98 	bl	800d460 <ip4_output_if>
    if (err != ERR_OK) {
 800bf30:	4603      	mov	r3, r0
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f000 8086 	beq.w	800c044 <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bf38:	8b6a      	ldrh	r2, [r5, #26]
 800bf3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bf3e:	836a      	strh	r2, [r5, #26]
      return err;
 800bf40:	e758      	b.n	800bdf4 <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800bf42:	4652      	mov	r2, sl
 800bf44:	4649      	mov	r1, r9
 800bf46:	f44f 7006 	mov.w	r0, #536	; 0x218
 800bf4a:	f7fc fc31 	bl	80087b0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800bf4e:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800bf52:	f7fa fff6 	bl	8006f42 <lwip_htonl>
 800bf56:	6170      	str	r0, [r6, #20]
    opts += 1;
 800bf58:	3618      	adds	r6, #24
 800bf5a:	e7b2      	b.n	800bec2 <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 800bf5c:	4b1f      	ldr	r3, [pc, #124]	; (800bfdc <tcp_output+0x29c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800bf62:	68e3      	ldr	r3, [r4, #12]
 800bf64:	6858      	ldr	r0, [r3, #4]
 800bf66:	f7fa ffec 	bl	8006f42 <lwip_htonl>
 800bf6a:	63a8      	str	r0, [r5, #56]	; 0x38
 800bf6c:	e7b2      	b.n	800bed4 <tcp_output+0x194>
        pcb->unacked = seg;
 800bf6e:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 800bf70:	46a0      	mov	r8, r4
 800bf72:	e038      	b.n	800bfe6 <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bf74:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 800bf78:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800bf7a:	b1d3      	cbz	r3, 800bfb2 <tcp_output+0x272>
 800bf7c:	4622      	mov	r2, r4
 800bf7e:	465c      	mov	r4, fp
 800bf80:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	6858      	ldr	r0, [r3, #4]
 800bf86:	f7fa ffdc 	bl	8006f42 <lwip_htonl>
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	f8db 300c 	ldr.w	r3, [fp, #12]
 800bf90:	6858      	ldr	r0, [r3, #4]
 800bf92:	f7fa ffd6 	bl	8006f42 <lwip_htonl>
 800bf96:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 800bf98:	2e00      	cmp	r6, #0
 800bf9a:	da07      	bge.n	800bfac <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 800bf9c:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1ee      	bne.n	800bf82 <tcp_output+0x242>
 800bfa4:	465b      	mov	r3, fp
 800bfa6:	46a3      	mov	fp, r4
 800bfa8:	461c      	mov	r4, r3
 800bfaa:	e002      	b.n	800bfb2 <tcp_output+0x272>
 800bfac:	465b      	mov	r3, fp
 800bfae:	46a3      	mov	fp, r4
 800bfb0:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 800bfb2:	f8db 3000 	ldr.w	r3, [fp]
 800bfb6:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800bfb8:	f8cb 4000 	str.w	r4, [fp]
 800bfbc:	e013      	b.n	800bfe6 <tcp_output+0x2a6>
 800bfbe:	bf00      	nop
 800bfc0:	20010ca8 	.word	0x20010ca8
 800bfc4:	08011c58 	.word	0x08011c58
 800bfc8:	080122e4 	.word	0x080122e4
 800bfcc:	0800f6b8 	.word	0x0800f6b8
 800bfd0:	080122fc 	.word	0x080122fc
 800bfd4:	08012324 	.word	0x08012324
 800bfd8:	08011cdc 	.word	0x08011cdc
 800bfdc:	20010c74 	.word	0x20010c74
      tcp_seg_free(seg);
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f7fc faff 	bl	80085e4 <tcp_seg_free>
    seg = pcb->unsent;
 800bfe6:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 800bfe8:	2c00      	cmp	r4, #0
 800bfea:	f43f af49 	beq.w	800be80 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bfee:	68e3      	ldr	r3, [r4, #12]
 800bff0:	6858      	ldr	r0, [r3, #4]
 800bff2:	f7fa ffa6 	bl	8006f42 <lwip_htonl>
 800bff6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800bff8:	1ac0      	subs	r0, r0, r3
 800bffa:	8923      	ldrh	r3, [r4, #8]
 800bffc:	4418      	add	r0, r3
  while (seg != NULL &&
 800bffe:	42b8      	cmp	r0, r7
 800c000:	f63f af3b 	bhi.w	800be7a <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 800c004:	68e3      	ldr	r3, [r4, #12]
 800c006:	8998      	ldrh	r0, [r3, #12]
 800c008:	f7fa ff96 	bl	8006f38 <lwip_htons>
 800c00c:	f010 0f04 	tst.w	r0, #4
 800c010:	f47f af18 	bne.w	800be44 <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c014:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c016:	b15b      	cbz	r3, 800c030 <tcp_output+0x2f0>
 800c018:	8b6b      	ldrh	r3, [r5, #26]
 800c01a:	f013 0f44 	tst.w	r3, #68	; 0x44
 800c01e:	d107      	bne.n	800c030 <tcp_output+0x2f0>
 800c020:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800c022:	2a00      	cmp	r2, #0
 800c024:	f43f af1b 	beq.w	800be5e <tcp_output+0x11e>
 800c028:	6811      	ldr	r1, [r2, #0]
 800c02a:	2900      	cmp	r1, #0
 800c02c:	f43f af12 	beq.w	800be54 <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 800c030:	7d2b      	ldrb	r3, [r5, #20]
 800c032:	2b02      	cmp	r3, #2
 800c034:	f47f af28 	bne.w	800be88 <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 800c038:	4620      	mov	r0, r4
 800c03a:	f7fe fe83 	bl	800ad44 <tcp_output_segment_busy>
 800c03e:	2800      	cmp	r0, #0
 800c040:	f43f af2b 	beq.w	800be9a <tcp_output+0x15a>
    pcb->unsent = seg->next;
 800c044:	6823      	ldr	r3, [r4, #0]
 800c046:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c048:	7d2b      	ldrb	r3, [r5, #20]
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d003      	beq.n	800c056 <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c04e:	8b6b      	ldrh	r3, [r5, #26]
 800c050:	f023 0303 	bic.w	r3, r3, #3
 800c054:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c056:	68e3      	ldr	r3, [r4, #12]
 800c058:	6858      	ldr	r0, [r3, #4]
 800c05a:	f7fa ff72 	bl	8006f42 <lwip_htonl>
 800c05e:	4606      	mov	r6, r0
 800c060:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 800c064:	68e3      	ldr	r3, [r4, #12]
 800c066:	8998      	ldrh	r0, [r3, #12]
 800c068:	f7fa ff66 	bl	8006f38 <lwip_htons>
 800c06c:	f010 0003 	ands.w	r0, r0, #3
 800c070:	bf18      	it	ne
 800c072:	2001      	movne	r0, #1
 800c074:	445e      	add	r6, fp
 800c076:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c078:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c07a:	1a1b      	subs	r3, r3, r0
 800c07c:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800c07e:	bfb8      	it	lt
 800c080:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c082:	8926      	ldrh	r6, [r4, #8]
 800c084:	68e3      	ldr	r3, [r4, #12]
 800c086:	8998      	ldrh	r0, [r3, #12]
 800c088:	f7fa ff56 	bl	8006f38 <lwip_htons>
 800c08c:	f010 0003 	ands.w	r0, r0, #3
 800c090:	bf18      	it	ne
 800c092:	2001      	movne	r0, #1
 800c094:	42f0      	cmn	r0, r6
 800c096:	d0a3      	beq.n	800bfe0 <tcp_output+0x2a0>
      seg->next = NULL;
 800c098:	2300      	movs	r3, #0
 800c09a:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800c09c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f43f af65 	beq.w	800bf6e <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c0a4:	68e3      	ldr	r3, [r4, #12]
 800c0a6:	6858      	ldr	r0, [r3, #4]
 800c0a8:	f7fa ff4b 	bl	8006f42 <lwip_htonl>
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c0b2:	6858      	ldr	r0, [r3, #4]
 800c0b4:	f7fa ff45 	bl	8006f42 <lwip_htonl>
 800c0b8:	1a36      	subs	r6, r6, r0
 800c0ba:	2e00      	cmp	r6, #0
 800c0bc:	f6ff af5a 	blt.w	800bf74 <tcp_output+0x234>
          useg->next = seg;
 800c0c0:	f8c8 4000 	str.w	r4, [r8]
 800c0c4:	46a0      	mov	r8, r4
 800c0c6:	e78e      	b.n	800bfe6 <tcp_output+0x2a6>
  useg = pcb->unacked;
 800c0c8:	4698      	mov	r8, r3
  while (seg != NULL &&
 800c0ca:	e790      	b.n	800bfee <tcp_output+0x2ae>
    return ERR_OK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	e691      	b.n	800bdf4 <tcp_output+0xb4>
    return ERR_RTE;
 800c0d0:	f06f 0303 	mvn.w	r3, #3
 800c0d4:	e68e      	b.n	800bdf4 <tcp_output+0xb4>
 800c0d6:	bf00      	nop

0800c0d8 <tcp_rexmit_rto_commit>:
{
 800c0d8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c0da:	4604      	mov	r4, r0
 800c0dc:	b150      	cbz	r0, 800c0f4 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800c0de:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c0e2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c0e4:	bf1c      	itt	ne
 800c0e6:	3301      	addne	r3, #1
 800c0e8:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	f7ff fe27 	bl	800bd40 <tcp_output>
}
 800c0f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c0f4:	4b03      	ldr	r3, [pc, #12]	; (800c104 <tcp_rexmit_rto_commit+0x2c>)
 800c0f6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c0fa:	4903      	ldr	r1, [pc, #12]	; (800c108 <tcp_rexmit_rto_commit+0x30>)
 800c0fc:	4803      	ldr	r0, [pc, #12]	; (800c10c <tcp_rexmit_rto_commit+0x34>)
 800c0fe:	f002 f94f 	bl	800e3a0 <iprintf>
 800c102:	e7ec      	b.n	800c0de <tcp_rexmit_rto_commit+0x6>
 800c104:	08011c58 	.word	0x08011c58
 800c108:	0801233c 	.word	0x0801233c
 800c10c:	0800f6b8 	.word	0x0800f6b8

0800c110 <tcp_rexmit_rto>:
{
 800c110:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c112:	4604      	mov	r4, r0
 800c114:	b120      	cbz	r0, 800c120 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800c116:	4620      	mov	r0, r4
 800c118:	f7ff fcbe 	bl	800ba98 <tcp_rexmit_rto_prepare>
 800c11c:	b140      	cbz	r0, 800c130 <tcp_rexmit_rto+0x20>
}
 800c11e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800c120:	4b05      	ldr	r3, [pc, #20]	; (800c138 <tcp_rexmit_rto+0x28>)
 800c122:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800c126:	4905      	ldr	r1, [pc, #20]	; (800c13c <tcp_rexmit_rto+0x2c>)
 800c128:	4805      	ldr	r0, [pc, #20]	; (800c140 <tcp_rexmit_rto+0x30>)
 800c12a:	f002 f939 	bl	800e3a0 <iprintf>
 800c12e:	e7f2      	b.n	800c116 <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800c130:	4620      	mov	r0, r4
 800c132:	f7ff ffd1 	bl	800c0d8 <tcp_rexmit_rto_commit>
}
 800c136:	e7f2      	b.n	800c11e <tcp_rexmit_rto+0xe>
 800c138:	08011c58 	.word	0x08011c58
 800c13c:	08012360 	.word	0x08012360
 800c140:	0800f6b8 	.word	0x0800f6b8

0800c144 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800c144:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c146:	4604      	mov	r4, r0
 800c148:	b1c0      	cbz	r0, 800c17c <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800c14a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c14c:	3801      	subs	r0, #1
 800c14e:	f7fa fef8 	bl	8006f42 <lwip_htonl>
 800c152:	4603      	mov	r3, r0
 800c154:	2200      	movs	r2, #0
 800c156:	4611      	mov	r1, r2
 800c158:	4620      	mov	r0, r4
 800c15a:	f7fe ff4b 	bl	800aff4 <tcp_output_alloc_header>
  if (p == NULL) {
 800c15e:	4605      	mov	r5, r0
 800c160:	b1a0      	cbz	r0, 800c18c <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c162:	2300      	movs	r3, #0
 800c164:	461a      	mov	r2, r3
 800c166:	4601      	mov	r1, r0
 800c168:	4620      	mov	r0, r4
 800c16a:	f7fe fe03 	bl	800ad74 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c16e:	1d23      	adds	r3, r4, #4
 800c170:	4622      	mov	r2, r4
 800c172:	4629      	mov	r1, r5
 800c174:	4620      	mov	r0, r4
 800c176:	f7fe ff67 	bl	800b048 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800c17c:	4b05      	ldr	r3, [pc, #20]	; (800c194 <tcp_keepalive+0x50>)
 800c17e:	f640 0224 	movw	r2, #2084	; 0x824
 800c182:	4905      	ldr	r1, [pc, #20]	; (800c198 <tcp_keepalive+0x54>)
 800c184:	4805      	ldr	r0, [pc, #20]	; (800c19c <tcp_keepalive+0x58>)
 800c186:	f002 f90b 	bl	800e3a0 <iprintf>
 800c18a:	e7de      	b.n	800c14a <tcp_keepalive+0x6>
    return ERR_MEM;
 800c18c:	f04f 30ff 	mov.w	r0, #4294967295
 800c190:	e7f3      	b.n	800c17a <tcp_keepalive+0x36>
 800c192:	bf00      	nop
 800c194:	08011c58 	.word	0x08011c58
 800c198:	0801237c 	.word	0x0801237c
 800c19c:	0800f6b8 	.word	0x0800f6b8

0800c1a0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800c1a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c1a4:	4604      	mov	r4, r0
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d03e      	beq.n	800c228 <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800c1aa:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800c1ac:	2d00      	cmp	r5, #0
 800c1ae:	d043      	beq.n	800c238 <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800c1b0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800c1b4:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800c1b6:	bf1c      	itt	ne
 800c1b8:	3301      	addne	r3, #1
 800c1ba:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800c1be:	68eb      	ldr	r3, [r5, #12]
 800c1c0:	8998      	ldrh	r0, [r3, #12]
 800c1c2:	f7fa feb9 	bl	8006f38 <lwip_htons>
 800c1c6:	f010 0f01 	tst.w	r0, #1
 800c1ca:	d002      	beq.n	800c1d2 <tcp_zero_window_probe+0x32>
 800c1cc:	892b      	ldrh	r3, [r5, #8]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d03a      	beq.n	800c248 <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c1d2:	68eb      	ldr	r3, [r5, #12]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	2201      	movs	r2, #1
 800c1d8:	2100      	movs	r1, #0
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7fe ff0a 	bl	800aff4 <tcp_output_alloc_header>
  if (p == NULL) {
 800c1e0:	4606      	mov	r6, r0
 800c1e2:	b370      	cbz	r0, 800c242 <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c1e4:	6868      	ldr	r0, [r5, #4]
 800c1e6:	8903      	ldrh	r3, [r0, #8]
 800c1e8:	892a      	ldrh	r2, [r5, #8]
 800c1ea:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800c1ec:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800c1ee:	b29b      	uxth	r3, r3
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	3114      	adds	r1, #20
 800c1f4:	f7fb ffb6 	bl	8008164 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800c1f8:	68eb      	ldr	r3, [r5, #12]
 800c1fa:	6858      	ldr	r0, [r3, #4]
 800c1fc:	f7fa fea1 	bl	8006f42 <lwip_htonl>
 800c200:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c202:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800c204:	1a1b      	subs	r3, r3, r0
 800c206:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800c208:	bfb8      	it	lt
 800c20a:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c20c:	2300      	movs	r3, #0
 800c20e:	461a      	mov	r2, r3
 800c210:	4631      	mov	r1, r6
 800c212:	4620      	mov	r0, r4
 800c214:	f7fe fdae 	bl	800ad74 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c218:	1d23      	adds	r3, r4, #4
 800c21a:	4622      	mov	r2, r4
 800c21c:	4631      	mov	r1, r6
 800c21e:	4620      	mov	r0, r4
 800c220:	f7fe ff12 	bl	800b048 <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800c224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800c228:	4b13      	ldr	r3, [pc, #76]	; (800c278 <tcp_zero_window_probe+0xd8>)
 800c22a:	f640 024f 	movw	r2, #2127	; 0x84f
 800c22e:	4913      	ldr	r1, [pc, #76]	; (800c27c <tcp_zero_window_probe+0xdc>)
 800c230:	4813      	ldr	r0, [pc, #76]	; (800c280 <tcp_zero_window_probe+0xe0>)
 800c232:	f002 f8b5 	bl	800e3a0 <iprintf>
 800c236:	e7b8      	b.n	800c1aa <tcp_zero_window_probe+0xa>
    return ERR_OK;
 800c238:	2000      	movs	r0, #0
 800c23a:	e7f3      	b.n	800c224 <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 800c23c:	f04f 30ff 	mov.w	r0, #4294967295
 800c240:	e7f0      	b.n	800c224 <tcp_zero_window_probe+0x84>
 800c242:	f04f 30ff 	mov.w	r0, #4294967295
 800c246:	e7ed      	b.n	800c224 <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800c248:	68eb      	ldr	r3, [r5, #12]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	4611      	mov	r1, r2
 800c250:	4620      	mov	r0, r4
 800c252:	f7fe fecf 	bl	800aff4 <tcp_output_alloc_header>
  if (p == NULL) {
 800c256:	4606      	mov	r6, r0
 800c258:	2800      	cmp	r0, #0
 800c25a:	d0ef      	beq.n	800c23c <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 800c25c:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800c260:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800c264:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800c268:	2011      	movs	r0, #17
 800c26a:	f7fa fe65 	bl	8006f38 <lwip_htons>
 800c26e:	4307      	orrs	r7, r0
 800c270:	f8a8 700c 	strh.w	r7, [r8, #12]
 800c274:	e7c0      	b.n	800c1f8 <tcp_zero_window_probe+0x58>
 800c276:	bf00      	nop
 800c278:	08011c58 	.word	0x08011c58
 800c27c:	08012398 	.word	0x08012398
 800c280:	0800f6b8 	.word	0x0800f6b8

0800c284 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800c284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c286:	4604      	mov	r4, r0
 800c288:	460f      	mov	r7, r1
 800c28a:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800c28c:	200a      	movs	r0, #10
 800c28e:	f7fb f9f7 	bl	8007680 <memp_malloc>
  if (timeout == NULL) {
 800c292:	b180      	cbz	r0, 800c2b6 <sys_timeout_abs+0x32>
 800c294:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800c296:	2300      	movs	r3, #0
 800c298:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800c29a:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800c29c:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800c29e:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800c2a0:	4b0f      	ldr	r3, [pc, #60]	; (800c2e0 <sys_timeout_abs+0x5c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	b173      	cbz	r3, 800c2c4 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800c2a6:	685a      	ldr	r2, [r3, #4]
 800c2a8:	1aa2      	subs	r2, r4, r2
 800c2aa:	2a00      	cmp	r2, #0
 800c2ac:	da0d      	bge.n	800c2ca <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 800c2ae:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <sys_timeout_abs+0x5c>)
 800c2b2:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800c2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800c2b6:	4b0b      	ldr	r3, [pc, #44]	; (800c2e4 <sys_timeout_abs+0x60>)
 800c2b8:	22be      	movs	r2, #190	; 0xbe
 800c2ba:	490b      	ldr	r1, [pc, #44]	; (800c2e8 <sys_timeout_abs+0x64>)
 800c2bc:	480b      	ldr	r0, [pc, #44]	; (800c2ec <sys_timeout_abs+0x68>)
 800c2be:	f002 f86f 	bl	800e3a0 <iprintf>
    return;
 800c2c2:	e7f7      	b.n	800c2b4 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800c2c4:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <sys_timeout_abs+0x5c>)
 800c2c6:	6018      	str	r0, [r3, #0]
    return;
 800c2c8:	e7f4      	b.n	800c2b4 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	b11b      	cbz	r3, 800c2d8 <sys_timeout_abs+0x54>
 800c2d0:	685a      	ldr	r2, [r3, #4]
 800c2d2:	1aa2      	subs	r2, r4, r2
 800c2d4:	2a00      	cmp	r2, #0
 800c2d6:	daf8      	bge.n	800c2ca <sys_timeout_abs+0x46>
        timeout->next = t->next;
 800c2d8:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800c2da:	600d      	str	r5, [r1, #0]
        break;
 800c2dc:	e7ea      	b.n	800c2b4 <sys_timeout_abs+0x30>
 800c2de:	bf00      	nop
 800c2e0:	20010cc4 	.word	0x20010cc4
 800c2e4:	080123bc 	.word	0x080123bc
 800c2e8:	080123f0 	.word	0x080123f0
 800c2ec:	0800f6b8 	.word	0x0800f6b8

0800c2f0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800c2f4:	6843      	ldr	r3, [r0, #4]
 800c2f6:	4798      	blx	r3

  now = sys_now();
 800c2f8:	f7f7 f8f6 	bl	80034e8 <sys_now>
 800c2fc:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800c2fe:	6825      	ldr	r5, [r4, #0]
 800c300:	4b06      	ldr	r3, [pc, #24]	; (800c31c <lwip_cyclic_timer+0x2c>)
 800c302:	6818      	ldr	r0, [r3, #0]
 800c304:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800c306:	eba0 030c 	sub.w	r3, r0, ip
 800c30a:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800c30c:	4622      	mov	r2, r4
 800c30e:	4904      	ldr	r1, [pc, #16]	; (800c320 <lwip_cyclic_timer+0x30>)
 800c310:	bfb8      	it	lt
 800c312:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800c316:	f7ff ffb5 	bl	800c284 <sys_timeout_abs>
#endif
  }
}
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20010cc0 	.word	0x20010cc0
 800c320:	0800c2f1 	.word	0x0800c2f1

0800c324 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800c324:	b570      	push	{r4, r5, r6, lr}
 800c326:	4604      	mov	r4, r0
 800c328:	460d      	mov	r5, r1
 800c32a:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c32c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c330:	d207      	bcs.n	800c342 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800c332:	f7f7 f8d9 	bl	80034e8 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800c336:	4632      	mov	r2, r6
 800c338:	4629      	mov	r1, r5
 800c33a:	4420      	add	r0, r4
 800c33c:	f7ff ffa2 	bl	800c284 <sys_timeout_abs>
#endif
}
 800c340:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800c342:	4b04      	ldr	r3, [pc, #16]	; (800c354 <sys_timeout+0x30>)
 800c344:	f240 1229 	movw	r2, #297	; 0x129
 800c348:	4903      	ldr	r1, [pc, #12]	; (800c358 <sys_timeout+0x34>)
 800c34a:	4804      	ldr	r0, [pc, #16]	; (800c35c <sys_timeout+0x38>)
 800c34c:	f002 f828 	bl	800e3a0 <iprintf>
 800c350:	e7ef      	b.n	800c332 <sys_timeout+0xe>
 800c352:	bf00      	nop
 800c354:	080123bc 	.word	0x080123bc
 800c358:	08012430 	.word	0x08012430
 800c35c:	0800f6b8 	.word	0x0800f6b8

0800c360 <tcp_timer_needed>:
{
 800c360:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c362:	4b0a      	ldr	r3, [pc, #40]	; (800c38c <tcp_timer_needed+0x2c>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	b953      	cbnz	r3, 800c37e <tcp_timer_needed+0x1e>
 800c368:	4b09      	ldr	r3, [pc, #36]	; (800c390 <tcp_timer_needed+0x30>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	b143      	cbz	r3, 800c380 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800c36e:	4b07      	ldr	r3, [pc, #28]	; (800c38c <tcp_timer_needed+0x2c>)
 800c370:	2201      	movs	r2, #1
 800c372:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c374:	2200      	movs	r2, #0
 800c376:	4907      	ldr	r1, [pc, #28]	; (800c394 <tcp_timer_needed+0x34>)
 800c378:	20fa      	movs	r0, #250	; 0xfa
 800c37a:	f7ff ffd3 	bl	800c324 <sys_timeout>
}
 800c37e:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800c380:	4b05      	ldr	r3, [pc, #20]	; (800c398 <tcp_timer_needed+0x38>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d1f2      	bne.n	800c36e <tcp_timer_needed+0xe>
 800c388:	e7f9      	b.n	800c37e <tcp_timer_needed+0x1e>
 800c38a:	bf00      	nop
 800c38c:	20010cc8 	.word	0x20010cc8
 800c390:	20010c64 	.word	0x20010c64
 800c394:	0800c39d 	.word	0x0800c39d
 800c398:	20010c7c 	.word	0x20010c7c

0800c39c <tcpip_tcp_timer>:
{
 800c39c:	b508      	push	{r3, lr}
  tcp_tmr();
 800c39e:	f7fd f89d 	bl	80094dc <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c3a2:	4b08      	ldr	r3, [pc, #32]	; (800c3c4 <tcpip_tcp_timer+0x28>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	b12b      	cbz	r3, 800c3b4 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	4907      	ldr	r1, [pc, #28]	; (800c3c8 <tcpip_tcp_timer+0x2c>)
 800c3ac:	20fa      	movs	r0, #250	; 0xfa
 800c3ae:	f7ff ffb9 	bl	800c324 <sys_timeout>
}
 800c3b2:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800c3b4:	4b05      	ldr	r3, [pc, #20]	; (800c3cc <tcpip_tcp_timer+0x30>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d1f5      	bne.n	800c3a8 <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800c3bc:	4b04      	ldr	r3, [pc, #16]	; (800c3d0 <tcpip_tcp_timer+0x34>)
 800c3be:	2200      	movs	r2, #0
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	e7f6      	b.n	800c3b2 <tcpip_tcp_timer+0x16>
 800c3c4:	20010c64 	.word	0x20010c64
 800c3c8:	0800c39d 	.word	0x0800c39d
 800c3cc:	20010c7c 	.word	0x20010c7c
 800c3d0:	20010cc8 	.word	0x20010cc8

0800c3d4 <sys_timeouts_init>:
{
 800c3d4:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800c3d6:	4d08      	ldr	r5, [pc, #32]	; (800c3f8 <sys_timeouts_init+0x24>)
 800c3d8:	4c08      	ldr	r4, [pc, #32]	; (800c3fc <sys_timeouts_init+0x28>)
 800c3da:	f105 0208 	add.w	r2, r5, #8
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c3e4:	f7ff ff9e 	bl	800c324 <sys_timeout>
 800c3e8:	f105 0210 	add.w	r2, r5, #16
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c3f2:	f7ff ff97 	bl	800c324 <sys_timeout>
}
 800c3f6:	bd38      	pop	{r3, r4, r5, pc}
 800c3f8:	0801247c 	.word	0x0801247c
 800c3fc:	0800c2f1 	.word	0x0800c2f1

0800c400 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800c400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800c404:	f7f7 f870 	bl	80034e8 <sys_now>
 800c408:	4606      	mov	r6, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800c40a:	4c0d      	ldr	r4, [pc, #52]	; (800c440 <sys_check_timeouts+0x40>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800c40c:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800c444 <sys_check_timeouts+0x44>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c410:	270a      	movs	r7, #10
    tmptimeout = next_timeout;
 800c412:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800c414:	b191      	cbz	r1, 800c43c <sys_check_timeouts+0x3c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800c416:	684b      	ldr	r3, [r1, #4]
 800c418:	1af2      	subs	r2, r6, r3
 800c41a:	2a00      	cmp	r2, #0
 800c41c:	db0e      	blt.n	800c43c <sys_check_timeouts+0x3c>
    next_timeout = tmptimeout->next;
 800c41e:	680a      	ldr	r2, [r1, #0]
 800c420:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 800c422:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800c424:	f8d1 900c 	ldr.w	r9, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800c428:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800c42c:	4638      	mov	r0, r7
 800c42e:	f7fb f957 	bl	80076e0 <memp_free>
    if (handler != NULL) {
 800c432:	2d00      	cmp	r5, #0
 800c434:	d0ed      	beq.n	800c412 <sys_check_timeouts+0x12>
      handler(arg);
 800c436:	4648      	mov	r0, r9
 800c438:	47a8      	blx	r5
 800c43a:	e7e9      	b.n	800c410 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800c43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c440:	20010cc4 	.word	0x20010cc4
 800c444:	20010cc0 	.word	0x20010cc0

0800c448 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800c448:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800c44a:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <sys_timeouts_sleeptime+0x38>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	b183      	cbz	r3, 800c472 <sys_timeouts_sleeptime+0x2a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800c450:	f7f7 f84a 	bl	80034e8 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800c454:	4b0a      	ldr	r3, [pc, #40]	; (800c480 <sys_timeouts_sleeptime+0x38>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	685c      	ldr	r4, [r3, #4]
 800c45a:	1a24      	subs	r4, r4, r0
 800c45c:	d40c      	bmi.n	800c478 <sys_timeouts_sleeptime+0x30>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800c45e:	2c00      	cmp	r4, #0
 800c460:	da0b      	bge.n	800c47a <sys_timeouts_sleeptime+0x32>
 800c462:	4b08      	ldr	r3, [pc, #32]	; (800c484 <sys_timeouts_sleeptime+0x3c>)
 800c464:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800c468:	4907      	ldr	r1, [pc, #28]	; (800c488 <sys_timeouts_sleeptime+0x40>)
 800c46a:	4808      	ldr	r0, [pc, #32]	; (800c48c <sys_timeouts_sleeptime+0x44>)
 800c46c:	f001 ff98 	bl	800e3a0 <iprintf>
 800c470:	e003      	b.n	800c47a <sys_timeouts_sleeptime+0x32>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800c472:	f04f 34ff 	mov.w	r4, #4294967295
 800c476:	e000      	b.n	800c47a <sys_timeouts_sleeptime+0x32>
    return 0;
 800c478:	2400      	movs	r4, #0
    return ret;
  }
}
 800c47a:	4620      	mov	r0, r4
 800c47c:	bd10      	pop	{r4, pc}
 800c47e:	bf00      	nop
 800c480:	20010cc4 	.word	0x20010cc4
 800c484:	080123bc 	.word	0x080123bc
 800c488:	08012468 	.word	0x08012468
 800c48c:	0800f6b8 	.word	0x0800f6b8

0800c490 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800c490:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c492:	f001 ff9d 	bl	800e3d0 <rand>
 800c496:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800c49a:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800c49e:	4b01      	ldr	r3, [pc, #4]	; (800c4a4 <udp_init+0x14>)
 800c4a0:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800c4a2:	bd08      	pop	{r3, pc}
 800c4a4:	2000003a 	.word	0x2000003a

0800c4a8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800c4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ac:	b085      	sub	sp, #20
 800c4ae:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c4b0:	4681      	mov	r9, r0
 800c4b2:	b300      	cbz	r0, 800c4f6 <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c4b4:	b336      	cbz	r6, 800c504 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800c4b6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800c4ba:	2b07      	cmp	r3, #7
 800c4bc:	d929      	bls.n	800c512 <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800c4be:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800c4c2:	4b68      	ldr	r3, [pc, #416]	; (800c664 <udp_input+0x1bc>)
 800c4c4:	6819      	ldr	r1, [r3, #0]
 800c4c6:	6958      	ldr	r0, [r3, #20]
 800c4c8:	f000 ffdf 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800c4cc:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800c4ce:	8820      	ldrh	r0, [r4, #0]
 800c4d0:	f7fa fd32 	bl	8006f38 <lwip_htons>
 800c4d4:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800c4d6:	8860      	ldrh	r0, [r4, #2]
 800c4d8:	f7fa fd2e 	bl	8006f38 <lwip_htons>
 800c4dc:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c4de:	4b62      	ldr	r3, [pc, #392]	; (800c668 <udp_input+0x1c0>)
 800c4e0:	681c      	ldr	r4, [r3, #0]
 800c4e2:	2c00      	cmp	r4, #0
 800c4e4:	f000 8088 	beq.w	800c5f8 <udp_input+0x150>
  uncon_pcb = NULL;
 800c4e8:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800c4ec:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c4f0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800c664 <udp_input+0x1bc>
 800c4f4:	e02c      	b.n	800c550 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800c4f6:	4b5d      	ldr	r3, [pc, #372]	; (800c66c <udp_input+0x1c4>)
 800c4f8:	22cf      	movs	r2, #207	; 0xcf
 800c4fa:	495d      	ldr	r1, [pc, #372]	; (800c670 <udp_input+0x1c8>)
 800c4fc:	485d      	ldr	r0, [pc, #372]	; (800c674 <udp_input+0x1cc>)
 800c4fe:	f001 ff4f 	bl	800e3a0 <iprintf>
 800c502:	e7d7      	b.n	800c4b4 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800c504:	4b59      	ldr	r3, [pc, #356]	; (800c66c <udp_input+0x1c4>)
 800c506:	22d0      	movs	r2, #208	; 0xd0
 800c508:	495b      	ldr	r1, [pc, #364]	; (800c678 <udp_input+0x1d0>)
 800c50a:	485a      	ldr	r0, [pc, #360]	; (800c674 <udp_input+0x1cc>)
 800c50c:	f001 ff48 	bl	800e3a0 <iprintf>
 800c510:	e7d1      	b.n	800c4b6 <udp_input+0xe>
    pbuf_free(p);
 800c512:	4648      	mov	r0, r9
 800c514:	f7fb fba6 	bl	8007c64 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c518:	b005      	add	sp, #20
 800c51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c51e:	4b53      	ldr	r3, [pc, #332]	; (800c66c <udp_input+0x1c4>)
 800c520:	2288      	movs	r2, #136	; 0x88
 800c522:	4956      	ldr	r1, [pc, #344]	; (800c67c <udp_input+0x1d4>)
 800c524:	4853      	ldr	r0, [pc, #332]	; (800c674 <udp_input+0x1cc>)
 800c526:	f001 ff3b 	bl	800e3a0 <iprintf>
 800c52a:	e016      	b.n	800c55a <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c52c:	6823      	ldr	r3, [r4, #0]
 800c52e:	b11b      	cbz	r3, 800c538 <udp_input+0x90>
 800c530:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c534:	4293      	cmp	r3, r2
 800c536:	d106      	bne.n	800c546 <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c538:	7c23      	ldrb	r3, [r4, #16]
 800c53a:	f013 0f04 	tst.w	r3, #4
 800c53e:	d025      	beq.n	800c58c <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 800c540:	8aa3      	ldrh	r3, [r4, #20]
 800c542:	4553      	cmp	r3, sl
 800c544:	d038      	beq.n	800c5b8 <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c546:	68e3      	ldr	r3, [r4, #12]
 800c548:	9403      	str	r4, [sp, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d051      	beq.n	800c5f2 <udp_input+0x14a>
 800c54e:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 800c550:	8a63      	ldrh	r3, [r4, #18]
 800c552:	42ab      	cmp	r3, r5
 800c554:	d1f7      	bne.n	800c546 <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800c556:	2e00      	cmp	r6, #0
 800c558:	d0e1      	beq.n	800c51e <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c55a:	7a22      	ldrb	r2, [r4, #8]
 800c55c:	b13a      	cbz	r2, 800c56e <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800c55e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c566:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d1eb      	bne.n	800c546 <udp_input+0x9e>
    if (broadcast != 0) {
 800c56e:	2f00      	cmp	r7, #0
 800c570:	d0dc      	beq.n	800c52c <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c572:	6823      	ldr	r3, [r4, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d0df      	beq.n	800c538 <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c578:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c57c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c580:	d0da      	beq.n	800c538 <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c582:	4053      	eors	r3, r2
 800c584:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c586:	4213      	tst	r3, r2
 800c588:	d1dd      	bne.n	800c546 <udp_input+0x9e>
 800c58a:	e7d5      	b.n	800c538 <udp_input+0x90>
        if (uncon_pcb == NULL) {
 800c58c:	f1bb 0f00 	cmp.w	fp, #0
 800c590:	d010      	beq.n	800c5b4 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c592:	2f00      	cmp	r7, #0
 800c594:	d0d4      	beq.n	800c540 <udp_input+0x98>
 800c596:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c59a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c59e:	d1cf      	bne.n	800c540 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c5a0:	6873      	ldr	r3, [r6, #4]
 800c5a2:	f8db 2000 	ldr.w	r2, [fp]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d0ca      	beq.n	800c540 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c5aa:	6822      	ldr	r2, [r4, #0]
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	bf08      	it	eq
 800c5b0:	46a3      	moveq	fp, r4
 800c5b2:	e7c5      	b.n	800c540 <udp_input+0x98>
 800c5b4:	46a3      	mov	fp, r4
 800c5b6:	e7c3      	b.n	800c540 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c5b8:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c5ba:	b11b      	cbz	r3, 800c5c4 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c5bc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d1c0      	bne.n	800c546 <udp_input+0x9e>
        if (prev != NULL) {
 800c5c4:	9a03      	ldr	r2, [sp, #12]
 800c5c6:	b12a      	cbz	r2, 800c5d4 <udp_input+0x12c>
          prev->next = pcb->next;
 800c5c8:	68e3      	ldr	r3, [r4, #12]
 800c5ca:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 800c5cc:	4b26      	ldr	r3, [pc, #152]	; (800c668 <udp_input+0x1c0>)
 800c5ce:	681a      	ldr	r2, [r3, #0]
 800c5d0:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 800c5d2:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c5d4:	2108      	movs	r1, #8
 800c5d6:	4648      	mov	r0, r9
 800c5d8:	f7fb fb04 	bl	8007be4 <pbuf_remove_header>
 800c5dc:	bb08      	cbnz	r0, 800c622 <udp_input+0x17a>
      if (pcb->recv != NULL) {
 800c5de:	69a5      	ldr	r5, [r4, #24]
 800c5e0:	b355      	cbz	r5, 800c638 <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c5e2:	69e0      	ldr	r0, [r4, #28]
 800c5e4:	f8cd a000 	str.w	sl, [sp]
 800c5e8:	4b25      	ldr	r3, [pc, #148]	; (800c680 <udp_input+0x1d8>)
 800c5ea:	464a      	mov	r2, r9
 800c5ec:	4621      	mov	r1, r4
 800c5ee:	47a8      	blx	r5
 800c5f0:	e792      	b.n	800c518 <udp_input+0x70>
  if (pcb != NULL) {
 800c5f2:	f1bb 0f00 	cmp.w	fp, #0
 800c5f6:	d133      	bne.n	800c660 <udp_input+0x1b8>
  if (for_us) {
 800c5f8:	6872      	ldr	r2, [r6, #4]
 800c5fa:	4b1a      	ldr	r3, [pc, #104]	; (800c664 <udp_input+0x1bc>)
 800c5fc:	695b      	ldr	r3, [r3, #20]
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d12a      	bne.n	800c658 <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c602:	2108      	movs	r1, #8
 800c604:	4648      	mov	r0, r9
 800c606:	f7fb faed 	bl	8007be4 <pbuf_remove_header>
 800c60a:	b950      	cbnz	r0, 800c622 <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c60c:	b92f      	cbnz	r7, 800c61a <udp_input+0x172>
 800c60e:	4b15      	ldr	r3, [pc, #84]	; (800c664 <udp_input+0x1bc>)
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c616:	2be0      	cmp	r3, #224	; 0xe0
 800c618:	d112      	bne.n	800c640 <udp_input+0x198>
      pbuf_free(p);
 800c61a:	4648      	mov	r0, r9
 800c61c:	f7fb fb22 	bl	8007c64 <pbuf_free>
 800c620:	e77a      	b.n	800c518 <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c622:	4b12      	ldr	r3, [pc, #72]	; (800c66c <udp_input+0x1c4>)
 800c624:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c628:	4916      	ldr	r1, [pc, #88]	; (800c684 <udp_input+0x1dc>)
 800c62a:	4812      	ldr	r0, [pc, #72]	; (800c674 <udp_input+0x1cc>)
 800c62c:	f001 feb8 	bl	800e3a0 <iprintf>
      pbuf_free(p);
 800c630:	4648      	mov	r0, r9
 800c632:	f7fb fb17 	bl	8007c64 <pbuf_free>
      goto end;
 800c636:	e76f      	b.n	800c518 <udp_input+0x70>
        pbuf_free(p);
 800c638:	4648      	mov	r0, r9
 800c63a:	f7fb fb13 	bl	8007c64 <pbuf_free>
        goto end;
 800c63e:	e76b      	b.n	800c518 <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c640:	4b08      	ldr	r3, [pc, #32]	; (800c664 <udp_input+0x1bc>)
 800c642:	8999      	ldrh	r1, [r3, #12]
 800c644:	3108      	adds	r1, #8
 800c646:	b209      	sxth	r1, r1
 800c648:	4648      	mov	r0, r9
 800c64a:	f7fb faff 	bl	8007c4c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c64e:	2103      	movs	r1, #3
 800c650:	4648      	mov	r0, r9
 800c652:	f000 fd51 	bl	800d0f8 <icmp_dest_unreach>
 800c656:	e7e0      	b.n	800c61a <udp_input+0x172>
    pbuf_free(p);
 800c658:	4648      	mov	r0, r9
 800c65a:	f7fb fb03 	bl	8007c64 <pbuf_free>
  return;
 800c65e:	e75b      	b.n	800c518 <udp_input+0x70>
 800c660:	465c      	mov	r4, fp
 800c662:	e7b7      	b.n	800c5d4 <udp_input+0x12c>
 800c664:	2000b350 	.word	0x2000b350
 800c668:	20010ccc 	.word	0x20010ccc
 800c66c:	08012494 	.word	0x08012494
 800c670:	080124c4 	.word	0x080124c4
 800c674:	0800f6b8 	.word	0x0800f6b8
 800c678:	080124dc 	.word	0x080124dc
 800c67c:	080124f8 	.word	0x080124f8
 800c680:	2000b360 	.word	0x2000b360
 800c684:	08012520 	.word	0x08012520

0800c688 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c688:	b1a8      	cbz	r0, 800c6b6 <udp_netif_ip_addr_changed+0x2e>
 800c68a:	4602      	mov	r2, r0
 800c68c:	6803      	ldr	r3, [r0, #0]
 800c68e:	b193      	cbz	r3, 800c6b6 <udp_netif_ip_addr_changed+0x2e>
 800c690:	b189      	cbz	r1, 800c6b6 <udp_netif_ip_addr_changed+0x2e>
 800c692:	680b      	ldr	r3, [r1, #0]
 800c694:	b17b      	cbz	r3, 800c6b6 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c696:	4b08      	ldr	r3, [pc, #32]	; (800c6b8 <udp_netif_ip_addr_changed+0x30>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	b163      	cbz	r3, 800c6b6 <udp_netif_ip_addr_changed+0x2e>
{
 800c69c:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c69e:	6810      	ldr	r0, [r2, #0]
 800c6a0:	681c      	ldr	r4, [r3, #0]
 800c6a2:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c6a4:	bf04      	itt	eq
 800c6a6:	6808      	ldreq	r0, [r1, #0]
 800c6a8:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1f6      	bne.n	800c69e <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800c6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	4770      	bx	lr
 800c6b8:	20010ccc 	.word	0x20010ccc

0800c6bc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c6bc:	b510      	push	{r4, lr}
 800c6be:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c6c0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800c6c4:	4b09      	ldr	r3, [pc, #36]	; (800c6ec <etharp_free_entry+0x30>)
 800c6c6:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800c6ca:	b138      	cbz	r0, 800c6dc <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c6cc:	f7fb faca 	bl	8007c64 <pbuf_free>
    arp_table[i].q = NULL;
 800c6d0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c6d4:	00db      	lsls	r3, r3, #3
 800c6d6:	4a05      	ldr	r2, [pc, #20]	; (800c6ec <etharp_free_entry+0x30>)
 800c6d8:	2100      	movs	r1, #0
 800c6da:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c6dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800c6e0:	4802      	ldr	r0, [pc, #8]	; (800c6ec <etharp_free_entry+0x30>)
 800c6e2:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c6ea:	bd10      	pop	{r4, pc}
 800c6ec:	20010cd0 	.word	0x20010cd0

0800c6f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800c6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c6fa:	4c4f      	ldr	r4, [pc, #316]	; (800c838 <etharp_find_entry+0x148>)
{
 800c6fc:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c6fe:	4699      	mov	r9, r3
 800c700:	9302      	str	r3, [sp, #8]
 800c702:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 800c704:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 800c706:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c708:	4680      	mov	r8, r0
 800c70a:	9003      	str	r0, [sp, #12]
 800c70c:	4682      	mov	sl, r0
 800c70e:	9101      	str	r1, [sp, #4]
 800c710:	e007      	b.n	800c722 <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c712:	f1bc 0f00 	cmp.w	ip, #0
 800c716:	d10e      	bne.n	800c736 <etharp_find_entry+0x46>
 800c718:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c71a:	3301      	adds	r3, #1
 800c71c:	3418      	adds	r4, #24
 800c71e:	2b0a      	cmp	r3, #10
 800c720:	d02e      	beq.n	800c780 <etharp_find_entry+0x90>
 800c722:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 800c726:	4622      	mov	r2, r4
 800c728:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c72c:	2d0a      	cmp	r5, #10
 800c72e:	d0f0      	beq.n	800c712 <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800c730:	f1bc 0f00 	cmp.w	ip, #0
 800c734:	d0f1      	beq.n	800c71a <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c736:	b11e      	cbz	r6, 800c740 <etharp_find_entry+0x50>
 800c738:	6831      	ldr	r1, [r6, #0]
 800c73a:	6850      	ldr	r0, [r2, #4]
 800c73c:	4281      	cmp	r1, r0
 800c73e:	d008      	beq.n	800c752 <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c740:	f1bc 0f01 	cmp.w	ip, #1
 800c744:	d00c      	beq.n	800c760 <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c746:	8a52      	ldrh	r2, [r2, #18]
 800c748:	454a      	cmp	r2, r9
 800c74a:	d3e6      	bcc.n	800c71a <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800c74c:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 800c74e:	46f0      	mov	r8, lr
 800c750:	e7e3      	b.n	800c71a <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800c752:	2f00      	cmp	r7, #0
 800c754:	d064      	beq.n	800c820 <etharp_find_entry+0x130>
 800c756:	6891      	ldr	r1, [r2, #8]
 800c758:	42b9      	cmp	r1, r7
 800c75a:	d1f1      	bne.n	800c740 <etharp_find_entry+0x50>
 800c75c:	4675      	mov	r5, lr
 800c75e:	e031      	b.n	800c7c4 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 800c760:	6811      	ldr	r1, [r2, #0]
 800c762:	b129      	cbz	r1, 800c770 <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 800c764:	8a52      	ldrh	r2, [r2, #18]
 800c766:	455a      	cmp	r2, fp
 800c768:	d3d7      	bcc.n	800c71a <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 800c76a:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 800c76c:	46f2      	mov	sl, lr
 800c76e:	e7d4      	b.n	800c71a <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 800c770:	8a52      	ldrh	r2, [r2, #18]
 800c772:	9902      	ldr	r1, [sp, #8]
 800c774:	428a      	cmp	r2, r1
 800c776:	d3d0      	bcc.n	800c71a <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 800c778:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 800c77a:	f8cd e00c 	str.w	lr, [sp, #12]
 800c77e:	e7cc      	b.n	800c71a <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c780:	4650      	mov	r0, sl
 800c782:	9901      	ldr	r1, [sp, #4]
 800c784:	f011 0f02 	tst.w	r1, #2
 800c788:	d14c      	bne.n	800c824 <etharp_find_entry+0x134>
 800c78a:	2d0a      	cmp	r5, #10
 800c78c:	d01e      	beq.n	800c7cc <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c78e:	2d09      	cmp	r5, #9
 800c790:	dc1f      	bgt.n	800c7d2 <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c792:	462c      	mov	r4, r5
 800c794:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800c798:	4a27      	ldr	r2, [pc, #156]	; (800c838 <etharp_find_entry+0x148>)
 800c79a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c79e:	7d1b      	ldrb	r3, [r3, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d135      	bne.n	800c810 <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c7a4:	b136      	cbz	r6, 800c7b4 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c7a6:	6831      	ldr	r1, [r6, #0]
 800c7a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800c7ac:	4a22      	ldr	r2, [pc, #136]	; (800c838 <etharp_find_entry+0x148>)
 800c7ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c7b2:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800c7b4:	4b20      	ldr	r3, [pc, #128]	; (800c838 <etharp_find_entry+0x148>)
 800c7b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800c7ba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800c7be:	2100      	movs	r1, #0
 800c7c0:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800c7c2:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	b005      	add	sp, #20
 800c7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c7cc:	f011 0f01 	tst.w	r1, #1
 800c7d0:	d02b      	beq.n	800c82a <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 800c7d2:	f1b8 0f09 	cmp.w	r8, #9
 800c7d6:	dc11      	bgt.n	800c7fc <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c7d8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800c7dc:	4a16      	ldr	r2, [pc, #88]	; (800c838 <etharp_find_entry+0x148>)
 800c7de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c7e2:	b133      	cbz	r3, 800c7f2 <etharp_find_entry+0x102>
 800c7e4:	4b15      	ldr	r3, [pc, #84]	; (800c83c <etharp_find_entry+0x14c>)
 800c7e6:	f240 126d 	movw	r2, #365	; 0x16d
 800c7ea:	4915      	ldr	r1, [pc, #84]	; (800c840 <etharp_find_entry+0x150>)
 800c7ec:	4815      	ldr	r0, [pc, #84]	; (800c844 <etharp_find_entry+0x154>)
 800c7ee:	f001 fdd7 	bl	800e3a0 <iprintf>
    etharp_free_entry(i);
 800c7f2:	4640      	mov	r0, r8
 800c7f4:	f7ff ff62 	bl	800c6bc <etharp_free_entry>
 800c7f8:	4645      	mov	r5, r8
 800c7fa:	e7ca      	b.n	800c792 <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c7fc:	9b03      	ldr	r3, [sp, #12]
 800c7fe:	2b09      	cmp	r3, #9
 800c800:	dd16      	ble.n	800c830 <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c802:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 800c804:	bfc8      	it	gt
 800c806:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c80a:	dcdb      	bgt.n	800c7c4 <etharp_find_entry+0xd4>
 800c80c:	4680      	mov	r8, r0
 800c80e:	e7f0      	b.n	800c7f2 <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c810:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <etharp_find_entry+0x14c>)
 800c812:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800c816:	490c      	ldr	r1, [pc, #48]	; (800c848 <etharp_find_entry+0x158>)
 800c818:	480a      	ldr	r0, [pc, #40]	; (800c844 <etharp_find_entry+0x154>)
 800c81a:	f001 fdc1 	bl	800e3a0 <iprintf>
 800c81e:	e7c1      	b.n	800c7a4 <etharp_find_entry+0xb4>
 800c820:	4675      	mov	r5, lr
 800c822:	e7cf      	b.n	800c7c4 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 800c824:	f04f 35ff 	mov.w	r5, #4294967295
 800c828:	e7cc      	b.n	800c7c4 <etharp_find_entry+0xd4>
 800c82a:	f04f 35ff 	mov.w	r5, #4294967295
 800c82e:	e7c9      	b.n	800c7c4 <etharp_find_entry+0xd4>
 800c830:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c834:	e7dd      	b.n	800c7f2 <etharp_find_entry+0x102>
 800c836:	bf00      	nop
 800c838:	20010cd0 	.word	0x20010cd0
 800c83c:	0801253c 	.word	0x0801253c
 800c840:	08012574 	.word	0x08012574
 800c844:	0800f6b8 	.word	0x0800f6b8
 800c848:	0801258c 	.word	0x0801258c

0800c84c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c850:	b082      	sub	sp, #8
 800c852:	460f      	mov	r7, r1
 800c854:	4690      	mov	r8, r2
 800c856:	461d      	mov	r5, r3
 800c858:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c85c:	4681      	mov	r9, r0
 800c85e:	2800      	cmp	r0, #0
 800c860:	d042      	beq.n	800c8e8 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c866:	211c      	movs	r1, #28
 800c868:	200e      	movs	r0, #14
 800c86a:	f7fb fa6b 	bl	8007d44 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c86e:	4606      	mov	r6, r0
 800c870:	2800      	cmp	r0, #0
 800c872:	d051      	beq.n	800c918 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c874:	8943      	ldrh	r3, [r0, #10]
 800c876:	2b1b      	cmp	r3, #27
 800c878:	d93e      	bls.n	800c8f8 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c87a:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c87c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800c880:	f7fa fb5a 	bl	8006f38 <lwip_htons>
 800c884:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c886:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 800c88a:	2b06      	cmp	r3, #6
 800c88c:	d13c      	bne.n	800c908 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c88e:	682b      	ldr	r3, [r5, #0]
 800c890:	60a3      	str	r3, [r4, #8]
 800c892:	88ab      	ldrh	r3, [r5, #4]
 800c894:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c896:	f8da 3000 	ldr.w	r3, [sl]
 800c89a:	f8c4 3012 	str.w	r3, [r4, #18]
 800c89e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800c8a2:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c8a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c8ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c8b2:	2500      	movs	r5, #0
 800c8b4:	7025      	strb	r5, [r4, #0]
 800c8b6:	2301      	movs	r3, #1
 800c8b8:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c8ba:	2308      	movs	r3, #8
 800c8bc:	70a3      	strb	r3, [r4, #2]
 800c8be:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c8c0:	2306      	movs	r3, #6
 800c8c2:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c8c4:	2304      	movs	r3, #4
 800c8c6:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c8c8:	f640 0306 	movw	r3, #2054	; 0x806
 800c8cc:	9300      	str	r3, [sp, #0]
 800c8ce:	4643      	mov	r3, r8
 800c8d0:	463a      	mov	r2, r7
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	4648      	mov	r0, r9
 800c8d6:	f001 faa9 	bl	800de2c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7fb f9c2 	bl	8007c64 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800c8e0:	4628      	mov	r0, r5
}
 800c8e2:	b002      	add	sp, #8
 800c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c8e8:	4b0d      	ldr	r3, [pc, #52]	; (800c920 <etharp_raw+0xd4>)
 800c8ea:	f240 4257 	movw	r2, #1111	; 0x457
 800c8ee:	490d      	ldr	r1, [pc, #52]	; (800c924 <etharp_raw+0xd8>)
 800c8f0:	480d      	ldr	r0, [pc, #52]	; (800c928 <etharp_raw+0xdc>)
 800c8f2:	f001 fd55 	bl	800e3a0 <iprintf>
 800c8f6:	e7b4      	b.n	800c862 <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c8f8:	4b09      	ldr	r3, [pc, #36]	; (800c920 <etharp_raw+0xd4>)
 800c8fa:	f240 4262 	movw	r2, #1122	; 0x462
 800c8fe:	490b      	ldr	r1, [pc, #44]	; (800c92c <etharp_raw+0xe0>)
 800c900:	4809      	ldr	r0, [pc, #36]	; (800c928 <etharp_raw+0xdc>)
 800c902:	f001 fd4d 	bl	800e3a0 <iprintf>
 800c906:	e7b8      	b.n	800c87a <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c908:	4b05      	ldr	r3, [pc, #20]	; (800c920 <etharp_raw+0xd4>)
 800c90a:	f240 4269 	movw	r2, #1129	; 0x469
 800c90e:	4908      	ldr	r1, [pc, #32]	; (800c930 <etharp_raw+0xe4>)
 800c910:	4805      	ldr	r0, [pc, #20]	; (800c928 <etharp_raw+0xdc>)
 800c912:	f001 fd45 	bl	800e3a0 <iprintf>
 800c916:	e7ba      	b.n	800c88e <etharp_raw+0x42>
    return ERR_MEM;
 800c918:	f04f 30ff 	mov.w	r0, #4294967295
 800c91c:	e7e1      	b.n	800c8e2 <etharp_raw+0x96>
 800c91e:	bf00      	nop
 800c920:	0801253c 	.word	0x0801253c
 800c924:	0800f6a8 	.word	0x0800f6a8
 800c928:	0800f6b8 	.word	0x0800f6b8
 800c92c:	080125b8 	.word	0x080125b8
 800c930:	080125ec 	.word	0x080125ec

0800c934 <etharp_cleanup_netif>:
{
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c938:	4c08      	ldr	r4, [pc, #32]	; (800c95c <etharp_cleanup_netif+0x28>)
 800c93a:	2500      	movs	r5, #0
 800c93c:	e003      	b.n	800c946 <etharp_cleanup_netif+0x12>
 800c93e:	3501      	adds	r5, #1
 800c940:	3418      	adds	r4, #24
 800c942:	2d0a      	cmp	r5, #10
 800c944:	d009      	beq.n	800c95a <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c946:	7d23      	ldrb	r3, [r4, #20]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d0f8      	beq.n	800c93e <etharp_cleanup_netif+0xa>
 800c94c:	68a3      	ldr	r3, [r4, #8]
 800c94e:	42b3      	cmp	r3, r6
 800c950:	d1f5      	bne.n	800c93e <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 800c952:	4628      	mov	r0, r5
 800c954:	f7ff feb2 	bl	800c6bc <etharp_free_entry>
 800c958:	e7f1      	b.n	800c93e <etharp_cleanup_netif+0xa>
}
 800c95a:	bd70      	pop	{r4, r5, r6, pc}
 800c95c:	20010cd0 	.word	0x20010cd0

0800c960 <etharp_input>:
{
 800c960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c964:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c966:	b1a9      	cbz	r1, 800c994 <etharp_input+0x34>
 800c968:	4604      	mov	r4, r0
 800c96a:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800c96c:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800c96e:	882b      	ldrh	r3, [r5, #0]
 800c970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c974:	d108      	bne.n	800c988 <etharp_input+0x28>
 800c976:	792b      	ldrb	r3, [r5, #4]
 800c978:	2b06      	cmp	r3, #6
 800c97a:	d105      	bne.n	800c988 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c97c:	796b      	ldrb	r3, [r5, #5]
 800c97e:	2b04      	cmp	r3, #4
 800c980:	d102      	bne.n	800c988 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c982:	886b      	ldrh	r3, [r5, #2]
 800c984:	2b08      	cmp	r3, #8
 800c986:	d00d      	beq.n	800c9a4 <etharp_input+0x44>
    pbuf_free(p);
 800c988:	4620      	mov	r0, r4
 800c98a:	f7fb f96b 	bl	8007c64 <pbuf_free>
}
 800c98e:	b007      	add	sp, #28
 800c990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c994:	4b44      	ldr	r3, [pc, #272]	; (800caa8 <etharp_input+0x148>)
 800c996:	f240 228a 	movw	r2, #650	; 0x28a
 800c99a:	4944      	ldr	r1, [pc, #272]	; (800caac <etharp_input+0x14c>)
 800c99c:	4844      	ldr	r0, [pc, #272]	; (800cab0 <etharp_input+0x150>)
 800c99e:	f001 fcff 	bl	800e3a0 <iprintf>
 800c9a2:	e7f4      	b.n	800c98e <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800c9a4:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800c9a8:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800c9aa:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9ac:	684b      	ldr	r3, [r1, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d153      	bne.n	800ca5a <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9b2:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 800c9b6:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c9ba:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c9be:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800c9c2:	2b06      	cmp	r3, #6
 800c9c4:	d155      	bne.n	800ca72 <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 800c9c6:	9805      	ldr	r0, [sp, #20]
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d03e      	beq.n	800ca4a <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9cc:	4631      	mov	r1, r6
 800c9ce:	f000 fd5c 	bl	800d48a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	d139      	bne.n	800ca4a <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 800c9d6:	9b05      	ldr	r3, [sp, #20]
 800c9d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c9dc:	2be0      	cmp	r3, #224	; 0xe0
 800c9de:	d034      	beq.n	800ca4a <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 800c9e0:	4632      	mov	r2, r6
 800c9e2:	4641      	mov	r1, r8
 800c9e4:	a805      	add	r0, sp, #20
 800c9e6:	f7ff fe83 	bl	800c6f0 <etharp_find_entry>
  if (i < 0) {
 800c9ea:	1e03      	subs	r3, r0, #0
 800c9ec:	db2d      	blt.n	800ca4a <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c9ee:	4931      	ldr	r1, [pc, #196]	; (800cab4 <etharp_input+0x154>)
 800c9f0:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 800c9f4:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 800c9fe:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ca02:	4672      	mov	r2, lr
 800ca04:	00d2      	lsls	r2, r2, #3
 800ca06:	320c      	adds	r2, #12
 800ca08:	eb01 0802 	add.w	r8, r1, r2
 800ca0c:	6838      	ldr	r0, [r7, #0]
 800ca0e:	5088      	str	r0, [r1, r2]
 800ca10:	88ba      	ldrh	r2, [r7, #4]
 800ca12:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 800ca16:	2200      	movs	r2, #0
 800ca18:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 800ca1c:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 800ca20:	f1b8 0f00 	cmp.w	r8, #0
 800ca24:	d011      	beq.n	800ca4a <etharp_input+0xea>
    arp_table[i].q = NULL;
 800ca26:	4673      	mov	r3, lr
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	460a      	mov	r2, r1
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ca30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	463b      	mov	r3, r7
 800ca38:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800ca3c:	4641      	mov	r1, r8
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f001 f9f4 	bl	800de2c <ethernet_output>
    pbuf_free(p);
 800ca44:	4640      	mov	r0, r8
 800ca46:	f7fb f90d 	bl	8007c64 <pbuf_free>
  switch (hdr->opcode) {
 800ca4a:	88eb      	ldrh	r3, [r5, #6]
 800ca4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca50:	d017      	beq.n	800ca82 <etharp_input+0x122>
  pbuf_free(p);
 800ca52:	4620      	mov	r0, r4
 800ca54:	f7fb f906 	bl	8007c64 <pbuf_free>
 800ca58:	e799      	b.n	800c98e <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca5a:	f105 0708 	add.w	r7, r5, #8
 800ca5e:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ca60:	bf19      	ittee	ne
 800ca62:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca66:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ca6a:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ca6e:	46c8      	moveq	r8, r9
 800ca70:	e7a5      	b.n	800c9be <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ca72:	4b0d      	ldr	r3, [pc, #52]	; (800caa8 <etharp_input+0x148>)
 800ca74:	f240 12a9 	movw	r2, #425	; 0x1a9
 800ca78:	490f      	ldr	r1, [pc, #60]	; (800cab8 <etharp_input+0x158>)
 800ca7a:	480d      	ldr	r0, [pc, #52]	; (800cab0 <etharp_input+0x150>)
 800ca7c:	f001 fc90 	bl	800e3a0 <iprintf>
 800ca80:	e7a1      	b.n	800c9c6 <etharp_input+0x66>
      if (for_us) {
 800ca82:	f1b9 0f00 	cmp.w	r9, #0
 800ca86:	d0e4      	beq.n	800ca52 <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ca88:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 800ca8c:	2302      	movs	r3, #2
 800ca8e:	9303      	str	r3, [sp, #12]
 800ca90:	ab05      	add	r3, sp, #20
 800ca92:	9302      	str	r3, [sp, #8]
 800ca94:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ca96:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	463a      	mov	r2, r7
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7ff fed4 	bl	800c84c <etharp_raw>
 800caa4:	e7d5      	b.n	800ca52 <etharp_input+0xf2>
 800caa6:	bf00      	nop
 800caa8:	0801253c 	.word	0x0801253c
 800caac:	0800f6a8 	.word	0x0800f6a8
 800cab0:	0800f6b8 	.word	0x0800f6b8
 800cab4:	20010cd0 	.word	0x20010cd0
 800cab8:	08012650 	.word	0x08012650

0800cabc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800cabc:	b510      	push	{r4, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cac2:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800cac6:	2401      	movs	r4, #1
 800cac8:	9403      	str	r4, [sp, #12]
 800caca:	9102      	str	r1, [sp, #8]
 800cacc:	4904      	ldr	r1, [pc, #16]	; (800cae0 <etharp_request+0x24>)
 800cace:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cad0:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cad2:	9200      	str	r2, [sp, #0]
 800cad4:	4a03      	ldr	r2, [pc, #12]	; (800cae4 <etharp_request+0x28>)
 800cad6:	4619      	mov	r1, r3
 800cad8:	f7ff feb8 	bl	800c84c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800cadc:	b004      	add	sp, #16
 800cade:	bd10      	pop	{r4, pc}
 800cae0:	08012a24 	.word	0x08012a24
 800cae4:	08012a1c 	.word	0x08012a1c

0800cae8 <etharp_tmr>:
{
 800cae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800caea:	4c14      	ldr	r4, [pc, #80]	; (800cb3c <etharp_tmr+0x54>)
 800caec:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800caee:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800caf0:	2604      	movs	r6, #4
 800caf2:	e008      	b.n	800cb06 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d91b      	bls.n	800cb30 <etharp_tmr+0x48>
        etharp_free_entry(i);
 800caf8:	4628      	mov	r0, r5
 800cafa:	f7ff fddf 	bl	800c6bc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cafe:	3501      	adds	r5, #1
 800cb00:	3418      	adds	r4, #24
 800cb02:	2d0a      	cmp	r5, #10
 800cb04:	d018      	beq.n	800cb38 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 800cb06:	4621      	mov	r1, r4
 800cb08:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	d0f7      	beq.n	800cafe <etharp_tmr+0x16>
      arp_table[i].ctime++;
 800cb0e:	89e3      	ldrh	r3, [r4, #14]
 800cb10:	3301      	adds	r3, #1
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800cb16:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800cb1a:	d2ed      	bcs.n	800caf8 <etharp_tmr+0x10>
 800cb1c:	2a01      	cmp	r2, #1
 800cb1e:	d0e9      	beq.n	800caf4 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800cb20:	2a03      	cmp	r2, #3
 800cb22:	d003      	beq.n	800cb2c <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800cb24:	2a04      	cmp	r2, #4
 800cb26:	d1ea      	bne.n	800cafe <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800cb28:	7427      	strb	r7, [r4, #16]
 800cb2a:	e7e8      	b.n	800cafe <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800cb2c:	7426      	strb	r6, [r4, #16]
 800cb2e:	e7e6      	b.n	800cafe <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800cb30:	6860      	ldr	r0, [r4, #4]
 800cb32:	f7ff ffc3 	bl	800cabc <etharp_request>
 800cb36:	e7e2      	b.n	800cafe <etharp_tmr+0x16>
}
 800cb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb3a:	bf00      	nop
 800cb3c:	20010cd4 	.word	0x20010cd4

0800cb40 <etharp_output_to_arp_index>:
{
 800cb40:	b570      	push	{r4, r5, r6, lr}
 800cb42:	b084      	sub	sp, #16
 800cb44:	4605      	mov	r5, r0
 800cb46:	460e      	mov	r6, r1
 800cb48:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cb4a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800cb4e:	4b32      	ldr	r3, [pc, #200]	; (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cb50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb54:	7d1b      	ldrb	r3, [r3, #20]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d919      	bls.n	800cb8e <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800cb5a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cb5e:	4a2e      	ldr	r2, [pc, #184]	; (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cb60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	2b02      	cmp	r3, #2
 800cb68:	d019      	beq.n	800cb9e <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800cb6a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800cb6e:	4b2a      	ldr	r3, [pc, #168]	; (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cb70:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800cb74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cb78:	9300      	str	r3, [sp, #0]
 800cb7a:	f104 030c 	add.w	r3, r4, #12
 800cb7e:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800cb82:	4631      	mov	r1, r6
 800cb84:	4628      	mov	r0, r5
 800cb86:	f001 f951 	bl	800de2c <ethernet_output>
}
 800cb8a:	b004      	add	sp, #16
 800cb8c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800cb8e:	4b23      	ldr	r3, [pc, #140]	; (800cc1c <etharp_output_to_arp_index+0xdc>)
 800cb90:	f240 22ee 	movw	r2, #750	; 0x2ee
 800cb94:	4922      	ldr	r1, [pc, #136]	; (800cc20 <etharp_output_to_arp_index+0xe0>)
 800cb96:	4823      	ldr	r0, [pc, #140]	; (800cc24 <etharp_output_to_arp_index+0xe4>)
 800cb98:	f001 fc02 	bl	800e3a0 <iprintf>
 800cb9c:	e7dd      	b.n	800cb5a <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800cb9e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cba2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cba6:	8a5b      	ldrh	r3, [r3, #18]
 800cba8:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800cbac:	d822      	bhi.n	800cbf4 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800cbae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800cbb2:	d3da      	bcc.n	800cb6a <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbb4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800cbb8:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbba:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbbe:	4a16      	ldr	r2, [pc, #88]	; (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cbc0:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbc8:	3004      	adds	r0, #4
 800cbca:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbcc:	9002      	str	r0, [sp, #8]
 800cbce:	4b16      	ldr	r3, [pc, #88]	; (800cc28 <etharp_output_to_arp_index+0xe8>)
 800cbd0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800cbd2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	460b      	mov	r3, r1
 800cbd8:	4462      	add	r2, ip
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f7ff fe36 	bl	800c84c <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d1c2      	bne.n	800cb6a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cbe4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cbe8:	4a0b      	ldr	r2, [pc, #44]	; (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cbea:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cbee:	2203      	movs	r2, #3
 800cbf0:	751a      	strb	r2, [r3, #20]
 800cbf2:	e7ba      	b.n	800cb6a <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800cbf4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800cbf8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800cbfc:	3104      	adds	r1, #4
 800cbfe:	4628      	mov	r0, r5
 800cc00:	f7ff ff5c 	bl	800cabc <etharp_request>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d1b0      	bne.n	800cb6a <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800cc08:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cc0c:	4a02      	ldr	r2, [pc, #8]	; (800cc18 <etharp_output_to_arp_index+0xd8>)
 800cc0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc12:	2203      	movs	r2, #3
 800cc14:	751a      	strb	r2, [r3, #20]
 800cc16:	e7a8      	b.n	800cb6a <etharp_output_to_arp_index+0x2a>
 800cc18:	20010cd0 	.word	0x20010cd0
 800cc1c:	0801253c 	.word	0x0801253c
 800cc20:	08012674 	.word	0x08012674
 800cc24:	0800f6b8 	.word	0x0800f6b8
 800cc28:	08012a24 	.word	0x08012a24

0800cc2c <etharp_query>:
{
 800cc2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc30:	b083      	sub	sp, #12
 800cc32:	4606      	mov	r6, r0
 800cc34:	460d      	mov	r5, r1
 800cc36:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc38:	4601      	mov	r1, r0
 800cc3a:	6828      	ldr	r0, [r5, #0]
 800cc3c:	f000 fc25 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d16b      	bne.n	800cd1c <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 800cc44:	682b      	ldr	r3, [r5, #0]
 800cc46:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800cc4a:	2ae0      	cmp	r2, #224	; 0xe0
 800cc4c:	d069      	beq.n	800cd22 <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d06a      	beq.n	800cd28 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cc52:	4632      	mov	r2, r6
 800cc54:	2101      	movs	r1, #1
 800cc56:	4628      	mov	r0, r5
 800cc58:	f7ff fd4a 	bl	800c6f0 <etharp_find_entry>
  if (i_err < 0) {
 800cc5c:	1e04      	subs	r4, r0, #0
 800cc5e:	db2b      	blt.n	800ccb8 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800cc60:	b2a3      	uxth	r3, r4
 800cc62:	2b7e      	cmp	r3, #126	; 0x7e
 800cc64:	d82a      	bhi.n	800ccbc <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 800cc66:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cc68:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800cc6c:	4b46      	ldr	r3, [pc, #280]	; (800cd88 <etharp_query+0x15c>)
 800cc6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc72:	7d1b      	ldrb	r3, [r3, #20]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f040 8082 	bne.w	800cd7e <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	4a42      	ldr	r2, [pc, #264]	; (800cd88 <etharp_query+0x15c>)
 800cc7e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc82:	2201      	movs	r2, #1
 800cc84:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 800cc86:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800cc88:	4629      	mov	r1, r5
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7ff ff16 	bl	800cabc <etharp_request>
    if (q == NULL) {
 800cc90:	b36f      	cbz	r7, 800ccee <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cc92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cc96:	4a3c      	ldr	r2, [pc, #240]	; (800cd88 <etharp_query+0x15c>)
 800cc98:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cc9c:	7d1b      	ldrb	r3, [r3, #20]
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d814      	bhi.n	800cccc <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d123      	bne.n	800ccee <etharp_query+0xc2>
    while (p) {
 800cca6:	2f00      	cmp	r7, #0
 800cca8:	d044      	beq.n	800cd34 <etharp_query+0x108>
    p = q;
 800ccaa:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800ccac:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800cd90 <etharp_query+0x164>
 800ccb0:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800cd9c <etharp_query+0x170>
 800ccb4:	4e35      	ldr	r6, [pc, #212]	; (800cd8c <etharp_query+0x160>)
 800ccb6:	e023      	b.n	800cd00 <etharp_query+0xd4>
    return (err_t)i_err;
 800ccb8:	b260      	sxtb	r0, r4
 800ccba:	e018      	b.n	800ccee <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800ccbc:	4b34      	ldr	r3, [pc, #208]	; (800cd90 <etharp_query+0x164>)
 800ccbe:	f240 32c1 	movw	r2, #961	; 0x3c1
 800ccc2:	4934      	ldr	r1, [pc, #208]	; (800cd94 <etharp_query+0x168>)
 800ccc4:	4831      	ldr	r0, [pc, #196]	; (800cd8c <etharp_query+0x160>)
 800ccc6:	f001 fb6b 	bl	800e3a0 <iprintf>
 800ccca:	e7cc      	b.n	800cc66 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 800cccc:	4b32      	ldr	r3, [pc, #200]	; (800cd98 <etharp_query+0x16c>)
 800ccce:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800ccd0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800ccd4:	4b2c      	ldr	r3, [pc, #176]	; (800cd88 <etharp_query+0x15c>)
 800ccd6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ccda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ccde:	9200      	str	r2, [sp, #0]
 800cce0:	330c      	adds	r3, #12
 800cce2:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800cce6:	4639      	mov	r1, r7
 800cce8:	4630      	mov	r0, r6
 800ccea:	f001 f89f 	bl	800de2c <ethernet_output>
}
 800ccee:	b003      	add	sp, #12
 800ccf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 800ccf4:	7b2b      	ldrb	r3, [r5, #12]
 800ccf6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ccfa:	d128      	bne.n	800cd4e <etharp_query+0x122>
      p = p->next;
 800ccfc:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800ccfe:	b1cd      	cbz	r5, 800cd34 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cd00:	896a      	ldrh	r2, [r5, #10]
 800cd02:	892b      	ldrh	r3, [r5, #8]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d1f5      	bne.n	800ccf4 <etharp_query+0xc8>
 800cd08:	682b      	ldr	r3, [r5, #0]
 800cd0a:	b1e3      	cbz	r3, 800cd46 <etharp_query+0x11a>
 800cd0c:	464b      	mov	r3, r9
 800cd0e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800cd12:	4641      	mov	r1, r8
 800cd14:	4630      	mov	r0, r6
 800cd16:	f001 fb43 	bl	800e3a0 <iprintf>
 800cd1a:	e7eb      	b.n	800ccf4 <etharp_query+0xc8>
    return ERR_ARG;
 800cd1c:	f06f 000f 	mvn.w	r0, #15
 800cd20:	e7e5      	b.n	800ccee <etharp_query+0xc2>
 800cd22:	f06f 000f 	mvn.w	r0, #15
 800cd26:	e7e2      	b.n	800ccee <etharp_query+0xc2>
 800cd28:	f06f 000f 	mvn.w	r0, #15
 800cd2c:	e7df      	b.n	800ccee <etharp_query+0xc2>
      result = ERR_MEM;
 800cd2e:	f04f 30ff 	mov.w	r0, #4294967295
 800cd32:	e7dc      	b.n	800ccee <etharp_query+0xc2>
      pbuf_ref(p);
 800cd34:	4638      	mov	r0, r7
 800cd36:	f7fb f919 	bl	8007f6c <pbuf_ref>
 800cd3a:	e00f      	b.n	800cd5c <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 800cd3c:	4629      	mov	r1, r5
 800cd3e:	4630      	mov	r0, r6
 800cd40:	f7ff febc 	bl	800cabc <etharp_request>
    if (q == NULL) {
 800cd44:	e7d3      	b.n	800ccee <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 800cd46:	7b2b      	ldrb	r3, [r5, #12]
 800cd48:	f013 0f40 	tst.w	r3, #64	; 0x40
 800cd4c:	d0f2      	beq.n	800cd34 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800cd4e:	463a      	mov	r2, r7
 800cd50:	f44f 7120 	mov.w	r1, #640	; 0x280
 800cd54:	200e      	movs	r0, #14
 800cd56:	f7fb fa53 	bl	8008200 <pbuf_clone>
 800cd5a:	4607      	mov	r7, r0
    if (p != NULL) {
 800cd5c:	2f00      	cmp	r7, #0
 800cd5e:	d0e6      	beq.n	800cd2e <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 800cd60:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <etharp_query+0x15c>)
 800cd66:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800cd6a:	b108      	cbz	r0, 800cd70 <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 800cd6c:	f7fa ff7a 	bl	8007c64 <pbuf_free>
      arp_table[i].q = p;
 800cd70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800cd74:	4a04      	ldr	r2, [pc, #16]	; (800cd88 <etharp_query+0x15c>)
 800cd76:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 800cd7a:	2000      	movs	r0, #0
 800cd7c:	e7b7      	b.n	800ccee <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800cd7e:	2f00      	cmp	r7, #0
 800cd80:	d0dc      	beq.n	800cd3c <etharp_query+0x110>
  err_t result = ERR_MEM;
 800cd82:	f04f 30ff 	mov.w	r0, #4294967295
 800cd86:	e784      	b.n	800cc92 <etharp_query+0x66>
 800cd88:	20010cd0 	.word	0x20010cd0
 800cd8c:	0800f6b8 	.word	0x0800f6b8
 800cd90:	0801253c 	.word	0x0801253c
 800cd94:	080126a4 	.word	0x080126a4
 800cd98:	20010dc0 	.word	0x20010dc0
 800cd9c:	080126b4 	.word	0x080126b4

0800cda0 <etharp_output>:
{
 800cda0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cda2:	b085      	sub	sp, #20
 800cda4:	460e      	mov	r6, r1
 800cda6:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cda8:	4605      	mov	r5, r0
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d032      	beq.n	800ce14 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 800cdae:	2e00      	cmp	r6, #0
 800cdb0:	d038      	beq.n	800ce24 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800cdb2:	2c00      	cmp	r4, #0
 800cdb4:	d03e      	beq.n	800ce34 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	6820      	ldr	r0, [r4, #0]
 800cdba:	f000 fb66 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f040 8082 	bne.w	800cec8 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cdca:	2ae0      	cmp	r2, #224	; 0xe0
 800cdcc:	d03a      	beq.n	800ce44 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cdce:	686a      	ldr	r2, [r5, #4]
 800cdd0:	405a      	eors	r2, r3
 800cdd2:	68a9      	ldr	r1, [r5, #8]
 800cdd4:	420a      	tst	r2, r1
 800cdd6:	d009      	beq.n	800cdec <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800cdd8:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800cdda:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d004      	beq.n	800cdec <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800cde2:	68eb      	ldr	r3, [r5, #12]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d07b      	beq.n	800cee0 <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800cde8:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800cdec:	4b3e      	ldr	r3, [pc, #248]	; (800cee8 <etharp_output+0x148>)
 800cdee:	781a      	ldrb	r2, [r3, #0]
 800cdf0:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800cdf4:	4b3d      	ldr	r3, [pc, #244]	; (800ceec <etharp_output+0x14c>)
 800cdf6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800cdfa:	7d1b      	ldrb	r3, [r3, #20]
 800cdfc:	2b01      	cmp	r3, #1
 800cdfe:	d906      	bls.n	800ce0e <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ce00:	460b      	mov	r3, r1
 800ce02:	493a      	ldr	r1, [pc, #232]	; (800ceec <etharp_output+0x14c>)
 800ce04:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	42ab      	cmp	r3, r5
 800ce0c:	d030      	beq.n	800ce70 <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ce0e:	4b37      	ldr	r3, [pc, #220]	; (800ceec <etharp_output+0x14c>)
{
 800ce10:	2000      	movs	r0, #0
 800ce12:	e03f      	b.n	800ce94 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ce14:	4b36      	ldr	r3, [pc, #216]	; (800cef0 <etharp_output+0x150>)
 800ce16:	f240 321e 	movw	r2, #798	; 0x31e
 800ce1a:	4936      	ldr	r1, [pc, #216]	; (800cef4 <etharp_output+0x154>)
 800ce1c:	4836      	ldr	r0, [pc, #216]	; (800cef8 <etharp_output+0x158>)
 800ce1e:	f001 fabf 	bl	800e3a0 <iprintf>
 800ce22:	e7c4      	b.n	800cdae <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ce24:	4b32      	ldr	r3, [pc, #200]	; (800cef0 <etharp_output+0x150>)
 800ce26:	f240 321f 	movw	r2, #799	; 0x31f
 800ce2a:	4934      	ldr	r1, [pc, #208]	; (800cefc <etharp_output+0x15c>)
 800ce2c:	4832      	ldr	r0, [pc, #200]	; (800cef8 <etharp_output+0x158>)
 800ce2e:	f001 fab7 	bl	800e3a0 <iprintf>
 800ce32:	e7be      	b.n	800cdb2 <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ce34:	4b2e      	ldr	r3, [pc, #184]	; (800cef0 <etharp_output+0x150>)
 800ce36:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ce3a:	4931      	ldr	r1, [pc, #196]	; (800cf00 <etharp_output+0x160>)
 800ce3c:	482e      	ldr	r0, [pc, #184]	; (800cef8 <etharp_output+0x158>)
 800ce3e:	f001 faaf 	bl	800e3a0 <iprintf>
 800ce42:	e7b8      	b.n	800cdb6 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ce44:	2301      	movs	r3, #1
 800ce46:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ce50:	235e      	movs	r3, #94	; 0x5e
 800ce52:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ce56:	7863      	ldrb	r3, [r4, #1]
 800ce58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce5c:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ce60:	78a3      	ldrb	r3, [r4, #2]
 800ce62:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ce66:	78e3      	ldrb	r3, [r4, #3]
 800ce68:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800ce6c:	ab02      	add	r3, sp, #8
 800ce6e:	e02c      	b.n	800ceca <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800ce70:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ce74:	491d      	ldr	r1, [pc, #116]	; (800ceec <etharp_output+0x14c>)
 800ce76:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 800ce7a:	6821      	ldr	r1, [r4, #0]
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	4299      	cmp	r1, r3
 800ce80:	d1c5      	bne.n	800ce0e <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800ce82:	4631      	mov	r1, r6
 800ce84:	4628      	mov	r0, r5
 800ce86:	f7ff fe5b 	bl	800cb40 <etharp_output_to_arp_index>
 800ce8a:	e027      	b.n	800cedc <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ce8c:	3001      	adds	r0, #1
 800ce8e:	3318      	adds	r3, #24
 800ce90:	280a      	cmp	r0, #10
 800ce92:	d013      	beq.n	800cebc <etharp_output+0x11c>
 800ce94:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800ce96:	f893 c014 	ldrb.w	ip, [r3, #20]
 800ce9a:	f1bc 0f01 	cmp.w	ip, #1
 800ce9e:	d9f5      	bls.n	800ce8c <etharp_output+0xec>
 800cea0:	6899      	ldr	r1, [r3, #8]
 800cea2:	42a9      	cmp	r1, r5
 800cea4:	d1f2      	bne.n	800ce8c <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 800cea6:	6821      	ldr	r1, [r4, #0]
 800cea8:	685f      	ldr	r7, [r3, #4]
 800ceaa:	42b9      	cmp	r1, r7
 800ceac:	d1ee      	bne.n	800ce8c <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 800ceae:	4b0e      	ldr	r3, [pc, #56]	; (800cee8 <etharp_output+0x148>)
 800ceb0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	4628      	mov	r0, r5
 800ceb6:	f7ff fe43 	bl	800cb40 <etharp_output_to_arp_index>
 800ceba:	e00f      	b.n	800cedc <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800cebc:	4632      	mov	r2, r6
 800cebe:	4621      	mov	r1, r4
 800cec0:	4628      	mov	r0, r5
 800cec2:	f7ff feb3 	bl	800cc2c <etharp_query>
 800cec6:	e009      	b.n	800cedc <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800cec8:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800ceca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cece:	9200      	str	r2, [sp, #0]
 800ced0:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800ced4:	4631      	mov	r1, r6
 800ced6:	4628      	mov	r0, r5
 800ced8:	f000 ffa8 	bl	800de2c <ethernet_output>
}
 800cedc:	b005      	add	sp, #20
 800cede:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800cee0:	f06f 0003 	mvn.w	r0, #3
 800cee4:	e7fa      	b.n	800cedc <etharp_output+0x13c>
 800cee6:	bf00      	nop
 800cee8:	20010dc0 	.word	0x20010dc0
 800ceec:	20010cd0 	.word	0x20010cd0
 800cef0:	0801253c 	.word	0x0801253c
 800cef4:	0800f6a8 	.word	0x0800f6a8
 800cef8:	0800f6b8 	.word	0x0800f6b8
 800cefc:	080126d0 	.word	0x080126d0
 800cf00:	08012630 	.word	0x08012630
 800cf04:	08012a1c 	.word	0x08012a1c

0800cf08 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800cf08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf0c:	b086      	sub	sp, #24
 800cf0e:	4606      	mov	r6, r0
 800cf10:	4688      	mov	r8, r1
 800cf12:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800cf14:	f44f 7220 	mov.w	r2, #640	; 0x280
 800cf18:	2124      	movs	r1, #36	; 0x24
 800cf1a:	2022      	movs	r0, #34	; 0x22
 800cf1c:	f7fa ff12 	bl	8007d44 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800cf20:	b3a0      	cbz	r0, 800cf8c <icmp_send_response+0x84>
 800cf22:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cf24:	8943      	ldrh	r3, [r0, #10]
 800cf26:	2b23      	cmp	r3, #35	; 0x23
 800cf28:	d933      	bls.n	800cf92 <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800cf2a:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800cf2e:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800cf30:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800cf34:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	7123      	strb	r3, [r4, #4]
 800cf3a:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800cf3c:	71a3      	strb	r3, [r4, #6]
 800cf3e:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800cf40:	686b      	ldr	r3, [r5, #4]
 800cf42:	6872      	ldr	r2, [r6, #4]
 800cf44:	6816      	ldr	r6, [r2, #0]
 800cf46:	6850      	ldr	r0, [r2, #4]
 800cf48:	6891      	ldr	r1, [r2, #8]
 800cf4a:	68d7      	ldr	r7, [r2, #12]
 800cf4c:	609e      	str	r6, [r3, #8]
 800cf4e:	60d8      	str	r0, [r3, #12]
 800cf50:	6119      	str	r1, [r3, #16]
 800cf52:	615f      	str	r7, [r3, #20]
 800cf54:	6916      	ldr	r6, [r2, #16]
 800cf56:	6950      	ldr	r0, [r2, #20]
 800cf58:	6991      	ldr	r1, [r2, #24]
 800cf5a:	619e      	str	r6, [r3, #24]
 800cf5c:	61d8      	str	r0, [r3, #28]
 800cf5e:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800cf60:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800cf64:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800cf66:	a805      	add	r0, sp, #20
 800cf68:	f000 f8ee 	bl	800d148 <ip4_route>
#endif
  if (netif != NULL) {
 800cf6c:	b158      	cbz	r0, 800cf86 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800cf6e:	2100      	movs	r1, #0
 800cf70:	70a1      	strb	r1, [r4, #2]
 800cf72:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800cf74:	9002      	str	r0, [sp, #8]
 800cf76:	2301      	movs	r3, #1
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	9100      	str	r1, [sp, #0]
 800cf7c:	23ff      	movs	r3, #255	; 0xff
 800cf7e:	aa05      	add	r2, sp, #20
 800cf80:	4628      	mov	r0, r5
 800cf82:	f000 fa6d 	bl	800d460 <ip4_output_if>
  }
  pbuf_free(q);
 800cf86:	4628      	mov	r0, r5
 800cf88:	f7fa fe6c 	bl	8007c64 <pbuf_free>
}
 800cf8c:	b006      	add	sp, #24
 800cf8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800cf92:	4b04      	ldr	r3, [pc, #16]	; (800cfa4 <icmp_send_response+0x9c>)
 800cf94:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800cf98:	4903      	ldr	r1, [pc, #12]	; (800cfa8 <icmp_send_response+0xa0>)
 800cf9a:	4804      	ldr	r0, [pc, #16]	; (800cfac <icmp_send_response+0xa4>)
 800cf9c:	f001 fa00 	bl	800e3a0 <iprintf>
 800cfa0:	e7c3      	b.n	800cf2a <icmp_send_response+0x22>
 800cfa2:	bf00      	nop
 800cfa4:	080126dc 	.word	0x080126dc
 800cfa8:	08012714 	.word	0x08012714
 800cfac:	0800f6b8 	.word	0x0800f6b8

0800cfb0 <icmp_input>:
{
 800cfb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cfb4:	b085      	sub	sp, #20
 800cfb6:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800cfb8:	4b4a      	ldr	r3, [pc, #296]	; (800d0e4 <icmp_input+0x134>)
 800cfba:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800cfbc:	783b      	ldrb	r3, [r7, #0]
 800cfbe:	f003 030f 	and.w	r3, r3, #15
 800cfc2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800cfc6:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800cfc8:	2c13      	cmp	r4, #19
 800cfca:	d915      	bls.n	800cff8 <icmp_input+0x48>
 800cfcc:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800cfce:	8943      	ldrh	r3, [r0, #10]
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	d911      	bls.n	800cff8 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800cfd4:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	2b08      	cmp	r3, #8
 800cfda:	d161      	bne.n	800d0a0 <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cfdc:	4b41      	ldr	r3, [pc, #260]	; (800d0e4 <icmp_input+0x134>)
 800cfde:	6958      	ldr	r0, [r3, #20]
 800cfe0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800cfe4:	2be0      	cmp	r3, #224	; 0xe0
 800cfe6:	d01a      	beq.n	800d01e <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800cfe8:	4b3e      	ldr	r3, [pc, #248]	; (800d0e4 <icmp_input+0x134>)
 800cfea:	6819      	ldr	r1, [r3, #0]
 800cfec:	f000 fa4d 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800cff0:	b9a8      	cbnz	r0, 800d01e <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800cff2:	892b      	ldrh	r3, [r5, #8]
 800cff4:	2b07      	cmp	r3, #7
 800cff6:	d805      	bhi.n	800d004 <icmp_input+0x54>
  pbuf_free(p);
 800cff8:	4628      	mov	r0, r5
 800cffa:	f7fa fe33 	bl	8007c64 <pbuf_free>
}
 800cffe:	b005      	add	sp, #20
 800d000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d004:	f108 090e 	add.w	r9, r8, #14
 800d008:	4649      	mov	r1, r9
 800d00a:	4628      	mov	r0, r5
 800d00c:	f7fa fde5 	bl	8007bda <pbuf_add_header>
 800d010:	2800      	cmp	r0, #0
 800d012:	d03a      	beq.n	800d08a <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d014:	892a      	ldrh	r2, [r5, #8]
 800d016:	1913      	adds	r3, r2, r4
 800d018:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800d01a:	428a      	cmp	r2, r1
 800d01c:	d903      	bls.n	800d026 <icmp_input+0x76>
  pbuf_free(p);
 800d01e:	4628      	mov	r0, r5
 800d020:	f7fa fe20 	bl	8007c64 <pbuf_free>
  return;
 800d024:	e7eb      	b.n	800cffe <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d026:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d02a:	200e      	movs	r0, #14
 800d02c:	f7fa fe8a 	bl	8007d44 <pbuf_alloc>
        if (r == NULL) {
 800d030:	4604      	mov	r4, r0
 800d032:	2800      	cmp	r0, #0
 800d034:	d0f3      	beq.n	800d01e <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d036:	8942      	ldrh	r2, [r0, #10]
 800d038:	f108 0308 	add.w	r3, r8, #8
 800d03c:	429a      	cmp	r2, r3
 800d03e:	d313      	bcc.n	800d068 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800d040:	4642      	mov	r2, r8
 800d042:	4639      	mov	r1, r7
 800d044:	6840      	ldr	r0, [r0, #4]
 800d046:	f001 f8e6 	bl	800e216 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800d04a:	4641      	mov	r1, r8
 800d04c:	4620      	mov	r0, r4
 800d04e:	f7fa fdc9 	bl	8007be4 <pbuf_remove_header>
 800d052:	b960      	cbnz	r0, 800d06e <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800d054:	4629      	mov	r1, r5
 800d056:	4620      	mov	r0, r4
 800d058:	f7fa ffe2 	bl	8008020 <pbuf_copy>
 800d05c:	b988      	cbnz	r0, 800d082 <icmp_input+0xd2>
        pbuf_free(p);
 800d05e:	4628      	mov	r0, r5
 800d060:	f7fa fe00 	bl	8007c64 <pbuf_free>
        p = r;
 800d064:	4625      	mov	r5, r4
 800d066:	e015      	b.n	800d094 <icmp_input+0xe4>
          pbuf_free(r);
 800d068:	f7fa fdfc 	bl	8007c64 <pbuf_free>
          goto icmperr;
 800d06c:	e7d7      	b.n	800d01e <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d06e:	4b1e      	ldr	r3, [pc, #120]	; (800d0e8 <icmp_input+0x138>)
 800d070:	22b6      	movs	r2, #182	; 0xb6
 800d072:	491e      	ldr	r1, [pc, #120]	; (800d0ec <icmp_input+0x13c>)
 800d074:	481e      	ldr	r0, [pc, #120]	; (800d0f0 <icmp_input+0x140>)
 800d076:	f001 f993 	bl	800e3a0 <iprintf>
          pbuf_free(r);
 800d07a:	4620      	mov	r0, r4
 800d07c:	f7fa fdf2 	bl	8007c64 <pbuf_free>
          goto icmperr;
 800d080:	e7cd      	b.n	800d01e <icmp_input+0x6e>
          pbuf_free(r);
 800d082:	4620      	mov	r0, r4
 800d084:	f7fa fdee 	bl	8007c64 <pbuf_free>
          goto icmperr;
 800d088:	e7c9      	b.n	800d01e <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d08a:	4649      	mov	r1, r9
 800d08c:	4628      	mov	r0, r5
 800d08e:	f7fa fda9 	bl	8007be4 <pbuf_remove_header>
 800d092:	b948      	cbnz	r0, 800d0a8 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d094:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800d096:	4641      	mov	r1, r8
 800d098:	4628      	mov	r0, r5
 800d09a:	f7fa fd9e 	bl	8007bda <pbuf_add_header>
 800d09e:	b150      	cbz	r0, 800d0b6 <icmp_input+0x106>
  pbuf_free(p);
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f7fa fddf 	bl	8007c64 <pbuf_free>
  return;
 800d0a6:	e7aa      	b.n	800cffe <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d0a8:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <icmp_input+0x138>)
 800d0aa:	22c7      	movs	r2, #199	; 0xc7
 800d0ac:	4911      	ldr	r1, [pc, #68]	; (800d0f4 <icmp_input+0x144>)
 800d0ae:	4810      	ldr	r0, [pc, #64]	; (800d0f0 <icmp_input+0x140>)
 800d0b0:	f001 f976 	bl	800e3a0 <iprintf>
          goto icmperr;
 800d0b4:	e7b3      	b.n	800d01e <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d0b6:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800d0b8:	490a      	ldr	r1, [pc, #40]	; (800d0e4 <icmp_input+0x134>)
 800d0ba:	694b      	ldr	r3, [r1, #20]
 800d0bc:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d0be:	690b      	ldr	r3, [r1, #16]
 800d0c0:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800d0c6:	70a2      	strb	r2, [r4, #2]
 800d0c8:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d0ca:	23ff      	movs	r3, #255	; 0xff
 800d0cc:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d0ce:	7282      	strb	r2, [r0, #10]
 800d0d0:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d0d2:	9602      	str	r6, [sp, #8]
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	9001      	str	r0, [sp, #4]
 800d0d8:	9200      	str	r2, [sp, #0]
 800d0da:	3114      	adds	r1, #20
 800d0dc:	4628      	mov	r0, r5
 800d0de:	f000 f9bf 	bl	800d460 <ip4_output_if>
        if (ret != ERR_OK) {
 800d0e2:	e7dd      	b.n	800d0a0 <icmp_input+0xf0>
 800d0e4:	2000b350 	.word	0x2000b350
 800d0e8:	080126dc 	.word	0x080126dc
 800d0ec:	08012740 	.word	0x08012740
 800d0f0:	0800f6b8 	.word	0x0800f6b8
 800d0f4:	08012778 	.word	0x08012778

0800d0f8 <icmp_dest_unreach>:
{
 800d0f8:	b508      	push	{r3, lr}
 800d0fa:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800d0fc:	2103      	movs	r1, #3
 800d0fe:	f7ff ff03 	bl	800cf08 <icmp_send_response>
}
 800d102:	bd08      	pop	{r3, pc}

0800d104 <icmp_time_exceeded>:
{
 800d104:	b508      	push	{r3, lr}
 800d106:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800d108:	210b      	movs	r1, #11
 800d10a:	f7ff fefd 	bl	800cf08 <icmp_send_response>
}
 800d10e:	bd08      	pop	{r3, pc}

0800d110 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800d110:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d112:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d116:	f013 0f01 	tst.w	r3, #1
 800d11a:	d00c      	beq.n	800d136 <ip4_input_accept+0x26>
 800d11c:	4601      	mov	r1, r0
 800d11e:	6843      	ldr	r3, [r0, #4]
 800d120:	b15b      	cbz	r3, 800d13a <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d122:	4a08      	ldr	r2, [pc, #32]	; (800d144 <ip4_input_accept+0x34>)
 800d124:	6950      	ldr	r0, [r2, #20]
 800d126:	4283      	cmp	r3, r0
 800d128:	d009      	beq.n	800d13e <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d12a:	f000 f9ae 	bl	800d48a <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d12e:	3800      	subs	r0, #0
 800d130:	bf18      	it	ne
 800d132:	2001      	movne	r0, #1
 800d134:	e000      	b.n	800d138 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800d136:	2000      	movs	r0, #0
}
 800d138:	bd08      	pop	{r3, pc}
  return 0;
 800d13a:	2000      	movs	r0, #0
 800d13c:	e7fc      	b.n	800d138 <ip4_input_accept+0x28>
      return 1;
 800d13e:	2001      	movs	r0, #1
 800d140:	e7fa      	b.n	800d138 <ip4_input_accept+0x28>
 800d142:	bf00      	nop
 800d144:	2000b350 	.word	0x2000b350

0800d148 <ip4_route>:
{
 800d148:	b410      	push	{r4}
 800d14a:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 800d14c:	4b1a      	ldr	r3, [pc, #104]	; (800d1b8 <ip4_route+0x70>)
 800d14e:	6818      	ldr	r0, [r3, #0]
 800d150:	b9a8      	cbnz	r0, 800d17e <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d152:	4b1a      	ldr	r3, [pc, #104]	; (800d1bc <ip4_route+0x74>)
 800d154:	6818      	ldr	r0, [r3, #0]
 800d156:	b160      	cbz	r0, 800d172 <ip4_route+0x2a>
 800d158:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d15c:	f003 0305 	and.w	r3, r3, #5
 800d160:	2b05      	cmp	r3, #5
 800d162:	d124      	bne.n	800d1ae <ip4_route+0x66>
 800d164:	6843      	ldr	r3, [r0, #4]
 800d166:	b323      	cbz	r3, 800d1b2 <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800d168:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 800d16c:	2b7f      	cmp	r3, #127	; 0x7f
 800d16e:	bf08      	it	eq
 800d170:	2000      	moveq	r0, #0
}
 800d172:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d176:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800d178:	6800      	ldr	r0, [r0, #0]
 800d17a:	2800      	cmp	r0, #0
 800d17c:	d0e9      	beq.n	800d152 <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d17e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800d182:	f013 0f01 	tst.w	r3, #1
 800d186:	d0f7      	beq.n	800d178 <ip4_route+0x30>
 800d188:	f013 0f04 	tst.w	r3, #4
 800d18c:	d0f4      	beq.n	800d178 <ip4_route+0x30>
 800d18e:	6842      	ldr	r2, [r0, #4]
 800d190:	2a00      	cmp	r2, #0
 800d192:	d0f1      	beq.n	800d178 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d194:	f8dc 1000 	ldr.w	r1, [ip]
 800d198:	404a      	eors	r2, r1
 800d19a:	6884      	ldr	r4, [r0, #8]
 800d19c:	4222      	tst	r2, r4
 800d19e:	d0e8      	beq.n	800d172 <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d1a0:	f013 0f02 	tst.w	r3, #2
 800d1a4:	d1e8      	bne.n	800d178 <ip4_route+0x30>
 800d1a6:	68c3      	ldr	r3, [r0, #12]
 800d1a8:	4299      	cmp	r1, r3
 800d1aa:	d1e5      	bne.n	800d178 <ip4_route+0x30>
 800d1ac:	e7e1      	b.n	800d172 <ip4_route+0x2a>
    return NULL;
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	e7df      	b.n	800d172 <ip4_route+0x2a>
 800d1b2:	2000      	movs	r0, #0
 800d1b4:	e7dd      	b.n	800d172 <ip4_route+0x2a>
 800d1b6:	bf00      	nop
 800d1b8:	20010c5c 	.word	0x20010c5c
 800d1bc:	20010c58 	.word	0x20010c58

0800d1c0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c4:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d1c6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800d1ca:	f898 3000 	ldrb.w	r3, [r8]
 800d1ce:	091a      	lsrs	r2, r3, #4
 800d1d0:	2a04      	cmp	r2, #4
 800d1d2:	d004      	beq.n	800d1de <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d1d4:	f7fa fd46 	bl	8007c64 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800d1d8:	2000      	movs	r0, #0
 800d1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1de:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800d1e0:	f003 030f 	and.w	r3, r3, #15
 800d1e4:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800d1e8:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d1ea:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800d1ee:	f7f9 fea3 	bl	8006f38 <lwip_htons>
 800d1f2:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800d1f4:	8923      	ldrh	r3, [r4, #8]
 800d1f6:	4283      	cmp	r3, r0
 800d1f8:	d860      	bhi.n	800d2bc <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d1fa:	8963      	ldrh	r3, [r4, #10]
 800d1fc:	42ab      	cmp	r3, r5
 800d1fe:	d362      	bcc.n	800d2c6 <ip4_input+0x106>
 800d200:	8923      	ldrh	r3, [r4, #8]
 800d202:	42b3      	cmp	r3, r6
 800d204:	d35f      	bcc.n	800d2c6 <ip4_input+0x106>
 800d206:	2d13      	cmp	r5, #19
 800d208:	d95d      	bls.n	800d2c6 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d20a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800d20e:	4a52      	ldr	r2, [pc, #328]	; (800d358 <ip4_input+0x198>)
 800d210:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d212:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800d216:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d21c:	2be0      	cmp	r3, #224	; 0xe0
 800d21e:	d156      	bne.n	800d2ce <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d220:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d224:	f013 0f01 	tst.w	r3, #1
 800d228:	d068      	beq.n	800d2fc <ip4_input+0x13c>
 800d22a:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bf14      	ite	ne
 800d230:	463d      	movne	r5, r7
 800d232:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d234:	4639      	mov	r1, r7
 800d236:	4b48      	ldr	r3, [pc, #288]	; (800d358 <ip4_input+0x198>)
 800d238:	6918      	ldr	r0, [r3, #16]
 800d23a:	f000 f926 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800d23e:	2800      	cmp	r0, #0
 800d240:	d162      	bne.n	800d308 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d242:	4b45      	ldr	r3, [pc, #276]	; (800d358 <ip4_input+0x198>)
 800d244:	691b      	ldr	r3, [r3, #16]
 800d246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d24a:	2be0      	cmp	r3, #224	; 0xe0
 800d24c:	d05c      	beq.n	800d308 <ip4_input+0x148>
  if (netif == NULL) {
 800d24e:	2d00      	cmp	r5, #0
 800d250:	d05e      	beq.n	800d310 <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d252:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800d256:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	b13b      	cbz	r3, 800d26e <ip4_input+0xae>
    p = ip4_reass(p);
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 fa62 	bl	800d728 <ip4_reass>
    if (p == NULL) {
 800d264:	4604      	mov	r4, r0
 800d266:	2800      	cmp	r0, #0
 800d268:	d0b6      	beq.n	800d1d8 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800d26a:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800d26e:	4a3a      	ldr	r2, [pc, #232]	; (800d358 <ip4_input+0x198>)
 800d270:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800d272:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d274:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800d278:	f898 3000 	ldrb.w	r3, [r8]
 800d27c:	f003 030f 	and.w	r3, r3, #15
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800d284:	4649      	mov	r1, r9
 800d286:	4620      	mov	r0, r4
 800d288:	f7fa fcac 	bl	8007be4 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800d28c:	f898 3009 	ldrb.w	r3, [r8, #9]
 800d290:	2b06      	cmp	r3, #6
 800d292:	d04e      	beq.n	800d332 <ip4_input+0x172>
 800d294:	2b11      	cmp	r3, #17
 800d296:	d03f      	beq.n	800d318 <ip4_input+0x158>
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d04f      	beq.n	800d33c <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d29c:	4629      	mov	r1, r5
 800d29e:	4b2e      	ldr	r3, [pc, #184]	; (800d358 <ip4_input+0x198>)
 800d2a0:	6958      	ldr	r0, [r3, #20]
 800d2a2:	f000 f8f2 	bl	800d48a <ip4_addr_isbroadcast_u32>
 800d2a6:	b928      	cbnz	r0, 800d2b4 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d2a8:	4b2b      	ldr	r3, [pc, #172]	; (800d358 <ip4_input+0x198>)
 800d2aa:	695b      	ldr	r3, [r3, #20]
 800d2ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d2b0:	2be0      	cmp	r3, #224	; 0xe0
 800d2b2:	d148      	bne.n	800d346 <ip4_input+0x186>
        pbuf_free(p);
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f7fa fcd5 	bl	8007c64 <pbuf_free>
        break;
 800d2ba:	e031      	b.n	800d320 <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 800d2bc:	4601      	mov	r1, r0
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f7fa fde8 	bl	8007e94 <pbuf_realloc>
 800d2c4:	e799      	b.n	800d1fa <ip4_input+0x3a>
    pbuf_free(p);
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f7fa fccc 	bl	8007c64 <pbuf_free>
    return ERR_OK;
 800d2cc:	e784      	b.n	800d1d8 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f7ff ff1e 	bl	800d110 <ip4_input_accept>
 800d2d4:	b9a0      	cbnz	r0, 800d300 <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800d2d6:	4b20      	ldr	r3, [pc, #128]	; (800d358 <ip4_input+0x198>)
 800d2d8:	7d1b      	ldrb	r3, [r3, #20]
 800d2da:	2b7f      	cmp	r3, #127	; 0x7f
 800d2dc:	d012      	beq.n	800d304 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800d2de:	4b1f      	ldr	r3, [pc, #124]	; (800d35c <ip4_input+0x19c>)
 800d2e0:	681d      	ldr	r5, [r3, #0]
 800d2e2:	b91d      	cbnz	r5, 800d2ec <ip4_input+0x12c>
 800d2e4:	e7a6      	b.n	800d234 <ip4_input+0x74>
 800d2e6:	682d      	ldr	r5, [r5, #0]
 800d2e8:	2d00      	cmp	r5, #0
 800d2ea:	d0a3      	beq.n	800d234 <ip4_input+0x74>
          if (netif == inp) {
 800d2ec:	42af      	cmp	r7, r5
 800d2ee:	d0fa      	beq.n	800d2e6 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	f7ff ff0d 	bl	800d110 <ip4_input_accept>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	d0f5      	beq.n	800d2e6 <ip4_input+0x126>
 800d2fa:	e79b      	b.n	800d234 <ip4_input+0x74>
      netif = NULL;
 800d2fc:	2500      	movs	r5, #0
 800d2fe:	e799      	b.n	800d234 <ip4_input+0x74>
      netif = inp;
 800d300:	463d      	mov	r5, r7
 800d302:	e797      	b.n	800d234 <ip4_input+0x74>
      netif = NULL;
 800d304:	2500      	movs	r5, #0
 800d306:	e795      	b.n	800d234 <ip4_input+0x74>
      pbuf_free(p);
 800d308:	4620      	mov	r0, r4
 800d30a:	f7fa fcab 	bl	8007c64 <pbuf_free>
      return ERR_OK;
 800d30e:	e763      	b.n	800d1d8 <ip4_input+0x18>
    pbuf_free(p);
 800d310:	4620      	mov	r0, r4
 800d312:	f7fa fca7 	bl	8007c64 <pbuf_free>
    return ERR_OK;
 800d316:	e75f      	b.n	800d1d8 <ip4_input+0x18>
        udp_input(p, inp);
 800d318:	4639      	mov	r1, r7
 800d31a:	4620      	mov	r0, r4
 800d31c:	f7ff f8c4 	bl	800c4a8 <udp_input>
  ip_data.current_netif = NULL;
 800d320:	4b0d      	ldr	r3, [pc, #52]	; (800d358 <ip4_input+0x198>)
 800d322:	2200      	movs	r2, #0
 800d324:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d326:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d328:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d32a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d32c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d32e:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800d330:	e752      	b.n	800d1d8 <ip4_input+0x18>
        tcp_input(p, inp);
 800d332:	4639      	mov	r1, r7
 800d334:	4620      	mov	r0, r4
 800d336:	f7fc fec9 	bl	800a0cc <tcp_input>
        break;
 800d33a:	e7f1      	b.n	800d320 <ip4_input+0x160>
        icmp_input(p, inp);
 800d33c:	4639      	mov	r1, r7
 800d33e:	4620      	mov	r0, r4
 800d340:	f7ff fe36 	bl	800cfb0 <icmp_input>
        break;
 800d344:	e7ec      	b.n	800d320 <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800d346:	4649      	mov	r1, r9
 800d348:	4620      	mov	r0, r4
 800d34a:	f7fa fc7f 	bl	8007c4c <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d34e:	2102      	movs	r1, #2
 800d350:	4620      	mov	r0, r4
 800d352:	f7ff fed1 	bl	800d0f8 <icmp_dest_unreach>
 800d356:	e7ad      	b.n	800d2b4 <ip4_input+0xf4>
 800d358:	2000b350 	.word	0x2000b350
 800d35c:	20010c5c 	.word	0x20010c5c

0800d360 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800d360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d364:	b083      	sub	sp, #12
 800d366:	4604      	mov	r4, r0
 800d368:	460f      	mov	r7, r1
 800d36a:	4616      	mov	r6, r2
 800d36c:	4699      	mov	r9, r3
 800d36e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d372:	7b82      	ldrb	r2, [r0, #14]
 800d374:	2a01      	cmp	r2, #1
 800d376:	d13f      	bne.n	800d3f8 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d378:	2e00      	cmp	r6, #0
 800d37a:	d050      	beq.n	800d41e <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800d37c:	2114      	movs	r1, #20
 800d37e:	4620      	mov	r0, r4
 800d380:	f7fa fc2b 	bl	8007bda <pbuf_add_header>
 800d384:	2800      	cmp	r0, #0
 800d386:	d158      	bne.n	800d43a <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d388:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d38a:	8963      	ldrh	r3, [r4, #10]
 800d38c:	2b13      	cmp	r3, #19
 800d38e:	d93b      	bls.n	800d408 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d390:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d394:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800d398:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d39a:	6833      	ldr	r3, [r6, #0]
 800d39c:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d39e:	2345      	movs	r3, #69	; 0x45
 800d3a0:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800d3a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800d3a6:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d3a8:	8920      	ldrh	r0, [r4, #8]
 800d3aa:	f7f9 fdc5 	bl	8006f38 <lwip_htons>
 800d3ae:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	71ab      	strb	r3, [r5, #6]
 800d3b4:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d3b6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800d45c <ip4_output_if_src+0xfc>
 800d3ba:	f8b9 0000 	ldrh.w	r0, [r9]
 800d3be:	f7f9 fdbb 	bl	8006f38 <lwip_htons>
 800d3c2:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d3c4:	f8b9 3000 	ldrh.w	r3, [r9]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800d3ce:	b31f      	cbz	r7, 800d418 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	72ab      	strb	r3, [r5, #10]
 800d3d8:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d3da:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800d3de:	b113      	cbz	r3, 800d3e6 <ip4_output_if_src+0x86>
 800d3e0:	8922      	ldrh	r2, [r4, #8]
 800d3e2:	429a      	cmp	r2, r3
 800d3e4:	d823      	bhi.n	800d42e <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d3e6:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800d3ea:	4632      	mov	r2, r6
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	4798      	blx	r3
}
 800d3f2:	b003      	add	sp, #12
 800d3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d3f8:	4b13      	ldr	r3, [pc, #76]	; (800d448 <ip4_output_if_src+0xe8>)
 800d3fa:	f44f 7255 	mov.w	r2, #852	; 0x354
 800d3fe:	4913      	ldr	r1, [pc, #76]	; (800d44c <ip4_output_if_src+0xec>)
 800d400:	4813      	ldr	r0, [pc, #76]	; (800d450 <ip4_output_if_src+0xf0>)
 800d402:	f000 ffcd 	bl	800e3a0 <iprintf>
 800d406:	e7b7      	b.n	800d378 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d408:	4b0f      	ldr	r3, [pc, #60]	; (800d448 <ip4_output_if_src+0xe8>)
 800d40a:	f44f 7262 	mov.w	r2, #904	; 0x388
 800d40e:	4911      	ldr	r1, [pc, #68]	; (800d454 <ip4_output_if_src+0xf4>)
 800d410:	480f      	ldr	r0, [pc, #60]	; (800d450 <ip4_output_if_src+0xf0>)
 800d412:	f000 ffc5 	bl	800e3a0 <iprintf>
 800d416:	e7bb      	b.n	800d390 <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d418:	4b0f      	ldr	r3, [pc, #60]	; (800d458 <ip4_output_if_src+0xf8>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	e7d9      	b.n	800d3d2 <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 800d41e:	8963      	ldrh	r3, [r4, #10]
 800d420:	2b13      	cmp	r3, #19
 800d422:	d90d      	bls.n	800d440 <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d424:	6863      	ldr	r3, [r4, #4]
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800d42a:	ae01      	add	r6, sp, #4
 800d42c:	e7d5      	b.n	800d3da <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800d42e:	4632      	mov	r2, r6
 800d430:	4641      	mov	r1, r8
 800d432:	4620      	mov	r0, r4
 800d434:	f000 fba2 	bl	800db7c <ip4_frag>
 800d438:	e7db      	b.n	800d3f2 <ip4_output_if_src+0x92>
      return ERR_BUF;
 800d43a:	f06f 0001 	mvn.w	r0, #1
 800d43e:	e7d8      	b.n	800d3f2 <ip4_output_if_src+0x92>
      return ERR_BUF;
 800d440:	f06f 0001 	mvn.w	r0, #1
 800d444:	e7d5      	b.n	800d3f2 <ip4_output_if_src+0x92>
 800d446:	bf00      	nop
 800d448:	080127ac 	.word	0x080127ac
 800d44c:	080127e0 	.word	0x080127e0
 800d450:	0800f6b8 	.word	0x0800f6b8
 800d454:	080127ec 	.word	0x080127ec
 800d458:	0801281c 	.word	0x0801281c
 800d45c:	20010dc2 	.word	0x20010dc2

0800d460 <ip4_output_if>:
{
 800d460:	b510      	push	{r4, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 800d466:	4694      	mov	ip, r2
 800d468:	b11a      	cbz	r2, 800d472 <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800d46a:	b109      	cbz	r1, 800d470 <ip4_output_if+0x10>
 800d46c:	680a      	ldr	r2, [r1, #0]
 800d46e:	b902      	cbnz	r2, 800d472 <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800d470:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d472:	9402      	str	r4, [sp, #8]
 800d474:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800d478:	9201      	str	r2, [sp, #4]
 800d47a:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800d47e:	9200      	str	r2, [sp, #0]
 800d480:	4662      	mov	r2, ip
 800d482:	f7ff ff6d 	bl	800d360 <ip4_output_if_src>
}
 800d486:	b004      	add	sp, #16
 800d488:	bd10      	pop	{r4, pc}

0800d48a <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d48a:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d48c:	1e42      	subs	r2, r0, #1
 800d48e:	f112 0f03 	cmn.w	r2, #3
 800d492:	d813      	bhi.n	800d4bc <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d494:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 800d498:	f010 0002 	ands.w	r0, r0, #2
 800d49c:	d013      	beq.n	800d4c6 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d49e:	684a      	ldr	r2, [r1, #4]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d00d      	beq.n	800d4c0 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d4a4:	6889      	ldr	r1, [r1, #8]
 800d4a6:	405a      	eors	r2, r3
 800d4a8:	420a      	tst	r2, r1
 800d4aa:	d10b      	bne.n	800d4c4 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d4ac:	43c8      	mvns	r0, r1
 800d4ae:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800d4b2:	4283      	cmp	r3, r0
 800d4b4:	bf14      	ite	ne
 800d4b6:	2000      	movne	r0, #0
 800d4b8:	2001      	moveq	r0, #1
 800d4ba:	4770      	bx	lr
    return 1;
 800d4bc:	2001      	movs	r0, #1
 800d4be:	4770      	bx	lr
    return 0;
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	4770      	bx	lr
    return 0;
 800d4c4:	2000      	movs	r0, #0
  }
}
 800d4c6:	4770      	bx	lr

0800d4c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d4c8:	b538      	push	{r3, r4, r5, lr}
 800d4ca:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800d4cc:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <ip_reass_dequeue_datagram+0x38>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4283      	cmp	r3, r0
 800d4d2:	d008      	beq.n	800d4e6 <ip_reass_dequeue_datagram+0x1e>
 800d4d4:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d4d6:	b151      	cbz	r1, 800d4ee <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800d4dc:	4621      	mov	r1, r4
 800d4de:	2004      	movs	r0, #4
 800d4e0:	f7fa f8fe 	bl	80076e0 <memp_free>
}
 800d4e4:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800d4e6:	6802      	ldr	r2, [r0, #0]
 800d4e8:	4b05      	ldr	r3, [pc, #20]	; (800d500 <ip_reass_dequeue_datagram+0x38>)
 800d4ea:	601a      	str	r2, [r3, #0]
 800d4ec:	e7f6      	b.n	800d4dc <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800d4ee:	4b05      	ldr	r3, [pc, #20]	; (800d504 <ip_reass_dequeue_datagram+0x3c>)
 800d4f0:	f240 1245 	movw	r2, #325	; 0x145
 800d4f4:	4904      	ldr	r1, [pc, #16]	; (800d508 <ip_reass_dequeue_datagram+0x40>)
 800d4f6:	4805      	ldr	r0, [pc, #20]	; (800d50c <ip_reass_dequeue_datagram+0x44>)
 800d4f8:	f000 ff52 	bl	800e3a0 <iprintf>
 800d4fc:	e7ec      	b.n	800d4d8 <ip_reass_dequeue_datagram+0x10>
 800d4fe:	bf00      	nop
 800d500:	20010dc8 	.word	0x20010dc8
 800d504:	08012820 	.word	0x08012820
 800d508:	0801285c 	.word	0x0801285c
 800d50c:	0800f6b8 	.word	0x0800f6b8

0800d510 <ip_reass_free_complete_datagram>:
{
 800d510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d514:	4680      	mov	r8, r0
 800d516:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d518:	4281      	cmp	r1, r0
 800d51a:	d017      	beq.n	800d54c <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800d51c:	f1b9 0f00 	cmp.w	r9, #0
 800d520:	d009      	beq.n	800d536 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d522:	f8d9 3000 	ldr.w	r3, [r9]
 800d526:	4543      	cmp	r3, r8
 800d528:	d005      	beq.n	800d536 <ip_reass_free_complete_datagram+0x26>
 800d52a:	4b34      	ldr	r3, [pc, #208]	; (800d5fc <ip_reass_free_complete_datagram+0xec>)
 800d52c:	22ad      	movs	r2, #173	; 0xad
 800d52e:	4934      	ldr	r1, [pc, #208]	; (800d600 <ip_reass_free_complete_datagram+0xf0>)
 800d530:	4834      	ldr	r0, [pc, #208]	; (800d604 <ip_reass_free_complete_datagram+0xf4>)
 800d532:	f000 ff35 	bl	800e3a0 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d536:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800d53a:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800d53c:	889a      	ldrh	r2, [r3, #4]
 800d53e:	b162      	cbz	r2, 800d55a <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 800d540:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d542:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800d5fc <ip_reass_free_complete_datagram+0xec>
 800d546:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800d614 <ip_reass_free_complete_datagram+0x104>
 800d54a:	e03e      	b.n	800d5ca <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d54c:	4b2b      	ldr	r3, [pc, #172]	; (800d5fc <ip_reass_free_complete_datagram+0xec>)
 800d54e:	22ab      	movs	r2, #171	; 0xab
 800d550:	492d      	ldr	r1, [pc, #180]	; (800d608 <ip_reass_free_complete_datagram+0xf8>)
 800d552:	482c      	ldr	r0, [pc, #176]	; (800d604 <ip_reass_free_complete_datagram+0xf4>)
 800d554:	f000 ff24 	bl	800e3a0 <iprintf>
 800d558:	e7e0      	b.n	800d51c <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d560:	6873      	ldr	r3, [r6, #4]
 800d562:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800d566:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800d56a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800d56e:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800d572:	601a      	str	r2, [r3, #0]
 800d574:	605c      	str	r4, [r3, #4]
 800d576:	6098      	str	r0, [r3, #8]
 800d578:	60d9      	str	r1, [r3, #12]
 800d57a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800d57e:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d580:	2101      	movs	r1, #1
 800d582:	4630      	mov	r0, r6
 800d584:	f7ff fdbe 	bl	800d104 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d588:	4630      	mov	r0, r6
 800d58a:	f7fa fce3 	bl	8007f54 <pbuf_clen>
 800d58e:	4604      	mov	r4, r0
    pbuf_free(p);
 800d590:	4630      	mov	r0, r6
 800d592:	f7fa fb67 	bl	8007c64 <pbuf_free>
  p = ipr->p;
 800d596:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 800d59a:	2e00      	cmp	r6, #0
 800d59c:	d1d1      	bne.n	800d542 <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 800d59e:	4649      	mov	r1, r9
 800d5a0:	4640      	mov	r0, r8
 800d5a2:	f7ff ff91 	bl	800d4c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d5a6:	4b19      	ldr	r3, [pc, #100]	; (800d60c <ip_reass_free_complete_datagram+0xfc>)
 800d5a8:	881b      	ldrh	r3, [r3, #0]
 800d5aa:	42a3      	cmp	r3, r4
 800d5ac:	d31f      	bcc.n	800d5ee <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800d5ae:	4a17      	ldr	r2, [pc, #92]	; (800d60c <ip_reass_free_complete_datagram+0xfc>)
 800d5b0:	8813      	ldrh	r3, [r2, #0]
 800d5b2:	1b1b      	subs	r3, r3, r4
 800d5b4:	8013      	strh	r3, [r2, #0]
}
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800d5bc:	4425      	add	r5, r4
 800d5be:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	f7fa fb4f 	bl	8007c64 <pbuf_free>
  while (p != NULL) {
 800d5c6:	2e00      	cmp	r6, #0
 800d5c8:	d0e9      	beq.n	800d59e <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 800d5ca:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800d5cc:	4637      	mov	r7, r6
 800d5ce:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 800d5d0:	4638      	mov	r0, r7
 800d5d2:	f7fa fcbf 	bl	8007f54 <pbuf_clen>
 800d5d6:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d5d8:	1823      	adds	r3, r4, r0
 800d5da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d5de:	dbed      	blt.n	800d5bc <ip_reass_free_complete_datagram+0xac>
 800d5e0:	465b      	mov	r3, fp
 800d5e2:	22cc      	movs	r2, #204	; 0xcc
 800d5e4:	4651      	mov	r1, sl
 800d5e6:	4807      	ldr	r0, [pc, #28]	; (800d604 <ip_reass_free_complete_datagram+0xf4>)
 800d5e8:	f000 feda 	bl	800e3a0 <iprintf>
 800d5ec:	e7e6      	b.n	800d5bc <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800d5ee:	4b03      	ldr	r3, [pc, #12]	; (800d5fc <ip_reass_free_complete_datagram+0xec>)
 800d5f0:	22d2      	movs	r2, #210	; 0xd2
 800d5f2:	4907      	ldr	r1, [pc, #28]	; (800d610 <ip_reass_free_complete_datagram+0x100>)
 800d5f4:	4803      	ldr	r0, [pc, #12]	; (800d604 <ip_reass_free_complete_datagram+0xf4>)
 800d5f6:	f000 fed3 	bl	800e3a0 <iprintf>
 800d5fa:	e7d8      	b.n	800d5ae <ip_reass_free_complete_datagram+0x9e>
 800d5fc:	08012820 	.word	0x08012820
 800d600:	08012884 	.word	0x08012884
 800d604:	0800f6b8 	.word	0x0800f6b8
 800d608:	08012878 	.word	0x08012878
 800d60c:	20010dc4 	.word	0x20010dc4
 800d610:	080128b8 	.word	0x080128b8
 800d614:	08012898 	.word	0x08012898

0800d618 <ip_reass_remove_oldest_datagram>:
{
 800d618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d61c:	4605      	mov	r5, r0
 800d61e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800d620:	2600      	movs	r6, #0
    r = reassdatagrams;
 800d622:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800d694 <ip_reass_remove_oldest_datagram+0x7c>
 800d626:	e027      	b.n	800d678 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 800d628:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800d62a:	b1d0      	cbz	r0, 800d662 <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800d62c:	f893 901f 	ldrb.w	r9, [r3, #31]
 800d630:	7fc2      	ldrb	r2, [r0, #31]
 800d632:	4591      	cmp	r9, r2
 800d634:	bf98      	it	ls
 800d636:	4661      	movls	r1, ip
 800d638:	4591      	cmp	r9, r2
 800d63a:	bf98      	it	ls
 800d63c:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	469c      	mov	ip, r3
 800d642:	b18a      	cbz	r2, 800d668 <ip_reass_remove_oldest_datagram+0x50>
 800d644:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d646:	695a      	ldr	r2, [r3, #20]
 800d648:	4572      	cmp	r2, lr
 800d64a:	d1ed      	bne.n	800d628 <ip_reass_remove_oldest_datagram+0x10>
 800d64c:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800d650:	699a      	ldr	r2, [r3, #24]
 800d652:	454a      	cmp	r2, r9
 800d654:	d1e8      	bne.n	800d628 <ip_reass_remove_oldest_datagram+0x10>
 800d656:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800d65a:	88aa      	ldrh	r2, [r5, #4]
 800d65c:	4591      	cmp	r9, r2
 800d65e:	d1e3      	bne.n	800d628 <ip_reass_remove_oldest_datagram+0x10>
 800d660:	e7ed      	b.n	800d63e <ip_reass_remove_oldest_datagram+0x26>
 800d662:	4661      	mov	r1, ip
 800d664:	4618      	mov	r0, r3
 800d666:	e7ea      	b.n	800d63e <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 800d668:	b110      	cbz	r0, 800d670 <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d66a:	f7ff ff51 	bl	800d510 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800d66e:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d670:	42be      	cmp	r6, r7
 800d672:	da0b      	bge.n	800d68c <ip_reass_remove_oldest_datagram+0x74>
 800d674:	2c01      	cmp	r4, #1
 800d676:	dd09      	ble.n	800d68c <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 800d678:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800d67c:	b133      	cbz	r3, 800d68c <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d67e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 800d682:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800d684:	4621      	mov	r1, r4
    prev = NULL;
 800d686:	46a4      	mov	ip, r4
    oldest = NULL;
 800d688:	4620      	mov	r0, r4
 800d68a:	e7dc      	b.n	800d646 <ip_reass_remove_oldest_datagram+0x2e>
}
 800d68c:	4630      	mov	r0, r6
 800d68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d692:	bf00      	nop
 800d694:	20010dc8 	.word	0x20010dc8

0800d698 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d698:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d69a:	4604      	mov	r4, r0
 800d69c:	b120      	cbz	r0, 800d6a8 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800d69e:	4621      	mov	r1, r4
 800d6a0:	2005      	movs	r0, #5
 800d6a2:	f7fa f81d 	bl	80076e0 <memp_free>
}
 800d6a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800d6a8:	4b03      	ldr	r3, [pc, #12]	; (800d6b8 <ip_frag_free_pbuf_custom_ref+0x20>)
 800d6aa:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d6ae:	4903      	ldr	r1, [pc, #12]	; (800d6bc <ip_frag_free_pbuf_custom_ref+0x24>)
 800d6b0:	4803      	ldr	r0, [pc, #12]	; (800d6c0 <ip_frag_free_pbuf_custom_ref+0x28>)
 800d6b2:	f000 fe75 	bl	800e3a0 <iprintf>
 800d6b6:	e7f2      	b.n	800d69e <ip_frag_free_pbuf_custom_ref+0x6>
 800d6b8:	08012820 	.word	0x08012820
 800d6bc:	08010f3c 	.word	0x08010f3c
 800d6c0:	0800f6b8 	.word	0x0800f6b8

0800d6c4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d6c4:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d6c6:	4604      	mov	r4, r0
 800d6c8:	b138      	cbz	r0, 800d6da <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800d6ca:	6960      	ldr	r0, [r4, #20]
 800d6cc:	b108      	cbz	r0, 800d6d2 <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800d6ce:	f7fa fac9 	bl	8007c64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	f7ff ffe0 	bl	800d698 <ip_frag_free_pbuf_custom_ref>
}
 800d6d8:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d6da:	4b04      	ldr	r3, [pc, #16]	; (800d6ec <ipfrag_free_pbuf_custom+0x28>)
 800d6dc:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d6e0:	4903      	ldr	r1, [pc, #12]	; (800d6f0 <ipfrag_free_pbuf_custom+0x2c>)
 800d6e2:	4804      	ldr	r0, [pc, #16]	; (800d6f4 <ipfrag_free_pbuf_custom+0x30>)
 800d6e4:	f000 fe5c 	bl	800e3a0 <iprintf>
 800d6e8:	e7ef      	b.n	800d6ca <ipfrag_free_pbuf_custom+0x6>
 800d6ea:	bf00      	nop
 800d6ec:	08012820 	.word	0x08012820
 800d6f0:	080128dc 	.word	0x080128dc
 800d6f4:	0800f6b8 	.word	0x0800f6b8

0800d6f8 <ip_reass_tmr>:
{
 800d6f8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800d6fa:	4b0a      	ldr	r3, [pc, #40]	; (800d724 <ip_reass_tmr+0x2c>)
 800d6fc:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800d6fe:	b178      	cbz	r0, 800d720 <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 800d700:	2400      	movs	r4, #0
 800d702:	e004      	b.n	800d70e <ip_reass_tmr+0x16>
      r->timer--;
 800d704:	3b01      	subs	r3, #1
 800d706:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800d708:	4604      	mov	r4, r0
 800d70a:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800d70c:	b140      	cbz	r0, 800d720 <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800d70e:	7fc3      	ldrb	r3, [r0, #31]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d1f7      	bne.n	800d704 <ip_reass_tmr+0xc>
      r = r->next;
 800d714:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800d716:	4621      	mov	r1, r4
 800d718:	f7ff fefa 	bl	800d510 <ip_reass_free_complete_datagram>
      r = r->next;
 800d71c:	4628      	mov	r0, r5
 800d71e:	e7f5      	b.n	800d70c <ip_reass_tmr+0x14>
}
 800d720:	bd38      	pop	{r3, r4, r5, pc}
 800d722:	bf00      	nop
 800d724:	20010dc8 	.word	0x20010dc8

0800d728 <ip4_reass>:
{
 800d728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72c:	b083      	sub	sp, #12
 800d72e:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800d730:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d734:	f899 3000 	ldrb.w	r3, [r9]
 800d738:	f003 030f 	and.w	r3, r3, #15
 800d73c:	2b05      	cmp	r3, #5
 800d73e:	d16e      	bne.n	800d81e <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d740:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800d744:	f7f9 fbf8 	bl	8006f38 <lwip_htons>
 800d748:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d74a:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800d74e:	f7f9 fbf3 	bl	8006f38 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d752:	f899 3000 	ldrb.w	r3, [r9]
 800d756:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d75a:	009e      	lsls	r6, r3, #2
 800d75c:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d760:	d35d      	bcc.n	800d81e <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 800d762:	1b80      	subs	r0, r0, r6
 800d764:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 800d766:	4628      	mov	r0, r5
 800d768:	f7fa fbf4 	bl	8007f54 <pbuf_clen>
 800d76c:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d76e:	4ba4      	ldr	r3, [pc, #656]	; (800da00 <ip4_reass+0x2d8>)
 800d770:	881b      	ldrh	r3, [r3, #0]
 800d772:	4403      	add	r3, r0
 800d774:	2b0a      	cmp	r3, #10
 800d776:	dc07      	bgt.n	800d788 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d778:	4ba2      	ldr	r3, [pc, #648]	; (800da04 <ip4_reass+0x2dc>)
 800d77a:	681c      	ldr	r4, [r3, #0]
 800d77c:	2c00      	cmp	r4, #0
 800d77e:	f000 81c7 	beq.w	800db10 <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d782:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d786:	e00f      	b.n	800d7a8 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d788:	4601      	mov	r1, r0
 800d78a:	4648      	mov	r0, r9
 800d78c:	f7ff ff44 	bl	800d618 <ip_reass_remove_oldest_datagram>
 800d790:	2800      	cmp	r0, #0
 800d792:	d044      	beq.n	800d81e <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d794:	4b9a      	ldr	r3, [pc, #616]	; (800da00 <ip4_reass+0x2d8>)
 800d796:	881b      	ldrh	r3, [r3, #0]
 800d798:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d79a:	2b0a      	cmp	r3, #10
 800d79c:	ddec      	ble.n	800d778 <ip4_reass+0x50>
 800d79e:	e03e      	b.n	800d81e <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d7a0:	6824      	ldr	r4, [r4, #0]
 800d7a2:	2c00      	cmp	r4, #0
 800d7a4:	f000 81b4 	beq.w	800db10 <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d7a8:	6963      	ldr	r3, [r4, #20]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d1f8      	bne.n	800d7a0 <ip4_reass+0x78>
 800d7ae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7b2:	69a1      	ldr	r1, [r4, #24]
 800d7b4:	4299      	cmp	r1, r3
 800d7b6:	d1f3      	bne.n	800d7a0 <ip4_reass+0x78>
 800d7b8:	89a1      	ldrh	r1, [r4, #12]
 800d7ba:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800d7be:	4299      	cmp	r1, r3
 800d7c0:	d1ee      	bne.n	800d7a0 <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d7c2:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800d7c6:	f7f9 fbb7 	bl	8006f38 <lwip_htons>
 800d7ca:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d03b      	beq.n	800d84a <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d7d2:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800d7d6:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d7d8:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800d7dc:	f019 0920 	ands.w	r9, r9, #32
 800d7e0:	d107      	bne.n	800d7f2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800d7e2:	19bb      	adds	r3, r7, r6
 800d7e4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d7e6:	429f      	cmp	r7, r3
 800d7e8:	d812      	bhi.n	800d810 <ip4_reass+0xe8>
 800d7ea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d80e      	bhi.n	800d810 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800d7f2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d7f6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800d7fa:	f7f9 fb9d 	bl	8006f38 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800d7fe:	f89a 3000 	ldrb.w	r3, [sl]
 800d802:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800d806:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800d80a:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800d80e:	d233      	bcs.n	800d878 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d810:	2c00      	cmp	r4, #0
 800d812:	f000 814c 	beq.w	800daae <ip4_reass+0x386>
  if (ipr->p == NULL) {
 800d816:	6863      	ldr	r3, [r4, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 8150 	beq.w	800dabe <ip4_reass+0x396>
  pbuf_free(p);
 800d81e:	4628      	mov	r0, r5
 800d820:	f7fa fa20 	bl	8007c64 <pbuf_free>
  return NULL;
 800d824:	2500      	movs	r5, #0
}
 800d826:	4628      	mov	r0, r5
 800d828:	b003      	add	sp, #12
 800d82a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d82e:	4641      	mov	r1, r8
 800d830:	4648      	mov	r0, r9
 800d832:	f7ff fef1 	bl	800d618 <ip_reass_remove_oldest_datagram>
 800d836:	4580      	cmp	r8, r0
 800d838:	dcf1      	bgt.n	800d81e <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d83a:	2004      	movs	r0, #4
 800d83c:	f7f9 ff20 	bl	8007680 <memp_malloc>
    if (ipr == NULL)
 800d840:	4604      	mov	r4, r0
 800d842:	2800      	cmp	r0, #0
 800d844:	f040 816b 	bne.w	800db1e <ip4_reass+0x3f6>
 800d848:	e7e9      	b.n	800d81e <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d84a:	89e0      	ldrh	r0, [r4, #14]
 800d84c:	f7f9 fb74 	bl	8006f38 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d850:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800d854:	2800      	cmp	r0, #0
 800d856:	d0bc      	beq.n	800d7d2 <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d858:	f8d9 3000 	ldr.w	r3, [r9]
 800d85c:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800d860:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800d864:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800d868:	60a3      	str	r3, [r4, #8]
 800d86a:	60e0      	str	r0, [r4, #12]
 800d86c:	6121      	str	r1, [r4, #16]
 800d86e:	6162      	str	r2, [r4, #20]
 800d870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d874:	61a3      	str	r3, [r4, #24]
 800d876:	e7ac      	b.n	800d7d2 <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 800d878:	eba0 000b 	sub.w	r0, r0, fp
 800d87c:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800d880:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800d884:	f7f9 fb58 	bl	8006f38 <lwip_htons>
 800d888:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800d88c:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800d88e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 800d892:	2300      	movs	r3, #0
 800d894:	f88a 3000 	strb.w	r3, [sl]
 800d898:	f88a 3001 	strb.w	r3, [sl, #1]
 800d89c:	f88a 3002 	strb.w	r3, [sl, #2]
 800d8a0:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 800d8a4:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 800d8a8:	4493      	add	fp, r2
 800d8aa:	fa1f f38b 	uxth.w	r3, fp
 800d8ae:	9301      	str	r3, [sp, #4]
 800d8b0:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 800d8b4:	429a      	cmp	r2, r3
 800d8b6:	d8ab      	bhi.n	800d810 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800d8b8:	6860      	ldr	r0, [r4, #4]
 800d8ba:	2800      	cmp	r0, #0
 800d8bc:	f000 8120 	beq.w	800db00 <ip4_reass+0x3d8>
  int valid = 1;
 800d8c0:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	e030      	b.n	800d92a <ip4_reass+0x202>
      iprh->next_pbuf = q;
 800d8c8:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 800d8cc:	f1bc 0f00 	cmp.w	ip, #0
 800d8d0:	d020      	beq.n	800d914 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800d8d2:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800d8d6:	428a      	cmp	r2, r1
 800d8d8:	d39d      	bcc.n	800d816 <ip4_reass+0xee>
 800d8da:	889b      	ldrh	r3, [r3, #4]
 800d8dc:	9a01      	ldr	r2, [sp, #4]
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d399      	bcc.n	800d816 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 800d8e2:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800d8e6:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 800d8ea:	428b      	cmp	r3, r1
 800d8ec:	bf18      	it	ne
 800d8ee:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d8f2:	f1b9 0f00 	cmp.w	r9, #0
 800d8f6:	d02f      	beq.n	800d958 <ip4_reass+0x230>
 800d8f8:	7fa3      	ldrb	r3, [r4, #30]
 800d8fa:	f013 0f01 	tst.w	r3, #1
 800d8fe:	d12b      	bne.n	800d958 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d900:	4a3f      	ldr	r2, [pc, #252]	; (800da00 <ip4_reass+0x2d8>)
 800d902:	8813      	ldrh	r3, [r2, #0]
 800d904:	4498      	add	r8, r3
 800d906:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800d90a:	f1b9 0f00 	cmp.w	r9, #0
 800d90e:	d074      	beq.n	800d9fa <ip4_reass+0x2d2>
  return NULL;
 800d910:	2500      	movs	r5, #0
 800d912:	e788      	b.n	800d826 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 800d914:	889b      	ldrh	r3, [r3, #4]
 800d916:	9a01      	ldr	r2, [sp, #4]
 800d918:	4293      	cmp	r3, r2
 800d91a:	f4ff af7c 	bcc.w	800d816 <ip4_reass+0xee>
        ipr->p = new_p;
 800d91e:	6065      	str	r5, [r4, #4]
 800d920:	e7e7      	b.n	800d8f2 <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 800d922:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800d924:	2800      	cmp	r0, #0
 800d926:	f000 80da 	beq.w	800dade <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800d92a:	469c      	mov	ip, r3
 800d92c:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800d92e:	8899      	ldrh	r1, [r3, #4]
 800d930:	428a      	cmp	r2, r1
 800d932:	d3c9      	bcc.n	800d8c8 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800d934:	428a      	cmp	r2, r1
 800d936:	f43f af6e 	beq.w	800d816 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800d93a:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800d93e:	455a      	cmp	r2, fp
 800d940:	f4ff af69 	bcc.w	800d816 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800d944:	f1bc 0f00 	cmp.w	ip, #0
 800d948:	d0eb      	beq.n	800d922 <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800d94a:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800d94e:	4288      	cmp	r0, r1
 800d950:	bf18      	it	ne
 800d952:	f04f 0e00 	movne.w	lr, #0
 800d956:	e7e4      	b.n	800d922 <ip4_reass+0x1fa>
    if (valid) {
 800d958:	f1be 0f00 	cmp.w	lr, #0
 800d95c:	d02f      	beq.n	800d9be <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d95e:	6863      	ldr	r3, [r4, #4]
 800d960:	b343      	cbz	r3, 800d9b4 <ip4_reass+0x28c>
 800d962:	6859      	ldr	r1, [r3, #4]
 800d964:	888b      	ldrh	r3, [r1, #4]
 800d966:	bb43      	cbnz	r3, 800d9ba <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800d968:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800d96c:	b15b      	cbz	r3, 800d986 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800d96e:	4652      	mov	r2, sl
 800d970:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800d974:	88d2      	ldrh	r2, [r2, #6]
 800d976:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800d97a:	429a      	cmp	r2, r3
 800d97c:	d134      	bne.n	800d9e8 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800d97e:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1f3      	bne.n	800d96e <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800d986:	458a      	cmp	sl, r1
 800d988:	f040 80e7 	bne.w	800db5a <ip4_reass+0x432>
 800d98c:	4b1e      	ldr	r3, [pc, #120]	; (800da08 <ip4_reass+0x2e0>)
 800d98e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d992:	491e      	ldr	r1, [pc, #120]	; (800da0c <ip4_reass+0x2e4>)
 800d994:	481e      	ldr	r0, [pc, #120]	; (800da10 <ip4_reass+0x2e8>)
 800d996:	f000 fd03 	bl	800e3a0 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d99a:	f8da 3000 	ldr.w	r3, [sl]
 800d99e:	b333      	cbz	r3, 800d9ee <ip4_reass+0x2c6>
 800d9a0:	4b19      	ldr	r3, [pc, #100]	; (800da08 <ip4_reass+0x2e0>)
 800d9a2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d9a6:	491b      	ldr	r1, [pc, #108]	; (800da14 <ip4_reass+0x2ec>)
 800d9a8:	4819      	ldr	r0, [pc, #100]	; (800da10 <ip4_reass+0x2e8>)
 800d9aa:	f000 fcf9 	bl	800e3a0 <iprintf>
 800d9ae:	f04f 0e01 	mov.w	lr, #1
 800d9b2:	e004      	b.n	800d9be <ip4_reass+0x296>
        valid = 0;
 800d9b4:	f04f 0e00 	mov.w	lr, #0
 800d9b8:	e001      	b.n	800d9be <ip4_reass+0x296>
 800d9ba:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d9be:	f1be 0100 	subs.w	r1, lr, #0
 800d9c2:	bf18      	it	ne
 800d9c4:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d9c6:	4a0e      	ldr	r2, [pc, #56]	; (800da00 <ip4_reass+0x2d8>)
 800d9c8:	8813      	ldrh	r3, [r2, #0]
 800d9ca:	4498      	add	r8, r3
 800d9cc:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800d9d0:	f1b9 0f00 	cmp.w	r9, #0
 800d9d4:	d105      	bne.n	800d9e2 <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800d9d6:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800d9d8:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d9da:	7fa3      	ldrb	r3, [r4, #30]
 800d9dc:	f043 0301 	orr.w	r3, r3, #1
 800d9e0:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d9e2:	b9c9      	cbnz	r1, 800da18 <ip4_reass+0x2f0>
  return NULL;
 800d9e4:	2500      	movs	r5, #0
 800d9e6:	e71e      	b.n	800d826 <ip4_reass+0xfe>
 800d9e8:	f04f 0e00 	mov.w	lr, #0
 800d9ec:	e7e7      	b.n	800d9be <ip4_reass+0x296>
 800d9ee:	f04f 0e01 	mov.w	lr, #1
 800d9f2:	e7e4      	b.n	800d9be <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d9f4:	f04f 0e00 	mov.w	lr, #0
 800d9f8:	e7e1      	b.n	800d9be <ip4_reass+0x296>
  if (is_last) {
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	e7eb      	b.n	800d9d6 <ip4_reass+0x2ae>
 800d9fe:	bf00      	nop
 800da00:	20010dc4 	.word	0x20010dc4
 800da04:	20010dc8 	.word	0x20010dc8
 800da08:	08012820 	.word	0x08012820
 800da0c:	080128e8 	.word	0x080128e8
 800da10:	0800f6b8 	.word	0x0800f6b8
 800da14:	080128f8 	.word	0x080128f8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800da18:	8ba0      	ldrh	r0, [r4, #28]
 800da1a:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800da1c:	6863      	ldr	r3, [r4, #4]
 800da1e:	685d      	ldr	r5, [r3, #4]
 800da20:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800da22:	68a3      	ldr	r3, [r4, #8]
 800da24:	68e7      	ldr	r7, [r4, #12]
 800da26:	6921      	ldr	r1, [r4, #16]
 800da28:	6962      	ldr	r2, [r4, #20]
 800da2a:	602b      	str	r3, [r5, #0]
 800da2c:	606f      	str	r7, [r5, #4]
 800da2e:	60a9      	str	r1, [r5, #8]
 800da30:	60ea      	str	r2, [r5, #12]
 800da32:	69a3      	ldr	r3, [r4, #24]
 800da34:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800da36:	b280      	uxth	r0, r0
 800da38:	f7f9 fa7e 	bl	8006f38 <lwip_htons>
 800da3c:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800da3e:	2300      	movs	r3, #0
 800da40:	71ab      	strb	r3, [r5, #6]
 800da42:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800da44:	72ab      	strb	r3, [r5, #10]
 800da46:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800da48:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800da4a:	b16e      	cbz	r6, 800da68 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 800da4c:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800da50:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800da52:	4641      	mov	r1, r8
 800da54:	4630      	mov	r0, r6
 800da56:	f7fa f8c5 	bl	8007be4 <pbuf_remove_header>
      pbuf_cat(p, r);
 800da5a:	4631      	mov	r1, r6
 800da5c:	4628      	mov	r0, r5
 800da5e:	f7fa faa1 	bl	8007fa4 <pbuf_cat>
      r = iprh->next_pbuf;
 800da62:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800da64:	2e00      	cmp	r6, #0
 800da66:	d1f3      	bne.n	800da50 <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 800da68:	4b3d      	ldr	r3, [pc, #244]	; (800db60 <ip4_reass+0x438>)
 800da6a:	6819      	ldr	r1, [r3, #0]
 800da6c:	42a1      	cmp	r1, r4
 800da6e:	d005      	beq.n	800da7c <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800da70:	b129      	cbz	r1, 800da7e <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 800da72:	680b      	ldr	r3, [r1, #0]
 800da74:	42a3      	cmp	r3, r4
 800da76:	d002      	beq.n	800da7e <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800da78:	4619      	mov	r1, r3
 800da7a:	e7f9      	b.n	800da70 <ip4_reass+0x348>
      ipr_prev = NULL;
 800da7c:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800da7e:	4620      	mov	r0, r4
 800da80:	f7ff fd22 	bl	800d4c8 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800da84:	4628      	mov	r0, r5
 800da86:	f7fa fa65 	bl	8007f54 <pbuf_clen>
 800da8a:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800da8c:	4b35      	ldr	r3, [pc, #212]	; (800db64 <ip4_reass+0x43c>)
 800da8e:	881b      	ldrh	r3, [r3, #0]
 800da90:	4283      	cmp	r3, r0
 800da92:	d304      	bcc.n	800da9e <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800da94:	4a33      	ldr	r2, [pc, #204]	; (800db64 <ip4_reass+0x43c>)
 800da96:	8813      	ldrh	r3, [r2, #0]
 800da98:	1b1c      	subs	r4, r3, r4
 800da9a:	8014      	strh	r4, [r2, #0]
    return p;
 800da9c:	e6c3      	b.n	800d826 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800da9e:	4b32      	ldr	r3, [pc, #200]	; (800db68 <ip4_reass+0x440>)
 800daa0:	f240 229b 	movw	r2, #667	; 0x29b
 800daa4:	4931      	ldr	r1, [pc, #196]	; (800db6c <ip4_reass+0x444>)
 800daa6:	4832      	ldr	r0, [pc, #200]	; (800db70 <ip4_reass+0x448>)
 800daa8:	f000 fc7a 	bl	800e3a0 <iprintf>
 800daac:	e7f2      	b.n	800da94 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800daae:	4b2e      	ldr	r3, [pc, #184]	; (800db68 <ip4_reass+0x440>)
 800dab0:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800dab4:	492f      	ldr	r1, [pc, #188]	; (800db74 <ip4_reass+0x44c>)
 800dab6:	482e      	ldr	r0, [pc, #184]	; (800db70 <ip4_reass+0x448>)
 800dab8:	f000 fc72 	bl	800e3a0 <iprintf>
 800dabc:	e6ab      	b.n	800d816 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800dabe:	4b28      	ldr	r3, [pc, #160]	; (800db60 <ip4_reass+0x438>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	42a3      	cmp	r3, r4
 800dac4:	d006      	beq.n	800dad4 <ip4_reass+0x3ac>
 800dac6:	4b28      	ldr	r3, [pc, #160]	; (800db68 <ip4_reass+0x440>)
 800dac8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800dacc:	492a      	ldr	r1, [pc, #168]	; (800db78 <ip4_reass+0x450>)
 800dace:	4828      	ldr	r0, [pc, #160]	; (800db70 <ip4_reass+0x448>)
 800dad0:	f000 fc66 	bl	800e3a0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800dad4:	2100      	movs	r1, #0
 800dad6:	4620      	mov	r0, r4
 800dad8:	f7ff fcf6 	bl	800d4c8 <ip_reass_dequeue_datagram>
 800dadc:	e69f      	b.n	800d81e <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800dade:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dae0:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800dae4:	455b      	cmp	r3, fp
 800dae6:	f43f af04 	beq.w	800d8f2 <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800daea:	f1b9 0f00 	cmp.w	r9, #0
 800daee:	d081      	beq.n	800d9f4 <ip4_reass+0x2cc>
 800daf0:	7fa3      	ldrb	r3, [r4, #30]
 800daf2:	f013 0f01 	tst.w	r3, #1
 800daf6:	f43f af03 	beq.w	800d900 <ip4_reass+0x1d8>
 800dafa:	f04f 0e00 	mov.w	lr, #0
 800dafe:	e75e      	b.n	800d9be <ip4_reass+0x296>
      ipr->p = new_p;
 800db00:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800db02:	f1b9 0f00 	cmp.w	r9, #0
 800db06:	f43f af2a 	beq.w	800d95e <ip4_reass+0x236>
  int valid = 1;
 800db0a:	f04f 0e01 	mov.w	lr, #1
 800db0e:	e6f3      	b.n	800d8f8 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800db10:	2004      	movs	r0, #4
 800db12:	f7f9 fdb5 	bl	8007680 <memp_malloc>
  if (ipr == NULL) {
 800db16:	4604      	mov	r4, r0
 800db18:	2800      	cmp	r0, #0
 800db1a:	f43f ae88 	beq.w	800d82e <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800db1e:	2300      	movs	r3, #0
 800db20:	6063      	str	r3, [r4, #4]
 800db22:	60a3      	str	r3, [r4, #8]
 800db24:	60e3      	str	r3, [r4, #12]
 800db26:	6123      	str	r3, [r4, #16]
 800db28:	6163      	str	r3, [r4, #20]
 800db2a:	61a3      	str	r3, [r4, #24]
 800db2c:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800db2e:	230f      	movs	r3, #15
 800db30:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800db32:	4b0b      	ldr	r3, [pc, #44]	; (800db60 <ip4_reass+0x438>)
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800db38:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800db3a:	f8d9 3000 	ldr.w	r3, [r9]
 800db3e:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800db42:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800db46:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800db4a:	60a3      	str	r3, [r4, #8]
 800db4c:	60e0      	str	r0, [r4, #12]
 800db4e:	6121      	str	r1, [r4, #16]
 800db50:	6162      	str	r2, [r4, #20]
 800db52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800db56:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800db58:	e63b      	b.n	800d7d2 <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800db5a:	f04f 0e01 	mov.w	lr, #1
 800db5e:	e72e      	b.n	800d9be <ip4_reass+0x296>
 800db60:	20010dc8 	.word	0x20010dc8
 800db64:	20010dc4 	.word	0x20010dc4
 800db68:	08012820 	.word	0x08012820
 800db6c:	0801291c 	.word	0x0801291c
 800db70:	0800f6b8 	.word	0x0800f6b8
 800db74:	08012938 	.word	0x08012938
 800db78:	08012944 	.word	0x08012944

0800db7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800db7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db80:	b08d      	sub	sp, #52	; 0x34
 800db82:	4605      	mov	r5, r0
 800db84:	9107      	str	r1, [sp, #28]
 800db86:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800db88:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800db8a:	3b14      	subs	r3, #20
 800db8c:	bf48      	it	mi
 800db8e:	3307      	addmi	r3, #7
 800db90:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800db94:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800db96:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800db9a:	f89a 3000 	ldrb.w	r3, [sl]
 800db9e:	f003 030f 	and.w	r3, r3, #15
 800dba2:	2b05      	cmp	r3, #5
 800dba4:	f040 80d9 	bne.w	800dd5a <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dba8:	8943      	ldrh	r3, [r0, #10]
 800dbaa:	2b13      	cmp	r3, #19
 800dbac:	d943      	bls.n	800dc36 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800dbae:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800dbb2:	f7f9 f9c1 	bl	8006f38 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800dbb6:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800dbba:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800dbbc:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800dbc0:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800dbc2:	892b      	ldrh	r3, [r5, #8]
 800dbc4:	3b14      	subs	r3, #20
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	9303      	str	r3, [sp, #12]

  while (left) {
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	f000 80c8 	beq.w	800dd60 <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dbd0:	9b06      	ldr	r3, [sp, #24]
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800dbd8:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800dbdc:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800dbde:	9b08      	ldr	r3, [sp, #32]
 800dbe0:	9a03      	ldr	r2, [sp, #12]
 800dbe2:	4293      	cmp	r3, r2
 800dbe4:	bf28      	it	cs
 800dbe6:	4613      	movcs	r3, r2
 800dbe8:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800dbea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dbee:	2114      	movs	r1, #20
 800dbf0:	200e      	movs	r0, #14
 800dbf2:	f7fa f8a7 	bl	8007d44 <pbuf_alloc>
    if (rambuf == NULL) {
 800dbf6:	4683      	mov	fp, r0
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	f000 80b3 	beq.w	800dd64 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dbfe:	8943      	ldrh	r3, [r0, #10]
 800dc00:	2b13      	cmp	r3, #19
 800dc02:	d922      	bls.n	800dc4a <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800dc04:	f8db 3004 	ldr.w	r3, [fp, #4]
 800dc08:	f8da 2000 	ldr.w	r2, [sl]
 800dc0c:	f8da 6004 	ldr.w	r6, [sl, #4]
 800dc10:	f8da 0008 	ldr.w	r0, [sl, #8]
 800dc14:	f8da 100c 	ldr.w	r1, [sl, #12]
 800dc18:	601a      	str	r2, [r3, #0]
 800dc1a:	605e      	str	r6, [r3, #4]
 800dc1c:	6098      	str	r0, [r3, #8]
 800dc1e:	60d9      	str	r1, [r3, #12]
 800dc20:	f8da 2010 	ldr.w	r2, [sl, #16]
 800dc24:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800dc26:	f8db 3004 	ldr.w	r3, [fp, #4]
 800dc2a:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800dc2c:	9b04      	ldr	r3, [sp, #16]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d04e      	beq.n	800dcd0 <ip4_frag+0x154>
    left_to_copy = fragsize;
 800dc32:	461e      	mov	r6, r3
 800dc34:	e01d      	b.n	800dc72 <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800dc36:	4b4d      	ldr	r3, [pc, #308]	; (800dd6c <ip4_frag+0x1f0>)
 800dc38:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800dc3c:	494c      	ldr	r1, [pc, #304]	; (800dd70 <ip4_frag+0x1f4>)
 800dc3e:	484d      	ldr	r0, [pc, #308]	; (800dd74 <ip4_frag+0x1f8>)
 800dc40:	f000 fbae 	bl	800e3a0 <iprintf>
 800dc44:	f06f 0005 	mvn.w	r0, #5
 800dc48:	e07b      	b.n	800dd42 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800dc4a:	4b48      	ldr	r3, [pc, #288]	; (800dd6c <ip4_frag+0x1f0>)
 800dc4c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800dc50:	4949      	ldr	r1, [pc, #292]	; (800dd78 <ip4_frag+0x1fc>)
 800dc52:	4848      	ldr	r0, [pc, #288]	; (800dd74 <ip4_frag+0x1f8>)
 800dc54:	f000 fba4 	bl	800e3a0 <iprintf>
 800dc58:	e7d4      	b.n	800dc04 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dc5a:	4b44      	ldr	r3, [pc, #272]	; (800dd6c <ip4_frag+0x1f0>)
 800dc5c:	f240 322d 	movw	r2, #813	; 0x32d
 800dc60:	4946      	ldr	r1, [pc, #280]	; (800dd7c <ip4_frag+0x200>)
 800dc62:	4844      	ldr	r0, [pc, #272]	; (800dd74 <ip4_frag+0x1f8>)
 800dc64:	f000 fb9c 	bl	800e3a0 <iprintf>
 800dc68:	e009      	b.n	800dc7e <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800dc6a:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800dc6c:	b376      	cbz	r6, 800dccc <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800dc6e:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800dc72:	896b      	ldrh	r3, [r5, #10]
 800dc74:	eba3 0409 	sub.w	r4, r3, r9
 800dc78:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800dc7a:	454b      	cmp	r3, r9
 800dc7c:	d3ed      	bcc.n	800dc5a <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800dc7e:	42b4      	cmp	r4, r6
 800dc80:	bf28      	it	cs
 800dc82:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800dc84:	2c00      	cmp	r4, #0
 800dc86:	d0f0      	beq.n	800dc6a <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800dc88:	2005      	movs	r0, #5
 800dc8a:	f7f9 fcf9 	bl	8007680 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800dc8e:	4607      	mov	r7, r0
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d051      	beq.n	800dd38 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800dc94:	9401      	str	r4, [sp, #4]
 800dc96:	686b      	ldr	r3, [r5, #4]
 800dc98:	444b      	add	r3, r9
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2241      	movs	r2, #65	; 0x41
 800dca0:	4621      	mov	r1, r4
 800dca2:	2000      	movs	r0, #0
 800dca4:	f7f9 ff7c 	bl	8007ba0 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800dca8:	4680      	mov	r8, r0
 800dcaa:	2800      	cmp	r0, #0
 800dcac:	d04c      	beq.n	800dd48 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f7fa f95c 	bl	8007f6c <pbuf_ref>
      pcr->original = p;
 800dcb4:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800dcb6:	4b32      	ldr	r3, [pc, #200]	; (800dd80 <ip4_frag+0x204>)
 800dcb8:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800dcba:	4641      	mov	r1, r8
 800dcbc:	4658      	mov	r0, fp
 800dcbe:	f7fa f971 	bl	8007fa4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800dcc2:	1b36      	subs	r6, r6, r4
 800dcc4:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800dcc6:	b11e      	cbz	r6, 800dcd0 <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800dcc8:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800dcca:	e7d0      	b.n	800dc6e <ip4_frag+0xf2>
        poff = 0;
 800dccc:	46b1      	mov	r9, r6
 800dcce:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800dcd0:	44a1      	add	r9, r4
 800dcd2:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800dcd6:	9b05      	ldr	r3, [sp, #20]
 800dcd8:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800dcdc:	9b07      	ldr	r3, [sp, #28]
 800dcde:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800dce0:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800dce2:	9a03      	ldr	r2, [sp, #12]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	dd01      	ble.n	800dcec <ip4_frag+0x170>
 800dce8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcea:	b10b      	cbz	r3, 800dcf0 <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800dcec:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800dcf0:	f7f9 f922 	bl	8006f38 <lwip_htons>
 800dcf4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dcf6:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800dcf8:	9f04      	ldr	r7, [sp, #16]
 800dcfa:	f107 0014 	add.w	r0, r7, #20
 800dcfe:	b280      	uxth	r0, r0
 800dd00:	f7f9 f91a 	bl	8006f38 <lwip_htons>
 800dd04:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800dd06:	2300      	movs	r3, #0
 800dd08:	72b3      	strb	r3, [r6, #10]
 800dd0a:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800dd0c:	9807      	ldr	r0, [sp, #28]
 800dd0e:	6943      	ldr	r3, [r0, #20]
 800dd10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd12:	4659      	mov	r1, fp
 800dd14:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800dd16:	4658      	mov	r0, fp
 800dd18:	f7f9 ffa4 	bl	8007c64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800dd1c:	9b03      	ldr	r3, [sp, #12]
 800dd1e:	1bdb      	subs	r3, r3, r7
 800dd20:	b29a      	uxth	r2, r3
 800dd22:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800dd24:	9b05      	ldr	r3, [sp, #20]
 800dd26:	9906      	ldr	r1, [sp, #24]
 800dd28:	440b      	add	r3, r1
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	9305      	str	r3, [sp, #20]
  while (left) {
 800dd2e:	2a00      	cmp	r2, #0
 800dd30:	f47f af55 	bne.w	800dbde <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800dd34:	2000      	movs	r0, #0
 800dd36:	e004      	b.n	800dd42 <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800dd38:	4658      	mov	r0, fp
 800dd3a:	f7f9 ff93 	bl	8007c64 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800dd3e:	f04f 30ff 	mov.w	r0, #4294967295
}
 800dd42:	b00d      	add	sp, #52	; 0x34
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800dd48:	4638      	mov	r0, r7
 800dd4a:	f7ff fca5 	bl	800d698 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800dd4e:	4658      	mov	r0, fp
 800dd50:	f7f9 ff88 	bl	8007c64 <pbuf_free>
  return ERR_MEM;
 800dd54:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800dd58:	e7f3      	b.n	800dd42 <ip4_frag+0x1c6>
    return ERR_VAL;
 800dd5a:	f06f 0005 	mvn.w	r0, #5
 800dd5e:	e7f0      	b.n	800dd42 <ip4_frag+0x1c6>
  return ERR_OK;
 800dd60:	2000      	movs	r0, #0
 800dd62:	e7ee      	b.n	800dd42 <ip4_frag+0x1c6>
  return ERR_MEM;
 800dd64:	f04f 30ff 	mov.w	r0, #4294967295
 800dd68:	e7eb      	b.n	800dd42 <ip4_frag+0x1c6>
 800dd6a:	bf00      	nop
 800dd6c:	08012820 	.word	0x08012820
 800dd70:	08012964 	.word	0x08012964
 800dd74:	0800f6b8 	.word	0x0800f6b8
 800dd78:	08012980 	.word	0x08012980
 800dd7c:	080129a0 	.word	0x080129a0
 800dd80:	0800d6c5 	.word	0x0800d6c5

0800dd84 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800dd84:	b570      	push	{r4, r5, r6, lr}
 800dd86:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800dd88:	8943      	ldrh	r3, [r0, #10]
 800dd8a:	2b0e      	cmp	r3, #14
 800dd8c:	d91c      	bls.n	800ddc8 <ethernet_input+0x44>
 800dd8e:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800dd90:	7bc3      	ldrb	r3, [r0, #15]
 800dd92:	b91b      	cbnz	r3, 800dd9c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800dd94:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800dd98:	3301      	adds	r3, #1
 800dd9a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800dd9c:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800dd9e:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800dda0:	7803      	ldrb	r3, [r0, #0]
 800dda2:	f013 0f01 	tst.w	r3, #1
 800dda6:	d00a      	beq.n	800ddbe <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800dda8:	2b01      	cmp	r3, #1
 800ddaa:	d012      	beq.n	800ddd2 <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800ddac:	2206      	movs	r2, #6
 800ddae:	491e      	ldr	r1, [pc, #120]	; (800de28 <ethernet_input+0xa4>)
 800ddb0:	f000 fa21 	bl	800e1f6 <memcmp>
 800ddb4:	b918      	cbnz	r0, 800ddbe <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800ddb6:	7b63      	ldrb	r3, [r4, #13]
 800ddb8:	f043 0308 	orr.w	r3, r3, #8
 800ddbc:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800ddbe:	2e08      	cmp	r6, #8
 800ddc0:	d012      	beq.n	800dde8 <ethernet_input+0x64>
 800ddc2:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800ddc6:	d01f      	beq.n	800de08 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f7f9 ff4b 	bl	8007c64 <pbuf_free>
  return ERR_OK;
}
 800ddce:	2000      	movs	r0, #0
 800ddd0:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800ddd2:	7843      	ldrb	r3, [r0, #1]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d1f2      	bne.n	800ddbe <ethernet_input+0x3a>
 800ddd8:	7883      	ldrb	r3, [r0, #2]
 800ddda:	2b5e      	cmp	r3, #94	; 0x5e
 800dddc:	d1ef      	bne.n	800ddbe <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800ddde:	7b63      	ldrb	r3, [r4, #13]
 800dde0:	f043 0310 	orr.w	r3, r3, #16
 800dde4:	7363      	strb	r3, [r4, #13]
 800dde6:	e7ea      	b.n	800ddbe <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800dde8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800ddec:	f013 0f08 	tst.w	r3, #8
 800ddf0:	d0ea      	beq.n	800ddc8 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800ddf2:	210e      	movs	r1, #14
 800ddf4:	4620      	mov	r0, r4
 800ddf6:	f7f9 fef5 	bl	8007be4 <pbuf_remove_header>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d1e4      	bne.n	800ddc8 <ethernet_input+0x44>
        ip4_input(p, netif);
 800ddfe:	4629      	mov	r1, r5
 800de00:	4620      	mov	r0, r4
 800de02:	f7ff f9dd 	bl	800d1c0 <ip4_input>
      break;
 800de06:	e7e2      	b.n	800ddce <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800de08:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800de0c:	f013 0f08 	tst.w	r3, #8
 800de10:	d0da      	beq.n	800ddc8 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800de12:	210e      	movs	r1, #14
 800de14:	4620      	mov	r0, r4
 800de16:	f7f9 fee5 	bl	8007be4 <pbuf_remove_header>
 800de1a:	2800      	cmp	r0, #0
 800de1c:	d1d4      	bne.n	800ddc8 <ethernet_input+0x44>
        etharp_input(p, netif);
 800de1e:	4629      	mov	r1, r5
 800de20:	4620      	mov	r0, r4
 800de22:	f7fe fd9d 	bl	800c960 <etharp_input>
      break;
 800de26:	e7d2      	b.n	800ddce <ethernet_input+0x4a>
 800de28:	08012a1c 	.word	0x08012a1c

0800de2c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800de2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de30:	4605      	mov	r5, r0
 800de32:	460c      	mov	r4, r1
 800de34:	4616      	mov	r6, r2
 800de36:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800de38:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800de3c:	f7f9 f87c 	bl	8006f38 <lwip_htons>
 800de40:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800de42:	210e      	movs	r1, #14
 800de44:	4620      	mov	r0, r4
 800de46:	f7f9 fec8 	bl	8007bda <pbuf_add_header>
 800de4a:	b9e8      	cbnz	r0, 800de88 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800de4c:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800de4e:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	600b      	str	r3, [r1, #0]
 800de56:	88bb      	ldrh	r3, [r7, #4]
 800de58:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800de5a:	6833      	ldr	r3, [r6, #0]
 800de5c:	f8c1 3006 	str.w	r3, [r1, #6]
 800de60:	88b3      	ldrh	r3, [r6, #4]
 800de62:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800de64:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800de68:	2b06      	cmp	r3, #6
 800de6a:	d105      	bne.n	800de78 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800de6c:	69ab      	ldr	r3, [r5, #24]
 800de6e:	4621      	mov	r1, r4
 800de70:	4628      	mov	r0, r5
 800de72:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800de74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800de78:	4b05      	ldr	r3, [pc, #20]	; (800de90 <ethernet_output+0x64>)
 800de7a:	f44f 7299 	mov.w	r2, #306	; 0x132
 800de7e:	4905      	ldr	r1, [pc, #20]	; (800de94 <ethernet_output+0x68>)
 800de80:	4805      	ldr	r0, [pc, #20]	; (800de98 <ethernet_output+0x6c>)
 800de82:	f000 fa8d 	bl	800e3a0 <iprintf>
 800de86:	e7f1      	b.n	800de6c <ethernet_output+0x40>
  return ERR_BUF;
 800de88:	f06f 0001 	mvn.w	r0, #1
 800de8c:	e7f2      	b.n	800de74 <ethernet_output+0x48>
 800de8e:	bf00      	nop
 800de90:	080129b0 	.word	0x080129b0
 800de94:	080129e8 	.word	0x080129e8
 800de98:	0800f6b8 	.word	0x0800f6b8

0800de9c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800de9c:	b510      	push	{r4, lr}
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800dea2:	2200      	movs	r2, #0
 800dea4:	2104      	movs	r1, #4
 800dea6:	f7f5 fe51 	bl	8003b4c <osMessageQueueNew>
 800deaa:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800deac:	fab0 f080 	clz	r0, r0
 800deb0:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800deb2:	4240      	negs	r0, r0
 800deb4:	bd10      	pop	{r4, pc}

0800deb6 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800deb6:	b500      	push	{lr}
 800deb8:	b083      	sub	sp, #12
 800deba:	9101      	str	r1, [sp, #4]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800debc:	2300      	movs	r3, #0
 800debe:	461a      	mov	r2, r3
 800dec0:	a901      	add	r1, sp, #4
 800dec2:	6800      	ldr	r0, [r0, #0]
 800dec4:	f7f5 fe88 	bl	8003bd8 <osMessageQueuePut>
 800dec8:	3800      	subs	r0, #0
 800deca:	bf18      	it	ne
 800decc:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800dece:	4240      	negs	r0, r0
 800ded0:	b003      	add	sp, #12
 800ded2:	f85d fb04 	ldr.w	pc, [sp], #4

0800ded6 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800ded6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded8:	4606      	mov	r6, r0
 800deda:	460f      	mov	r7, r1
 800dedc:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800dede:	f7f5 fc81 	bl	80037e4 <osKernelGetTickCount>
 800dee2:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800dee4:	b16d      	cbz	r5, 800df02 <sys_arch_mbox_fetch+0x2c>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800dee6:	462b      	mov	r3, r5
 800dee8:	2200      	movs	r2, #0
 800deea:	4639      	mov	r1, r7
 800deec:	6830      	ldr	r0, [r6, #0]
 800deee:	f7f5 feb5 	bl	8003c5c <osMessageQueueGet>
    if (status == osOK)
 800def2:	b110      	cbz	r0, 800defa <sys_arch_mbox_fetch+0x24>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800def4:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800def8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (osKernelGetTickCount() - starttime);
 800defa:	f7f5 fc73 	bl	80037e4 <osKernelGetTickCount>
 800defe:	1b00      	subs	r0, r0, r4
 800df00:	e7fa      	b.n	800def8 <sys_arch_mbox_fetch+0x22>
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800df02:	f04f 33ff 	mov.w	r3, #4294967295
 800df06:	2200      	movs	r2, #0
 800df08:	4639      	mov	r1, r7
 800df0a:	6830      	ldr	r0, [r6, #0]
 800df0c:	f7f5 fea6 	bl	8003c5c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800df10:	f7f5 fc68 	bl	80037e4 <osKernelGetTickCount>
 800df14:	1b00      	subs	r0, r0, r4
 800df16:	e7ef      	b.n	800def8 <sys_arch_mbox_fetch+0x22>

0800df18 <sys_mbox_valid>:
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800df18:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800df1a:	3800      	subs	r0, #0
 800df1c:	bf18      	it	ne
 800df1e:	2001      	movne	r0, #1
 800df20:	4770      	bx	lr
	...

0800df24 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800df24:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800df26:	2000      	movs	r0, #0
 800df28:	f7f5 fcc0 	bl	80038ac <osMutexNew>
 800df2c:	4b01      	ldr	r3, [pc, #4]	; (800df34 <sys_init+0x10>)
 800df2e:	6018      	str	r0, [r3, #0]
#endif
}
 800df30:	bd08      	pop	{r3, pc}
 800df32:	bf00      	nop
 800df34:	20010dcc 	.word	0x20010dcc

0800df38 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800df38:	b510      	push	{r4, lr}
 800df3a:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800df3c:	2000      	movs	r0, #0
 800df3e:	f7f5 fcb5 	bl	80038ac <osMutexNew>
 800df42:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 800df44:	fab0 f080 	clz	r0, r0
 800df48:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800df4a:	4240      	negs	r0, r0
 800df4c:	bd10      	pop	{r4, pc}

0800df4e <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800df4e:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800df50:	f04f 31ff 	mov.w	r1, #4294967295
 800df54:	6800      	ldr	r0, [r0, #0]
 800df56:	f7f5 fce9 	bl	800392c <osMutexAcquire>
#endif
}
 800df5a:	bd08      	pop	{r3, pc}

0800df5c <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800df5c:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800df5e:	6800      	ldr	r0, [r0, #0]
 800df60:	f7f5 fd10 	bl	8003984 <osMutexRelease>
}
 800df64:	bd08      	pop	{r3, pc}

0800df66 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800df66:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df68:	b08b      	sub	sp, #44	; 0x2c
 800df6a:	4607      	mov	r7, r0
 800df6c:	460c      	mov	r4, r1
 800df6e:	4615      	mov	r5, r2
 800df70:	461e      	mov	r6, r3
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800df72:	2220      	movs	r2, #32
 800df74:	2100      	movs	r1, #0
 800df76:	a802      	add	r0, sp, #8
 800df78:	f000 f975 	bl	800e266 <memset>
 800df7c:	9701      	str	r7, [sp, #4]
 800df7e:	9606      	str	r6, [sp, #24]
 800df80:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df82:	9307      	str	r3, [sp, #28]
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800df84:	aa01      	add	r2, sp, #4
 800df86:	4629      	mov	r1, r5
 800df88:	4620      	mov	r0, r4
 800df8a:	f7f5 fc35 	bl	80037f8 <osThreadNew>
#endif
}
 800df8e:	b00b      	add	sp, #44	; 0x2c
 800df90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800df94 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800df94:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800df96:	f04f 31ff 	mov.w	r1, #4294967295
 800df9a:	4b03      	ldr	r3, [pc, #12]	; (800dfa8 <sys_arch_protect+0x14>)
 800df9c:	6818      	ldr	r0, [r3, #0]
 800df9e:	f7f5 fcc5 	bl	800392c <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800dfa2:	2001      	movs	r0, #1
 800dfa4:	bd08      	pop	{r3, pc}
 800dfa6:	bf00      	nop
 800dfa8:	20010dcc 	.word	0x20010dcc

0800dfac <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800dfac:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800dfae:	4b02      	ldr	r3, [pc, #8]	; (800dfb8 <sys_arch_unprotect+0xc>)
 800dfb0:	6818      	ldr	r0, [r3, #0]
 800dfb2:	f7f5 fce7 	bl	8003984 <osMutexRelease>
}
 800dfb6:	bd08      	pop	{r3, pc}
 800dfb8:	20010dcc 	.word	0x20010dcc

0800dfbc <std>:
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	b510      	push	{r4, lr}
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	e9c0 3300 	strd	r3, r3, [r0]
 800dfc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfca:	6083      	str	r3, [r0, #8]
 800dfcc:	8181      	strh	r1, [r0, #12]
 800dfce:	6643      	str	r3, [r0, #100]	; 0x64
 800dfd0:	81c2      	strh	r2, [r0, #14]
 800dfd2:	6183      	str	r3, [r0, #24]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	2208      	movs	r2, #8
 800dfd8:	305c      	adds	r0, #92	; 0x5c
 800dfda:	f000 f944 	bl	800e266 <memset>
 800dfde:	4b05      	ldr	r3, [pc, #20]	; (800dff4 <std+0x38>)
 800dfe0:	6263      	str	r3, [r4, #36]	; 0x24
 800dfe2:	4b05      	ldr	r3, [pc, #20]	; (800dff8 <std+0x3c>)
 800dfe4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfe6:	4b05      	ldr	r3, [pc, #20]	; (800dffc <std+0x40>)
 800dfe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfea:	4b05      	ldr	r3, [pc, #20]	; (800e000 <std+0x44>)
 800dfec:	6224      	str	r4, [r4, #32]
 800dfee:	6323      	str	r3, [r4, #48]	; 0x30
 800dff0:	bd10      	pop	{r4, pc}
 800dff2:	bf00      	nop
 800dff4:	0800e581 	.word	0x0800e581
 800dff8:	0800e5a3 	.word	0x0800e5a3
 800dffc:	0800e5db 	.word	0x0800e5db
 800e000:	0800e5ff 	.word	0x0800e5ff

0800e004 <_cleanup_r>:
 800e004:	4901      	ldr	r1, [pc, #4]	; (800e00c <_cleanup_r+0x8>)
 800e006:	f000 b8af 	b.w	800e168 <_fwalk_reent>
 800e00a:	bf00      	nop
 800e00c:	0800e7e5 	.word	0x0800e7e5

0800e010 <__sfmoreglue>:
 800e010:	b570      	push	{r4, r5, r6, lr}
 800e012:	2268      	movs	r2, #104	; 0x68
 800e014:	1e4d      	subs	r5, r1, #1
 800e016:	4355      	muls	r5, r2
 800e018:	460e      	mov	r6, r1
 800e01a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e01e:	f000 f94b 	bl	800e2b8 <_malloc_r>
 800e022:	4604      	mov	r4, r0
 800e024:	b140      	cbz	r0, 800e038 <__sfmoreglue+0x28>
 800e026:	2100      	movs	r1, #0
 800e028:	e9c0 1600 	strd	r1, r6, [r0]
 800e02c:	300c      	adds	r0, #12
 800e02e:	60a0      	str	r0, [r4, #8]
 800e030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e034:	f000 f917 	bl	800e266 <memset>
 800e038:	4620      	mov	r0, r4
 800e03a:	bd70      	pop	{r4, r5, r6, pc}

0800e03c <__sfp_lock_acquire>:
 800e03c:	4801      	ldr	r0, [pc, #4]	; (800e044 <__sfp_lock_acquire+0x8>)
 800e03e:	f000 b8d8 	b.w	800e1f2 <__retarget_lock_acquire_recursive>
 800e042:	bf00      	nop
 800e044:	20010dd1 	.word	0x20010dd1

0800e048 <__sfp_lock_release>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__sfp_lock_release+0x8>)
 800e04a:	f000 b8d3 	b.w	800e1f4 <__retarget_lock_release_recursive>
 800e04e:	bf00      	nop
 800e050:	20010dd1 	.word	0x20010dd1

0800e054 <__sinit_lock_acquire>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__sinit_lock_acquire+0x8>)
 800e056:	f000 b8cc 	b.w	800e1f2 <__retarget_lock_acquire_recursive>
 800e05a:	bf00      	nop
 800e05c:	20010dd2 	.word	0x20010dd2

0800e060 <__sinit_lock_release>:
 800e060:	4801      	ldr	r0, [pc, #4]	; (800e068 <__sinit_lock_release+0x8>)
 800e062:	f000 b8c7 	b.w	800e1f4 <__retarget_lock_release_recursive>
 800e066:	bf00      	nop
 800e068:	20010dd2 	.word	0x20010dd2

0800e06c <__sinit>:
 800e06c:	b510      	push	{r4, lr}
 800e06e:	4604      	mov	r4, r0
 800e070:	f7ff fff0 	bl	800e054 <__sinit_lock_acquire>
 800e074:	69a3      	ldr	r3, [r4, #24]
 800e076:	b11b      	cbz	r3, 800e080 <__sinit+0x14>
 800e078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e07c:	f7ff bff0 	b.w	800e060 <__sinit_lock_release>
 800e080:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e084:	6523      	str	r3, [r4, #80]	; 0x50
 800e086:	4b13      	ldr	r3, [pc, #76]	; (800e0d4 <__sinit+0x68>)
 800e088:	4a13      	ldr	r2, [pc, #76]	; (800e0d8 <__sinit+0x6c>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e08e:	42a3      	cmp	r3, r4
 800e090:	bf04      	itt	eq
 800e092:	2301      	moveq	r3, #1
 800e094:	61a3      	streq	r3, [r4, #24]
 800e096:	4620      	mov	r0, r4
 800e098:	f000 f820 	bl	800e0dc <__sfp>
 800e09c:	6060      	str	r0, [r4, #4]
 800e09e:	4620      	mov	r0, r4
 800e0a0:	f000 f81c 	bl	800e0dc <__sfp>
 800e0a4:	60a0      	str	r0, [r4, #8]
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	f000 f818 	bl	800e0dc <__sfp>
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	60e0      	str	r0, [r4, #12]
 800e0b0:	2104      	movs	r1, #4
 800e0b2:	6860      	ldr	r0, [r4, #4]
 800e0b4:	f7ff ff82 	bl	800dfbc <std>
 800e0b8:	68a0      	ldr	r0, [r4, #8]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	2109      	movs	r1, #9
 800e0be:	f7ff ff7d 	bl	800dfbc <std>
 800e0c2:	68e0      	ldr	r0, [r4, #12]
 800e0c4:	2202      	movs	r2, #2
 800e0c6:	2112      	movs	r1, #18
 800e0c8:	f7ff ff78 	bl	800dfbc <std>
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	61a3      	str	r3, [r4, #24]
 800e0d0:	e7d2      	b.n	800e078 <__sinit+0xc>
 800e0d2:	bf00      	nop
 800e0d4:	08012a8c 	.word	0x08012a8c
 800e0d8:	0800e005 	.word	0x0800e005

0800e0dc <__sfp>:
 800e0dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0de:	4607      	mov	r7, r0
 800e0e0:	f7ff ffac 	bl	800e03c <__sfp_lock_acquire>
 800e0e4:	4b1e      	ldr	r3, [pc, #120]	; (800e160 <__sfp+0x84>)
 800e0e6:	681e      	ldr	r6, [r3, #0]
 800e0e8:	69b3      	ldr	r3, [r6, #24]
 800e0ea:	b913      	cbnz	r3, 800e0f2 <__sfp+0x16>
 800e0ec:	4630      	mov	r0, r6
 800e0ee:	f7ff ffbd 	bl	800e06c <__sinit>
 800e0f2:	3648      	adds	r6, #72	; 0x48
 800e0f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0f8:	3b01      	subs	r3, #1
 800e0fa:	d503      	bpl.n	800e104 <__sfp+0x28>
 800e0fc:	6833      	ldr	r3, [r6, #0]
 800e0fe:	b30b      	cbz	r3, 800e144 <__sfp+0x68>
 800e100:	6836      	ldr	r6, [r6, #0]
 800e102:	e7f7      	b.n	800e0f4 <__sfp+0x18>
 800e104:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e108:	b9d5      	cbnz	r5, 800e140 <__sfp+0x64>
 800e10a:	4b16      	ldr	r3, [pc, #88]	; (800e164 <__sfp+0x88>)
 800e10c:	60e3      	str	r3, [r4, #12]
 800e10e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e112:	6665      	str	r5, [r4, #100]	; 0x64
 800e114:	f000 f86c 	bl	800e1f0 <__retarget_lock_init_recursive>
 800e118:	f7ff ff96 	bl	800e048 <__sfp_lock_release>
 800e11c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e124:	6025      	str	r5, [r4, #0]
 800e126:	61a5      	str	r5, [r4, #24]
 800e128:	2208      	movs	r2, #8
 800e12a:	4629      	mov	r1, r5
 800e12c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e130:	f000 f899 	bl	800e266 <memset>
 800e134:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e138:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e13c:	4620      	mov	r0, r4
 800e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e140:	3468      	adds	r4, #104	; 0x68
 800e142:	e7d9      	b.n	800e0f8 <__sfp+0x1c>
 800e144:	2104      	movs	r1, #4
 800e146:	4638      	mov	r0, r7
 800e148:	f7ff ff62 	bl	800e010 <__sfmoreglue>
 800e14c:	4604      	mov	r4, r0
 800e14e:	6030      	str	r0, [r6, #0]
 800e150:	2800      	cmp	r0, #0
 800e152:	d1d5      	bne.n	800e100 <__sfp+0x24>
 800e154:	f7ff ff78 	bl	800e048 <__sfp_lock_release>
 800e158:	230c      	movs	r3, #12
 800e15a:	603b      	str	r3, [r7, #0]
 800e15c:	e7ee      	b.n	800e13c <__sfp+0x60>
 800e15e:	bf00      	nop
 800e160:	08012a8c 	.word	0x08012a8c
 800e164:	ffff0001 	.word	0xffff0001

0800e168 <_fwalk_reent>:
 800e168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e16c:	4606      	mov	r6, r0
 800e16e:	4688      	mov	r8, r1
 800e170:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e174:	2700      	movs	r7, #0
 800e176:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e17a:	f1b9 0901 	subs.w	r9, r9, #1
 800e17e:	d505      	bpl.n	800e18c <_fwalk_reent+0x24>
 800e180:	6824      	ldr	r4, [r4, #0]
 800e182:	2c00      	cmp	r4, #0
 800e184:	d1f7      	bne.n	800e176 <_fwalk_reent+0xe>
 800e186:	4638      	mov	r0, r7
 800e188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e18c:	89ab      	ldrh	r3, [r5, #12]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d907      	bls.n	800e1a2 <_fwalk_reent+0x3a>
 800e192:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e196:	3301      	adds	r3, #1
 800e198:	d003      	beq.n	800e1a2 <_fwalk_reent+0x3a>
 800e19a:	4629      	mov	r1, r5
 800e19c:	4630      	mov	r0, r6
 800e19e:	47c0      	blx	r8
 800e1a0:	4307      	orrs	r7, r0
 800e1a2:	3568      	adds	r5, #104	; 0x68
 800e1a4:	e7e9      	b.n	800e17a <_fwalk_reent+0x12>
	...

0800e1a8 <__libc_init_array>:
 800e1a8:	b570      	push	{r4, r5, r6, lr}
 800e1aa:	4d0d      	ldr	r5, [pc, #52]	; (800e1e0 <__libc_init_array+0x38>)
 800e1ac:	4c0d      	ldr	r4, [pc, #52]	; (800e1e4 <__libc_init_array+0x3c>)
 800e1ae:	1b64      	subs	r4, r4, r5
 800e1b0:	10a4      	asrs	r4, r4, #2
 800e1b2:	2600      	movs	r6, #0
 800e1b4:	42a6      	cmp	r6, r4
 800e1b6:	d109      	bne.n	800e1cc <__libc_init_array+0x24>
 800e1b8:	4d0b      	ldr	r5, [pc, #44]	; (800e1e8 <__libc_init_array+0x40>)
 800e1ba:	4c0c      	ldr	r4, [pc, #48]	; (800e1ec <__libc_init_array+0x44>)
 800e1bc:	f001 f9f8 	bl	800f5b0 <_init>
 800e1c0:	1b64      	subs	r4, r4, r5
 800e1c2:	10a4      	asrs	r4, r4, #2
 800e1c4:	2600      	movs	r6, #0
 800e1c6:	42a6      	cmp	r6, r4
 800e1c8:	d105      	bne.n	800e1d6 <__libc_init_array+0x2e>
 800e1ca:	bd70      	pop	{r4, r5, r6, pc}
 800e1cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1d0:	4798      	blx	r3
 800e1d2:	3601      	adds	r6, #1
 800e1d4:	e7ee      	b.n	800e1b4 <__libc_init_array+0xc>
 800e1d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1da:	4798      	blx	r3
 800e1dc:	3601      	adds	r6, #1
 800e1de:	e7f2      	b.n	800e1c6 <__libc_init_array+0x1e>
 800e1e0:	08012b7c 	.word	0x08012b7c
 800e1e4:	08012b7c 	.word	0x08012b7c
 800e1e8:	08012b7c 	.word	0x08012b7c
 800e1ec:	08012b80 	.word	0x08012b80

0800e1f0 <__retarget_lock_init_recursive>:
 800e1f0:	4770      	bx	lr

0800e1f2 <__retarget_lock_acquire_recursive>:
 800e1f2:	4770      	bx	lr

0800e1f4 <__retarget_lock_release_recursive>:
 800e1f4:	4770      	bx	lr

0800e1f6 <memcmp>:
 800e1f6:	b510      	push	{r4, lr}
 800e1f8:	3901      	subs	r1, #1
 800e1fa:	4402      	add	r2, r0
 800e1fc:	4290      	cmp	r0, r2
 800e1fe:	d101      	bne.n	800e204 <memcmp+0xe>
 800e200:	2000      	movs	r0, #0
 800e202:	e005      	b.n	800e210 <memcmp+0x1a>
 800e204:	7803      	ldrb	r3, [r0, #0]
 800e206:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e20a:	42a3      	cmp	r3, r4
 800e20c:	d001      	beq.n	800e212 <memcmp+0x1c>
 800e20e:	1b18      	subs	r0, r3, r4
 800e210:	bd10      	pop	{r4, pc}
 800e212:	3001      	adds	r0, #1
 800e214:	e7f2      	b.n	800e1fc <memcmp+0x6>

0800e216 <memcpy>:
 800e216:	440a      	add	r2, r1
 800e218:	4291      	cmp	r1, r2
 800e21a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e21e:	d100      	bne.n	800e222 <memcpy+0xc>
 800e220:	4770      	bx	lr
 800e222:	b510      	push	{r4, lr}
 800e224:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e228:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e22c:	4291      	cmp	r1, r2
 800e22e:	d1f9      	bne.n	800e224 <memcpy+0xe>
 800e230:	bd10      	pop	{r4, pc}

0800e232 <memmove>:
 800e232:	4288      	cmp	r0, r1
 800e234:	b510      	push	{r4, lr}
 800e236:	eb01 0402 	add.w	r4, r1, r2
 800e23a:	d902      	bls.n	800e242 <memmove+0x10>
 800e23c:	4284      	cmp	r4, r0
 800e23e:	4623      	mov	r3, r4
 800e240:	d807      	bhi.n	800e252 <memmove+0x20>
 800e242:	1e43      	subs	r3, r0, #1
 800e244:	42a1      	cmp	r1, r4
 800e246:	d008      	beq.n	800e25a <memmove+0x28>
 800e248:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e24c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e250:	e7f8      	b.n	800e244 <memmove+0x12>
 800e252:	4402      	add	r2, r0
 800e254:	4601      	mov	r1, r0
 800e256:	428a      	cmp	r2, r1
 800e258:	d100      	bne.n	800e25c <memmove+0x2a>
 800e25a:	bd10      	pop	{r4, pc}
 800e25c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e260:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e264:	e7f7      	b.n	800e256 <memmove+0x24>

0800e266 <memset>:
 800e266:	4402      	add	r2, r0
 800e268:	4603      	mov	r3, r0
 800e26a:	4293      	cmp	r3, r2
 800e26c:	d100      	bne.n	800e270 <memset+0xa>
 800e26e:	4770      	bx	lr
 800e270:	f803 1b01 	strb.w	r1, [r3], #1
 800e274:	e7f9      	b.n	800e26a <memset+0x4>
	...

0800e278 <sbrk_aligned>:
 800e278:	b570      	push	{r4, r5, r6, lr}
 800e27a:	4e0e      	ldr	r6, [pc, #56]	; (800e2b4 <sbrk_aligned+0x3c>)
 800e27c:	460c      	mov	r4, r1
 800e27e:	6831      	ldr	r1, [r6, #0]
 800e280:	4605      	mov	r5, r0
 800e282:	b911      	cbnz	r1, 800e28a <sbrk_aligned+0x12>
 800e284:	f000 f94c 	bl	800e520 <_sbrk_r>
 800e288:	6030      	str	r0, [r6, #0]
 800e28a:	4621      	mov	r1, r4
 800e28c:	4628      	mov	r0, r5
 800e28e:	f000 f947 	bl	800e520 <_sbrk_r>
 800e292:	1c43      	adds	r3, r0, #1
 800e294:	d00a      	beq.n	800e2ac <sbrk_aligned+0x34>
 800e296:	1cc4      	adds	r4, r0, #3
 800e298:	f024 0403 	bic.w	r4, r4, #3
 800e29c:	42a0      	cmp	r0, r4
 800e29e:	d007      	beq.n	800e2b0 <sbrk_aligned+0x38>
 800e2a0:	1a21      	subs	r1, r4, r0
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	f000 f93c 	bl	800e520 <_sbrk_r>
 800e2a8:	3001      	adds	r0, #1
 800e2aa:	d101      	bne.n	800e2b0 <sbrk_aligned+0x38>
 800e2ac:	f04f 34ff 	mov.w	r4, #4294967295
 800e2b0:	4620      	mov	r0, r4
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	20010dd8 	.word	0x20010dd8

0800e2b8 <_malloc_r>:
 800e2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2bc:	1ccd      	adds	r5, r1, #3
 800e2be:	f025 0503 	bic.w	r5, r5, #3
 800e2c2:	3508      	adds	r5, #8
 800e2c4:	2d0c      	cmp	r5, #12
 800e2c6:	bf38      	it	cc
 800e2c8:	250c      	movcc	r5, #12
 800e2ca:	2d00      	cmp	r5, #0
 800e2cc:	4607      	mov	r7, r0
 800e2ce:	db01      	blt.n	800e2d4 <_malloc_r+0x1c>
 800e2d0:	42a9      	cmp	r1, r5
 800e2d2:	d905      	bls.n	800e2e0 <_malloc_r+0x28>
 800e2d4:	230c      	movs	r3, #12
 800e2d6:	603b      	str	r3, [r7, #0]
 800e2d8:	2600      	movs	r6, #0
 800e2da:	4630      	mov	r0, r6
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	4e2e      	ldr	r6, [pc, #184]	; (800e39c <_malloc_r+0xe4>)
 800e2e2:	f000 fae7 	bl	800e8b4 <__malloc_lock>
 800e2e6:	6833      	ldr	r3, [r6, #0]
 800e2e8:	461c      	mov	r4, r3
 800e2ea:	bb34      	cbnz	r4, 800e33a <_malloc_r+0x82>
 800e2ec:	4629      	mov	r1, r5
 800e2ee:	4638      	mov	r0, r7
 800e2f0:	f7ff ffc2 	bl	800e278 <sbrk_aligned>
 800e2f4:	1c43      	adds	r3, r0, #1
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	d14d      	bne.n	800e396 <_malloc_r+0xde>
 800e2fa:	6834      	ldr	r4, [r6, #0]
 800e2fc:	4626      	mov	r6, r4
 800e2fe:	2e00      	cmp	r6, #0
 800e300:	d140      	bne.n	800e384 <_malloc_r+0xcc>
 800e302:	6823      	ldr	r3, [r4, #0]
 800e304:	4631      	mov	r1, r6
 800e306:	4638      	mov	r0, r7
 800e308:	eb04 0803 	add.w	r8, r4, r3
 800e30c:	f000 f908 	bl	800e520 <_sbrk_r>
 800e310:	4580      	cmp	r8, r0
 800e312:	d13a      	bne.n	800e38a <_malloc_r+0xd2>
 800e314:	6821      	ldr	r1, [r4, #0]
 800e316:	3503      	adds	r5, #3
 800e318:	1a6d      	subs	r5, r5, r1
 800e31a:	f025 0503 	bic.w	r5, r5, #3
 800e31e:	3508      	adds	r5, #8
 800e320:	2d0c      	cmp	r5, #12
 800e322:	bf38      	it	cc
 800e324:	250c      	movcc	r5, #12
 800e326:	4629      	mov	r1, r5
 800e328:	4638      	mov	r0, r7
 800e32a:	f7ff ffa5 	bl	800e278 <sbrk_aligned>
 800e32e:	3001      	adds	r0, #1
 800e330:	d02b      	beq.n	800e38a <_malloc_r+0xd2>
 800e332:	6823      	ldr	r3, [r4, #0]
 800e334:	442b      	add	r3, r5
 800e336:	6023      	str	r3, [r4, #0]
 800e338:	e00e      	b.n	800e358 <_malloc_r+0xa0>
 800e33a:	6822      	ldr	r2, [r4, #0]
 800e33c:	1b52      	subs	r2, r2, r5
 800e33e:	d41e      	bmi.n	800e37e <_malloc_r+0xc6>
 800e340:	2a0b      	cmp	r2, #11
 800e342:	d916      	bls.n	800e372 <_malloc_r+0xba>
 800e344:	1961      	adds	r1, r4, r5
 800e346:	42a3      	cmp	r3, r4
 800e348:	6025      	str	r5, [r4, #0]
 800e34a:	bf18      	it	ne
 800e34c:	6059      	strne	r1, [r3, #4]
 800e34e:	6863      	ldr	r3, [r4, #4]
 800e350:	bf08      	it	eq
 800e352:	6031      	streq	r1, [r6, #0]
 800e354:	5162      	str	r2, [r4, r5]
 800e356:	604b      	str	r3, [r1, #4]
 800e358:	4638      	mov	r0, r7
 800e35a:	f104 060b 	add.w	r6, r4, #11
 800e35e:	f000 faaf 	bl	800e8c0 <__malloc_unlock>
 800e362:	f026 0607 	bic.w	r6, r6, #7
 800e366:	1d23      	adds	r3, r4, #4
 800e368:	1af2      	subs	r2, r6, r3
 800e36a:	d0b6      	beq.n	800e2da <_malloc_r+0x22>
 800e36c:	1b9b      	subs	r3, r3, r6
 800e36e:	50a3      	str	r3, [r4, r2]
 800e370:	e7b3      	b.n	800e2da <_malloc_r+0x22>
 800e372:	6862      	ldr	r2, [r4, #4]
 800e374:	42a3      	cmp	r3, r4
 800e376:	bf0c      	ite	eq
 800e378:	6032      	streq	r2, [r6, #0]
 800e37a:	605a      	strne	r2, [r3, #4]
 800e37c:	e7ec      	b.n	800e358 <_malloc_r+0xa0>
 800e37e:	4623      	mov	r3, r4
 800e380:	6864      	ldr	r4, [r4, #4]
 800e382:	e7b2      	b.n	800e2ea <_malloc_r+0x32>
 800e384:	4634      	mov	r4, r6
 800e386:	6876      	ldr	r6, [r6, #4]
 800e388:	e7b9      	b.n	800e2fe <_malloc_r+0x46>
 800e38a:	230c      	movs	r3, #12
 800e38c:	603b      	str	r3, [r7, #0]
 800e38e:	4638      	mov	r0, r7
 800e390:	f000 fa96 	bl	800e8c0 <__malloc_unlock>
 800e394:	e7a1      	b.n	800e2da <_malloc_r+0x22>
 800e396:	6025      	str	r5, [r4, #0]
 800e398:	e7de      	b.n	800e358 <_malloc_r+0xa0>
 800e39a:	bf00      	nop
 800e39c:	20010dd4 	.word	0x20010dd4

0800e3a0 <iprintf>:
 800e3a0:	b40f      	push	{r0, r1, r2, r3}
 800e3a2:	4b0a      	ldr	r3, [pc, #40]	; (800e3cc <iprintf+0x2c>)
 800e3a4:	b513      	push	{r0, r1, r4, lr}
 800e3a6:	681c      	ldr	r4, [r3, #0]
 800e3a8:	b124      	cbz	r4, 800e3b4 <iprintf+0x14>
 800e3aa:	69a3      	ldr	r3, [r4, #24]
 800e3ac:	b913      	cbnz	r3, 800e3b4 <iprintf+0x14>
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	f7ff fe5c 	bl	800e06c <__sinit>
 800e3b4:	ab05      	add	r3, sp, #20
 800e3b6:	9a04      	ldr	r2, [sp, #16]
 800e3b8:	68a1      	ldr	r1, [r4, #8]
 800e3ba:	9301      	str	r3, [sp, #4]
 800e3bc:	4620      	mov	r0, r4
 800e3be:	f000 fc57 	bl	800ec70 <_vfiprintf_r>
 800e3c2:	b002      	add	sp, #8
 800e3c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3c8:	b004      	add	sp, #16
 800e3ca:	4770      	bx	lr
 800e3cc:	2000003c 	.word	0x2000003c

0800e3d0 <rand>:
 800e3d0:	4b16      	ldr	r3, [pc, #88]	; (800e42c <rand+0x5c>)
 800e3d2:	b510      	push	{r4, lr}
 800e3d4:	681c      	ldr	r4, [r3, #0]
 800e3d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3d8:	b9b3      	cbnz	r3, 800e408 <rand+0x38>
 800e3da:	2018      	movs	r0, #24
 800e3dc:	f000 fa62 	bl	800e8a4 <malloc>
 800e3e0:	63a0      	str	r0, [r4, #56]	; 0x38
 800e3e2:	b928      	cbnz	r0, 800e3f0 <rand+0x20>
 800e3e4:	4602      	mov	r2, r0
 800e3e6:	4b12      	ldr	r3, [pc, #72]	; (800e430 <rand+0x60>)
 800e3e8:	4812      	ldr	r0, [pc, #72]	; (800e434 <rand+0x64>)
 800e3ea:	214e      	movs	r1, #78	; 0x4e
 800e3ec:	f000 f946 	bl	800e67c <__assert_func>
 800e3f0:	4a11      	ldr	r2, [pc, #68]	; (800e438 <rand+0x68>)
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <rand+0x6c>)
 800e3f4:	e9c0 2300 	strd	r2, r3, [r0]
 800e3f8:	4b11      	ldr	r3, [pc, #68]	; (800e440 <rand+0x70>)
 800e3fa:	6083      	str	r3, [r0, #8]
 800e3fc:	230b      	movs	r3, #11
 800e3fe:	8183      	strh	r3, [r0, #12]
 800e400:	2201      	movs	r2, #1
 800e402:	2300      	movs	r3, #0
 800e404:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e408:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e40a:	4a0e      	ldr	r2, [pc, #56]	; (800e444 <rand+0x74>)
 800e40c:	6920      	ldr	r0, [r4, #16]
 800e40e:	6963      	ldr	r3, [r4, #20]
 800e410:	490d      	ldr	r1, [pc, #52]	; (800e448 <rand+0x78>)
 800e412:	4342      	muls	r2, r0
 800e414:	fb01 2203 	mla	r2, r1, r3, r2
 800e418:	fba0 0101 	umull	r0, r1, r0, r1
 800e41c:	1c43      	adds	r3, r0, #1
 800e41e:	eb42 0001 	adc.w	r0, r2, r1
 800e422:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e426:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e42a:	bd10      	pop	{r4, pc}
 800e42c:	2000003c 	.word	0x2000003c
 800e430:	08012a90 	.word	0x08012a90
 800e434:	08012aa7 	.word	0x08012aa7
 800e438:	abcd330e 	.word	0xabcd330e
 800e43c:	e66d1234 	.word	0xe66d1234
 800e440:	0005deec 	.word	0x0005deec
 800e444:	5851f42d 	.word	0x5851f42d
 800e448:	4c957f2d 	.word	0x4c957f2d

0800e44c <cleanup_glue>:
 800e44c:	b538      	push	{r3, r4, r5, lr}
 800e44e:	460c      	mov	r4, r1
 800e450:	6809      	ldr	r1, [r1, #0]
 800e452:	4605      	mov	r5, r0
 800e454:	b109      	cbz	r1, 800e45a <cleanup_glue+0xe>
 800e456:	f7ff fff9 	bl	800e44c <cleanup_glue>
 800e45a:	4621      	mov	r1, r4
 800e45c:	4628      	mov	r0, r5
 800e45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e462:	f000 ba33 	b.w	800e8cc <_free_r>
	...

0800e468 <_reclaim_reent>:
 800e468:	4b2c      	ldr	r3, [pc, #176]	; (800e51c <_reclaim_reent+0xb4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	4283      	cmp	r3, r0
 800e46e:	b570      	push	{r4, r5, r6, lr}
 800e470:	4604      	mov	r4, r0
 800e472:	d051      	beq.n	800e518 <_reclaim_reent+0xb0>
 800e474:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e476:	b143      	cbz	r3, 800e48a <_reclaim_reent+0x22>
 800e478:	68db      	ldr	r3, [r3, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d14a      	bne.n	800e514 <_reclaim_reent+0xac>
 800e47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e480:	6819      	ldr	r1, [r3, #0]
 800e482:	b111      	cbz	r1, 800e48a <_reclaim_reent+0x22>
 800e484:	4620      	mov	r0, r4
 800e486:	f000 fa21 	bl	800e8cc <_free_r>
 800e48a:	6961      	ldr	r1, [r4, #20]
 800e48c:	b111      	cbz	r1, 800e494 <_reclaim_reent+0x2c>
 800e48e:	4620      	mov	r0, r4
 800e490:	f000 fa1c 	bl	800e8cc <_free_r>
 800e494:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e496:	b111      	cbz	r1, 800e49e <_reclaim_reent+0x36>
 800e498:	4620      	mov	r0, r4
 800e49a:	f000 fa17 	bl	800e8cc <_free_r>
 800e49e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e4a0:	b111      	cbz	r1, 800e4a8 <_reclaim_reent+0x40>
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	f000 fa12 	bl	800e8cc <_free_r>
 800e4a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e4aa:	b111      	cbz	r1, 800e4b2 <_reclaim_reent+0x4a>
 800e4ac:	4620      	mov	r0, r4
 800e4ae:	f000 fa0d 	bl	800e8cc <_free_r>
 800e4b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e4b4:	b111      	cbz	r1, 800e4bc <_reclaim_reent+0x54>
 800e4b6:	4620      	mov	r0, r4
 800e4b8:	f000 fa08 	bl	800e8cc <_free_r>
 800e4bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e4be:	b111      	cbz	r1, 800e4c6 <_reclaim_reent+0x5e>
 800e4c0:	4620      	mov	r0, r4
 800e4c2:	f000 fa03 	bl	800e8cc <_free_r>
 800e4c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e4c8:	b111      	cbz	r1, 800e4d0 <_reclaim_reent+0x68>
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	f000 f9fe 	bl	800e8cc <_free_r>
 800e4d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4d2:	b111      	cbz	r1, 800e4da <_reclaim_reent+0x72>
 800e4d4:	4620      	mov	r0, r4
 800e4d6:	f000 f9f9 	bl	800e8cc <_free_r>
 800e4da:	69a3      	ldr	r3, [r4, #24]
 800e4dc:	b1e3      	cbz	r3, 800e518 <_reclaim_reent+0xb0>
 800e4de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e4e0:	4620      	mov	r0, r4
 800e4e2:	4798      	blx	r3
 800e4e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e4e6:	b1b9      	cbz	r1, 800e518 <_reclaim_reent+0xb0>
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e4ee:	f7ff bfad 	b.w	800e44c <cleanup_glue>
 800e4f2:	5949      	ldr	r1, [r1, r5]
 800e4f4:	b941      	cbnz	r1, 800e508 <_reclaim_reent+0xa0>
 800e4f6:	3504      	adds	r5, #4
 800e4f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4fa:	2d80      	cmp	r5, #128	; 0x80
 800e4fc:	68d9      	ldr	r1, [r3, #12]
 800e4fe:	d1f8      	bne.n	800e4f2 <_reclaim_reent+0x8a>
 800e500:	4620      	mov	r0, r4
 800e502:	f000 f9e3 	bl	800e8cc <_free_r>
 800e506:	e7ba      	b.n	800e47e <_reclaim_reent+0x16>
 800e508:	680e      	ldr	r6, [r1, #0]
 800e50a:	4620      	mov	r0, r4
 800e50c:	f000 f9de 	bl	800e8cc <_free_r>
 800e510:	4631      	mov	r1, r6
 800e512:	e7ef      	b.n	800e4f4 <_reclaim_reent+0x8c>
 800e514:	2500      	movs	r5, #0
 800e516:	e7ef      	b.n	800e4f8 <_reclaim_reent+0x90>
 800e518:	bd70      	pop	{r4, r5, r6, pc}
 800e51a:	bf00      	nop
 800e51c:	2000003c 	.word	0x2000003c

0800e520 <_sbrk_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4d06      	ldr	r5, [pc, #24]	; (800e53c <_sbrk_r+0x1c>)
 800e524:	2300      	movs	r3, #0
 800e526:	4604      	mov	r4, r0
 800e528:	4608      	mov	r0, r1
 800e52a:	602b      	str	r3, [r5, #0]
 800e52c:	f7f2 fbae 	bl	8000c8c <_sbrk>
 800e530:	1c43      	adds	r3, r0, #1
 800e532:	d102      	bne.n	800e53a <_sbrk_r+0x1a>
 800e534:	682b      	ldr	r3, [r5, #0]
 800e536:	b103      	cbz	r3, 800e53a <_sbrk_r+0x1a>
 800e538:	6023      	str	r3, [r4, #0]
 800e53a:	bd38      	pop	{r3, r4, r5, pc}
 800e53c:	20010ddc 	.word	0x20010ddc

0800e540 <siprintf>:
 800e540:	b40e      	push	{r1, r2, r3}
 800e542:	b500      	push	{lr}
 800e544:	b09c      	sub	sp, #112	; 0x70
 800e546:	ab1d      	add	r3, sp, #116	; 0x74
 800e548:	9002      	str	r0, [sp, #8]
 800e54a:	9006      	str	r0, [sp, #24]
 800e54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e550:	4809      	ldr	r0, [pc, #36]	; (800e578 <siprintf+0x38>)
 800e552:	9107      	str	r1, [sp, #28]
 800e554:	9104      	str	r1, [sp, #16]
 800e556:	4909      	ldr	r1, [pc, #36]	; (800e57c <siprintf+0x3c>)
 800e558:	f853 2b04 	ldr.w	r2, [r3], #4
 800e55c:	9105      	str	r1, [sp, #20]
 800e55e:	6800      	ldr	r0, [r0, #0]
 800e560:	9301      	str	r3, [sp, #4]
 800e562:	a902      	add	r1, sp, #8
 800e564:	f000 fa5a 	bl	800ea1c <_svfiprintf_r>
 800e568:	9b02      	ldr	r3, [sp, #8]
 800e56a:	2200      	movs	r2, #0
 800e56c:	701a      	strb	r2, [r3, #0]
 800e56e:	b01c      	add	sp, #112	; 0x70
 800e570:	f85d eb04 	ldr.w	lr, [sp], #4
 800e574:	b003      	add	sp, #12
 800e576:	4770      	bx	lr
 800e578:	2000003c 	.word	0x2000003c
 800e57c:	ffff0208 	.word	0xffff0208

0800e580 <__sread>:
 800e580:	b510      	push	{r4, lr}
 800e582:	460c      	mov	r4, r1
 800e584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e588:	f000 fe36 	bl	800f1f8 <_read_r>
 800e58c:	2800      	cmp	r0, #0
 800e58e:	bfab      	itete	ge
 800e590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e592:	89a3      	ldrhlt	r3, [r4, #12]
 800e594:	181b      	addge	r3, r3, r0
 800e596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e59a:	bfac      	ite	ge
 800e59c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e59e:	81a3      	strhlt	r3, [r4, #12]
 800e5a0:	bd10      	pop	{r4, pc}

0800e5a2 <__swrite>:
 800e5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5a6:	461f      	mov	r7, r3
 800e5a8:	898b      	ldrh	r3, [r1, #12]
 800e5aa:	05db      	lsls	r3, r3, #23
 800e5ac:	4605      	mov	r5, r0
 800e5ae:	460c      	mov	r4, r1
 800e5b0:	4616      	mov	r6, r2
 800e5b2:	d505      	bpl.n	800e5c0 <__swrite+0x1e>
 800e5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f000 f960 	bl	800e880 <_lseek_r>
 800e5c0:	89a3      	ldrh	r3, [r4, #12]
 800e5c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5ca:	81a3      	strh	r3, [r4, #12]
 800e5cc:	4632      	mov	r2, r6
 800e5ce:	463b      	mov	r3, r7
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5d6:	f000 b83f 	b.w	800e658 <_write_r>

0800e5da <__sseek>:
 800e5da:	b510      	push	{r4, lr}
 800e5dc:	460c      	mov	r4, r1
 800e5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e2:	f000 f94d 	bl	800e880 <_lseek_r>
 800e5e6:	1c43      	adds	r3, r0, #1
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	bf15      	itete	ne
 800e5ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800e5ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e5f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e5f6:	81a3      	strheq	r3, [r4, #12]
 800e5f8:	bf18      	it	ne
 800e5fa:	81a3      	strhne	r3, [r4, #12]
 800e5fc:	bd10      	pop	{r4, pc}

0800e5fe <__sclose>:
 800e5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e602:	f000 b859 	b.w	800e6b8 <_close_r>

0800e606 <strchr>:
 800e606:	b2c9      	uxtb	r1, r1
 800e608:	4603      	mov	r3, r0
 800e60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e60e:	b11a      	cbz	r2, 800e618 <strchr+0x12>
 800e610:	428a      	cmp	r2, r1
 800e612:	d1f9      	bne.n	800e608 <strchr+0x2>
 800e614:	4618      	mov	r0, r3
 800e616:	4770      	bx	lr
 800e618:	2900      	cmp	r1, #0
 800e61a:	bf18      	it	ne
 800e61c:	2300      	movne	r3, #0
 800e61e:	e7f9      	b.n	800e614 <strchr+0xe>

0800e620 <strcpy>:
 800e620:	4603      	mov	r3, r0
 800e622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e626:	f803 2b01 	strb.w	r2, [r3], #1
 800e62a:	2a00      	cmp	r2, #0
 800e62c:	d1f9      	bne.n	800e622 <strcpy+0x2>
 800e62e:	4770      	bx	lr

0800e630 <strncmp>:
 800e630:	b510      	push	{r4, lr}
 800e632:	b17a      	cbz	r2, 800e654 <strncmp+0x24>
 800e634:	4603      	mov	r3, r0
 800e636:	3901      	subs	r1, #1
 800e638:	1884      	adds	r4, r0, r2
 800e63a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e63e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e642:	4290      	cmp	r0, r2
 800e644:	d101      	bne.n	800e64a <strncmp+0x1a>
 800e646:	42a3      	cmp	r3, r4
 800e648:	d101      	bne.n	800e64e <strncmp+0x1e>
 800e64a:	1a80      	subs	r0, r0, r2
 800e64c:	bd10      	pop	{r4, pc}
 800e64e:	2800      	cmp	r0, #0
 800e650:	d1f3      	bne.n	800e63a <strncmp+0xa>
 800e652:	e7fa      	b.n	800e64a <strncmp+0x1a>
 800e654:	4610      	mov	r0, r2
 800e656:	e7f9      	b.n	800e64c <strncmp+0x1c>

0800e658 <_write_r>:
 800e658:	b538      	push	{r3, r4, r5, lr}
 800e65a:	4d07      	ldr	r5, [pc, #28]	; (800e678 <_write_r+0x20>)
 800e65c:	4604      	mov	r4, r0
 800e65e:	4608      	mov	r0, r1
 800e660:	4611      	mov	r1, r2
 800e662:	2200      	movs	r2, #0
 800e664:	602a      	str	r2, [r5, #0]
 800e666:	461a      	mov	r2, r3
 800e668:	f7f2 faf7 	bl	8000c5a <_write>
 800e66c:	1c43      	adds	r3, r0, #1
 800e66e:	d102      	bne.n	800e676 <_write_r+0x1e>
 800e670:	682b      	ldr	r3, [r5, #0]
 800e672:	b103      	cbz	r3, 800e676 <_write_r+0x1e>
 800e674:	6023      	str	r3, [r4, #0]
 800e676:	bd38      	pop	{r3, r4, r5, pc}
 800e678:	20010ddc 	.word	0x20010ddc

0800e67c <__assert_func>:
 800e67c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e67e:	4614      	mov	r4, r2
 800e680:	461a      	mov	r2, r3
 800e682:	4b09      	ldr	r3, [pc, #36]	; (800e6a8 <__assert_func+0x2c>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4605      	mov	r5, r0
 800e688:	68d8      	ldr	r0, [r3, #12]
 800e68a:	b14c      	cbz	r4, 800e6a0 <__assert_func+0x24>
 800e68c:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <__assert_func+0x30>)
 800e68e:	9100      	str	r1, [sp, #0]
 800e690:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e694:	4906      	ldr	r1, [pc, #24]	; (800e6b0 <__assert_func+0x34>)
 800e696:	462b      	mov	r3, r5
 800e698:	f000 f8e0 	bl	800e85c <fiprintf>
 800e69c:	f000 fe7e 	bl	800f39c <abort>
 800e6a0:	4b04      	ldr	r3, [pc, #16]	; (800e6b4 <__assert_func+0x38>)
 800e6a2:	461c      	mov	r4, r3
 800e6a4:	e7f3      	b.n	800e68e <__assert_func+0x12>
 800e6a6:	bf00      	nop
 800e6a8:	2000003c 	.word	0x2000003c
 800e6ac:	08012b02 	.word	0x08012b02
 800e6b0:	08012b0f 	.word	0x08012b0f
 800e6b4:	08012b3d 	.word	0x08012b3d

0800e6b8 <_close_r>:
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4d06      	ldr	r5, [pc, #24]	; (800e6d4 <_close_r+0x1c>)
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4604      	mov	r4, r0
 800e6c0:	4608      	mov	r0, r1
 800e6c2:	602b      	str	r3, [r5, #0]
 800e6c4:	f7f2 fad6 	bl	8000c74 <_close>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	d102      	bne.n	800e6d2 <_close_r+0x1a>
 800e6cc:	682b      	ldr	r3, [r5, #0]
 800e6ce:	b103      	cbz	r3, 800e6d2 <_close_r+0x1a>
 800e6d0:	6023      	str	r3, [r4, #0]
 800e6d2:	bd38      	pop	{r3, r4, r5, pc}
 800e6d4:	20010ddc 	.word	0x20010ddc

0800e6d8 <__sflush_r>:
 800e6d8:	898a      	ldrh	r2, [r1, #12]
 800e6da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6de:	4605      	mov	r5, r0
 800e6e0:	0710      	lsls	r0, r2, #28
 800e6e2:	460c      	mov	r4, r1
 800e6e4:	d458      	bmi.n	800e798 <__sflush_r+0xc0>
 800e6e6:	684b      	ldr	r3, [r1, #4]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	dc05      	bgt.n	800e6f8 <__sflush_r+0x20>
 800e6ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	dc02      	bgt.n	800e6f8 <__sflush_r+0x20>
 800e6f2:	2000      	movs	r0, #0
 800e6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6fa:	2e00      	cmp	r6, #0
 800e6fc:	d0f9      	beq.n	800e6f2 <__sflush_r+0x1a>
 800e6fe:	2300      	movs	r3, #0
 800e700:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e704:	682f      	ldr	r7, [r5, #0]
 800e706:	602b      	str	r3, [r5, #0]
 800e708:	d032      	beq.n	800e770 <__sflush_r+0x98>
 800e70a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	075a      	lsls	r2, r3, #29
 800e710:	d505      	bpl.n	800e71e <__sflush_r+0x46>
 800e712:	6863      	ldr	r3, [r4, #4]
 800e714:	1ac0      	subs	r0, r0, r3
 800e716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e718:	b10b      	cbz	r3, 800e71e <__sflush_r+0x46>
 800e71a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e71c:	1ac0      	subs	r0, r0, r3
 800e71e:	2300      	movs	r3, #0
 800e720:	4602      	mov	r2, r0
 800e722:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e724:	6a21      	ldr	r1, [r4, #32]
 800e726:	4628      	mov	r0, r5
 800e728:	47b0      	blx	r6
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	89a3      	ldrh	r3, [r4, #12]
 800e72e:	d106      	bne.n	800e73e <__sflush_r+0x66>
 800e730:	6829      	ldr	r1, [r5, #0]
 800e732:	291d      	cmp	r1, #29
 800e734:	d82c      	bhi.n	800e790 <__sflush_r+0xb8>
 800e736:	4a2a      	ldr	r2, [pc, #168]	; (800e7e0 <__sflush_r+0x108>)
 800e738:	40ca      	lsrs	r2, r1
 800e73a:	07d6      	lsls	r6, r2, #31
 800e73c:	d528      	bpl.n	800e790 <__sflush_r+0xb8>
 800e73e:	2200      	movs	r2, #0
 800e740:	6062      	str	r2, [r4, #4]
 800e742:	04d9      	lsls	r1, r3, #19
 800e744:	6922      	ldr	r2, [r4, #16]
 800e746:	6022      	str	r2, [r4, #0]
 800e748:	d504      	bpl.n	800e754 <__sflush_r+0x7c>
 800e74a:	1c42      	adds	r2, r0, #1
 800e74c:	d101      	bne.n	800e752 <__sflush_r+0x7a>
 800e74e:	682b      	ldr	r3, [r5, #0]
 800e750:	b903      	cbnz	r3, 800e754 <__sflush_r+0x7c>
 800e752:	6560      	str	r0, [r4, #84]	; 0x54
 800e754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e756:	602f      	str	r7, [r5, #0]
 800e758:	2900      	cmp	r1, #0
 800e75a:	d0ca      	beq.n	800e6f2 <__sflush_r+0x1a>
 800e75c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e760:	4299      	cmp	r1, r3
 800e762:	d002      	beq.n	800e76a <__sflush_r+0x92>
 800e764:	4628      	mov	r0, r5
 800e766:	f000 f8b1 	bl	800e8cc <_free_r>
 800e76a:	2000      	movs	r0, #0
 800e76c:	6360      	str	r0, [r4, #52]	; 0x34
 800e76e:	e7c1      	b.n	800e6f4 <__sflush_r+0x1c>
 800e770:	6a21      	ldr	r1, [r4, #32]
 800e772:	2301      	movs	r3, #1
 800e774:	4628      	mov	r0, r5
 800e776:	47b0      	blx	r6
 800e778:	1c41      	adds	r1, r0, #1
 800e77a:	d1c7      	bne.n	800e70c <__sflush_r+0x34>
 800e77c:	682b      	ldr	r3, [r5, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d0c4      	beq.n	800e70c <__sflush_r+0x34>
 800e782:	2b1d      	cmp	r3, #29
 800e784:	d001      	beq.n	800e78a <__sflush_r+0xb2>
 800e786:	2b16      	cmp	r3, #22
 800e788:	d101      	bne.n	800e78e <__sflush_r+0xb6>
 800e78a:	602f      	str	r7, [r5, #0]
 800e78c:	e7b1      	b.n	800e6f2 <__sflush_r+0x1a>
 800e78e:	89a3      	ldrh	r3, [r4, #12]
 800e790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e794:	81a3      	strh	r3, [r4, #12]
 800e796:	e7ad      	b.n	800e6f4 <__sflush_r+0x1c>
 800e798:	690f      	ldr	r7, [r1, #16]
 800e79a:	2f00      	cmp	r7, #0
 800e79c:	d0a9      	beq.n	800e6f2 <__sflush_r+0x1a>
 800e79e:	0793      	lsls	r3, r2, #30
 800e7a0:	680e      	ldr	r6, [r1, #0]
 800e7a2:	bf08      	it	eq
 800e7a4:	694b      	ldreq	r3, [r1, #20]
 800e7a6:	600f      	str	r7, [r1, #0]
 800e7a8:	bf18      	it	ne
 800e7aa:	2300      	movne	r3, #0
 800e7ac:	eba6 0807 	sub.w	r8, r6, r7
 800e7b0:	608b      	str	r3, [r1, #8]
 800e7b2:	f1b8 0f00 	cmp.w	r8, #0
 800e7b6:	dd9c      	ble.n	800e6f2 <__sflush_r+0x1a>
 800e7b8:	6a21      	ldr	r1, [r4, #32]
 800e7ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e7bc:	4643      	mov	r3, r8
 800e7be:	463a      	mov	r2, r7
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	47b0      	blx	r6
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	dc06      	bgt.n	800e7d6 <__sflush_r+0xfe>
 800e7c8:	89a3      	ldrh	r3, [r4, #12]
 800e7ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ce:	81a3      	strh	r3, [r4, #12]
 800e7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d4:	e78e      	b.n	800e6f4 <__sflush_r+0x1c>
 800e7d6:	4407      	add	r7, r0
 800e7d8:	eba8 0800 	sub.w	r8, r8, r0
 800e7dc:	e7e9      	b.n	800e7b2 <__sflush_r+0xda>
 800e7de:	bf00      	nop
 800e7e0:	20400001 	.word	0x20400001

0800e7e4 <_fflush_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	690b      	ldr	r3, [r1, #16]
 800e7e8:	4605      	mov	r5, r0
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	b913      	cbnz	r3, 800e7f4 <_fflush_r+0x10>
 800e7ee:	2500      	movs	r5, #0
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	bd38      	pop	{r3, r4, r5, pc}
 800e7f4:	b118      	cbz	r0, 800e7fe <_fflush_r+0x1a>
 800e7f6:	6983      	ldr	r3, [r0, #24]
 800e7f8:	b90b      	cbnz	r3, 800e7fe <_fflush_r+0x1a>
 800e7fa:	f7ff fc37 	bl	800e06c <__sinit>
 800e7fe:	4b14      	ldr	r3, [pc, #80]	; (800e850 <_fflush_r+0x6c>)
 800e800:	429c      	cmp	r4, r3
 800e802:	d11b      	bne.n	800e83c <_fflush_r+0x58>
 800e804:	686c      	ldr	r4, [r5, #4]
 800e806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d0ef      	beq.n	800e7ee <_fflush_r+0xa>
 800e80e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e810:	07d0      	lsls	r0, r2, #31
 800e812:	d404      	bmi.n	800e81e <_fflush_r+0x3a>
 800e814:	0599      	lsls	r1, r3, #22
 800e816:	d402      	bmi.n	800e81e <_fflush_r+0x3a>
 800e818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e81a:	f7ff fcea 	bl	800e1f2 <__retarget_lock_acquire_recursive>
 800e81e:	4628      	mov	r0, r5
 800e820:	4621      	mov	r1, r4
 800e822:	f7ff ff59 	bl	800e6d8 <__sflush_r>
 800e826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e828:	07da      	lsls	r2, r3, #31
 800e82a:	4605      	mov	r5, r0
 800e82c:	d4e0      	bmi.n	800e7f0 <_fflush_r+0xc>
 800e82e:	89a3      	ldrh	r3, [r4, #12]
 800e830:	059b      	lsls	r3, r3, #22
 800e832:	d4dd      	bmi.n	800e7f0 <_fflush_r+0xc>
 800e834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e836:	f7ff fcdd 	bl	800e1f4 <__retarget_lock_release_recursive>
 800e83a:	e7d9      	b.n	800e7f0 <_fflush_r+0xc>
 800e83c:	4b05      	ldr	r3, [pc, #20]	; (800e854 <_fflush_r+0x70>)
 800e83e:	429c      	cmp	r4, r3
 800e840:	d101      	bne.n	800e846 <_fflush_r+0x62>
 800e842:	68ac      	ldr	r4, [r5, #8]
 800e844:	e7df      	b.n	800e806 <_fflush_r+0x22>
 800e846:	4b04      	ldr	r3, [pc, #16]	; (800e858 <_fflush_r+0x74>)
 800e848:	429c      	cmp	r4, r3
 800e84a:	bf08      	it	eq
 800e84c:	68ec      	ldreq	r4, [r5, #12]
 800e84e:	e7da      	b.n	800e806 <_fflush_r+0x22>
 800e850:	08012a4c 	.word	0x08012a4c
 800e854:	08012a6c 	.word	0x08012a6c
 800e858:	08012a2c 	.word	0x08012a2c

0800e85c <fiprintf>:
 800e85c:	b40e      	push	{r1, r2, r3}
 800e85e:	b503      	push	{r0, r1, lr}
 800e860:	4601      	mov	r1, r0
 800e862:	ab03      	add	r3, sp, #12
 800e864:	4805      	ldr	r0, [pc, #20]	; (800e87c <fiprintf+0x20>)
 800e866:	f853 2b04 	ldr.w	r2, [r3], #4
 800e86a:	6800      	ldr	r0, [r0, #0]
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	f000 f9ff 	bl	800ec70 <_vfiprintf_r>
 800e872:	b002      	add	sp, #8
 800e874:	f85d eb04 	ldr.w	lr, [sp], #4
 800e878:	b003      	add	sp, #12
 800e87a:	4770      	bx	lr
 800e87c:	2000003c 	.word	0x2000003c

0800e880 <_lseek_r>:
 800e880:	b538      	push	{r3, r4, r5, lr}
 800e882:	4d07      	ldr	r5, [pc, #28]	; (800e8a0 <_lseek_r+0x20>)
 800e884:	4604      	mov	r4, r0
 800e886:	4608      	mov	r0, r1
 800e888:	4611      	mov	r1, r2
 800e88a:	2200      	movs	r2, #0
 800e88c:	602a      	str	r2, [r5, #0]
 800e88e:	461a      	mov	r2, r3
 800e890:	f7f2 f9fa 	bl	8000c88 <_lseek>
 800e894:	1c43      	adds	r3, r0, #1
 800e896:	d102      	bne.n	800e89e <_lseek_r+0x1e>
 800e898:	682b      	ldr	r3, [r5, #0]
 800e89a:	b103      	cbz	r3, 800e89e <_lseek_r+0x1e>
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	bd38      	pop	{r3, r4, r5, pc}
 800e8a0:	20010ddc 	.word	0x20010ddc

0800e8a4 <malloc>:
 800e8a4:	4b02      	ldr	r3, [pc, #8]	; (800e8b0 <malloc+0xc>)
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	6818      	ldr	r0, [r3, #0]
 800e8aa:	f7ff bd05 	b.w	800e2b8 <_malloc_r>
 800e8ae:	bf00      	nop
 800e8b0:	2000003c 	.word	0x2000003c

0800e8b4 <__malloc_lock>:
 800e8b4:	4801      	ldr	r0, [pc, #4]	; (800e8bc <__malloc_lock+0x8>)
 800e8b6:	f7ff bc9c 	b.w	800e1f2 <__retarget_lock_acquire_recursive>
 800e8ba:	bf00      	nop
 800e8bc:	20010dd0 	.word	0x20010dd0

0800e8c0 <__malloc_unlock>:
 800e8c0:	4801      	ldr	r0, [pc, #4]	; (800e8c8 <__malloc_unlock+0x8>)
 800e8c2:	f7ff bc97 	b.w	800e1f4 <__retarget_lock_release_recursive>
 800e8c6:	bf00      	nop
 800e8c8:	20010dd0 	.word	0x20010dd0

0800e8cc <_free_r>:
 800e8cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e8ce:	2900      	cmp	r1, #0
 800e8d0:	d044      	beq.n	800e95c <_free_r+0x90>
 800e8d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8d6:	9001      	str	r0, [sp, #4]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f1a1 0404 	sub.w	r4, r1, #4
 800e8de:	bfb8      	it	lt
 800e8e0:	18e4      	addlt	r4, r4, r3
 800e8e2:	f7ff ffe7 	bl	800e8b4 <__malloc_lock>
 800e8e6:	4a1e      	ldr	r2, [pc, #120]	; (800e960 <_free_r+0x94>)
 800e8e8:	9801      	ldr	r0, [sp, #4]
 800e8ea:	6813      	ldr	r3, [r2, #0]
 800e8ec:	b933      	cbnz	r3, 800e8fc <_free_r+0x30>
 800e8ee:	6063      	str	r3, [r4, #4]
 800e8f0:	6014      	str	r4, [r2, #0]
 800e8f2:	b003      	add	sp, #12
 800e8f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8f8:	f7ff bfe2 	b.w	800e8c0 <__malloc_unlock>
 800e8fc:	42a3      	cmp	r3, r4
 800e8fe:	d908      	bls.n	800e912 <_free_r+0x46>
 800e900:	6825      	ldr	r5, [r4, #0]
 800e902:	1961      	adds	r1, r4, r5
 800e904:	428b      	cmp	r3, r1
 800e906:	bf01      	itttt	eq
 800e908:	6819      	ldreq	r1, [r3, #0]
 800e90a:	685b      	ldreq	r3, [r3, #4]
 800e90c:	1949      	addeq	r1, r1, r5
 800e90e:	6021      	streq	r1, [r4, #0]
 800e910:	e7ed      	b.n	800e8ee <_free_r+0x22>
 800e912:	461a      	mov	r2, r3
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	b10b      	cbz	r3, 800e91c <_free_r+0x50>
 800e918:	42a3      	cmp	r3, r4
 800e91a:	d9fa      	bls.n	800e912 <_free_r+0x46>
 800e91c:	6811      	ldr	r1, [r2, #0]
 800e91e:	1855      	adds	r5, r2, r1
 800e920:	42a5      	cmp	r5, r4
 800e922:	d10b      	bne.n	800e93c <_free_r+0x70>
 800e924:	6824      	ldr	r4, [r4, #0]
 800e926:	4421      	add	r1, r4
 800e928:	1854      	adds	r4, r2, r1
 800e92a:	42a3      	cmp	r3, r4
 800e92c:	6011      	str	r1, [r2, #0]
 800e92e:	d1e0      	bne.n	800e8f2 <_free_r+0x26>
 800e930:	681c      	ldr	r4, [r3, #0]
 800e932:	685b      	ldr	r3, [r3, #4]
 800e934:	6053      	str	r3, [r2, #4]
 800e936:	4421      	add	r1, r4
 800e938:	6011      	str	r1, [r2, #0]
 800e93a:	e7da      	b.n	800e8f2 <_free_r+0x26>
 800e93c:	d902      	bls.n	800e944 <_free_r+0x78>
 800e93e:	230c      	movs	r3, #12
 800e940:	6003      	str	r3, [r0, #0]
 800e942:	e7d6      	b.n	800e8f2 <_free_r+0x26>
 800e944:	6825      	ldr	r5, [r4, #0]
 800e946:	1961      	adds	r1, r4, r5
 800e948:	428b      	cmp	r3, r1
 800e94a:	bf04      	itt	eq
 800e94c:	6819      	ldreq	r1, [r3, #0]
 800e94e:	685b      	ldreq	r3, [r3, #4]
 800e950:	6063      	str	r3, [r4, #4]
 800e952:	bf04      	itt	eq
 800e954:	1949      	addeq	r1, r1, r5
 800e956:	6021      	streq	r1, [r4, #0]
 800e958:	6054      	str	r4, [r2, #4]
 800e95a:	e7ca      	b.n	800e8f2 <_free_r+0x26>
 800e95c:	b003      	add	sp, #12
 800e95e:	bd30      	pop	{r4, r5, pc}
 800e960:	20010dd4 	.word	0x20010dd4

0800e964 <__ssputs_r>:
 800e964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e968:	688e      	ldr	r6, [r1, #8]
 800e96a:	429e      	cmp	r6, r3
 800e96c:	4682      	mov	sl, r0
 800e96e:	460c      	mov	r4, r1
 800e970:	4690      	mov	r8, r2
 800e972:	461f      	mov	r7, r3
 800e974:	d838      	bhi.n	800e9e8 <__ssputs_r+0x84>
 800e976:	898a      	ldrh	r2, [r1, #12]
 800e978:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e97c:	d032      	beq.n	800e9e4 <__ssputs_r+0x80>
 800e97e:	6825      	ldr	r5, [r4, #0]
 800e980:	6909      	ldr	r1, [r1, #16]
 800e982:	eba5 0901 	sub.w	r9, r5, r1
 800e986:	6965      	ldr	r5, [r4, #20]
 800e988:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e98c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e990:	3301      	adds	r3, #1
 800e992:	444b      	add	r3, r9
 800e994:	106d      	asrs	r5, r5, #1
 800e996:	429d      	cmp	r5, r3
 800e998:	bf38      	it	cc
 800e99a:	461d      	movcc	r5, r3
 800e99c:	0553      	lsls	r3, r2, #21
 800e99e:	d531      	bpl.n	800ea04 <__ssputs_r+0xa0>
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	f7ff fc89 	bl	800e2b8 <_malloc_r>
 800e9a6:	4606      	mov	r6, r0
 800e9a8:	b950      	cbnz	r0, 800e9c0 <__ssputs_r+0x5c>
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	f8ca 3000 	str.w	r3, [sl]
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b6:	81a3      	strh	r3, [r4, #12]
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9c0:	6921      	ldr	r1, [r4, #16]
 800e9c2:	464a      	mov	r2, r9
 800e9c4:	f7ff fc27 	bl	800e216 <memcpy>
 800e9c8:	89a3      	ldrh	r3, [r4, #12]
 800e9ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e9ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e9d2:	81a3      	strh	r3, [r4, #12]
 800e9d4:	6126      	str	r6, [r4, #16]
 800e9d6:	6165      	str	r5, [r4, #20]
 800e9d8:	444e      	add	r6, r9
 800e9da:	eba5 0509 	sub.w	r5, r5, r9
 800e9de:	6026      	str	r6, [r4, #0]
 800e9e0:	60a5      	str	r5, [r4, #8]
 800e9e2:	463e      	mov	r6, r7
 800e9e4:	42be      	cmp	r6, r7
 800e9e6:	d900      	bls.n	800e9ea <__ssputs_r+0x86>
 800e9e8:	463e      	mov	r6, r7
 800e9ea:	6820      	ldr	r0, [r4, #0]
 800e9ec:	4632      	mov	r2, r6
 800e9ee:	4641      	mov	r1, r8
 800e9f0:	f7ff fc1f 	bl	800e232 <memmove>
 800e9f4:	68a3      	ldr	r3, [r4, #8]
 800e9f6:	1b9b      	subs	r3, r3, r6
 800e9f8:	60a3      	str	r3, [r4, #8]
 800e9fa:	6823      	ldr	r3, [r4, #0]
 800e9fc:	4433      	add	r3, r6
 800e9fe:	6023      	str	r3, [r4, #0]
 800ea00:	2000      	movs	r0, #0
 800ea02:	e7db      	b.n	800e9bc <__ssputs_r+0x58>
 800ea04:	462a      	mov	r2, r5
 800ea06:	f000 fd35 	bl	800f474 <_realloc_r>
 800ea0a:	4606      	mov	r6, r0
 800ea0c:	2800      	cmp	r0, #0
 800ea0e:	d1e1      	bne.n	800e9d4 <__ssputs_r+0x70>
 800ea10:	6921      	ldr	r1, [r4, #16]
 800ea12:	4650      	mov	r0, sl
 800ea14:	f7ff ff5a 	bl	800e8cc <_free_r>
 800ea18:	e7c7      	b.n	800e9aa <__ssputs_r+0x46>
	...

0800ea1c <_svfiprintf_r>:
 800ea1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea20:	4698      	mov	r8, r3
 800ea22:	898b      	ldrh	r3, [r1, #12]
 800ea24:	061b      	lsls	r3, r3, #24
 800ea26:	b09d      	sub	sp, #116	; 0x74
 800ea28:	4607      	mov	r7, r0
 800ea2a:	460d      	mov	r5, r1
 800ea2c:	4614      	mov	r4, r2
 800ea2e:	d50e      	bpl.n	800ea4e <_svfiprintf_r+0x32>
 800ea30:	690b      	ldr	r3, [r1, #16]
 800ea32:	b963      	cbnz	r3, 800ea4e <_svfiprintf_r+0x32>
 800ea34:	2140      	movs	r1, #64	; 0x40
 800ea36:	f7ff fc3f 	bl	800e2b8 <_malloc_r>
 800ea3a:	6028      	str	r0, [r5, #0]
 800ea3c:	6128      	str	r0, [r5, #16]
 800ea3e:	b920      	cbnz	r0, 800ea4a <_svfiprintf_r+0x2e>
 800ea40:	230c      	movs	r3, #12
 800ea42:	603b      	str	r3, [r7, #0]
 800ea44:	f04f 30ff 	mov.w	r0, #4294967295
 800ea48:	e0d1      	b.n	800ebee <_svfiprintf_r+0x1d2>
 800ea4a:	2340      	movs	r3, #64	; 0x40
 800ea4c:	616b      	str	r3, [r5, #20]
 800ea4e:	2300      	movs	r3, #0
 800ea50:	9309      	str	r3, [sp, #36]	; 0x24
 800ea52:	2320      	movs	r3, #32
 800ea54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea5c:	2330      	movs	r3, #48	; 0x30
 800ea5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec08 <_svfiprintf_r+0x1ec>
 800ea62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea66:	f04f 0901 	mov.w	r9, #1
 800ea6a:	4623      	mov	r3, r4
 800ea6c:	469a      	mov	sl, r3
 800ea6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea72:	b10a      	cbz	r2, 800ea78 <_svfiprintf_r+0x5c>
 800ea74:	2a25      	cmp	r2, #37	; 0x25
 800ea76:	d1f9      	bne.n	800ea6c <_svfiprintf_r+0x50>
 800ea78:	ebba 0b04 	subs.w	fp, sl, r4
 800ea7c:	d00b      	beq.n	800ea96 <_svfiprintf_r+0x7a>
 800ea7e:	465b      	mov	r3, fp
 800ea80:	4622      	mov	r2, r4
 800ea82:	4629      	mov	r1, r5
 800ea84:	4638      	mov	r0, r7
 800ea86:	f7ff ff6d 	bl	800e964 <__ssputs_r>
 800ea8a:	3001      	adds	r0, #1
 800ea8c:	f000 80aa 	beq.w	800ebe4 <_svfiprintf_r+0x1c8>
 800ea90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea92:	445a      	add	r2, fp
 800ea94:	9209      	str	r2, [sp, #36]	; 0x24
 800ea96:	f89a 3000 	ldrb.w	r3, [sl]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	f000 80a2 	beq.w	800ebe4 <_svfiprintf_r+0x1c8>
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaaa:	f10a 0a01 	add.w	sl, sl, #1
 800eaae:	9304      	str	r3, [sp, #16]
 800eab0:	9307      	str	r3, [sp, #28]
 800eab2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eab6:	931a      	str	r3, [sp, #104]	; 0x68
 800eab8:	4654      	mov	r4, sl
 800eaba:	2205      	movs	r2, #5
 800eabc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eac0:	4851      	ldr	r0, [pc, #324]	; (800ec08 <_svfiprintf_r+0x1ec>)
 800eac2:	f7f1 fbad 	bl	8000220 <memchr>
 800eac6:	9a04      	ldr	r2, [sp, #16]
 800eac8:	b9d8      	cbnz	r0, 800eb02 <_svfiprintf_r+0xe6>
 800eaca:	06d0      	lsls	r0, r2, #27
 800eacc:	bf44      	itt	mi
 800eace:	2320      	movmi	r3, #32
 800ead0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead4:	0711      	lsls	r1, r2, #28
 800ead6:	bf44      	itt	mi
 800ead8:	232b      	movmi	r3, #43	; 0x2b
 800eada:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eade:	f89a 3000 	ldrb.w	r3, [sl]
 800eae2:	2b2a      	cmp	r3, #42	; 0x2a
 800eae4:	d015      	beq.n	800eb12 <_svfiprintf_r+0xf6>
 800eae6:	9a07      	ldr	r2, [sp, #28]
 800eae8:	4654      	mov	r4, sl
 800eaea:	2000      	movs	r0, #0
 800eaec:	f04f 0c0a 	mov.w	ip, #10
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaf6:	3b30      	subs	r3, #48	; 0x30
 800eaf8:	2b09      	cmp	r3, #9
 800eafa:	d94e      	bls.n	800eb9a <_svfiprintf_r+0x17e>
 800eafc:	b1b0      	cbz	r0, 800eb2c <_svfiprintf_r+0x110>
 800eafe:	9207      	str	r2, [sp, #28]
 800eb00:	e014      	b.n	800eb2c <_svfiprintf_r+0x110>
 800eb02:	eba0 0308 	sub.w	r3, r0, r8
 800eb06:	fa09 f303 	lsl.w	r3, r9, r3
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	9304      	str	r3, [sp, #16]
 800eb0e:	46a2      	mov	sl, r4
 800eb10:	e7d2      	b.n	800eab8 <_svfiprintf_r+0x9c>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	1d19      	adds	r1, r3, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	9103      	str	r1, [sp, #12]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	bfbb      	ittet	lt
 800eb1e:	425b      	neglt	r3, r3
 800eb20:	f042 0202 	orrlt.w	r2, r2, #2
 800eb24:	9307      	strge	r3, [sp, #28]
 800eb26:	9307      	strlt	r3, [sp, #28]
 800eb28:	bfb8      	it	lt
 800eb2a:	9204      	strlt	r2, [sp, #16]
 800eb2c:	7823      	ldrb	r3, [r4, #0]
 800eb2e:	2b2e      	cmp	r3, #46	; 0x2e
 800eb30:	d10c      	bne.n	800eb4c <_svfiprintf_r+0x130>
 800eb32:	7863      	ldrb	r3, [r4, #1]
 800eb34:	2b2a      	cmp	r3, #42	; 0x2a
 800eb36:	d135      	bne.n	800eba4 <_svfiprintf_r+0x188>
 800eb38:	9b03      	ldr	r3, [sp, #12]
 800eb3a:	1d1a      	adds	r2, r3, #4
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	9203      	str	r2, [sp, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	bfb8      	it	lt
 800eb44:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb48:	3402      	adds	r4, #2
 800eb4a:	9305      	str	r3, [sp, #20]
 800eb4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec18 <_svfiprintf_r+0x1fc>
 800eb50:	7821      	ldrb	r1, [r4, #0]
 800eb52:	2203      	movs	r2, #3
 800eb54:	4650      	mov	r0, sl
 800eb56:	f7f1 fb63 	bl	8000220 <memchr>
 800eb5a:	b140      	cbz	r0, 800eb6e <_svfiprintf_r+0x152>
 800eb5c:	2340      	movs	r3, #64	; 0x40
 800eb5e:	eba0 000a 	sub.w	r0, r0, sl
 800eb62:	fa03 f000 	lsl.w	r0, r3, r0
 800eb66:	9b04      	ldr	r3, [sp, #16]
 800eb68:	4303      	orrs	r3, r0
 800eb6a:	3401      	adds	r4, #1
 800eb6c:	9304      	str	r3, [sp, #16]
 800eb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb72:	4826      	ldr	r0, [pc, #152]	; (800ec0c <_svfiprintf_r+0x1f0>)
 800eb74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb78:	2206      	movs	r2, #6
 800eb7a:	f7f1 fb51 	bl	8000220 <memchr>
 800eb7e:	2800      	cmp	r0, #0
 800eb80:	d038      	beq.n	800ebf4 <_svfiprintf_r+0x1d8>
 800eb82:	4b23      	ldr	r3, [pc, #140]	; (800ec10 <_svfiprintf_r+0x1f4>)
 800eb84:	bb1b      	cbnz	r3, 800ebce <_svfiprintf_r+0x1b2>
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	3307      	adds	r3, #7
 800eb8a:	f023 0307 	bic.w	r3, r3, #7
 800eb8e:	3308      	adds	r3, #8
 800eb90:	9303      	str	r3, [sp, #12]
 800eb92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb94:	4433      	add	r3, r6
 800eb96:	9309      	str	r3, [sp, #36]	; 0x24
 800eb98:	e767      	b.n	800ea6a <_svfiprintf_r+0x4e>
 800eb9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb9e:	460c      	mov	r4, r1
 800eba0:	2001      	movs	r0, #1
 800eba2:	e7a5      	b.n	800eaf0 <_svfiprintf_r+0xd4>
 800eba4:	2300      	movs	r3, #0
 800eba6:	3401      	adds	r4, #1
 800eba8:	9305      	str	r3, [sp, #20]
 800ebaa:	4619      	mov	r1, r3
 800ebac:	f04f 0c0a 	mov.w	ip, #10
 800ebb0:	4620      	mov	r0, r4
 800ebb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebb6:	3a30      	subs	r2, #48	; 0x30
 800ebb8:	2a09      	cmp	r2, #9
 800ebba:	d903      	bls.n	800ebc4 <_svfiprintf_r+0x1a8>
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d0c5      	beq.n	800eb4c <_svfiprintf_r+0x130>
 800ebc0:	9105      	str	r1, [sp, #20]
 800ebc2:	e7c3      	b.n	800eb4c <_svfiprintf_r+0x130>
 800ebc4:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebc8:	4604      	mov	r4, r0
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e7f0      	b.n	800ebb0 <_svfiprintf_r+0x194>
 800ebce:	ab03      	add	r3, sp, #12
 800ebd0:	9300      	str	r3, [sp, #0]
 800ebd2:	462a      	mov	r2, r5
 800ebd4:	4b0f      	ldr	r3, [pc, #60]	; (800ec14 <_svfiprintf_r+0x1f8>)
 800ebd6:	a904      	add	r1, sp, #16
 800ebd8:	4638      	mov	r0, r7
 800ebda:	f3af 8000 	nop.w
 800ebde:	1c42      	adds	r2, r0, #1
 800ebe0:	4606      	mov	r6, r0
 800ebe2:	d1d6      	bne.n	800eb92 <_svfiprintf_r+0x176>
 800ebe4:	89ab      	ldrh	r3, [r5, #12]
 800ebe6:	065b      	lsls	r3, r3, #25
 800ebe8:	f53f af2c 	bmi.w	800ea44 <_svfiprintf_r+0x28>
 800ebec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ebee:	b01d      	add	sp, #116	; 0x74
 800ebf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebf4:	ab03      	add	r3, sp, #12
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	462a      	mov	r2, r5
 800ebfa:	4b06      	ldr	r3, [pc, #24]	; (800ec14 <_svfiprintf_r+0x1f8>)
 800ebfc:	a904      	add	r1, sp, #16
 800ebfe:	4638      	mov	r0, r7
 800ec00:	f000 f9d4 	bl	800efac <_printf_i>
 800ec04:	e7eb      	b.n	800ebde <_svfiprintf_r+0x1c2>
 800ec06:	bf00      	nop
 800ec08:	08012b3e 	.word	0x08012b3e
 800ec0c:	08012b48 	.word	0x08012b48
 800ec10:	00000000 	.word	0x00000000
 800ec14:	0800e965 	.word	0x0800e965
 800ec18:	08012b44 	.word	0x08012b44

0800ec1c <__sfputc_r>:
 800ec1c:	6893      	ldr	r3, [r2, #8]
 800ec1e:	3b01      	subs	r3, #1
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	b410      	push	{r4}
 800ec24:	6093      	str	r3, [r2, #8]
 800ec26:	da08      	bge.n	800ec3a <__sfputc_r+0x1e>
 800ec28:	6994      	ldr	r4, [r2, #24]
 800ec2a:	42a3      	cmp	r3, r4
 800ec2c:	db01      	blt.n	800ec32 <__sfputc_r+0x16>
 800ec2e:	290a      	cmp	r1, #10
 800ec30:	d103      	bne.n	800ec3a <__sfputc_r+0x1e>
 800ec32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec36:	f000 baf1 	b.w	800f21c <__swbuf_r>
 800ec3a:	6813      	ldr	r3, [r2, #0]
 800ec3c:	1c58      	adds	r0, r3, #1
 800ec3e:	6010      	str	r0, [r2, #0]
 800ec40:	7019      	strb	r1, [r3, #0]
 800ec42:	4608      	mov	r0, r1
 800ec44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec48:	4770      	bx	lr

0800ec4a <__sfputs_r>:
 800ec4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4c:	4606      	mov	r6, r0
 800ec4e:	460f      	mov	r7, r1
 800ec50:	4614      	mov	r4, r2
 800ec52:	18d5      	adds	r5, r2, r3
 800ec54:	42ac      	cmp	r4, r5
 800ec56:	d101      	bne.n	800ec5c <__sfputs_r+0x12>
 800ec58:	2000      	movs	r0, #0
 800ec5a:	e007      	b.n	800ec6c <__sfputs_r+0x22>
 800ec5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec60:	463a      	mov	r2, r7
 800ec62:	4630      	mov	r0, r6
 800ec64:	f7ff ffda 	bl	800ec1c <__sfputc_r>
 800ec68:	1c43      	adds	r3, r0, #1
 800ec6a:	d1f3      	bne.n	800ec54 <__sfputs_r+0xa>
 800ec6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ec70 <_vfiprintf_r>:
 800ec70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec74:	460d      	mov	r5, r1
 800ec76:	b09d      	sub	sp, #116	; 0x74
 800ec78:	4614      	mov	r4, r2
 800ec7a:	4698      	mov	r8, r3
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	b118      	cbz	r0, 800ec88 <_vfiprintf_r+0x18>
 800ec80:	6983      	ldr	r3, [r0, #24]
 800ec82:	b90b      	cbnz	r3, 800ec88 <_vfiprintf_r+0x18>
 800ec84:	f7ff f9f2 	bl	800e06c <__sinit>
 800ec88:	4b89      	ldr	r3, [pc, #548]	; (800eeb0 <_vfiprintf_r+0x240>)
 800ec8a:	429d      	cmp	r5, r3
 800ec8c:	d11b      	bne.n	800ecc6 <_vfiprintf_r+0x56>
 800ec8e:	6875      	ldr	r5, [r6, #4]
 800ec90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec92:	07d9      	lsls	r1, r3, #31
 800ec94:	d405      	bmi.n	800eca2 <_vfiprintf_r+0x32>
 800ec96:	89ab      	ldrh	r3, [r5, #12]
 800ec98:	059a      	lsls	r2, r3, #22
 800ec9a:	d402      	bmi.n	800eca2 <_vfiprintf_r+0x32>
 800ec9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec9e:	f7ff faa8 	bl	800e1f2 <__retarget_lock_acquire_recursive>
 800eca2:	89ab      	ldrh	r3, [r5, #12]
 800eca4:	071b      	lsls	r3, r3, #28
 800eca6:	d501      	bpl.n	800ecac <_vfiprintf_r+0x3c>
 800eca8:	692b      	ldr	r3, [r5, #16]
 800ecaa:	b9eb      	cbnz	r3, 800ece8 <_vfiprintf_r+0x78>
 800ecac:	4629      	mov	r1, r5
 800ecae:	4630      	mov	r0, r6
 800ecb0:	f000 fb06 	bl	800f2c0 <__swsetup_r>
 800ecb4:	b1c0      	cbz	r0, 800ece8 <_vfiprintf_r+0x78>
 800ecb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecb8:	07dc      	lsls	r4, r3, #31
 800ecba:	d50e      	bpl.n	800ecda <_vfiprintf_r+0x6a>
 800ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc0:	b01d      	add	sp, #116	; 0x74
 800ecc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecc6:	4b7b      	ldr	r3, [pc, #492]	; (800eeb4 <_vfiprintf_r+0x244>)
 800ecc8:	429d      	cmp	r5, r3
 800ecca:	d101      	bne.n	800ecd0 <_vfiprintf_r+0x60>
 800eccc:	68b5      	ldr	r5, [r6, #8]
 800ecce:	e7df      	b.n	800ec90 <_vfiprintf_r+0x20>
 800ecd0:	4b79      	ldr	r3, [pc, #484]	; (800eeb8 <_vfiprintf_r+0x248>)
 800ecd2:	429d      	cmp	r5, r3
 800ecd4:	bf08      	it	eq
 800ecd6:	68f5      	ldreq	r5, [r6, #12]
 800ecd8:	e7da      	b.n	800ec90 <_vfiprintf_r+0x20>
 800ecda:	89ab      	ldrh	r3, [r5, #12]
 800ecdc:	0598      	lsls	r0, r3, #22
 800ecde:	d4ed      	bmi.n	800ecbc <_vfiprintf_r+0x4c>
 800ece0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ece2:	f7ff fa87 	bl	800e1f4 <__retarget_lock_release_recursive>
 800ece6:	e7e9      	b.n	800ecbc <_vfiprintf_r+0x4c>
 800ece8:	2300      	movs	r3, #0
 800ecea:	9309      	str	r3, [sp, #36]	; 0x24
 800ecec:	2320      	movs	r3, #32
 800ecee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ecf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ecf6:	2330      	movs	r3, #48	; 0x30
 800ecf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800eebc <_vfiprintf_r+0x24c>
 800ecfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed00:	f04f 0901 	mov.w	r9, #1
 800ed04:	4623      	mov	r3, r4
 800ed06:	469a      	mov	sl, r3
 800ed08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed0c:	b10a      	cbz	r2, 800ed12 <_vfiprintf_r+0xa2>
 800ed0e:	2a25      	cmp	r2, #37	; 0x25
 800ed10:	d1f9      	bne.n	800ed06 <_vfiprintf_r+0x96>
 800ed12:	ebba 0b04 	subs.w	fp, sl, r4
 800ed16:	d00b      	beq.n	800ed30 <_vfiprintf_r+0xc0>
 800ed18:	465b      	mov	r3, fp
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f7ff ff93 	bl	800ec4a <__sfputs_r>
 800ed24:	3001      	adds	r0, #1
 800ed26:	f000 80aa 	beq.w	800ee7e <_vfiprintf_r+0x20e>
 800ed2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed2c:	445a      	add	r2, fp
 800ed2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed30:	f89a 3000 	ldrb.w	r3, [sl]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f000 80a2 	beq.w	800ee7e <_vfiprintf_r+0x20e>
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ed40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed44:	f10a 0a01 	add.w	sl, sl, #1
 800ed48:	9304      	str	r3, [sp, #16]
 800ed4a:	9307      	str	r3, [sp, #28]
 800ed4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed50:	931a      	str	r3, [sp, #104]	; 0x68
 800ed52:	4654      	mov	r4, sl
 800ed54:	2205      	movs	r2, #5
 800ed56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed5a:	4858      	ldr	r0, [pc, #352]	; (800eebc <_vfiprintf_r+0x24c>)
 800ed5c:	f7f1 fa60 	bl	8000220 <memchr>
 800ed60:	9a04      	ldr	r2, [sp, #16]
 800ed62:	b9d8      	cbnz	r0, 800ed9c <_vfiprintf_r+0x12c>
 800ed64:	06d1      	lsls	r1, r2, #27
 800ed66:	bf44      	itt	mi
 800ed68:	2320      	movmi	r3, #32
 800ed6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed6e:	0713      	lsls	r3, r2, #28
 800ed70:	bf44      	itt	mi
 800ed72:	232b      	movmi	r3, #43	; 0x2b
 800ed74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ed78:	f89a 3000 	ldrb.w	r3, [sl]
 800ed7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ed7e:	d015      	beq.n	800edac <_vfiprintf_r+0x13c>
 800ed80:	9a07      	ldr	r2, [sp, #28]
 800ed82:	4654      	mov	r4, sl
 800ed84:	2000      	movs	r0, #0
 800ed86:	f04f 0c0a 	mov.w	ip, #10
 800ed8a:	4621      	mov	r1, r4
 800ed8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ed90:	3b30      	subs	r3, #48	; 0x30
 800ed92:	2b09      	cmp	r3, #9
 800ed94:	d94e      	bls.n	800ee34 <_vfiprintf_r+0x1c4>
 800ed96:	b1b0      	cbz	r0, 800edc6 <_vfiprintf_r+0x156>
 800ed98:	9207      	str	r2, [sp, #28]
 800ed9a:	e014      	b.n	800edc6 <_vfiprintf_r+0x156>
 800ed9c:	eba0 0308 	sub.w	r3, r0, r8
 800eda0:	fa09 f303 	lsl.w	r3, r9, r3
 800eda4:	4313      	orrs	r3, r2
 800eda6:	9304      	str	r3, [sp, #16]
 800eda8:	46a2      	mov	sl, r4
 800edaa:	e7d2      	b.n	800ed52 <_vfiprintf_r+0xe2>
 800edac:	9b03      	ldr	r3, [sp, #12]
 800edae:	1d19      	adds	r1, r3, #4
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	9103      	str	r1, [sp, #12]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	bfbb      	ittet	lt
 800edb8:	425b      	neglt	r3, r3
 800edba:	f042 0202 	orrlt.w	r2, r2, #2
 800edbe:	9307      	strge	r3, [sp, #28]
 800edc0:	9307      	strlt	r3, [sp, #28]
 800edc2:	bfb8      	it	lt
 800edc4:	9204      	strlt	r2, [sp, #16]
 800edc6:	7823      	ldrb	r3, [r4, #0]
 800edc8:	2b2e      	cmp	r3, #46	; 0x2e
 800edca:	d10c      	bne.n	800ede6 <_vfiprintf_r+0x176>
 800edcc:	7863      	ldrb	r3, [r4, #1]
 800edce:	2b2a      	cmp	r3, #42	; 0x2a
 800edd0:	d135      	bne.n	800ee3e <_vfiprintf_r+0x1ce>
 800edd2:	9b03      	ldr	r3, [sp, #12]
 800edd4:	1d1a      	adds	r2, r3, #4
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	9203      	str	r2, [sp, #12]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	bfb8      	it	lt
 800edde:	f04f 33ff 	movlt.w	r3, #4294967295
 800ede2:	3402      	adds	r4, #2
 800ede4:	9305      	str	r3, [sp, #20]
 800ede6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eecc <_vfiprintf_r+0x25c>
 800edea:	7821      	ldrb	r1, [r4, #0]
 800edec:	2203      	movs	r2, #3
 800edee:	4650      	mov	r0, sl
 800edf0:	f7f1 fa16 	bl	8000220 <memchr>
 800edf4:	b140      	cbz	r0, 800ee08 <_vfiprintf_r+0x198>
 800edf6:	2340      	movs	r3, #64	; 0x40
 800edf8:	eba0 000a 	sub.w	r0, r0, sl
 800edfc:	fa03 f000 	lsl.w	r0, r3, r0
 800ee00:	9b04      	ldr	r3, [sp, #16]
 800ee02:	4303      	orrs	r3, r0
 800ee04:	3401      	adds	r4, #1
 800ee06:	9304      	str	r3, [sp, #16]
 800ee08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee0c:	482c      	ldr	r0, [pc, #176]	; (800eec0 <_vfiprintf_r+0x250>)
 800ee0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee12:	2206      	movs	r2, #6
 800ee14:	f7f1 fa04 	bl	8000220 <memchr>
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d03f      	beq.n	800ee9c <_vfiprintf_r+0x22c>
 800ee1c:	4b29      	ldr	r3, [pc, #164]	; (800eec4 <_vfiprintf_r+0x254>)
 800ee1e:	bb1b      	cbnz	r3, 800ee68 <_vfiprintf_r+0x1f8>
 800ee20:	9b03      	ldr	r3, [sp, #12]
 800ee22:	3307      	adds	r3, #7
 800ee24:	f023 0307 	bic.w	r3, r3, #7
 800ee28:	3308      	adds	r3, #8
 800ee2a:	9303      	str	r3, [sp, #12]
 800ee2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee2e:	443b      	add	r3, r7
 800ee30:	9309      	str	r3, [sp, #36]	; 0x24
 800ee32:	e767      	b.n	800ed04 <_vfiprintf_r+0x94>
 800ee34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee38:	460c      	mov	r4, r1
 800ee3a:	2001      	movs	r0, #1
 800ee3c:	e7a5      	b.n	800ed8a <_vfiprintf_r+0x11a>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	3401      	adds	r4, #1
 800ee42:	9305      	str	r3, [sp, #20]
 800ee44:	4619      	mov	r1, r3
 800ee46:	f04f 0c0a 	mov.w	ip, #10
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee50:	3a30      	subs	r2, #48	; 0x30
 800ee52:	2a09      	cmp	r2, #9
 800ee54:	d903      	bls.n	800ee5e <_vfiprintf_r+0x1ee>
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d0c5      	beq.n	800ede6 <_vfiprintf_r+0x176>
 800ee5a:	9105      	str	r1, [sp, #20]
 800ee5c:	e7c3      	b.n	800ede6 <_vfiprintf_r+0x176>
 800ee5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee62:	4604      	mov	r4, r0
 800ee64:	2301      	movs	r3, #1
 800ee66:	e7f0      	b.n	800ee4a <_vfiprintf_r+0x1da>
 800ee68:	ab03      	add	r3, sp, #12
 800ee6a:	9300      	str	r3, [sp, #0]
 800ee6c:	462a      	mov	r2, r5
 800ee6e:	4b16      	ldr	r3, [pc, #88]	; (800eec8 <_vfiprintf_r+0x258>)
 800ee70:	a904      	add	r1, sp, #16
 800ee72:	4630      	mov	r0, r6
 800ee74:	f3af 8000 	nop.w
 800ee78:	4607      	mov	r7, r0
 800ee7a:	1c78      	adds	r0, r7, #1
 800ee7c:	d1d6      	bne.n	800ee2c <_vfiprintf_r+0x1bc>
 800ee7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ee80:	07d9      	lsls	r1, r3, #31
 800ee82:	d405      	bmi.n	800ee90 <_vfiprintf_r+0x220>
 800ee84:	89ab      	ldrh	r3, [r5, #12]
 800ee86:	059a      	lsls	r2, r3, #22
 800ee88:	d402      	bmi.n	800ee90 <_vfiprintf_r+0x220>
 800ee8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ee8c:	f7ff f9b2 	bl	800e1f4 <__retarget_lock_release_recursive>
 800ee90:	89ab      	ldrh	r3, [r5, #12]
 800ee92:	065b      	lsls	r3, r3, #25
 800ee94:	f53f af12 	bmi.w	800ecbc <_vfiprintf_r+0x4c>
 800ee98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ee9a:	e711      	b.n	800ecc0 <_vfiprintf_r+0x50>
 800ee9c:	ab03      	add	r3, sp, #12
 800ee9e:	9300      	str	r3, [sp, #0]
 800eea0:	462a      	mov	r2, r5
 800eea2:	4b09      	ldr	r3, [pc, #36]	; (800eec8 <_vfiprintf_r+0x258>)
 800eea4:	a904      	add	r1, sp, #16
 800eea6:	4630      	mov	r0, r6
 800eea8:	f000 f880 	bl	800efac <_printf_i>
 800eeac:	e7e4      	b.n	800ee78 <_vfiprintf_r+0x208>
 800eeae:	bf00      	nop
 800eeb0:	08012a4c 	.word	0x08012a4c
 800eeb4:	08012a6c 	.word	0x08012a6c
 800eeb8:	08012a2c 	.word	0x08012a2c
 800eebc:	08012b3e 	.word	0x08012b3e
 800eec0:	08012b48 	.word	0x08012b48
 800eec4:	00000000 	.word	0x00000000
 800eec8:	0800ec4b 	.word	0x0800ec4b
 800eecc:	08012b44 	.word	0x08012b44

0800eed0 <_printf_common>:
 800eed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eed4:	4616      	mov	r6, r2
 800eed6:	4699      	mov	r9, r3
 800eed8:	688a      	ldr	r2, [r1, #8]
 800eeda:	690b      	ldr	r3, [r1, #16]
 800eedc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eee0:	4293      	cmp	r3, r2
 800eee2:	bfb8      	it	lt
 800eee4:	4613      	movlt	r3, r2
 800eee6:	6033      	str	r3, [r6, #0]
 800eee8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eeec:	4607      	mov	r7, r0
 800eeee:	460c      	mov	r4, r1
 800eef0:	b10a      	cbz	r2, 800eef6 <_printf_common+0x26>
 800eef2:	3301      	adds	r3, #1
 800eef4:	6033      	str	r3, [r6, #0]
 800eef6:	6823      	ldr	r3, [r4, #0]
 800eef8:	0699      	lsls	r1, r3, #26
 800eefa:	bf42      	ittt	mi
 800eefc:	6833      	ldrmi	r3, [r6, #0]
 800eefe:	3302      	addmi	r3, #2
 800ef00:	6033      	strmi	r3, [r6, #0]
 800ef02:	6825      	ldr	r5, [r4, #0]
 800ef04:	f015 0506 	ands.w	r5, r5, #6
 800ef08:	d106      	bne.n	800ef18 <_printf_common+0x48>
 800ef0a:	f104 0a19 	add.w	sl, r4, #25
 800ef0e:	68e3      	ldr	r3, [r4, #12]
 800ef10:	6832      	ldr	r2, [r6, #0]
 800ef12:	1a9b      	subs	r3, r3, r2
 800ef14:	42ab      	cmp	r3, r5
 800ef16:	dc26      	bgt.n	800ef66 <_printf_common+0x96>
 800ef18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef1c:	1e13      	subs	r3, r2, #0
 800ef1e:	6822      	ldr	r2, [r4, #0]
 800ef20:	bf18      	it	ne
 800ef22:	2301      	movne	r3, #1
 800ef24:	0692      	lsls	r2, r2, #26
 800ef26:	d42b      	bmi.n	800ef80 <_printf_common+0xb0>
 800ef28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef2c:	4649      	mov	r1, r9
 800ef2e:	4638      	mov	r0, r7
 800ef30:	47c0      	blx	r8
 800ef32:	3001      	adds	r0, #1
 800ef34:	d01e      	beq.n	800ef74 <_printf_common+0xa4>
 800ef36:	6823      	ldr	r3, [r4, #0]
 800ef38:	68e5      	ldr	r5, [r4, #12]
 800ef3a:	6832      	ldr	r2, [r6, #0]
 800ef3c:	f003 0306 	and.w	r3, r3, #6
 800ef40:	2b04      	cmp	r3, #4
 800ef42:	bf08      	it	eq
 800ef44:	1aad      	subeq	r5, r5, r2
 800ef46:	68a3      	ldr	r3, [r4, #8]
 800ef48:	6922      	ldr	r2, [r4, #16]
 800ef4a:	bf0c      	ite	eq
 800ef4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef50:	2500      	movne	r5, #0
 800ef52:	4293      	cmp	r3, r2
 800ef54:	bfc4      	itt	gt
 800ef56:	1a9b      	subgt	r3, r3, r2
 800ef58:	18ed      	addgt	r5, r5, r3
 800ef5a:	2600      	movs	r6, #0
 800ef5c:	341a      	adds	r4, #26
 800ef5e:	42b5      	cmp	r5, r6
 800ef60:	d11a      	bne.n	800ef98 <_printf_common+0xc8>
 800ef62:	2000      	movs	r0, #0
 800ef64:	e008      	b.n	800ef78 <_printf_common+0xa8>
 800ef66:	2301      	movs	r3, #1
 800ef68:	4652      	mov	r2, sl
 800ef6a:	4649      	mov	r1, r9
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	47c0      	blx	r8
 800ef70:	3001      	adds	r0, #1
 800ef72:	d103      	bne.n	800ef7c <_printf_common+0xac>
 800ef74:	f04f 30ff 	mov.w	r0, #4294967295
 800ef78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef7c:	3501      	adds	r5, #1
 800ef7e:	e7c6      	b.n	800ef0e <_printf_common+0x3e>
 800ef80:	18e1      	adds	r1, r4, r3
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	2030      	movs	r0, #48	; 0x30
 800ef86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ef8a:	4422      	add	r2, r4
 800ef8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ef90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ef94:	3302      	adds	r3, #2
 800ef96:	e7c7      	b.n	800ef28 <_printf_common+0x58>
 800ef98:	2301      	movs	r3, #1
 800ef9a:	4622      	mov	r2, r4
 800ef9c:	4649      	mov	r1, r9
 800ef9e:	4638      	mov	r0, r7
 800efa0:	47c0      	blx	r8
 800efa2:	3001      	adds	r0, #1
 800efa4:	d0e6      	beq.n	800ef74 <_printf_common+0xa4>
 800efa6:	3601      	adds	r6, #1
 800efa8:	e7d9      	b.n	800ef5e <_printf_common+0x8e>
	...

0800efac <_printf_i>:
 800efac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efb0:	7e0f      	ldrb	r7, [r1, #24]
 800efb2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800efb4:	2f78      	cmp	r7, #120	; 0x78
 800efb6:	4691      	mov	r9, r2
 800efb8:	4680      	mov	r8, r0
 800efba:	460c      	mov	r4, r1
 800efbc:	469a      	mov	sl, r3
 800efbe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800efc2:	d807      	bhi.n	800efd4 <_printf_i+0x28>
 800efc4:	2f62      	cmp	r7, #98	; 0x62
 800efc6:	d80a      	bhi.n	800efde <_printf_i+0x32>
 800efc8:	2f00      	cmp	r7, #0
 800efca:	f000 80d8 	beq.w	800f17e <_printf_i+0x1d2>
 800efce:	2f58      	cmp	r7, #88	; 0x58
 800efd0:	f000 80a3 	beq.w	800f11a <_printf_i+0x16e>
 800efd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800efd8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800efdc:	e03a      	b.n	800f054 <_printf_i+0xa8>
 800efde:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800efe2:	2b15      	cmp	r3, #21
 800efe4:	d8f6      	bhi.n	800efd4 <_printf_i+0x28>
 800efe6:	a101      	add	r1, pc, #4	; (adr r1, 800efec <_printf_i+0x40>)
 800efe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800efec:	0800f045 	.word	0x0800f045
 800eff0:	0800f059 	.word	0x0800f059
 800eff4:	0800efd5 	.word	0x0800efd5
 800eff8:	0800efd5 	.word	0x0800efd5
 800effc:	0800efd5 	.word	0x0800efd5
 800f000:	0800efd5 	.word	0x0800efd5
 800f004:	0800f059 	.word	0x0800f059
 800f008:	0800efd5 	.word	0x0800efd5
 800f00c:	0800efd5 	.word	0x0800efd5
 800f010:	0800efd5 	.word	0x0800efd5
 800f014:	0800efd5 	.word	0x0800efd5
 800f018:	0800f165 	.word	0x0800f165
 800f01c:	0800f089 	.word	0x0800f089
 800f020:	0800f147 	.word	0x0800f147
 800f024:	0800efd5 	.word	0x0800efd5
 800f028:	0800efd5 	.word	0x0800efd5
 800f02c:	0800f187 	.word	0x0800f187
 800f030:	0800efd5 	.word	0x0800efd5
 800f034:	0800f089 	.word	0x0800f089
 800f038:	0800efd5 	.word	0x0800efd5
 800f03c:	0800efd5 	.word	0x0800efd5
 800f040:	0800f14f 	.word	0x0800f14f
 800f044:	682b      	ldr	r3, [r5, #0]
 800f046:	1d1a      	adds	r2, r3, #4
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	602a      	str	r2, [r5, #0]
 800f04c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f050:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f054:	2301      	movs	r3, #1
 800f056:	e0a3      	b.n	800f1a0 <_printf_i+0x1f4>
 800f058:	6820      	ldr	r0, [r4, #0]
 800f05a:	6829      	ldr	r1, [r5, #0]
 800f05c:	0606      	lsls	r6, r0, #24
 800f05e:	f101 0304 	add.w	r3, r1, #4
 800f062:	d50a      	bpl.n	800f07a <_printf_i+0xce>
 800f064:	680e      	ldr	r6, [r1, #0]
 800f066:	602b      	str	r3, [r5, #0]
 800f068:	2e00      	cmp	r6, #0
 800f06a:	da03      	bge.n	800f074 <_printf_i+0xc8>
 800f06c:	232d      	movs	r3, #45	; 0x2d
 800f06e:	4276      	negs	r6, r6
 800f070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f074:	485e      	ldr	r0, [pc, #376]	; (800f1f0 <_printf_i+0x244>)
 800f076:	230a      	movs	r3, #10
 800f078:	e019      	b.n	800f0ae <_printf_i+0x102>
 800f07a:	680e      	ldr	r6, [r1, #0]
 800f07c:	602b      	str	r3, [r5, #0]
 800f07e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f082:	bf18      	it	ne
 800f084:	b236      	sxthne	r6, r6
 800f086:	e7ef      	b.n	800f068 <_printf_i+0xbc>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	6820      	ldr	r0, [r4, #0]
 800f08c:	1d19      	adds	r1, r3, #4
 800f08e:	6029      	str	r1, [r5, #0]
 800f090:	0601      	lsls	r1, r0, #24
 800f092:	d501      	bpl.n	800f098 <_printf_i+0xec>
 800f094:	681e      	ldr	r6, [r3, #0]
 800f096:	e002      	b.n	800f09e <_printf_i+0xf2>
 800f098:	0646      	lsls	r6, r0, #25
 800f09a:	d5fb      	bpl.n	800f094 <_printf_i+0xe8>
 800f09c:	881e      	ldrh	r6, [r3, #0]
 800f09e:	4854      	ldr	r0, [pc, #336]	; (800f1f0 <_printf_i+0x244>)
 800f0a0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0a2:	bf0c      	ite	eq
 800f0a4:	2308      	moveq	r3, #8
 800f0a6:	230a      	movne	r3, #10
 800f0a8:	2100      	movs	r1, #0
 800f0aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0ae:	6865      	ldr	r5, [r4, #4]
 800f0b0:	60a5      	str	r5, [r4, #8]
 800f0b2:	2d00      	cmp	r5, #0
 800f0b4:	bfa2      	ittt	ge
 800f0b6:	6821      	ldrge	r1, [r4, #0]
 800f0b8:	f021 0104 	bicge.w	r1, r1, #4
 800f0bc:	6021      	strge	r1, [r4, #0]
 800f0be:	b90e      	cbnz	r6, 800f0c4 <_printf_i+0x118>
 800f0c0:	2d00      	cmp	r5, #0
 800f0c2:	d04d      	beq.n	800f160 <_printf_i+0x1b4>
 800f0c4:	4615      	mov	r5, r2
 800f0c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f0ca:	fb03 6711 	mls	r7, r3, r1, r6
 800f0ce:	5dc7      	ldrb	r7, [r0, r7]
 800f0d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f0d4:	4637      	mov	r7, r6
 800f0d6:	42bb      	cmp	r3, r7
 800f0d8:	460e      	mov	r6, r1
 800f0da:	d9f4      	bls.n	800f0c6 <_printf_i+0x11a>
 800f0dc:	2b08      	cmp	r3, #8
 800f0de:	d10b      	bne.n	800f0f8 <_printf_i+0x14c>
 800f0e0:	6823      	ldr	r3, [r4, #0]
 800f0e2:	07de      	lsls	r6, r3, #31
 800f0e4:	d508      	bpl.n	800f0f8 <_printf_i+0x14c>
 800f0e6:	6923      	ldr	r3, [r4, #16]
 800f0e8:	6861      	ldr	r1, [r4, #4]
 800f0ea:	4299      	cmp	r1, r3
 800f0ec:	bfde      	ittt	le
 800f0ee:	2330      	movle	r3, #48	; 0x30
 800f0f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f0f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f0f8:	1b52      	subs	r2, r2, r5
 800f0fa:	6122      	str	r2, [r4, #16]
 800f0fc:	f8cd a000 	str.w	sl, [sp]
 800f100:	464b      	mov	r3, r9
 800f102:	aa03      	add	r2, sp, #12
 800f104:	4621      	mov	r1, r4
 800f106:	4640      	mov	r0, r8
 800f108:	f7ff fee2 	bl	800eed0 <_printf_common>
 800f10c:	3001      	adds	r0, #1
 800f10e:	d14c      	bne.n	800f1aa <_printf_i+0x1fe>
 800f110:	f04f 30ff 	mov.w	r0, #4294967295
 800f114:	b004      	add	sp, #16
 800f116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11a:	4835      	ldr	r0, [pc, #212]	; (800f1f0 <_printf_i+0x244>)
 800f11c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f120:	6829      	ldr	r1, [r5, #0]
 800f122:	6823      	ldr	r3, [r4, #0]
 800f124:	f851 6b04 	ldr.w	r6, [r1], #4
 800f128:	6029      	str	r1, [r5, #0]
 800f12a:	061d      	lsls	r5, r3, #24
 800f12c:	d514      	bpl.n	800f158 <_printf_i+0x1ac>
 800f12e:	07df      	lsls	r7, r3, #31
 800f130:	bf44      	itt	mi
 800f132:	f043 0320 	orrmi.w	r3, r3, #32
 800f136:	6023      	strmi	r3, [r4, #0]
 800f138:	b91e      	cbnz	r6, 800f142 <_printf_i+0x196>
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	f023 0320 	bic.w	r3, r3, #32
 800f140:	6023      	str	r3, [r4, #0]
 800f142:	2310      	movs	r3, #16
 800f144:	e7b0      	b.n	800f0a8 <_printf_i+0xfc>
 800f146:	6823      	ldr	r3, [r4, #0]
 800f148:	f043 0320 	orr.w	r3, r3, #32
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	2378      	movs	r3, #120	; 0x78
 800f150:	4828      	ldr	r0, [pc, #160]	; (800f1f4 <_printf_i+0x248>)
 800f152:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f156:	e7e3      	b.n	800f120 <_printf_i+0x174>
 800f158:	0659      	lsls	r1, r3, #25
 800f15a:	bf48      	it	mi
 800f15c:	b2b6      	uxthmi	r6, r6
 800f15e:	e7e6      	b.n	800f12e <_printf_i+0x182>
 800f160:	4615      	mov	r5, r2
 800f162:	e7bb      	b.n	800f0dc <_printf_i+0x130>
 800f164:	682b      	ldr	r3, [r5, #0]
 800f166:	6826      	ldr	r6, [r4, #0]
 800f168:	6961      	ldr	r1, [r4, #20]
 800f16a:	1d18      	adds	r0, r3, #4
 800f16c:	6028      	str	r0, [r5, #0]
 800f16e:	0635      	lsls	r5, r6, #24
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	d501      	bpl.n	800f178 <_printf_i+0x1cc>
 800f174:	6019      	str	r1, [r3, #0]
 800f176:	e002      	b.n	800f17e <_printf_i+0x1d2>
 800f178:	0670      	lsls	r0, r6, #25
 800f17a:	d5fb      	bpl.n	800f174 <_printf_i+0x1c8>
 800f17c:	8019      	strh	r1, [r3, #0]
 800f17e:	2300      	movs	r3, #0
 800f180:	6123      	str	r3, [r4, #16]
 800f182:	4615      	mov	r5, r2
 800f184:	e7ba      	b.n	800f0fc <_printf_i+0x150>
 800f186:	682b      	ldr	r3, [r5, #0]
 800f188:	1d1a      	adds	r2, r3, #4
 800f18a:	602a      	str	r2, [r5, #0]
 800f18c:	681d      	ldr	r5, [r3, #0]
 800f18e:	6862      	ldr	r2, [r4, #4]
 800f190:	2100      	movs	r1, #0
 800f192:	4628      	mov	r0, r5
 800f194:	f7f1 f844 	bl	8000220 <memchr>
 800f198:	b108      	cbz	r0, 800f19e <_printf_i+0x1f2>
 800f19a:	1b40      	subs	r0, r0, r5
 800f19c:	6060      	str	r0, [r4, #4]
 800f19e:	6863      	ldr	r3, [r4, #4]
 800f1a0:	6123      	str	r3, [r4, #16]
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1a8:	e7a8      	b.n	800f0fc <_printf_i+0x150>
 800f1aa:	6923      	ldr	r3, [r4, #16]
 800f1ac:	462a      	mov	r2, r5
 800f1ae:	4649      	mov	r1, r9
 800f1b0:	4640      	mov	r0, r8
 800f1b2:	47d0      	blx	sl
 800f1b4:	3001      	adds	r0, #1
 800f1b6:	d0ab      	beq.n	800f110 <_printf_i+0x164>
 800f1b8:	6823      	ldr	r3, [r4, #0]
 800f1ba:	079b      	lsls	r3, r3, #30
 800f1bc:	d413      	bmi.n	800f1e6 <_printf_i+0x23a>
 800f1be:	68e0      	ldr	r0, [r4, #12]
 800f1c0:	9b03      	ldr	r3, [sp, #12]
 800f1c2:	4298      	cmp	r0, r3
 800f1c4:	bfb8      	it	lt
 800f1c6:	4618      	movlt	r0, r3
 800f1c8:	e7a4      	b.n	800f114 <_printf_i+0x168>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	4632      	mov	r2, r6
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	4640      	mov	r0, r8
 800f1d2:	47d0      	blx	sl
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	d09b      	beq.n	800f110 <_printf_i+0x164>
 800f1d8:	3501      	adds	r5, #1
 800f1da:	68e3      	ldr	r3, [r4, #12]
 800f1dc:	9903      	ldr	r1, [sp, #12]
 800f1de:	1a5b      	subs	r3, r3, r1
 800f1e0:	42ab      	cmp	r3, r5
 800f1e2:	dcf2      	bgt.n	800f1ca <_printf_i+0x21e>
 800f1e4:	e7eb      	b.n	800f1be <_printf_i+0x212>
 800f1e6:	2500      	movs	r5, #0
 800f1e8:	f104 0619 	add.w	r6, r4, #25
 800f1ec:	e7f5      	b.n	800f1da <_printf_i+0x22e>
 800f1ee:	bf00      	nop
 800f1f0:	08012b4f 	.word	0x08012b4f
 800f1f4:	08012b60 	.word	0x08012b60

0800f1f8 <_read_r>:
 800f1f8:	b538      	push	{r3, r4, r5, lr}
 800f1fa:	4d07      	ldr	r5, [pc, #28]	; (800f218 <_read_r+0x20>)
 800f1fc:	4604      	mov	r4, r0
 800f1fe:	4608      	mov	r0, r1
 800f200:	4611      	mov	r1, r2
 800f202:	2200      	movs	r2, #0
 800f204:	602a      	str	r2, [r5, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	f7f1 fd1a 	bl	8000c40 <_read>
 800f20c:	1c43      	adds	r3, r0, #1
 800f20e:	d102      	bne.n	800f216 <_read_r+0x1e>
 800f210:	682b      	ldr	r3, [r5, #0]
 800f212:	b103      	cbz	r3, 800f216 <_read_r+0x1e>
 800f214:	6023      	str	r3, [r4, #0]
 800f216:	bd38      	pop	{r3, r4, r5, pc}
 800f218:	20010ddc 	.word	0x20010ddc

0800f21c <__swbuf_r>:
 800f21c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21e:	460e      	mov	r6, r1
 800f220:	4614      	mov	r4, r2
 800f222:	4605      	mov	r5, r0
 800f224:	b118      	cbz	r0, 800f22e <__swbuf_r+0x12>
 800f226:	6983      	ldr	r3, [r0, #24]
 800f228:	b90b      	cbnz	r3, 800f22e <__swbuf_r+0x12>
 800f22a:	f7fe ff1f 	bl	800e06c <__sinit>
 800f22e:	4b21      	ldr	r3, [pc, #132]	; (800f2b4 <__swbuf_r+0x98>)
 800f230:	429c      	cmp	r4, r3
 800f232:	d12b      	bne.n	800f28c <__swbuf_r+0x70>
 800f234:	686c      	ldr	r4, [r5, #4]
 800f236:	69a3      	ldr	r3, [r4, #24]
 800f238:	60a3      	str	r3, [r4, #8]
 800f23a:	89a3      	ldrh	r3, [r4, #12]
 800f23c:	071a      	lsls	r2, r3, #28
 800f23e:	d52f      	bpl.n	800f2a0 <__swbuf_r+0x84>
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	b36b      	cbz	r3, 800f2a0 <__swbuf_r+0x84>
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	6820      	ldr	r0, [r4, #0]
 800f248:	1ac0      	subs	r0, r0, r3
 800f24a:	6963      	ldr	r3, [r4, #20]
 800f24c:	b2f6      	uxtb	r6, r6
 800f24e:	4283      	cmp	r3, r0
 800f250:	4637      	mov	r7, r6
 800f252:	dc04      	bgt.n	800f25e <__swbuf_r+0x42>
 800f254:	4621      	mov	r1, r4
 800f256:	4628      	mov	r0, r5
 800f258:	f7ff fac4 	bl	800e7e4 <_fflush_r>
 800f25c:	bb30      	cbnz	r0, 800f2ac <__swbuf_r+0x90>
 800f25e:	68a3      	ldr	r3, [r4, #8]
 800f260:	3b01      	subs	r3, #1
 800f262:	60a3      	str	r3, [r4, #8]
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	1c5a      	adds	r2, r3, #1
 800f268:	6022      	str	r2, [r4, #0]
 800f26a:	701e      	strb	r6, [r3, #0]
 800f26c:	6963      	ldr	r3, [r4, #20]
 800f26e:	3001      	adds	r0, #1
 800f270:	4283      	cmp	r3, r0
 800f272:	d004      	beq.n	800f27e <__swbuf_r+0x62>
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	07db      	lsls	r3, r3, #31
 800f278:	d506      	bpl.n	800f288 <__swbuf_r+0x6c>
 800f27a:	2e0a      	cmp	r6, #10
 800f27c:	d104      	bne.n	800f288 <__swbuf_r+0x6c>
 800f27e:	4621      	mov	r1, r4
 800f280:	4628      	mov	r0, r5
 800f282:	f7ff faaf 	bl	800e7e4 <_fflush_r>
 800f286:	b988      	cbnz	r0, 800f2ac <__swbuf_r+0x90>
 800f288:	4638      	mov	r0, r7
 800f28a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f28c:	4b0a      	ldr	r3, [pc, #40]	; (800f2b8 <__swbuf_r+0x9c>)
 800f28e:	429c      	cmp	r4, r3
 800f290:	d101      	bne.n	800f296 <__swbuf_r+0x7a>
 800f292:	68ac      	ldr	r4, [r5, #8]
 800f294:	e7cf      	b.n	800f236 <__swbuf_r+0x1a>
 800f296:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <__swbuf_r+0xa0>)
 800f298:	429c      	cmp	r4, r3
 800f29a:	bf08      	it	eq
 800f29c:	68ec      	ldreq	r4, [r5, #12]
 800f29e:	e7ca      	b.n	800f236 <__swbuf_r+0x1a>
 800f2a0:	4621      	mov	r1, r4
 800f2a2:	4628      	mov	r0, r5
 800f2a4:	f000 f80c 	bl	800f2c0 <__swsetup_r>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	d0cb      	beq.n	800f244 <__swbuf_r+0x28>
 800f2ac:	f04f 37ff 	mov.w	r7, #4294967295
 800f2b0:	e7ea      	b.n	800f288 <__swbuf_r+0x6c>
 800f2b2:	bf00      	nop
 800f2b4:	08012a4c 	.word	0x08012a4c
 800f2b8:	08012a6c 	.word	0x08012a6c
 800f2bc:	08012a2c 	.word	0x08012a2c

0800f2c0 <__swsetup_r>:
 800f2c0:	4b32      	ldr	r3, [pc, #200]	; (800f38c <__swsetup_r+0xcc>)
 800f2c2:	b570      	push	{r4, r5, r6, lr}
 800f2c4:	681d      	ldr	r5, [r3, #0]
 800f2c6:	4606      	mov	r6, r0
 800f2c8:	460c      	mov	r4, r1
 800f2ca:	b125      	cbz	r5, 800f2d6 <__swsetup_r+0x16>
 800f2cc:	69ab      	ldr	r3, [r5, #24]
 800f2ce:	b913      	cbnz	r3, 800f2d6 <__swsetup_r+0x16>
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	f7fe fecb 	bl	800e06c <__sinit>
 800f2d6:	4b2e      	ldr	r3, [pc, #184]	; (800f390 <__swsetup_r+0xd0>)
 800f2d8:	429c      	cmp	r4, r3
 800f2da:	d10f      	bne.n	800f2fc <__swsetup_r+0x3c>
 800f2dc:	686c      	ldr	r4, [r5, #4]
 800f2de:	89a3      	ldrh	r3, [r4, #12]
 800f2e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2e4:	0719      	lsls	r1, r3, #28
 800f2e6:	d42c      	bmi.n	800f342 <__swsetup_r+0x82>
 800f2e8:	06dd      	lsls	r5, r3, #27
 800f2ea:	d411      	bmi.n	800f310 <__swsetup_r+0x50>
 800f2ec:	2309      	movs	r3, #9
 800f2ee:	6033      	str	r3, [r6, #0]
 800f2f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f2f4:	81a3      	strh	r3, [r4, #12]
 800f2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fa:	e03e      	b.n	800f37a <__swsetup_r+0xba>
 800f2fc:	4b25      	ldr	r3, [pc, #148]	; (800f394 <__swsetup_r+0xd4>)
 800f2fe:	429c      	cmp	r4, r3
 800f300:	d101      	bne.n	800f306 <__swsetup_r+0x46>
 800f302:	68ac      	ldr	r4, [r5, #8]
 800f304:	e7eb      	b.n	800f2de <__swsetup_r+0x1e>
 800f306:	4b24      	ldr	r3, [pc, #144]	; (800f398 <__swsetup_r+0xd8>)
 800f308:	429c      	cmp	r4, r3
 800f30a:	bf08      	it	eq
 800f30c:	68ec      	ldreq	r4, [r5, #12]
 800f30e:	e7e6      	b.n	800f2de <__swsetup_r+0x1e>
 800f310:	0758      	lsls	r0, r3, #29
 800f312:	d512      	bpl.n	800f33a <__swsetup_r+0x7a>
 800f314:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f316:	b141      	cbz	r1, 800f32a <__swsetup_r+0x6a>
 800f318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f31c:	4299      	cmp	r1, r3
 800f31e:	d002      	beq.n	800f326 <__swsetup_r+0x66>
 800f320:	4630      	mov	r0, r6
 800f322:	f7ff fad3 	bl	800e8cc <_free_r>
 800f326:	2300      	movs	r3, #0
 800f328:	6363      	str	r3, [r4, #52]	; 0x34
 800f32a:	89a3      	ldrh	r3, [r4, #12]
 800f32c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f330:	81a3      	strh	r3, [r4, #12]
 800f332:	2300      	movs	r3, #0
 800f334:	6063      	str	r3, [r4, #4]
 800f336:	6923      	ldr	r3, [r4, #16]
 800f338:	6023      	str	r3, [r4, #0]
 800f33a:	89a3      	ldrh	r3, [r4, #12]
 800f33c:	f043 0308 	orr.w	r3, r3, #8
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	6923      	ldr	r3, [r4, #16]
 800f344:	b94b      	cbnz	r3, 800f35a <__swsetup_r+0x9a>
 800f346:	89a3      	ldrh	r3, [r4, #12]
 800f348:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f34c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f350:	d003      	beq.n	800f35a <__swsetup_r+0x9a>
 800f352:	4621      	mov	r1, r4
 800f354:	4630      	mov	r0, r6
 800f356:	f000 f84d 	bl	800f3f4 <__smakebuf_r>
 800f35a:	89a0      	ldrh	r0, [r4, #12]
 800f35c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f360:	f010 0301 	ands.w	r3, r0, #1
 800f364:	d00a      	beq.n	800f37c <__swsetup_r+0xbc>
 800f366:	2300      	movs	r3, #0
 800f368:	60a3      	str	r3, [r4, #8]
 800f36a:	6963      	ldr	r3, [r4, #20]
 800f36c:	425b      	negs	r3, r3
 800f36e:	61a3      	str	r3, [r4, #24]
 800f370:	6923      	ldr	r3, [r4, #16]
 800f372:	b943      	cbnz	r3, 800f386 <__swsetup_r+0xc6>
 800f374:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f378:	d1ba      	bne.n	800f2f0 <__swsetup_r+0x30>
 800f37a:	bd70      	pop	{r4, r5, r6, pc}
 800f37c:	0781      	lsls	r1, r0, #30
 800f37e:	bf58      	it	pl
 800f380:	6963      	ldrpl	r3, [r4, #20]
 800f382:	60a3      	str	r3, [r4, #8]
 800f384:	e7f4      	b.n	800f370 <__swsetup_r+0xb0>
 800f386:	2000      	movs	r0, #0
 800f388:	e7f7      	b.n	800f37a <__swsetup_r+0xba>
 800f38a:	bf00      	nop
 800f38c:	2000003c 	.word	0x2000003c
 800f390:	08012a4c 	.word	0x08012a4c
 800f394:	08012a6c 	.word	0x08012a6c
 800f398:	08012a2c 	.word	0x08012a2c

0800f39c <abort>:
 800f39c:	b508      	push	{r3, lr}
 800f39e:	2006      	movs	r0, #6
 800f3a0:	f000 f8c0 	bl	800f524 <raise>
 800f3a4:	2001      	movs	r0, #1
 800f3a6:	f7f1 fc45 	bl	8000c34 <_exit>

0800f3aa <__swhatbuf_r>:
 800f3aa:	b570      	push	{r4, r5, r6, lr}
 800f3ac:	460e      	mov	r6, r1
 800f3ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3b2:	2900      	cmp	r1, #0
 800f3b4:	b096      	sub	sp, #88	; 0x58
 800f3b6:	4614      	mov	r4, r2
 800f3b8:	461d      	mov	r5, r3
 800f3ba:	da08      	bge.n	800f3ce <__swhatbuf_r+0x24>
 800f3bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	602a      	str	r2, [r5, #0]
 800f3c4:	061a      	lsls	r2, r3, #24
 800f3c6:	d410      	bmi.n	800f3ea <__swhatbuf_r+0x40>
 800f3c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3cc:	e00e      	b.n	800f3ec <__swhatbuf_r+0x42>
 800f3ce:	466a      	mov	r2, sp
 800f3d0:	f000 f8c4 	bl	800f55c <_fstat_r>
 800f3d4:	2800      	cmp	r0, #0
 800f3d6:	dbf1      	blt.n	800f3bc <__swhatbuf_r+0x12>
 800f3d8:	9a01      	ldr	r2, [sp, #4]
 800f3da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f3de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f3e2:	425a      	negs	r2, r3
 800f3e4:	415a      	adcs	r2, r3
 800f3e6:	602a      	str	r2, [r5, #0]
 800f3e8:	e7ee      	b.n	800f3c8 <__swhatbuf_r+0x1e>
 800f3ea:	2340      	movs	r3, #64	; 0x40
 800f3ec:	2000      	movs	r0, #0
 800f3ee:	6023      	str	r3, [r4, #0]
 800f3f0:	b016      	add	sp, #88	; 0x58
 800f3f2:	bd70      	pop	{r4, r5, r6, pc}

0800f3f4 <__smakebuf_r>:
 800f3f4:	898b      	ldrh	r3, [r1, #12]
 800f3f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3f8:	079d      	lsls	r5, r3, #30
 800f3fa:	4606      	mov	r6, r0
 800f3fc:	460c      	mov	r4, r1
 800f3fe:	d507      	bpl.n	800f410 <__smakebuf_r+0x1c>
 800f400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f404:	6023      	str	r3, [r4, #0]
 800f406:	6123      	str	r3, [r4, #16]
 800f408:	2301      	movs	r3, #1
 800f40a:	6163      	str	r3, [r4, #20]
 800f40c:	b002      	add	sp, #8
 800f40e:	bd70      	pop	{r4, r5, r6, pc}
 800f410:	ab01      	add	r3, sp, #4
 800f412:	466a      	mov	r2, sp
 800f414:	f7ff ffc9 	bl	800f3aa <__swhatbuf_r>
 800f418:	9900      	ldr	r1, [sp, #0]
 800f41a:	4605      	mov	r5, r0
 800f41c:	4630      	mov	r0, r6
 800f41e:	f7fe ff4b 	bl	800e2b8 <_malloc_r>
 800f422:	b948      	cbnz	r0, 800f438 <__smakebuf_r+0x44>
 800f424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f428:	059a      	lsls	r2, r3, #22
 800f42a:	d4ef      	bmi.n	800f40c <__smakebuf_r+0x18>
 800f42c:	f023 0303 	bic.w	r3, r3, #3
 800f430:	f043 0302 	orr.w	r3, r3, #2
 800f434:	81a3      	strh	r3, [r4, #12]
 800f436:	e7e3      	b.n	800f400 <__smakebuf_r+0xc>
 800f438:	4b0d      	ldr	r3, [pc, #52]	; (800f470 <__smakebuf_r+0x7c>)
 800f43a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f43c:	89a3      	ldrh	r3, [r4, #12]
 800f43e:	6020      	str	r0, [r4, #0]
 800f440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f444:	81a3      	strh	r3, [r4, #12]
 800f446:	9b00      	ldr	r3, [sp, #0]
 800f448:	6163      	str	r3, [r4, #20]
 800f44a:	9b01      	ldr	r3, [sp, #4]
 800f44c:	6120      	str	r0, [r4, #16]
 800f44e:	b15b      	cbz	r3, 800f468 <__smakebuf_r+0x74>
 800f450:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f454:	4630      	mov	r0, r6
 800f456:	f000 f893 	bl	800f580 <_isatty_r>
 800f45a:	b128      	cbz	r0, 800f468 <__smakebuf_r+0x74>
 800f45c:	89a3      	ldrh	r3, [r4, #12]
 800f45e:	f023 0303 	bic.w	r3, r3, #3
 800f462:	f043 0301 	orr.w	r3, r3, #1
 800f466:	81a3      	strh	r3, [r4, #12]
 800f468:	89a0      	ldrh	r0, [r4, #12]
 800f46a:	4305      	orrs	r5, r0
 800f46c:	81a5      	strh	r5, [r4, #12]
 800f46e:	e7cd      	b.n	800f40c <__smakebuf_r+0x18>
 800f470:	0800e005 	.word	0x0800e005

0800f474 <_realloc_r>:
 800f474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f478:	4680      	mov	r8, r0
 800f47a:	4614      	mov	r4, r2
 800f47c:	460e      	mov	r6, r1
 800f47e:	b921      	cbnz	r1, 800f48a <_realloc_r+0x16>
 800f480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	4611      	mov	r1, r2
 800f486:	f7fe bf17 	b.w	800e2b8 <_malloc_r>
 800f48a:	b92a      	cbnz	r2, 800f498 <_realloc_r+0x24>
 800f48c:	f7ff fa1e 	bl	800e8cc <_free_r>
 800f490:	4625      	mov	r5, r4
 800f492:	4628      	mov	r0, r5
 800f494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f498:	f000 f882 	bl	800f5a0 <_malloc_usable_size_r>
 800f49c:	4284      	cmp	r4, r0
 800f49e:	4607      	mov	r7, r0
 800f4a0:	d802      	bhi.n	800f4a8 <_realloc_r+0x34>
 800f4a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4a6:	d812      	bhi.n	800f4ce <_realloc_r+0x5a>
 800f4a8:	4621      	mov	r1, r4
 800f4aa:	4640      	mov	r0, r8
 800f4ac:	f7fe ff04 	bl	800e2b8 <_malloc_r>
 800f4b0:	4605      	mov	r5, r0
 800f4b2:	2800      	cmp	r0, #0
 800f4b4:	d0ed      	beq.n	800f492 <_realloc_r+0x1e>
 800f4b6:	42bc      	cmp	r4, r7
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	4631      	mov	r1, r6
 800f4bc:	bf28      	it	cs
 800f4be:	463a      	movcs	r2, r7
 800f4c0:	f7fe fea9 	bl	800e216 <memcpy>
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	f7ff fa00 	bl	800e8cc <_free_r>
 800f4cc:	e7e1      	b.n	800f492 <_realloc_r+0x1e>
 800f4ce:	4635      	mov	r5, r6
 800f4d0:	e7df      	b.n	800f492 <_realloc_r+0x1e>

0800f4d2 <_raise_r>:
 800f4d2:	291f      	cmp	r1, #31
 800f4d4:	b538      	push	{r3, r4, r5, lr}
 800f4d6:	4604      	mov	r4, r0
 800f4d8:	460d      	mov	r5, r1
 800f4da:	d904      	bls.n	800f4e6 <_raise_r+0x14>
 800f4dc:	2316      	movs	r3, #22
 800f4de:	6003      	str	r3, [r0, #0]
 800f4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e4:	bd38      	pop	{r3, r4, r5, pc}
 800f4e6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4e8:	b112      	cbz	r2, 800f4f0 <_raise_r+0x1e>
 800f4ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4ee:	b94b      	cbnz	r3, 800f504 <_raise_r+0x32>
 800f4f0:	4620      	mov	r0, r4
 800f4f2:	f000 f831 	bl	800f558 <_getpid_r>
 800f4f6:	462a      	mov	r2, r5
 800f4f8:	4601      	mov	r1, r0
 800f4fa:	4620      	mov	r0, r4
 800f4fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f500:	f000 b818 	b.w	800f534 <_kill_r>
 800f504:	2b01      	cmp	r3, #1
 800f506:	d00a      	beq.n	800f51e <_raise_r+0x4c>
 800f508:	1c59      	adds	r1, r3, #1
 800f50a:	d103      	bne.n	800f514 <_raise_r+0x42>
 800f50c:	2316      	movs	r3, #22
 800f50e:	6003      	str	r3, [r0, #0]
 800f510:	2001      	movs	r0, #1
 800f512:	e7e7      	b.n	800f4e4 <_raise_r+0x12>
 800f514:	2400      	movs	r4, #0
 800f516:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f51a:	4628      	mov	r0, r5
 800f51c:	4798      	blx	r3
 800f51e:	2000      	movs	r0, #0
 800f520:	e7e0      	b.n	800f4e4 <_raise_r+0x12>
	...

0800f524 <raise>:
 800f524:	4b02      	ldr	r3, [pc, #8]	; (800f530 <raise+0xc>)
 800f526:	4601      	mov	r1, r0
 800f528:	6818      	ldr	r0, [r3, #0]
 800f52a:	f7ff bfd2 	b.w	800f4d2 <_raise_r>
 800f52e:	bf00      	nop
 800f530:	2000003c 	.word	0x2000003c

0800f534 <_kill_r>:
 800f534:	b538      	push	{r3, r4, r5, lr}
 800f536:	4d07      	ldr	r5, [pc, #28]	; (800f554 <_kill_r+0x20>)
 800f538:	2300      	movs	r3, #0
 800f53a:	4604      	mov	r4, r0
 800f53c:	4608      	mov	r0, r1
 800f53e:	4611      	mov	r1, r2
 800f540:	602b      	str	r3, [r5, #0]
 800f542:	f7f1 fb6f 	bl	8000c24 <_kill>
 800f546:	1c43      	adds	r3, r0, #1
 800f548:	d102      	bne.n	800f550 <_kill_r+0x1c>
 800f54a:	682b      	ldr	r3, [r5, #0]
 800f54c:	b103      	cbz	r3, 800f550 <_kill_r+0x1c>
 800f54e:	6023      	str	r3, [r4, #0]
 800f550:	bd38      	pop	{r3, r4, r5, pc}
 800f552:	bf00      	nop
 800f554:	20010ddc 	.word	0x20010ddc

0800f558 <_getpid_r>:
 800f558:	f7f1 bb62 	b.w	8000c20 <_getpid>

0800f55c <_fstat_r>:
 800f55c:	b538      	push	{r3, r4, r5, lr}
 800f55e:	4d07      	ldr	r5, [pc, #28]	; (800f57c <_fstat_r+0x20>)
 800f560:	2300      	movs	r3, #0
 800f562:	4604      	mov	r4, r0
 800f564:	4608      	mov	r0, r1
 800f566:	4611      	mov	r1, r2
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	f7f1 fb86 	bl	8000c7a <_fstat>
 800f56e:	1c43      	adds	r3, r0, #1
 800f570:	d102      	bne.n	800f578 <_fstat_r+0x1c>
 800f572:	682b      	ldr	r3, [r5, #0]
 800f574:	b103      	cbz	r3, 800f578 <_fstat_r+0x1c>
 800f576:	6023      	str	r3, [r4, #0]
 800f578:	bd38      	pop	{r3, r4, r5, pc}
 800f57a:	bf00      	nop
 800f57c:	20010ddc 	.word	0x20010ddc

0800f580 <_isatty_r>:
 800f580:	b538      	push	{r3, r4, r5, lr}
 800f582:	4d06      	ldr	r5, [pc, #24]	; (800f59c <_isatty_r+0x1c>)
 800f584:	2300      	movs	r3, #0
 800f586:	4604      	mov	r4, r0
 800f588:	4608      	mov	r0, r1
 800f58a:	602b      	str	r3, [r5, #0]
 800f58c:	f7f1 fb7a 	bl	8000c84 <_isatty>
 800f590:	1c43      	adds	r3, r0, #1
 800f592:	d102      	bne.n	800f59a <_isatty_r+0x1a>
 800f594:	682b      	ldr	r3, [r5, #0]
 800f596:	b103      	cbz	r3, 800f59a <_isatty_r+0x1a>
 800f598:	6023      	str	r3, [r4, #0]
 800f59a:	bd38      	pop	{r3, r4, r5, pc}
 800f59c:	20010ddc 	.word	0x20010ddc

0800f5a0 <_malloc_usable_size_r>:
 800f5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a4:	1f18      	subs	r0, r3, #4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bfbc      	itt	lt
 800f5aa:	580b      	ldrlt	r3, [r1, r0]
 800f5ac:	18c0      	addlt	r0, r0, r3
 800f5ae:	4770      	bx	lr

0800f5b0 <_init>:
 800f5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5b2:	bf00      	nop
 800f5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5b6:	bc08      	pop	{r3}
 800f5b8:	469e      	mov	lr, r3
 800f5ba:	4770      	bx	lr

0800f5bc <_fini>:
 800f5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5be:	bf00      	nop
 800f5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5c2:	bc08      	pop	{r3}
 800f5c4:	469e      	mov	lr, r3
 800f5c6:	4770      	bx	lr
