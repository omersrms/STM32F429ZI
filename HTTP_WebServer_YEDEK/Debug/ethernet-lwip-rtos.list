
ethernet-lwip-rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff40  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a4c  080100f0  080100f0  000200f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b3c  08012b3c  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  08012b3c  08012b3c  00022b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b44  08012b44  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b44  08012b44  00022b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b48  08012b48  00022b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08012b4c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030090  2**0
                  CONTENTS
 10 .bss          000109f0  20000090  20000090  00030090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20010a80  20010a80  00030090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004bc2f  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009940  00000000  00000000  0007bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00031ceb  00000000  00000000  0008562f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002518  00000000  00000000  000b7320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003370  00000000  00000000  000b9838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000130eb  00000000  00000000  000bcba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004bb30  00000000  00000000  000cfc93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001036db  00000000  00000000  0011b7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021ee9e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000078bc  00000000  00000000  0021eef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000090 	.word	0x20000090
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080100d8 	.word	0x080100d8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000094 	.word	0x20000094
 80001ec:	080100d8 	.word	0x080100d8

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000594:	b508      	push	{r3, lr}
  /* init code for LWIP */
  MX_LWIP_Init();
 8000596:	f002 fcbd 	bl	8002f14 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpserver_init();
 800059a:	f000 fb0f 	bl	8000bbc <tcpserver_init>
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
    osDelay(1);
 800059e:	2401      	movs	r4, #1
 80005a0:	4620      	mov	r0, r4
 80005a2:	f003 f8f1 	bl	8003788 <osDelay>
  for(;;)
 80005a6:	e7fb      	b.n	80005a0 <StartDefaultTask+0xc>

080005a8 <SystemClock_Config>:
{
 80005a8:	b500      	push	{lr}
 80005aa:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ac:	2230      	movs	r2, #48	; 0x30
 80005ae:	2100      	movs	r1, #0
 80005b0:	a808      	add	r0, sp, #32
 80005b2:	f00e fc02 	bl	800edba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b6:	2300      	movs	r3, #0
 80005b8:	9303      	str	r3, [sp, #12]
 80005ba:	9304      	str	r3, [sp, #16]
 80005bc:	9305      	str	r3, [sp, #20]
 80005be:	9306      	str	r3, [sp, #24]
 80005c0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	4a20      	ldr	r2, [pc, #128]	; (8000648 <SystemClock_Config+0xa0>)
 80005c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80005c8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005cc:	6411      	str	r1, [r2, #64]	; 0x40
 80005ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005d0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80005d4:	9201      	str	r2, [sp, #4]
 80005d6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d8:	9302      	str	r3, [sp, #8]
 80005da:	4b1c      	ldr	r3, [pc, #112]	; (800064c <SystemClock_Config+0xa4>)
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ea:	9302      	str	r3, [sp, #8]
 80005ec:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ee:	2301      	movs	r3, #1
 80005f0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	2302      	movs	r3, #2
 80005fa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000600:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000602:	2204      	movs	r2, #4
 8000604:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000606:	22a8      	movs	r2, #168	; 0xa8
 8000608:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060c:	2307      	movs	r3, #7
 800060e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	a808      	add	r0, sp, #32
 8000612:	f001 fce1 	bl	8001fd8 <HAL_RCC_OscConfig>
 8000616:	b998      	cbnz	r0, 8000640 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000624:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000628:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800062e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000630:	2105      	movs	r1, #5
 8000632:	a803      	add	r0, sp, #12
 8000634:	f001 ff36 	bl	80024a4 <HAL_RCC_ClockConfig>
 8000638:	b920      	cbnz	r0, 8000644 <SystemClock_Config+0x9c>
}
 800063a:	b015      	add	sp, #84	; 0x54
 800063c:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000640:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	e7fe      	b.n	8000642 <SystemClock_Config+0x9a>
 8000644:	b672      	cpsid	i
 8000646:	e7fe      	b.n	8000646 <SystemClock_Config+0x9e>
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <main>:
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000654:	f000 fbd8 	bl	8000e08 <HAL_Init>
  SystemClock_Config();
 8000658:	f7ff ffa6 	bl	80005a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	2400      	movs	r4, #0
 800065e:	9407      	str	r4, [sp, #28]
 8000660:	9408      	str	r4, [sp, #32]
 8000662:	9409      	str	r4, [sp, #36]	; 0x24
 8000664:	940a      	str	r4, [sp, #40]	; 0x28
 8000666:	940b      	str	r4, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000668:	9401      	str	r4, [sp, #4]
 800066a:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <main+0x164>)
 800066c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800066e:	f042 0204 	orr.w	r2, r2, #4
 8000672:	631a      	str	r2, [r3, #48]	; 0x30
 8000674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000676:	f002 0204 	and.w	r2, r2, #4
 800067a:	9201      	str	r2, [sp, #4]
 800067c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067e:	9402      	str	r4, [sp, #8]
 8000680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000682:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000686:	631a      	str	r2, [r3, #48]	; 0x30
 8000688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800068a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800068e:	9202      	str	r2, [sp, #8]
 8000690:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	9403      	str	r4, [sp, #12]
 8000694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000696:	f042 0201 	orr.w	r2, r2, #1
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
 800069c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800069e:	f002 0201 	and.w	r2, r2, #1
 80006a2:	9203      	str	r2, [sp, #12]
 80006a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	9404      	str	r4, [sp, #16]
 80006a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006aa:	f042 0202 	orr.w	r2, r2, #2
 80006ae:	631a      	str	r2, [r3, #48]	; 0x30
 80006b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b2:	f002 0202 	and.w	r2, r2, #2
 80006b6:	9204      	str	r2, [sp, #16]
 80006b8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ba:	9405      	str	r4, [sp, #20]
 80006bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006be:	f042 0208 	orr.w	r2, r2, #8
 80006c2:	631a      	str	r2, [r3, #48]	; 0x30
 80006c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c6:	f002 0208 	and.w	r2, r2, #8
 80006ca:	9205      	str	r2, [sp, #20]
 80006cc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ce:	9406      	str	r4, [sp, #24]
 80006d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80006d6:	631a      	str	r2, [r3, #48]	; 0x30
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006de:	9306      	str	r3, [sp, #24]
 80006e0:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006e2:	4f35      	ldr	r7, [pc, #212]	; (80007b8 <main+0x168>)
 80006e4:	4622      	mov	r2, r4
 80006e6:	f244 0181 	movw	r1, #16513	; 0x4081
 80006ea:	4638      	mov	r0, r7
 80006ec:	f001 fbce 	bl	8001e8c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006f0:	4d32      	ldr	r5, [pc, #200]	; (80007bc <main+0x16c>)
 80006f2:	4622      	mov	r2, r4
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	4628      	mov	r0, r5
 80006f8:	f001 fbc8 	bl	8001e8c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000702:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000706:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800070a:	a907      	add	r1, sp, #28
 800070c:	482c      	ldr	r0, [pc, #176]	; (80007c0 <main+0x170>)
 800070e:	f001 faa9 	bl	8001c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000712:	f244 0381 	movw	r3, #16513	; 0x4081
 8000716:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2601      	movs	r6, #1
 800071a:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000720:	a907      	add	r1, sp, #28
 8000722:	4638      	mov	r0, r7
 8000724:	f001 fa9e 	bl	8001c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800072c:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000732:	a907      	add	r1, sp, #28
 8000734:	4628      	mov	r0, r5
 8000736:	f001 fa95 	bl	8001c64 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800073a:	2380      	movs	r3, #128	; 0x80
 800073c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000742:	a907      	add	r1, sp, #28
 8000744:	4628      	mov	r0, r5
 8000746:	f001 fa8d 	bl	8001c64 <HAL_GPIO_Init>
  huart3.Instance = USART3;
 800074a:	481e      	ldr	r0, [pc, #120]	; (80007c4 <main+0x174>)
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <main+0x178>)
 800074e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8000750:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000754:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000756:	6084      	str	r4, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000758:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800075a:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800075c:	230c      	movs	r3, #12
 800075e:	6143      	str	r3, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000760:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000762:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000764:	f002 f9d0 	bl	8002b08 <HAL_UART_Init>
 8000768:	b9f8      	cbnz	r0, 80007aa <main+0x15a>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800076a:	4818      	ldr	r0, [pc, #96]	; (80007cc <main+0x17c>)
 800076c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000770:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000772:	2304      	movs	r3, #4
 8000774:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000776:	2202      	movs	r2, #2
 8000778:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800077a:	2300      	movs	r3, #0
 800077c:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077e:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000780:	2201      	movs	r2, #1
 8000782:	61c2      	str	r2, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000784:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000786:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000788:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800078a:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800078c:	f001 fb8d 	bl	8001eaa <HAL_PCD_Init>
 8000790:	b968      	cbnz	r0, 80007ae <main+0x15e>
  osKernelInitialize();
 8000792:	f002 ff75 	bl	8003680 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <main+0x180>)
 8000798:	2100      	movs	r1, #0
 800079a:	480e      	ldr	r0, [pc, #56]	; (80007d4 <main+0x184>)
 800079c:	f002 ffa8 	bl	80036f0 <osThreadNew>
 80007a0:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <main+0x188>)
 80007a2:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80007a4:	f002 ff7e 	bl	80036a4 <osKernelStart>
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <main+0x158>
 80007aa:	b672      	cpsid	i
  while (1)
 80007ac:	e7fe      	b.n	80007ac <main+0x15c>
 80007ae:	b672      	cpsid	i
 80007b0:	e7fe      	b.n	80007b0 <main+0x160>
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020400 	.word	0x40020400
 80007bc:	40021800 	.word	0x40021800
 80007c0:	40020800 	.word	0x40020800
 80007c4:	200005bc 	.word	0x200005bc
 80007c8:	40004800 	.word	0x40004800
 80007cc:	200000b0 	.word	0x200000b0
 80007d0:	080100fc 	.word	0x080100fc
 80007d4:	08000595 	.word	0x08000595
 80007d8:	200000ac 	.word	0x200000ac

080007dc <HAL_TIM_PeriodElapsedCallback>:
{
 80007dc:	b508      	push	{r3, lr}
  if (htim->Instance == TIM6) {
 80007de:	6802      	ldr	r2, [r0, #0]
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d000      	beq.n	80007e8 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80007e6:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80007e8:	f000 fb28 	bl	8000e3c <HAL_IncTick>
}
 80007ec:	e7fb      	b.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0xa>
 80007ee:	bf00      	nop
 80007f0:	40001000 	.word	0x40001000

080007f4 <Error_Handler>:
 80007f4:	b672      	cpsid	i
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x2>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b500      	push	{lr}
 80007fa:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fc:	2200      	movs	r2, #0
 80007fe:	9200      	str	r2, [sp, #0]
 8000800:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x40>)
 8000802:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000804:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000808:	6459      	str	r1, [r3, #68]	; 0x44
 800080a:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800080c:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8000810:	9100      	str	r1, [sp, #0]
 8000812:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000818:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800081c:	6419      	str	r1, [r3, #64]	; 0x40
 800081e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000824:	9301      	str	r3, [sp, #4]
 8000826:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000828:	210f      	movs	r1, #15
 800082a:	f06f 0001 	mvn.w	r0, #1
 800082e:	f000 fb3d 	bl	8000eac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	b003      	add	sp, #12
 8000834:	f85d fb04 	ldr.w	pc, [sp], #4
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800083c:	b500      	push	{lr}
 800083e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	2300      	movs	r3, #0
 8000842:	9303      	str	r3, [sp, #12]
 8000844:	9304      	str	r3, [sp, #16]
 8000846:	9305      	str	r3, [sp, #20]
 8000848:	9306      	str	r3, [sp, #24]
 800084a:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART3)
 800084c:	6802      	ldr	r2, [r0, #0]
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_UART_MspInit+0x68>)
 8000850:	429a      	cmp	r2, r3
 8000852:	d002      	beq.n	800085a <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000854:	b009      	add	sp, #36	; 0x24
 8000856:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART3_CLK_ENABLE();
 800085a:	2100      	movs	r1, #0
 800085c:	9101      	str	r1, [sp, #4]
 800085e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8000862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000864:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
 800086a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000874:	9102      	str	r1, [sp, #8]
 8000876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000878:	f042 0208 	orr.w	r2, r2, #8
 800087c:	631a      	str	r2, [r3, #48]	; 0x30
 800087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000880:	f003 0308 	and.w	r3, r3, #8
 8000884:	9302      	str	r3, [sp, #8]
 8000886:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000888:	f44f 7340 	mov.w	r3, #768	; 0x300
 800088c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000896:	2307      	movs	r3, #7
 8000898:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800089a:	a903      	add	r1, sp, #12
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <HAL_UART_MspInit+0x6c>)
 800089e:	f001 f9e1 	bl	8001c64 <HAL_GPIO_Init>
}
 80008a2:	e7d7      	b.n	8000854 <HAL_UART_MspInit+0x18>
 80008a4:	40004800 	.word	0x40004800
 80008a8:	40020c00 	.word	0x40020c00

080008ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	2300      	movs	r3, #0
 80008b2:	9303      	str	r3, [sp, #12]
 80008b4:	9304      	str	r3, [sp, #16]
 80008b6:	9305      	str	r3, [sp, #20]
 80008b8:	9306      	str	r3, [sp, #24]
 80008ba:	9307      	str	r3, [sp, #28]
  if(hpcd->Instance==USB_OTG_FS)
 80008bc:	6803      	ldr	r3, [r0, #0]
 80008be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008c2:	d001      	beq.n	80008c8 <HAL_PCD_MspInit+0x1c>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80008c4:	b008      	add	sp, #32
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	2500      	movs	r5, #0
 80008ca:	9501      	str	r5, [sp, #4]
 80008cc:	4c17      	ldr	r4, [pc, #92]	; (800092c <HAL_PCD_MspInit+0x80>)
 80008ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6323      	str	r3, [r4, #48]	; 0x30
 80008d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	9301      	str	r3, [sp, #4]
 80008de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008e4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ee:	230a      	movs	r3, #10
 80008f0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f2:	4e0f      	ldr	r6, [pc, #60]	; (8000930 <HAL_PCD_MspInit+0x84>)
 80008f4:	a903      	add	r1, sp, #12
 80008f6:	4630      	mov	r0, r6
 80008f8:	f001 f9b4 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000900:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000902:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000906:	a903      	add	r1, sp, #12
 8000908:	4630      	mov	r0, r6
 800090a:	f001 f9ab 	bl	8001c64 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800090e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6363      	str	r3, [r4, #52]	; 0x34
 8000916:	9502      	str	r5, [sp, #8]
 8000918:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800091a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091e:	6463      	str	r3, [r4, #68]	; 0x44
 8000920:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	9302      	str	r3, [sp, #8]
 8000928:	9b02      	ldr	r3, [sp, #8]
}
 800092a:	e7cb      	b.n	80008c4 <HAL_PCD_MspInit+0x18>
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000

08000934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000934:	b530      	push	{r4, r5, lr}
 8000936:	b089      	sub	sp, #36	; 0x24
 8000938:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <HAL_InitTick+0x90>)
 8000940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000942:	f042 0210 	orr.w	r2, r2, #16
 8000946:	641a      	str	r2, [r3, #64]	; 0x40
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 0310 	and.w	r3, r3, #16
 800094e:	9301      	str	r3, [sp, #4]
 8000950:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000952:	a902      	add	r1, sp, #8
 8000954:	a803      	add	r0, sp, #12
 8000956:	f001 fe7d 	bl	8002654 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800095a:	9b06      	ldr	r3, [sp, #24]
 800095c:	b9cb      	cbnz	r3, 8000992 <HAL_InitTick+0x5e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800095e:	f001 fe59 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8000962:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000964:	4818      	ldr	r0, [pc, #96]	; (80009c8 <HAL_InitTick+0x94>)
 8000966:	4a19      	ldr	r2, [pc, #100]	; (80009cc <HAL_InitTick+0x98>)
 8000968:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800096a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800096e:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000970:	4a17      	ldr	r2, [pc, #92]	; (80009d0 <HAL_InitTick+0x9c>)
 8000972:	fba2 2303 	umull	r2, r3, r2, r3
 8000976:	0c9b      	lsrs	r3, r3, #18
 8000978:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800097a:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000980:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000982:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000984:	f002 f810 	bl	80029a8 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8000988:	4605      	mov	r5, r0
 800098a:	b130      	cbz	r0, 800099a <HAL_InitTick+0x66>
    }
  }

 /* Return function status */
  return status;
}
 800098c:	4628      	mov	r0, r5
 800098e:	b009      	add	sp, #36	; 0x24
 8000990:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000992:	f001 fe3f 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8000996:	0043      	lsls	r3, r0, #1
 8000998:	e7e4      	b.n	8000964 <HAL_InitTick+0x30>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <HAL_InitTick+0x94>)
 800099c:	f001 fe7a 	bl	8002694 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80009a0:	4605      	mov	r5, r0
 80009a2:	2800      	cmp	r0, #0
 80009a4:	d1f2      	bne.n	800098c <HAL_InitTick+0x58>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009a6:	2036      	movs	r0, #54	; 0x36
 80009a8:	f000 fab6 	bl	8000f18 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	2c0f      	cmp	r4, #15
 80009ae:	d901      	bls.n	80009b4 <HAL_InitTick+0x80>
        status = HAL_ERROR;
 80009b0:	2501      	movs	r5, #1
 80009b2:	e7eb      	b.n	800098c <HAL_InitTick+0x58>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009b4:	2200      	movs	r2, #0
 80009b6:	4621      	mov	r1, r4
 80009b8:	2036      	movs	r0, #54	; 0x36
 80009ba:	f000 fa77 	bl	8000eac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_InitTick+0xa0>)
 80009c0:	601c      	str	r4, [r3, #0]
 80009c2:	e7e3      	b.n	800098c <HAL_InitTick+0x58>
 80009c4:	40023800 	.word	0x40023800
 80009c8:	20000600 	.word	0x20000600
 80009cc:	40001000 	.word	0x40001000
 80009d0:	431bde83 	.word	0x431bde83
 80009d4:	20000008 	.word	0x20000008

080009d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler>

080009da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler>

080009dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler>

080009de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler>

080009e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <UsageFault_Handler>

080009e2 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	4770      	bx	lr

080009e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009e6:	4802      	ldr	r0, [pc, #8]	; (80009f0 <TIM6_DAC_IRQHandler+0xc>)
 80009e8:	f001 fe9c 	bl	8002724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009ec:	bd08      	pop	{r3, pc}
 80009ee:	bf00      	nop
 80009f0:	20000600 	.word	0x20000600

080009f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80009f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80009f6:	4802      	ldr	r0, [pc, #8]	; (8000a00 <ETH_IRQHandler+0xc>)
 80009f8:	f000 ff9e 	bl	8001938 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80009fc:	bd08      	pop	{r3, pc}
 80009fe:	bf00      	nop
 8000a00:	2000099c 	.word	0x2000099c

08000a04 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8000a04:	2001      	movs	r0, #1
 8000a06:	4770      	bx	lr

08000a08 <_kill>:

int _kill(int pid, int sig)
{
	errno = EINVAL;
 8000a08:	4b02      	ldr	r3, [pc, #8]	; (8000a14 <_kill+0xc>)
 8000a0a:	2216      	movs	r2, #22
 8000a0c:	601a      	str	r2, [r3, #0]
	return -1;
}
 8000a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a12:	4770      	bx	lr
 8000a14:	20010a7c 	.word	0x20010a7c

08000a18 <_exit>:
	errno = EINVAL;
 8000a18:	4b01      	ldr	r3, [pc, #4]	; (8000a20 <_exit+0x8>)
 8000a1a:	2216      	movs	r2, #22
 8000a1c:	601a      	str	r2, [r3, #0]

void _exit (int status)
{
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8000a1e:	e7fe      	b.n	8000a1e <_exit+0x6>
 8000a20:	20010a7c 	.word	0x20010a7c

08000a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a24:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a26:	1e16      	subs	r6, r2, #0
 8000a28:	dd07      	ble.n	8000a3a <_read+0x16>
 8000a2a:	460c      	mov	r4, r1
 8000a2c:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8000a2e:	f3af 8000 	nop.w
 8000a32:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a36:	42a5      	cmp	r5, r4
 8000a38:	d1f9      	bne.n	8000a2e <_read+0xa>
	}

return len;
}
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	bd70      	pop	{r4, r5, r6, pc}

08000a3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a3e:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	1e16      	subs	r6, r2, #0
 8000a42:	dd07      	ble.n	8000a54 <_write+0x16>
 8000a44:	460c      	mov	r4, r1
 8000a46:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8000a48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000a4c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	d1f9      	bne.n	8000a48 <_write+0xa>
	}
	return len;
}
 8000a54:	4630      	mov	r0, r6
 8000a56:	bd70      	pop	{r4, r5, r6, pc}

08000a58 <_close>:

int _close(int file)
{
	return -1;
}
 8000a58:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5c:	4770      	bx	lr

08000a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000a5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a62:	604b      	str	r3, [r1, #4]
	return 0;
}
 8000a64:	2000      	movs	r0, #0
 8000a66:	4770      	bx	lr

08000a68 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000a68:	2001      	movs	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	4770      	bx	lr

08000a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a70:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a72:	4a0c      	ldr	r2, [pc, #48]	; (8000aa4 <_sbrk+0x34>)
 8000a74:	6812      	ldr	r2, [r2, #0]
 8000a76:	b152      	cbz	r2, 8000a8e <_sbrk+0x1e>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a78:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <_sbrk+0x34>)
 8000a7a:	6810      	ldr	r0, [r2, #0]
 8000a7c:	4403      	add	r3, r0
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <_sbrk+0x38>)
 8000a80:	490a      	ldr	r1, [pc, #40]	; (8000aac <_sbrk+0x3c>)
 8000a82:	1a52      	subs	r2, r2, r1
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d806      	bhi.n	8000a96 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a88:	4a06      	ldr	r2, [pc, #24]	; (8000aa4 <_sbrk+0x34>)
 8000a8a:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000a8c:	4770      	bx	lr
    __sbrk_heap_end = &_end;
 8000a8e:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <_sbrk+0x34>)
 8000a90:	4907      	ldr	r1, [pc, #28]	; (8000ab0 <_sbrk+0x40>)
 8000a92:	6011      	str	r1, [r2, #0]
 8000a94:	e7f0      	b.n	8000a78 <_sbrk+0x8>
    errno = ENOMEM;
 8000a96:	4b07      	ldr	r3, [pc, #28]	; (8000ab4 <_sbrk+0x44>)
 8000a98:	220c      	movs	r2, #12
 8000a9a:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000648 	.word	0x20000648
 8000aa8:	20030000 	.word	0x20030000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20010a80 	.word	0x20010a80
 8000ab4:	20010a7c 	.word	0x20010a7c

08000ab8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <SystemInit+0x10>)
 8000aba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000abe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <tcp_thread>:
char smsg[200];


/**** Send RESPONSE every time the client sends some data ******/
static void tcp_thread(void *arg)
{
 8000acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad0:	b083      	sub	sp, #12
	err_t err, accept_err, recv_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	4611      	mov	r1, r2
 8000ad6:	2010      	movs	r0, #16
 8000ad8:	f005 f9ec 	bl	8005eb4 <netconn_new_with_proto_and_callback>
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <tcp_thread+0xd0>)
 8000ade:	6018      	str	r0, [r3, #0]

	if (conn!=NULL)
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d057      	beq.n	8000b94 <tcp_thread+0xc8>
	{
		/* Bind connection to the port number 7. */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	492e      	ldr	r1, [pc, #184]	; (8000ba0 <tcp_thread+0xd4>)
 8000ae8:	f005 fa62 	bl	8005fb0 <netconn_bind>

		if (err == ERR_OK)
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d14d      	bne.n	8000b8c <tcp_thread+0xc0>
		{
			/* Tell connection to go into listening mode. */
			netconn_listen(conn);
 8000af0:	21ff      	movs	r1, #255	; 0xff
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <tcp_thread+0xd0>)
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	f005 fa83 	bl	8006000 <netconn_listen_with_backlog>

			while (1)
			{
				/* Grab new connection. */
				accept_err = netconn_accept(conn, &newconn);
 8000afa:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8000bb0 <tcp_thread+0xe4>
 8000afe:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8000b9c <tcp_thread+0xd0>

				/* Process the new connection. */
				if (accept_err == ERR_OK)
				{
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b02:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8000bb4 <tcp_thread+0xe8>

					/* receive the data from the client */
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000b06:	4f27      	ldr	r7, [pc, #156]	; (8000ba4 <tcp_thread+0xd8>)

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msg, buf->p->payload, buf->p->len);   // get the message from the client
 8000b08:	4c27      	ldr	r4, [pc, #156]	; (8000ba8 <tcp_thread+0xdc>)
 8000b0a:	e033      	b.n	8000b74 <tcp_thread+0xa8>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	895a      	ldrh	r2, [r3, #10]
 8000b12:	6859      	ldr	r1, [r3, #4]
 8000b14:	4620      	mov	r0, r4
 8000b16:	f00e fb20 	bl	800f15a <strncpy>

							// Or modify the message received, so that we can send it back to the client
							int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
 8000b1a:	4e24      	ldr	r6, [pc, #144]	; (8000bac <tcp_thread+0xe0>)
 8000b1c:	4622      	mov	r2, r4
 8000b1e:	4649      	mov	r1, r9
 8000b20:	4630      	mov	r0, r6
 8000b22:	f00e fab7 	bl	800f094 <siprintf>
 8000b26:	4602      	mov	r2, r0

							netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8000b28:	2500      	movs	r5, #0
 8000b2a:	9500      	str	r5, [sp, #0]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	4631      	mov	r1, r6
 8000b30:	f8d8 0000 	ldr.w	r0, [r8]
 8000b34:	f005 fb16 	bl	8006164 <netconn_write_partly>
							memset (msg, '\0', 100);  // clear the buffer
 8000b38:	2264      	movs	r2, #100	; 0x64
 8000b3a:	4629      	mov	r1, r5
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f00e f93c 	bl	800edba <memset>
						}
						while (netbuf_next(buf) >0);
 8000b42:	6838      	ldr	r0, [r7, #0]
 8000b44:	f006 fd4a 	bl	80075dc <netbuf_next>
 8000b48:	42a8      	cmp	r0, r5
 8000b4a:	dcdf      	bgt.n	8000b0c <tcp_thread+0x40>

						netbuf_delete(buf);
 8000b4c:	6838      	ldr	r0, [r7, #0]
 8000b4e:	f006 fd35 	bl	80075bc <netbuf_delete>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000b52:	4639      	mov	r1, r7
 8000b54:	f8d8 0000 	ldr.w	r0, [r8]
 8000b58:	f005 fc66 	bl	8006428 <netconn_recv>
 8000b5c:	b910      	cbnz	r0, 8000b64 <tcp_thread+0x98>
							int len = sprintf (smsg, "\"%s\" was sent by the Server\n", msg);
 8000b5e:	f8df 9058 	ldr.w	r9, [pc, #88]	; 8000bb8 <tcp_thread+0xec>
 8000b62:	e7d3      	b.n	8000b0c <tcp_thread+0x40>
					}

					/* Close connection and discard connection identifier. */
					netconn_close(newconn);
 8000b64:	f8d8 0000 	ldr.w	r0, [r8]
 8000b68:	f005 fb09 	bl	800617e <netconn_close>
					netconn_delete(newconn);
 8000b6c:	f8d8 0000 	ldr.w	r0, [r8]
 8000b70:	f005 fa0e 	bl	8005f90 <netconn_delete>
				accept_err = netconn_accept(conn, &newconn);
 8000b74:	4641      	mov	r1, r8
 8000b76:	f8da 0000 	ldr.w	r0, [sl]
 8000b7a:	f005 fb15 	bl	80061a8 <netconn_accept>
				if (accept_err == ERR_OK)
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	d1f8      	bne.n	8000b74 <tcp_thread+0xa8>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	4658      	mov	r0, fp
 8000b86:	f001 f987 	bl	8001e98 <HAL_GPIO_TogglePin>
					while (netconn_recv(newconn, &buf) == ERR_OK)
 8000b8a:	e7e2      	b.n	8000b52 <tcp_thread+0x86>
			}
		}
		else
		{
		//	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
			netconn_delete(conn);
 8000b8c:	4b03      	ldr	r3, [pc, #12]	; (8000b9c <tcp_thread+0xd0>)
 8000b8e:	6818      	ldr	r0, [r3, #0]
 8000b90:	f005 f9fe 	bl	8005f90 <netconn_delete>
		}
	}
}
 8000b94:	b003      	add	sp, #12
 8000b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000650 	.word	0x20000650
 8000ba0:	080127e4 	.word	0x080127e4
 8000ba4:	2000064c 	.word	0x2000064c
 8000ba8:	20000654 	.word	0x20000654
 8000bac:	200006bc 	.word	0x200006bc
 8000bb0:	200006b8 	.word	0x200006b8
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	08010138 	.word	0x08010138

08000bbc <tcpserver_init>:


void tcpserver_init(void)
{
 8000bbc:	b500      	push	{lr}
 8000bbe:	b083      	sub	sp, #12
  sys_thread_new("tcp_thread", tcp_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8000bc0:	2318      	movs	r3, #24
 8000bc2:	9300      	str	r3, [sp, #0]
 8000bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc8:	2200      	movs	r2, #0
 8000bca:	4903      	ldr	r1, [pc, #12]	; (8000bd8 <tcpserver_init+0x1c>)
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <tcpserver_init+0x20>)
 8000bce:	f00d ff74 	bl	800eaba <sys_thread_new>
}
 8000bd2:	b003      	add	sp, #12
 8000bd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000bd8:	08000acd 	.word	0x08000acd
 8000bdc:	08010158 	.word	0x08010158

08000be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c18 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000be4:	480d      	ldr	r0, [pc, #52]	; (8000c1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000be6:	490e      	ldr	r1, [pc, #56]	; (8000c20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000be8:	4a0e      	ldr	r2, [pc, #56]	; (8000c24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bfc:	4c0b      	ldr	r4, [pc, #44]	; (8000c2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c0a:	f7ff ff55 	bl	8000ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c0e:	f00e f875 	bl	800ecfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c12:	f7ff fd1d 	bl	8000650 <main>
  bx  lr    
 8000c16:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c18:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c24:	08012b4c 	.word	0x08012b4c
  ldr r2, =_sbss
 8000c28:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c2c:	20010a80 	.word	0x20010a80

08000c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC_IRQHandler>

08000c32 <LAN8742_RegisterBusIO>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c32:	b188      	cbz	r0, 8000c58 <LAN8742_RegisterBusIO+0x26>
 8000c34:	68ca      	ldr	r2, [r1, #12]
 8000c36:	b192      	cbz	r2, 8000c5e <LAN8742_RegisterBusIO+0x2c>
 8000c38:	688a      	ldr	r2, [r1, #8]
 8000c3a:	b19a      	cbz	r2, 8000c64 <LAN8742_RegisterBusIO+0x32>
 8000c3c:	690a      	ldr	r2, [r1, #16]
 8000c3e:	b1a2      	cbz	r2, 8000c6a <LAN8742_RegisterBusIO+0x38>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c40:	680a      	ldr	r2, [r1, #0]
 8000c42:	6082      	str	r2, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c44:	684a      	ldr	r2, [r1, #4]
 8000c46:	60c2      	str	r2, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c48:	68ca      	ldr	r2, [r1, #12]
 8000c4a:	6142      	str	r2, [r0, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c4c:	688a      	ldr	r2, [r1, #8]
 8000c4e:	6102      	str	r2, [r0, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c50:	690a      	ldr	r2, [r1, #16]
 8000c52:	6182      	str	r2, [r0, #24]
  
  return LAN8742_STATUS_OK;
 8000c54:	2000      	movs	r0, #0
 8000c56:	4770      	bx	lr
    return LAN8742_STATUS_ERROR;
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	4770      	bx	lr
 8000c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c62:	4770      	bx	lr
 8000c64:	f04f 30ff 	mov.w	r0, #4294967295
 8000c68:	4770      	bx	lr
 8000c6a:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000c6e:	4770      	bx	lr

08000c70 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	4605      	mov	r5, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	9301      	str	r3, [sp, #4]
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000c7c:	6844      	ldr	r4, [r0, #4]
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d149      	bne.n	8000d16 <LAN8742_Init+0xa6>
   {
     if(pObj->IO.Init != 0)
 8000c82:	6883      	ldr	r3, [r0, #8]
 8000c84:	b103      	cbz	r3, 8000c88 <LAN8742_Init+0x18>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000c86:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000c88:	2320      	movs	r3, #32
 8000c8a:	602b      	str	r3, [r5, #0]
   int32_t status = LAN8742_STATUS_OK;
 8000c8c:	2700      	movs	r7, #0
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c8e:	2612      	movs	r6, #18
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000c90:	f06f 0804 	mvn.w	r8, #4
 8000c94:	e003      	b.n	8000c9e <LAN8742_Init+0x2e>
 8000c96:	4647      	mov	r7, r8
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000c98:	3401      	adds	r4, #1
 8000c9a:	2c20      	cmp	r4, #32
 8000c9c:	d033      	beq.n	8000d06 <LAN8742_Init+0x96>
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000c9e:	696b      	ldr	r3, [r5, #20]
 8000ca0:	aa01      	add	r2, sp, #4
 8000ca2:	4631      	mov	r1, r6
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	4798      	blx	r3
 8000ca8:	2800      	cmp	r0, #0
 8000caa:	dbf4      	blt.n	8000c96 <LAN8742_Init+0x26>
         /* Can't read from this device address 
            continue with next address */
         continue;
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cac:	9b01      	ldr	r3, [sp, #4]
 8000cae:	f003 031f 	and.w	r3, r3, #31
 8000cb2:	42a3      	cmp	r3, r4
 8000cb4:	d1f0      	bne.n	8000c98 <LAN8742_Init+0x28>
       {
         pObj->DevAddr = addr;
 8000cb6:	602c      	str	r4, [r5, #0]
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000cb8:	692b      	ldr	r3, [r5, #16]
 8000cba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	4798      	blx	r3
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	db36      	blt.n	8000d36 <LAN8742_Init+0xc6>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000cc8:	696b      	ldr	r3, [r5, #20]
 8000cca:	aa01      	add	r2, sp, #4
 8000ccc:	2100      	movs	r1, #0
 8000cce:	6828      	ldr	r0, [r5, #0]
 8000cd0:	4798      	blx	r3
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	db32      	blt.n	8000d3c <LAN8742_Init+0xcc>
         { 
           tickstart = pObj->IO.GetTick();
 8000cd6:	69ab      	ldr	r3, [r5, #24]
 8000cd8:	4798      	blx	r3
 8000cda:	4604      	mov	r4, r0
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000cdc:	2600      	movs	r6, #0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000cde:	9b01      	ldr	r3, [sp, #4]
 8000ce0:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8000ce4:	d017      	beq.n	8000d16 <LAN8742_Init+0xa6>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000ce6:	69ab      	ldr	r3, [r5, #24]
 8000ce8:	4798      	blx	r3
 8000cea:	1b00      	subs	r0, r0, r4
 8000cec:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000cf0:	d827      	bhi.n	8000d42 <LAN8742_Init+0xd2>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000cf2:	696b      	ldr	r3, [r5, #20]
 8000cf4:	aa01      	add	r2, sp, #4
 8000cf6:	4631      	mov	r1, r6
 8000cf8:	6828      	ldr	r0, [r5, #0]
 8000cfa:	4798      	blx	r3
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	daee      	bge.n	8000cde <LAN8742_Init+0x6e>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d00:	f06f 0704 	mvn.w	r7, #4
         status = LAN8742_STATUS_WRITE_ERROR;
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d04:	e013      	b.n	8000d2e <LAN8742_Init+0xbe>
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000d06:	682c      	ldr	r4, [r5, #0]
 8000d08:	2c1f      	cmp	r4, #31
 8000d0a:	d902      	bls.n	8000d12 <LAN8742_Init+0xa2>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d0c:	f06f 0702 	mvn.w	r7, #2
 8000d10:	e00d      	b.n	8000d2e <LAN8742_Init+0xbe>
     if(status == LAN8742_STATUS_OK)
 8000d12:	b967      	cbnz	r7, 8000d2e <LAN8742_Init+0xbe>
 8000d14:	e7d0      	b.n	8000cb8 <LAN8742_Init+0x48>
   {
     tickstart =  pObj->IO.GetTick();
 8000d16:	69ab      	ldr	r3, [r5, #24]
 8000d18:	4798      	blx	r3
 8000d1a:	4604      	mov	r4, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000d1c:	69ab      	ldr	r3, [r5, #24]
 8000d1e:	4798      	blx	r3
 8000d20:	1b03      	subs	r3, r0, r4
 8000d22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d26:	d9f9      	bls.n	8000d1c <LAN8742_Init+0xac>
     {
     }
     pObj->Is_Initialized = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	606b      	str	r3, [r5, #4]
 8000d2c:	2700      	movs	r7, #0
   }
   
   return status;
 }
 8000d2e:	4638      	mov	r0, r7
 8000d30:	b002      	add	sp, #8
 8000d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d36:	f06f 0703 	mvn.w	r7, #3
 8000d3a:	e7f8      	b.n	8000d2e <LAN8742_Init+0xbe>
           status = LAN8742_STATUS_READ_ERROR;
 8000d3c:	f06f 0704 	mvn.w	r7, #4
   return status;
 8000d40:	e7f5      	b.n	8000d2e <LAN8742_Init+0xbe>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d42:	f06f 0701 	mvn.w	r7, #1
 8000d46:	e7f2      	b.n	8000d2e <LAN8742_Init+0xbe>

08000d48 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000d48:	b510      	push	{r4, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	4604      	mov	r4, r0
  uint32_t readval = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	9301      	str	r3, [sp, #4]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d52:	6943      	ldr	r3, [r0, #20]
 8000d54:	aa01      	add	r2, sp, #4
 8000d56:	2101      	movs	r1, #1
 8000d58:	6800      	ldr	r0, [r0, #0]
 8000d5a:	4798      	blx	r3
 8000d5c:	2800      	cmp	r0, #0
 8000d5e:	db39      	blt.n	8000dd4 <LAN8742_GetLinkState+0x8c>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000d60:	6963      	ldr	r3, [r4, #20]
 8000d62:	aa01      	add	r2, sp, #4
 8000d64:	2101      	movs	r1, #1
 8000d66:	6820      	ldr	r0, [r4, #0]
 8000d68:	4798      	blx	r3
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	db35      	blt.n	8000dda <LAN8742_GetLinkState+0x92>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000d6e:	9b01      	ldr	r3, [sp, #4]
 8000d70:	f013 0f04 	tst.w	r3, #4
 8000d74:	d034      	beq.n	8000de0 <LAN8742_GetLinkState+0x98>
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000d76:	6963      	ldr	r3, [r4, #20]
 8000d78:	aa01      	add	r2, sp, #4
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	6820      	ldr	r0, [r4, #0]
 8000d7e:	4798      	blx	r3
 8000d80:	2800      	cmp	r0, #0
 8000d82:	db30      	blt.n	8000de6 <LAN8742_GetLinkState+0x9e>
  {
    return LAN8742_STATUS_READ_ERROR;
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000d84:	9b01      	ldr	r3, [sp, #4]
 8000d86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000d8a:	d10d      	bne.n	8000da8 <LAN8742_GetLinkState+0x60>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000d8c:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000d90:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000d94:	d02a      	beq.n	8000dec <LAN8742_GetLinkState+0xa4>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000d96:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000d9a:	d129      	bne.n	8000df0 <LAN8742_GetLinkState+0xa8>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000d9c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000da0:	bf14      	ite	ne
 8000da2:	2004      	movne	r0, #4
 8000da4:	2005      	moveq	r0, #5
 8000da6:	e01c      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000da8:	6963      	ldr	r3, [r4, #20]
 8000daa:	aa01      	add	r2, sp, #4
 8000dac:	211f      	movs	r1, #31
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	4798      	blx	r3
 8000db2:	2800      	cmp	r0, #0
 8000db4:	db1e      	blt.n	8000df4 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_READ_ERROR;
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000db6:	9b01      	ldr	r3, [sp, #4]
 8000db8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8000dbc:	d01d      	beq.n	8000dfa <LAN8742_GetLinkState+0xb2>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000dbe:	f003 031c 	and.w	r3, r3, #28
 8000dc2:	2b18      	cmp	r3, #24
 8000dc4:	d01b      	beq.n	8000dfe <LAN8742_GetLinkState+0xb6>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000dc6:	2b08      	cmp	r3, #8
 8000dc8:	d01b      	beq.n	8000e02 <LAN8742_GetLinkState+0xba>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000dca:	2b14      	cmp	r3, #20
 8000dcc:	bf0c      	ite	eq
 8000dce:	2004      	moveq	r0, #4
 8000dd0:	2005      	movne	r0, #5
 8000dd2:	e006      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000dd4:	f06f 0004 	mvn.w	r0, #4
 8000dd8:	e003      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_READ_ERROR;
 8000dda:	f06f 0004 	mvn.w	r0, #4
 8000dde:	e000      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000de0:	2001      	movs	r0, #1
    }				
  }
}
 8000de2:	b002      	add	sp, #8
 8000de4:	bd10      	pop	{r4, pc}
    return LAN8742_STATUS_READ_ERROR;
 8000de6:	f06f 0004 	mvn.w	r0, #4
 8000dea:	e7fa      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dec:	2002      	movs	r0, #2
 8000dee:	e7f8      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000df0:	2003      	movs	r0, #3
 8000df2:	e7f6      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_READ_ERROR;
 8000df4:	f06f 0004 	mvn.w	r0, #4
 8000df8:	e7f3      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000dfa:	2006      	movs	r0, #6
 8000dfc:	e7f1      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000dfe:	2002      	movs	r0, #2
 8000e00:	e7ef      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e02:	2003      	movs	r0, #3
 8000e04:	e7ed      	b.n	8000de2 <LAN8742_GetLinkState+0x9a>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0a:	4b0b      	ldr	r3, [pc, #44]	; (8000e38 <HAL_Init+0x30>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e12:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e1a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e22:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f82f 	bl	8000e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fd82 	bl	8000934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fce2 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000e34:	2000      	movs	r0, #0
 8000e36:	bd08      	pop	{r3, pc}
 8000e38:	40023c00 	.word	0x40023c00

08000e3c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e3c:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x10>)
 8000e3e:	6811      	ldr	r1, [r2, #0]
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_IncTick+0x14>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	440b      	add	r3, r1
 8000e46:	6013      	str	r3, [r2, #0]
}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000784 	.word	0x20000784
 8000e50:	20000004 	.word	0x20000004

08000e54 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e54:	4b01      	ldr	r3, [pc, #4]	; (8000e5c <HAL_GetTick+0x8>)
 8000e56:	6818      	ldr	r0, [r3, #0]
}
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000784 	.word	0x20000784

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000e64:	f7ff fff6 	bl	8000e54 <HAL_GetTick>
 8000e68:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e6a:	f1b4 3fff 	cmp.w	r4, #4294967295
 8000e6e:	d002      	beq.n	8000e76 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_Delay+0x24>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e76:	f7ff ffed 	bl	8000e54 <HAL_GetTick>
 8000e7a:	1b40      	subs	r0, r0, r5
 8000e7c:	42a0      	cmp	r0, r4
 8000e7e:	d3fa      	bcc.n	8000e76 <HAL_Delay+0x16>
  {
  }
}
 8000e80:	bd38      	pop	{r3, r4, r5, pc}
 8000e82:	bf00      	nop
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4907      	ldr	r1, [pc, #28]	; (8000ea8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000e8a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	0203      	lsls	r3, r0, #8
 8000e8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000e96:	0412      	lsls	r2, r2, #16
 8000e98:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ea4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_NVIC_SetPriority+0x64>)
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb6:	f1c3 0c07 	rsb	ip, r3, #7
 8000eba:	f1bc 0f04 	cmp.w	ip, #4
 8000ebe:	bf28      	it	cs
 8000ec0:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec4:	f103 0e04 	add.w	lr, r3, #4
 8000ec8:	f1be 0f06 	cmp.w	lr, #6
 8000ecc:	bf8c      	ite	hi
 8000ece:	3b03      	subhi	r3, #3
 8000ed0:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed2:	f04f 3eff 	mov.w	lr, #4294967295
 8000ed6:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000eda:	ea21 010c 	bic.w	r1, r1, ip
 8000ede:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee0:	fa0e f303 	lsl.w	r3, lr, r3
 8000ee4:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000eea:	2800      	cmp	r0, #0
 8000eec:	db09      	blt.n	8000f02 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	0109      	lsls	r1, r1, #4
 8000ef0:	b2c9      	uxtb	r1, r1
 8000ef2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000ef6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000efa:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000efe:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f02:	f000 000f 	and.w	r0, r0, #15
 8000f06:	0109      	lsls	r1, r1, #4
 8000f08:	b2c9      	uxtb	r1, r1
 8000f0a:	4b02      	ldr	r3, [pc, #8]	; (8000f14 <HAL_NVIC_SetPriority+0x68>)
 8000f0c:	5419      	strb	r1, [r3, r0]
 8000f0e:	e7f6      	b.n	8000efe <HAL_NVIC_SetPriority+0x52>
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	e000ed14 	.word	0xe000ed14

08000f18 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	db08      	blt.n	8000f2e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1c:	0942      	lsrs	r2, r0, #5
 8000f1e:	f000 001f 	and.w	r0, r0, #31
 8000f22:	2301      	movs	r3, #1
 8000f24:	fa03 f000 	lsl.w	r0, r3, r0
 8000f28:	4b01      	ldr	r3, [pc, #4]	; (8000f30 <HAL_NVIC_EnableIRQ+0x18>)
 8000f2a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f2e:	4770      	bx	lr
 8000f30:	e000e100 	.word	0xe000e100

08000f34 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8000f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f38:	b083      	sub	sp, #12
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	9301      	str	r3, [sp, #4]
  uint8_t allocStatus = 1U;

  descidx = heth->RxDescList.RxBuildDescIdx;
 8000f3e:	6e87      	ldr	r7, [r0, #104]	; 0x68
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000f40:	f107 0312 	add.w	r3, r7, #18
 8000f44:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8000f48:	6ec5      	ldr	r5, [r0, #108]	; 0x6c

  while ((desccount > 0U) && (allocStatus != 0U))
 8000f4a:	2d00      	cmp	r5, #0
 8000f4c:	d035      	beq.n	8000fba <ETH_UpdateDescriptor+0x86>
 8000f4e:	4606      	mov	r6, r0
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f50:	f244 59f8 	movw	r9, #17912	; 0x45f8
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f54:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8000fc0 <ETH_UpdateDescriptor+0x8c>
 8000f58:	e01a      	b.n	8000f90 <ETH_UpdateDescriptor+0x5c>
      HAL_ETH_RxAllocateCallback(&buff);
 8000f5a:	a801      	add	r0, sp, #4
 8000f5c:	f002 fb3e 	bl	80035dc <HAL_ETH_RxAllocateCallback>
      if (buff == NULL)
 8000f60:	9b01      	ldr	r3, [sp, #4]
 8000f62:	b1f3      	cbz	r3, 8000fa2 <ETH_UpdateDescriptor+0x6e>
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8000f64:	6223      	str	r3, [r4, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8000f66:	60a3      	str	r3, [r4, #8]
 8000f68:	e015      	b.n	8000f96 <ETH_UpdateDescriptor+0x62>
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f6a:	f8c4 9004 	str.w	r9, [r4, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f6e:	f3bf 8f5f 	dmb	sy
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f78:	6023      	str	r3, [r4, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000f7a:	1c7b      	adds	r3, r7, #1
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	bf8c      	ite	hi
 8000f80:	3f03      	subhi	r7, #3
 8000f82:	461f      	movls	r7, r3
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8000f84:	f107 0312 	add.w	r3, r7, #18
 8000f88:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
  while ((desccount > 0U) && (allocStatus != 0U))
 8000f8c:	3d01      	subs	r5, #1
 8000f8e:	d009      	beq.n	8000fa4 <ETH_UpdateDescriptor+0x70>
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8000f90:	6a23      	ldr	r3, [r4, #32]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0e1      	beq.n	8000f5a <ETH_UpdateDescriptor+0x26>
      if (heth->RxDescList.ItMode == 0U)
 8000f96:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e6      	bne.n	8000f6a <ETH_UpdateDescriptor+0x36>
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8000f9c:	f8c4 8004 	str.w	r8, [r4, #4]
 8000fa0:	e7e5      	b.n	8000f6e <ETH_UpdateDescriptor+0x3a>
  while ((desccount > 0U) && (allocStatus != 0U))
 8000fa2:	b905      	cbnz	r5, 8000fa6 <ETH_UpdateDescriptor+0x72>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8000fa4:	2500      	movs	r5, #0
      desccount--;
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8000fa6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 8000fa8:	42ab      	cmp	r3, r5
 8000faa:	d006      	beq.n	8000fba <ETH_UpdateDescriptor+0x86>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8000fac:	6833      	ldr	r3, [r6, #0]
 8000fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8000fb6:	66b7      	str	r7, [r6, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8000fb8:	66f5      	str	r5, [r6, #108]	; 0x6c
  }
}
 8000fba:	b003      	add	sp, #12
 8000fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fc0:	800045f8 	.word	0x800045f8

08000fc4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8000fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8000fc8:	6a87      	ldr	r7, [r0, #40]	; 0x28
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t idx;
  uint32_t descnbr = 0;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8000fca:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 8000fce:	f8dc 3018 	ldr.w	r3, [ip, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8000fd2:	681c      	ldr	r4, [r3, #0]
 8000fd4:	2c00      	cmp	r4, #0
 8000fd6:	f2c0 80ad 	blt.w	8001134 <ETH_Prepare_Tx_Descriptors+0x170>
 8000fda:	4690      	mov	r8, r2
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8000fdc:	f8dc 402c 	ldr.w	r4, [ip, #44]	; 0x2c
 8000fe0:	2c00      	cmp	r4, #0
 8000fe2:	f040 80a9 	bne.w	8001138 <ETH_Prepare_Tx_Descriptors+0x174>
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8000fe6:	688c      	ldr	r4, [r1, #8]


  descnbr += 1U;

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8000fe8:	6825      	ldr	r5, [r4, #0]
 8000fea:	609d      	str	r5, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8000fec:	685e      	ldr	r6, [r3, #4]
 8000fee:	f426 56ff 	bic.w	r6, r6, #8160	; 0x1fe0
 8000ff2:	f026 061f 	bic.w	r6, r6, #31
 8000ff6:	6865      	ldr	r5, [r4, #4]
 8000ff8:	4335      	orrs	r5, r6
 8000ffa:	605d      	str	r5, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8000ffc:	680d      	ldr	r5, [r1, #0]
 8000ffe:	f015 0f01 	tst.w	r5, #1
 8001002:	d005      	beq.n	8001010 <ETH_Prepare_Tx_Descriptors+0x4c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8001004:	681e      	ldr	r6, [r3, #0]
 8001006:	f426 0640 	bic.w	r6, r6, #12582912	; 0xc00000
 800100a:	694d      	ldr	r5, [r1, #20]
 800100c:	4335      	orrs	r5, r6
 800100e:	601d      	str	r5, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001010:	680d      	ldr	r5, [r1, #0]
 8001012:	f015 0f20 	tst.w	r5, #32
 8001016:	d005      	beq.n	8001024 <ETH_Prepare_Tx_Descriptors+0x60>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8001018:	681e      	ldr	r6, [r3, #0]
 800101a:	f026 6640 	bic.w	r6, r6, #201326592	; 0xc000000
 800101e:	690d      	ldr	r5, [r1, #16]
 8001020:	4335      	orrs	r5, r6
 8001022:	601d      	str	r5, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001024:	6809      	ldr	r1, [r1, #0]
 8001026:	f011 0f04 	tst.w	r1, #4
 800102a:	d003      	beq.n	8001034 <ETH_Prepare_Tx_Descriptors+0x70>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8001032:	6019      	str	r1, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8001034:	6819      	ldr	r1, [r3, #0]
 8001036:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800103a:	6019      	str	r1, [r3, #0]
 800103c:	f3bf 8f5f 	dmb	sy

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001046:	6019      	str	r1, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8001048:	68a1      	ldr	r1, [r4, #8]
 800104a:	2900      	cmp	r1, #0
 800104c:	d053      	beq.n	80010f6 <ETH_Prepare_Tx_Descriptors+0x132>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800104e:	463d      	mov	r5, r7
  while (txbuffer->next != NULL)
 8001050:	2601      	movs	r6, #1
 8001052:	e02c      	b.n	80010ae <ETH_Prepare_Tx_Descriptors+0xea>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001054:	6819      	ldr	r1, [r3, #0]
 8001056:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
 800105a:	6019      	str	r1, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800105c:	1c6b      	adds	r3, r5, #1
 800105e:	2b03      	cmp	r3, #3
 8001060:	bf8c      	ite	hi
 8001062:	3d03      	subhi	r5, #3
 8001064:	461d      	movls	r5, r3
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001066:	eb00 0e85 	add.w	lr, r0, r5, lsl #2
 800106a:	f8de 3018 	ldr.w	r3, [lr, #24]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001074:	6019      	str	r1, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8001076:	6819      	ldr	r1, [r3, #0]
 8001078:	2900      	cmp	r1, #0
 800107a:	db24      	blt.n	80010c6 <ETH_Prepare_Tx_Descriptors+0x102>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800107c:	f8de 102c 	ldr.w	r1, [lr, #44]	; 0x2c
 8001080:	bb09      	cbnz	r1, 80010c6 <ETH_Prepare_Tx_Descriptors+0x102>
    }

    descnbr += 1U;

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8001082:	68a4      	ldr	r4, [r4, #8]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8001084:	6821      	ldr	r1, [r4, #0]
 8001086:	6099      	str	r1, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8001088:	6859      	ldr	r1, [r3, #4]
 800108a:	f421 51ff 	bic.w	r1, r1, #8160	; 0x1fe0
 800108e:	f021 011f 	bic.w	r1, r1, #31
 8001092:	6862      	ldr	r2, [r4, #4]
 8001094:	4311      	orrs	r1, r2
 8001096:	6059      	str	r1, [r3, #4]
 8001098:	f3bf 8f5f 	dmb	sy
    bd_count += 1U;

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800109c:	6819      	ldr	r1, [r3, #0]
 800109e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80010a2:	6019      	str	r1, [r3, #0]
  while (txbuffer->next != NULL)
 80010a4:	f106 0e01 	add.w	lr, r6, #1
 80010a8:	68a1      	ldr	r1, [r4, #8]
 80010aa:	b331      	cbz	r1, 80010fa <ETH_Prepare_Tx_Descriptors+0x136>
 80010ac:	4676      	mov	r6, lr
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
 80010b4:	6019      	str	r1, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80010b6:	f1b8 0f00 	cmp.w	r8, #0
 80010ba:	d0cb      	beq.n	8001054 <ETH_Prepare_Tx_Descriptors+0x90>
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80010bc:	6819      	ldr	r1, [r3, #0]
 80010be:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80010c2:	6019      	str	r1, [r3, #0]
 80010c4:	e7ca      	b.n	800105c <ETH_Prepare_Tx_Descriptors+0x98>
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010c6:	f8dc 2018 	ldr.w	r2, [ip, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d037      	beq.n	800113e <ETH_Prepare_Tx_Descriptors+0x17a>
 80010ce:	2100      	movs	r1, #0
 80010d0:	f3bf 8f5f 	dmb	sy
        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80010d4:	6813      	ldr	r3, [r2, #0]
 80010d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80010da:	6013      	str	r3, [r2, #0]
        INCR_TX_DESC_INDEX(descidx, 1U);
 80010dc:	1c7b      	adds	r3, r7, #1
 80010de:	2b03      	cmp	r3, #3
 80010e0:	bf8c      	ite	hi
 80010e2:	3f03      	subhi	r7, #3
 80010e4:	461f      	movls	r7, r3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80010e6:	eb00 0387 	add.w	r3, r0, r7, lsl #2
 80010ea:	699a      	ldr	r2, [r3, #24]
      for (idx = 0; idx < descnbr; idx ++)
 80010ec:	3101      	adds	r1, #1
 80010ee:	428e      	cmp	r6, r1
 80010f0:	d1ee      	bne.n	80010d0 <ETH_Prepare_Tx_Descriptors+0x10c>
      return HAL_ETH_ERROR_BUSY;
 80010f2:	2002      	movs	r0, #2
 80010f4:	e021      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80010f6:	463d      	mov	r5, r7
  uint32_t           bd_count = 0;
 80010f8:	2600      	movs	r6, #0
  }

  if (ItMode != ((uint32_t)RESET))
 80010fa:	f1b8 0f00 	cmp.w	r8, #0
 80010fe:	d014      	beq.n	800112a <ETH_Prepare_Tx_Descriptors+0x166>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001106:	601a      	str	r2, [r3, #0]
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800110e:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8001110:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8001114:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c

  dmatxdesclist->CurTxDesc = descidx;
 8001118:	6285      	str	r5, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 800111a:	b672      	cpsid	i

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800111c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800111e:	3301      	adds	r3, #1
 8001120:	441e      	add	r6, r3
 8001122:	6406      	str	r6, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001124:	b662      	cpsie	i
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8001126:	2000      	movs	r0, #0
 8001128:	e007      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e7e9      	b.n	8001108 <ETH_Prepare_Tx_Descriptors+0x144>
    return HAL_ETH_ERROR_BUSY;
 8001134:	2002      	movs	r0, #2
 8001136:	e000      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
 8001138:	2002      	movs	r0, #2
}
 800113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ETH_ERROR_BUSY;
 800113e:	2002      	movs	r0, #2
 8001140:	e7fb      	b.n	800113a <ETH_Prepare_Tx_Descriptors+0x176>
	...

08001144 <ETH_SetMACConfig>:
{
 8001144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	4605      	mov	r5, r0
 800114a:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->MACCR;
 800114c:	6801      	ldr	r1, [r0, #0]
 800114e:	680b      	ldr	r3, [r1, #0]
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001150:	4e3b      	ldr	r6, [pc, #236]	; (8001240 <ETH_SetMACConfig+0xfc>)
 8001152:	401e      	ands	r6, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001154:	7c23      	ldrb	r3, [r4, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	bf0c      	ite	eq
 800115a:	f44f 0e00 	moveq.w	lr, #8388608	; 0x800000
 800115e:	f04f 0e00 	movne.w	lr, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001162:	7c63      	ldrb	r3, [r4, #17]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf0c      	ite	eq
 8001168:	f44f 0c80 	moveq.w	ip, #4194304	; 0x400000
 800116c:	f04f 0c00 	movne.w	ip, #0
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001170:	f894 801f 	ldrb.w	r8, [r4, #31]
 8001174:	68a3      	ldr	r3, [r4, #8]
 8001176:	6962      	ldr	r2, [r4, #20]
 8001178:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800117a:	7fa2      	ldrb	r2, [r4, #30]
 800117c:	2a00      	cmp	r2, #0
 800117e:	bf0c      	ite	eq
 8001180:	f44f 5000 	moveq.w	r0, #8192	; 0x2000
 8001184:	2000      	movne	r0, #0
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001186:	f894 901c 	ldrb.w	r9, [r4, #28]
 800118a:	69a2      	ldr	r2, [r4, #24]
 800118c:	4313      	orrs	r3, r2
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800118e:	7927      	ldrb	r7, [r4, #4]
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001190:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001194:	2a00      	cmp	r2, #0
 8001196:	bf0c      	ite	eq
 8001198:	f44f 7a00 	moveq.w	sl, #512	; 0x200
 800119c:	f04f 0a00 	movne.w	sl, #0
 80011a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011a2:	4313      	orrs	r3, r2
 80011a4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80011a8:	ea43 3309 	orr.w	r3, r3, r9, lsl #12
 80011ac:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011b0:	7be7      	ldrb	r7, [r4, #15]
 80011b2:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011b6:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 80011ba:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
 80011be:	4333      	orrs	r3, r6
 80011c0:	ea43 030e 	orr.w	r3, r3, lr
 80011c4:	ea43 030c 	orr.w	r3, r3, ip
 80011c8:	4303      	orrs	r3, r0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011ca:	ea43 030a 	orr.w	r3, r3, sl
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80011ce:	600b      	str	r3, [r1, #0]
  tmpreg1 = (heth->Instance)->MACCR;
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	681e      	ldr	r6, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80011d4:	2001      	movs	r0, #1
 80011d6:	f7ff fe43 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80011da:	682b      	ldr	r3, [r5, #0]
 80011dc:	601e      	str	r6, [r3, #0]
  tmpreg1 = (heth->Instance)->MACFCR;
 80011de:	6828      	ldr	r0, [r5, #0]
 80011e0:	6981      	ldr	r1, [r0, #24]
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80011e2:	f021 01be 	bic.w	r1, r1, #190	; 0xbe
 80011e6:	0409      	lsls	r1, r1, #16
 80011e8:	0c09      	lsrs	r1, r1, #16
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80011ea:	6ca6      	ldr	r6, [r4, #72]	; 0x48
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80011ec:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bf0c      	ite	eq
 80011f4:	2380      	moveq	r3, #128	; 0x80
 80011f6:	2300      	movne	r3, #0
 80011f8:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80011fa:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80011fe:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001200:	f894 1055 	ldrb.w	r1, [r4, #85]	; 0x55
 8001204:	2901      	cmp	r1, #1
 8001206:	bf0c      	ite	eq
 8001208:	2108      	moveq	r1, #8
 800120a:	2100      	movne	r1, #0
 800120c:	431a      	orrs	r2, r3
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800120e:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8001212:	2b01      	cmp	r3, #1
 8001214:	bf0c      	ite	eq
 8001216:	2304      	moveq	r3, #4
 8001218:	2300      	movne	r3, #0
 800121a:	430a      	orrs	r2, r1
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800121c:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
 8001220:	2901      	cmp	r1, #1
 8001222:	bf0c      	ite	eq
 8001224:	2102      	moveq	r1, #2
 8001226:	2100      	movne	r1, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001228:	4313      	orrs	r3, r2
 800122a:	430b      	orrs	r3, r1
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800122c:	6183      	str	r3, [r0, #24]
  tmpreg1 = (heth->Instance)->MACFCR;
 800122e:	682b      	ldr	r3, [r5, #0]
 8001230:	699c      	ldr	r4, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001232:	2001      	movs	r0, #1
 8001234:	f7ff fe14 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001238:	682b      	ldr	r3, [r5, #0]
 800123a:	619c      	str	r4, [r3, #24]
}
 800123c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001240:	ff20810f 	.word	0xff20810f

08001244 <ETH_SetDMAConfig>:
{
 8001244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001246:	4605      	mov	r5, r0
 8001248:	460c      	mov	r4, r1
  tmpreg1 = (heth->Instance)->DMAOMR;
 800124a:	6802      	ldr	r2, [r0, #0]
 800124c:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 8001250:	699b      	ldr	r3, [r3, #24]
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001252:	482c      	ldr	r0, [pc, #176]	; (8001304 <ETH_SetDMAConfig+0xc0>)
 8001254:	4018      	ands	r0, r3
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001256:	7b0b      	ldrb	r3, [r1, #12]
 8001258:	2b00      	cmp	r3, #0
 800125a:	bf0c      	ite	eq
 800125c:	f04f 6680 	moveq.w	r6, #67108864	; 0x4000000
 8001260:	2600      	movne	r6, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001262:	f891 c00d 	ldrb.w	ip, [r1, #13]
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001266:	7f4b      	ldrb	r3, [r1, #29]
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	f44f 1180 	moveq.w	r1, #1048576	; 0x100000
 8001270:	2100      	movne	r1, #0
 8001272:	6963      	ldr	r3, [r4, #20]
 8001274:	6a27      	ldr	r7, [r4, #32]
 8001276:	433b      	orrs	r3, r7
 8001278:	ea43 634c 	orr.w	r3, r3, ip, lsl #25
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800127c:	f894 c00e 	ldrb.w	ip, [r4, #14]
 8001280:	ea43 534c 	orr.w	r3, r3, ip, lsl #21
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001284:	f894 c01c 	ldrb.w	ip, [r4, #28]
 8001288:	ea43 13cc 	orr.w	r3, r3, ip, lsl #7
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800128c:	f894 c01e 	ldrb.w	ip, [r4, #30]
 8001290:	ea43 138c 	orr.w	r3, r3, ip, lsl #6
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001294:	f894 c024 	ldrb.w	ip, [r4, #36]	; 0x24
 8001298:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 800129c:	4303      	orrs	r3, r0
 800129e:	4333      	orrs	r3, r6
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012a0:	430b      	orrs	r3, r1
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80012a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012a6:	6193      	str	r3, [r2, #24]
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012ae:	699e      	ldr	r6, [r3, #24]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff fdd5 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012bc:	619e      	str	r6, [r3, #24]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012be:	682a      	ldr	r2, [r5, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012c0:	68a3      	ldr	r3, [r4, #8]
 80012c2:	69a1      	ldr	r1, [r4, #24]
 80012c4:	430b      	orrs	r3, r1
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80012c6:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012ca:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
 80012ce:	6921      	ldr	r1, [r4, #16]
 80012d0:	430b      	orrs	r3, r1
 80012d2:	6821      	ldr	r1, [r4, #0]
 80012d4:	430b      	orrs	r3, r1
 80012d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80012d8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012dc:	7921      	ldrb	r1, [r4, #4]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80012de:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80012e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80012ea:	6013      	str	r3, [r2, #0]
  tmpreg1 = (heth->Instance)->DMABMR;
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f2:	681c      	ldr	r4, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f4:	2001      	movs	r0, #1
 80012f6:	f7ff fdb3 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80012fa:	682b      	ldr	r3, [r5, #0]
 80012fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001300:	601c      	str	r4, [r3, #0]
}
 8001302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001304:	f8de3f23 	.word	0xf8de3f23

08001308 <ETH_FlushTransmitFIFO>:
{
 8001308:	b510      	push	{r4, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001312:	6803      	ldr	r3, [r0, #0]
 8001314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800131e:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 8001320:	6803      	ldr	r3, [r0, #0]
 8001322:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800132a:	2001      	movs	r0, #1
 800132c:	f7ff fd98 	bl	8000e60 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	9a01      	ldr	r2, [sp, #4]
 8001334:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001338:	619a      	str	r2, [r3, #24]
}
 800133a:	b002      	add	sp, #8
 800133c:	bd10      	pop	{r4, pc}
	...

08001340 <HAL_ETH_Init>:
  if (heth == NULL)
 8001340:	2800      	cmp	r0, #0
 8001342:	f000 8109 	beq.w	8001558 <HAL_ETH_Init+0x218>
{
 8001346:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001348:	b0a7      	sub	sp, #156	; 0x9c
 800134a:	4605      	mov	r5, r0
  if (heth->gState == HAL_ETH_STATE_RESET)
 800134c:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001350:	2b00      	cmp	r3, #0
 8001352:	d034      	beq.n	80013be <HAL_ETH_Init+0x7e>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	2300      	movs	r3, #0
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b80      	ldr	r3, [pc, #512]	; (800155c <HAL_ETH_Init+0x21c>)
 800135a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800135c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
 8001362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001364:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001368:	9301      	str	r3, [sp, #4]
 800136a:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_ETH_Init+0x220>)
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001374:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	68a9      	ldr	r1, [r5, #8]
 800137a:	430a      	orrs	r2, r1
 800137c:	605a      	str	r2, [r3, #4]
  (void)SYSCFG->PMC;
 800137e:	685b      	ldr	r3, [r3, #4]
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	f042 0201 	orr.w	r2, r2, #1
 800138c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800138e:	f7ff fd61 	bl	8000e54 <HAL_GetTick>
 8001392:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001394:	682b      	ldr	r3, [r5, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139a:	681c      	ldr	r4, [r3, #0]
 800139c:	f014 0401 	ands.w	r4, r4, #1
 80013a0:	d013      	beq.n	80013ca <HAL_ETH_Init+0x8a>
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013a2:	f7ff fd57 	bl	8000e54 <HAL_GetTick>
 80013a6:	1b80      	subs	r0, r0, r6
 80013a8:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 80013ac:	d9f2      	bls.n	8001394 <HAL_ETH_Init+0x54>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013ae:	2304      	movs	r3, #4
 80013b0:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      heth->gState = HAL_ETH_STATE_ERROR;
 80013b4:	23e0      	movs	r3, #224	; 0xe0
 80013b6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
      return HAL_ERROR;
 80013ba:	2001      	movs	r0, #1
 80013bc:	e0ca      	b.n	8001554 <HAL_ETH_Init+0x214>
    heth->gState = HAL_ETH_STATE_BUSY;
 80013be:	2323      	movs	r3, #35	; 0x23
 80013c0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    HAL_ETH_MspInit(heth);
 80013c4:	f002 f810 	bl	80033e8 <HAL_ETH_MspInit>
 80013c8:	e7c4      	b.n	8001354 <HAL_ETH_Init+0x14>
  macDefaultConf.Watchdog = ENABLE;
 80013ca:	2701      	movs	r7, #1
 80013cc:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80013d0:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013d4:	2600      	movs	r6, #0
 80013d6:	960f      	str	r6, [sp, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013d8:	f88d 6053 	strb.w	r6, [sp, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013dc:	f88d 7052 	strb.w	r7, [sp, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013e0:	f88d 6050 	strb.w	r6, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80013e4:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80013e8:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80013ec:	f88d 6043 	strb.w	r6, [sp, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80013f0:	9616      	str	r6, [sp, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80013f2:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80013f6:	961f      	str	r6, [sp, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80013f8:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80013fc:	9621      	str	r6, [sp, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80013fe:	f88d 608a 	strb.w	r6, [sp, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001402:	f88d 6088 	strb.w	r6, [sp, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800140a:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001410:	9313      	str	r3, [sp, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001412:	f88d 6089 	strb.w	r6, [sp, #137]	; 0x89
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001416:	a90d      	add	r1, sp, #52	; 0x34
 8001418:	4628      	mov	r0, r5
 800141a:	f7ff fe93 	bl	8001144 <ETH_SetMACConfig>
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800141e:	f88d 7014 	strb.w	r7, [sp, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001422:	f88d 7015 	strb.w	r7, [sp, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001426:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800142a:	f88d 7016 	strb.w	r7, [sp, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800142e:	9607      	str	r6, [sp, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001430:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001434:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001438:	960a      	str	r6, [sp, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800143a:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800143e:	f88d 700c 	strb.w	r7, [sp, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001442:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001446:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144c:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800144e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001452:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001454:	f88d 702d 	strb.w	r7, [sp, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001458:	960c      	str	r6, [sp, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800145a:	9602      	str	r6, [sp, #8]
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800145c:	a902      	add	r1, sp, #8
 800145e:	4628      	mov	r0, r5
 8001460:	f7ff fef0 	bl	8001244 <ETH_SetDMAConfig>
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001464:	f105 0c18 	add.w	ip, r5, #24
 8001468:	4623      	mov	r3, r4
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800146a:	4630      	mov	r0, r6
 800146c:	e00a      	b.n	8001484 <HAL_ETH_Init+0x144>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800146e:	f103 0e28 	add.w	lr, r3, #40	; 0x28
 8001472:	68ee      	ldr	r6, [r5, #12]
 8001474:	4476      	add	r6, lr
 8001476:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001478:	58d1      	ldr	r1, [r2, r3]
 800147a:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 800147e:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001480:	3328      	adds	r3, #40	; 0x28
 8001482:	3701      	adds	r7, #1
    dmatxdesc = heth->Init.TxDesc + i;
 8001484:	68ea      	ldr	r2, [r5, #12]
 8001486:	18d1      	adds	r1, r2, r3
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001488:	50d0      	str	r0, [r2, r3]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800148a:	6048      	str	r0, [r1, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800148c:	6088      	str	r0, [r1, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800148e:	60c8      	str	r0, [r1, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001490:	f84c 1b04 	str.w	r1, [ip], #4
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001494:	58d6      	ldr	r6, [r2, r3]
 8001496:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800149a:	50d6      	str	r6, [r2, r3]
    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800149c:	1e7e      	subs	r6, r7, #1
 800149e:	2e02      	cmp	r6, #2
 80014a0:	d9e5      	bls.n	800146e <HAL_ETH_Init+0x12e>
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80014a2:	68ee      	ldr	r6, [r5, #12]
 80014a4:	60ce      	str	r6, [r1, #12]
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80014a6:	58d1      	ldr	r1, [r2, r3]
 80014a8:	f441 0140 	orr.w	r1, r1, #12582912	; 0xc00000
 80014ac:	50d1      	str	r1, [r2, r3]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80014ae:	2f03      	cmp	r7, #3
 80014b0:	d9e6      	bls.n	8001480 <HAL_ETH_Init+0x140>
  heth->TxDescList.CurTxDesc = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62ab      	str	r3, [r5, #40]	; 0x28
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	68ea      	ldr	r2, [r5, #12]
 80014ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014be:	611a      	str	r2, [r3, #16]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014c0:	f105 0648 	add.w	r6, r5, #72	; 0x48
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80014c4:	2001      	movs	r0, #1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80014c6:	2100      	movs	r1, #0
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014c8:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014cc:	f244 57f8 	movw	r7, #17912	; 0x45f8
 80014d0:	e006      	b.n	80014e0 <HAL_ETH_Init+0x1a0>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80014d2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80014d6:	692a      	ldr	r2, [r5, #16]
 80014d8:	4472      	add	r2, lr
 80014da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80014dc:	3428      	adds	r4, #40	; 0x28
 80014de:	3001      	adds	r0, #1
    dmarxdesc =  heth->Init.RxDesc + i;
 80014e0:	692a      	ldr	r2, [r5, #16]
 80014e2:	1913      	adds	r3, r2, r4
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80014e4:	5111      	str	r1, [r2, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80014e6:	6059      	str	r1, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80014e8:	6099      	str	r1, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80014ea:	60d9      	str	r1, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80014ec:	6219      	str	r1, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80014ee:	6259      	str	r1, [r3, #36]	; 0x24
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80014f0:	f842 c004 	str.w	ip, [r2, r4]
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80014f4:	605f      	str	r7, [r3, #4]
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80014fc:	605a      	str	r2, [r3, #4]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80014fe:	f846 3b04 	str.w	r3, [r6], #4
    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001502:	1e42      	subs	r2, r0, #1
 8001504:	2a02      	cmp	r2, #2
 8001506:	d9e4      	bls.n	80014d2 <HAL_ETH_Init+0x192>
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001508:	692a      	ldr	r2, [r5, #16]
 800150a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800150c:	2803      	cmp	r0, #3
 800150e:	d9e5      	bls.n	80014dc <HAL_ETH_Init+0x19c>
  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001510:	2000      	movs	r0, #0
 8001512:	65e8      	str	r0, [r5, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001514:	6628      	str	r0, [r5, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001516:	66a8      	str	r0, [r5, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001518:	66e8      	str	r0, [r5, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800151a:	65a8      	str	r0, [r5, #88]	; 0x58
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	692a      	ldr	r2, [r5, #16]
 8001520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001524:	60da      	str	r2, [r3, #12]
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001526:	686a      	ldr	r2, [r5, #4]
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001528:	7951      	ldrb	r1, [r2, #5]
 800152a:	7913      	ldrb	r3, [r2, #4]
 800152c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <HAL_ETH_Init+0x224>)
 8001532:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001534:	78d4      	ldrb	r4, [r2, #3]
 8001536:	7893      	ldrb	r3, [r2, #2]
 8001538:	041b      	lsls	r3, r3, #16
 800153a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800153e:	7814      	ldrb	r4, [r2, #0]
 8001540:	4323      	orrs	r3, r4
 8001542:	7852      	ldrb	r2, [r2, #1]
 8001544:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001548:	644b      	str	r3, [r1, #68]	; 0x44
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800154a:	f8c5 0088 	str.w	r0, [r5, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800154e:	2310      	movs	r3, #16
 8001550:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
}
 8001554:	b027      	add	sp, #156	; 0x9c
 8001556:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001558:	2001      	movs	r0, #1
}
 800155a:	4770      	bx	lr
 800155c:	40023800 	.word	0x40023800
 8001560:	40013800 	.word	0x40013800
 8001564:	40028000 	.word	0x40028000

08001568 <HAL_ETH_Start>:
  if (heth->gState == HAL_ETH_STATE_READY)
 8001568:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800156c:	2b10      	cmp	r3, #16
 800156e:	d001      	beq.n	8001574 <HAL_ETH_Start+0xc>
    return HAL_ERROR;
 8001570:	2001      	movs	r0, #1
}
 8001572:	4770      	bx	lr
{
 8001574:	b570      	push	{r4, r5, r6, lr}
 8001576:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 8001578:	2523      	movs	r5, #35	; 0x23
 800157a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800157e:	2304      	movs	r3, #4
 8001580:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001582:	f7ff fcd7 	bl	8000f34 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001586:	6822      	ldr	r2, [r4, #0]
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001594:	2001      	movs	r0, #1
 8001596:	f7ff fc63 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800159a:	6823      	ldr	r3, [r4, #0]
 800159c:	601e      	str	r6, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80015a8:	6823      	ldr	r3, [r4, #0]
 80015aa:	681e      	ldr	r6, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80015ac:	2001      	movs	r0, #1
 80015ae:	f7ff fc57 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	601e      	str	r6, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80015b6:	4620      	mov	r0, r4
 80015b8:	f7ff fea6 	bl	8001308 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80015bc:	6823      	ldr	r3, [r4, #0]
 80015be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015c2:	699a      	ldr	r2, [r3, #24]
 80015c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80015c8:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80015ca:	6823      	ldr	r3, [r4, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	f042 0202 	orr.w	r2, r2, #2
 80015d6:	619a      	str	r2, [r3, #24]
    heth->gState = HAL_ETH_STATE_STARTED;
 80015d8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 80015dc:	2000      	movs	r0, #0
}
 80015de:	bd70      	pop	{r4, r5, r6, pc}

080015e0 <HAL_ETH_Start_IT>:
{
 80015e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 80015e2:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d001      	beq.n	80015ee <HAL_ETH_Start_IT+0xe>
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
}
 80015ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015ee:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80015f0:	2523      	movs	r5, #35	; 0x23
 80015f2:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    heth->RxDescList.ItMode = 1U;
 80015f6:	2601      	movs	r6, #1
 80015f8:	6586      	str	r6, [r0, #88]	; 0x58
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015fa:	6802      	ldr	r2, [r0, #0]
 80015fc:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80015fe:	f443 7302 	orr.w	r3, r3, #520	; 0x208
 8001602:	63d3      	str	r3, [r2, #60]	; 0x3c
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001604:	6802      	ldr	r2, [r0, #0]
 8001606:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
 800160a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800160e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001612:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001616:	6802      	ldr	r2, [r0, #0]
 8001618:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
 800161c:	f443 1303 	orr.w	r3, r3, #2146304	; 0x20c000
 8001620:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001624:	2304      	movs	r3, #4
 8001626:	66c3      	str	r3, [r0, #108]	; 0x6c
    ETH_UpdateDescriptor(heth);
 8001628:	f7ff fc84 	bl	8000f34 <ETH_UpdateDescriptor>
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800162c:	6822      	ldr	r2, [r4, #0]
 800162e:	6813      	ldr	r3, [r2, #0]
 8001630:	f043 0308 	orr.w	r3, r3, #8
 8001634:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800163a:	4630      	mov	r0, r6
 800163c:	f7ff fc10 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	601f      	str	r7, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001644:	6822      	ldr	r2, [r4, #0]
 8001646:	6813      	ldr	r3, [r2, #0]
 8001648:	f043 0304 	orr.w	r3, r3, #4
 800164c:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 800164e:	6823      	ldr	r3, [r4, #0]
 8001650:	681f      	ldr	r7, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001652:	4630      	mov	r0, r6
 8001654:	f7ff fc04 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	601f      	str	r7, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 800165c:	4620      	mov	r0, r4
 800165e:	f7ff fe53 	bl	8001308 <ETH_FlushTransmitFIFO>
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001668:	699a      	ldr	r2, [r3, #24]
 800166a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800166e:	619a      	str	r2, [r3, #24]
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001670:	6823      	ldr	r3, [r4, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	f042 0202 	orr.w	r2, r2, #2
 800167c:	619a      	str	r2, [r3, #24]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800167e:	6822      	ldr	r2, [r4, #0]
 8001680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001684:	69d3      	ldr	r3, [r2, #28]
 8001686:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 800168a:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 800168e:	61d3      	str	r3, [r2, #28]
    heth->gState = HAL_ETH_STATE_STARTED;
 8001690:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    return HAL_OK;
 8001694:	2000      	movs	r0, #0
 8001696:	e7a9      	b.n	80015ec <HAL_ETH_Start_IT+0xc>

08001698 <HAL_ETH_Stop_IT>:
{
 8001698:	b538      	push	{r3, r4, r5, lr}
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800169a:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 800169e:	2b23      	cmp	r3, #35	; 0x23
 80016a0:	d001      	beq.n	80016a6 <HAL_ETH_Stop_IT+0xe>
    return HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
}
 80016a4:	bd38      	pop	{r3, r4, r5, pc}
 80016a6:	4604      	mov	r4, r0
    heth->gState = HAL_ETH_STATE_BUSY;
 80016a8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80016ac:	6802      	ldr	r2, [r0, #0]
 80016ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b2:	69d3      	ldr	r3, [r2, #28]
 80016b4:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80016b8:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80016bc:	61d3      	str	r3, [r2, #28]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80016be:	6803      	ldr	r3, [r0, #0]
 80016c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016ca:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80016cc:	6803      	ldr	r3, [r0, #0]
 80016ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d2:	699a      	ldr	r2, [r3, #24]
 80016d4:	f022 0202 	bic.w	r2, r2, #2
 80016d8:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80016da:	6802      	ldr	r2, [r0, #0]
 80016dc:	6813      	ldr	r3, [r2, #0]
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 80016e4:	6803      	ldr	r3, [r0, #0]
 80016e6:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80016e8:	2001      	movs	r0, #1
 80016ea:	f7ff fbb9 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	601d      	str	r5, [r3, #0]
    ETH_FlushTransmitFIFO(heth);
 80016f2:	4620      	mov	r0, r4
 80016f4:	f7ff fe08 	bl	8001308 <ETH_FlushTransmitFIFO>
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	6813      	ldr	r3, [r2, #0]
 80016fc:	f023 0308 	bic.w	r3, r3, #8
 8001700:	6013      	str	r3, [r2, #0]
    tmpreg1 = (heth->Instance)->MACCR;
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	681d      	ldr	r5, [r3, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001706:	2001      	movs	r0, #1
 8001708:	f7ff fbaa 	bl	8000e60 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800170c:	4622      	mov	r2, r4
 800170e:	f852 3b48 	ldr.w	r3, [r2], #72
 8001712:	601d      	str	r5, [r3, #0]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001714:	f104 0058 	add.w	r0, r4, #88	; 0x58
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001718:	f852 1b04 	ldr.w	r1, [r2], #4
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800171c:	684b      	ldr	r3, [r1, #4]
 800171e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001722:	604b      	str	r3, [r1, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001724:	4282      	cmp	r2, r0
 8001726:	d1f7      	bne.n	8001718 <HAL_ETH_Stop_IT+0x80>
    heth->RxDescList.ItMode = 0U;
 8001728:	2000      	movs	r0, #0
 800172a:	65a0      	str	r0, [r4, #88]	; 0x58
    heth->gState = HAL_ETH_STATE_READY;
 800172c:	2310      	movs	r3, #16
 800172e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 8001732:	e7b7      	b.n	80016a4 <HAL_ETH_Stop_IT+0xc>

08001734 <HAL_ETH_Transmit_IT>:
{
 8001734:	b510      	push	{r4, lr}
 8001736:	4604      	mov	r4, r0
  if (pTxConfig == NULL)
 8001738:	b129      	cbz	r1, 8001746 <HAL_ETH_Transmit_IT+0x12>
  if (heth->gState == HAL_ETH_STATE_STARTED)
 800173a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800173e:	2b23      	cmp	r3, #35	; 0x23
 8001740:	d009      	beq.n	8001756 <HAL_ETH_Transmit_IT+0x22>
    return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
}
 8001744:	bd10      	pop	{r4, pc}
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001746:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	e7f6      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001756:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8001758:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800175a:	2201      	movs	r2, #1
 800175c:	4620      	mov	r0, r4
 800175e:	f7ff fc31 	bl	8000fc4 <ETH_Prepare_Tx_Descriptors>
 8001762:	b138      	cbz	r0, 8001774 <HAL_ETH_Transmit_IT+0x40>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001764:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_ERROR;
 8001770:	2001      	movs	r0, #1
 8001772:	e7e7      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>
  __ASM volatile ("dsb 0xF":::"memory");
 8001774:	f3bf 8f4f 	dsb	sy
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800177a:	1c5a      	adds	r2, r3, #1
 800177c:	2a03      	cmp	r2, #3
 800177e:	bf92      	itee	ls
 8001780:	62a2      	strls	r2, [r4, #40]	; 0x28
 8001782:	3b03      	subhi	r3, #3
 8001784:	62a3      	strhi	r3, [r4, #40]	; 0x28
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001786:	6823      	ldr	r3, [r4, #0]
 8001788:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800178c:	6952      	ldr	r2, [r2, #20]
 800178e:	f012 0f04 	tst.w	r2, #4
 8001792:	d009      	beq.n	80017a8 <HAL_ETH_Transmit_IT+0x74>
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	2204      	movs	r2, #4
 800179a:	615a      	str	r2, [r3, #20]
      (heth->Instance)->DMATPDR = 0U;
 800179c:	6823      	ldr	r3, [r4, #0]
 800179e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017a2:	2000      	movs	r0, #0
 80017a4:	6058      	str	r0, [r3, #4]
 80017a6:	e7cd      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>
    return HAL_OK;
 80017a8:	2000      	movs	r0, #0
 80017aa:	e7cb      	b.n	8001744 <HAL_ETH_Transmit_IT+0x10>

080017ac <HAL_ETH_ReadData>:
{
 80017ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017b0:	b085      	sub	sp, #20
 80017b2:	4605      	mov	r5, r0
  if (pAppBuff == NULL)
 80017b4:	9103      	str	r1, [sp, #12]
 80017b6:	b1e1      	cbz	r1, 80017f2 <HAL_ETH_ReadData+0x46>
  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017b8:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 80017bc:	2b23      	cmp	r3, #35	; 0x23
 80017be:	d17e      	bne.n	80018be <HAL_ETH_ReadData+0x112>
  descidx = heth->RxDescList.RxDescIdx;
 80017c0:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017c2:	f107 0312 	add.w	r3, r7, #18
 80017c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017ca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80017cc:	f1c3 0b04 	rsb	fp, r3, #4
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017d0:	6822      	ldr	r2, [r4, #0]
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	f2c0 8083 	blt.w	80018de <HAL_ETH_ReadData+0x132>
 80017d8:	f1bb 0f00 	cmp.w	fp, #0
 80017dc:	d066      	beq.n	80018ac <HAL_ETH_ReadData+0x100>
  uint32_t desccnt = 0U;
 80017de:	f04f 0800 	mov.w	r8, #0
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80017e2:	f100 0380 	add.w	r3, r0, #128	; 0x80
 80017e6:	9301      	str	r3, [sp, #4]
 80017e8:	f100 037c 	add.w	r3, r0, #124	; 0x7c
 80017ec:	9302      	str	r3, [sp, #8]
      dmarxdesc->BackupAddr0 = 0;
 80017ee:	46c1      	mov	r9, r8
 80017f0:	e037      	b.n	8001862 <HAL_ETH_ReadData+0xb6>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017f2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    return HAL_ERROR;
 80017fe:	2001      	movs	r0, #1
 8001800:	e05e      	b.n	80018c0 <HAL_ETH_ReadData+0x114>
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001802:	6823      	ldr	r3, [r4, #0]
 8001804:	f413 7f00 	tst.w	r3, #512	; 0x200
        heth->RxDescList.RxDescCnt = 0;
 8001808:	bf1c      	itt	ne
 800180a:	f8c5 9060 	strne.w	r9, [r5, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800180e:	f8c5 9064 	strne.w	r9, [r5, #100]	; 0x64
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001818:	d134      	bne.n	8001884 <HAL_ETH_ReadData+0xd8>
      bufflength = heth->Init.RxBuffLen;
 800181a:	696e      	ldr	r6, [r5, #20]
 800181c:	46ca      	mov	sl, r9
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800181e:	68a2      	ldr	r2, [r4, #8]
 8001820:	6222      	str	r2, [r4, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001822:	b2b3      	uxth	r3, r6
 8001824:	9901      	ldr	r1, [sp, #4]
 8001826:	9802      	ldr	r0, [sp, #8]
 8001828:	f001 fefe 	bl	8003628 <HAL_ETH_RxLinkCallback>
      heth->RxDescList.RxDescCnt++;
 800182c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 800182e:	3301      	adds	r3, #1
 8001830:	662b      	str	r3, [r5, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001832:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001834:	4433      	add	r3, r6
 8001836:	666b      	str	r3, [r5, #100]	; 0x64
      dmarxdesc->BackupAddr0 = 0;
 8001838:	f8c4 9020 	str.w	r9, [r4, #32]
    INCR_RX_DESC_INDEX(descidx, 1U);
 800183c:	1c7b      	adds	r3, r7, #1
 800183e:	2b03      	cmp	r3, #3
 8001840:	bf8c      	ite	hi
 8001842:	3f03      	subhi	r7, #3
 8001844:	461f      	movls	r7, r3
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001846:	f107 0312 	add.w	r3, r7, #18
 800184a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
    desccnt++;
 800184e:	f108 0801 	add.w	r8, r8, #1
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	db1f      	blt.n	8001898 <HAL_ETH_ReadData+0xec>
 8001858:	45c3      	cmp	fp, r8
 800185a:	d01c      	beq.n	8001896 <HAL_ETH_ReadData+0xea>
         && (rxdataready == 0U))
 800185c:	f1ba 0f00 	cmp.w	sl, #0
 8001860:	d131      	bne.n	80018c6 <HAL_ETH_ReadData+0x11a>
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001868:	d003      	beq.n	8001872 <HAL_ETH_ReadData+0xc6>
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800186a:	69a3      	ldr	r3, [r4, #24]
 800186c:	67ab      	str	r3, [r5, #120]	; 0x78
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800186e:	69e3      	ldr	r3, [r4, #28]
 8001870:	676b      	str	r3, [r5, #116]	; 0x74
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001878:	d1c3      	bne.n	8001802 <HAL_ETH_ReadData+0x56>
 800187a:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1c0      	bne.n	8001802 <HAL_ETH_ReadData+0x56>
 8001880:	46ca      	mov	sl, r9
 8001882:	e7db      	b.n	800183c <HAL_ETH_ReadData+0x90>
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001884:	6826      	ldr	r6, [r4, #0]
 8001886:	f3c6 460d 	ubfx	r6, r6, #16, #14
 800188a:	3e04      	subs	r6, #4
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	672b      	str	r3, [r5, #112]	; 0x70
        rxdataready = 1;
 8001890:	f04f 0a01 	mov.w	sl, #1
 8001894:	e7c3      	b.n	800181e <HAL_ETH_ReadData+0x72>
    desccnt++;
 8001896:	46d8      	mov	r8, fp
  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001898:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800189a:	4443      	add	r3, r8
 800189c:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800189e:	b93b      	cbnz	r3, 80018b0 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80018a0:	65ef      	str	r7, [r5, #92]	; 0x5c
  return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
  if (rxdataready == 1U)
 80018a4:	f1ba 0f00 	cmp.w	sl, #0
 80018a8:	d00a      	beq.n	80018c0 <HAL_ETH_ReadData+0x114>
 80018aa:	e012      	b.n	80018d2 <HAL_ETH_ReadData+0x126>
  uint8_t rxdataready = 0U;
 80018ac:	f04f 0a00 	mov.w	sl, #0
    ETH_UpdateDescriptor(heth);
 80018b0:	4628      	mov	r0, r5
 80018b2:	f7ff fb3f 	bl	8000f34 <ETH_UpdateDescriptor>
 80018b6:	e7f3      	b.n	80018a0 <HAL_ETH_ReadData+0xf4>
  uint8_t rxdataready = 0U;
 80018b8:	f04f 0a00 	mov.w	sl, #0
 80018bc:	e7f8      	b.n	80018b0 <HAL_ETH_ReadData+0x104>
    return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
}
 80018c0:	b005      	add	sp, #20
 80018c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018c6:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 80018c8:	4443      	add	r3, r8
 80018ca:	66eb      	str	r3, [r5, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ef      	bne.n	80018b0 <HAL_ETH_ReadData+0x104>
  heth->RxDescList.RxDescIdx = descidx;
 80018d0:	65ef      	str	r7, [r5, #92]	; 0x5c
    *pAppBuff = heth->RxDescList.pRxStart;
 80018d2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80018d4:	9a03      	ldr	r2, [sp, #12]
 80018d6:	6013      	str	r3, [r2, #0]
    heth->RxDescList.pRxStart = NULL;
 80018d8:	2000      	movs	r0, #0
 80018da:	67e8      	str	r0, [r5, #124]	; 0x7c
    return HAL_OK;
 80018dc:	e7f0      	b.n	80018c0 <HAL_ETH_ReadData+0x114>
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1ea      	bne.n	80018b8 <HAL_ETH_ReadData+0x10c>
  return HAL_ERROR;
 80018e2:	2001      	movs	r0, #1
 80018e4:	e7ec      	b.n	80018c0 <HAL_ETH_ReadData+0x114>

080018e6 <HAL_ETH_ReleaseTxPacket>:
{
 80018e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80018ea:	6c05      	ldr	r5, [r0, #64]	; 0x40
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80018ec:	6c44      	ldr	r4, [r0, #68]	; 0x44
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018ee:	b1a5      	cbz	r5, 800191a <HAL_ETH_ReleaseTxPacket+0x34>
 80018f0:	4606      	mov	r6, r0
        dmatxdesclist->PacketAddress[idx] = NULL;
 80018f2:	f04f 0800 	mov.w	r8, #0
 80018f6:	e003      	b.n	8001900 <HAL_ETH_ReleaseTxPacket+0x1a>
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80018f8:	3401      	adds	r4, #1
 80018fa:	f004 0403 	and.w	r4, r4, #3
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018fe:	b165      	cbz	r5, 800191a <HAL_ETH_ReleaseTxPacket+0x34>
    numOfBuf--;
 8001900:	3d01      	subs	r5, #1
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001902:	eb06 0784 	add.w	r7, r6, r4, lsl #2
 8001906:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001908:	2800      	cmp	r0, #0
 800190a:	d0f5      	beq.n	80018f8 <HAL_ETH_ReleaseTxPacket+0x12>
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800190c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8001910:	68f2      	ldr	r2, [r6, #12]
 8001912:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001916:	2b00      	cmp	r3, #0
 8001918:	da02      	bge.n	8001920 <HAL_ETH_ReleaseTxPacket+0x3a>
}
 800191a:	2000      	movs	r0, #0
 800191c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001920:	f001 fe9d 	bl	800365e <HAL_ETH_TxFreeCallback>
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001924:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001928:	3401      	adds	r4, #1
 800192a:	f004 0403 	and.w	r4, r4, #3
        dmatxdesclist->BuffersInUse = numOfBuf;
 800192e:	6435      	str	r5, [r6, #64]	; 0x40
        dmatxdesclist->releaseIndex = idx;
 8001930:	6474      	str	r4, [r6, #68]	; 0x44
 8001932:	e7e4      	b.n	80018fe <HAL_ETH_ReleaseTxPacket+0x18>

08001934 <HAL_ETH_PMTCallback>:
}
 8001934:	4770      	bx	lr

08001936 <HAL_ETH_WakeUpCallback>:
}
 8001936:	4770      	bx	lr

08001938 <HAL_ETH_IRQHandler>:
{
 8001938:	b510      	push	{r4, lr}
 800193a:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800193c:	6803      	ldr	r3, [r0, #0]
 800193e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001942:	6952      	ldr	r2, [r2, #20]
 8001944:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001948:	d005      	beq.n	8001956 <HAL_ETH_IRQHandler+0x1e>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800194a:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800194e:	69d2      	ldr	r2, [r2, #28]
 8001950:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001954:	d147      	bne.n	80019e6 <HAL_ETH_IRQHandler+0xae>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800195c:	6952      	ldr	r2, [r2, #20]
 800195e:	f012 0f01 	tst.w	r2, #1
 8001962:	d005      	beq.n	8001970 <HAL_ETH_IRQHandler+0x38>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001964:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001968:	69d2      	ldr	r2, [r2, #28]
 800196a:	f012 0f01 	tst.w	r2, #1
 800196e:	d141      	bne.n	80019f4 <HAL_ETH_IRQHandler+0xbc>
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001976:	6952      	ldr	r2, [r2, #20]
 8001978:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 800197c:	d028      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x98>
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800197e:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8001982:	69d2      	ldr	r2, [r2, #28]
 8001984:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8001988:	d022      	beq.n	80019d0 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800198a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 800198e:	f042 0208 	orr.w	r2, r2, #8
 8001992:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001996:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800199a:	6952      	ldr	r2, [r2, #20]
 800199c:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 80019a0:	d031      	beq.n	8001a06 <HAL_ETH_IRQHandler+0xce>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80019a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a6:	695a      	ldr	r2, [r3, #20]
 80019a8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80019ac:	f422 0201 	bic.w	r2, r2, #8454144	; 0x810000
 80019b0:	f422 425f 	bic.w	r2, r2, #57088	; 0xdf00
 80019b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80019b8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	f422 32c0 	bic.w	r2, r2, #98304	; 0x18000
 80019c2:	61da      	str	r2, [r3, #28]
        heth->gState = HAL_ETH_STATE_ERROR;
 80019c4:	23e0      	movs	r3, #224	; 0xe0
 80019c6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      HAL_ETH_ErrorCallback(heth);
 80019ca:	4620      	mov	r0, r4
 80019cc:	f001 fc04 	bl	80031d8 <HAL_ETH_ErrorCallback>
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80019d0:	6823      	ldr	r3, [r4, #0]
 80019d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019d4:	f012 0f08 	tst.w	r2, #8
 80019d8:	d11f      	bne.n	8001a1a <HAL_ETH_IRQHandler+0xe2>
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_ETH_IRQHandler+0x10c>)
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80019e2:	d126      	bne.n	8001a32 <HAL_ETH_IRQHandler+0xfa>
}
 80019e4:	bd10      	pop	{r4, pc}
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80019e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ea:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_ETH_IRQHandler+0x110>)
 80019ec:	615a      	str	r2, [r3, #20]
      HAL_ETH_RxCpltCallback(heth);
 80019ee:	f001 fbe3 	bl	80031b8 <HAL_ETH_RxCpltCallback>
 80019f2:	e7b0      	b.n	8001956 <HAL_ETH_IRQHandler+0x1e>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80019f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019f8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80019fc:	615a      	str	r2, [r3, #20]
      HAL_ETH_TxCpltCallback(heth);
 80019fe:	4620      	mov	r0, r4
 8001a00:	f001 fbe2 	bl	80031c8 <HAL_ETH_TxCpltCallback>
 8001a04:	e7b4      	b.n	8001970 <HAL_ETH_IRQHandler+0x38>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	f248 6180 	movw	r1, #34432	; 0x8680
 8001a10:	400a      	ands	r2, r1
 8001a12:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001a16:	6159      	str	r1, [r3, #20]
 8001a18:	e7d7      	b.n	80019ca <HAL_ETH_IRQHandler+0x92>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001a20:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    HAL_ETH_PMTCallback(heth);
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff ff85 	bl	8001934 <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
 8001a30:	e7d3      	b.n	80019da <HAL_ETH_IRQHandler+0xa2>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <HAL_ETH_IRQHandler+0x10c>)
 8001a34:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a38:	615a      	str	r2, [r3, #20]
    HAL_ETH_WakeUpCallback(heth);
 8001a3a:	4620      	mov	r0, r4
 8001a3c:	f7ff ff7b 	bl	8001936 <HAL_ETH_WakeUpCallback>
}
 8001a40:	e7d0      	b.n	80019e4 <HAL_ETH_IRQHandler+0xac>
 8001a42:	bf00      	nop
 8001a44:	40013c00 	.word	0x40013c00
 8001a48:	00010040 	.word	0x00010040

08001a4c <HAL_ETH_ReadPHYRegister>:
{
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	4604      	mov	r4, r0
 8001a50:	461e      	mov	r6, r3
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a52:	6805      	ldr	r5, [r0, #0]
 8001a54:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a56:	0192      	lsls	r2, r2, #6
 8001a58:	f402 63f8 	and.w	r3, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a5c:	f000 021c 	and.w	r2, r0, #28
 8001a60:	431a      	orrs	r2, r3
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a62:	02cb      	lsls	r3, r1, #11
 8001a64:	b29b      	uxth	r3, r3
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a66:	4313      	orrs	r3, r2
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a68:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg1;
 8001a6c:	612b      	str	r3, [r5, #16]
  tickstart = HAL_GetTick();
 8001a6e:	f7ff f9f1 	bl	8000e54 <HAL_GetTick>
 8001a72:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001a74:	f7ff f9ee 	bl	8000e54 <HAL_GetTick>
 8001a78:	1b40      	subs	r0, r0, r5
 8001a7a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001a7e:	d209      	bcs.n	8001a94 <HAL_ETH_ReadPHYRegister+0x48>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a80:	6822      	ldr	r2, [r4, #0]
 8001a82:	6911      	ldr	r1, [r2, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a84:	f011 0f01 	tst.w	r1, #1
 8001a88:	d1f4      	bne.n	8001a74 <HAL_ETH_ReadPHYRegister+0x28>
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001a8a:	6953      	ldr	r3, [r2, #20]
 8001a8c:	b29b      	uxth	r3, r3
 8001a8e:	6033      	str	r3, [r6, #0]
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
}
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8001a94:	2001      	movs	r0, #1
 8001a96:	e7fc      	b.n	8001a92 <HAL_ETH_ReadPHYRegister+0x46>

08001a98 <HAL_ETH_WritePHYRegister>:
{
 8001a98:	b538      	push	{r3, r4, r5, lr}
 8001a9a:	4604      	mov	r4, r0
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a9c:	6805      	ldr	r5, [r0, #0]
 8001a9e:	6928      	ldr	r0, [r5, #16]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001aa0:	0192      	lsls	r2, r2, #6
 8001aa2:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001aa6:	f000 001c 	and.w	r0, r0, #28
 8001aaa:	4310      	orrs	r0, r2
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001aac:	02ca      	lsls	r2, r1, #11
 8001aae:	b292      	uxth	r2, r2
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001ab0:	4302      	orrs	r2, r0
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001ab2:	f042 0203 	orr.w	r2, r2, #3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	616b      	str	r3, [r5, #20]
  heth->Instance->MACMIIAR = tmpreg1;
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	611a      	str	r2, [r3, #16]
  tickstart = HAL_GetTick();
 8001abe:	f7ff f9c9 	bl	8000e54 <HAL_GetTick>
 8001ac2:	4605      	mov	r5, r0
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001ac4:	f7ff f9c6 	bl	8000e54 <HAL_GetTick>
 8001ac8:	1b40      	subs	r0, r0, r5
 8001aca:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8001ace:	d206      	bcs.n	8001ade <HAL_ETH_WritePHYRegister+0x46>
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	691b      	ldr	r3, [r3, #16]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ad4:	f013 0f01 	tst.w	r3, #1
 8001ad8:	d1f4      	bne.n	8001ac4 <HAL_ETH_WritePHYRegister+0x2c>
  return HAL_OK;
 8001ada:	2000      	movs	r0, #0
 8001adc:	e000      	b.n	8001ae0 <HAL_ETH_WritePHYRegister+0x48>
      return HAL_ERROR;
 8001ade:	2001      	movs	r0, #1
}
 8001ae0:	bd38      	pop	{r3, r4, r5, pc}

08001ae2 <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001ae2:	2900      	cmp	r1, #0
 8001ae4:	d06f      	beq.n	8001bc6 <HAL_ETH_GetMACConfig+0xe4>
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001ae6:	6802      	ldr	r2, [r0, #0]
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001aee:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001af2:	6802      	ldr	r2, [r0, #0]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001afa:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001afc:	6802      	ldr	r2, [r0, #0]
 8001afe:	6812      	ldr	r2, [r2, #0]
 8001b00:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8001b04:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001b08:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b0c:	6802      	ldr	r2, [r0, #0]
 8001b0e:	6812      	ldr	r2, [r2, #0]
                                        ? ENABLE : DISABLE;
 8001b10:	f3c2 4200 	ubfx	r2, r2, #16, #1
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001b14:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001b16:	6802      	ldr	r2, [r0, #0]
 8001b18:	6812      	ldr	r2, [r2, #0]
 8001b1a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8001b1e:	f3c2 3240 	ubfx	r2, r2, #13, #1
 8001b22:	778a      	strb	r2, [r1, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001b24:	6802      	ldr	r2, [r0, #0]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001b2c:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001b2e:	6802      	ldr	r2, [r0, #0]
 8001b30:	6812      	ldr	r2, [r2, #0]
 8001b32:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b36:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001b38:	6802      	ldr	r2, [r0, #0]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b40:	614a      	str	r2, [r1, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001b42:	6802      	ldr	r2, [r0, #0]
 8001b44:	6812      	ldr	r2, [r2, #0]
 8001b46:	f482 0280 	eor.w	r2, r2, #4194304	; 0x400000
 8001b4a:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001b4e:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001b50:	6802      	ldr	r2, [r0, #0]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
 8001b58:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001b5c:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001b5e:	6802      	ldr	r2, [r0, #0]
 8001b60:	6812      	ldr	r2, [r2, #0]
 8001b62:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001b66:	73ca      	strb	r2, [r1, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001b68:	6802      	ldr	r2, [r0, #0]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8001b70:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001b72:	6802      	ldr	r2, [r0, #0]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001b7a:	710a      	strb	r2, [r1, #4]
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001b7c:	6802      	ldr	r2, [r0, #0]
 8001b7e:	6992      	ldr	r2, [r2, #24]
 8001b80:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001b84:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001b88:	6802      	ldr	r2, [r0, #0]
 8001b8a:	6992      	ldr	r2, [r2, #24]
 8001b8c:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001b90:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001b94:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001b98:	6802      	ldr	r2, [r0, #0]
 8001b9a:	6992      	ldr	r2, [r2, #24]
 8001b9c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001ba0:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001ba2:	6802      	ldr	r2, [r0, #0]
 8001ba4:	6992      	ldr	r2, [r2, #24]
 8001ba6:	0c12      	lsrs	r2, r2, #16
 8001ba8:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001baa:	6802      	ldr	r2, [r0, #0]
 8001bac:	6992      	ldr	r2, [r2, #24]
 8001bae:	f3c2 0280 	ubfx	r2, r2, #2, #1
 8001bb2:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bb6:	6802      	ldr	r2, [r0, #0]
 8001bb8:	6992      	ldr	r2, [r2, #24]
                                      ? ENABLE : DISABLE;
 8001bba:	f3c2 02c0 	ubfx	r2, r2, #3, #1
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001bbe:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  return HAL_OK;
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	4770      	bx	lr
    return HAL_ERROR;
 8001bc6:	2001      	movs	r0, #1
}
 8001bc8:	4770      	bx	lr

08001bca <HAL_ETH_SetMACConfig>:
  if (macconf == NULL)
 8001bca:	b151      	cbz	r1, 8001be2 <HAL_ETH_SetMACConfig+0x18>
{
 8001bcc:	b508      	push	{r3, lr}
  if (heth->gState == HAL_ETH_STATE_READY)
 8001bce:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8001bd2:	2b10      	cmp	r3, #16
 8001bd4:	d001      	beq.n	8001bda <HAL_ETH_SetMACConfig+0x10>
    return HAL_ERROR;
 8001bd6:	2001      	movs	r0, #1
}
 8001bd8:	bd08      	pop	{r3, pc}
    ETH_SetMACConfig(heth, macconf);
 8001bda:	f7ff fab3 	bl	8001144 <ETH_SetMACConfig>
    return HAL_OK;
 8001bde:	2000      	movs	r0, #0
 8001be0:	e7fa      	b.n	8001bd8 <HAL_ETH_SetMACConfig+0xe>
    return HAL_ERROR;
 8001be2:	2001      	movs	r0, #1
}
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_ETH_SetMDIOClockRange>:
{
 8001be8:	b538      	push	{r3, r4, r5, lr}
 8001bea:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMIIAR;
 8001bec:	6803      	ldr	r3, [r0, #0]
 8001bee:	691c      	ldr	r4, [r3, #16]
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001bf0:	f024 041c 	bic.w	r4, r4, #28
  hclk = HAL_RCC_GetHCLKFreq();
 8001bf4:	f000 fd08 	bl	8002608 <HAL_RCC_GetHCLKFreq>
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_ETH_SetMDIOClockRange+0x54>)
 8001bfa:	4403      	add	r3, r0
 8001bfc:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d204      	bcs.n	8001c0c <HAL_ETH_SetMDIOClockRange+0x24>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001c02:	f044 0408 	orr.w	r4, r4, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	611c      	str	r4, [r3, #16]
}
 8001c0a:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_ETH_SetMDIOClockRange+0x5c>)
 8001c0e:	4403      	add	r3, r0
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d802      	bhi.n	8001c1c <HAL_ETH_SetMDIOClockRange+0x34>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001c16:	f044 040c 	orr.w	r4, r4, #12
 8001c1a:	e7f4      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <HAL_ETH_SetMDIOClockRange+0x64>)
 8001c1e:	4403      	add	r3, r0
 8001c20:	4a0b      	ldr	r2, [pc, #44]	; (8001c50 <HAL_ETH_SetMDIOClockRange+0x68>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d3ef      	bcc.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x1e>
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_ETH_SetMDIOClockRange+0x6c>)
 8001c28:	4403      	add	r3, r0
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <HAL_ETH_SetMDIOClockRange+0x70>)
 8001c2c:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001c2e:	bf94      	ite	ls
 8001c30:	f044 0404 	orrls.w	r4, r4, #4
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001c34:	f044 0410 	orrhi.w	r4, r4, #16
 8001c38:	e7e5      	b.n	8001c06 <HAL_ETH_SetMDIOClockRange+0x1e>
 8001c3a:	bf00      	nop
 8001c3c:	feced300 	.word	0xfeced300
 8001c40:	00e4e1c0 	.word	0x00e4e1c0
 8001c44:	fde9f140 	.word	0xfde9f140
 8001c48:	017d783f 	.word	0x017d783f
 8001c4c:	fc6c7900 	.word	0xfc6c7900
 8001c50:	02625a00 	.word	0x02625a00
 8001c54:	fa0a1f00 	.word	0xfa0a1f00
 8001c58:	02faf07f 	.word	0x02faf07f

08001c5c <HAL_ETH_GetDMAError>:
  return heth->DMAErrorCode;
 8001c5c:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
}
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6c:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4d82      	ldr	r5, [pc, #520]	; (8001e78 <HAL_GPIO_Init+0x214>)
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c70:	4c82      	ldr	r4, [pc, #520]	; (8001e7c <HAL_GPIO_Init+0x218>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8001e84 <HAL_GPIO_Init+0x220>
 8001c76:	e04d      	b.n	8001d14 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001c78:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7a:	f04f 0903 	mov.w	r9, #3
 8001c7e:	fa09 f902 	lsl.w	r9, r9, r2
 8001c82:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c86:	68cf      	ldr	r7, [r1, #12]
 8001c88:	4097      	lsls	r7, r2
 8001c8a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001c8e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c90:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c92:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c96:	684f      	ldr	r7, [r1, #4]
 8001c98:	f3c7 1700 	ubfx	r7, r7, #4, #1
 8001c9c:	409f      	lsls	r7, r3
 8001c9e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001ca2:	6047      	str	r7, [r0, #4]
 8001ca4:	e046      	b.n	8001d34 <HAL_GPIO_Init+0xd0>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	f04f 0e00 	mov.w	lr, #0
 8001caa:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001cae:	ea4e 0e0a 	orr.w	lr, lr, sl
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb2:	f8c7 e008 	str.w	lr, [r7, #8]
        temp = EXTI->RTSR;
 8001cb6:	68a7      	ldr	r7, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8001cb8:	ea6f 0e0c 	mvn.w	lr, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cbc:	684e      	ldr	r6, [r1, #4]
 8001cbe:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	bf0c      	ite	eq
 8001cc4:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cc8:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->RTSR = temp;
 8001ccc:	60a7      	str	r7, [r4, #8]

        temp = EXTI->FTSR;
 8001cce:	68e7      	ldr	r7, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd0:	684e      	ldr	r6, [r1, #4]
 8001cd2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001cd6:	bf0c      	ite	eq
 8001cd8:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cdc:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->FTSR = temp;
 8001ce0:	60e7      	str	r7, [r4, #12]

        temp = EXTI->EMR;
 8001ce2:	6867      	ldr	r7, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce4:	684e      	ldr	r6, [r1, #4]
 8001ce6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001cea:	bf0c      	ite	eq
 8001cec:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001cf0:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->EMR = temp;
 8001cf4:	6067      	str	r7, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf6:	6827      	ldr	r7, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf8:	684e      	ldr	r6, [r1, #4]
 8001cfa:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001cfe:	bf0c      	ite	eq
 8001d00:	ea0e 0707 	andeq.w	r7, lr, r7
        {
          temp |= iocurrent;
 8001d04:	ea4c 0707 	orrne.w	r7, ip, r7
        }
        EXTI->IMR = temp;
 8001d08:	6027      	str	r7, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	3202      	adds	r2, #2
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	f000 80af 	beq.w	8001e72 <HAL_GPIO_Init+0x20e>
    ioposition = 0x01U << position;
 8001d14:	f04f 0e01 	mov.w	lr, #1
 8001d18:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1c:	680f      	ldr	r7, [r1, #0]
 8001d1e:	ea0e 0c07 	and.w	ip, lr, r7
    if(iocurrent == ioposition)
 8001d22:	ea3e 0607 	bics.w	r6, lr, r7
 8001d26:	d1f0      	bne.n	8001d0a <HAL_GPIO_Init+0xa6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d28:	684f      	ldr	r7, [r1, #4]
 8001d2a:	f007 0703 	and.w	r7, r7, #3
 8001d2e:	3f01      	subs	r7, #1
 8001d30:	2f01      	cmp	r7, #1
 8001d32:	d9a1      	bls.n	8001c78 <HAL_GPIO_Init+0x14>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d34:	684f      	ldr	r7, [r1, #4]
 8001d36:	f007 0703 	and.w	r7, r7, #3
 8001d3a:	2f03      	cmp	r7, #3
 8001d3c:	d027      	beq.n	8001d8e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->PUPDR;
 8001d3e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d40:	f04f 0e03 	mov.w	lr, #3
 8001d44:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d48:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d4c:	688f      	ldr	r7, [r1, #8]
 8001d4e:	4097      	lsls	r7, r2
 8001d50:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d54:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	684f      	ldr	r7, [r1, #4]
 8001d58:	f007 0703 	and.w	r7, r7, #3
 8001d5c:	2f02      	cmp	r7, #2
 8001d5e:	d116      	bne.n	8001d8e <HAL_GPIO_Init+0x12a>
        temp = GPIOx->AFR[position >> 3U];
 8001d60:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001d64:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8001d68:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d6c:	f003 0907 	and.w	r9, r3, #7
 8001d70:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8001d74:	f04f 0a0f 	mov.w	sl, #15
 8001d78:	fa0a fa09 	lsl.w	sl, sl, r9
 8001d7c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d80:	690f      	ldr	r7, [r1, #16]
 8001d82:	fa07 f709 	lsl.w	r7, r7, r9
 8001d86:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001d8a:	f8ce 7020 	str.w	r7, [lr, #32]
      temp = GPIOx->MODER;
 8001d8e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d90:	f04f 0e03 	mov.w	lr, #3
 8001d94:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d98:	ea27 0e0e 	bic.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d9c:	684f      	ldr	r7, [r1, #4]
 8001d9e:	f007 0703 	and.w	r7, r7, #3
 8001da2:	4097      	lsls	r7, r2
 8001da4:	ea47 070e 	orr.w	r7, r7, lr
      GPIOx->MODER = temp;
 8001da8:	6007      	str	r7, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001daa:	684f      	ldr	r7, [r1, #4]
 8001dac:	f417 3f40 	tst.w	r7, #196608	; 0x30000
 8001db0:	d0ab      	beq.n	8001d0a <HAL_GPIO_Init+0xa6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2700      	movs	r7, #0
 8001db4:	9701      	str	r7, [sp, #4]
 8001db6:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001db8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001dbc:	646f      	str	r7, [r5, #68]	; 0x44
 8001dbe:	6c6f      	ldr	r7, [r5, #68]	; 0x44
 8001dc0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8001dc4:	9701      	str	r7, [sp, #4]
 8001dc6:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc8:	f023 0703 	bic.w	r7, r3, #3
 8001dcc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001dd0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8001dd4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	f003 0e03 	and.w	lr, r3, #3
 8001ddc:	ea4f 0b8e 	mov.w	fp, lr, lsl #2
 8001de0:	f04f 0e0f 	mov.w	lr, #15
 8001de4:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001de8:	ea2a 0a0e 	bic.w	sl, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dec:	4e24      	ldr	r6, [pc, #144]	; (8001e80 <HAL_GPIO_Init+0x21c>)
 8001dee:	42b0      	cmp	r0, r6
 8001df0:	f43f af59 	beq.w	8001ca6 <HAL_GPIO_Init+0x42>
 8001df4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001df8:	42b0      	cmp	r0, r6
 8001dfa:	d022      	beq.n	8001e42 <HAL_GPIO_Init+0x1de>
 8001dfc:	4540      	cmp	r0, r8
 8001dfe:	d023      	beq.n	8001e48 <HAL_GPIO_Init+0x1e4>
 8001e00:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8001e04:	42b0      	cmp	r0, r6
 8001e06:	d022      	beq.n	8001e4e <HAL_GPIO_Init+0x1ea>
 8001e08:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e0c:	42b0      	cmp	r0, r6
 8001e0e:	d021      	beq.n	8001e54 <HAL_GPIO_Init+0x1f0>
 8001e10:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e14:	42b0      	cmp	r0, r6
 8001e16:	d020      	beq.n	8001e5a <HAL_GPIO_Init+0x1f6>
 8001e18:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001e1c:	42b0      	cmp	r0, r6
 8001e1e:	d01f      	beq.n	8001e60 <HAL_GPIO_Init+0x1fc>
 8001e20:	f8df e064 	ldr.w	lr, [pc, #100]	; 8001e88 <HAL_GPIO_Init+0x224>
 8001e24:	4570      	cmp	r0, lr
 8001e26:	d01e      	beq.n	8001e66 <HAL_GPIO_Init+0x202>
 8001e28:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e2c:	4570      	cmp	r0, lr
 8001e2e:	d01d      	beq.n	8001e6c <HAL_GPIO_Init+0x208>
 8001e30:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8001e34:	4570      	cmp	r0, lr
 8001e36:	bf0c      	ite	eq
 8001e38:	f04f 0e09 	moveq.w	lr, #9
 8001e3c:	f04f 0e0a 	movne.w	lr, #10
 8001e40:	e733      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e42:	f04f 0e01 	mov.w	lr, #1
 8001e46:	e730      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e48:	f04f 0e02 	mov.w	lr, #2
 8001e4c:	e72d      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e4e:	f04f 0e03 	mov.w	lr, #3
 8001e52:	e72a      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e54:	f04f 0e04 	mov.w	lr, #4
 8001e58:	e727      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e5a:	f04f 0e05 	mov.w	lr, #5
 8001e5e:	e724      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e60:	f04f 0e06 	mov.w	lr, #6
 8001e64:	e721      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e66:	f04f 0e07 	mov.w	lr, #7
 8001e6a:	e71e      	b.n	8001caa <HAL_GPIO_Init+0x46>
 8001e6c:	f04f 0e08 	mov.w	lr, #8
 8001e70:	e71b      	b.n	8001caa <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8001e72:	b003      	add	sp, #12
 8001e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40013c00 	.word	0x40013c00
 8001e80:	40020000 	.word	0x40020000
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40021c00 	.word	0x40021c00

08001e8c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e8c:	b10a      	cbz	r2, 8001e92 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8e:	6181      	str	r1, [r0, #24]
 8001e90:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e92:	0409      	lsls	r1, r1, #16
 8001e94:	6181      	str	r1, [r0, #24]
  }
}
 8001e96:	4770      	bx	lr

08001e98 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e98:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e9a:	ea01 0203 	and.w	r2, r1, r3
 8001e9e:	ea21 0103 	bic.w	r1, r1, r3
 8001ea2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001ea6:	6181      	str	r1, [r0, #24]
}
 8001ea8:	4770      	bx	lr

08001eaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eaa:	b570      	push	{r4, r5, r6, lr}
 8001eac:	b08a      	sub	sp, #40	; 0x28
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	f000 8090 	beq.w	8001fd4 <HAL_PCD_Init+0x12a>
 8001eb4:	4605      	mov	r5, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eb6:	6804      	ldr	r4, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eb8:	f890 34bd 	ldrb.w	r3, [r0, #1213]	; 0x4bd
 8001ebc:	b33b      	cbz	r3, 8001f0e <HAL_PCD_Init+0x64>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ec4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ec6:	f413 7f80 	tst.w	r3, #256	; 0x100
  {
    hpcd->Init.dma_enable = 0U;
 8001eca:	bf04      	itt	eq
 8001ecc:	2300      	moveq	r3, #0
 8001ece:	612b      	streq	r3, [r5, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ed0:	6828      	ldr	r0, [r5, #0]
 8001ed2:	f000 feb6 	bl	8002c42 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed6:	462c      	mov	r4, r5
 8001ed8:	f854 6b10 	ldr.w	r6, [r4], #16
 8001edc:	46ec      	mov	ip, sp
 8001ede:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001eea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eee:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001ef2:	1d2b      	adds	r3, r5, #4
 8001ef4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ef6:	4630      	mov	r0, r6
 8001ef8:	f000 fe5e 	bl	8002bb8 <USB_CoreInit>
 8001efc:	4604      	mov	r4, r0
 8001efe:	b158      	cbz	r0, 8001f18 <HAL_PCD_Init+0x6e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f00:	2302      	movs	r3, #2
 8001f02:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f06:	2401      	movs	r4, #1
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8001f08:	4620      	mov	r0, r4
 8001f0a:	b00a      	add	sp, #40	; 0x28
 8001f0c:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8001f0e:	f880 34bc 	strb.w	r3, [r0, #1212]	; 0x4bc
    HAL_PCD_MspInit(hpcd);
 8001f12:	f7fe fccb 	bl	80008ac <HAL_PCD_MspInit>
 8001f16:	e7d2      	b.n	8001ebe <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f18:	2100      	movs	r1, #0
 8001f1a:	6828      	ldr	r0, [r5, #0]
 8001f1c:	f000 fe97 	bl	8002c4e <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f20:	6868      	ldr	r0, [r5, #4]
 8001f22:	b398      	cbz	r0, 8001f8c <HAL_PCD_Init+0xe2>
 8001f24:	4623      	mov	r3, r4
    hpcd->IN_ep[i].is_in = 1U;
 8001f26:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f2a:	2100      	movs	r1, #0
    hpcd->IN_ep[i].is_in = 1U;
 8001f2c:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001f30:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001f34:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001f38:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f3c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f40:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f44:	6491      	str	r1, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f46:	64d1      	str	r1, [r2, #76]	; 0x4c
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f48:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8001f4c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001f50:	6551      	str	r1, [r2, #84]	; 0x54
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f52:	3301      	adds	r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	4283      	cmp	r3, r0
 8001f58:	d3e8      	bcc.n	8001f2c <HAL_PCD_Init+0x82>
    hpcd->OUT_ep[i].is_in = 0U;
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001f64:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
    hpcd->OUT_ep[i].num = i;
 8001f68:	f883 427c 	strb.w	r4, [r3, #636]	; 0x27c
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f6c:	f883 2280 	strb.w	r2, [r3, #640]	; 0x280
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f70:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f74:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f78:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8001f7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001f80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f84:	3401      	adds	r4, #1
 8001f86:	b2e4      	uxtb	r4, r4
 8001f88:	4284      	cmp	r4, r0
 8001f8a:	d3e7      	bcc.n	8001f5c <HAL_PCD_Init+0xb2>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f8c:	462c      	mov	r4, r5
 8001f8e:	f854 6b10 	ldr.w	r6, [r4], #16
 8001f92:	46ec      	mov	ip, sp
 8001f94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f9c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001fa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fa4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8001fa8:	1d2b      	adds	r3, r5, #4
 8001faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fac:	4630      	mov	r0, r6
 8001fae:	f000 fed5 	bl	8002d5c <USB_DevInit>
 8001fb2:	4604      	mov	r4, r0
 8001fb4:	b120      	cbz	r0, 8001fc0 <HAL_PCD_Init+0x116>
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fbc:	2401      	movs	r4, #1
 8001fbe:	e7a3      	b.n	8001f08 <HAL_PCD_Init+0x5e>
  hpcd->USB_Address = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f885 34bd 	strb.w	r3, [r5, #1213]	; 0x4bd
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fcc:	6828      	ldr	r0, [r5, #0]
 8001fce:	f000 ff91 	bl	8002ef4 <USB_DevDisconnect>
  return HAL_OK;
 8001fd2:	e799      	b.n	8001f08 <HAL_PCD_Init+0x5e>
    return HAL_ERROR;
 8001fd4:	2401      	movs	r4, #1
 8001fd6:	e797      	b.n	8001f08 <HAL_PCD_Init+0x5e>

08001fd8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fd8:	2800      	cmp	r0, #0
 8001fda:	f000 81e1 	beq.w	80023a0 <HAL_RCC_OscConfig+0x3c8>
{
 8001fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fe6:	6803      	ldr	r3, [r0, #0]
 8001fe8:	f013 0f01 	tst.w	r3, #1
 8001fec:	d03b      	beq.n	8002066 <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	4b9f      	ldr	r3, [pc, #636]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d02c      	beq.n	8002054 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ffa:	4b9c      	ldr	r3, [pc, #624]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002002:	2b08      	cmp	r3, #8
 8002004:	d021      	beq.n	800204a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002006:	6863      	ldr	r3, [r4, #4]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d04f      	beq.n	80020ae <HAL_RCC_OscConfig+0xd6>
 800200e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002012:	d052      	beq.n	80020ba <HAL_RCC_OscConfig+0xe2>
 8002014:	4b95      	ldr	r3, [pc, #596]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002024:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002026:	6863      	ldr	r3, [r4, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d050      	beq.n	80020ce <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7fe ff12 	bl	8000e54 <HAL_GetTick>
 8002030:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4e8e      	ldr	r6, [pc, #568]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002034:	6833      	ldr	r3, [r6, #0]
 8002036:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800203a:	d114      	bne.n	8002066 <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe ff0a 	bl	8000e54 <HAL_GetTick>
 8002040:	1b40      	subs	r0, r0, r5
 8002042:	2864      	cmp	r0, #100	; 0x64
 8002044:	d9f6      	bls.n	8002034 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
 8002048:	e1b1      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800204a:	4b88      	ldr	r3, [pc, #544]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002052:	d0d8      	beq.n	8002006 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b85      	ldr	r3, [pc, #532]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800205c:	d003      	beq.n	8002066 <HAL_RCC_OscConfig+0x8e>
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 819f 	beq.w	80023a4 <HAL_RCC_OscConfig+0x3cc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002066:	6823      	ldr	r3, [r4, #0]
 8002068:	f013 0f02 	tst.w	r3, #2
 800206c:	d054      	beq.n	8002118 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f013 0f0c 	tst.w	r3, #12
 8002076:	d03e      	beq.n	80020f6 <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002078:	4b7c      	ldr	r3, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002080:	2b08      	cmp	r3, #8
 8002082:	d033      	beq.n	80020ec <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002084:	68e3      	ldr	r3, [r4, #12]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d068      	beq.n	800215c <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208a:	4b79      	ldr	r3, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 800208c:	2201      	movs	r2, #1
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fee0 	bl	8000e54 <HAL_GetTick>
 8002094:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002096:	4e75      	ldr	r6, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002098:	6833      	ldr	r3, [r6, #0]
 800209a:	f013 0f02 	tst.w	r3, #2
 800209e:	d154      	bne.n	800214a <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a0:	f7fe fed8 	bl	8000e54 <HAL_GetTick>
 80020a4:	1b40      	subs	r0, r0, r5
 80020a6:	2802      	cmp	r0, #2
 80020a8:	d9f6      	bls.n	8002098 <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 80020aa:	2003      	movs	r0, #3
 80020ac:	e17f      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ae:	4a6f      	ldr	r2, [pc, #444]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020b0:	6813      	ldr	r3, [r2, #0]
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e7b5      	b.n	8002026 <HAL_RCC_OscConfig+0x4e>
 80020ba:	4b6c      	ldr	r3, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e7ab      	b.n	8002026 <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 80020ce:	f7fe fec1 	bl	8000e54 <HAL_GetTick>
 80020d2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d4:	4e65      	ldr	r6, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020d6:	6833      	ldr	r3, [r6, #0]
 80020d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80020dc:	d0c3      	beq.n	8002066 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020de:	f7fe feb9 	bl	8000e54 <HAL_GetTick>
 80020e2:	1b40      	subs	r0, r0, r5
 80020e4:	2864      	cmp	r0, #100	; 0x64
 80020e6:	d9f6      	bls.n	80020d6 <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 80020e8:	2003      	movs	r0, #3
 80020ea:	e160      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ec:	4b5f      	ldr	r3, [pc, #380]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020f4:	d1c6      	bne.n	8002084 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b5d      	ldr	r3, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f013 0f02 	tst.w	r3, #2
 80020fe:	d003      	beq.n	8002108 <HAL_RCC_OscConfig+0x130>
 8002100:	68e3      	ldr	r3, [r4, #12]
 8002102:	2b01      	cmp	r3, #1
 8002104:	f040 8150 	bne.w	80023a8 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800210a:	6813      	ldr	r3, [r2, #0]
 800210c:	6921      	ldr	r1, [r4, #16]
 800210e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002112:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002116:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	f013 0f08 	tst.w	r3, #8
 800211e:	d042      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002120:	6963      	ldr	r3, [r4, #20]
 8002122:	b36b      	cbz	r3, 8002180 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002124:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 8002126:	2201      	movs	r2, #1
 8002128:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212c:	f7fe fe92 	bl	8000e54 <HAL_GetTick>
 8002130:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002132:	4e4e      	ldr	r6, [pc, #312]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002134:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002136:	f013 0f02 	tst.w	r3, #2
 800213a:	d134      	bne.n	80021a6 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800213c:	f7fe fe8a 	bl	8000e54 <HAL_GetTick>
 8002140:	1b40      	subs	r0, r0, r5
 8002142:	2802      	cmp	r0, #2
 8002144:	d9f6      	bls.n	8002134 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 8002146:	2003      	movs	r0, #3
 8002148:	e131      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214a:	4a48      	ldr	r2, [pc, #288]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800214c:	6813      	ldr	r3, [r2, #0]
 800214e:	6921      	ldr	r1, [r4, #16]
 8002150:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002154:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e7dd      	b.n	8002118 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800215c:	4b44      	ldr	r3, [pc, #272]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002162:	f7fe fe77 	bl	8000e54 <HAL_GetTick>
 8002166:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002168:	4e40      	ldr	r6, [pc, #256]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800216a:	6833      	ldr	r3, [r6, #0]
 800216c:	f013 0f02 	tst.w	r3, #2
 8002170:	d0d2      	beq.n	8002118 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002172:	f7fe fe6f 	bl	8000e54 <HAL_GetTick>
 8002176:	1b40      	subs	r0, r0, r5
 8002178:	2802      	cmp	r0, #2
 800217a:	d9f6      	bls.n	800216a <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
 800217e:	e116      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002180:	4b3b      	ldr	r3, [pc, #236]	; (8002270 <HAL_RCC_OscConfig+0x298>)
 8002182:	2200      	movs	r2, #0
 8002184:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7fe fe64 	bl	8000e54 <HAL_GetTick>
 800218c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218e:	4e37      	ldr	r6, [pc, #220]	; (800226c <HAL_RCC_OscConfig+0x294>)
 8002190:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002192:	f013 0f02 	tst.w	r3, #2
 8002196:	d006      	beq.n	80021a6 <HAL_RCC_OscConfig+0x1ce>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002198:	f7fe fe5c 	bl	8000e54 <HAL_GetTick>
 800219c:	1b40      	subs	r0, r0, r5
 800219e:	2802      	cmp	r0, #2
 80021a0:	d9f6      	bls.n	8002190 <HAL_RCC_OscConfig+0x1b8>
        {
          return HAL_TIMEOUT;
 80021a2:	2003      	movs	r0, #3
 80021a4:	e103      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	f013 0f04 	tst.w	r3, #4
 80021ac:	d076      	beq.n	800229c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b2f      	ldr	r3, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021b6:	d133      	bne.n	8002220 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b8:	2300      	movs	r3, #0
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80021be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
 80021c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021d0:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b28      	ldr	r3, [pc, #160]	; (8002274 <HAL_RCC_OscConfig+0x29c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80021da:	d023      	beq.n	8002224 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	68a3      	ldr	r3, [r4, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d034      	beq.n	800224c <HAL_RCC_OscConfig+0x274>
 80021e2:	2b05      	cmp	r3, #5
 80021e4:	d038      	beq.n	8002258 <HAL_RCC_OscConfig+0x280>
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_OscConfig+0x294>)
 80021e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	671a      	str	r2, [r3, #112]	; 0x70
 80021f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021f2:	f022 0204 	bic.w	r2, r2, #4
 80021f6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021f8:	68a3      	ldr	r3, [r4, #8]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d03c      	beq.n	8002278 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021fe:	f7fe fe29 	bl	8000e54 <HAL_GetTick>
 8002202:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4f19      	ldr	r7, [pc, #100]	; (800226c <HAL_RCC_OscConfig+0x294>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002206:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800220c:	f013 0f02 	tst.w	r3, #2
 8002210:	d143      	bne.n	800229a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002212:	f7fe fe1f 	bl	8000e54 <HAL_GetTick>
 8002216:	1b80      	subs	r0, r0, r6
 8002218:	4540      	cmp	r0, r8
 800221a:	d9f6      	bls.n	800220a <HAL_RCC_OscConfig+0x232>
        {
          return HAL_TIMEOUT;
 800221c:	2003      	movs	r0, #3
 800221e:	e0c6      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
    FlagStatus       pwrclkchanged = RESET;
 8002220:	2500      	movs	r5, #0
 8002222:	e7d6      	b.n	80021d2 <HAL_RCC_OscConfig+0x1fa>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002224:	4a13      	ldr	r2, [pc, #76]	; (8002274 <HAL_RCC_OscConfig+0x29c>)
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800222e:	f7fe fe11 	bl	8000e54 <HAL_GetTick>
 8002232:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002234:	4f0f      	ldr	r7, [pc, #60]	; (8002274 <HAL_RCC_OscConfig+0x29c>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	f413 7f80 	tst.w	r3, #256	; 0x100
 800223c:	d1ce      	bne.n	80021dc <HAL_RCC_OscConfig+0x204>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fe09 	bl	8000e54 <HAL_GetTick>
 8002242:	1b80      	subs	r0, r0, r6
 8002244:	2802      	cmp	r0, #2
 8002246:	d9f6      	bls.n	8002236 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8002248:	2003      	movs	r0, #3
 800224a:	e0b0      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800224c:	4a07      	ldr	r2, [pc, #28]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800224e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6713      	str	r3, [r2, #112]	; 0x70
 8002256:	e7cf      	b.n	80021f8 <HAL_RCC_OscConfig+0x220>
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <HAL_RCC_OscConfig+0x294>)
 800225a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800225c:	f042 0204 	orr.w	r2, r2, #4
 8002260:	671a      	str	r2, [r3, #112]	; 0x70
 8002262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	671a      	str	r2, [r3, #112]	; 0x70
 800226a:	e7c5      	b.n	80021f8 <HAL_RCC_OscConfig+0x220>
 800226c:	40023800 	.word	0x40023800
 8002270:	42470000 	.word	0x42470000
 8002274:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002278:	f7fe fdec 	bl	8000e54 <HAL_GetTick>
 800227c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800227e:	4f52      	ldr	r7, [pc, #328]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002280:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002286:	f013 0f02 	tst.w	r3, #2
 800228a:	d006      	beq.n	800229a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fde2 	bl	8000e54 <HAL_GetTick>
 8002290:	1b80      	subs	r0, r0, r6
 8002292:	4540      	cmp	r0, r8
 8002294:	d9f6      	bls.n	8002284 <HAL_RCC_OscConfig+0x2ac>
        {
          return HAL_TIMEOUT;
 8002296:	2003      	movs	r0, #3
 8002298:	e089      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800229a:	b9ed      	cbnz	r5, 80022d8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800229c:	69a3      	ldr	r3, [r4, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8084 	beq.w	80023ac <HAL_RCC_OscConfig+0x3d4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022a4:	4a48      	ldr	r2, [pc, #288]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 80022a6:	6892      	ldr	r2, [r2, #8]
 80022a8:	f002 020c 	and.w	r2, r2, #12
 80022ac:	2a08      	cmp	r2, #8
 80022ae:	d051      	beq.n	8002354 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d017      	beq.n	80022e4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b4:	4b45      	ldr	r3, [pc, #276]	; (80023cc <HAL_RCC_OscConfig+0x3f4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7fe fdcb 	bl	8000e54 <HAL_GetTick>
 80022be:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c0:	4d41      	ldr	r5, [pc, #260]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 80022c2:	682b      	ldr	r3, [r5, #0]
 80022c4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022c8:	d042      	beq.n	8002350 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7fe fdc3 	bl	8000e54 <HAL_GetTick>
 80022ce:	1b00      	subs	r0, r0, r4
 80022d0:	2802      	cmp	r0, #2
 80022d2:	d9f6      	bls.n	80022c2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80022d4:	2003      	movs	r0, #3
 80022d6:	e06a      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4a3b      	ldr	r2, [pc, #236]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 80022da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e0:	6413      	str	r3, [r2, #64]	; 0x40
 80022e2:	e7db      	b.n	800229c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 80022e4:	4b39      	ldr	r3, [pc, #228]	; (80023cc <HAL_RCC_OscConfig+0x3f4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80022ea:	f7fe fdb3 	bl	8000e54 <HAL_GetTick>
 80022ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f0:	4e35      	ldr	r6, [pc, #212]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 80022f2:	6833      	ldr	r3, [r6, #0]
 80022f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022f8:	d006      	beq.n	8002308 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fa:	f7fe fdab 	bl	8000e54 <HAL_GetTick>
 80022fe:	1b40      	subs	r0, r0, r5
 8002300:	2802      	cmp	r0, #2
 8002302:	d9f6      	bls.n	80022f2 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8002304:	2003      	movs	r0, #3
 8002306:	e052      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002308:	69e3      	ldr	r3, [r4, #28]
 800230a:	6a22      	ldr	r2, [r4, #32]
 800230c:	4313      	orrs	r3, r2
 800230e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002310:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002314:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002316:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800231a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800231c:	0852      	lsrs	r2, r2, #1
 800231e:	3a01      	subs	r2, #1
 8002320:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 8002326:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002328:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_RCC_OscConfig+0x3f4>)
 800232a:	2201      	movs	r2, #1
 800232c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800232e:	f7fe fd91 	bl	8000e54 <HAL_GetTick>
 8002332:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002334:	4d24      	ldr	r5, [pc, #144]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800233c:	d106      	bne.n	800234c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe fd89 	bl	8000e54 <HAL_GetTick>
 8002342:	1b00      	subs	r0, r0, r4
 8002344:	2802      	cmp	r0, #2
 8002346:	d9f6      	bls.n	8002336 <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8002348:	2003      	movs	r0, #3
 800234a:	e030      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800234c:	2000      	movs	r0, #0
 800234e:	e02e      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
 8002350:	2000      	movs	r0, #0
 8002352:	e02c      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002354:	2b01      	cmp	r3, #1
 8002356:	d02d      	beq.n	80023b4 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->PLLCFGR;
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCC_OscConfig+0x3f0>)
 800235a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002360:	69e2      	ldr	r2, [r4, #28]
 8002362:	4291      	cmp	r1, r2
 8002364:	d128      	bne.n	80023b8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002366:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800236a:	6a21      	ldr	r1, [r4, #32]
 800236c:	428a      	cmp	r2, r1
 800236e:	d125      	bne.n	80023bc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002370:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002372:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002376:	401a      	ands	r2, r3
 8002378:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800237c:	d120      	bne.n	80023c0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002382:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002384:	0852      	lsrs	r2, r2, #1
 8002386:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002388:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 800238c:	d11a      	bne.n	80023c4 <HAL_RCC_OscConfig+0x3ec>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800238e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002390:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002394:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
        return HAL_ERROR;
 8002398:	bf14      	ite	ne
 800239a:	2001      	movne	r0, #1
 800239c:	2000      	moveq	r0, #0
 800239e:	e006      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
    return HAL_ERROR;
 80023a0:	2001      	movs	r0, #1
}
 80023a2:	4770      	bx	lr
        return HAL_ERROR;
 80023a4:	2001      	movs	r0, #1
 80023a6:	e002      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
        return HAL_ERROR;
 80023a8:	2001      	movs	r0, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
  return HAL_OK;
 80023ac:	2000      	movs	r0, #0
}
 80023ae:	b002      	add	sp, #8
 80023b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80023b4:	2001      	movs	r0, #1
 80023b6:	e7fa      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
          return HAL_ERROR;
 80023b8:	2001      	movs	r0, #1
 80023ba:	e7f8      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
 80023bc:	2001      	movs	r0, #1
 80023be:	e7f6      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
 80023c0:	2001      	movs	r0, #1
 80023c2:	e7f4      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
 80023c4:	2001      	movs	r0, #1
 80023c6:	e7f2      	b.n	80023ae <HAL_RCC_OscConfig+0x3d6>
 80023c8:	40023800 	.word	0x40023800
 80023cc:	42470000 	.word	0x42470000

080023d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b04      	cmp	r3, #4
 80023dc:	d057      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0xbe>
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d157      	bne.n	8002492 <HAL_RCC_GetSysClockFreq+0xc2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80023f0:	d02a      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 80023f4:	6859      	ldr	r1, [r3, #4]
 80023f6:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 80023fa:	ea4f 114c 	mov.w	r1, ip, lsl #5
 80023fe:	ebb1 000c 	subs.w	r0, r1, ip
 8002402:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002406:	ea4f 138e 	mov.w	r3, lr, lsl #6
 800240a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800240e:	0181      	lsls	r1, r0, #6
 8002410:	1a09      	subs	r1, r1, r0
 8002412:	eb63 030e 	sbc.w	r3, r3, lr
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800241c:	00c9      	lsls	r1, r1, #3
 800241e:	eb11 0c0c 	adds.w	ip, r1, ip
 8002422:	f143 0300 	adc.w	r3, r3, #0
 8002426:	0259      	lsls	r1, r3, #9
 8002428:	2300      	movs	r3, #0
 800242a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800242e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002432:	f7fd ff2d 	bl	8000290 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800243e:	3301      	adds	r3, #1
 8002440:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002442:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002446:	e025      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xc4>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_GetSysClockFreq+0xc8>)
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8002450:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8002454:	ebb1 000c 	subs.w	r0, r1, ip
 8002458:	eb6e 0e0e 	sbc.w	lr, lr, lr
 800245c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002460:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002464:	0181      	lsls	r1, r0, #6
 8002466:	1a09      	subs	r1, r1, r0
 8002468:	eb63 030e 	sbc.w	r3, r3, lr
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002472:	00c9      	lsls	r1, r1, #3
 8002474:	eb11 0c0c 	adds.w	ip, r1, ip
 8002478:	f143 0300 	adc.w	r3, r3, #0
 800247c:	0299      	lsls	r1, r3, #10
 800247e:	2300      	movs	r3, #0
 8002480:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002484:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002488:	f7fd ff02 	bl	8000290 <__aeabi_uldivmod>
 800248c:	e7d3      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0x66>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800248e:	4803      	ldr	r0, [pc, #12]	; (800249c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002490:	e000      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xc4>
      sysclockfreq = HSI_VALUE;
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002494:	bd08      	pop	{r3, pc}
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800
 800249c:	007a1200 	.word	0x007a1200
 80024a0:	00f42400 	.word	0x00f42400

080024a4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80024a4:	2800      	cmp	r0, #0
 80024a6:	f000 809d 	beq.w	80025e4 <HAL_RCC_ClockConfig+0x140>
{
 80024aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024ae:	460d      	mov	r5, r1
 80024b0:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b2:	4b50      	ldr	r3, [pc, #320]	; (80025f4 <HAL_RCC_ClockConfig+0x150>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	428b      	cmp	r3, r1
 80024bc:	d208      	bcs.n	80024d0 <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	b2cb      	uxtb	r3, r1
 80024c0:	4a4c      	ldr	r2, [pc, #304]	; (80025f4 <HAL_RCC_ClockConfig+0x150>)
 80024c2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c4:	6813      	ldr	r3, [r2, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	428b      	cmp	r3, r1
 80024cc:	f040 808c 	bne.w	80025e8 <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d0:	6823      	ldr	r3, [r4, #0]
 80024d2:	f013 0f02 	tst.w	r3, #2
 80024d6:	d017      	beq.n	8002508 <HAL_RCC_ClockConfig+0x64>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	f013 0f04 	tst.w	r3, #4
 80024dc:	d004      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024de:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 80024e0:	6893      	ldr	r3, [r2, #8]
 80024e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024e6:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	f013 0f08 	tst.w	r3, #8
 80024ee:	d004      	beq.n	80024fa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024f0:	4a41      	ldr	r2, [pc, #260]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 80024f2:	6893      	ldr	r3, [r2, #8]
 80024f4:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024f8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fa:	4a3f      	ldr	r2, [pc, #252]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 80024fc:	6893      	ldr	r3, [r2, #8]
 80024fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002502:	68a1      	ldr	r1, [r4, #8]
 8002504:	430b      	orrs	r3, r1
 8002506:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	f013 0f01 	tst.w	r3, #1
 800250e:	d032      	beq.n	8002576 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002510:	6862      	ldr	r2, [r4, #4]
 8002512:	2a01      	cmp	r2, #1
 8002514:	d021      	beq.n	800255a <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002516:	1e93      	subs	r3, r2, #2
 8002518:	2b01      	cmp	r3, #1
 800251a:	d925      	bls.n	8002568 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	4b36      	ldr	r3, [pc, #216]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f013 0f02 	tst.w	r3, #2
 8002524:	d062      	beq.n	80025ec <HAL_RCC_ClockConfig+0x148>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4934      	ldr	r1, [pc, #208]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 8002528:	688b      	ldr	r3, [r1, #8]
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002532:	f7fe fc8f 	bl	8000e54 <HAL_GetTick>
 8002536:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002538:	4f2f      	ldr	r7, [pc, #188]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800253a:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	6862      	ldr	r2, [r4, #4]
 8002546:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800254a:	d014      	beq.n	8002576 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7fe fc82 	bl	8000e54 <HAL_GetTick>
 8002550:	1b80      	subs	r0, r0, r6
 8002552:	4540      	cmp	r0, r8
 8002554:	d9f3      	bls.n	800253e <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 8002556:	2003      	movs	r0, #3
 8002558:	e042      	b.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002562:	d1e0      	bne.n	8002526 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	e03b      	b.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002570:	d1d9      	bne.n	8002526 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8002572:	2001      	movs	r0, #1
 8002574:	e034      	b.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002576:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_RCC_ClockConfig+0x150>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 030f 	and.w	r3, r3, #15
 800257e:	42ab      	cmp	r3, r5
 8002580:	d907      	bls.n	8002592 <HAL_RCC_ClockConfig+0xee>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	b2ea      	uxtb	r2, r5
 8002584:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_ClockConfig+0x150>)
 8002586:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	42ab      	cmp	r3, r5
 8002590:	d12e      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f013 0f04 	tst.w	r3, #4
 8002598:	d006      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 800259c:	6893      	ldr	r3, [r2, #8]
 800259e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80025a2:	68e1      	ldr	r1, [r4, #12]
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	f013 0f08 	tst.w	r3, #8
 80025ae:	d007      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x11c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b0:	4a11      	ldr	r2, [pc, #68]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 80025b2:	6893      	ldr	r3, [r2, #8]
 80025b4:	6921      	ldr	r1, [r4, #16]
 80025b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c0:	f7ff ff06 	bl	80023d0 <HAL_RCC_GetSysClockFreq>
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <HAL_RCC_ClockConfig+0x154>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025cc:	4a0b      	ldr	r2, [pc, #44]	; (80025fc <HAL_RCC_ClockConfig+0x158>)
 80025ce:	5cd3      	ldrb	r3, [r2, r3]
 80025d0:	40d8      	lsrs	r0, r3
 80025d2:	4b0b      	ldr	r3, [pc, #44]	; (8002600 <HAL_RCC_ClockConfig+0x15c>)
 80025d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80025d6:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_ClockConfig+0x160>)
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	f7fe f9ab 	bl	8000934 <HAL_InitTick>
  return HAL_OK;
 80025de:	2000      	movs	r0, #0
}
 80025e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
}
 80025e6:	4770      	bx	lr
      return HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
 80025ea:	e7f9      	b.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
        return HAL_ERROR;
 80025ec:	2001      	movs	r0, #1
 80025ee:	e7f7      	b.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
 80025f0:	2001      	movs	r0, #1
 80025f2:	e7f5      	b.n	80025e0 <HAL_RCC_ClockConfig+0x13c>
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08010120 	.word	0x08010120
 8002600:	20000000 	.word	0x20000000
 8002604:	20000008 	.word	0x20000008

08002608 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002608:	4b01      	ldr	r3, [pc, #4]	; (8002610 <HAL_RCC_GetHCLKFreq+0x8>)
 800260a:	6818      	ldr	r0, [r3, #0]
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000000 	.word	0x20000000

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800261c:	4a03      	ldr	r2, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x18>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	4a03      	ldr	r2, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002622:	6810      	ldr	r0, [r2, #0]
}
 8002624:	40d8      	lsrs	r0, r3
 8002626:	4770      	bx	lr
 8002628:	40023800 	.word	0x40023800
 800262c:	08010130 	.word	0x08010130
 8002630:	20000000 	.word	0x20000000

08002634 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002634:	4b04      	ldr	r3, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800263c:	4a03      	ldr	r2, [pc, #12]	; (800264c <HAL_RCC_GetPCLK2Freq+0x18>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	4a03      	ldr	r2, [pc, #12]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002642:	6810      	ldr	r0, [r2, #0]
}
 8002644:	40d8      	lsrs	r0, r3
 8002646:	4770      	bx	lr
 8002648:	40023800 	.word	0x40023800
 800264c:	08010130 	.word	0x08010130
 8002650:	20000000 	.word	0x20000000

08002654 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002654:	230f      	movs	r3, #15
 8002656:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_RCC_GetClockConfig+0x34>)
 800265a:	689a      	ldr	r2, [r3, #8]
 800265c:	f002 0203 	and.w	r2, r2, #3
 8002660:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002668:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800266a:	689a      	ldr	r2, [r3, #8]
 800266c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002670:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	08db      	lsrs	r3, r3, #3
 8002676:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800267a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_GetClockConfig+0x38>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 030f 	and.w	r3, r3, #15
 8002684:	600b      	str	r3, [r1, #0]
}
 8002686:	4770      	bx	lr
 8002688:	40023800 	.word	0x40023800
 800268c:	40023c00 	.word	0x40023c00

08002690 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002690:	4770      	bx	lr
	...

08002694 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002694:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b01      	cmp	r3, #1
 800269c:	d137      	bne.n	800270e <HAL_TIM_Base_Start_IT+0x7a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026a4:	6802      	ldr	r2, [r0, #0]
 80026a6:	68d3      	ldr	r3, [r2, #12]
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_TIM_Base_Start_IT+0x84>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d020      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ba:	d01d      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026bc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d019      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d015      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d011      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026d4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80026d8:	4293      	cmp	r3, r2
 80026da:	d00d      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026dc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d009      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
 80026e4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d005      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026f4:	2000      	movs	r0, #0
 80026f6:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fe:	2a06      	cmp	r2, #6
 8002700:	d007      	beq.n	8002712 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800270a:	2000      	movs	r0, #0
 800270c:	4770      	bx	lr
    return HAL_ERROR;
 800270e:	2001      	movs	r0, #1
 8002710:	4770      	bx	lr
  return HAL_OK;
 8002712:	2000      	movs	r0, #0
}
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	40010000 	.word	0x40010000

0800271c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800271c:	4770      	bx	lr

0800271e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002720:	4770      	bx	lr

08002722 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002722:	4770      	bx	lr

08002724 <HAL_TIM_IRQHandler>:
{
 8002724:	b510      	push	{r4, lr}
 8002726:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002728:	6803      	ldr	r3, [r0, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	f012 0f02 	tst.w	r2, #2
 8002730:	d011      	beq.n	8002756 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	f012 0f02 	tst.w	r2, #2
 8002738:	d00d      	beq.n	8002756 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800273a:	f06f 0202 	mvn.w	r2, #2
 800273e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002740:	2301      	movs	r3, #1
 8002742:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002744:	6803      	ldr	r3, [r0, #0]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f013 0f03 	tst.w	r3, #3
 800274c:	d070      	beq.n	8002830 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800274e:	f7ff ffe6 	bl	800271e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	2300      	movs	r3, #0
 8002754:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	691a      	ldr	r2, [r3, #16]
 800275a:	f012 0f04 	tst.w	r2, #4
 800275e:	d012      	beq.n	8002786 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	f012 0f04 	tst.w	r2, #4
 8002766:	d00e      	beq.n	8002786 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	2302      	movs	r3, #2
 8002770:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	f413 7f40 	tst.w	r3, #768	; 0x300
 800277a:	d05f      	beq.n	800283c <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800277c:	4620      	mov	r0, r4
 800277e:	f7ff ffce 	bl	800271e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	2300      	movs	r3, #0
 8002784:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002786:	6823      	ldr	r3, [r4, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	f012 0f08 	tst.w	r2, #8
 800278e:	d012      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	f012 0f08 	tst.w	r2, #8
 8002796:	d00e      	beq.n	80027b6 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002798:	f06f 0208 	mvn.w	r2, #8
 800279c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279e:	2304      	movs	r3, #4
 80027a0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a2:	6823      	ldr	r3, [r4, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f013 0f03 	tst.w	r3, #3
 80027aa:	d04e      	beq.n	800284a <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff ffb6 	bl	800271e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	2300      	movs	r3, #0
 80027b4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	691a      	ldr	r2, [r3, #16]
 80027ba:	f012 0f10 	tst.w	r2, #16
 80027be:	d012      	beq.n	80027e6 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	f012 0f10 	tst.w	r2, #16
 80027c6:	d00e      	beq.n	80027e6 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c8:	f06f 0210 	mvn.w	r2, #16
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ce:	2308      	movs	r3, #8
 80027d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80027da:	d03d      	beq.n	8002858 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80027dc:	4620      	mov	r0, r4
 80027de:	f7ff ff9e 	bl	800271e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	2300      	movs	r3, #0
 80027e4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	f012 0f01 	tst.w	r2, #1
 80027ee:	d003      	beq.n	80027f8 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	f012 0f01 	tst.w	r2, #1
 80027f6:	d136      	bne.n	8002866 <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002808:	d134      	bne.n	8002874 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800280a:	6823      	ldr	r3, [r4, #0]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002812:	d003      	beq.n	800281c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	f012 0f40 	tst.w	r2, #64	; 0x40
 800281a:	d132      	bne.n	8002882 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800281c:	6823      	ldr	r3, [r4, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	f012 0f20 	tst.w	r2, #32
 8002824:	d003      	beq.n	800282e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	f012 0f20 	tst.w	r2, #32
 800282c:	d130      	bne.n	8002890 <HAL_TIM_IRQHandler+0x16c>
}
 800282e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002830:	f7ff ff74 	bl	800271c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002834:	4620      	mov	r0, r4
 8002836:	f7ff ff73 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
 800283a:	e78a      	b.n	8002752 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283c:	4620      	mov	r0, r4
 800283e:	f7ff ff6d 	bl	800271c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff ff6c 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
 8002848:	e79b      	b.n	8002782 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	4620      	mov	r0, r4
 800284c:	f7ff ff66 	bl	800271c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	4620      	mov	r0, r4
 8002852:	f7ff ff65 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
 8002856:	e7ac      	b.n	80027b2 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff ff5f 	bl	800271c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff ff5e 	bl	8002720 <HAL_TIM_PWM_PulseFinishedCallback>
 8002864:	e7bd      	b.n	80027e2 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002866:	f06f 0201 	mvn.w	r2, #1
 800286a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800286c:	4620      	mov	r0, r4
 800286e:	f7fd ffb5 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
 8002872:	e7c1      	b.n	80027f8 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002874:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002878:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800287a:	4620      	mov	r0, r4
 800287c:	f000 f8c1 	bl	8002a02 <HAL_TIMEx_BreakCallback>
 8002880:	e7c3      	b.n	800280a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002882:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002886:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002888:	4620      	mov	r0, r4
 800288a:	f7ff ff4a 	bl	8002722 <HAL_TIM_TriggerCallback>
 800288e:	e7c5      	b.n	800281c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002890:	f06f 0220 	mvn.w	r2, #32
 8002894:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002896:	4620      	mov	r0, r4
 8002898:	f000 f8b2 	bl	8002a00 <HAL_TIMEx_CommutCallback>
}
 800289c:	e7c7      	b.n	800282e <HAL_TIM_IRQHandler+0x10a>
	...

080028a0 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a0:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a2:	4a40      	ldr	r2, [pc, #256]	; (80029a4 <TIM_Base_SetConfig+0x104>)
 80028a4:	4290      	cmp	r0, r2
 80028a6:	d05d      	beq.n	8002964 <TIM_Base_SetConfig+0xc4>
 80028a8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80028ac:	d031      	beq.n	8002912 <TIM_Base_SetConfig+0x72>
 80028ae:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80028b2:	4290      	cmp	r0, r2
 80028b4:	d051      	beq.n	800295a <TIM_Base_SetConfig+0xba>
 80028b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028ba:	4290      	cmp	r0, r2
 80028bc:	d06d      	beq.n	800299a <TIM_Base_SetConfig+0xfa>
 80028be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028c2:	4290      	cmp	r0, r2
 80028c4:	d064      	beq.n	8002990 <TIM_Base_SetConfig+0xf0>
 80028c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80028ca:	4290      	cmp	r0, r2
 80028cc:	d033      	beq.n	8002936 <TIM_Base_SetConfig+0x96>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028ce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80028d2:	4290      	cmp	r0, r2
 80028d4:	d021      	beq.n	800291a <TIM_Base_SetConfig+0x7a>
 80028d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028da:	4290      	cmp	r0, r2
 80028dc:	d01d      	beq.n	800291a <TIM_Base_SetConfig+0x7a>
 80028de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028e2:	4290      	cmp	r0, r2
 80028e4:	d019      	beq.n	800291a <TIM_Base_SetConfig+0x7a>
 80028e6:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80028ea:	4290      	cmp	r0, r2
 80028ec:	d015      	beq.n	800291a <TIM_Base_SetConfig+0x7a>
 80028ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028f2:	4290      	cmp	r0, r2
 80028f4:	d011      	beq.n	800291a <TIM_Base_SetConfig+0x7a>
 80028f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fa:	4290      	cmp	r0, r2
 80028fc:	d00d      	beq.n	800291a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002902:	694a      	ldr	r2, [r1, #20]
 8002904:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002906:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002908:	688b      	ldr	r3, [r1, #8]
 800290a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	680b      	ldr	r3, [r1, #0]
 800290e:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002910:	e03b      	b.n	800298a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002916:	684a      	ldr	r2, [r1, #4]
 8002918:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800291a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800291e:	68ca      	ldr	r2, [r1, #12]
 8002920:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002926:	694a      	ldr	r2, [r1, #20]
 8002928:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800292a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800292c:	688b      	ldr	r3, [r1, #8]
 800292e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002930:	680b      	ldr	r3, [r1, #0]
 8002932:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002934:	e029      	b.n	800298a <TIM_Base_SetConfig+0xea>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800293a:	684a      	ldr	r2, [r1, #4]
 800293c:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800293e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002942:	68ca      	ldr	r2, [r1, #12]
 8002944:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002946:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800294a:	694a      	ldr	r2, [r1, #20]
 800294c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800294e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	688b      	ldr	r3, [r1, #8]
 8002952:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002954:	680b      	ldr	r3, [r1, #0]
 8002956:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	e015      	b.n	8002986 <TIM_Base_SetConfig+0xe6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800295a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800295e:	684a      	ldr	r2, [r1, #4]
 8002960:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002962:	e7da      	b.n	800291a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002968:	684a      	ldr	r2, [r1, #4]
 800296a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002970:	68ca      	ldr	r2, [r1, #12]
 8002972:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002978:	694a      	ldr	r2, [r1, #20]
 800297a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800297c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800297e:	688b      	ldr	r3, [r1, #8]
 8002980:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002982:	680b      	ldr	r3, [r1, #0]
 8002984:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002986:	690b      	ldr	r3, [r1, #16]
 8002988:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298a:	2301      	movs	r3, #1
 800298c:	6143      	str	r3, [r0, #20]
}
 800298e:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002994:	684a      	ldr	r2, [r1, #4]
 8002996:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002998:	e7bf      	b.n	800291a <TIM_Base_SetConfig+0x7a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800299a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800299e:	684a      	ldr	r2, [r1, #4]
 80029a0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a2:	e7ba      	b.n	800291a <TIM_Base_SetConfig+0x7a>
 80029a4:	40010000 	.word	0x40010000

080029a8 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80029a8:	b340      	cbz	r0, 80029fc <HAL_TIM_Base_Init+0x54>
{
 80029aa:	b510      	push	{r4, lr}
 80029ac:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80029ae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80029b2:	b1f3      	cbz	r3, 80029f2 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	2302      	movs	r3, #2
 80029b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ba:	4621      	mov	r1, r4
 80029bc:	f851 0b04 	ldr.w	r0, [r1], #4
 80029c0:	f7ff ff6e 	bl	80028a0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80029ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80029d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80029d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80029de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80029e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80029e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80029ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80029ee:	2000      	movs	r0, #0
}
 80029f0:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80029f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80029f6:	f7ff fe4b 	bl	8002690 <HAL_TIM_Base_MspInit>
 80029fa:	e7db      	b.n	80029b4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80029fc:	2001      	movs	r0, #1
}
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a00:	4770      	bx	lr

08002a02 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a02:	4770      	bx	lr

08002a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a08:	6802      	ldr	r2, [r0, #0]
 8002a0a:	6913      	ldr	r3, [r2, #16]
 8002a0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a10:	68c1      	ldr	r1, [r0, #12]
 8002a12:	430b      	orrs	r3, r1
 8002a14:	6113      	str	r3, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002a16:	6801      	ldr	r1, [r0, #0]
 8002a18:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a1a:	6883      	ldr	r3, [r0, #8]
 8002a1c:	6900      	ldr	r0, [r0, #16]
 8002a1e:	4303      	orrs	r3, r0
 8002a20:	6960      	ldr	r0, [r4, #20]
 8002a22:	4303      	orrs	r3, r0
 8002a24:	69e0      	ldr	r0, [r4, #28]
 8002a26:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002a28:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
 8002a2c:	f022 020c 	bic.w	r2, r2, #12
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a34:	6822      	ldr	r2, [r4, #0]
 8002a36:	6953      	ldr	r3, [r2, #20]
 8002a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a3c:	69a1      	ldr	r1, [r4, #24]
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	4a2e      	ldr	r2, [pc, #184]	; (8002b00 <UART_SetConfig+0xfc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d006      	beq.n	8002a58 <UART_SetConfig+0x54>
 8002a4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d002      	beq.n	8002a58 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a52:	f7ff fddf 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8002a56:	e001      	b.n	8002a5c <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a58:	f7ff fdec 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a5c:	69e3      	ldr	r3, [r4, #28]
 8002a5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a62:	d024      	beq.n	8002aae <UART_SetConfig+0xaa>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a64:	2100      	movs	r1, #0
 8002a66:	1803      	adds	r3, r0, r0
 8002a68:	4149      	adcs	r1, r1
 8002a6a:	181b      	adds	r3, r3, r0
 8002a6c:	f141 0100 	adc.w	r1, r1, #0
 8002a70:	00c9      	lsls	r1, r1, #3
 8002a72:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	1818      	adds	r0, r3, r0
 8002a7a:	6863      	ldr	r3, [r4, #4]
 8002a7c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002a80:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8002a84:	f141 0100 	adc.w	r1, r1, #0
 8002a88:	f7fd fc02 	bl	8000290 <__aeabi_uldivmod>
 8002a8c:	6821      	ldr	r1, [r4, #0]
 8002a8e:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <UART_SetConfig+0x100>)
 8002a90:	fba2 4300 	umull	r4, r3, r2, r0
 8002a94:	095b      	lsrs	r3, r3, #5
 8002a96:	2464      	movs	r4, #100	; 0x64
 8002a98:	fb04 0013 	mls	r0, r4, r3, r0
 8002a9c:	0100      	lsls	r0, r0, #4
 8002a9e:	3032      	adds	r0, #50	; 0x32
 8002aa0:	fba2 2000 	umull	r2, r0, r2, r0
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	eb03 1050 	add.w	r0, r3, r0, lsr #5
 8002aaa:	6088      	str	r0, [r1, #8]
  }
}
 8002aac:	bd38      	pop	{r3, r4, r5, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	1802      	adds	r2, r0, r0
 8002ab2:	eb43 0103 	adc.w	r1, r3, r3
 8002ab6:	1812      	adds	r2, r2, r0
 8002ab8:	f141 0100 	adc.w	r1, r1, #0
 8002abc:	00c9      	lsls	r1, r1, #3
 8002abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002ac2:	00d2      	lsls	r2, r2, #3
 8002ac4:	1810      	adds	r0, r2, r0
 8002ac6:	f141 0100 	adc.w	r1, r1, #0
 8002aca:	6862      	ldr	r2, [r4, #4]
 8002acc:	1892      	adds	r2, r2, r2
 8002ace:	415b      	adcs	r3, r3
 8002ad0:	f7fd fbde 	bl	8000290 <__aeabi_uldivmod>
 8002ad4:	4d0b      	ldr	r5, [pc, #44]	; (8002b04 <UART_SetConfig+0x100>)
 8002ad6:	fba5 3200 	umull	r3, r2, r5, r0
 8002ada:	0951      	lsrs	r1, r2, #5
 8002adc:	2364      	movs	r3, #100	; 0x64
 8002ade:	fb03 0311 	mls	r3, r3, r1, r0
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	3332      	adds	r3, #50	; 0x32
 8002ae6:	fba5 2303 	umull	r2, r3, r5, r3
 8002aea:	6820      	ldr	r0, [r4, #0]
 8002aec:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8002af0:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002afa:	4413      	add	r3, r2
 8002afc:	6083      	str	r3, [r0, #8]
 8002afe:	e7d5      	b.n	8002aac <UART_SetConfig+0xa8>
 8002b00:	40011000 	.word	0x40011000
 8002b04:	51eb851f 	.word	0x51eb851f

08002b08 <HAL_UART_Init>:
  if (huart == NULL)
 8002b08:	b358      	cbz	r0, 8002b62 <HAL_UART_Init+0x5a>
{
 8002b0a:	b510      	push	{r4, lr}
 8002b0c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b12:	b30b      	cbz	r3, 8002b58 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8002b14:	2324      	movs	r3, #36	; 0x24
 8002b16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002b1a:	6822      	ldr	r2, [r4, #0]
 8002b1c:	68d3      	ldr	r3, [r2, #12]
 8002b1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b22:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002b24:	4620      	mov	r0, r4
 8002b26:	f7ff ff6d 	bl	8002a04 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b2a:	6822      	ldr	r2, [r4, #0]
 8002b2c:	6913      	ldr	r3, [r2, #16]
 8002b2e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002b32:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b34:	6822      	ldr	r2, [r4, #0]
 8002b36:	6953      	ldr	r3, [r2, #20]
 8002b38:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002b3c:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002b3e:	6822      	ldr	r2, [r4, #0]
 8002b40:	68d3      	ldr	r3, [r2, #12]
 8002b42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002b46:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b48:	2000      	movs	r0, #0
 8002b4a:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002b52:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002b56:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002b58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002b5c:	f7fd fe6e 	bl	800083c <HAL_UART_MspInit>
 8002b60:	e7d8      	b.n	8002b14 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
}
 8002b64:	4770      	bx	lr
	...

08002b68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002b68:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9301      	str	r3, [sp, #4]
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8002b6e:	4a11      	ldr	r2, [pc, #68]	; (8002bb4 <USB_CoreReset+0x4c>)
    count++;
 8002b70:	9b01      	ldr	r3, [sp, #4]
 8002b72:	3301      	adds	r3, #1
 8002b74:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002b76:	9b01      	ldr	r3, [sp, #4]
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d815      	bhi.n	8002ba8 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002b7c:	6903      	ldr	r3, [r0, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	daf6      	bge.n	8002b70 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002b86:	6903      	ldr	r3, [r0, #16]
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6103      	str	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <USB_CoreReset+0x4c>)
    count++;
 8002b90:	9b01      	ldr	r3, [sp, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002b96:	9b01      	ldr	r3, [sp, #4]
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d808      	bhi.n	8002bae <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002b9c:	6903      	ldr	r3, [r0, #16]
 8002b9e:	f013 0f01 	tst.w	r3, #1
 8002ba2:	d1f5      	bne.n	8002b90 <USB_CoreReset+0x28>

  return HAL_OK;
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	e000      	b.n	8002baa <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8002ba8:	2003      	movs	r0, #3
}
 8002baa:	b002      	add	sp, #8
 8002bac:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002bae:	2003      	movs	r0, #3
 8002bb0:	e7fb      	b.n	8002baa <USB_CoreReset+0x42>
 8002bb2:	bf00      	nop
 8002bb4:	00030d40 	.word	0x00030d40

08002bb8 <USB_CoreInit>:
{
 8002bb8:	b084      	sub	sp, #16
 8002bba:	b510      	push	{r4, lr}
 8002bbc:	4604      	mov	r4, r0
 8002bbe:	a803      	add	r0, sp, #12
 8002bc0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bc4:	9b08      	ldr	r3, [sp, #32]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d11f      	bne.n	8002c0a <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd0:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bd2:	68e3      	ldr	r3, [r4, #12]
 8002bd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bdc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002bde:	68e3      	ldr	r3, [r4, #12]
 8002be0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002be4:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8002be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d009      	beq.n	8002c00 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 8002bec:	4620      	mov	r0, r4
 8002bee:	f7ff ffbb 	bl	8002b68 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8002bf2:	9b06      	ldr	r3, [sp, #24]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d01b      	beq.n	8002c30 <USB_CoreInit+0x78>
}
 8002bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bfc:	b004      	add	sp, #16
 8002bfe:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002c00:	68e3      	ldr	r3, [r4, #12]
 8002c02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c06:	60e3      	str	r3, [r4, #12]
 8002c08:	e7f0      	b.n	8002bec <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c0a:	68e3      	ldr	r3, [r4, #12]
 8002c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c10:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff ffa8 	bl	8002b68 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002c18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c1a:	b923      	cbnz	r3, 8002c26 <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c22:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c24:	e7e5      	b.n	8002bf2 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8002c2e:	e7e0      	b.n	8002bf2 <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c30:	68a3      	ldr	r3, [r4, #8]
 8002c32:	f043 0306 	orr.w	r3, r3, #6
 8002c36:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	f043 0320 	orr.w	r3, r3, #32
 8002c3e:	60a3      	str	r3, [r4, #8]
 8002c40:	e7da      	b.n	8002bf8 <USB_CoreInit+0x40>

08002c42 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c42:	6883      	ldr	r3, [r0, #8]
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6083      	str	r3, [r0, #8]
}
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	4770      	bx	lr

08002c4e <USB_SetCurrentMode>:
{
 8002c4e:	b570      	push	{r4, r5, r6, lr}
 8002c50:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002c52:	68c3      	ldr	r3, [r0, #12]
 8002c54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002c58:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002c5a:	2901      	cmp	r1, #1
 8002c5c:	d015      	beq.n	8002c8a <USB_SetCurrentMode+0x3c>
  else if (mode == USB_DEVICE_MODE)
 8002c5e:	bb29      	cbnz	r1, 8002cac <USB_SetCurrentMode+0x5e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002c60:	68c3      	ldr	r3, [r0, #12]
 8002c62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c66:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002c68:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002c6a:	2601      	movs	r6, #1
 8002c6c:	4630      	mov	r0, r6
 8002c6e:	f7fe f8f7 	bl	8000e60 <HAL_Delay>
      ms++;
 8002c72:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002c74:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002c76:	f013 0f01 	tst.w	r3, #1
 8002c7a:	d001      	beq.n	8002c80 <USB_SetCurrentMode+0x32>
 8002c7c:	2c32      	cmp	r4, #50	; 0x32
 8002c7e:	d1f5      	bne.n	8002c6c <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8002c80:	2c32      	cmp	r4, #50	; 0x32
 8002c82:	bf14      	ite	ne
 8002c84:	2000      	movne	r0, #0
 8002c86:	2001      	moveq	r0, #1
}
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002c8a:	68c3      	ldr	r3, [r0, #12]
 8002c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c90:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8002c92:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8002c94:	2601      	movs	r6, #1
 8002c96:	4630      	mov	r0, r6
 8002c98:	f7fe f8e2 	bl	8000e60 <HAL_Delay>
      ms++;
 8002c9c:	3401      	adds	r4, #1
  return ((USBx->GINTSTS) & 0x1U);
 8002c9e:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002ca0:	f013 0f01 	tst.w	r3, #1
 8002ca4:	d1ec      	bne.n	8002c80 <USB_SetCurrentMode+0x32>
 8002ca6:	2c32      	cmp	r4, #50	; 0x32
 8002ca8:	d1f5      	bne.n	8002c96 <USB_SetCurrentMode+0x48>
 8002caa:	e7e9      	b.n	8002c80 <USB_SetCurrentMode+0x32>
    return HAL_ERROR;
 8002cac:	2001      	movs	r0, #1
 8002cae:	e7eb      	b.n	8002c88 <USB_SetCurrentMode+0x3a>

08002cb0 <USB_FlushTxFifo>:
{
 8002cb0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cb6:	4a11      	ldr	r2, [pc, #68]	; (8002cfc <USB_FlushTxFifo+0x4c>)
    count++;
 8002cb8:	9b01      	ldr	r3, [sp, #4]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cbe:	9b01      	ldr	r3, [sp, #4]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d815      	bhi.n	8002cf0 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002cc4:	6903      	ldr	r3, [r0, #16]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	daf6      	bge.n	8002cb8 <USB_FlushTxFifo+0x8>
  count = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002cce:	0189      	lsls	r1, r1, #6
 8002cd0:	f041 0120 	orr.w	r1, r1, #32
 8002cd4:	6101      	str	r1, [r0, #16]
    if (count > 200000U)
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <USB_FlushTxFifo+0x4c>)
    count++;
 8002cd8:	9b01      	ldr	r3, [sp, #4]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002cde:	9b01      	ldr	r3, [sp, #4]
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d808      	bhi.n	8002cf6 <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ce4:	6903      	ldr	r3, [r0, #16]
 8002ce6:	f013 0f20 	tst.w	r3, #32
 8002cea:	d1f5      	bne.n	8002cd8 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8002cec:	2000      	movs	r0, #0
 8002cee:	e000      	b.n	8002cf2 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8002cf0:	2003      	movs	r0, #3
}
 8002cf2:	b002      	add	sp, #8
 8002cf4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002cf6:	2003      	movs	r0, #3
 8002cf8:	e7fb      	b.n	8002cf2 <USB_FlushTxFifo+0x42>
 8002cfa:	bf00      	nop
 8002cfc:	00030d40 	.word	0x00030d40

08002d00 <USB_FlushRxFifo>:
{
 8002d00:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d06:	4a10      	ldr	r2, [pc, #64]	; (8002d48 <USB_FlushRxFifo+0x48>)
    count++;
 8002d08:	9b01      	ldr	r3, [sp, #4]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d0e:	9b01      	ldr	r3, [sp, #4]
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d813      	bhi.n	8002d3c <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002d14:	6903      	ldr	r3, [r0, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	daf6      	bge.n	8002d08 <USB_FlushRxFifo+0x8>
  count = 0U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002d1e:	2310      	movs	r3, #16
 8002d20:	6103      	str	r3, [r0, #16]
    if (count > 200000U)
 8002d22:	4a09      	ldr	r2, [pc, #36]	; (8002d48 <USB_FlushRxFifo+0x48>)
    count++;
 8002d24:	9b01      	ldr	r3, [sp, #4]
 8002d26:	3301      	adds	r3, #1
 8002d28:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8002d2a:	9b01      	ldr	r3, [sp, #4]
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d808      	bhi.n	8002d42 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002d30:	6903      	ldr	r3, [r0, #16]
 8002d32:	f013 0f10 	tst.w	r3, #16
 8002d36:	d1f5      	bne.n	8002d24 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8002d38:	2000      	movs	r0, #0
 8002d3a:	e000      	b.n	8002d3e <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 8002d3c:	2003      	movs	r0, #3
}
 8002d3e:	b002      	add	sp, #8
 8002d40:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002d42:	2003      	movs	r0, #3
 8002d44:	e7fb      	b.n	8002d3e <USB_FlushRxFifo+0x3e>
 8002d46:	bf00      	nop
 8002d48:	00030d40 	.word	0x00030d40

08002d4c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002d4c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002d50:	4319      	orrs	r1, r3
 8002d52:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002d56:	2000      	movs	r0, #0
 8002d58:	4770      	bx	lr
	...

08002d5c <USB_DevInit>:
{
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d62:	4604      	mov	r4, r0
 8002d64:	a809      	add	r0, sp, #36	; 0x24
 8002d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002d6a:	460d      	mov	r5, r1
 8002d6c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 8002d6e:	2300      	movs	r3, #0
    USBx->DIEPTXF[i] = 0U;
 8002d70:	4619      	mov	r1, r3
 8002d72:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002d76:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8002d7a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	d1f7      	bne.n	8002d72 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8002d82:	bb26      	cbnz	r6, 8002dce <USB_DevInit+0x72>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d84:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d96:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d9a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d9e:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002da0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da6:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dae:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8002db2:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002db6:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d114      	bne.n	8002dea <USB_DevInit+0x8e>
    if (cfg.speed == USBD_HS_SPEED)
 8002dc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002dc2:	b96b      	cbnz	r3, 8002de0 <USB_DevInit+0x84>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	4620      	mov	r0, r4
 8002dc8:	f7ff ffc0 	bl	8002d4c <USB_SetDevSpeed>
 8002dcc:	e011      	b.n	8002df2 <USB_DevInit+0x96>
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002dd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ddc:	63a3      	str	r3, [r4, #56]	; 0x38
 8002dde:	e7e3      	b.n	8002da8 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002de0:	2101      	movs	r1, #1
 8002de2:	4620      	mov	r0, r4
 8002de4:	f7ff ffb2 	bl	8002d4c <USB_SetDevSpeed>
 8002de8:	e003      	b.n	8002df2 <USB_DevInit+0x96>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dea:	2103      	movs	r1, #3
 8002dec:	4620      	mov	r0, r4
 8002dee:	f7ff ffad 	bl	8002d4c <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002df2:	2110      	movs	r1, #16
 8002df4:	4620      	mov	r0, r4
 8002df6:	f7ff ff5b 	bl	8002cb0 <USB_FlushTxFifo>
 8002dfa:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ff7f 	bl	8002d00 <USB_FlushRxFifo>
 8002e02:	ea48 0800 	orr.w	r8, r8, r0
 8002e06:	f018 0fff 	tst.w	r8, #255	; 0xff
    ret = HAL_ERROR;
 8002e0a:	bf14      	ite	ne
 8002e0c:	f04f 0e01 	movne.w	lr, #1
 8002e10:	f04f 0e00 	moveq.w	lr, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e18:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e1a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e1c:	2d00      	cmp	r5, #0
 8002e1e:	d03f      	beq.n	8002ea0 <USB_DevInit+0x144>
 8002e20:	f504 6310 	add.w	r3, r4, #2304	; 0x900
 8002e24:	2200      	movs	r2, #0
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e26:	4694      	mov	ip, r2
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e28:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e2c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e30:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002e34:	e00a      	b.n	8002e4c <USB_DevInit+0xf0>
      if (i == 0U)
 8002e36:	b182      	cbz	r2, 8002e5a <USB_DevInit+0xfe>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e38:	f8c3 9000 	str.w	r9, [r3]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002e3c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002e40:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e44:	3201      	adds	r2, #1
 8002e46:	3320      	adds	r3, #32
 8002e48:	4295      	cmp	r5, r2
 8002e4a:	d009      	beq.n	8002e60 <USB_DevInit+0x104>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	6818      	ldr	r0, [r3, #0]
 8002e50:	2800      	cmp	r0, #0
 8002e52:	dbf0      	blt.n	8002e36 <USB_DevInit+0xda>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e54:	f8c3 c000 	str.w	ip, [r3]
 8002e58:	e7f0      	b.n	8002e3c <USB_DevInit+0xe0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e5a:	f8c3 a000 	str.w	sl, [r3]
 8002e5e:	e7ed      	b.n	8002e3c <USB_DevInit+0xe0>
 8002e60:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e64:	2200      	movs	r2, #0
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e66:	4694      	mov	ip, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e68:	f04f 4990 	mov.w	r9, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e6c:	f04f 6a00 	mov.w	sl, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e70:	f64f 387f 	movw	r8, #64383	; 0xfb7f
 8002e74:	e00a      	b.n	8002e8c <USB_DevInit+0x130>
      if (i == 0U)
 8002e76:	b182      	cbz	r2, 8002e9a <USB_DevInit+0x13e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002e78:	f8c3 9000 	str.w	r9, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e7c:	f8c1 c010 	str.w	ip, [r1, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e80:	f8c1 8008 	str.w	r8, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e84:	3201      	adds	r2, #1
 8002e86:	3320      	adds	r3, #32
 8002e88:	4295      	cmp	r5, r2
 8002e8a:	d009      	beq.n	8002ea0 <USB_DevInit+0x144>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	2800      	cmp	r0, #0
 8002e92:	dbf0      	blt.n	8002e76 <USB_DevInit+0x11a>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002e94:	f8c3 c000 	str.w	ip, [r3]
 8002e98:	e7f0      	b.n	8002e7c <USB_DevInit+0x120>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002e9a:	f8c3 a000 	str.w	sl, [r3]
 8002e9e:	e7ed      	b.n	8002e7c <USB_DevInit+0x120>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ea6:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002eac:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002eb0:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002eb4:	b91b      	cbnz	r3, 8002ebe <USB_DevInit+0x162>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002eb6:	69a3      	ldr	r3, [r4, #24]
 8002eb8:	f043 0310 	orr.w	r3, r3, #16
 8002ebc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002ebe:	69a2      	ldr	r2, [r4, #24]
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <USB_DevInit+0x194>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002ec6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002ec8:	b11b      	cbz	r3, 8002ed2 <USB_DevInit+0x176>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002eca:	69a3      	ldr	r3, [r4, #24]
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002ed2:	2e01      	cmp	r6, #1
 8002ed4:	d004      	beq.n	8002ee0 <USB_DevInit+0x184>
}
 8002ed6:	4670      	mov	r0, lr
 8002ed8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002edc:	b004      	add	sp, #16
 8002ede:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002ee0:	69a3      	ldr	r3, [r4, #24]
 8002ee2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	61a3      	str	r3, [r4, #24]
 8002eec:	e7f3      	b.n	8002ed6 <USB_DevInit+0x17a>
 8002eee:	bf00      	nop
 8002ef0:	803c3800 	.word	0x803c3800

08002ef4 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002ef4:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8002ef8:	f023 0303 	bic.w	r3, r3, #3
 8002efc:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002f00:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	4770      	bx	lr

08002f10 <ethernet_link_status_updated>:
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8002f10:	4770      	bx	lr
	...

08002f14 <MX_LWIP_Init>:
{
 8002f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f16:	b085      	sub	sp, #20
  IP_ADDRESS[0] = 169;
 8002f18:	4e37      	ldr	r6, [pc, #220]	; (8002ff8 <MX_LWIP_Init+0xe4>)
 8002f1a:	21a9      	movs	r1, #169	; 0xa9
 8002f1c:	7031      	strb	r1, [r6, #0]
  IP_ADDRESS[1] = 254;
 8002f1e:	22fe      	movs	r2, #254	; 0xfe
 8002f20:	7072      	strb	r2, [r6, #1]
  IP_ADDRESS[2] = 101;
 8002f22:	2365      	movs	r3, #101	; 0x65
 8002f24:	70b3      	strb	r3, [r6, #2]
  IP_ADDRESS[3] = 15;
 8002f26:	200f      	movs	r0, #15
 8002f28:	70f0      	strb	r0, [r6, #3]
  NETMASK_ADDRESS[0] = 255;
 8002f2a:	4d34      	ldr	r5, [pc, #208]	; (8002ffc <MX_LWIP_Init+0xe8>)
 8002f2c:	20ff      	movs	r0, #255	; 0xff
 8002f2e:	7028      	strb	r0, [r5, #0]
  NETMASK_ADDRESS[1] = 255;
 8002f30:	7068      	strb	r0, [r5, #1]
  NETMASK_ADDRESS[2] = 0;
 8002f32:	2700      	movs	r7, #0
 8002f34:	70af      	strb	r7, [r5, #2]
  NETMASK_ADDRESS[3] = 0;
 8002f36:	70ef      	strb	r7, [r5, #3]
  GATEWAY_ADDRESS[0] = 169;
 8002f38:	4c31      	ldr	r4, [pc, #196]	; (8003000 <MX_LWIP_Init+0xec>)
 8002f3a:	7021      	strb	r1, [r4, #0]
  GATEWAY_ADDRESS[1] = 254;
 8002f3c:	7062      	strb	r2, [r4, #1]
  GATEWAY_ADDRESS[2] = 101;
 8002f3e:	70a3      	strb	r3, [r4, #2]
  GATEWAY_ADDRESS[3] = 1;
 8002f40:	2301      	movs	r3, #1
 8002f42:	70e3      	strb	r3, [r4, #3]
  tcpip_init( NULL, NULL );
 8002f44:	4639      	mov	r1, r7
 8002f46:	4638      	mov	r0, r7
 8002f48:	f004 fc5c 	bl	8007804 <tcpip_init>
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8002f4c:	7833      	ldrb	r3, [r6, #0]
 8002f4e:	7872      	ldrb	r2, [r6, #1]
 8002f50:	f896 c003 	ldrb.w	ip, [r6, #3]
 8002f54:	78b0      	ldrb	r0, [r6, #2]
 8002f56:	492b      	ldr	r1, [pc, #172]	; (8003004 <MX_LWIP_Init+0xf0>)
 8002f58:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8002f5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002f60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002f64:	600b      	str	r3, [r1, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8002f66:	782b      	ldrb	r3, [r5, #0]
 8002f68:	7868      	ldrb	r0, [r5, #1]
 8002f6a:	78ee      	ldrb	r6, [r5, #3]
 8002f6c:	78ad      	ldrb	r5, [r5, #2]
 8002f6e:	4a26      	ldr	r2, [pc, #152]	; (8003008 <MX_LWIP_Init+0xf4>)
 8002f70:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8002f74:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002f78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002f7c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8002f7e:	7820      	ldrb	r0, [r4, #0]
 8002f80:	7865      	ldrb	r5, [r4, #1]
 8002f82:	78e6      	ldrb	r6, [r4, #3]
 8002f84:	78a4      	ldrb	r4, [r4, #2]
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <MX_LWIP_Init+0xf8>)
 8002f88:	ea40 6006 	orr.w	r0, r0, r6, lsl #24
 8002f8c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8002f90:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002f94:	6018      	str	r0, [r3, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8002f96:	4c1e      	ldr	r4, [pc, #120]	; (8003010 <MX_LWIP_Init+0xfc>)
 8002f98:	481e      	ldr	r0, [pc, #120]	; (8003014 <MX_LWIP_Init+0x100>)
 8002f9a:	9002      	str	r0, [sp, #8]
 8002f9c:	481e      	ldr	r0, [pc, #120]	; (8003018 <MX_LWIP_Init+0x104>)
 8002f9e:	9001      	str	r0, [sp, #4]
 8002fa0:	9700      	str	r7, [sp, #0]
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f005 f89a 	bl	80080dc <netif_add>
  netif_set_default(&gnetif);
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f005 f92f 	bl	800820c <netif_set_default>
  if (netif_is_link_up(&gnetif))
 8002fae:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8002fb2:	f013 0f04 	tst.w	r3, #4
 8002fb6:	d01b      	beq.n	8002ff0 <MX_LWIP_Init+0xdc>
    netif_set_up(&gnetif);
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f005 f92d 	bl	8008218 <netif_set_up>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8002fbe:	4d14      	ldr	r5, [pc, #80]	; (8003010 <MX_LWIP_Init+0xfc>)
 8002fc0:	4916      	ldr	r1, [pc, #88]	; (800301c <MX_LWIP_Init+0x108>)
 8002fc2:	4628      	mov	r0, r5
 8002fc4:	f005 f9a8 	bl	8008318 <netif_set_link_callback>
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8002fc8:	4c15      	ldr	r4, [pc, #84]	; (8003020 <MX_LWIP_Init+0x10c>)
 8002fca:	2220      	movs	r2, #32
 8002fcc:	2100      	movs	r1, #0
 8002fce:	1d20      	adds	r0, r4, #4
 8002fd0:	f00b fef3 	bl	800edba <memset>
  attributes.name = "EthLink";
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <MX_LWIP_Init+0x110>)
 8002fd6:	6023      	str	r3, [r4, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8002fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fdc:	6163      	str	r3, [r4, #20]
  attributes.priority = osPriorityBelowNormal;
 8002fde:	2310      	movs	r3, #16
 8002fe0:	61a3      	str	r3, [r4, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	4629      	mov	r1, r5
 8002fe6:	4810      	ldr	r0, [pc, #64]	; (8003028 <MX_LWIP_Init+0x114>)
 8002fe8:	f000 fb82 	bl	80036f0 <osThreadNew>
}
 8002fec:	b005      	add	sp, #20
 8002fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8002ff0:	4807      	ldr	r0, [pc, #28]	; (8003010 <MX_LWIP_Init+0xfc>)
 8002ff2:	f005 f92f 	bl	8008254 <netif_set_down>
 8002ff6:	e7e2      	b.n	8002fbe <MX_LWIP_Init+0xaa>
 8002ff8:	2000078c 	.word	0x2000078c
 8002ffc:	20000790 	.word	0x20000790
 8003000:	20000788 	.word	0x20000788
 8003004:	200007f0 	.word	0x200007f0
 8003008:	200007f4 	.word	0x200007f4
 800300c:	200007ec 	.word	0x200007ec
 8003010:	200007b8 	.word	0x200007b8
 8003014:	08007765 	.word	0x08007765
 8003018:	080031f5 	.word	0x080031f5
 800301c:	08002f11 	.word	0x08002f11
 8003020:	20000794 	.word	0x20000794
 8003024:	08010164 	.word	0x08010164
 8003028:	08003515 	.word	0x08003515

0800302c <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr

08003030 <ethernetif_input>:
{
 8003030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003034:	b083      	sub	sp, #12
 8003036:	4606      	mov	r6, r0
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003038:	4d12      	ldr	r5, [pc, #72]	; (8003084 <ethernetif_input+0x54>)
    HAL_ETH_ReadData(&heth, (void **)&p);
 800303a:	4f13      	ldr	r7, [pc, #76]	; (8003088 <ethernetif_input+0x58>)
 800303c:	e010      	b.n	8003060 <ethernetif_input+0x30>
 800303e:	a901      	add	r1, sp, #4
 8003040:	4638      	mov	r0, r7
 8003042:	f7fe fbb3 	bl	80017ac <HAL_ETH_ReadData>
  return p;
 8003046:	9c01      	ldr	r4, [sp, #4]
        if (p != NULL)
 8003048:	b154      	cbz	r4, 8003060 <ethernetif_input+0x30>
          if (netif->input( p, netif) != ERR_OK )
 800304a:	6933      	ldr	r3, [r6, #16]
 800304c:	4631      	mov	r1, r6
 800304e:	4620      	mov	r0, r4
 8003050:	4798      	blx	r3
 8003052:	b990      	cbnz	r0, 800307a <ethernetif_input+0x4a>
  struct pbuf *p = NULL;
 8003054:	f8cd 9004 	str.w	r9, [sp, #4]
  if(RxAllocStatus == RX_ALLOC_OK)
 8003058:	f898 3000 	ldrb.w	r3, [r8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0ee      	beq.n	800303e <ethernetif_input+0xe>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003060:	f04f 34ff 	mov.w	r4, #4294967295
 8003064:	4621      	mov	r1, r4
 8003066:	6828      	ldr	r0, [r5, #0]
 8003068:	f000 fc8a 	bl	8003980 <osSemaphoreAcquire>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1f9      	bne.n	8003064 <ethernetif_input+0x34>
  struct pbuf *p = NULL;
 8003070:	f04f 0900 	mov.w	r9, #0
  if(RxAllocStatus == RX_ALLOC_OK)
 8003074:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800308c <ethernetif_input+0x5c>
 8003078:	e7ec      	b.n	8003054 <ethernetif_input+0x24>
            pbuf_free(p);
 800307a:	4620      	mov	r0, r4
 800307c:	f005 fa44 	bl	8008508 <pbuf_free>
      } while(p!=NULL);
 8003080:	e7e8      	b.n	8003054 <ethernetif_input+0x24>
 8003082:	bf00      	nop
 8003084:	2000095c 	.word	0x2000095c
 8003088:	2000099c 	.word	0x2000099c
 800308c:	20000958 	.word	0x20000958

08003090 <low_level_output>:
{
 8003090:	b530      	push	{r4, r5, lr}
 8003092:	b08d      	sub	sp, #52	; 0x34
 8003094:	460c      	mov	r4, r1
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003096:	2230      	movs	r2, #48	; 0x30
 8003098:	2100      	movs	r1, #0
 800309a:	4668      	mov	r0, sp
 800309c:	f00b fe8d 	bl	800edba <memset>
  for(q = p; q != NULL; q = q->next)
 80030a0:	b32c      	cbz	r4, 80030ee <low_level_output+0x5e>
    Txbuffer[i].buffer = q->payload;
 80030a2:	6863      	ldr	r3, [r4, #4]
 80030a4:	9300      	str	r3, [sp, #0]
    Txbuffer[i].len = q->len;
 80030a6:	8963      	ldrh	r3, [r4, #10]
 80030a8:	9301      	str	r3, [sp, #4]
    if(i>0)
 80030aa:	a803      	add	r0, sp, #12
  for(q = p; q != NULL; q = q->next)
 80030ac:	4621      	mov	r1, r4
    Txbuffer[i].len = q->len;
 80030ae:	2301      	movs	r3, #1
      Txbuffer[i].next = NULL;
 80030b0:	2500      	movs	r5, #0
 80030b2:	e002      	b.n	80030ba <low_level_output+0x2a>
 80030b4:	300c      	adds	r0, #12
 80030b6:	3301      	adds	r3, #1
{
 80030b8:	4611      	mov	r1, r2
    if(q->next == NULL)
 80030ba:	680a      	ldr	r2, [r1, #0]
 80030bc:	b192      	cbz	r2, 80030e4 <low_level_output+0x54>
    if(i >= ETH_TX_DESC_CNT)
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d030      	beq.n	8003124 <low_level_output+0x94>
    Txbuffer[i].buffer = q->payload;
 80030c2:	6851      	ldr	r1, [r2, #4]
 80030c4:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 80030c8:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
 80030cc:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 80030d0:	f84c 1c30 	str.w	r1, [ip, #-48]
    Txbuffer[i].len = q->len;
 80030d4:	8951      	ldrh	r1, [r2, #10]
 80030d6:	f84c 1c2c 	str.w	r1, [ip, #-44]
    if(i>0)
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0ea      	beq.n	80030b4 <low_level_output+0x24>
      Txbuffer[i-1].next = &Txbuffer[i];
 80030de:	f840 0c04 	str.w	r0, [r0, #-4]
 80030e2:	e7e7      	b.n	80030b4 <low_level_output+0x24>
      Txbuffer[i].next = NULL;
 80030e4:	f840 5c04 	str.w	r5, [r0, #-4]
  for(q = p; q != NULL; q = q->next)
 80030e8:	680a      	ldr	r2, [r1, #0]
 80030ea:	2a00      	cmp	r2, #0
 80030ec:	d1e7      	bne.n	80030be <low_level_output+0x2e>
  TxConfig.Length = p->tot_len;
 80030ee:	4d0f      	ldr	r5, [pc, #60]	; (800312c <low_level_output+0x9c>)
 80030f0:	8923      	ldrh	r3, [r4, #8]
 80030f2:	606b      	str	r3, [r5, #4]
  TxConfig.TxBuffer = Txbuffer;
 80030f4:	f8c5 d008 	str.w	sp, [r5, #8]
  TxConfig.pData = p;
 80030f8:	636c      	str	r4, [r5, #52]	; 0x34
  pbuf_ref(p);
 80030fa:	4620      	mov	r0, r4
 80030fc:	f005 fb88 	bl	8008810 <pbuf_ref>
  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8003100:	4629      	mov	r1, r5
 8003102:	480b      	ldr	r0, [pc, #44]	; (8003130 <low_level_output+0xa0>)
 8003104:	f7fe fb16 	bl	8001734 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003108:	4d0a      	ldr	r5, [pc, #40]	; (8003134 <low_level_output+0xa4>)
 800310a:	f04f 34ff 	mov.w	r4, #4294967295
 800310e:	4621      	mov	r1, r4
 8003110:	6828      	ldr	r0, [r5, #0]
 8003112:	f000 fc35 	bl	8003980 <osSemaphoreAcquire>
 8003116:	2800      	cmp	r0, #0
 8003118:	d1f9      	bne.n	800310e <low_level_output+0x7e>
  HAL_ETH_ReleaseTxPacket(&heth);
 800311a:	4805      	ldr	r0, [pc, #20]	; (8003130 <low_level_output+0xa0>)
 800311c:	f7fe fbe3 	bl	80018e6 <HAL_ETH_ReleaseTxPacket>
  return errval;
 8003120:	2000      	movs	r0, #0
 8003122:	e001      	b.n	8003128 <low_level_output+0x98>
      return ERR_IF;
 8003124:	f06f 000b 	mvn.w	r0, #11
}
 8003128:	b00d      	add	sp, #52	; 0x34
 800312a:	bd30      	pop	{r4, r5, pc}
 800312c:	20000960 	.word	0x20000960
 8003130:	2000099c 	.word	0x2000099c
 8003134:	20000998 	.word	0x20000998

08003138 <pbuf_free_custom>:
{
 8003138:	b508      	push	{r3, lr}
 800313a:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800313c:	4807      	ldr	r0, [pc, #28]	; (800315c <pbuf_free_custom+0x24>)
 800313e:	f004 ff0b 	bl	8007f58 <memp_free_pool>
  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <pbuf_free_custom+0x28>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d000      	beq.n	800314c <pbuf_free_custom+0x14>
}
 800314a:	bd08      	pop	{r3, pc}
    RxAllocStatus = RX_ALLOC_OK;
 800314c:	4b04      	ldr	r3, [pc, #16]	; (8003160 <pbuf_free_custom+0x28>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <pbuf_free_custom+0x2c>)
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f000 fc47 	bl	80039e8 <osSemaphoreRelease>
}
 800315a:	e7f6      	b.n	800314a <pbuf_free_custom+0x12>
 800315c:	080101c8 	.word	0x080101c8
 8003160:	20000958 	.word	0x20000958
 8003164:	2000095c 	.word	0x2000095c

08003168 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8003168:	b508      	push	{r3, lr}
  return HAL_GetTick();
 800316a:	f7fd fe73 	bl	8000e54 <HAL_GetTick>
}
 800316e:	bd08      	pop	{r3, pc}

08003170 <ETH_PHY_IO_Init>:
{
 8003170:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&heth);
 8003172:	4802      	ldr	r0, [pc, #8]	; (800317c <ETH_PHY_IO_Init+0xc>)
 8003174:	f7fe fd38 	bl	8001be8 <HAL_ETH_SetMDIOClockRange>
}
 8003178:	2000      	movs	r0, #0
 800317a:	bd08      	pop	{r3, pc}
 800317c:	2000099c 	.word	0x2000099c

08003180 <ETH_PHY_IO_ReadReg>:
{
 8003180:	b508      	push	{r3, lr}
 8003182:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8003184:	460a      	mov	r2, r1
 8003186:	4601      	mov	r1, r0
 8003188:	4803      	ldr	r0, [pc, #12]	; (8003198 <ETH_PHY_IO_ReadReg+0x18>)
 800318a:	f7fe fc5f 	bl	8001a4c <HAL_ETH_ReadPHYRegister>
 800318e:	3800      	subs	r0, #0
 8003190:	bf18      	it	ne
 8003192:	2001      	movne	r0, #1
}
 8003194:	4240      	negs	r0, r0
 8003196:	bd08      	pop	{r3, pc}
 8003198:	2000099c 	.word	0x2000099c

0800319c <ETH_PHY_IO_WriteReg>:
{
 800319c:	b508      	push	{r3, lr}
 800319e:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80031a0:	460a      	mov	r2, r1
 80031a2:	4601      	mov	r1, r0
 80031a4:	4803      	ldr	r0, [pc, #12]	; (80031b4 <ETH_PHY_IO_WriteReg+0x18>)
 80031a6:	f7fe fc77 	bl	8001a98 <HAL_ETH_WritePHYRegister>
 80031aa:	3800      	subs	r0, #0
 80031ac:	bf18      	it	ne
 80031ae:	2001      	movne	r0, #1
}
 80031b0:	4240      	negs	r0, r0
 80031b2:	bd08      	pop	{r3, pc}
 80031b4:	2000099c 	.word	0x2000099c

080031b8 <HAL_ETH_RxCpltCallback>:
{
 80031b8:	b508      	push	{r3, lr}
  osSemaphoreRelease(RxPktSemaphore);
 80031ba:	4b02      	ldr	r3, [pc, #8]	; (80031c4 <HAL_ETH_RxCpltCallback+0xc>)
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	f000 fc13 	bl	80039e8 <osSemaphoreRelease>
}
 80031c2:	bd08      	pop	{r3, pc}
 80031c4:	2000095c 	.word	0x2000095c

080031c8 <HAL_ETH_TxCpltCallback>:
{
 80031c8:	b508      	push	{r3, lr}
  osSemaphoreRelease(TxPktSemaphore);
 80031ca:	4b02      	ldr	r3, [pc, #8]	; (80031d4 <HAL_ETH_TxCpltCallback+0xc>)
 80031cc:	6818      	ldr	r0, [r3, #0]
 80031ce:	f000 fc0b 	bl	80039e8 <osSemaphoreRelease>
}
 80031d2:	bd08      	pop	{r3, pc}
 80031d4:	20000998 	.word	0x20000998

080031d8 <HAL_ETH_ErrorCallback>:
{
 80031d8:	b508      	push	{r3, lr}
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80031da:	f7fe fd3f 	bl	8001c5c <HAL_ETH_GetDMAError>
 80031de:	f010 0f80 	tst.w	r0, #128	; 0x80
 80031e2:	d100      	bne.n	80031e6 <HAL_ETH_ErrorCallback+0xe>
}
 80031e4:	bd08      	pop	{r3, pc}
     osSemaphoreRelease(RxPktSemaphore);
 80031e6:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <HAL_ETH_ErrorCallback+0x18>)
 80031e8:	6818      	ldr	r0, [r3, #0]
 80031ea:	f000 fbfd 	bl	80039e8 <osSemaphoreRelease>
}
 80031ee:	e7f9      	b.n	80031e4 <HAL_ETH_ErrorCallback+0xc>
 80031f0:	2000095c 	.word	0x2000095c

080031f4 <ethernetif_init>:
{
 80031f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f8:	b0a4      	sub	sp, #144	; 0x90
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80031fa:	4604      	mov	r4, r0
 80031fc:	2800      	cmp	r0, #0
 80031fe:	f000 80b0 	beq.w	8003362 <ethernetif_init+0x16e>
  netif->name[0] = IFNAME0;
 8003202:	2373      	movs	r3, #115	; 0x73
 8003204:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8003208:	2374      	movs	r3, #116	; 0x74
 800320a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  netif->output = etharp_output;
 800320e:	4b63      	ldr	r3, [pc, #396]	; (800339c <ethernetif_init+0x1a8>)
 8003210:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 8003212:	4b63      	ldr	r3, [pc, #396]	; (80033a0 <ethernetif_init+0x1ac>)
 8003214:	61a3      	str	r3, [r4, #24]
  ETH_MACConfigTypeDef MACConf = {0};
 8003216:	2264      	movs	r2, #100	; 0x64
 8003218:	2100      	movs	r1, #0
 800321a:	a80b      	add	r0, sp, #44	; 0x2c
 800321c:	f00b fdcd 	bl	800edba <memset>
  heth.Instance = ETH;
 8003220:	4e60      	ldr	r6, [pc, #384]	; (80033a4 <ethernetif_init+0x1b0>)
 8003222:	4b61      	ldr	r3, [pc, #388]	; (80033a8 <ethernetif_init+0x1b4>)
 8003224:	6033      	str	r3, [r6, #0]
  MACAddr[0] = 0x00;
 8003226:	2500      	movs	r5, #0
 8003228:	f88d 5000 	strb.w	r5, [sp]
  MACAddr[1] = 0x80;
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	f88d 3001 	strb.w	r3, [sp, #1]
  MACAddr[2] = 0xE1;
 8003232:	23e1      	movs	r3, #225	; 0xe1
 8003234:	f88d 3002 	strb.w	r3, [sp, #2]
  MACAddr[3] = 0x00;
 8003238:	f88d 5003 	strb.w	r5, [sp, #3]
  MACAddr[4] = 0x00;
 800323c:	f88d 5004 	strb.w	r5, [sp, #4]
  MACAddr[5] = 0x00;
 8003240:	f88d 5005 	strb.w	r5, [sp, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8003244:	f8c6 d004 	str.w	sp, [r6, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003248:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800324c:	60b3      	str	r3, [r6, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800324e:	4b57      	ldr	r3, [pc, #348]	; (80033ac <ethernetif_init+0x1b8>)
 8003250:	60f3      	str	r3, [r6, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003252:	4b57      	ldr	r3, [pc, #348]	; (80033b0 <ethernetif_init+0x1bc>)
 8003254:	6133      	str	r3, [r6, #16]
  heth.Init.RxBuffLen = 1536;
 8003256:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800325a:	6173      	str	r3, [r6, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800325c:	4630      	mov	r0, r6
 800325e:	f7fe f86f 	bl	8001340 <HAL_ETH_Init>
 8003262:	4607      	mov	r7, r0
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003264:	f8df 8174 	ldr.w	r8, [pc, #372]	; 80033dc <ethernetif_init+0x1e8>
 8003268:	2234      	movs	r2, #52	; 0x34
 800326a:	4629      	mov	r1, r5
 800326c:	f108 0004 	add.w	r0, r8, #4
 8003270:	f00b fda3 	bl	800edba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003274:	2321      	movs	r3, #33	; 0x21
 8003276:	f8c8 3000 	str.w	r3, [r8]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800327a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800327e:	f8c8 3014 	str.w	r3, [r8, #20]
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003282:	484c      	ldr	r0, [pc, #304]	; (80033b4 <ethernetif_init+0x1c0>)
 8003284:	f004 fe14 	bl	8007eb0 <memp_init_pool>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003288:	2306      	movs	r3, #6
 800328a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800328e:	6873      	ldr	r3, [r6, #4]
 8003290:	781a      	ldrb	r2, [r3, #0]
 8003292:	f884 2026 	strb.w	r2, [r4, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003296:	785a      	ldrb	r2, [r3, #1]
 8003298:	f884 2027 	strb.w	r2, [r4, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800329c:	789a      	ldrb	r2, [r3, #2]
 800329e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80032a2:	78da      	ldrb	r2, [r3, #3]
 80032a4:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80032a8:	791a      	ldrb	r2, [r3, #4]
 80032aa:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80032ae:	795b      	ldrb	r3, [r3, #5]
 80032b0:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
  netif->mtu = ETH_MAX_PAYLOAD;
 80032b4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80032b8:	84a3      	strh	r3, [r4, #36]	; 0x24
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80032ba:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80032be:	f043 030a 	orr.w	r3, r3, #10
 80032c2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80032c6:	462a      	mov	r2, r5
 80032c8:	2101      	movs	r1, #1
 80032ca:	4608      	mov	r0, r1
 80032cc:	f000 fafa 	bl	80038c4 <osSemaphoreNew>
 80032d0:	4b39      	ldr	r3, [pc, #228]	; (80033b8 <ethernetif_init+0x1c4>)
 80032d2:	6018      	str	r0, [r3, #0]
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 80032d4:	462a      	mov	r2, r5
 80032d6:	2101      	movs	r1, #1
 80032d8:	4608      	mov	r0, r1
 80032da:	f000 faf3 	bl	80038c4 <osSemaphoreNew>
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <ethernetif_init+0x1c8>)
 80032e0:	6018      	str	r0, [r3, #0]
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80032e2:	2220      	movs	r2, #32
 80032e4:	4629      	mov	r1, r5
 80032e6:	a803      	add	r0, sp, #12
 80032e8:	f00b fd67 	bl	800edba <memset>
  attributes.name = "EthIf";
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <ethernetif_init+0x1cc>)
 80032ee:	9302      	str	r3, [sp, #8]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80032f0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 80032f4:	9307      	str	r3, [sp, #28]
  attributes.priority = osPriorityRealtime;
 80032f6:	2330      	movs	r3, #48	; 0x30
 80032f8:	9308      	str	r3, [sp, #32]
  osThreadNew(ethernetif_input, netif, &attributes);
 80032fa:	aa02      	add	r2, sp, #8
 80032fc:	4621      	mov	r1, r4
 80032fe:	4831      	ldr	r0, [pc, #196]	; (80033c4 <ethernetif_init+0x1d0>)
 8003300:	f000 f9f6 	bl	80036f0 <osThreadNew>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003304:	4d30      	ldr	r5, [pc, #192]	; (80033c8 <ethernetif_init+0x1d4>)
 8003306:	4931      	ldr	r1, [pc, #196]	; (80033cc <ethernetif_init+0x1d8>)
 8003308:	4628      	mov	r0, r5
 800330a:	f7fd fc92 	bl	8000c32 <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 800330e:	4628      	mov	r0, r5
 8003310:	f7fd fcae 	bl	8000c70 <LAN8742_Init>
  if (hal_eth_init_status == HAL_OK)
 8003314:	2f00      	cmp	r7, #0
 8003316:	d13a      	bne.n	800338e <ethernetif_init+0x19a>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003318:	4628      	mov	r0, r5
 800331a:	f7fd fd15 	bl	8000d48 <LAN8742_GetLinkState>
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800331e:	2801      	cmp	r0, #1
 8003320:	dd27      	ble.n	8003372 <ethernetif_init+0x17e>
      switch (PHYLinkState)
 8003322:	2804      	cmp	r0, #4
 8003324:	d02c      	beq.n	8003380 <ethernetif_init+0x18c>
 8003326:	2805      	cmp	r0, #5
 8003328:	d02e      	beq.n	8003388 <ethernetif_init+0x194>
 800332a:	f44f 4680 	mov.w	r6, #16384	; 0x4000
 800332e:	2803      	cmp	r0, #3
 8003330:	bf14      	ite	ne
 8003332:	f44f 6700 	movne.w	r7, #2048	; 0x800
 8003336:	2700      	moveq	r7, #0
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003338:	4d1a      	ldr	r5, [pc, #104]	; (80033a4 <ethernetif_init+0x1b0>)
 800333a:	a90b      	add	r1, sp, #44	; 0x2c
 800333c:	4628      	mov	r0, r5
 800333e:	f7fe fbd0 	bl	8001ae2 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003342:	9711      	str	r7, [sp, #68]	; 0x44
    MACConf.Speed = speed;
 8003344:	9610      	str	r6, [sp, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003346:	a90b      	add	r1, sp, #44	; 0x2c
 8003348:	4628      	mov	r0, r5
 800334a:	f7fe fc3e 	bl	8001bca <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800334e:	4628      	mov	r0, r5
 8003350:	f7fe f946 	bl	80015e0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003354:	4620      	mov	r0, r4
 8003356:	f004 ff5f 	bl	8008218 <netif_set_up>
    netif_set_link_up(netif);
 800335a:	4620      	mov	r0, r4
 800335c:	f004 ff9a 	bl	8008294 <netif_set_link_up>
 8003360:	e017      	b.n	8003392 <ethernetif_init+0x19e>
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003362:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <ethernetif_init+0x1dc>)
 8003364:	f240 12e5 	movw	r2, #485	; 0x1e5
 8003368:	491a      	ldr	r1, [pc, #104]	; (80033d4 <ethernetif_init+0x1e0>)
 800336a:	481b      	ldr	r0, [pc, #108]	; (80033d8 <ethernetif_init+0x1e4>)
 800336c:	f00b fdc2 	bl	800eef4 <iprintf>
 8003370:	e747      	b.n	8003202 <ethernetif_init+0xe>
      netif_set_link_down(netif);
 8003372:	4620      	mov	r0, r4
 8003374:	f004 ffb2 	bl	80082dc <netif_set_link_down>
      netif_set_down(netif);
 8003378:	4620      	mov	r0, r4
 800337a:	f004 ff6b 	bl	8008254 <netif_set_down>
 800337e:	e008      	b.n	8003392 <ethernetif_init+0x19e>
        speed = ETH_SPEED_10M;
 8003380:	2600      	movs	r6, #0
        duplex = ETH_FULLDUPLEX_MODE;
 8003382:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8003386:	e7d7      	b.n	8003338 <ethernetif_init+0x144>
        speed = ETH_SPEED_10M;
 8003388:	2600      	movs	r6, #0
        duplex = ETH_HALFDUPLEX_MODE;
 800338a:	4637      	mov	r7, r6
 800338c:	e7d4      	b.n	8003338 <ethernetif_init+0x144>
    Error_Handler();
 800338e:	f7fd fa31 	bl	80007f4 <Error_Handler>
}
 8003392:	2000      	movs	r0, #0
 8003394:	b024      	add	sp, #144	; 0x90
 8003396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800339a:	bf00      	nop
 800339c:	0800d83d 	.word	0x0800d83d
 80033a0:	08003091 	.word	0x08003091
 80033a4:	2000099c 	.word	0x2000099c
 80033a8:	40028000 	.word	0x40028000
 80033ac:	20000898 	.word	0x20000898
 80033b0:	200007f8 	.word	0x200007f8
 80033b4:	080101c8 	.word	0x080101c8
 80033b8:	2000095c 	.word	0x2000095c
 80033bc:	20000998 	.word	0x20000998
 80033c0:	080101c0 	.word	0x080101c0
 80033c4:	08003031 	.word	0x08003031
 80033c8:	20000938 	.word	0x20000938
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	0801016c 	.word	0x0801016c
 80033d4:	08010188 	.word	0x08010188
 80033d8:	08010198 	.word	0x08010198
 80033dc:	20000960 	.word	0x20000960

080033e0 <sys_now>:
{
 80033e0:	b508      	push	{r3, lr}
  return HAL_GetTick();
 80033e2:	f7fd fd37 	bl	8000e54 <HAL_GetTick>
}
 80033e6:	bd08      	pop	{r3, pc}

080033e8 <HAL_ETH_MspInit>:
{
 80033e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ea:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ec:	2300      	movs	r3, #0
 80033ee:	9307      	str	r3, [sp, #28]
 80033f0:	9308      	str	r3, [sp, #32]
 80033f2:	9309      	str	r3, [sp, #36]	; 0x24
 80033f4:	930a      	str	r3, [sp, #40]	; 0x28
 80033f6:	930b      	str	r3, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 80033f8:	6802      	ldr	r2, [r0, #0]
 80033fa:	4b41      	ldr	r3, [pc, #260]	; (8003500 <HAL_ETH_MspInit+0x118>)
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_ETH_MspInit+0x1c>
}
 8003400:	b00d      	add	sp, #52	; 0x34
 8003402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8003404:	2400      	movs	r4, #0
 8003406:	9400      	str	r4, [sp, #0]
 8003408:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
 8003414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003416:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800341a:	9200      	str	r2, [sp, #0]
 800341c:	9a00      	ldr	r2, [sp, #0]
 800341e:	9401      	str	r4, [sp, #4]
 8003420:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003422:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003426:	631a      	str	r2, [r3, #48]	; 0x30
 8003428:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800342a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800342e:	9201      	str	r2, [sp, #4]
 8003430:	9a01      	ldr	r2, [sp, #4]
 8003432:	9402      	str	r4, [sp, #8]
 8003434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003436:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
 800343c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800343e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003442:	9202      	str	r2, [sp, #8]
 8003444:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003446:	9403      	str	r4, [sp, #12]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	f042 0204 	orr.w	r2, r2, #4
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
 8003450:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003452:	f002 0204 	and.w	r2, r2, #4
 8003456:	9203      	str	r2, [sp, #12]
 8003458:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345a:	9404      	str	r4, [sp, #16]
 800345c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	631a      	str	r2, [r3, #48]	; 0x30
 8003464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003466:	f002 0201 	and.w	r2, r2, #1
 800346a:	9204      	str	r2, [sp, #16]
 800346c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800346e:	9405      	str	r4, [sp, #20]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	f042 0202 	orr.w	r2, r2, #2
 8003476:	631a      	str	r2, [r3, #48]	; 0x30
 8003478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800347a:	f002 0202 	and.w	r2, r2, #2
 800347e:	9205      	str	r2, [sp, #20]
 8003480:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003482:	9406      	str	r4, [sp, #24]
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003492:	9306      	str	r3, [sp, #24]
 8003494:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003496:	2332      	movs	r3, #50	; 0x32
 8003498:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2702      	movs	r7, #2
 800349c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800349e:	2603      	movs	r6, #3
 80034a0:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034a2:	250b      	movs	r5, #11
 80034a4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034a6:	a907      	add	r1, sp, #28
 80034a8:	4816      	ldr	r0, [pc, #88]	; (8003504 <HAL_ETH_MspInit+0x11c>)
 80034aa:	f7fe fbdb 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80034ae:	2386      	movs	r3, #134	; 0x86
 80034b0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b2:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034b8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ba:	a907      	add	r1, sp, #28
 80034bc:	4812      	ldr	r0, [pc, #72]	; (8003508 <HAL_ETH_MspInit+0x120>)
 80034be:	f7fe fbd1 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80034c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c6:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ca:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034ce:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80034d0:	a907      	add	r1, sp, #28
 80034d2:	480e      	ldr	r0, [pc, #56]	; (800350c <HAL_ETH_MspInit+0x124>)
 80034d4:	f7fe fbc6 	bl	8001c64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80034d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80034dc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034de:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034e2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80034e4:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80034e6:	a907      	add	r1, sp, #28
 80034e8:	4809      	ldr	r0, [pc, #36]	; (8003510 <HAL_ETH_MspInit+0x128>)
 80034ea:	f7fe fbbb 	bl	8001c64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80034ee:	4622      	mov	r2, r4
 80034f0:	2105      	movs	r1, #5
 80034f2:	203d      	movs	r0, #61	; 0x3d
 80034f4:	f7fd fcda 	bl	8000eac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80034f8:	203d      	movs	r0, #61	; 0x3d
 80034fa:	f7fd fd0d 	bl	8000f18 <HAL_NVIC_EnableIRQ>
}
 80034fe:	e77f      	b.n	8003400 <HAL_ETH_MspInit+0x18>
 8003500:	40028000 	.word	0x40028000
 8003504:	40020800 	.word	0x40020800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40021800 	.word	0x40021800

08003514 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8003514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003518:	b09a      	sub	sp, #104	; 0x68
 800351a:	4604      	mov	r4, r0
  ETH_MACConfigTypeDef MACConf = {0};
 800351c:	2264      	movs	r2, #100	; 0x64
 800351e:	2100      	movs	r1, #0
 8003520:	a801      	add	r0, sp, #4
 8003522:	f00b fc4a 	bl	800edba <memset>
  int32_t PHYLinkState = 0;
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8003526:	2700      	movs	r7, #0
 8003528:	46b8      	mov	r8, r7
 800352a:	46ba      	mov	sl, r7

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800352c:	4d29      	ldr	r5, [pc, #164]	; (80035d4 <ethernet_link_thread+0xc0>)
      duplex = ETH_HALFDUPLEX_MODE;
      speed = ETH_SPEED_100M;
      linkchanged = 1;
      break;
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800352e:	f44f 6900 	mov.w	r9, #2048	; 0x800
    }

    if(linkchanged)
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003532:	4e29      	ldr	r6, [pc, #164]	; (80035d8 <ethernet_link_thread+0xc4>)
 8003534:	e00b      	b.n	800354e <ethernet_link_thread+0x3a>
    HAL_ETH_Stop_IT(&heth);
 8003536:	4630      	mov	r0, r6
 8003538:	f7fe f8ae 	bl	8001698 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800353c:	4620      	mov	r0, r4
 800353e:	f004 fe89 	bl	8008254 <netif_set_down>
    netif_set_link_down(netif);
 8003542:	4620      	mov	r0, r4
 8003544:	f004 feca 	bl	80082dc <netif_set_link_down>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8003548:	2064      	movs	r0, #100	; 0x64
 800354a:	f000 f91d 	bl	8003788 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800354e:	4628      	mov	r0, r5
 8003550:	f7fd fbfa 	bl	8000d48 <LAN8742_GetLinkState>
  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8003554:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8003558:	f013 0f04 	tst.w	r3, #4
 800355c:	d00b      	beq.n	8003576 <ethernet_link_thread+0x62>
 800355e:	2801      	cmp	r0, #1
 8003560:	dde9      	ble.n	8003536 <ethernet_link_thread+0x22>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003562:	f013 0f04 	tst.w	r3, #4
 8003566:	d1ef      	bne.n	8003548 <ethernet_link_thread+0x34>
    switch (PHYLinkState)
 8003568:	3802      	subs	r0, #2
 800356a:	2803      	cmp	r0, #3
 800356c:	d826      	bhi.n	80035bc <ethernet_link_thread+0xa8>
 800356e:	e8df f000 	tbb	[pc, r0]
 8003572:	0829      	.short	0x0829
 8003574:	222d      	.short	0x222d
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8003576:	f013 0f04 	tst.w	r3, #4
 800357a:	d1e5      	bne.n	8003548 <ethernet_link_thread+0x34>
 800357c:	2801      	cmp	r0, #1
 800357e:	dde3      	ble.n	8003548 <ethernet_link_thread+0x34>
 8003580:	e7f2      	b.n	8003568 <ethernet_link_thread+0x54>
    switch (PHYLinkState)
 8003582:	2700      	movs	r7, #0
 8003584:	f44f 4880 	mov.w	r8, #16384	; 0x4000
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003588:	a901      	add	r1, sp, #4
 800358a:	4630      	mov	r0, r6
 800358c:	f7fe faa9 	bl	8001ae2 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8003590:	9707      	str	r7, [sp, #28]
      MACConf.Speed = speed;
 8003592:	f8cd 8018 	str.w	r8, [sp, #24]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003596:	a901      	add	r1, sp, #4
 8003598:	4630      	mov	r0, r6
 800359a:	f7fe fb16 	bl	8001bca <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800359e:	4630      	mov	r0, r6
 80035a0:	f7fd ffe2 	bl	8001568 <HAL_ETH_Start>
      netif_set_up(netif);
 80035a4:	4620      	mov	r0, r4
 80035a6:	f004 fe37 	bl	8008218 <netif_set_up>
      netif_set_link_up(netif);
 80035aa:	4620      	mov	r0, r4
 80035ac:	f004 fe72 	bl	8008294 <netif_set_link_up>
 80035b0:	f04f 0a01 	mov.w	sl, #1
 80035b4:	e7c8      	b.n	8003548 <ethernet_link_thread+0x34>
      duplex = ETH_HALFDUPLEX_MODE;
 80035b6:	2700      	movs	r7, #0
      speed = ETH_SPEED_10M;
 80035b8:	46b8      	mov	r8, r7
      break;
 80035ba:	e7e5      	b.n	8003588 <ethernet_link_thread+0x74>
    if(linkchanged)
 80035bc:	f1ba 0f00 	cmp.w	sl, #0
 80035c0:	d0c2      	beq.n	8003548 <ethernet_link_thread+0x34>
 80035c2:	e7e1      	b.n	8003588 <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80035c4:	464f      	mov	r7, r9
      speed = ETH_SPEED_100M;
 80035c6:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80035ca:	e7dd      	b.n	8003588 <ethernet_link_thread+0x74>
      duplex = ETH_FULLDUPLEX_MODE;
 80035cc:	464f      	mov	r7, r9
      speed = ETH_SPEED_10M;
 80035ce:	f04f 0800 	mov.w	r8, #0
    if(linkchanged)
 80035d2:	e7d9      	b.n	8003588 <ethernet_link_thread+0x74>
 80035d4:	20000938 	.word	0x20000938
 80035d8:	2000099c 	.word	0x2000099c

080035dc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80035dc:	b510      	push	{r4, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	4604      	mov	r4, r0
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80035e2:	480e      	ldr	r0, [pc, #56]	; (800361c <HAL_ETH_RxAllocateCallback+0x40>)
 80035e4:	f004 fc88 	bl	8007ef8 <memp_malloc_pool>
  if (p)
 80035e8:	b188      	cbz	r0, 800360e <HAL_ETH_RxAllocateCallback+0x32>
 80035ea:	4603      	mov	r3, r0
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80035ec:	f100 0220 	add.w	r2, r0, #32
 80035f0:	6022      	str	r2, [r4, #0]
    p->custom_free_function = pbuf_free_custom;
 80035f2:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <HAL_ETH_RxAllocateCallback+0x44>)
 80035f4:	6102      	str	r2, [r0, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 80035f6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80035fa:	9201      	str	r2, [sp, #4]
 80035fc:	6822      	ldr	r2, [r4, #0]
 80035fe:	9200      	str	r2, [sp, #0]
 8003600:	2241      	movs	r2, #65	; 0x41
 8003602:	2100      	movs	r1, #0
 8003604:	4608      	mov	r0, r1
 8003606:	f004 ff1d 	bl	8008444 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800360a:	b002      	add	sp, #8
 800360c:	bd10      	pop	{r4, pc}
    RxAllocStatus = RX_ALLOC_ERROR;
 800360e:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_ETH_RxAllocateCallback+0x48>)
 8003610:	2201      	movs	r2, #1
 8003612:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8003614:	2300      	movs	r3, #0
 8003616:	6023      	str	r3, [r4, #0]
}
 8003618:	e7f7      	b.n	800360a <HAL_ETH_RxAllocateCallback+0x2e>
 800361a:	bf00      	nop
 800361c:	080101c8 	.word	0x080101c8
 8003620:	08003139 	.word	0x08003139
 8003624:	20000958 	.word	0x20000958

08003628 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8003628:	b430      	push	{r4, r5}
  struct pbuf **ppStart = (struct pbuf **)pStart;
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
  struct pbuf *p = NULL;

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800362a:	f1a2 0420 	sub.w	r4, r2, #32
  p->next = NULL;
 800362e:	2500      	movs	r5, #0
 8003630:	f842 5c20 	str.w	r5, [r2, #-32]
  p->tot_len = 0;
 8003634:	f822 5c18 	strh.w	r5, [r2, #-24]
  p->len = Length;
 8003638:	f822 3c16 	strh.w	r3, [r2, #-22]

  /* Chain the buffer. */
  if (!*ppStart)
 800363c:	6802      	ldr	r2, [r0, #0]
 800363e:	b162      	cbz	r2, 800365a <HAL_ETH_RxLinkCallback+0x32>
    *ppStart = p;
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8003640:	680a      	ldr	r2, [r1, #0]
 8003642:	6014      	str	r4, [r2, #0]
  }
  *ppEnd  = p;
 8003644:	600c      	str	r4, [r1, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8003646:	6802      	ldr	r2, [r0, #0]
 8003648:	b12a      	cbz	r2, 8003656 <HAL_ETH_RxLinkCallback+0x2e>
  {
    p->tot_len += Length;
 800364a:	8911      	ldrh	r1, [r2, #8]
 800364c:	4419      	add	r1, r3
 800364e:	8111      	strh	r1, [r2, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	2a00      	cmp	r2, #0
 8003654:	d1f9      	bne.n	800364a <HAL_ETH_RxLinkCallback+0x22>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8003656:	bc30      	pop	{r4, r5}
 8003658:	4770      	bx	lr
    *ppStart = p;
 800365a:	6004      	str	r4, [r0, #0]
 800365c:	e7f2      	b.n	8003644 <HAL_ETH_RxLinkCallback+0x1c>

0800365e <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800365e:	b508      	push	{r3, lr}
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8003660:	f004 ff52 	bl	8008508 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8003664:	bd08      	pop	{r3, pc}

08003666 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003666:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 8003668:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800366c:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800366e:	f001 fdf5 	bl	800525c <xTaskGetSchedulerState>
 8003672:	2801      	cmp	r0, #1
 8003674:	d100      	bne.n	8003678 <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 8003676:	bd08      	pop	{r3, pc}
    xPortSysTickHandler();
 8003678:	f002 f9dc 	bl	8005a34 <xPortSysTickHandler>
}
 800367c:	e7fb      	b.n	8003676 <SysTick_Handler+0x10>
	...

08003680 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003680:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8003684:	b92b      	cbnz	r3, 8003692 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8003686:	4b06      	ldr	r3, [pc, #24]	; (80036a0 <osKernelInitialize+0x20>)
 8003688:	6818      	ldr	r0, [r3, #0]
 800368a:	b928      	cbnz	r0, 8003698 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800368c:	2201      	movs	r2, #1
 800368e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003690:	4770      	bx	lr
    stat = osErrorISR;
 8003692:	f06f 0005 	mvn.w	r0, #5
 8003696:	4770      	bx	lr
    } else {
      stat = osError;
 8003698:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	20005c90 	.word	0x20005c90

080036a4 <osKernelStart>:
 80036a4:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80036a8:	b973      	cbnz	r3, 80036c8 <osKernelStart+0x24>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <osKernelStart+0x30>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10d      	bne.n	80036ce <osKernelStart+0x2a>
osStatus_t osKernelStart (void) {
 80036b2:	b510      	push	{r4, lr}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036b4:	2400      	movs	r4, #0
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <osKernelStart+0x34>)
 80036b8:	77dc      	strb	r4, [r3, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <osKernelStart+0x30>)
 80036bc:	2202      	movs	r2, #2
 80036be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036c0:	f001 fafc 	bl	8004cbc <vTaskStartScheduler>
      stat = osOK;
 80036c4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80036c6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80036c8:	f06f 0005 	mvn.w	r0, #5
 80036cc:	4770      	bx	lr
      stat = osError;
 80036ce:	f04f 30ff 	mov.w	r0, #4294967295
}
 80036d2:	4770      	bx	lr
 80036d4:	20005c90 	.word	0x20005c90
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80036dc:	b508      	push	{r3, lr}
 80036de:	f3ef 8305 	mrs	r3, IPSR
  TickType_t ticks;

  if (IS_IRQ()) {
 80036e2:	b113      	cbz	r3, 80036ea <osKernelGetTickCount+0xe>
    ticks = xTaskGetTickCountFromISR();
 80036e4:	f001 fb46 	bl	8004d74 <xTaskGetTickCountFromISR>
  } else {
    ticks = xTaskGetTickCount();
  }

  return (ticks);
}
 80036e8:	bd08      	pop	{r3, pc}
    ticks = xTaskGetTickCount();
 80036ea:	f001 fb3d 	bl	8004d68 <xTaskGetTickCount>
  return (ticks);
 80036ee:	e7fb      	b.n	80036e8 <osKernelGetTickCount+0xc>

080036f0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80036f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f2:	b087      	sub	sp, #28
 80036f4:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036f6:	2200      	movs	r2, #0
 80036f8:	9205      	str	r2, [sp, #20]
 80036fa:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80036fe:	2a00      	cmp	r2, #0
 8003700:	d13d      	bne.n	800377e <osThreadNew+0x8e>
 8003702:	2800      	cmp	r0, #0
 8003704:	d03b      	beq.n	800377e <osThreadNew+0x8e>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8003706:	b35c      	cbz	r4, 8003760 <osThreadNew+0x70>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8003708:	69a3      	ldr	r3, [r4, #24]
 800370a:	b12b      	cbz	r3, 8003718 <osThreadNew+0x28>
        prio = (UBaseType_t)attr->priority;
 800370c:	461d      	mov	r5, r3
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800370e:	3b01      	subs	r3, #1
 8003710:	2b37      	cmp	r3, #55	; 0x37
 8003712:	d902      	bls.n	800371a <osThreadNew+0x2a>
        return (NULL);
 8003714:	2000      	movs	r0, #0
 8003716:	e033      	b.n	8003780 <osThreadNew+0x90>
 8003718:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	f013 0f01 	tst.w	r3, #1
 8003720:	d130      	bne.n	8003784 <osThreadNew+0x94>
      }

      if (attr->stack_size > 0U) {
 8003722:	6963      	ldr	r3, [r4, #20]
 8003724:	b19b      	cbz	r3, 800374e <osThreadNew+0x5e>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003726:	089a      	lsrs	r2, r3, #2
      if (attr->name != NULL) {
 8003728:	f8d4 c000 	ldr.w	ip, [r4]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800372c:	68a6      	ldr	r6, [r4, #8]
 800372e:	b18e      	cbz	r6, 8003754 <osThreadNew+0x64>
 8003730:	68e7      	ldr	r7, [r4, #12]
 8003732:	2fbb      	cmp	r7, #187	; 0xbb
 8003734:	d923      	bls.n	800377e <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003736:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003738:	b30c      	cbz	r4, 800377e <osThreadNew+0x8e>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800373a:	b303      	cbz	r3, 800377e <osThreadNew+0x8e>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800373c:	9602      	str	r6, [sp, #8]
 800373e:	9401      	str	r4, [sp, #4]
 8003740:	9500      	str	r5, [sp, #0]
 8003742:	460b      	mov	r3, r1
 8003744:	4661      	mov	r1, ip
 8003746:	f001 fa4b 	bl	8004be0 <xTaskCreateStatic>
 800374a:	9005      	str	r0, [sp, #20]
 800374c:	e017      	b.n	800377e <osThreadNew+0x8e>
    stack = configMINIMAL_STACK_SIZE;
 800374e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003752:	e7e9      	b.n	8003728 <osThreadNew+0x38>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003754:	68e3      	ldr	r3, [r4, #12]
 8003756:	b993      	cbnz	r3, 800377e <osThreadNew+0x8e>
                                                                                      (StaticTask_t *)attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003758:	6923      	ldr	r3, [r4, #16]
 800375a:	4664      	mov	r4, ip
 800375c:	b97b      	cbnz	r3, 800377e <osThreadNew+0x8e>
 800375e:	e002      	b.n	8003766 <osThreadNew+0x76>
    prio  = (UBaseType_t)osPriorityNormal;
 8003760:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8003762:	f44f 7200 	mov.w	r2, #512	; 0x200
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003766:	ab05      	add	r3, sp, #20
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	9500      	str	r5, [sp, #0]
 800376c:	460b      	mov	r3, r1
 800376e:	b292      	uxth	r2, r2
 8003770:	4621      	mov	r1, r4
 8003772:	f001 fa70 	bl	8004c56 <xTaskCreate>
 8003776:	2801      	cmp	r0, #1
            hTask = NULL;
 8003778:	bf1c      	itt	ne
 800377a:	2300      	movne	r3, #0
 800377c:	9305      	strne	r3, [sp, #20]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800377e:	9805      	ldr	r0, [sp, #20]
}
 8003780:	b007      	add	sp, #28
 8003782:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return (NULL);
 8003784:	2000      	movs	r0, #0
 8003786:	e7fb      	b.n	8003780 <osThreadNew+0x90>

08003788 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003788:	b508      	push	{r3, lr}
 800378a:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800378e:	b933      	cbnz	r3, 800379e <osDelay+0x16>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8003790:	b908      	cbnz	r0, 8003796 <osDelay+0xe>
    stat = osOK;
 8003792:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8003794:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 8003796:	f001 fc11 	bl	8004fbc <vTaskDelay>
    stat = osOK;
 800379a:	2000      	movs	r0, #0
 800379c:	e7fa      	b.n	8003794 <osDelay+0xc>
    stat = osErrorISR;
 800379e:	f06f 0005 	mvn.w	r0, #5
 80037a2:	e7f7      	b.n	8003794 <osDelay+0xc>

080037a4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80037a4:	b570      	push	{r4, r5, r6, lr}
 80037a6:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 80037aa:	2e00      	cmp	r6, #0
 80037ac:	d135      	bne.n	800381a <osMutexNew+0x76>
 80037ae:	4604      	mov	r4, r0
    if (attr != NULL) {
 80037b0:	b370      	cbz	r0, 8003810 <osMutexNew+0x6c>
      type = attr->attr_bits;
 80037b2:	6843      	ldr	r3, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80037b4:	f013 0f08 	tst.w	r3, #8
 80037b8:	d132      	bne.n	8003820 <osMutexNew+0x7c>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 80037ba:	f003 0301 	and.w	r3, r3, #1
      rmtx = 1U;
 80037be:	461e      	mov	r6, r3
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80037c0:	6881      	ldr	r1, [r0, #8]
 80037c2:	b121      	cbz	r1, 80037ce <osMutexNew+0x2a>
 80037c4:	68c2      	ldr	r2, [r0, #12]
 80037c6:	2a4f      	cmp	r2, #79	; 0x4f
 80037c8:	d80d      	bhi.n	80037e6 <osMutexNew+0x42>
  hMutex = NULL;
 80037ca:	2500      	movs	r5, #0
 80037cc:	e026      	b.n	800381c <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
          }
        #endif
      }
      else {
        if (mem == 0) {
 80037ce:	68c2      	ldr	r2, [r0, #12]
 80037d0:	2a00      	cmp	r2, #0
 80037d2:	d1fa      	bne.n	80037ca <osMutexNew+0x26>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80037d4:	b1e3      	cbz	r3, 8003810 <osMutexNew+0x6c>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80037d6:	2004      	movs	r0, #4
 80037d8:	f000 fcfa 	bl	80041d0 <xQueueCreateMutex>
 80037dc:	4605      	mov	r5, r0
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80037de:	2d00      	cmp	r5, #0
 80037e0:	d0f3      	beq.n	80037ca <osMutexNew+0x26>
        if (attr != NULL) {
 80037e2:	b93c      	cbnz	r4, 80037f4 <osMutexNew+0x50>
 80037e4:	e007      	b.n	80037f6 <osMutexNew+0x52>
          if (rmtx != 0U) {
 80037e6:	b173      	cbz	r3, 8003806 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80037e8:	2004      	movs	r0, #4
 80037ea:	f000 fcfc 	bl	80041e6 <xQueueCreateMutexStatic>
 80037ee:	4605      	mov	r5, r0
      if (hMutex != NULL) {
 80037f0:	2d00      	cmp	r5, #0
 80037f2:	d0ea      	beq.n	80037ca <osMutexNew+0x26>
          name = attr->name;
 80037f4:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hMutex, name);
 80037f6:	4621      	mov	r1, r4
 80037f8:	4628      	mov	r0, r5
 80037fa:	f000 fffb 	bl	80047f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80037fe:	b16e      	cbz	r6, 800381c <osMutexNew+0x78>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003800:	f045 0501 	orr.w	r5, r5, #1
 8003804:	e00a      	b.n	800381c <osMutexNew+0x78>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003806:	2001      	movs	r0, #1
 8003808:	f000 fced 	bl	80041e6 <xQueueCreateMutexStatic>
 800380c:	4605      	mov	r5, r0
 800380e:	e7ef      	b.n	80037f0 <osMutexNew+0x4c>
              hMutex = xSemaphoreCreateMutex ();
 8003810:	2001      	movs	r0, #1
 8003812:	f000 fcdd 	bl	80041d0 <xQueueCreateMutex>
 8003816:	4605      	mov	r5, r0
 8003818:	e7e1      	b.n	80037de <osMutexNew+0x3a>
  hMutex = NULL;
 800381a:	2500      	movs	r5, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800381c:	4628      	mov	r0, r5
 800381e:	bd70      	pop	{r4, r5, r6, pc}
  hMutex = NULL;
 8003820:	2500      	movs	r5, #0
  return ((osMutexId_t)hMutex);
 8003822:	e7fb      	b.n	800381c <osMutexNew+0x78>

08003824 <osMutexAcquire>:
 8003824:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003828:	b9f2      	cbnz	r2, 8003868 <osMutexAcquire+0x44>
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800382a:	b510      	push	{r4, lr}
 800382c:	4603      	mov	r3, r0
 800382e:	460c      	mov	r4, r1
 8003830:	f020 0001 	bic.w	r0, r0, #1
 8003834:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 8003838:	b1c8      	cbz	r0, 800386e <osMutexAcquire+0x4a>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800383a:	b153      	cbz	r3, 8003852 <osMutexAcquire+0x2e>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800383c:	f000 ff47 	bl	80046ce <xQueueTakeMutexRecursive>
 8003840:	2801      	cmp	r0, #1
 8003842:	d017      	beq.n	8003874 <osMutexAcquire+0x50>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003844:	2c00      	cmp	r4, #0
 8003846:	bf14      	ite	ne
 8003848:	f06f 0001 	mvnne.w	r0, #1
 800384c:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003850:	bd10      	pop	{r4, pc}
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003852:	f000 fe69 	bl	8004528 <xQueueSemaphoreTake>
 8003856:	2801      	cmp	r0, #1
 8003858:	d00e      	beq.n	8003878 <osMutexAcquire+0x54>
          stat = osErrorResource;
 800385a:	2c00      	cmp	r4, #0
 800385c:	bf14      	ite	ne
 800385e:	f06f 0001 	mvnne.w	r0, #1
 8003862:	f06f 0002 	mvneq.w	r0, #2
 8003866:	e7f3      	b.n	8003850 <osMutexAcquire+0x2c>
    stat = osErrorISR;
 8003868:	f06f 0005 	mvn.w	r0, #5
}
 800386c:	4770      	bx	lr
    stat = osErrorParameter;
 800386e:	f06f 0003 	mvn.w	r0, #3
 8003872:	e7ed      	b.n	8003850 <osMutexAcquire+0x2c>
  stat = osOK;
 8003874:	2000      	movs	r0, #0
 8003876:	e7eb      	b.n	8003850 <osMutexAcquire+0x2c>
 8003878:	2000      	movs	r0, #0
 800387a:	e7e9      	b.n	8003850 <osMutexAcquire+0x2c>

0800387c <osMutexRelease>:
 800387c:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
 8003880:	b9d2      	cbnz	r2, 80038b8 <osMutexRelease+0x3c>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003882:	b508      	push	{r3, lr}
 8003884:	4603      	mov	r3, r0
 8003886:	f020 0001 	bic.w	r0, r0, #1
 800388a:	f003 0301 	and.w	r3, r3, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800388e:	b1b0      	cbz	r0, 80038be <osMutexRelease+0x42>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 8003890:	b13b      	cbz	r3, 80038a2 <osMutexRelease+0x26>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003892:	f000 fcb7 	bl	8004204 <xQueueGiveMutexRecursive>
        stat = osErrorResource;
 8003896:	2801      	cmp	r0, #1
 8003898:	bf0c      	ite	eq
 800389a:	2000      	moveq	r0, #0
 800389c:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 80038a0:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80038a2:	2300      	movs	r3, #0
 80038a4:	461a      	mov	r2, r3
 80038a6:	4619      	mov	r1, r3
 80038a8:	f000 fbba 	bl	8004020 <xQueueGenericSend>
        stat = osErrorResource;
 80038ac:	2801      	cmp	r0, #1
 80038ae:	bf0c      	ite	eq
 80038b0:	2000      	moveq	r0, #0
 80038b2:	f06f 0002 	mvnne.w	r0, #2
 80038b6:	e7f3      	b.n	80038a0 <osMutexRelease+0x24>
    stat = osErrorISR;
 80038b8:	f06f 0005 	mvn.w	r0, #5
}
 80038bc:	4770      	bx	lr
    stat = osErrorParameter;
 80038be:	f06f 0003 	mvn.w	r0, #3
 80038c2:	e7ed      	b.n	80038a0 <osMutexRelease+0x24>

080038c4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80038c4:	b570      	push	{r4, r5, r6, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d138      	bne.n	8003942 <osSemaphoreNew+0x7e>
 80038d0:	460e      	mov	r6, r1
 80038d2:	4614      	mov	r4, r2
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d038      	beq.n	800394a <osSemaphoreNew+0x86>
 80038d8:	4288      	cmp	r0, r1
 80038da:	d338      	bcc.n	800394e <osSemaphoreNew+0x8a>
    mem = -1;

    if (attr != NULL) {
 80038dc:	2a00      	cmp	r2, #0
 80038de:	d041      	beq.n	8003964 <osSemaphoreNew+0xa0>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80038e0:	6895      	ldr	r5, [r2, #8]
 80038e2:	b125      	cbz	r5, 80038ee <osSemaphoreNew+0x2a>
 80038e4:	68d3      	ldr	r3, [r2, #12]
 80038e6:	2b4f      	cmp	r3, #79	; 0x4f
 80038e8:	d833      	bhi.n	8003952 <osSemaphoreNew+0x8e>
  hSemaphore = NULL;
 80038ea:	2500      	movs	r5, #0
 80038ec:	e02a      	b.n	8003944 <osSemaphoreNew+0x80>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80038ee:	68d3      	ldr	r3, [r2, #12]
 80038f0:	bb43      	cbnz	r3, 8003944 <osSemaphoreNew+0x80>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 80038f2:	2801      	cmp	r0, #1
 80038f4:	d13e      	bne.n	8003974 <osSemaphoreNew+0xb0>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80038f6:	2203      	movs	r2, #3
 80038f8:	2100      	movs	r1, #0
 80038fa:	2001      	movs	r0, #1
 80038fc:	f000 fb27 	bl	8003f4e <xQueueGenericCreate>
 8003900:	4605      	mov	r5, r0
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003902:	b1fd      	cbz	r5, 8003944 <osSemaphoreNew+0x80>
 8003904:	b986      	cbnz	r6, 8003928 <osSemaphoreNew+0x64>
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
 8003906:	b104      	cbz	r4, 800390a <osSemaphoreNew+0x46>
          name = attr->name;
 8003908:	6824      	ldr	r4, [r4, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 800390a:	4621      	mov	r1, r4
 800390c:	4628      	mov	r0, r5
 800390e:	f000 ff71 	bl	80047f4 <vQueueAddToRegistry>
 8003912:	e017      	b.n	8003944 <osSemaphoreNew+0x80>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003914:	2303      	movs	r3, #3
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	462b      	mov	r3, r5
 800391a:	2200      	movs	r2, #0
 800391c:	4611      	mov	r1, r2
 800391e:	2001      	movs	r0, #1
 8003920:	f000 fabd 	bl	8003e9e <xQueueGenericCreateStatic>
 8003924:	4605      	mov	r5, r0
 8003926:	e7ec      	b.n	8003902 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003928:	2300      	movs	r3, #0
 800392a:	461a      	mov	r2, r3
 800392c:	4619      	mov	r1, r3
 800392e:	4628      	mov	r0, r5
 8003930:	f000 fb76 	bl	8004020 <xQueueGenericSend>
 8003934:	2801      	cmp	r0, #1
 8003936:	d0e6      	beq.n	8003906 <osSemaphoreNew+0x42>
            vSemaphoreDelete (hSemaphore);
 8003938:	4628      	mov	r0, r5
 800393a:	f000 ff87 	bl	800484c <vQueueDelete>
            hSemaphore = NULL;
 800393e:	2500      	movs	r5, #0
 8003940:	e000      	b.n	8003944 <osSemaphoreNew+0x80>
  hSemaphore = NULL;
 8003942:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 8003944:	4628      	mov	r0, r5
 8003946:	b002      	add	sp, #8
 8003948:	bd70      	pop	{r4, r5, r6, pc}
  hSemaphore = NULL;
 800394a:	2500      	movs	r5, #0
 800394c:	e7fa      	b.n	8003944 <osSemaphoreNew+0x80>
 800394e:	2500      	movs	r5, #0
  return ((osSemaphoreId_t)hSemaphore);
 8003950:	e7f8      	b.n	8003944 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003952:	2801      	cmp	r0, #1
 8003954:	d0de      	beq.n	8003914 <osSemaphoreNew+0x50>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003956:	462a      	mov	r2, r5
 8003958:	f000 fb21 	bl	8003f9e <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800395c:	4605      	mov	r5, r0
 800395e:	2800      	cmp	r0, #0
 8003960:	d1d2      	bne.n	8003908 <osSemaphoreNew+0x44>
 8003962:	e7ef      	b.n	8003944 <osSemaphoreNew+0x80>
      if (max_count == 1U) {
 8003964:	2801      	cmp	r0, #1
 8003966:	d0c6      	beq.n	80038f6 <osSemaphoreNew+0x32>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003968:	f000 fb3c 	bl	8003fe4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800396c:	4605      	mov	r5, r0
 800396e:	2800      	cmp	r0, #0
 8003970:	d0e8      	beq.n	8003944 <osSemaphoreNew+0x80>
 8003972:	e7ca      	b.n	800390a <osSemaphoreNew+0x46>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003974:	f000 fb36 	bl	8003fe4 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 8003978:	4605      	mov	r5, r0
 800397a:	2800      	cmp	r0, #0
 800397c:	d1c4      	bne.n	8003908 <osSemaphoreNew+0x44>
 800397e:	e7e1      	b.n	8003944 <osSemaphoreNew+0x80>

08003980 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8003980:	b338      	cbz	r0, 80039d2 <osSemaphoreAcquire+0x52>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003982:	b510      	push	{r4, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	460c      	mov	r4, r1
 8003988:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800398c:	b1b3      	cbz	r3, 80039bc <osSemaphoreAcquire+0x3c>
    if (timeout != 0U) {
 800398e:	bb19      	cbnz	r1, 80039d8 <osSemaphoreAcquire+0x58>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003990:	2100      	movs	r1, #0
 8003992:	9101      	str	r1, [sp, #4]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003994:	aa01      	add	r2, sp, #4
 8003996:	f000 feba 	bl	800470e <xQueueReceiveFromISR>
 800399a:	2801      	cmp	r0, #1
 800399c:	d11f      	bne.n	80039de <osSemaphoreAcquire+0x5e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 800399e:	9801      	ldr	r0, [sp, #4]
 80039a0:	b150      	cbz	r0, 80039b8 <osSemaphoreAcquire+0x38>
 80039a2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80039a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039aa:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80039b6:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80039b8:	b002      	add	sp, #8
 80039ba:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80039bc:	f000 fdb4 	bl	8004528 <xQueueSemaphoreTake>
 80039c0:	2801      	cmp	r0, #1
 80039c2:	d00f      	beq.n	80039e4 <osSemaphoreAcquire+0x64>
        stat = osErrorResource;
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	bf14      	ite	ne
 80039c8:	f06f 0001 	mvnne.w	r0, #1
 80039cc:	f06f 0002 	mvneq.w	r0, #2
 80039d0:	e7f2      	b.n	80039b8 <osSemaphoreAcquire+0x38>
    stat = osErrorParameter;
 80039d2:	f06f 0003 	mvn.w	r0, #3
}
 80039d6:	4770      	bx	lr
      stat = osErrorParameter;
 80039d8:	f06f 0003 	mvn.w	r0, #3
 80039dc:	e7ec      	b.n	80039b8 <osSemaphoreAcquire+0x38>
        stat = osErrorResource;
 80039de:	f06f 0002 	mvn.w	r0, #2
 80039e2:	e7e9      	b.n	80039b8 <osSemaphoreAcquire+0x38>
  stat = osOK;
 80039e4:	2000      	movs	r0, #0
 80039e6:	e7e7      	b.n	80039b8 <osSemaphoreAcquire+0x38>

080039e8 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 80039e8:	b330      	cbz	r0, 8003a38 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80039ea:	b500      	push	{lr}
 80039ec:	b083      	sub	sp, #12
 80039ee:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 80039f2:	b1a3      	cbz	r3, 8003a1e <osSemaphoreRelease+0x36>
    yield = pdFALSE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	9301      	str	r3, [sp, #4]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80039f8:	a901      	add	r1, sp, #4
 80039fa:	f000 fc8a 	bl	8004312 <xQueueGiveFromISR>
 80039fe:	2801      	cmp	r0, #1
 8003a00:	d11d      	bne.n	8003a3e <osSemaphoreRelease+0x56>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 8003a02:	9801      	ldr	r0, [sp, #4]
 8003a04:	b1a8      	cbz	r0, 8003a32 <osSemaphoreRelease+0x4a>
 8003a06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003a0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	e009      	b.n	8003a32 <osSemaphoreRelease+0x4a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a1e:	2300      	movs	r3, #0
 8003a20:	461a      	mov	r2, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	f000 fafc 	bl	8004020 <xQueueGenericSend>
      stat = osErrorResource;
 8003a28:	2801      	cmp	r0, #1
 8003a2a:	bf0c      	ite	eq
 8003a2c:	2000      	moveq	r0, #0
 8003a2e:	f06f 0002 	mvnne.w	r0, #2
    }
  }

  return (stat);
}
 8003a32:	b003      	add	sp, #12
 8003a34:	f85d fb04 	ldr.w	pc, [sp], #4
    stat = osErrorParameter;
 8003a38:	f06f 0003 	mvn.w	r0, #3
}
 8003a3c:	4770      	bx	lr
      stat = osErrorResource;
 8003a3e:	f06f 0002 	mvn.w	r0, #2
 8003a42:	e7f6      	b.n	8003a32 <osSemaphoreRelease+0x4a>

08003a44 <osSemaphoreDelete>:
 8003a44:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8003a48:	b94b      	cbnz	r3, 8003a5e <osSemaphoreDelete+0x1a>
osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8003a4a:	b510      	push	{r4, lr}
 8003a4c:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hSemaphore == NULL) {
 8003a4e:	b148      	cbz	r0, 8003a64 <osSemaphoreDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8003a50:	f000 fee6 	bl	8004820 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vSemaphoreDelete (hSemaphore);
 8003a54:	4620      	mov	r0, r4
 8003a56:	f000 fef9 	bl	800484c <vQueueDelete>
    stat = osOK;
 8003a5a:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 8003a5c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003a5e:	f06f 0005 	mvn.w	r0, #5
}
 8003a62:	4770      	bx	lr
    stat = osErrorParameter;
 8003a64:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003a68:	e7f8      	b.n	8003a5c <osSemaphoreDelete+0x18>

08003a6a <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003a6a:	b570      	push	{r4, r5, r6, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003a72:	bb6b      	cbnz	r3, 8003ad0 <osMessageQueueNew+0x66>
 8003a74:	4614      	mov	r4, r2
 8003a76:	b378      	cbz	r0, 8003ad8 <osMessageQueueNew+0x6e>
 8003a78:	b381      	cbz	r1, 8003adc <osMessageQueueNew+0x72>
    mem = -1;

    if (attr != NULL) {
 8003a7a:	2a00      	cmp	r2, #0
 8003a7c:	d034      	beq.n	8003ae8 <osMessageQueueNew+0x7e>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a7e:	6895      	ldr	r5, [r2, #8]
 8003a80:	b15d      	cbz	r5, 8003a9a <osMessageQueueNew+0x30>
 8003a82:	68d3      	ldr	r3, [r2, #12]
 8003a84:	2b4f      	cmp	r3, #79	; 0x4f
 8003a86:	d92b      	bls.n	8003ae0 <osMessageQueueNew+0x76>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a88:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003a8a:	b35a      	cbz	r2, 8003ae4 <osMessageQueueNew+0x7a>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003a8c:	fb01 f300 	mul.w	r3, r1, r0
 8003a90:	6966      	ldr	r6, [r4, #20]
 8003a92:	429e      	cmp	r6, r3
 8003a94:	d213      	bcs.n	8003abe <osMessageQueueNew+0x54>
  hQueue = NULL;
 8003a96:	2500      	movs	r5, #0
 8003a98:	e01b      	b.n	8003ad2 <osMessageQueueNew+0x68>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003a9a:	68d3      	ldr	r3, [r2, #12]
 8003a9c:	b9cb      	cbnz	r3, 8003ad2 <osMessageQueueNew+0x68>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003a9e:	6912      	ldr	r2, [r2, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003aa0:	b9ba      	cbnz	r2, 8003ad2 <osMessageQueueNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
      #endif
    }
    else {
      if (mem == 0) {
 8003aa2:	6963      	ldr	r3, [r4, #20]
  hQueue = NULL;
 8003aa4:	4615      	mov	r5, r2
      if (mem == 0) {
 8003aa6:	b9a3      	cbnz	r3, 8003ad2 <osMessageQueueNew+0x68>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f000 fa50 	bl	8003f4e <xQueueGenericCreate>
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003aae:	4605      	mov	r5, r0
 8003ab0:	b178      	cbz	r0, 8003ad2 <osMessageQueueNew+0x68>
      if (attr != NULL) {
        name = attr->name;
 8003ab2:	6824      	ldr	r4, [r4, #0]
      } else {
        name = NULL;
      }
      vQueueAddToRegistry (hQueue, name);
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fe9c 	bl	80047f4 <vQueueAddToRegistry>
 8003abc:	e009      	b.n	8003ad2 <osMessageQueueNew+0x68>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003abe:	2300      	movs	r3, #0
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	462b      	mov	r3, r5
 8003ac4:	f000 f9eb 	bl	8003e9e <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 8003ac8:	4605      	mov	r5, r0
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d1f1      	bne.n	8003ab2 <osMessageQueueNew+0x48>
 8003ace:	e000      	b.n	8003ad2 <osMessageQueueNew+0x68>
  hQueue = NULL;
 8003ad0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8003ad8:	2500      	movs	r5, #0
 8003ada:	e7fa      	b.n	8003ad2 <osMessageQueueNew+0x68>
 8003adc:	2500      	movs	r5, #0
 8003ade:	e7f8      	b.n	8003ad2 <osMessageQueueNew+0x68>
 8003ae0:	2500      	movs	r5, #0
 8003ae2:	e7f6      	b.n	8003ad2 <osMessageQueueNew+0x68>
 8003ae4:	4615      	mov	r5, r2
  return ((osMessageQueueId_t)hQueue);
 8003ae6:	e7f4      	b.n	8003ad2 <osMessageQueueNew+0x68>
          hQueue = xQueueCreate (msg_count, msg_size);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f000 fa30 	bl	8003f4e <xQueueGenericCreate>
    if (hQueue != NULL) {
 8003aee:	4605      	mov	r5, r0
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d0ee      	beq.n	8003ad2 <osMessageQueueNew+0x68>
 8003af4:	e7de      	b.n	8003ab4 <osMessageQueueNew+0x4a>

08003af6 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003af6:	b510      	push	{r4, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	461c      	mov	r4, r3
 8003afc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003b00:	b1bb      	cbz	r3, 8003b32 <osMessageQueuePut+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b02:	b330      	cbz	r0, 8003b52 <osMessageQueuePut+0x5c>
 8003b04:	b341      	cbz	r1, 8003b58 <osMessageQueuePut+0x62>
 8003b06:	bb54      	cbnz	r4, 8003b5e <osMessageQueuePut+0x68>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9301      	str	r3, [sp, #4]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003b0c:	aa01      	add	r2, sp, #4
 8003b0e:	f000 fb99 	bl	8004244 <xQueueGenericSendFromISR>
 8003b12:	2801      	cmp	r0, #1
 8003b14:	d126      	bne.n	8003b64 <osMessageQueuePut+0x6e>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003b16:	9801      	ldr	r0, [sp, #4]
 8003b18:	b1c8      	cbz	r0, 8003b4e <osMessageQueuePut+0x58>
 8003b1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003b2e:	2000      	movs	r0, #0
 8003b30:	e00d      	b.n	8003b4e <osMessageQueuePut+0x58>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b32:	b1d0      	cbz	r0, 8003b6a <osMessageQueuePut+0x74>
 8003b34:	b1e1      	cbz	r1, 8003b70 <osMessageQueuePut+0x7a>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003b36:	2300      	movs	r3, #0
 8003b38:	4622      	mov	r2, r4
 8003b3a:	f000 fa71 	bl	8004020 <xQueueGenericSend>
 8003b3e:	2801      	cmp	r0, #1
 8003b40:	d019      	beq.n	8003b76 <osMessageQueuePut+0x80>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003b42:	2c00      	cmp	r4, #0
 8003b44:	bf14      	ite	ne
 8003b46:	f06f 0001 	mvnne.w	r0, #1
 8003b4a:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003b52:	f06f 0003 	mvn.w	r0, #3
 8003b56:	e7fa      	b.n	8003b4e <osMessageQueuePut+0x58>
 8003b58:	f06f 0003 	mvn.w	r0, #3
 8003b5c:	e7f7      	b.n	8003b4e <osMessageQueuePut+0x58>
 8003b5e:	f06f 0003 	mvn.w	r0, #3
 8003b62:	e7f4      	b.n	8003b4e <osMessageQueuePut+0x58>
        stat = osErrorResource;
 8003b64:	f06f 0002 	mvn.w	r0, #2
 8003b68:	e7f1      	b.n	8003b4e <osMessageQueuePut+0x58>
      stat = osErrorParameter;
 8003b6a:	f06f 0003 	mvn.w	r0, #3
 8003b6e:	e7ee      	b.n	8003b4e <osMessageQueuePut+0x58>
 8003b70:	f06f 0003 	mvn.w	r0, #3
 8003b74:	e7eb      	b.n	8003b4e <osMessageQueuePut+0x58>
  stat = osOK;
 8003b76:	2000      	movs	r0, #0
 8003b78:	e7e9      	b.n	8003b4e <osMessageQueuePut+0x58>

08003b7a <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003b7a:	b510      	push	{r4, lr}
 8003b7c:	b082      	sub	sp, #8
 8003b7e:	461c      	mov	r4, r3
 8003b80:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8003b84:	b1bb      	cbz	r3, 8003bb6 <osMessageQueueGet+0x3c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b86:	b328      	cbz	r0, 8003bd4 <osMessageQueueGet+0x5a>
 8003b88:	b339      	cbz	r1, 8003bda <osMessageQueueGet+0x60>
 8003b8a:	bb4c      	cbnz	r4, 8003be0 <osMessageQueueGet+0x66>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	9301      	str	r3, [sp, #4]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003b90:	aa01      	add	r2, sp, #4
 8003b92:	f000 fdbc 	bl	800470e <xQueueReceiveFromISR>
 8003b96:	2801      	cmp	r0, #1
 8003b98:	d125      	bne.n	8003be6 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8003b9a:	9801      	ldr	r0, [sp, #4]
 8003b9c:	b1c0      	cbz	r0, 8003bd0 <osMessageQueueGet+0x56>
 8003b9e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e00c      	b.n	8003bd0 <osMessageQueueGet+0x56>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003bb6:	b1c8      	cbz	r0, 8003bec <osMessageQueueGet+0x72>
 8003bb8:	b1d9      	cbz	r1, 8003bf2 <osMessageQueueGet+0x78>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003bba:	4622      	mov	r2, r4
 8003bbc:	f000 fc02 	bl	80043c4 <xQueueReceive>
 8003bc0:	2801      	cmp	r0, #1
 8003bc2:	d019      	beq.n	8003bf8 <osMessageQueueGet+0x7e>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	bf14      	ite	ne
 8003bc8:	f06f 0001 	mvnne.w	r0, #1
 8003bcc:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8003bd4:	f06f 0003 	mvn.w	r0, #3
 8003bd8:	e7fa      	b.n	8003bd0 <osMessageQueueGet+0x56>
 8003bda:	f06f 0003 	mvn.w	r0, #3
 8003bde:	e7f7      	b.n	8003bd0 <osMessageQueueGet+0x56>
 8003be0:	f06f 0003 	mvn.w	r0, #3
 8003be4:	e7f4      	b.n	8003bd0 <osMessageQueueGet+0x56>
        stat = osErrorResource;
 8003be6:	f06f 0002 	mvn.w	r0, #2
 8003bea:	e7f1      	b.n	8003bd0 <osMessageQueueGet+0x56>
      stat = osErrorParameter;
 8003bec:	f06f 0003 	mvn.w	r0, #3
 8003bf0:	e7ee      	b.n	8003bd0 <osMessageQueueGet+0x56>
 8003bf2:	f06f 0003 	mvn.w	r0, #3
 8003bf6:	e7eb      	b.n	8003bd0 <osMessageQueueGet+0x56>
  stat = osOK;
 8003bf8:	2000      	movs	r0, #0
 8003bfa:	e7e9      	b.n	8003bd0 <osMessageQueueGet+0x56>

08003bfc <osMessageQueueGetCount>:

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  UBaseType_t count;

  if (hQueue == NULL) {
 8003bfc:	b148      	cbz	r0, 8003c12 <osMessageQueueGetCount+0x16>
uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8003bfe:	b508      	push	{r3, lr}
 8003c00:	f3ef 8205 	mrs	r2, IPSR
    count = 0U;
  }
  else if (IS_IRQ()) {
 8003c04:	b112      	cbz	r2, 8003c0c <osMessageQueueGetCount+0x10>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8003c06:	f000 fde9 	bl	80047dc <uxQueueMessagesWaitingFromISR>
  else {
    count = uxQueueMessagesWaiting (hQueue);
  }

  return ((uint32_t)count);
}
 8003c0a:	bd08      	pop	{r3, pc}
    count = uxQueueMessagesWaiting (hQueue);
 8003c0c:	f000 fdd3 	bl	80047b6 <uxQueueMessagesWaiting>
 8003c10:	e7fb      	b.n	8003c0a <osMessageQueueGetCount+0xe>
    count = 0U;
 8003c12:	2000      	movs	r0, #0
}
 8003c14:	4770      	bx	lr

08003c16 <osMessageQueueDelete>:
 8003c16:	f3ef 8305 	mrs	r3, IPSR
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8003c1a:	b94b      	cbnz	r3, 8003c30 <osMessageQueueDelete+0x1a>
osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8003c1c:	b510      	push	{r4, lr}
 8003c1e:	4604      	mov	r4, r0
    stat = osErrorISR;
  }
  else if (hQueue == NULL) {
 8003c20:	b148      	cbz	r0, 8003c36 <osMessageQueueDelete+0x20>
    stat = osErrorParameter;
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8003c22:	f000 fdfd 	bl	8004820 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
    vQueueDelete (hQueue);
 8003c26:	4620      	mov	r0, r4
 8003c28:	f000 fe10 	bl	800484c <vQueueDelete>
    stat = osOK;
 8003c2c:	2000      	movs	r0, #0
#else
  stat = osError;
#endif

  return (stat);
}
 8003c2e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 8003c30:	f06f 0005 	mvn.w	r0, #5
}
 8003c34:	4770      	bx	lr
    stat = osErrorParameter;
 8003c36:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 8003c3a:	e7f8      	b.n	8003c2e <osMessageQueueDelete+0x18>

08003c3c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <vApplicationGetIdleTaskMemory+0x10>)
 8003c3e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c40:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <vApplicationGetIdleTaskMemory+0x14>)
 8003c42:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c48:	6013      	str	r3, [r2, #0]
}
 8003c4a:	4770      	bx	lr
 8003c4c:	20005bd4 	.word	0x20005bd4
 8003c50:	200053d4 	.word	0x200053d4

08003c54 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c54:	4b03      	ldr	r3, [pc, #12]	; (8003c64 <vApplicationGetTimerTaskMemory+0x10>)
 8003c56:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <vApplicationGetTimerTaskMemory+0x14>)
 8003c5a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c60:	6013      	str	r3, [r2, #0]
}
 8003c62:	4770      	bx	lr
 8003c64:	20006c94 	.word	0x20006c94
 8003c68:	20005c94 	.word	0x20005c94

08003c6c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c6c:	f100 0308 	add.w	r3, r0, #8
 8003c70:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c72:	f04f 32ff 	mov.w	r2, #4294967295
 8003c76:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c78:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c7a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c80:	4770      	bx	lr

08003c82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c86:	4770      	bx	lr

08003c88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c88:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c8a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c90:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c92:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c94:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003c96:	6803      	ldr	r3, [r0, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	6003      	str	r3, [r0, #0]
}
 8003c9c:	4770      	bx	lr

08003c9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c9e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca0:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ca2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003ca6:	d011      	beq.n	8003ccc <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ca8:	f100 0308 	add.w	r3, r0, #8
 8003cac:	461c      	mov	r4, r3
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	42aa      	cmp	r2, r5
 8003cb4:	d9fa      	bls.n	8003cac <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003cb6:	6863      	ldr	r3, [r4, #4]
 8003cb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cba:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003cbc:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003cbe:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003cc0:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8003cc2:	6803      	ldr	r3, [r0, #0]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	6003      	str	r3, [r0, #0]
}
 8003cc8:	bc30      	pop	{r4, r5}
 8003cca:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ccc:	6904      	ldr	r4, [r0, #16]
 8003cce:	e7f2      	b.n	8003cb6 <vListInsert+0x18>

08003cd0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cd0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cd2:	6841      	ldr	r1, [r0, #4]
 8003cd4:	6882      	ldr	r2, [r0, #8]
 8003cd6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cd8:	6841      	ldr	r1, [r0, #4]
 8003cda:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ce0:	bf04      	itt	eq
 8003ce2:	6882      	ldreq	r2, [r0, #8]
 8003ce4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	3a01      	subs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cf0:	6818      	ldr	r0, [r3, #0]
}
 8003cf2:	4770      	bx	lr

08003cf4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003cf8:	f001 fe2c 	bl	8005954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003cfc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003cfe:	f001 fe4b 	bl	8005998 <vPortExitCritical>

	return xReturn;
}
 8003d02:	fab4 f084 	clz	r0, r4
 8003d06:	0940      	lsrs	r0, r0, #5
 8003d08:	bd10      	pop	{r4, pc}

08003d0a <prvCopyDataToQueue>:
{
 8003d0a:	b570      	push	{r4, r5, r6, lr}
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d10:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d12:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d14:	b95a      	cbnz	r2, 8003d2e <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d16:	6803      	ldr	r3, [r0, #0]
 8003d18:	b11b      	cbz	r3, 8003d22 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8003d1a:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003d20:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d22:	6880      	ldr	r0, [r0, #8]
 8003d24:	f001 faf4 	bl	8005310 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	e7f6      	b.n	8003d1c <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8003d2e:	b96d      	cbnz	r5, 8003d4c <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d30:	6840      	ldr	r0, [r0, #4]
 8003d32:	f00b f81a 	bl	800ed6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d36:	6863      	ldr	r3, [r4, #4]
 8003d38:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d3a:	4413      	add	r3, r2
 8003d3c:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d3e:	68a2      	ldr	r2, [r4, #8]
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d319      	bcc.n	8003d78 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d44:	6823      	ldr	r3, [r4, #0]
 8003d46:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8003d48:	4628      	mov	r0, r5
 8003d4a:	e7e7      	b.n	8003d1c <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d4c:	68c0      	ldr	r0, [r0, #12]
 8003d4e:	f00b f80c 	bl	800ed6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d52:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d54:	4251      	negs	r1, r2
 8003d56:	68e3      	ldr	r3, [r4, #12]
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d202      	bcs.n	8003d68 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d62:	68a3      	ldr	r3, [r4, #8]
 8003d64:	440b      	add	r3, r1
 8003d66:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003d68:	2d02      	cmp	r5, #2
 8003d6a:	d001      	beq.n	8003d70 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	e7d5      	b.n	8003d1c <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d70:	b126      	cbz	r6, 8003d7c <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8003d72:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 8003d74:	2000      	movs	r0, #0
 8003d76:	e7d1      	b.n	8003d1c <prvCopyDataToQueue+0x12>
 8003d78:	4628      	mov	r0, r5
 8003d7a:	e7cf      	b.n	8003d1c <prvCopyDataToQueue+0x12>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	e7cd      	b.n	8003d1c <prvCopyDataToQueue+0x12>

08003d80 <prvCopyDataFromQueue>:
{
 8003d80:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d82:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003d84:	b16a      	cbz	r2, 8003da2 <prvCopyDataFromQueue+0x22>
{
 8003d86:	b510      	push	{r4, lr}
 8003d88:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	4411      	add	r1, r2
 8003d8e:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d90:	689c      	ldr	r4, [r3, #8]
 8003d92:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003d94:	bf24      	itt	cs
 8003d96:	6819      	ldrcs	r1, [r3, #0]
 8003d98:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d9a:	68d9      	ldr	r1, [r3, #12]
 8003d9c:	f00a ffe5 	bl	800ed6a <memcpy>
}
 8003da0:	bd10      	pop	{r4, pc}
 8003da2:	4770      	bx	lr

08003da4 <prvUnlockQueue>:
{
 8003da4:	b570      	push	{r4, r5, r6, lr}
 8003da6:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8003da8:	f001 fdd4 	bl	8005954 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003dac:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8003db0:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003db2:	2c00      	cmp	r4, #0
 8003db4:	dd0f      	ble.n	8003dd6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003db6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8003dba:	e002      	b.n	8003dc2 <prvUnlockQueue+0x1e>
			--cTxLock;
 8003dbc:	3c01      	subs	r4, #1
 8003dbe:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003dc0:	b14c      	cbz	r4, 8003dd6 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dc2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003dc4:	b13b      	cbz	r3, 8003dd6 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f001 f9aa 	bl	8005120 <xTaskRemoveFromEventList>
 8003dcc:	2800      	cmp	r0, #0
 8003dce:	d0f5      	beq.n	8003dbc <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8003dd0:	f001 fa38 	bl	8005244 <vTaskMissedYield>
 8003dd4:	e7f2      	b.n	8003dbc <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8003dd6:	23ff      	movs	r3, #255	; 0xff
 8003dd8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003ddc:	f001 fddc 	bl	8005998 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003de0:	f001 fdb8 	bl	8005954 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003de4:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 8003de8:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003dea:	2c00      	cmp	r4, #0
 8003dec:	dd0f      	ble.n	8003e0e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dee:	f105 0610 	add.w	r6, r5, #16
 8003df2:	e002      	b.n	8003dfa <prvUnlockQueue+0x56>
				--cRxLock;
 8003df4:	3c01      	subs	r4, #1
 8003df6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003df8:	b14c      	cbz	r4, 8003e0e <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dfa:	692b      	ldr	r3, [r5, #16]
 8003dfc:	b13b      	cbz	r3, 8003e0e <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f001 f98e 	bl	8005120 <xTaskRemoveFromEventList>
 8003e04:	2800      	cmp	r0, #0
 8003e06:	d0f5      	beq.n	8003df4 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8003e08:	f001 fa1c 	bl	8005244 <vTaskMissedYield>
 8003e0c:	e7f2      	b.n	8003df4 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 8003e0e:	23ff      	movs	r3, #255	; 0xff
 8003e10:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003e14:	f001 fdc0 	bl	8005998 <vPortExitCritical>
}
 8003e18:	bd70      	pop	{r4, r5, r6, pc}

08003e1a <xQueueGenericReset>:
{
 8003e1a:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8003e1c:	b1e0      	cbz	r0, 8003e58 <xQueueGenericReset+0x3e>
 8003e1e:	460d      	mov	r5, r1
 8003e20:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003e22:	f001 fd97 	bl	8005954 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e26:	6822      	ldr	r2, [r4, #0]
 8003e28:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003e2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e2c:	fb01 f303 	mul.w	r3, r1, r3
 8003e30:	18d0      	adds	r0, r2, r3
 8003e32:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e34:	2000      	movs	r0, #0
 8003e36:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e38:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e3a:	1a5b      	subs	r3, r3, r1
 8003e3c:	4413      	add	r3, r2
 8003e3e:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e40:	23ff      	movs	r3, #255	; 0xff
 8003e42:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003e4a:	b9fd      	cbnz	r5, 8003e8c <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e4c:	6923      	ldr	r3, [r4, #16]
 8003e4e:	b963      	cbnz	r3, 8003e6a <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 8003e50:	f001 fda2 	bl	8005998 <vPortExitCritical>
}
 8003e54:	2001      	movs	r0, #1
 8003e56:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8003e68:	e7fe      	b.n	8003e68 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e6a:	f104 0010 	add.w	r0, r4, #16
 8003e6e:	f001 f957 	bl	8005120 <xTaskRemoveFromEventList>
 8003e72:	2800      	cmp	r0, #0
 8003e74:	d0ec      	beq.n	8003e50 <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8003e76:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	e7e1      	b.n	8003e50 <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e8c:	f104 0010 	add.w	r0, r4, #16
 8003e90:	f7ff feec 	bl	8003c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e98:	f7ff fee8 	bl	8003c6c <vListInitialise>
 8003e9c:	e7d8      	b.n	8003e50 <xQueueGenericReset+0x36>

08003e9e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e9e:	b940      	cbnz	r0, 8003eb2 <xQueueGenericCreateStatic+0x14>
 8003ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea4:	f383 8811 	msr	BASEPRI, r3
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	f3bf 8f4f 	dsb	sy
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueGenericCreateStatic+0x12>
	{
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	461c      	mov	r4, r3
 8003eb8:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 8003eba:	b154      	cbz	r4, 8003ed2 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ebc:	b192      	cbz	r2, 8003ee4 <xQueueGenericCreateStatic+0x46>
 8003ebe:	b9d9      	cbnz	r1, 8003ef8 <xQueueGenericCreateStatic+0x5a>
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	e7fe      	b.n	8003ed0 <xQueueGenericCreateStatic+0x32>
 8003ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed6:	f383 8811 	msr	BASEPRI, r3
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8003ee2:	e7fe      	b.n	8003ee2 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003ee4:	b341      	cbz	r1, 8003f38 <xQueueGenericCreateStatic+0x9a>
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003ef8:	2050      	movs	r0, #80	; 0x50
 8003efa:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003efc:	9801      	ldr	r0, [sp, #4]
 8003efe:	2850      	cmp	r0, #80	; 0x50
 8003f00:	d008      	beq.n	8003f14 <xQueueGenericCreateStatic+0x76>
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	e7fe      	b.n	8003f12 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f14:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f16:	2001      	movs	r0, #1
 8003f18:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f1c:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003f1e:	63e3      	str	r3, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f20:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f22:	2101      	movs	r1, #1
 8003f24:	4620      	mov	r0, r4
 8003f26:	f7ff ff78 	bl	8003e1a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003f2a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8003f2e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 8003f32:	4620      	mov	r0, r4
 8003f34:	b002      	add	sp, #8
 8003f36:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f38:	2250      	movs	r2, #80	; 0x50
 8003f3a:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f3c:	9a01      	ldr	r2, [sp, #4]
 8003f3e:	2a50      	cmp	r2, #80	; 0x50
 8003f40:	d1df      	bne.n	8003f02 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f42:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f44:	2201      	movs	r2, #1
 8003f46:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	e7e6      	b.n	8003f1c <xQueueGenericCreateStatic+0x7e>

08003f4e <xQueueGenericCreate>:
	{
 8003f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f50:	b940      	cbnz	r0, 8003f64 <xQueueGenericCreate+0x16>
 8003f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f56:	f383 8811 	msr	BASEPRI, r3
 8003f5a:	f3bf 8f6f 	isb	sy
 8003f5e:	f3bf 8f4f 	dsb	sy
 8003f62:	e7fe      	b.n	8003f62 <xQueueGenericCreate+0x14>
 8003f64:	460d      	mov	r5, r1
 8003f66:	4614      	mov	r4, r2
 8003f68:	4607      	mov	r7, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f6a:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f6e:	3050      	adds	r0, #80	; 0x50
 8003f70:	f001 fe76 	bl	8005c60 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003f74:	4606      	mov	r6, r0
 8003f76:	b170      	cbz	r0, 8003f96 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003f7e:	b165      	cbz	r5, 8003f9a <xQueueGenericCreate+0x4c>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f80:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f84:	6033      	str	r3, [r6, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003f86:	63f7      	str	r7, [r6, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003f88:	6435      	str	r5, [r6, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f7ff ff44 	bl	8003e1a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8003f92:	f886 404c 	strb.w	r4, [r6, #76]	; 0x4c
	}
 8003f96:	4630      	mov	r0, r6
 8003f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	e7f2      	b.n	8003f84 <xQueueGenericCreate+0x36>

08003f9e <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8003f9e:	b940      	cbnz	r0, 8003fb2 <xQueueCreateCountingSemaphoreStatic+0x14>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueCreateCountingSemaphoreStatic+0x12>
	{
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	b082      	sub	sp, #8
 8003fb6:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003fb8:	4288      	cmp	r0, r1
 8003fba:	d208      	bcs.n	8003fce <xQueueCreateCountingSemaphoreStatic+0x30>
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	e7fe      	b.n	8003fcc <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003fce:	2302      	movs	r3, #2
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	f7ff ff61 	bl	8003e9e <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 8003fdc:	b100      	cbz	r0, 8003fe0 <xQueueCreateCountingSemaphoreStatic+0x42>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003fde:	6384      	str	r4, [r0, #56]	; 0x38
	}
 8003fe0:	b002      	add	sp, #8
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 8003fe4:	b940      	cbnz	r0, 8003ff8 <xQueueCreateCountingSemaphore+0x14>
 8003fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fea:	f383 8811 	msr	BASEPRI, r3
 8003fee:	f3bf 8f6f 	isb	sy
 8003ff2:	f3bf 8f4f 	dsb	sy
 8003ff6:	e7fe      	b.n	8003ff6 <xQueueCreateCountingSemaphore+0x12>
	{
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	460c      	mov	r4, r1
		configASSERT( uxInitialCount <= uxMaxCount );
 8003ffc:	4288      	cmp	r0, r1
 8003ffe:	d208      	bcs.n	8004012 <xQueueCreateCountingSemaphore+0x2e>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	e7fe      	b.n	8004010 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004012:	2202      	movs	r2, #2
 8004014:	2100      	movs	r1, #0
 8004016:	f7ff ff9a 	bl	8003f4e <xQueueGenericCreate>
		if( xHandle != NULL )
 800401a:	b100      	cbz	r0, 800401e <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800401c:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800401e:	bd10      	pop	{r4, pc}

08004020 <xQueueGenericSend>:
{
 8004020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004024:	b085      	sub	sp, #20
 8004026:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8004028:	b188      	cbz	r0, 800404e <xQueueGenericSend+0x2e>
 800402a:	460e      	mov	r6, r1
 800402c:	461d      	mov	r5, r3
 800402e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004030:	b1b1      	cbz	r1, 8004060 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004032:	2d02      	cmp	r5, #2
 8004034:	d120      	bne.n	8004078 <xQueueGenericSend+0x58>
 8004036:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	d01d      	beq.n	8004078 <xQueueGenericSend+0x58>
 800403c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004040:	f383 8811 	msr	BASEPRI, r3
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	e7fe      	b.n	800404c <xQueueGenericSend+0x2c>
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800405e:	e7fe      	b.n	800405e <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004060:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0e5      	beq.n	8004032 <xQueueGenericSend+0x12>
 8004066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406a:	f383 8811 	msr	BASEPRI, r3
 800406e:	f3bf 8f6f 	isb	sy
 8004072:	f3bf 8f4f 	dsb	sy
 8004076:	e7fe      	b.n	8004076 <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004078:	f001 f8f0 	bl	800525c <xTaskGetSchedulerState>
 800407c:	b950      	cbnz	r0, 8004094 <xQueueGenericSend+0x74>
 800407e:	9b01      	ldr	r3, [sp, #4]
 8004080:	b163      	cbz	r3, 800409c <xQueueGenericSend+0x7c>
 8004082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	e7fe      	b.n	8004092 <xQueueGenericSend+0x72>
 8004094:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8004098:	2700      	movs	r7, #0
 800409a:	e03a      	b.n	8004112 <xQueueGenericSend+0xf2>
 800409c:	f04f 0800 	mov.w	r8, #0
 80040a0:	e7fa      	b.n	8004098 <xQueueGenericSend+0x78>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040a2:	462a      	mov	r2, r5
 80040a4:	4631      	mov	r1, r6
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7ff fe2f 	bl	8003d0a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ae:	b983      	cbnz	r3, 80040d2 <xQueueGenericSend+0xb2>
					else if( xYieldRequired != pdFALSE )
 80040b0:	b148      	cbz	r0, 80040c6 <xQueueGenericSend+0xa6>
						queueYIELD_IF_USING_PREEMPTION();
 80040b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040be:	f3bf 8f4f 	dsb	sy
 80040c2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80040c6:	f001 fc67 	bl	8005998 <vPortExitCritical>
				return pdPASS;
 80040ca:	2001      	movs	r0, #1
}
 80040cc:	b005      	add	sp, #20
 80040ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040d6:	f001 f823 	bl	8005120 <xTaskRemoveFromEventList>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d0f3      	beq.n	80040c6 <xQueueGenericSend+0xa6>
							queueYIELD_IF_USING_PREEMPTION();
 80040de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	e7e8      	b.n	80040c6 <xQueueGenericSend+0xa6>
					taskEXIT_CRITICAL();
 80040f4:	f001 fc50 	bl	8005998 <vPortExitCritical>
					return errQUEUE_FULL;
 80040f8:	2000      	movs	r0, #0
 80040fa:	e7e7      	b.n	80040cc <xQueueGenericSend+0xac>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040fc:	a802      	add	r0, sp, #8
 80040fe:	f001 f853 	bl	80051a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004102:	e014      	b.n	800412e <xQueueGenericSend+0x10e>
				prvUnlockQueue( pxQueue );
 8004104:	4620      	mov	r0, r4
 8004106:	f7ff fe4d 	bl	8003da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800410a:	f000 fed5 	bl	8004eb8 <xTaskResumeAll>
 800410e:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8004112:	f001 fc1f 	bl	8005954 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004116:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800411a:	429a      	cmp	r2, r3
 800411c:	d3c1      	bcc.n	80040a2 <xQueueGenericSend+0x82>
 800411e:	2d02      	cmp	r5, #2
 8004120:	d0bf      	beq.n	80040a2 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004122:	9b01      	ldr	r3, [sp, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0e5      	beq.n	80040f4 <xQueueGenericSend+0xd4>
				else if( xEntryTimeSet == pdFALSE )
 8004128:	f1b8 0f00 	cmp.w	r8, #0
 800412c:	d0e6      	beq.n	80040fc <xQueueGenericSend+0xdc>
		taskEXIT_CRITICAL();
 800412e:	f001 fc33 	bl	8005998 <vPortExitCritical>
		vTaskSuspendAll();
 8004132:	f000 fe11 	bl	8004d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004136:	f001 fc0d 	bl	8005954 <vPortEnterCritical>
 800413a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800413e:	b252      	sxtb	r2, r2
 8004140:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004144:	bf08      	it	eq
 8004146:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800414a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 800414e:	b252      	sxtb	r2, r2
 8004150:	f1b2 3fff 	cmp.w	r2, #4294967295
 8004154:	bf08      	it	eq
 8004156:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800415a:	f001 fc1d 	bl	8005998 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800415e:	a901      	add	r1, sp, #4
 8004160:	a802      	add	r0, sp, #8
 8004162:	f001 f82d 	bl	80051c0 <xTaskCheckForTimeOut>
 8004166:	bb00      	cbnz	r0, 80041aa <xQueueGenericSend+0x18a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004168:	f001 fbf4 	bl	8005954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800416c:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
 8004170:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004174:	f001 fc10 	bl	8005998 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004178:	45c1      	cmp	r9, r8
 800417a:	d1c3      	bne.n	8004104 <xQueueGenericSend+0xe4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800417c:	9901      	ldr	r1, [sp, #4]
 800417e:	f104 0010 	add.w	r0, r4, #16
 8004182:	f000 ff97 	bl	80050b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004186:	4620      	mov	r0, r4
 8004188:	f7ff fe0c 	bl	8003da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800418c:	f000 fe94 	bl	8004eb8 <xTaskResumeAll>
 8004190:	2800      	cmp	r0, #0
 8004192:	d1bc      	bne.n	800410e <xQueueGenericSend+0xee>
					portYIELD_WITHIN_API();
 8004194:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004198:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800419c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	e7b1      	b.n	800410e <xQueueGenericSend+0xee>
			prvUnlockQueue( pxQueue );
 80041aa:	4620      	mov	r0, r4
 80041ac:	f7ff fdfa 	bl	8003da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041b0:	f000 fe82 	bl	8004eb8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80041b4:	2000      	movs	r0, #0
 80041b6:	e789      	b.n	80040cc <xQueueGenericSend+0xac>

080041b8 <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 80041b8:	b148      	cbz	r0, 80041ce <prvInitialiseMutex+0x16>
	{
 80041ba:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80041bc:	2100      	movs	r1, #0
 80041be:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80041c0:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80041c2:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80041c4:	460b      	mov	r3, r1
 80041c6:	460a      	mov	r2, r1
 80041c8:	f7ff ff2a 	bl	8004020 <xQueueGenericSend>
	}
 80041cc:	bd08      	pop	{r3, pc}
 80041ce:	4770      	bx	lr

080041d0 <xQueueCreateMutex>:
	{
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80041d4:	2100      	movs	r1, #0
 80041d6:	2001      	movs	r0, #1
 80041d8:	f7ff feb9 	bl	8003f4e <xQueueGenericCreate>
 80041dc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041de:	f7ff ffeb 	bl	80041b8 <prvInitialiseMutex>
	}
 80041e2:	4620      	mov	r0, r4
 80041e4:	bd10      	pop	{r4, pc}

080041e6 <xQueueCreateMutexStatic>:
	{
 80041e6:	b510      	push	{r4, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80041ec:	9000      	str	r0, [sp, #0]
 80041ee:	2200      	movs	r2, #0
 80041f0:	4611      	mov	r1, r2
 80041f2:	2001      	movs	r0, #1
 80041f4:	f7ff fe53 	bl	8003e9e <xQueueGenericCreateStatic>
 80041f8:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80041fa:	f7ff ffdd 	bl	80041b8 <prvInitialiseMutex>
	}
 80041fe:	4620      	mov	r0, r4
 8004200:	b002      	add	sp, #8
 8004202:	bd10      	pop	{r4, pc}

08004204 <xQueueGiveMutexRecursive>:
	{
 8004204:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 8004206:	b138      	cbz	r0, 8004218 <xQueueGiveMutexRecursive+0x14>
 8004208:	4604      	mov	r4, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800420a:	6885      	ldr	r5, [r0, #8]
 800420c:	f001 f820 	bl	8005250 <xTaskGetCurrentTaskHandle>
 8004210:	4285      	cmp	r5, r0
 8004212:	d00a      	beq.n	800422a <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
 8004214:	2000      	movs	r0, #0
	}
 8004216:	bd38      	pop	{r3, r4, r5, pc}
 8004218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004228:	e7fe      	b.n	8004228 <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800422a:	68e3      	ldr	r3, [r4, #12]
 800422c:	3b01      	subs	r3, #1
 800422e:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004230:	b10b      	cbz	r3, 8004236 <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
 8004232:	2001      	movs	r0, #1
		return xReturn;
 8004234:	e7ef      	b.n	8004216 <xQueueGiveMutexRecursive+0x12>
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004236:	461a      	mov	r2, r3
 8004238:	4619      	mov	r1, r3
 800423a:	4620      	mov	r0, r4
 800423c:	f7ff fef0 	bl	8004020 <xQueueGenericSend>
			xReturn = pdPASS;
 8004240:	2001      	movs	r0, #1
 8004242:	e7e8      	b.n	8004216 <xQueueGiveMutexRecursive+0x12>

08004244 <xQueueGenericSendFromISR>:
{
 8004244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004248:	b190      	cbz	r0, 8004270 <xQueueGenericSendFromISR+0x2c>
 800424a:	460f      	mov	r7, r1
 800424c:	4616      	mov	r6, r2
 800424e:	461c      	mov	r4, r3
 8004250:	4605      	mov	r5, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004252:	b1b1      	cbz	r1, 8004282 <xQueueGenericSendFromISR+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004254:	2c02      	cmp	r4, #2
 8004256:	d120      	bne.n	800429a <xQueueGenericSendFromISR+0x56>
 8004258:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d01d      	beq.n	800429a <xQueueGenericSendFromISR+0x56>
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	e7fe      	b.n	800426e <xQueueGenericSendFromISR+0x2a>
 8004270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004280:	e7fe      	b.n	8004280 <xQueueGenericSendFromISR+0x3c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004282:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0e5      	beq.n	8004254 <xQueueGenericSendFromISR+0x10>
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	e7fe      	b.n	8004298 <xQueueGenericSendFromISR+0x54>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800429a:	f001 fc83 	bl	8005ba4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800429e:	f3ef 8911 	mrs	r9, BASEPRI
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042b2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80042b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d306      	bcc.n	80042c8 <xQueueGenericSendFromISR+0x84>
 80042ba:	2c02      	cmp	r4, #2
 80042bc:	d004      	beq.n	80042c8 <xQueueGenericSendFromISR+0x84>
			xReturn = errQUEUE_FULL;
 80042be:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042c0:	f389 8811 	msr	BASEPRI, r9
}
 80042c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			const int8_t cTxLock = pxQueue->cTxLock;
 80042c8:	f895 8045 	ldrb.w	r8, [r5, #69]	; 0x45
 80042cc:	fa4f f888 	sxtb.w	r8, r8
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042d0:	6bab      	ldr	r3, [r5, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042d2:	4622      	mov	r2, r4
 80042d4:	4639      	mov	r1, r7
 80042d6:	4628      	mov	r0, r5
 80042d8:	f7ff fd17 	bl	8003d0a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80042dc:	f1b8 3fff 	cmp.w	r8, #4294967295
 80042e0:	d006      	beq.n	80042f0 <xQueueGenericSendFromISR+0xac>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042e2:	f108 0301 	add.w	r3, r8, #1
 80042e6:	b25b      	sxtb	r3, r3
 80042e8:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7e7      	b.n	80042c0 <xQueueGenericSendFromISR+0x7c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80042f2:	b90b      	cbnz	r3, 80042f8 <xQueueGenericSendFromISR+0xb4>
			xReturn = pdPASS;
 80042f4:	2001      	movs	r0, #1
 80042f6:	e7e3      	b.n	80042c0 <xQueueGenericSendFromISR+0x7c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f8:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80042fc:	f000 ff10 	bl	8005120 <xTaskRemoveFromEventList>
 8004300:	b118      	cbz	r0, 800430a <xQueueGenericSendFromISR+0xc6>
							if( pxHigherPriorityTaskWoken != NULL )
 8004302:	b126      	cbz	r6, 800430e <xQueueGenericSendFromISR+0xca>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004304:	2001      	movs	r0, #1
 8004306:	6030      	str	r0, [r6, #0]
 8004308:	e7da      	b.n	80042c0 <xQueueGenericSendFromISR+0x7c>
			xReturn = pdPASS;
 800430a:	2001      	movs	r0, #1
 800430c:	e7d8      	b.n	80042c0 <xQueueGenericSendFromISR+0x7c>
 800430e:	2001      	movs	r0, #1
 8004310:	e7d6      	b.n	80042c0 <xQueueGenericSendFromISR+0x7c>

08004312 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8004312:	b168      	cbz	r0, 8004330 <xQueueGiveFromISR+0x1e>
{
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	460c      	mov	r4, r1
 8004318:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800431a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800431c:	b18b      	cbz	r3, 8004342 <xQueueGiveFromISR+0x30>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	e7fe      	b.n	800432e <xQueueGiveFromISR+0x1c>
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004340:	e7fe      	b.n	8004340 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004342:	6803      	ldr	r3, [r0, #0]
 8004344:	b1eb      	cbz	r3, 8004382 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004346:	f001 fc2d 	bl	8005ba4 <vPortValidateInterruptPriority>
	__asm volatile
 800434a:	f3ef 8611 	mrs	r6, BASEPRI
 800434e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800435e:	6baa      	ldr	r2, [r5, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004360:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004362:	4293      	cmp	r3, r2
 8004364:	d926      	bls.n	80043b4 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004366:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 800436a:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800436c:	3201      	adds	r2, #1
 800436e:	63aa      	str	r2, [r5, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d011      	beq.n	800439a <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004376:	3301      	adds	r3, #1
 8004378:	b25b      	sxtb	r3, r3
 800437a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			xReturn = pdPASS;
 800437e:	2001      	movs	r0, #1
 8004380:	e019      	b.n	80043b6 <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004382:	6883      	ldr	r3, [r0, #8]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0de      	beq.n	8004346 <xQueueGiveFromISR+0x34>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	e7fe      	b.n	8004398 <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800439a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800439c:	b90b      	cbnz	r3, 80043a2 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 800439e:	2001      	movs	r0, #1
 80043a0:	e009      	b.n	80043b6 <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80043a6:	f000 febb 	bl	8005120 <xTaskRemoveFromEventList>
 80043aa:	b138      	cbz	r0, 80043bc <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 80043ac:	b144      	cbz	r4, 80043c0 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043ae:	2001      	movs	r0, #1
 80043b0:	6020      	str	r0, [r4, #0]
 80043b2:	e000      	b.n	80043b6 <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 80043b4:	2000      	movs	r0, #0
	__asm volatile
 80043b6:	f386 8811 	msr	BASEPRI, r6
}
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 80043bc:	2001      	movs	r0, #1
 80043be:	e7fa      	b.n	80043b6 <xQueueGiveFromISR+0xa4>
 80043c0:	2001      	movs	r0, #1
 80043c2:	e7f8      	b.n	80043b6 <xQueueGiveFromISR+0xa4>

080043c4 <xQueueReceive>:
{
 80043c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80043cc:	b180      	cbz	r0, 80043f0 <xQueueReceive+0x2c>
 80043ce:	460e      	mov	r6, r1
 80043d0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d2:	b1b1      	cbz	r1, 8004402 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043d4:	f000 ff42 	bl	800525c <xTaskGetSchedulerState>
 80043d8:	b9f8      	cbnz	r0, 800441a <xQueueReceive+0x56>
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	b30b      	cbz	r3, 8004422 <xQueueReceive+0x5e>
	__asm volatile
 80043de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e2:	f383 8811 	msr	BASEPRI, r3
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	f3bf 8f4f 	dsb	sy
 80043ee:	e7fe      	b.n	80043ee <xQueueReceive+0x2a>
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004400:	e7fe      	b.n	8004400 <xQueueReceive+0x3c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004402:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0e5      	beq.n	80043d4 <xQueueReceive+0x10>
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	e7fe      	b.n	8004418 <xQueueReceive+0x54>
 800441a:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 800441e:	2700      	movs	r7, #0
 8004420:	e03b      	b.n	800449a <xQueueReceive+0xd6>
 8004422:	f04f 0800 	mov.w	r8, #0
 8004426:	e7fa      	b.n	800441e <xQueueReceive+0x5a>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004428:	4631      	mov	r1, r6
 800442a:	4620      	mov	r0, r4
 800442c:	f7ff fca8 	bl	8003d80 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004430:	3d01      	subs	r5, #1
 8004432:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004434:	6923      	ldr	r3, [r4, #16]
 8004436:	b92b      	cbnz	r3, 8004444 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8004438:	f001 faae 	bl	8005998 <vPortExitCritical>
				return pdPASS;
 800443c:	2001      	movs	r0, #1
}
 800443e:	b004      	add	sp, #16
 8004440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004444:	f104 0010 	add.w	r0, r4, #16
 8004448:	f000 fe6a 	bl	8005120 <xTaskRemoveFromEventList>
 800444c:	2800      	cmp	r0, #0
 800444e:	d0f3      	beq.n	8004438 <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8004450:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004458:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	f3bf 8f6f 	isb	sy
 8004464:	e7e8      	b.n	8004438 <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8004466:	f001 fa97 	bl	8005998 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800446a:	2000      	movs	r0, #0
 800446c:	e7e7      	b.n	800443e <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800446e:	a802      	add	r0, sp, #8
 8004470:	f000 fe9a 	bl	80051a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004474:	e01c      	b.n	80044b0 <xQueueReceive+0xec>
				prvUnlockQueue( pxQueue );
 8004476:	4620      	mov	r0, r4
 8004478:	f7ff fc94 	bl	8003da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800447c:	f000 fd1c 	bl	8004eb8 <xTaskResumeAll>
 8004480:	e009      	b.n	8004496 <xQueueReceive+0xd2>
			prvUnlockQueue( pxQueue );
 8004482:	4620      	mov	r0, r4
 8004484:	f7ff fc8e 	bl	8003da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004488:	f000 fd16 	bl	8004eb8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff fc31 	bl	8003cf4 <prvIsQueueEmpty>
 8004492:	2800      	cmp	r0, #0
 8004494:	d146      	bne.n	8004524 <xQueueReceive+0x160>
 8004496:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 800449a:	f001 fa5b 	bl	8005954 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800449e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	d1c1      	bne.n	8004428 <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 80044a4:	9b01      	ldr	r3, [sp, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0dd      	beq.n	8004466 <xQueueReceive+0xa2>
				else if( xEntryTimeSet == pdFALSE )
 80044aa:	f1b8 0f00 	cmp.w	r8, #0
 80044ae:	d0de      	beq.n	800446e <xQueueReceive+0xaa>
		taskEXIT_CRITICAL();
 80044b0:	f001 fa72 	bl	8005998 <vPortExitCritical>
		vTaskSuspendAll();
 80044b4:	f000 fc50 	bl	8004d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044b8:	f001 fa4c 	bl	8005954 <vPortEnterCritical>
 80044bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80044c0:	b25b      	sxtb	r3, r3
 80044c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c6:	bf08      	it	eq
 80044c8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80044cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80044d0:	b25b      	sxtb	r3, r3
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	bf08      	it	eq
 80044d8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80044dc:	f001 fa5c 	bl	8005998 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e0:	a901      	add	r1, sp, #4
 80044e2:	a802      	add	r0, sp, #8
 80044e4:	f000 fe6c 	bl	80051c0 <xTaskCheckForTimeOut>
 80044e8:	2800      	cmp	r0, #0
 80044ea:	d1ca      	bne.n	8004482 <xQueueReceive+0xbe>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044ec:	4620      	mov	r0, r4
 80044ee:	f7ff fc01 	bl	8003cf4 <prvIsQueueEmpty>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d0bf      	beq.n	8004476 <xQueueReceive+0xb2>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044f6:	9901      	ldr	r1, [sp, #4]
 80044f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80044fc:	f000 fdda 	bl	80050b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004500:	4620      	mov	r0, r4
 8004502:	f7ff fc4f 	bl	8003da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004506:	f000 fcd7 	bl	8004eb8 <xTaskResumeAll>
 800450a:	2800      	cmp	r0, #0
 800450c:	d1c3      	bne.n	8004496 <xQueueReceive+0xd2>
					portYIELD_WITHIN_API();
 800450e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004516:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	e7b8      	b.n	8004496 <xQueueReceive+0xd2>
				return errQUEUE_EMPTY;
 8004524:	2000      	movs	r0, #0
 8004526:	e78a      	b.n	800443e <xQueueReceive+0x7a>

08004528 <xQueueSemaphoreTake>:
{
 8004528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452a:	b085      	sub	sp, #20
 800452c:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800452e:	b158      	cbz	r0, 8004548 <xQueueSemaphoreTake+0x20>
 8004530:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8004532:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004534:	b18b      	cbz	r3, 800455a <xQueueSemaphoreTake+0x32>
 8004536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453a:	f383 8811 	msr	BASEPRI, r3
 800453e:	f3bf 8f6f 	isb	sy
 8004542:	f3bf 8f4f 	dsb	sy
 8004546:	e7fe      	b.n	8004546 <xQueueSemaphoreTake+0x1e>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8004558:	e7fe      	b.n	8004558 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800455a:	f000 fe7f 	bl	800525c <xTaskGetSchedulerState>
 800455e:	b950      	cbnz	r0, 8004576 <xQueueSemaphoreTake+0x4e>
 8004560:	9b01      	ldr	r3, [sp, #4]
 8004562:	b163      	cbz	r3, 800457e <xQueueSemaphoreTake+0x56>
 8004564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004568:	f383 8811 	msr	BASEPRI, r3
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	e7fe      	b.n	8004574 <xQueueSemaphoreTake+0x4c>
 8004576:	2600      	movs	r6, #0
 8004578:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800457a:	2500      	movs	r5, #0
 800457c:	e04e      	b.n	800461c <xQueueSemaphoreTake+0xf4>
 800457e:	2600      	movs	r6, #0
 8004580:	4637      	mov	r7, r6
 8004582:	e7fa      	b.n	800457a <xQueueSemaphoreTake+0x52>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004584:	3b01      	subs	r3, #1
 8004586:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004588:	6823      	ldr	r3, [r4, #0]
 800458a:	b13b      	cbz	r3, 800459c <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800458c:	6923      	ldr	r3, [r4, #16]
 800458e:	b94b      	cbnz	r3, 80045a4 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 8004590:	f001 fa02 	bl	8005998 <vPortExitCritical>
				return pdPASS;
 8004594:	2601      	movs	r6, #1
}
 8004596:	4630      	mov	r0, r6
 8004598:	b005      	add	sp, #20
 800459a:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800459c:	f000 ff50 	bl	8005440 <pvTaskIncrementMutexHeldCount>
 80045a0:	60a0      	str	r0, [r4, #8]
 80045a2:	e7f3      	b.n	800458c <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045a4:	f104 0010 	add.w	r0, r4, #16
 80045a8:	f000 fdba 	bl	8005120 <xTaskRemoveFromEventList>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	d0ef      	beq.n	8004590 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 80045b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80045b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80045bc:	f3bf 8f4f 	dsb	sy
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	e7e4      	b.n	8004590 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80045c6:	b146      	cbz	r6, 80045da <xQueueSemaphoreTake+0xb2>
 80045c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045cc:	f383 8811 	msr	BASEPRI, r3
 80045d0:	f3bf 8f6f 	isb	sy
 80045d4:	f3bf 8f4f 	dsb	sy
 80045d8:	e7fe      	b.n	80045d8 <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 80045da:	f001 f9dd 	bl	8005998 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80045de:	e7da      	b.n	8004596 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e0:	a802      	add	r0, sp, #8
 80045e2:	f000 fde1 	bl	80051a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045e6:	e023      	b.n	8004630 <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 80045e8:	f001 f9b4 	bl	8005954 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045ec:	68a0      	ldr	r0, [r4, #8]
 80045ee:	f000 fe45 	bl	800527c <xTaskPriorityInherit>
 80045f2:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 80045f4:	f001 f9d0 	bl	8005998 <vPortExitCritical>
 80045f8:	e040      	b.n	800467c <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 80045fa:	4620      	mov	r0, r4
 80045fc:	f7ff fbd2 	bl	8003da4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004600:	f000 fc5a 	bl	8004eb8 <xTaskResumeAll>
 8004604:	e009      	b.n	800461a <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff fbcc 	bl	8003da4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800460c:	f000 fc54 	bl	8004eb8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004610:	4620      	mov	r0, r4
 8004612:	f7ff fb6f 	bl	8003cf4 <prvIsQueueEmpty>
 8004616:	2800      	cmp	r0, #0
 8004618:	d147      	bne.n	80046aa <xQueueSemaphoreTake+0x182>
 800461a:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800461c:	f001 f99a 	bl	8005954 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004620:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1ae      	bne.n	8004584 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004626:	9b01      	ldr	r3, [sp, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d0cc      	beq.n	80045c6 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800462c:	2f00      	cmp	r7, #0
 800462e:	d0d7      	beq.n	80045e0 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 8004630:	f001 f9b2 	bl	8005998 <vPortExitCritical>
		vTaskSuspendAll();
 8004634:	f000 fb90 	bl	8004d58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004638:	f001 f98c 	bl	8005954 <vPortEnterCritical>
 800463c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004646:	bf08      	it	eq
 8004648:	f884 5044 	strbeq.w	r5, [r4, #68]	; 0x44
 800464c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004650:	b25b      	sxtb	r3, r3
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	bf08      	it	eq
 8004658:	f884 5045 	strbeq.w	r5, [r4, #69]	; 0x45
 800465c:	f001 f99c 	bl	8005998 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004660:	a901      	add	r1, sp, #4
 8004662:	a802      	add	r0, sp, #8
 8004664:	f000 fdac 	bl	80051c0 <xTaskCheckForTimeOut>
 8004668:	2800      	cmp	r0, #0
 800466a:	d1cc      	bne.n	8004606 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800466c:	4620      	mov	r0, r4
 800466e:	f7ff fb41 	bl	8003cf4 <prvIsQueueEmpty>
 8004672:	2800      	cmp	r0, #0
 8004674:	d0c1      	beq.n	80045fa <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0b5      	beq.n	80045e8 <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800467c:	9901      	ldr	r1, [sp, #4]
 800467e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004682:	f000 fd17 	bl	80050b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004686:	4620      	mov	r0, r4
 8004688:	f7ff fb8c 	bl	8003da4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800468c:	f000 fc14 	bl	8004eb8 <xTaskResumeAll>
 8004690:	2800      	cmp	r0, #0
 8004692:	d1c2      	bne.n	800461a <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 8004694:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	e7b7      	b.n	800461a <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 80046aa:	2e00      	cmp	r6, #0
 80046ac:	f43f af73 	beq.w	8004596 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 80046b0:	f001 f950 	bl	8005954 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80046b6:	b119      	cbz	r1, 80046c0 <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80046c0:	68a0      	ldr	r0, [r4, #8]
 80046c2:	f000 fe6d 	bl	80053a0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80046c6:	f001 f967 	bl	8005998 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80046ca:	2600      	movs	r6, #0
 80046cc:	e763      	b.n	8004596 <xQueueSemaphoreTake+0x6e>

080046ce <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
 80046ce:	b180      	cbz	r0, 80046f2 <xQueueTakeMutexRecursive+0x24>
	{
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	460c      	mov	r4, r1
 80046d4:	4605      	mov	r5, r0
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80046d6:	6886      	ldr	r6, [r0, #8]
 80046d8:	f000 fdba 	bl	8005250 <xTaskGetCurrentTaskHandle>
 80046dc:	4286      	cmp	r6, r0
 80046de:	d011      	beq.n	8004704 <xQueueTakeMutexRecursive+0x36>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80046e0:	4621      	mov	r1, r4
 80046e2:	4628      	mov	r0, r5
 80046e4:	f7ff ff20 	bl	8004528 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 80046e8:	b180      	cbz	r0, 800470c <xQueueTakeMutexRecursive+0x3e>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80046ea:	68eb      	ldr	r3, [r5, #12]
 80046ec:	3301      	adds	r3, #1
 80046ee:	60eb      	str	r3, [r5, #12]
		return xReturn;
 80046f0:	e00c      	b.n	800470c <xQueueTakeMutexRecursive+0x3e>
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
 8004702:	e7fe      	b.n	8004702 <xQueueTakeMutexRecursive+0x34>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004704:	68eb      	ldr	r3, [r5, #12]
 8004706:	3301      	adds	r3, #1
 8004708:	60eb      	str	r3, [r5, #12]
			xReturn = pdPASS;
 800470a:	2001      	movs	r0, #1
	}
 800470c:	bd70      	pop	{r4, r5, r6, pc}

0800470e <xQueueReceiveFromISR>:
{
 800470e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8004712:	b1b0      	cbz	r0, 8004742 <xQueueReceiveFromISR+0x34>
 8004714:	460d      	mov	r5, r1
 8004716:	4616      	mov	r6, r2
 8004718:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800471a:	b1d9      	cbz	r1, 8004754 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800471c:	f001 fa42 	bl	8005ba4 <vPortValidateInterruptPriority>
	__asm volatile
 8004720:	f3ef 8811 	mrs	r8, BASEPRI
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004734:	6ba7      	ldr	r7, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004736:	b9cf      	cbnz	r7, 800476c <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 8004738:	2000      	movs	r0, #0
	__asm volatile
 800473a:	f388 8811 	msr	BASEPRI, r8
}
 800473e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8004742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004746:	f383 8811 	msr	BASEPRI, r3
 800474a:	f3bf 8f6f 	isb	sy
 800474e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8004752:	e7fe      	b.n	8004752 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004754:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0e0      	beq.n	800471c <xQueueReceiveFromISR+0xe>
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	e7fe      	b.n	800476a <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800476c:	f894 9044 	ldrb.w	r9, [r4, #68]	; 0x44
 8004770:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004774:	4629      	mov	r1, r5
 8004776:	4620      	mov	r0, r4
 8004778:	f7ff fb02 	bl	8003d80 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800477c:	3f01      	subs	r7, #1
 800477e:	63a7      	str	r7, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004780:	f1b9 3fff 	cmp.w	r9, #4294967295
 8004784:	d006      	beq.n	8004794 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004786:	f109 0301 	add.w	r3, r9, #1
 800478a:	b25b      	sxtb	r3, r3
 800478c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8004790:	2001      	movs	r0, #1
 8004792:	e7d2      	b.n	800473a <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	b90b      	cbnz	r3, 800479c <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 8004798:	2001      	movs	r0, #1
 800479a:	e7ce      	b.n	800473a <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800479c:	f104 0010 	add.w	r0, r4, #16
 80047a0:	f000 fcbe 	bl	8005120 <xTaskRemoveFromEventList>
 80047a4:	b118      	cbz	r0, 80047ae <xQueueReceiveFromISR+0xa0>
						if( pxHigherPriorityTaskWoken != NULL )
 80047a6:	b126      	cbz	r6, 80047b2 <xQueueReceiveFromISR+0xa4>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80047a8:	2001      	movs	r0, #1
 80047aa:	6030      	str	r0, [r6, #0]
 80047ac:	e7c5      	b.n	800473a <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 80047ae:	2001      	movs	r0, #1
 80047b0:	e7c3      	b.n	800473a <xQueueReceiveFromISR+0x2c>
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7c1      	b.n	800473a <xQueueReceiveFromISR+0x2c>

080047b6 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
 80047b6:	b140      	cbz	r0, 80047ca <uxQueueMessagesWaiting+0x14>
{
 80047b8:	b510      	push	{r4, lr}
 80047ba:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80047bc:	f001 f8ca 	bl	8005954 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80047c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80047c2:	f001 f8e9 	bl	8005998 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047c6:	4620      	mov	r0, r4
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
 80047da:	e7fe      	b.n	80047da <uxQueueMessagesWaiting+0x24>

080047dc <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 80047dc:	b108      	cbz	r0, 80047e2 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
 80047de:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80047e0:	4770      	bx	lr
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80047f2:	e7fe      	b.n	80047f2 <uxQueueMessagesWaitingFromISR+0x16>

080047f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047f4:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047f6:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047f8:	4c08      	ldr	r4, [pc, #32]	; (800481c <vQueueAddToRegistry+0x28>)
 80047fa:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 80047fe:	b12a      	cbz	r2, 800480c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004800:	3301      	adds	r3, #1
 8004802:	2b08      	cmp	r3, #8
 8004804:	d1f9      	bne.n	80047fa <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004806:	f85d 4b04 	ldr.w	r4, [sp], #4
 800480a:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800480c:	4a03      	ldr	r2, [pc, #12]	; (800481c <vQueueAddToRegistry+0x28>)
 800480e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004812:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004816:	6058      	str	r0, [r3, #4]
				break;
 8004818:	e7f5      	b.n	8004806 <vQueueAddToRegistry+0x12>
 800481a:	bf00      	nop
 800481c:	20006d50 	.word	0x20006d50

08004820 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004820:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004822:	4909      	ldr	r1, [pc, #36]	; (8004848 <vQueueUnregisterQueue+0x28>)
 8004824:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8004828:	6852      	ldr	r2, [r2, #4]
 800482a:	4282      	cmp	r2, r0
 800482c:	d003      	beq.n	8004836 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800482e:	3301      	adds	r3, #1
 8004830:	2b08      	cmp	r3, #8
 8004832:	d1f7      	bne.n	8004824 <vQueueUnregisterQueue+0x4>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004834:	4770      	bx	lr
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004836:	4a04      	ldr	r2, [pc, #16]	; (8004848 <vQueueUnregisterQueue+0x28>)
 8004838:	2100      	movs	r1, #0
 800483a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800483e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004842:	6059      	str	r1, [r3, #4]
				break;
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20006d50 	.word	0x20006d50

0800484c <vQueueDelete>:
	configASSERT( pxQueue );
 800484c:	b138      	cbz	r0, 800485e <vQueueDelete+0x12>
{
 800484e:	b510      	push	{r4, lr}
 8004850:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8004852:	f7ff ffe5 	bl	8004820 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004856:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800485a:	b14b      	cbz	r3, 8004870 <vQueueDelete+0x24>
}
 800485c:	bd10      	pop	{r4, pc}
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800486e:	e7fe      	b.n	800486e <vQueueDelete+0x22>
			vPortFree( pxQueue );
 8004870:	4620      	mov	r0, r4
 8004872:	f001 fa91 	bl	8005d98 <vPortFree>
}
 8004876:	e7f1      	b.n	800485c <vQueueDelete+0x10>

08004878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004878:	b570      	push	{r4, r5, r6, lr}
 800487a:	4604      	mov	r4, r0
 800487c:	460d      	mov	r5, r1
 800487e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004880:	f001 f868 	bl	8005954 <vPortEnterCritical>
 8004884:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004888:	b25b      	sxtb	r3, r3
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	bf04      	itt	eq
 8004890:	2300      	moveq	r3, #0
 8004892:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8004896:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	bf04      	itt	eq
 80048a2:	2300      	moveq	r3, #0
 80048a4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80048a8:	f001 f876 	bl	8005998 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80048ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048ae:	b11b      	cbz	r3, 80048b8 <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048b0:	4620      	mov	r0, r4
 80048b2:	f7ff fa77 	bl	8003da4 <prvUnlockQueue>
	}
 80048b6:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80048b8:	4632      	mov	r2, r6
 80048ba:	4629      	mov	r1, r5
 80048bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80048c0:	f000 fc10 	bl	80050e4 <vTaskPlaceOnEventListRestricted>
 80048c4:	e7f4      	b.n	80048b0 <vQueueWaitForMessageRestricted+0x38>
	...

080048c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048c8:	4b08      	ldr	r3, [pc, #32]	; (80048ec <prvResetNextTaskUnblockTime+0x24>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	b923      	cbnz	r3, 80048da <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <prvResetNextTaskUnblockTime+0x28>)
 80048d2:	f04f 32ff 	mov.w	r2, #4294967295
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048da:	4b04      	ldr	r3, [pc, #16]	; (80048ec <prvResetNextTaskUnblockTime+0x24>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	4b02      	ldr	r3, [pc, #8]	; (80048f0 <prvResetNextTaskUnblockTime+0x28>)
 80048e6:	601a      	str	r2, [r3, #0]
	}
}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	20006d94 	.word	0x20006d94
 80048f0:	20007238 	.word	0x20007238

080048f4 <prvInitialiseNewTask>:
{
 80048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	4606      	mov	r6, r0
 80048fa:	4689      	mov	r9, r1
 80048fc:	461f      	mov	r7, r3
 80048fe:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8004902:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004904:	0095      	lsls	r5, r2, #2
 8004906:	462a      	mov	r2, r5
 8004908:	21a5      	movs	r1, #165	; 0xa5
 800490a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800490c:	f00a fa55 	bl	800edba <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004910:	3d04      	subs	r5, #4
 8004912:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004914:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004916:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 800491a:	f1b9 0f00 	cmp.w	r9, #0
 800491e:	d043      	beq.n	80049a8 <prvInitialiseNewTask+0xb4>
 8004920:	f109 3cff 	add.w	ip, r9, #4294967295
 8004924:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 8004928:	f109 010f 	add.w	r1, r9, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800492c:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8004930:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8004934:	b10a      	cbz	r2, 800493a <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004936:	458c      	cmp	ip, r1
 8004938:	d1f8      	bne.n	800492c <prvInitialiseNewTask+0x38>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800493a:	2300      	movs	r3, #0
 800493c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004940:	9b08      	ldr	r3, [sp, #32]
 8004942:	2b37      	cmp	r3, #55	; 0x37
 8004944:	bf28      	it	cs
 8004946:	2337      	movcs	r3, #55	; 0x37
 8004948:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 800494a:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800494c:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800494e:	f04f 0a00 	mov.w	sl, #0
 8004952:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004956:	1d20      	adds	r0, r4, #4
 8004958:	f7ff f993 	bl	8003c82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800495c:	f104 0018 	add.w	r0, r4, #24
 8004960:	f7ff f98f 	bl	8003c82 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004964:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004966:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 800496a:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800496c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800496e:	f8c4 a0b4 	str.w	sl, [r4, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004972:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004976:	2260      	movs	r2, #96	; 0x60
 8004978:	4651      	mov	r1, sl
 800497a:	f104 0054 	add.w	r0, r4, #84	; 0x54
 800497e:	f00a fa1c 	bl	800edba <memset>
 8004982:	4b0b      	ldr	r3, [pc, #44]	; (80049b0 <prvInitialiseNewTask+0xbc>)
 8004984:	65a3      	str	r3, [r4, #88]	; 0x58
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <prvInitialiseNewTask+0xc0>)
 8004988:	65e3      	str	r3, [r4, #92]	; 0x5c
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <prvInitialiseNewTask+0xc4>)
 800498c:	6623      	str	r3, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800498e:	463a      	mov	r2, r7
 8004990:	4631      	mov	r1, r6
 8004992:	4628      	mov	r0, r5
 8004994:	f000 ffb2 	bl	80058fc <pxPortInitialiseStack>
 8004998:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800499a:	f1b8 0f00 	cmp.w	r8, #0
 800499e:	d001      	beq.n	80049a4 <prvInitialiseNewTask+0xb0>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80049a0:	f8c8 4000 	str.w	r4, [r8]
}
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80049a8:	2300      	movs	r3, #0
 80049aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 80049ae:	e7c7      	b.n	8004940 <prvInitialiseNewTask+0x4c>
 80049b0:	08012a14 	.word	0x08012a14
 80049b4:	08012a34 	.word	0x08012a34
 80049b8:	080129f4 	.word	0x080129f4

080049bc <prvAddNewTaskToReadyList>:
{
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80049c0:	f000 ffc8 	bl	8005954 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80049c4:	4a30      	ldr	r2, [pc, #192]	; (8004a88 <prvAddNewTaskToReadyList+0xcc>)
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	3301      	adds	r3, #1
 80049ca:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80049cc:	4b2f      	ldr	r3, [pc, #188]	; (8004a8c <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d034      	beq.n	8004a3e <prvAddNewTaskToReadyList+0x82>
			if( xSchedulerRunning == pdFALSE )
 80049d4:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <prvAddNewTaskToReadyList+0xd4>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	b93b      	cbnz	r3, 80049ea <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049da:	4b2c      	ldr	r3, [pc, #176]	; (8004a8c <prvAddNewTaskToReadyList+0xd0>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80049e2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80049e4:	bf9c      	itt	ls
 80049e6:	4b29      	ldrls	r3, [pc, #164]	; (8004a8c <prvAddNewTaskToReadyList+0xd0>)
 80049e8:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 80049ea:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <prvAddNewTaskToReadyList+0xd8>)
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	3301      	adds	r3, #1
 80049f0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049f2:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80049f4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80049f6:	4b28      	ldr	r3, [pc, #160]	; (8004a98 <prvAddNewTaskToReadyList+0xdc>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4298      	cmp	r0, r3
 80049fc:	bf84      	itt	hi
 80049fe:	4b26      	ldrhi	r3, [pc, #152]	; (8004a98 <prvAddNewTaskToReadyList+0xdc>)
 8004a00:	6018      	strhi	r0, [r3, #0]
 8004a02:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004a06:	1d29      	adds	r1, r5, #4
 8004a08:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <prvAddNewTaskToReadyList+0xe0>)
 8004a0a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004a0e:	f7ff f93b 	bl	8003c88 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004a12:	f000 ffc1 	bl	8005998 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004a16:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <prvAddNewTaskToReadyList+0xd4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	b17b      	cbz	r3, 8004a3c <prvAddNewTaskToReadyList+0x80>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <prvAddNewTaskToReadyList+0xd0>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a22:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d209      	bcs.n	8004a3c <prvAddNewTaskToReadyList+0x80>
			taskYIELD_IF_USING_PREEMPTION();
 8004a28:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a30:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	f3bf 8f6f 	isb	sy
}
 8004a3c:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 8004a3e:	4b13      	ldr	r3, [pc, #76]	; (8004a8c <prvAddNewTaskToReadyList+0xd0>)
 8004a40:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a42:	6813      	ldr	r3, [r2, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d1d0      	bne.n	80049ea <prvAddNewTaskToReadyList+0x2e>
 8004a48:	4c14      	ldr	r4, [pc, #80]	; (8004a9c <prvAddNewTaskToReadyList+0xe0>)
 8004a4a:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7ff f90c 	bl	8003c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a54:	3414      	adds	r4, #20
 8004a56:	42b4      	cmp	r4, r6
 8004a58:	d1f9      	bne.n	8004a4e <prvAddNewTaskToReadyList+0x92>
	vListInitialise( &xDelayedTaskList1 );
 8004a5a:	4e11      	ldr	r6, [pc, #68]	; (8004aa0 <prvAddNewTaskToReadyList+0xe4>)
 8004a5c:	4630      	mov	r0, r6
 8004a5e:	f7ff f905 	bl	8003c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a62:	4c10      	ldr	r4, [pc, #64]	; (8004aa4 <prvAddNewTaskToReadyList+0xe8>)
 8004a64:	4620      	mov	r0, r4
 8004a66:	f7ff f901 	bl	8003c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a6a:	480f      	ldr	r0, [pc, #60]	; (8004aa8 <prvAddNewTaskToReadyList+0xec>)
 8004a6c:	f7ff f8fe 	bl	8003c6c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004a70:	480e      	ldr	r0, [pc, #56]	; (8004aac <prvAddNewTaskToReadyList+0xf0>)
 8004a72:	f7ff f8fb 	bl	8003c6c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004a76:	480e      	ldr	r0, [pc, #56]	; (8004ab0 <prvAddNewTaskToReadyList+0xf4>)
 8004a78:	f7ff f8f8 	bl	8003c6c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	; (8004ab4 <prvAddNewTaskToReadyList+0xf8>)
 8004a7e:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a80:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <prvAddNewTaskToReadyList+0xfc>)
 8004a82:	601c      	str	r4, [r3, #0]
}
 8004a84:	e7b1      	b.n	80049ea <prvAddNewTaskToReadyList+0x2e>
 8004a86:	bf00      	nop
 8004a88:	200071fc 	.word	0x200071fc
 8004a8c:	20006d90 	.word	0x20006d90
 8004a90:	20007258 	.word	0x20007258
 8004a94:	20007208 	.word	0x20007208
 8004a98:	2000720c 	.word	0x2000720c
 8004a9c:	20006d9c 	.word	0x20006d9c
 8004aa0:	20007210 	.word	0x20007210
 8004aa4:	20007224 	.word	0x20007224
 8004aa8:	20007244 	.word	0x20007244
 8004aac:	20007270 	.word	0x20007270
 8004ab0:	2000725c 	.word	0x2000725c
 8004ab4:	20006d94 	.word	0x20006d94
 8004ab8:	20006d98 	.word	0x20006d98

08004abc <prvDeleteTCB>:
	{
 8004abc:	b510      	push	{r4, lr}
 8004abe:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004ac0:	3054      	adds	r0, #84	; 0x54
 8004ac2:	f00a fa7b 	bl	800efbc <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ac6:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
 8004aca:	b163      	cbz	r3, 8004ae6 <prvDeleteTCB+0x2a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d011      	beq.n	8004af4 <prvDeleteTCB+0x38>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d00e      	beq.n	8004af2 <prvDeleteTCB+0x36>
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	e7fe      	b.n	8004ae4 <prvDeleteTCB+0x28>
				vPortFree( pxTCB->pxStack );
 8004ae6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004ae8:	f001 f956 	bl	8005d98 <vPortFree>
				vPortFree( pxTCB );
 8004aec:	4620      	mov	r0, r4
 8004aee:	f001 f953 	bl	8005d98 <vPortFree>
	}
 8004af2:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8004af4:	4620      	mov	r0, r4
 8004af6:	f001 f94f 	bl	8005d98 <vPortFree>
 8004afa:	e7fa      	b.n	8004af2 <prvDeleteTCB+0x36>

08004afc <prvIdleTask>:
{
 8004afc:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004afe:	4c15      	ldr	r4, [pc, #84]	; (8004b54 <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b00:	4f15      	ldr	r7, [pc, #84]	; (8004b58 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8004b02:	4e16      	ldr	r6, [pc, #88]	; (8004b5c <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b04:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8004b60 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b08:	6823      	ldr	r3, [r4, #0]
 8004b0a:	b1a3      	cbz	r3, 8004b36 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8004b0c:	f000 ff22 	bl	8005954 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b14:	1d28      	adds	r0, r5, #4
 8004b16:	f7ff f8db 	bl	8003cd0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b1a:	6833      	ldr	r3, [r6, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b20:	6823      	ldr	r3, [r4, #0]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8004b26:	f000 ff37 	bl	8005998 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	f7ff ffc6 	bl	8004abc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b30:	6823      	ldr	r3, [r4, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ea      	bne.n	8004b0c <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b36:	f8d8 3000 	ldr.w	r3, [r8]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d9e4      	bls.n	8004b08 <prvIdleTask+0xc>
				taskYIELD();
 8004b3e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b46:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004b4a:	f3bf 8f4f 	dsb	sy
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	e7d9      	b.n	8004b08 <prvIdleTask+0xc>
 8004b54:	20007200 	.word	0x20007200
 8004b58:	20007270 	.word	0x20007270
 8004b5c:	200071fc 	.word	0x200071fc
 8004b60:	20006d9c 	.word	0x20006d9c

08004b64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4604      	mov	r4, r0
 8004b68:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004b6a:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <prvAddCurrentTaskToDelayedList+0x64>)
 8004b6c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b6e:	4b17      	ldr	r3, [pc, #92]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b70:	6818      	ldr	r0, [r3, #0]
 8004b72:	3004      	adds	r0, #4
 8004b74:	f7ff f8ac 	bl	8003cd0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b78:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004b7c:	d00d      	beq.n	8004b9a <prvAddCurrentTaskToDelayedList+0x36>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004b7e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8004b86:	42a6      	cmp	r6, r4
 8004b88:	d910      	bls.n	8004bac <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b8a:	4b11      	ldr	r3, [pc, #68]	; (8004bd0 <prvAddCurrentTaskToDelayedList+0x6c>)
 8004b8c:	6818      	ldr	r0, [r3, #0]
 8004b8e:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x68>)
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	3104      	adds	r1, #4
 8004b94:	f7ff f883 	bl	8003c9e <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004b9a:	2d00      	cmp	r5, #0
 8004b9c:	d0ef      	beq.n	8004b7e <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x68>)
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	3104      	adds	r1, #4
 8004ba4:	480b      	ldr	r0, [pc, #44]	; (8004bd4 <prvAddCurrentTaskToDelayedList+0x70>)
 8004ba6:	f7ff f86f 	bl	8003c88 <vListInsertEnd>
 8004baa:	e7f5      	b.n	8004b98 <prvAddCurrentTaskToDelayedList+0x34>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <prvAddCurrentTaskToDelayedList+0x74>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <prvAddCurrentTaskToDelayedList+0x68>)
 8004bb2:	6819      	ldr	r1, [r3, #0]
 8004bb4:	3104      	adds	r1, #4
 8004bb6:	f7ff f872 	bl	8003c9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004bba:	4b08      	ldr	r3, [pc, #32]	; (8004bdc <prvAddCurrentTaskToDelayedList+0x78>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8004bc0:	bf84      	itt	hi
 8004bc2:	4b06      	ldrhi	r3, [pc, #24]	; (8004bdc <prvAddCurrentTaskToDelayedList+0x78>)
 8004bc4:	601c      	strhi	r4, [r3, #0]
}
 8004bc6:	e7e7      	b.n	8004b98 <prvAddCurrentTaskToDelayedList+0x34>
 8004bc8:	20007284 	.word	0x20007284
 8004bcc:	20006d90 	.word	0x20006d90
 8004bd0:	20006d98 	.word	0x20006d98
 8004bd4:	2000725c 	.word	0x2000725c
 8004bd8:	20006d94 	.word	0x20006d94
 8004bdc:	20007238 	.word	0x20007238

08004be0 <xTaskCreateStatic>:
	{
 8004be0:	b530      	push	{r4, r5, lr}
 8004be2:	b087      	sub	sp, #28
 8004be4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8004be6:	b17c      	cbz	r4, 8004c08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004be8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bea:	b1b5      	cbz	r5, 8004c1a <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bec:	25bc      	movs	r5, #188	; 0xbc
 8004bee:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bf0:	9d04      	ldr	r5, [sp, #16]
 8004bf2:	2dbc      	cmp	r5, #188	; 0xbc
 8004bf4:	d01a      	beq.n	8004c2c <xTaskCreateStatic+0x4c>
 8004bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfa:	f383 8811 	msr	BASEPRI, r3
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	f3bf 8f4f 	dsb	sy
 8004c06:	e7fe      	b.n	8004c06 <xTaskCreateStatic+0x26>
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8004c18:	e7fe      	b.n	8004c18 <xTaskCreateStatic+0x38>
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8004c2a:	e7fe      	b.n	8004c2a <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c2c:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c30:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c32:	2402      	movs	r4, #2
 8004c34:	f885 40b9 	strb.w	r4, [r5, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c38:	2400      	movs	r4, #0
 8004c3a:	9403      	str	r4, [sp, #12]
 8004c3c:	9502      	str	r5, [sp, #8]
 8004c3e:	ac05      	add	r4, sp, #20
 8004c40:	9401      	str	r4, [sp, #4]
 8004c42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c44:	9400      	str	r4, [sp, #0]
 8004c46:	f7ff fe55 	bl	80048f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004c4c:	f7ff feb6 	bl	80049bc <prvAddNewTaskToReadyList>
	}
 8004c50:	9805      	ldr	r0, [sp, #20]
 8004c52:	b007      	add	sp, #28
 8004c54:	bd30      	pop	{r4, r5, pc}

08004c56 <xTaskCreate>:
	{
 8004c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	4688      	mov	r8, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c64:	0090      	lsls	r0, r2, #2
 8004c66:	f000 fffb 	bl	8005c60 <pvPortMalloc>
			if( pxStack != NULL )
 8004c6a:	b308      	cbz	r0, 8004cb0 <xTaskCreate+0x5a>
 8004c6c:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c6e:	20bc      	movs	r0, #188	; 0xbc
 8004c70:	f000 fff6 	bl	8005c60 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004c74:	4605      	mov	r5, r0
 8004c76:	b1a8      	cbz	r0, 8004ca4 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8004c78:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f880 30b9 	strb.w	r3, [r0, #185]	; 0xb9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c82:	9303      	str	r3, [sp, #12]
 8004c84:	9002      	str	r0, [sp, #8]
 8004c86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	4633      	mov	r3, r6
 8004c90:	4622      	mov	r2, r4
 8004c92:	4641      	mov	r1, r8
 8004c94:	4638      	mov	r0, r7
 8004c96:	f7ff fe2d 	bl	80048f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	f7ff fe8e 	bl	80049bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ca0:	2001      	movs	r0, #1
 8004ca2:	e007      	b.n	8004cb4 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8004ca4:	4648      	mov	r0, r9
 8004ca6:	f001 f877 	bl	8005d98 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004caa:	f04f 30ff 	mov.w	r0, #4294967295
 8004cae:	e001      	b.n	8004cb4 <xTaskCreate+0x5e>
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8004cb4:	b005      	add	sp, #20
 8004cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004cbc <vTaskStartScheduler>:
{
 8004cbc:	b510      	push	{r4, lr}
 8004cbe:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004cc0:	2400      	movs	r4, #0
 8004cc2:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004cc4:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004cc6:	aa07      	add	r2, sp, #28
 8004cc8:	a906      	add	r1, sp, #24
 8004cca:	a805      	add	r0, sp, #20
 8004ccc:	f7fe ffb6 	bl	8003c3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004cd0:	9b05      	ldr	r3, [sp, #20]
 8004cd2:	9302      	str	r3, [sp, #8]
 8004cd4:	9b06      	ldr	r3, [sp, #24]
 8004cd6:	9301      	str	r3, [sp, #4]
 8004cd8:	9400      	str	r4, [sp, #0]
 8004cda:	4623      	mov	r3, r4
 8004cdc:	9a07      	ldr	r2, [sp, #28]
 8004cde:	4917      	ldr	r1, [pc, #92]	; (8004d3c <vTaskStartScheduler+0x80>)
 8004ce0:	4817      	ldr	r0, [pc, #92]	; (8004d40 <vTaskStartScheduler+0x84>)
 8004ce2:	f7ff ff7d 	bl	8004be0 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8004ce6:	b338      	cbz	r0, 8004d38 <vTaskStartScheduler+0x7c>
			xReturn = xTimerCreateTimerTask();
 8004ce8:	f000 fc14 	bl	8005514 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8004cec:	2801      	cmp	r0, #1
 8004cee:	d00b      	beq.n	8004d08 <vTaskStartScheduler+0x4c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cf0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004cf4:	d120      	bne.n	8004d38 <vTaskStartScheduler+0x7c>
 8004cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	e7fe      	b.n	8004d06 <vTaskStartScheduler+0x4a>
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	f383 8811 	msr	BASEPRI, r3
 8004d10:	f3bf 8f6f 	isb	sy
 8004d14:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d18:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <vTaskStartScheduler+0x88>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3354      	adds	r3, #84	; 0x54
 8004d1e:	4a0a      	ldr	r2, [pc, #40]	; (8004d48 <vTaskStartScheduler+0x8c>)
 8004d20:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d22:	4b0a      	ldr	r3, [pc, #40]	; (8004d4c <vTaskStartScheduler+0x90>)
 8004d24:	f04f 32ff 	mov.w	r2, #4294967295
 8004d28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d2a:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <vTaskStartScheduler+0x94>)
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d30:	4b08      	ldr	r3, [pc, #32]	; (8004d54 <vTaskStartScheduler+0x98>)
 8004d32:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8004d34:	f000 fea8 	bl	8005a88 <xPortStartScheduler>
}
 8004d38:	b008      	add	sp, #32
 8004d3a:	bd10      	pop	{r4, pc}
 8004d3c:	080101d4 	.word	0x080101d4
 8004d40:	08004afd 	.word	0x08004afd
 8004d44:	20006d90 	.word	0x20006d90
 8004d48:	2000002c 	.word	0x2000002c
 8004d4c:	20007238 	.word	0x20007238
 8004d50:	20007258 	.word	0x20007258
 8004d54:	20007284 	.word	0x20007284

08004d58 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004d58:	4a02      	ldr	r2, [pc, #8]	; (8004d64 <vTaskSuspendAll+0xc>)
 8004d5a:	6813      	ldr	r3, [r2, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	6013      	str	r3, [r2, #0]
}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20007204 	.word	0x20007204

08004d68 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004d68:	4b01      	ldr	r3, [pc, #4]	; (8004d70 <xTaskGetTickCount+0x8>)
 8004d6a:	6818      	ldr	r0, [r3, #0]
}
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	20007284 	.word	0x20007284

08004d74 <xTaskGetTickCountFromISR>:
{
 8004d74:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d76:	f000 ff15 	bl	8005ba4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8004d7a:	4b01      	ldr	r3, [pc, #4]	; (8004d80 <xTaskGetTickCountFromISR+0xc>)
 8004d7c:	6818      	ldr	r0, [r3, #0]
}
 8004d7e:	bd08      	pop	{r3, pc}
 8004d80:	20007284 	.word	0x20007284

08004d84 <xTaskIncrementTick>:
{
 8004d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d88:	4b40      	ldr	r3, [pc, #256]	; (8004e8c <xTaskIncrementTick+0x108>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d175      	bne.n	8004e7c <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d90:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <xTaskIncrementTick+0x10c>)
 8004d92:	681e      	ldr	r6, [r3, #0]
 8004d94:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8004d96:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d98:	b9c6      	cbnz	r6, 8004dcc <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8004d9a:	4b3e      	ldr	r3, [pc, #248]	; (8004e94 <xTaskIncrementTick+0x110>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	b143      	cbz	r3, 8004db4 <xTaskIncrementTick+0x30>
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	e7fe      	b.n	8004db2 <xTaskIncrementTick+0x2e>
 8004db4:	4a37      	ldr	r2, [pc, #220]	; (8004e94 <xTaskIncrementTick+0x110>)
 8004db6:	6811      	ldr	r1, [r2, #0]
 8004db8:	4b37      	ldr	r3, [pc, #220]	; (8004e98 <xTaskIncrementTick+0x114>)
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	6010      	str	r0, [r2, #0]
 8004dbe:	6019      	str	r1, [r3, #0]
 8004dc0:	4a36      	ldr	r2, [pc, #216]	; (8004e9c <xTaskIncrementTick+0x118>)
 8004dc2:	6813      	ldr	r3, [r2, #0]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	6013      	str	r3, [r2, #0]
 8004dc8:	f7ff fd7e 	bl	80048c8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004dcc:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <xTaskIncrementTick+0x11c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	42b3      	cmp	r3, r6
 8004dd2:	d841      	bhi.n	8004e58 <xTaskIncrementTick+0xd4>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dd4:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <xTaskIncrementTick+0x110>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	b13b      	cbz	r3, 8004dec <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8004ddc:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dde:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8004e94 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8004de2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004eb4 <xTaskIncrementTick+0x130>
 8004de6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8004ea8 <xTaskIncrementTick+0x124>
 8004dea:	e022      	b.n	8004e32 <xTaskIncrementTick+0xae>
BaseType_t xSwitchRequired = pdFALSE;
 8004dec:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dee:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <xTaskIncrementTick+0x11c>)
 8004df0:	f04f 32ff 	mov.w	r2, #4294967295
 8004df4:	601a      	str	r2, [r3, #0]
					break;
 8004df6:	e030      	b.n	8004e5a <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = xItemValue;
 8004df8:	4a29      	ldr	r2, [pc, #164]	; (8004ea0 <xTaskIncrementTick+0x11c>)
 8004dfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dfc:	e02d      	b.n	8004e5a <xTaskIncrementTick+0xd6>
					prvAddTaskToReadyList( pxTCB );
 8004dfe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004e00:	f8d9 3000 	ldr.w	r3, [r9]
 8004e04:	4298      	cmp	r0, r3
 8004e06:	bf88      	it	hi
 8004e08:	f8c9 0000 	strhi.w	r0, [r9]
 8004e0c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004e10:	4639      	mov	r1, r7
 8004e12:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8004e16:	f7fe ff37 	bl	8003c88 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e1a:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <xTaskIncrementTick+0x120>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004e22:	429a      	cmp	r2, r3
 8004e24:	bf28      	it	cs
 8004e26:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e28:	f8d8 3000 	ldr.w	r3, [r8]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0dd      	beq.n	8004dee <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e32:	f8d8 3000 	ldr.w	r3, [r8]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e3a:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8004e3c:	429e      	cmp	r6, r3
 8004e3e:	d3db      	bcc.n	8004df8 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e40:	1d27      	adds	r7, r4, #4
 8004e42:	4638      	mov	r0, r7
 8004e44:	f7fe ff44 	bl	8003cd0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e48:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0d7      	beq.n	8004dfe <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e4e:	f104 0018 	add.w	r0, r4, #24
 8004e52:	f7fe ff3d 	bl	8003cd0 <uxListRemove>
 8004e56:	e7d2      	b.n	8004dfe <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8004e58:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e5a:	4b12      	ldr	r3, [pc, #72]	; (8004ea4 <xTaskIncrementTick+0x120>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a10      	ldr	r2, [pc, #64]	; (8004ea8 <xTaskIncrementTick+0x124>)
 8004e68:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	bf28      	it	cs
 8004e6e:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 8004e70:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <xTaskIncrementTick+0x128>)
 8004e72:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf18      	it	ne
 8004e78:	2501      	movne	r5, #1
 8004e7a:	e004      	b.n	8004e86 <xTaskIncrementTick+0x102>
		++xPendedTicks;
 8004e7c:	4a0c      	ldr	r2, [pc, #48]	; (8004eb0 <xTaskIncrementTick+0x12c>)
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	3301      	adds	r3, #1
 8004e82:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8004e84:	2500      	movs	r5, #0
}
 8004e86:	4628      	mov	r0, r5
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	20007204 	.word	0x20007204
 8004e90:	20007284 	.word	0x20007284
 8004e94:	20006d94 	.word	0x20006d94
 8004e98:	20006d98 	.word	0x20006d98
 8004e9c:	2000723c 	.word	0x2000723c
 8004ea0:	20007238 	.word	0x20007238
 8004ea4:	20006d90 	.word	0x20006d90
 8004ea8:	20006d9c 	.word	0x20006d9c
 8004eac:	20007288 	.word	0x20007288
 8004eb0:	20007240 	.word	0x20007240
 8004eb4:	2000720c 	.word	0x2000720c

08004eb8 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8004eb8:	4b38      	ldr	r3, [pc, #224]	; (8004f9c <xTaskResumeAll+0xe4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	b943      	cbnz	r3, 8004ed0 <xTaskResumeAll+0x18>
 8004ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	e7fe      	b.n	8004ece <xTaskResumeAll+0x16>
{
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8004ed4:	f000 fd3e 	bl	8005954 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004ed8:	4b30      	ldr	r3, [pc, #192]	; (8004f9c <xTaskResumeAll+0xe4>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	3a01      	subs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d149      	bne.n	8004f7a <xTaskResumeAll+0xc2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <xTaskResumeAll+0xe8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04b      	beq.n	8004f86 <xTaskResumeAll+0xce>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eee:	4b2d      	ldr	r3, [pc, #180]	; (8004fa4 <xTaskResumeAll+0xec>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d04b      	beq.n	8004f8e <xTaskResumeAll+0xd6>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef6:	4e2b      	ldr	r6, [pc, #172]	; (8004fa4 <xTaskResumeAll+0xec>)
					prvAddTaskToReadyList( pxTCB );
 8004ef8:	4f2b      	ldr	r7, [pc, #172]	; (8004fa8 <xTaskResumeAll+0xf0>)
 8004efa:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8004fb8 <xTaskResumeAll+0x100>
 8004efe:	e002      	b.n	8004f06 <xTaskResumeAll+0x4e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f00:	6833      	ldr	r3, [r6, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d041      	beq.n	8004f8a <xTaskResumeAll+0xd2>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f06:	68f3      	ldr	r3, [r6, #12]
 8004f08:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f0a:	f104 0018 	add.w	r0, r4, #24
 8004f0e:	f7fe fedf 	bl	8003cd0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f12:	1d25      	adds	r5, r4, #4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f7fe fedb 	bl	8003cd0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004f1a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	bf88      	it	hi
 8004f22:	6038      	strhi	r0, [r7, #0]
 8004f24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004f28:	4629      	mov	r1, r5
 8004f2a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004f2e:	f7fe feab 	bl	8003c88 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f32:	4b1e      	ldr	r3, [pc, #120]	; (8004fac <xTaskResumeAll+0xf4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d3e0      	bcc.n	8004f00 <xTaskResumeAll+0x48>
						xYieldPending = pdTRUE;
 8004f3e:	4b1c      	ldr	r3, [pc, #112]	; (8004fb0 <xTaskResumeAll+0xf8>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e7dc      	b.n	8004f00 <xTaskResumeAll+0x48>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f46:	3c01      	subs	r4, #1
 8004f48:	d005      	beq.n	8004f56 <xTaskResumeAll+0x9e>
							if( xTaskIncrementTick() != pdFALSE )
 8004f4a:	f7ff ff1b 	bl	8004d84 <xTaskIncrementTick>
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d0f9      	beq.n	8004f46 <xTaskResumeAll+0x8e>
								xYieldPending = pdTRUE;
 8004f52:	6035      	str	r5, [r6, #0]
 8004f54:	e7f7      	b.n	8004f46 <xTaskResumeAll+0x8e>
						xPendedTicks = 0;
 8004f56:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <xTaskResumeAll+0xfc>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8004f5c:	4b14      	ldr	r3, [pc, #80]	; (8004fb0 <xTaskResumeAll+0xf8>)
 8004f5e:	681c      	ldr	r4, [r3, #0]
 8004f60:	b164      	cbz	r4, 8004f7c <xTaskResumeAll+0xc4>
					taskYIELD_IF_USING_PREEMPTION();
 8004f62:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f6a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004f76:	2401      	movs	r4, #1
 8004f78:	e000      	b.n	8004f7c <xTaskResumeAll+0xc4>
BaseType_t xAlreadyYielded = pdFALSE;
 8004f7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004f7c:	f000 fd0c 	bl	8005998 <vPortExitCritical>
}
 8004f80:	4620      	mov	r0, r4
 8004f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8004f86:	2400      	movs	r4, #0
 8004f88:	e7f8      	b.n	8004f7c <xTaskResumeAll+0xc4>
					prvResetNextTaskUnblockTime();
 8004f8a:	f7ff fc9d 	bl	80048c8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <xTaskResumeAll+0xfc>)
 8004f90:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8004f92:	2c00      	cmp	r4, #0
 8004f94:	d0e2      	beq.n	8004f5c <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 8004f96:	4e06      	ldr	r6, [pc, #24]	; (8004fb0 <xTaskResumeAll+0xf8>)
 8004f98:	2501      	movs	r5, #1
 8004f9a:	e7d6      	b.n	8004f4a <xTaskResumeAll+0x92>
 8004f9c:	20007204 	.word	0x20007204
 8004fa0:	200071fc 	.word	0x200071fc
 8004fa4:	20007244 	.word	0x20007244
 8004fa8:	2000720c 	.word	0x2000720c
 8004fac:	20006d90 	.word	0x20006d90
 8004fb0:	20007288 	.word	0x20007288
 8004fb4:	20007240 	.word	0x20007240
 8004fb8:	20006d9c 	.word	0x20006d9c

08004fbc <vTaskDelay>:
	{
 8004fbc:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fbe:	b1a8      	cbz	r0, 8004fec <vTaskDelay+0x30>
 8004fc0:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8004fc2:	4b10      	ldr	r3, [pc, #64]	; (8005004 <vTaskDelay+0x48>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b143      	cbz	r3, 8004fda <vTaskDelay+0x1e>
 8004fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fcc:	f383 8811 	msr	BASEPRI, r3
 8004fd0:	f3bf 8f6f 	isb	sy
 8004fd4:	f3bf 8f4f 	dsb	sy
 8004fd8:	e7fe      	b.n	8004fd8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004fda:	f7ff febd 	bl	8004d58 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f7ff fdbf 	bl	8004b64 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8004fe6:	f7ff ff67 	bl	8004eb8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8004fea:	b948      	cbnz	r0, 8005000 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8004fec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
	}
 8005000:	bd10      	pop	{r4, pc}
 8005002:	bf00      	nop
 8005004:	20007204 	.word	0x20007204

08005008 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <vTaskSwitchContext+0x94>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	b11b      	cbz	r3, 8005016 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <vTaskSwitchContext+0x98>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005016:	4b22      	ldr	r3, [pc, #136]	; (80050a0 <vTaskSwitchContext+0x98>)
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800501c:	4b21      	ldr	r3, [pc, #132]	; (80050a4 <vTaskSwitchContext+0x9c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005024:	0092      	lsls	r2, r2, #2
 8005026:	4920      	ldr	r1, [pc, #128]	; (80050a8 <vTaskSwitchContext+0xa0>)
 8005028:	588a      	ldr	r2, [r1, r2]
 800502a:	b98a      	cbnz	r2, 8005050 <vTaskSwitchContext+0x48>
 800502c:	b13b      	cbz	r3, 800503e <vTaskSwitchContext+0x36>
 800502e:	3b01      	subs	r3, #1
 8005030:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005034:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005038:	b952      	cbnz	r2, 8005050 <vTaskSwitchContext+0x48>
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1f7      	bne.n	800502e <vTaskSwitchContext+0x26>
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	e7fe      	b.n	800504e <vTaskSwitchContext+0x46>
 8005050:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <vTaskSwitchContext+0xa0>)
 8005052:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005056:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800505a:	6848      	ldr	r0, [r1, #4]
 800505c:	6840      	ldr	r0, [r0, #4]
 800505e:	6048      	str	r0, [r1, #4]
 8005060:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005064:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005068:	3208      	adds	r2, #8
 800506a:	4290      	cmp	r0, r2
 800506c:	d00f      	beq.n	800508e <vTaskSwitchContext+0x86>
 800506e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005072:	4a0d      	ldr	r2, [pc, #52]	; (80050a8 <vTaskSwitchContext+0xa0>)
 8005074:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005078:	6852      	ldr	r2, [r2, #4]
 800507a:	68d1      	ldr	r1, [r2, #12]
 800507c:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <vTaskSwitchContext+0xa4>)
 800507e:	6011      	str	r1, [r2, #0]
 8005080:	4908      	ldr	r1, [pc, #32]	; (80050a4 <vTaskSwitchContext+0x9c>)
 8005082:	600b      	str	r3, [r1, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005084:	6813      	ldr	r3, [r2, #0]
 8005086:	3354      	adds	r3, #84	; 0x54
 8005088:	4a09      	ldr	r2, [pc, #36]	; (80050b0 <vTaskSwitchContext+0xa8>)
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800508e:	6840      	ldr	r0, [r0, #4]
 8005090:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <vTaskSwitchContext+0xa0>)
 8005092:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005096:	6050      	str	r0, [r2, #4]
 8005098:	e7e9      	b.n	800506e <vTaskSwitchContext+0x66>
 800509a:	bf00      	nop
 800509c:	20007204 	.word	0x20007204
 80050a0:	20007288 	.word	0x20007288
 80050a4:	2000720c 	.word	0x2000720c
 80050a8:	20006d9c 	.word	0x20006d9c
 80050ac:	20006d90 	.word	0x20006d90
 80050b0:	2000002c 	.word	0x2000002c

080050b4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 80050b4:	b158      	cbz	r0, 80050ce <vTaskPlaceOnEventList+0x1a>
{
 80050b6:	b510      	push	{r4, lr}
 80050b8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ba:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <vTaskPlaceOnEventList+0x2c>)
 80050bc:	6811      	ldr	r1, [r2, #0]
 80050be:	3118      	adds	r1, #24
 80050c0:	f7fe fded 	bl	8003c9e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80050c4:	2101      	movs	r1, #1
 80050c6:	4620      	mov	r0, r4
 80050c8:	f7ff fd4c 	bl	8004b64 <prvAddCurrentTaskToDelayedList>
}
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80050de:	e7fe      	b.n	80050de <vTaskPlaceOnEventList+0x2a>
 80050e0:	20006d90 	.word	0x20006d90

080050e4 <vTaskPlaceOnEventListRestricted>:
	{
 80050e4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 80050e6:	b178      	cbz	r0, 8005108 <vTaskPlaceOnEventListRestricted+0x24>
 80050e8:	460d      	mov	r5, r1
 80050ea:	4614      	mov	r4, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80050ec:	4a0b      	ldr	r2, [pc, #44]	; (800511c <vTaskPlaceOnEventListRestricted+0x38>)
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	3118      	adds	r1, #24
 80050f2:	f7fe fdc9 	bl	8003c88 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80050f6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80050f8:	4621      	mov	r1, r4
 80050fa:	bf0c      	ite	eq
 80050fc:	4628      	moveq	r0, r5
 80050fe:	f04f 30ff 	movne.w	r0, #4294967295
 8005102:	f7ff fd2f 	bl	8004b64 <prvAddCurrentTaskToDelayedList>
	}
 8005106:	bd38      	pop	{r3, r4, r5, pc}
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8005118:	e7fe      	b.n	8005118 <vTaskPlaceOnEventListRestricted+0x34>
 800511a:	bf00      	nop
 800511c:	20006d90 	.word	0x20006d90

08005120 <xTaskRemoveFromEventList>:
{
 8005120:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005122:	68c3      	ldr	r3, [r0, #12]
 8005124:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8005126:	b32c      	cbz	r4, 8005174 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005128:	f104 0518 	add.w	r5, r4, #24
 800512c:	4628      	mov	r0, r5
 800512e:	f7fe fdcf 	bl	8003cd0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005132:	4b17      	ldr	r3, [pc, #92]	; (8005190 <xTaskRemoveFromEventList+0x70>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	bb33      	cbnz	r3, 8005186 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005138:	1d25      	adds	r5, r4, #4
 800513a:	4628      	mov	r0, r5
 800513c:	f7fe fdc8 	bl	8003cd0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005140:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <xTaskRemoveFromEventList+0x74>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4298      	cmp	r0, r3
 8005148:	bf84      	itt	hi
 800514a:	4b12      	ldrhi	r3, [pc, #72]	; (8005194 <xTaskRemoveFromEventList+0x74>)
 800514c:	6018      	strhi	r0, [r3, #0]
 800514e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005152:	4629      	mov	r1, r5
 8005154:	4b10      	ldr	r3, [pc, #64]	; (8005198 <xTaskRemoveFromEventList+0x78>)
 8005156:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800515a:	f7fe fd95 	bl	8003c88 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800515e:	4b0f      	ldr	r3, [pc, #60]	; (800519c <xTaskRemoveFromEventList+0x7c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005166:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005168:	bf83      	ittte	hi
 800516a:	2001      	movhi	r0, #1
 800516c:	4b0c      	ldrhi	r3, [pc, #48]	; (80051a0 <xTaskRemoveFromEventList+0x80>)
 800516e:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005170:	2000      	movls	r0, #0
}
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005178:	f383 8811 	msr	BASEPRI, r3
 800517c:	f3bf 8f6f 	isb	sy
 8005180:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8005184:	e7fe      	b.n	8005184 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005186:	4629      	mov	r1, r5
 8005188:	4806      	ldr	r0, [pc, #24]	; (80051a4 <xTaskRemoveFromEventList+0x84>)
 800518a:	f7fe fd7d 	bl	8003c88 <vListInsertEnd>
 800518e:	e7e6      	b.n	800515e <xTaskRemoveFromEventList+0x3e>
 8005190:	20007204 	.word	0x20007204
 8005194:	2000720c 	.word	0x2000720c
 8005198:	20006d9c 	.word	0x20006d9c
 800519c:	20006d90 	.word	0x20006d90
 80051a0:	20007288 	.word	0x20007288
 80051a4:	20007244 	.word	0x20007244

080051a8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80051a8:	4b03      	ldr	r3, [pc, #12]	; (80051b8 <vTaskInternalSetTimeOutState+0x10>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80051ae:	4b03      	ldr	r3, [pc, #12]	; (80051bc <vTaskInternalSetTimeOutState+0x14>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	6043      	str	r3, [r0, #4]
}
 80051b4:	4770      	bx	lr
 80051b6:	bf00      	nop
 80051b8:	2000723c 	.word	0x2000723c
 80051bc:	20007284 	.word	0x20007284

080051c0 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80051c0:	b1d0      	cbz	r0, 80051f8 <xTaskCheckForTimeOut+0x38>
{
 80051c2:	b570      	push	{r4, r5, r6, lr}
 80051c4:	460c      	mov	r4, r1
 80051c6:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80051c8:	b1f9      	cbz	r1, 800520a <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80051ca:	f000 fbc3 	bl	8005954 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80051ce:	4b1b      	ldr	r3, [pc, #108]	; (800523c <xTaskCheckForTimeOut+0x7c>)
 80051d0:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80051d2:	6823      	ldr	r3, [r4, #0]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d028      	beq.n	800522c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051da:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051dc:	4818      	ldr	r0, [pc, #96]	; (8005240 <xTaskCheckForTimeOut+0x80>)
 80051de:	6800      	ldr	r0, [r0, #0]
 80051e0:	682e      	ldr	r6, [r5, #0]
 80051e2:	4286      	cmp	r6, r0
 80051e4:	d001      	beq.n	80051ea <xTaskCheckForTimeOut+0x2a>
 80051e6:	4291      	cmp	r1, r2
 80051e8:	d925      	bls.n	8005236 <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051ea:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051ec:	4283      	cmp	r3, r0
 80051ee:	d815      	bhi.n	800521c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80051f0:	2300      	movs	r3, #0
 80051f2:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80051f4:	2401      	movs	r4, #1
 80051f6:	e01a      	b.n	800522e <xTaskCheckForTimeOut+0x6e>
 80051f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8005208:	e7fe      	b.n	8005208 <xTaskCheckForTimeOut+0x48>
 800520a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800521a:	e7fe      	b.n	800521a <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	440b      	add	r3, r1
 8005220:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff ffc0 	bl	80051a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005228:	2400      	movs	r4, #0
 800522a:	e000      	b.n	800522e <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 800522c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800522e:	f000 fbb3 	bl	8005998 <vPortExitCritical>
}
 8005232:	4620      	mov	r0, r4
 8005234:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 8005236:	2401      	movs	r4, #1
 8005238:	e7f9      	b.n	800522e <xTaskCheckForTimeOut+0x6e>
 800523a:	bf00      	nop
 800523c:	20007284 	.word	0x20007284
 8005240:	2000723c 	.word	0x2000723c

08005244 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005244:	4b01      	ldr	r3, [pc, #4]	; (800524c <vTaskMissedYield+0x8>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]
}
 800524a:	4770      	bx	lr
 800524c:	20007288 	.word	0x20007288

08005250 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8005250:	4b01      	ldr	r3, [pc, #4]	; (8005258 <xTaskGetCurrentTaskHandle+0x8>)
 8005252:	6818      	ldr	r0, [r3, #0]
	}
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	20006d90 	.word	0x20006d90

0800525c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800525c:	4b05      	ldr	r3, [pc, #20]	; (8005274 <xTaskGetSchedulerState+0x18>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b133      	cbz	r3, 8005270 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <xTaskGetSchedulerState+0x1c>)
 8005264:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf0c      	ite	eq
 800526a:	2002      	moveq	r0, #2
 800526c:	2000      	movne	r0, #0
 800526e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005270:	2001      	movs	r0, #1
	}
 8005272:	4770      	bx	lr
 8005274:	20007258 	.word	0x20007258
 8005278:	20007204 	.word	0x20007204

0800527c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800527c:	2800      	cmp	r0, #0
 800527e:	d03f      	beq.n	8005300 <xTaskPriorityInherit+0x84>
	{
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005284:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005286:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <xTaskPriorityInherit+0x88>)
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800528c:	4293      	cmp	r3, r2
 800528e:	d22e      	bcs.n	80052ee <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005290:	6982      	ldr	r2, [r0, #24]
 8005292:	2a00      	cmp	r2, #0
 8005294:	db05      	blt.n	80052a2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005296:	4a1b      	ldr	r2, [pc, #108]	; (8005304 <xTaskPriorityInherit+0x88>)
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800529c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80052a0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80052a2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80052a6:	4a18      	ldr	r2, [pc, #96]	; (8005308 <xTaskPriorityInherit+0x8c>)
 80052a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80052ac:	6962      	ldr	r2, [r4, #20]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d005      	beq.n	80052be <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <xTaskPriorityInherit+0x88>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b8:	62e3      	str	r3, [r4, #44]	; 0x2c
				xReturn = pdTRUE;
 80052ba:	2001      	movs	r0, #1
 80052bc:	e01f      	b.n	80052fe <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052be:	1d25      	adds	r5, r4, #4
 80052c0:	4628      	mov	r0, r5
 80052c2:	f7fe fd05 	bl	8003cd0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80052c6:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <xTaskPriorityInherit+0x88>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80052cc:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <xTaskPriorityInherit+0x90>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4298      	cmp	r0, r3
 80052d4:	bf84      	itt	hi
 80052d6:	4b0d      	ldrhi	r3, [pc, #52]	; (800530c <xTaskPriorityInherit+0x90>)
 80052d8:	6018      	strhi	r0, [r3, #0]
 80052da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80052de:	4629      	mov	r1, r5
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <xTaskPriorityInherit+0x8c>)
 80052e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80052e6:	f7fe fccf 	bl	8003c88 <vListInsertEnd>
				xReturn = pdTRUE;
 80052ea:	2001      	movs	r0, #1
 80052ec:	e007      	b.n	80052fe <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <xTaskPriorityInherit+0x88>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80052f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f6:	4298      	cmp	r0, r3
 80052f8:	bf2c      	ite	cs
 80052fa:	2000      	movcs	r0, #0
 80052fc:	2001      	movcc	r0, #1
	}
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8005300:	2000      	movs	r0, #0
	}
 8005302:	4770      	bx	lr
 8005304:	20006d90 	.word	0x20006d90
 8005308:	20006d9c 	.word	0x20006d9c
 800530c:	2000720c 	.word	0x2000720c

08005310 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8005310:	2800      	cmp	r0, #0
 8005312:	d03b      	beq.n	800538c <xTaskPriorityDisinherit+0x7c>
	{
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8005318:	4b1e      	ldr	r3, [pc, #120]	; (8005394 <xTaskPriorityDisinherit+0x84>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4283      	cmp	r3, r0
 800531e:	d008      	beq.n	8005332 <xTaskPriorityDisinherit+0x22>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	e7fe      	b.n	8005330 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8005332:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005334:	b943      	cbnz	r3, 8005348 <xTaskPriorityDisinherit+0x38>
 8005336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533a:	f383 8811 	msr	BASEPRI, r3
 800533e:	f3bf 8f6f 	isb	sy
 8005342:	f3bf 8f4f 	dsb	sy
 8005346:	e7fe      	b.n	8005346 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8005348:	3b01      	subs	r3, #1
 800534a:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800534c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800534e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8005350:	4291      	cmp	r1, r2
 8005352:	d01d      	beq.n	8005390 <xTaskPriorityDisinherit+0x80>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005354:	b10b      	cbz	r3, 800535a <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8005356:	2000      	movs	r0, #0
	}
 8005358:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800535a:	1d05      	adds	r5, r0, #4
 800535c:	4628      	mov	r0, r5
 800535e:	f7fe fcb7 	bl	8003cd0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005362:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8005364:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005366:	f1c0 0338 	rsb	r3, r0, #56	; 0x38
 800536a:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <xTaskPriorityDisinherit+0x88>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4298      	cmp	r0, r3
 8005372:	bf84      	itt	hi
 8005374:	4b08      	ldrhi	r3, [pc, #32]	; (8005398 <xTaskPriorityDisinherit+0x88>)
 8005376:	6018      	strhi	r0, [r3, #0]
 8005378:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800537c:	4629      	mov	r1, r5
 800537e:	4b07      	ldr	r3, [pc, #28]	; (800539c <xTaskPriorityDisinherit+0x8c>)
 8005380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005384:	f7fe fc80 	bl	8003c88 <vListInsertEnd>
					xReturn = pdTRUE;
 8005388:	2001      	movs	r0, #1
 800538a:	e7e5      	b.n	8005358 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 800538c:	2000      	movs	r0, #0
	}
 800538e:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8005390:	2000      	movs	r0, #0
 8005392:	e7e1      	b.n	8005358 <xTaskPriorityDisinherit+0x48>
 8005394:	20006d90 	.word	0x20006d90
 8005398:	2000720c 	.word	0x2000720c
 800539c:	20006d9c 	.word	0x20006d9c

080053a0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d046      	beq.n	8005432 <vTaskPriorityDisinheritAfterTimeout+0x92>
	{
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80053a8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80053aa:	b943      	cbnz	r3, 80053be <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80053ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	e7fe      	b.n	80053bc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80053be:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80053c0:	4291      	cmp	r1, r2
 80053c2:	bf38      	it	cc
 80053c4:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80053c6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80053c8:	428a      	cmp	r2, r1
 80053ca:	d001      	beq.n	80053d0 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d000      	beq.n	80053d2 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80053d0:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80053d2:	4b18      	ldr	r3, [pc, #96]	; (8005434 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4283      	cmp	r3, r0
 80053d8:	d022      	beq.n	8005420 <vTaskPriorityDisinheritAfterTimeout+0x80>
					pxTCB->uxPriority = uxPriorityToUse;
 80053da:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80053dc:	6983      	ldr	r3, [r0, #24]
 80053de:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e0:	bfa4      	itt	ge
 80053e2:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 80053e6:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80053ec:	4b12      	ldr	r3, [pc, #72]	; (8005438 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80053ee:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80053f2:	6943      	ldr	r3, [r0, #20]
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d1eb      	bne.n	80053d0 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f8:	1d05      	adds	r5, r0, #4
 80053fa:	4628      	mov	r0, r5
 80053fc:	f7fe fc68 	bl	8003cd0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8005400:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005402:	4b0e      	ldr	r3, [pc, #56]	; (800543c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4298      	cmp	r0, r3
 8005408:	bf84      	itt	hi
 800540a:	4b0c      	ldrhi	r3, [pc, #48]	; (800543c <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800540c:	6018      	strhi	r0, [r3, #0]
 800540e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005412:	4629      	mov	r1, r5
 8005414:	4b08      	ldr	r3, [pc, #32]	; (8005438 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8005416:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800541a:	f7fe fc35 	bl	8003c88 <vListInsertEnd>
	}
 800541e:	e7d7      	b.n	80053d0 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 8005430:	e7fe      	b.n	8005430 <vTaskPriorityDisinheritAfterTimeout+0x90>
 8005432:	4770      	bx	lr
 8005434:	20006d90 	.word	0x20006d90
 8005438:	20006d9c 	.word	0x20006d9c
 800543c:	2000720c 	.word	0x2000720c

08005440 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <pvTaskIncrementMutexHeldCount+0x18>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	b123      	cbz	r3, 8005450 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005446:	4b04      	ldr	r3, [pc, #16]	; (8005458 <pvTaskIncrementMutexHeldCount+0x18>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800544c:	3301      	adds	r3, #1
 800544e:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8005450:	4b01      	ldr	r3, [pc, #4]	; (8005458 <pvTaskIncrementMutexHeldCount+0x18>)
 8005452:	6818      	ldr	r0, [r3, #0]
	}
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20006d90 	.word	0x20006d90

0800545c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800545c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800545e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005460:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005462:	4291      	cmp	r1, r2
 8005464:	d80c      	bhi.n	8005480 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	6983      	ldr	r3, [r0, #24]
 800546a:	429a      	cmp	r2, r3
 800546c:	d301      	bcc.n	8005472 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800546e:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 8005470:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005472:	1d01      	adds	r1, r0, #4
 8005474:	4b09      	ldr	r3, [pc, #36]	; (800549c <prvInsertTimerInActiveList+0x40>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	f7fe fc11 	bl	8003c9e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800547c:	2000      	movs	r0, #0
 800547e:	e7f7      	b.n	8005470 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005480:	429a      	cmp	r2, r3
 8005482:	d201      	bcs.n	8005488 <prvInsertTimerInActiveList+0x2c>
 8005484:	4299      	cmp	r1, r3
 8005486:	d206      	bcs.n	8005496 <prvInsertTimerInActiveList+0x3a>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005488:	1d01      	adds	r1, r0, #4
 800548a:	4b05      	ldr	r3, [pc, #20]	; (80054a0 <prvInsertTimerInActiveList+0x44>)
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	f7fe fc06 	bl	8003c9e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8005492:	2000      	movs	r0, #0
 8005494:	e7ec      	b.n	8005470 <prvInsertTimerInActiveList+0x14>
			xProcessTimerNow = pdTRUE;
 8005496:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8005498:	e7ea      	b.n	8005470 <prvInsertTimerInActiveList+0x14>
 800549a:	bf00      	nop
 800549c:	20007290 	.word	0x20007290
 80054a0:	2000728c 	.word	0x2000728c

080054a4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80054a4:	b530      	push	{r4, r5, lr}
 80054a6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80054a8:	f000 fa54 	bl	8005954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80054ac:	4b11      	ldr	r3, [pc, #68]	; (80054f4 <prvCheckForValidListAndQueue+0x50>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	b11b      	cbz	r3, 80054ba <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80054b2:	f000 fa71 	bl	8005998 <vPortExitCritical>
}
 80054b6:	b003      	add	sp, #12
 80054b8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 80054ba:	4d0f      	ldr	r5, [pc, #60]	; (80054f8 <prvCheckForValidListAndQueue+0x54>)
 80054bc:	4628      	mov	r0, r5
 80054be:	f7fe fbd5 	bl	8003c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80054c2:	4c0e      	ldr	r4, [pc, #56]	; (80054fc <prvCheckForValidListAndQueue+0x58>)
 80054c4:	4620      	mov	r0, r4
 80054c6:	f7fe fbd1 	bl	8003c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <prvCheckForValidListAndQueue+0x5c>)
 80054cc:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <prvCheckForValidListAndQueue+0x60>)
 80054d0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80054d2:	2300      	movs	r3, #0
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <prvCheckForValidListAndQueue+0x64>)
 80054d8:	4a0c      	ldr	r2, [pc, #48]	; (800550c <prvCheckForValidListAndQueue+0x68>)
 80054da:	2110      	movs	r1, #16
 80054dc:	200a      	movs	r0, #10
 80054de:	f7fe fcde 	bl	8003e9e <xQueueGenericCreateStatic>
 80054e2:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <prvCheckForValidListAndQueue+0x50>)
 80054e4:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 80054e6:	2800      	cmp	r0, #0
 80054e8:	d0e3      	beq.n	80054b2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80054ea:	4909      	ldr	r1, [pc, #36]	; (8005510 <prvCheckForValidListAndQueue+0x6c>)
 80054ec:	f7ff f982 	bl	80047f4 <vQueueAddToRegistry>
 80054f0:	e7df      	b.n	80054b2 <prvCheckForValidListAndQueue+0xe>
 80054f2:	bf00      	nop
 80054f4:	200073b0 	.word	0x200073b0
 80054f8:	20007334 	.word	0x20007334
 80054fc:	20007348 	.word	0x20007348
 8005500:	2000728c 	.word	0x2000728c
 8005504:	20007290 	.word	0x20007290
 8005508:	20007360 	.word	0x20007360
 800550c:	20007294 	.word	0x20007294
 8005510:	080101dc 	.word	0x080101dc

08005514 <xTimerCreateTimerTask>:
{
 8005514:	b510      	push	{r4, lr}
 8005516:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8005518:	f7ff ffc4 	bl	80054a4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800551c:	4b12      	ldr	r3, [pc, #72]	; (8005568 <xTimerCreateTimerTask+0x54>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	b1cb      	cbz	r3, 8005556 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005522:	2400      	movs	r4, #0
 8005524:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005526:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005528:	aa07      	add	r2, sp, #28
 800552a:	a906      	add	r1, sp, #24
 800552c:	a805      	add	r0, sp, #20
 800552e:	f7fe fb91 	bl	8003c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005532:	9b05      	ldr	r3, [sp, #20]
 8005534:	9302      	str	r3, [sp, #8]
 8005536:	9b06      	ldr	r3, [sp, #24]
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	2302      	movs	r3, #2
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	4623      	mov	r3, r4
 8005540:	9a07      	ldr	r2, [sp, #28]
 8005542:	490a      	ldr	r1, [pc, #40]	; (800556c <xTimerCreateTimerTask+0x58>)
 8005544:	480a      	ldr	r0, [pc, #40]	; (8005570 <xTimerCreateTimerTask+0x5c>)
 8005546:	f7ff fb4b 	bl	8004be0 <xTaskCreateStatic>
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <xTimerCreateTimerTask+0x60>)
 800554c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800554e:	b110      	cbz	r0, 8005556 <xTimerCreateTimerTask+0x42>
}
 8005550:	2001      	movs	r0, #1
 8005552:	b008      	add	sp, #32
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8005566:	e7fe      	b.n	8005566 <xTimerCreateTimerTask+0x52>
 8005568:	200073b0 	.word	0x200073b0
 800556c:	080101e4 	.word	0x080101e4
 8005570:	08005689 	.word	0x08005689
 8005574:	200073b4 	.word	0x200073b4

08005578 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8005578:	b1d8      	cbz	r0, 80055b2 <xTimerGenericCommand+0x3a>
 800557a:	469c      	mov	ip, r3
 800557c:	4603      	mov	r3, r0
	if( xTimerQueue != NULL )
 800557e:	4815      	ldr	r0, [pc, #84]	; (80055d4 <xTimerGenericCommand+0x5c>)
 8005580:	6800      	ldr	r0, [r0, #0]
 8005582:	b328      	cbz	r0, 80055d0 <xTimerGenericCommand+0x58>
{
 8005584:	b500      	push	{lr}
 8005586:	b085      	sub	sp, #20
		xMessage.xMessageID = xCommandID;
 8005588:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800558a:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800558c:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800558e:	2905      	cmp	r1, #5
 8005590:	dc18      	bgt.n	80055c4 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005592:	f7ff fe63 	bl	800525c <xTaskGetSchedulerState>
 8005596:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	bf0c      	ite	eq
 800559e:	9a06      	ldreq	r2, [sp, #24]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055a0:	461a      	movne	r2, r3
 80055a2:	4669      	mov	r1, sp
 80055a4:	480b      	ldr	r0, [pc, #44]	; (80055d4 <xTimerGenericCommand+0x5c>)
 80055a6:	6800      	ldr	r0, [r0, #0]
 80055a8:	f7fe fd3a 	bl	8004020 <xQueueGenericSend>
}
 80055ac:	b005      	add	sp, #20
 80055ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
	configASSERT( xTimer );
 80055c2:	e7fe      	b.n	80055c2 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055c4:	2300      	movs	r3, #0
 80055c6:	4662      	mov	r2, ip
 80055c8:	4669      	mov	r1, sp
 80055ca:	f7fe fe3b 	bl	8004244 <xQueueGenericSendFromISR>
 80055ce:	e7ed      	b.n	80055ac <xTimerGenericCommand+0x34>
BaseType_t xReturn = pdFAIL;
 80055d0:	2000      	movs	r0, #0
}
 80055d2:	4770      	bx	lr
 80055d4:	200073b0 	.word	0x200073b0

080055d8 <prvSampleTimeNow>:
{
 80055d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	4682      	mov	sl, r0
	xTimeNow = xTaskGetTickCount();
 80055e0:	f7ff fbc2 	bl	8004d68 <xTaskGetTickCount>
 80055e4:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 80055e6:	4b25      	ldr	r3, [pc, #148]	; (800567c <prvSampleTimeNow+0xa4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4283      	cmp	r3, r0
 80055ec:	d808      	bhi.n	8005600 <prvSampleTimeNow+0x28>
		*pxTimerListsWereSwitched = pdFALSE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8ca 3000 	str.w	r3, [sl]
	xLastTime = xTimeNow;
 80055f4:	4b21      	ldr	r3, [pc, #132]	; (800567c <prvSampleTimeNow+0xa4>)
 80055f6:	601e      	str	r6, [r3, #0]
}
 80055f8:	4630      	mov	r0, r6
 80055fa:	b002      	add	sp, #8
 80055fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005600:	4d1f      	ldr	r5, [pc, #124]	; (8005680 <prvSampleTimeNow+0xa8>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005602:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	b36a      	cbz	r2, 8005668 <prvSampleTimeNow+0x90>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	681f      	ldr	r7, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005610:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005612:	f104 0904 	add.w	r9, r4, #4
 8005616:	4648      	mov	r0, r9
 8005618:	f7fe fb5a 	bl	8003cd0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800561c:	6a23      	ldr	r3, [r4, #32]
 800561e:	4620      	mov	r0, r4
 8005620:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005622:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8005626:	f013 0f04 	tst.w	r3, #4
 800562a:	d0ec      	beq.n	8005606 <prvSampleTimeNow+0x2e>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800562c:	69a3      	ldr	r3, [r4, #24]
 800562e:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8005630:	429f      	cmp	r7, r3
 8005632:	d206      	bcs.n	8005642 <prvSampleTimeNow+0x6a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005634:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005636:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005638:	4649      	mov	r1, r9
 800563a:	6828      	ldr	r0, [r5, #0]
 800563c:	f7fe fb2f 	bl	8003c9e <vListInsert>
 8005640:	e7e1      	b.n	8005606 <prvSampleTimeNow+0x2e>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005642:	f8cd 8000 	str.w	r8, [sp]
 8005646:	4643      	mov	r3, r8
 8005648:	463a      	mov	r2, r7
 800564a:	4641      	mov	r1, r8
 800564c:	4620      	mov	r0, r4
 800564e:	f7ff ff93 	bl	8005578 <xTimerGenericCommand>
				configASSERT( xResult );
 8005652:	2800      	cmp	r0, #0
 8005654:	d1d7      	bne.n	8005606 <prvSampleTimeNow+0x2e>
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	e7fe      	b.n	8005666 <prvSampleTimeNow+0x8e>
	pxCurrentTimerList = pxOverflowTimerList;
 8005668:	4a06      	ldr	r2, [pc, #24]	; (8005684 <prvSampleTimeNow+0xac>)
 800566a:	6810      	ldr	r0, [r2, #0]
 800566c:	4904      	ldr	r1, [pc, #16]	; (8005680 <prvSampleTimeNow+0xa8>)
 800566e:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8005670:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8005672:	2301      	movs	r3, #1
 8005674:	f8ca 3000 	str.w	r3, [sl]
 8005678:	e7bc      	b.n	80055f4 <prvSampleTimeNow+0x1c>
 800567a:	bf00      	nop
 800567c:	2000735c 	.word	0x2000735c
 8005680:	2000728c 	.word	0x2000728c
 8005684:	20007290 	.word	0x20007290

08005688 <prvTimerTask>:
{
 8005688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800568c:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800568e:	4e79      	ldr	r6, [pc, #484]	; (8005874 <prvTimerTask+0x1ec>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005690:	4d79      	ldr	r5, [pc, #484]	; (8005878 <prvTimerTask+0x1f0>)
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005692:	4f7a      	ldr	r7, [pc, #488]	; (800587c <prvTimerTask+0x1f4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005694:	6833      	ldr	r3, [r6, #0]
 8005696:	f8d3 8000 	ldr.w	r8, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800569a:	f1b8 0f00 	cmp.w	r8, #0
 800569e:	d025      	beq.n	80056ec <prvTimerTask+0x64>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80056a6:	f7ff fb57 	bl	8004d58 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056aa:	a804      	add	r0, sp, #16
 80056ac:	f7ff ff94 	bl	80055d8 <prvSampleTimeNow>
 80056b0:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80056b2:	9a04      	ldr	r2, [sp, #16]
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d155      	bne.n	8005764 <prvTimerTask+0xdc>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056b8:	4580      	cmp	r8, r0
 80056ba:	d824      	bhi.n	8005706 <prvTimerTask+0x7e>
				( void ) xTaskResumeAll();
 80056bc:	f7ff fbfc 	bl	8004eb8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c0:	6833      	ldr	r3, [r6, #0]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056c8:	f109 0004 	add.w	r0, r9, #4
 80056cc:	f7fe fb00 	bl	8003cd0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056d0:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 80056d4:	f013 0f04 	tst.w	r3, #4
 80056d8:	d128      	bne.n	800572c <prvTimerTask+0xa4>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056da:	f023 0301 	bic.w	r3, r3, #1
 80056de:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e2:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80056e6:	4648      	mov	r0, r9
 80056e8:	4798      	blx	r3
}
 80056ea:	e03d      	b.n	8005768 <prvTimerTask+0xe0>
	vTaskSuspendAll();
 80056ec:	f7ff fb34 	bl	8004d58 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056f0:	a804      	add	r0, sp, #16
 80056f2:	f7ff ff71 	bl	80055d8 <prvSampleTimeNow>
 80056f6:	4604      	mov	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80056f8:	9b04      	ldr	r3, [sp, #16]
 80056fa:	bb9b      	cbnz	r3, 8005764 <prvTimerTask+0xdc>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	fab2 f282 	clz	r2, r2
 8005704:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005706:	eba8 0104 	sub.w	r1, r8, r4
 800570a:	6828      	ldr	r0, [r5, #0]
 800570c:	f7ff f8b4 	bl	8004878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005710:	f7ff fbd2 	bl	8004eb8 <xTaskResumeAll>
 8005714:	bb40      	cbnz	r0, 8005768 <prvTimerTask+0xe0>
					portYIELD_WITHIN_API();
 8005716:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800571a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800571e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	e01d      	b.n	8005768 <prvTimerTask+0xe0>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800572c:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005730:	4643      	mov	r3, r8
 8005732:	4622      	mov	r2, r4
 8005734:	4441      	add	r1, r8
 8005736:	4648      	mov	r0, r9
 8005738:	f7ff fe90 	bl	800545c <prvInsertTimerInActiveList>
 800573c:	2800      	cmp	r0, #0
 800573e:	d0d0      	beq.n	80056e2 <prvTimerTask+0x5a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005740:	2100      	movs	r1, #0
 8005742:	9100      	str	r1, [sp, #0]
 8005744:	460b      	mov	r3, r1
 8005746:	4642      	mov	r2, r8
 8005748:	4648      	mov	r0, r9
 800574a:	f7ff ff15 	bl	8005578 <xTimerGenericCommand>
			configASSERT( xResult );
 800574e:	2800      	cmp	r0, #0
 8005750:	d1c7      	bne.n	80056e2 <prvTimerTask+0x5a>
 8005752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005756:	f383 8811 	msr	BASEPRI, r3
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	f3bf 8f4f 	dsb	sy
 8005762:	e7fe      	b.n	8005762 <prvTimerTask+0xda>
			( void ) xTaskResumeAll();
 8005764:	f7ff fba8 	bl	8004eb8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005768:	2400      	movs	r4, #0
}
 800576a:	e006      	b.n	800577a <prvTimerTask+0xf2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800576c:	9907      	ldr	r1, [sp, #28]
 800576e:	9806      	ldr	r0, [sp, #24]
 8005770:	9b05      	ldr	r3, [sp, #20]
 8005772:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005774:	9b04      	ldr	r3, [sp, #16]
 8005776:	2b00      	cmp	r3, #0
 8005778:	da09      	bge.n	800578e <prvTimerTask+0x106>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800577a:	4622      	mov	r2, r4
 800577c:	a904      	add	r1, sp, #16
 800577e:	6828      	ldr	r0, [r5, #0]
 8005780:	f7fe fe20 	bl	80043c4 <xQueueReceive>
 8005784:	2800      	cmp	r0, #0
 8005786:	d085      	beq.n	8005694 <prvTimerTask+0xc>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005788:	9b04      	ldr	r3, [sp, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	dbee      	blt.n	800576c <prvTimerTask+0xe4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800578e:	f8dd 8018 	ldr.w	r8, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005792:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005796:	b11b      	cbz	r3, 80057a0 <prvTimerTask+0x118>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005798:	f108 0004 	add.w	r0, r8, #4
 800579c:	f7fe fa98 	bl	8003cd0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057a0:	a803      	add	r0, sp, #12
 80057a2:	f7ff ff19 	bl	80055d8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80057a6:	9b04      	ldr	r3, [sp, #16]
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	d8e6      	bhi.n	800577a <prvTimerTask+0xf2>
 80057ac:	e8df f003 	tbb	[pc, r3]
 80057b0:	33050505 	.word	0x33050505
 80057b4:	0505543a 	.word	0x0505543a
 80057b8:	3a33      	.short	0x3a33
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057ba:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80057be:	f043 0301 	orr.w	r3, r3, #1
 80057c2:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80057cc:	4602      	mov	r2, r0
 80057ce:	4419      	add	r1, r3
 80057d0:	4640      	mov	r0, r8
 80057d2:	f7ff fe43 	bl	800545c <prvInsertTimerInActiveList>
 80057d6:	2800      	cmp	r0, #0
 80057d8:	d0cf      	beq.n	800577a <prvTimerTask+0xf2>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057da:	f8d8 3020 	ldr.w	r3, [r8, #32]
 80057de:	4640      	mov	r0, r8
 80057e0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057e2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 80057e6:	f013 0f04 	tst.w	r3, #4
 80057ea:	d0c6      	beq.n	800577a <prvTimerTask+0xf2>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057ec:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80057f0:	9400      	str	r4, [sp, #0]
 80057f2:	4623      	mov	r3, r4
 80057f4:	9905      	ldr	r1, [sp, #20]
 80057f6:	440a      	add	r2, r1
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff febc 	bl	8005578 <xTimerGenericCommand>
							configASSERT( xResult );
 8005800:	2800      	cmp	r0, #0
 8005802:	d1ba      	bne.n	800577a <prvTimerTask+0xf2>
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	e7fe      	b.n	8005814 <prvTimerTask+0x18c>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005816:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800581a:	f023 0301 	bic.w	r3, r3, #1
 800581e:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					break;
 8005822:	e7aa      	b.n	800577a <prvTimerTask+0xf2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005824:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 8005828:	f043 0301 	orr.w	r3, r3, #1
 800582c:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005830:	9905      	ldr	r1, [sp, #20]
 8005832:	f8c8 1018 	str.w	r1, [r8, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005836:	b131      	cbz	r1, 8005846 <prvTimerTask+0x1be>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005838:	4603      	mov	r3, r0
 800583a:	4602      	mov	r2, r0
 800583c:	4401      	add	r1, r0
 800583e:	4640      	mov	r0, r8
 8005840:	f7ff fe0c 	bl	800545c <prvInsertTimerInActiveList>
					break;
 8005844:	e799      	b.n	800577a <prvTimerTask+0xf2>
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005856:	e7fe      	b.n	8005856 <prvTimerTask+0x1ce>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005858:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
 800585c:	f013 0f02 	tst.w	r3, #2
 8005860:	d004      	beq.n	800586c <prvTimerTask+0x1e4>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005862:	f023 0301 	bic.w	r3, r3, #1
 8005866:	f888 3028 	strb.w	r3, [r8, #40]	; 0x28
 800586a:	e786      	b.n	800577a <prvTimerTask+0xf2>
							vPortFree( pxTimer );
 800586c:	4640      	mov	r0, r8
 800586e:	f000 fa93 	bl	8005d98 <vPortFree>
 8005872:	e782      	b.n	800577a <prvTimerTask+0xf2>
 8005874:	2000728c 	.word	0x2000728c
 8005878:	200073b0 	.word	0x200073b0
 800587c:	20007290 	.word	0x20007290

08005880 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005880:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <prvTaskExitError+0x3c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588e:	d008      	beq.n	80058a2 <prvTaskExitError+0x22>
 8005890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005894:	f383 8811 	msr	BASEPRI, r3
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	f3bf 8f4f 	dsb	sy
 80058a0:	e7fe      	b.n	80058a0 <prvTaskExitError+0x20>
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0fc      	beq.n	80058b2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058b8:	b002      	add	sp, #8
 80058ba:	4770      	bx	lr
 80058bc:	20000020 	.word	0x20000020

080058c0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058c0:	4808      	ldr	r0, [pc, #32]	; (80058e4 <prvPortStartFirstTask+0x24>)
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	6800      	ldr	r0, [r0, #0]
 80058c6:	f380 8808 	msr	MSP, r0
 80058ca:	f04f 0000 	mov.w	r0, #0
 80058ce:	f380 8814 	msr	CONTROL, r0
 80058d2:	b662      	cpsie	i
 80058d4:	b661      	cpsie	f
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	df00      	svc	0
 80058e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058e2:	0000      	.short	0x0000
 80058e4:	e000ed08 	.word	0xe000ed08

080058e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80058e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80058f8 <vPortEnableVFP+0x10>
 80058ec:	6801      	ldr	r1, [r0, #0]
 80058ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80058f2:	6001      	str	r1, [r0, #0]
 80058f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80058f6:	0000      	.short	0x0000
 80058f8:	e000ed88 	.word	0xe000ed88

080058fc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80058fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005900:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005904:	f021 0101 	bic.w	r1, r1, #1
 8005908:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800590c:	4b05      	ldr	r3, [pc, #20]	; (8005924 <pxPortInitialiseStack+0x28>)
 800590e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005912:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005916:	f06f 0302 	mvn.w	r3, #2
 800591a:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800591e:	3844      	subs	r0, #68	; 0x44
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	08005881 	.word	0x08005881
	...

08005930 <SVC_Handler>:
	__asm volatile (
 8005930:	4b07      	ldr	r3, [pc, #28]	; (8005950 <pxCurrentTCBConst2>)
 8005932:	6819      	ldr	r1, [r3, #0]
 8005934:	6808      	ldr	r0, [r1, #0]
 8005936:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800593a:	f380 8809 	msr	PSP, r0
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8811 	msr	BASEPRI, r0
 800594a:	4770      	bx	lr
 800594c:	f3af 8000 	nop.w

08005950 <pxCurrentTCBConst2>:
 8005950:	20006d90 	.word	0x20006d90

08005954 <vPortEnterCritical>:
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8005964:	4a0b      	ldr	r2, [pc, #44]	; (8005994 <vPortEnterCritical+0x40>)
 8005966:	6813      	ldr	r3, [r2, #0]
 8005968:	3301      	adds	r3, #1
 800596a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800596c:	2b01      	cmp	r3, #1
 800596e:	d000      	beq.n	8005972 <vPortEnterCritical+0x1e>
}
 8005970:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005972:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005976:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 800597a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800597e:	d0f7      	beq.n	8005970 <vPortEnterCritical+0x1c>
 8005980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	e7fe      	b.n	8005990 <vPortEnterCritical+0x3c>
 8005992:	bf00      	nop
 8005994:	20000020 	.word	0x20000020

08005998 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <vPortExitCritical+0x28>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	b943      	cbnz	r3, 80059b0 <vPortExitCritical+0x18>
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	e7fe      	b.n	80059ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80059b0:	3b01      	subs	r3, #1
 80059b2:	4a03      	ldr	r2, [pc, #12]	; (80059c0 <vPortExitCritical+0x28>)
 80059b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80059b6:	b90b      	cbnz	r3, 80059bc <vPortExitCritical+0x24>
	__asm volatile
 80059b8:	f383 8811 	msr	BASEPRI, r3
}
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	20000020 	.word	0x20000020
	...

080059d0 <PendSV_Handler>:
	__asm volatile
 80059d0:	f3ef 8009 	mrs	r0, PSP
 80059d4:	f3bf 8f6f 	isb	sy
 80059d8:	4b15      	ldr	r3, [pc, #84]	; (8005a30 <pxCurrentTCBConst>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	f01e 0f10 	tst.w	lr, #16
 80059e0:	bf08      	it	eq
 80059e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80059e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80059f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80059f4:	f380 8811 	msr	BASEPRI, r0
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f7ff fb02 	bl	8005008 <vTaskSwitchContext>
 8005a04:	f04f 0000 	mov.w	r0, #0
 8005a08:	f380 8811 	msr	BASEPRI, r0
 8005a0c:	bc09      	pop	{r0, r3}
 8005a0e:	6819      	ldr	r1, [r3, #0]
 8005a10:	6808      	ldr	r0, [r1, #0]
 8005a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a16:	f01e 0f10 	tst.w	lr, #16
 8005a1a:	bf08      	it	eq
 8005a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a20:	f380 8809 	msr	PSP, r0
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	f3af 8000 	nop.w

08005a30 <pxCurrentTCBConst>:
 8005a30:	20006d90 	.word	0x20006d90

08005a34 <xPortSysTickHandler>:
{
 8005a34:	b508      	push	{r3, lr}
	__asm volatile
 8005a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a3a:	f383 8811 	msr	BASEPRI, r3
 8005a3e:	f3bf 8f6f 	isb	sy
 8005a42:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8005a46:	f7ff f99d 	bl	8004d84 <xTaskIncrementTick>
 8005a4a:	b128      	cbz	r0, 8005a58 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005a4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f383 8811 	msr	BASEPRI, r3
}
 8005a5e:	bd08      	pop	{r3, pc}

08005a60 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a60:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8005a64:	2300      	movs	r3, #0
 8005a66:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a68:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <vPortSetupTimerInterrupt+0x20>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4905      	ldr	r1, [pc, #20]	; (8005a84 <vPortSetupTimerInterrupt+0x24>)
 8005a70:	fba1 1303 	umull	r1, r3, r1, r3
 8005a74:	099b      	lsrs	r3, r3, #6
 8005a76:	3b01      	subs	r3, #1
 8005a78:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a7a:	2307      	movs	r3, #7
 8005a7c:	6113      	str	r3, [r2, #16]
}
 8005a7e:	4770      	bx	lr
 8005a80:	20000000 	.word	0x20000000
 8005a84:	10624dd3 	.word	0x10624dd3

08005a88 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a88:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a8c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005a90:	4b3e      	ldr	r3, [pc, #248]	; (8005b8c <xPortStartScheduler+0x104>)
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d03b      	beq.n	8005b0e <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a96:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005a9a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005a9e:	4b3c      	ldr	r3, [pc, #240]	; (8005b90 <xPortStartScheduler+0x108>)
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d03d      	beq.n	8005b20 <xPortStartScheduler+0x98>
{
 8005aa4:	b530      	push	{r4, r5, lr}
 8005aa6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aa8:	4b3a      	ldr	r3, [pc, #232]	; (8005b94 <xPortStartScheduler+0x10c>)
 8005aaa:	781a      	ldrb	r2, [r3, #0]
 8005aac:	b2d2      	uxtb	r2, r2
 8005aae:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005abc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ac0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ac4:	4a34      	ldr	r2, [pc, #208]	; (8005b98 <xPortStartScheduler+0x110>)
 8005ac6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ac8:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <xPortStartScheduler+0x114>)
 8005aca:	2207      	movs	r2, #7
 8005acc:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ace:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ad2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005ad6:	d011      	beq.n	8005afc <xPortStartScheduler+0x74>
 8005ad8:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ada:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ae6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8005aea:	4611      	mov	r1, r2
 8005aec:	3a01      	subs	r2, #1
 8005aee:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005af2:	d1f2      	bne.n	8005ada <xPortStartScheduler+0x52>
 8005af4:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <xPortStartScheduler+0x114>)
 8005af6:	6019      	str	r1, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005af8:	2903      	cmp	r1, #3
 8005afa:	d01a      	beq.n	8005b32 <xPortStartScheduler+0xaa>
	__asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	e7fe      	b.n	8005b0c <xPortStartScheduler+0x84>
 8005b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b12:	f383 8811 	msr	BASEPRI, r3
 8005b16:	f3bf 8f6f 	isb	sy
 8005b1a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b1e:	e7fe      	b.n	8005b1e <xPortStartScheduler+0x96>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b30:	e7fe      	b.n	8005b30 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b32:	4b1a      	ldr	r3, [pc, #104]	; (8005b9c <xPortStartScheduler+0x114>)
 8005b34:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005b38:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b3a:	9b01      	ldr	r3, [sp, #4]
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <xPortStartScheduler+0x10c>)
 8005b40:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b42:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
 8005b46:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005b4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b4e:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b52:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 8005b56:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b5a:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 8005b5e:	f7ff ff7f 	bl	8005a60 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8005b62:	2500      	movs	r5, #0
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <xPortStartScheduler+0x118>)
 8005b66:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8005b68:	f7ff febe 	bl	80058e8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b6c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8005b70:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b74:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 8005b78:	f7ff fea2 	bl	80058c0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8005b7c:	f7ff fa44 	bl	8005008 <vTaskSwitchContext>
	prvTaskExitError();
 8005b80:	f7ff fe7e 	bl	8005880 <prvTaskExitError>
}
 8005b84:	4628      	mov	r0, r5
 8005b86:	b003      	add	sp, #12
 8005b88:	bd30      	pop	{r4, r5, pc}
 8005b8a:	bf00      	nop
 8005b8c:	410fc271 	.word	0x410fc271
 8005b90:	410fc270 	.word	0x410fc270
 8005b94:	e000e400 	.word	0xe000e400
 8005b98:	200073b8 	.word	0x200073b8
 8005b9c:	200073bc 	.word	0x200073bc
 8005ba0:	20000020 	.word	0x20000020

08005ba4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005ba4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ba8:	2b0f      	cmp	r3, #15
 8005baa:	d90f      	bls.n	8005bcc <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bac:	4a11      	ldr	r2, [pc, #68]	; (8005bf4 <vPortValidateInterruptPriority+0x50>)
 8005bae:	5c9b      	ldrb	r3, [r3, r2]
 8005bb0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bb2:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <vPortValidateInterruptPriority+0x54>)
 8005bb4:	7812      	ldrb	r2, [r2, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d908      	bls.n	8005bcc <vPortValidateInterruptPriority+0x28>
 8005bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	e7fe      	b.n	8005bca <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8005bd0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8005bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bd8:	4a08      	ldr	r2, [pc, #32]	; (8005bfc <vPortValidateInterruptPriority+0x58>)
 8005bda:	6812      	ldr	r2, [r2, #0]
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d908      	bls.n	8005bf2 <vPortValidateInterruptPriority+0x4e>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	e7fe      	b.n	8005bf0 <vPortValidateInterruptPriority+0x4c>
	}
 8005bf2:	4770      	bx	lr
 8005bf4:	e000e3f0 	.word	0xe000e3f0
 8005bf8:	200073b8 	.word	0x200073b8
 8005bfc:	200073bc 	.word	0x200073bc

08005c00 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c00:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <prvInsertBlockIntoFreeList+0x58>)
 8005c02:	461a      	mov	r2, r3
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4283      	cmp	r3, r0
 8005c08:	d3fb      	bcc.n	8005c02 <prvInsertBlockIntoFreeList+0x2>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c0a:	6851      	ldr	r1, [r2, #4]
 8005c0c:	eb02 0c01 	add.w	ip, r2, r1
 8005c10:	4560      	cmp	r0, ip
 8005c12:	d009      	beq.n	8005c28 <prvInsertBlockIntoFreeList+0x28>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c14:	6841      	ldr	r1, [r0, #4]
 8005c16:	eb00 0c01 	add.w	ip, r0, r1
 8005c1a:	4563      	cmp	r3, ip
 8005c1c:	d009      	beq.n	8005c32 <prvInsertBlockIntoFreeList+0x32>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c1e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c20:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c22:	bf18      	it	ne
 8005c24:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
 8005c26:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c28:	6840      	ldr	r0, [r0, #4]
 8005c2a:	4401      	add	r1, r0
 8005c2c:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 8005c2e:	4610      	mov	r0, r2
 8005c30:	e7f0      	b.n	8005c14 <prvInsertBlockIntoFreeList+0x14>
{
 8005c32:	b410      	push	{r4}
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c34:	4c09      	ldr	r4, [pc, #36]	; (8005c5c <prvInsertBlockIntoFreeList+0x5c>)
 8005c36:	6824      	ldr	r4, [r4, #0]
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	d00b      	beq.n	8005c54 <prvInsertBlockIntoFreeList+0x54>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4419      	add	r1, r3
 8005c40:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c42:	6813      	ldr	r3, [r2, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6003      	str	r3, [r0, #0]
	if( pxIterator != pxBlockToInsert )
 8005c48:	4290      	cmp	r0, r2
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c4a:	bf18      	it	ne
 8005c4c:	6010      	strne	r0, [r2, #0]
	}
}
 8005c4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c52:	4770      	bx	lr
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c54:	6004      	str	r4, [r0, #0]
 8005c56:	e7f7      	b.n	8005c48 <prvInsertBlockIntoFreeList+0x48>
 8005c58:	2000afd8 	.word	0x2000afd8
 8005c5c:	200073c0 	.word	0x200073c0

08005c60 <pvPortMalloc>:
{
 8005c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c62:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8005c64:	f7ff f878 	bl	8004d58 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8005c68:	4b44      	ldr	r3, [pc, #272]	; (8005d7c <pvPortMalloc+0x11c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	b1b3      	cbz	r3, 8005c9c <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c6e:	4b44      	ldr	r3, [pc, #272]	; (8005d80 <pvPortMalloc+0x120>)
 8005c70:	681d      	ldr	r5, [r3, #0]
 8005c72:	4225      	tst	r5, r4
 8005c74:	d17d      	bne.n	8005d72 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8005c76:	2c00      	cmp	r4, #0
 8005c78:	d07b      	beq.n	8005d72 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 8005c7a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c7e:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c82:	bf1c      	itt	ne
 8005c84:	f022 0207 	bicne.w	r2, r2, #7
 8005c88:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	d071      	beq.n	8005d72 <pvPortMalloc+0x112>
 8005c8e:	4b3d      	ldr	r3, [pc, #244]	; (8005d84 <pvPortMalloc+0x124>)
 8005c90:	681e      	ldr	r6, [r3, #0]
 8005c92:	4296      	cmp	r6, r2
 8005c94:	d36d      	bcc.n	8005d72 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 8005c96:	493c      	ldr	r1, [pc, #240]	; (8005d88 <pvPortMalloc+0x128>)
 8005c98:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c9a:	e027      	b.n	8005cec <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 8005c9c:	4a3b      	ldr	r2, [pc, #236]	; (8005d8c <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005c9e:	f012 0f07 	tst.w	r2, #7
 8005ca2:	d007      	beq.n	8005cb4 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ca4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ca6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005caa:	f502 5370 	add.w	r3, r2, #15360	; 0x3c00
 8005cae:	1a5b      	subs	r3, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cb0:	460a      	mov	r2, r1
 8005cb2:	e001      	b.n	8005cb8 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005cb4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cb8:	4833      	ldr	r0, [pc, #204]	; (8005d88 <pvPortMalloc+0x128>)
 8005cba:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005cc0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8005cc2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc4:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8005cc8:	482c      	ldr	r0, [pc, #176]	; (8005d7c <pvPortMalloc+0x11c>)
 8005cca:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8005ccc:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005cce:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005cd0:	1a99      	subs	r1, r3, r2
 8005cd2:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005cd4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cd6:	4b2e      	ldr	r3, [pc, #184]	; (8005d90 <pvPortMalloc+0x130>)
 8005cd8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005cda:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <pvPortMalloc+0x124>)
 8005cdc:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005cde:	4b28      	ldr	r3, [pc, #160]	; (8005d80 <pvPortMalloc+0x120>)
 8005ce0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ce4:	601a      	str	r2, [r3, #0]
}
 8005ce6:	e7c2      	b.n	8005c6e <pvPortMalloc+0xe>
 8005ce8:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cea:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cec:	6863      	ldr	r3, [r4, #4]
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d202      	bcs.n	8005cf8 <pvPortMalloc+0x98>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1f7      	bne.n	8005ce8 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8005cf8:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <pvPortMalloc+0x11c>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	42a3      	cmp	r3, r4
 8005cfe:	d038      	beq.n	8005d72 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d00:	680f      	ldr	r7, [r1, #0]
 8005d02:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d08:	6863      	ldr	r3, [r4, #4]
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d910      	bls.n	8005d32 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d10:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d12:	f010 0f07 	tst.w	r0, #7
 8005d16:	d008      	beq.n	8005d2a <pvPortMalloc+0xca>
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	e7fe      	b.n	8005d28 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d2a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d2c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d2e:	f7ff ff67 	bl	8005c00 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	1af6      	subs	r6, r6, r3
 8005d36:	4a13      	ldr	r2, [pc, #76]	; (8005d84 <pvPortMalloc+0x124>)
 8005d38:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <pvPortMalloc+0x130>)
 8005d3c:	6812      	ldr	r2, [r2, #0]
 8005d3e:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d40:	bf3c      	itt	cc
 8005d42:	4a13      	ldrcc	r2, [pc, #76]	; (8005d90 <pvPortMalloc+0x130>)
 8005d44:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d46:	431d      	orrs	r5, r3
 8005d48:	6065      	str	r5, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <pvPortMalloc+0x134>)
 8005d50:	6813      	ldr	r3, [r2, #0]
 8005d52:	3301      	adds	r3, #1
 8005d54:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8005d56:	f7ff f8af 	bl	8004eb8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d5a:	f017 0f07 	tst.w	r7, #7
 8005d5e:	d00b      	beq.n	8005d78 <pvPortMalloc+0x118>
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	e7fe      	b.n	8005d70 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8005d72:	f7ff f8a1 	bl	8004eb8 <xTaskResumeAll>
 8005d76:	2700      	movs	r7, #0
}
 8005d78:	4638      	mov	r0, r7
 8005d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d7c:	200073c0 	.word	0x200073c0
 8005d80:	2000afc4 	.word	0x2000afc4
 8005d84:	2000afc8 	.word	0x2000afc8
 8005d88:	2000afd8 	.word	0x2000afd8
 8005d8c:	200073c4 	.word	0x200073c4
 8005d90:	2000afcc 	.word	0x2000afcc
 8005d94:	2000afd0 	.word	0x2000afd0

08005d98 <vPortFree>:
	if( pv != NULL )
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d033      	beq.n	8005e04 <vPortFree+0x6c>
{
 8005d9c:	b510      	push	{r4, lr}
 8005d9e:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005da0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8005da4:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <vPortFree+0x70>)
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	4213      	tst	r3, r2
 8005daa:	d108      	bne.n	8005dbe <vPortFree+0x26>
 8005dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db0:	f383 8811 	msr	BASEPRI, r3
 8005db4:	f3bf 8f6f 	isb	sy
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	e7fe      	b.n	8005dbc <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dbe:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005dc2:	b141      	cbz	r1, 8005dd6 <vPortFree+0x3e>
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	e7fe      	b.n	8005dd4 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005dd6:	ea23 0302 	bic.w	r3, r3, r2
 8005dda:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8005dde:	f7fe ffbb 	bl	8004d58 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005de2:	4a0a      	ldr	r2, [pc, #40]	; (8005e0c <vPortFree+0x74>)
 8005de4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8005de8:	6811      	ldr	r1, [r2, #0]
 8005dea:	440b      	add	r3, r1
 8005dec:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dee:	f1a4 0008 	sub.w	r0, r4, #8
 8005df2:	f7ff ff05 	bl	8005c00 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005df6:	4a06      	ldr	r2, [pc, #24]	; (8005e10 <vPortFree+0x78>)
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 8005dfe:	f7ff f85b 	bl	8004eb8 <xTaskResumeAll>
}
 8005e02:	bd10      	pop	{r4, pc}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	2000afc4 	.word	0x2000afc4
 8005e0c:	2000afc8 	.word	0x2000afc8
 8005e10:	2000afd4 	.word	0x2000afd4

08005e14 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8005e14:	b510      	push	{r4, lr}
 8005e16:	460c      	mov	r4, r1

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005e18:	680a      	ldr	r2, [r1, #0]
 8005e1a:	320c      	adds	r2, #12
 8005e1c:	f001 fce2 	bl	80077e4 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8005e20:	b100      	cbz	r0, 8005e24 <netconn_apimsg+0x10>
    return apimsg->err;
  }
  return err;
}
 8005e22:	bd10      	pop	{r4, pc}
    return apimsg->err;
 8005e24:	f994 0004 	ldrsb.w	r0, [r4, #4]
 8005e28:	e7fb      	b.n	8005e22 <netconn_apimsg+0xe>
	...

08005e2c <netconn_tcp_recvd_msg>:
}

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8005e2c:	b510      	push	{r4, lr}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005e2e:	b160      	cbz	r0, 8005e4a <netconn_tcp_recvd_msg+0x1e>
 8005e30:	460c      	mov	r4, r1
 8005e32:	4611      	mov	r1, r2
 8005e34:	7803      	ldrb	r3, [r0, #0]
 8005e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d105      	bne.n	8005e4a <netconn_tcp_recvd_msg+0x1e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8005e3e:	6010      	str	r0, [r2, #0]
  msg->msg.r.len = len;
 8005e40:	6094      	str	r4, [r2, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005e42:	4807      	ldr	r0, [pc, #28]	; (8005e60 <netconn_tcp_recvd_msg+0x34>)
 8005e44:	f7ff ffe6 	bl	8005e14 <netconn_apimsg>
}
 8005e48:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8005e4a:	4b06      	ldr	r3, [pc, #24]	; (8005e64 <netconn_tcp_recvd_msg+0x38>)
 8005e4c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005e50:	4905      	ldr	r1, [pc, #20]	; (8005e68 <netconn_tcp_recvd_msg+0x3c>)
 8005e52:	4806      	ldr	r0, [pc, #24]	; (8005e6c <netconn_tcp_recvd_msg+0x40>)
 8005e54:	f009 f84e 	bl	800eef4 <iprintf>
 8005e58:	f06f 000f 	mvn.w	r0, #15
 8005e5c:	e7f4      	b.n	8005e48 <netconn_tcp_recvd_msg+0x1c>
 8005e5e:	bf00      	nop
 8005e60:	080073e1 	.word	0x080073e1
 8005e64:	080101ec 	.word	0x080101ec
 8005e68:	08010220 	.word	0x08010220
 8005e6c:	08010198 	.word	0x08010198

08005e70 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8005e70:	b500      	push	{lr}
 8005e72:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005e74:	b160      	cbz	r0, 8005e90 <netconn_close_shutdown+0x20>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005e76:	9000      	str	r0, [sp, #0]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8005e78:	f88d 1008 	strb.w	r1, [sp, #8]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005e7c:	2329      	movs	r3, #41	; 0x29
 8005e7e:	f88d 3009 	strb.w	r3, [sp, #9]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8005e82:	4669      	mov	r1, sp
 8005e84:	4807      	ldr	r0, [pc, #28]	; (8005ea4 <netconn_close_shutdown+0x34>)
 8005e86:	f7ff ffc5 	bl	8005e14 <netconn_apimsg>
  API_MSG_VAR_FREE(msg);

  return err;
}
 8005e8a:	b009      	add	sp, #36	; 0x24
 8005e8c:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <netconn_close_shutdown+0x38>)
 8005e92:	f240 4247 	movw	r2, #1095	; 0x447
 8005e96:	4905      	ldr	r1, [pc, #20]	; (8005eac <netconn_close_shutdown+0x3c>)
 8005e98:	4805      	ldr	r0, [pc, #20]	; (8005eb0 <netconn_close_shutdown+0x40>)
 8005e9a:	f009 f82b 	bl	800eef4 <iprintf>
 8005e9e:	f06f 000f 	mvn.w	r0, #15
 8005ea2:	e7f2      	b.n	8005e8a <netconn_close_shutdown+0x1a>
 8005ea4:	080074f1 	.word	0x080074f1
 8005ea8:	080101ec 	.word	0x080101ec
 8005eac:	08010244 	.word	0x08010244
 8005eb0:	08010198 	.word	0x08010198

08005eb4 <netconn_new_with_proto_and_callback>:
{
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	460c      	mov	r4, r1
  conn = netconn_alloc(t, callback);
 8005eba:	4611      	mov	r1, r2
 8005ebc:	f001 f816 	bl	8006eec <netconn_alloc>
  if (conn != NULL) {
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	b138      	cbz	r0, 8005ed4 <netconn_new_with_proto_and_callback+0x20>
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005ec4:	f88d 4008 	strb.w	r4, [sp, #8]
    API_MSG_VAR_REF(msg).conn = conn;
 8005ec8:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005eca:	4669      	mov	r1, sp
 8005ecc:	4820      	ldr	r0, [pc, #128]	; (8005f50 <netconn_new_with_proto_and_callback+0x9c>)
 8005ece:	f7ff ffa1 	bl	8005e14 <netconn_apimsg>
    if (err != ERR_OK) {
 8005ed2:	b910      	cbnz	r0, 8005eda <netconn_new_with_proto_and_callback+0x26>
}
 8005ed4:	4628      	mov	r0, r5
 8005ed6:	b008      	add	sp, #32
 8005ed8:	bd70      	pop	{r4, r5, r6, pc}
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005eda:	686b      	ldr	r3, [r5, #4]
 8005edc:	b12b      	cbz	r3, 8005eea <netconn_new_with_proto_and_callback+0x36>
 8005ede:	4b1d      	ldr	r3, [pc, #116]	; (8005f54 <netconn_new_with_proto_and_callback+0xa0>)
 8005ee0:	22a3      	movs	r2, #163	; 0xa3
 8005ee2:	491d      	ldr	r1, [pc, #116]	; (8005f58 <netconn_new_with_proto_and_callback+0xa4>)
 8005ee4:	481d      	ldr	r0, [pc, #116]	; (8005f5c <netconn_new_with_proto_and_callback+0xa8>)
 8005ee6:	f009 f805 	bl	800eef4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005eea:	f105 0410 	add.w	r4, r5, #16
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f008 fd74 	bl	800e9dc <sys_mbox_valid>
 8005ef4:	b1b0      	cbz	r0, 8005f24 <netconn_new_with_proto_and_callback+0x70>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005ef6:	f105 0014 	add.w	r0, r5, #20
 8005efa:	f008 fd6f 	bl	800e9dc <sys_mbox_valid>
 8005efe:	b9c0      	cbnz	r0, 8005f32 <netconn_new_with_proto_and_callback+0x7e>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005f00:	f105 060c 	add.w	r6, r5, #12
 8005f04:	4630      	mov	r0, r6
 8005f06:	f008 fdaf 	bl	800ea68 <sys_sem_valid>
 8005f0a:	b1c8      	cbz	r0, 8005f40 <netconn_new_with_proto_and_callback+0x8c>
      sys_sem_free(&conn->op_completed);
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f008 fda6 	bl	800ea5e <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8005f12:	4620      	mov	r0, r4
 8005f14:	f008 fd1d 	bl	800e952 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005f18:	4629      	mov	r1, r5
 8005f1a:	2007      	movs	r0, #7
 8005f1c:	f002 f832 	bl	8007f84 <memp_free>
      return NULL;
 8005f20:	2500      	movs	r5, #0
 8005f22:	e7d7      	b.n	8005ed4 <netconn_new_with_proto_and_callback+0x20>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005f24:	4b0b      	ldr	r3, [pc, #44]	; (8005f54 <netconn_new_with_proto_and_callback+0xa0>)
 8005f26:	22a4      	movs	r2, #164	; 0xa4
 8005f28:	490d      	ldr	r1, [pc, #52]	; (8005f60 <netconn_new_with_proto_and_callback+0xac>)
 8005f2a:	480c      	ldr	r0, [pc, #48]	; (8005f5c <netconn_new_with_proto_and_callback+0xa8>)
 8005f2c:	f008 ffe2 	bl	800eef4 <iprintf>
 8005f30:	e7e1      	b.n	8005ef6 <netconn_new_with_proto_and_callback+0x42>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005f32:	4b08      	ldr	r3, [pc, #32]	; (8005f54 <netconn_new_with_proto_and_callback+0xa0>)
 8005f34:	22a6      	movs	r2, #166	; 0xa6
 8005f36:	490b      	ldr	r1, [pc, #44]	; (8005f64 <netconn_new_with_proto_and_callback+0xb0>)
 8005f38:	4808      	ldr	r0, [pc, #32]	; (8005f5c <netconn_new_with_proto_and_callback+0xa8>)
 8005f3a:	f008 ffdb 	bl	800eef4 <iprintf>
 8005f3e:	e7df      	b.n	8005f00 <netconn_new_with_proto_and_callback+0x4c>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <netconn_new_with_proto_and_callback+0xa0>)
 8005f42:	22a9      	movs	r2, #169	; 0xa9
 8005f44:	4908      	ldr	r1, [pc, #32]	; (8005f68 <netconn_new_with_proto_and_callback+0xb4>)
 8005f46:	4805      	ldr	r0, [pc, #20]	; (8005f5c <netconn_new_with_proto_and_callback+0xa8>)
 8005f48:	f008 ffd4 	bl	800eef4 <iprintf>
 8005f4c:	e7de      	b.n	8005f0c <netconn_new_with_proto_and_callback+0x58>
 8005f4e:	bf00      	nop
 8005f50:	08006e7d 	.word	0x08006e7d
 8005f54:	080101ec 	.word	0x080101ec
 8005f58:	08010260 	.word	0x08010260
 8005f5c:	08010198 	.word	0x08010198
 8005f60:	08010284 	.word	0x08010284
 8005f64:	0801029c 	.word	0x0801029c
 8005f68:	080102c0 	.word	0x080102c0

08005f6c <netconn_prepare_delete>:
  if (conn == NULL) {
 8005f6c:	b160      	cbz	r0, 8005f88 <netconn_prepare_delete+0x1c>
{
 8005f6e:	b500      	push	{lr}
 8005f70:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_REF(msg).conn = conn;
 8005f72:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005f74:	2329      	movs	r3, #41	; 0x29
 8005f76:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005f7a:	4669      	mov	r1, sp
 8005f7c:	4803      	ldr	r0, [pc, #12]	; (8005f8c <netconn_prepare_delete+0x20>)
 8005f7e:	f7ff ff49 	bl	8005e14 <netconn_apimsg>
}
 8005f82:	b009      	add	sp, #36	; 0x24
 8005f84:	f85d fb04 	ldr.w	pc, [sp], #4
    return ERR_OK;
 8005f88:	2000      	movs	r0, #0
}
 8005f8a:	4770      	bx	lr
 8005f8c:	080071b1 	.word	0x080071b1

08005f90 <netconn_delete>:
{
 8005f90:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8005f92:	b150      	cbz	r0, 8005faa <netconn_delete+0x1a>
 8005f94:	4605      	mov	r5, r0
    err = netconn_prepare_delete(conn);
 8005f96:	f7ff ffe9 	bl	8005f6c <netconn_prepare_delete>
  if (err == ERR_OK) {
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	b108      	cbz	r0, 8005fa2 <netconn_delete+0x12>
}
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	bd38      	pop	{r3, r4, r5, pc}
    netconn_free(conn);
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 ffe6 	bl	8006f74 <netconn_free>
 8005fa8:	e7f9      	b.n	8005f9e <netconn_delete+0xe>
    return ERR_OK;
 8005faa:	2400      	movs	r4, #0
 8005fac:	e7f7      	b.n	8005f9e <netconn_delete+0xe>
	...

08005fb0 <netconn_bind>:
{
 8005fb0:	b500      	push	{lr}
 8005fb2:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005fb4:	b178      	cbz	r0, 8005fd6 <netconn_bind+0x26>
 8005fb6:	4603      	mov	r3, r0
    addr = IP4_ADDR_ANY;
 8005fb8:	480c      	ldr	r0, [pc, #48]	; (8005fec <netconn_bind+0x3c>)
 8005fba:	2900      	cmp	r1, #0
 8005fbc:	bf08      	it	eq
 8005fbe:	4601      	moveq	r1, r0
  API_MSG_VAR_REF(msg).conn = conn;
 8005fc0:	9300      	str	r3, [sp, #0]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005fc2:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005fc4:	f8ad 200c 	strh.w	r2, [sp, #12]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8005fc8:	4669      	mov	r1, sp
 8005fca:	4809      	ldr	r0, [pc, #36]	; (8005ff0 <netconn_bind+0x40>)
 8005fcc:	f7ff ff22 	bl	8005e14 <netconn_apimsg>
}
 8005fd0:	b009      	add	sp, #36	; 0x24
 8005fd2:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8005fd6:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <netconn_bind+0x44>)
 8005fd8:	f44f 729c 	mov.w	r2, #312	; 0x138
 8005fdc:	4906      	ldr	r1, [pc, #24]	; (8005ff8 <netconn_bind+0x48>)
 8005fde:	4807      	ldr	r0, [pc, #28]	; (8005ffc <netconn_bind+0x4c>)
 8005fe0:	f008 ff88 	bl	800eef4 <iprintf>
 8005fe4:	f06f 000f 	mvn.w	r0, #15
 8005fe8:	e7f2      	b.n	8005fd0 <netconn_bind+0x20>
 8005fea:	bf00      	nop
 8005fec:	080127e4 	.word	0x080127e4
 8005ff0:	080072d1 	.word	0x080072d1
 8005ff4:	080101ec 	.word	0x080101ec
 8005ff8:	080102dc 	.word	0x080102dc
 8005ffc:	08010198 	.word	0x08010198

08006000 <netconn_listen_with_backlog>:
{
 8006000:	b500      	push	{lr}
 8006002:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006004:	b138      	cbz	r0, 8006016 <netconn_listen_with_backlog+0x16>
  API_MSG_VAR_REF(msg).conn = conn;
 8006006:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8006008:	4669      	mov	r1, sp
 800600a:	4808      	ldr	r0, [pc, #32]	; (800602c <netconn_listen_with_backlog+0x2c>)
 800600c:	f7ff ff02 	bl	8005e14 <netconn_apimsg>
}
 8006010:	b009      	add	sp, #36	; 0x24
 8006012:	f85d fb04 	ldr.w	pc, [sp], #4
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <netconn_listen_with_backlog+0x30>)
 8006018:	f240 12bb 	movw	r2, #443	; 0x1bb
 800601c:	4905      	ldr	r1, [pc, #20]	; (8006034 <netconn_listen_with_backlog+0x34>)
 800601e:	4806      	ldr	r0, [pc, #24]	; (8006038 <netconn_listen_with_backlog+0x38>)
 8006020:	f008 ff68 	bl	800eef4 <iprintf>
 8006024:	f06f 000f 	mvn.w	r0, #15
 8006028:	e7f2      	b.n	8006010 <netconn_listen_with_backlog+0x10>
 800602a:	bf00      	nop
 800602c:	0800730d 	.word	0x0800730d
 8006030:	080101ec 	.word	0x080101ec
 8006034:	080102f8 	.word	0x080102f8
 8006038:	08010198 	.word	0x08010198

0800603c <netconn_write_vectors_partly>:
{
 800603c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603e:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006040:	b308      	cbz	r0, 8006086 <netconn_write_vectors_partly+0x4a>
 8006042:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8006044:	7800      	ldrb	r0, [r0, #0]
 8006046:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800604a:	2810      	cmp	r0, #16
 800604c:	d125      	bne.n	800609a <netconn_write_vectors_partly+0x5e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800604e:	7f28      	ldrb	r0, [r5, #28]
 8006050:	f010 0f02 	tst.w	r0, #2
 8006054:	d12b      	bne.n	80060ae <netconn_write_vectors_partly+0x72>
 8006056:	f003 0004 	and.w	r0, r3, #4
 800605a:	2800      	cmp	r0, #0
 800605c:	bf14      	ite	ne
 800605e:	2601      	movne	r6, #1
 8006060:	2600      	moveq	r6, #0
  if (dontblock && !bytes_written) {
 8006062:	d125      	bne.n	80060b0 <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8006064:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8006066:	b162      	cbz	r2, 8006082 <netconn_write_vectors_partly+0x46>
    size += vectors[i].len;
 8006068:	468c      	mov	ip, r1
 800606a:	f85c 4f04 	ldr.w	r4, [ip, #4]!
 800606e:	2000      	movs	r0, #0
  for (i = 0; i < vectorcnt; i++) {
 8006070:	3001      	adds	r0, #1
 8006072:	4290      	cmp	r0, r2
 8006074:	d022      	beq.n	80060bc <netconn_write_vectors_partly+0x80>
    if (size < vectors[i].len) {
 8006076:	f85c 7030 	ldr.w	r7, [ip, r0, lsl #3]
 800607a:	19e4      	adds	r4, r4, r7
 800607c:	d3f8      	bcc.n	8006070 <netconn_write_vectors_partly+0x34>
      return ERR_VAL;
 800607e:	f06f 0005 	mvn.w	r0, #5
}
 8006082:	b009      	add	sp, #36	; 0x24
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006086:	4b31      	ldr	r3, [pc, #196]	; (800614c <netconn_write_vectors_partly+0x110>)
 8006088:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800608c:	4930      	ldr	r1, [pc, #192]	; (8006150 <netconn_write_vectors_partly+0x114>)
 800608e:	4831      	ldr	r0, [pc, #196]	; (8006154 <netconn_write_vectors_partly+0x118>)
 8006090:	f008 ff30 	bl	800eef4 <iprintf>
 8006094:	f06f 000f 	mvn.w	r0, #15
 8006098:	e7f3      	b.n	8006082 <netconn_write_vectors_partly+0x46>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800609a:	4b2c      	ldr	r3, [pc, #176]	; (800614c <netconn_write_vectors_partly+0x110>)
 800609c:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80060a0:	492d      	ldr	r1, [pc, #180]	; (8006158 <netconn_write_vectors_partly+0x11c>)
 80060a2:	482c      	ldr	r0, [pc, #176]	; (8006154 <netconn_write_vectors_partly+0x118>)
 80060a4:	f008 ff26 	bl	800eef4 <iprintf>
 80060a8:	f06f 0005 	mvn.w	r0, #5
 80060ac:	e7e9      	b.n	8006082 <netconn_write_vectors_partly+0x46>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80060ae:	2601      	movs	r6, #1
  if (dontblock && !bytes_written) {
 80060b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060b2:	2800      	cmp	r0, #0
 80060b4:	d1d6      	bne.n	8006064 <netconn_write_vectors_partly+0x28>
    return ERR_VAL;
 80060b6:	f06f 0005 	mvn.w	r0, #5
 80060ba:	e7e2      	b.n	8006082 <netconn_write_vectors_partly+0x46>
  if (size == 0) {
 80060bc:	2c00      	cmp	r4, #0
 80060be:	d03e      	beq.n	800613e <netconn_write_vectors_partly+0x102>
  } else if (size > SSIZE_MAX) {
 80060c0:	2c00      	cmp	r4, #0
 80060c2:	da1f      	bge.n	8006104 <netconn_write_vectors_partly+0xc8>
    if (!bytes_written) {
 80060c4:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d03b      	beq.n	8006142 <netconn_write_vectors_partly+0x106>
  API_MSG_VAR_REF(msg).conn = conn;
 80060ca:	9500      	str	r5, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80060cc:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80060ce:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80060d2:	2200      	movs	r2, #0
 80060d4:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80060d6:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80060da:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80060de:	9305      	str	r3, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80060e0:	9206      	str	r2, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80060e2:	4669      	mov	r1, sp
 80060e4:	481d      	ldr	r0, [pc, #116]	; (800615c <netconn_write_vectors_partly+0x120>)
 80060e6:	f7ff fe95 	bl	8005e14 <netconn_apimsg>
  if (err == ERR_OK) {
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d1c9      	bne.n	8006082 <netconn_write_vectors_partly+0x46>
    size = (size_t)limited;
 80060ee:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80060f2:	9b06      	ldr	r3, [sp, #24]
 80060f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060f6:	6013      	str	r3, [r2, #0]
    if (!dontblock) {
 80060f8:	bb36      	cbnz	r6, 8006148 <netconn_write_vectors_partly+0x10c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80060fa:	9b06      	ldr	r3, [sp, #24]
 80060fc:	42a3      	cmp	r3, r4
 80060fe:	d115      	bne.n	800612c <netconn_write_vectors_partly+0xf0>
  return err;
 8006100:	2000      	movs	r0, #0
 8006102:	e7be      	b.n	8006082 <netconn_write_vectors_partly+0x46>
  API_MSG_VAR_REF(msg).conn = conn;
 8006104:	9500      	str	r5, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006106:	9102      	str	r1, [sp, #8]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8006108:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800610c:	2200      	movs	r2, #0
 800610e:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006110:	f88d 301c 	strb.w	r3, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8006114:	9405      	str	r4, [sp, #20]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8006116:	9206      	str	r2, [sp, #24]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8006118:	4669      	mov	r1, sp
 800611a:	4810      	ldr	r0, [pc, #64]	; (800615c <netconn_write_vectors_partly+0x120>)
 800611c:	f7ff fe7a 	bl	8005e14 <netconn_apimsg>
  if (err == ERR_OK) {
 8006120:	2800      	cmp	r0, #0
 8006122:	d1ae      	bne.n	8006082 <netconn_write_vectors_partly+0x46>
    if (bytes_written != NULL) {
 8006124:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006126:	2b00      	cmp	r3, #0
 8006128:	d0e6      	beq.n	80060f8 <netconn_write_vectors_partly+0xbc>
 800612a:	e7e2      	b.n	80060f2 <netconn_write_vectors_partly+0xb6>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800612c:	4b07      	ldr	r3, [pc, #28]	; (800614c <netconn_write_vectors_partly+0x110>)
 800612e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006132:	490b      	ldr	r1, [pc, #44]	; (8006160 <netconn_write_vectors_partly+0x124>)
 8006134:	4807      	ldr	r0, [pc, #28]	; (8006154 <netconn_write_vectors_partly+0x118>)
 8006136:	f008 fedd 	bl	800eef4 <iprintf>
  return err;
 800613a:	2000      	movs	r0, #0
 800613c:	e7a1      	b.n	8006082 <netconn_write_vectors_partly+0x46>
    return ERR_OK;
 800613e:	2000      	movs	r0, #0
 8006140:	e79f      	b.n	8006082 <netconn_write_vectors_partly+0x46>
      return ERR_VAL;
 8006142:	f06f 0005 	mvn.w	r0, #5
 8006146:	e79c      	b.n	8006082 <netconn_write_vectors_partly+0x46>
  return err;
 8006148:	2000      	movs	r0, #0
 800614a:	e79a      	b.n	8006082 <netconn_write_vectors_partly+0x46>
 800614c:	080101ec 	.word	0x080101ec
 8006150:	08010318 	.word	0x08010318
 8006154:	08010198 	.word	0x08010198
 8006158:	08010334 	.word	0x08010334
 800615c:	08007419 	.word	0x08007419
 8006160:	08010358 	.word	0x08010358

08006164 <netconn_write_partly>:
{
 8006164:	b500      	push	{lr}
 8006166:	b085      	sub	sp, #20
  vector.ptr = dataptr;
 8006168:	9102      	str	r1, [sp, #8]
  vector.len = size;
 800616a:	9203      	str	r2, [sp, #12]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800616c:	9a06      	ldr	r2, [sp, #24]
 800616e:	9200      	str	r2, [sp, #0]
 8006170:	2201      	movs	r2, #1
 8006172:	a902      	add	r1, sp, #8
 8006174:	f7ff ff62 	bl	800603c <netconn_write_vectors_partly>
}
 8006178:	b005      	add	sp, #20
 800617a:	f85d fb04 	ldr.w	pc, [sp], #4

0800617e <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800617e:	b508      	push	{r3, lr}
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8006180:	2103      	movs	r1, #3
 8006182:	f7ff fe75 	bl	8005e70 <netconn_close_shutdown>
}
 8006186:	bd08      	pop	{r3, pc}

08006188 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8006188:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800618a:	b150      	cbz	r0, 80061a2 <netconn_err+0x1a>
 800618c:	4604      	mov	r4, r0
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 800618e:	f008 fcab 	bl	800eae8 <sys_arch_protect>
  err = conn->pending_err;
 8006192:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 800619a:	f008 fcb1 	bl	800eb00 <sys_arch_unprotect>
  return err;
}
 800619e:	4628      	mov	r0, r5
 80061a0:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80061a2:	2500      	movs	r5, #0
 80061a4:	e7fb      	b.n	800619e <netconn_err+0x16>
	...

080061a8 <netconn_accept>:
{
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b083      	sub	sp, #12
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80061ac:	b169      	cbz	r1, 80061ca <netconn_accept+0x22>
 80061ae:	4604      	mov	r4, r0
 80061b0:	460e      	mov	r6, r1
  *new_conn = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80061b6:	b190      	cbz	r0, 80061de <netconn_accept+0x36>
  err = netconn_err(conn);
 80061b8:	f7ff ffe6 	bl	8006188 <netconn_err>
 80061bc:	4605      	mov	r5, r0
 80061be:	f88d 0007 	strb.w	r0, [sp, #7]
  if (err != ERR_OK) {
 80061c2:	b1b0      	cbz	r0, 80061f2 <netconn_accept+0x4a>
}
 80061c4:	4628      	mov	r0, r5
 80061c6:	b003      	add	sp, #12
 80061c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 80061ca:	4b26      	ldr	r3, [pc, #152]	; (8006264 <netconn_accept+0xbc>)
 80061cc:	f240 12e1 	movw	r2, #481	; 0x1e1
 80061d0:	4925      	ldr	r1, [pc, #148]	; (8006268 <netconn_accept+0xc0>)
 80061d2:	4826      	ldr	r0, [pc, #152]	; (800626c <netconn_accept+0xc4>)
 80061d4:	f008 fe8e 	bl	800eef4 <iprintf>
 80061d8:	f06f 050f 	mvn.w	r5, #15
 80061dc:	e7f2      	b.n	80061c4 <netconn_accept+0x1c>
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80061de:	4b21      	ldr	r3, [pc, #132]	; (8006264 <netconn_accept+0xbc>)
 80061e0:	f240 12e3 	movw	r2, #483	; 0x1e3
 80061e4:	4922      	ldr	r1, [pc, #136]	; (8006270 <netconn_accept+0xc8>)
 80061e6:	4821      	ldr	r0, [pc, #132]	; (800626c <netconn_accept+0xc4>)
 80061e8:	f008 fe84 	bl	800eef4 <iprintf>
 80061ec:	f06f 050f 	mvn.w	r5, #15
 80061f0:	e7e8      	b.n	80061c4 <netconn_accept+0x1c>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80061f2:	f104 0714 	add.w	r7, r4, #20
 80061f6:	4638      	mov	r0, r7
 80061f8:	f008 fbf0 	bl	800e9dc <sys_mbox_valid>
 80061fc:	b340      	cbz	r0, 8006250 <netconn_accept+0xa8>
 80061fe:	7f23      	ldrb	r3, [r4, #28]
 8006200:	f013 0f01 	tst.w	r3, #1
 8006204:	d127      	bne.n	8006256 <netconn_accept+0xae>
  if (netconn_is_nonblocking(conn)) {
 8006206:	f013 0f02 	tst.w	r3, #2
 800620a:	d009      	beq.n	8006220 <netconn_accept+0x78>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800620c:	4669      	mov	r1, sp
 800620e:	4638      	mov	r0, r7
 8006210:	f008 fbd9 	bl	800e9c6 <sys_arch_mbox_tryfetch>
 8006214:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006218:	d107      	bne.n	800622a <netconn_accept+0x82>
      return ERR_WOULDBLOCK;
 800621a:	f06f 0506 	mvn.w	r5, #6
 800621e:	e7d1      	b.n	80061c4 <netconn_accept+0x1c>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8006220:	2200      	movs	r2, #0
 8006222:	4669      	mov	r1, sp
 8006224:	4638      	mov	r0, r7
 8006226:	f008 fbad 	bl	800e984 <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800622a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622c:	b11b      	cbz	r3, 8006236 <netconn_accept+0x8e>
 800622e:	2200      	movs	r2, #0
 8006230:	2101      	movs	r1, #1
 8006232:	4620      	mov	r0, r4
 8006234:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8006236:	f10d 0107 	add.w	r1, sp, #7
 800623a:	9800      	ldr	r0, [sp, #0]
 800623c:	f000 fdf0 	bl	8006e20 <lwip_netconn_is_err_msg>
 8006240:	b918      	cbnz	r0, 800624a <netconn_accept+0xa2>
  if (accept_ptr == NULL) {
 8006242:	9b00      	ldr	r3, [sp, #0]
 8006244:	b153      	cbz	r3, 800625c <netconn_accept+0xb4>
  *new_conn = newconn;
 8006246:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8006248:	e7bc      	b.n	80061c4 <netconn_accept+0x1c>
    return err;
 800624a:	f99d 5007 	ldrsb.w	r5, [sp, #7]
 800624e:	e7b9      	b.n	80061c4 <netconn_accept+0x1c>
    return ERR_CLSD;
 8006250:	f06f 050e 	mvn.w	r5, #14
 8006254:	e7b6      	b.n	80061c4 <netconn_accept+0x1c>
 8006256:	f06f 050e 	mvn.w	r5, #14
 800625a:	e7b3      	b.n	80061c4 <netconn_accept+0x1c>
    return ERR_CLSD;
 800625c:	f06f 050e 	mvn.w	r5, #14
 8006260:	e7b0      	b.n	80061c4 <netconn_accept+0x1c>
 8006262:	bf00      	nop
 8006264:	080101ec 	.word	0x080101ec
 8006268:	0801037c 	.word	0x0801037c
 800626c:	08010198 	.word	0x08010198
 8006270:	0801039c 	.word	0x0801039c

08006274 <netconn_recv_data>:
{
 8006274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006276:	b083      	sub	sp, #12
  void *buf = NULL;
 8006278:	2300      	movs	r3, #0
 800627a:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800627c:	2900      	cmp	r1, #0
 800627e:	d034      	beq.n	80062ea <netconn_recv_data+0x76>
 8006280:	4604      	mov	r4, r0
 8006282:	4617      	mov	r7, r2
 8006284:	460e      	mov	r6, r1
  *new_buf = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800628a:	2800      	cmp	r0, #0
 800628c:	d037      	beq.n	80062fe <netconn_recv_data+0x8a>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800628e:	f100 0510 	add.w	r5, r0, #16
 8006292:	4628      	mov	r0, r5
 8006294:	f008 fba2 	bl	800e9dc <sys_mbox_valid>
 8006298:	2800      	cmp	r0, #0
 800629a:	d03a      	beq.n	8006312 <netconn_recv_data+0x9e>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800629c:	7f23      	ldrb	r3, [r4, #28]
 800629e:	f003 0303 	and.w	r3, r3, #3
 80062a2:	f007 0204 	and.w	r2, r7, #4
 80062a6:	4313      	orrs	r3, r2
 80062a8:	d103      	bne.n	80062b2 <netconn_recv_data+0x3e>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80062aa:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d045      	beq.n	800633e <netconn_recv_data+0xca>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80062b2:	a901      	add	r1, sp, #4
 80062b4:	4628      	mov	r0, r5
 80062b6:	f008 fb86 	bl	800e9c6 <sys_arch_mbox_tryfetch>
 80062ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062be:	d030      	beq.n	8006322 <netconn_recv_data+0xae>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80062c0:	7823      	ldrb	r3, [r4, #0]
 80062c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062c6:	2b10      	cmp	r3, #16
 80062c8:	d03f      	beq.n	800634a <netconn_recv_data+0xd6>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80062ca:	9b01      	ldr	r3, [sp, #4]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d04c      	beq.n	800636a <netconn_recv_data+0xf6>
    len = netbuf_len((struct netbuf *)buf);
 80062d0:	9b01      	ldr	r3, [sp, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80062d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d8:	b113      	cbz	r3, 80062e0 <netconn_recv_data+0x6c>
 80062da:	2101      	movs	r1, #1
 80062dc:	4620      	mov	r0, r4
 80062de:	4798      	blx	r3
  *new_buf = buf;
 80062e0:	9b01      	ldr	r3, [sp, #4]
 80062e2:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 80062e4:	2000      	movs	r0, #0
}
 80062e6:	b003      	add	sp, #12
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <netconn_recv_data+0x108>)
 80062ec:	f44f 7212 	mov.w	r2, #584	; 0x248
 80062f0:	4923      	ldr	r1, [pc, #140]	; (8006380 <netconn_recv_data+0x10c>)
 80062f2:	4824      	ldr	r0, [pc, #144]	; (8006384 <netconn_recv_data+0x110>)
 80062f4:	f008 fdfe 	bl	800eef4 <iprintf>
 80062f8:	f06f 000f 	mvn.w	r0, #15
 80062fc:	e7f3      	b.n	80062e6 <netconn_recv_data+0x72>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80062fe:	4b1f      	ldr	r3, [pc, #124]	; (800637c <netconn_recv_data+0x108>)
 8006300:	f240 224a 	movw	r2, #586	; 0x24a
 8006304:	4920      	ldr	r1, [pc, #128]	; (8006388 <netconn_recv_data+0x114>)
 8006306:	481f      	ldr	r0, [pc, #124]	; (8006384 <netconn_recv_data+0x110>)
 8006308:	f008 fdf4 	bl	800eef4 <iprintf>
 800630c:	f06f 000f 	mvn.w	r0, #15
 8006310:	e7e9      	b.n	80062e6 <netconn_recv_data+0x72>
    err_t err = netconn_err(conn);
 8006312:	4620      	mov	r0, r4
 8006314:	f7ff ff38 	bl	8006188 <netconn_err>
    return ERR_CONN;
 8006318:	2800      	cmp	r0, #0
 800631a:	bf08      	it	eq
 800631c:	f06f 000a 	mvneq.w	r0, #10
 8006320:	e7e1      	b.n	80062e6 <netconn_recv_data+0x72>
      err = netconn_err(conn);
 8006322:	4620      	mov	r0, r4
 8006324:	f7ff ff30 	bl	8006188 <netconn_err>
      if (err != ERR_OK) {
 8006328:	2800      	cmp	r0, #0
 800632a:	d1dc      	bne.n	80062e6 <netconn_recv_data+0x72>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800632c:	7f23      	ldrb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 800632e:	f013 0f01 	tst.w	r3, #1
 8006332:	bf14      	ite	ne
 8006334:	f06f 000a 	mvnne.w	r0, #10
 8006338:	f06f 0006 	mvneq.w	r0, #6
 800633c:	e7d3      	b.n	80062e6 <netconn_recv_data+0x72>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800633e:	2200      	movs	r2, #0
 8006340:	a901      	add	r1, sp, #4
 8006342:	4628      	mov	r0, r5
 8006344:	f008 fb1e 	bl	800e984 <sys_arch_mbox_fetch>
 8006348:	e7ba      	b.n	80062c0 <netconn_recv_data+0x4c>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800634a:	f10d 0103 	add.w	r1, sp, #3
 800634e:	9801      	ldr	r0, [sp, #4]
 8006350:	f000 fd66 	bl	8006e20 <lwip_netconn_is_err_msg>
 8006354:	b130      	cbz	r0, 8006364 <netconn_recv_data+0xf0>
      if (err == ERR_CLSD) {
 8006356:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800635a:	f110 0f0f 	cmn.w	r0, #15
 800635e:	bf08      	it	eq
 8006360:	2000      	moveq	r0, #0
 8006362:	e7c0      	b.n	80062e6 <netconn_recv_data+0x72>
    len = ((struct pbuf *)buf)->tot_len;
 8006364:	9b01      	ldr	r3, [sp, #4]
 8006366:	891a      	ldrh	r2, [r3, #8]
 8006368:	e7b5      	b.n	80062d6 <netconn_recv_data+0x62>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800636a:	4b04      	ldr	r3, [pc, #16]	; (800637c <netconn_recv_data+0x108>)
 800636c:	f240 2291 	movw	r2, #657	; 0x291
 8006370:	4906      	ldr	r1, [pc, #24]	; (800638c <netconn_recv_data+0x118>)
 8006372:	4804      	ldr	r0, [pc, #16]	; (8006384 <netconn_recv_data+0x110>)
 8006374:	f008 fdbe 	bl	800eef4 <iprintf>
 8006378:	e7aa      	b.n	80062d0 <netconn_recv_data+0x5c>
 800637a:	bf00      	nop
 800637c:	080101ec 	.word	0x080101ec
 8006380:	080103bc 	.word	0x080103bc
 8006384:	08010198 	.word	0x08010198
 8006388:	080103dc 	.word	0x080103dc
 800638c:	080103f8 	.word	0x080103f8

08006390 <netconn_recv_data_tcp>:
{
 8006390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006392:	b089      	sub	sp, #36	; 0x24
 8006394:	4604      	mov	r4, r0
 8006396:	460f      	mov	r7, r1
 8006398:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800639a:	3010      	adds	r0, #16
 800639c:	f008 fb1e 	bl	800e9dc <sys_mbox_valid>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d03e      	beq.n	8006422 <netconn_recv_data_tcp+0x92>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80063a4:	7f23      	ldrb	r3, [r4, #28]
 80063a6:	f994 201c 	ldrsb.w	r2, [r4, #28]
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	db1b      	blt.n	80063e6 <netconn_recv_data_tcp+0x56>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80063ae:	4632      	mov	r2, r6
 80063b0:	4639      	mov	r1, r7
 80063b2:	4620      	mov	r0, r4
 80063b4:	f7ff ff5e 	bl	8006274 <netconn_recv_data>
  if (err != ERR_OK) {
 80063b8:	4605      	mov	r5, r0
 80063ba:	bb30      	cbnz	r0, 800640a <netconn_recv_data_tcp+0x7a>
  buf = *new_buf;
 80063bc:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80063be:	f016 0f08 	tst.w	r6, #8
 80063c2:	d105      	bne.n	80063d0 <netconn_recv_data_tcp+0x40>
    u16_t len = buf ? buf->tot_len : 1;
 80063c4:	b327      	cbz	r7, 8006410 <netconn_recv_data_tcp+0x80>
 80063c6:	8939      	ldrh	r1, [r7, #8]
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80063c8:	466a      	mov	r2, sp
 80063ca:	4620      	mov	r0, r4
 80063cc:	f7ff fd2e 	bl	8005e2c <netconn_tcp_recvd_msg>
  if (buf == NULL) {
 80063d0:	b9df      	cbnz	r7, 800640a <netconn_recv_data_tcp+0x7a>
    if (apiflags & NETCONN_NOFIN) {
 80063d2:	f016 0f10 	tst.w	r6, #16
 80063d6:	d009      	beq.n	80063ec <netconn_recv_data_tcp+0x5c>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80063d8:	7f23      	ldrb	r3, [r4, #28]
 80063da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063de:	7723      	strb	r3, [r4, #28]
      return ERR_WOULDBLOCK;
 80063e0:	f06f 0506 	mvn.w	r5, #6
 80063e4:	e011      	b.n	800640a <netconn_recv_data_tcp+0x7a>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80063e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ea:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80063ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063ee:	b11b      	cbz	r3, 80063f8 <netconn_recv_data_tcp+0x68>
 80063f0:	2200      	movs	r2, #0
 80063f2:	2101      	movs	r1, #1
 80063f4:	4620      	mov	r0, r4
 80063f6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80063f8:	6863      	ldr	r3, [r4, #4]
 80063fa:	b95b      	cbnz	r3, 8006414 <netconn_recv_data_tcp+0x84>
        err = netconn_err(conn);
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7ff fec3 	bl	8006188 <netconn_err>
        return ERR_RST;
 8006402:	1e05      	subs	r5, r0, #0
 8006404:	bf08      	it	eq
 8006406:	f06f 050d 	mvneq.w	r5, #13
}
 800640a:	4628      	mov	r0, r5
 800640c:	b009      	add	sp, #36	; 0x24
 800640e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8006410:	2101      	movs	r1, #1
 8006412:	e7d9      	b.n	80063c8 <netconn_recv_data_tcp+0x38>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8006414:	2101      	movs	r1, #1
 8006416:	4620      	mov	r0, r4
 8006418:	f7ff fd2a 	bl	8005e70 <netconn_close_shutdown>
      return ERR_CLSD;
 800641c:	f06f 050e 	mvn.w	r5, #14
 8006420:	e7f3      	b.n	800640a <netconn_recv_data_tcp+0x7a>
    return ERR_CONN;
 8006422:	f06f 050a 	mvn.w	r5, #10
 8006426:	e7f0      	b.n	800640a <netconn_recv_data_tcp+0x7a>

08006428 <netconn_recv>:
{
 8006428:	b570      	push	{r4, r5, r6, lr}
 800642a:	b082      	sub	sp, #8
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800642c:	b311      	cbz	r1, 8006474 <netconn_recv+0x4c>
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
  *new_buf = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006436:	b338      	cbz	r0, 8006488 <netconn_recv+0x60>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006438:	7803      	ldrb	r3, [r0, #0]
 800643a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643e:	2b10      	cmp	r3, #16
 8006440:	d13c      	bne.n	80064bc <netconn_recv+0x94>
    struct pbuf *p = NULL;
 8006442:	2300      	movs	r3, #0
 8006444:	9301      	str	r3, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006446:	2006      	movs	r0, #6
 8006448:	f001 fd6c 	bl	8007f24 <memp_malloc>
    if (buf == NULL) {
 800644c:	4606      	mov	r6, r0
 800644e:	2800      	cmp	r0, #0
 8006450:	d031      	beq.n	80064b6 <netconn_recv+0x8e>
    err = netconn_recv_data_tcp(conn, &p, 0);
 8006452:	2200      	movs	r2, #0
 8006454:	a901      	add	r1, sp, #4
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff ff9a 	bl	8006390 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 800645c:	4604      	mov	r4, r0
 800645e:	b9e8      	cbnz	r0, 800649c <netconn_recv+0x74>
    LWIP_ASSERT("p != NULL", p != NULL);
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	b303      	cbz	r3, 80064a6 <netconn_recv+0x7e>
    buf->p = p;
 8006464:	9b01      	ldr	r3, [sp, #4]
 8006466:	6033      	str	r3, [r6, #0]
    buf->ptr = p;
 8006468:	6073      	str	r3, [r6, #4]
    buf->port = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	81b3      	strh	r3, [r6, #12]
    ip_addr_set_zero(&buf->addr);
 800646e:	60b3      	str	r3, [r6, #8]
    *new_buf = buf;
 8006470:	602e      	str	r6, [r5, #0]
    return ERR_OK;
 8006472:	e027      	b.n	80064c4 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006474:	4b15      	ldr	r3, [pc, #84]	; (80064cc <netconn_recv+0xa4>)
 8006476:	f240 3263 	movw	r2, #867	; 0x363
 800647a:	4915      	ldr	r1, [pc, #84]	; (80064d0 <netconn_recv+0xa8>)
 800647c:	4815      	ldr	r0, [pc, #84]	; (80064d4 <netconn_recv+0xac>)
 800647e:	f008 fd39 	bl	800eef4 <iprintf>
 8006482:	f06f 040f 	mvn.w	r4, #15
 8006486:	e01d      	b.n	80064c4 <netconn_recv+0x9c>
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <netconn_recv+0xa4>)
 800648a:	f240 3265 	movw	r2, #869	; 0x365
 800648e:	4912      	ldr	r1, [pc, #72]	; (80064d8 <netconn_recv+0xb0>)
 8006490:	4810      	ldr	r0, [pc, #64]	; (80064d4 <netconn_recv+0xac>)
 8006492:	f008 fd2f 	bl	800eef4 <iprintf>
 8006496:	f06f 040f 	mvn.w	r4, #15
 800649a:	e013      	b.n	80064c4 <netconn_recv+0x9c>
      memp_free(MEMP_NETBUF, buf);
 800649c:	4631      	mov	r1, r6
 800649e:	2006      	movs	r0, #6
 80064a0:	f001 fd70 	bl	8007f84 <memp_free>
      return err;
 80064a4:	e00e      	b.n	80064c4 <netconn_recv+0x9c>
    LWIP_ASSERT("p != NULL", p != NULL);
 80064a6:	4b09      	ldr	r3, [pc, #36]	; (80064cc <netconn_recv+0xa4>)
 80064a8:	f240 3279 	movw	r2, #889	; 0x379
 80064ac:	490b      	ldr	r1, [pc, #44]	; (80064dc <netconn_recv+0xb4>)
 80064ae:	4809      	ldr	r0, [pc, #36]	; (80064d4 <netconn_recv+0xac>)
 80064b0:	f008 fd20 	bl	800eef4 <iprintf>
 80064b4:	e7d6      	b.n	8006464 <netconn_recv+0x3c>
      return ERR_MEM;
 80064b6:	f04f 34ff 	mov.w	r4, #4294967295
 80064ba:	e003      	b.n	80064c4 <netconn_recv+0x9c>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80064bc:	2200      	movs	r2, #0
 80064be:	f7ff fed9 	bl	8006274 <netconn_recv_data>
 80064c2:	4604      	mov	r4, r0
}
 80064c4:	4620      	mov	r0, r4
 80064c6:	b002      	add	sp, #8
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	bf00      	nop
 80064cc:	080101ec 	.word	0x080101ec
 80064d0:	080103bc 	.word	0x080103bc
 80064d4:	08010198 	.word	0x08010198
 80064d8:	080103dc 	.word	0x080103dc
 80064dc:	0801053c 	.word	0x0801053c

080064e0 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80064e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e4:	4604      	mov	r4, r0
 80064e6:	4615      	mov	r5, r2
 80064e8:	4698      	mov	r8, r3
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80064ea:	460e      	mov	r6, r1
 80064ec:	b369      	cbz	r1, 800654a <recv_udp+0x6a>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	d032      	beq.n	8006558 <recv_udp+0x78>
  if (conn == NULL) {
    pbuf_free(p);
    return;
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80064f2:	6863      	ldr	r3, [r4, #4]
 80064f4:	42b3      	cmp	r3, r6
 80064f6:	d005      	beq.n	8006504 <recv_udp+0x24>
 80064f8:	4b24      	ldr	r3, [pc, #144]	; (800658c <recv_udp+0xac>)
 80064fa:	22ee      	movs	r2, #238	; 0xee
 80064fc:	4924      	ldr	r1, [pc, #144]	; (8006590 <recv_udp+0xb0>)
 80064fe:	4825      	ldr	r0, [pc, #148]	; (8006594 <recv_udp+0xb4>)
 8006500:	f008 fcf8 	bl	800eef4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006504:	f104 0710 	add.w	r7, r4, #16
 8006508:	4638      	mov	r0, r7
 800650a:	f008 fa67 	bl	800e9dc <sys_mbox_valid>
 800650e:	b368      	cbz	r0, 800656c <recv_udp+0x8c>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
    return;
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006510:	2006      	movs	r0, #6
 8006512:	f001 fd07 	bl	8007f24 <memp_malloc>
  if (buf == NULL) {
 8006516:	4606      	mov	r6, r0
 8006518:	b368      	cbz	r0, 8006576 <recv_udp+0x96>
    pbuf_free(p);
    return;
  } else {
    buf->p = p;
 800651a:	6005      	str	r5, [r0, #0]
    buf->ptr = p;
 800651c:	6045      	str	r5, [r0, #4]
    ip_addr_set(&buf->addr, addr);
 800651e:	f1b8 0f00 	cmp.w	r8, #0
 8006522:	d02c      	beq.n	800657e <recv_udp+0x9e>
 8006524:	f8d8 3000 	ldr.w	r3, [r8]
 8006528:	60b3      	str	r3, [r6, #8]
    buf->port = port;
 800652a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800652e:	81b3      	strh	r3, [r6, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006530:	892d      	ldrh	r5, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006532:	4631      	mov	r1, r6
 8006534:	4638      	mov	r0, r7
 8006536:	f008 fa15 	bl	800e964 <sys_mbox_trypost>
 800653a:	bb10      	cbnz	r0, 8006582 <recv_udp+0xa2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800653c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800653e:	b1c3      	cbz	r3, 8006572 <recv_udp+0x92>
 8006540:	462a      	mov	r2, r5
 8006542:	2100      	movs	r1, #0
 8006544:	4620      	mov	r0, r4
 8006546:	4798      	blx	r3
 8006548:	e013      	b.n	8006572 <recv_udp+0x92>
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800654a:	4b10      	ldr	r3, [pc, #64]	; (800658c <recv_udp+0xac>)
 800654c:	22e5      	movs	r2, #229	; 0xe5
 800654e:	4912      	ldr	r1, [pc, #72]	; (8006598 <recv_udp+0xb8>)
 8006550:	4810      	ldr	r0, [pc, #64]	; (8006594 <recv_udp+0xb4>)
 8006552:	f008 fccf 	bl	800eef4 <iprintf>
 8006556:	e7ca      	b.n	80064ee <recv_udp+0xe>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8006558:	4b0c      	ldr	r3, [pc, #48]	; (800658c <recv_udp+0xac>)
 800655a:	22e6      	movs	r2, #230	; 0xe6
 800655c:	490f      	ldr	r1, [pc, #60]	; (800659c <recv_udp+0xbc>)
 800655e:	480d      	ldr	r0, [pc, #52]	; (8006594 <recv_udp+0xb4>)
 8006560:	f008 fcc8 	bl	800eef4 <iprintf>
    pbuf_free(p);
 8006564:	4628      	mov	r0, r5
 8006566:	f001 ffcf 	bl	8008508 <pbuf_free>
    return;
 800656a:	e002      	b.n	8006572 <recv_udp+0x92>
    pbuf_free(p);
 800656c:	4628      	mov	r0, r5
 800656e:	f001 ffcb 	bl	8008508 <pbuf_free>
  }
}
 8006572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_free(p);
 8006576:	4628      	mov	r0, r5
 8006578:	f001 ffc6 	bl	8008508 <pbuf_free>
    return;
 800657c:	e7f9      	b.n	8006572 <recv_udp+0x92>
    ip_addr_set(&buf->addr, addr);
 800657e:	2300      	movs	r3, #0
 8006580:	e7d2      	b.n	8006528 <recv_udp+0x48>
    netbuf_delete(buf);
 8006582:	4630      	mov	r0, r6
 8006584:	f001 f81a 	bl	80075bc <netbuf_delete>
    return;
 8006588:	e7f3      	b.n	8006572 <recv_udp+0x92>
 800658a:	bf00      	nop
 800658c:	08010404 	.word	0x08010404
 8006590:	0801047c 	.word	0x0801047c
 8006594:	08010198 	.word	0x08010198
 8006598:	08010438 	.word	0x08010438
 800659c:	0801045c 	.word	0x0801045c

080065a0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80065a0:	b510      	push	{r4, lr}
 80065a2:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80065a4:	6844      	ldr	r4, [r0, #4]
  tcp_arg(pcb, conn);
 80065a6:	4620      	mov	r0, r4
 80065a8:	f002 fca4 	bl	8008ef4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80065ac:	4908      	ldr	r1, [pc, #32]	; (80065d0 <setup_tcp+0x30>)
 80065ae:	4620      	mov	r0, r4
 80065b0:	f002 fca4 	bl	8008efc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80065b4:	4907      	ldr	r1, [pc, #28]	; (80065d4 <setup_tcp+0x34>)
 80065b6:	4620      	mov	r0, r4
 80065b8:	f002 fcba 	bl	8008f30 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80065bc:	2202      	movs	r2, #2
 80065be:	4906      	ldr	r1, [pc, #24]	; (80065d8 <setup_tcp+0x38>)
 80065c0:	4620      	mov	r0, r4
 80065c2:	f002 fcef 	bl	8008fa4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80065c6:	4905      	ldr	r1, [pc, #20]	; (80065dc <setup_tcp+0x3c>)
 80065c8:	4620      	mov	r0, r4
 80065ca:	f002 fccb 	bl	8008f64 <tcp_err>
}
 80065ce:	bd10      	pop	{r4, pc}
 80065d0:	08006d3d 	.word	0x08006d3d
 80065d4:	08006ccd 	.word	0x08006ccd
 80065d8:	08006c4d 	.word	0x08006c4d
 80065dc:	080065e1 	.word	0x080065e1

080065e0 <err_tcp>:
{
 80065e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e4:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80065e6:	4604      	mov	r4, r0
 80065e8:	b358      	cbz	r0, 8006642 <err_tcp+0x62>
  SYS_ARCH_PROTECT(lev);
 80065ea:	f008 fa7d 	bl	800eae8 <sys_arch_protect>
  conn->pcb.tcp = NULL;
 80065ee:	2200      	movs	r2, #0
 80065f0:	6062      	str	r2, [r4, #4]
  conn->pending_err = err;
 80065f2:	7225      	strb	r5, [r4, #8]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80065f4:	7f23      	ldrb	r3, [r4, #28]
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	7723      	strb	r3, [r4, #28]
  old_state = conn->state;
 80065fc:	7866      	ldrb	r6, [r4, #1]
  conn->state = NETCONN_NONE;
 80065fe:	7062      	strb	r2, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8006600:	f008 fa7e 	bl	800eb00 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006606:	b17b      	cbz	r3, 8006628 <err_tcp+0x48>
 8006608:	2200      	movs	r2, #0
 800660a:	2104      	movs	r1, #4
 800660c:	4620      	mov	r0, r4
 800660e:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006612:	b14b      	cbz	r3, 8006628 <err_tcp+0x48>
 8006614:	2200      	movs	r2, #0
 8006616:	4611      	mov	r1, r2
 8006618:	4620      	mov	r0, r4
 800661a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800661c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800661e:	b11b      	cbz	r3, 8006628 <err_tcp+0x48>
 8006620:	2200      	movs	r2, #0
 8006622:	2102      	movs	r1, #2
 8006624:	4620      	mov	r0, r4
 8006626:	4798      	blx	r3
  switch (err) {
 8006628:	f115 0f0e 	cmn.w	r5, #14
 800662c:	d01a      	beq.n	8006664 <err_tcp+0x84>
 800662e:	f115 0f0d 	cmn.w	r5, #13
 8006632:	d01a      	beq.n	800666a <err_tcp+0x8a>
 8006634:	f115 0f0f 	cmn.w	r5, #15
 8006638:	d035      	beq.n	80066a6 <err_tcp+0xc6>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800663a:	b955      	cbnz	r5, 8006652 <err_tcp+0x72>
      return NULL;
 800663c:	f04f 0800 	mov.w	r8, #0
 8006640:	e015      	b.n	800666e <err_tcp+0x8e>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006642:	4b36      	ldr	r3, [pc, #216]	; (800671c <err_tcp+0x13c>)
 8006644:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006648:	4935      	ldr	r1, [pc, #212]	; (8006720 <err_tcp+0x140>)
 800664a:	4836      	ldr	r0, [pc, #216]	; (8006724 <err_tcp+0x144>)
 800664c:	f008 fc52 	bl	800eef4 <iprintf>
 8006650:	e7cb      	b.n	80065ea <err_tcp+0xa>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8006652:	4b32      	ldr	r3, [pc, #200]	; (800671c <err_tcp+0x13c>)
 8006654:	227d      	movs	r2, #125	; 0x7d
 8006656:	4934      	ldr	r1, [pc, #208]	; (8006728 <err_tcp+0x148>)
 8006658:	4832      	ldr	r0, [pc, #200]	; (8006724 <err_tcp+0x144>)
 800665a:	f008 fc4b 	bl	800eef4 <iprintf>
      return NULL;
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	e004      	b.n	800666e <err_tcp+0x8e>
  switch (err) {
 8006664:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006738 <err_tcp+0x158>
 8006668:	e001      	b.n	800666e <err_tcp+0x8e>
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800666a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800673c <err_tcp+0x15c>
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800666e:	f104 0710 	add.w	r7, r4, #16
 8006672:	4638      	mov	r0, r7
 8006674:	f008 f9b2 	bl	800e9dc <sys_mbox_valid>
 8006678:	b9c0      	cbnz	r0, 80066ac <err_tcp+0xcc>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800667a:	f104 0714 	add.w	r7, r4, #20
 800667e:	4638      	mov	r0, r7
 8006680:	f008 f9ac 	bl	800e9dc <sys_mbox_valid>
 8006684:	b9b8      	cbnz	r0, 80066b6 <err_tcp+0xd6>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8006686:	2e01      	cmp	r6, #1
 8006688:	d01a      	beq.n	80066c0 <err_tcp+0xe0>
 800668a:	1ef3      	subs	r3, r6, #3
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b01      	cmp	r3, #1
 8006690:	d916      	bls.n	80066c0 <err_tcp+0xe0>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006692:	6a23      	ldr	r3, [r4, #32]
 8006694:	b37b      	cbz	r3, 80066f6 <err_tcp+0x116>
 8006696:	4b21      	ldr	r3, [pc, #132]	; (800671c <err_tcp+0x13c>)
 8006698:	f240 12f7 	movw	r2, #503	; 0x1f7
 800669c:	4923      	ldr	r1, [pc, #140]	; (800672c <err_tcp+0x14c>)
 800669e:	4821      	ldr	r0, [pc, #132]	; (8006724 <err_tcp+0x144>)
 80066a0:	f008 fc28 	bl	800eef4 <iprintf>
}
 80066a4:	e027      	b.n	80066f6 <err_tcp+0x116>
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80066a6:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8006740 <err_tcp+0x160>
 80066aa:	e7e0      	b.n	800666e <err_tcp+0x8e>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80066ac:	4641      	mov	r1, r8
 80066ae:	4638      	mov	r0, r7
 80066b0:	f008 f958 	bl	800e964 <sys_mbox_trypost>
 80066b4:	e7e1      	b.n	800667a <err_tcp+0x9a>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80066b6:	4641      	mov	r1, r8
 80066b8:	4638      	mov	r0, r7
 80066ba:	f008 f953 	bl	800e964 <sys_mbox_trypost>
 80066be:	e7e2      	b.n	8006686 <err_tcp+0xa6>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80066c0:	7f23      	ldrb	r3, [r4, #28]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80066c2:	f023 0204 	bic.w	r2, r3, #4
 80066c6:	7722      	strb	r2, [r4, #28]
    if (!was_nonblocking_connect) {
 80066c8:	f013 0f04 	tst.w	r3, #4
 80066cc:	d113      	bne.n	80066f6 <err_tcp+0x116>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80066ce:	6a23      	ldr	r3, [r4, #32]
 80066d0:	b19b      	cbz	r3, 80066fa <err_tcp+0x11a>
      if (old_state == NETCONN_CLOSE) {
 80066d2:	2e04      	cmp	r6, #4
        conn->current_msg->err = ERR_OK;
 80066d4:	6a23      	ldr	r3, [r4, #32]
 80066d6:	bf06      	itte	eq
 80066d8:	2200      	moveq	r2, #0
 80066da:	711a      	strbeq	r2, [r3, #4]
        conn->current_msg->err = err;
 80066dc:	711d      	strbne	r5, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80066de:	6a23      	ldr	r3, [r4, #32]
 80066e0:	681d      	ldr	r5, [r3, #0]
 80066e2:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80066e4:	4628      	mov	r0, r5
 80066e6:	f008 f9bf 	bl	800ea68 <sys_sem_valid>
 80066ea:	b170      	cbz	r0, 800670a <err_tcp+0x12a>
      conn->current_msg = NULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	6223      	str	r3, [r4, #32]
      sys_sem_signal(op_completed_sem);
 80066f0:	4628      	mov	r0, r5
 80066f2:	f008 f9af 	bl	800ea54 <sys_sem_signal>
}
 80066f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <err_tcp+0x13c>)
 80066fc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006700:	490b      	ldr	r1, [pc, #44]	; (8006730 <err_tcp+0x150>)
 8006702:	4808      	ldr	r0, [pc, #32]	; (8006724 <err_tcp+0x144>)
 8006704:	f008 fbf6 	bl	800eef4 <iprintf>
 8006708:	e7e3      	b.n	80066d2 <err_tcp+0xf2>
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800670a:	4b04      	ldr	r3, [pc, #16]	; (800671c <err_tcp+0x13c>)
 800670c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006710:	4908      	ldr	r1, [pc, #32]	; (8006734 <err_tcp+0x154>)
 8006712:	4804      	ldr	r0, [pc, #16]	; (8006724 <err_tcp+0x144>)
 8006714:	f008 fbee 	bl	800eef4 <iprintf>
 8006718:	e7e8      	b.n	80066ec <err_tcp+0x10c>
 800671a:	bf00      	nop
 800671c:	08010404 	.word	0x08010404
 8006720:	0801049c 	.word	0x0801049c
 8006724:	08010198 	.word	0x08010198
 8006728:	080104ac 	.word	0x080104ac
 800672c:	080104f4 	.word	0x080104f4
 8006730:	080104bc 	.word	0x080104bc
 8006734:	080104d8 	.word	0x080104d8
 8006738:	08010826 	.word	0x08010826
 800673c:	08010824 	.word	0x08010824
 8006740:	08010825 	.word	0x08010825

08006744 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006748:	b083      	sub	sp, #12
 800674a:	9101      	str	r1, [sp, #4]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800674c:	4605      	mov	r5, r0
 800674e:	b1e8      	cbz	r0, 800678c <lwip_netconn_do_writemore+0x48>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8006750:	786b      	ldrb	r3, [r5, #1]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d122      	bne.n	800679c <lwip_netconn_do_writemore+0x58>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006756:	6a2b      	ldr	r3, [r5, #32]
 8006758:	b343      	cbz	r3, 80067ac <lwip_netconn_do_writemore+0x68>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800675a:	686b      	ldr	r3, [r5, #4]
 800675c:	b373      	cbz	r3, 80067bc <lwip_netconn_do_writemore+0x78>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800675e:	6a2b      	ldr	r3, [r5, #32]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	429a      	cmp	r2, r3
 8006766:	d231      	bcs.n	80067cc <lwip_netconn_do_writemore+0x88>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8006768:	6a2b      	ldr	r3, [r5, #32]
 800676a:	899b      	ldrh	r3, [r3, #12]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d035      	beq.n	80067dc <lwip_netconn_do_writemore+0x98>

  apiflags = conn->current_msg->msg.w.apiflags;
 8006770:	6a2b      	ldr	r3, [r5, #32]
 8006772:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8006776:	f895 a01c 	ldrb.w	sl, [r5, #28]
 800677a:	f00a 0a02 	and.w	sl, sl, #2
 800677e:	f008 0304 	and.w	r3, r8, #4
 8006782:	ea4a 0a03 	orr.w	sl, sl, r3
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8006786:	f8df b248 	ldr.w	fp, [pc, #584]	; 80069d0 <lwip_netconn_do_writemore+0x28c>
 800678a:	e103      	b.n	8006994 <lwip_netconn_do_writemore+0x250>
  LWIP_ASSERT("conn != NULL", conn != NULL);
 800678c:	4b90      	ldr	r3, [pc, #576]	; (80069d0 <lwip_netconn_do_writemore+0x28c>)
 800678e:	f240 6273 	movw	r2, #1651	; 0x673
 8006792:	4990      	ldr	r1, [pc, #576]	; (80069d4 <lwip_netconn_do_writemore+0x290>)
 8006794:	4890      	ldr	r0, [pc, #576]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 8006796:	f008 fbad 	bl	800eef4 <iprintf>
 800679a:	e7d9      	b.n	8006750 <lwip_netconn_do_writemore+0xc>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800679c:	4b8c      	ldr	r3, [pc, #560]	; (80069d0 <lwip_netconn_do_writemore+0x28c>)
 800679e:	f240 6274 	movw	r2, #1652	; 0x674
 80067a2:	498e      	ldr	r1, [pc, #568]	; (80069dc <lwip_netconn_do_writemore+0x298>)
 80067a4:	488c      	ldr	r0, [pc, #560]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 80067a6:	f008 fba5 	bl	800eef4 <iprintf>
 80067aa:	e7d4      	b.n	8006756 <lwip_netconn_do_writemore+0x12>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80067ac:	4b88      	ldr	r3, [pc, #544]	; (80069d0 <lwip_netconn_do_writemore+0x28c>)
 80067ae:	f240 6275 	movw	r2, #1653	; 0x675
 80067b2:	498b      	ldr	r1, [pc, #556]	; (80069e0 <lwip_netconn_do_writemore+0x29c>)
 80067b4:	4888      	ldr	r0, [pc, #544]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 80067b6:	f008 fb9d 	bl	800eef4 <iprintf>
 80067ba:	e7ce      	b.n	800675a <lwip_netconn_do_writemore+0x16>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80067bc:	4b84      	ldr	r3, [pc, #528]	; (80069d0 <lwip_netconn_do_writemore+0x28c>)
 80067be:	f240 6276 	movw	r2, #1654	; 0x676
 80067c2:	4988      	ldr	r1, [pc, #544]	; (80069e4 <lwip_netconn_do_writemore+0x2a0>)
 80067c4:	4884      	ldr	r0, [pc, #528]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 80067c6:	f008 fb95 	bl	800eef4 <iprintf>
 80067ca:	e7c8      	b.n	800675e <lwip_netconn_do_writemore+0x1a>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80067cc:	4b80      	ldr	r3, [pc, #512]	; (80069d0 <lwip_netconn_do_writemore+0x28c>)
 80067ce:	f240 6277 	movw	r2, #1655	; 0x677
 80067d2:	4985      	ldr	r1, [pc, #532]	; (80069e8 <lwip_netconn_do_writemore+0x2a4>)
 80067d4:	4880      	ldr	r0, [pc, #512]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 80067d6:	f008 fb8d 	bl	800eef4 <iprintf>
 80067da:	e7c5      	b.n	8006768 <lwip_netconn_do_writemore+0x24>
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80067dc:	4b7c      	ldr	r3, [pc, #496]	; (80069d0 <lwip_netconn_do_writemore+0x28c>)
 80067de:	f240 6279 	movw	r2, #1657	; 0x679
 80067e2:	4982      	ldr	r1, [pc, #520]	; (80069ec <lwip_netconn_do_writemore+0x2a8>)
 80067e4:	487c      	ldr	r0, [pc, #496]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 80067e6:	f008 fb85 	bl	800eef4 <iprintf>
 80067ea:	e7c1      	b.n	8006770 <lwip_netconn_do_writemore+0x2c>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80067ec:	6993      	ldr	r3, [r2, #24]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bf0c      	ite	eq
 80067f2:	f06f 0406 	mvneq.w	r4, #6
 80067f6:	2400      	movne	r4, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80067f8:	6a2b      	ldr	r3, [r5, #32]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	429a      	cmp	r2, r3
 8006800:	d359      	bcc.n	80068b6 <lwip_netconn_do_writemore+0x172>
 8006802:	e094      	b.n	800692e <lwip_netconn_do_writemore+0x1ea>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8006804:	f048 0802 	orr.w	r8, r8, #2
        len = available;
 8006808:	4604      	mov	r4, r0
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800680a:	46a1      	mov	r9, r4
 800680c:	4423      	add	r3, r4
 800680e:	4299      	cmp	r1, r3
 8006810:	d32b      	bcc.n	800686a <lwip_netconn_do_writemore+0x126>
      if ((len == 0xffff && diff > 0xffffUL) ||
 8006812:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006816:	429c      	cmp	r4, r3
 8006818:	d02f      	beq.n	800687a <lwip_netconn_do_writemore+0x136>
 800681a:	b2b6      	uxth	r6, r6
 800681c:	42a6      	cmp	r6, r4
 800681e:	f040 809e 	bne.w	800695e <lwip_netconn_do_writemore+0x21a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8006822:	6a2b      	ldr	r3, [r5, #32]
 8006824:	899b      	ldrh	r3, [r3, #12]
 8006826:	2b01      	cmp	r3, #1
 8006828:	f240 8099 	bls.w	800695e <lwip_netconn_do_writemore+0x21a>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800682c:	f048 0802 	orr.w	r8, r8, #2
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006830:	4643      	mov	r3, r8
 8006832:	4622      	mov	r2, r4
 8006834:	4639      	mov	r1, r7
 8006836:	6868      	ldr	r0, [r5, #4]
 8006838:	f005 f8c6 	bl	800b9c8 <tcp_write>
      if (err == ERR_OK) {
 800683c:	4604      	mov	r4, r0
 800683e:	b300      	cbz	r0, 8006882 <lwip_netconn_do_writemore+0x13e>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8006840:	1c43      	adds	r3, r0, #1
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b01      	cmp	r3, #1
 8006846:	d965      	bls.n	8006914 <lwip_netconn_do_writemore+0x1d0>
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
        write_finished = 1;
      }
    } else if (err == ERR_MEM) {
 8006848:	f1b4 3fff 	cmp.w	r4, #4294967295
 800684c:	d03e      	beq.n	80068cc <lwip_netconn_do_writemore+0x188>
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800684e:	6a2b      	ldr	r3, [r5, #32]
 8006850:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8006852:	711c      	strb	r4, [r3, #4]
    conn->current_msg = NULL;
 8006854:	2300      	movs	r3, #0
 8006856:	622b      	str	r3, [r5, #32]
    conn->state = NETCONN_NONE;
 8006858:	706b      	strb	r3, [r5, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800685a:	9b01      	ldr	r3, [sp, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d148      	bne.n	80068f2 <lwip_netconn_do_writemore+0x1ae>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8006860:	2400      	movs	r4, #0
}
 8006862:	4620      	mov	r0, r4
 8006864:	b003      	add	sp, #12
 8006866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800686a:	465b      	mov	r3, fp
 800686c:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8006870:	495f      	ldr	r1, [pc, #380]	; (80069f0 <lwip_netconn_do_writemore+0x2ac>)
 8006872:	4859      	ldr	r0, [pc, #356]	; (80069d8 <lwip_netconn_do_writemore+0x294>)
 8006874:	f008 fb3e 	bl	800eef4 <iprintf>
 8006878:	e7cb      	b.n	8006812 <lwip_netconn_do_writemore+0xce>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800687a:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 800687e:	d2d5      	bcs.n	800682c <lwip_netconn_do_writemore+0xe8>
 8006880:	e7cb      	b.n	800681a <lwip_netconn_do_writemore+0xd6>
        write_more = 1;
 8006882:	2101      	movs	r1, #1
 8006884:	e075      	b.n	8006972 <lwip_netconn_do_writemore+0x22e>
          conn->current_msg->msg.w.vector_cnt--;
 8006886:	899a      	ldrh	r2, [r3, #12]
 8006888:	3a01      	subs	r2, #1
 800688a:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800688c:	6a2b      	ldr	r3, [r5, #32]
 800688e:	899a      	ldrh	r2, [r3, #12]
 8006890:	2a00      	cmp	r2, #0
 8006892:	d07d      	beq.n	8006990 <lwip_netconn_do_writemore+0x24c>
            conn->current_msg->msg.w.vector++;
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	3208      	adds	r2, #8
 8006898:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800689a:	6a2b      	ldr	r3, [r5, #32]
 800689c:	2200      	movs	r2, #0
 800689e:	611a      	str	r2, [r3, #16]
 80068a0:	e076      	b.n	8006990 <lwip_netconn_do_writemore+0x24c>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80068a2:	1c63      	adds	r3, r4, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d8ce      	bhi.n	8006848 <lwip_netconn_do_writemore+0x104>
 80068aa:	e033      	b.n	8006914 <lwip_netconn_do_writemore+0x1d0>
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80068ac:	6a2b      	ldr	r3, [r5, #32]
 80068ae:	699a      	ldr	r2, [r3, #24]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d231      	bcs.n	800691a <lwip_netconn_do_writemore+0x1d6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80068b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068b8:	b11b      	cbz	r3, 80068c2 <lwip_netconn_do_writemore+0x17e>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2103      	movs	r1, #3
 80068be:	4628      	mov	r0, r5
 80068c0:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80068c2:	7f2b      	ldrb	r3, [r5, #28]
 80068c4:	f043 0310 	orr.w	r3, r3, #16
 80068c8:	772b      	strb	r3, [r5, #28]
 80068ca:	e036      	b.n	800693a <lwip_netconn_do_writemore+0x1f6>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80068cc:	6868      	ldr	r0, [r5, #4]
 80068ce:	f005 feb1 	bl	800c634 <tcp_output>
      if (out_err == ERR_RTE) {
 80068d2:	f110 0f04 	cmn.w	r0, #4
 80068d6:	d00a      	beq.n	80068ee <lwip_netconn_do_writemore+0x1aa>
      } else if (dontblock) {
 80068d8:	f1ba 0f00 	cmp.w	sl, #0
 80068dc:	d0c1      	beq.n	8006862 <lwip_netconn_do_writemore+0x11e>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80068de:	6a2b      	ldr	r3, [r5, #32]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	bf0c      	ite	eq
 80068e6:	f06f 0406 	mvneq.w	r4, #6
 80068ea:	2400      	movne	r4, #0
 80068ec:	e7af      	b.n	800684e <lwip_netconn_do_writemore+0x10a>
        err = out_err;
 80068ee:	4604      	mov	r4, r0
 80068f0:	e7ad      	b.n	800684e <lwip_netconn_do_writemore+0x10a>
      sys_sem_signal(op_completed_sem);
 80068f2:	300c      	adds	r0, #12
 80068f4:	f008 f8ae 	bl	800ea54 <sys_sem_signal>
  return ERR_OK;
 80068f8:	2400      	movs	r4, #0
 80068fa:	e7b2      	b.n	8006862 <lwip_netconn_do_writemore+0x11e>
      out_err = tcp_output(conn->pcb.tcp);
 80068fc:	6868      	ldr	r0, [r5, #4]
 80068fe:	f005 fe99 	bl	800c634 <tcp_output>
 8006902:	4604      	mov	r4, r0
      if (out_err == ERR_RTE) {
 8006904:	f110 0f04 	cmn.w	r0, #4
    return ERR_MEM;
 8006908:	bf18      	it	ne
 800690a:	f04f 34ff 	movne.w	r4, #4294967295
      if (out_err == ERR_RTE) {
 800690e:	d09e      	beq.n	800684e <lwip_netconn_do_writemore+0x10a>
 8006910:	e7a7      	b.n	8006862 <lwip_netconn_do_writemore+0x11e>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8006912:	2400      	movs	r4, #0
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8006914:	f1ba 0f00 	cmp.w	sl, #0
 8006918:	d1c8      	bne.n	80068ac <lwip_netconn_do_writemore+0x168>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800691a:	686b      	ldr	r3, [r5, #4]
 800691c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006920:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006924:	d303      	bcc.n	800692e <lwip_netconn_do_writemore+0x1ea>
 8006926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800692a:	2b04      	cmp	r3, #4
 800692c:	d905      	bls.n	800693a <lwip_netconn_do_writemore+0x1f6>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800692e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006930:	b11b      	cbz	r3, 800693a <lwip_netconn_do_writemore+0x1f6>
 8006932:	2200      	movs	r2, #0
 8006934:	2103      	movs	r1, #3
 8006936:	4628      	mov	r0, r5
 8006938:	4798      	blx	r3
    if (err == ERR_OK) {
 800693a:	2c00      	cmp	r4, #0
 800693c:	d184      	bne.n	8006848 <lwip_netconn_do_writemore+0x104>
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800693e:	6a2b      	ldr	r3, [r5, #32]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	695b      	ldr	r3, [r3, #20]
 8006944:	429a      	cmp	r2, r3
 8006946:	d002      	beq.n	800694e <lwip_netconn_do_writemore+0x20a>
 8006948:	f1ba 0f00 	cmp.w	sl, #0
 800694c:	d0d6      	beq.n	80068fc <lwip_netconn_do_writemore+0x1b8>
      out_err = tcp_output(conn->pcb.tcp);
 800694e:	6868      	ldr	r0, [r5, #4]
 8006950:	f005 fe70 	bl	800c634 <tcp_output>
        err = out_err;
 8006954:	f110 0f04 	cmn.w	r0, #4
 8006958:	bf08      	it	eq
 800695a:	4604      	moveq	r4, r0
 800695c:	e777      	b.n	800684e <lwip_netconn_do_writemore+0x10a>
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800695e:	4643      	mov	r3, r8
 8006960:	4622      	mov	r2, r4
 8006962:	4639      	mov	r1, r7
 8006964:	6868      	ldr	r0, [r5, #4]
 8006966:	f005 f82f 	bl	800b9c8 <tcp_write>
      if (err == ERR_OK) {
 800696a:	4604      	mov	r4, r0
 800696c:	2800      	cmp	r0, #0
 800696e:	d198      	bne.n	80068a2 <lwip_netconn_do_writemore+0x15e>
 8006970:	2100      	movs	r1, #0
        conn->current_msg->msg.w.offset += len;
 8006972:	6a2a      	ldr	r2, [r5, #32]
 8006974:	6993      	ldr	r3, [r2, #24]
 8006976:	444b      	add	r3, r9
 8006978:	6193      	str	r3, [r2, #24]
        conn->current_msg->msg.w.vector_off += len;
 800697a:	6a2a      	ldr	r2, [r5, #32]
 800697c:	6913      	ldr	r3, [r2, #16]
 800697e:	444b      	add	r3, r9
 8006980:	6113      	str	r3, [r2, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8006982:	6a2b      	ldr	r3, [r5, #32]
 8006984:	689a      	ldr	r2, [r3, #8]
 8006986:	6918      	ldr	r0, [r3, #16]
 8006988:	6852      	ldr	r2, [r2, #4]
 800698a:	4290      	cmp	r0, r2
 800698c:	f43f af7b 	beq.w	8006886 <lwip_netconn_do_writemore+0x142>
    } while (write_more && err == ERR_OK);
 8006990:	2900      	cmp	r1, #0
 8006992:	d0be      	beq.n	8006912 <lwip_netconn_do_writemore+0x1ce>
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8006994:	6a2a      	ldr	r2, [r5, #32]
 8006996:	6891      	ldr	r1, [r2, #8]
 8006998:	6913      	ldr	r3, [r2, #16]
 800699a:	680f      	ldr	r7, [r1, #0]
 800699c:	441f      	add	r7, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800699e:	6849      	ldr	r1, [r1, #4]
 80069a0:	1ace      	subs	r6, r1, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 80069a2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
        apiflags |= TCP_WRITE_FLAG_MORE;
 80069a6:	bf26      	itte	cs
 80069a8:	f048 0802 	orrcs.w	r8, r8, #2
        len = 0xffff;
 80069ac:	f64f 74ff 	movwcs	r4, #65535	; 0xffff
        len = (u16_t)diff;
 80069b0:	b2b4      	uxthcc	r4, r6
      available = tcp_sndbuf(conn->pcb.tcp);
 80069b2:	6868      	ldr	r0, [r5, #4]
 80069b4:	f8b0 0064 	ldrh.w	r0, [r0, #100]	; 0x64
      if (available < len) {
 80069b8:	4284      	cmp	r4, r0
 80069ba:	f67f af26 	bls.w	800680a <lwip_netconn_do_writemore+0xc6>
        if (dontblock) {
 80069be:	f1ba 0f00 	cmp.w	sl, #0
 80069c2:	f43f af1f 	beq.w	8006804 <lwip_netconn_do_writemore+0xc0>
          if (!len) {
 80069c6:	2800      	cmp	r0, #0
 80069c8:	f43f af10 	beq.w	80067ec <lwip_netconn_do_writemore+0xa8>
        len = available;
 80069cc:	4604      	mov	r4, r0
 80069ce:	e71c      	b.n	800680a <lwip_netconn_do_writemore+0xc6>
 80069d0:	08010404 	.word	0x08010404
 80069d4:	0801049c 	.word	0x0801049c
 80069d8:	08010198 	.word	0x08010198
 80069dc:	08010510 	.word	0x08010510
 80069e0:	080104bc 	.word	0x080104bc
 80069e4:	08010530 	.word	0x08010530
 80069e8:	08010548 	.word	0x08010548
 80069ec:	08010588 	.word	0x08010588
 80069f0:	080105b0 	.word	0x080105b0

080069f4 <lwip_netconn_do_close_internal>:
{
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	460f      	mov	r7, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 80069fa:	4604      	mov	r4, r0
 80069fc:	2800      	cmp	r0, #0
 80069fe:	d036      	beq.n	8006a6e <lwip_netconn_do_close_internal+0x7a>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006a00:	7823      	ldrb	r3, [r4, #0]
 8006a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a06:	2b10      	cmp	r3, #16
 8006a08:	d139      	bne.n	8006a7e <lwip_netconn_do_close_internal+0x8a>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006a0a:	7863      	ldrb	r3, [r4, #1]
 8006a0c:	2b04      	cmp	r3, #4
 8006a0e:	d13e      	bne.n	8006a8e <lwip_netconn_do_close_internal+0x9a>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006a10:	6863      	ldr	r3, [r4, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d043      	beq.n	8006a9e <lwip_netconn_do_close_internal+0xaa>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006a16:	6a23      	ldr	r3, [r4, #32]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d048      	beq.n	8006aae <lwip_netconn_do_close_internal+0xba>
  tpcb = conn->pcb.tcp;
 8006a1c:	6866      	ldr	r6, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 8006a1e:	6a23      	ldr	r3, [r4, #32]
 8006a20:	7a1b      	ldrb	r3, [r3, #8]
  shut_rx = shut & NETCONN_SHUT_RD;
 8006a22:	f003 0801 	and.w	r8, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 8006a26:	f003 0902 	and.w	r9, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 8006a2a:	2b03      	cmp	r3, #3
 8006a2c:	d012      	beq.n	8006a54 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_rx &&
 8006a2e:	f1b8 0f00 	cmp.w	r8, #0
 8006a32:	d006      	beq.n	8006a42 <lwip_netconn_do_close_internal+0x4e>
             ((tpcb->state == FIN_WAIT_1) ||
 8006a34:	7d32      	ldrb	r2, [r6, #20]
 8006a36:	1f53      	subs	r3, r2, #5
  } else if (shut_rx &&
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d90a      	bls.n	8006a54 <lwip_netconn_do_close_internal+0x60>
              (tpcb->state == FIN_WAIT_2) ||
 8006a3e:	2a08      	cmp	r2, #8
 8006a40:	d008      	beq.n	8006a54 <lwip_netconn_do_close_internal+0x60>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006a42:	f1b9 0f00 	cmp.w	r9, #0
 8006a46:	f000 80cd 	beq.w	8006be4 <lwip_netconn_do_close_internal+0x1f0>
 8006a4a:	8b73      	ldrh	r3, [r6, #26]
 8006a4c:	f013 0f10 	tst.w	r3, #16
 8006a50:	f000 80c8 	beq.w	8006be4 <lwip_netconn_do_close_internal+0x1f0>
    tcp_arg(tpcb, NULL);
 8006a54:	2100      	movs	r1, #0
 8006a56:	4630      	mov	r0, r6
 8006a58:	f002 fa4c 	bl	8008ef4 <tcp_arg>
  if (tpcb->state == LISTEN) {
 8006a5c:	f896 a014 	ldrb.w	sl, [r6, #20]
 8006a60:	f1ba 0f01 	cmp.w	sl, #1
 8006a64:	f000 80d6 	beq.w	8006c14 <lwip_netconn_do_close_internal+0x220>
 8006a68:	f04f 0a01 	mov.w	sl, #1
 8006a6c:	e0bf      	b.n	8006bee <lwip_netconn_do_close_internal+0x1fa>
  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006a6e:	4b6c      	ldr	r3, [pc, #432]	; (8006c20 <lwip_netconn_do_close_internal+0x22c>)
 8006a70:	f240 32a2 	movw	r2, #930	; 0x3a2
 8006a74:	496b      	ldr	r1, [pc, #428]	; (8006c24 <lwip_netconn_do_close_internal+0x230>)
 8006a76:	486c      	ldr	r0, [pc, #432]	; (8006c28 <lwip_netconn_do_close_internal+0x234>)
 8006a78:	f008 fa3c 	bl	800eef4 <iprintf>
 8006a7c:	e7c0      	b.n	8006a00 <lwip_netconn_do_close_internal+0xc>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006a7e:	4b68      	ldr	r3, [pc, #416]	; (8006c20 <lwip_netconn_do_close_internal+0x22c>)
 8006a80:	f240 32a3 	movw	r2, #931	; 0x3a3
 8006a84:	4969      	ldr	r1, [pc, #420]	; (8006c2c <lwip_netconn_do_close_internal+0x238>)
 8006a86:	4868      	ldr	r0, [pc, #416]	; (8006c28 <lwip_netconn_do_close_internal+0x234>)
 8006a88:	f008 fa34 	bl	800eef4 <iprintf>
 8006a8c:	e7bd      	b.n	8006a0a <lwip_netconn_do_close_internal+0x16>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006a8e:	4b64      	ldr	r3, [pc, #400]	; (8006c20 <lwip_netconn_do_close_internal+0x22c>)
 8006a90:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8006a94:	4966      	ldr	r1, [pc, #408]	; (8006c30 <lwip_netconn_do_close_internal+0x23c>)
 8006a96:	4864      	ldr	r0, [pc, #400]	; (8006c28 <lwip_netconn_do_close_internal+0x234>)
 8006a98:	f008 fa2c 	bl	800eef4 <iprintf>
 8006a9c:	e7b8      	b.n	8006a10 <lwip_netconn_do_close_internal+0x1c>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006a9e:	4b60      	ldr	r3, [pc, #384]	; (8006c20 <lwip_netconn_do_close_internal+0x22c>)
 8006aa0:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006aa4:	4963      	ldr	r1, [pc, #396]	; (8006c34 <lwip_netconn_do_close_internal+0x240>)
 8006aa6:	4860      	ldr	r0, [pc, #384]	; (8006c28 <lwip_netconn_do_close_internal+0x234>)
 8006aa8:	f008 fa24 	bl	800eef4 <iprintf>
 8006aac:	e7b3      	b.n	8006a16 <lwip_netconn_do_close_internal+0x22>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006aae:	4b5c      	ldr	r3, [pc, #368]	; (8006c20 <lwip_netconn_do_close_internal+0x22c>)
 8006ab0:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006ab4:	4960      	ldr	r1, [pc, #384]	; (8006c38 <lwip_netconn_do_close_internal+0x244>)
 8006ab6:	485c      	ldr	r0, [pc, #368]	; (8006c28 <lwip_netconn_do_close_internal+0x234>)
 8006ab8:	f008 fa1c 	bl	800eef4 <iprintf>
 8006abc:	e7ae      	b.n	8006a1c <lwip_netconn_do_close_internal+0x28>
      tcp_recv(tpcb, NULL);
 8006abe:	2100      	movs	r1, #0
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f002 fa1b 	bl	8008efc <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006ac6:	2100      	movs	r1, #0
 8006ac8:	4630      	mov	r0, r6
 8006aca:	f002 fa65 	bl	8008f98 <tcp_accept>
 8006ace:	e092      	b.n	8006bf6 <lwip_netconn_do_close_internal+0x202>
      tcp_sent(tpcb, NULL);
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	f002 fa2c 	bl	8008f30 <tcp_sent>
 8006ad8:	e091      	b.n	8006bfe <lwip_netconn_do_close_internal+0x20a>
      tcp_poll(tpcb, NULL, 0);
 8006ada:	2200      	movs	r2, #0
 8006adc:	4611      	mov	r1, r2
 8006ade:	4630      	mov	r0, r6
 8006ae0:	f002 fa60 	bl	8008fa4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006ae4:	2100      	movs	r1, #0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f002 fa3c 	bl	8008f64 <tcp_err>
      err = tcp_close(tpcb);
 8006aec:	4630      	mov	r0, r6
 8006aee:	f002 fdef 	bl	80096d0 <tcp_close>
 8006af2:	4605      	mov	r5, r0
    if (err == ERR_MEM) {
 8006af4:	f1b5 3fff 	cmp.w	r5, #4294967295
 8006af8:	d022      	beq.n	8006b40 <lwip_netconn_do_close_internal+0x14c>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006afa:	6a23      	ldr	r3, [r4, #32]
 8006afc:	681e      	ldr	r6, [r3, #0]
 8006afe:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006b00:	711d      	strb	r5, [r3, #4]
    conn->current_msg = NULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006b06:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006b08:	b9a5      	cbnz	r5, 8006b34 <lwip_netconn_do_close_internal+0x140>
      if (shut_close) {
 8006b0a:	f1ba 0f00 	cmp.w	sl, #0
 8006b0e:	d143      	bne.n	8006b98 <lwip_netconn_do_close_internal+0x1a4>
      if (shut_rx) {
 8006b10:	f1b8 0f00 	cmp.w	r8, #0
 8006b14:	d005      	beq.n	8006b22 <lwip_netconn_do_close_internal+0x12e>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006b16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b18:	b163      	cbz	r3, 8006b34 <lwip_netconn_do_close_internal+0x140>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	4620      	mov	r0, r4
 8006b20:	4798      	blx	r3
      if (shut_tx) {
 8006b22:	f1b9 0f00 	cmp.w	r9, #0
 8006b26:	d005      	beq.n	8006b34 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b2a:	b11b      	cbz	r3, 8006b34 <lwip_netconn_do_close_internal+0x140>
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2102      	movs	r1, #2
 8006b30:	4620      	mov	r0, r4
 8006b32:	4798      	blx	r3
    if (delayed)
 8006b34:	2f00      	cmp	r7, #0
 8006b36:	d138      	bne.n	8006baa <lwip_netconn_do_close_internal+0x1b6>
    return ERR_OK;
 8006b38:	2500      	movs	r5, #0
}
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006b40:	6a23      	ldr	r3, [r4, #32]
 8006b42:	7a5a      	ldrb	r2, [r3, #9]
 8006b44:	b19a      	cbz	r2, 8006b6e <lwip_netconn_do_close_internal+0x17a>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006b46:	7d33      	ldrb	r3, [r6, #20]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d033      	beq.n	8006bb4 <lwip_netconn_do_close_internal+0x1c0>
    if (shut_tx) {
 8006b4c:	f1b9 0f00 	cmp.w	r9, #0
 8006b50:	d138      	bne.n	8006bc4 <lwip_netconn_do_close_internal+0x1d0>
    tcp_poll(tpcb, poll_tcp, 1);
 8006b52:	2201      	movs	r2, #1
 8006b54:	4939      	ldr	r1, [pc, #228]	; (8006c3c <lwip_netconn_do_close_internal+0x248>)
 8006b56:	4630      	mov	r0, r6
 8006b58:	f002 fa24 	bl	8008fa4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8006b5c:	4938      	ldr	r1, [pc, #224]	; (8006c40 <lwip_netconn_do_close_internal+0x24c>)
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f002 fa00 	bl	8008f64 <tcp_err>
    tcp_arg(tpcb, conn);
 8006b64:	4621      	mov	r1, r4
 8006b66:	4630      	mov	r0, r6
 8006b68:	f002 f9c4 	bl	8008ef4 <tcp_arg>
  return err;
 8006b6c:	e7e5      	b.n	8006b3a <lwip_netconn_do_close_internal+0x146>
        if (shut_close) {
 8006b6e:	f1ba 0f00 	cmp.w	sl, #0
 8006b72:	d107      	bne.n	8006b84 <lwip_netconn_do_close_internal+0x190>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006b74:	681e      	ldr	r6, [r3, #0]
 8006b76:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006b78:	22ff      	movs	r2, #255	; 0xff
 8006b7a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006b80:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8006b82:	e7d7      	b.n	8006b34 <lwip_netconn_do_close_internal+0x140>
          tcp_abort(tpcb);
 8006b84:	4630      	mov	r0, r6
 8006b86:	f002 fb95 	bl	80092b4 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006b8a:	6a22      	ldr	r2, [r4, #32]
 8006b8c:	6816      	ldr	r6, [r2, #0]
 8006b8e:	360c      	adds	r6, #12
    conn->current_msg->err = err;
 8006b90:	2300      	movs	r3, #0
 8006b92:	7113      	strb	r3, [r2, #4]
    conn->current_msg = NULL;
 8006b94:	6223      	str	r3, [r4, #32]
    conn->state = NETCONN_NONE;
 8006b96:	7063      	strb	r3, [r4, #1]
        conn->pcb.tcp = NULL;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	6063      	str	r3, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006b9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b9e:	b1b3      	cbz	r3, 8006bce <lwip_netconn_do_close_internal+0x1da>
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	2104      	movs	r1, #4
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	4798      	blx	r3
 8006ba8:	e7b2      	b.n	8006b10 <lwip_netconn_do_close_internal+0x11c>
      sys_sem_signal(op_completed_sem);
 8006baa:	4630      	mov	r0, r6
 8006bac:	f007 ff52 	bl	800ea54 <sys_sem_signal>
    return ERR_OK;
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	e7c2      	b.n	8006b3a <lwip_netconn_do_close_internal+0x146>
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <lwip_netconn_do_close_internal+0x22c>)
 8006bb6:	f240 4241 	movw	r2, #1089	; 0x441
 8006bba:	4922      	ldr	r1, [pc, #136]	; (8006c44 <lwip_netconn_do_close_internal+0x250>)
 8006bbc:	481a      	ldr	r0, [pc, #104]	; (8006c28 <lwip_netconn_do_close_internal+0x234>)
 8006bbe:	f008 f999 	bl	800eef4 <iprintf>
 8006bc2:	e7c3      	b.n	8006b4c <lwip_netconn_do_close_internal+0x158>
      tcp_sent(tpcb, sent_tcp);
 8006bc4:	4920      	ldr	r1, [pc, #128]	; (8006c48 <lwip_netconn_do_close_internal+0x254>)
 8006bc6:	4630      	mov	r0, r6
 8006bc8:	f002 f9b2 	bl	8008f30 <tcp_sent>
 8006bcc:	e7c1      	b.n	8006b52 <lwip_netconn_do_close_internal+0x15e>
      if (shut_rx) {
 8006bce:	f1b8 0f00 	cmp.w	r8, #0
 8006bd2:	d1af      	bne.n	8006b34 <lwip_netconn_do_close_internal+0x140>
 8006bd4:	e7a5      	b.n	8006b22 <lwip_netconn_do_close_internal+0x12e>
    tcp_accept(tpcb, NULL);
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	4630      	mov	r0, r6
 8006bda:	f002 f9dd 	bl	8008f98 <tcp_accept>
 8006bde:	f04f 0a00 	mov.w	sl, #0
 8006be2:	e010      	b.n	8006c06 <lwip_netconn_do_close_internal+0x212>
  if (tpcb->state == LISTEN) {
 8006be4:	7d33      	ldrb	r3, [r6, #20]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d0f5      	beq.n	8006bd6 <lwip_netconn_do_close_internal+0x1e2>
 8006bea:	f04f 0a00 	mov.w	sl, #0
    if (shut_rx) {
 8006bee:	f1b8 0f00 	cmp.w	r8, #0
 8006bf2:	f47f af64 	bne.w	8006abe <lwip_netconn_do_close_internal+0xca>
    if (shut_tx) {
 8006bf6:	f1b9 0f00 	cmp.w	r9, #0
 8006bfa:	f47f af69 	bne.w	8006ad0 <lwip_netconn_do_close_internal+0xdc>
    if (shut_close) {
 8006bfe:	f1ba 0f00 	cmp.w	sl, #0
 8006c02:	f47f af6a 	bne.w	8006ada <lwip_netconn_do_close_internal+0xe6>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006c06:	464a      	mov	r2, r9
 8006c08:	4641      	mov	r1, r8
 8006c0a:	4630      	mov	r0, r6
 8006c0c:	f002 fe32 	bl	8009874 <tcp_shutdown>
 8006c10:	4605      	mov	r5, r0
 8006c12:	e76f      	b.n	8006af4 <lwip_netconn_do_close_internal+0x100>
    tcp_accept(tpcb, NULL);
 8006c14:	2100      	movs	r1, #0
 8006c16:	4630      	mov	r0, r6
 8006c18:	f002 f9be 	bl	8008f98 <tcp_accept>
  if (shut_close) {
 8006c1c:	e766      	b.n	8006aec <lwip_netconn_do_close_internal+0xf8>
 8006c1e:	bf00      	nop
 8006c20:	08010404 	.word	0x08010404
 8006c24:	08010308 	.word	0x08010308
 8006c28:	08010198 	.word	0x08010198
 8006c2c:	080105dc 	.word	0x080105dc
 8006c30:	080105fc 	.word	0x080105fc
 8006c34:	08010620 	.word	0x08010620
 8006c38:	080104bc 	.word	0x080104bc
 8006c3c:	08006c4d 	.word	0x08006c4d
 8006c40:	080065e1 	.word	0x080065e1
 8006c44:	08010634 	.word	0x08010634
 8006c48:	08006ccd 	.word	0x08006ccd

08006c4c <poll_tcp>:
{
 8006c4c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006c4e:	4604      	mov	r4, r0
 8006c50:	b1f0      	cbz	r0, 8006c90 <poll_tcp+0x44>
  if (conn->state == NETCONN_WRITE) {
 8006c52:	7863      	ldrb	r3, [r4, #1]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d023      	beq.n	8006ca0 <poll_tcp+0x54>
  } else if (conn->state == NETCONN_CLOSE) {
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d026      	beq.n	8006caa <poll_tcp+0x5e>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8006c5c:	7f23      	ldrb	r3, [r4, #28]
 8006c5e:	f013 0f10 	tst.w	r3, #16
 8006c62:	d013      	beq.n	8006c8c <poll_tcp+0x40>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006c64:	6862      	ldr	r2, [r4, #4]
 8006c66:	b18a      	cbz	r2, 8006c8c <poll_tcp+0x40>
 8006c68:	f8b2 1064 	ldrh.w	r1, [r2, #100]	; 0x64
 8006c6c:	f5b1 6f86 	cmp.w	r1, #1072	; 0x430
 8006c70:	d30c      	bcc.n	8006c8c <poll_tcp+0x40>
 8006c72:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8006c76:	2a04      	cmp	r2, #4
 8006c78:	d808      	bhi.n	8006c8c <poll_tcp+0x40>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006c7a:	f023 0310 	bic.w	r3, r3, #16
 8006c7e:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8006c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c82:	b11b      	cbz	r3, 8006c8c <poll_tcp+0x40>
 8006c84:	2200      	movs	r2, #0
 8006c86:	2102      	movs	r1, #2
 8006c88:	4620      	mov	r0, r4
 8006c8a:	4798      	blx	r3
}
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <poll_tcp+0x74>)
 8006c92:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8006c96:	490b      	ldr	r1, [pc, #44]	; (8006cc4 <poll_tcp+0x78>)
 8006c98:	480b      	ldr	r0, [pc, #44]	; (8006cc8 <poll_tcp+0x7c>)
 8006c9a:	f008 f92b 	bl	800eef4 <iprintf>
 8006c9e:	e7d8      	b.n	8006c52 <poll_tcp+0x6>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7ff fd4e 	bl	8006744 <lwip_netconn_do_writemore>
 8006ca8:	e7d8      	b.n	8006c5c <poll_tcp+0x10>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8006caa:	6a23      	ldr	r3, [r4, #32]
 8006cac:	b11b      	cbz	r3, 8006cb6 <poll_tcp+0x6a>
 8006cae:	7a5a      	ldrb	r2, [r3, #9]
 8006cb0:	b10a      	cbz	r2, 8006cb6 <poll_tcp+0x6a>
      conn->current_msg->msg.sd.polls_left--;
 8006cb2:	3a01      	subs	r2, #1
 8006cb4:	725a      	strb	r2, [r3, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f7ff fe9b 	bl	80069f4 <lwip_netconn_do_close_internal>
 8006cbe:	e7cd      	b.n	8006c5c <poll_tcp+0x10>
 8006cc0:	08010404 	.word	0x08010404
 8006cc4:	0801049c 	.word	0x0801049c
 8006cc8:	08010198 	.word	0x08010198

08006ccc <sent_tcp>:
{
 8006ccc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006cce:	b1e0      	cbz	r0, 8006d0a <sent_tcp+0x3e>
 8006cd0:	4615      	mov	r5, r2
 8006cd2:	4604      	mov	r4, r0
    if (conn->state == NETCONN_WRITE) {
 8006cd4:	7843      	ldrb	r3, [r0, #1]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d020      	beq.n	8006d1c <sent_tcp+0x50>
    } else if (conn->state == NETCONN_CLOSE) {
 8006cda:	2b04      	cmp	r3, #4
 8006cdc:	d023      	beq.n	8006d26 <sent_tcp+0x5a>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006cde:	6863      	ldr	r3, [r4, #4]
 8006ce0:	b1d3      	cbz	r3, 8006d18 <sent_tcp+0x4c>
 8006ce2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8006ce6:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8006cea:	d315      	bcc.n	8006d18 <sent_tcp+0x4c>
 8006cec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d811      	bhi.n	8006d18 <sent_tcp+0x4c>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8006cf4:	7f23      	ldrb	r3, [r4, #28]
 8006cf6:	f023 0310 	bic.w	r3, r3, #16
 8006cfa:	7723      	strb	r3, [r4, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8006cfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cfe:	b15b      	cbz	r3, 8006d18 <sent_tcp+0x4c>
 8006d00:	462a      	mov	r2, r5
 8006d02:	2102      	movs	r1, #2
 8006d04:	4620      	mov	r0, r4
 8006d06:	4798      	blx	r3
  return ERR_OK;
 8006d08:	e006      	b.n	8006d18 <sent_tcp+0x4c>
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006d0a:	4b09      	ldr	r3, [pc, #36]	; (8006d30 <sent_tcp+0x64>)
 8006d0c:	f240 1293 	movw	r2, #403	; 0x193
 8006d10:	4908      	ldr	r1, [pc, #32]	; (8006d34 <sent_tcp+0x68>)
 8006d12:	4809      	ldr	r0, [pc, #36]	; (8006d38 <sent_tcp+0x6c>)
 8006d14:	f008 f8ee 	bl	800eef4 <iprintf>
}
 8006d18:	2000      	movs	r0, #0
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f7ff fd10 	bl	8006744 <lwip_netconn_do_writemore>
 8006d24:	e7db      	b.n	8006cde <sent_tcp+0x12>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8006d26:	2101      	movs	r1, #1
 8006d28:	4620      	mov	r0, r4
 8006d2a:	f7ff fe63 	bl	80069f4 <lwip_netconn_do_close_internal>
 8006d2e:	e7d6      	b.n	8006cde <sent_tcp+0x12>
 8006d30:	08010404 	.word	0x08010404
 8006d34:	0801049c 	.word	0x0801049c
 8006d38:	08010198 	.word	0x08010198

08006d3c <recv_tcp>:
{
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	4604      	mov	r4, r0
 8006d40:	4615      	mov	r5, r2
 8006d42:	461e      	mov	r6, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006d44:	460f      	mov	r7, r1
 8006d46:	b329      	cbz	r1, 8006d94 <recv_tcp+0x58>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006d48:	b364      	cbz	r4, 8006da4 <recv_tcp+0x68>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006d4a:	2e00      	cmp	r6, #0
 8006d4c:	d151      	bne.n	8006df2 <recv_tcp+0xb6>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	42bb      	cmp	r3, r7
 8006d52:	d006      	beq.n	8006d62 <recv_tcp+0x26>
 8006d54:	4b2b      	ldr	r3, [pc, #172]	; (8006e04 <recv_tcp+0xc8>)
 8006d56:	f240 1235 	movw	r2, #309	; 0x135
 8006d5a:	492b      	ldr	r1, [pc, #172]	; (8006e08 <recv_tcp+0xcc>)
 8006d5c:	482b      	ldr	r0, [pc, #172]	; (8006e0c <recv_tcp+0xd0>)
 8006d5e:	f008 f8c9 	bl	800eef4 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006d62:	f104 0610 	add.w	r6, r4, #16
 8006d66:	4630      	mov	r0, r6
 8006d68:	f007 fe38 	bl	800e9dc <sys_mbox_valid>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d02e      	beq.n	8006dce <recv_tcp+0x92>
  if (p != NULL) {
 8006d70:	2d00      	cmp	r5, #0
 8006d72:	d036      	beq.n	8006de2 <recv_tcp+0xa6>
    len = p->tot_len;
 8006d74:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8006d76:	4629      	mov	r1, r5
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f007 fdf3 	bl	800e964 <sys_mbox_trypost>
 8006d7e:	4605      	mov	r5, r0
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d133      	bne.n	8006dec <recv_tcp+0xb0>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006d84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d86:	b11b      	cbz	r3, 8006d90 <recv_tcp+0x54>
 8006d88:	463a      	mov	r2, r7
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4798      	blx	r3
}
 8006d90:	4628      	mov	r0, r5
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8006d94:	4b1b      	ldr	r3, [pc, #108]	; (8006e04 <recv_tcp+0xc8>)
 8006d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006d9a:	491d      	ldr	r1, [pc, #116]	; (8006e10 <recv_tcp+0xd4>)
 8006d9c:	481b      	ldr	r0, [pc, #108]	; (8006e0c <recv_tcp+0xd0>)
 8006d9e:	f008 f8a9 	bl	800eef4 <iprintf>
 8006da2:	e7d1      	b.n	8006d48 <recv_tcp+0xc>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8006da4:	4b17      	ldr	r3, [pc, #92]	; (8006e04 <recv_tcp+0xc8>)
 8006da6:	f240 122d 	movw	r2, #301	; 0x12d
 8006daa:	491a      	ldr	r1, [pc, #104]	; (8006e14 <recv_tcp+0xd8>)
 8006dac:	4817      	ldr	r0, [pc, #92]	; (8006e0c <recv_tcp+0xd0>)
 8006dae:	f008 f8a1 	bl	800eef4 <iprintf>
    return ERR_VAL;
 8006db2:	f06f 0505 	mvn.w	r5, #5
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	d0ea      	beq.n	8006d90 <recv_tcp+0x54>
 8006dba:	4b12      	ldr	r3, [pc, #72]	; (8006e04 <recv_tcp+0xc8>)
 8006dbc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006dc0:	4915      	ldr	r1, [pc, #84]	; (8006e18 <recv_tcp+0xdc>)
 8006dc2:	4812      	ldr	r0, [pc, #72]	; (8006e0c <recv_tcp+0xd0>)
 8006dc4:	f008 f896 	bl	800eef4 <iprintf>
    return ERR_VAL;
 8006dc8:	f06f 0505 	mvn.w	r5, #5
 8006dcc:	e7e0      	b.n	8006d90 <recv_tcp+0x54>
    if (p != NULL) {
 8006dce:	b15d      	cbz	r5, 8006de8 <recv_tcp+0xac>
      tcp_recved(pcb, p->tot_len);
 8006dd0:	8929      	ldrh	r1, [r5, #8]
 8006dd2:	4638      	mov	r0, r7
 8006dd4:	f002 f816 	bl	8008e04 <tcp_recved>
      pbuf_free(p);
 8006dd8:	4628      	mov	r0, r5
 8006dda:	f001 fb95 	bl	8008508 <pbuf_free>
    return ERR_OK;
 8006dde:	2500      	movs	r5, #0
 8006de0:	e7d6      	b.n	8006d90 <recv_tcp+0x54>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8006de2:	4d0e      	ldr	r5, [pc, #56]	; (8006e1c <recv_tcp+0xe0>)
    len = 0;
 8006de4:	2700      	movs	r7, #0
 8006de6:	e7c6      	b.n	8006d76 <recv_tcp+0x3a>
    return ERR_OK;
 8006de8:	2500      	movs	r5, #0
 8006dea:	e7d1      	b.n	8006d90 <recv_tcp+0x54>
    return ERR_MEM;
 8006dec:	f04f 35ff 	mov.w	r5, #4294967295
 8006df0:	e7ce      	b.n	8006d90 <recv_tcp+0x54>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8006df2:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <recv_tcp+0xc8>)
 8006df4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8006df8:	4907      	ldr	r1, [pc, #28]	; (8006e18 <recv_tcp+0xdc>)
 8006dfa:	4804      	ldr	r0, [pc, #16]	; (8006e0c <recv_tcp+0xd0>)
 8006dfc:	f008 f87a 	bl	800eef4 <iprintf>
  if (conn == NULL) {
 8006e00:	e7a5      	b.n	8006d4e <recv_tcp+0x12>
 8006e02:	bf00      	nop
 8006e04:	08010404 	.word	0x08010404
 8006e08:	0801069c 	.word	0x0801069c
 8006e0c:	08010198 	.word	0x08010198
 8006e10:	08010658 	.word	0x08010658
 8006e14:	0801067c 	.word	0x0801067c
 8006e18:	080106bc 	.word	0x080106bc
 8006e1c:	08010825 	.word	0x08010825

08006e20 <lwip_netconn_is_err_msg>:
{
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4604      	mov	r4, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8006e24:	460d      	mov	r5, r1
 8006e26:	b169      	cbz	r1, 8006e44 <lwip_netconn_is_err_msg+0x24>
  if (msg == &netconn_aborted) {
 8006e28:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <lwip_netconn_is_err_msg+0x44>)
 8006e2a:	429c      	cmp	r4, r3
 8006e2c:	d011      	beq.n	8006e52 <lwip_netconn_is_err_msg+0x32>
  } else if (msg == &netconn_reset) {
 8006e2e:	4b0e      	ldr	r3, [pc, #56]	; (8006e68 <lwip_netconn_is_err_msg+0x48>)
 8006e30:	429c      	cmp	r4, r3
 8006e32:	d012      	beq.n	8006e5a <lwip_netconn_is_err_msg+0x3a>
  } else if (msg == &netconn_closed) {
 8006e34:	4b0d      	ldr	r3, [pc, #52]	; (8006e6c <lwip_netconn_is_err_msg+0x4c>)
 8006e36:	429c      	cmp	r4, r3
    *err = ERR_CLSD;
 8006e38:	bf03      	ittte	eq
 8006e3a:	23f1      	moveq	r3, #241	; 0xf1
 8006e3c:	702b      	strbeq	r3, [r5, #0]
    return 1;
 8006e3e:	2001      	moveq	r0, #1
  return 0;
 8006e40:	2000      	movne	r0, #0
}
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("err != NULL", err != NULL);
 8006e44:	4b0a      	ldr	r3, [pc, #40]	; (8006e70 <lwip_netconn_is_err_msg+0x50>)
 8006e46:	2285      	movs	r2, #133	; 0x85
 8006e48:	490a      	ldr	r1, [pc, #40]	; (8006e74 <lwip_netconn_is_err_msg+0x54>)
 8006e4a:	480b      	ldr	r0, [pc, #44]	; (8006e78 <lwip_netconn_is_err_msg+0x58>)
 8006e4c:	f008 f852 	bl	800eef4 <iprintf>
 8006e50:	e7ea      	b.n	8006e28 <lwip_netconn_is_err_msg+0x8>
    *err = ERR_ABRT;
 8006e52:	23f3      	movs	r3, #243	; 0xf3
 8006e54:	702b      	strb	r3, [r5, #0]
    return 1;
 8006e56:	2001      	movs	r0, #1
 8006e58:	e7f3      	b.n	8006e42 <lwip_netconn_is_err_msg+0x22>
    *err = ERR_RST;
 8006e5a:	23f2      	movs	r3, #242	; 0xf2
 8006e5c:	702b      	strb	r3, [r5, #0]
    return 1;
 8006e5e:	2001      	movs	r0, #1
 8006e60:	e7ef      	b.n	8006e42 <lwip_netconn_is_err_msg+0x22>
 8006e62:	bf00      	nop
 8006e64:	08010824 	.word	0x08010824
 8006e68:	08010826 	.word	0x08010826
 8006e6c:	08010825 	.word	0x08010825
 8006e70:	08010404 	.word	0x08010404
 8006e74:	080106d4 	.word	0x080106d4
 8006e78:	08010198 	.word	0x08010198

08006e7c <lwip_netconn_do_newconn>:
{
 8006e7c:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006e82:	6805      	ldr	r5, [r0, #0]
 8006e84:	686b      	ldr	r3, [r5, #4]
 8006e86:	b103      	cbz	r3, 8006e8a <lwip_netconn_do_newconn+0xe>
}
 8006e88:	bd38      	pop	{r3, r4, r5, pc}
 8006e8a:	4604      	mov	r4, r0
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006e8c:	782b      	ldrb	r3, [r5, #0]
 8006e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e92:	2b10      	cmp	r3, #16
 8006e94:	d019      	beq.n	8006eca <lwip_netconn_do_newconn+0x4e>
 8006e96:	2b20      	cmp	r3, #32
 8006e98:	d122      	bne.n	8006ee0 <lwip_netconn_do_newconn+0x64>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006e9a:	2000      	movs	r0, #0
 8006e9c:	f006 f93e 	bl	800d11c <udp_new_ip_type>
 8006ea0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	b16a      	cbz	r2, 8006ec4 <lwip_netconn_do_newconn+0x48>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006eac:	bf04      	itt	eq
 8006eae:	2301      	moveq	r3, #1
 8006eb0:	7413      	strbeq	r3, [r2, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006eb2:	6822      	ldr	r2, [r4, #0]
 8006eb4:	490c      	ldr	r1, [pc, #48]	; (8006ee8 <lwip_netconn_do_newconn+0x6c>)
 8006eb6:	6850      	ldr	r0, [r2, #4]
 8006eb8:	f006 f8e6 	bl	800d088 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e1      	bne.n	8006e88 <lwip_netconn_do_newconn+0xc>
    msg->err = ERR_MEM;
 8006ec4:	23ff      	movs	r3, #255	; 0xff
 8006ec6:	7123      	strb	r3, [r4, #4]
}
 8006ec8:	e7de      	b.n	8006e88 <lwip_netconn_do_newconn+0xc>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006eca:	2000      	movs	r0, #0
 8006ecc:	f002 fb36 	bl	800953c <tcp_new_ip_type>
 8006ed0:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	6843      	ldr	r3, [r0, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d0f4      	beq.n	8006ec4 <lwip_netconn_do_newconn+0x48>
        setup_tcp(msg->conn);
 8006eda:	f7ff fb61 	bl	80065a0 <setup_tcp>
 8006ede:	e7ed      	b.n	8006ebc <lwip_netconn_do_newconn+0x40>
      msg->err = ERR_VAL;
 8006ee0:	23fa      	movs	r3, #250	; 0xfa
 8006ee2:	7103      	strb	r3, [r0, #4]
      return;
 8006ee4:	e7d0      	b.n	8006e88 <lwip_netconn_do_newconn+0xc>
 8006ee6:	bf00      	nop
 8006ee8:	080064e1 	.word	0x080064e1

08006eec <netconn_alloc>:
{
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	4605      	mov	r5, r0
 8006ef0:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006ef2:	2007      	movs	r0, #7
 8006ef4:	f001 f816 	bl	8007f24 <memp_malloc>
  if (conn == NULL) {
 8006ef8:	4604      	mov	r4, r0
 8006efa:	b378      	cbz	r0, 8006f5c <netconn_alloc+0x70>
  conn->pending_err = ERR_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	7203      	strb	r3, [r0, #8]
  conn->type = t;
 8006f00:	7005      	strb	r5, [r0, #0]
  conn->pcb.tcp = NULL;
 8006f02:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8006f04:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8006f08:	2d10      	cmp	r5, #16
 8006f0a:	d001      	beq.n	8006f10 <netconn_alloc+0x24>
 8006f0c:	2d20      	cmp	r5, #32
 8006f0e:	d119      	bne.n	8006f44 <netconn_alloc+0x58>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006f10:	f104 0510 	add.w	r5, r4, #16
 8006f14:	2106      	movs	r1, #6
 8006f16:	4628      	mov	r0, r5
 8006f18:	f007 fd0e 	bl	800e938 <sys_mbox_new>
 8006f1c:	b9c8      	cbnz	r0, 8006f52 <netconn_alloc+0x66>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006f1e:	2100      	movs	r1, #0
 8006f20:	f104 000c 	add.w	r0, r4, #12
 8006f24:	f007 fd62 	bl	800e9ec <sys_sem_new>
 8006f28:	b9d0      	cbnz	r0, 8006f60 <netconn_alloc+0x74>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006f2a:	f104 0014 	add.w	r0, r4, #20
 8006f2e:	f007 fd5a 	bl	800e9e6 <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	7063      	strb	r3, [r4, #1]
  conn->socket       = -1;
 8006f36:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3a:	61a2      	str	r2, [r4, #24]
  conn->callback     = callback;
 8006f3c:	6266      	str	r6, [r4, #36]	; 0x24
  conn->current_msg  = NULL;
 8006f3e:	6223      	str	r3, [r4, #32]
  conn->flags = init_flags;
 8006f40:	7723      	strb	r3, [r4, #28]
  return conn;
 8006f42:	e00b      	b.n	8006f5c <netconn_alloc+0x70>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006f44:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <netconn_alloc+0x7c>)
 8006f46:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006f4a:	4908      	ldr	r1, [pc, #32]	; (8006f6c <netconn_alloc+0x80>)
 8006f4c:	4808      	ldr	r0, [pc, #32]	; (8006f70 <netconn_alloc+0x84>)
 8006f4e:	f007 ffd1 	bl	800eef4 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8006f52:	4621      	mov	r1, r4
 8006f54:	2007      	movs	r0, #7
 8006f56:	f001 f815 	bl	8007f84 <memp_free>
  return NULL;
 8006f5a:	2400      	movs	r4, #0
}
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
    sys_mbox_free(&conn->recvmbox);
 8006f60:	4628      	mov	r0, r5
 8006f62:	f007 fcf6 	bl	800e952 <sys_mbox_free>
    goto free_and_return;
 8006f66:	e7f4      	b.n	8006f52 <netconn_alloc+0x66>
 8006f68:	08010404 	.word	0x08010404
 8006f6c:	080106e0 	.word	0x080106e0
 8006f70:	08010198 	.word	0x08010198

08006f74 <netconn_free>:
{
 8006f74:	b538      	push	{r3, r4, r5, lr}
 8006f76:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006f78:	6843      	ldr	r3, [r0, #4]
 8006f7a:	b133      	cbz	r3, 8006f8a <netconn_free+0x16>
 8006f7c:	4b16      	ldr	r3, [pc, #88]	; (8006fd8 <netconn_free+0x64>)
 8006f7e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006f82:	4916      	ldr	r1, [pc, #88]	; (8006fdc <netconn_free+0x68>)
 8006f84:	4816      	ldr	r0, [pc, #88]	; (8006fe0 <netconn_free+0x6c>)
 8006f86:	f007 ffb5 	bl	800eef4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006f8a:	f104 0010 	add.w	r0, r4, #16
 8006f8e:	f007 fd25 	bl	800e9dc <sys_mbox_valid>
 8006f92:	b988      	cbnz	r0, 8006fb8 <netconn_free+0x44>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006f94:	f104 0014 	add.w	r0, r4, #20
 8006f98:	f007 fd20 	bl	800e9dc <sys_mbox_valid>
 8006f9c:	b9a0      	cbnz	r0, 8006fc8 <netconn_free+0x54>
  sys_sem_free(&conn->op_completed);
 8006f9e:	f104 050c 	add.w	r5, r4, #12
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	f007 fd5b 	bl	800ea5e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f007 fd62 	bl	800ea72 <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8006fae:	4621      	mov	r1, r4
 8006fb0:	2007      	movs	r0, #7
 8006fb2:	f000 ffe7 	bl	8007f84 <memp_free>
}
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <netconn_free+0x64>)
 8006fba:	f240 3223 	movw	r2, #803	; 0x323
 8006fbe:	4909      	ldr	r1, [pc, #36]	; (8006fe4 <netconn_free+0x70>)
 8006fc0:	4807      	ldr	r0, [pc, #28]	; (8006fe0 <netconn_free+0x6c>)
 8006fc2:	f007 ff97 	bl	800eef4 <iprintf>
 8006fc6:	e7e5      	b.n	8006f94 <netconn_free+0x20>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006fc8:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <netconn_free+0x64>)
 8006fca:	f240 3226 	movw	r2, #806	; 0x326
 8006fce:	4906      	ldr	r1, [pc, #24]	; (8006fe8 <netconn_free+0x74>)
 8006fd0:	4803      	ldr	r0, [pc, #12]	; (8006fe0 <netconn_free+0x6c>)
 8006fd2:	f007 ff8f 	bl	800eef4 <iprintf>
 8006fd6:	e7e2      	b.n	8006f9e <netconn_free+0x2a>
 8006fd8:	08010404 	.word	0x08010404
 8006fdc:	08010708 	.word	0x08010708
 8006fe0:	08010198 	.word	0x08010198
 8006fe4:	08010738 	.word	0x08010738
 8006fe8:	08010774 	.word	0x08010774

08006fec <netconn_drain>:
{
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006ff2:	f100 0510 	add.w	r5, r0, #16
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	f007 fcf0 	bl	800e9dc <sys_mbox_valid>
 8006ffc:	b968      	cbnz	r0, 800701a <netconn_drain+0x2e>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006ffe:	3414      	adds	r4, #20
 8007000:	4620      	mov	r0, r4
 8007002:	f007 fceb 	bl	800e9dc <sys_mbox_valid>
 8007006:	2800      	cmp	r0, #0
 8007008:	d044      	beq.n	8007094 <netconn_drain+0xa8>
            newconn->pcb.tcp = NULL;
 800700a:	2600      	movs	r6, #0
 800700c:	e023      	b.n	8007056 <netconn_drain+0x6a>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800700e:	f10d 0103 	add.w	r1, sp, #3
 8007012:	9801      	ldr	r0, [sp, #4]
 8007014:	f7ff ff04 	bl	8006e20 <lwip_netconn_is_err_msg>
 8007018:	b178      	cbz	r0, 800703a <netconn_drain+0x4e>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800701a:	a901      	add	r1, sp, #4
 800701c:	4628      	mov	r0, r5
 800701e:	f007 fcd2 	bl	800e9c6 <sys_arch_mbox_tryfetch>
 8007022:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007026:	d00c      	beq.n	8007042 <netconn_drain+0x56>
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007028:	7823      	ldrb	r3, [r4, #0]
 800702a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800702e:	2b10      	cmp	r3, #16
 8007030:	d0ed      	beq.n	800700e <netconn_drain+0x22>
          netbuf_delete((struct netbuf *)mem);
 8007032:	9801      	ldr	r0, [sp, #4]
 8007034:	f000 fac2 	bl	80075bc <netbuf_delete>
 8007038:	e7ef      	b.n	800701a <netconn_drain+0x2e>
            pbuf_free((struct pbuf *)mem);
 800703a:	9801      	ldr	r0, [sp, #4]
 800703c:	f001 fa64 	bl	8008508 <pbuf_free>
 8007040:	e7eb      	b.n	800701a <netconn_drain+0x2e>
    sys_mbox_free(&conn->recvmbox);
 8007042:	4628      	mov	r0, r5
 8007044:	f007 fc85 	bl	800e952 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007048:	4628      	mov	r0, r5
 800704a:	f007 fccc 	bl	800e9e6 <sys_mbox_set_invalid>
 800704e:	e7d6      	b.n	8006ffe <netconn_drain+0x12>
          netconn_free(newconn);
 8007050:	4628      	mov	r0, r5
 8007052:	f7ff ff8f 	bl	8006f74 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007056:	a901      	add	r1, sp, #4
 8007058:	4620      	mov	r0, r4
 800705a:	f007 fcb4 	bl	800e9c6 <sys_arch_mbox_tryfetch>
 800705e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007062:	d011      	beq.n	8007088 <netconn_drain+0x9c>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8007064:	f10d 0103 	add.w	r1, sp, #3
 8007068:	9801      	ldr	r0, [sp, #4]
 800706a:	f7ff fed9 	bl	8006e20 <lwip_netconn_is_err_msg>
 800706e:	2800      	cmp	r0, #0
 8007070:	d1f1      	bne.n	8007056 <netconn_drain+0x6a>
          struct netconn *newconn = (struct netconn *)mem;
 8007072:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8007074:	4628      	mov	r0, r5
 8007076:	f7ff ffb9 	bl	8006fec <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800707a:	6868      	ldr	r0, [r5, #4]
 800707c:	2800      	cmp	r0, #0
 800707e:	d0e7      	beq.n	8007050 <netconn_drain+0x64>
            tcp_abort(newconn->pcb.tcp);
 8007080:	f002 f918 	bl	80092b4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8007084:	606e      	str	r6, [r5, #4]
 8007086:	e7e3      	b.n	8007050 <netconn_drain+0x64>
    sys_mbox_free(&conn->acceptmbox);
 8007088:	4620      	mov	r0, r4
 800708a:	f007 fc62 	bl	800e952 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800708e:	4620      	mov	r0, r4
 8007090:	f007 fca9 	bl	800e9e6 <sys_mbox_set_invalid>
}
 8007094:	b002      	add	sp, #8
 8007096:	bd70      	pop	{r4, r5, r6, pc}

08007098 <accept_function>:
{
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (conn == NULL) {
 800709a:	2800      	cmp	r0, #0
 800709c:	d06e      	beq.n	800717c <accept_function+0xe4>
 800709e:	460d      	mov	r5, r1
 80070a0:	4616      	mov	r6, r2
 80070a2:	4604      	mov	r4, r0
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80070a4:	f100 0714 	add.w	r7, r0, #20
 80070a8:	4638      	mov	r0, r7
 80070aa:	f007 fc97 	bl	800e9dc <sys_mbox_valid>
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d067      	beq.n	8007182 <accept_function+0xea>
  if (newpcb == NULL) {
 80070b2:	b1bd      	cbz	r5, 80070e4 <accept_function+0x4c>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 80070b4:	bb36      	cbnz	r6, 8007104 <accept_function+0x6c>
  newconn = netconn_alloc(conn->type, conn->callback);
 80070b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80070b8:	7820      	ldrb	r0, [r4, #0]
 80070ba:	f7ff ff17 	bl	8006eec <netconn_alloc>
  if (newconn == NULL) {
 80070be:	4606      	mov	r6, r0
 80070c0:	b340      	cbz	r0, 8007114 <accept_function+0x7c>
  newconn->pcb.tcp = newpcb;
 80070c2:	6045      	str	r5, [r0, #4]
  setup_tcp(newconn);
 80070c4:	f7ff fa6c 	bl	80065a0 <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80070c8:	4631      	mov	r1, r6
 80070ca:	4638      	mov	r0, r7
 80070cc:	f007 fc4a 	bl	800e964 <sys_mbox_trypost>
 80070d0:	4605      	mov	r5, r0
 80070d2:	bb68      	cbnz	r0, 8007130 <accept_function+0x98>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80070d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070d6:	b11b      	cbz	r3, 80070e0 <accept_function+0x48>
 80070d8:	2200      	movs	r2, #0
 80070da:	4611      	mov	r1, r2
 80070dc:	4620      	mov	r0, r4
 80070de:	4798      	blx	r3
}
 80070e0:	4628      	mov	r0, r5
 80070e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80070e4:	492e      	ldr	r1, [pc, #184]	; (80071a0 <accept_function+0x108>)
 80070e6:	4638      	mov	r0, r7
 80070e8:	f007 fc3c 	bl	800e964 <sys_mbox_trypost>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d14b      	bne.n	8007188 <accept_function+0xf0>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80070f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d04b      	beq.n	800718e <accept_function+0xf6>
 80070f6:	2200      	movs	r2, #0
 80070f8:	4611      	mov	r1, r2
 80070fa:	4620      	mov	r0, r4
 80070fc:	4798      	blx	r3
    return ERR_VAL;
 80070fe:	f06f 0505 	mvn.w	r5, #5
 8007102:	e7ed      	b.n	80070e0 <accept_function+0x48>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8007104:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <accept_function+0x10c>)
 8007106:	f240 222a 	movw	r2, #554	; 0x22a
 800710a:	4927      	ldr	r1, [pc, #156]	; (80071a8 <accept_function+0x110>)
 800710c:	4827      	ldr	r0, [pc, #156]	; (80071ac <accept_function+0x114>)
 800710e:	f007 fef1 	bl	800eef4 <iprintf>
 8007112:	e7d0      	b.n	80070b6 <accept_function+0x1e>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8007114:	4922      	ldr	r1, [pc, #136]	; (80071a0 <accept_function+0x108>)
 8007116:	4638      	mov	r0, r7
 8007118:	f007 fc24 	bl	800e964 <sys_mbox_trypost>
 800711c:	bbd0      	cbnz	r0, 8007194 <accept_function+0xfc>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800711e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007120:	b3db      	cbz	r3, 800719a <accept_function+0x102>
 8007122:	2200      	movs	r2, #0
 8007124:	4611      	mov	r1, r2
 8007126:	4620      	mov	r0, r4
 8007128:	4798      	blx	r3
    return ERR_MEM;
 800712a:	f04f 35ff 	mov.w	r5, #4294967295
 800712e:	e7d7      	b.n	80070e0 <accept_function+0x48>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8007130:	6874      	ldr	r4, [r6, #4]
    tcp_arg(pcb, NULL);
 8007132:	2100      	movs	r1, #0
 8007134:	4620      	mov	r0, r4
 8007136:	f001 fedd 	bl	8008ef4 <tcp_arg>
    tcp_recv(pcb, NULL);
 800713a:	2100      	movs	r1, #0
 800713c:	4620      	mov	r0, r4
 800713e:	f001 fedd 	bl	8008efc <tcp_recv>
    tcp_sent(pcb, NULL);
 8007142:	2100      	movs	r1, #0
 8007144:	4620      	mov	r0, r4
 8007146:	f001 fef3 	bl	8008f30 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800714a:	2200      	movs	r2, #0
 800714c:	4611      	mov	r1, r2
 800714e:	4620      	mov	r0, r4
 8007150:	f001 ff28 	bl	8008fa4 <tcp_poll>
    tcp_err(pcb, NULL);
 8007154:	2100      	movs	r1, #0
 8007156:	4620      	mov	r0, r4
 8007158:	f001 ff04 	bl	8008f64 <tcp_err>
    newconn->pcb.tcp = NULL;
 800715c:	2300      	movs	r3, #0
 800715e:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8007160:	f106 0410 	add.w	r4, r6, #16
 8007164:	4620      	mov	r0, r4
 8007166:	f007 fbf4 	bl	800e952 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800716a:	4620      	mov	r0, r4
 800716c:	f007 fc3b 	bl	800e9e6 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff feff 	bl	8006f74 <netconn_free>
    return ERR_MEM;
 8007176:	f04f 35ff 	mov.w	r5, #4294967295
 800717a:	e7b1      	b.n	80070e0 <accept_function+0x48>
    return ERR_VAL;
 800717c:	f06f 0505 	mvn.w	r5, #5
 8007180:	e7ae      	b.n	80070e0 <accept_function+0x48>
    return ERR_VAL;
 8007182:	f06f 0505 	mvn.w	r5, #5
 8007186:	e7ab      	b.n	80070e0 <accept_function+0x48>
    return ERR_VAL;
 8007188:	f06f 0505 	mvn.w	r5, #5
 800718c:	e7a8      	b.n	80070e0 <accept_function+0x48>
 800718e:	f06f 0505 	mvn.w	r5, #5
 8007192:	e7a5      	b.n	80070e0 <accept_function+0x48>
    return ERR_MEM;
 8007194:	f04f 35ff 	mov.w	r5, #4294967295
 8007198:	e7a2      	b.n	80070e0 <accept_function+0x48>
 800719a:	f04f 35ff 	mov.w	r5, #4294967295
 800719e:	e79f      	b.n	80070e0 <accept_function+0x48>
 80071a0:	08010824 	.word	0x08010824
 80071a4:	08010404 	.word	0x08010404
 80071a8:	080107b0 	.word	0x080107b0
 80071ac:	08010198 	.word	0x08010198

080071b0 <lwip_netconn_do_delconn>:
{
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4604      	mov	r4, r0
  enum netconn_state state = msg->conn->state;
 80071b4:	6803      	ldr	r3, [r0, #0]
 80071b6:	785d      	ldrb	r5, [r3, #1]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80071b8:	b1e5      	cbz	r5, 80071f4 <lwip_netconn_do_delconn+0x44>
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071c0:	2b10      	cmp	r3, #16
 80071c2:	d10a      	bne.n	80071da <lwip_netconn_do_delconn+0x2a>
  if (((state != NETCONN_NONE) &&
 80071c4:	2d02      	cmp	r5, #2
 80071c6:	d015      	beq.n	80071f4 <lwip_netconn_do_delconn+0x44>
       (state != NETCONN_LISTEN) &&
 80071c8:	2d03      	cmp	r5, #3
 80071ca:	d00e      	beq.n	80071ea <lwip_netconn_do_delconn+0x3a>
    msg->err = ERR_INPROGRESS;
 80071cc:	23fb      	movs	r3, #251	; 0xfb
 80071ce:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80071d0:	6820      	ldr	r0, [r4, #0]
 80071d2:	300c      	adds	r0, #12
 80071d4:	f007 fc48 	bl	800ea68 <sys_sem_valid>
}
 80071d8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80071da:	4b37      	ldr	r3, [pc, #220]	; (80072b8 <lwip_netconn_do_delconn+0x108>)
 80071dc:	f240 425e 	movw	r2, #1118	; 0x45e
 80071e0:	4936      	ldr	r1, [pc, #216]	; (80072bc <lwip_netconn_do_delconn+0x10c>)
 80071e2:	4837      	ldr	r0, [pc, #220]	; (80072c0 <lwip_netconn_do_delconn+0x110>)
 80071e4:	f007 fe86 	bl	800eef4 <iprintf>
 80071e8:	e7ec      	b.n	80071c4 <lwip_netconn_do_delconn+0x14>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	7f1b      	ldrb	r3, [r3, #28]
 80071ee:	f013 0f04 	tst.w	r3, #4
 80071f2:	d0eb      	beq.n	80071cc <lwip_netconn_do_delconn+0x1c>
    msg->err = ERR_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	7123      	strb	r3, [r4, #4]
    netconn_drain(msg->conn);
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	f7ff fef7 	bl	8006fec <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 80071fe:	6822      	ldr	r2, [r4, #0]
 8007200:	6851      	ldr	r1, [r2, #4]
 8007202:	b179      	cbz	r1, 8007224 <lwip_netconn_do_delconn+0x74>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007204:	7813      	ldrb	r3, [r2, #0]
 8007206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800720a:	2b10      	cmp	r3, #16
 800720c:	d019      	beq.n	8007242 <lwip_netconn_do_delconn+0x92>
 800720e:	2b20      	cmp	r3, #32
 8007210:	d105      	bne.n	800721e <lwip_netconn_do_delconn+0x6e>
          msg->conn->pcb.udp->recv_arg = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	61cb      	str	r3, [r1, #28]
          udp_remove(msg->conn->pcb.udp);
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	6858      	ldr	r0, [r3, #4]
 800721a:	f005 ff49 	bl	800d0b0 <udp_remove>
      msg->conn->pcb.tcp = NULL;
 800721e:	6823      	ldr	r3, [r4, #0]
 8007220:	2200      	movs	r2, #0
 8007222:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007228:	2b00      	cmp	r3, #0
 800722a:	d0d1      	beq.n	80071d0 <lwip_netconn_do_delconn+0x20>
 800722c:	2200      	movs	r2, #0
 800722e:	4611      	mov	r1, r2
 8007230:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8007232:	6820      	ldr	r0, [r4, #0]
 8007234:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007236:	2b00      	cmp	r3, #0
 8007238:	d0ca      	beq.n	80071d0 <lwip_netconn_do_delconn+0x20>
 800723a:	2200      	movs	r2, #0
 800723c:	2102      	movs	r1, #2
 800723e:	4798      	blx	r3
 8007240:	e7c6      	b.n	80071d0 <lwip_netconn_do_delconn+0x20>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007242:	6a13      	ldr	r3, [r2, #32]
 8007244:	b133      	cbz	r3, 8007254 <lwip_netconn_do_delconn+0xa4>
 8007246:	4b1c      	ldr	r3, [pc, #112]	; (80072b8 <lwip_netconn_do_delconn+0x108>)
 8007248:	f240 4294 	movw	r2, #1172	; 0x494
 800724c:	491d      	ldr	r1, [pc, #116]	; (80072c4 <lwip_netconn_do_delconn+0x114>)
 800724e:	481c      	ldr	r0, [pc, #112]	; (80072c0 <lwip_netconn_do_delconn+0x110>)
 8007250:	f007 fe50 	bl	800eef4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	2204      	movs	r2, #4
 8007258:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800725a:	2303      	movs	r3, #3
 800725c:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	621c      	str	r4, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007262:	2100      	movs	r1, #0
 8007264:	6820      	ldr	r0, [r4, #0]
 8007266:	f7ff fbc5 	bl	80069f4 <lwip_netconn_do_close_internal>
 800726a:	2800      	cmp	r0, #0
 800726c:	d0b4      	beq.n	80071d8 <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	785b      	ldrb	r3, [r3, #1]
 8007272:	2b04      	cmp	r3, #4
 8007274:	d117      	bne.n	80072a6 <lwip_netconn_do_delconn+0xf6>
            UNLOCK_TCPIP_CORE();
 8007276:	4d14      	ldr	r5, [pc, #80]	; (80072c8 <lwip_netconn_do_delconn+0x118>)
 8007278:	4628      	mov	r0, r5
 800727a:	f007 fc19 	bl	800eab0 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800727e:	6820      	ldr	r0, [r4, #0]
 8007280:	2100      	movs	r1, #0
 8007282:	300c      	adds	r0, #12
 8007284:	f007 fbc7 	bl	800ea16 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007288:	4628      	mov	r0, r5
 800728a:	f007 fc0a 	bl	800eaa2 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0a0      	beq.n	80071d8 <lwip_netconn_do_delconn+0x28>
 8007296:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <lwip_netconn_do_delconn+0x108>)
 8007298:	f240 429e 	movw	r2, #1182	; 0x49e
 800729c:	490b      	ldr	r1, [pc, #44]	; (80072cc <lwip_netconn_do_delconn+0x11c>)
 800729e:	4808      	ldr	r0, [pc, #32]	; (80072c0 <lwip_netconn_do_delconn+0x110>)
 80072a0:	f007 fe28 	bl	800eef4 <iprintf>
 80072a4:	e798      	b.n	80071d8 <lwip_netconn_do_delconn+0x28>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80072a6:	4b04      	ldr	r3, [pc, #16]	; (80072b8 <lwip_netconn_do_delconn+0x108>)
 80072a8:	f240 429a 	movw	r2, #1178	; 0x49a
 80072ac:	4907      	ldr	r1, [pc, #28]	; (80072cc <lwip_netconn_do_delconn+0x11c>)
 80072ae:	4804      	ldr	r0, [pc, #16]	; (80072c0 <lwip_netconn_do_delconn+0x110>)
 80072b0:	f007 fe20 	bl	800eef4 <iprintf>
 80072b4:	e7df      	b.n	8007276 <lwip_netconn_do_delconn+0xc6>
 80072b6:	bf00      	nop
 80072b8:	08010404 	.word	0x08010404
 80072bc:	080107d8 	.word	0x080107d8
 80072c0:	08010198 	.word	0x08010198
 80072c4:	080107ec 	.word	0x080107ec
 80072c8:	2000afe0 	.word	0x2000afe0
 80072cc:	08010808 	.word	0x08010808

080072d0 <lwip_netconn_do_bind>:
{
 80072d0:	b510      	push	{r4, lr}
 80072d2:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80072d4:	6803      	ldr	r3, [r0, #0]
 80072d6:	6858      	ldr	r0, [r3, #4]
 80072d8:	b180      	cbz	r0, 80072fc <lwip_netconn_do_bind+0x2c>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d006      	beq.n	80072f2 <lwip_netconn_do_bind+0x22>
 80072e4:	2b20      	cmp	r3, #32
 80072e6:	d10c      	bne.n	8007302 <lwip_netconn_do_bind+0x32>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80072e8:	89a2      	ldrh	r2, [r4, #12]
 80072ea:	68a1      	ldr	r1, [r4, #8]
 80072ec:	f005 fe46 	bl	800cf7c <udp_bind>
        break;
 80072f0:	e009      	b.n	8007306 <lwip_netconn_do_bind+0x36>
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80072f2:	89a2      	ldrh	r2, [r4, #12]
 80072f4:	68a1      	ldr	r1, [r4, #8]
 80072f6:	f001 fc7d 	bl	8008bf4 <tcp_bind>
        break;
 80072fa:	e004      	b.n	8007306 <lwip_netconn_do_bind+0x36>
    err = ERR_VAL;
 80072fc:	f06f 0005 	mvn.w	r0, #5
 8007300:	e001      	b.n	8007306 <lwip_netconn_do_bind+0x36>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007302:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 8007306:	7120      	strb	r0, [r4, #4]
}
 8007308:	bd10      	pop	{r4, pc}
	...

0800730c <lwip_netconn_do_listen>:
{
 800730c:	b530      	push	{r4, r5, lr}
 800730e:	b083      	sub	sp, #12
 8007310:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 8007312:	6803      	ldr	r3, [r0, #0]
 8007314:	6858      	ldr	r0, [r3, #4]
 8007316:	2800      	cmp	r0, #0
 8007318:	d05b      	beq.n	80073d2 <lwip_netconn_do_listen+0xc6>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007320:	2a10      	cmp	r2, #16
 8007322:	d007      	beq.n	8007334 <lwip_netconn_do_listen+0x28>
      err = ERR_ARG;
 8007324:	23f0      	movs	r3, #240	; 0xf0
 8007326:	f88d 3007 	strb.w	r3, [sp, #7]
  msg->err = err;
 800732a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800732e:	7123      	strb	r3, [r4, #4]
}
 8007330:	b003      	add	sp, #12
 8007332:	bd30      	pop	{r4, r5, pc}
      if (msg->conn->state == NETCONN_NONE) {
 8007334:	785b      	ldrb	r3, [r3, #1]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d144      	bne.n	80073c4 <lwip_netconn_do_listen+0xb8>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800733a:	7d03      	ldrb	r3, [r0, #20]
 800733c:	b11b      	cbz	r3, 8007346 <lwip_netconn_do_listen+0x3a>
          err = ERR_VAL;
 800733e:	23fa      	movs	r3, #250	; 0xfa
 8007340:	f88d 3007 	strb.w	r3, [sp, #7]
 8007344:	e7f1      	b.n	800732a <lwip_netconn_do_listen+0x1e>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8007346:	f10d 0207 	add.w	r2, sp, #7
 800734a:	21ff      	movs	r1, #255	; 0xff
 800734c:	f001 fcb6 	bl	8008cbc <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 8007350:	4605      	mov	r5, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	d0e9      	beq.n	800732a <lwip_netconn_do_listen+0x1e>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8007356:	6820      	ldr	r0, [r4, #0]
 8007358:	3010      	adds	r0, #16
 800735a:	f007 fb3f 	bl	800e9dc <sys_mbox_valid>
 800735e:	b9c8      	cbnz	r0, 8007394 <lwip_netconn_do_listen+0x88>
            err = ERR_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8007366:	6820      	ldr	r0, [r4, #0]
 8007368:	3014      	adds	r0, #20
 800736a:	f007 fb37 	bl	800e9dc <sys_mbox_valid>
 800736e:	b1d0      	cbz	r0, 80073a6 <lwip_netconn_do_listen+0x9a>
            if (err == ERR_OK) {
 8007370:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8007374:	b9fb      	cbnz	r3, 80073b6 <lwip_netconn_do_listen+0xaa>
              msg->conn->state = NETCONN_LISTEN;
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	2202      	movs	r2, #2
 800737a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800737c:	6823      	ldr	r3, [r4, #0]
 800737e:	605d      	str	r5, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8007380:	6821      	ldr	r1, [r4, #0]
 8007382:	6848      	ldr	r0, [r1, #4]
 8007384:	f001 fdb6 	bl	8008ef4 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	4914      	ldr	r1, [pc, #80]	; (80073dc <lwip_netconn_do_listen+0xd0>)
 800738c:	6858      	ldr	r0, [r3, #4]
 800738e:	f001 fe03 	bl	8008f98 <tcp_accept>
 8007392:	e7ca      	b.n	800732a <lwip_netconn_do_listen+0x1e>
              sys_mbox_free(&msg->conn->recvmbox);
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	3010      	adds	r0, #16
 8007398:	f007 fadb 	bl	800e952 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800739c:	6820      	ldr	r0, [r4, #0]
 800739e:	3010      	adds	r0, #16
 80073a0:	f007 fb21 	bl	800e9e6 <sys_mbox_set_invalid>
 80073a4:	e7dc      	b.n	8007360 <lwip_netconn_do_listen+0x54>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80073a6:	6820      	ldr	r0, [r4, #0]
 80073a8:	2106      	movs	r1, #6
 80073aa:	3014      	adds	r0, #20
 80073ac:	f007 fac4 	bl	800e938 <sys_mbox_new>
 80073b0:	f88d 0007 	strb.w	r0, [sp, #7]
 80073b4:	e7dc      	b.n	8007370 <lwip_netconn_do_listen+0x64>
              tcp_close(lpcb);
 80073b6:	4628      	mov	r0, r5
 80073b8:	f002 f98a 	bl	80096d0 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 80073bc:	6823      	ldr	r3, [r4, #0]
 80073be:	2200      	movs	r2, #0
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e7b2      	b.n	800732a <lwip_netconn_do_listen+0x1e>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80073c4:	2b02      	cmp	r3, #2
        err = ERR_OK;
 80073c6:	bf0c      	ite	eq
 80073c8:	2300      	moveq	r3, #0
        err = ERR_CONN;
 80073ca:	23f5      	movne	r3, #245	; 0xf5
 80073cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80073d0:	e7ab      	b.n	800732a <lwip_netconn_do_listen+0x1e>
    err = ERR_CONN;
 80073d2:	23f5      	movs	r3, #245	; 0xf5
 80073d4:	f88d 3007 	strb.w	r3, [sp, #7]
 80073d8:	e7a7      	b.n	800732a <lwip_netconn_do_listen+0x1e>
 80073da:	bf00      	nop
 80073dc:	08007099 	.word	0x08007099

080073e0 <lwip_netconn_do_recv>:
{
 80073e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80073e6:	6803      	ldr	r3, [r0, #0]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	b12a      	cbz	r2, 80073f8 <lwip_netconn_do_recv+0x18>
 80073ec:	4606      	mov	r6, r0
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073f4:	2b10      	cmp	r3, #16
 80073f6:	d000      	beq.n	80073fa <lwip_netconn_do_recv+0x1a>
}
 80073f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      size_t remaining = msg->msg.r.len;
 80073fa:	6884      	ldr	r4, [r0, #8]
 80073fc:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8007400:	4625      	mov	r5, r4
 8007402:	42bc      	cmp	r4, r7
 8007404:	bf28      	it	cs
 8007406:	463d      	movcs	r5, r7
        tcp_recved(msg->conn->pcb.tcp, recved);
 8007408:	6833      	ldr	r3, [r6, #0]
 800740a:	b2a9      	uxth	r1, r5
 800740c:	6858      	ldr	r0, [r3, #4]
 800740e:	f001 fcf9 	bl	8008e04 <tcp_recved>
      } while (remaining != 0);
 8007412:	1b64      	subs	r4, r4, r5
 8007414:	d1f4      	bne.n	8007400 <lwip_netconn_do_recv+0x20>
 8007416:	e7ef      	b.n	80073f8 <lwip_netconn_do_recv+0x18>

08007418 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 800741c:	6800      	ldr	r0, [r0, #0]
 800741e:	f7fe feb3 	bl	8006188 <netconn_err>
  if (err == ERR_OK) {
 8007422:	4603      	mov	r3, r0
 8007424:	b938      	cbnz	r0, 8007436 <lwip_netconn_do_write+0x1e>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	7813      	ldrb	r3, [r2, #0]
 800742a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800742e:	2b10      	cmp	r3, #16
 8007430:	d003      	beq.n	800743a <lwip_netconn_do_write+0x22>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8007432:	f06f 0305 	mvn.w	r3, #5
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8007436:	7123      	strb	r3, [r4, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8007438:	bd38      	pop	{r3, r4, r5, pc}
      if (msg->conn->state != NETCONN_NONE) {
 800743a:	7853      	ldrb	r3, [r2, #1]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d144      	bne.n	80074ca <lwip_netconn_do_write+0xb2>
      } else if (msg->conn->pcb.tcp != NULL) {
 8007440:	6853      	ldr	r3, [r2, #4]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d044      	beq.n	80074d0 <lwip_netconn_do_write+0xb8>
        msg->conn->state = NETCONN_WRITE;
 8007446:	2301      	movs	r3, #1
 8007448:	7053      	strb	r3, [r2, #1]
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	b133      	cbz	r3, 800745e <lwip_netconn_do_write+0x46>
 8007450:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <lwip_netconn_do_write+0xc0>)
 8007452:	f240 7223 	movw	r2, #1827	; 0x723
 8007456:	4921      	ldr	r1, [pc, #132]	; (80074dc <lwip_netconn_do_write+0xc4>)
 8007458:	4821      	ldr	r0, [pc, #132]	; (80074e0 <lwip_netconn_do_write+0xc8>)
 800745a:	f007 fd4b 	bl	800eef4 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800745e:	6963      	ldr	r3, [r4, #20]
 8007460:	b31b      	cbz	r3, 80074aa <lwip_netconn_do_write+0x92>
        msg->conn->current_msg = msg;
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	621c      	str	r4, [r3, #32]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007466:	2100      	movs	r1, #0
 8007468:	6820      	ldr	r0, [r4, #0]
 800746a:	f7ff f96b 	bl	8006744 <lwip_netconn_do_writemore>
 800746e:	2800      	cmp	r0, #0
 8007470:	d0e2      	beq.n	8007438 <lwip_netconn_do_write+0x20>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	785b      	ldrb	r3, [r3, #1]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d11f      	bne.n	80074ba <lwip_netconn_do_write+0xa2>
          UNLOCK_TCPIP_CORE();
 800747a:	4d1a      	ldr	r5, [pc, #104]	; (80074e4 <lwip_netconn_do_write+0xcc>)
 800747c:	4628      	mov	r0, r5
 800747e:	f007 fb17 	bl	800eab0 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007482:	6820      	ldr	r0, [r4, #0]
 8007484:	2100      	movs	r1, #0
 8007486:	300c      	adds	r0, #12
 8007488:	f007 fac5 	bl	800ea16 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800748c:	4628      	mov	r0, r5
 800748e:	f007 fb08 	bl	800eaa2 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	785b      	ldrb	r3, [r3, #1]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d1ce      	bne.n	8007438 <lwip_netconn_do_write+0x20>
 800749a:	4b0f      	ldr	r3, [pc, #60]	; (80074d8 <lwip_netconn_do_write+0xc0>)
 800749c:	f240 722c 	movw	r2, #1836	; 0x72c
 80074a0:	4911      	ldr	r1, [pc, #68]	; (80074e8 <lwip_netconn_do_write+0xd0>)
 80074a2:	480f      	ldr	r0, [pc, #60]	; (80074e0 <lwip_netconn_do_write+0xc8>)
 80074a4:	f007 fd26 	bl	800eef4 <iprintf>
 80074a8:	e7c6      	b.n	8007438 <lwip_netconn_do_write+0x20>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80074aa:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <lwip_netconn_do_write+0xc0>)
 80074ac:	f240 7224 	movw	r2, #1828	; 0x724
 80074b0:	490e      	ldr	r1, [pc, #56]	; (80074ec <lwip_netconn_do_write+0xd4>)
 80074b2:	480b      	ldr	r0, [pc, #44]	; (80074e0 <lwip_netconn_do_write+0xc8>)
 80074b4:	f007 fd1e 	bl	800eef4 <iprintf>
 80074b8:	e7d3      	b.n	8007462 <lwip_netconn_do_write+0x4a>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80074ba:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <lwip_netconn_do_write+0xc0>)
 80074bc:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80074c0:	4909      	ldr	r1, [pc, #36]	; (80074e8 <lwip_netconn_do_write+0xd0>)
 80074c2:	4807      	ldr	r0, [pc, #28]	; (80074e0 <lwip_netconn_do_write+0xc8>)
 80074c4:	f007 fd16 	bl	800eef4 <iprintf>
 80074c8:	e7d7      	b.n	800747a <lwip_netconn_do_write+0x62>
        err = ERR_INPROGRESS;
 80074ca:	f06f 0304 	mvn.w	r3, #4
 80074ce:	e7b2      	b.n	8007436 <lwip_netconn_do_write+0x1e>
        err = ERR_CONN;
 80074d0:	f06f 030a 	mvn.w	r3, #10
 80074d4:	e7af      	b.n	8007436 <lwip_netconn_do_write+0x1e>
 80074d6:	bf00      	nop
 80074d8:	08010404 	.word	0x08010404
 80074dc:	080107ec 	.word	0x080107ec
 80074e0:	08010198 	.word	0x08010198
 80074e4:	2000afe0 	.word	0x2000afe0
 80074e8:	08010808 	.word	0x08010808
 80074ec:	08010810 	.word	0x08010810

080074f0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80074f0:	b538      	push	{r3, r4, r5, lr}
 80074f2:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80074f4:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80074f6:	6843      	ldr	r3, [r0, #4]
 80074f8:	b123      	cbz	r3, 8007504 <lwip_netconn_do_close+0x14>
 80074fa:	7803      	ldrb	r3, [r0, #0]
 80074fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007500:	2b10      	cmp	r3, #16
 8007502:	d002      	beq.n	800750a <lwip_netconn_do_close+0x1a>
      return;
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8007504:	23f5      	movs	r3, #245	; 0xf5
 8007506:	7123      	strb	r3, [r4, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007508:	bd38      	pop	{r3, r4, r5, pc}
  enum netconn_state state = msg->conn->state;
 800750a:	7843      	ldrb	r3, [r0, #1]
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800750c:	7a22      	ldrb	r2, [r4, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800750e:	2a03      	cmp	r2, #3
 8007510:	d001      	beq.n	8007516 <lwip_netconn_do_close+0x26>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007512:	2b02      	cmp	r3, #2
 8007514:	d0f6      	beq.n	8007504 <lwip_netconn_do_close+0x14>
    if (state == NETCONN_CONNECT) {
 8007516:	2b03      	cmp	r3, #3
 8007518:	d004      	beq.n	8007524 <lwip_netconn_do_close+0x34>
    } else if (state == NETCONN_WRITE) {
 800751a:	2b01      	cmp	r3, #1
 800751c:	d105      	bne.n	800752a <lwip_netconn_do_close+0x3a>
      msg->err = ERR_INPROGRESS;
 800751e:	23fb      	movs	r3, #251	; 0xfb
 8007520:	7123      	strb	r3, [r4, #4]
 8007522:	e7f1      	b.n	8007508 <lwip_netconn_do_close+0x18>
      msg->err = ERR_CONN;
 8007524:	23f5      	movs	r3, #245	; 0xf5
 8007526:	7123      	strb	r3, [r4, #4]
 8007528:	e7ee      	b.n	8007508 <lwip_netconn_do_close+0x18>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800752a:	f012 0f01 	tst.w	r2, #1
 800752e:	d130      	bne.n	8007592 <lwip_netconn_do_close+0xa2>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	b133      	cbz	r3, 8007544 <lwip_netconn_do_close+0x54>
 8007536:	4b1c      	ldr	r3, [pc, #112]	; (80075a8 <lwip_netconn_do_close+0xb8>)
 8007538:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800753c:	491b      	ldr	r1, [pc, #108]	; (80075ac <lwip_netconn_do_close+0xbc>)
 800753e:	481c      	ldr	r0, [pc, #112]	; (80075b0 <lwip_netconn_do_close+0xc0>)
 8007540:	f007 fcd8 	bl	800eef4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	2204      	movs	r2, #4
 8007548:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	621c      	str	r4, [r3, #32]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800754e:	2100      	movs	r1, #0
 8007550:	6820      	ldr	r0, [r4, #0]
 8007552:	f7ff fa4f 	bl	80069f4 <lwip_netconn_do_close_internal>
 8007556:	2800      	cmp	r0, #0
 8007558:	d0d6      	beq.n	8007508 <lwip_netconn_do_close+0x18>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	785b      	ldrb	r3, [r3, #1]
 800755e:	2b04      	cmp	r3, #4
 8007560:	d11a      	bne.n	8007598 <lwip_netconn_do_close+0xa8>
        UNLOCK_TCPIP_CORE();
 8007562:	4d14      	ldr	r5, [pc, #80]	; (80075b4 <lwip_netconn_do_close+0xc4>)
 8007564:	4628      	mov	r0, r5
 8007566:	f007 faa3 	bl	800eab0 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800756a:	6820      	ldr	r0, [r4, #0]
 800756c:	2100      	movs	r1, #0
 800756e:	300c      	adds	r0, #12
 8007570:	f007 fa51 	bl	800ea16 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007574:	4628      	mov	r0, r5
 8007576:	f007 fa94 	bl	800eaa2 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d0c2      	beq.n	8007508 <lwip_netconn_do_close+0x18>
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <lwip_netconn_do_close+0xb8>)
 8007584:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007588:	490b      	ldr	r1, [pc, #44]	; (80075b8 <lwip_netconn_do_close+0xc8>)
 800758a:	4809      	ldr	r0, [pc, #36]	; (80075b0 <lwip_netconn_do_close+0xc0>)
 800758c:	f007 fcb2 	bl	800eef4 <iprintf>
 8007590:	e7ba      	b.n	8007508 <lwip_netconn_do_close+0x18>
        netconn_drain(msg->conn);
 8007592:	f7ff fd2b 	bl	8006fec <netconn_drain>
 8007596:	e7cb      	b.n	8007530 <lwip_netconn_do_close+0x40>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007598:	4b03      	ldr	r3, [pc, #12]	; (80075a8 <lwip_netconn_do_close+0xb8>)
 800759a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800759e:	4906      	ldr	r1, [pc, #24]	; (80075b8 <lwip_netconn_do_close+0xc8>)
 80075a0:	4803      	ldr	r0, [pc, #12]	; (80075b0 <lwip_netconn_do_close+0xc0>)
 80075a2:	f007 fca7 	bl	800eef4 <iprintf>
 80075a6:	e7dc      	b.n	8007562 <lwip_netconn_do_close+0x72>
 80075a8:	08010404 	.word	0x08010404
 80075ac:	080107ec 	.word	0x080107ec
 80075b0:	08010198 	.word	0x08010198
 80075b4:	2000afe0 	.word	0x2000afe0
 80075b8:	08010808 	.word	0x08010808

080075bc <netbuf_delete>:
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
  if (buf != NULL) {
 80075bc:	b168      	cbz	r0, 80075da <netbuf_delete+0x1e>
{
 80075be:	b510      	push	{r4, lr}
 80075c0:	4604      	mov	r4, r0
    if (buf->p != NULL) {
 80075c2:	6800      	ldr	r0, [r0, #0]
 80075c4:	b120      	cbz	r0, 80075d0 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 80075c6:	f000 ff9f 	bl	8008508 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80075ca:	2300      	movs	r3, #0
 80075cc:	6063      	str	r3, [r4, #4]
 80075ce:	6023      	str	r3, [r4, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80075d0:	4621      	mov	r1, r4
 80075d2:	2006      	movs	r0, #6
 80075d4:	f000 fcd6 	bl	8007f84 <memp_free>
  }
}
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	4770      	bx	lr

080075dc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80075dc:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80075de:	b140      	cbz	r0, 80075f2 <netbuf_next+0x16>
  if (buf->ptr->next == NULL) {
 80075e0:	6843      	ldr	r3, [r0, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b173      	cbz	r3, 8007604 <netbuf_next+0x28>
    return -1;
  }
  buf->ptr = buf->ptr->next;
 80075e6:	6043      	str	r3, [r0, #4]
  if (buf->ptr->next == NULL) {
 80075e8:	6818      	ldr	r0, [r3, #0]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80075ea:	fab0 f080 	clz	r0, r0
 80075ee:	0940      	lsrs	r0, r0, #5
    return 1;
  }
  return 0;
}
 80075f0:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80075f2:	4b06      	ldr	r3, [pc, #24]	; (800760c <netbuf_next+0x30>)
 80075f4:	22e0      	movs	r2, #224	; 0xe0
 80075f6:	4906      	ldr	r1, [pc, #24]	; (8007610 <netbuf_next+0x34>)
 80075f8:	4806      	ldr	r0, [pc, #24]	; (8007614 <netbuf_next+0x38>)
 80075fa:	f007 fc7b 	bl	800eef4 <iprintf>
 80075fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007602:	e7f5      	b.n	80075f0 <netbuf_next+0x14>
    return -1;
 8007604:	f04f 30ff 	mov.w	r0, #4294967295
 8007608:	e7f2      	b.n	80075f0 <netbuf_next+0x14>
 800760a:	bf00      	nop
 800760c:	08010828 	.word	0x08010828
 8007610:	0801089c 	.word	0x0801089c
 8007614:	08010198 	.word	0x08010198

08007618 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007618:	b500      	push	{lr}
 800761a:	b083      	sub	sp, #12
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800761c:	4831      	ldr	r0, [pc, #196]	; (80076e4 <tcpip_thread+0xcc>)
 800761e:	f007 fa40 	bl	800eaa2 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007622:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <tcpip_thread+0xd0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	b113      	cbz	r3, 800762e <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8007628:	4a30      	ldr	r2, [pc, #192]	; (80076ec <tcpip_thread+0xd4>)
 800762a:	6810      	ldr	r0, [r2, #0]
 800762c:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800762e:	4d2d      	ldr	r5, [pc, #180]	; (80076e4 <tcpip_thread+0xcc>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007630:	4e2f      	ldr	r6, [pc, #188]	; (80076f0 <tcpip_thread+0xd8>)
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
 8007632:	e01e      	b.n	8007672 <tcpip_thread+0x5a>
    UNLOCK_TCPIP_CORE();
 8007634:	4628      	mov	r0, r5
 8007636:	f007 fa3b 	bl	800eab0 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800763a:	2200      	movs	r2, #0
 800763c:	a901      	add	r1, sp, #4
 800763e:	4630      	mov	r0, r6
 8007640:	f007 f9a0 	bl	800e984 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007644:	4628      	mov	r0, r5
 8007646:	f007 fa2c 	bl	800eaa2 <sys_mutex_lock>

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
    if (msg == NULL) {
 800764a:	9c01      	ldr	r4, [sp, #4]
 800764c:	b34c      	cbz	r4, 80076a2 <tcpip_thread+0x8a>
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
  switch (msg->type) {
 800764e:	7823      	ldrb	r3, [r4, #0]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d03b      	beq.n	80076cc <tcpip_thread+0xb4>
 8007654:	2b02      	cmp	r3, #2
 8007656:	d041      	beq.n	80076dc <tcpip_thread+0xc4>
 8007658:	b353      	cbz	r3, 80076b0 <tcpip_thread+0x98>
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800765a:	4b26      	ldr	r3, [pc, #152]	; (80076f4 <tcpip_thread+0xdc>)
 800765c:	22cf      	movs	r2, #207	; 0xcf
 800765e:	4926      	ldr	r1, [pc, #152]	; (80076f8 <tcpip_thread+0xe0>)
 8007660:	4826      	ldr	r0, [pc, #152]	; (80076fc <tcpip_thread+0xe4>)
 8007662:	f007 fc47 	bl	800eef4 <iprintf>
      break;
 8007666:	e004      	b.n	8007672 <tcpip_thread+0x5a>
    sys_check_timeouts();
 8007668:	f005 fb44 	bl	800ccf4 <sys_check_timeouts>
    goto again;
 800766c:	e001      	b.n	8007672 <tcpip_thread+0x5a>
    sys_check_timeouts();
 800766e:	f005 fb41 	bl	800ccf4 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8007672:	f005 fb63 	bl	800cd3c <sys_timeouts_sleeptime>
 8007676:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007678:	f1b0 3fff 	cmp.w	r0, #4294967295
 800767c:	d0da      	beq.n	8007634 <tcpip_thread+0x1c>
  } else if (sleeptime == 0) {
 800767e:	2800      	cmp	r0, #0
 8007680:	d0f2      	beq.n	8007668 <tcpip_thread+0x50>
  UNLOCK_TCPIP_CORE();
 8007682:	4628      	mov	r0, r5
 8007684:	f007 fa14 	bl	800eab0 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007688:	4622      	mov	r2, r4
 800768a:	a901      	add	r1, sp, #4
 800768c:	4630      	mov	r0, r6
 800768e:	f007 f979 	bl	800e984 <sys_arch_mbox_fetch>
 8007692:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8007694:	4628      	mov	r0, r5
 8007696:	f007 fa04 	bl	800eaa2 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800769a:	f1b4 3fff 	cmp.w	r4, #4294967295
 800769e:	d0e6      	beq.n	800766e <tcpip_thread+0x56>
 80076a0:	e7d3      	b.n	800764a <tcpip_thread+0x32>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80076a2:	4b14      	ldr	r3, [pc, #80]	; (80076f4 <tcpip_thread+0xdc>)
 80076a4:	2291      	movs	r2, #145	; 0x91
 80076a6:	4914      	ldr	r1, [pc, #80]	; (80076f8 <tcpip_thread+0xe0>)
 80076a8:	4814      	ldr	r0, [pc, #80]	; (80076fc <tcpip_thread+0xe4>)
 80076aa:	f007 fc23 	bl	800eef4 <iprintf>
      continue;
 80076ae:	e7e0      	b.n	8007672 <tcpip_thread+0x5a>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80076b0:	68e3      	ldr	r3, [r4, #12]
 80076b2:	68a1      	ldr	r1, [r4, #8]
 80076b4:	6860      	ldr	r0, [r4, #4]
 80076b6:	4798      	blx	r3
 80076b8:	b920      	cbnz	r0, 80076c4 <tcpip_thread+0xac>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80076ba:	4621      	mov	r1, r4
 80076bc:	2009      	movs	r0, #9
 80076be:	f000 fc61 	bl	8007f84 <memp_free>
      break;
 80076c2:	e7d6      	b.n	8007672 <tcpip_thread+0x5a>
        pbuf_free(msg->msg.inp.p);
 80076c4:	6860      	ldr	r0, [r4, #4]
 80076c6:	f000 ff1f 	bl	8008508 <pbuf_free>
 80076ca:	e7f6      	b.n	80076ba <tcpip_thread+0xa2>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	68a0      	ldr	r0, [r4, #8]
 80076d0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80076d2:	4621      	mov	r1, r4
 80076d4:	2008      	movs	r0, #8
 80076d6:	f000 fc55 	bl	8007f84 <memp_free>
      break;
 80076da:	e7ca      	b.n	8007672 <tcpip_thread+0x5a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 80076dc:	6863      	ldr	r3, [r4, #4]
 80076de:	68a0      	ldr	r0, [r4, #8]
 80076e0:	4798      	blx	r3
      break;
 80076e2:	e7c6      	b.n	8007672 <tcpip_thread+0x5a>
 80076e4:	2000afe0 	.word	0x2000afe0
 80076e8:	2000afe4 	.word	0x2000afe4
 80076ec:	2000afe8 	.word	0x2000afe8
 80076f0:	2000afec 	.word	0x2000afec
 80076f4:	080108b8 	.word	0x080108b8
 80076f8:	080108e8 	.word	0x080108e8
 80076fc:	08010198 	.word	0x08010198

08007700 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007702:	4607      	mov	r7, r0
 8007704:	460e      	mov	r6, r1
 8007706:	4615      	mov	r5, r2
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007708:	4812      	ldr	r0, [pc, #72]	; (8007754 <tcpip_inpkt+0x54>)
 800770a:	f007 f967 	bl	800e9dc <sys_mbox_valid>
 800770e:	b178      	cbz	r0, 8007730 <tcpip_inpkt+0x30>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007710:	2009      	movs	r0, #9
 8007712:	f000 fc07 	bl	8007f24 <memp_malloc>
  if (msg == NULL) {
 8007716:	4604      	mov	r4, r0
 8007718:	b1c0      	cbz	r0, 800774c <tcpip_inpkt+0x4c>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800771a:	2300      	movs	r3, #0
 800771c:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.p = p;
 800771e:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8007720:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
 8007722:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007724:	4601      	mov	r1, r0
 8007726:	480b      	ldr	r0, [pc, #44]	; (8007754 <tcpip_inpkt+0x54>)
 8007728:	f007 f91c 	bl	800e964 <sys_mbox_trypost>
 800772c:	b938      	cbnz	r0, 800773e <tcpip_inpkt+0x3e>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800772e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007730:	4b09      	ldr	r3, [pc, #36]	; (8007758 <tcpip_inpkt+0x58>)
 8007732:	22fc      	movs	r2, #252	; 0xfc
 8007734:	4909      	ldr	r1, [pc, #36]	; (800775c <tcpip_inpkt+0x5c>)
 8007736:	480a      	ldr	r0, [pc, #40]	; (8007760 <tcpip_inpkt+0x60>)
 8007738:	f007 fbdc 	bl	800eef4 <iprintf>
 800773c:	e7e8      	b.n	8007710 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800773e:	4621      	mov	r1, r4
 8007740:	2009      	movs	r0, #9
 8007742:	f000 fc1f 	bl	8007f84 <memp_free>
    return ERR_MEM;
 8007746:	f04f 30ff 	mov.w	r0, #4294967295
 800774a:	e7f0      	b.n	800772e <tcpip_inpkt+0x2e>
    return ERR_MEM;
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e7ed      	b.n	800772e <tcpip_inpkt+0x2e>
 8007752:	bf00      	nop
 8007754:	2000afec 	.word	0x2000afec
 8007758:	080108b8 	.word	0x080108b8
 800775c:	08010908 	.word	0x08010908
 8007760:	08010198 	.word	0x08010198

08007764 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007764:	b508      	push	{r3, lr}
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007766:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 800776a:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 800776e:	bf14      	ite	ne
 8007770:	4a02      	ldrne	r2, [pc, #8]	; (800777c <tcpip_input+0x18>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007772:	4a03      	ldreq	r2, [pc, #12]	; (8007780 <tcpip_input+0x1c>)
 8007774:	f7ff ffc4 	bl	8007700 <tcpip_inpkt>
}
 8007778:	bd08      	pop	{r3, pc}
 800777a:	bf00      	nop
 800777c:	0800e821 	.word	0x0800e821
 8007780:	0800dc5d 	.word	0x0800dc5d

08007784 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	4606      	mov	r6, r0
 8007788:	460d      	mov	r5, r1
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800778a:	4812      	ldr	r0, [pc, #72]	; (80077d4 <tcpip_try_callback+0x50>)
 800778c:	f007 f926 	bl	800e9dc <sys_mbox_valid>
 8007790:	b170      	cbz	r0, 80077b0 <tcpip_try_callback+0x2c>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007792:	2008      	movs	r0, #8
 8007794:	f000 fbc6 	bl	8007f24 <memp_malloc>
  if (msg == NULL) {
 8007798:	4604      	mov	r4, r0
 800779a:	b1c0      	cbz	r0, 80077ce <tcpip_try_callback+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800779c:	2301      	movs	r3, #1
 800779e:	7003      	strb	r3, [r0, #0]
  msg->msg.cb.function = function;
 80077a0:	6046      	str	r6, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80077a2:	6085      	str	r5, [r0, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80077a4:	4601      	mov	r1, r0
 80077a6:	480b      	ldr	r0, [pc, #44]	; (80077d4 <tcpip_try_callback+0x50>)
 80077a8:	f007 f8dc 	bl	800e964 <sys_mbox_trypost>
 80077ac:	b940      	cbnz	r0, 80077c0 <tcpip_try_callback+0x3c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
    return ERR_MEM;
  }
  return ERR_OK;
}
 80077ae:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80077b0:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <tcpip_try_callback+0x54>)
 80077b2:	f240 125d 	movw	r2, #349	; 0x15d
 80077b6:	4909      	ldr	r1, [pc, #36]	; (80077dc <tcpip_try_callback+0x58>)
 80077b8:	4809      	ldr	r0, [pc, #36]	; (80077e0 <tcpip_try_callback+0x5c>)
 80077ba:	f007 fb9b 	bl	800eef4 <iprintf>
 80077be:	e7e8      	b.n	8007792 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80077c0:	4621      	mov	r1, r4
 80077c2:	2008      	movs	r0, #8
 80077c4:	f000 fbde 	bl	8007f84 <memp_free>
    return ERR_MEM;
 80077c8:	f04f 30ff 	mov.w	r0, #4294967295
 80077cc:	e7ef      	b.n	80077ae <tcpip_try_callback+0x2a>
    return ERR_MEM;
 80077ce:	f04f 30ff 	mov.w	r0, #4294967295
 80077d2:	e7ec      	b.n	80077ae <tcpip_try_callback+0x2a>
 80077d4:	2000afec 	.word	0x2000afec
 80077d8:	080108b8 	.word	0x080108b8
 80077dc:	08010908 	.word	0x08010908
 80077e0:	08010198 	.word	0x08010198

080077e4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80077e4:	b570      	push	{r4, r5, r6, lr}
 80077e6:	4604      	mov	r4, r0
 80077e8:	460d      	mov	r5, r1
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80077ea:	4e05      	ldr	r6, [pc, #20]	; (8007800 <tcpip_send_msg_wait_sem+0x1c>)
 80077ec:	4630      	mov	r0, r6
 80077ee:	f007 f958 	bl	800eaa2 <sys_mutex_lock>
  fn(apimsg);
 80077f2:	4628      	mov	r0, r5
 80077f4:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 80077f6:	4630      	mov	r0, r6
 80077f8:	f007 f95a 	bl	800eab0 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80077fc:	2000      	movs	r0, #0
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	2000afe0 	.word	0x2000afe0

08007804 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007804:	b530      	push	{r4, r5, lr}
 8007806:	b083      	sub	sp, #12
 8007808:	4605      	mov	r5, r0
 800780a:	460c      	mov	r4, r1
  lwip_init();
 800780c:	f000 f84d 	bl	80078aa <lwip_init>

  tcpip_init_done = initfunc;
 8007810:	4b13      	ldr	r3, [pc, #76]	; (8007860 <tcpip_init+0x5c>)
 8007812:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8007814:	4b13      	ldr	r3, [pc, #76]	; (8007864 <tcpip_init+0x60>)
 8007816:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007818:	2106      	movs	r1, #6
 800781a:	4813      	ldr	r0, [pc, #76]	; (8007868 <tcpip_init+0x64>)
 800781c:	f007 f88c 	bl	800e938 <sys_mbox_new>
 8007820:	b970      	cbnz	r0, 8007840 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8007822:	4812      	ldr	r0, [pc, #72]	; (800786c <tcpip_init+0x68>)
 8007824:	f007 f932 	bl	800ea8c <sys_mutex_new>
 8007828:	b990      	cbnz	r0, 8007850 <tcpip_init+0x4c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800782a:	2318      	movs	r3, #24
 800782c:	9300      	str	r3, [sp, #0]
 800782e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007832:	2200      	movs	r2, #0
 8007834:	490e      	ldr	r1, [pc, #56]	; (8007870 <tcpip_init+0x6c>)
 8007836:	480f      	ldr	r0, [pc, #60]	; (8007874 <tcpip_init+0x70>)
 8007838:	f007 f93f 	bl	800eaba <sys_thread_new>
}
 800783c:	b003      	add	sp, #12
 800783e:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8007840:	4b0d      	ldr	r3, [pc, #52]	; (8007878 <tcpip_init+0x74>)
 8007842:	f240 2261 	movw	r2, #609	; 0x261
 8007846:	490d      	ldr	r1, [pc, #52]	; (800787c <tcpip_init+0x78>)
 8007848:	480d      	ldr	r0, [pc, #52]	; (8007880 <tcpip_init+0x7c>)
 800784a:	f007 fb53 	bl	800eef4 <iprintf>
 800784e:	e7e8      	b.n	8007822 <tcpip_init+0x1e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8007850:	4b09      	ldr	r3, [pc, #36]	; (8007878 <tcpip_init+0x74>)
 8007852:	f240 2265 	movw	r2, #613	; 0x265
 8007856:	490b      	ldr	r1, [pc, #44]	; (8007884 <tcpip_init+0x80>)
 8007858:	4809      	ldr	r0, [pc, #36]	; (8007880 <tcpip_init+0x7c>)
 800785a:	f007 fb4b 	bl	800eef4 <iprintf>
 800785e:	e7e4      	b.n	800782a <tcpip_init+0x26>
 8007860:	2000afe4 	.word	0x2000afe4
 8007864:	2000afe8 	.word	0x2000afe8
 8007868:	2000afec 	.word	0x2000afec
 800786c:	2000afe0 	.word	0x2000afe0
 8007870:	08007619 	.word	0x08007619
 8007874:	08010960 	.word	0x08010960
 8007878:	080108b8 	.word	0x080108b8
 800787c:	08010918 	.word	0x08010918
 8007880:	08010198 	.word	0x08010198
 8007884:	0801093c 	.word	0x0801093c

08007888 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8007888:	0a03      	lsrs	r3, r0, #8
 800788a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 800788e:	b280      	uxth	r0, r0
 8007890:	4770      	bx	lr

08007892 <lwip_htonl>:
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
 8007892:	0e03      	lsrs	r3, r0, #24
 8007894:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007898:	0202      	lsls	r2, r0, #8
 800789a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 800789e:	4313      	orrs	r3, r2
 80078a0:	0a00      	lsrs	r0, r0, #8
 80078a2:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
}
 80078a6:	4318      	orrs	r0, r3
 80078a8:	4770      	bx	lr

080078aa <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80078aa:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80078ac:	f007 f8e4 	bl	800ea78 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80078b0:	f000 f80c 	bl	80078cc <mem_init>
  memp_init();
 80078b4:	f000 fb12 	bl	8007edc <memp_init>
  pbuf_init();
  netif_init();
 80078b8:	f000 fbde 	bl	8008078 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80078bc:	f005 fa62 	bl	800cd84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80078c0:	f001 f974 	bl	8008bac <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80078c4:	f005 fa00 	bl	800ccc8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80078c8:	bd08      	pop	{r3, pc}
	...

080078cc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80078cc:	b508      	push	{r3, lr}

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80078ce:	4b13      	ldr	r3, [pc, #76]	; (800791c <mem_init+0x50>)
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	4a12      	ldr	r2, [pc, #72]	; (8007920 <mem_init+0x54>)
 80078d6:	6013      	str	r3, [r2, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 80078d8:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 80078dc:	8019      	strh	r1, [r3, #0]
  mem->prev = 0;
 80078de:	2200      	movs	r2, #0
 80078e0:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80078e2:	711a      	strb	r2, [r3, #4]
  return (struct mem *)(void *)&ram[ptr];
 80078e4:	1858      	adds	r0, r3, r1
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80078e6:	4a0f      	ldr	r2, [pc, #60]	; (8007924 <mem_init+0x58>)
 80078e8:	6010      	str	r0, [r2, #0]
  ram_end->used = 1;
 80078ea:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 80078ee:	2001      	movs	r0, #1
 80078f0:	f882 0804 	strb.w	r0, [r2, #2052]	; 0x804
  ram_end->next = MEM_SIZE_ALIGNED;
 80078f4:	f8a2 1800 	strh.w	r1, [r2, #2048]	; 0x800
  ram_end->prev = MEM_SIZE_ALIGNED;
 80078f8:	f8a2 1802 	strh.w	r1, [r2, #2050]	; 0x802
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80078fc:	4a0a      	ldr	r2, [pc, #40]	; (8007928 <mem_init+0x5c>)
 80078fe:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007900:	480a      	ldr	r0, [pc, #40]	; (800792c <mem_init+0x60>)
 8007902:	f007 f8c3 	bl	800ea8c <sys_mutex_new>
 8007906:	b900      	cbnz	r0, 800790a <mem_init+0x3e>
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007908:	bd08      	pop	{r3, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <mem_init+0x64>)
 800790c:	f240 221f 	movw	r2, #543	; 0x21f
 8007910:	4908      	ldr	r1, [pc, #32]	; (8007934 <mem_init+0x68>)
 8007912:	4809      	ldr	r0, [pc, #36]	; (8007938 <mem_init+0x6c>)
 8007914:	f007 faee 	bl	800eef4 <iprintf>
}
 8007918:	e7f6      	b.n	8007908 <mem_init+0x3c>
 800791a:	bf00      	nop
 800791c:	2000b01b 	.word	0x2000b01b
 8007920:	2000b010 	.word	0x2000b010
 8007924:	2000b014 	.word	0x2000b014
 8007928:	2000b008 	.word	0x2000b008
 800792c:	2000b00c 	.word	0x2000b00c
 8007930:	08010970 	.word	0x08010970
 8007934:	080109a0 	.word	0x080109a0
 8007938:	08010198 	.word	0x08010198

0800793c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800793c:	2800      	cmp	r0, #0
 800793e:	f000 80da 	beq.w	8007af6 <mem_free+0x1ba>
{
 8007942:	b538      	push	{r3, r4, r5, lr}
 8007944:	4604      	mov	r4, r0
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007946:	f010 0f03 	tst.w	r0, #3
 800794a:	d117      	bne.n	800797c <mem_free+0x40>
    return;
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800794c:	f1a0 0508 	sub.w	r5, r0, #8

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007950:	4b69      	ldr	r3, [pc, #420]	; (8007af8 <mem_free+0x1bc>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	42ab      	cmp	r3, r5
 8007956:	d805      	bhi.n	8007964 <mem_free+0x28>
 8007958:	f100 030c 	add.w	r3, r0, #12
 800795c:	4a67      	ldr	r2, [pc, #412]	; (8007afc <mem_free+0x1c0>)
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d217      	bcs.n	8007994 <mem_free+0x58>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007964:	4b66      	ldr	r3, [pc, #408]	; (8007b00 <mem_free+0x1c4>)
 8007966:	f240 227f 	movw	r2, #639	; 0x27f
 800796a:	4966      	ldr	r1, [pc, #408]	; (8007b04 <mem_free+0x1c8>)
 800796c:	4866      	ldr	r0, [pc, #408]	; (8007b08 <mem_free+0x1cc>)
 800796e:	f007 fac1 	bl	800eef4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007972:	f007 f8b9 	bl	800eae8 <sys_arch_protect>
 8007976:	f007 f8c3 	bl	800eb00 <sys_arch_unprotect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800797a:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800797c:	4b60      	ldr	r3, [pc, #384]	; (8007b00 <mem_free+0x1c4>)
 800797e:	f240 2273 	movw	r2, #627	; 0x273
 8007982:	4962      	ldr	r1, [pc, #392]	; (8007b0c <mem_free+0x1d0>)
 8007984:	4860      	ldr	r0, [pc, #384]	; (8007b08 <mem_free+0x1cc>)
 8007986:	f007 fab5 	bl	800eef4 <iprintf>
    MEM_STATS_INC_LOCKED(illegal);
 800798a:	f007 f8ad 	bl	800eae8 <sys_arch_protect>
 800798e:	f007 f8b7 	bl	800eb00 <sys_arch_unprotect>
    return;
 8007992:	e7f2      	b.n	800797a <mem_free+0x3e>
  LWIP_MEM_FREE_PROTECT();
 8007994:	485e      	ldr	r0, [pc, #376]	; (8007b10 <mem_free+0x1d4>)
 8007996:	f007 f884 	bl	800eaa2 <sys_mutex_lock>
  if (!mem->used) {
 800799a:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d062      	beq.n	8007a68 <mem_free+0x12c>
  nmem = ptr_to_mem(mem->next);
 80079a2:	f834 3c08 	ldrh.w	r3, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80079a6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80079aa:	f200 8095 	bhi.w	8007ad8 <mem_free+0x19c>
  pmem = ptr_to_mem(mem->prev);
 80079ae:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80079b2:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 80079b6:	f200 808f 	bhi.w	8007ad8 <mem_free+0x19c>
  return (mem_size_t)((u8_t *)mem - ram);
 80079ba:	4a4f      	ldr	r2, [pc, #316]	; (8007af8 <mem_free+0x1bc>)
 80079bc:	6812      	ldr	r2, [r2, #0]
 80079be:	1aa9      	subs	r1, r5, r2
 80079c0:	b289      	uxth	r1, r1
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80079c2:	4288      	cmp	r0, r1
 80079c4:	d003      	beq.n	80079ce <mem_free+0x92>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80079c6:	5a10      	ldrh	r0, [r2, r0]
 80079c8:	4288      	cmp	r0, r1
 80079ca:	f040 8085 	bne.w	8007ad8 <mem_free+0x19c>
  return (struct mem *)(void *)&ram[ptr];
 80079ce:	4413      	add	r3, r2
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80079d0:	484a      	ldr	r0, [pc, #296]	; (8007afc <mem_free+0x1c0>)
 80079d2:	6800      	ldr	r0, [r0, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80079d4:	4298      	cmp	r0, r3
 80079d6:	d002      	beq.n	80079de <mem_free+0xa2>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	428b      	cmp	r3, r1
 80079dc:	d17c      	bne.n	8007ad8 <mem_free+0x19c>
  mem->used = 0;
 80079de:	2300      	movs	r3, #0
 80079e0:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 80079e4:	4b4b      	ldr	r3, [pc, #300]	; (8007b14 <mem_free+0x1d8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	42ab      	cmp	r3, r5
 80079ea:	d901      	bls.n	80079f0 <mem_free+0xb4>
    lfree = mem;
 80079ec:	4b49      	ldr	r3, [pc, #292]	; (8007b14 <mem_free+0x1d8>)
 80079ee:	601d      	str	r5, [r3, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80079f0:	4295      	cmp	r5, r2
 80079f2:	d348      	bcc.n	8007a86 <mem_free+0x14a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80079f4:	4285      	cmp	r5, r0
 80079f6:	d251      	bcs.n	8007a9c <mem_free+0x160>
  return (struct mem *)(void *)&ram[ptr];
 80079f8:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <mem_free+0x1bc>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007a00:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007a02:	4295      	cmp	r5, r2
 8007a04:	d015      	beq.n	8007a32 <mem_free+0xf6>
 8007a06:	7910      	ldrb	r0, [r2, #4]
 8007a08:	b998      	cbnz	r0, 8007a32 <mem_free+0xf6>
 8007a0a:	483c      	ldr	r0, [pc, #240]	; (8007afc <mem_free+0x1c0>)
 8007a0c:	6800      	ldr	r0, [r0, #0]
 8007a0e:	4290      	cmp	r0, r2
 8007a10:	d00f      	beq.n	8007a32 <mem_free+0xf6>
    if (lfree == nmem) {
 8007a12:	4840      	ldr	r0, [pc, #256]	; (8007b14 <mem_free+0x1d8>)
 8007a14:	6800      	ldr	r0, [r0, #0]
 8007a16:	4290      	cmp	r0, r2
      lfree = mem;
 8007a18:	bf04      	itt	eq
 8007a1a:	4a3e      	ldreq	r2, [pc, #248]	; (8007b14 <mem_free+0x1d8>)
 8007a1c:	6015      	streq	r5, [r2, #0]
    mem->next = nmem->next;
 8007a1e:	5a5a      	ldrh	r2, [r3, r1]
 8007a20:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007a24:	5a5a      	ldrh	r2, [r3, r1]
 8007a26:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007a2a:	d002      	beq.n	8007a32 <mem_free+0xf6>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007a2c:	441a      	add	r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007a2e:	1ae9      	subs	r1, r5, r3
 8007a30:	8051      	strh	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8007a32:	f834 1c06 	ldrh.w	r1, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007a36:	185a      	adds	r2, r3, r1
  if (pmem != mem && pmem->used == 0) {
 8007a38:	4295      	cmp	r5, r2
 8007a3a:	d011      	beq.n	8007a60 <mem_free+0x124>
 8007a3c:	7910      	ldrb	r0, [r2, #4]
 8007a3e:	b978      	cbnz	r0, 8007a60 <mem_free+0x124>
    if (lfree == mem) {
 8007a40:	4834      	ldr	r0, [pc, #208]	; (8007b14 <mem_free+0x1d8>)
 8007a42:	6800      	ldr	r0, [r0, #0]
 8007a44:	4285      	cmp	r5, r0
      lfree = pmem;
 8007a46:	bf04      	itt	eq
 8007a48:	4832      	ldreq	r0, [pc, #200]	; (8007b14 <mem_free+0x1d8>)
 8007a4a:	6002      	streq	r2, [r0, #0]
    pmem->next = mem->next;
 8007a4c:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007a50:	525a      	strh	r2, [r3, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007a52:	f834 2c08 	ldrh.w	r2, [r4, #-8]
 8007a56:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007a5a:	bf1c      	itt	ne
 8007a5c:	189b      	addne	r3, r3, r2
 8007a5e:	8059      	strhne	r1, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007a60:	482b      	ldr	r0, [pc, #172]	; (8007b10 <mem_free+0x1d4>)
 8007a62:	f007 f825 	bl	800eab0 <sys_mutex_unlock>
 8007a66:	e788      	b.n	800797a <mem_free+0x3e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007a68:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <mem_free+0x1c4>)
 8007a6a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007a6e:	492a      	ldr	r1, [pc, #168]	; (8007b18 <mem_free+0x1dc>)
 8007a70:	4825      	ldr	r0, [pc, #148]	; (8007b08 <mem_free+0x1cc>)
 8007a72:	f007 fa3f 	bl	800eef4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007a76:	4826      	ldr	r0, [pc, #152]	; (8007b10 <mem_free+0x1d4>)
 8007a78:	f007 f81a 	bl	800eab0 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007a7c:	f007 f834 	bl	800eae8 <sys_arch_protect>
 8007a80:	f007 f83e 	bl	800eb00 <sys_arch_unprotect>
    return;
 8007a84:	e779      	b.n	800797a <mem_free+0x3e>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007a86:	4b1e      	ldr	r3, [pc, #120]	; (8007b00 <mem_free+0x1c4>)
 8007a88:	f240 12df 	movw	r2, #479	; 0x1df
 8007a8c:	4923      	ldr	r1, [pc, #140]	; (8007b1c <mem_free+0x1e0>)
 8007a8e:	481e      	ldr	r0, [pc, #120]	; (8007b08 <mem_free+0x1cc>)
 8007a90:	f007 fa30 	bl	800eef4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007a94:	4b19      	ldr	r3, [pc, #100]	; (8007afc <mem_free+0x1c0>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	429d      	cmp	r5, r3
 8007a9a:	d306      	bcc.n	8007aaa <mem_free+0x16e>
 8007a9c:	4b18      	ldr	r3, [pc, #96]	; (8007b00 <mem_free+0x1c4>)
 8007a9e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007aa2:	491f      	ldr	r1, [pc, #124]	; (8007b20 <mem_free+0x1e4>)
 8007aa4:	4818      	ldr	r0, [pc, #96]	; (8007b08 <mem_free+0x1cc>)
 8007aa6:	f007 fa25 	bl	800eef4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007aaa:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007aae:	b133      	cbz	r3, 8007abe <mem_free+0x182>
 8007ab0:	4b13      	ldr	r3, [pc, #76]	; (8007b00 <mem_free+0x1c4>)
 8007ab2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007ab6:	491b      	ldr	r1, [pc, #108]	; (8007b24 <mem_free+0x1e8>)
 8007ab8:	4813      	ldr	r0, [pc, #76]	; (8007b08 <mem_free+0x1cc>)
 8007aba:	f007 fa1b 	bl	800eef4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007abe:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007ac2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007ac6:	d997      	bls.n	80079f8 <mem_free+0xbc>
 8007ac8:	4b0d      	ldr	r3, [pc, #52]	; (8007b00 <mem_free+0x1c4>)
 8007aca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007ace:	4916      	ldr	r1, [pc, #88]	; (8007b28 <mem_free+0x1ec>)
 8007ad0:	480d      	ldr	r0, [pc, #52]	; (8007b08 <mem_free+0x1cc>)
 8007ad2:	f007 fa0f 	bl	800eef4 <iprintf>
 8007ad6:	e78f      	b.n	80079f8 <mem_free+0xbc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007ad8:	4b09      	ldr	r3, [pc, #36]	; (8007b00 <mem_free+0x1c4>)
 8007ada:	f240 2295 	movw	r2, #661	; 0x295
 8007ade:	4913      	ldr	r1, [pc, #76]	; (8007b2c <mem_free+0x1f0>)
 8007ae0:	4809      	ldr	r0, [pc, #36]	; (8007b08 <mem_free+0x1cc>)
 8007ae2:	f007 fa07 	bl	800eef4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007ae6:	480a      	ldr	r0, [pc, #40]	; (8007b10 <mem_free+0x1d4>)
 8007ae8:	f006 ffe2 	bl	800eab0 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007aec:	f006 fffc 	bl	800eae8 <sys_arch_protect>
 8007af0:	f007 f806 	bl	800eb00 <sys_arch_unprotect>
    return;
 8007af4:	e741      	b.n	800797a <mem_free+0x3e>
 8007af6:	4770      	bx	lr
 8007af8:	2000b010 	.word	0x2000b010
 8007afc:	2000b014 	.word	0x2000b014
 8007b00:	08010970 	.word	0x08010970
 8007b04:	080109e0 	.word	0x080109e0
 8007b08:	08010198 	.word	0x08010198
 8007b0c:	080109bc 	.word	0x080109bc
 8007b10:	2000b00c 	.word	0x2000b00c
 8007b14:	2000b008 	.word	0x2000b008
 8007b18:	080109fc 	.word	0x080109fc
 8007b1c:	08010a24 	.word	0x08010a24
 8007b20:	08010a3c 	.word	0x08010a3c
 8007b24:	08010a58 	.word	0x08010a58
 8007b28:	08010a74 	.word	0x08010a74
 8007b2c:	08010aa0 	.word	0x08010aa0

08007b30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b34:	4605      	mov	r5, r0
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007b36:	1ccc      	adds	r4, r1, #3
 8007b38:	f024 0403 	bic.w	r4, r4, #3
 8007b3c:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007b3e:	2c0b      	cmp	r4, #11
 8007b40:	d904      	bls.n	8007b4c <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007b42:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8007b46:	d902      	bls.n	8007b4e <mem_trim+0x1e>
    return NULL;
 8007b48:	2000      	movs	r0, #0
 8007b4a:	e01f      	b.n	8007b8c <mem_trim+0x5c>
    newsize = MIN_SIZE_ALIGNED;
 8007b4c:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007b4e:	42a1      	cmp	r1, r4
 8007b50:	f200 809a 	bhi.w	8007c88 <mem_trim+0x158>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007b54:	4b4e      	ldr	r3, [pc, #312]	; (8007c90 <mem_trim+0x160>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	42ab      	cmp	r3, r5
 8007b5a:	d803      	bhi.n	8007b64 <mem_trim+0x34>
 8007b5c:	4a4d      	ldr	r2, [pc, #308]	; (8007c94 <mem_trim+0x164>)
 8007b5e:	6812      	ldr	r2, [r2, #0]
 8007b60:	42aa      	cmp	r2, r5
 8007b62:	d815      	bhi.n	8007b90 <mem_trim+0x60>
 8007b64:	4b4c      	ldr	r3, [pc, #304]	; (8007c98 <mem_trim+0x168>)
 8007b66:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007b6a:	494c      	ldr	r1, [pc, #304]	; (8007c9c <mem_trim+0x16c>)
 8007b6c:	484c      	ldr	r0, [pc, #304]	; (8007ca0 <mem_trim+0x170>)
 8007b6e:	f007 f9c1 	bl	800eef4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007b72:	4b47      	ldr	r3, [pc, #284]	; (8007c90 <mem_trim+0x160>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	42ab      	cmp	r3, r5
 8007b78:	d803      	bhi.n	8007b82 <mem_trim+0x52>
 8007b7a:	4a46      	ldr	r2, [pc, #280]	; (8007c94 <mem_trim+0x164>)
 8007b7c:	6812      	ldr	r2, [r2, #0]
 8007b7e:	42aa      	cmp	r2, r5
 8007b80:	d806      	bhi.n	8007b90 <mem_trim+0x60>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007b82:	f006 ffb1 	bl	800eae8 <sys_arch_protect>
 8007b86:	f006 ffbb 	bl	800eb00 <sys_arch_unprotect>
    return rmem;
 8007b8a:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007b90:	f1a5 0708 	sub.w	r7, r5, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007b94:	1afb      	subs	r3, r7, r3
 8007b96:	b29f      	uxth	r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007b98:	f835 6c08 	ldrh.w	r6, [r5, #-8]
 8007b9c:	3e08      	subs	r6, #8
 8007b9e:	1bf6      	subs	r6, r6, r7
 8007ba0:	b2b6      	uxth	r6, r6
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007ba2:	42a6      	cmp	r6, r4
 8007ba4:	d32f      	bcc.n	8007c06 <mem_trim+0xd6>
  if (newsize == size) {
 8007ba6:	42a6      	cmp	r6, r4
 8007ba8:	d070      	beq.n	8007c8c <mem_trim+0x15c>
  LWIP_MEM_FREE_PROTECT();
 8007baa:	483e      	ldr	r0, [pc, #248]	; (8007ca4 <mem_trim+0x174>)
 8007bac:	f006 ff79 	bl	800eaa2 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007bb0:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007bb4:	4b36      	ldr	r3, [pc, #216]	; (8007c90 <mem_trim+0x160>)
 8007bb6:	f8d3 a000 	ldr.w	sl, [r3]
 8007bba:	eb0a 0908 	add.w	r9, sl, r8
  if (mem2->used == 0) {
 8007bbe:	f899 3004 	ldrb.w	r3, [r9, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d136      	bne.n	8007c34 <mem_trim+0x104>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007bc6:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007bca:	d025      	beq.n	8007c18 <mem_trim+0xe8>
    next = mem2->next;
 8007bcc:	f83a 1008 	ldrh.w	r1, [sl, r8]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007bd0:	3408      	adds	r4, #8
 8007bd2:	443c      	add	r4, r7
 8007bd4:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8007bd6:	4b34      	ldr	r3, [pc, #208]	; (8007ca8 <mem_trim+0x178>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	454b      	cmp	r3, r9
 8007bdc:	d024      	beq.n	8007c28 <mem_trim+0xf8>
  return (struct mem *)(void *)&ram[ptr];
 8007bde:	4b2c      	ldr	r3, [pc, #176]	; (8007c90 <mem_trim+0x160>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	191a      	adds	r2, r3, r4
    mem2->used = 0;
 8007be4:	2000      	movs	r0, #0
 8007be6:	7110      	strb	r0, [r2, #4]
    mem2->next = next;
 8007be8:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007bea:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007bec:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007bf0:	5b1a      	ldrh	r2, [r3, r4]
 8007bf2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007bf6:	d001      	beq.n	8007bfc <mem_trim+0xcc>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007bf8:	4413      	add	r3, r2
 8007bfa:	805c      	strh	r4, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007bfc:	4829      	ldr	r0, [pc, #164]	; (8007ca4 <mem_trim+0x174>)
 8007bfe:	f006 ff57 	bl	800eab0 <sys_mutex_unlock>
  return rmem;
 8007c02:	4628      	mov	r0, r5
 8007c04:	e7c2      	b.n	8007b8c <mem_trim+0x5c>
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007c06:	4b24      	ldr	r3, [pc, #144]	; (8007c98 <mem_trim+0x168>)
 8007c08:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007c0c:	4927      	ldr	r1, [pc, #156]	; (8007cac <mem_trim+0x17c>)
 8007c0e:	4824      	ldr	r0, [pc, #144]	; (8007ca0 <mem_trim+0x170>)
 8007c10:	f007 f970 	bl	800eef4 <iprintf>
    return NULL;
 8007c14:	2000      	movs	r0, #0
 8007c16:	e7b9      	b.n	8007b8c <mem_trim+0x5c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c18:	4b1f      	ldr	r3, [pc, #124]	; (8007c98 <mem_trim+0x168>)
 8007c1a:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007c1e:	4924      	ldr	r1, [pc, #144]	; (8007cb0 <mem_trim+0x180>)
 8007c20:	481f      	ldr	r0, [pc, #124]	; (8007ca0 <mem_trim+0x170>)
 8007c22:	f007 f967 	bl	800eef4 <iprintf>
 8007c26:	e7d1      	b.n	8007bcc <mem_trim+0x9c>
  return (struct mem *)(void *)&ram[ptr];
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <mem_trim+0x160>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4423      	add	r3, r4
      lfree = ptr_to_mem(ptr2);
 8007c2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ca8 <mem_trim+0x178>)
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	e7d4      	b.n	8007bde <mem_trim+0xae>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007c34:	f104 0314 	add.w	r3, r4, #20
 8007c38:	42b3      	cmp	r3, r6
 8007c3a:	d8df      	bhi.n	8007bfc <mem_trim+0xcc>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007c3c:	3408      	adds	r4, #8
 8007c3e:	443c      	add	r4, r7
 8007c40:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c42:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007c46:	d017      	beq.n	8007c78 <mem_trim+0x148>
  return (struct mem *)(void *)&ram[ptr];
 8007c48:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <mem_trim+0x160>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007c4e:	4916      	ldr	r1, [pc, #88]	; (8007ca8 <mem_trim+0x178>)
 8007c50:	6809      	ldr	r1, [r1, #0]
 8007c52:	4291      	cmp	r1, r2
      lfree = mem2;
 8007c54:	bf84      	itt	hi
 8007c56:	4914      	ldrhi	r1, [pc, #80]	; (8007ca8 <mem_trim+0x178>)
 8007c58:	600a      	strhi	r2, [r1, #0]
    mem2->used = 0;
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007c5e:	f835 1c08 	ldrh.w	r1, [r5, #-8]
 8007c62:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007c64:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007c66:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007c6a:	5b1a      	ldrh	r2, [r3, r4]
 8007c6c:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007c70:	bf1c      	itt	ne
 8007c72:	189b      	addne	r3, r3, r2
 8007c74:	805c      	strhne	r4, [r3, #2]
 8007c76:	e7c1      	b.n	8007bfc <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007c78:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <mem_trim+0x168>)
 8007c7a:	f240 3216 	movw	r2, #790	; 0x316
 8007c7e:	490c      	ldr	r1, [pc, #48]	; (8007cb0 <mem_trim+0x180>)
 8007c80:	4807      	ldr	r0, [pc, #28]	; (8007ca0 <mem_trim+0x170>)
 8007c82:	f007 f937 	bl	800eef4 <iprintf>
 8007c86:	e7df      	b.n	8007c48 <mem_trim+0x118>
    return NULL;
 8007c88:	2000      	movs	r0, #0
 8007c8a:	e77f      	b.n	8007b8c <mem_trim+0x5c>
    return rmem;
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	e77d      	b.n	8007b8c <mem_trim+0x5c>
 8007c90:	2000b010 	.word	0x2000b010
 8007c94:	2000b014 	.word	0x2000b014
 8007c98:	08010970 	.word	0x08010970
 8007c9c:	08010ad4 	.word	0x08010ad4
 8007ca0:	08010198 	.word	0x08010198
 8007ca4:	2000b00c 	.word	0x2000b00c
 8007ca8:	2000b008 	.word	0x2000b008
 8007cac:	08010aec 	.word	0x08010aec
 8007cb0:	08010b0c 	.word	0x08010b0c

08007cb4 <mem_malloc>:
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f000 809c 	beq.w	8007df2 <mem_malloc+0x13e>
{
 8007cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cbc:	4603      	mov	r3, r0
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007cbe:	1cc6      	adds	r6, r0, #3
 8007cc0:	f026 0603 	bic.w	r6, r6, #3
 8007cc4:	b2b6      	uxth	r6, r6
  if (size < MIN_SIZE_ALIGNED) {
 8007cc6:	2e0b      	cmp	r6, #11
 8007cc8:	d904      	bls.n	8007cd4 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007cca:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007cce:	d902      	bls.n	8007cd6 <mem_malloc+0x22>
    return NULL;
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	e08d      	b.n	8007df0 <mem_malloc+0x13c>
    size = MIN_SIZE_ALIGNED;
 8007cd4:	260c      	movs	r6, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007cd6:	42b3      	cmp	r3, r6
 8007cd8:	f200 808d 	bhi.w	8007df6 <mem_malloc+0x142>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007cdc:	4849      	ldr	r0, [pc, #292]	; (8007e04 <mem_malloc+0x150>)
 8007cde:	f006 fee0 	bl	800eaa2 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8007ce2:	4b49      	ldr	r3, [pc, #292]	; (8007e08 <mem_malloc+0x154>)
 8007ce4:	6819      	ldr	r1, [r3, #0]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007ce6:	4b49      	ldr	r3, [pc, #292]	; (8007e0c <mem_malloc+0x158>)
  return (mem_size_t)((u8_t *)mem - ram);
 8007ce8:	681c      	ldr	r4, [r3, #0]
 8007cea:	1a64      	subs	r4, r4, r1
 8007cec:	b2a4      	uxth	r4, r4
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007cee:	4623      	mov	r3, r4
 8007cf0:	4637      	mov	r7, r6
 8007cf2:	f5c6 5020 	rsb	r0, r6, #10240	; 0x2800
 8007cf6:	4284      	cmp	r4, r0
 8007cf8:	d276      	bcs.n	8007de8 <mem_malloc+0x134>
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007cfa:	f06f 0c07 	mvn.w	ip, #7
 8007cfe:	e039      	b.n	8007d74 <mem_malloc+0xc0>
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007d00:	4b43      	ldr	r3, [pc, #268]	; (8007e10 <mem_malloc+0x15c>)
 8007d02:	f240 3287 	movw	r2, #903	; 0x387
 8007d06:	4943      	ldr	r1, [pc, #268]	; (8007e14 <mem_malloc+0x160>)
 8007d08:	4843      	ldr	r0, [pc, #268]	; (8007e18 <mem_malloc+0x164>)
 8007d0a:	f007 f8f3 	bl	800eef4 <iprintf>
 8007d0e:	e045      	b.n	8007d9c <mem_malloc+0xe8>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8007d10:	2301      	movs	r3, #1
 8007d12:	712b      	strb	r3, [r5, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007d14:	4b3d      	ldr	r3, [pc, #244]	; (8007e0c <mem_malloc+0x158>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	d056      	beq.n	8007dca <mem_malloc+0x116>
          }
          lfree = cur;
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8007d1c:	4839      	ldr	r0, [pc, #228]	; (8007e04 <mem_malloc+0x150>)
 8007d1e:	f006 fec7 	bl	800eab0 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d22:	3708      	adds	r7, #8
 8007d24:	442f      	add	r7, r5
 8007d26:	4b3d      	ldr	r3, [pc, #244]	; (8007e1c <mem_malloc+0x168>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	42bb      	cmp	r3, r7
 8007d2c:	d305      	bcc.n	8007d3a <mem_malloc+0x86>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007d2e:	f015 0f03 	tst.w	r5, #3
 8007d32:	d10a      	bne.n	8007d4a <mem_malloc+0x96>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007d34:	f105 0008 	add.w	r0, r5, #8
 8007d38:	e05a      	b.n	8007df0 <mem_malloc+0x13c>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007d3a:	4b35      	ldr	r3, [pc, #212]	; (8007e10 <mem_malloc+0x15c>)
 8007d3c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007d40:	4937      	ldr	r1, [pc, #220]	; (8007e20 <mem_malloc+0x16c>)
 8007d42:	4835      	ldr	r0, [pc, #212]	; (8007e18 <mem_malloc+0x164>)
 8007d44:	f007 f8d6 	bl	800eef4 <iprintf>
 8007d48:	e7f1      	b.n	8007d2e <mem_malloc+0x7a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007d4a:	4e31      	ldr	r6, [pc, #196]	; (8007e10 <mem_malloc+0x15c>)
 8007d4c:	4c32      	ldr	r4, [pc, #200]	; (8007e18 <mem_malloc+0x164>)
 8007d4e:	4633      	mov	r3, r6
 8007d50:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007d54:	4933      	ldr	r1, [pc, #204]	; (8007e24 <mem_malloc+0x170>)
 8007d56:	4620      	mov	r0, r4
 8007d58:	f007 f8cc 	bl	800eef4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007d5c:	4633      	mov	r3, r6
 8007d5e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007d62:	4931      	ldr	r1, [pc, #196]	; (8007e28 <mem_malloc+0x174>)
 8007d64:	4620      	mov	r0, r4
 8007d66:	f007 f8c5 	bl	800eef4 <iprintf>
 8007d6a:	e7e3      	b.n	8007d34 <mem_malloc+0x80>
         ptr = ptr_to_mem(ptr)->next) {
 8007d6c:	882c      	ldrh	r4, [r5, #0]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007d6e:	4623      	mov	r3, r4
 8007d70:	4284      	cmp	r4, r0
 8007d72:	d239      	bcs.n	8007de8 <mem_malloc+0x134>
  return (struct mem *)(void *)&ram[ptr];
 8007d74:	18cd      	adds	r5, r1, r3
      if ((!mem->used) &&
 8007d76:	792a      	ldrb	r2, [r5, #4]
 8007d78:	2a00      	cmp	r2, #0
 8007d7a:	d1f7      	bne.n	8007d6c <mem_malloc+0xb8>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007d7c:	5aca      	ldrh	r2, [r1, r3]
 8007d7e:	ebac 0303 	sub.w	r3, ip, r3
 8007d82:	4413      	add	r3, r2
      if ((!mem->used) &&
 8007d84:	42bb      	cmp	r3, r7
 8007d86:	d3f1      	bcc.n	8007d6c <mem_malloc+0xb8>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007d88:	f107 0214 	add.w	r2, r7, #20
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d3bf      	bcc.n	8007d10 <mem_malloc+0x5c>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007d90:	3608      	adds	r6, #8
 8007d92:	4426      	add	r6, r4
 8007d94:	b2b6      	uxth	r6, r6
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007d96:	f5b6 5f20 	cmp.w	r6, #10240	; 0x2800
 8007d9a:	d0b1      	beq.n	8007d00 <mem_malloc+0x4c>
  return (struct mem *)(void *)&ram[ptr];
 8007d9c:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <mem_malloc+0x154>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	199a      	adds	r2, r3, r6
          mem2->used = 0;
 8007da2:	2100      	movs	r1, #0
 8007da4:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007da6:	8829      	ldrh	r1, [r5, #0]
 8007da8:	5399      	strh	r1, [r3, r6]
          mem2->prev = ptr;
 8007daa:	8054      	strh	r4, [r2, #2]
          mem->next = ptr2;
 8007dac:	802e      	strh	r6, [r5, #0]
          mem->used = 1;
 8007dae:	2201      	movs	r2, #1
 8007db0:	712a      	strb	r2, [r5, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007db2:	5b9a      	ldrh	r2, [r3, r6]
 8007db4:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007db8:	d0ac      	beq.n	8007d14 <mem_malloc+0x60>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007dba:	4413      	add	r3, r2
 8007dbc:	805e      	strh	r6, [r3, #2]
        if (mem == lfree) {
 8007dbe:	4b13      	ldr	r3, [pc, #76]	; (8007e0c <mem_malloc+0x158>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	42ab      	cmp	r3, r5
 8007dc4:	d1aa      	bne.n	8007d1c <mem_malloc+0x68>
          while (cur->used && cur != ram_end) {
 8007dc6:	792b      	ldrb	r3, [r5, #4]
 8007dc8:	b1d3      	cbz	r3, 8007e00 <mem_malloc+0x14c>
 8007dca:	4b14      	ldr	r3, [pc, #80]	; (8007e1c <mem_malloc+0x168>)
 8007dcc:	6819      	ldr	r1, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8007dce:	4b0e      	ldr	r3, [pc, #56]	; (8007e08 <mem_malloc+0x154>)
 8007dd0:	6818      	ldr	r0, [r3, #0]
 8007dd2:	462b      	mov	r3, r5
          while (cur->used && cur != ram_end) {
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	d010      	beq.n	8007dfa <mem_malloc+0x146>
  return (struct mem *)(void *)&ram[ptr];
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	4403      	add	r3, r0
          while (cur->used && cur != ram_end) {
 8007ddc:	791a      	ldrb	r2, [r3, #4]
 8007dde:	2a00      	cmp	r2, #0
 8007de0:	d1f8      	bne.n	8007dd4 <mem_malloc+0x120>
          lfree = cur;
 8007de2:	4a0a      	ldr	r2, [pc, #40]	; (8007e0c <mem_malloc+0x158>)
 8007de4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007de6:	e799      	b.n	8007d1c <mem_malloc+0x68>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007de8:	4806      	ldr	r0, [pc, #24]	; (8007e04 <mem_malloc+0x150>)
 8007dea:	f006 fe61 	bl	800eab0 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007dee:	2000      	movs	r0, #0
}
 8007df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return NULL;
 8007df2:	2000      	movs	r0, #0
}
 8007df4:	4770      	bx	lr
    return NULL;
 8007df6:	2000      	movs	r0, #0
 8007df8:	e7fa      	b.n	8007df0 <mem_malloc+0x13c>
          lfree = cur;
 8007dfa:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <mem_malloc+0x158>)
 8007dfc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007dfe:	e78d      	b.n	8007d1c <mem_malloc+0x68>
  return (struct mem *)(void *)&ram[ptr];
 8007e00:	462b      	mov	r3, r5
 8007e02:	e7ee      	b.n	8007de2 <mem_malloc+0x12e>
 8007e04:	2000b00c 	.word	0x2000b00c
 8007e08:	2000b010 	.word	0x2000b010
 8007e0c:	2000b008 	.word	0x2000b008
 8007e10:	08010970 	.word	0x08010970
 8007e14:	08010b0c 	.word	0x08010b0c
 8007e18:	08010198 	.word	0x08010198
 8007e1c:	2000b014 	.word	0x2000b014
 8007e20:	08010b20 	.word	0x08010b20
 8007e24:	08010b50 	.word	0x08010b50
 8007e28:	08010b80 	.word	0x08010b80

08007e2c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007e2c:	b538      	push	{r3, r4, r5, lr}
 8007e2e:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007e30:	f006 fe5a 	bl	800eae8 <sys_arch_protect>
 8007e34:	4605      	mov	r5, r0

  memp = *desc->tab;
 8007e36:	68a3      	ldr	r3, [r4, #8]
 8007e38:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007e3a:	b18c      	cbz	r4, 8007e60 <do_memp_malloc_pool+0x34>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007e40:	f014 0f03 	tst.w	r4, #3
 8007e44:	d104      	bne.n	8007e50 <do_memp_malloc_pool+0x24>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007e46:	4628      	mov	r0, r5
 8007e48:	f006 fe5a 	bl	800eb00 <sys_arch_unprotect>
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <do_memp_malloc_pool+0x3c>)
 8007e52:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007e56:	4905      	ldr	r1, [pc, #20]	; (8007e6c <do_memp_malloc_pool+0x40>)
 8007e58:	4805      	ldr	r0, [pc, #20]	; (8007e70 <do_memp_malloc_pool+0x44>)
 8007e5a:	f007 f84b 	bl	800eef4 <iprintf>
 8007e5e:	e7f2      	b.n	8007e46 <do_memp_malloc_pool+0x1a>
    SYS_ARCH_UNPROTECT(old_level);
 8007e60:	f006 fe4e 	bl	800eb00 <sys_arch_unprotect>
  return NULL;
 8007e64:	e7f2      	b.n	8007e4c <do_memp_malloc_pool+0x20>
 8007e66:	bf00      	nop
 8007e68:	08010ba4 	.word	0x08010ba4
 8007e6c:	08010bd4 	.word	0x08010bd4
 8007e70:	08010198 	.word	0x08010198

08007e74 <do_memp_free_pool>:
  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007e74:	b538      	push	{r3, r4, r5, lr}
 8007e76:	4605      	mov	r5, r0
 8007e78:	460c      	mov	r4, r1
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007e7a:	f011 0f03 	tst.w	r1, #3
 8007e7e:	d109      	bne.n	8007e94 <do_memp_free_pool+0x20>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8007e80:	f006 fe32 	bl	800eae8 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007e84:	68ab      	ldr	r3, [r5, #8]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	6023      	str	r3, [r4, #0]
  *desc->tab = memp;
 8007e8a:	68ab      	ldr	r3, [r5, #8]
 8007e8c:	601c      	str	r4, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8007e8e:	f006 fe37 	bl	800eb00 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8007e92:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007e94:	4b03      	ldr	r3, [pc, #12]	; (8007ea4 <do_memp_free_pool+0x30>)
 8007e96:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007e9a:	4903      	ldr	r1, [pc, #12]	; (8007ea8 <do_memp_free_pool+0x34>)
 8007e9c:	4803      	ldr	r0, [pc, #12]	; (8007eac <do_memp_free_pool+0x38>)
 8007e9e:	f007 f829 	bl	800eef4 <iprintf>
 8007ea2:	e7ed      	b.n	8007e80 <do_memp_free_pool+0xc>
 8007ea4:	08010ba4 	.word	0x08010ba4
 8007ea8:	08010bf8 	.word	0x08010bf8
 8007eac:	08010198 	.word	0x08010198

08007eb0 <memp_init_pool>:
  *desc->tab = NULL;
 8007eb0:	6883      	ldr	r3, [r0, #8]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007eb6:	6843      	ldr	r3, [r0, #4]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007ebe:	8842      	ldrh	r2, [r0, #2]
 8007ec0:	b15a      	cbz	r2, 8007eda <memp_init_pool+0x2a>
 8007ec2:	2200      	movs	r2, #0
    memp->next = *desc->tab;
 8007ec4:	6881      	ldr	r1, [r0, #8]
 8007ec6:	6809      	ldr	r1, [r1, #0]
 8007ec8:	6019      	str	r1, [r3, #0]
    *desc->tab = memp;
 8007eca:	6881      	ldr	r1, [r0, #8]
 8007ecc:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007ece:	8801      	ldrh	r1, [r0, #0]
 8007ed0:	440b      	add	r3, r1
  for (i = 0; i < desc->num; ++i) {
 8007ed2:	3201      	adds	r2, #1
 8007ed4:	8841      	ldrh	r1, [r0, #2]
 8007ed6:	4291      	cmp	r1, r2
 8007ed8:	dcf4      	bgt.n	8007ec4 <memp_init_pool+0x14>
}
 8007eda:	4770      	bx	lr

08007edc <memp_init>:
{
 8007edc:	b538      	push	{r3, r4, r5, lr}
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007ede:	4c05      	ldr	r4, [pc, #20]	; (8007ef4 <memp_init+0x18>)
 8007ee0:	f104 0534 	add.w	r5, r4, #52	; 0x34
    memp_init_pool(memp_pools[i]);
 8007ee4:	f854 0b04 	ldr.w	r0, [r4], #4
 8007ee8:	f7ff ffe2 	bl	8007eb0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007eec:	42ac      	cmp	r4, r5
 8007eee:	d1f9      	bne.n	8007ee4 <memp_init+0x8>
}
 8007ef0:	bd38      	pop	{r3, r4, r5, pc}
 8007ef2:	bf00      	nop
 8007ef4:	08010d04 	.word	0x08010d04

08007ef8 <memp_malloc_pool>:
{
 8007ef8:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007efa:	4604      	mov	r4, r0
 8007efc:	b110      	cbz	r0, 8007f04 <memp_malloc_pool+0xc>
  return do_memp_malloc_pool(desc);
 8007efe:	f7ff ff95 	bl	8007e2c <do_memp_malloc_pool>
}
 8007f02:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f04:	4b04      	ldr	r3, [pc, #16]	; (8007f18 <memp_malloc_pool+0x20>)
 8007f06:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007f0a:	4904      	ldr	r1, [pc, #16]	; (8007f1c <memp_malloc_pool+0x24>)
 8007f0c:	4804      	ldr	r0, [pc, #16]	; (8007f20 <memp_malloc_pool+0x28>)
 8007f0e:	f006 fff1 	bl	800eef4 <iprintf>
    return NULL;
 8007f12:	4620      	mov	r0, r4
 8007f14:	e7f5      	b.n	8007f02 <memp_malloc_pool+0xa>
 8007f16:	bf00      	nop
 8007f18:	08010ba4 	.word	0x08010ba4
 8007f1c:	08010c18 	.word	0x08010c18
 8007f20:	08010198 	.word	0x08010198

08007f24 <memp_malloc>:
{
 8007f24:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007f26:	280c      	cmp	r0, #12
 8007f28:	d805      	bhi.n	8007f36 <memp_malloc+0x12>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <memp_malloc+0x24>)
 8007f2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007f30:	f7ff ff7c 	bl	8007e2c <do_memp_malloc_pool>
}
 8007f34:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007f36:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <memp_malloc+0x28>)
 8007f38:	f240 1257 	movw	r2, #343	; 0x157
 8007f3c:	4904      	ldr	r1, [pc, #16]	; (8007f50 <memp_malloc+0x2c>)
 8007f3e:	4805      	ldr	r0, [pc, #20]	; (8007f54 <memp_malloc+0x30>)
 8007f40:	f006 ffd8 	bl	800eef4 <iprintf>
 8007f44:	2000      	movs	r0, #0
 8007f46:	e7f5      	b.n	8007f34 <memp_malloc+0x10>
 8007f48:	08010d04 	.word	0x08010d04
 8007f4c:	08010ba4 	.word	0x08010ba4
 8007f50:	08010c2c 	.word	0x08010c2c
 8007f54:	08010198 	.word	0x08010198

08007f58 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007f58:	b508      	push	{r3, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f5a:	b128      	cbz	r0, 8007f68 <memp_free_pool+0x10>
 8007f5c:	4603      	mov	r3, r0
  if ((desc == NULL) || (mem == NULL)) {
 8007f5e:	b111      	cbz	r1, 8007f66 <memp_free_pool+0xe>
    return;
  }

  do_memp_free_pool(desc, mem);
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7ff ff87 	bl	8007e74 <do_memp_free_pool>
}
 8007f66:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f68:	4b03      	ldr	r3, [pc, #12]	; (8007f78 <memp_free_pool+0x20>)
 8007f6a:	f240 1295 	movw	r2, #405	; 0x195
 8007f6e:	4903      	ldr	r1, [pc, #12]	; (8007f7c <memp_free_pool+0x24>)
 8007f70:	4803      	ldr	r0, [pc, #12]	; (8007f80 <memp_free_pool+0x28>)
 8007f72:	f006 ffbf 	bl	800eef4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8007f76:	e7f6      	b.n	8007f66 <memp_free_pool+0xe>
 8007f78:	08010ba4 	.word	0x08010ba4
 8007f7c:	08010c18 	.word	0x08010c18
 8007f80:	08010198 	.word	0x08010198

08007f84 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007f84:	b508      	push	{r3, lr}
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007f86:	280c      	cmp	r0, #12
 8007f88:	d806      	bhi.n	8007f98 <memp_free+0x14>

  if (mem == NULL) {
 8007f8a:	b121      	cbz	r1, 8007f96 <memp_free+0x12>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8007f8c:	4b06      	ldr	r3, [pc, #24]	; (8007fa8 <memp_free+0x24>)
 8007f8e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8007f92:	f7ff ff6f 	bl	8007e74 <do_memp_free_pool>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8007f96:	bd08      	pop	{r3, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007f98:	4b04      	ldr	r3, [pc, #16]	; (8007fac <memp_free+0x28>)
 8007f9a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8007f9e:	4904      	ldr	r1, [pc, #16]	; (8007fb0 <memp_free+0x2c>)
 8007fa0:	4804      	ldr	r0, [pc, #16]	; (8007fb4 <memp_free+0x30>)
 8007fa2:	f006 ffa7 	bl	800eef4 <iprintf>
 8007fa6:	e7f6      	b.n	8007f96 <memp_free+0x12>
 8007fa8:	08010d04 	.word	0x08010d04
 8007fac:	08010ba4 	.word	0x08010ba4
 8007fb0:	08010c4c 	.word	0x08010c4c
 8007fb4:	08010198 	.word	0x08010198

08007fb8 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8007fb8:	f06f 000b 	mvn.w	r0, #11
 8007fbc:	4770      	bx	lr
	...

08007fc0 <netif_issue_reports>:
{
 8007fc0:	b538      	push	{r3, r4, r5, lr}
 8007fc2:	460c      	mov	r4, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007fc4:	4605      	mov	r5, r0
 8007fc6:	b170      	cbz	r0, 8007fe6 <netif_issue_reports+0x26>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007fc8:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 8007fcc:	f003 0205 	and.w	r2, r3, #5
 8007fd0:	2a05      	cmp	r2, #5
 8007fd2:	d107      	bne.n	8007fe4 <netif_issue_reports+0x24>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007fd4:	f014 0f01 	tst.w	r4, #1
 8007fd8:	d004      	beq.n	8007fe4 <netif_issue_reports+0x24>
 8007fda:	686a      	ldr	r2, [r5, #4]
 8007fdc:	b112      	cbz	r2, 8007fe4 <netif_issue_reports+0x24>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007fde:	f013 0f08 	tst.w	r3, #8
 8007fe2:	d108      	bne.n	8007ff6 <netif_issue_reports+0x36>
}
 8007fe4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <netif_issue_reports+0x40>)
 8007fe8:	f240 326d 	movw	r2, #877	; 0x36d
 8007fec:	4905      	ldr	r1, [pc, #20]	; (8008004 <netif_issue_reports+0x44>)
 8007fee:	4806      	ldr	r0, [pc, #24]	; (8008008 <netif_issue_reports+0x48>)
 8007ff0:	f006 ff80 	bl	800eef4 <iprintf>
 8007ff4:	e7e8      	b.n	8007fc8 <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8007ff6:	1d29      	adds	r1, r5, #4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f005 faad 	bl	800d558 <etharp_request>
 8007ffe:	e7f1      	b.n	8007fe4 <netif_issue_reports+0x24>
 8008000:	08010d38 	.word	0x08010d38
 8008004:	08010d6c 	.word	0x08010d6c
 8008008:	08010198 	.word	0x08010198

0800800c <netif_do_set_ipaddr>:
{
 800800c:	b570      	push	{r4, r5, r6, lr}
 800800e:	b082      	sub	sp, #8
 8008010:	4605      	mov	r5, r0
 8008012:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008014:	460e      	mov	r6, r1
 8008016:	b139      	cbz	r1, 8008028 <netif_do_set_ipaddr+0x1c>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008018:	b174      	cbz	r4, 8008038 <netif_do_set_ipaddr+0x2c>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800801a:	686b      	ldr	r3, [r5, #4]
 800801c:	6832      	ldr	r2, [r6, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d112      	bne.n	8008048 <netif_do_set_ipaddr+0x3c>
  return 0; /* address unchanged */
 8008022:	2000      	movs	r0, #0
}
 8008024:	b002      	add	sp, #8
 8008026:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008028:	4b10      	ldr	r3, [pc, #64]	; (800806c <netif_do_set_ipaddr+0x60>)
 800802a:	f240 12cb 	movw	r2, #459	; 0x1cb
 800802e:	4910      	ldr	r1, [pc, #64]	; (8008070 <netif_do_set_ipaddr+0x64>)
 8008030:	4810      	ldr	r0, [pc, #64]	; (8008074 <netif_do_set_ipaddr+0x68>)
 8008032:	f006 ff5f 	bl	800eef4 <iprintf>
 8008036:	e7ef      	b.n	8008018 <netif_do_set_ipaddr+0xc>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <netif_do_set_ipaddr+0x60>)
 800803a:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800803e:	490c      	ldr	r1, [pc, #48]	; (8008070 <netif_do_set_ipaddr+0x64>)
 8008040:	480c      	ldr	r0, [pc, #48]	; (8008074 <netif_do_set_ipaddr+0x68>)
 8008042:	f006 ff57 	bl	800eef4 <iprintf>
 8008046:	e7e8      	b.n	800801a <netif_do_set_ipaddr+0xe>
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008048:	9201      	str	r2, [sp, #4]
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800804a:	6023      	str	r3, [r4, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800804c:	a901      	add	r1, sp, #4
 800804e:	4620      	mov	r0, r4
 8008050:	f001 f970 	bl	8009334 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008054:	a901      	add	r1, sp, #4
 8008056:	4620      	mov	r0, r4
 8008058:	f005 f864 	bl	800d124 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800805c:	6833      	ldr	r3, [r6, #0]
 800805e:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008060:	2101      	movs	r1, #1
 8008062:	4628      	mov	r0, r5
 8008064:	f7ff ffac 	bl	8007fc0 <netif_issue_reports>
    return 1; /* address changed */
 8008068:	2001      	movs	r0, #1
 800806a:	e7db      	b.n	8008024 <netif_do_set_ipaddr+0x18>
 800806c:	08010d38 	.word	0x08010d38
 8008070:	0801038c 	.word	0x0801038c
 8008074:	08010198 	.word	0x08010198

08008078 <netif_init>:
}
 8008078:	4770      	bx	lr
	...

0800807c <netif_set_addr>:
{
 800807c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807e:	b083      	sub	sp, #12
 8008080:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8008082:	4d15      	ldr	r5, [pc, #84]	; (80080d8 <netif_set_addr+0x5c>)
 8008084:	2900      	cmp	r1, #0
 8008086:	bf18      	it	ne
 8008088:	460d      	movne	r5, r1
    netmask = IP4_ADDR_ANY4;
 800808a:	4f13      	ldr	r7, [pc, #76]	; (80080d8 <netif_set_addr+0x5c>)
 800808c:	2a00      	cmp	r2, #0
 800808e:	bf18      	it	ne
 8008090:	4617      	movne	r7, r2
    gw = IP4_ADDR_ANY4;
 8008092:	4e11      	ldr	r6, [pc, #68]	; (80080d8 <netif_set_addr+0x5c>)
 8008094:	2b00      	cmp	r3, #0
 8008096:	bf18      	it	ne
 8008098:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 800809a:	b10d      	cbz	r5, 80080a0 <netif_set_addr+0x24>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b993      	cbnz	r3, 80080c6 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80080a0:	aa01      	add	r2, sp, #4
 80080a2:	4629      	mov	r1, r5
 80080a4:	4620      	mov	r0, r4
 80080a6:	f7ff ffb1 	bl	800800c <netif_do_set_ipaddr>
 80080aa:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	68a2      	ldr	r2, [r4, #8]
 80080b0:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80080b2:	bf18      	it	ne
 80080b4:	60a3      	strne	r3, [r4, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80080b6:	6833      	ldr	r3, [r6, #0]
 80080b8:	68e2      	ldr	r2, [r4, #12]
 80080ba:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80080bc:	bf18      	it	ne
 80080be:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 80080c0:	b119      	cbz	r1, 80080ca <netif_set_addr+0x4e>
}
 80080c2:	b003      	add	sp, #12
 80080c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 80080c6:	2100      	movs	r1, #0
 80080c8:	e7f0      	b.n	80080ac <netif_set_addr+0x30>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80080ca:	aa01      	add	r2, sp, #4
 80080cc:	4629      	mov	r1, r5
 80080ce:	4620      	mov	r0, r4
 80080d0:	f7ff ff9c 	bl	800800c <netif_do_set_ipaddr>
}
 80080d4:	e7f5      	b.n	80080c2 <netif_set_addr+0x46>
 80080d6:	bf00      	nop
 80080d8:	080127e4 	.word	0x080127e4

080080dc <netif_add>:
{
 80080dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80080e2:	4606      	mov	r6, r0
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d02c      	beq.n	8008142 <netif_add+0x66>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80080e8:	2c00      	cmp	r4, #0
 80080ea:	d033      	beq.n	8008154 <netif_add+0x78>
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80080ec:	2000      	movs	r0, #0
 80080ee:	6070      	str	r0, [r6, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80080f0:	60b0      	str	r0, [r6, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80080f2:	60f0      	str	r0, [r6, #12]
  netif->output = netif_null_output_ip4;
 80080f4:	4d3b      	ldr	r5, [pc, #236]	; (80081e4 <netif_add+0x108>)
 80080f6:	6175      	str	r5, [r6, #20]
  netif->mtu = 0;
 80080f8:	84b0      	strh	r0, [r6, #36]	; 0x24
  netif->flags = 0;
 80080fa:	f886 002d 	strb.w	r0, [r6, #45]	; 0x2d
  netif->link_callback = NULL;
 80080fe:	61f0      	str	r0, [r6, #28]
  netif->state = state;
 8008100:	9808      	ldr	r0, [sp, #32]
 8008102:	6230      	str	r0, [r6, #32]
  netif->num = netif_num;
 8008104:	4838      	ldr	r0, [pc, #224]	; (80081e8 <netif_add+0x10c>)
 8008106:	7800      	ldrb	r0, [r0, #0]
 8008108:	f886 0030 	strb.w	r0, [r6, #48]	; 0x30
  netif->input = input;
 800810c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800810e:	6130      	str	r0, [r6, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008110:	4836      	ldr	r0, [pc, #216]	; (80081ec <netif_add+0x110>)
 8008112:	2b00      	cmp	r3, #0
 8008114:	bf08      	it	eq
 8008116:	4603      	moveq	r3, r0
 8008118:	2a00      	cmp	r2, #0
 800811a:	bf08      	it	eq
 800811c:	4602      	moveq	r2, r0
 800811e:	2900      	cmp	r1, #0
 8008120:	bf08      	it	eq
 8008122:	4601      	moveq	r1, r0
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff ffa9 	bl	800807c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 800812a:	4630      	mov	r0, r6
 800812c:	47a0      	blx	r4
 800812e:	2800      	cmp	r0, #0
 8008130:	d147      	bne.n	80081c2 <netif_add+0xe6>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008132:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8008204 <netif_add+0x128>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008136:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80081f4 <netif_add+0x118>
 800813a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8008208 <netif_add+0x12c>
 800813e:	4f2c      	ldr	r7, [pc, #176]	; (80081f0 <netif_add+0x114>)
 8008140:	e031      	b.n	80081a6 <netif_add+0xca>
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008142:	4b2c      	ldr	r3, [pc, #176]	; (80081f4 <netif_add+0x118>)
 8008144:	f240 1227 	movw	r2, #295	; 0x127
 8008148:	492b      	ldr	r1, [pc, #172]	; (80081f8 <netif_add+0x11c>)
 800814a:	4829      	ldr	r0, [pc, #164]	; (80081f0 <netif_add+0x114>)
 800814c:	f006 fed2 	bl	800eef4 <iprintf>
 8008150:	4630      	mov	r0, r6
 8008152:	e045      	b.n	80081e0 <netif_add+0x104>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008154:	4b27      	ldr	r3, [pc, #156]	; (80081f4 <netif_add+0x118>)
 8008156:	f44f 7294 	mov.w	r2, #296	; 0x128
 800815a:	4928      	ldr	r1, [pc, #160]	; (80081fc <netif_add+0x120>)
 800815c:	4824      	ldr	r0, [pc, #144]	; (80081f0 <netif_add+0x114>)
 800815e:	f006 fec9 	bl	800eef4 <iprintf>
 8008162:	2000      	movs	r0, #0
 8008164:	e03c      	b.n	80081e0 <netif_add+0x104>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008166:	4643      	mov	r3, r8
 8008168:	f240 128b 	movw	r2, #395	; 0x18b
 800816c:	4649      	mov	r1, r9
 800816e:	4638      	mov	r0, r7
 8008170:	f006 fec0 	bl	800eef4 <iprintf>
 8008174:	e009      	b.n	800818a <netif_add+0xae>
        if (netif2->num == netif->num) {
 8008176:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800817a:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 800817e:	429a      	cmp	r2, r3
 8008180:	d00e      	beq.n	80081a0 <netif_add+0xc4>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008182:	6824      	ldr	r4, [r4, #0]
 8008184:	b1fc      	cbz	r4, 80081c6 <netif_add+0xea>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008186:	42a6      	cmp	r6, r4
 8008188:	d0ed      	beq.n	8008166 <netif_add+0x8a>
        num_netifs++;
 800818a:	3501      	adds	r5, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800818c:	2dff      	cmp	r5, #255	; 0xff
 800818e:	ddf2      	ble.n	8008176 <netif_add+0x9a>
 8008190:	4643      	mov	r3, r8
 8008192:	f240 128d 	movw	r2, #397	; 0x18d
 8008196:	491a      	ldr	r1, [pc, #104]	; (8008200 <netif_add+0x124>)
 8008198:	4638      	mov	r0, r7
 800819a:	f006 feab 	bl	800eef4 <iprintf>
 800819e:	e7ea      	b.n	8008176 <netif_add+0x9a>
          netif->num++;
 80081a0:	3301      	adds	r3, #1
 80081a2:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
      if (netif->num == 255) {
 80081a6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80081aa:	2bff      	cmp	r3, #255	; 0xff
        netif->num = 0;
 80081ac:	bf04      	itt	eq
 80081ae:	2300      	moveq	r3, #0
 80081b0:	f886 3030 	strbeq.w	r3, [r6, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081b4:	f8da 4000 	ldr.w	r4, [sl]
 80081b8:	b12c      	cbz	r4, 80081c6 <netif_add+0xea>
      num_netifs = 0;
 80081ba:	2500      	movs	r5, #0
 80081bc:	e7e3      	b.n	8008186 <netif_add+0xaa>
    netif_num = 0;
 80081be:	2300      	movs	r3, #0
 80081c0:	e007      	b.n	80081d2 <netif_add+0xf6>
    return NULL;
 80081c2:	2000      	movs	r0, #0
 80081c4:	e00c      	b.n	80081e0 <netif_add+0x104>
  if (netif->num == 254) {
 80081c6:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 80081ca:	2bfe      	cmp	r3, #254	; 0xfe
 80081cc:	d0f7      	beq.n	80081be <netif_add+0xe2>
    netif_num = (u8_t)(netif->num + 1);
 80081ce:	3301      	adds	r3, #1
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	4a05      	ldr	r2, [pc, #20]	; (80081e8 <netif_add+0x10c>)
 80081d4:	7013      	strb	r3, [r2, #0]
  netif->next = netif_list;
 80081d6:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <netif_add+0x128>)
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	6032      	str	r2, [r6, #0]
  netif_list = netif;
 80081dc:	601e      	str	r6, [r3, #0]
  return netif;
 80081de:	4630      	mov	r0, r6
}
 80081e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e4:	08007fb9 	.word	0x08007fb9
 80081e8:	20010900 	.word	0x20010900
 80081ec:	080127e4 	.word	0x080127e4
 80081f0:	08010198 	.word	0x08010198
 80081f4:	08010d38 	.word	0x08010d38
 80081f8:	08010d90 	.word	0x08010d90
 80081fc:	08010dac 	.word	0x08010dac
 8008200:	08010de4 	.word	0x08010de4
 8008204:	200108fc 	.word	0x200108fc
 8008208:	08010dd0 	.word	0x08010dd0

0800820c <netif_set_default>:
  netif_default = netif;
 800820c:	4b01      	ldr	r3, [pc, #4]	; (8008214 <netif_set_default+0x8>)
 800820e:	6018      	str	r0, [r3, #0]
}
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	200108f8 	.word	0x200108f8

08008218 <netif_set_up>:
{
 8008218:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800821a:	b128      	cbz	r0, 8008228 <netif_set_up+0x10>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800821c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008220:	f013 0f01 	tst.w	r3, #1
 8008224:	d008      	beq.n	8008238 <netif_set_up+0x20>
}
 8008226:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008228:	4b07      	ldr	r3, [pc, #28]	; (8008248 <netif_set_up+0x30>)
 800822a:	f44f 7254 	mov.w	r2, #848	; 0x350
 800822e:	4907      	ldr	r1, [pc, #28]	; (800824c <netif_set_up+0x34>)
 8008230:	4807      	ldr	r0, [pc, #28]	; (8008250 <netif_set_up+0x38>)
 8008232:	f006 fe5f 	bl	800eef4 <iprintf>
 8008236:	e7f6      	b.n	8008226 <netif_set_up+0xe>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008238:	f043 0301 	orr.w	r3, r3, #1
 800823c:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008240:	2103      	movs	r1, #3
 8008242:	f7ff febd 	bl	8007fc0 <netif_issue_reports>
 8008246:	e7ee      	b.n	8008226 <netif_set_up+0xe>
 8008248:	08010d38 	.word	0x08010d38
 800824c:	08010e14 	.word	0x08010e14
 8008250:	08010198 	.word	0x08010198

08008254 <netif_set_down>:
{
 8008254:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008256:	b160      	cbz	r0, 8008272 <netif_set_down+0x1e>
  if (netif->flags & NETIF_FLAG_UP) {
 8008258:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800825c:	f013 0f01 	tst.w	r3, #1
 8008260:	d006      	beq.n	8008270 <netif_set_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008262:	f023 0101 	bic.w	r1, r3, #1
 8008266:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800826a:	f013 0f08 	tst.w	r3, #8
 800826e:	d108      	bne.n	8008282 <netif_set_down+0x2e>
}
 8008270:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008272:	4b05      	ldr	r3, [pc, #20]	; (8008288 <netif_set_down+0x34>)
 8008274:	f240 329b 	movw	r2, #923	; 0x39b
 8008278:	4904      	ldr	r1, [pc, #16]	; (800828c <netif_set_down+0x38>)
 800827a:	4805      	ldr	r0, [pc, #20]	; (8008290 <netif_set_down+0x3c>)
 800827c:	f006 fe3a 	bl	800eef4 <iprintf>
 8008280:	e7f6      	b.n	8008270 <netif_set_down+0x1c>
      etharp_cleanup_netif(netif);
 8008282:	f005 f8a5 	bl	800d3d0 <etharp_cleanup_netif>
    NETIF_STATUS_CALLBACK(netif);
 8008286:	e7f3      	b.n	8008270 <netif_set_down+0x1c>
 8008288:	08010d38 	.word	0x08010d38
 800828c:	08010e30 	.word	0x08010e30
 8008290:	08010198 	.word	0x08010198

08008294 <netif_set_link_up>:
{
 8008294:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008296:	b130      	cbz	r0, 80082a6 <netif_set_link_up+0x12>
 8008298:	4604      	mov	r4, r0
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800829a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800829e:	f013 0f04 	tst.w	r3, #4
 80082a2:	d008      	beq.n	80082b6 <netif_set_link_up+0x22>
}
 80082a4:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80082a6:	4b0a      	ldr	r3, [pc, #40]	; (80082d0 <netif_set_link_up+0x3c>)
 80082a8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80082ac:	4909      	ldr	r1, [pc, #36]	; (80082d4 <netif_set_link_up+0x40>)
 80082ae:	480a      	ldr	r0, [pc, #40]	; (80082d8 <netif_set_link_up+0x44>)
 80082b0:	f006 fe20 	bl	800eef4 <iprintf>
 80082b4:	e7f6      	b.n	80082a4 <netif_set_link_up+0x10>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80082b6:	f043 0304 	orr.w	r3, r3, #4
 80082ba:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80082be:	2103      	movs	r1, #3
 80082c0:	f7ff fe7e 	bl	8007fc0 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 80082c4:	69e3      	ldr	r3, [r4, #28]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d0ec      	beq.n	80082a4 <netif_set_link_up+0x10>
 80082ca:	4620      	mov	r0, r4
 80082cc:	4798      	blx	r3
 80082ce:	e7e9      	b.n	80082a4 <netif_set_link_up+0x10>
 80082d0:	08010d38 	.word	0x08010d38
 80082d4:	08010e50 	.word	0x08010e50
 80082d8:	08010198 	.word	0x08010198

080082dc <netif_set_link_down>:
{
 80082dc:	b508      	push	{r3, lr}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80082de:	b160      	cbz	r0, 80082fa <netif_set_link_down+0x1e>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80082e0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80082e4:	f013 0f04 	tst.w	r3, #4
 80082e8:	d006      	beq.n	80082f8 <netif_set_link_down+0x1c>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80082ea:	f023 0304 	bic.w	r3, r3, #4
 80082ee:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80082f2:	69c3      	ldr	r3, [r0, #28]
 80082f4:	b103      	cbz	r3, 80082f8 <netif_set_link_down+0x1c>
 80082f6:	4798      	blx	r3
}
 80082f8:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80082fa:	4b04      	ldr	r3, [pc, #16]	; (800830c <netif_set_link_down+0x30>)
 80082fc:	f240 4206 	movw	r2, #1030	; 0x406
 8008300:	4903      	ldr	r1, [pc, #12]	; (8008310 <netif_set_link_down+0x34>)
 8008302:	4804      	ldr	r0, [pc, #16]	; (8008314 <netif_set_link_down+0x38>)
 8008304:	f006 fdf6 	bl	800eef4 <iprintf>
 8008308:	e7f6      	b.n	80082f8 <netif_set_link_down+0x1c>
 800830a:	bf00      	nop
 800830c:	08010d38 	.word	0x08010d38
 8008310:	08010e74 	.word	0x08010e74
 8008314:	08010198 	.word	0x08010198

08008318 <netif_set_link_callback>:
  if (netif) {
 8008318:	b100      	cbz	r0, 800831c <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 800831a:	61c1      	str	r1, [r0, #28]
}
 800831c:	4770      	bx	lr
	...

08008320 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8008320:	4602      	mov	r2, r0
 8008322:	b160      	cbz	r0, 800833e <netif_get_by_index+0x1e>
    NETIF_FOREACH(netif) {
 8008324:	4b07      	ldr	r3, [pc, #28]	; (8008344 <netif_get_by_index+0x24>)
 8008326:	6818      	ldr	r0, [r3, #0]
 8008328:	b150      	cbz	r0, 8008340 <netif_get_by_index+0x20>
      if (idx == netif_get_index(netif)) {
 800832a:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800832e:	3301      	adds	r3, #1
 8008330:	b2db      	uxtb	r3, r3
 8008332:	4293      	cmp	r3, r2
 8008334:	d004      	beq.n	8008340 <netif_get_by_index+0x20>
    NETIF_FOREACH(netif) {
 8008336:	6800      	ldr	r0, [r0, #0]
 8008338:	2800      	cmp	r0, #0
 800833a:	d1f6      	bne.n	800832a <netif_get_by_index+0xa>
 800833c:	4770      	bx	lr
        return netif; /* found! */
      }
    }
  }

  return NULL;
 800833e:	2000      	movs	r0, #0
}
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	200108fc 	.word	0x200108fc

08008348 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008348:	b508      	push	{r3, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800834a:	b1d8      	cbz	r0, 8008384 <pbuf_add_header_impl+0x3c>
 800834c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800834e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008352:	d22e      	bcs.n	80083b2 <pbuf_add_header_impl+0x6a>
    return 1;
  }
  if (header_size_increment == 0) {
 8008354:	b339      	cbz	r1, 80083a6 <pbuf_add_header_impl+0x5e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8008356:	fa1f fc81 	uxth.w	ip, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800835a:	8918      	ldrh	r0, [r3, #8]
 800835c:	4460      	add	r0, ip
 800835e:	b280      	uxth	r0, r0
 8008360:	4560      	cmp	r0, ip
 8008362:	d322      	bcc.n	80083aa <pbuf_add_header_impl+0x62>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8008364:	f993 e00c 	ldrsb.w	lr, [r3, #12]
 8008368:	f1be 0f00 	cmp.w	lr, #0
 800836c:	db13      	blt.n	8008396 <pbuf_add_header_impl+0x4e>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800836e:	b1f2      	cbz	r2, 80083ae <pbuf_add_header_impl+0x66>
      payload = (u8_t *)p->payload - header_size_increment;
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	1a51      	subs	r1, r2, r1
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008374:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8008376:	895a      	ldrh	r2, [r3, #10]
 8008378:	4494      	add	ip, r2
 800837a:	f8a3 c00a 	strh.w	ip, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800837e:	8118      	strh	r0, [r3, #8]


  return 0;
 8008380:	2000      	movs	r0, #0
 8008382:	e017      	b.n	80083b4 <pbuf_add_header_impl+0x6c>
  LWIP_ASSERT("p != NULL", p != NULL);
 8008384:	4b0c      	ldr	r3, [pc, #48]	; (80083b8 <pbuf_add_header_impl+0x70>)
 8008386:	f240 12df 	movw	r2, #479	; 0x1df
 800838a:	490c      	ldr	r1, [pc, #48]	; (80083bc <pbuf_add_header_impl+0x74>)
 800838c:	480c      	ldr	r0, [pc, #48]	; (80083c0 <pbuf_add_header_impl+0x78>)
 800838e:	f006 fdb1 	bl	800eef4 <iprintf>
    return 1;
 8008392:	2001      	movs	r0, #1
 8008394:	e00e      	b.n	80083b4 <pbuf_add_header_impl+0x6c>
    payload = (u8_t *)p->payload - header_size_increment;
 8008396:	685a      	ldr	r2, [r3, #4]
 8008398:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800839a:	f103 0210 	add.w	r2, r3, #16
 800839e:	4291      	cmp	r1, r2
 80083a0:	d2e8      	bcs.n	8008374 <pbuf_add_header_impl+0x2c>
      return 1;
 80083a2:	2001      	movs	r0, #1
 80083a4:	e006      	b.n	80083b4 <pbuf_add_header_impl+0x6c>
    return 0;
 80083a6:	2000      	movs	r0, #0
 80083a8:	e004      	b.n	80083b4 <pbuf_add_header_impl+0x6c>
    return 1;
 80083aa:	2001      	movs	r0, #1
 80083ac:	e002      	b.n	80083b4 <pbuf_add_header_impl+0x6c>
      return 1;
 80083ae:	2001      	movs	r0, #1
 80083b0:	e000      	b.n	80083b4 <pbuf_add_header_impl+0x6c>
    return 1;
 80083b2:	2001      	movs	r0, #1
}
 80083b4:	bd08      	pop	{r3, pc}
 80083b6:	bf00      	nop
 80083b8:	08010e98 	.word	0x08010e98
 80083bc:	0801053c 	.word	0x0801053c
 80083c0:	08010198 	.word	0x08010198

080083c4 <pbuf_free_ooseq_callback>:
{
 80083c4:	b508      	push	{r3, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80083c6:	f006 fb8f 	bl	800eae8 <sys_arch_protect>
 80083ca:	4b08      	ldr	r3, [pc, #32]	; (80083ec <pbuf_free_ooseq_callback+0x28>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	f006 fb96 	bl	800eb00 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80083d4:	4b06      	ldr	r3, [pc, #24]	; (80083f0 <pbuf_free_ooseq_callback+0x2c>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	b138      	cbz	r0, 80083ea <pbuf_free_ooseq_callback+0x26>
    if (pcb->ooseq != NULL) {
 80083da:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80083dc:	b91b      	cbnz	r3, 80083e6 <pbuf_free_ooseq_callback+0x22>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80083de:	68c0      	ldr	r0, [r0, #12]
 80083e0:	2800      	cmp	r0, #0
 80083e2:	d1fa      	bne.n	80083da <pbuf_free_ooseq_callback+0x16>
 80083e4:	e001      	b.n	80083ea <pbuf_free_ooseq_callback+0x26>
      tcp_free_ooseq(pcb);
 80083e6:	f000 fe3d 	bl	8009064 <tcp_free_ooseq>
}
 80083ea:	bd08      	pop	{r3, pc}
 80083ec:	20010901 	.word	0x20010901
 80083f0:	20010904 	.word	0x20010904

080083f4 <pbuf_alloc_reference>:
{
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4606      	mov	r6, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80083fc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8008400:	b29b      	uxth	r3, r3
 8008402:	2b01      	cmp	r3, #1
 8008404:	d110      	bne.n	8008428 <pbuf_alloc_reference+0x34>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008406:	200b      	movs	r0, #11
 8008408:	f7ff fd8c 	bl	8007f24 <memp_malloc>
  if (p == NULL) {
 800840c:	4603      	mov	r3, r0
 800840e:	b148      	cbz	r0, 8008424 <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8008410:	2200      	movs	r2, #0
 8008412:	6002      	str	r2, [r0, #0]
  p->payload = payload;
 8008414:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8008416:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8008418:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 800841a:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 800841c:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800841e:	2101      	movs	r1, #1
 8008420:	7381      	strb	r1, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008422:	73c2      	strb	r2, [r0, #15]
}
 8008424:	4618      	mov	r0, r3
 8008426:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008428:	4b03      	ldr	r3, [pc, #12]	; (8008438 <pbuf_alloc_reference+0x44>)
 800842a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800842e:	4903      	ldr	r1, [pc, #12]	; (800843c <pbuf_alloc_reference+0x48>)
 8008430:	4803      	ldr	r0, [pc, #12]	; (8008440 <pbuf_alloc_reference+0x4c>)
 8008432:	f006 fd5f 	bl	800eef4 <iprintf>
 8008436:	e7e6      	b.n	8008406 <pbuf_alloc_reference+0x12>
 8008438:	08010e98 	.word	0x08010e98
 800843c:	08010ec8 	.word	0x08010ec8
 8008440:	08010198 	.word	0x08010198

08008444 <pbuf_alloced_custom>:
{
 8008444:	b430      	push	{r4, r5}
 8008446:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008448:	3003      	adds	r0, #3
 800844a:	f020 0003 	bic.w	r0, r0, #3
 800844e:	eb01 0c00 	add.w	ip, r1, r0
 8008452:	f8bd 500c 	ldrh.w	r5, [sp, #12]
 8008456:	45ac      	cmp	ip, r5
 8008458:	d80f      	bhi.n	800847a <pbuf_alloced_custom+0x36>
  if (payload_mem != NULL) {
 800845a:	b104      	cbz	r4, 800845e <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800845c:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800845e:	4618      	mov	r0, r3
  p->next = NULL;
 8008460:	2500      	movs	r5, #0
 8008462:	601d      	str	r5, [r3, #0]
  p->payload = payload;
 8008464:	605c      	str	r4, [r3, #4]
  p->tot_len = tot_len;
 8008466:	8119      	strh	r1, [r3, #8]
  p->len = len;
 8008468:	8159      	strh	r1, [r3, #10]
  p->type_internal = (u8_t)type;
 800846a:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800846c:	2202      	movs	r2, #2
 800846e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8008470:	2201      	movs	r2, #1
 8008472:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008474:	73dd      	strb	r5, [r3, #15]
}
 8008476:	bc30      	pop	{r4, r5}
 8008478:	4770      	bx	lr
    return NULL;
 800847a:	2000      	movs	r0, #0
 800847c:	e7fb      	b.n	8008476 <pbuf_alloced_custom+0x32>

0800847e <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800847e:	b508      	push	{r3, lr}
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008480:	2200      	movs	r2, #0
 8008482:	f7ff ff61 	bl	8008348 <pbuf_add_header_impl>
}
 8008486:	bd08      	pop	{r3, pc}

08008488 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008488:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800848a:	b190      	cbz	r0, 80084b2 <pbuf_remove_header+0x2a>
 800848c:	4603      	mov	r3, r0
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800848e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8008492:	d222      	bcs.n	80084da <pbuf_remove_header+0x52>
    return 1;
  }
  if (header_size_decrement == 0) {
 8008494:	b1f9      	cbz	r1, 80084d6 <pbuf_remove_header+0x4e>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8008496:	b288      	uxth	r0, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008498:	895a      	ldrh	r2, [r3, #10]
 800849a:	4282      	cmp	r2, r0
 800849c:	d312      	bcc.n	80084c4 <pbuf_remove_header+0x3c>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800849e:	685c      	ldr	r4, [r3, #4]
 80084a0:	4421      	add	r1, r4
 80084a2:	6059      	str	r1, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80084a4:	1a12      	subs	r2, r2, r0
 80084a6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80084a8:	891a      	ldrh	r2, [r3, #8]
 80084aa:	1a10      	subs	r0, r2, r0
 80084ac:	8118      	strh	r0, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80084ae:	2000      	movs	r0, #0
}
 80084b0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 80084b2:	4b0b      	ldr	r3, [pc, #44]	; (80084e0 <pbuf_remove_header+0x58>)
 80084b4:	f240 224b 	movw	r2, #587	; 0x24b
 80084b8:	490a      	ldr	r1, [pc, #40]	; (80084e4 <pbuf_remove_header+0x5c>)
 80084ba:	480b      	ldr	r0, [pc, #44]	; (80084e8 <pbuf_remove_header+0x60>)
 80084bc:	f006 fd1a 	bl	800eef4 <iprintf>
    return 1;
 80084c0:	2001      	movs	r0, #1
 80084c2:	e7f5      	b.n	80084b0 <pbuf_remove_header+0x28>
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80084c4:	4b06      	ldr	r3, [pc, #24]	; (80084e0 <pbuf_remove_header+0x58>)
 80084c6:	f240 2255 	movw	r2, #597	; 0x255
 80084ca:	4908      	ldr	r1, [pc, #32]	; (80084ec <pbuf_remove_header+0x64>)
 80084cc:	4806      	ldr	r0, [pc, #24]	; (80084e8 <pbuf_remove_header+0x60>)
 80084ce:	f006 fd11 	bl	800eef4 <iprintf>
 80084d2:	2001      	movs	r0, #1
 80084d4:	e7ec      	b.n	80084b0 <pbuf_remove_header+0x28>
    return 0;
 80084d6:	2000      	movs	r0, #0
 80084d8:	e7ea      	b.n	80084b0 <pbuf_remove_header+0x28>
    return 1;
 80084da:	2001      	movs	r0, #1
 80084dc:	e7e8      	b.n	80084b0 <pbuf_remove_header+0x28>
 80084de:	bf00      	nop
 80084e0:	08010e98 	.word	0x08010e98
 80084e4:	0801053c 	.word	0x0801053c
 80084e8:	08010198 	.word	0x08010198
 80084ec:	08010edc 	.word	0x08010edc

080084f0 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80084f0:	b508      	push	{r3, lr}
  if (header_size_increment < 0) {
 80084f2:	2900      	cmp	r1, #0
 80084f4:	db03      	blt.n	80084fe <pbuf_header_force+0xe>
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80084f6:	2201      	movs	r2, #1
 80084f8:	f7ff ff26 	bl	8008348 <pbuf_add_header_impl>
  return pbuf_header_impl(p, header_size_increment, 1);
}
 80084fc:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80084fe:	4249      	negs	r1, r1
 8008500:	f7ff ffc2 	bl	8008488 <pbuf_remove_header>
 8008504:	e7fa      	b.n	80084fc <pbuf_header_force+0xc>
	...

08008508 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8008508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800850c:	b140      	cbz	r0, 8008520 <pbuf_free+0x18>
 800850e:	4604      	mov	r4, r0
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8008510:	2600      	movs	r6, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008512:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80085d0 <pbuf_free+0xc8>
 8008516:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80085e4 <pbuf_free+0xdc>
 800851a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80085d8 <pbuf_free+0xd0>
 800851e:	e01a      	b.n	8008556 <pbuf_free+0x4e>
    LWIP_ASSERT("p != NULL", p != NULL);
 8008520:	4b2b      	ldr	r3, [pc, #172]	; (80085d0 <pbuf_free+0xc8>)
 8008522:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8008526:	492b      	ldr	r1, [pc, #172]	; (80085d4 <pbuf_free+0xcc>)
 8008528:	482b      	ldr	r0, [pc, #172]	; (80085d8 <pbuf_free+0xd0>)
 800852a:	f006 fce3 	bl	800eef4 <iprintf>
    return 0;
 800852e:	2600      	movs	r6, #0
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8008530:	4630      	mov	r0, r6
 8008532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008536:	464b      	mov	r3, r9
 8008538:	f240 22f1 	movw	r2, #753	; 0x2f1
 800853c:	4651      	mov	r1, sl
 800853e:	4640      	mov	r0, r8
 8008540:	f006 fcd8 	bl	800eef4 <iprintf>
 8008544:	e00d      	b.n	8008562 <pbuf_free+0x5a>
        pc->custom_free_function(p);
 8008546:	6923      	ldr	r3, [r4, #16]
 8008548:	4620      	mov	r0, r4
 800854a:	4798      	blx	r3
      count++;
 800854c:	3601      	adds	r6, #1
 800854e:	b2f6      	uxtb	r6, r6
  while (p != NULL) {
 8008550:	2d00      	cmp	r5, #0
 8008552:	d0ed      	beq.n	8008530 <pbuf_free+0x28>
      p = q;
 8008554:	462c      	mov	r4, r5
    SYS_ARCH_PROTECT(old_level);
 8008556:	f006 fac7 	bl	800eae8 <sys_arch_protect>
 800855a:	4607      	mov	r7, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800855c:	7ba3      	ldrb	r3, [r4, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0e9      	beq.n	8008536 <pbuf_free+0x2e>
    ref = --(p->ref);
 8008562:	7ba5      	ldrb	r5, [r4, #14]
 8008564:	3d01      	subs	r5, #1
 8008566:	b2ed      	uxtb	r5, r5
 8008568:	73a5      	strb	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800856a:	4638      	mov	r0, r7
 800856c:	f006 fac8 	bl	800eb00 <sys_arch_unprotect>
    if (ref == 0) {
 8008570:	2d00      	cmp	r5, #0
 8008572:	d1dd      	bne.n	8008530 <pbuf_free+0x28>
      q = p->next;
 8008574:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008576:	7b63      	ldrb	r3, [r4, #13]
 8008578:	f013 0f02 	tst.w	r3, #2
 800857c:	d00a      	beq.n	8008594 <pbuf_free+0x8c>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1e0      	bne.n	8008546 <pbuf_free+0x3e>
 8008584:	464b      	mov	r3, r9
 8008586:	f240 22ff 	movw	r2, #767	; 0x2ff
 800858a:	4914      	ldr	r1, [pc, #80]	; (80085dc <pbuf_free+0xd4>)
 800858c:	4640      	mov	r0, r8
 800858e:	f006 fcb1 	bl	800eef4 <iprintf>
 8008592:	e7d8      	b.n	8008546 <pbuf_free+0x3e>
      alloc_src = pbuf_get_allocsrc(p);
 8008594:	7b23      	ldrb	r3, [r4, #12]
 8008596:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800859a:	2b02      	cmp	r3, #2
 800859c:	d006      	beq.n	80085ac <pbuf_free+0xa4>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d009      	beq.n	80085b6 <pbuf_free+0xae>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80085a2:	b96b      	cbnz	r3, 80085c0 <pbuf_free+0xb8>
          mem_free(p);
 80085a4:	4620      	mov	r0, r4
 80085a6:	f7ff f9c9 	bl	800793c <mem_free>
 80085aa:	e7cf      	b.n	800854c <pbuf_free+0x44>
          memp_free(MEMP_PBUF_POOL, p);
 80085ac:	4621      	mov	r1, r4
 80085ae:	200c      	movs	r0, #12
 80085b0:	f7ff fce8 	bl	8007f84 <memp_free>
 80085b4:	e7ca      	b.n	800854c <pbuf_free+0x44>
          memp_free(MEMP_PBUF, p);
 80085b6:	4621      	mov	r1, r4
 80085b8:	200b      	movs	r0, #11
 80085ba:	f7ff fce3 	bl	8007f84 <memp_free>
 80085be:	e7c5      	b.n	800854c <pbuf_free+0x44>
          LWIP_ASSERT("invalid pbuf type", 0);
 80085c0:	464b      	mov	r3, r9
 80085c2:	f240 320f 	movw	r2, #783	; 0x30f
 80085c6:	4906      	ldr	r1, [pc, #24]	; (80085e0 <pbuf_free+0xd8>)
 80085c8:	4640      	mov	r0, r8
 80085ca:	f006 fc93 	bl	800eef4 <iprintf>
 80085ce:	e7bd      	b.n	800854c <pbuf_free+0x44>
 80085d0:	08010e98 	.word	0x08010e98
 80085d4:	0801053c 	.word	0x0801053c
 80085d8:	08010198 	.word	0x08010198
 80085dc:	08010f14 	.word	0x08010f14
 80085e0:	08010f38 	.word	0x08010f38
 80085e4:	08010efc 	.word	0x08010efc

080085e8 <pbuf_alloc>:
{
 80085e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ec:	460e      	mov	r6, r1
  u16_t offset = (u16_t)layer;
 80085ee:	b285      	uxth	r5, r0
  switch (type) {
 80085f0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
 80085f4:	d03d      	beq.n	8008672 <pbuf_alloc+0x8a>
 80085f6:	4604      	mov	r4, r0
 80085f8:	d80e      	bhi.n	8008618 <pbuf_alloc+0x30>
 80085fa:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80085fe:	b29b      	uxth	r3, r3
 8008600:	2b01      	cmp	r3, #1
 8008602:	d02f      	beq.n	8008664 <pbuf_alloc+0x7c>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8008604:	4b47      	ldr	r3, [pc, #284]	; (8008724 <pbuf_alloc+0x13c>)
 8008606:	f240 1227 	movw	r2, #295	; 0x127
 800860a:	4947      	ldr	r1, [pc, #284]	; (8008728 <pbuf_alloc+0x140>)
 800860c:	4847      	ldr	r0, [pc, #284]	; (800872c <pbuf_alloc+0x144>)
 800860e:	f006 fc71 	bl	800eef4 <iprintf>
      return NULL;
 8008612:	f04f 0800 	mov.w	r8, #0
 8008616:	e029      	b.n	800866c <pbuf_alloc+0x84>
  switch (type) {
 8008618:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 800861c:	d1f2      	bne.n	8008604 <pbuf_alloc+0x1c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800861e:	1ceb      	adds	r3, r5, #3
 8008620:	f023 0303 	bic.w	r3, r3, #3
 8008624:	1cca      	adds	r2, r1, #3
 8008626:	f022 0503 	bic.w	r5, r2, #3
 800862a:	442b      	add	r3, r5
 800862c:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800862e:	f103 0010 	add.w	r0, r3, #16
 8008632:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008634:	42ab      	cmp	r3, r5
 8008636:	d36e      	bcc.n	8008716 <pbuf_alloc+0x12e>
 8008638:	4285      	cmp	r5, r0
 800863a:	d86f      	bhi.n	800871c <pbuf_alloc+0x134>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800863c:	f7ff fb3a 	bl	8007cb4 <mem_malloc>
      if (p == NULL) {
 8008640:	4680      	mov	r8, r0
 8008642:	b198      	cbz	r0, 800866c <pbuf_alloc+0x84>
  p->next = NULL;
 8008644:	2200      	movs	r2, #0
 8008646:	6002      	str	r2, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008648:	1903      	adds	r3, r0, r4
 800864a:	3313      	adds	r3, #19
 800864c:	f023 0303 	bic.w	r3, r3, #3
  p->payload = payload;
 8008650:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8008652:	8106      	strh	r6, [r0, #8]
  p->len = len;
 8008654:	8146      	strh	r6, [r0, #10]
  p->type_internal = (u8_t)type;
 8008656:	2380      	movs	r3, #128	; 0x80
 8008658:	7303      	strb	r3, [r0, #12]
  p->flags = flags;
 800865a:	7342      	strb	r2, [r0, #13]
  p->ref = 1;
 800865c:	2301      	movs	r3, #1
 800865e:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 8008660:	73c2      	strb	r2, [r0, #15]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8008662:	e003      	b.n	800866c <pbuf_alloc+0x84>
      p = pbuf_alloc_reference(NULL, length, type);
 8008664:	2000      	movs	r0, #0
 8008666:	f7ff fec5 	bl	80083f4 <pbuf_alloc_reference>
 800866a:	4680      	mov	r8, r0
}
 800866c:	4640      	mov	r0, r8
 800866e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (type) {
 8008672:	2400      	movs	r4, #0
 8008674:	46a0      	mov	r8, r4
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8008676:	f04f 0a0c 	mov.w	sl, #12
  p->next = NULL;
 800867a:	4627      	mov	r7, r4
  p->type_internal = (u8_t)type;
 800867c:	f04f 0b82 	mov.w	fp, #130	; 0x82
 8008680:	e026      	b.n	80086d0 <pbuf_alloc+0xe8>
  SYS_ARCH_PROTECT(old_level);
 8008682:	f006 fa31 	bl	800eae8 <sys_arch_protect>
  queued = pbuf_free_ooseq_pending;
 8008686:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <pbuf_alloc+0x148>)
 8008688:	781d      	ldrb	r5, [r3, #0]
 800868a:	b2ed      	uxtb	r5, r5
  pbuf_free_ooseq_pending = 1;
 800868c:	2201      	movs	r2, #1
 800868e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8008690:	f006 fa36 	bl	800eb00 <sys_arch_unprotect>
  if (!queued) {
 8008694:	b13d      	cbz	r5, 80086a6 <pbuf_alloc+0xbe>
          if (p) {
 8008696:	f1b8 0f00 	cmp.w	r8, #0
 800869a:	d0e7      	beq.n	800866c <pbuf_alloc+0x84>
            pbuf_free(p);
 800869c:	4640      	mov	r0, r8
 800869e:	f7ff ff33 	bl	8008508 <pbuf_free>
          return NULL;
 80086a2:	46a0      	mov	r8, r4
 80086a4:	e7e2      	b.n	800866c <pbuf_alloc+0x84>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80086a6:	2100      	movs	r1, #0
 80086a8:	4822      	ldr	r0, [pc, #136]	; (8008734 <pbuf_alloc+0x14c>)
 80086aa:	f7ff f86b 	bl	8007784 <tcpip_try_callback>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0f1      	beq.n	8008696 <pbuf_alloc+0xae>
 80086b2:	f006 fa19 	bl	800eae8 <sys_arch_protect>
 80086b6:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <pbuf_alloc+0x148>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
 80086bc:	f006 fa20 	bl	800eb00 <sys_arch_unprotect>
 80086c0:	e7e9      	b.n	8008696 <pbuf_alloc+0xae>
          last->next = q;
 80086c2:	f8c9 0000 	str.w	r0, [r9]
        rem_len = (u16_t)(rem_len - qlen);
 80086c6:	1a76      	subs	r6, r6, r1
 80086c8:	b2b6      	uxth	r6, r6
        offset = 0;
 80086ca:	463d      	mov	r5, r7
      } while (rem_len > 0);
 80086cc:	2e00      	cmp	r6, #0
 80086ce:	d0cd      	beq.n	800866c <pbuf_alloc+0x84>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80086d0:	46a1      	mov	r9, r4
 80086d2:	4650      	mov	r0, sl
 80086d4:	f7ff fc26 	bl	8007f24 <memp_malloc>
        if (q == NULL) {
 80086d8:	4604      	mov	r4, r0
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0d1      	beq.n	8008682 <pbuf_alloc+0x9a>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80086de:	1ce9      	adds	r1, r5, #3
 80086e0:	f021 0103 	bic.w	r1, r1, #3
 80086e4:	f5c1 7114 	rsb	r1, r1, #592	; 0x250
 80086e8:	b289      	uxth	r1, r1
 80086ea:	42b1      	cmp	r1, r6
 80086ec:	bf28      	it	cs
 80086ee:	4631      	movcs	r1, r6
  p->next = NULL;
 80086f0:	6007      	str	r7, [r0, #0]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80086f2:	4405      	add	r5, r0
 80086f4:	3513      	adds	r5, #19
 80086f6:	f025 0503 	bic.w	r5, r5, #3
  p->payload = payload;
 80086fa:	6045      	str	r5, [r0, #4]
  p->tot_len = tot_len;
 80086fc:	8106      	strh	r6, [r0, #8]
  p->len = len;
 80086fe:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 8008700:	f880 b00c 	strb.w	fp, [r0, #12]
  p->flags = flags;
 8008704:	7347      	strb	r7, [r0, #13]
  p->ref = 1;
 8008706:	2301      	movs	r3, #1
 8008708:	7383      	strb	r3, [r0, #14]
  p->if_idx = NETIF_NO_INDEX;
 800870a:	73c7      	strb	r7, [r0, #15]
        if (p == NULL) {
 800870c:	f1b8 0f00 	cmp.w	r8, #0
 8008710:	d1d7      	bne.n	80086c2 <pbuf_alloc+0xda>
          p = q;
 8008712:	4680      	mov	r8, r0
 8008714:	e7d7      	b.n	80086c6 <pbuf_alloc+0xde>
        return NULL;
 8008716:	f04f 0800 	mov.w	r8, #0
 800871a:	e7a7      	b.n	800866c <pbuf_alloc+0x84>
 800871c:	f04f 0800 	mov.w	r8, #0
 8008720:	e7a4      	b.n	800866c <pbuf_alloc+0x84>
 8008722:	bf00      	nop
 8008724:	08010e98 	.word	0x08010e98
 8008728:	08010f4c 	.word	0x08010f4c
 800872c:	08010198 	.word	0x08010198
 8008730:	20010901 	.word	0x20010901
 8008734:	080083c5 	.word	0x080083c5

08008738 <pbuf_realloc>:
{
 8008738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800873c:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800873e:	4604      	mov	r4, r0
 8008740:	b168      	cbz	r0, 800875e <pbuf_realloc+0x26>
  if (new_len >= p->tot_len) {
 8008742:	8927      	ldrh	r7, [r4, #8]
 8008744:	42b7      	cmp	r7, r6
 8008746:	d939      	bls.n	80087bc <pbuf_realloc+0x84>
  while (rem_len > q->len) {
 8008748:	8963      	ldrh	r3, [r4, #10]
 800874a:	429e      	cmp	r6, r3
 800874c:	d923      	bls.n	8008796 <pbuf_realloc+0x5e>
  rem_len = new_len;
 800874e:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008750:	f8df a090 	ldr.w	sl, [pc, #144]	; 80087e4 <pbuf_realloc+0xac>
 8008754:	f8df 909c 	ldr.w	r9, [pc, #156]	; 80087f4 <pbuf_realloc+0xbc>
 8008758:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80087ec <pbuf_realloc+0xb4>
 800875c:	e00a      	b.n	8008774 <pbuf_realloc+0x3c>
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800875e:	4b21      	ldr	r3, [pc, #132]	; (80087e4 <pbuf_realloc+0xac>)
 8008760:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8008764:	4920      	ldr	r1, [pc, #128]	; (80087e8 <pbuf_realloc+0xb0>)
 8008766:	4821      	ldr	r0, [pc, #132]	; (80087ec <pbuf_realloc+0xb4>)
 8008768:	f006 fbc4 	bl	800eef4 <iprintf>
 800876c:	e7e9      	b.n	8008742 <pbuf_realloc+0xa>
  while (rem_len > q->len) {
 800876e:	8963      	ldrh	r3, [r4, #10]
 8008770:	42ab      	cmp	r3, r5
 8008772:	d211      	bcs.n	8008798 <pbuf_realloc+0x60>
    rem_len = (u16_t)(rem_len - q->len);
 8008774:	1aed      	subs	r5, r5, r3
 8008776:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008778:	1bf3      	subs	r3, r6, r7
 800877a:	8922      	ldrh	r2, [r4, #8]
 800877c:	4413      	add	r3, r2
 800877e:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008780:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008782:	2c00      	cmp	r4, #0
 8008784:	d1f3      	bne.n	800876e <pbuf_realloc+0x36>
 8008786:	4653      	mov	r3, sl
 8008788:	f240 12af 	movw	r2, #431	; 0x1af
 800878c:	4649      	mov	r1, r9
 800878e:	4640      	mov	r0, r8
 8008790:	f006 fbb0 	bl	800eef4 <iprintf>
 8008794:	e7eb      	b.n	800876e <pbuf_realloc+0x36>
  rem_len = new_len;
 8008796:	4635      	mov	r5, r6
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8008798:	7b22      	ldrb	r2, [r4, #12]
 800879a:	f012 0f0f 	tst.w	r2, #15
 800879e:	d105      	bne.n	80087ac <pbuf_realloc+0x74>
 80087a0:	42ab      	cmp	r3, r5
 80087a2:	d003      	beq.n	80087ac <pbuf_realloc+0x74>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80087a4:	7b63      	ldrb	r3, [r4, #13]
 80087a6:	f013 0f02 	tst.w	r3, #2
 80087aa:	d009      	beq.n	80087c0 <pbuf_realloc+0x88>
  q->len = rem_len;
 80087ac:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80087ae:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80087b0:	6820      	ldr	r0, [r4, #0]
 80087b2:	b108      	cbz	r0, 80087b8 <pbuf_realloc+0x80>
    pbuf_free(q->next);
 80087b4:	f7ff fea8 	bl	8008508 <pbuf_free>
  q->next = NULL;
 80087b8:	2300      	movs	r3, #0
 80087ba:	6023      	str	r3, [r4, #0]
}
 80087bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	1b1b      	subs	r3, r3, r4
 80087c4:	18e9      	adds	r1, r5, r3
 80087c6:	b289      	uxth	r1, r1
 80087c8:	4620      	mov	r0, r4
 80087ca:	f7ff f9b1 	bl	8007b30 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80087ce:	4604      	mov	r4, r0
 80087d0:	2800      	cmp	r0, #0
 80087d2:	d1eb      	bne.n	80087ac <pbuf_realloc+0x74>
 80087d4:	4b03      	ldr	r3, [pc, #12]	; (80087e4 <pbuf_realloc+0xac>)
 80087d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80087da:	4905      	ldr	r1, [pc, #20]	; (80087f0 <pbuf_realloc+0xb8>)
 80087dc:	4803      	ldr	r0, [pc, #12]	; (80087ec <pbuf_realloc+0xb4>)
 80087de:	f006 fb89 	bl	800eef4 <iprintf>
 80087e2:	e7e3      	b.n	80087ac <pbuf_realloc+0x74>
 80087e4:	08010e98 	.word	0x08010e98
 80087e8:	08010f68 	.word	0x08010f68
 80087ec:	08010198 	.word	0x08010198
 80087f0:	08010f98 	.word	0x08010f98
 80087f4:	08010f80 	.word	0x08010f80

080087f8 <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 80087f8:	4603      	mov	r3, r0
 80087fa:	b130      	cbz	r0, 800880a <pbuf_clen+0x12>
  len = 0;
 80087fc:	2000      	movs	r0, #0
    ++len;
 80087fe:	3001      	adds	r0, #1
 8008800:	b280      	uxth	r0, r0
    p = p->next;
 8008802:	681b      	ldr	r3, [r3, #0]
  while (p != NULL) {
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1fa      	bne.n	80087fe <pbuf_clen+0x6>
 8008808:	4770      	bx	lr
  len = 0;
 800880a:	2000      	movs	r0, #0
  }
  return len;
}
 800880c:	4770      	bx	lr
	...

08008810 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8008810:	b198      	cbz	r0, 800883a <pbuf_ref+0x2a>
{
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8008816:	f006 f967 	bl	800eae8 <sys_arch_protect>
 800881a:	7ba3      	ldrb	r3, [r4, #14]
 800881c:	3301      	adds	r3, #1
 800881e:	73a3      	strb	r3, [r4, #14]
 8008820:	f006 f96e 	bl	800eb00 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008824:	7ba3      	ldrb	r3, [r4, #14]
 8008826:	b103      	cbz	r3, 800882a <pbuf_ref+0x1a>
  }
}
 8008828:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800882a:	4b04      	ldr	r3, [pc, #16]	; (800883c <pbuf_ref+0x2c>)
 800882c:	f240 3242 	movw	r2, #834	; 0x342
 8008830:	4903      	ldr	r1, [pc, #12]	; (8008840 <pbuf_ref+0x30>)
 8008832:	4804      	ldr	r0, [pc, #16]	; (8008844 <pbuf_ref+0x34>)
 8008834:	f006 fb5e 	bl	800eef4 <iprintf>
}
 8008838:	e7f6      	b.n	8008828 <pbuf_ref+0x18>
 800883a:	4770      	bx	lr
 800883c:	08010e98 	.word	0x08010e98
 8008840:	08010fb4 	.word	0x08010fb4
 8008844:	08010198 	.word	0x08010198

08008848 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008848:	b538      	push	{r3, r4, r5, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800884a:	b130      	cbz	r0, 800885a <pbuf_cat+0x12>
 800884c:	460d      	mov	r5, r1
 800884e:	4602      	mov	r2, r0
 8008850:	b119      	cbz	r1, 800885a <pbuf_cat+0x12>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008852:	6804      	ldr	r4, [r0, #0]
 8008854:	b954      	cbnz	r4, 800886c <pbuf_cat+0x24>
 8008856:	4604      	mov	r4, r0
 8008858:	e010      	b.n	800887c <pbuf_cat+0x34>
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800885a:	4b15      	ldr	r3, [pc, #84]	; (80088b0 <pbuf_cat+0x68>)
 800885c:	f240 3259 	movw	r2, #857	; 0x359
 8008860:	4914      	ldr	r1, [pc, #80]	; (80088b4 <pbuf_cat+0x6c>)
 8008862:	4815      	ldr	r0, [pc, #84]	; (80088b8 <pbuf_cat+0x70>)
 8008864:	f006 fb46 	bl	800eef4 <iprintf>
 8008868:	e021      	b.n	80088ae <pbuf_cat+0x66>
  for (p = h; p->next != NULL; p = p->next) {
 800886a:	461c      	mov	r4, r3
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800886c:	8913      	ldrh	r3, [r2, #8]
 800886e:	8928      	ldrh	r0, [r5, #8]
 8008870:	4403      	add	r3, r0
 8008872:	8113      	strh	r3, [r2, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8008874:	6823      	ldr	r3, [r4, #0]
 8008876:	4622      	mov	r2, r4
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1f6      	bne.n	800886a <pbuf_cat+0x22>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800887c:	8922      	ldrh	r2, [r4, #8]
 800887e:	8963      	ldrh	r3, [r4, #10]
 8008880:	429a      	cmp	r2, r3
 8008882:	d00f      	beq.n	80088a4 <pbuf_cat+0x5c>
 8008884:	4b0a      	ldr	r3, [pc, #40]	; (80088b0 <pbuf_cat+0x68>)
 8008886:	f240 3262 	movw	r2, #866	; 0x362
 800888a:	490c      	ldr	r1, [pc, #48]	; (80088bc <pbuf_cat+0x74>)
 800888c:	480a      	ldr	r0, [pc, #40]	; (80088b8 <pbuf_cat+0x70>)
 800888e:	f006 fb31 	bl	800eef4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	b133      	cbz	r3, 80088a4 <pbuf_cat+0x5c>
 8008896:	4b06      	ldr	r3, [pc, #24]	; (80088b0 <pbuf_cat+0x68>)
 8008898:	f240 3263 	movw	r2, #867	; 0x363
 800889c:	4908      	ldr	r1, [pc, #32]	; (80088c0 <pbuf_cat+0x78>)
 800889e:	4806      	ldr	r0, [pc, #24]	; (80088b8 <pbuf_cat+0x70>)
 80088a0:	f006 fb28 	bl	800eef4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80088a4:	8923      	ldrh	r3, [r4, #8]
 80088a6:	892a      	ldrh	r2, [r5, #8]
 80088a8:	4413      	add	r3, r2
 80088aa:	8123      	strh	r3, [r4, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80088ac:	6025      	str	r5, [r4, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80088ae:	bd38      	pop	{r3, r4, r5, pc}
 80088b0:	08010e98 	.word	0x08010e98
 80088b4:	08010fc8 	.word	0x08010fc8
 80088b8:	08010198 	.word	0x08010198
 80088bc:	08011000 	.word	0x08011000
 80088c0:	08011030 	.word	0x08011030

080088c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80088c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80088c8:	b178      	cbz	r0, 80088ea <pbuf_copy+0x26>
 80088ca:	460c      	mov	r4, r1
 80088cc:	4606      	mov	r6, r0
 80088ce:	b161      	cbz	r1, 80088ea <pbuf_copy+0x26>
 80088d0:	8902      	ldrh	r2, [r0, #8]
 80088d2:	890b      	ldrh	r3, [r1, #8]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d308      	bcc.n	80088ea <pbuf_copy+0x26>
  size_t offset_to = 0, offset_from = 0, len;
 80088d8:	2700      	movs	r7, #0
 80088da:	46b8      	mov	r8, r7
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80088dc:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80089ec <pbuf_copy+0x128>
 80088e0:	f8df b120 	ldr.w	fp, [pc, #288]	; 8008a04 <pbuf_copy+0x140>
 80088e4:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80089f4 <pbuf_copy+0x130>
 80088e8:	e050      	b.n	800898c <pbuf_copy+0xc8>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80088ea:	4b40      	ldr	r3, [pc, #256]	; (80089ec <pbuf_copy+0x128>)
 80088ec:	f240 32c9 	movw	r2, #969	; 0x3c9
 80088f0:	493f      	ldr	r1, [pc, #252]	; (80089f0 <pbuf_copy+0x12c>)
 80088f2:	4840      	ldr	r0, [pc, #256]	; (80089f4 <pbuf_copy+0x130>)
 80088f4:	f006 fafe 	bl	800eef4 <iprintf>
 80088f8:	f06f 000f 	mvn.w	r0, #15
 80088fc:	e016      	b.n	800892c <pbuf_copy+0x68>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80088fe:	4653      	mov	r3, sl
 8008900:	f240 32d9 	movw	r2, #985	; 0x3d9
 8008904:	4659      	mov	r1, fp
 8008906:	4648      	mov	r0, r9
 8008908:	f006 faf4 	bl	800eef4 <iprintf>
 800890c:	e052      	b.n	80089b4 <pbuf_copy+0xf0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800890e:	4653      	mov	r3, sl
 8008910:	f240 32da 	movw	r2, #986	; 0x3da
 8008914:	4938      	ldr	r1, [pc, #224]	; (80089f8 <pbuf_copy+0x134>)
 8008916:	4648      	mov	r0, r9
 8008918:	f006 faec 	bl	800eef4 <iprintf>
 800891c:	e04d      	b.n	80089ba <pbuf_copy+0xf6>
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
 800891e:	6836      	ldr	r6, [r6, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008920:	b116      	cbz	r6, 8008928 <pbuf_copy+0x64>
      offset_to = 0;
 8008922:	f04f 0800 	mov.w	r8, #0
 8008926:	e050      	b.n	80089ca <pbuf_copy+0x106>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008928:	2000      	movs	r0, #0
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800892a:	b90c      	cbnz	r4, 8008930 <pbuf_copy+0x6c>
}
 800892c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008930:	4b2e      	ldr	r3, [pc, #184]	; (80089ec <pbuf_copy+0x128>)
 8008932:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8008936:	4931      	ldr	r1, [pc, #196]	; (80089fc <pbuf_copy+0x138>)
 8008938:	482e      	ldr	r0, [pc, #184]	; (80089f4 <pbuf_copy+0x130>)
 800893a:	f006 fadb 	bl	800eef4 <iprintf>
 800893e:	f06f 000f 	mvn.w	r0, #15
 8008942:	e7f3      	b.n	800892c <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d045      	beq.n	80089d6 <pbuf_copy+0x112>
 800894a:	4b28      	ldr	r3, [pc, #160]	; (80089ec <pbuf_copy+0x128>)
 800894c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8008950:	492b      	ldr	r1, [pc, #172]	; (8008a00 <pbuf_copy+0x13c>)
 8008952:	4828      	ldr	r0, [pc, #160]	; (80089f4 <pbuf_copy+0x130>)
 8008954:	f006 face 	bl	800eef4 <iprintf>
 8008958:	f06f 0005 	mvn.w	r0, #5
 800895c:	e7e6      	b.n	800892c <pbuf_copy+0x68>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800895e:	4b23      	ldr	r3, [pc, #140]	; (80089ec <pbuf_copy+0x128>)
 8008960:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8008964:	4926      	ldr	r1, [pc, #152]	; (8008a00 <pbuf_copy+0x13c>)
 8008966:	4823      	ldr	r0, [pc, #140]	; (80089f4 <pbuf_copy+0x130>)
 8008968:	f006 fac4 	bl	800eef4 <iprintf>
 800896c:	f06f 0005 	mvn.w	r0, #5
 8008970:	e7dc      	b.n	800892c <pbuf_copy+0x68>
  return ERR_OK;
 8008972:	2000      	movs	r0, #0
 8008974:	e7da      	b.n	800892c <pbuf_copy+0x68>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008976:	2e00      	cmp	r6, #0
 8008978:	d034      	beq.n	80089e4 <pbuf_copy+0x120>
 800897a:	8972      	ldrh	r2, [r6, #10]
 800897c:	8933      	ldrh	r3, [r6, #8]
 800897e:	429a      	cmp	r2, r3
 8008980:	d132      	bne.n	80089e8 <pbuf_copy+0x124>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008982:	6833      	ldr	r3, [r6, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1ea      	bne.n	800895e <pbuf_copy+0x9a>
  } while (p_from);
 8008988:	2c00      	cmp	r4, #0
 800898a:	d0f2      	beq.n	8008972 <pbuf_copy+0xae>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800898c:	8975      	ldrh	r5, [r6, #10]
 800898e:	eba5 0508 	sub.w	r5, r5, r8
 8008992:	8963      	ldrh	r3, [r4, #10]
 8008994:	1bdb      	subs	r3, r3, r7
 8008996:	429d      	cmp	r5, r3
 8008998:	bf28      	it	cs
 800899a:	461d      	movcs	r5, r3
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800899c:	6870      	ldr	r0, [r6, #4]
 800899e:	6861      	ldr	r1, [r4, #4]
 80089a0:	462a      	mov	r2, r5
 80089a2:	4439      	add	r1, r7
 80089a4:	4440      	add	r0, r8
 80089a6:	f006 f9e0 	bl	800ed6a <memcpy>
    offset_to += len;
 80089aa:	44a8      	add	r8, r5
    offset_from += len;
 80089ac:	442f      	add	r7, r5
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80089ae:	8973      	ldrh	r3, [r6, #10]
 80089b0:	4543      	cmp	r3, r8
 80089b2:	d3a4      	bcc.n	80088fe <pbuf_copy+0x3a>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80089b4:	8963      	ldrh	r3, [r4, #10]
 80089b6:	42bb      	cmp	r3, r7
 80089b8:	d3a9      	bcc.n	800890e <pbuf_copy+0x4a>
    if (offset_from >= p_from->len) {
 80089ba:	8963      	ldrh	r3, [r4, #10]
 80089bc:	42bb      	cmp	r3, r7
      p_from = p_from->next;
 80089be:	bf9c      	itt	ls
 80089c0:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80089c2:	2700      	movls	r7, #0
    if (offset_to == p_to->len) {
 80089c4:	8973      	ldrh	r3, [r6, #10]
 80089c6:	4543      	cmp	r3, r8
 80089c8:	d0a9      	beq.n	800891e <pbuf_copy+0x5a>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80089ca:	2c00      	cmp	r4, #0
 80089cc:	d0d3      	beq.n	8008976 <pbuf_copy+0xb2>
 80089ce:	8962      	ldrh	r2, [r4, #10]
 80089d0:	8923      	ldrh	r3, [r4, #8]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d0b6      	beq.n	8008944 <pbuf_copy+0x80>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80089d6:	2e00      	cmp	r6, #0
 80089d8:	d0d8      	beq.n	800898c <pbuf_copy+0xc8>
 80089da:	8972      	ldrh	r2, [r6, #10]
 80089dc:	8933      	ldrh	r3, [r6, #8]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d1d4      	bne.n	800898c <pbuf_copy+0xc8>
 80089e2:	e7ce      	b.n	8008982 <pbuf_copy+0xbe>
  return ERR_OK;
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7a1      	b.n	800892c <pbuf_copy+0x68>
 80089e8:	2000      	movs	r0, #0
 80089ea:	e79f      	b.n	800892c <pbuf_copy+0x68>
 80089ec:	08010e98 	.word	0x08010e98
 80089f0:	08011040 	.word	0x08011040
 80089f4:	08010198 	.word	0x08010198
 80089f8:	08011088 	.word	0x08011088
 80089fc:	080110a4 	.word	0x080110a4
 8008a00:	080110b4 	.word	0x080110b4
 8008a04:	08011070 	.word	0x08011070

08008a08 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a0c:	b148      	cbz	r0, 8008a22 <pbuf_copy_partial+0x1a>
 8008a0e:	4688      	mov	r8, r1
 8008a10:	4692      	mov	sl, r2
 8008a12:	4605      	mov	r5, r0
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a14:	b181      	cbz	r1, 8008a38 <pbuf_copy_partial+0x30>
  u16_t copied_total = 0;
 8008a16:	4617      	mov	r7, r2

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a18:	b15a      	cbz	r2, 8008a32 <pbuf_copy_partial+0x2a>
  u16_t copied_total = 0;
 8008a1a:	2700      	movs	r7, #0
  u16_t left = 0;
 8008a1c:	463e      	mov	r6, r7
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
      copied_total = (u16_t)(copied_total + buf_copy_len);
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
 8008a1e:	46b9      	mov	r9, r7
 8008a20:	e02f      	b.n	8008a82 <pbuf_copy_partial+0x7a>
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8008a22:	4b1c      	ldr	r3, [pc, #112]	; (8008a94 <pbuf_copy_partial+0x8c>)
 8008a24:	f240 420a 	movw	r2, #1034	; 0x40a
 8008a28:	491b      	ldr	r1, [pc, #108]	; (8008a98 <pbuf_copy_partial+0x90>)
 8008a2a:	481c      	ldr	r0, [pc, #112]	; (8008a9c <pbuf_copy_partial+0x94>)
 8008a2c:	f006 fa62 	bl	800eef4 <iprintf>
 8008a30:	2700      	movs	r7, #0
    }
  }
  return copied_total;
}
 8008a32:	4638      	mov	r0, r7
 8008a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008a38:	4b16      	ldr	r3, [pc, #88]	; (8008a94 <pbuf_copy_partial+0x8c>)
 8008a3a:	f240 420b 	movw	r2, #1035	; 0x40b
 8008a3e:	4918      	ldr	r1, [pc, #96]	; (8008aa0 <pbuf_copy_partial+0x98>)
 8008a40:	4816      	ldr	r0, [pc, #88]	; (8008a9c <pbuf_copy_partial+0x94>)
 8008a42:	f006 fa57 	bl	800eef4 <iprintf>
 8008a46:	2700      	movs	r7, #0
 8008a48:	e7f3      	b.n	8008a32 <pbuf_copy_partial+0x2a>
      buf_copy_len = (u16_t)(p->len - offset);
 8008a4a:	896c      	ldrh	r4, [r5, #10]
 8008a4c:	1ae4      	subs	r4, r4, r3
 8008a4e:	b2a4      	uxth	r4, r4
      if (buf_copy_len > len) {
 8008a50:	4554      	cmp	r4, sl
 8008a52:	bf28      	it	cs
 8008a54:	4654      	movcs	r4, sl
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008a56:	6869      	ldr	r1, [r5, #4]
 8008a58:	4622      	mov	r2, r4
 8008a5a:	4419      	add	r1, r3
 8008a5c:	eb08 0006 	add.w	r0, r8, r6
 8008a60:	f006 f983 	bl	800ed6a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008a64:	4427      	add	r7, r4
 8008a66:	b2bf      	uxth	r7, r7
      left = (u16_t)(left + buf_copy_len);
 8008a68:	4426      	add	r6, r4
 8008a6a:	b2b6      	uxth	r6, r6
      len = (u16_t)(len - buf_copy_len);
 8008a6c:	ebaa 0404 	sub.w	r4, sl, r4
 8008a70:	fa1f fa84 	uxth.w	sl, r4
      offset = 0;
 8008a74:	464b      	mov	r3, r9
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008a76:	682d      	ldr	r5, [r5, #0]
 8008a78:	f1ba 0f00 	cmp.w	sl, #0
 8008a7c:	d0d9      	beq.n	8008a32 <pbuf_copy_partial+0x2a>
 8008a7e:	2d00      	cmp	r5, #0
 8008a80:	d0d7      	beq.n	8008a32 <pbuf_copy_partial+0x2a>
    if ((offset != 0) && (offset >= p->len)) {
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0e1      	beq.n	8008a4a <pbuf_copy_partial+0x42>
 8008a86:	896a      	ldrh	r2, [r5, #10]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d8de      	bhi.n	8008a4a <pbuf_copy_partial+0x42>
      offset = (u16_t)(offset - p->len);
 8008a8c:	1a9b      	subs	r3, r3, r2
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	e7f1      	b.n	8008a76 <pbuf_copy_partial+0x6e>
 8008a92:	bf00      	nop
 8008a94:	08010e98 	.word	0x08010e98
 8008a98:	080110e0 	.word	0x080110e0
 8008a9c:	08010198 	.word	0x08010198
 8008aa0:	08011100 	.word	0x08011100

08008aa4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8008aa4:	b538      	push	{r3, r4, r5, lr}
 8008aa6:	4614      	mov	r4, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8008aa8:	460a      	mov	r2, r1
 8008aaa:	8921      	ldrh	r1, [r4, #8]
 8008aac:	f7ff fd9c 	bl	80085e8 <pbuf_alloc>
  if (q == NULL) {
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	b118      	cbz	r0, 8008abc <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f7ff ff05 	bl	80088c4 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008aba:	b908      	cbnz	r0, 8008ac0 <pbuf_clone+0x1c>
  return q;
}
 8008abc:	4628      	mov	r0, r5
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8008ac0:	4b03      	ldr	r3, [pc, #12]	; (8008ad0 <pbuf_clone+0x2c>)
 8008ac2:	f240 5224 	movw	r2, #1316	; 0x524
 8008ac6:	4903      	ldr	r1, [pc, #12]	; (8008ad4 <pbuf_clone+0x30>)
 8008ac8:	4803      	ldr	r0, [pc, #12]	; (8008ad8 <pbuf_clone+0x34>)
 8008aca:	f006 fa13 	bl	800eef4 <iprintf>
 8008ace:	e7f5      	b.n	8008abc <pbuf_clone+0x18>
 8008ad0:	08010e98 	.word	0x08010e98
 8008ad4:	08011124 	.word	0x08011124
 8008ad8:	08010198 	.word	0x08010198

08008adc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8008adc:	b510      	push	{r4, lr}
  u8_t i;
  u16_t n = 0;
 8008ade:	4b13      	ldr	r3, [pc, #76]	; (8008b2c <tcp_new_port+0x50>)
 8008ae0:	8818      	ldrh	r0, [r3, #0]
{
 8008ae2:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8008ae6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8008aea:	e002      	b.n	8008af2 <tcp_new_port+0x16>
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
      if (pcb->local_port == tcp_port) {
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008aec:	3c01      	subs	r4, #1
 8008aee:	b2a4      	uxth	r4, r4
 8008af0:	b1bc      	cbz	r4, 8008b22 <tcp_new_port+0x46>
  tcp_port++;
 8008af2:	3001      	adds	r0, #1
 8008af4:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8008af6:	4570      	cmp	r0, lr
 8008af8:	bf08      	it	eq
 8008afa:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008afe:	490c      	ldr	r1, [pc, #48]	; (8008b30 <tcp_new_port+0x54>)
 8008b00:	f101 0c10 	add.w	ip, r1, #16
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008b04:	f851 3b04 	ldr.w	r3, [r1], #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	b12b      	cbz	r3, 8008b18 <tcp_new_port+0x3c>
      if (pcb->local_port == tcp_port) {
 8008b0c:	8ada      	ldrh	r2, [r3, #22]
 8008b0e:	4282      	cmp	r2, r0
 8008b10:	d0ec      	beq.n	8008aec <tcp_new_port+0x10>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d1f9      	bne.n	8008b0c <tcp_new_port+0x30>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8008b18:	4561      	cmp	r1, ip
 8008b1a:	d1f3      	bne.n	8008b04 <tcp_new_port+0x28>
 8008b1c:	4b03      	ldr	r3, [pc, #12]	; (8008b2c <tcp_new_port+0x50>)
 8008b1e:	8018      	strh	r0, [r3, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <tcp_new_port+0x50>)
 8008b24:	8018      	strh	r0, [r3, #0]
          return 0;
 8008b26:	4620      	mov	r0, r4
 8008b28:	e7fa      	b.n	8008b20 <tcp_new_port+0x44>
 8008b2a:	bf00      	nop
 8008b2c:	20000028 	.word	0x20000028
 8008b30:	080117c4 	.word	0x080117c4

08008b34 <tcp_close_shutdown_fin>:
{
 8008b34:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008b36:	4604      	mov	r4, r0
 8008b38:	b140      	cbz	r0, 8008b4c <tcp_close_shutdown_fin+0x18>
  switch (pcb->state) {
 8008b3a:	7d23      	ldrb	r3, [r4, #20]
 8008b3c:	2b04      	cmp	r3, #4
 8008b3e:	d018      	beq.n	8008b72 <tcp_close_shutdown_fin+0x3e>
 8008b40:	2b07      	cmp	r3, #7
 8008b42:	d01d      	beq.n	8008b80 <tcp_close_shutdown_fin+0x4c>
 8008b44:	2b03      	cmp	r3, #3
 8008b46:	d009      	beq.n	8008b5c <tcp_close_shutdown_fin+0x28>
 8008b48:	2000      	movs	r0, #0
}
 8008b4a:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008b4c:	4b14      	ldr	r3, [pc, #80]	; (8008ba0 <tcp_close_shutdown_fin+0x6c>)
 8008b4e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008b52:	4914      	ldr	r1, [pc, #80]	; (8008ba4 <tcp_close_shutdown_fin+0x70>)
 8008b54:	4814      	ldr	r0, [pc, #80]	; (8008ba8 <tcp_close_shutdown_fin+0x74>)
 8008b56:	f006 f9cd 	bl	800eef4 <iprintf>
 8008b5a:	e7ee      	b.n	8008b3a <tcp_close_shutdown_fin+0x6>
      err = tcp_send_fin(pcb);
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f003 fbe3 	bl	800c328 <tcp_send_fin>
      if (err == ERR_OK) {
 8008b62:	b9a0      	cbnz	r0, 8008b8e <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8008b64:	2305      	movs	r3, #5
 8008b66:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f003 fd63 	bl	800c634 <tcp_output>
  return err;
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e7eb      	b.n	8008b4a <tcp_close_shutdown_fin+0x16>
      err = tcp_send_fin(pcb);
 8008b72:	4620      	mov	r0, r4
 8008b74:	f003 fbd8 	bl	800c328 <tcp_send_fin>
      if (err == ERR_OK) {
 8008b78:	b948      	cbnz	r0, 8008b8e <tcp_close_shutdown_fin+0x5a>
        pcb->state = FIN_WAIT_1;
 8008b7a:	2305      	movs	r3, #5
 8008b7c:	7523      	strb	r3, [r4, #20]
 8008b7e:	e7f3      	b.n	8008b68 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8008b80:	4620      	mov	r0, r4
 8008b82:	f003 fbd1 	bl	800c328 <tcp_send_fin>
      if (err == ERR_OK) {
 8008b86:	b910      	cbnz	r0, 8008b8e <tcp_close_shutdown_fin+0x5a>
        pcb->state = LAST_ACK;
 8008b88:	2309      	movs	r3, #9
 8008b8a:	7523      	strb	r3, [r4, #20]
 8008b8c:	e7ec      	b.n	8008b68 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 8008b8e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008b92:	d1da      	bne.n	8008b4a <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008b94:	8b63      	ldrh	r3, [r4, #26]
 8008b96:	f043 0308 	orr.w	r3, r3, #8
 8008b9a:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e7d4      	b.n	8008b4a <tcp_close_shutdown_fin+0x16>
 8008ba0:	08011138 	.word	0x08011138
 8008ba4:	08011168 	.word	0x08011168
 8008ba8:	08010198 	.word	0x08010198

08008bac <tcp_init>:
{
 8008bac:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008bae:	f006 f9b9 	bl	800ef24 <rand>
 8008bb2:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008bb6:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008bba:	4b01      	ldr	r3, [pc, #4]	; (8008bc0 <tcp_init+0x14>)
 8008bbc:	8018      	strh	r0, [r3, #0]
}
 8008bbe:	bd08      	pop	{r3, pc}
 8008bc0:	20000028 	.word	0x20000028

08008bc4 <tcp_free>:
{
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008bc8:	7d03      	ldrb	r3, [r0, #20]
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d004      	beq.n	8008bd8 <tcp_free+0x14>
  memp_free(MEMP_TCP_PCB, pcb);
 8008bce:	4621      	mov	r1, r4
 8008bd0:	2001      	movs	r0, #1
 8008bd2:	f7ff f9d7 	bl	8007f84 <memp_free>
}
 8008bd6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008bd8:	4b03      	ldr	r3, [pc, #12]	; (8008be8 <tcp_free+0x24>)
 8008bda:	22d4      	movs	r2, #212	; 0xd4
 8008bdc:	4903      	ldr	r1, [pc, #12]	; (8008bec <tcp_free+0x28>)
 8008bde:	4804      	ldr	r0, [pc, #16]	; (8008bf0 <tcp_free+0x2c>)
 8008be0:	f006 f988 	bl	800eef4 <iprintf>
 8008be4:	e7f3      	b.n	8008bce <tcp_free+0xa>
 8008be6:	bf00      	nop
 8008be8:	08011138 	.word	0x08011138
 8008bec:	08011174 	.word	0x08011174
 8008bf0:	08010198 	.word	0x08010198

08008bf4 <tcp_bind>:
{
 8008bf4:	b570      	push	{r4, r5, r6, lr}
    ipaddr = IP4_ADDR_ANY;
 8008bf6:	4c2a      	ldr	r4, [pc, #168]	; (8008ca0 <tcp_bind+0xac>)
 8008bf8:	2900      	cmp	r1, #0
 8008bfa:	bf18      	it	ne
 8008bfc:	460c      	movne	r4, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008bfe:	b168      	cbz	r0, 8008c1c <tcp_bind+0x28>
 8008c00:	4605      	mov	r5, r0
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008c02:	7d03      	ldrb	r3, [r0, #20]
 8008c04:	b9a3      	cbnz	r3, 8008c30 <tcp_bind+0x3c>
  if (port == 0) {
 8008c06:	b1ea      	cbz	r2, 8008c44 <tcp_bind+0x50>
 8008c08:	4e26      	ldr	r6, [pc, #152]	; (8008ca4 <tcp_bind+0xb0>)
 8008c0a:	f106 0c10 	add.w	ip, r6, #16
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c0e:	f856 3b04 	ldr.w	r3, [r6], #4
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	bb53      	cbnz	r3, 8008c6c <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8008c16:	4566      	cmp	r6, ip
 8008c18:	d1f9      	bne.n	8008c0e <tcp_bind+0x1a>
 8008c1a:	e017      	b.n	8008c4c <tcp_bind+0x58>
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008c1c:	4b22      	ldr	r3, [pc, #136]	; (8008ca8 <tcp_bind+0xb4>)
 8008c1e:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008c22:	4922      	ldr	r1, [pc, #136]	; (8008cac <tcp_bind+0xb8>)
 8008c24:	4822      	ldr	r0, [pc, #136]	; (8008cb0 <tcp_bind+0xbc>)
 8008c26:	f006 f965 	bl	800eef4 <iprintf>
 8008c2a:	f06f 000f 	mvn.w	r0, #15
 8008c2e:	e019      	b.n	8008c64 <tcp_bind+0x70>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <tcp_bind+0xb4>)
 8008c32:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008c36:	491f      	ldr	r1, [pc, #124]	; (8008cb4 <tcp_bind+0xc0>)
 8008c38:	481d      	ldr	r0, [pc, #116]	; (8008cb0 <tcp_bind+0xbc>)
 8008c3a:	f006 f95b 	bl	800eef4 <iprintf>
 8008c3e:	f06f 0005 	mvn.w	r0, #5
 8008c42:	e00f      	b.n	8008c64 <tcp_bind+0x70>
    port = tcp_new_port();
 8008c44:	f7ff ff4a 	bl	8008adc <tcp_new_port>
    if (port == 0) {
 8008c48:	4602      	mov	r2, r0
 8008c4a:	b1e0      	cbz	r0, 8008c86 <tcp_bind+0x92>
  if (!ip_addr_isany(ipaddr)
 8008c4c:	b114      	cbz	r4, 8008c54 <tcp_bind+0x60>
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	b103      	cbz	r3, 8008c54 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008c52:	602b      	str	r3, [r5, #0]
  pcb->local_port = port;
 8008c54:	82ea      	strh	r2, [r5, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008c56:	4b18      	ldr	r3, [pc, #96]	; (8008cb8 <tcp_bind+0xc4>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	60ea      	str	r2, [r5, #12]
 8008c5c:	601d      	str	r5, [r3, #0]
 8008c5e:	f003 fff9 	bl	800cc54 <tcp_timer_needed>
  return ERR_OK;
 8008c62:	2000      	movs	r0, #0
}
 8008c64:	bd70      	pop	{r4, r5, r6, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0d4      	beq.n	8008c16 <tcp_bind+0x22>
        if (cpcb->local_port == port) {
 8008c6c:	8ad9      	ldrh	r1, [r3, #22]
 8008c6e:	4291      	cmp	r1, r2
 8008c70:	d1f9      	bne.n	8008c66 <tcp_bind+0x72>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008c72:	6819      	ldr	r1, [r3, #0]
 8008c74:	b151      	cbz	r1, 8008c8c <tcp_bind+0x98>
 8008c76:	b164      	cbz	r4, 8008c92 <tcp_bind+0x9e>
                 ip_addr_isany(ipaddr) ||
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	b168      	cbz	r0, 8008c98 <tcp_bind+0xa4>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008c7c:	4281      	cmp	r1, r0
 8008c7e:	d1f2      	bne.n	8008c66 <tcp_bind+0x72>
              return ERR_USE;
 8008c80:	f06f 0007 	mvn.w	r0, #7
 8008c84:	e7ee      	b.n	8008c64 <tcp_bind+0x70>
      return ERR_BUF;
 8008c86:	f06f 0001 	mvn.w	r0, #1
 8008c8a:	e7eb      	b.n	8008c64 <tcp_bind+0x70>
              return ERR_USE;
 8008c8c:	f06f 0007 	mvn.w	r0, #7
 8008c90:	e7e8      	b.n	8008c64 <tcp_bind+0x70>
 8008c92:	f06f 0007 	mvn.w	r0, #7
 8008c96:	e7e5      	b.n	8008c64 <tcp_bind+0x70>
 8008c98:	f06f 0007 	mvn.w	r0, #7
 8008c9c:	e7e2      	b.n	8008c64 <tcp_bind+0x70>
 8008c9e:	bf00      	nop
 8008ca0:	080127e4 	.word	0x080127e4
 8008ca4:	080117c4 	.word	0x080117c4
 8008ca8:	08011138 	.word	0x08011138
 8008cac:	08011188 	.word	0x08011188
 8008cb0:	08010198 	.word	0x08010198
 8008cb4:	080111a0 	.word	0x080111a0
 8008cb8:	2001090c 	.word	0x2001090c

08008cbc <tcp_listen_with_backlog_and_err>:
{
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	b330      	cbz	r0, 8008d12 <tcp_listen_with_backlog_and_err+0x56>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008cc4:	7d03      	ldrb	r3, [r0, #20]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d12e      	bne.n	8008d28 <tcp_listen_with_backlog_and_err+0x6c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008cca:	2002      	movs	r0, #2
 8008ccc:	f7ff f92a 	bl	8007f24 <memp_malloc>
  if (lpcb == NULL) {
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d04b      	beq.n	8008d6e <tcp_listen_with_backlog_and_err+0xb2>
  lpcb->callback_arg = pcb->callback_arg;
 8008cd6:	6923      	ldr	r3, [r4, #16]
 8008cd8:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008cda:	8ae3      	ldrh	r3, [r4, #22]
 8008cdc:	82c3      	strh	r3, [r0, #22]
  lpcb->state = LISTEN;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	7503      	strb	r3, [r0, #20]
  lpcb->prio = pcb->prio;
 8008ce2:	7d63      	ldrb	r3, [r4, #21]
 8008ce4:	7543      	strb	r3, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008ce6:	7a63      	ldrb	r3, [r4, #9]
 8008ce8:	7243      	strb	r3, [r0, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008cea:	2300      	movs	r3, #0
 8008cec:	7203      	strb	r3, [r0, #8]
  lpcb->ttl = pcb->ttl;
 8008cee:	7ae3      	ldrb	r3, [r4, #11]
 8008cf0:	72c3      	strb	r3, [r0, #11]
  lpcb->tos = pcb->tos;
 8008cf2:	7aa3      	ldrb	r3, [r4, #10]
 8008cf4:	7283      	strb	r3, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	6003      	str	r3, [r0, #0]
  if (pcb->local_port != 0) {
 8008cfa:	8ae3      	ldrh	r3, [r4, #22]
 8008cfc:	b33b      	cbz	r3, 8008d4e <tcp_listen_with_backlog_and_err+0x92>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008cfe:	4b1d      	ldr	r3, [pc, #116]	; (8008d74 <tcp_listen_with_backlog_and_err+0xb8>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	d01b      	beq.n	8008d3e <tcp_listen_with_backlog_and_err+0x82>
 8008d06:	b303      	cbz	r3, 8008d4a <tcp_listen_with_backlog_and_err+0x8e>
 8008d08:	68da      	ldr	r2, [r3, #12]
 8008d0a:	42a2      	cmp	r2, r4
 8008d0c:	d01b      	beq.n	8008d46 <tcp_listen_with_backlog_and_err+0x8a>
 8008d0e:	4613      	mov	r3, r2
 8008d10:	e7f9      	b.n	8008d06 <tcp_listen_with_backlog_and_err+0x4a>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d12:	4b19      	ldr	r3, [pc, #100]	; (8008d78 <tcp_listen_with_backlog_and_err+0xbc>)
 8008d14:	f240 3259 	movw	r2, #857	; 0x359
 8008d18:	4918      	ldr	r1, [pc, #96]	; (8008d7c <tcp_listen_with_backlog_and_err+0xc0>)
 8008d1a:	4819      	ldr	r0, [pc, #100]	; (8008d80 <tcp_listen_with_backlog_and_err+0xc4>)
 8008d1c:	f006 f8ea 	bl	800eef4 <iprintf>
  struct tcp_pcb_listen *lpcb = NULL;
 8008d20:	4625      	mov	r5, r4
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008d22:	f06f 030f 	mvn.w	r3, #15
 8008d26:	e01e      	b.n	8008d66 <tcp_listen_with_backlog_and_err+0xaa>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008d28:	4b13      	ldr	r3, [pc, #76]	; (8008d78 <tcp_listen_with_backlog_and_err+0xbc>)
 8008d2a:	f240 325a 	movw	r2, #858	; 0x35a
 8008d2e:	4915      	ldr	r1, [pc, #84]	; (8008d84 <tcp_listen_with_backlog_and_err+0xc8>)
 8008d30:	4813      	ldr	r0, [pc, #76]	; (8008d80 <tcp_listen_with_backlog_and_err+0xc4>)
 8008d32:	f006 f8df 	bl	800eef4 <iprintf>
 8008d36:	f06f 030e 	mvn.w	r3, #14
  struct tcp_pcb_listen *lpcb = NULL;
 8008d3a:	2500      	movs	r5, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008d3c:	e013      	b.n	8008d66 <tcp_listen_with_backlog_and_err+0xaa>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008d3e:	68e2      	ldr	r2, [r4, #12]
 8008d40:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <tcp_listen_with_backlog_and_err+0xb8>)
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	e001      	b.n	8008d4a <tcp_listen_with_backlog_and_err+0x8e>
 8008d46:	68e2      	ldr	r2, [r4, #12]
 8008d48:	60da      	str	r2, [r3, #12]
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff ff38 	bl	8008bc4 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008d54:	4b0c      	ldr	r3, [pc, #48]	; (8008d88 <tcp_listen_with_backlog_and_err+0xcc>)
 8008d56:	61ab      	str	r3, [r5, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008d58:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <tcp_listen_with_backlog_and_err+0xd0>)
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	60ea      	str	r2, [r5, #12]
 8008d5e:	601d      	str	r5, [r3, #0]
 8008d60:	f003 ff78 	bl	800cc54 <tcp_timer_needed>
  res = ERR_OK;
 8008d64:	2300      	movs	r3, #0
  if (err != NULL) {
 8008d66:	b106      	cbz	r6, 8008d6a <tcp_listen_with_backlog_and_err+0xae>
    *err = res;
 8008d68:	7033      	strb	r3, [r6, #0]
}
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	bd70      	pop	{r4, r5, r6, pc}
    res = ERR_MEM;
 8008d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d72:	e7f8      	b.n	8008d66 <tcp_listen_with_backlog_and_err+0xaa>
 8008d74:	2001090c 	.word	0x2001090c
 8008d78:	08011138 	.word	0x08011138
 8008d7c:	080111c8 	.word	0x080111c8
 8008d80:	08010198 	.word	0x08010198
 8008d84:	080111f8 	.word	0x080111f8
 8008d88:	080092c1 	.word	0x080092c1
 8008d8c:	20010910 	.word	0x20010910

08008d90 <tcp_update_rcv_ann_wnd>:
{
 8008d90:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008d92:	4604      	mov	r4, r0
 8008d94:	b188      	cbz	r0, 8008dba <tcp_update_rcv_ann_wnd+0x2a>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008d96:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008d98:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008d9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008d9c:	1950      	adds	r0, r2, r5
 8008d9e:	1ac0      	subs	r0, r0, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008da0:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
 8008da4:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 8008da8:	bf94      	ite	ls
 8008daa:	eba0 010c 	subls.w	r1, r0, ip
 8008dae:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 8008db2:	2900      	cmp	r1, #0
 8008db4:	db09      	blt.n	8008dca <tcp_update_rcv_ann_wnd+0x3a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008db6:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008dba:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <tcp_update_rcv_ann_wnd+0x64>)
 8008dbc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008dc0:	490d      	ldr	r1, [pc, #52]	; (8008df8 <tcp_update_rcv_ann_wnd+0x68>)
 8008dc2:	480e      	ldr	r0, [pc, #56]	; (8008dfc <tcp_update_rcv_ann_wnd+0x6c>)
 8008dc4:	f006 f896 	bl	800eef4 <iprintf>
 8008dc8:	e7e5      	b.n	8008d96 <tcp_update_rcv_ann_wnd+0x6>
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008dca:	1aea      	subs	r2, r5, r3
 8008dcc:	2a00      	cmp	r2, #0
 8008dce:	dd02      	ble.n	8008dd6 <tcp_update_rcv_ann_wnd+0x46>
      pcb->rcv_ann_wnd = 0;
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	8560      	strh	r0, [r4, #42]	; 0x2a
 8008dd4:	e7f0      	b.n	8008db8 <tcp_update_rcv_ann_wnd+0x28>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008dd6:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008dd8:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008ddc:	d202      	bcs.n	8008de4 <tcp_update_rcv_ann_wnd+0x54>
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008dde:	8565      	strh	r5, [r4, #42]	; 0x2a
    return 0;
 8008de0:	2000      	movs	r0, #0
 8008de2:	e7e9      	b.n	8008db8 <tcp_update_rcv_ann_wnd+0x28>
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008de4:	4b03      	ldr	r3, [pc, #12]	; (8008df4 <tcp_update_rcv_ann_wnd+0x64>)
 8008de6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008dea:	4905      	ldr	r1, [pc, #20]	; (8008e00 <tcp_update_rcv_ann_wnd+0x70>)
 8008dec:	4803      	ldr	r0, [pc, #12]	; (8008dfc <tcp_update_rcv_ann_wnd+0x6c>)
 8008dee:	f006 f881 	bl	800eef4 <iprintf>
 8008df2:	e7f4      	b.n	8008dde <tcp_update_rcv_ann_wnd+0x4e>
 8008df4:	08011138 	.word	0x08011138
 8008df8:	08011230 	.word	0x08011230
 8008dfc:	08010198 	.word	0x08010198
 8008e00:	08011254 	.word	0x08011254

08008e04 <tcp_recved>:
{
 8008e04:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008e06:	b178      	cbz	r0, 8008e28 <tcp_recved+0x24>
 8008e08:	460c      	mov	r4, r1
 8008e0a:	4605      	mov	r5, r0
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008e0c:	7d03      	ldrb	r3, [r0, #20]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d012      	beq.n	8008e38 <tcp_recved+0x34>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008e12:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8008e14:	1919      	adds	r1, r3, r4
 8008e16:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008e18:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8008e1c:	d814      	bhi.n	8008e48 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008e1e:	428b      	cmp	r3, r1
 8008e20:	bf88      	it	hi
 8008e22:	f44f 6106 	movhi.w	r1, #2144	; 0x860
 8008e26:	e011      	b.n	8008e4c <tcp_recved+0x48>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008e28:	4b10      	ldr	r3, [pc, #64]	; (8008e6c <tcp_recved+0x68>)
 8008e2a:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008e2e:	4910      	ldr	r1, [pc, #64]	; (8008e70 <tcp_recved+0x6c>)
 8008e30:	4810      	ldr	r0, [pc, #64]	; (8008e74 <tcp_recved+0x70>)
 8008e32:	f006 f85f 	bl	800eef4 <iprintf>
 8008e36:	e010      	b.n	8008e5a <tcp_recved+0x56>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008e38:	4b0c      	ldr	r3, [pc, #48]	; (8008e6c <tcp_recved+0x68>)
 8008e3a:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008e3e:	490e      	ldr	r1, [pc, #56]	; (8008e78 <tcp_recved+0x74>)
 8008e40:	480c      	ldr	r0, [pc, #48]	; (8008e74 <tcp_recved+0x70>)
 8008e42:	f006 f857 	bl	800eef4 <iprintf>
 8008e46:	e7e4      	b.n	8008e12 <tcp_recved+0xe>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008e48:	f44f 6106 	mov.w	r1, #2144	; 0x860
 8008e4c:	8529      	strh	r1, [r5, #40]	; 0x28
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008e4e:	4628      	mov	r0, r5
 8008e50:	f7ff ff9e 	bl	8008d90 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008e54:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8008e58:	d200      	bcs.n	8008e5c <tcp_recved+0x58>
}
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8008e5c:	8b6b      	ldrh	r3, [r5, #26]
 8008e5e:	f043 0302 	orr.w	r3, r3, #2
 8008e62:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 8008e64:	4628      	mov	r0, r5
 8008e66:	f003 fbe5 	bl	800c634 <tcp_output>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
 8008e6a:	e7f6      	b.n	8008e5a <tcp_recved+0x56>
 8008e6c:	08011138 	.word	0x08011138
 8008e70:	08011270 	.word	0x08011270
 8008e74:	08010198 	.word	0x08010198
 8008e78:	08011288 	.word	0x08011288

08008e7c <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8008e7c:	b150      	cbz	r0, 8008e94 <tcp_seg_free+0x18>
{
 8008e7e:	b510      	push	{r4, lr}
 8008e80:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8008e82:	6840      	ldr	r0, [r0, #4]
 8008e84:	b108      	cbz	r0, 8008e8a <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008e86:	f7ff fb3f 	bl	8008508 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	2003      	movs	r0, #3
 8008e8e:	f7ff f879 	bl	8007f84 <memp_free>
  }
}
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	4770      	bx	lr

08008e96 <tcp_segs_free>:
{
 8008e96:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8008e98:	4604      	mov	r4, r0
 8008e9a:	b128      	cbz	r0, 8008ea8 <tcp_segs_free+0x12>
    struct tcp_seg *next = seg->next;
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8008ea0:	f7ff ffec 	bl	8008e7c <tcp_seg_free>
  while (seg != NULL) {
 8008ea4:	2c00      	cmp	r4, #0
 8008ea6:	d1f9      	bne.n	8008e9c <tcp_segs_free+0x6>
}
 8008ea8:	bd10      	pop	{r4, pc}
	...

08008eac <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8008eac:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008eae:	4605      	mov	r5, r0
 8008eb0:	b188      	cbz	r0, 8008ed6 <tcp_seg_copy+0x2a>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8008eb2:	2003      	movs	r0, #3
 8008eb4:	f7ff f836 	bl	8007f24 <memp_malloc>
  if (cseg == NULL) {
 8008eb8:	4604      	mov	r4, r0
 8008eba:	b150      	cbz	r0, 8008ed2 <tcp_seg_copy+0x26>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8008ebc:	6828      	ldr	r0, [r5, #0]
 8008ebe:	6869      	ldr	r1, [r5, #4]
 8008ec0:	68aa      	ldr	r2, [r5, #8]
 8008ec2:	68eb      	ldr	r3, [r5, #12]
 8008ec4:	6020      	str	r0, [r4, #0]
 8008ec6:	6061      	str	r1, [r4, #4]
 8008ec8:	60a2      	str	r2, [r4, #8]
 8008eca:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8008ecc:	6860      	ldr	r0, [r4, #4]
 8008ece:	f7ff fc9f 	bl	8008810 <pbuf_ref>
  return cseg;
}
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8008ed6:	4b04      	ldr	r3, [pc, #16]	; (8008ee8 <tcp_seg_copy+0x3c>)
 8008ed8:	f240 6282 	movw	r2, #1666	; 0x682
 8008edc:	4903      	ldr	r1, [pc, #12]	; (8008eec <tcp_seg_copy+0x40>)
 8008ede:	4804      	ldr	r0, [pc, #16]	; (8008ef0 <tcp_seg_copy+0x44>)
 8008ee0:	f006 f808 	bl	800eef4 <iprintf>
 8008ee4:	e7e5      	b.n	8008eb2 <tcp_seg_copy+0x6>
 8008ee6:	bf00      	nop
 8008ee8:	08011138 	.word	0x08011138
 8008eec:	080112b0 	.word	0x080112b0
 8008ef0:	08010198 	.word	0x08010198

08008ef4 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008ef4:	b100      	cbz	r0, 8008ef8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008ef6:	6101      	str	r1, [r0, #16]
  }
}
 8008ef8:	4770      	bx	lr
	...

08008efc <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008efc:	b180      	cbz	r0, 8008f20 <tcp_recv+0x24>
{
 8008efe:	b538      	push	{r3, r4, r5, lr}
 8008f00:	460c      	mov	r4, r1
 8008f02:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008f04:	7d03      	ldrb	r3, [r0, #20]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d002      	beq.n	8008f10 <tcp_recv+0x14>
    pcb->recv = recv;
 8008f0a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  }
}
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008f10:	4b04      	ldr	r3, [pc, #16]	; (8008f24 <tcp_recv+0x28>)
 8008f12:	f240 72df 	movw	r2, #2015	; 0x7df
 8008f16:	4904      	ldr	r1, [pc, #16]	; (8008f28 <tcp_recv+0x2c>)
 8008f18:	4804      	ldr	r0, [pc, #16]	; (8008f2c <tcp_recv+0x30>)
 8008f1a:	f005 ffeb 	bl	800eef4 <iprintf>
 8008f1e:	e7f4      	b.n	8008f0a <tcp_recv+0xe>
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	08011138 	.word	0x08011138
 8008f28:	080112cc 	.word	0x080112cc
 8008f2c:	08010198 	.word	0x08010198

08008f30 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f30:	b180      	cbz	r0, 8008f54 <tcp_sent+0x24>
{
 8008f32:	b538      	push	{r3, r4, r5, lr}
 8008f34:	460c      	mov	r4, r1
 8008f36:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008f38:	7d03      	ldrb	r3, [r0, #20]
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d002      	beq.n	8008f44 <tcp_sent+0x14>
    pcb->sent = sent;
 8008f3e:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
  }
}
 8008f42:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008f44:	4b04      	ldr	r3, [pc, #16]	; (8008f58 <tcp_sent+0x28>)
 8008f46:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008f4a:	4904      	ldr	r1, [pc, #16]	; (8008f5c <tcp_sent+0x2c>)
 8008f4c:	4804      	ldr	r0, [pc, #16]	; (8008f60 <tcp_sent+0x30>)
 8008f4e:	f005 ffd1 	bl	800eef4 <iprintf>
 8008f52:	e7f4      	b.n	8008f3e <tcp_sent+0xe>
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop
 8008f58:	08011138 	.word	0x08011138
 8008f5c:	080112f4 	.word	0x080112f4
 8008f60:	08010198 	.word	0x08010198

08008f64 <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008f64:	b180      	cbz	r0, 8008f88 <tcp_err+0x24>
{
 8008f66:	b538      	push	{r3, r4, r5, lr}
 8008f68:	460c      	mov	r4, r1
 8008f6a:	4605      	mov	r5, r0
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008f6c:	7d03      	ldrb	r3, [r0, #20]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d002      	beq.n	8008f78 <tcp_err+0x14>
    pcb->errf = err;
 8008f72:	f8c5 4090 	str.w	r4, [r5, #144]	; 0x90
  }
}
 8008f76:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <tcp_err+0x28>)
 8008f7a:	f640 020d 	movw	r2, #2061	; 0x80d
 8008f7e:	4904      	ldr	r1, [pc, #16]	; (8008f90 <tcp_err+0x2c>)
 8008f80:	4804      	ldr	r0, [pc, #16]	; (8008f94 <tcp_err+0x30>)
 8008f82:	f005 ffb7 	bl	800eef4 <iprintf>
 8008f86:	e7f4      	b.n	8008f72 <tcp_err+0xe>
 8008f88:	4770      	bx	lr
 8008f8a:	bf00      	nop
 8008f8c:	08011138 	.word	0x08011138
 8008f90:	0801131c 	.word	0x0801131c
 8008f94:	08010198 	.word	0x08010198

08008f98 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008f98:	b118      	cbz	r0, 8008fa2 <tcp_accept+0xa>
 8008f9a:	7d02      	ldrb	r2, [r0, #20]
 8008f9c:	2a01      	cmp	r2, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8008f9e:	bf08      	it	eq
 8008fa0:	6181      	streq	r1, [r0, #24]
  }
}
 8008fa2:	4770      	bx	lr

08008fa4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008fa4:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008fa6:	b148      	cbz	r0, 8008fbc <tcp_poll+0x18>
 8008fa8:	460d      	mov	r5, r1
 8008faa:	4614      	mov	r4, r2
 8008fac:	4606      	mov	r6, r0
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008fae:	7d03      	ldrb	r3, [r0, #20]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	d00b      	beq.n	8008fcc <tcp_poll+0x28>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8008fb4:	f8c6 508c 	str.w	r5, [r6, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8008fb8:	7774      	strb	r4, [r6, #29]
}
 8008fba:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008fbc:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <tcp_poll+0x38>)
 8008fbe:	f640 023d 	movw	r2, #2109	; 0x83d
 8008fc2:	4907      	ldr	r1, [pc, #28]	; (8008fe0 <tcp_poll+0x3c>)
 8008fc4:	4807      	ldr	r0, [pc, #28]	; (8008fe4 <tcp_poll+0x40>)
 8008fc6:	f005 ff95 	bl	800eef4 <iprintf>
 8008fca:	e7f6      	b.n	8008fba <tcp_poll+0x16>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008fcc:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <tcp_poll+0x38>)
 8008fce:	f640 023e 	movw	r2, #2110	; 0x83e
 8008fd2:	4905      	ldr	r1, [pc, #20]	; (8008fe8 <tcp_poll+0x44>)
 8008fd4:	4803      	ldr	r0, [pc, #12]	; (8008fe4 <tcp_poll+0x40>)
 8008fd6:	f005 ff8d 	bl	800eef4 <iprintf>
 8008fda:	e7eb      	b.n	8008fb4 <tcp_poll+0x10>
 8008fdc:	08011138 	.word	0x08011138
 8008fe0:	08011344 	.word	0x08011344
 8008fe4:	08010198 	.word	0x08010198
 8008fe8:	0801135c 	.word	0x0801135c

08008fec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8008fec:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008fee:	b130      	cbz	r0, 8008ffe <tcp_next_iss+0x12>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <tcp_next_iss+0x24>)
 8008ff2:	6818      	ldr	r0, [r3, #0]
 8008ff4:	4a07      	ldr	r2, [pc, #28]	; (8009014 <tcp_next_iss+0x28>)
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	4410      	add	r0, r2
 8008ffa:	6018      	str	r0, [r3, #0]
  return iss;
#endif /* LWIP_HOOK_TCP_ISN */
}
 8008ffc:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8008ffe:	4b06      	ldr	r3, [pc, #24]	; (8009018 <tcp_next_iss+0x2c>)
 8009000:	f640 02af 	movw	r2, #2223	; 0x8af
 8009004:	4905      	ldr	r1, [pc, #20]	; (800901c <tcp_next_iss+0x30>)
 8009006:	4806      	ldr	r0, [pc, #24]	; (8009020 <tcp_next_iss+0x34>)
 8009008:	f005 ff74 	bl	800eef4 <iprintf>
 800900c:	e7f0      	b.n	8008ff0 <tcp_next_iss+0x4>
 800900e:	bf00      	nop
 8009010:	20000024 	.word	0x20000024
 8009014:	20010914 	.word	0x20010914
 8009018:	08011138 	.word	0x08011138
 800901c:	0801137c 	.word	0x0801137c
 8009020:	08010198 	.word	0x08010198

08009024 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4605      	mov	r5, r0
 8009028:	460c      	mov	r4, r1
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800902a:	b162      	cbz	r2, 8009046 <tcp_eff_send_mss_netif+0x22>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800902c:	b14c      	cbz	r4, 8009042 <tcp_eff_send_mss_netif+0x1e>
      return sendmss;
    }
    mtu = outif->mtu;
 800902e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8009030:	b13b      	cbz	r3, 8009042 <tcp_eff_send_mss_netif+0x1e>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009032:	2b28      	cmp	r3, #40	; 0x28
 8009034:	bf86      	itte	hi
 8009036:	3b28      	subhi	r3, #40	; 0x28
 8009038:	b29b      	uxthhi	r3, r3
 800903a:	2300      	movls	r3, #0
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800903c:	429d      	cmp	r5, r3
 800903e:	bf28      	it	cs
 8009040:	461d      	movcs	r5, r3
  }
  return sendmss;
}
 8009042:	4628      	mov	r0, r5
 8009044:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009046:	4b04      	ldr	r3, [pc, #16]	; (8009058 <tcp_eff_send_mss_netif+0x34>)
 8009048:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800904c:	4903      	ldr	r1, [pc, #12]	; (800905c <tcp_eff_send_mss_netif+0x38>)
 800904e:	4804      	ldr	r0, [pc, #16]	; (8009060 <tcp_eff_send_mss_netif+0x3c>)
 8009050:	f005 ff50 	bl	800eef4 <iprintf>
 8009054:	e7ea      	b.n	800902c <tcp_eff_send_mss_netif+0x8>
 8009056:	bf00      	nop
 8009058:	08011138 	.word	0x08011138
 800905c:	08011398 	.word	0x08011398
 8009060:	08010198 	.word	0x08010198

08009064 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8009064:	b510      	push	{r4, lr}
 8009066:	4604      	mov	r4, r0
  if (pcb->ooseq) {
 8009068:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800906a:	b118      	cbz	r0, 8009074 <tcp_free_ooseq+0x10>
    tcp_segs_free(pcb->ooseq);
 800906c:	f7ff ff13 	bl	8008e96 <tcp_segs_free>
    pcb->ooseq = NULL;
 8009070:	2300      	movs	r3, #0
 8009072:	6763      	str	r3, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8009074:	bd10      	pop	{r4, pc}
	...

08009078 <tcp_pcb_purge>:
{
 8009078:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800907a:	b1f8      	cbz	r0, 80090bc <tcp_pcb_purge+0x44>
 800907c:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 800907e:	7d03      	ldrb	r3, [r0, #20]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d91a      	bls.n	80090ba <tcp_pcb_purge+0x42>
 8009084:	2b0a      	cmp	r3, #10
 8009086:	d018      	beq.n	80090ba <tcp_pcb_purge+0x42>
    if (pcb->refused_data != NULL) {
 8009088:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800908a:	b118      	cbz	r0, 8009094 <tcp_pcb_purge+0x1c>
      pbuf_free(pcb->refused_data);
 800908c:	f7ff fa3c 	bl	8008508 <pbuf_free>
      pcb->refused_data = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	67a3      	str	r3, [r4, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8009094:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009096:	b113      	cbz	r3, 800909e <tcp_pcb_purge+0x26>
      tcp_free_ooseq(pcb);
 8009098:	4620      	mov	r0, r4
 800909a:	f7ff ffe3 	bl	8009064 <tcp_free_ooseq>
    pcb->rtime = -1;
 800909e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80090a2:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 80090a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80090a6:	f7ff fef6 	bl	8008e96 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80090aa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80090ac:	f7ff fef3 	bl	8008e96 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80090b0:	2300      	movs	r3, #0
 80090b2:	66e3      	str	r3, [r4, #108]	; 0x6c
 80090b4:	6723      	str	r3, [r4, #112]	; 0x70
    pcb->unsent_oversize = 0;
 80090b6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 80090ba:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80090bc:	4b03      	ldr	r3, [pc, #12]	; (80090cc <tcp_pcb_purge+0x54>)
 80090be:	f640 0251 	movw	r2, #2129	; 0x851
 80090c2:	4903      	ldr	r1, [pc, #12]	; (80090d0 <tcp_pcb_purge+0x58>)
 80090c4:	4803      	ldr	r0, [pc, #12]	; (80090d4 <tcp_pcb_purge+0x5c>)
 80090c6:	f005 ff15 	bl	800eef4 <iprintf>
 80090ca:	e7f6      	b.n	80090ba <tcp_pcb_purge+0x42>
 80090cc:	08011138 	.word	0x08011138
 80090d0:	080113c0 	.word	0x080113c0
 80090d4:	08010198 	.word	0x08010198

080090d8 <tcp_pcb_remove>:
{
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80090dc:	460c      	mov	r4, r1
 80090de:	b149      	cbz	r1, 80090f4 <tcp_pcb_remove+0x1c>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80090e0:	b185      	cbz	r5, 8009104 <tcp_pcb_remove+0x2c>
  TCP_RMV(pcblist, pcb);
 80090e2:	682b      	ldr	r3, [r5, #0]
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	d015      	beq.n	8009114 <tcp_pcb_remove+0x3c>
 80090e8:	b1cb      	cbz	r3, 800911e <tcp_pcb_remove+0x46>
 80090ea:	68da      	ldr	r2, [r3, #12]
 80090ec:	42a2      	cmp	r2, r4
 80090ee:	d014      	beq.n	800911a <tcp_pcb_remove+0x42>
 80090f0:	4613      	mov	r3, r2
 80090f2:	e7f9      	b.n	80090e8 <tcp_pcb_remove+0x10>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80090f4:	4b25      	ldr	r3, [pc, #148]	; (800918c <tcp_pcb_remove+0xb4>)
 80090f6:	f640 0283 	movw	r2, #2179	; 0x883
 80090fa:	4925      	ldr	r1, [pc, #148]	; (8009190 <tcp_pcb_remove+0xb8>)
 80090fc:	4825      	ldr	r0, [pc, #148]	; (8009194 <tcp_pcb_remove+0xbc>)
 80090fe:	f005 fef9 	bl	800eef4 <iprintf>
 8009102:	e7ed      	b.n	80090e0 <tcp_pcb_remove+0x8>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8009104:	4b21      	ldr	r3, [pc, #132]	; (800918c <tcp_pcb_remove+0xb4>)
 8009106:	f640 0284 	movw	r2, #2180	; 0x884
 800910a:	4923      	ldr	r1, [pc, #140]	; (8009198 <tcp_pcb_remove+0xc0>)
 800910c:	4821      	ldr	r0, [pc, #132]	; (8009194 <tcp_pcb_remove+0xbc>)
 800910e:	f005 fef1 	bl	800eef4 <iprintf>
 8009112:	e7e6      	b.n	80090e2 <tcp_pcb_remove+0xa>
  TCP_RMV(pcblist, pcb);
 8009114:	68e3      	ldr	r3, [r4, #12]
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	e001      	b.n	800911e <tcp_pcb_remove+0x46>
 800911a:	68e2      	ldr	r2, [r4, #12]
 800911c:	60da      	str	r2, [r3, #12]
 800911e:	2300      	movs	r3, #0
 8009120:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8009122:	4620      	mov	r0, r4
 8009124:	f7ff ffa8 	bl	8009078 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 8009128:	7d23      	ldrb	r3, [r4, #20]
 800912a:	2b0a      	cmp	r3, #10
 800912c:	d005      	beq.n	800913a <tcp_pcb_remove+0x62>
 800912e:	2b01      	cmp	r3, #1
 8009130:	d01e      	beq.n	8009170 <tcp_pcb_remove+0x98>
      (pcb->flags & TF_ACK_DELAY)) {
 8009132:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009134:	f013 0f01 	tst.w	r3, #1
 8009138:	d11e      	bne.n	8009178 <tcp_pcb_remove+0xa0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800913a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800913c:	b133      	cbz	r3, 800914c <tcp_pcb_remove+0x74>
 800913e:	4b13      	ldr	r3, [pc, #76]	; (800918c <tcp_pcb_remove+0xb4>)
 8009140:	f640 0293 	movw	r2, #2195	; 0x893
 8009144:	4915      	ldr	r1, [pc, #84]	; (800919c <tcp_pcb_remove+0xc4>)
 8009146:	4813      	ldr	r0, [pc, #76]	; (8009194 <tcp_pcb_remove+0xbc>)
 8009148:	f005 fed4 	bl	800eef4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800914c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800914e:	b133      	cbz	r3, 800915e <tcp_pcb_remove+0x86>
 8009150:	4b0e      	ldr	r3, [pc, #56]	; (800918c <tcp_pcb_remove+0xb4>)
 8009152:	f640 0294 	movw	r2, #2196	; 0x894
 8009156:	4912      	ldr	r1, [pc, #72]	; (80091a0 <tcp_pcb_remove+0xc8>)
 8009158:	480e      	ldr	r0, [pc, #56]	; (8009194 <tcp_pcb_remove+0xbc>)
 800915a:	f005 fecb 	bl	800eef4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800915e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009160:	b133      	cbz	r3, 8009170 <tcp_pcb_remove+0x98>
 8009162:	4b0a      	ldr	r3, [pc, #40]	; (800918c <tcp_pcb_remove+0xb4>)
 8009164:	f640 0296 	movw	r2, #2198	; 0x896
 8009168:	490e      	ldr	r1, [pc, #56]	; (80091a4 <tcp_pcb_remove+0xcc>)
 800916a:	480a      	ldr	r0, [pc, #40]	; (8009194 <tcp_pcb_remove+0xbc>)
 800916c:	f005 fec2 	bl	800eef4 <iprintf>
  pcb->state = CLOSED;
 8009170:	2300      	movs	r3, #0
 8009172:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 8009174:	82e3      	strh	r3, [r4, #22]
}
 8009176:	bd38      	pop	{r3, r4, r5, pc}
    tcp_ack_now(pcb);
 8009178:	f043 0302 	orr.w	r3, r3, #2
 800917c:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800917e:	4620      	mov	r0, r4
 8009180:	f003 fa58 	bl	800c634 <tcp_output>
  if (pcb->state != LISTEN) {
 8009184:	7d23      	ldrb	r3, [r4, #20]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d0f2      	beq.n	8009170 <tcp_pcb_remove+0x98>
 800918a:	e7d6      	b.n	800913a <tcp_pcb_remove+0x62>
 800918c:	08011138 	.word	0x08011138
 8009190:	080113dc 	.word	0x080113dc
 8009194:	08010198 	.word	0x08010198
 8009198:	080113f8 	.word	0x080113f8
 800919c:	08011418 	.word	0x08011418
 80091a0:	08011430 	.word	0x08011430
 80091a4:	0801144c 	.word	0x0801144c

080091a8 <tcp_abandon>:
{
 80091a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ac:	b084      	sub	sp, #16
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80091ae:	b1f8      	cbz	r0, 80091f0 <tcp_abandon+0x48>
 80091b0:	460d      	mov	r5, r1
 80091b2:	4604      	mov	r4, r0
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80091b4:	7d03      	ldrb	r3, [r0, #20]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d022      	beq.n	8009200 <tcp_abandon+0x58>
  if (pcb->state == TIME_WAIT) {
 80091ba:	7d23      	ldrb	r3, [r4, #20]
 80091bc:	2b0a      	cmp	r3, #10
 80091be:	d027      	beq.n	8009210 <tcp_abandon+0x68>
    seqno = pcb->snd_nxt;
 80091c0:	f8d4 8050 	ldr.w	r8, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 80091c4:	f8d4 9024 	ldr.w	r9, [r4, #36]	; 0x24
    errf = pcb->errf;
 80091c8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 80091cc:	6927      	ldr	r7, [r4, #16]
    if (pcb->state == CLOSED) {
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d147      	bne.n	8009262 <tcp_abandon+0xba>
      if (pcb->local_port != 0) {
 80091d2:	f8b4 a016 	ldrh.w	sl, [r4, #22]
 80091d6:	f1ba 0f00 	cmp.w	sl, #0
 80091da:	d04c      	beq.n	8009276 <tcp_abandon+0xce>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80091dc:	4b2d      	ldr	r3, [pc, #180]	; (8009294 <tcp_abandon+0xec>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	42a3      	cmp	r3, r4
 80091e2:	d01d      	beq.n	8009220 <tcp_abandon+0x78>
 80091e4:	b313      	cbz	r3, 800922c <tcp_abandon+0x84>
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	42a2      	cmp	r2, r4
 80091ea:	d01d      	beq.n	8009228 <tcp_abandon+0x80>
 80091ec:	4613      	mov	r3, r2
 80091ee:	e7f9      	b.n	80091e4 <tcp_abandon+0x3c>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80091f0:	4b29      	ldr	r3, [pc, #164]	; (8009298 <tcp_abandon+0xf0>)
 80091f2:	f240 223d 	movw	r2, #573	; 0x23d
 80091f6:	4929      	ldr	r1, [pc, #164]	; (800929c <tcp_abandon+0xf4>)
 80091f8:	4829      	ldr	r0, [pc, #164]	; (80092a0 <tcp_abandon+0xf8>)
 80091fa:	f005 fe7b 	bl	800eef4 <iprintf>
 80091fe:	e02d      	b.n	800925c <tcp_abandon+0xb4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009200:	4b25      	ldr	r3, [pc, #148]	; (8009298 <tcp_abandon+0xf0>)
 8009202:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009206:	4927      	ldr	r1, [pc, #156]	; (80092a4 <tcp_abandon+0xfc>)
 8009208:	4825      	ldr	r0, [pc, #148]	; (80092a0 <tcp_abandon+0xf8>)
 800920a:	f005 fe73 	bl	800eef4 <iprintf>
 800920e:	e7d4      	b.n	80091ba <tcp_abandon+0x12>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009210:	4621      	mov	r1, r4
 8009212:	4825      	ldr	r0, [pc, #148]	; (80092a8 <tcp_abandon+0x100>)
 8009214:	f7ff ff60 	bl	80090d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009218:	4620      	mov	r0, r4
 800921a:	f7ff fcd3 	bl	8008bc4 <tcp_free>
 800921e:	e01d      	b.n	800925c <tcp_abandon+0xb4>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009220:	68e2      	ldr	r2, [r4, #12]
 8009222:	4b1c      	ldr	r3, [pc, #112]	; (8009294 <tcp_abandon+0xec>)
 8009224:	601a      	str	r2, [r3, #0]
 8009226:	e001      	b.n	800922c <tcp_abandon+0x84>
 8009228:	68e2      	ldr	r2, [r4, #12]
 800922a:	60da      	str	r2, [r3, #12]
 800922c:	2500      	movs	r5, #0
 800922e:	60e5      	str	r5, [r4, #12]
    u16_t local_port = 0;
 8009230:	46aa      	mov	sl, r5
    if (pcb->unacked != NULL) {
 8009232:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009234:	b108      	cbz	r0, 800923a <tcp_abandon+0x92>
      tcp_segs_free(pcb->unacked);
 8009236:	f7ff fe2e 	bl	8008e96 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800923a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800923c:	b108      	cbz	r0, 8009242 <tcp_abandon+0x9a>
      tcp_segs_free(pcb->unsent);
 800923e:	f7ff fe2a 	bl	8008e96 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8009242:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8009244:	b108      	cbz	r0, 800924a <tcp_abandon+0xa2>
      tcp_segs_free(pcb->ooseq);
 8009246:	f7ff fe26 	bl	8008e96 <tcp_segs_free>
    if (send_rst) {
 800924a:	b9b5      	cbnz	r5, 800927a <tcp_abandon+0xd2>
    tcp_free(pcb);
 800924c:	4620      	mov	r0, r4
 800924e:	f7ff fcb9 	bl	8008bc4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8009252:	b11e      	cbz	r6, 800925c <tcp_abandon+0xb4>
 8009254:	f06f 010c 	mvn.w	r1, #12
 8009258:	4638      	mov	r0, r7
 800925a:	47b0      	blx	r6
}
 800925c:	b004      	add	sp, #16
 800925e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      local_port = pcb->local_port;
 8009262:	f8b4 a016 	ldrh.w	sl, [r4, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009266:	4621      	mov	r1, r4
 8009268:	4810      	ldr	r0, [pc, #64]	; (80092ac <tcp_abandon+0x104>)
 800926a:	f7ff ff35 	bl	80090d8 <tcp_pcb_remove>
 800926e:	4b10      	ldr	r3, [pc, #64]	; (80092b0 <tcp_abandon+0x108>)
 8009270:	2201      	movs	r2, #1
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	e7dd      	b.n	8009232 <tcp_abandon+0x8a>
    int send_rst = 0;
 8009276:	2500      	movs	r5, #0
 8009278:	e7db      	b.n	8009232 <tcp_abandon+0x8a>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800927a:	8b23      	ldrh	r3, [r4, #24]
 800927c:	9302      	str	r3, [sp, #8]
 800927e:	f8cd a004 	str.w	sl, [sp, #4]
 8009282:	1d23      	adds	r3, r4, #4
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	4623      	mov	r3, r4
 8009288:	464a      	mov	r2, r9
 800928a:	4641      	mov	r1, r8
 800928c:	4620      	mov	r0, r4
 800928e:	f003 f94f 	bl	800c530 <tcp_rst>
 8009292:	e7db      	b.n	800924c <tcp_abandon+0xa4>
 8009294:	2001090c 	.word	0x2001090c
 8009298:	08011138 	.word	0x08011138
 800929c:	08011464 	.word	0x08011464
 80092a0:	08010198 	.word	0x08010198
 80092a4:	08011480 	.word	0x08011480
 80092a8:	2001091c 	.word	0x2001091c
 80092ac:	20010904 	.word	0x20010904
 80092b0:	20010908 	.word	0x20010908

080092b4 <tcp_abort>:
{
 80092b4:	b508      	push	{r3, lr}
  tcp_abandon(pcb, 1);
 80092b6:	2101      	movs	r1, #1
 80092b8:	f7ff ff76 	bl	80091a8 <tcp_abandon>
}
 80092bc:	bd08      	pop	{r3, pc}
	...

080092c0 <tcp_accept_null>:
{
 80092c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80092c2:	460c      	mov	r4, r1
 80092c4:	b129      	cbz	r1, 80092d2 <tcp_accept_null+0x12>
  tcp_abort(pcb);
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7ff fff4 	bl	80092b4 <tcp_abort>
}
 80092cc:	f06f 000c 	mvn.w	r0, #12
 80092d0:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80092d2:	4b04      	ldr	r3, [pc, #16]	; (80092e4 <tcp_accept_null+0x24>)
 80092d4:	f240 320f 	movw	r2, #783	; 0x30f
 80092d8:	4903      	ldr	r1, [pc, #12]	; (80092e8 <tcp_accept_null+0x28>)
 80092da:	4804      	ldr	r0, [pc, #16]	; (80092ec <tcp_accept_null+0x2c>)
 80092dc:	f005 fe0a 	bl	800eef4 <iprintf>
 80092e0:	e7f1      	b.n	80092c6 <tcp_accept_null+0x6>
 80092e2:	bf00      	nop
 80092e4:	08011138 	.word	0x08011138
 80092e8:	080114b4 	.word	0x080114b4
 80092ec:	08010198 	.word	0x08010198

080092f0 <tcp_netif_ip_addr_changed_pcblist>:
{
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80092f4:	4605      	mov	r5, r0
 80092f6:	b108      	cbz	r0, 80092fc <tcp_netif_ip_addr_changed_pcblist+0xc>
  while (pcb != NULL) {
 80092f8:	b97c      	cbnz	r4, 800931a <tcp_netif_ip_addr_changed_pcblist+0x2a>
}
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80092fc:	4b0a      	ldr	r3, [pc, #40]	; (8009328 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 80092fe:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009302:	490a      	ldr	r1, [pc, #40]	; (800932c <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 8009304:	480a      	ldr	r0, [pc, #40]	; (8009330 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 8009306:	f005 fdf5 	bl	800eef4 <iprintf>
 800930a:	e7f5      	b.n	80092f8 <tcp_netif_ip_addr_changed_pcblist+0x8>
      struct tcp_pcb *next = pcb->next;
 800930c:	68e6      	ldr	r6, [r4, #12]
      tcp_abort(pcb);
 800930e:	4620      	mov	r0, r4
 8009310:	f7ff ffd0 	bl	80092b4 <tcp_abort>
      pcb = next;
 8009314:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8009316:	2c00      	cmp	r4, #0
 8009318:	d0ef      	beq.n	80092fa <tcp_netif_ip_addr_changed_pcblist+0xa>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800931a:	6822      	ldr	r2, [r4, #0]
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	429a      	cmp	r2, r3
 8009320:	d0f4      	beq.n	800930c <tcp_netif_ip_addr_changed_pcblist+0x1c>
      pcb = pcb->next;
 8009322:	68e4      	ldr	r4, [r4, #12]
 8009324:	e7f7      	b.n	8009316 <tcp_netif_ip_addr_changed_pcblist+0x26>
 8009326:	bf00      	nop
 8009328:	08011138 	.word	0x08011138
 800932c:	080114d4 	.word	0x080114d4
 8009330:	08010198 	.word	0x08010198

08009334 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 8009334:	b308      	cbz	r0, 800937a <tcp_netif_ip_addr_changed+0x46>
{
 8009336:	b538      	push	{r3, r4, r5, lr}
 8009338:	460d      	mov	r5, r1
 800933a:	4604      	mov	r4, r0
  if (!ip_addr_isany(old_addr)) {
 800933c:	6803      	ldr	r3, [r0, #0]
 800933e:	b903      	cbnz	r3, 8009342 <tcp_netif_ip_addr_changed+0xe>
}
 8009340:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009342:	4b0e      	ldr	r3, [pc, #56]	; (800937c <tcp_netif_ip_addr_changed+0x48>)
 8009344:	6819      	ldr	r1, [r3, #0]
 8009346:	f7ff ffd3 	bl	80092f0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800934a:	4b0d      	ldr	r3, [pc, #52]	; (8009380 <tcp_netif_ip_addr_changed+0x4c>)
 800934c:	6819      	ldr	r1, [r3, #0]
 800934e:	4620      	mov	r0, r4
 8009350:	f7ff ffce 	bl	80092f0 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 8009354:	2d00      	cmp	r5, #0
 8009356:	d0f3      	beq.n	8009340 <tcp_netif_ip_addr_changed+0xc>
 8009358:	682b      	ldr	r3, [r5, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0f0      	beq.n	8009340 <tcp_netif_ip_addr_changed+0xc>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800935e:	4b09      	ldr	r3, [pc, #36]	; (8009384 <tcp_netif_ip_addr_changed+0x50>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d0ec      	beq.n	8009340 <tcp_netif_ip_addr_changed+0xc>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009366:	6819      	ldr	r1, [r3, #0]
 8009368:	6822      	ldr	r2, [r4, #0]
 800936a:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800936c:	bf04      	itt	eq
 800936e:	682a      	ldreq	r2, [r5, #0]
 8009370:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009372:	68db      	ldr	r3, [r3, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f6      	bne.n	8009366 <tcp_netif_ip_addr_changed+0x32>
 8009378:	e7e2      	b.n	8009340 <tcp_netif_ip_addr_changed+0xc>
 800937a:	4770      	bx	lr
 800937c:	20010904 	.word	0x20010904
 8009380:	2001090c 	.word	0x2001090c
 8009384:	20010910 	.word	0x20010910

08009388 <tcp_kill_state>:
{
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800938c:	f1a0 0308 	sub.w	r3, r0, #8
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b01      	cmp	r3, #1
 8009394:	d807      	bhi.n	80093a6 <tcp_kill_state+0x1e>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <tcp_kill_state+0x50>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	b1e3      	cbz	r3, 80093d6 <tcp_kill_state+0x4e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800939c:	4a0f      	ldr	r2, [pc, #60]	; (80093dc <tcp_kill_state+0x54>)
 800939e:	6815      	ldr	r5, [r2, #0]
  inactivity = 0;
 80093a0:	2100      	movs	r1, #0
  inactive = NULL;
 80093a2:	4608      	mov	r0, r1
 80093a4:	e009      	b.n	80093ba <tcp_kill_state+0x32>
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80093a6:	4b0e      	ldr	r3, [pc, #56]	; (80093e0 <tcp_kill_state+0x58>)
 80093a8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80093ac:	490d      	ldr	r1, [pc, #52]	; (80093e4 <tcp_kill_state+0x5c>)
 80093ae:	480e      	ldr	r0, [pc, #56]	; (80093e8 <tcp_kill_state+0x60>)
 80093b0:	f005 fda0 	bl	800eef4 <iprintf>
 80093b4:	e7ef      	b.n	8009396 <tcp_kill_state+0xe>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80093b6:	68db      	ldr	r3, [r3, #12]
 80093b8:	b14b      	cbz	r3, 80093ce <tcp_kill_state+0x46>
    if (pcb->state == state) {
 80093ba:	7d1a      	ldrb	r2, [r3, #20]
 80093bc:	42a2      	cmp	r2, r4
 80093be:	d1fa      	bne.n	80093b6 <tcp_kill_state+0x2e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80093c0:	6a1a      	ldr	r2, [r3, #32]
 80093c2:	1aaa      	subs	r2, r5, r2
 80093c4:	428a      	cmp	r2, r1
        inactivity = tcp_ticks - pcb->tmr;
 80093c6:	bf24      	itt	cs
 80093c8:	4611      	movcs	r1, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80093ca:	4618      	movcs	r0, r3
 80093cc:	e7f3      	b.n	80093b6 <tcp_kill_state+0x2e>
  if (inactive != NULL) {
 80093ce:	b110      	cbz	r0, 80093d6 <tcp_kill_state+0x4e>
    tcp_abandon(inactive, 0);
 80093d0:	2100      	movs	r1, #0
 80093d2:	f7ff fee9 	bl	80091a8 <tcp_abandon>
}
 80093d6:	bd38      	pop	{r3, r4, r5, pc}
 80093d8:	20010904 	.word	0x20010904
 80093dc:	20010914 	.word	0x20010914
 80093e0:	08011138 	.word	0x08011138
 80093e4:	08011508 	.word	0x08011508
 80093e8:	08010198 	.word	0x08010198

080093ec <tcp_alloc>:
{
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80093f0:	2001      	movs	r0, #1
 80093f2:	f7fe fd97 	bl	8007f24 <memp_malloc>
  if (pcb == NULL) {
 80093f6:	4604      	mov	r4, r0
 80093f8:	b360      	cbz	r0, 8009454 <tcp_alloc+0x68>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80093fa:	229c      	movs	r2, #156	; 0x9c
 80093fc:	2100      	movs	r1, #0
 80093fe:	4620      	mov	r0, r4
 8009400:	f005 fcdb 	bl	800edba <memset>
    pcb->prio = prio;
 8009404:	7566      	strb	r6, [r4, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009406:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800940a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800940e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8009412:	8562      	strh	r2, [r4, #42]	; 0x2a
 8009414:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009416:	22ff      	movs	r2, #255	; 0xff
 8009418:	72e2      	strb	r2, [r4, #11]
    pcb->mss = INITIAL_MSS;
 800941a:	f44f 7206 	mov.w	r2, #536	; 0x218
 800941e:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8009420:	2206      	movs	r2, #6
 8009422:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009426:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8009428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800942c:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 800942e:	2201      	movs	r2, #1
 8009430:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8009434:	4a3b      	ldr	r2, [pc, #236]	; (8009524 <tcp_alloc+0x138>)
 8009436:	6812      	ldr	r2, [r2, #0]
 8009438:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 800943a:	4a3b      	ldr	r2, [pc, #236]	; (8009528 <tcp_alloc+0x13c>)
 800943c:	7812      	ldrb	r2, [r2, #0]
 800943e:	77a2      	strb	r2, [r4, #30]
    pcb->ssthresh = TCP_SND_BUF;
 8009440:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->recv = tcp_recv_null;
 8009444:	4b39      	ldr	r3, [pc, #228]	; (800952c <tcp_alloc+0x140>)
 8009446:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800944a:	4b39      	ldr	r3, [pc, #228]	; (8009530 <tcp_alloc+0x144>)
 800944c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8009450:	4620      	mov	r0, r4
 8009452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8009454:	4b37      	ldr	r3, [pc, #220]	; (8009534 <tcp_alloc+0x148>)
 8009456:	681d      	ldr	r5, [r3, #0]
  while (pcb != NULL) {
 8009458:	2d00      	cmp	r5, #0
 800945a:	d132      	bne.n	80094c2 <tcp_alloc+0xd6>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800945c:	4b36      	ldr	r3, [pc, #216]	; (8009538 <tcp_alloc+0x14c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	b17b      	cbz	r3, 8009482 <tcp_alloc+0x96>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009462:	4a30      	ldr	r2, [pc, #192]	; (8009524 <tcp_alloc+0x138>)
 8009464:	6810      	ldr	r0, [r2, #0]
  inactivity = 0;
 8009466:	2100      	movs	r1, #0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009468:	6a1a      	ldr	r2, [r3, #32]
 800946a:	1a82      	subs	r2, r0, r2
 800946c:	428a      	cmp	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 800946e:	bf24      	itt	cs
 8009470:	4611      	movcs	r1, r2
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009472:	461c      	movcs	r4, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1f6      	bne.n	8009468 <tcp_alloc+0x7c>
  if (inactive != NULL) {
 800947a:	b114      	cbz	r4, 8009482 <tcp_alloc+0x96>
    tcp_abort(inactive);
 800947c:	4620      	mov	r0, r4
 800947e:	f7ff ff19 	bl	80092b4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009482:	2001      	movs	r0, #1
 8009484:	f7fe fd4e 	bl	8007f24 <memp_malloc>
    if (pcb == NULL) {
 8009488:	4604      	mov	r4, r0
 800948a:	2800      	cmp	r0, #0
 800948c:	d1b5      	bne.n	80093fa <tcp_alloc+0xe>
      tcp_kill_state(LAST_ACK);
 800948e:	2009      	movs	r0, #9
 8009490:	f7ff ff7a 	bl	8009388 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009494:	2001      	movs	r0, #1
 8009496:	f7fe fd45 	bl	8007f24 <memp_malloc>
      if (pcb == NULL) {
 800949a:	4604      	mov	r4, r0
 800949c:	2800      	cmp	r0, #0
 800949e:	d1ac      	bne.n	80093fa <tcp_alloc+0xe>
        tcp_kill_state(CLOSING);
 80094a0:	2008      	movs	r0, #8
 80094a2:	f7ff ff71 	bl	8009388 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80094a6:	2001      	movs	r0, #1
 80094a8:	f7fe fd3c 	bl	8007f24 <memp_malloc>
        if (pcb == NULL) {
 80094ac:	4604      	mov	r4, r0
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d1a3      	bne.n	80093fa <tcp_alloc+0xe>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094b2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80094b6:	d110      	bne.n	80094da <tcp_alloc+0xee>
  if (mprio == 0) {
 80094b8:	b36e      	cbz	r6, 8009516 <tcp_alloc+0x12a>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094ba:	4633      	mov	r3, r6
 80094bc:	e00e      	b.n	80094dc <tcp_alloc+0xf0>
  while (pcb != NULL) {
 80094be:	2d00      	cmp	r5, #0
 80094c0:	d0cc      	beq.n	800945c <tcp_alloc+0x70>
    struct tcp_pcb *next = pcb->next;
 80094c2:	4628      	mov	r0, r5
 80094c4:	68ed      	ldr	r5, [r5, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 80094c6:	8b43      	ldrh	r3, [r0, #26]
 80094c8:	f013 0f08 	tst.w	r3, #8
 80094cc:	d0f7      	beq.n	80094be <tcp_alloc+0xd2>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80094ce:	f023 0308 	bic.w	r3, r3, #8
 80094d2:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 80094d4:	f7ff fb2e 	bl	8008b34 <tcp_close_shutdown_fin>
 80094d8:	e7f1      	b.n	80094be <tcp_alloc+0xd2>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80094da:	237f      	movs	r3, #127	; 0x7f
  mprio--;
 80094dc:	3b01      	subs	r3, #1
 80094de:	b2da      	uxtb	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094e0:	4b14      	ldr	r3, [pc, #80]	; (8009534 <tcp_alloc+0x148>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	b1bb      	cbz	r3, 8009516 <tcp_alloc+0x12a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80094e6:	490f      	ldr	r1, [pc, #60]	; (8009524 <tcp_alloc+0x138>)
 80094e8:	680d      	ldr	r5, [r1, #0]
  inactivity = 0;
 80094ea:	2000      	movs	r0, #0
 80094ec:	e005      	b.n	80094fa <tcp_alloc+0x10e>
      inactivity = tcp_ticks - pcb->tmr;
 80094ee:	6a1a      	ldr	r2, [r3, #32]
 80094f0:	1aa8      	subs	r0, r5, r2
      mprio      = pcb->prio;
 80094f2:	460a      	mov	r2, r1
      inactivity = tcp_ticks - pcb->tmr;
 80094f4:	461c      	mov	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	b14b      	cbz	r3, 800950e <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 80094fa:	7d59      	ldrb	r1, [r3, #21]
 80094fc:	4291      	cmp	r1, r2
 80094fe:	d3f6      	bcc.n	80094ee <tcp_alloc+0x102>
 8009500:	d1f9      	bne.n	80094f6 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009502:	6a1f      	ldr	r7, [r3, #32]
 8009504:	eba5 0c07 	sub.w	ip, r5, r7
 8009508:	4584      	cmp	ip, r0
 800950a:	d3f4      	bcc.n	80094f6 <tcp_alloc+0x10a>
 800950c:	e7ef      	b.n	80094ee <tcp_alloc+0x102>
  if (inactive != NULL) {
 800950e:	b114      	cbz	r4, 8009516 <tcp_alloc+0x12a>
    tcp_abort(inactive);
 8009510:	4620      	mov	r0, r4
 8009512:	f7ff fecf 	bl	80092b4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009516:	2001      	movs	r0, #1
 8009518:	f7fe fd04 	bl	8007f24 <memp_malloc>
  if (pcb != NULL) {
 800951c:	4604      	mov	r4, r0
 800951e:	2800      	cmp	r0, #0
 8009520:	d096      	beq.n	8009450 <tcp_alloc+0x64>
 8009522:	e76a      	b.n	80093fa <tcp_alloc+0xe>
 8009524:	20010914 	.word	0x20010914
 8009528:	20010919 	.word	0x20010919
 800952c:	08009711 	.word	0x08009711
 8009530:	006ddd00 	.word	0x006ddd00
 8009534:	20010904 	.word	0x20010904
 8009538:	2001091c 	.word	0x2001091c

0800953c <tcp_new_ip_type>:
{
 800953c:	b508      	push	{r3, lr}
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800953e:	2040      	movs	r0, #64	; 0x40
 8009540:	f7ff ff54 	bl	80093ec <tcp_alloc>
}
 8009544:	bd08      	pop	{r3, pc}
	...

08009548 <tcp_close_shutdown>:
{
 8009548:	b530      	push	{r4, r5, lr}
 800954a:	b085      	sub	sp, #20
 800954c:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800954e:	4604      	mov	r4, r0
 8009550:	b188      	cbz	r0, 8009576 <tcp_close_shutdown+0x2e>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009552:	b125      	cbz	r5, 800955e <tcp_close_shutdown+0x16>
 8009554:	7d23      	ldrb	r3, [r4, #20]
 8009556:	2b04      	cmp	r3, #4
 8009558:	d015      	beq.n	8009586 <tcp_close_shutdown+0x3e>
 800955a:	2b07      	cmp	r3, #7
 800955c:	d013      	beq.n	8009586 <tcp_close_shutdown+0x3e>
  switch (pcb->state) {
 800955e:	7d23      	ldrb	r3, [r4, #20]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d06d      	beq.n	8009640 <tcp_close_shutdown+0xf8>
 8009564:	2b02      	cmp	r3, #2
 8009566:	f000 8091 	beq.w	800968c <tcp_close_shutdown+0x144>
 800956a:	2b00      	cmp	r3, #0
 800956c:	d04f      	beq.n	800960e <tcp_close_shutdown+0xc6>
      return tcp_close_shutdown_fin(pcb);
 800956e:	4620      	mov	r0, r4
 8009570:	f7ff fae0 	bl	8008b34 <tcp_close_shutdown_fin>
 8009574:	e081      	b.n	800967a <tcp_close_shutdown+0x132>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009576:	4b4b      	ldr	r3, [pc, #300]	; (80096a4 <tcp_close_shutdown+0x15c>)
 8009578:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800957c:	494a      	ldr	r1, [pc, #296]	; (80096a8 <tcp_close_shutdown+0x160>)
 800957e:	484b      	ldr	r0, [pc, #300]	; (80096ac <tcp_close_shutdown+0x164>)
 8009580:	f005 fcb8 	bl	800eef4 <iprintf>
 8009584:	e7e5      	b.n	8009552 <tcp_close_shutdown+0xa>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009586:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009588:	b1e3      	cbz	r3, 80095c4 <tcp_close_shutdown+0x7c>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800958a:	8b63      	ldrh	r3, [r4, #26]
 800958c:	f013 0f10 	tst.w	r3, #16
 8009590:	d01d      	beq.n	80095ce <tcp_close_shutdown+0x86>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009592:	8b23      	ldrh	r3, [r4, #24]
 8009594:	9302      	str	r3, [sp, #8]
 8009596:	8ae3      	ldrh	r3, [r4, #22]
 8009598:	9301      	str	r3, [sp, #4]
 800959a:	1d23      	adds	r3, r4, #4
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	4623      	mov	r3, r4
 80095a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80095a2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80095a4:	4620      	mov	r0, r4
 80095a6:	f002 ffc3 	bl	800c530 <tcp_rst>
      tcp_pcb_purge(pcb);
 80095aa:	4620      	mov	r0, r4
 80095ac:	f7ff fd64 	bl	8009078 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80095b0:	4b3f      	ldr	r3, [pc, #252]	; (80096b0 <tcp_close_shutdown+0x168>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d012      	beq.n	80095de <tcp_close_shutdown+0x96>
 80095b8:	b1bb      	cbz	r3, 80095ea <tcp_close_shutdown+0xa2>
 80095ba:	68da      	ldr	r2, [r3, #12]
 80095bc:	42a2      	cmp	r2, r4
 80095be:	d012      	beq.n	80095e6 <tcp_close_shutdown+0x9e>
 80095c0:	4613      	mov	r3, r2
 80095c2:	e7f9      	b.n	80095b8 <tcp_close_shutdown+0x70>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80095c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80095c6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80095ca:	d0c8      	beq.n	800955e <tcp_close_shutdown+0x16>
 80095cc:	e7dd      	b.n	800958a <tcp_close_shutdown+0x42>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80095ce:	4b35      	ldr	r3, [pc, #212]	; (80096a4 <tcp_close_shutdown+0x15c>)
 80095d0:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80095d4:	4937      	ldr	r1, [pc, #220]	; (80096b4 <tcp_close_shutdown+0x16c>)
 80095d6:	4835      	ldr	r0, [pc, #212]	; (80096ac <tcp_close_shutdown+0x164>)
 80095d8:	f005 fc8c 	bl	800eef4 <iprintf>
 80095dc:	e7d9      	b.n	8009592 <tcp_close_shutdown+0x4a>
      TCP_RMV_ACTIVE(pcb);
 80095de:	68e2      	ldr	r2, [r4, #12]
 80095e0:	4b33      	ldr	r3, [pc, #204]	; (80096b0 <tcp_close_shutdown+0x168>)
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	e001      	b.n	80095ea <tcp_close_shutdown+0xa2>
 80095e6:	68e2      	ldr	r2, [r4, #12]
 80095e8:	60da      	str	r2, [r3, #12]
 80095ea:	2300      	movs	r3, #0
 80095ec:	60e3      	str	r3, [r4, #12]
 80095ee:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <tcp_close_shutdown+0x170>)
 80095f0:	2201      	movs	r2, #1
 80095f2:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80095f4:	4b31      	ldr	r3, [pc, #196]	; (80096bc <tcp_close_shutdown+0x174>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	42a3      	cmp	r3, r4
 80095fa:	d004      	beq.n	8009606 <tcp_close_shutdown+0xbe>
        tcp_free(pcb);
 80095fc:	4620      	mov	r0, r4
 80095fe:	f7ff fae1 	bl	8008bc4 <tcp_free>
      return ERR_OK;
 8009602:	2000      	movs	r0, #0
 8009604:	e039      	b.n	800967a <tcp_close_shutdown+0x132>
        tcp_trigger_input_pcb_close();
 8009606:	f002 f80f 	bl	800b628 <tcp_trigger_input_pcb_close>
      return ERR_OK;
 800960a:	2000      	movs	r0, #0
 800960c:	e035      	b.n	800967a <tcp_close_shutdown+0x132>
      if (pcb->local_port != 0) {
 800960e:	8ae3      	ldrh	r3, [r4, #22]
 8009610:	b18b      	cbz	r3, 8009636 <tcp_close_shutdown+0xee>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009612:	4b2b      	ldr	r3, [pc, #172]	; (80096c0 <tcp_close_shutdown+0x178>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	42a3      	cmp	r3, r4
 8009618:	d005      	beq.n	8009626 <tcp_close_shutdown+0xde>
 800961a:	b153      	cbz	r3, 8009632 <tcp_close_shutdown+0xea>
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	42a2      	cmp	r2, r4
 8009620:	d005      	beq.n	800962e <tcp_close_shutdown+0xe6>
 8009622:	4613      	mov	r3, r2
 8009624:	e7f9      	b.n	800961a <tcp_close_shutdown+0xd2>
 8009626:	68e2      	ldr	r2, [r4, #12]
 8009628:	4b25      	ldr	r3, [pc, #148]	; (80096c0 <tcp_close_shutdown+0x178>)
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	e001      	b.n	8009632 <tcp_close_shutdown+0xea>
 800962e:	68e2      	ldr	r2, [r4, #12]
 8009630:	60da      	str	r2, [r3, #12]
 8009632:	2300      	movs	r3, #0
 8009634:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8009636:	4620      	mov	r0, r4
 8009638:	f7ff fac4 	bl	8008bc4 <tcp_free>
  return ERR_OK;
 800963c:	2000      	movs	r0, #0
      break;
 800963e:	e01c      	b.n	800967a <tcp_close_shutdown+0x132>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009640:	4d20      	ldr	r5, [pc, #128]	; (80096c4 <tcp_close_shutdown+0x17c>)
 8009642:	1d29      	adds	r1, r5, #4
 8009644:	3510      	adds	r5, #16
      pcb->listener = NULL;
 8009646:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009648:	f851 3b04 	ldr.w	r3, [r1], #4
 800964c:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800964e:	b133      	cbz	r3, 800965e <tcp_close_shutdown+0x116>
    if (pcb->listener == lpcb) {
 8009650:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009652:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 8009654:	bf08      	it	eq
 8009656:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1f8      	bne.n	8009650 <tcp_close_shutdown+0x108>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800965e:	428d      	cmp	r5, r1
 8009660:	d1f2      	bne.n	8009648 <tcp_close_shutdown+0x100>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8009662:	4621      	mov	r1, r4
 8009664:	4818      	ldr	r0, [pc, #96]	; (80096c8 <tcp_close_shutdown+0x180>)
 8009666:	f7ff fd37 	bl	80090d8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800966a:	7d23      	ldrb	r3, [r4, #20]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d006      	beq.n	800967e <tcp_close_shutdown+0x136>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009670:	4621      	mov	r1, r4
 8009672:	2002      	movs	r0, #2
 8009674:	f7fe fc86 	bl	8007f84 <memp_free>
  return ERR_OK;
 8009678:	2000      	movs	r0, #0
}
 800967a:	b005      	add	sp, #20
 800967c:	bd30      	pop	{r4, r5, pc}
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <tcp_close_shutdown+0x15c>)
 8009680:	22df      	movs	r2, #223	; 0xdf
 8009682:	4912      	ldr	r1, [pc, #72]	; (80096cc <tcp_close_shutdown+0x184>)
 8009684:	4809      	ldr	r0, [pc, #36]	; (80096ac <tcp_close_shutdown+0x164>)
 8009686:	f005 fc35 	bl	800eef4 <iprintf>
 800968a:	e7f1      	b.n	8009670 <tcp_close_shutdown+0x128>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800968c:	4621      	mov	r1, r4
 800968e:	4808      	ldr	r0, [pc, #32]	; (80096b0 <tcp_close_shutdown+0x168>)
 8009690:	f7ff fd22 	bl	80090d8 <tcp_pcb_remove>
 8009694:	4b08      	ldr	r3, [pc, #32]	; (80096b8 <tcp_close_shutdown+0x170>)
 8009696:	2201      	movs	r2, #1
 8009698:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800969a:	4620      	mov	r0, r4
 800969c:	f7ff fa92 	bl	8008bc4 <tcp_free>
  return ERR_OK;
 80096a0:	2000      	movs	r0, #0
      break;
 80096a2:	e7ea      	b.n	800967a <tcp_close_shutdown+0x132>
 80096a4:	08011138 	.word	0x08011138
 80096a8:	08011518 	.word	0x08011518
 80096ac:	08010198 	.word	0x08010198
 80096b0:	20010904 	.word	0x20010904
 80096b4:	08011538 	.word	0x08011538
 80096b8:	20010908 	.word	0x20010908
 80096bc:	20010948 	.word	0x20010948
 80096c0:	2001090c 	.word	0x2001090c
 80096c4:	080117c4 	.word	0x080117c4
 80096c8:	20010910 	.word	0x20010910
 80096cc:	08011554 	.word	0x08011554

080096d0 <tcp_close>:
{
 80096d0:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80096d2:	b160      	cbz	r0, 80096ee <tcp_close+0x1e>
 80096d4:	4603      	mov	r3, r0
  if (pcb->state != LISTEN) {
 80096d6:	7d02      	ldrb	r2, [r0, #20]
 80096d8:	2a01      	cmp	r2, #1
 80096da:	d003      	beq.n	80096e4 <tcp_close+0x14>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80096dc:	8b42      	ldrh	r2, [r0, #26]
 80096de:	f042 0210 	orr.w	r2, r2, #16
 80096e2:	8342      	strh	r2, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 80096e4:	2101      	movs	r1, #1
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ff2e 	bl	8009548 <tcp_close_shutdown>
}
 80096ec:	bd08      	pop	{r3, pc}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80096ee:	4b05      	ldr	r3, [pc, #20]	; (8009704 <tcp_close+0x34>)
 80096f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80096f4:	4904      	ldr	r1, [pc, #16]	; (8009708 <tcp_close+0x38>)
 80096f6:	4805      	ldr	r0, [pc, #20]	; (800970c <tcp_close+0x3c>)
 80096f8:	f005 fbfc 	bl	800eef4 <iprintf>
 80096fc:	f06f 000f 	mvn.w	r0, #15
 8009700:	e7f4      	b.n	80096ec <tcp_close+0x1c>
 8009702:	bf00      	nop
 8009704:	08011138 	.word	0x08011138
 8009708:	08011570 	.word	0x08011570
 800970c:	08010198 	.word	0x08010198

08009710 <tcp_recv_null>:
{
 8009710:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009712:	b151      	cbz	r1, 800972a <tcp_recv_null+0x1a>
 8009714:	4614      	mov	r4, r2
 8009716:	4608      	mov	r0, r1
  if (p != NULL) {
 8009718:	b18a      	cbz	r2, 800973e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800971a:	8911      	ldrh	r1, [r2, #8]
 800971c:	f7ff fb72 	bl	8008e04 <tcp_recved>
    pbuf_free(p);
 8009720:	4620      	mov	r0, r4
 8009722:	f7fe fef1 	bl	8008508 <pbuf_free>
  return ERR_OK;
 8009726:	2000      	movs	r0, #0
}
 8009728:	bd10      	pop	{r4, pc}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800972a:	4b08      	ldr	r3, [pc, #32]	; (800974c <tcp_recv_null+0x3c>)
 800972c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8009730:	4907      	ldr	r1, [pc, #28]	; (8009750 <tcp_recv_null+0x40>)
 8009732:	4808      	ldr	r0, [pc, #32]	; (8009754 <tcp_recv_null+0x44>)
 8009734:	f005 fbde 	bl	800eef4 <iprintf>
 8009738:	f06f 000f 	mvn.w	r0, #15
 800973c:	e7f4      	b.n	8009728 <tcp_recv_null+0x18>
  } else if (err == ERR_OK) {
 800973e:	b10b      	cbz	r3, 8009744 <tcp_recv_null+0x34>
  return ERR_OK;
 8009740:	2000      	movs	r0, #0
 8009742:	e7f1      	b.n	8009728 <tcp_recv_null+0x18>
    return tcp_close(pcb);
 8009744:	f7ff ffc4 	bl	80096d0 <tcp_close>
 8009748:	e7ee      	b.n	8009728 <tcp_recv_null+0x18>
 800974a:	bf00      	nop
 800974c:	08011138 	.word	0x08011138
 8009750:	08011588 	.word	0x08011588
 8009754:	08010198 	.word	0x08010198

08009758 <tcp_process_refused_data>:
{
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800975a:	b318      	cbz	r0, 80097a4 <tcp_process_refused_data+0x4c>
 800975c:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 800975e:	6f86      	ldr	r6, [r0, #120]	; 0x78
 8009760:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009766:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800976a:	b32d      	cbz	r5, 80097b8 <tcp_process_refused_data+0x60>
 800976c:	4632      	mov	r2, r6
 800976e:	4601      	mov	r1, r0
 8009770:	6900      	ldr	r0, [r0, #16]
 8009772:	47a8      	blx	r5
 8009774:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8009776:	bb3d      	cbnz	r5, 80097c8 <tcp_process_refused_data+0x70>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8009778:	f017 0f20 	tst.w	r7, #32
 800977c:	d02a      	beq.n	80097d4 <tcp_process_refused_data+0x7c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800977e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009780:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8009784:	bf1c      	itt	ne
 8009786:	3301      	addne	r3, #1
 8009788:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 800978a:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 800978e:	b30e      	cbz	r6, 80097d4 <tcp_process_refused_data+0x7c>
 8009790:	2300      	movs	r3, #0
 8009792:	461a      	mov	r2, r3
 8009794:	4621      	mov	r1, r4
 8009796:	6920      	ldr	r0, [r4, #16]
 8009798:	47b0      	blx	r6
          return ERR_ABRT;
 800979a:	f110 0f0d 	cmn.w	r0, #13
 800979e:	bf08      	it	eq
 80097a0:	4605      	moveq	r5, r0
 80097a2:	e017      	b.n	80097d4 <tcp_process_refused_data+0x7c>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80097a4:	4b0c      	ldr	r3, [pc, #48]	; (80097d8 <tcp_process_refused_data+0x80>)
 80097a6:	f240 6209 	movw	r2, #1545	; 0x609
 80097aa:	490c      	ldr	r1, [pc, #48]	; (80097dc <tcp_process_refused_data+0x84>)
 80097ac:	480c      	ldr	r0, [pc, #48]	; (80097e0 <tcp_process_refused_data+0x88>)
 80097ae:	f005 fba1 	bl	800eef4 <iprintf>
 80097b2:	f06f 050f 	mvn.w	r5, #15
 80097b6:	e00d      	b.n	80097d4 <tcp_process_refused_data+0x7c>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80097b8:	2300      	movs	r3, #0
 80097ba:	4632      	mov	r2, r6
 80097bc:	4601      	mov	r1, r0
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff ffa6 	bl	8009710 <tcp_recv_null>
 80097c4:	4605      	mov	r5, r0
 80097c6:	e7d6      	b.n	8009776 <tcp_process_refused_data+0x1e>
    } else if (err == ERR_ABRT) {
 80097c8:	f115 0f0d 	cmn.w	r5, #13
      pcb->refused_data = refused_data;
 80097cc:	bf1c      	itt	ne
 80097ce:	67a6      	strne	r6, [r4, #120]	; 0x78
      return ERR_INPROGRESS;
 80097d0:	f06f 0504 	mvnne.w	r5, #4
}
 80097d4:	4628      	mov	r0, r5
 80097d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d8:	08011138 	.word	0x08011138
 80097dc:	080115a4 	.word	0x080115a4
 80097e0:	08010198 	.word	0x08010198

080097e4 <tcp_fasttmr>:
{
 80097e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80097e8:	4a1f      	ldr	r2, [pc, #124]	; (8009868 <tcp_fasttmr+0x84>)
 80097ea:	7813      	ldrb	r3, [r2, #0]
 80097ec:	3301      	adds	r3, #1
 80097ee:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 80097f0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8009870 <tcp_fasttmr+0x8c>
        tcp_active_pcbs_changed = 0;
 80097f4:	4e1d      	ldr	r6, [pc, #116]	; (800986c <tcp_fasttmr+0x88>)
  pcb = tcp_active_pcbs;
 80097f6:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 80097fa:	2c00      	cmp	r4, #0
 80097fc:	d032      	beq.n	8009864 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 80097fe:	4d1a      	ldr	r5, [pc, #104]	; (8009868 <tcp_fasttmr+0x84>)
        tcp_active_pcbs_changed = 0;
 8009800:	2700      	movs	r7, #0
 8009802:	e013      	b.n	800982c <tcp_fasttmr+0x48>
        tcp_ack_now(pcb);
 8009804:	f043 0302 	orr.w	r3, r3, #2
 8009808:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 800980a:	4620      	mov	r0, r4
 800980c:	f002 ff12 	bl	800c634 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009810:	8b63      	ldrh	r3, [r4, #26]
 8009812:	f023 0303 	bic.w	r3, r3, #3
 8009816:	8363      	strh	r3, [r4, #26]
 8009818:	e011      	b.n	800983e <tcp_fasttmr+0x5a>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800981a:	f023 0308 	bic.w	r3, r3, #8
 800981e:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009820:	4620      	mov	r0, r4
 8009822:	f7ff f987 	bl	8008b34 <tcp_close_shutdown_fin>
 8009826:	e00e      	b.n	8009846 <tcp_fasttmr+0x62>
      pcb = pcb->next;
 8009828:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 800982a:	b1dc      	cbz	r4, 8009864 <tcp_fasttmr+0x80>
    if (pcb->last_timer != tcp_timer_ctr) {
 800982c:	782b      	ldrb	r3, [r5, #0]
 800982e:	7fa2      	ldrb	r2, [r4, #30]
 8009830:	429a      	cmp	r2, r3
 8009832:	d0f9      	beq.n	8009828 <tcp_fasttmr+0x44>
      pcb->last_timer = tcp_timer_ctr;
 8009834:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 8009836:	8b63      	ldrh	r3, [r4, #26]
 8009838:	f013 0f01 	tst.w	r3, #1
 800983c:	d1e2      	bne.n	8009804 <tcp_fasttmr+0x20>
      if (pcb->flags & TF_CLOSEPEND) {
 800983e:	8b63      	ldrh	r3, [r4, #26]
 8009840:	f013 0f08 	tst.w	r3, #8
 8009844:	d1e9      	bne.n	800981a <tcp_fasttmr+0x36>
      next = pcb->next;
 8009846:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800984a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800984c:	b143      	cbz	r3, 8009860 <tcp_fasttmr+0x7c>
        tcp_active_pcbs_changed = 0;
 800984e:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 8009850:	4620      	mov	r0, r4
 8009852:	f7ff ff81 	bl	8009758 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009856:	7833      	ldrb	r3, [r6, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1cc      	bne.n	80097f6 <tcp_fasttmr+0x12>
      pcb = next;
 800985c:	464c      	mov	r4, r9
 800985e:	e7e4      	b.n	800982a <tcp_fasttmr+0x46>
 8009860:	464c      	mov	r4, r9
 8009862:	e7e2      	b.n	800982a <tcp_fasttmr+0x46>
}
 8009864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009868:	20010919 	.word	0x20010919
 800986c:	20010908 	.word	0x20010908
 8009870:	20010904 	.word	0x20010904

08009874 <tcp_shutdown>:
{
 8009874:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8009876:	b188      	cbz	r0, 800989c <tcp_shutdown+0x28>
 8009878:	4604      	mov	r4, r0
  if (pcb->state == LISTEN) {
 800987a:	7d03      	ldrb	r3, [r0, #20]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d02a      	beq.n	80098d6 <tcp_shutdown+0x62>
  if (shut_rx) {
 8009880:	b1d1      	cbz	r1, 80098b8 <tcp_shutdown+0x44>
    tcp_set_flags(pcb, TF_RXCLOSED);
 8009882:	8b43      	ldrh	r3, [r0, #26]
 8009884:	f043 0310 	orr.w	r3, r3, #16
 8009888:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 800988a:	b98a      	cbnz	r2, 80098b0 <tcp_shutdown+0x3c>
    if (pcb->refused_data != NULL) {
 800988c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800988e:	b118      	cbz	r0, 8009898 <tcp_shutdown+0x24>
      pbuf_free(pcb->refused_data);
 8009890:	f7fe fe3a 	bl	8008508 <pbuf_free>
      pcb->refused_data = NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	67a3      	str	r3, [r4, #120]	; 0x78
  return ERR_OK;
 8009898:	2000      	movs	r0, #0
 800989a:	e01b      	b.n	80098d4 <tcp_shutdown+0x60>
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800989c:	4b12      	ldr	r3, [pc, #72]	; (80098e8 <tcp_shutdown+0x74>)
 800989e:	f240 2207 	movw	r2, #519	; 0x207
 80098a2:	4912      	ldr	r1, [pc, #72]	; (80098ec <tcp_shutdown+0x78>)
 80098a4:	4812      	ldr	r0, [pc, #72]	; (80098f0 <tcp_shutdown+0x7c>)
 80098a6:	f005 fb25 	bl	800eef4 <iprintf>
 80098aa:	f06f 000f 	mvn.w	r0, #15
 80098ae:	e011      	b.n	80098d4 <tcp_shutdown+0x60>
      return tcp_close_shutdown(pcb, 1);
 80098b0:	2101      	movs	r1, #1
 80098b2:	f7ff fe49 	bl	8009548 <tcp_close_shutdown>
 80098b6:	e00d      	b.n	80098d4 <tcp_shutdown+0x60>
  if (shut_tx) {
 80098b8:	b182      	cbz	r2, 80098dc <tcp_shutdown+0x68>
    switch (pcb->state) {
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d804      	bhi.n	80098c8 <tcp_shutdown+0x54>
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d804      	bhi.n	80098cc <tcp_shutdown+0x58>
 80098c2:	f06f 000a 	mvn.w	r0, #10
 80098c6:	e005      	b.n	80098d4 <tcp_shutdown+0x60>
 80098c8:	2b07      	cmp	r3, #7
 80098ca:	d109      	bne.n	80098e0 <tcp_shutdown+0x6c>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80098cc:	2100      	movs	r1, #0
 80098ce:	4620      	mov	r0, r4
 80098d0:	f7ff fe3a 	bl	8009548 <tcp_close_shutdown>
}
 80098d4:	bd10      	pop	{r4, pc}
    return ERR_CONN;
 80098d6:	f06f 000a 	mvn.w	r0, #10
 80098da:	e7fb      	b.n	80098d4 <tcp_shutdown+0x60>
  return ERR_OK;
 80098dc:	2000      	movs	r0, #0
 80098de:	e7f9      	b.n	80098d4 <tcp_shutdown+0x60>
    switch (pcb->state) {
 80098e0:	f06f 000a 	mvn.w	r0, #10
 80098e4:	e7f6      	b.n	80098d4 <tcp_shutdown+0x60>
 80098e6:	bf00      	nop
 80098e8:	08011138 	.word	0x08011138
 80098ec:	080115cc 	.word	0x080115cc
 80098f0:	08010198 	.word	0x08010198

080098f4 <tcp_slowtmr>:
{
 80098f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f8:	b085      	sub	sp, #20
  ++tcp_ticks;
 80098fa:	4ab4      	ldr	r2, [pc, #720]	; (8009bcc <tcp_slowtmr+0x2d8>)
 80098fc:	6813      	ldr	r3, [r2, #0]
 80098fe:	3301      	adds	r3, #1
 8009900:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8009902:	4ab3      	ldr	r2, [pc, #716]	; (8009bd0 <tcp_slowtmr+0x2dc>)
 8009904:	7813      	ldrb	r3, [r2, #0]
 8009906:	3301      	adds	r3, #1
 8009908:	7013      	strb	r3, [r2, #0]
  pcb = tcp_active_pcbs;
 800990a:	f8df a2ec 	ldr.w	sl, [pc, #748]	; 8009bf8 <tcp_slowtmr+0x304>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800990e:	4eb1      	ldr	r6, [pc, #708]	; (8009bd4 <tcp_slowtmr+0x2e0>)
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009910:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 8009bfc <tcp_slowtmr+0x308>
  pcb = tcp_active_pcbs;
 8009914:	f8da 4000 	ldr.w	r4, [sl]
  while (pcb != NULL) {
 8009918:	2c00      	cmp	r4, #0
 800991a:	f000 81f4 	beq.w	8009d06 <tcp_slowtmr+0x412>
  prev = NULL;
 800991e:	2500      	movs	r5, #0
 8009920:	e19e      	b.n	8009c60 <tcp_slowtmr+0x36c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009922:	4633      	mov	r3, r6
 8009924:	f240 42be 	movw	r2, #1214	; 0x4be
 8009928:	49ab      	ldr	r1, [pc, #684]	; (8009bd8 <tcp_slowtmr+0x2e4>)
 800992a:	48ac      	ldr	r0, [pc, #688]	; (8009bdc <tcp_slowtmr+0x2e8>)
 800992c:	f005 fae2 	bl	800eef4 <iprintf>
 8009930:	e19a      	b.n	8009c68 <tcp_slowtmr+0x374>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009932:	4633      	mov	r3, r6
 8009934:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8009938:	49a9      	ldr	r1, [pc, #676]	; (8009be0 <tcp_slowtmr+0x2ec>)
 800993a:	48a8      	ldr	r0, [pc, #672]	; (8009bdc <tcp_slowtmr+0x2e8>)
 800993c:	f005 fada 	bl	800eef4 <iprintf>
 8009940:	e196      	b.n	8009c70 <tcp_slowtmr+0x37c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009942:	4633      	mov	r3, r6
 8009944:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8009948:	49a6      	ldr	r1, [pc, #664]	; (8009be4 <tcp_slowtmr+0x2f0>)
 800994a:	48a4      	ldr	r0, [pc, #656]	; (8009bdc <tcp_slowtmr+0x2e8>)
 800994c:	f005 fad2 	bl	800eef4 <iprintf>
 8009950:	e192      	b.n	8009c78 <tcp_slowtmr+0x384>
      continue;
 8009952:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009954:	68e4      	ldr	r4, [r4, #12]
      continue;
 8009956:	e181      	b.n	8009c5c <tcp_slowtmr+0x368>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009958:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800995c:	2b05      	cmp	r3, #5
 800995e:	f240 819b 	bls.w	8009c98 <tcp_slowtmr+0x3a4>
    pcb_reset = 0;
 8009962:	f04f 0800 	mov.w	r8, #0
      ++pcb_remove;
 8009966:	2701      	movs	r7, #1
    if (pcb->ooseq != NULL &&
 8009968:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800996a:	b15b      	cbz	r3, 8009984 <tcp_slowtmr+0x90>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800996c:	4b97      	ldr	r3, [pc, #604]	; (8009bcc <tcp_slowtmr+0x2d8>)
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	6a23      	ldr	r3, [r4, #32]
 8009972:	1ad2      	subs	r2, r2, r3
 8009974:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 800997c:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8009980:	f080 80f8 	bcs.w	8009b74 <tcp_slowtmr+0x280>
    if (pcb->state == SYN_RCVD) {
 8009984:	7d23      	ldrb	r3, [r4, #20]
 8009986:	2b03      	cmp	r3, #3
 8009988:	f000 80f8 	beq.w	8009b7c <tcp_slowtmr+0x288>
    if (pcb->state == LAST_ACK) {
 800998c:	2b09      	cmp	r3, #9
 800998e:	f040 80fc 	bne.w	8009b8a <tcp_slowtmr+0x296>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009992:	4b8e      	ldr	r3, [pc, #568]	; (8009bcc <tcp_slowtmr+0x2d8>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	6a22      	ldr	r2, [r4, #32]
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	2bf0      	cmp	r3, #240	; 0xf0
 800999c:	f240 80f5 	bls.w	8009b8a <tcp_slowtmr+0x296>
      tcp_err_fn err_fn = pcb->errf;
 80099a0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 80099a4:	4620      	mov	r0, r4
 80099a6:	f7ff fb67 	bl	8009078 <tcp_pcb_purge>
      if (prev != NULL) {
 80099aa:	2d00      	cmp	r5, #0
 80099ac:	f000 8130 	beq.w	8009c10 <tcp_slowtmr+0x31c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80099b0:	f8da 3000 	ldr.w	r3, [sl]
 80099b4:	42a3      	cmp	r3, r4
 80099b6:	f000 8123 	beq.w	8009c00 <tcp_slowtmr+0x30c>
        prev->next = pcb->next;
 80099ba:	68e3      	ldr	r3, [r4, #12]
 80099bc:	60eb      	str	r3, [r5, #12]
      if (pcb_reset) {
 80099be:	f1b8 0f00 	cmp.w	r8, #0
 80099c2:	f040 8134 	bne.w	8009c2e <tcp_slowtmr+0x33a>
      err_arg = pcb->callback_arg;
 80099c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
      pcb = pcb->next;
 80099ca:	f8d4 800c 	ldr.w	r8, [r4, #12]
      tcp_free(pcb2);
 80099ce:	4620      	mov	r0, r4
 80099d0:	f7ff f8f8 	bl	8008bc4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80099d4:	4b84      	ldr	r3, [pc, #528]	; (8009be8 <tcp_slowtmr+0x2f4>)
 80099d6:	2200      	movs	r2, #0
 80099d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80099da:	2f00      	cmp	r7, #0
 80099dc:	f000 813a 	beq.w	8009c54 <tcp_slowtmr+0x360>
 80099e0:	f06f 010c 	mvn.w	r1, #12
 80099e4:	4648      	mov	r0, r9
 80099e6:	47b8      	blx	r7
      if (tcp_active_pcbs_changed) {
 80099e8:	4b7f      	ldr	r3, [pc, #508]	; (8009be8 <tcp_slowtmr+0x2f4>)
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d191      	bne.n	8009914 <tcp_slowtmr+0x20>
      pcb = pcb->next;
 80099f0:	4644      	mov	r4, r8
 80099f2:	e133      	b.n	8009c5c <tcp_slowtmr+0x368>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80099f4:	4633      	mov	r3, r6
 80099f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80099fa:	497c      	ldr	r1, [pc, #496]	; (8009bec <tcp_slowtmr+0x2f8>)
 80099fc:	4877      	ldr	r0, [pc, #476]	; (8009bdc <tcp_slowtmr+0x2e8>)
 80099fe:	f005 fa79 	bl	800eef4 <iprintf>
 8009a02:	e15b      	b.n	8009cbc <tcp_slowtmr+0x3c8>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009a04:	4620      	mov	r0, r4
 8009a06:	f002 fb0d 	bl	800c024 <tcp_split_unsent_seg>
 8009a0a:	b158      	cbz	r0, 8009a24 <tcp_slowtmr+0x130>
              pcb->persist_cnt = 0;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8009a12:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8009a16:	2b06      	cmp	r3, #6
 8009a18:	d876      	bhi.n	8009b08 <tcp_slowtmr+0x214>
                pcb->persist_backoff++;
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    pcb_remove = 0;
 8009a20:	2700      	movs	r7, #0
 8009a22:	e050      	b.n	8009ac6 <tcp_slowtmr+0x1d2>
                if (tcp_output(pcb) == ERR_OK) {
 8009a24:	4620      	mov	r0, r4
 8009a26:	f002 fe05 	bl	800c634 <tcp_output>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d1ee      	bne.n	8009a0c <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8009a2e:	2700      	movs	r7, #0
 8009a30:	e049      	b.n	8009ac6 <tcp_slowtmr+0x1d2>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8009a32:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8009a34:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8009a38:	4293      	cmp	r3, r2
          ++pcb->rtime;
 8009a3a:	bf9c      	itt	ls
 8009a3c:	3301      	addls	r3, #1
 8009a3e:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8009a40:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8009a44:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	db3c      	blt.n	8009ac6 <tcp_slowtmr+0x1d2>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	f002 fc9d 	bl	800c38c <tcp_rexmit_rto_prepare>
 8009a52:	b118      	cbz	r0, 8009a5c <tcp_slowtmr+0x168>
 8009a54:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009a56:	bbb3      	cbnz	r3, 8009ac6 <tcp_slowtmr+0x1d2>
 8009a58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009a5a:	b3a3      	cbz	r3, 8009ac6 <tcp_slowtmr+0x1d2>
            if (pcb->state != SYN_SENT) {
 8009a5c:	7d23      	ldrb	r3, [r4, #20]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d014      	beq.n	8009a8c <tcp_slowtmr+0x198>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009a62:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009a66:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8009a6a:	eb03 03e2 	add.w	r3, r3, r2, asr #3
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009a6e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009a72:	2a0c      	cmp	r2, #12
 8009a74:	bf28      	it	cs
 8009a76:	220c      	movcs	r2, #12
 8009a78:	495d      	ldr	r1, [pc, #372]	; (8009bf0 <tcp_slowtmr+0x2fc>)
 8009a7a:	5c8a      	ldrb	r2, [r1, r2]
 8009a7c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8009a7e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bfa8      	it	ge
 8009a86:	4613      	movge	r3, r2
 8009a88:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            pcb->rtime = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	8623      	strh	r3, [r4, #48]	; 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009a90:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 8009a94:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	bf28      	it	cs
 8009a9c:	461a      	movcs	r2, r3
 8009a9e:	0851      	lsrs	r1, r2, #1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009aa0:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8009aa2:	0043      	lsls	r3, r0, #1
 8009aa4:	b29b      	uxth	r3, r3
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009aa6:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8009aaa:	bf98      	it	ls
 8009aac:	460b      	movls	r3, r1
 8009aae:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->cwnd = pcb->mss;
 8009ab2:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->bytes_acked = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009abc:	4620      	mov	r0, r4
 8009abe:	f002 ff85 	bl	800c9cc <tcp_rexmit_rto_commit>
 8009ac2:	e000      	b.n	8009ac6 <tcp_slowtmr+0x1d2>
      ++pcb_remove;
 8009ac4:	2701      	movs	r7, #1
    if (pcb->state == FIN_WAIT_2) {
 8009ac6:	7d23      	ldrb	r3, [r4, #20]
 8009ac8:	2b06      	cmp	r3, #6
 8009aca:	d01f      	beq.n	8009b0c <tcp_slowtmr+0x218>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8009acc:	f894 8009 	ldrb.w	r8, [r4, #9]
 8009ad0:	f018 0808 	ands.w	r8, r8, #8
 8009ad4:	f43f af48 	beq.w	8009968 <tcp_slowtmr+0x74>
 8009ad8:	2b04      	cmp	r3, #4
 8009ada:	d12a      	bne.n	8009b32 <tcp_slowtmr+0x23e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009adc:	4b3b      	ldr	r3, [pc, #236]	; (8009bcc <tcp_slowtmr+0x2d8>)
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	6a23      	ldr	r3, [r4, #32]
 8009ae2:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8009ae4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8009ae8:	f501 2324 	add.w	r3, r1, #671744	; 0xa4000
 8009aec:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8009af0:	fbab 0303 	umull	r0, r3, fp, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009af4:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8009af8:	d920      	bls.n	8009b3c <tcp_slowtmr+0x248>
        ++pcb_remove;
 8009afa:	3701      	adds	r7, #1
 8009afc:	b2ff      	uxtb	r7, r7
        ++pcb_reset;
 8009afe:	f04f 0801 	mov.w	r8, #1
 8009b02:	e731      	b.n	8009968 <tcp_slowtmr+0x74>
          ++pcb_remove; /* max probes reached */
 8009b04:	2701      	movs	r7, #1
 8009b06:	e7de      	b.n	8009ac6 <tcp_slowtmr+0x1d2>
    pcb_remove = 0;
 8009b08:	2700      	movs	r7, #0
 8009b0a:	e7dc      	b.n	8009ac6 <tcp_slowtmr+0x1d2>
      if (pcb->flags & TF_RXCLOSED) {
 8009b0c:	8b63      	ldrh	r3, [r4, #26]
 8009b0e:	f013 0f10 	tst.w	r3, #16
 8009b12:	d007      	beq.n	8009b24 <tcp_slowtmr+0x230>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b14:	4b2d      	ldr	r3, [pc, #180]	; (8009bcc <tcp_slowtmr+0x2d8>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6a22      	ldr	r2, [r4, #32]
 8009b1a:	1a9b      	subs	r3, r3, r2
 8009b1c:	2b28      	cmp	r3, #40	; 0x28
 8009b1e:	d901      	bls.n	8009b24 <tcp_slowtmr+0x230>
          ++pcb_remove;
 8009b20:	3701      	adds	r7, #1
 8009b22:	b2ff      	uxtb	r7, r7
    if (pcb->ooseq != NULL &&
 8009b24:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	f000 8134 	beq.w	8009d94 <tcp_slowtmr+0x4a0>
    pcb_reset = 0;
 8009b2c:	f04f 0800 	mov.w	r8, #0
 8009b30:	e71c      	b.n	800996c <tcp_slowtmr+0x78>
        ((pcb->state == ESTABLISHED) ||
 8009b32:	2b07      	cmp	r3, #7
 8009b34:	d0d2      	beq.n	8009adc <tcp_slowtmr+0x1e8>
    pcb_reset = 0;
 8009b36:	f04f 0800 	mov.w	r8, #0
 8009b3a:	e715      	b.n	8009968 <tcp_slowtmr+0x74>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8009b3c:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009b40:	482c      	ldr	r0, [pc, #176]	; (8009bf4 <tcp_slowtmr+0x300>)
 8009b42:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 8009b46:	fbab 3101 	umull	r3, r1, fp, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b4a:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 8009b4e:	d802      	bhi.n	8009b56 <tcp_slowtmr+0x262>
    pcb_reset = 0;
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	e708      	b.n	8009968 <tcp_slowtmr+0x74>
        err = tcp_keepalive(pcb);
 8009b56:	4620      	mov	r0, r4
 8009b58:	f002 ff6e 	bl	800ca38 <tcp_keepalive>
        if (err == ERR_OK) {
 8009b5c:	b938      	cbnz	r0, 8009b6e <tcp_slowtmr+0x27a>
          pcb->keep_cnt_sent++;
 8009b5e:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8009b62:	3301      	adds	r3, #1
 8009b64:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 8009b68:	f04f 0800 	mov.w	r8, #0
 8009b6c:	e6fc      	b.n	8009968 <tcp_slowtmr+0x74>
 8009b6e:	f04f 0800 	mov.w	r8, #0
 8009b72:	e6f9      	b.n	8009968 <tcp_slowtmr+0x74>
      tcp_free_ooseq(pcb);
 8009b74:	4620      	mov	r0, r4
 8009b76:	f7ff fa75 	bl	8009064 <tcp_free_ooseq>
 8009b7a:	e703      	b.n	8009984 <tcp_slowtmr+0x90>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8009b7c:	4b13      	ldr	r3, [pc, #76]	; (8009bcc <tcp_slowtmr+0x2d8>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6a22      	ldr	r2, [r4, #32]
 8009b82:	1a9b      	subs	r3, r3, r2
 8009b84:	2b28      	cmp	r3, #40	; 0x28
 8009b86:	f63f af0b 	bhi.w	80099a0 <tcp_slowtmr+0xac>
    if (pcb_remove) {
 8009b8a:	2f00      	cmp	r7, #0
 8009b8c:	f47f af08 	bne.w	80099a0 <tcp_slowtmr+0xac>
      pcb = pcb->next;
 8009b90:	68e7      	ldr	r7, [r4, #12]
      ++prev->polltmr;
 8009b92:	7f23      	ldrb	r3, [r4, #28]
 8009b94:	3301      	adds	r3, #1
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009b9a:	7f62      	ldrb	r2, [r4, #29]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d85b      	bhi.n	8009c58 <tcp_slowtmr+0x364>
        prev->polltmr = 0;
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	7723      	strb	r3, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009ba4:	4a10      	ldr	r2, [pc, #64]	; (8009be8 <tcp_slowtmr+0x2f4>)
 8009ba6:	7013      	strb	r3, [r2, #0]
        TCP_EVENT_POLL(prev, err);
 8009ba8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d04b      	beq.n	8009c48 <tcp_slowtmr+0x354>
 8009bb0:	4621      	mov	r1, r4
 8009bb2:	6920      	ldr	r0, [r4, #16]
 8009bb4:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009bb6:	4b0c      	ldr	r3, [pc, #48]	; (8009be8 <tcp_slowtmr+0x2f4>)
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f47f aeaa 	bne.w	8009914 <tcp_slowtmr+0x20>
        if (err == ERR_OK) {
 8009bc0:	2800      	cmp	r0, #0
 8009bc2:	d041      	beq.n	8009c48 <tcp_slowtmr+0x354>
 8009bc4:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009bc6:	463c      	mov	r4, r7
 8009bc8:	e048      	b.n	8009c5c <tcp_slowtmr+0x368>
 8009bca:	bf00      	nop
 8009bcc:	20010914 	.word	0x20010914
 8009bd0:	20010919 	.word	0x20010919
 8009bd4:	08011138 	.word	0x08011138
 8009bd8:	080115e8 	.word	0x080115e8
 8009bdc:	08010198 	.word	0x08010198
 8009be0:	08011614 	.word	0x08011614
 8009be4:	08011640 	.word	0x08011640
 8009be8:	20010908 	.word	0x20010908
 8009bec:	080116a4 	.word	0x080116a4
 8009bf0:	080117b4 	.word	0x080117b4
 8009bf4:	000124f8 	.word	0x000124f8
 8009bf8:	20010904 	.word	0x20010904
 8009bfc:	10624dd3 	.word	0x10624dd3
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8009c00:	4633      	mov	r3, r6
 8009c02:	f240 526d 	movw	r2, #1389	; 0x56d
 8009c06:	4966      	ldr	r1, [pc, #408]	; (8009da0 <tcp_slowtmr+0x4ac>)
 8009c08:	4866      	ldr	r0, [pc, #408]	; (8009da4 <tcp_slowtmr+0x4b0>)
 8009c0a:	f005 f973 	bl	800eef4 <iprintf>
 8009c0e:	e6d4      	b.n	80099ba <tcp_slowtmr+0xc6>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8009c10:	f8da 3000 	ldr.w	r3, [sl]
 8009c14:	42a3      	cmp	r3, r4
 8009c16:	d006      	beq.n	8009c26 <tcp_slowtmr+0x332>
 8009c18:	4633      	mov	r3, r6
 8009c1a:	f240 5271 	movw	r2, #1393	; 0x571
 8009c1e:	4962      	ldr	r1, [pc, #392]	; (8009da8 <tcp_slowtmr+0x4b4>)
 8009c20:	4860      	ldr	r0, [pc, #384]	; (8009da4 <tcp_slowtmr+0x4b0>)
 8009c22:	f005 f967 	bl	800eef4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8009c26:	68e3      	ldr	r3, [r4, #12]
 8009c28:	f8ca 3000 	str.w	r3, [sl]
 8009c2c:	e6c7      	b.n	80099be <tcp_slowtmr+0xca>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009c30:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009c32:	8b23      	ldrh	r3, [r4, #24]
 8009c34:	9302      	str	r3, [sp, #8]
 8009c36:	8ae3      	ldrh	r3, [r4, #22]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	1d23      	adds	r3, r4, #4
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	4623      	mov	r3, r4
 8009c40:	4620      	mov	r0, r4
 8009c42:	f002 fc75 	bl	800c530 <tcp_rst>
 8009c46:	e6be      	b.n	80099c6 <tcp_slowtmr+0xd2>
          tcp_output(prev);
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f002 fcf3 	bl	800c634 <tcp_output>
 8009c4e:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009c50:	463c      	mov	r4, r7
 8009c52:	e003      	b.n	8009c5c <tcp_slowtmr+0x368>
      pcb = pcb->next;
 8009c54:	4644      	mov	r4, r8
 8009c56:	e001      	b.n	8009c5c <tcp_slowtmr+0x368>
 8009c58:	4625      	mov	r5, r4
      pcb = pcb->next;
 8009c5a:	463c      	mov	r4, r7
  while (pcb != NULL) {
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	d052      	beq.n	8009d06 <tcp_slowtmr+0x412>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8009c60:	7d23      	ldrb	r3, [r4, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	f43f ae5d 	beq.w	8009922 <tcp_slowtmr+0x2e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8009c68:	7d23      	ldrb	r3, [r4, #20]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	f43f ae61 	beq.w	8009932 <tcp_slowtmr+0x3e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8009c70:	7d23      	ldrb	r3, [r4, #20]
 8009c72:	2b0a      	cmp	r3, #10
 8009c74:	f43f ae65 	beq.w	8009942 <tcp_slowtmr+0x4e>
    if (pcb->last_timer == tcp_timer_ctr) {
 8009c78:	4b4c      	ldr	r3, [pc, #304]	; (8009dac <tcp_slowtmr+0x4b8>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	7fa2      	ldrb	r2, [r4, #30]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	f43f ae67 	beq.w	8009952 <tcp_slowtmr+0x5e>
    pcb->last_timer = tcp_timer_ctr;
 8009c84:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8009c86:	7d23      	ldrb	r3, [r4, #20]
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	f43f ae65 	beq.w	8009958 <tcp_slowtmr+0x64>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009c8e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009c92:	2b0b      	cmp	r3, #11
 8009c94:	f63f af16 	bhi.w	8009ac4 <tcp_slowtmr+0x1d0>
      if (pcb->persist_backoff > 0) {
 8009c98:	f894 7099 	ldrb.w	r7, [r4, #153]	; 0x99
 8009c9c:	2f00      	cmp	r7, #0
 8009c9e:	f43f aec8 	beq.w	8009a32 <tcp_slowtmr+0x13e>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009ca2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009ca4:	b133      	cbz	r3, 8009cb4 <tcp_slowtmr+0x3c0>
 8009ca6:	4633      	mov	r3, r6
 8009ca8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8009cac:	4940      	ldr	r1, [pc, #256]	; (8009db0 <tcp_slowtmr+0x4bc>)
 8009cae:	483d      	ldr	r0, [pc, #244]	; (8009da4 <tcp_slowtmr+0x4b0>)
 8009cb0:	f005 f920 	bl	800eef4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009cb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	f43f ae9c 	beq.w	80099f4 <tcp_slowtmr+0x100>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009cbc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8009cc0:	2b0b      	cmp	r3, #11
 8009cc2:	f63f af1f 	bhi.w	8009b04 <tcp_slowtmr+0x210>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8009cc6:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 8009cca:	4b3a      	ldr	r3, [pc, #232]	; (8009db4 <tcp_slowtmr+0x4c0>)
 8009ccc:	4413      	add	r3, r2
 8009cce:	f813 2c01 	ldrb.w	r2, [r3, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 8009cd2:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d208      	bcs.n	8009cec <tcp_slowtmr+0x3f8>
            pcb->persist_cnt++;
 8009cda:	3301      	adds	r3, #1
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8009ce2:	4293      	cmp	r3, r2
    pcb_remove = 0;
 8009ce4:	bf38      	it	cc
 8009ce6:	2700      	movcc	r7, #0
          if (pcb->persist_cnt >= backoff_cnt) {
 8009ce8:	f4ff aeed 	bcc.w	8009ac6 <tcp_slowtmr+0x1d2>
            if (pcb->snd_wnd == 0) {
 8009cec:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009cf0:	2900      	cmp	r1, #0
 8009cf2:	f47f ae87 	bne.w	8009a04 <tcp_slowtmr+0x110>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f002 fecc 	bl	800ca94 <tcp_zero_window_probe>
 8009cfc:	2800      	cmp	r0, #0
 8009cfe:	f43f ae85 	beq.w	8009a0c <tcp_slowtmr+0x118>
    pcb_remove = 0;
 8009d02:	2700      	movs	r7, #0
 8009d04:	e6df      	b.n	8009ac6 <tcp_slowtmr+0x1d2>
  pcb = tcp_tw_pcbs;
 8009d06:	4b2c      	ldr	r3, [pc, #176]	; (8009db8 <tcp_slowtmr+0x4c4>)
 8009d08:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	d045      	beq.n	8009d9a <tcp_slowtmr+0x4a6>
  prev = NULL;
 8009d0e:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d10:	4f2a      	ldr	r7, [pc, #168]	; (8009dbc <tcp_slowtmr+0x4c8>)
 8009d12:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8009dcc <tcp_slowtmr+0x4d8>
 8009d16:	4e23      	ldr	r6, [pc, #140]	; (8009da4 <tcp_slowtmr+0x4b0>)
 8009d18:	e009      	b.n	8009d2e <tcp_slowtmr+0x43a>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8009d1a:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <tcp_slowtmr+0x4cc>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	6a22      	ldr	r2, [r4, #32]
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	2bf0      	cmp	r3, #240	; 0xf0
 8009d24:	d80e      	bhi.n	8009d44 <tcp_slowtmr+0x450>
      pcb = pcb->next;
 8009d26:	4625      	mov	r5, r4
 8009d28:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8009d2a:	2c00      	cmp	r4, #0
 8009d2c:	d035      	beq.n	8009d9a <tcp_slowtmr+0x4a6>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009d2e:	7d23      	ldrb	r3, [r4, #20]
 8009d30:	2b0a      	cmp	r3, #10
 8009d32:	d0f2      	beq.n	8009d1a <tcp_slowtmr+0x426>
 8009d34:	463b      	mov	r3, r7
 8009d36:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009d3a:	4641      	mov	r1, r8
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f005 f8d9 	bl	800eef4 <iprintf>
 8009d42:	e7ea      	b.n	8009d1a <tcp_slowtmr+0x426>
      tcp_pcb_purge(pcb);
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7ff f997 	bl	8009078 <tcp_pcb_purge>
      if (prev != NULL) {
 8009d4a:	b1a5      	cbz	r5, 8009d76 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009d4c:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <tcp_slowtmr+0x4c4>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	42a3      	cmp	r3, r4
 8009d52:	d008      	beq.n	8009d66 <tcp_slowtmr+0x472>
        prev->next = pcb->next;
 8009d54:	68e3      	ldr	r3, [r4, #12]
 8009d56:	60eb      	str	r3, [r5, #12]
      pcb = pcb->next;
 8009d58:	f8d4 900c 	ldr.w	r9, [r4, #12]
      tcp_free(pcb2);
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f7fe ff31 	bl	8008bc4 <tcp_free>
      pcb = pcb->next;
 8009d62:	464c      	mov	r4, r9
 8009d64:	e7e1      	b.n	8009d2a <tcp_slowtmr+0x436>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8009d66:	463b      	mov	r3, r7
 8009d68:	f240 52af 	movw	r2, #1455	; 0x5af
 8009d6c:	4915      	ldr	r1, [pc, #84]	; (8009dc4 <tcp_slowtmr+0x4d0>)
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f005 f8c0 	bl	800eef4 <iprintf>
 8009d74:	e7ee      	b.n	8009d54 <tcp_slowtmr+0x460>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8009d76:	4b10      	ldr	r3, [pc, #64]	; (8009db8 <tcp_slowtmr+0x4c4>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	42a3      	cmp	r3, r4
 8009d7c:	d006      	beq.n	8009d8c <tcp_slowtmr+0x498>
 8009d7e:	463b      	mov	r3, r7
 8009d80:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009d84:	4910      	ldr	r1, [pc, #64]	; (8009dc8 <tcp_slowtmr+0x4d4>)
 8009d86:	4630      	mov	r0, r6
 8009d88:	f005 f8b4 	bl	800eef4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009d8c:	68e2      	ldr	r2, [r4, #12]
 8009d8e:	4b0a      	ldr	r3, [pc, #40]	; (8009db8 <tcp_slowtmr+0x4c4>)
 8009d90:	601a      	str	r2, [r3, #0]
 8009d92:	e7e1      	b.n	8009d58 <tcp_slowtmr+0x464>
    pcb_reset = 0;
 8009d94:	f04f 0800 	mov.w	r8, #0
 8009d98:	e6f7      	b.n	8009b8a <tcp_slowtmr+0x296>
}
 8009d9a:	b005      	add	sp, #20
 8009d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009da0:	080116dc 	.word	0x080116dc
 8009da4:	08010198 	.word	0x08010198
 8009da8:	08011708 	.word	0x08011708
 8009dac:	20010919 	.word	0x20010919
 8009db0:	08011670 	.word	0x08011670
 8009db4:	080117d4 	.word	0x080117d4
 8009db8:	2001091c 	.word	0x2001091c
 8009dbc:	08011138 	.word	0x08011138
 8009dc0:	20010914 	.word	0x20010914
 8009dc4:	08011764 	.word	0x08011764
 8009dc8:	0801178c 	.word	0x0801178c
 8009dcc:	08011734 	.word	0x08011734

08009dd0 <tcp_tmr>:
{
 8009dd0:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009dd2:	f7ff fd07 	bl	80097e4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8009dd6:	4a06      	ldr	r2, [pc, #24]	; (8009df0 <tcp_tmr+0x20>)
 8009dd8:	7813      	ldrb	r3, [r2, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	7013      	strb	r3, [r2, #0]
 8009de0:	f013 0f01 	tst.w	r3, #1
 8009de4:	d100      	bne.n	8009de8 <tcp_tmr+0x18>
}
 8009de6:	bd08      	pop	{r3, pc}
    tcp_slowtmr();
 8009de8:	f7ff fd84 	bl	80098f4 <tcp_slowtmr>
}
 8009dec:	e7fb      	b.n	8009de6 <tcp_tmr+0x16>
 8009dee:	bf00      	nop
 8009df0:	20010918 	.word	0x20010918

08009df4 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8009df4:	4a09      	ldr	r2, [pc, #36]	; (8009e1c <tcp_get_next_optbyte+0x28>)
 8009df6:	8813      	ldrh	r3, [r2, #0]
 8009df8:	1c59      	adds	r1, r3, #1
 8009dfa:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009dfc:	4a08      	ldr	r2, [pc, #32]	; (8009e20 <tcp_get_next_optbyte+0x2c>)
 8009dfe:	6812      	ldr	r2, [r2, #0]
 8009e00:	b11a      	cbz	r2, 8009e0a <tcp_get_next_optbyte+0x16>
 8009e02:	4908      	ldr	r1, [pc, #32]	; (8009e24 <tcp_get_next_optbyte+0x30>)
 8009e04:	8809      	ldrh	r1, [r1, #0]
 8009e06:	428b      	cmp	r3, r1
 8009e08:	d204      	bcs.n	8009e14 <tcp_get_next_optbyte+0x20>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009e0a:	4a07      	ldr	r2, [pc, #28]	; (8009e28 <tcp_get_next_optbyte+0x34>)
    return opts[optidx];
 8009e0c:	6812      	ldr	r2, [r2, #0]
 8009e0e:	4413      	add	r3, r2
 8009e10:	7d18      	ldrb	r0, [r3, #20]
 8009e12:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009e14:	1a5b      	subs	r3, r3, r1
    return tcphdr_opt2[idx];
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	5cd0      	ldrb	r0, [r2, r3]
  }
}
 8009e1a:	4770      	bx	lr
 8009e1c:	2001094c 	.word	0x2001094c
 8009e20:	20010958 	.word	0x20010958
 8009e24:	20010954 	.word	0x20010954
 8009e28:	20010950 	.word	0x20010950

08009e2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009e2e:	4607      	mov	r7, r0
 8009e30:	b1d0      	cbz	r0, 8009e68 <tcp_parseopt+0x3c>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009e32:	4b1e      	ldr	r3, [pc, #120]	; (8009eac <tcp_parseopt+0x80>)
 8009e34:	881d      	ldrh	r5, [r3, #0]
 8009e36:	2d00      	cmp	r5, #0
 8009e38:	d037      	beq.n	8009eaa <tcp_parseopt+0x7e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009e3a:	4b1d      	ldr	r3, [pc, #116]	; (8009eb0 <tcp_parseopt+0x84>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	801a      	strh	r2, [r3, #0]
 8009e40:	461e      	mov	r6, r3
 8009e42:	8833      	ldrh	r3, [r6, #0]
 8009e44:	42ab      	cmp	r3, r5
 8009e46:	d230      	bcs.n	8009eaa <tcp_parseopt+0x7e>
      u8_t opt = tcp_get_next_optbyte();
 8009e48:	f7ff ffd4 	bl	8009df4 <tcp_get_next_optbyte>
      switch (opt) {
 8009e4c:	2801      	cmp	r0, #1
 8009e4e:	d0f8      	beq.n	8009e42 <tcp_parseopt+0x16>
 8009e50:	2802      	cmp	r0, #2
 8009e52:	d011      	beq.n	8009e78 <tcp_parseopt+0x4c>
 8009e54:	b348      	cbz	r0, 8009eaa <tcp_parseopt+0x7e>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009e56:	f7ff ffcd 	bl	8009df4 <tcp_get_next_optbyte>
          if (data < 2) {
 8009e5a:	2801      	cmp	r0, #1
 8009e5c:	d925      	bls.n	8009eaa <tcp_parseopt+0x7e>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009e5e:	8833      	ldrh	r3, [r6, #0]
 8009e60:	3b02      	subs	r3, #2
 8009e62:	4418      	add	r0, r3
 8009e64:	8030      	strh	r0, [r6, #0]
 8009e66:	e7ec      	b.n	8009e42 <tcp_parseopt+0x16>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009e68:	4b12      	ldr	r3, [pc, #72]	; (8009eb4 <tcp_parseopt+0x88>)
 8009e6a:	f240 727d 	movw	r2, #1917	; 0x77d
 8009e6e:	4912      	ldr	r1, [pc, #72]	; (8009eb8 <tcp_parseopt+0x8c>)
 8009e70:	4812      	ldr	r0, [pc, #72]	; (8009ebc <tcp_parseopt+0x90>)
 8009e72:	f005 f83f 	bl	800eef4 <iprintf>
 8009e76:	e7dc      	b.n	8009e32 <tcp_parseopt+0x6>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009e78:	f7ff ffbc 	bl	8009df4 <tcp_get_next_optbyte>
 8009e7c:	2804      	cmp	r0, #4
 8009e7e:	d114      	bne.n	8009eaa <tcp_parseopt+0x7e>
 8009e80:	8833      	ldrh	r3, [r6, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	42ab      	cmp	r3, r5
 8009e86:	da10      	bge.n	8009eaa <tcp_parseopt+0x7e>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009e88:	f7ff ffb4 	bl	8009df4 <tcp_get_next_optbyte>
 8009e8c:	0204      	lsls	r4, r0, #8
 8009e8e:	b2a4      	uxth	r4, r4
          mss |= tcp_get_next_optbyte();
 8009e90:	f7ff ffb0 	bl	8009df4 <tcp_get_next_optbyte>
 8009e94:	4320      	orrs	r0, r4
 8009e96:	b280      	uxth	r0, r0
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009e98:	1e43      	subs	r3, r0, #1
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009ea0:	bf28      	it	cs
 8009ea2:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8009ea6:	8678      	strh	r0, [r7, #50]	; 0x32
          break;
 8009ea8:	e7cb      	b.n	8009e42 <tcp_parseopt+0x16>
      }
    }
  }
}
 8009eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eac:	2001095c 	.word	0x2001095c
 8009eb0:	2001094c 	.word	0x2001094c
 8009eb4:	080117dc 	.word	0x080117dc
 8009eb8:	08011810 	.word	0x08011810
 8009ebc:	08010198 	.word	0x08010198

08009ec0 <tcp_input_delayed_close>:
{
 8009ec0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	b130      	cbz	r0, 8009ed4 <tcp_input_delayed_close+0x14>
  if (recv_flags & TF_CLOSED) {
 8009ec6:	4b11      	ldr	r3, [pc, #68]	; (8009f0c <tcp_input_delayed_close+0x4c>)
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	f013 0f10 	tst.w	r3, #16
 8009ece:	d109      	bne.n	8009ee4 <tcp_input_delayed_close+0x24>
  return 0;
 8009ed0:	2000      	movs	r0, #0
}
 8009ed2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009ed4:	4b0e      	ldr	r3, [pc, #56]	; (8009f10 <tcp_input_delayed_close+0x50>)
 8009ed6:	f240 225a 	movw	r2, #602	; 0x25a
 8009eda:	490e      	ldr	r1, [pc, #56]	; (8009f14 <tcp_input_delayed_close+0x54>)
 8009edc:	480e      	ldr	r0, [pc, #56]	; (8009f18 <tcp_input_delayed_close+0x58>)
 8009ede:	f005 f809 	bl	800eef4 <iprintf>
 8009ee2:	e7f0      	b.n	8009ec6 <tcp_input_delayed_close+0x6>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009ee4:	8b63      	ldrh	r3, [r4, #26]
 8009ee6:	f013 0f10 	tst.w	r3, #16
 8009eea:	d106      	bne.n	8009efa <tcp_input_delayed_close+0x3a>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009eec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8009ef0:	b11b      	cbz	r3, 8009efa <tcp_input_delayed_close+0x3a>
 8009ef2:	f06f 010e 	mvn.w	r1, #14
 8009ef6:	6920      	ldr	r0, [r4, #16]
 8009ef8:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009efa:	4621      	mov	r1, r4
 8009efc:	4807      	ldr	r0, [pc, #28]	; (8009f1c <tcp_input_delayed_close+0x5c>)
 8009efe:	f7ff f8eb 	bl	80090d8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009f02:	4620      	mov	r0, r4
 8009f04:	f7fe fe5e 	bl	8008bc4 <tcp_free>
    return 1;
 8009f08:	2001      	movs	r0, #1
 8009f0a:	e7e2      	b.n	8009ed2 <tcp_input_delayed_close+0x12>
 8009f0c:	20010940 	.word	0x20010940
 8009f10:	080117dc 	.word	0x080117dc
 8009f14:	0801182c 	.word	0x0801182c
 8009f18:	08010198 	.word	0x08010198
 8009f1c:	20010904 	.word	0x20010904

08009f20 <tcp_free_acked_segments>:
{
 8009f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (seg_list != NULL &&
 8009f24:	460d      	mov	r5, r1
 8009f26:	b139      	cbz	r1, 8009f38 <tcp_free_acked_segments+0x18>
 8009f28:	4606      	mov	r6, r0
 8009f2a:	4698      	mov	r8, r3
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009f2c:	4f2c      	ldr	r7, [pc, #176]	; (8009fe0 <tcp_free_acked_segments+0xc0>)
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009f2e:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8009fe8 <tcp_free_acked_segments+0xc8>
 8009f32:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8009ff4 <tcp_free_acked_segments+0xd4>
 8009f36:	e01b      	b.n	8009f70 <tcp_free_acked_segments+0x50>
  while (seg_list != NULL &&
 8009f38:	468b      	mov	fp, r1
 8009f3a:	e00a      	b.n	8009f52 <tcp_free_acked_segments+0x32>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	f240 4257 	movw	r2, #1111	; 0x457
 8009f42:	4649      	mov	r1, r9
 8009f44:	4827      	ldr	r0, [pc, #156]	; (8009fe4 <tcp_free_acked_segments+0xc4>)
 8009f46:	f004 ffd5 	bl	800eef4 <iprintf>
 8009f4a:	e030      	b.n	8009fae <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009f4c:	f1b8 0f00 	cmp.w	r8, #0
 8009f50:	d002      	beq.n	8009f58 <tcp_free_acked_segments+0x38>
}
 8009f52:	4658      	mov	r0, fp
 8009f54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009f58:	4b23      	ldr	r3, [pc, #140]	; (8009fe8 <tcp_free_acked_segments+0xc8>)
 8009f5a:	f240 4261 	movw	r2, #1121	; 0x461
 8009f5e:	4923      	ldr	r1, [pc, #140]	; (8009fec <tcp_free_acked_segments+0xcc>)
 8009f60:	4820      	ldr	r0, [pc, #128]	; (8009fe4 <tcp_free_acked_segments+0xc4>)
 8009f62:	f004 ffc7 	bl	800eef4 <iprintf>
 8009f66:	e7f4      	b.n	8009f52 <tcp_free_acked_segments+0x32>
  while (seg_list != NULL &&
 8009f68:	f1bb 0f00 	cmp.w	fp, #0
 8009f6c:	d0f1      	beq.n	8009f52 <tcp_free_acked_segments+0x32>
 8009f6e:	465d      	mov	r5, fp
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009f70:	68eb      	ldr	r3, [r5, #12]
 8009f72:	6858      	ldr	r0, [r3, #4]
 8009f74:	f7fd fc8d 	bl	8007892 <lwip_htonl>
 8009f78:	4604      	mov	r4, r0
 8009f7a:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 8009f7e:	68eb      	ldr	r3, [r5, #12]
 8009f80:	8998      	ldrh	r0, [r3, #12]
 8009f82:	f7fd fc81 	bl	8007888 <lwip_htons>
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	1ae4      	subs	r4, r4, r3
 8009f8a:	445c      	add	r4, fp
 8009f8c:	f010 0003 	ands.w	r0, r0, #3
 8009f90:	bf18      	it	ne
 8009f92:	2001      	movne	r0, #1
 8009f94:	4404      	add	r4, r0
  while (seg_list != NULL &&
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	dc1f      	bgt.n	8009fda <tcp_free_acked_segments+0xba>
    seg_list = seg_list->next;
 8009f9a:	f8d5 b000 	ldr.w	fp, [r5]
    clen = pbuf_clen(next->p);
 8009f9e:	6868      	ldr	r0, [r5, #4]
 8009fa0:	f7fe fc2a 	bl	80087f8 <pbuf_clen>
 8009fa4:	4604      	mov	r4, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009fa6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8009faa:	4283      	cmp	r3, r0
 8009fac:	d3c6      	bcc.n	8009f3c <tcp_free_acked_segments+0x1c>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009fae:	f8b6 0066 	ldrh.w	r0, [r6, #102]	; 0x66
 8009fb2:	1b04      	subs	r4, r0, r4
 8009fb4:	f8a6 4066 	strh.w	r4, [r6, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009fb8:	4a0d      	ldr	r2, [pc, #52]	; (8009ff0 <tcp_free_acked_segments+0xd0>)
 8009fba:	892b      	ldrh	r3, [r5, #8]
 8009fbc:	8811      	ldrh	r1, [r2, #0]
 8009fbe:	440b      	add	r3, r1
 8009fc0:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 8009fc2:	4628      	mov	r0, r5
 8009fc4:	f7fe ff5a 	bl	8008e7c <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8009fc8:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d0cb      	beq.n	8009f68 <tcp_free_acked_segments+0x48>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009fd0:	f1bb 0f00 	cmp.w	fp, #0
 8009fd4:	d0ba      	beq.n	8009f4c <tcp_free_acked_segments+0x2c>
 8009fd6:	465d      	mov	r5, fp
 8009fd8:	e7ca      	b.n	8009f70 <tcp_free_acked_segments+0x50>
 8009fda:	46ab      	mov	fp, r5
  return seg_list;
 8009fdc:	e7b9      	b.n	8009f52 <tcp_free_acked_segments+0x32>
 8009fde:	bf00      	nop
 8009fe0:	20010920 	.word	0x20010920
 8009fe4:	08010198 	.word	0x08010198
 8009fe8:	080117dc 	.word	0x080117dc
 8009fec:	0801187c 	.word	0x0801187c
 8009ff0:	20010938 	.word	0x20010938
 8009ff4:	08011854 	.word	0x08011854

08009ff8 <tcp_oos_insert_segment>:
{
 8009ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ffc:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8009ffe:	4605      	mov	r5, r0
 800a000:	b160      	cbz	r0, 800a01c <tcp_oos_insert_segment+0x24>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a002:	68eb      	ldr	r3, [r5, #12]
 800a004:	8998      	ldrh	r0, [r3, #12]
 800a006:	f7fd fc3f 	bl	8007888 <lwip_htons>
 800a00a:	f010 0f01 	tst.w	r0, #1
 800a00e:	d10d      	bne.n	800a02c <tcp_oos_insert_segment+0x34>
    while (next &&
 800a010:	2c00      	cmp	r4, #0
 800a012:	d035      	beq.n	800a080 <tcp_oos_insert_segment+0x88>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a014:	4e20      	ldr	r6, [pc, #128]	; (800a098 <tcp_oos_insert_segment+0xa0>)
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a016:	f04f 0901 	mov.w	r9, #1
 800a01a:	e014      	b.n	800a046 <tcp_oos_insert_segment+0x4e>
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800a01c:	4b1f      	ldr	r3, [pc, #124]	; (800a09c <tcp_oos_insert_segment+0xa4>)
 800a01e:	f240 421f 	movw	r2, #1055	; 0x41f
 800a022:	491f      	ldr	r1, [pc, #124]	; (800a0a0 <tcp_oos_insert_segment+0xa8>)
 800a024:	481f      	ldr	r0, [pc, #124]	; (800a0a4 <tcp_oos_insert_segment+0xac>)
 800a026:	f004 ff65 	bl	800eef4 <iprintf>
 800a02a:	e7ea      	b.n	800a002 <tcp_oos_insert_segment+0xa>
    tcp_segs_free(next);
 800a02c:	4620      	mov	r0, r4
 800a02e:	f7fe ff32 	bl	8008e96 <tcp_segs_free>
    next = NULL;
 800a032:	2400      	movs	r4, #0
  cseg->next = next;
 800a034:	602c      	str	r4, [r5, #0]
}
 800a036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      next = next->next;
 800a03a:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 800a03c:	4620      	mov	r0, r4
 800a03e:	f7fe ff1d 	bl	8008e7c <tcp_seg_free>
    while (next &&
 800a042:	b1ef      	cbz	r7, 800a080 <tcp_oos_insert_segment+0x88>
      next = next->next;
 800a044:	463c      	mov	r4, r7
           TCP_SEQ_GEQ((seqno + cseg->len),
 800a046:	f8d6 c000 	ldr.w	ip, [r6]
 800a04a:	68e1      	ldr	r1, [r4, #12]
 800a04c:	6848      	ldr	r0, [r1, #4]
 800a04e:	892b      	ldrh	r3, [r5, #8]
 800a050:	4463      	add	r3, ip
 800a052:	1a1b      	subs	r3, r3, r0
 800a054:	8922      	ldrh	r2, [r4, #8]
 800a056:	1a9a      	subs	r2, r3, r2
    while (next &&
 800a058:	2a00      	cmp	r2, #0
 800a05a:	db13      	blt.n	800a084 <tcp_oos_insert_segment+0x8c>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a05c:	8988      	ldrh	r0, [r1, #12]
 800a05e:	f7fd fc13 	bl	8007888 <lwip_htons>
 800a062:	f010 0f01 	tst.w	r0, #1
 800a066:	d0e8      	beq.n	800a03a <tcp_oos_insert_segment+0x42>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800a068:	68eb      	ldr	r3, [r5, #12]
 800a06a:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 800a06e:	4648      	mov	r0, r9
 800a070:	f7fd fc0a 	bl	8007888 <lwip_htons>
 800a074:	68eb      	ldr	r3, [r5, #12]
 800a076:	ea48 0800 	orr.w	r8, r8, r0
 800a07a:	f8a3 800c 	strh.w	r8, [r3, #12]
 800a07e:	e7dc      	b.n	800a03a <tcp_oos_insert_segment+0x42>
    next = NULL;
 800a080:	2400      	movs	r4, #0
 800a082:	e7d7      	b.n	800a034 <tcp_oos_insert_segment+0x3c>
    if (next &&
 800a084:	2b00      	cmp	r3, #0
 800a086:	ddd5      	ble.n	800a034 <tcp_oos_insert_segment+0x3c>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800a088:	eba0 010c 	sub.w	r1, r0, ip
 800a08c:	b289      	uxth	r1, r1
 800a08e:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800a090:	6868      	ldr	r0, [r5, #4]
 800a092:	f7fe fb51 	bl	8008738 <pbuf_realloc>
 800a096:	e7cd      	b.n	800a034 <tcp_oos_insert_segment+0x3c>
 800a098:	20010944 	.word	0x20010944
 800a09c:	080117dc 	.word	0x080117dc
 800a0a0:	0801189c 	.word	0x0801189c
 800a0a4:	08010198 	.word	0x08010198

0800a0a8 <tcp_receive>:
{
 800a0a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a0ac:	4604      	mov	r4, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d066      	beq.n	800a180 <tcp_receive+0xd8>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a0b2:	7d23      	ldrb	r3, [r4, #20]
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d96b      	bls.n	800a190 <tcp_receive+0xe8>
  if (flags & TCP_ACK) {
 800a0b8:	4ba4      	ldr	r3, [pc, #656]	; (800a34c <tcp_receive+0x2a4>)
 800a0ba:	781b      	ldrb	r3, [r3, #0]
 800a0bc:	f013 0f10 	tst.w	r3, #16
 800a0c0:	d03a      	beq.n	800a138 <tcp_receive+0x90>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a0c2:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 800a0c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800a0c8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800a0ca:	4ba1      	ldr	r3, [pc, #644]	; (800a350 <tcp_receive+0x2a8>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	1ad1      	subs	r1, r2, r3
 800a0d0:	2900      	cmp	r1, #0
 800a0d2:	db0a      	blt.n	800a0ea <tcp_receive+0x42>
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d063      	beq.n	800a1a0 <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a0d8:	4a9e      	ldr	r2, [pc, #632]	; (800a354 <tcp_receive+0x2ac>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a0da:	6812      	ldr	r2, [r2, #0]
 800a0dc:	4290      	cmp	r0, r2
 800a0de:	d114      	bne.n	800a10a <tcp_receive+0x62>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800a0e0:	4a9d      	ldr	r2, [pc, #628]	; (800a358 <tcp_receive+0x2b0>)
 800a0e2:	6812      	ldr	r2, [r2, #0]
 800a0e4:	89d2      	ldrh	r2, [r2, #14]
 800a0e6:	42aa      	cmp	r2, r5
 800a0e8:	d90f      	bls.n	800a10a <tcp_receive+0x62>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800a0ea:	4a9b      	ldr	r2, [pc, #620]	; (800a358 <tcp_receive+0x2b0>)
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	89d2      	ldrh	r2, [r2, #14]
 800a0f0:	b291      	uxth	r1, r2
 800a0f2:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800a0f6:	f8b4 6062 	ldrh.w	r6, [r4, #98]	; 0x62
 800a0fa:	428e      	cmp	r6, r1
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a0fc:	bf38      	it	cc
 800a0fe:	f8a4 2062 	strhcc.w	r2, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 800a102:	6563      	str	r3, [r4, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800a104:	4b93      	ldr	r3, [pc, #588]	; (800a354 <tcp_receive+0x2ac>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	65a3      	str	r3, [r4, #88]	; 0x58
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800a10a:	4b92      	ldr	r3, [pc, #584]	; (800a354 <tcp_receive+0x2ac>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a110:	1a5a      	subs	r2, r3, r1
 800a112:	2a00      	cmp	r2, #0
 800a114:	dd4a      	ble.n	800a1ac <tcp_receive+0x104>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a116:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a118:	1a9a      	subs	r2, r3, r2
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	f340 808a 	ble.w	800a234 <tcp_receive+0x18c>
      tcp_send_empty_ack(pcb);
 800a120:	4620      	mov	r0, r4
 800a122:	f002 fa4d 	bl	800c5c0 <tcp_send_empty_ack>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a126:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a128:	b133      	cbz	r3, 800a138 <tcp_receive+0x90>
 800a12a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a12c:	4989      	ldr	r1, [pc, #548]	; (800a354 <tcp_receive+0x2ac>)
 800a12e:	6809      	ldr	r1, [r1, #0]
 800a130:	1a52      	subs	r2, r2, r1
 800a132:	2a00      	cmp	r2, #0
 800a134:	f2c0 8131 	blt.w	800a39a <tcp_receive+0x2f2>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800a138:	4b88      	ldr	r3, [pc, #544]	; (800a35c <tcp_receive+0x2b4>)
 800a13a:	881a      	ldrh	r2, [r3, #0]
 800a13c:	2a00      	cmp	r2, #0
 800a13e:	d058      	beq.n	800a1f2 <tcp_receive+0x14a>
 800a140:	7d23      	ldrb	r3, [r4, #20]
 800a142:	2b06      	cmp	r3, #6
 800a144:	d855      	bhi.n	800a1f2 <tcp_receive+0x14a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800a146:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a148:	4b81      	ldr	r3, [pc, #516]	; (800a350 <tcp_receive+0x2a8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	1ace      	subs	r6, r1, r3
 800a14e:	2e01      	cmp	r6, #1
 800a150:	d406      	bmi.n	800a160 <tcp_receive+0xb8>
 800a152:	f1c3 0001 	rsb	r0, r3, #1
 800a156:	1a82      	subs	r2, r0, r2
 800a158:	440a      	add	r2, r1
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	f340 813f 	ble.w	800a3de <tcp_receive+0x336>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a160:	1a5a      	subs	r2, r3, r1
 800a162:	2a00      	cmp	r2, #0
 800a164:	f2c0 8185 	blt.w	800a472 <tcp_receive+0x3ca>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a168:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a16a:	f1c2 0201 	rsb	r2, r2, #1
 800a16e:	441a      	add	r2, r3
 800a170:	1a52      	subs	r2, r2, r1
 800a172:	2a00      	cmp	r2, #0
 800a174:	f340 8182 	ble.w	800a47c <tcp_receive+0x3d4>
      tcp_send_empty_ack(pcb);
 800a178:	4620      	mov	r0, r4
 800a17a:	f002 fa21 	bl	800c5c0 <tcp_send_empty_ack>
 800a17e:	e048      	b.n	800a212 <tcp_receive+0x16a>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800a180:	4b77      	ldr	r3, [pc, #476]	; (800a360 <tcp_receive+0x2b8>)
 800a182:	f240 427b 	movw	r2, #1147	; 0x47b
 800a186:	4977      	ldr	r1, [pc, #476]	; (800a364 <tcp_receive+0x2bc>)
 800a188:	4877      	ldr	r0, [pc, #476]	; (800a368 <tcp_receive+0x2c0>)
 800a18a:	f004 feb3 	bl	800eef4 <iprintf>
 800a18e:	e790      	b.n	800a0b2 <tcp_receive+0xa>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800a190:	4b73      	ldr	r3, [pc, #460]	; (800a360 <tcp_receive+0x2b8>)
 800a192:	f240 427c 	movw	r2, #1148	; 0x47c
 800a196:	4975      	ldr	r1, [pc, #468]	; (800a36c <tcp_receive+0x2c4>)
 800a198:	4873      	ldr	r0, [pc, #460]	; (800a368 <tcp_receive+0x2c0>)
 800a19a:	f004 feab 	bl	800eef4 <iprintf>
 800a19e:	e78b      	b.n	800a0b8 <tcp_receive+0x10>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800a1a0:	4a6c      	ldr	r2, [pc, #432]	; (800a354 <tcp_receive+0x2ac>)
 800a1a2:	6812      	ldr	r2, [r2, #0]
 800a1a4:	1a82      	subs	r2, r0, r2
 800a1a6:	2a00      	cmp	r2, #0
 800a1a8:	da96      	bge.n	800a0d8 <tcp_receive+0x30>
 800a1aa:	e79e      	b.n	800a0ea <tcp_receive+0x42>
      if (tcplen == 0) {
 800a1ac:	4a6b      	ldr	r2, [pc, #428]	; (800a35c <tcp_receive+0x2b4>)
 800a1ae:	8812      	ldrh	r2, [r2, #0]
 800a1b0:	b932      	cbnz	r2, 800a1c0 <tcp_receive+0x118>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1b2:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800a1b6:	6da6      	ldr	r6, [r4, #88]	; 0x58
 800a1b8:	4432      	add	r2, r6
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800a1ba:	4428      	add	r0, r5
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800a1bc:	4282      	cmp	r2, r0
 800a1be:	d003      	beq.n	800a1c8 <tcp_receive+0x120>
        pcb->dupacks = 0;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c6:	e7ae      	b.n	800a126 <tcp_receive+0x7e>
          if (pcb->rtime >= 0) {
 800a1c8:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	dbf7      	blt.n	800a1c0 <tcp_receive+0x118>
            if (pcb->lastack == ackno) {
 800a1d0:	428b      	cmp	r3, r1
 800a1d2:	d1f5      	bne.n	800a1c0 <tcp_receive+0x118>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800a1d4:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a1d8:	2bff      	cmp	r3, #255	; 0xff
 800a1da:	d01c      	beq.n	800a216 <tcp_receive+0x16e>
                ++pcb->dupacks;
 800a1dc:	3301      	adds	r3, #1
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 800a1e4:	2b03      	cmp	r3, #3
 800a1e6:	d816      	bhi.n	800a216 <tcp_receive+0x16e>
              if (pcb->dupacks >= 3) {
 800a1e8:	2b03      	cmp	r3, #3
 800a1ea:	d01f      	beq.n	800a22c <tcp_receive+0x184>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800a1ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d19b      	bne.n	800a12a <tcp_receive+0x82>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a1f2:	4b57      	ldr	r3, [pc, #348]	; (800a350 <tcp_receive+0x2a8>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a1f8:	1a99      	subs	r1, r3, r2
 800a1fa:	2900      	cmp	r1, #0
 800a1fc:	db05      	blt.n	800a20a <tcp_receive+0x162>
 800a1fe:	3301      	adds	r3, #1
 800a200:	1a9b      	subs	r3, r3, r2
 800a202:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	2b00      	cmp	r3, #0
 800a208:	dd03      	ble.n	800a212 <tcp_receive+0x16a>
      tcp_ack_now(pcb);
 800a20a:	8b63      	ldrh	r3, [r4, #26]
 800a20c:	f043 0302 	orr.w	r3, r3, #2
 800a210:	8363      	strh	r3, [r4, #26]
}
 800a212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a216:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a21a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a21c:	4413      	add	r3, r2
 800a21e:	b29b      	uxth	r3, r3
 800a220:	429a      	cmp	r2, r3
 800a222:	bf88      	it	hi
 800a224:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a228:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 800a22c:	4620      	mov	r0, r4
 800a22e:	f002 f943 	bl	800c4b8 <tcp_rexmit_fast>
      if (!found_dupack) {
 800a232:	e778      	b.n	800a126 <tcp_receive+0x7e>
      if (pcb->flags & TF_INFR) {
 800a234:	8b62      	ldrh	r2, [r4, #26]
 800a236:	f012 0f04 	tst.w	r2, #4
 800a23a:	d009      	beq.n	800a250 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 800a23c:	f022 0204 	bic.w	r2, r2, #4
 800a240:	8362      	strh	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800a242:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a246:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 800a24a:	2200      	movs	r2, #0
 800a24c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
      pcb->nrtx = 0;
 800a250:	2000      	movs	r0, #0
 800a252:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a256:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800a25a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800a25c:	eb02 02e5 	add.w	r2, r2, r5, asr #3
 800a260:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->dupacks = 0;
 800a264:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
      pcb->lastack = ackno;
 800a268:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800a26a:	7d22      	ldrb	r2, [r4, #20]
 800a26c:	2a03      	cmp	r2, #3
 800a26e:	d91c      	bls.n	800a2aa <tcp_receive+0x202>
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800a270:	1a5b      	subs	r3, r3, r1
 800a272:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 800a274:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800a278:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 800a27c:	4291      	cmp	r1, r2
 800a27e:	d948      	bls.n	800a312 <tcp_receive+0x26a>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800a280:	8b61      	ldrh	r1, [r4, #26]
 800a282:	f411 6f00 	tst.w	r1, #2048	; 0x800
 800a286:	bf14      	ite	ne
 800a288:	2001      	movne	r0, #1
 800a28a:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800a28c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
 800a28e:	fb11 f100 	smulbb	r1, r1, r0
 800a292:	b289      	uxth	r1, r1
          TCP_WND_INC(pcb->cwnd, increase);
 800a294:	4299      	cmp	r1, r3
 800a296:	bf94      	ite	ls
 800a298:	1850      	addls	r0, r2, r1
 800a29a:	18d0      	addhi	r0, r2, r3
 800a29c:	b283      	uxth	r3, r0
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	bf88      	it	hi
 800a2a2:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a2a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a2aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a2ac:	4a30      	ldr	r2, [pc, #192]	; (800a370 <tcp_receive+0x2c8>)
 800a2ae:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f7ff fe35 	bl	8009f20 <tcp_free_acked_segments>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a2ba:	4a2e      	ldr	r2, [pc, #184]	; (800a374 <tcp_receive+0x2cc>)
 800a2bc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800a2be:	4620      	mov	r0, r4
 800a2c0:	f7ff fe2e 	bl	8009f20 <tcp_free_acked_segments>
 800a2c4:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800a2c6:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800a2c8:	fab2 f382 	clz	r3, r2
 800a2cc:	095b      	lsrs	r3, r3, #5
 800a2ce:	425b      	negs	r3, r3
 800a2d0:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d035      	beq.n	800a346 <tcp_receive+0x29e>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a2da:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a2de:	4926      	ldr	r1, [pc, #152]	; (800a378 <tcp_receive+0x2d0>)
 800a2e0:	8809      	ldrh	r1, [r1, #0]
 800a2e2:	440b      	add	r3, r1
 800a2e4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a2e8:	8b63      	ldrh	r3, [r4, #26]
 800a2ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a2ee:	f43f af1a 	beq.w	800a126 <tcp_receive+0x7e>
        if (pcb->unacked == NULL) {
 800a2f2:	2a00      	cmp	r2, #0
 800a2f4:	d042      	beq.n	800a37c <tcp_receive+0x2d4>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a2f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a2f8:	68d3      	ldr	r3, [r2, #12]
 800a2fa:	6858      	ldr	r0, [r3, #4]
 800a2fc:	f7fd fac9 	bl	8007892 <lwip_htonl>
 800a300:	1a2d      	subs	r5, r5, r0
 800a302:	2d00      	cmp	r5, #0
 800a304:	f73f af0f 	bgt.w	800a126 <tcp_receive+0x7e>
          tcp_clear_flags(pcb, TF_RTO);
 800a308:	8b63      	ldrh	r3, [r4, #26]
 800a30a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a30e:	8363      	strh	r3, [r4, #26]
 800a310:	e709      	b.n	800a126 <tcp_receive+0x7e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a312:	f8b4 106a 	ldrh.w	r1, [r4, #106]	; 0x6a
 800a316:	440b      	add	r3, r1
 800a318:	b29b      	uxth	r3, r3
 800a31a:	4299      	cmp	r1, r3
 800a31c:	d804      	bhi.n	800a328 <tcp_receive+0x280>
          if (pcb->bytes_acked >= pcb->cwnd) {
 800a31e:	429a      	cmp	r2, r3
 800a320:	d904      	bls.n	800a32c <tcp_receive+0x284>
 800a322:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a326:	e7c0      	b.n	800a2aa <tcp_receive+0x202>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a328:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a32c:	1a9b      	subs	r3, r3, r2
 800a32e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a332:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a334:	4413      	add	r3, r2
 800a336:	b29b      	uxth	r3, r3
 800a338:	429a      	cmp	r2, r3
 800a33a:	bf88      	it	hi
 800a33c:	f64f 73ff 	movwhi	r3, #65535	; 0xffff
 800a340:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 800a344:	e7b1      	b.n	800a2aa <tcp_receive+0x202>
        pcb->unsent_oversize = 0;
 800a346:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 800a34a:	e7c6      	b.n	800a2da <tcp_receive+0x232>
 800a34c:	20010924 	.word	0x20010924
 800a350:	20010944 	.word	0x20010944
 800a354:	20010920 	.word	0x20010920
 800a358:	20010950 	.word	0x20010950
 800a35c:	2001095e 	.word	0x2001095e
 800a360:	080117dc 	.word	0x080117dc
 800a364:	080118c4 	.word	0x080118c4
 800a368:	08010198 	.word	0x08010198
 800a36c:	080118e0 	.word	0x080118e0
 800a370:	080118fc 	.word	0x080118fc
 800a374:	08011904 	.word	0x08011904
 800a378:	20010938 	.word	0x20010938
          if ((pcb->unsent == NULL) ||
 800a37c:	b140      	cbz	r0, 800a390 <tcp_receive+0x2e8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a37e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a380:	68c3      	ldr	r3, [r0, #12]
 800a382:	6858      	ldr	r0, [r3, #4]
 800a384:	f7fd fa85 	bl	8007892 <lwip_htonl>
 800a388:	1a2d      	subs	r5, r5, r0
          if ((pcb->unsent == NULL) ||
 800a38a:	2d00      	cmp	r5, #0
 800a38c:	f73f aecb 	bgt.w	800a126 <tcp_receive+0x7e>
            tcp_clear_flags(pcb, TF_RTO);
 800a390:	8b63      	ldrh	r3, [r4, #26]
 800a392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a396:	8363      	strh	r3, [r4, #26]
 800a398:	e6c5      	b.n	800a126 <tcp_receive+0x7e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800a39a:	4a9a      	ldr	r2, [pc, #616]	; (800a604 <tcp_receive+0x55c>)
 800a39c:	8816      	ldrh	r6, [r2, #0]
 800a39e:	b29b      	uxth	r3, r3
      m = (s16_t)(m - (pcb->sa >> 3));
 800a3a0:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
 800a3a4:	f3c5 02cf 	ubfx	r2, r5, #3, #16
 800a3a8:	1ab1      	subs	r1, r6, r2
 800a3aa:	1ac9      	subs	r1, r1, r3
 800a3ac:	b208      	sxth	r0, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 800a3ae:	fa15 f181 	uxtah	r1, r5, r1
 800a3b2:	b209      	sxth	r1, r1
 800a3b4:	87a1      	strh	r1, [r4, #60]	; 0x3c
      if (m < 0) {
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	db0d      	blt.n	800a3d6 <tcp_receive+0x32e>
      m = (s16_t)(m - (pcb->sv >> 2));
 800a3ba:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 800a3be:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
 800a3c2:	1813      	adds	r3, r2, r0
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800a3c8:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 800a3cc:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	6363      	str	r3, [r4, #52]	; 0x34
 800a3d4:	e6b0      	b.n	800a138 <tcp_receive+0x90>
        m = (s16_t) - m;
 800a3d6:	1b92      	subs	r2, r2, r6
 800a3d8:	4413      	add	r3, r2
 800a3da:	b218      	sxth	r0, r3
 800a3dc:	e7ed      	b.n	800a3ba <tcp_receive+0x312>
      struct pbuf *p = inseg.p;
 800a3de:	4b8a      	ldr	r3, [pc, #552]	; (800a608 <tcp_receive+0x560>)
 800a3e0:	685d      	ldr	r5, [r3, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a3e2:	2d00      	cmp	r5, #0
 800a3e4:	d02d      	beq.n	800a442 <tcp_receive+0x39a>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a3e6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a3ea:	429e      	cmp	r6, r3
 800a3ec:	d831      	bhi.n	800a452 <tcp_receive+0x3aa>
      off = (u16_t)off32;
 800a3ee:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a3f0:	4b85      	ldr	r3, [pc, #532]	; (800a608 <tcp_receive+0x560>)
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	891b      	ldrh	r3, [r3, #8]
 800a3f6:	42b3      	cmp	r3, r6
 800a3f8:	d333      	bcc.n	800a462 <tcp_receive+0x3ba>
      inseg.len -= off;
 800a3fa:	4b83      	ldr	r3, [pc, #524]	; (800a608 <tcp_receive+0x560>)
 800a3fc:	891a      	ldrh	r2, [r3, #8]
 800a3fe:	1b92      	subs	r2, r2, r6
 800a400:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	891a      	ldrh	r2, [r3, #8]
 800a406:	1b92      	subs	r2, r2, r6
 800a408:	b292      	uxth	r2, r2
      while (p->len < off) {
 800a40a:	896b      	ldrh	r3, [r5, #10]
 800a40c:	429e      	cmp	r6, r3
 800a40e:	d908      	bls.n	800a422 <tcp_receive+0x37a>
        p->len = 0;
 800a410:	2100      	movs	r1, #0
        off -= p->len;
 800a412:	1af3      	subs	r3, r6, r3
 800a414:	b29e      	uxth	r6, r3
        p->tot_len = new_tot_len;
 800a416:	812a      	strh	r2, [r5, #8]
        p->len = 0;
 800a418:	8169      	strh	r1, [r5, #10]
        p = p->next;
 800a41a:	682d      	ldr	r5, [r5, #0]
      while (p->len < off) {
 800a41c:	896b      	ldrh	r3, [r5, #10]
 800a41e:	42b3      	cmp	r3, r6
 800a420:	d3f7      	bcc.n	800a412 <tcp_receive+0x36a>
      pbuf_remove_header(p, off);
 800a422:	4631      	mov	r1, r6
 800a424:	4628      	mov	r0, r5
 800a426:	f7fe f82f 	bl	8008488 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800a42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a42c:	4a77      	ldr	r2, [pc, #476]	; (800a60c <tcp_receive+0x564>)
 800a42e:	6013      	str	r3, [r2, #0]
 800a430:	4a75      	ldr	r2, [pc, #468]	; (800a608 <tcp_receive+0x560>)
 800a432:	68d2      	ldr	r2, [r2, #12]
 800a434:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a436:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a438:	1a5a      	subs	r2, r3, r1
 800a43a:	2a00      	cmp	r2, #0
 800a43c:	f6bf ae94 	bge.w	800a168 <tcp_receive+0xc0>
 800a440:	e69a      	b.n	800a178 <tcp_receive+0xd0>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800a442:	4b73      	ldr	r3, [pc, #460]	; (800a610 <tcp_receive+0x568>)
 800a444:	f240 5294 	movw	r2, #1428	; 0x594
 800a448:	4972      	ldr	r1, [pc, #456]	; (800a614 <tcp_receive+0x56c>)
 800a44a:	4873      	ldr	r0, [pc, #460]	; (800a618 <tcp_receive+0x570>)
 800a44c:	f004 fd52 	bl	800eef4 <iprintf>
 800a450:	e7c9      	b.n	800a3e6 <tcp_receive+0x33e>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800a452:	4b6f      	ldr	r3, [pc, #444]	; (800a610 <tcp_receive+0x568>)
 800a454:	f240 5295 	movw	r2, #1429	; 0x595
 800a458:	4970      	ldr	r1, [pc, #448]	; (800a61c <tcp_receive+0x574>)
 800a45a:	486f      	ldr	r0, [pc, #444]	; (800a618 <tcp_receive+0x570>)
 800a45c:	f004 fd4a 	bl	800eef4 <iprintf>
 800a460:	e7c5      	b.n	800a3ee <tcp_receive+0x346>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800a462:	4b6b      	ldr	r3, [pc, #428]	; (800a610 <tcp_receive+0x568>)
 800a464:	f240 5297 	movw	r2, #1431	; 0x597
 800a468:	496d      	ldr	r1, [pc, #436]	; (800a620 <tcp_receive+0x578>)
 800a46a:	486b      	ldr	r0, [pc, #428]	; (800a618 <tcp_receive+0x570>)
 800a46c:	f004 fd42 	bl	800eef4 <iprintf>
 800a470:	e7c3      	b.n	800a3fa <tcp_receive+0x352>
        tcp_ack_now(pcb);
 800a472:	8b63      	ldrh	r3, [r4, #26]
 800a474:	f043 0302 	orr.w	r3, r3, #2
 800a478:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a47a:	e67d      	b.n	800a178 <tcp_receive+0xd0>
      if (pcb->rcv_nxt == seqno) {
 800a47c:	428b      	cmp	r3, r1
 800a47e:	d008      	beq.n	800a492 <tcp_receive+0x3ea>
        if (pcb->ooseq == NULL) {
 800a480:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a482:	2d00      	cmp	r5, #0
 800a484:	f000 817a 	beq.w	800a77c <tcp_receive+0x6d4>
          struct tcp_seg *next, *prev = NULL;
 800a488:	2600      	movs	r6, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a48a:	1e5f      	subs	r7, r3, #1
 800a48c:	f103 0c01 	add.w	ip, r3, #1
 800a490:	e195      	b.n	800a7be <tcp_receive+0x716>
        tcplen = TCP_TCPLEN(&inseg);
 800a492:	4b5d      	ldr	r3, [pc, #372]	; (800a608 <tcp_receive+0x560>)
 800a494:	891d      	ldrh	r5, [r3, #8]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	8998      	ldrh	r0, [r3, #12]
 800a49a:	f7fd f9f5 	bl	8007888 <lwip_htons>
 800a49e:	f010 0303 	ands.w	r3, r0, #3
 800a4a2:	bf18      	it	ne
 800a4a4:	2301      	movne	r3, #1
 800a4a6:	442b      	add	r3, r5
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4a5e      	ldr	r2, [pc, #376]	; (800a624 <tcp_receive+0x57c>)
 800a4ac:	8013      	strh	r3, [r2, #0]
        if (tcplen > pcb->rcv_wnd) {
 800a4ae:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d317      	bcc.n	800a4e4 <tcp_receive+0x43c>
        if (pcb->ooseq != NULL) {
 800a4b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	f000 823e 	beq.w	800a938 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4bc:	4b52      	ldr	r3, [pc, #328]	; (800a608 <tcp_receive+0x560>)
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	8998      	ldrh	r0, [r3, #12]
 800a4c2:	f7fd f9e1 	bl	8007888 <lwip_htons>
 800a4c6:	f010 0f01 	tst.w	r0, #1
 800a4ca:	d053      	beq.n	800a574 <tcp_receive+0x4cc>
            while (pcb->ooseq != NULL) {
 800a4cc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	f000 8232 	beq.w	800a938 <tcp_receive+0x890>
              pcb->ooseq = pcb->ooseq->next;
 800a4d4:	6803      	ldr	r3, [r0, #0]
 800a4d6:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800a4d8:	f7fe fcd0 	bl	8008e7c <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800a4dc:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d1f8      	bne.n	800a4d4 <tcp_receive+0x42c>
 800a4e2:	e229      	b.n	800a938 <tcp_receive+0x890>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a4e4:	4b48      	ldr	r3, [pc, #288]	; (800a608 <tcp_receive+0x560>)
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	8998      	ldrh	r0, [r3, #12]
 800a4ea:	f7fd f9cd 	bl	8007888 <lwip_htons>
 800a4ee:	f010 0f01 	tst.w	r0, #1
 800a4f2:	d12f      	bne.n	800a554 <tcp_receive+0x4ac>
          inseg.len = (u16_t)pcb->rcv_wnd;
 800a4f4:	4b44      	ldr	r3, [pc, #272]	; (800a608 <tcp_receive+0x560>)
 800a4f6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a4f8:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	8998      	ldrh	r0, [r3, #12]
 800a4fe:	f7fd f9c3 	bl	8007888 <lwip_htons>
 800a502:	f010 0f02 	tst.w	r0, #2
 800a506:	d003      	beq.n	800a510 <tcp_receive+0x468>
            inseg.len -= 1;
 800a508:	4a3f      	ldr	r2, [pc, #252]	; (800a608 <tcp_receive+0x560>)
 800a50a:	8913      	ldrh	r3, [r2, #8]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	8113      	strh	r3, [r2, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800a510:	4e3d      	ldr	r6, [pc, #244]	; (800a608 <tcp_receive+0x560>)
 800a512:	8931      	ldrh	r1, [r6, #8]
 800a514:	6870      	ldr	r0, [r6, #4]
 800a516:	f7fe f90f 	bl	8008738 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800a51a:	8935      	ldrh	r5, [r6, #8]
 800a51c:	68f3      	ldr	r3, [r6, #12]
 800a51e:	8998      	ldrh	r0, [r3, #12]
 800a520:	f7fd f9b2 	bl	8007888 <lwip_htons>
 800a524:	f010 0303 	ands.w	r3, r0, #3
 800a528:	bf18      	it	ne
 800a52a:	2301      	movne	r3, #1
 800a52c:	442b      	add	r3, r5
 800a52e:	b29b      	uxth	r3, r3
 800a530:	4a3c      	ldr	r2, [pc, #240]	; (800a624 <tcp_receive+0x57c>)
 800a532:	8013      	strh	r3, [r2, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a534:	4a35      	ldr	r2, [pc, #212]	; (800a60c <tcp_receive+0x564>)
 800a536:	6812      	ldr	r2, [r2, #0]
 800a538:	4413      	add	r3, r2
 800a53a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a53c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a53e:	440a      	add	r2, r1
 800a540:	4293      	cmp	r3, r2
 800a542:	d0b7      	beq.n	800a4b4 <tcp_receive+0x40c>
 800a544:	4b32      	ldr	r3, [pc, #200]	; (800a610 <tcp_receive+0x568>)
 800a546:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800a54a:	4937      	ldr	r1, [pc, #220]	; (800a628 <tcp_receive+0x580>)
 800a54c:	4832      	ldr	r0, [pc, #200]	; (800a618 <tcp_receive+0x570>)
 800a54e:	f004 fcd1 	bl	800eef4 <iprintf>
 800a552:	e7af      	b.n	800a4b4 <tcp_receive+0x40c>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800a554:	4e2c      	ldr	r6, [pc, #176]	; (800a608 <tcp_receive+0x560>)
 800a556:	68f3      	ldr	r3, [r6, #12]
 800a558:	899d      	ldrh	r5, [r3, #12]
 800a55a:	4628      	mov	r0, r5
 800a55c:	f7fd f994 	bl	8007888 <lwip_htons>
 800a560:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a564:	f7fd f990 	bl	8007888 <lwip_htons>
 800a568:	68f3      	ldr	r3, [r6, #12]
 800a56a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a56e:	4305      	orrs	r5, r0
 800a570:	819d      	strh	r5, [r3, #12]
 800a572:	e7bf      	b.n	800a4f4 <tcp_receive+0x44c>
            struct tcp_seg *next = pcb->ooseq;
 800a574:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 800a576:	2d00      	cmp	r5, #0
 800a578:	f000 81d8 	beq.w	800a92c <tcp_receive+0x884>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a57c:	4f23      	ldr	r7, [pc, #140]	; (800a60c <tcp_receive+0x564>)
 800a57e:	4e29      	ldr	r6, [pc, #164]	; (800a624 <tcp_receive+0x57c>)
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a580:	f8df 8084 	ldr.w	r8, [pc, #132]	; 800a608 <tcp_receive+0x560>
 800a584:	e009      	b.n	800a59a <tcp_receive+0x4f2>
              next = next->next;
 800a586:	f8d5 9000 	ldr.w	r9, [r5]
              tcp_seg_free(tmp);
 800a58a:	4628      	mov	r0, r5
 800a58c:	f7fe fc76 	bl	8008e7c <tcp_seg_free>
            while (next &&
 800a590:	f1b9 0f00 	cmp.w	r9, #0
 800a594:	f000 81ca 	beq.w	800a92c <tcp_receive+0x884>
              next = next->next;
 800a598:	464d      	mov	r5, r9
                   TCP_SEQ_GEQ(seqno + tcplen,
 800a59a:	f8d7 c000 	ldr.w	ip, [r7]
 800a59e:	68e9      	ldr	r1, [r5, #12]
 800a5a0:	6848      	ldr	r0, [r1, #4]
 800a5a2:	8833      	ldrh	r3, [r6, #0]
 800a5a4:	4463      	add	r3, ip
 800a5a6:	1a1b      	subs	r3, r3, r0
 800a5a8:	892a      	ldrh	r2, [r5, #8]
 800a5aa:	1a9a      	subs	r2, r3, r2
            while (next &&
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	f2c0 81bf 	blt.w	800a930 <tcp_receive+0x888>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a5b2:	8988      	ldrh	r0, [r1, #12]
 800a5b4:	f7fd f968 	bl	8007888 <lwip_htons>
 800a5b8:	f010 0f01 	tst.w	r0, #1
 800a5bc:	d0e3      	beq.n	800a586 <tcp_receive+0x4de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800a5be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5c2:	8998      	ldrh	r0, [r3, #12]
 800a5c4:	f7fd f960 	bl	8007888 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800a5c8:	f010 0f02 	tst.w	r0, #2
 800a5cc:	d1db      	bne.n	800a586 <tcp_receive+0x4de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800a5ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5d2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800a5d6:	2001      	movs	r0, #1
 800a5d8:	f7fd f956 	bl	8007888 <lwip_htons>
 800a5dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5e0:	ea49 0900 	orr.w	r9, r9, r0
 800a5e4:	f8a3 900c 	strh.w	r9, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800a5e8:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800a5ec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5f0:	8998      	ldrh	r0, [r3, #12]
 800a5f2:	f7fd f949 	bl	8007888 <lwip_htons>
 800a5f6:	f010 0303 	ands.w	r3, r0, #3
 800a5fa:	bf18      	it	ne
 800a5fc:	2301      	movne	r3, #1
 800a5fe:	444b      	add	r3, r9
 800a600:	8033      	strh	r3, [r6, #0]
 800a602:	e7c0      	b.n	800a586 <tcp_receive+0x4de>
 800a604:	20010914 	.word	0x20010914
 800a608:	20010928 	.word	0x20010928
 800a60c:	20010944 	.word	0x20010944
 800a610:	080117dc 	.word	0x080117dc
 800a614:	0801190c 	.word	0x0801190c
 800a618:	08010198 	.word	0x08010198
 800a61c:	0801191c 	.word	0x0801191c
 800a620:	0801192c 	.word	0x0801192c
 800a624:	2001095e 	.word	0x2001095e
 800a628:	0801193c 	.word	0x0801193c
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800a62c:	4b81      	ldr	r3, [pc, #516]	; (800a834 <tcp_receive+0x78c>)
 800a62e:	eba0 000c 	sub.w	r0, r0, ip
 800a632:	8118      	strh	r0, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	8998      	ldrh	r0, [r3, #12]
 800a638:	f7fd f926 	bl	8007888 <lwip_htons>
 800a63c:	f010 0f02 	tst.w	r0, #2
 800a640:	d003      	beq.n	800a64a <tcp_receive+0x5a2>
                inseg.len -= 1;
 800a642:	4a7c      	ldr	r2, [pc, #496]	; (800a834 <tcp_receive+0x78c>)
 800a644:	8913      	ldrh	r3, [r2, #8]
 800a646:	3b01      	subs	r3, #1
 800a648:	8113      	strh	r3, [r2, #8]
              pbuf_realloc(inseg.p, inseg.len);
 800a64a:	4f7a      	ldr	r7, [pc, #488]	; (800a834 <tcp_receive+0x78c>)
 800a64c:	8939      	ldrh	r1, [r7, #8]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f7fe f872 	bl	8008738 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800a654:	893e      	ldrh	r6, [r7, #8]
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	8998      	ldrh	r0, [r3, #12]
 800a65a:	f7fd f915 	bl	8007888 <lwip_htons>
 800a65e:	f010 0303 	ands.w	r3, r0, #3
 800a662:	bf18      	it	ne
 800a664:	2301      	movne	r3, #1
 800a666:	4433      	add	r3, r6
 800a668:	b29b      	uxth	r3, r3
 800a66a:	4a73      	ldr	r2, [pc, #460]	; (800a838 <tcp_receive+0x790>)
 800a66c:	8013      	strh	r3, [r2, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800a66e:	4a73      	ldr	r2, [pc, #460]	; (800a83c <tcp_receive+0x794>)
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	4413      	add	r3, r2
 800a674:	68ea      	ldr	r2, [r5, #12]
 800a676:	6852      	ldr	r2, [r2, #4]
 800a678:	4293      	cmp	r3, r2
 800a67a:	f000 815c 	beq.w	800a936 <tcp_receive+0x88e>
 800a67e:	4b70      	ldr	r3, [pc, #448]	; (800a840 <tcp_receive+0x798>)
 800a680:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800a684:	496f      	ldr	r1, [pc, #444]	; (800a844 <tcp_receive+0x79c>)
 800a686:	4870      	ldr	r0, [pc, #448]	; (800a848 <tcp_receive+0x7a0>)
 800a688:	f004 fc34 	bl	800eef4 <iprintf>
 800a68c:	e153      	b.n	800a936 <tcp_receive+0x88e>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a68e:	4b6c      	ldr	r3, [pc, #432]	; (800a840 <tcp_receive+0x798>)
 800a690:	f240 6207 	movw	r2, #1543	; 0x607
 800a694:	496d      	ldr	r1, [pc, #436]	; (800a84c <tcp_receive+0x7a4>)
 800a696:	486c      	ldr	r0, [pc, #432]	; (800a848 <tcp_receive+0x7a0>)
 800a698:	f004 fc2c 	bl	800eef4 <iprintf>
 800a69c:	e156      	b.n	800a94c <tcp_receive+0x8a4>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a69e:	4643      	mov	r3, r8
 800a6a0:	f240 622b 	movw	r2, #1579	; 0x62b
 800a6a4:	4639      	mov	r1, r7
 800a6a6:	4868      	ldr	r0, [pc, #416]	; (800a848 <tcp_receive+0x7a0>)
 800a6a8:	f004 fc24 	bl	800eef4 <iprintf>
 800a6ac:	e03e      	b.n	800a72c <tcp_receive+0x684>
              recv_data = cseg->p;
 800a6ae:	4b68      	ldr	r3, [pc, #416]	; (800a850 <tcp_receive+0x7a8>)
 800a6b0:	6019      	str	r1, [r3, #0]
            cseg->p = NULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800a6b6:	68eb      	ldr	r3, [r5, #12]
 800a6b8:	8998      	ldrh	r0, [r3, #12]
 800a6ba:	f7fd f8e5 	bl	8007888 <lwip_htons>
 800a6be:	f010 0f01 	tst.w	r0, #1
 800a6c2:	d009      	beq.n	800a6d8 <tcp_receive+0x630>
            recv_flags |= TF_GOT_FIN;
 800a6c4:	4a63      	ldr	r2, [pc, #396]	; (800a854 <tcp_receive+0x7ac>)
 800a6c6:	7813      	ldrb	r3, [r2, #0]
 800a6c8:	f043 0320 	orr.w	r3, r3, #32
 800a6cc:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800a6ce:	7d23      	ldrb	r3, [r4, #20]
 800a6d0:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 800a6d2:	bf04      	itt	eq
 800a6d4:	2307      	moveq	r3, #7
 800a6d6:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 800a6dc:	4628      	mov	r0, r5
 800a6de:	f7fe fbcd 	bl	8008e7c <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800a6e2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a6e4:	2d00      	cmp	r5, #0
 800a6e6:	d03d      	beq.n	800a764 <tcp_receive+0x6bc>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800a6e8:	68ea      	ldr	r2, [r5, #12]
 800a6ea:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 800a6ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a6ee:	428b      	cmp	r3, r1
 800a6f0:	d138      	bne.n	800a764 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a6f2:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800a6f4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a6f8:	8990      	ldrh	r0, [r2, #12]
 800a6fa:	f7fd f8c5 	bl	8007888 <lwip_htons>
 800a6fe:	f010 0003 	ands.w	r0, r0, #3
 800a702:	bf18      	it	ne
 800a704:	2001      	movne	r0, #1
 800a706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a708:	4499      	add	r9, r3
 800a70a:	4448      	add	r0, r9
 800a70c:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a70e:	f8b4 9028 	ldrh.w	r9, [r4, #40]	; 0x28
 800a712:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800a716:	68eb      	ldr	r3, [r5, #12]
 800a718:	8998      	ldrh	r0, [r3, #12]
 800a71a:	f7fd f8b5 	bl	8007888 <lwip_htons>
 800a71e:	f010 0003 	ands.w	r0, r0, #3
 800a722:	bf18      	it	ne
 800a724:	2001      	movne	r0, #1
 800a726:	4450      	add	r0, sl
 800a728:	4581      	cmp	r9, r0
 800a72a:	d3b8      	bcc.n	800a69e <tcp_receive+0x5f6>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800a72c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 800a730:	68eb      	ldr	r3, [r5, #12]
 800a732:	8998      	ldrh	r0, [r3, #12]
 800a734:	f7fd f8a8 	bl	8007888 <lwip_htons>
 800a738:	f010 0003 	ands.w	r0, r0, #3
 800a73c:	bf18      	it	ne
 800a73e:	2001      	movne	r0, #1
 800a740:	4448      	add	r0, r9
 800a742:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a744:	1a18      	subs	r0, r3, r0
 800a746:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 800a748:	4620      	mov	r0, r4
 800a74a:	f7fe fb21 	bl	8008d90 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 800a74e:	6869      	ldr	r1, [r5, #4]
 800a750:	890b      	ldrh	r3, [r1, #8]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0af      	beq.n	800a6b6 <tcp_receive+0x60e>
            if (recv_data) {
 800a756:	4b3e      	ldr	r3, [pc, #248]	; (800a850 <tcp_receive+0x7a8>)
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0a7      	beq.n	800a6ae <tcp_receive+0x606>
              pbuf_cat(recv_data, cseg->p);
 800a75e:	f7fe f873 	bl	8008848 <pbuf_cat>
 800a762:	e7a6      	b.n	800a6b2 <tcp_receive+0x60a>
        tcp_ack(pcb);
 800a764:	8b63      	ldrh	r3, [r4, #26]
 800a766:	f013 0f01 	tst.w	r3, #1
 800a76a:	bf1a      	itte	ne
 800a76c:	f023 0301 	bicne.w	r3, r3, #1
 800a770:	f043 0302 	orrne.w	r3, r3, #2
 800a774:	f043 0301 	orreq.w	r3, r3, #1
 800a778:	8363      	strh	r3, [r4, #26]
 800a77a:	e54a      	b.n	800a212 <tcp_receive+0x16a>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800a77c:	482d      	ldr	r0, [pc, #180]	; (800a834 <tcp_receive+0x78c>)
 800a77e:	f7fe fb95 	bl	8008eac <tcp_seg_copy>
 800a782:	6760      	str	r0, [r4, #116]	; 0x74
 800a784:	e051      	b.n	800a82a <tcp_receive+0x782>
              if (inseg.len > next->len) {
 800a786:	4b2b      	ldr	r3, [pc, #172]	; (800a834 <tcp_receive+0x78c>)
 800a788:	891a      	ldrh	r2, [r3, #8]
 800a78a:	892b      	ldrh	r3, [r5, #8]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d94c      	bls.n	800a82a <tcp_receive+0x782>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a790:	4828      	ldr	r0, [pc, #160]	; (800a834 <tcp_receive+0x78c>)
 800a792:	f7fe fb8b 	bl	8008eac <tcp_seg_copy>
                if (cseg != NULL) {
 800a796:	4603      	mov	r3, r0
 800a798:	2800      	cmp	r0, #0
 800a79a:	d046      	beq.n	800a82a <tcp_receive+0x782>
                  if (prev != NULL) {
 800a79c:	b12e      	cbz	r6, 800a7aa <tcp_receive+0x702>
                    prev->next = cseg;
 800a79e:	6030      	str	r0, [r6, #0]
                  tcp_oos_insert_segment(cseg, next);
 800a7a0:	4629      	mov	r1, r5
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f7ff fc28 	bl	8009ff8 <tcp_oos_insert_segment>
 800a7a8:	e03f      	b.n	800a82a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a7aa:	6760      	str	r0, [r4, #116]	; 0x74
 800a7ac:	e7f8      	b.n	800a7a0 <tcp_receive+0x6f8>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800a7ae:	1a99      	subs	r1, r3, r2
 800a7b0:	2900      	cmp	r1, #0
 800a7b2:	db27      	blt.n	800a804 <tcp_receive+0x75c>
              if (next->next == NULL &&
 800a7b4:	6829      	ldr	r1, [r5, #0]
 800a7b6:	462e      	mov	r6, r5
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	d033      	beq.n	800a824 <tcp_receive+0x77c>
 800a7bc:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 800a7be:	68e8      	ldr	r0, [r5, #12]
 800a7c0:	6842      	ldr	r2, [r0, #4]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d0df      	beq.n	800a786 <tcp_receive+0x6de>
              if (prev == NULL) {
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	d0f1      	beq.n	800a7ae <tcp_receive+0x706>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800a7ca:	68f1      	ldr	r1, [r6, #12]
 800a7cc:	6849      	ldr	r1, [r1, #4]
 800a7ce:	1a79      	subs	r1, r7, r1
 800a7d0:	2900      	cmp	r1, #0
 800a7d2:	dbef      	blt.n	800a7b4 <tcp_receive+0x70c>
 800a7d4:	ebac 0102 	sub.w	r1, ip, r2
 800a7d8:	2900      	cmp	r1, #0
 800a7da:	dceb      	bgt.n	800a7b4 <tcp_receive+0x70c>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a7dc:	4815      	ldr	r0, [pc, #84]	; (800a834 <tcp_receive+0x78c>)
 800a7de:	f7fe fb65 	bl	8008eac <tcp_seg_copy>
                  if (cseg != NULL) {
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	b308      	cbz	r0, 800a82a <tcp_receive+0x782>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800a7e6:	68f3      	ldr	r3, [r6, #12]
 800a7e8:	6859      	ldr	r1, [r3, #4]
 800a7ea:	4b14      	ldr	r3, [pc, #80]	; (800a83c <tcp_receive+0x794>)
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	8933      	ldrh	r3, [r6, #8]
 800a7f0:	440b      	add	r3, r1
 800a7f2:	1a9b      	subs	r3, r3, r2
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	dc0e      	bgt.n	800a816 <tcp_receive+0x76e>
                    prev->next = cseg;
 800a7f8:	6037      	str	r7, [r6, #0]
                    tcp_oos_insert_segment(cseg, next);
 800a7fa:	4629      	mov	r1, r5
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff fbfb 	bl	8009ff8 <tcp_oos_insert_segment>
 800a802:	e012      	b.n	800a82a <tcp_receive+0x782>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800a804:	480b      	ldr	r0, [pc, #44]	; (800a834 <tcp_receive+0x78c>)
 800a806:	f7fe fb51 	bl	8008eac <tcp_seg_copy>
                  if (cseg != NULL) {
 800a80a:	b170      	cbz	r0, 800a82a <tcp_receive+0x782>
                    pcb->ooseq = cseg;
 800a80c:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800a80e:	4629      	mov	r1, r5
 800a810:	f7ff fbf2 	bl	8009ff8 <tcp_oos_insert_segment>
 800a814:	e009      	b.n	800a82a <tcp_receive+0x782>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800a816:	1a52      	subs	r2, r2, r1
 800a818:	b291      	uxth	r1, r2
 800a81a:	8131      	strh	r1, [r6, #8]
                      pbuf_realloc(prev->p, prev->len);
 800a81c:	6870      	ldr	r0, [r6, #4]
 800a81e:	f7fd ff8b 	bl	8008738 <pbuf_realloc>
 800a822:	e7e9      	b.n	800a7f8 <tcp_receive+0x750>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800a824:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 800a826:	2b00      	cmp	r3, #0
 800a828:	dc16      	bgt.n	800a858 <tcp_receive+0x7b0>
        tcp_send_empty_ack(pcb);
 800a82a:	4620      	mov	r0, r4
 800a82c:	f001 fec8 	bl	800c5c0 <tcp_send_empty_ack>
 800a830:	e4ef      	b.n	800a212 <tcp_receive+0x16a>
 800a832:	bf00      	nop
 800a834:	20010928 	.word	0x20010928
 800a838:	2001095e 	.word	0x2001095e
 800a83c:	20010944 	.word	0x20010944
 800a840:	080117dc 	.word	0x080117dc
 800a844:	08011974 	.word	0x08011974
 800a848:	08010198 	.word	0x08010198
 800a84c:	080119b0 	.word	0x080119b0
 800a850:	2001093c 	.word	0x2001093c
 800a854:	20010940 	.word	0x20010940
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800a858:	8980      	ldrh	r0, [r0, #12]
 800a85a:	f7fd f815 	bl	8007888 <lwip_htons>
 800a85e:	f010 0f01 	tst.w	r0, #1
 800a862:	d1e2      	bne.n	800a82a <tcp_receive+0x782>
                next->next = tcp_seg_copy(&inseg);
 800a864:	484d      	ldr	r0, [pc, #308]	; (800a99c <tcp_receive+0x8f4>)
 800a866:	f7fe fb21 	bl	8008eac <tcp_seg_copy>
 800a86a:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800a86c:	2800      	cmp	r0, #0
 800a86e:	d0dc      	beq.n	800a82a <tcp_receive+0x782>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800a870:	68eb      	ldr	r3, [r5, #12]
 800a872:	6859      	ldr	r1, [r3, #4]
 800a874:	4b4a      	ldr	r3, [pc, #296]	; (800a9a0 <tcp_receive+0x8f8>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	892a      	ldrh	r2, [r5, #8]
 800a87a:	440a      	add	r2, r1
 800a87c:	1ad2      	subs	r2, r2, r3
 800a87e:	2a00      	cmp	r2, #0
 800a880:	dc3c      	bgt.n	800a8fc <tcp_receive+0x854>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800a882:	4b48      	ldr	r3, [pc, #288]	; (800a9a4 <tcp_receive+0x8fc>)
 800a884:	881b      	ldrh	r3, [r3, #0]
 800a886:	4a46      	ldr	r2, [pc, #280]	; (800a9a0 <tcp_receive+0x8f8>)
 800a888:	6812      	ldr	r2, [r2, #0]
 800a88a:	4413      	add	r3, r2
 800a88c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a88e:	1a9b      	subs	r3, r3, r2
 800a890:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a892:	1a9b      	subs	r3, r3, r2
 800a894:	2b00      	cmp	r3, #0
 800a896:	ddc8      	ble.n	800a82a <tcp_receive+0x782>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	8998      	ldrh	r0, [r3, #12]
 800a89e:	f7fc fff3 	bl	8007888 <lwip_htons>
 800a8a2:	f010 0f01 	tst.w	r0, #1
 800a8a6:	d130      	bne.n	800a90a <tcp_receive+0x862>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800a8a8:	682a      	ldr	r2, [r5, #0]
 800a8aa:	4e3d      	ldr	r6, [pc, #244]	; (800a9a0 <tcp_receive+0x8f8>)
 800a8ac:	6831      	ldr	r1, [r6, #0]
 800a8ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a8b0:	1a5b      	subs	r3, r3, r1
 800a8b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8b4:	440b      	add	r3, r1
 800a8b6:	8113      	strh	r3, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800a8b8:	682b      	ldr	r3, [r5, #0]
 800a8ba:	8919      	ldrh	r1, [r3, #8]
 800a8bc:	6858      	ldr	r0, [r3, #4]
 800a8be:	f7fd ff3b 	bl	8008738 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800a8c2:	682b      	ldr	r3, [r5, #0]
 800a8c4:	891d      	ldrh	r5, [r3, #8]
 800a8c6:	68db      	ldr	r3, [r3, #12]
 800a8c8:	8998      	ldrh	r0, [r3, #12]
 800a8ca:	f7fc ffdd 	bl	8007888 <lwip_htons>
 800a8ce:	f010 0303 	ands.w	r3, r0, #3
 800a8d2:	bf18      	it	ne
 800a8d4:	2301      	movne	r3, #1
 800a8d6:	442b      	add	r3, r5
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	4a32      	ldr	r2, [pc, #200]	; (800a9a4 <tcp_receive+0x8fc>)
 800a8dc:	8013      	strh	r3, [r2, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800a8de:	6832      	ldr	r2, [r6, #0]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a8e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a8e6:	440a      	add	r2, r1
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d09e      	beq.n	800a82a <tcp_receive+0x782>
 800a8ec:	4b2e      	ldr	r3, [pc, #184]	; (800a9a8 <tcp_receive+0x900>)
 800a8ee:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800a8f2:	492e      	ldr	r1, [pc, #184]	; (800a9ac <tcp_receive+0x904>)
 800a8f4:	482e      	ldr	r0, [pc, #184]	; (800a9b0 <tcp_receive+0x908>)
 800a8f6:	f004 fafd 	bl	800eef4 <iprintf>
 800a8fa:	e796      	b.n	800a82a <tcp_receive+0x782>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800a8fc:	1a5b      	subs	r3, r3, r1
 800a8fe:	b299      	uxth	r1, r3
 800a900:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 800a902:	6868      	ldr	r0, [r5, #4]
 800a904:	f7fd ff18 	bl	8008738 <pbuf_realloc>
 800a908:	e7bb      	b.n	800a882 <tcp_receive+0x7da>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800a90a:	682b      	ldr	r3, [r5, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	899e      	ldrh	r6, [r3, #12]
 800a910:	4630      	mov	r0, r6
 800a912:	f7fc ffb9 	bl	8007888 <lwip_htons>
 800a916:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 800a91a:	f7fc ffb5 	bl	8007888 <lwip_htons>
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 800a926:	4306      	orrs	r6, r0
 800a928:	819e      	strh	r6, [r3, #12]
 800a92a:	e7bd      	b.n	800a8a8 <tcp_receive+0x800>
              next = next->next;
 800a92c:	2500      	movs	r5, #0
 800a92e:	e002      	b.n	800a936 <tcp_receive+0x88e>
            if (next &&
 800a930:	2b00      	cmp	r3, #0
 800a932:	f73f ae7b 	bgt.w	800a62c <tcp_receive+0x584>
            pcb->ooseq = next;
 800a936:	6765      	str	r5, [r4, #116]	; 0x74
        pcb->rcv_nxt = seqno + tcplen;
 800a938:	4b1a      	ldr	r3, [pc, #104]	; (800a9a4 <tcp_receive+0x8fc>)
 800a93a:	881a      	ldrh	r2, [r3, #0]
 800a93c:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <tcp_receive+0x8f8>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	4413      	add	r3, r2
 800a942:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800a944:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a946:	4293      	cmp	r3, r2
 800a948:	f4ff aea1 	bcc.w	800a68e <tcp_receive+0x5e6>
        pcb->rcv_wnd -= tcplen;
 800a94c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800a94e:	4a15      	ldr	r2, [pc, #84]	; (800a9a4 <tcp_receive+0x8fc>)
 800a950:	8812      	ldrh	r2, [r2, #0]
 800a952:	1a9b      	subs	r3, r3, r2
 800a954:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 800a956:	4620      	mov	r0, r4
 800a958:	f7fe fa1a 	bl	8008d90 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 800a95c:	4b0f      	ldr	r3, [pc, #60]	; (800a99c <tcp_receive+0x8f4>)
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	891a      	ldrh	r2, [r3, #8]
 800a962:	b122      	cbz	r2, 800a96e <tcp_receive+0x8c6>
          recv_data = inseg.p;
 800a964:	4a13      	ldr	r2, [pc, #76]	; (800a9b4 <tcp_receive+0x90c>)
 800a966:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 800a968:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <tcp_receive+0x8f4>)
 800a96a:	2200      	movs	r2, #0
 800a96c:	605a      	str	r2, [r3, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800a96e:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <tcp_receive+0x8f4>)
 800a970:	68db      	ldr	r3, [r3, #12]
 800a972:	8998      	ldrh	r0, [r3, #12]
 800a974:	f7fc ff88 	bl	8007888 <lwip_htons>
 800a978:	f010 0f01 	tst.w	r0, #1
 800a97c:	d004      	beq.n	800a988 <tcp_receive+0x8e0>
          recv_flags |= TF_GOT_FIN;
 800a97e:	4a0e      	ldr	r2, [pc, #56]	; (800a9b8 <tcp_receive+0x910>)
 800a980:	7813      	ldrb	r3, [r2, #0]
 800a982:	f043 0320 	orr.w	r3, r3, #32
 800a986:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 800a988:	6f65      	ldr	r5, [r4, #116]	; 0x74
 800a98a:	2d00      	cmp	r5, #0
 800a98c:	f43f aeea 	beq.w	800a764 <tcp_receive+0x6bc>
          seqno = pcb->ooseq->tcphdr->seqno;
 800a990:	4e03      	ldr	r6, [pc, #12]	; (800a9a0 <tcp_receive+0x8f8>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800a992:	f8df 8014 	ldr.w	r8, [pc, #20]	; 800a9a8 <tcp_receive+0x900>
 800a996:	4f09      	ldr	r7, [pc, #36]	; (800a9bc <tcp_receive+0x914>)
 800a998:	e6a6      	b.n	800a6e8 <tcp_receive+0x640>
 800a99a:	bf00      	nop
 800a99c:	20010928 	.word	0x20010928
 800a9a0:	20010944 	.word	0x20010944
 800a9a4:	2001095e 	.word	0x2001095e
 800a9a8:	080117dc 	.word	0x080117dc
 800a9ac:	0801193c 	.word	0x0801193c
 800a9b0:	08010198 	.word	0x08010198
 800a9b4:	2001093c 	.word	0x2001093c
 800a9b8:	20010940 	.word	0x20010940
 800a9bc:	080119d0 	.word	0x080119d0

0800a9c0 <tcp_input>:
{
 800a9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a9c4:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	b158      	cbz	r0, 800a9e2 <tcp_input+0x22>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a9ca:	686a      	ldr	r2, [r5, #4]
 800a9cc:	4b77      	ldr	r3, [pc, #476]	; (800abac <tcp_input+0x1ec>)
 800a9ce:	601a      	str	r2, [r3, #0]
  if (p->len < TCP_HLEN) {
 800a9d0:	896b      	ldrh	r3, [r5, #10]
 800a9d2:	2b13      	cmp	r3, #19
 800a9d4:	d80c      	bhi.n	800a9f0 <tcp_input+0x30>
  pbuf_free(p);
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	f7fd fd96 	bl	8008508 <pbuf_free>
}
 800a9dc:	b005      	add	sp, #20
 800a9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a9e2:	4b73      	ldr	r3, [pc, #460]	; (800abb0 <tcp_input+0x1f0>)
 800a9e4:	2283      	movs	r2, #131	; 0x83
 800a9e6:	4973      	ldr	r1, [pc, #460]	; (800abb4 <tcp_input+0x1f4>)
 800a9e8:	4873      	ldr	r0, [pc, #460]	; (800abb8 <tcp_input+0x1f8>)
 800a9ea:	f004 fa83 	bl	800eef4 <iprintf>
 800a9ee:	e7ec      	b.n	800a9ca <tcp_input+0xa>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a9f0:	4b72      	ldr	r3, [pc, #456]	; (800abbc <tcp_input+0x1fc>)
 800a9f2:	6819      	ldr	r1, [r3, #0]
 800a9f4:	6958      	ldr	r0, [r3, #20]
 800a9f6:	f003 fa96 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800a9fa:	2800      	cmp	r0, #0
 800a9fc:	d1eb      	bne.n	800a9d6 <tcp_input+0x16>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a9fe:	4b6f      	ldr	r3, [pc, #444]	; (800abbc <tcp_input+0x1fc>)
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800aa06:	2be0      	cmp	r3, #224	; 0xe0
 800aa08:	d0e5      	beq.n	800a9d6 <tcp_input+0x16>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800aa0a:	4b68      	ldr	r3, [pc, #416]	; (800abac <tcp_input+0x1ec>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	8998      	ldrh	r0, [r3, #12]
 800aa10:	f7fc ff3a 	bl	8007888 <lwip_htons>
 800aa14:	0a81      	lsrs	r1, r0, #10
 800aa16:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800aa1a:	2913      	cmp	r1, #19
 800aa1c:	d9db      	bls.n	800a9d6 <tcp_input+0x16>
 800aa1e:	b28b      	uxth	r3, r1
 800aa20:	892a      	ldrh	r2, [r5, #8]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d3d7      	bcc.n	800a9d6 <tcp_input+0x16>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800aa26:	f1a3 0214 	sub.w	r2, r3, #20
 800aa2a:	b292      	uxth	r2, r2
 800aa2c:	4864      	ldr	r0, [pc, #400]	; (800abc0 <tcp_input+0x200>)
 800aa2e:	8002      	strh	r2, [r0, #0]
  tcphdr_opt2 = NULL;
 800aa30:	4864      	ldr	r0, [pc, #400]	; (800abc4 <tcp_input+0x204>)
 800aa32:	2400      	movs	r4, #0
 800aa34:	6004      	str	r4, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 800aa36:	8968      	ldrh	r0, [r5, #10]
 800aa38:	4298      	cmp	r0, r3
 800aa3a:	d22e      	bcs.n	800aa9a <tcp_input+0xda>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d068      	beq.n	800ab14 <tcp_input+0x154>
    pbuf_remove_header(p, TCP_HLEN);
 800aa42:	2114      	movs	r1, #20
 800aa44:	4628      	mov	r0, r5
 800aa46:	f7fd fd1f 	bl	8008488 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800aa4a:	896c      	ldrh	r4, [r5, #10]
 800aa4c:	4b5e      	ldr	r3, [pc, #376]	; (800abc8 <tcp_input+0x208>)
 800aa4e:	801c      	strh	r4, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800aa50:	4b5b      	ldr	r3, [pc, #364]	; (800abc0 <tcp_input+0x200>)
 800aa52:	881f      	ldrh	r7, [r3, #0]
 800aa54:	1b3e      	subs	r6, r7, r4
 800aa56:	b2b6      	uxth	r6, r6
    pbuf_remove_header(p, tcphdr_opt1len);
 800aa58:	4621      	mov	r1, r4
 800aa5a:	4628      	mov	r0, r5
 800aa5c:	f7fd fd14 	bl	8008488 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800aa60:	6828      	ldr	r0, [r5, #0]
 800aa62:	8943      	ldrh	r3, [r0, #10]
 800aa64:	42b3      	cmp	r3, r6
 800aa66:	d3b6      	bcc.n	800a9d6 <tcp_input+0x16>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800aa68:	6842      	ldr	r2, [r0, #4]
 800aa6a:	4b56      	ldr	r3, [pc, #344]	; (800abc4 <tcp_input+0x204>)
 800aa6c:	601a      	str	r2, [r3, #0]
    pbuf_remove_header(p->next, opt2len);
 800aa6e:	4631      	mov	r1, r6
 800aa70:	f7fd fd0a 	bl	8008488 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800aa74:	892b      	ldrh	r3, [r5, #8]
 800aa76:	441c      	add	r4, r3
 800aa78:	1be4      	subs	r4, r4, r7
 800aa7a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800aa7c:	896b      	ldrh	r3, [r5, #10]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d14f      	bne.n	800ab22 <tcp_input+0x162>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800aa82:	682b      	ldr	r3, [r5, #0]
 800aa84:	892a      	ldrh	r2, [r5, #8]
 800aa86:	891b      	ldrh	r3, [r3, #8]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d00b      	beq.n	800aaa4 <tcp_input+0xe4>
 800aa8c:	4b48      	ldr	r3, [pc, #288]	; (800abb0 <tcp_input+0x1f0>)
 800aa8e:	22e0      	movs	r2, #224	; 0xe0
 800aa90:	494e      	ldr	r1, [pc, #312]	; (800abcc <tcp_input+0x20c>)
 800aa92:	4849      	ldr	r0, [pc, #292]	; (800abb8 <tcp_input+0x1f8>)
 800aa94:	f004 fa2e 	bl	800eef4 <iprintf>
 800aa98:	e004      	b.n	800aaa4 <tcp_input+0xe4>
    tcphdr_opt1len = tcphdr_optlen;
 800aa9a:	4b4b      	ldr	r3, [pc, #300]	; (800abc8 <tcp_input+0x208>)
 800aa9c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f7fd fcf2 	bl	8008488 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800aaa4:	4c41      	ldr	r4, [pc, #260]	; (800abac <tcp_input+0x1ec>)
 800aaa6:	6826      	ldr	r6, [r4, #0]
 800aaa8:	8830      	ldrh	r0, [r6, #0]
 800aaaa:	f7fc feed 	bl	8007888 <lwip_htons>
 800aaae:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800aab0:	6826      	ldr	r6, [r4, #0]
 800aab2:	8870      	ldrh	r0, [r6, #2]
 800aab4:	f7fc fee8 	bl	8007888 <lwip_htons>
 800aab8:	8070      	strh	r0, [r6, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800aaba:	6826      	ldr	r6, [r4, #0]
 800aabc:	6870      	ldr	r0, [r6, #4]
 800aabe:	f7fc fee8 	bl	8007892 <lwip_htonl>
 800aac2:	6070      	str	r0, [r6, #4]
 800aac4:	4b42      	ldr	r3, [pc, #264]	; (800abd0 <tcp_input+0x210>)
 800aac6:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800aac8:	6826      	ldr	r6, [r4, #0]
 800aaca:	68b0      	ldr	r0, [r6, #8]
 800aacc:	f7fc fee1 	bl	8007892 <lwip_htonl>
 800aad0:	60b0      	str	r0, [r6, #8]
 800aad2:	4b40      	ldr	r3, [pc, #256]	; (800abd4 <tcp_input+0x214>)
 800aad4:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800aad6:	6826      	ldr	r6, [r4, #0]
 800aad8:	89f0      	ldrh	r0, [r6, #14]
 800aada:	f7fc fed5 	bl	8007888 <lwip_htons>
 800aade:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 800aae0:	6823      	ldr	r3, [r4, #0]
 800aae2:	8998      	ldrh	r0, [r3, #12]
 800aae4:	f7fc fed0 	bl	8007888 <lwip_htons>
 800aae8:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 800aaec:	4b3a      	ldr	r3, [pc, #232]	; (800abd8 <tcp_input+0x218>)
 800aaee:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800aaf0:	892a      	ldrh	r2, [r5, #8]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800aaf2:	f010 0f03 	tst.w	r0, #3
 800aaf6:	d11b      	bne.n	800ab30 <tcp_input+0x170>
  tcplen = p->tot_len;
 800aaf8:	4b38      	ldr	r3, [pc, #224]	; (800abdc <tcp_input+0x21c>)
 800aafa:	801a      	strh	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800aafc:	4b38      	ldr	r3, [pc, #224]	; (800abe0 <tcp_input+0x220>)
 800aafe:	681c      	ldr	r4, [r3, #0]
 800ab00:	2c00      	cmp	r4, #0
 800ab02:	f000 8563 	beq.w	800b5cc <tcp_input+0xc0c>
  prev = NULL;
 800ab06:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab08:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800abb0 <tcp_input+0x1f0>
 800ab0c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800abf4 <tcp_input+0x234>
 800ab10:	4f29      	ldr	r7, [pc, #164]	; (800abb8 <tcp_input+0x1f8>)
 800ab12:	e035      	b.n	800ab80 <tcp_input+0x1c0>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ab14:	4b26      	ldr	r3, [pc, #152]	; (800abb0 <tcp_input+0x1f0>)
 800ab16:	22c2      	movs	r2, #194	; 0xc2
 800ab18:	4932      	ldr	r1, [pc, #200]	; (800abe4 <tcp_input+0x224>)
 800ab1a:	4827      	ldr	r0, [pc, #156]	; (800abb8 <tcp_input+0x1f8>)
 800ab1c:	f004 f9ea 	bl	800eef4 <iprintf>
 800ab20:	e78f      	b.n	800aa42 <tcp_input+0x82>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ab22:	4b23      	ldr	r3, [pc, #140]	; (800abb0 <tcp_input+0x1f0>)
 800ab24:	22df      	movs	r2, #223	; 0xdf
 800ab26:	4930      	ldr	r1, [pc, #192]	; (800abe8 <tcp_input+0x228>)
 800ab28:	4823      	ldr	r0, [pc, #140]	; (800abb8 <tcp_input+0x1f8>)
 800ab2a:	f004 f9e3 	bl	800eef4 <iprintf>
 800ab2e:	e7a8      	b.n	800aa82 <tcp_input+0xc2>
    tcplen++;
 800ab30:	1c53      	adds	r3, r2, #1
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	4929      	ldr	r1, [pc, #164]	; (800abdc <tcp_input+0x21c>)
 800ab36:	800b      	strh	r3, [r1, #0]
    if (tcplen < p->tot_len) {
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d9df      	bls.n	800aafc <tcp_input+0x13c>
 800ab3c:	e74b      	b.n	800a9d6 <tcp_input+0x16>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab3e:	4643      	mov	r3, r8
 800ab40:	22fb      	movs	r2, #251	; 0xfb
 800ab42:	4649      	mov	r1, r9
 800ab44:	4638      	mov	r0, r7
 800ab46:	f004 f9d5 	bl	800eef4 <iprintf>
 800ab4a:	e01c      	b.n	800ab86 <tcp_input+0x1c6>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab4c:	4643      	mov	r3, r8
 800ab4e:	22fc      	movs	r2, #252	; 0xfc
 800ab50:	4926      	ldr	r1, [pc, #152]	; (800abec <tcp_input+0x22c>)
 800ab52:	4638      	mov	r0, r7
 800ab54:	f004 f9ce 	bl	800eef4 <iprintf>
 800ab58:	e018      	b.n	800ab8c <tcp_input+0x1cc>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab5a:	4643      	mov	r3, r8
 800ab5c:	22fd      	movs	r2, #253	; 0xfd
 800ab5e:	4924      	ldr	r1, [pc, #144]	; (800abf0 <tcp_input+0x230>)
 800ab60:	4638      	mov	r0, r7
 800ab62:	f004 f9c7 	bl	800eef4 <iprintf>
 800ab66:	e014      	b.n	800ab92 <tcp_input+0x1d2>
    if (pcb->remote_port == tcphdr->src &&
 800ab68:	4b10      	ldr	r3, [pc, #64]	; (800abac <tcp_input+0x1ec>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	8b21      	ldrh	r1, [r4, #24]
 800ab6e:	881a      	ldrh	r2, [r3, #0]
 800ab70:	4291      	cmp	r1, r2
 800ab72:	d041      	beq.n	800abf8 <tcp_input+0x238>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ab74:	68e3      	ldr	r3, [r4, #12]
 800ab76:	4626      	mov	r6, r4
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f000 8527 	beq.w	800b5cc <tcp_input+0xc0c>
 800ab7e:	461c      	mov	r4, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ab80:	7d23      	ldrb	r3, [r4, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0db      	beq.n	800ab3e <tcp_input+0x17e>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ab86:	7d23      	ldrb	r3, [r4, #20]
 800ab88:	2b0a      	cmp	r3, #10
 800ab8a:	d0df      	beq.n	800ab4c <tcp_input+0x18c>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ab8c:	7d23      	ldrb	r3, [r4, #20]
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d0e3      	beq.n	800ab5a <tcp_input+0x19a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ab92:	7a22      	ldrb	r2, [r4, #8]
 800ab94:	2a00      	cmp	r2, #0
 800ab96:	d0e7      	beq.n	800ab68 <tcp_input+0x1a8>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ab98:	4b08      	ldr	r3, [pc, #32]	; (800abbc <tcp_input+0x1fc>)
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aba0:	3301      	adds	r3, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d0df      	beq.n	800ab68 <tcp_input+0x1a8>
 800aba8:	e7e4      	b.n	800ab74 <tcp_input+0x1b4>
 800abaa:	bf00      	nop
 800abac:	20010950 	.word	0x20010950
 800abb0:	080117dc 	.word	0x080117dc
 800abb4:	080119f8 	.word	0x080119f8
 800abb8:	08010198 	.word	0x08010198
 800abbc:	2000aff0 	.word	0x2000aff0
 800abc0:	2001095c 	.word	0x2001095c
 800abc4:	20010958 	.word	0x20010958
 800abc8:	20010954 	.word	0x20010954
 800abcc:	08011a2c 	.word	0x08011a2c
 800abd0:	20010944 	.word	0x20010944
 800abd4:	20010920 	.word	0x20010920
 800abd8:	20010924 	.word	0x20010924
 800abdc:	2001095e 	.word	0x2001095e
 800abe0:	20010904 	.word	0x20010904
 800abe4:	08011a10 	.word	0x08011a10
 800abe8:	08011a20 	.word	0x08011a20
 800abec:	08011a74 	.word	0x08011a74
 800abf0:	08011aa0 	.word	0x08011aa0
 800abf4:	08011a4c 	.word	0x08011a4c
    if (pcb->remote_port == tcphdr->src &&
 800abf8:	8ae2      	ldrh	r2, [r4, #22]
 800abfa:	885b      	ldrh	r3, [r3, #2]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	d1b9      	bne.n	800ab74 <tcp_input+0x1b4>
        pcb->local_port == tcphdr->dest &&
 800ac00:	6862      	ldr	r2, [r4, #4]
 800ac02:	4b8f      	ldr	r3, [pc, #572]	; (800ae40 <tcp_input+0x480>)
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d1b4      	bne.n	800ab74 <tcp_input+0x1b4>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ac0a:	6822      	ldr	r2, [r4, #0]
 800ac0c:	4b8c      	ldr	r3, [pc, #560]	; (800ae40 <tcp_input+0x480>)
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d1af      	bne.n	800ab74 <tcp_input+0x1b4>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ac14:	68e3      	ldr	r3, [r4, #12]
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	d04d      	beq.n	800acb6 <tcp_input+0x2f6>
      if (prev != NULL) {
 800ac1a:	b146      	cbz	r6, 800ac2e <tcp_input+0x26e>
        prev->next = pcb->next;
 800ac1c:	68e3      	ldr	r3, [r4, #12]
 800ac1e:	60f3      	str	r3, [r6, #12]
        pcb->next = tcp_active_pcbs;
 800ac20:	4b88      	ldr	r3, [pc, #544]	; (800ae44 <tcp_input+0x484>)
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	60e2      	str	r2, [r4, #12]
        tcp_active_pcbs = pcb;
 800ac26:	601c      	str	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ac28:	68e3      	ldr	r3, [r4, #12]
 800ac2a:	42a3      	cmp	r3, r4
 800ac2c:	d04d      	beq.n	800acca <tcp_input+0x30a>
    inseg.next = NULL;
 800ac2e:	4a86      	ldr	r2, [pc, #536]	; (800ae48 <tcp_input+0x488>)
 800ac30:	2300      	movs	r3, #0
 800ac32:	6013      	str	r3, [r2, #0]
    inseg.len = p->tot_len;
 800ac34:	8929      	ldrh	r1, [r5, #8]
 800ac36:	8111      	strh	r1, [r2, #8]
    inseg.p = p;
 800ac38:	6055      	str	r5, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ac3a:	4984      	ldr	r1, [pc, #528]	; (800ae4c <tcp_input+0x48c>)
 800ac3c:	6809      	ldr	r1, [r1, #0]
 800ac3e:	60d1      	str	r1, [r2, #12]
    recv_data = NULL;
 800ac40:	4a83      	ldr	r2, [pc, #524]	; (800ae50 <tcp_input+0x490>)
 800ac42:	6013      	str	r3, [r2, #0]
    recv_flags = 0;
 800ac44:	4a83      	ldr	r2, [pc, #524]	; (800ae54 <tcp_input+0x494>)
 800ac46:	7013      	strb	r3, [r2, #0]
    recv_acked = 0;
 800ac48:	4a83      	ldr	r2, [pc, #524]	; (800ae58 <tcp_input+0x498>)
 800ac4a:	8013      	strh	r3, [r2, #0]
    if (flags & TCP_PSH) {
 800ac4c:	4b83      	ldr	r3, [pc, #524]	; (800ae5c <tcp_input+0x49c>)
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	f013 0f08 	tst.w	r3, #8
 800ac54:	f040 817c 	bne.w	800af50 <tcp_input+0x590>
    if (pcb->refused_data != NULL) {
 800ac58:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac5a:	b16b      	cbz	r3, 800ac78 <tcp_input+0x2b8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f7fe fd7b 	bl	8009758 <tcp_process_refused_data>
 800ac62:	f110 0f0d 	cmn.w	r0, #13
 800ac66:	f000 8178 	beq.w	800af5a <tcp_input+0x59a>
 800ac6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ac6c:	b123      	cbz	r3, 800ac78 <tcp_input+0x2b8>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ac6e:	4b7c      	ldr	r3, [pc, #496]	; (800ae60 <tcp_input+0x4a0>)
 800ac70:	881b      	ldrh	r3, [r3, #0]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f040 8171 	bne.w	800af5a <tcp_input+0x59a>
    tcp_input_pcb = pcb;
 800ac78:	4b7a      	ldr	r3, [pc, #488]	; (800ae64 <tcp_input+0x4a4>)
 800ac7a:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800ac7c:	4b77      	ldr	r3, [pc, #476]	; (800ae5c <tcp_input+0x49c>)
 800ac7e:	781b      	ldrb	r3, [r3, #0]
 800ac80:	f013 0f04 	tst.w	r3, #4
 800ac84:	f000 81aa 	beq.w	800afdc <tcp_input+0x61c>
    if (pcb->state == SYN_SENT) {
 800ac88:	7d21      	ldrb	r1, [r4, #20]
 800ac8a:	2902      	cmp	r1, #2
 800ac8c:	f000 816b 	beq.w	800af66 <tcp_input+0x5a6>
      if (seqno == pcb->rcv_nxt) {
 800ac90:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800ac92:	4b75      	ldr	r3, [pc, #468]	; (800ae68 <tcp_input+0x4a8>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	429a      	cmp	r2, r3
 800ac98:	f000 818e 	beq.w	800afb8 <tcp_input+0x5f8>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ac9c:	1a9b      	subs	r3, r3, r2
 800ac9e:	f100 8167 	bmi.w	800af70 <tcp_input+0x5b0>
 800aca2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f300 8162 	bgt.w	800af70 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800acac:	8b63      	ldrh	r3, [r4, #26]
 800acae:	f043 0302 	orr.w	r3, r3, #2
 800acb2:	8363      	strh	r3, [r4, #26]
    if (acceptable) {
 800acb4:	e15c      	b.n	800af70 <tcp_input+0x5b0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800acb6:	4b6d      	ldr	r3, [pc, #436]	; (800ae6c <tcp_input+0x4ac>)
 800acb8:	f240 120d 	movw	r2, #269	; 0x10d
 800acbc:	496c      	ldr	r1, [pc, #432]	; (800ae70 <tcp_input+0x4b0>)
 800acbe:	486d      	ldr	r0, [pc, #436]	; (800ae74 <tcp_input+0x4b4>)
 800acc0:	f004 f918 	bl	800eef4 <iprintf>
      if (prev != NULL) {
 800acc4:	2e00      	cmp	r6, #0
 800acc6:	d1a9      	bne.n	800ac1c <tcp_input+0x25c>
 800acc8:	e7ae      	b.n	800ac28 <tcp_input+0x268>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800acca:	4b68      	ldr	r3, [pc, #416]	; (800ae6c <tcp_input+0x4ac>)
 800accc:	f240 1215 	movw	r2, #277	; 0x115
 800acd0:	4969      	ldr	r1, [pc, #420]	; (800ae78 <tcp_input+0x4b8>)
 800acd2:	4868      	ldr	r0, [pc, #416]	; (800ae74 <tcp_input+0x4b4>)
 800acd4:	f004 f90e 	bl	800eef4 <iprintf>
 800acd8:	e7a9      	b.n	800ac2e <tcp_input+0x26e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800acda:	4643      	mov	r3, r8
 800acdc:	f240 121f 	movw	r2, #287	; 0x11f
 800ace0:	4639      	mov	r1, r7
 800ace2:	4630      	mov	r0, r6
 800ace4:	f004 f906 	bl	800eef4 <iprintf>
 800ace8:	e00b      	b.n	800ad02 <tcp_input+0x342>
      if (pcb->remote_port == tcphdr->src &&
 800acea:	4b58      	ldr	r3, [pc, #352]	; (800ae4c <tcp_input+0x48c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	8819      	ldrh	r1, [r3, #0]
 800acf0:	8b22      	ldrh	r2, [r4, #24]
 800acf2:	428a      	cmp	r2, r1
 800acf4:	d011      	beq.n	800ad1a <tcp_input+0x35a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800acf6:	68e4      	ldr	r4, [r4, #12]
 800acf8:	2c00      	cmp	r4, #0
 800acfa:	d051      	beq.n	800ada0 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800acfc:	7d23      	ldrb	r3, [r4, #20]
 800acfe:	2b0a      	cmp	r3, #10
 800ad00:	d1eb      	bne.n	800acda <tcp_input+0x31a>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad02:	7a22      	ldrb	r2, [r4, #8]
 800ad04:	2a00      	cmp	r2, #0
 800ad06:	d0f0      	beq.n	800acea <tcp_input+0x32a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ad08:	4b4d      	ldr	r3, [pc, #308]	; (800ae40 <tcp_input+0x480>)
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ad10:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d0e8      	beq.n	800acea <tcp_input+0x32a>
 800ad18:	e7ed      	b.n	800acf6 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800ad1a:	8858      	ldrh	r0, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800ad1c:	8ae3      	ldrh	r3, [r4, #22]
 800ad1e:	4283      	cmp	r3, r0
 800ad20:	d1e9      	bne.n	800acf6 <tcp_input+0x336>
          pcb->local_port == tcphdr->dest &&
 800ad22:	6862      	ldr	r2, [r4, #4]
 800ad24:	4b46      	ldr	r3, [pc, #280]	; (800ae40 <tcp_input+0x480>)
 800ad26:	691b      	ldr	r3, [r3, #16]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d1e4      	bne.n	800acf6 <tcp_input+0x336>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ad2c:	6822      	ldr	r2, [r4, #0]
 800ad2e:	4b44      	ldr	r3, [pc, #272]	; (800ae40 <tcp_input+0x480>)
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d1df      	bne.n	800acf6 <tcp_input+0x336>
  if (flags & TCP_RST) {
 800ad36:	4b49      	ldr	r3, [pc, #292]	; (800ae5c <tcp_input+0x49c>)
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	f013 0f04 	tst.w	r3, #4
 800ad3e:	d10e      	bne.n	800ad5e <tcp_input+0x39e>
  if (flags & TCP_SYN) {
 800ad40:	f013 0f02 	tst.w	r3, #2
 800ad44:	d01d      	beq.n	800ad82 <tcp_input+0x3c2>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ad46:	4b48      	ldr	r3, [pc, #288]	; (800ae68 <tcp_input+0x4a8>)
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	d403      	bmi.n	800ad58 <tcp_input+0x398>
 800ad50:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 800ad52:	1b9b      	subs	r3, r3, r6
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	dd06      	ble.n	800ad66 <tcp_input+0x3a6>
  if ((tcplen > 0)) {
 800ad58:	4b41      	ldr	r3, [pc, #260]	; (800ae60 <tcp_input+0x4a0>)
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	b9c3      	cbnz	r3, 800ad90 <tcp_input+0x3d0>
        pbuf_free(p);
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f7fd fbd2 	bl	8008508 <pbuf_free>
        return;
 800ad64:	e63a      	b.n	800a9dc <tcp_input+0x1c>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ad66:	4b45      	ldr	r3, [pc, #276]	; (800ae7c <tcp_input+0x4bc>)
 800ad68:	4e3d      	ldr	r6, [pc, #244]	; (800ae60 <tcp_input+0x4a0>)
 800ad6a:	8836      	ldrh	r6, [r6, #0]
 800ad6c:	9102      	str	r1, [sp, #8]
 800ad6e:	9001      	str	r0, [sp, #4]
 800ad70:	1f19      	subs	r1, r3, #4
 800ad72:	9100      	str	r1, [sp, #0]
 800ad74:	4432      	add	r2, r6
 800ad76:	4942      	ldr	r1, [pc, #264]	; (800ae80 <tcp_input+0x4c0>)
 800ad78:	6809      	ldr	r1, [r1, #0]
 800ad7a:	4620      	mov	r0, r4
 800ad7c:	f001 fbd8 	bl	800c530 <tcp_rst>
      return;
 800ad80:	e7ed      	b.n	800ad5e <tcp_input+0x39e>
  } else if (flags & TCP_FIN) {
 800ad82:	f013 0f01 	tst.w	r3, #1
 800ad86:	d0e7      	beq.n	800ad58 <tcp_input+0x398>
    pcb->tmr = tcp_ticks;
 800ad88:	4b3e      	ldr	r3, [pc, #248]	; (800ae84 <tcp_input+0x4c4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	6223      	str	r3, [r4, #32]
 800ad8e:	e7e3      	b.n	800ad58 <tcp_input+0x398>
    tcp_ack_now(pcb);
 800ad90:	8b63      	ldrh	r3, [r4, #26]
 800ad92:	f043 0302 	orr.w	r3, r3, #2
 800ad96:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800ad98:	4620      	mov	r0, r4
 800ad9a:	f001 fc4b 	bl	800c634 <tcp_output>
 800ad9e:	e7de      	b.n	800ad5e <tcp_input+0x39e>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ada0:	4b39      	ldr	r3, [pc, #228]	; (800ae88 <tcp_input+0x4c8>)
 800ada2:	f8d3 c000 	ldr.w	ip, [r3]
 800ada6:	f1bc 0f00 	cmp.w	ip, #0
 800adaa:	f000 8402 	beq.w	800b5b2 <tcp_input+0xbf2>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800adae:	4b24      	ldr	r3, [pc, #144]	; (800ae40 <tcp_input+0x480>)
 800adb0:	685e      	ldr	r6, [r3, #4]
      if (lpcb->local_port == tcphdr->dest) {
 800adb2:	4a26      	ldr	r2, [pc, #152]	; (800ae4c <tcp_input+0x48c>)
 800adb4:	6810      	ldr	r0, [r2, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800adb6:	695f      	ldr	r7, [r3, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800adb8:	4664      	mov	r4, ip
    prev = NULL;
 800adba:	2100      	movs	r1, #0
 800adbc:	e009      	b.n	800add2 <tcp_input+0x412>
      if (lpcb->local_port == tcphdr->dest) {
 800adbe:	8ae2      	ldrh	r2, [r4, #22]
 800adc0:	8843      	ldrh	r3, [r0, #2]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d00f      	beq.n	800ade6 <tcp_input+0x426>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800adc6:	68e3      	ldr	r3, [r4, #12]
 800adc8:	4621      	mov	r1, r4
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f000 83f1 	beq.w	800b5b2 <tcp_input+0xbf2>
 800add0:	461c      	mov	r4, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800add2:	7a22      	ldrb	r2, [r4, #8]
 800add4:	2a00      	cmp	r2, #0
 800add6:	d0f2      	beq.n	800adbe <tcp_input+0x3fe>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800add8:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
 800addc:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d0ec      	beq.n	800adbe <tcp_input+0x3fe>
 800ade4:	e7ef      	b.n	800adc6 <tcp_input+0x406>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	42bb      	cmp	r3, r7
 800adea:	d001      	beq.n	800adf0 <tcp_input+0x430>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800adec:	2b00      	cmp	r3, #0
 800adee:	d1ea      	bne.n	800adc6 <tcp_input+0x406>
      if (prev != NULL) {
 800adf0:	b129      	cbz	r1, 800adfe <tcp_input+0x43e>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800adf2:	68e3      	ldr	r3, [r4, #12]
 800adf4:	60cb      	str	r3, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800adf6:	f8c4 c00c 	str.w	ip, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800adfa:	4b23      	ldr	r3, [pc, #140]	; (800ae88 <tcp_input+0x4c8>)
 800adfc:	601c      	str	r4, [r3, #0]
  if (flags & TCP_RST) {
 800adfe:	4b17      	ldr	r3, [pc, #92]	; (800ae5c <tcp_input+0x49c>)
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	f013 0f04 	tst.w	r3, #4
 800ae06:	d105      	bne.n	800ae14 <tcp_input+0x454>
  if (flags & TCP_ACK) {
 800ae08:	f013 0f10 	tst.w	r3, #16
 800ae0c:	d106      	bne.n	800ae1c <tcp_input+0x45c>
  } else if (flags & TCP_SYN) {
 800ae0e:	f013 0f02 	tst.w	r3, #2
 800ae12:	d13b      	bne.n	800ae8c <tcp_input+0x4cc>
      pbuf_free(p);
 800ae14:	4628      	mov	r0, r5
 800ae16:	f7fd fb77 	bl	8008508 <pbuf_free>
      return;
 800ae1a:	e5df      	b.n	800a9dc <tcp_input+0x1c>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ae1c:	4b17      	ldr	r3, [pc, #92]	; (800ae7c <tcp_input+0x4bc>)
 800ae1e:	4a10      	ldr	r2, [pc, #64]	; (800ae60 <tcp_input+0x4a0>)
 800ae20:	8811      	ldrh	r1, [r2, #0]
 800ae22:	4a11      	ldr	r2, [pc, #68]	; (800ae68 <tcp_input+0x4a8>)
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	8806      	ldrh	r6, [r0, #0]
 800ae28:	9602      	str	r6, [sp, #8]
 800ae2a:	8840      	ldrh	r0, [r0, #2]
 800ae2c:	9001      	str	r0, [sp, #4]
 800ae2e:	1f18      	subs	r0, r3, #4
 800ae30:	9000      	str	r0, [sp, #0]
 800ae32:	440a      	add	r2, r1
 800ae34:	4912      	ldr	r1, [pc, #72]	; (800ae80 <tcp_input+0x4c0>)
 800ae36:	6809      	ldr	r1, [r1, #0]
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f001 fb79 	bl	800c530 <tcp_rst>
 800ae3e:	e7e9      	b.n	800ae14 <tcp_input+0x454>
 800ae40:	2000aff0 	.word	0x2000aff0
 800ae44:	20010904 	.word	0x20010904
 800ae48:	20010928 	.word	0x20010928
 800ae4c:	20010950 	.word	0x20010950
 800ae50:	2001093c 	.word	0x2001093c
 800ae54:	20010940 	.word	0x20010940
 800ae58:	20010938 	.word	0x20010938
 800ae5c:	20010924 	.word	0x20010924
 800ae60:	2001095e 	.word	0x2001095e
 800ae64:	20010948 	.word	0x20010948
 800ae68:	20010944 	.word	0x20010944
 800ae6c:	080117dc 	.word	0x080117dc
 800ae70:	08011ac8 	.word	0x08011ac8
 800ae74:	08010198 	.word	0x08010198
 800ae78:	08011af4 	.word	0x08011af4
 800ae7c:	2000b004 	.word	0x2000b004
 800ae80:	20010920 	.word	0x20010920
 800ae84:	20010914 	.word	0x20010914
 800ae88:	20010910 	.word	0x20010910
    npcb = tcp_alloc(pcb->prio);
 800ae8c:	7d60      	ldrb	r0, [r4, #21]
 800ae8e:	f7fe faad 	bl	80093ec <tcp_alloc>
    if (npcb == NULL) {
 800ae92:	4606      	mov	r6, r0
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d04c      	beq.n	800af32 <tcp_input+0x572>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ae98:	4ba5      	ldr	r3, [pc, #660]	; (800b130 <tcp_input+0x770>)
 800ae9a:	695a      	ldr	r2, [r3, #20]
 800ae9c:	6002      	str	r2, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800aea2:	8ae3      	ldrh	r3, [r4, #22]
 800aea4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800aea6:	4fa3      	ldr	r7, [pc, #652]	; (800b134 <tcp_input+0x774>)
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	881b      	ldrh	r3, [r3, #0]
 800aeac:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800aeb2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 800b170 <tcp_input+0x7b0>
 800aeb6:	f8d8 3000 	ldr.w	r3, [r8]
 800aeba:	3301      	adds	r3, #1
 800aebc:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800aebe:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800aec0:	f7fe f894 	bl	8008fec <tcp_next_iss>
    npcb->snd_wl2 = iss;
 800aec4:	65b0      	str	r0, [r6, #88]	; 0x58
    npcb->snd_nxt = iss;
 800aec6:	6530      	str	r0, [r6, #80]	; 0x50
    npcb->lastack = iss;
 800aec8:	6470      	str	r0, [r6, #68]	; 0x44
    npcb->snd_lbb = iss;
 800aeca:	65f0      	str	r0, [r6, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800aecc:	f8d8 3000 	ldr.w	r3, [r8]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	6573      	str	r3, [r6, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800aed4:	6923      	ldr	r3, [r4, #16]
 800aed6:	6133      	str	r3, [r6, #16]
    npcb->listener = pcb;
 800aed8:	67f4      	str	r4, [r6, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800aeda:	7a63      	ldrb	r3, [r4, #9]
 800aedc:	f003 030c 	and.w	r3, r3, #12
 800aee0:	7273      	strb	r3, [r6, #9]
    npcb->netif_idx = pcb->netif_idx;
 800aee2:	7a23      	ldrb	r3, [r4, #8]
 800aee4:	7233      	strb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 800aee6:	4b94      	ldr	r3, [pc, #592]	; (800b138 <tcp_input+0x778>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	60f2      	str	r2, [r6, #12]
 800aeec:	601e      	str	r6, [r3, #0]
 800aeee:	f001 feb1 	bl	800cc54 <tcp_timer_needed>
 800aef2:	4b92      	ldr	r3, [pc, #584]	; (800b13c <tcp_input+0x77c>)
 800aef4:	2201      	movs	r2, #1
 800aef6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800aef8:	4630      	mov	r0, r6
 800aefa:	f7fe ff97 	bl	8009e2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	89db      	ldrh	r3, [r3, #14]
 800af02:	f8a6 3060 	strh.w	r3, [r6, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800af06:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800af0a:	8e77      	ldrh	r7, [r6, #50]	; 0x32
 800af0c:	1d34      	adds	r4, r6, #4
 800af0e:	4620      	mov	r0, r4
 800af10:	f002 fe68 	bl	800dbe4 <ip4_route>
 800af14:	4601      	mov	r1, r0
 800af16:	4622      	mov	r2, r4
 800af18:	4638      	mov	r0, r7
 800af1a:	f7fe f883 	bl	8009024 <tcp_eff_send_mss_netif>
 800af1e:	8670      	strh	r0, [r6, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800af20:	2112      	movs	r1, #18
 800af22:	4630      	mov	r0, r6
 800af24:	f001 f956 	bl	800c1d4 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800af28:	b968      	cbnz	r0, 800af46 <tcp_input+0x586>
    tcp_output(npcb);
 800af2a:	4630      	mov	r0, r6
 800af2c:	f001 fb82 	bl	800c634 <tcp_output>
 800af30:	e770      	b.n	800ae14 <tcp_input+0x454>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800af32:	69a3      	ldr	r3, [r4, #24]
 800af34:	2b00      	cmp	r3, #0
 800af36:	f43f af6d 	beq.w	800ae14 <tcp_input+0x454>
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295
 800af3e:	2100      	movs	r1, #0
 800af40:	6920      	ldr	r0, [r4, #16]
 800af42:	4798      	blx	r3
 800af44:	e766      	b.n	800ae14 <tcp_input+0x454>
      tcp_abandon(npcb, 0);
 800af46:	2100      	movs	r1, #0
 800af48:	4630      	mov	r0, r6
 800af4a:	f7fe f92d 	bl	80091a8 <tcp_abandon>
      return;
 800af4e:	e761      	b.n	800ae14 <tcp_input+0x454>
      p->flags |= PBUF_FLAG_PUSH;
 800af50:	7b6b      	ldrb	r3, [r5, #13]
 800af52:	f043 0301 	orr.w	r3, r3, #1
 800af56:	736b      	strb	r3, [r5, #13]
 800af58:	e67e      	b.n	800ac58 <tcp_input+0x298>
        if (pcb->rcv_ann_wnd == 0) {
 800af5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800af5c:	b9e3      	cbnz	r3, 800af98 <tcp_input+0x5d8>
          tcp_send_empty_ack(pcb);
 800af5e:	4620      	mov	r0, r4
 800af60:	f001 fb2e 	bl	800c5c0 <tcp_send_empty_ack>
 800af64:	e018      	b.n	800af98 <tcp_input+0x5d8>
      if (ackno == pcb->snd_nxt) {
 800af66:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800af68:	4b75      	ldr	r3, [pc, #468]	; (800b140 <tcp_input+0x780>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d02b      	beq.n	800afc8 <tcp_input+0x608>
      if (recv_flags & TF_RESET) {
 800af70:	4b74      	ldr	r3, [pc, #464]	; (800b144 <tcp_input+0x784>)
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	f013 0f08 	tst.w	r3, #8
 800af78:	f000 8295 	beq.w	800b4a6 <tcp_input+0xae6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800af7c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800af80:	b11b      	cbz	r3, 800af8a <tcp_input+0x5ca>
 800af82:	f06f 010d 	mvn.w	r1, #13
 800af86:	6920      	ldr	r0, [r4, #16]
 800af88:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800af8a:	4621      	mov	r1, r4
 800af8c:	486a      	ldr	r0, [pc, #424]	; (800b138 <tcp_input+0x778>)
 800af8e:	f7fe f8a3 	bl	80090d8 <tcp_pcb_remove>
        tcp_free(pcb);
 800af92:	4620      	mov	r0, r4
 800af94:	f7fd fe16 	bl	8008bc4 <tcp_free>
    tcp_input_pcb = NULL;
 800af98:	2300      	movs	r3, #0
 800af9a:	4a6b      	ldr	r2, [pc, #428]	; (800b148 <tcp_input+0x788>)
 800af9c:	6013      	str	r3, [r2, #0]
    recv_data = NULL;
 800af9e:	4a6b      	ldr	r2, [pc, #428]	; (800b14c <tcp_input+0x78c>)
 800afa0:	6013      	str	r3, [r2, #0]
    if (inseg.p != NULL) {
 800afa2:	4b6b      	ldr	r3, [pc, #428]	; (800b150 <tcp_input+0x790>)
 800afa4:	6858      	ldr	r0, [r3, #4]
 800afa6:	2800      	cmp	r0, #0
 800afa8:	f43f ad18 	beq.w	800a9dc <tcp_input+0x1c>
      pbuf_free(inseg.p);
 800afac:	f7fd faac 	bl	8008508 <pbuf_free>
      inseg.p = NULL;
 800afb0:	4b67      	ldr	r3, [pc, #412]	; (800b150 <tcp_input+0x790>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	605a      	str	r2, [r3, #4]
 800afb6:	e511      	b.n	800a9dc <tcp_input+0x1c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800afb8:	b931      	cbnz	r1, 800afc8 <tcp_input+0x608>
 800afba:	4b66      	ldr	r3, [pc, #408]	; (800b154 <tcp_input+0x794>)
 800afbc:	f44f 724e 	mov.w	r2, #824	; 0x338
 800afc0:	4965      	ldr	r1, [pc, #404]	; (800b158 <tcp_input+0x798>)
 800afc2:	4866      	ldr	r0, [pc, #408]	; (800b15c <tcp_input+0x79c>)
 800afc4:	f003 ff96 	bl	800eef4 <iprintf>
      recv_flags |= TF_RESET;
 800afc8:	4a5e      	ldr	r2, [pc, #376]	; (800b144 <tcp_input+0x784>)
 800afca:	7813      	ldrb	r3, [r2, #0]
 800afcc:	f043 0308 	orr.w	r3, r3, #8
 800afd0:	7013      	strb	r3, [r2, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800afd2:	8b63      	ldrh	r3, [r4, #26]
 800afd4:	f023 0301 	bic.w	r3, r3, #1
 800afd8:	8363      	strh	r3, [r4, #26]
      return ERR_RST;
 800afda:	e7c9      	b.n	800af70 <tcp_input+0x5b0>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800afdc:	f013 0f02 	tst.w	r3, #2
 800afe0:	d004      	beq.n	800afec <tcp_input+0x62c>
 800afe2:	7d23      	ldrb	r3, [r4, #20]
 800afe4:	3b02      	subs	r3, #2
 800afe6:	b2db      	uxtb	r3, r3
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d81c      	bhi.n	800b026 <tcp_input+0x666>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800afec:	8b63      	ldrh	r3, [r4, #26]
 800afee:	f013 0f10 	tst.w	r3, #16
 800aff2:	d102      	bne.n	800affa <tcp_input+0x63a>
    pcb->tmr = tcp_ticks;
 800aff4:	4b5a      	ldr	r3, [pc, #360]	; (800b160 <tcp_input+0x7a0>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6223      	str	r3, [r4, #32]
  pcb->keep_cnt_sent = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
  pcb->persist_probe = 0;
 800b000:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  tcp_parseopt(pcb);
 800b004:	4620      	mov	r0, r4
 800b006:	f7fe ff11 	bl	8009e2c <tcp_parseopt>
  switch (pcb->state) {
 800b00a:	7d23      	ldrb	r3, [r4, #20]
 800b00c:	3b02      	subs	r3, #2
 800b00e:	2b07      	cmp	r3, #7
 800b010:	d8ae      	bhi.n	800af70 <tcp_input+0x5b0>
 800b012:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b016:	000d      	.short	0x000d
 800b018:	014f00d1 	.word	0x014f00d1
 800b01c:	01b1015f 	.word	0x01b1015f
 800b020:	01fd014f 	.word	0x01fd014f
 800b024:	022f      	.short	0x022f
    tcp_ack_now(pcb);
 800b026:	8b63      	ldrh	r3, [r4, #26]
 800b028:	f043 0302 	orr.w	r3, r3, #2
 800b02c:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800b02e:	e79f      	b.n	800af70 <tcp_input+0x5b0>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800b030:	4b4c      	ldr	r3, [pc, #304]	; (800b164 <tcp_input+0x7a4>)
 800b032:	781a      	ldrb	r2, [r3, #0]
 800b034:	f002 0312 	and.w	r3, r2, #18
 800b038:	2b12      	cmp	r3, #18
 800b03a:	d020      	beq.n	800b07e <tcp_input+0x6be>
      else if (flags & TCP_ACK) {
 800b03c:	f012 0f10 	tst.w	r2, #16
 800b040:	d096      	beq.n	800af70 <tcp_input+0x5b0>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b042:	4b3c      	ldr	r3, [pc, #240]	; (800b134 <tcp_input+0x774>)
 800b044:	6819      	ldr	r1, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b046:	4b48      	ldr	r3, [pc, #288]	; (800b168 <tcp_input+0x7a8>)
 800b048:	4a48      	ldr	r2, [pc, #288]	; (800b16c <tcp_input+0x7ac>)
 800b04a:	8810      	ldrh	r0, [r2, #0]
 800b04c:	4a48      	ldr	r2, [pc, #288]	; (800b170 <tcp_input+0x7b0>)
 800b04e:	6812      	ldr	r2, [r2, #0]
 800b050:	880d      	ldrh	r5, [r1, #0]
 800b052:	9502      	str	r5, [sp, #8]
 800b054:	8849      	ldrh	r1, [r1, #2]
 800b056:	9101      	str	r1, [sp, #4]
 800b058:	1f19      	subs	r1, r3, #4
 800b05a:	9100      	str	r1, [sp, #0]
 800b05c:	4402      	add	r2, r0
 800b05e:	4938      	ldr	r1, [pc, #224]	; (800b140 <tcp_input+0x780>)
 800b060:	6809      	ldr	r1, [r1, #0]
 800b062:	4620      	mov	r0, r4
 800b064:	f001 fa64 	bl	800c530 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800b068:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800b06c:	2b05      	cmp	r3, #5
 800b06e:	f63f af7f 	bhi.w	800af70 <tcp_input+0x5b0>
          pcb->rtime = 0;
 800b072:	2300      	movs	r3, #0
 800b074:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800b076:	4620      	mov	r0, r4
 800b078:	f001 fcc4 	bl	800ca04 <tcp_rexmit_rto>
 800b07c:	e778      	b.n	800af70 <tcp_input+0x5b0>
          && (ackno == pcb->lastack + 1)) {
 800b07e:	4b30      	ldr	r3, [pc, #192]	; (800b140 <tcp_input+0x780>)
 800b080:	6819      	ldr	r1, [r3, #0]
 800b082:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b084:	3301      	adds	r3, #1
 800b086:	428b      	cmp	r3, r1
 800b088:	d1d8      	bne.n	800b03c <tcp_input+0x67c>
        pcb->rcv_nxt = seqno + 1;
 800b08a:	4b39      	ldr	r3, [pc, #228]	; (800b170 <tcp_input+0x7b0>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	1c5a      	adds	r2, r3, #1
 800b090:	6262      	str	r2, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800b092:	62e2      	str	r2, [r4, #44]	; 0x2c
        pcb->lastack = ackno;
 800b094:	6461      	str	r1, [r4, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800b096:	4a27      	ldr	r2, [pc, #156]	; (800b134 <tcp_input+0x774>)
 800b098:	6812      	ldr	r2, [r2, #0]
 800b09a:	89d2      	ldrh	r2, [r2, #14]
 800b09c:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800b0a0:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800b0a8:	2304      	movs	r3, #4
 800b0aa:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800b0ac:	8e66      	ldrh	r6, [r4, #50]	; 0x32
 800b0ae:	18e5      	adds	r5, r4, r3
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f002 fd97 	bl	800dbe4 <ip4_route>
 800b0b6:	4601      	mov	r1, r0
 800b0b8:	462a      	mov	r2, r5
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	f7fd ffb2 	bl	8009024 <tcp_eff_send_mss_netif>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b0c4:	0041      	lsls	r1, r0, #1
 800b0c6:	f241 121c 	movw	r2, #4380	; 0x111c
 800b0ca:	428a      	cmp	r2, r1
 800b0cc:	bf38      	it	cc
 800b0ce:	460a      	movcc	r2, r1
 800b0d0:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
 800b0d4:	d94e      	bls.n	800b174 <tcp_input+0x7b4>
 800b0d6:	0083      	lsls	r3, r0, #2
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b0de:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d04f      	beq.n	800b186 <tcp_input+0x7c6>
        --pcb->snd_queuelen;
 800b0e6:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800b0f0:	6f25      	ldr	r5, [r4, #112]	; 0x70
        if (rseg == NULL) {
 800b0f2:	2d00      	cmp	r5, #0
 800b0f4:	d04f      	beq.n	800b196 <tcp_input+0x7d6>
          pcb->unacked = rseg->next;
 800b0f6:	682b      	ldr	r3, [r5, #0]
 800b0f8:	6723      	str	r3, [r4, #112]	; 0x70
        tcp_seg_free(rseg);
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	f7fd febe 	bl	8008e7c <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800b100:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b102:	2b00      	cmp	r3, #0
 800b104:	d054      	beq.n	800b1b0 <tcp_input+0x7f0>
          pcb->rtime = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800b10a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800b10e:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 800b112:	b13b      	cbz	r3, 800b124 <tcp_input+0x764>
 800b114:	2200      	movs	r2, #0
 800b116:	4621      	mov	r1, r4
 800b118:	6920      	ldr	r0, [r4, #16]
 800b11a:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800b11c:	f110 0f0d 	cmn.w	r0, #13
 800b120:	f43f af3a 	beq.w	800af98 <tcp_input+0x5d8>
        tcp_ack_now(pcb);
 800b124:	8b63      	ldrh	r3, [r4, #26]
 800b126:	f043 0302 	orr.w	r3, r3, #2
 800b12a:	8363      	strh	r3, [r4, #26]
 800b12c:	e720      	b.n	800af70 <tcp_input+0x5b0>
 800b12e:	bf00      	nop
 800b130:	2000aff0 	.word	0x2000aff0
 800b134:	20010950 	.word	0x20010950
 800b138:	20010904 	.word	0x20010904
 800b13c:	20010908 	.word	0x20010908
 800b140:	20010920 	.word	0x20010920
 800b144:	20010940 	.word	0x20010940
 800b148:	20010948 	.word	0x20010948
 800b14c:	2001093c 	.word	0x2001093c
 800b150:	20010928 	.word	0x20010928
 800b154:	080117dc 	.word	0x080117dc
 800b158:	08011b50 	.word	0x08011b50
 800b15c:	08010198 	.word	0x08010198
 800b160:	20010914 	.word	0x20010914
 800b164:	20010924 	.word	0x20010924
 800b168:	2000b004 	.word	0x2000b004
 800b16c:	2001095e 	.word	0x2001095e
 800b170:	20010944 	.word	0x20010944
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b174:	f241 121c 	movw	r2, #4380	; 0x111c
 800b178:	4291      	cmp	r1, r2
 800b17a:	bf86      	itte	hi
 800b17c:	0043      	lslhi	r3, r0, #1
 800b17e:	b29b      	uxthhi	r3, r3
 800b180:	f241 131c 	movwls	r3, #4380	; 0x111c
 800b184:	e7a9      	b.n	800b0da <tcp_input+0x71a>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800b186:	4b92      	ldr	r3, [pc, #584]	; (800b3d0 <tcp_input+0xa10>)
 800b188:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800b18c:	4991      	ldr	r1, [pc, #580]	; (800b3d4 <tcp_input+0xa14>)
 800b18e:	4892      	ldr	r0, [pc, #584]	; (800b3d8 <tcp_input+0xa18>)
 800b190:	f003 feb0 	bl	800eef4 <iprintf>
 800b194:	e7a7      	b.n	800b0e6 <tcp_input+0x726>
          rseg = pcb->unsent;
 800b196:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b198:	b115      	cbz	r5, 800b1a0 <tcp_input+0x7e0>
          pcb->unsent = rseg->next;
 800b19a:	682b      	ldr	r3, [r5, #0]
 800b19c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800b19e:	e7ac      	b.n	800b0fa <tcp_input+0x73a>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800b1a0:	4b8b      	ldr	r3, [pc, #556]	; (800b3d0 <tcp_input+0xa10>)
 800b1a2:	f44f 725d 	mov.w	r2, #884	; 0x374
 800b1a6:	498d      	ldr	r1, [pc, #564]	; (800b3dc <tcp_input+0xa1c>)
 800b1a8:	488b      	ldr	r0, [pc, #556]	; (800b3d8 <tcp_input+0xa18>)
 800b1aa:	f003 fea3 	bl	800eef4 <iprintf>
 800b1ae:	e7f4      	b.n	800b19a <tcp_input+0x7da>
          pcb->rtime = -1;
 800b1b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1b4:	8623      	strh	r3, [r4, #48]	; 0x30
 800b1b6:	e7aa      	b.n	800b10e <tcp_input+0x74e>
      if (flags & TCP_ACK) {
 800b1b8:	4b89      	ldr	r3, [pc, #548]	; (800b3e0 <tcp_input+0xa20>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f013 0f10 	tst.w	r3, #16
 800b1c0:	d069      	beq.n	800b296 <tcp_input+0x8d6>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800b1c2:	4b88      	ldr	r3, [pc, #544]	; (800b3e4 <tcp_input+0xa24>)
 800b1c4:	6819      	ldr	r1, [r3, #0]
 800b1c6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b1c8:	43db      	mvns	r3, r3
 800b1ca:	42cb      	cmn	r3, r1
 800b1cc:	d403      	bmi.n	800b1d6 <tcp_input+0x816>
 800b1ce:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b1d0:	1acb      	subs	r3, r1, r3
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	dd11      	ble.n	800b1fa <tcp_input+0x83a>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b1d6:	4b84      	ldr	r3, [pc, #528]	; (800b3e8 <tcp_input+0xa28>)
 800b1d8:	6818      	ldr	r0, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b1da:	4b84      	ldr	r3, [pc, #528]	; (800b3ec <tcp_input+0xa2c>)
 800b1dc:	4a84      	ldr	r2, [pc, #528]	; (800b3f0 <tcp_input+0xa30>)
 800b1de:	8815      	ldrh	r5, [r2, #0]
 800b1e0:	4a84      	ldr	r2, [pc, #528]	; (800b3f4 <tcp_input+0xa34>)
 800b1e2:	6812      	ldr	r2, [r2, #0]
 800b1e4:	8806      	ldrh	r6, [r0, #0]
 800b1e6:	9602      	str	r6, [sp, #8]
 800b1e8:	8840      	ldrh	r0, [r0, #2]
 800b1ea:	9001      	str	r0, [sp, #4]
 800b1ec:	1f18      	subs	r0, r3, #4
 800b1ee:	9000      	str	r0, [sp, #0]
 800b1f0:	442a      	add	r2, r5
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	f001 f99c 	bl	800c530 <tcp_rst>
 800b1f8:	e6ba      	b.n	800af70 <tcp_input+0x5b0>
          pcb->state = ESTABLISHED;
 800b1fa:	2304      	movs	r3, #4
 800b1fc:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800b1fe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b200:	2b00      	cmp	r3, #0
 800b202:	d03b      	beq.n	800b27c <tcp_input+0x8bc>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b204:	699b      	ldr	r3, [r3, #24]
 800b206:	b34b      	cbz	r3, 800b25c <tcp_input+0x89c>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b208:	2200      	movs	r2, #0
 800b20a:	4621      	mov	r1, r4
 800b20c:	6920      	ldr	r0, [r4, #16]
 800b20e:	4798      	blx	r3
          if (err != ERR_OK) {
 800b210:	2800      	cmp	r0, #0
 800b212:	d12f      	bne.n	800b274 <tcp_input+0x8b4>
          tcp_receive(pcb);
 800b214:	4620      	mov	r0, r4
 800b216:	f7fe ff47 	bl	800a0a8 <tcp_receive>
          if (recv_acked != 0) {
 800b21a:	4b77      	ldr	r3, [pc, #476]	; (800b3f8 <tcp_input+0xa38>)
 800b21c:	881b      	ldrh	r3, [r3, #0]
 800b21e:	b113      	cbz	r3, 800b226 <tcp_input+0x866>
            recv_acked--;
 800b220:	3b01      	subs	r3, #1
 800b222:	4a75      	ldr	r2, [pc, #468]	; (800b3f8 <tcp_input+0xa38>)
 800b224:	8013      	strh	r3, [r2, #0]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b226:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b228:	0059      	lsls	r1, r3, #1
 800b22a:	f241 121c 	movw	r2, #4380	; 0x111c
 800b22e:	428a      	cmp	r2, r1
 800b230:	bf38      	it	cc
 800b232:	460a      	movcc	r2, r1
 800b234:	ebb2 0f83 	cmp.w	r2, r3, lsl #2
 800b238:	d924      	bls.n	800b284 <tcp_input+0x8c4>
 800b23a:	009b      	lsls	r3, r3, #2
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800b242:	4b6e      	ldr	r3, [pc, #440]	; (800b3fc <tcp_input+0xa3c>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	f013 0f20 	tst.w	r3, #32
 800b24a:	f43f ae91 	beq.w	800af70 <tcp_input+0x5b0>
            tcp_ack_now(pcb);
 800b24e:	8b63      	ldrh	r3, [r4, #26]
 800b250:	f043 0302 	orr.w	r3, r3, #2
 800b254:	8363      	strh	r3, [r4, #26]
            pcb->state = CLOSE_WAIT;
 800b256:	2307      	movs	r3, #7
 800b258:	7523      	strb	r3, [r4, #20]
 800b25a:	e689      	b.n	800af70 <tcp_input+0x5b0>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800b25c:	4b5c      	ldr	r3, [pc, #368]	; (800b3d0 <tcp_input+0xa10>)
 800b25e:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800b262:	4967      	ldr	r1, [pc, #412]	; (800b400 <tcp_input+0xa40>)
 800b264:	485c      	ldr	r0, [pc, #368]	; (800b3d8 <tcp_input+0xa18>)
 800b266:	f003 fe45 	bl	800eef4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800b26a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1ca      	bne.n	800b208 <tcp_input+0x848>
 800b272:	e003      	b.n	800b27c <tcp_input+0x8bc>
            if (err != ERR_ABRT) {
 800b274:	f110 0f0d 	cmn.w	r0, #13
 800b278:	f43f ae8e 	beq.w	800af98 <tcp_input+0x5d8>
              tcp_abort(pcb);
 800b27c:	4620      	mov	r0, r4
 800b27e:	f7fe f819 	bl	80092b4 <tcp_abort>
 800b282:	e689      	b.n	800af98 <tcp_input+0x5d8>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800b284:	f241 121c 	movw	r2, #4380	; 0x111c
 800b288:	4291      	cmp	r1, r2
 800b28a:	bf86      	itte	hi
 800b28c:	005b      	lslhi	r3, r3, #1
 800b28e:	b29b      	uxthhi	r3, r3
 800b290:	f241 131c 	movwls	r3, #4380	; 0x111c
 800b294:	e7d3      	b.n	800b23e <tcp_input+0x87e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800b296:	f013 0f02 	tst.w	r3, #2
 800b29a:	f43f ae69 	beq.w	800af70 <tcp_input+0x5b0>
 800b29e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	4a54      	ldr	r2, [pc, #336]	; (800b3f4 <tcp_input+0xa34>)
 800b2a4:	6812      	ldr	r2, [r2, #0]
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	f47f ae62 	bne.w	800af70 <tcp_input+0x5b0>
        tcp_rexmit(pcb);
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 f8bb 	bl	800c428 <tcp_rexmit>
 800b2b2:	e65d      	b.n	800af70 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	f7fe fef7 	bl	800a0a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800b2ba:	4b50      	ldr	r3, [pc, #320]	; (800b3fc <tcp_input+0xa3c>)
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	f013 0f20 	tst.w	r3, #32
 800b2c2:	f43f ae55 	beq.w	800af70 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800b2c6:	8b63      	ldrh	r3, [r4, #26]
 800b2c8:	f043 0302 	orr.w	r3, r3, #2
 800b2cc:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800b2ce:	2307      	movs	r3, #7
 800b2d0:	7523      	strb	r3, [r4, #20]
 800b2d2:	e64d      	b.n	800af70 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b2d4:	4620      	mov	r0, r4
 800b2d6:	f7fe fee7 	bl	800a0a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b2da:	4b48      	ldr	r3, [pc, #288]	; (800b3fc <tcp_input+0xa3c>)
 800b2dc:	781b      	ldrb	r3, [r3, #0]
 800b2de:	f013 0f20 	tst.w	r3, #32
 800b2e2:	d036      	beq.n	800b352 <tcp_input+0x992>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b2e4:	4b3e      	ldr	r3, [pc, #248]	; (800b3e0 <tcp_input+0xa20>)
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	f013 0f10 	tst.w	r3, #16
 800b2ec:	d004      	beq.n	800b2f8 <tcp_input+0x938>
 800b2ee:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b2f0:	4b3c      	ldr	r3, [pc, #240]	; (800b3e4 <tcp_input+0xa24>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d006      	beq.n	800b306 <tcp_input+0x946>
          tcp_ack_now(pcb);
 800b2f8:	8b63      	ldrh	r3, [r4, #26]
 800b2fa:	f043 0302 	orr.w	r3, r3, #2
 800b2fe:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800b300:	2308      	movs	r3, #8
 800b302:	7523      	strb	r3, [r4, #20]
 800b304:	e634      	b.n	800af70 <tcp_input+0x5b0>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b306:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1f5      	bne.n	800b2f8 <tcp_input+0x938>
          tcp_ack_now(pcb);
 800b30c:	8b63      	ldrh	r3, [r4, #26]
 800b30e:	f043 0302 	orr.w	r3, r3, #2
 800b312:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800b314:	4620      	mov	r0, r4
 800b316:	f7fd feaf 	bl	8009078 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800b31a:	4b3a      	ldr	r3, [pc, #232]	; (800b404 <tcp_input+0xa44>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	42a3      	cmp	r3, r4
 800b320:	d005      	beq.n	800b32e <tcp_input+0x96e>
 800b322:	b153      	cbz	r3, 800b33a <tcp_input+0x97a>
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	42a2      	cmp	r2, r4
 800b328:	d005      	beq.n	800b336 <tcp_input+0x976>
 800b32a:	4613      	mov	r3, r2
 800b32c:	e7f9      	b.n	800b322 <tcp_input+0x962>
 800b32e:	68e2      	ldr	r2, [r4, #12]
 800b330:	4b34      	ldr	r3, [pc, #208]	; (800b404 <tcp_input+0xa44>)
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	e001      	b.n	800b33a <tcp_input+0x97a>
 800b336:	68e2      	ldr	r2, [r4, #12]
 800b338:	60da      	str	r2, [r3, #12]
 800b33a:	4b33      	ldr	r3, [pc, #204]	; (800b408 <tcp_input+0xa48>)
 800b33c:	2201      	movs	r2, #1
 800b33e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800b340:	230a      	movs	r3, #10
 800b342:	7523      	strb	r3, [r4, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800b344:	4b31      	ldr	r3, [pc, #196]	; (800b40c <tcp_input+0xa4c>)
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	60e2      	str	r2, [r4, #12]
 800b34a:	601c      	str	r4, [r3, #0]
 800b34c:	f001 fc82 	bl	800cc54 <tcp_timer_needed>
 800b350:	e60e      	b.n	800af70 <tcp_input+0x5b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800b352:	4b23      	ldr	r3, [pc, #140]	; (800b3e0 <tcp_input+0xa20>)
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	f013 0f10 	tst.w	r3, #16
 800b35a:	f43f ae09 	beq.w	800af70 <tcp_input+0x5b0>
 800b35e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b360:	4b20      	ldr	r3, [pc, #128]	; (800b3e4 <tcp_input+0xa24>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	f47f ae03 	bne.w	800af70 <tcp_input+0x5b0>
 800b36a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f47f adff 	bne.w	800af70 <tcp_input+0x5b0>
        pcb->state = FIN_WAIT_2;
 800b372:	2306      	movs	r3, #6
 800b374:	7523      	strb	r3, [r4, #20]
 800b376:	e5fb      	b.n	800af70 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b378:	4620      	mov	r0, r4
 800b37a:	f7fe fe95 	bl	800a0a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800b37e:	4b1f      	ldr	r3, [pc, #124]	; (800b3fc <tcp_input+0xa3c>)
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	f013 0f20 	tst.w	r3, #32
 800b386:	f43f adf3 	beq.w	800af70 <tcp_input+0x5b0>
        tcp_ack_now(pcb);
 800b38a:	8b63      	ldrh	r3, [r4, #26]
 800b38c:	f043 0302 	orr.w	r3, r3, #2
 800b390:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800b392:	4620      	mov	r0, r4
 800b394:	f7fd fe70 	bl	8009078 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b398:	4b1a      	ldr	r3, [pc, #104]	; (800b404 <tcp_input+0xa44>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	d005      	beq.n	800b3ac <tcp_input+0x9ec>
 800b3a0:	b153      	cbz	r3, 800b3b8 <tcp_input+0x9f8>
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	42a2      	cmp	r2, r4
 800b3a6:	d005      	beq.n	800b3b4 <tcp_input+0x9f4>
 800b3a8:	4613      	mov	r3, r2
 800b3aa:	e7f9      	b.n	800b3a0 <tcp_input+0x9e0>
 800b3ac:	68e2      	ldr	r2, [r4, #12]
 800b3ae:	4b15      	ldr	r3, [pc, #84]	; (800b404 <tcp_input+0xa44>)
 800b3b0:	601a      	str	r2, [r3, #0]
 800b3b2:	e001      	b.n	800b3b8 <tcp_input+0x9f8>
 800b3b4:	68e2      	ldr	r2, [r4, #12]
 800b3b6:	60da      	str	r2, [r3, #12]
 800b3b8:	4b13      	ldr	r3, [pc, #76]	; (800b408 <tcp_input+0xa48>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b3be:	230a      	movs	r3, #10
 800b3c0:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b3c2:	4b12      	ldr	r3, [pc, #72]	; (800b40c <tcp_input+0xa4c>)
 800b3c4:	681a      	ldr	r2, [r3, #0]
 800b3c6:	60e2      	str	r2, [r4, #12]
 800b3c8:	601c      	str	r4, [r3, #0]
 800b3ca:	f001 fc43 	bl	800cc54 <tcp_timer_needed>
 800b3ce:	e5cf      	b.n	800af70 <tcp_input+0x5b0>
 800b3d0:	080117dc 	.word	0x080117dc
 800b3d4:	08011b70 	.word	0x08011b70
 800b3d8:	08010198 	.word	0x08010198
 800b3dc:	08011b88 	.word	0x08011b88
 800b3e0:	20010924 	.word	0x20010924
 800b3e4:	20010920 	.word	0x20010920
 800b3e8:	20010950 	.word	0x20010950
 800b3ec:	2000b004 	.word	0x2000b004
 800b3f0:	2001095e 	.word	0x2001095e
 800b3f4:	20010944 	.word	0x20010944
 800b3f8:	20010938 	.word	0x20010938
 800b3fc:	20010940 	.word	0x20010940
 800b400:	08011b9c 	.word	0x08011b9c
 800b404:	20010904 	.word	0x20010904
 800b408:	20010908 	.word	0x20010908
 800b40c:	2001091c 	.word	0x2001091c
      tcp_receive(pcb);
 800b410:	4620      	mov	r0, r4
 800b412:	f7fe fe49 	bl	800a0a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b416:	4b73      	ldr	r3, [pc, #460]	; (800b5e4 <tcp_input+0xc24>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	f013 0f10 	tst.w	r3, #16
 800b41e:	f43f ada7 	beq.w	800af70 <tcp_input+0x5b0>
 800b422:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b424:	4b70      	ldr	r3, [pc, #448]	; (800b5e8 <tcp_input+0xc28>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	429a      	cmp	r2, r3
 800b42a:	f47f ada1 	bne.w	800af70 <tcp_input+0x5b0>
 800b42e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b430:	2b00      	cmp	r3, #0
 800b432:	f47f ad9d 	bne.w	800af70 <tcp_input+0x5b0>
        tcp_pcb_purge(pcb);
 800b436:	4620      	mov	r0, r4
 800b438:	f7fd fe1e 	bl	8009078 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800b43c:	4b6b      	ldr	r3, [pc, #428]	; (800b5ec <tcp_input+0xc2c>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	42a3      	cmp	r3, r4
 800b442:	d005      	beq.n	800b450 <tcp_input+0xa90>
 800b444:	b153      	cbz	r3, 800b45c <tcp_input+0xa9c>
 800b446:	68da      	ldr	r2, [r3, #12]
 800b448:	42a2      	cmp	r2, r4
 800b44a:	d005      	beq.n	800b458 <tcp_input+0xa98>
 800b44c:	4613      	mov	r3, r2
 800b44e:	e7f9      	b.n	800b444 <tcp_input+0xa84>
 800b450:	68e2      	ldr	r2, [r4, #12]
 800b452:	4b66      	ldr	r3, [pc, #408]	; (800b5ec <tcp_input+0xc2c>)
 800b454:	601a      	str	r2, [r3, #0]
 800b456:	e001      	b.n	800b45c <tcp_input+0xa9c>
 800b458:	68e2      	ldr	r2, [r4, #12]
 800b45a:	60da      	str	r2, [r3, #12]
 800b45c:	4b64      	ldr	r3, [pc, #400]	; (800b5f0 <tcp_input+0xc30>)
 800b45e:	2201      	movs	r2, #1
 800b460:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800b462:	230a      	movs	r3, #10
 800b464:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800b466:	4b63      	ldr	r3, [pc, #396]	; (800b5f4 <tcp_input+0xc34>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	60e2      	str	r2, [r4, #12]
 800b46c:	601c      	str	r4, [r3, #0]
 800b46e:	f001 fbf1 	bl	800cc54 <tcp_timer_needed>
 800b472:	e57d      	b.n	800af70 <tcp_input+0x5b0>
      tcp_receive(pcb);
 800b474:	4620      	mov	r0, r4
 800b476:	f7fe fe17 	bl	800a0a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800b47a:	4b5a      	ldr	r3, [pc, #360]	; (800b5e4 <tcp_input+0xc24>)
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	f013 0f10 	tst.w	r3, #16
 800b482:	f43f ad75 	beq.w	800af70 <tcp_input+0x5b0>
 800b486:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800b488:	4b57      	ldr	r3, [pc, #348]	; (800b5e8 <tcp_input+0xc28>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	f47f ad6f 	bne.w	800af70 <tcp_input+0x5b0>
 800b492:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b494:	2b00      	cmp	r3, #0
 800b496:	f47f ad6b 	bne.w	800af70 <tcp_input+0x5b0>
        recv_flags |= TF_CLOSED;
 800b49a:	4a57      	ldr	r2, [pc, #348]	; (800b5f8 <tcp_input+0xc38>)
 800b49c:	7813      	ldrb	r3, [r2, #0]
 800b49e:	f043 0310 	orr.w	r3, r3, #16
 800b4a2:	7013      	strb	r3, [r2, #0]
 800b4a4:	e564      	b.n	800af70 <tcp_input+0x5b0>
        if (recv_acked > 0) {
 800b4a6:	4b55      	ldr	r3, [pc, #340]	; (800b5fc <tcp_input+0xc3c>)
 800b4a8:	881a      	ldrh	r2, [r3, #0]
 800b4aa:	b162      	cbz	r2, 800b4c6 <tcp_input+0xb06>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800b4ac:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b4b0:	b133      	cbz	r3, 800b4c0 <tcp_input+0xb00>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	6920      	ldr	r0, [r4, #16]
 800b4b6:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800b4b8:	f110 0f0d 	cmn.w	r0, #13
 800b4bc:	f43f ad6c 	beq.w	800af98 <tcp_input+0x5d8>
          recv_acked = 0;
 800b4c0:	4b4e      	ldr	r3, [pc, #312]	; (800b5fc <tcp_input+0xc3c>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	801a      	strh	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f7fe fcfa 	bl	8009ec0 <tcp_input_delayed_close>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	f47f ad63 	bne.w	800af98 <tcp_input+0x5d8>
        if (recv_data != NULL) {
 800b4d2:	4b4b      	ldr	r3, [pc, #300]	; (800b600 <tcp_input+0xc40>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	b1eb      	cbz	r3, 800b514 <tcp_input+0xb54>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800b4d8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b4da:	b133      	cbz	r3, 800b4ea <tcp_input+0xb2a>
 800b4dc:	4b49      	ldr	r3, [pc, #292]	; (800b604 <tcp_input+0xc44>)
 800b4de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800b4e2:	4949      	ldr	r1, [pc, #292]	; (800b608 <tcp_input+0xc48>)
 800b4e4:	4849      	ldr	r0, [pc, #292]	; (800b60c <tcp_input+0xc4c>)
 800b4e6:	f003 fd05 	bl	800eef4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800b4ea:	8b63      	ldrh	r3, [r4, #26]
 800b4ec:	f013 0f10 	tst.w	r3, #16
 800b4f0:	d128      	bne.n	800b544 <tcp_input+0xb84>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b4f2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b4f6:	b36d      	cbz	r5, 800b554 <tcp_input+0xb94>
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	4a41      	ldr	r2, [pc, #260]	; (800b600 <tcp_input+0xc40>)
 800b4fc:	6812      	ldr	r2, [r2, #0]
 800b4fe:	4621      	mov	r1, r4
 800b500:	6920      	ldr	r0, [r4, #16]
 800b502:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 800b504:	f110 0f0d 	cmn.w	r0, #13
 800b508:	f43f ad46 	beq.w	800af98 <tcp_input+0x5d8>
          if (err != ERR_OK) {
 800b50c:	b110      	cbz	r0, 800b514 <tcp_input+0xb54>
            pcb->refused_data = recv_data;
 800b50e:	4b3c      	ldr	r3, [pc, #240]	; (800b600 <tcp_input+0xc40>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	67a3      	str	r3, [r4, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 800b514:	4b38      	ldr	r3, [pc, #224]	; (800b5f8 <tcp_input+0xc38>)
 800b516:	781b      	ldrb	r3, [r3, #0]
 800b518:	f013 0f20 	tst.w	r3, #32
 800b51c:	d005      	beq.n	800b52a <tcp_input+0xb6a>
          if (pcb->refused_data != NULL) {
 800b51e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b520:	b303      	cbz	r3, 800b564 <tcp_input+0xba4>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800b522:	7b5a      	ldrb	r2, [r3, #13]
 800b524:	f042 0220 	orr.w	r2, r2, #32
 800b528:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800b52a:	4b39      	ldr	r3, [pc, #228]	; (800b610 <tcp_input+0xc50>)
 800b52c:	2200      	movs	r2, #0
 800b52e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800b530:	4620      	mov	r0, r4
 800b532:	f7fe fcc5 	bl	8009ec0 <tcp_input_delayed_close>
 800b536:	2800      	cmp	r0, #0
 800b538:	f47f ad2e 	bne.w	800af98 <tcp_input+0x5d8>
        tcp_output(pcb);
 800b53c:	4620      	mov	r0, r4
 800b53e:	f001 f879 	bl	800c634 <tcp_output>
 800b542:	e529      	b.n	800af98 <tcp_input+0x5d8>
            pbuf_free(recv_data);
 800b544:	4b2e      	ldr	r3, [pc, #184]	; (800b600 <tcp_input+0xc40>)
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	f7fc ffde 	bl	8008508 <pbuf_free>
            tcp_abort(pcb);
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7fd feb1 	bl	80092b4 <tcp_abort>
            goto aborted;
 800b552:	e521      	b.n	800af98 <tcp_input+0x5d8>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800b554:	2300      	movs	r3, #0
 800b556:	4a2a      	ldr	r2, [pc, #168]	; (800b600 <tcp_input+0xc40>)
 800b558:	6812      	ldr	r2, [r2, #0]
 800b55a:	4621      	mov	r1, r4
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fe f8d7 	bl	8009710 <tcp_recv_null>
 800b562:	e7cf      	b.n	800b504 <tcp_input+0xb44>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b564:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800b566:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800b56a:	bf1c      	itt	ne
 800b56c:	3301      	addne	r3, #1
 800b56e:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800b570:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800b574:	2d00      	cmp	r5, #0
 800b576:	d0d8      	beq.n	800b52a <tcp_input+0xb6a>
 800b578:	2300      	movs	r3, #0
 800b57a:	461a      	mov	r2, r3
 800b57c:	4621      	mov	r1, r4
 800b57e:	6920      	ldr	r0, [r4, #16]
 800b580:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 800b582:	f110 0f0d 	cmn.w	r0, #13
 800b586:	d1d0      	bne.n	800b52a <tcp_input+0xb6a>
 800b588:	e506      	b.n	800af98 <tcp_input+0x5d8>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800b58a:	4b22      	ldr	r3, [pc, #136]	; (800b614 <tcp_input+0xc54>)
 800b58c:	6819      	ldr	r1, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800b58e:	4b22      	ldr	r3, [pc, #136]	; (800b618 <tcp_input+0xc58>)
 800b590:	4a22      	ldr	r2, [pc, #136]	; (800b61c <tcp_input+0xc5c>)
 800b592:	8810      	ldrh	r0, [r2, #0]
 800b594:	4a22      	ldr	r2, [pc, #136]	; (800b620 <tcp_input+0xc60>)
 800b596:	6812      	ldr	r2, [r2, #0]
 800b598:	880c      	ldrh	r4, [r1, #0]
 800b59a:	9402      	str	r4, [sp, #8]
 800b59c:	8849      	ldrh	r1, [r1, #2]
 800b59e:	9101      	str	r1, [sp, #4]
 800b5a0:	1f19      	subs	r1, r3, #4
 800b5a2:	9100      	str	r1, [sp, #0]
 800b5a4:	4402      	add	r2, r0
 800b5a6:	4910      	ldr	r1, [pc, #64]	; (800b5e8 <tcp_input+0xc28>)
 800b5a8:	6809      	ldr	r1, [r1, #0]
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f000 ffc0 	bl	800c530 <tcp_rst>
 800b5b0:	e007      	b.n	800b5c2 <tcp_input+0xc02>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800b5b2:	4b18      	ldr	r3, [pc, #96]	; (800b614 <tcp_input+0xc54>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	8998      	ldrh	r0, [r3, #12]
 800b5b8:	f7fc f966 	bl	8007888 <lwip_htons>
 800b5bc:	f010 0f04 	tst.w	r0, #4
 800b5c0:	d0e3      	beq.n	800b58a <tcp_input+0xbca>
    pbuf_free(p);
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	f7fc ffa0 	bl	8008508 <pbuf_free>
 800b5c8:	f7ff ba08 	b.w	800a9dc <tcp_input+0x1c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b5cc:	4b09      	ldr	r3, [pc, #36]	; (800b5f4 <tcp_input+0xc34>)
 800b5ce:	681c      	ldr	r4, [r3, #0]
 800b5d0:	2c00      	cmp	r4, #0
 800b5d2:	f43f abe5 	beq.w	800ada0 <tcp_input+0x3e0>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b5d6:	f8df 802c 	ldr.w	r8, [pc, #44]	; 800b604 <tcp_input+0xc44>
 800b5da:	4f12      	ldr	r7, [pc, #72]	; (800b624 <tcp_input+0xc64>)
 800b5dc:	4e0b      	ldr	r6, [pc, #44]	; (800b60c <tcp_input+0xc4c>)
 800b5de:	f7ff bb8d 	b.w	800acfc <tcp_input+0x33c>
 800b5e2:	bf00      	nop
 800b5e4:	20010924 	.word	0x20010924
 800b5e8:	20010920 	.word	0x20010920
 800b5ec:	20010904 	.word	0x20010904
 800b5f0:	20010908 	.word	0x20010908
 800b5f4:	2001091c 	.word	0x2001091c
 800b5f8:	20010940 	.word	0x20010940
 800b5fc:	20010938 	.word	0x20010938
 800b600:	2001093c 	.word	0x2001093c
 800b604:	080117dc 	.word	0x080117dc
 800b608:	08011bbc 	.word	0x08011bbc
 800b60c:	08010198 	.word	0x08010198
 800b610:	20010948 	.word	0x20010948
 800b614:	20010950 	.word	0x20010950
 800b618:	2000b004 	.word	0x2000b004
 800b61c:	2001095e 	.word	0x2001095e
 800b620:	20010944 	.word	0x20010944
 800b624:	08011b20 	.word	0x08011b20

0800b628 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800b628:	4a02      	ldr	r2, [pc, #8]	; (800b634 <tcp_trigger_input_pcb_close+0xc>)
 800b62a:	7813      	ldrb	r3, [r2, #0]
 800b62c:	f043 0310 	orr.w	r3, r3, #16
 800b630:	7013      	strb	r3, [r2, #0]
}
 800b632:	4770      	bx	lr
 800b634:	20010940 	.word	0x20010940

0800b638 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b638:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b63a:	4604      	mov	r4, r0
 800b63c:	b128      	cbz	r0, 800b64a <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b63e:	6863      	ldr	r3, [r4, #4]
 800b640:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800b642:	3801      	subs	r0, #1
 800b644:	bf18      	it	ne
 800b646:	2001      	movne	r0, #1
 800b648:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b64a:	4b04      	ldr	r3, [pc, #16]	; (800b65c <tcp_output_segment_busy+0x24>)
 800b64c:	f240 529a 	movw	r2, #1434	; 0x59a
 800b650:	4903      	ldr	r1, [pc, #12]	; (800b660 <tcp_output_segment_busy+0x28>)
 800b652:	4804      	ldr	r0, [pc, #16]	; (800b664 <tcp_output_segment_busy+0x2c>)
 800b654:	f003 fc4e 	bl	800eef4 <iprintf>
 800b658:	e7f1      	b.n	800b63e <tcp_output_segment_busy+0x6>
 800b65a:	bf00      	nop
 800b65c:	08011bd8 	.word	0x08011bd8
 800b660:	08011c0c 	.word	0x08011c0c
 800b664:	08010198 	.word	0x08010198

0800b668 <tcp_output_fill_options>:
}

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b668:	b538      	push	{r3, r4, r5, lr}
 800b66a:	4614      	mov	r4, r2
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b66c:	460d      	mov	r5, r1
 800b66e:	b181      	cbz	r1, 800b692 <tcp_output_fill_options+0x2a>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b670:	686b      	ldr	r3, [r5, #4]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b672:	00a4      	lsls	r4, r4, #2
 800b674:	f004 0404 	and.w	r4, r4, #4
 800b678:	3414      	adds	r4, #20
 800b67a:	441c      	add	r4, r3
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b67c:	3314      	adds	r3, #20
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b67e:	429c      	cmp	r4, r3
 800b680:	d006      	beq.n	800b690 <tcp_output_fill_options+0x28>
 800b682:	4b08      	ldr	r3, [pc, #32]	; (800b6a4 <tcp_output_fill_options+0x3c>)
 800b684:	f240 7275 	movw	r2, #1909	; 0x775
 800b688:	4907      	ldr	r1, [pc, #28]	; (800b6a8 <tcp_output_fill_options+0x40>)
 800b68a:	4808      	ldr	r0, [pc, #32]	; (800b6ac <tcp_output_fill_options+0x44>)
 800b68c:	f003 fc32 	bl	800eef4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b690:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b692:	4b04      	ldr	r3, [pc, #16]	; (800b6a4 <tcp_output_fill_options+0x3c>)
 800b694:	f240 7256 	movw	r2, #1878	; 0x756
 800b698:	4905      	ldr	r1, [pc, #20]	; (800b6b0 <tcp_output_fill_options+0x48>)
 800b69a:	4804      	ldr	r0, [pc, #16]	; (800b6ac <tcp_output_fill_options+0x44>)
 800b69c:	f003 fc2a 	bl	800eef4 <iprintf>
 800b6a0:	e7e6      	b.n	800b670 <tcp_output_fill_options+0x8>
 800b6a2:	bf00      	nop
 800b6a4:	08011bd8 	.word	0x08011bd8
 800b6a8:	08011c5c 	.word	0x08011c5c
 800b6ac:	08010198 	.word	0x08010198
 800b6b0:	08011c34 	.word	0x08011c34

0800b6b4 <tcp_pbuf_prealloc>:
{
 800b6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b8:	4680      	mov	r8, r0
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	4615      	mov	r5, r2
 800b6be:	9e08      	ldr	r6, [sp, #32]
 800b6c0:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b6c4:	461f      	mov	r7, r3
 800b6c6:	b1cb      	cbz	r3, 800b6fc <tcp_pbuf_prealloc+0x48>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b6c8:	b1fe      	cbz	r6, 800b70a <tcp_pbuf_prealloc+0x56>
  if (length < max_length) {
 800b6ca:	42ac      	cmp	r4, r5
 800b6cc:	d229      	bcs.n	800b722 <tcp_pbuf_prealloc+0x6e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800b6ce:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b6d2:	f013 0f02 	tst.w	r3, #2
 800b6d6:	d108      	bne.n	800b6ea <tcp_pbuf_prealloc+0x36>
 800b6d8:	8b73      	ldrh	r3, [r6, #26]
 800b6da:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b6de:	d139      	bne.n	800b754 <tcp_pbuf_prealloc+0xa0>
        (!(pcb->flags & TF_NODELAY) &&
 800b6e0:	f1b9 0f00 	cmp.w	r9, #0
 800b6e4:	d001      	beq.n	800b6ea <tcp_pbuf_prealloc+0x36>
         (!first_seg ||
 800b6e6:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 800b6e8:	b1b3      	cbz	r3, 800b718 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800b6ea:	f204 211b 	addw	r1, r4, #539	; 0x21b
 800b6ee:	f021 0103 	bic.w	r1, r1, #3
 800b6f2:	428d      	cmp	r5, r1
 800b6f4:	bf28      	it	cs
 800b6f6:	460d      	movcs	r5, r1
 800b6f8:	b2a9      	uxth	r1, r5
 800b6fa:	e013      	b.n	800b724 <tcp_pbuf_prealloc+0x70>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800b6fc:	4b16      	ldr	r3, [pc, #88]	; (800b758 <tcp_pbuf_prealloc+0xa4>)
 800b6fe:	22e8      	movs	r2, #232	; 0xe8
 800b700:	4916      	ldr	r1, [pc, #88]	; (800b75c <tcp_pbuf_prealloc+0xa8>)
 800b702:	4817      	ldr	r0, [pc, #92]	; (800b760 <tcp_pbuf_prealloc+0xac>)
 800b704:	f003 fbf6 	bl	800eef4 <iprintf>
 800b708:	e7de      	b.n	800b6c8 <tcp_pbuf_prealloc+0x14>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800b70a:	4b13      	ldr	r3, [pc, #76]	; (800b758 <tcp_pbuf_prealloc+0xa4>)
 800b70c:	22e9      	movs	r2, #233	; 0xe9
 800b70e:	4915      	ldr	r1, [pc, #84]	; (800b764 <tcp_pbuf_prealloc+0xb0>)
 800b710:	4813      	ldr	r0, [pc, #76]	; (800b760 <tcp_pbuf_prealloc+0xac>)
 800b712:	f003 fbef 	bl	800eef4 <iprintf>
 800b716:	e7d8      	b.n	800b6ca <tcp_pbuf_prealloc+0x16>
          pcb->unsent != NULL ||
 800b718:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1e5      	bne.n	800b6ea <tcp_pbuf_prealloc+0x36>
  u16_t alloc = length;
 800b71e:	4621      	mov	r1, r4
 800b720:	e000      	b.n	800b724 <tcp_pbuf_prealloc+0x70>
 800b722:	4621      	mov	r1, r4
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800b724:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b728:	4640      	mov	r0, r8
 800b72a:	f7fc ff5d 	bl	80085e8 <pbuf_alloc>
  if (p == NULL) {
 800b72e:	4605      	mov	r5, r0
 800b730:	b168      	cbz	r0, 800b74e <tcp_pbuf_prealloc+0x9a>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800b732:	6803      	ldr	r3, [r0, #0]
 800b734:	b133      	cbz	r3, 800b744 <tcp_pbuf_prealloc+0x90>
 800b736:	4b08      	ldr	r3, [pc, #32]	; (800b758 <tcp_pbuf_prealloc+0xa4>)
 800b738:	f240 120b 	movw	r2, #267	; 0x10b
 800b73c:	490a      	ldr	r1, [pc, #40]	; (800b768 <tcp_pbuf_prealloc+0xb4>)
 800b73e:	4808      	ldr	r0, [pc, #32]	; (800b760 <tcp_pbuf_prealloc+0xac>)
 800b740:	f003 fbd8 	bl	800eef4 <iprintf>
  *oversize = p->len - length;
 800b744:	896b      	ldrh	r3, [r5, #10]
 800b746:	1b1b      	subs	r3, r3, r4
 800b748:	803b      	strh	r3, [r7, #0]
  p->len = p->tot_len = length;
 800b74a:	812c      	strh	r4, [r5, #8]
 800b74c:	816c      	strh	r4, [r5, #10]
}
 800b74e:	4628      	mov	r0, r5
 800b750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t alloc = length;
 800b754:	4621      	mov	r1, r4
 800b756:	e7e5      	b.n	800b724 <tcp_pbuf_prealloc+0x70>
 800b758:	08011bd8 	.word	0x08011bd8
 800b75c:	08011c70 	.word	0x08011c70
 800b760:	08010198 	.word	0x08010198
 800b764:	08011c94 	.word	0x08011c94
 800b768:	08011cb4 	.word	0x08011cb4

0800b76c <tcp_create_segment>:
{
 800b76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b770:	460e      	mov	r6, r1
 800b772:	4617      	mov	r7, r2
 800b774:	4698      	mov	r8, r3
 800b776:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b77a:	4681      	mov	r9, r0
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d041      	beq.n	800b804 <tcp_create_segment+0x98>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b780:	2e00      	cmp	r6, #0
 800b782:	d046      	beq.n	800b812 <tcp_create_segment+0xa6>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b784:	ea4f 058a 	mov.w	r5, sl, lsl #2
 800b788:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800b78c:	2003      	movs	r0, #3
 800b78e:	f7fc fbc9 	bl	8007f24 <memp_malloc>
 800b792:	4604      	mov	r4, r0
 800b794:	2800      	cmp	r0, #0
 800b796:	d043      	beq.n	800b820 <tcp_create_segment+0xb4>
  seg->flags = optflags;
 800b798:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 800b79c:	2300      	movs	r3, #0
 800b79e:	6003      	str	r3, [r0, #0]
  seg->p = p;
 800b7a0:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b7a2:	fa1f fa85 	uxth.w	sl, r5
 800b7a6:	8933      	ldrh	r3, [r6, #8]
 800b7a8:	4553      	cmp	r3, sl
 800b7aa:	d33d      	bcc.n	800b828 <tcp_create_segment+0xbc>
  seg->len = p->tot_len - optlen;
 800b7ac:	8931      	ldrh	r1, [r6, #8]
 800b7ae:	eba1 010a 	sub.w	r1, r1, sl
 800b7b2:	8121      	strh	r1, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800b7b4:	2114      	movs	r1, #20
 800b7b6:	4630      	mov	r0, r6
 800b7b8:	f7fc fe61 	bl	800847e <pbuf_add_header>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d13a      	bne.n	800b836 <tcp_create_segment+0xca>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	685e      	ldr	r6, [r3, #4]
 800b7c4:	60e6      	str	r6, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800b7c6:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800b7ca:	f7fc f85d 	bl	8007888 <lwip_htons>
 800b7ce:	8030      	strh	r0, [r6, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800b7d0:	68e6      	ldr	r6, [r4, #12]
 800b7d2:	f8b9 0018 	ldrh.w	r0, [r9, #24]
 800b7d6:	f7fc f857 	bl	8007888 <lwip_htons>
 800b7da:	8070      	strh	r0, [r6, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800b7dc:	68e6      	ldr	r6, [r4, #12]
 800b7de:	4640      	mov	r0, r8
 800b7e0:	f7fc f857 	bl	8007892 <lwip_htonl>
 800b7e4:	6070      	str	r0, [r6, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800b7e6:	68e6      	ldr	r6, [r4, #12]
 800b7e8:	02a8      	lsls	r0, r5, #10
 800b7ea:	f500 40a0 	add.w	r0, r0, #20480	; 0x5000
 800b7ee:	4338      	orrs	r0, r7
 800b7f0:	f7fc f84a 	bl	8007888 <lwip_htons>
 800b7f4:	81b0      	strh	r0, [r6, #12]
  seg->tcphdr->urgp = 0;
 800b7f6:	68e3      	ldr	r3, [r4, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	749a      	strb	r2, [r3, #18]
 800b7fc:	74da      	strb	r2, [r3, #19]
}
 800b7fe:	4620      	mov	r0, r4
 800b800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800b804:	4b0e      	ldr	r3, [pc, #56]	; (800b840 <tcp_create_segment+0xd4>)
 800b806:	22a3      	movs	r2, #163	; 0xa3
 800b808:	490e      	ldr	r1, [pc, #56]	; (800b844 <tcp_create_segment+0xd8>)
 800b80a:	480f      	ldr	r0, [pc, #60]	; (800b848 <tcp_create_segment+0xdc>)
 800b80c:	f003 fb72 	bl	800eef4 <iprintf>
 800b810:	e7b6      	b.n	800b780 <tcp_create_segment+0x14>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800b812:	4b0b      	ldr	r3, [pc, #44]	; (800b840 <tcp_create_segment+0xd4>)
 800b814:	22a4      	movs	r2, #164	; 0xa4
 800b816:	490d      	ldr	r1, [pc, #52]	; (800b84c <tcp_create_segment+0xe0>)
 800b818:	480b      	ldr	r0, [pc, #44]	; (800b848 <tcp_create_segment+0xdc>)
 800b81a:	f003 fb6b 	bl	800eef4 <iprintf>
 800b81e:	e7b1      	b.n	800b784 <tcp_create_segment+0x18>
    pbuf_free(p);
 800b820:	4630      	mov	r0, r6
 800b822:	f7fc fe71 	bl	8008508 <pbuf_free>
    return NULL;
 800b826:	e7ea      	b.n	800b7fe <tcp_create_segment+0x92>
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800b828:	4b05      	ldr	r3, [pc, #20]	; (800b840 <tcp_create_segment+0xd4>)
 800b82a:	22b0      	movs	r2, #176	; 0xb0
 800b82c:	4908      	ldr	r1, [pc, #32]	; (800b850 <tcp_create_segment+0xe4>)
 800b82e:	4806      	ldr	r0, [pc, #24]	; (800b848 <tcp_create_segment+0xdc>)
 800b830:	f003 fb60 	bl	800eef4 <iprintf>
 800b834:	e7ba      	b.n	800b7ac <tcp_create_segment+0x40>
    tcp_seg_free(seg);
 800b836:	4620      	mov	r0, r4
 800b838:	f7fd fb20 	bl	8008e7c <tcp_seg_free>
    return NULL;
 800b83c:	2400      	movs	r4, #0
 800b83e:	e7de      	b.n	800b7fe <tcp_create_segment+0x92>
 800b840:	08011bd8 	.word	0x08011bd8
 800b844:	08011cc8 	.word	0x08011cc8
 800b848:	08010198 	.word	0x08010198
 800b84c:	08011ce8 	.word	0x08011ce8
 800b850:	08011d0c 	.word	0x08011d0c

0800b854 <tcp_output_alloc_header_common>:
{
 800b854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b858:	4607      	mov	r7, r0
 800b85a:	460c      	mov	r4, r1
 800b85c:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b85e:	3214      	adds	r2, #20
 800b860:	4411      	add	r1, r2
 800b862:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b866:	b289      	uxth	r1, r1
 800b868:	2022      	movs	r0, #34	; 0x22
 800b86a:	f7fc febd 	bl	80085e8 <pbuf_alloc>
  if (p != NULL) {
 800b86e:	4606      	mov	r6, r0
 800b870:	b348      	cbz	r0, 800b8c6 <tcp_output_alloc_header_common+0x72>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b872:	f104 0313 	add.w	r3, r4, #19
 800b876:	8942      	ldrh	r2, [r0, #10]
 800b878:	4293      	cmp	r3, r2
 800b87a:	da27      	bge.n	800b8cc <tcp_output_alloc_header_common+0x78>
    tcphdr = (struct tcp_hdr *)p->payload;
 800b87c:	6875      	ldr	r5, [r6, #4]
    tcphdr->src = lwip_htons(src_port);
 800b87e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800b882:	f7fc f801 	bl	8007888 <lwip_htons>
 800b886:	8028      	strh	r0, [r5, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b888:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 800b88c:	f7fb fffc 	bl	8007888 <lwip_htons>
 800b890:	8068      	strh	r0, [r5, #2]
    tcphdr->seqno = seqno_be;
 800b892:	f8c5 8004 	str.w	r8, [r5, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b896:	4638      	mov	r0, r7
 800b898:	f7fb fffb 	bl	8007892 <lwip_htonl>
 800b89c:	60a8      	str	r0, [r5, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b89e:	08a4      	lsrs	r4, r4, #2
 800b8a0:	3405      	adds	r4, #5
 800b8a2:	f89d 0020 	ldrb.w	r0, [sp, #32]
 800b8a6:	ea40 3404 	orr.w	r4, r0, r4, lsl #12
 800b8aa:	b2a0      	uxth	r0, r4
 800b8ac:	f7fb ffec 	bl	8007888 <lwip_htons>
 800b8b0:	81a8      	strh	r0, [r5, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b8b2:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
 800b8b6:	f7fb ffe7 	bl	8007888 <lwip_htons>
 800b8ba:	81e8      	strh	r0, [r5, #14]
    tcphdr->chksum = 0;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	742b      	strb	r3, [r5, #16]
 800b8c0:	746b      	strb	r3, [r5, #17]
    tcphdr->urgp = 0;
 800b8c2:	74ab      	strb	r3, [r5, #18]
 800b8c4:	74eb      	strb	r3, [r5, #19]
}
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b8cc:	4b03      	ldr	r3, [pc, #12]	; (800b8dc <tcp_output_alloc_header_common+0x88>)
 800b8ce:	f240 7223 	movw	r2, #1827	; 0x723
 800b8d2:	4903      	ldr	r1, [pc, #12]	; (800b8e0 <tcp_output_alloc_header_common+0x8c>)
 800b8d4:	4803      	ldr	r0, [pc, #12]	; (800b8e4 <tcp_output_alloc_header_common+0x90>)
 800b8d6:	f003 fb0d 	bl	800eef4 <iprintf>
 800b8da:	e7cf      	b.n	800b87c <tcp_output_alloc_header_common+0x28>
 800b8dc:	08011bd8 	.word	0x08011bd8
 800b8e0:	08011d24 	.word	0x08011d24
 800b8e4:	08010198 	.word	0x08010198

0800b8e8 <tcp_output_alloc_header>:
{
 800b8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8ea:	b085      	sub	sp, #20
 800b8ec:	460d      	mov	r5, r1
 800b8ee:	4616      	mov	r6, r2
 800b8f0:	461f      	mov	r7, r3
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b8f2:	4604      	mov	r4, r0
 800b8f4:	b1a0      	cbz	r0, 800b920 <tcp_output_alloc_header+0x38>
  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b8f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b8f8:	9303      	str	r3, [sp, #12]
 800b8fa:	2310      	movs	r3, #16
 800b8fc:	9302      	str	r3, [sp, #8]
 800b8fe:	8b23      	ldrh	r3, [r4, #24]
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	8ae3      	ldrh	r3, [r4, #22]
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	463b      	mov	r3, r7
 800b908:	4632      	mov	r2, r6
 800b90a:	4629      	mov	r1, r5
 800b90c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b90e:	f7ff ffa1 	bl	800b854 <tcp_output_alloc_header_common>
  if (p != NULL) {
 800b912:	b118      	cbz	r0, 800b91c <tcp_output_alloc_header+0x34>
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b914:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800b916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b918:	4413      	add	r3, r2
 800b91a:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800b91c:	b005      	add	sp, #20
 800b91e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b920:	4b03      	ldr	r3, [pc, #12]	; (800b930 <tcp_output_alloc_header+0x48>)
 800b922:	f240 7242 	movw	r2, #1858	; 0x742
 800b926:	4903      	ldr	r1, [pc, #12]	; (800b934 <tcp_output_alloc_header+0x4c>)
 800b928:	4803      	ldr	r0, [pc, #12]	; (800b938 <tcp_output_alloc_header+0x50>)
 800b92a:	f003 fae3 	bl	800eef4 <iprintf>
 800b92e:	e7e2      	b.n	800b8f6 <tcp_output_alloc_header+0xe>
 800b930:	08011bd8 	.word	0x08011bd8
 800b934:	08011d54 	.word	0x08011d54
 800b938:	08010198 	.word	0x08010198

0800b93c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b93e:	b085      	sub	sp, #20
 800b940:	4604      	mov	r4, r0
 800b942:	4616      	mov	r6, r2
 800b944:	461d      	mov	r5, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b946:	460f      	mov	r7, r1
 800b948:	b1c9      	cbz	r1, 800b97e <tcp_output_control_segment+0x42>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b94a:	b374      	cbz	r4, 800b9aa <tcp_output_control_segment+0x6e>
 800b94c:	7a20      	ldrb	r0, [r4, #8]
 800b94e:	b9f0      	cbnz	r0, 800b98e <tcp_output_control_segment+0x52>
    return ip_route(src, dst);
 800b950:	4628      	mov	r0, r5
 800b952:	f002 f947 	bl	800dbe4 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800b956:	4602      	mov	r2, r0
 800b958:	b308      	cbz	r0, 800b99e <tcp_output_control_segment+0x62>
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b95a:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800b95c:	7aa1      	ldrb	r1, [r4, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b95e:	9202      	str	r2, [sp, #8]
 800b960:	2206      	movs	r2, #6
 800b962:	9201      	str	r2, [sp, #4]
 800b964:	9100      	str	r1, [sp, #0]
 800b966:	462a      	mov	r2, r5
 800b968:	4631      	mov	r1, r6
 800b96a:	4638      	mov	r0, r7
 800b96c:	f002 fac6 	bl	800defc <ip4_output_if>
 800b970:	4604      	mov	r4, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b972:	4638      	mov	r0, r7
 800b974:	f7fc fdc8 	bl	8008508 <pbuf_free>
  return err;
}
 800b978:	4620      	mov	r0, r4
 800b97a:	b005      	add	sp, #20
 800b97c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b97e:	4b0f      	ldr	r3, [pc, #60]	; (800b9bc <tcp_output_control_segment+0x80>)
 800b980:	f240 7287 	movw	r2, #1927	; 0x787
 800b984:	490e      	ldr	r1, [pc, #56]	; (800b9c0 <tcp_output_control_segment+0x84>)
 800b986:	480f      	ldr	r0, [pc, #60]	; (800b9c4 <tcp_output_control_segment+0x88>)
 800b988:	f003 fab4 	bl	800eef4 <iprintf>
 800b98c:	e7dd      	b.n	800b94a <tcp_output_control_segment+0xe>
    return netif_get_by_index(pcb->netif_idx);
 800b98e:	f7fc fcc7 	bl	8008320 <netif_get_by_index>
  if (netif == NULL) {
 800b992:	4602      	mov	r2, r0
 800b994:	2800      	cmp	r0, #0
 800b996:	d1e0      	bne.n	800b95a <tcp_output_control_segment+0x1e>
    err = ERR_RTE;
 800b998:	f06f 0403 	mvn.w	r4, #3
 800b99c:	e7e9      	b.n	800b972 <tcp_output_control_segment+0x36>
 800b99e:	f06f 0403 	mvn.w	r4, #3
 800b9a2:	e7e6      	b.n	800b972 <tcp_output_control_segment+0x36>
 800b9a4:	f06f 0403 	mvn.w	r4, #3
 800b9a8:	e7e3      	b.n	800b972 <tcp_output_control_segment+0x36>
    return ip_route(src, dst);
 800b9aa:	4628      	mov	r0, r5
 800b9ac:	f002 f91a 	bl	800dbe4 <ip4_route>
  if (netif == NULL) {
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d0f6      	beq.n	800b9a4 <tcp_output_control_segment+0x68>
      tos = 0;
 800b9b6:	2100      	movs	r1, #0
      ttl = TCP_TTL;
 800b9b8:	23ff      	movs	r3, #255	; 0xff
 800b9ba:	e7d0      	b.n	800b95e <tcp_output_control_segment+0x22>
 800b9bc:	08011bd8 	.word	0x08011bd8
 800b9c0:	08011d7c 	.word	0x08011d7c
 800b9c4:	08010198 	.word	0x08010198

0800b9c8 <tcp_write>:
{
 800b9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9cc:	b091      	sub	sp, #68	; 0x44
 800b9ce:	9107      	str	r1, [sp, #28]
 800b9d0:	930a      	str	r3, [sp, #40]	; 0x28
  u16_t oversize = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800b9d8:	b1c0      	cbz	r0, 800ba0c <tcp_write+0x44>
 800b9da:	4692      	mov	sl, r2
 800b9dc:	4680      	mov	r8, r0
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800b9de:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800b9e0:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b9e4:	085b      	lsrs	r3, r3, #1
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	bf28      	it	cs
 800b9ea:	4613      	movcs	r3, r2
 800b9ec:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	bf08      	it	eq
 800b9f2:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800b9f4:	9b07      	ldr	r3, [sp, #28]
 800b9f6:	b19b      	cbz	r3, 800ba20 <tcp_write+0x58>
  if ((pcb->state != ESTABLISHED) &&
 800b9f8:	7d03      	ldrb	r3, [r0, #20]
 800b9fa:	2b07      	cmp	r3, #7
 800b9fc:	d01a      	beq.n	800ba34 <tcp_write+0x6c>
      (pcb->state != CLOSE_WAIT) &&
 800b9fe:	3b02      	subs	r3, #2
 800ba00:	b2db      	uxtb	r3, r3
 800ba02:	2b02      	cmp	r3, #2
 800ba04:	d916      	bls.n	800ba34 <tcp_write+0x6c>
    return ERR_CONN;
 800ba06:	f06f 000a 	mvn.w	r0, #10
  if (err != ERR_OK) {
 800ba0a:	e203      	b.n	800be14 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800ba0c:	4ba5      	ldr	r3, [pc, #660]	; (800bca4 <tcp_write+0x2dc>)
 800ba0e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ba12:	49a5      	ldr	r1, [pc, #660]	; (800bca8 <tcp_write+0x2e0>)
 800ba14:	48a5      	ldr	r0, [pc, #660]	; (800bcac <tcp_write+0x2e4>)
 800ba16:	f003 fa6d 	bl	800eef4 <iprintf>
 800ba1a:	f06f 000f 	mvn.w	r0, #15
 800ba1e:	e1f9      	b.n	800be14 <tcp_write+0x44c>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ba20:	4ba0      	ldr	r3, [pc, #640]	; (800bca4 <tcp_write+0x2dc>)
 800ba22:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ba26:	49a2      	ldr	r1, [pc, #648]	; (800bcb0 <tcp_write+0x2e8>)
 800ba28:	48a0      	ldr	r0, [pc, #640]	; (800bcac <tcp_write+0x2e4>)
 800ba2a:	f003 fa63 	bl	800eef4 <iprintf>
 800ba2e:	f06f 000f 	mvn.w	r0, #15
 800ba32:	e1ef      	b.n	800be14 <tcp_write+0x44c>
  } else if (len == 0) {
 800ba34:	f1ba 0f00 	cmp.w	sl, #0
 800ba38:	d039      	beq.n	800baae <tcp_write+0xe6>
  if (len > pcb->snd_buf) {
 800ba3a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800ba3e:	4553      	cmp	r3, sl
 800ba40:	d310      	bcc.n	800ba64 <tcp_write+0x9c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ba42:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800ba46:	2b08      	cmp	r3, #8
 800ba48:	d815      	bhi.n	800ba76 <tcp_write+0xae>
  if (pcb->snd_queuelen != 0) {
 800ba4a:	b32b      	cbz	r3, 800ba98 <tcp_write+0xd0>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ba4c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ba50:	bb6b      	cbnz	r3, 800baae <tcp_write+0xe6>
 800ba52:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800ba56:	b1bb      	cbz	r3, 800ba88 <tcp_write+0xc0>
  queuelen = pcb->snd_queuelen;
 800ba58:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800ba5c:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800ba60:	464b      	mov	r3, r9
 800ba62:	e02c      	b.n	800babe <tcp_write+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba64:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800ba68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba6c:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	e1ce      	b.n	800be14 <tcp_write+0x44c>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba76:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800ba7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba7e:	f8a8 301a 	strh.w	r3, [r8, #26]
    return ERR_MEM;
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	e1c5      	b.n	800be14 <tcp_write+0x44c>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ba88:	4b86      	ldr	r3, [pc, #536]	; (800bca4 <tcp_write+0x2dc>)
 800ba8a:	f240 1255 	movw	r2, #341	; 0x155
 800ba8e:	4989      	ldr	r1, [pc, #548]	; (800bcb4 <tcp_write+0x2ec>)
 800ba90:	4886      	ldr	r0, [pc, #536]	; (800bcac <tcp_write+0x2e4>)
 800ba92:	f003 fa2f 	bl	800eef4 <iprintf>
 800ba96:	e00a      	b.n	800baae <tcp_write+0xe6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ba98:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d04f      	beq.n	800bb40 <tcp_write+0x178>
 800baa0:	4b80      	ldr	r3, [pc, #512]	; (800bca4 <tcp_write+0x2dc>)
 800baa2:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800baa6:	4984      	ldr	r1, [pc, #528]	; (800bcb8 <tcp_write+0x2f0>)
 800baa8:	4880      	ldr	r0, [pc, #512]	; (800bcac <tcp_write+0x2e4>)
 800baaa:	f003 fa23 	bl	800eef4 <iprintf>
  queuelen = pcb->snd_queuelen;
 800baae:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800bab2:	f8d8 906c 	ldr.w	r9, [r8, #108]	; 0x6c
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	d047      	beq.n	800bb4c <tcp_write+0x184>
 800babc:	464b      	mov	r3, r9
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800babe:	9309      	str	r3, [sp, #36]	; 0x24
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1fb      	bne.n	800babe <tcp_write+0xf6>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800bac6:	4699      	mov	r9, r3
 800bac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800baca:	7a9c      	ldrb	r4, [r3, #10]
 800bacc:	00a4      	lsls	r4, r4, #2
 800bace:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bad2:	891b      	ldrh	r3, [r3, #8]
 800bad4:	4423      	add	r3, r4
 800bad6:	459b      	cmp	fp, r3
 800bad8:	db4f      	blt.n	800bb7a <tcp_write+0x1b2>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800bada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800badc:	891b      	ldrh	r3, [r3, #8]
 800bade:	ebab 0303 	sub.w	r3, fp, r3
 800bae2:	1b1c      	subs	r4, r3, r4
 800bae4:	b2a3      	uxth	r3, r4
 800bae6:	930b      	str	r3, [sp, #44]	; 0x2c
    oversize = pcb->unsent_oversize;
 800bae8:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800baec:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
    if (oversize > 0) {
 800baf0:	2c00      	cmp	r4, #0
 800baf2:	d05b      	beq.n	800bbac <tcp_write+0x1e4>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800baf4:	429c      	cmp	r4, r3
 800baf6:	d848      	bhi.n	800bb8a <tcp_write+0x1c2>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800baf8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bafc:	461c      	mov	r4, r3
 800bafe:	4553      	cmp	r3, sl
 800bb00:	bf28      	it	cs
 800bb02:	4654      	movcs	r4, sl
 800bb04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bb06:	4294      	cmp	r4, r2
 800bb08:	bf28      	it	cs
 800bb0a:	4614      	movcs	r4, r2
 800bb0c:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 800bb0e:	1b1b      	subs	r3, r3, r4
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
      space -= oversize_used;
 800bb16:	1b12      	subs	r2, r2, r4
 800bb18:	b292      	uxth	r2, r2
 800bb1a:	920b      	str	r2, [sp, #44]	; 0x2c
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f000 8082 	beq.w	800bc26 <tcp_write+0x25e>
 800bb22:	45a2      	cmp	sl, r4
 800bb24:	d139      	bne.n	800bb9a <tcp_write+0x1d2>
 800bb26:	9f09      	ldr	r7, [sp, #36]	; 0x24
  if (oversize_used > 0) {
 800bb28:	2c00      	cmp	r4, #0
 800bb2a:	f000 8266 	beq.w	800bffa <tcp_write+0x632>
 800bb2e:	46cb      	mov	fp, r9
 800bb30:	2300      	movs	r3, #0
 800bb32:	930b      	str	r3, [sp, #44]	; 0x2c
    for (p = last_unsent->p; p; p = p->next) {
 800bb34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb36:	685d      	ldr	r5, [r3, #4]
 800bb38:	2d00      	cmp	r5, #0
 800bb3a:	f040 8187 	bne.w	800be4c <tcp_write+0x484>
 800bb3e:	e198      	b.n	800be72 <tcp_write+0x4aa>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800bb40:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1ab      	bne.n	800baa0 <tcp_write+0xd8>
  queuelen = pcb->snd_queuelen;
 800bb48:	f8b8 6066 	ldrh.w	r6, [r8, #102]	; 0x66
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bb4c:	f8b8 4068 	ldrh.w	r4, [r8, #104]	; 0x68
 800bb50:	2c00      	cmp	r4, #0
 800bb52:	f040 8094 	bne.w	800bc7e <tcp_write+0x2b6>
  u16_t extendlen = 0;
 800bb56:	940b      	str	r4, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800bb58:	940d      	str	r4, [sp, #52]	; 0x34
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800bb5e:	4699      	mov	r9, r3
  while (pos < len) {
 800bb60:	45a2      	cmp	sl, r4
 800bb62:	f240 816e 	bls.w	800be42 <tcp_write+0x47a>
 800bb66:	2300      	movs	r3, #0
 800bb68:	9306      	str	r3, [sp, #24]
 800bb6a:	9305      	str	r3, [sp, #20]
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bb6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	9308      	str	r3, [sp, #32]
 800bb74:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800bb78:	e110      	b.n	800bd9c <tcp_write+0x3d4>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800bb7a:	4b4a      	ldr	r3, [pc, #296]	; (800bca4 <tcp_write+0x2dc>)
 800bb7c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bb80:	494e      	ldr	r1, [pc, #312]	; (800bcbc <tcp_write+0x2f4>)
 800bb82:	484a      	ldr	r0, [pc, #296]	; (800bcac <tcp_write+0x2e4>)
 800bb84:	f003 f9b6 	bl	800eef4 <iprintf>
 800bb88:	e7a7      	b.n	800bada <tcp_write+0x112>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800bb8a:	4b46      	ldr	r3, [pc, #280]	; (800bca4 <tcp_write+0x2dc>)
 800bb8c:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800bb90:	494b      	ldr	r1, [pc, #300]	; (800bcc0 <tcp_write+0x2f8>)
 800bb92:	4846      	ldr	r0, [pc, #280]	; (800bcac <tcp_write+0x2e4>)
 800bb94:	f003 f9ae 	bl	800eef4 <iprintf>
 800bb98:	e7ae      	b.n	800baf8 <tcp_write+0x130>
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800bb9a:	4b42      	ldr	r3, [pc, #264]	; (800bca4 <tcp_write+0x2dc>)
 800bb9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bba0:	4948      	ldr	r1, [pc, #288]	; (800bcc4 <tcp_write+0x2fc>)
 800bba2:	4842      	ldr	r0, [pc, #264]	; (800bcac <tcp_write+0x2e4>)
 800bba4:	f003 f9a6 	bl	800eef4 <iprintf>
 800bba8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bbaa:	e000      	b.n	800bbae <tcp_write+0x1e6>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bbac:	464f      	mov	r7, r9
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800bbae:	45a2      	cmp	sl, r4
 800bbb0:	d9ba      	bls.n	800bb28 <tcp_write+0x160>
 800bbb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bbb4:	2a00      	cmp	r2, #0
 800bbb6:	d070      	beq.n	800bc9a <tcp_write+0x2d2>
 800bbb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbba:	891b      	ldrh	r3, [r3, #8]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d06e      	beq.n	800bc9e <tcp_write+0x2d6>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800bbc0:	ebaa 0704 	sub.w	r7, sl, r4
 800bbc4:	4297      	cmp	r7, r2
 800bbc6:	bfa8      	it	ge
 800bbc8:	4617      	movge	r7, r2
 800bbca:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bbcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbce:	f013 0f01 	tst.w	r3, #1
 800bbd2:	d12a      	bne.n	800bc2a <tcp_write+0x262>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800bbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd6:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800bbda:	464a      	mov	r2, r9
 800bbdc:	4613      	mov	r3, r2
 800bbde:	6812      	ldr	r2, [r2, #0]
 800bbe0:	2a00      	cmp	r2, #0
 800bbe2:	d1fb      	bne.n	800bbdc <tcp_write+0x214>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bbe4:	4691      	mov	r9, r2
 800bbe6:	7b1a      	ldrb	r2, [r3, #12]
 800bbe8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 800bbec:	d105      	bne.n	800bbfa <tcp_write+0x232>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800bbee:	895a      	ldrh	r2, [r3, #10]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800bbf4:	9a07      	ldr	r2, [sp, #28]
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d035      	beq.n	800bc66 <tcp_write+0x29e>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	2000      	movs	r0, #0
 800bc00:	f7fc fcf2 	bl	80085e8 <pbuf_alloc>
 800bc04:	4681      	mov	r9, r0
 800bc06:	2800      	cmp	r0, #0
 800bc08:	f000 81d6 	beq.w	800bfb8 <tcp_write+0x5f0>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800bc0c:	9b07      	ldr	r3, [sp, #28]
 800bc0e:	4423      	add	r3, r4
 800bc10:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 800bc12:	f7fc fdf1 	bl	80087f8 <pbuf_clen>
 800bc16:	4406      	add	r6, r0
 800bc18:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	930b      	str	r3, [sp, #44]	; 0x2c
      pos += seglen;
 800bc1e:	4425      	add	r5, r4
 800bc20:	940d      	str	r4, [sp, #52]	; 0x34
 800bc22:	b2ac      	uxth	r4, r5
 800bc24:	e79c      	b.n	800bb60 <tcp_write+0x198>
 800bc26:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800bc28:	e7c1      	b.n	800bbae <tcp_write+0x1e6>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	9302      	str	r3, [sp, #8]
 800bc2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc30:	9301      	str	r3, [sp, #4]
 800bc32:	f8cd 8000 	str.w	r8, [sp]
 800bc36:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800bc3a:	4629      	mov	r1, r5
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	f7ff fd39 	bl	800b6b4 <tcp_pbuf_prealloc>
 800bc42:	4681      	mov	r9, r0
 800bc44:	2800      	cmp	r0, #0
 800bc46:	f000 81b7 	beq.w	800bfb8 <tcp_write+0x5f0>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800bc4a:	462a      	mov	r2, r5
 800bc4c:	9b07      	ldr	r3, [sp, #28]
 800bc4e:	1919      	adds	r1, r3, r4
 800bc50:	6840      	ldr	r0, [r0, #4]
 800bc52:	f003 f88a 	bl	800ed6a <memcpy>
        queuelen += pbuf_clen(concat_p);
 800bc56:	4648      	mov	r0, r9
 800bc58:	f7fc fdce 	bl	80087f8 <pbuf_clen>
 800bc5c:	4406      	add	r6, r0
 800bc5e:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc64:	e7db      	b.n	800bc1e <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bc66:	b90c      	cbnz	r4, 800bc6c <tcp_write+0x2a4>
          extendlen = seglen;
 800bc68:	950b      	str	r5, [sp, #44]	; 0x2c
 800bc6a:	e7d8      	b.n	800bc1e <tcp_write+0x256>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800bc6c:	4b0d      	ldr	r3, [pc, #52]	; (800bca4 <tcp_write+0x2dc>)
 800bc6e:	f240 2231 	movw	r2, #561	; 0x231
 800bc72:	4915      	ldr	r1, [pc, #84]	; (800bcc8 <tcp_write+0x300>)
 800bc74:	480d      	ldr	r0, [pc, #52]	; (800bcac <tcp_write+0x2e4>)
 800bc76:	f003 f93d 	bl	800eef4 <iprintf>
          extendlen = seglen;
 800bc7a:	950b      	str	r5, [sp, #44]	; 0x2c
 800bc7c:	e7cf      	b.n	800bc1e <tcp_write+0x256>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800bc7e:	4b09      	ldr	r3, [pc, #36]	; (800bca4 <tcp_write+0x2dc>)
 800bc80:	f240 224a 	movw	r2, #586	; 0x24a
 800bc84:	4911      	ldr	r1, [pc, #68]	; (800bccc <tcp_write+0x304>)
 800bc86:	4809      	ldr	r0, [pc, #36]	; (800bcac <tcp_write+0x2e4>)
 800bc88:	f003 f934 	bl	800eef4 <iprintf>
  u16_t extendlen = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	930b      	str	r3, [sp, #44]	; 0x2c
  u16_t oversize_used = 0;
 800bc90:	930d      	str	r3, [sp, #52]	; 0x34
  u16_t pos = 0; /* position in 'arg' data */
 800bc92:	461c      	mov	r4, r3
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800bc94:	9309      	str	r3, [sp, #36]	; 0x24
  struct pbuf *concat_p = NULL;
 800bc96:	4699      	mov	r9, r3
 800bc98:	e762      	b.n	800bb60 <tcp_write+0x198>
 800bc9a:	940d      	str	r4, [sp, #52]	; 0x34
 800bc9c:	e763      	b.n	800bb66 <tcp_write+0x19e>
 800bc9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800bca0:	940d      	str	r4, [sp, #52]	; 0x34
 800bca2:	e760      	b.n	800bb66 <tcp_write+0x19e>
 800bca4:	08011bd8 	.word	0x08011bd8
 800bca8:	08011da8 	.word	0x08011da8
 800bcac:	08010198 	.word	0x08010198
 800bcb0:	08011dc0 	.word	0x08011dc0
 800bcb4:	08011df4 	.word	0x08011df4
 800bcb8:	08011e30 	.word	0x08011e30
 800bcbc:	08011e64 	.word	0x08011e64
 800bcc0:	08011e7c 	.word	0x08011e7c
 800bcc4:	08011e9c 	.word	0x08011e9c
 800bcc8:	08011ebc 	.word	0x08011ebc
 800bccc:	08011ee8 	.word	0x08011ee8
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800bcd0:	9b06      	ldr	r3, [sp, #24]
 800bcd2:	fab3 f383 	clz	r3, r3
 800bcd6:	095b      	lsrs	r3, r3, #5
 800bcd8:	9302      	str	r3, [sp, #8]
 800bcda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	f8cd 8000 	str.w	r8, [sp]
 800bce2:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 800bce6:	465a      	mov	r2, fp
 800bce8:	4629      	mov	r1, r5
 800bcea:	2036      	movs	r0, #54	; 0x36
 800bcec:	f7ff fce2 	bl	800b6b4 <tcp_pbuf_prealloc>
 800bcf0:	4607      	mov	r7, r0
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f000 8143 	beq.w	800bf7e <tcp_write+0x5b6>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bcf8:	8943      	ldrh	r3, [r0, #10]
 800bcfa:	42ab      	cmp	r3, r5
 800bcfc:	d306      	bcc.n	800bd0c <tcp_write+0x344>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800bcfe:	462a      	mov	r2, r5
 800bd00:	9b07      	ldr	r3, [sp, #28]
 800bd02:	1919      	adds	r1, r3, r4
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f003 f830 	bl	800ed6a <memcpy>
 800bd0a:	e026      	b.n	800bd5a <tcp_write+0x392>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800bd0c:	4bae      	ldr	r3, [pc, #696]	; (800bfc8 <tcp_write+0x600>)
 800bd0e:	f240 2266 	movw	r2, #614	; 0x266
 800bd12:	49ae      	ldr	r1, [pc, #696]	; (800bfcc <tcp_write+0x604>)
 800bd14:	48ae      	ldr	r0, [pc, #696]	; (800bfd0 <tcp_write+0x608>)
 800bd16:	f003 f8ed 	bl	800eef4 <iprintf>
 800bd1a:	e7f0      	b.n	800bcfe <tcp_write+0x336>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bd1c:	4baa      	ldr	r3, [pc, #680]	; (800bfc8 <tcp_write+0x600>)
 800bd1e:	f240 2271 	movw	r2, #625	; 0x271
 800bd22:	49ac      	ldr	r1, [pc, #688]	; (800bfd4 <tcp_write+0x60c>)
 800bd24:	48aa      	ldr	r0, [pc, #680]	; (800bfd0 <tcp_write+0x608>)
 800bd26:	f003 f8e5 	bl	800eef4 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	2036      	movs	r0, #54	; 0x36
 800bd30:	f7fc fc5a 	bl	80085e8 <pbuf_alloc>
 800bd34:	4681      	mov	r9, r0
 800bd36:	2800      	cmp	r0, #0
 800bd38:	f000 8124 	beq.w	800bf84 <tcp_write+0x5bc>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800bd3c:	9b07      	ldr	r3, [sp, #28]
 800bd3e:	4423      	add	r3, r4
 800bd40:	6043      	str	r3, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800bd42:	f44f 7220 	mov.w	r2, #640	; 0x280
 800bd46:	2100      	movs	r1, #0
 800bd48:	2036      	movs	r0, #54	; 0x36
 800bd4a:	f7fc fc4d 	bl	80085e8 <pbuf_alloc>
 800bd4e:	4607      	mov	r7, r0
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d032      	beq.n	800bdba <tcp_write+0x3f2>
      pbuf_cat(p/*header*/, p2/*data*/);
 800bd54:	4649      	mov	r1, r9
 800bd56:	f7fc fd77 	bl	8008848 <pbuf_cat>
    queuelen += pbuf_clen(p);
 800bd5a:	4638      	mov	r0, r7
 800bd5c:	f7fc fd4c 	bl	80087f8 <pbuf_clen>
 800bd60:	4406      	add	r6, r0
 800bd62:	b2b6      	uxth	r6, r6
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800bd64:	2e09      	cmp	r6, #9
 800bd66:	d82e      	bhi.n	800bdc6 <tcp_write+0x3fe>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bd68:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	9200      	str	r2, [sp, #0]
 800bd70:	4423      	add	r3, r4
 800bd72:	4639      	mov	r1, r7
 800bd74:	4640      	mov	r0, r8
 800bd76:	f7ff fcf9 	bl	800b76c <tcp_create_segment>
 800bd7a:	4607      	mov	r7, r0
 800bd7c:	2800      	cmp	r0, #0
 800bd7e:	f000 8104 	beq.w	800bf8a <tcp_write+0x5c2>
    if (queue == NULL) {
 800bd82:	9b06      	ldr	r3, [sp, #24]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d050      	beq.n	800be2a <tcp_write+0x462>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800bd88:	9b05      	ldr	r3, [sp, #20]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d045      	beq.n	800be1a <tcp_write+0x452>
      prev_seg->next = seg;
 800bd8e:	9b05      	ldr	r3, [sp, #20]
 800bd90:	601f      	str	r7, [r3, #0]
    pos += seglen;
 800bd92:	442c      	add	r4, r5
 800bd94:	b2a4      	uxth	r4, r4
  while (pos < len) {
 800bd96:	45a2      	cmp	sl, r4
 800bd98:	d949      	bls.n	800be2e <tcp_write+0x466>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800bd9a:	9705      	str	r7, [sp, #20]
    u16_t left = len - pos;
 800bd9c:	ebaa 0504 	sub.w	r5, sl, r4
    u16_t seglen = LWIP_MIN(left, max_len);
 800bda0:	b2ad      	uxth	r5, r5
 800bda2:	455d      	cmp	r5, fp
 800bda4:	bf28      	it	cs
 800bda6:	465d      	movcs	r5, fp
 800bda8:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800bdaa:	9b08      	ldr	r3, [sp, #32]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d18f      	bne.n	800bcd0 <tcp_write+0x308>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800bdb0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d0b8      	beq.n	800bd2a <tcp_write+0x362>
 800bdb8:	e7b0      	b.n	800bd1c <tcp_write+0x354>
        pbuf_free(p2);
 800bdba:	4648      	mov	r0, r9
 800bdbc:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bdc0:	f7fc fba2 	bl	8008508 <pbuf_free>
        goto memerr;
 800bdc4:	e004      	b.n	800bdd0 <tcp_write+0x408>
      pbuf_free(p);
 800bdc6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bdca:	4638      	mov	r0, r7
 800bdcc:	f7fc fb9c 	bl	8008508 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bdd0:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bdd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdd8:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (concat_p != NULL) {
 800bddc:	f1b9 0f00 	cmp.w	r9, #0
 800bde0:	d002      	beq.n	800bde8 <tcp_write+0x420>
    pbuf_free(concat_p);
 800bde2:	4648      	mov	r0, r9
 800bde4:	f7fc fb90 	bl	8008508 <pbuf_free>
  if (queue != NULL) {
 800bde8:	9b06      	ldr	r3, [sp, #24]
 800bdea:	b113      	cbz	r3, 800bdf2 <tcp_write+0x42a>
    tcp_segs_free(queue);
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fd f852 	bl	8008e96 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800bdf2:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 80d8 	beq.w	800bfac <tcp_write+0x5e4>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bdfc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800be00:	2b00      	cmp	r3, #0
 800be02:	f040 80d6 	bne.w	800bfb2 <tcp_write+0x5ea>
 800be06:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f000 80c0 	beq.w	800bf90 <tcp_write+0x5c8>
  return ERR_MEM;
 800be10:	f04f 30ff 	mov.w	r0, #4294967295
}
 800be14:	b011      	add	sp, #68	; 0x44
 800be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800be1a:	4b6b      	ldr	r3, [pc, #428]	; (800bfc8 <tcp_write+0x600>)
 800be1c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800be20:	496d      	ldr	r1, [pc, #436]	; (800bfd8 <tcp_write+0x610>)
 800be22:	486b      	ldr	r0, [pc, #428]	; (800bfd0 <tcp_write+0x608>)
 800be24:	f003 f866 	bl	800eef4 <iprintf>
 800be28:	e7b1      	b.n	800bd8e <tcp_write+0x3c6>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800be2a:	9006      	str	r0, [sp, #24]
 800be2c:	e7b1      	b.n	800bd92 <tcp_write+0x3ca>
 800be2e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  if (oversize_used > 0) {
 800be32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be34:	2b00      	cmp	r3, #0
 800be36:	d052      	beq.n	800bede <tcp_write+0x516>
 800be38:	461c      	mov	r4, r3
 800be3a:	46cb      	mov	fp, r9
 800be3c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800be40:	e678      	b.n	800bb34 <tcp_write+0x16c>
  while (pos < len) {
 800be42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800be44:	2300      	movs	r3, #0
 800be46:	9306      	str	r3, [sp, #24]
 800be48:	e7f3      	b.n	800be32 <tcp_write+0x46a>
  if (oversize_used > 0) {
 800be4a:	461d      	mov	r5, r3
      p->tot_len += oversize_used;
 800be4c:	892b      	ldrh	r3, [r5, #8]
 800be4e:	4423      	add	r3, r4
 800be50:	812b      	strh	r3, [r5, #8]
      if (p->next == NULL) {
 800be52:	682b      	ldr	r3, [r5, #0]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1f8      	bne.n	800be4a <tcp_write+0x482>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800be58:	896b      	ldrh	r3, [r5, #10]
 800be5a:	6868      	ldr	r0, [r5, #4]
 800be5c:	4622      	mov	r2, r4
 800be5e:	9907      	ldr	r1, [sp, #28]
 800be60:	4418      	add	r0, r3
 800be62:	f002 ff82 	bl	800ed6a <memcpy>
        p->len += oversize_used;
 800be66:	896b      	ldrh	r3, [r5, #10]
 800be68:	4423      	add	r3, r4
 800be6a:	816b      	strh	r3, [r5, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800be6c:	682b      	ldr	r3, [r5, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d1eb      	bne.n	800be4a <tcp_write+0x482>
    last_unsent->len += oversize_used;
 800be72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be74:	8913      	ldrh	r3, [r2, #8]
 800be76:	441c      	add	r4, r3
 800be78:	8114      	strh	r4, [r2, #8]
  pcb->unsent_oversize = oversize;
 800be7a:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800be7e:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800be82:	f1bb 0f00 	cmp.w	fp, #0
 800be86:	f000 80af 	beq.w	800bfe8 <tcp_write+0x620>
    pbuf_cat(last_unsent->p, concat_p);
 800be8a:	4659      	mov	r1, fp
 800be8c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800be8e:	6860      	ldr	r0, [r4, #4]
 800be90:	f7fc fcda 	bl	8008848 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800be94:	8923      	ldrh	r3, [r4, #8]
 800be96:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 800be9a:	4413      	add	r3, r2
 800be9c:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 800be9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea0:	f8c3 9000 	str.w	r9, [r3]
  pcb->snd_lbb += len;
 800bea4:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800bea8:	4453      	add	r3, sl
 800beaa:	f8c8 305c 	str.w	r3, [r8, #92]	; 0x5c
  pcb->snd_buf -= len;
 800beae:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 800beb2:	eba3 0a0a 	sub.w	sl, r3, sl
 800beb6:	f8a8 a064 	strh.w	sl, [r8, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800beba:	f8a8 6066 	strh.w	r6, [r8, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800bebe:	b11e      	cbz	r6, 800bec8 <tcp_write+0x500>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bec0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d045      	beq.n	800bf54 <tcp_write+0x58c>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800bec8:	2f00      	cmp	r7, #0
 800beca:	d06b      	beq.n	800bfa4 <tcp_write+0x5dc>
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d06a      	beq.n	800bfa8 <tcp_write+0x5e0>
 800bed2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bed4:	f012 0f02 	tst.w	r2, #2
 800bed8:	d048      	beq.n	800bf6c <tcp_write+0x5a4>
  return ERR_OK;
 800beda:	2000      	movs	r0, #0
 800bedc:	e79a      	b.n	800be14 <tcp_write+0x44c>
  pcb->unsent_oversize = oversize;
 800bede:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bee2:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  if (concat_p != NULL) {
 800bee6:	f1b9 0f00 	cmp.w	r9, #0
 800beea:	d010      	beq.n	800bf0e <tcp_write+0x546>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800beec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beee:	b11b      	cbz	r3, 800bef8 <tcp_write+0x530>
 800bef0:	46cb      	mov	fp, r9
 800bef2:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bef6:	e7c8      	b.n	800be8a <tcp_write+0x4c2>
 800bef8:	4b33      	ldr	r3, [pc, #204]	; (800bfc8 <tcp_write+0x600>)
 800befa:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800befe:	4937      	ldr	r1, [pc, #220]	; (800bfdc <tcp_write+0x614>)
 800bf00:	4833      	ldr	r0, [pc, #204]	; (800bfd0 <tcp_write+0x608>)
 800bf02:	f002 fff7 	bl	800eef4 <iprintf>
 800bf06:	46cb      	mov	fp, r9
 800bf08:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bf0c:	e7bd      	b.n	800be8a <tcp_write+0x4c2>
 800bf0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bf10:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800bf14:	e075      	b.n	800c002 <tcp_write+0x63a>
 800bf16:	940b      	str	r4, [sp, #44]	; 0x2c
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800bf18:	4b2b      	ldr	r3, [pc, #172]	; (800bfc8 <tcp_write+0x600>)
 800bf1a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800bf1e:	4930      	ldr	r1, [pc, #192]	; (800bfe0 <tcp_write+0x618>)
 800bf20:	482b      	ldr	r0, [pc, #172]	; (800bfd0 <tcp_write+0x608>)
 800bf22:	f002 ffe7 	bl	800eef4 <iprintf>
 800bf26:	e076      	b.n	800c016 <tcp_write+0x64e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf28:	461a      	mov	r2, r3
      p->tot_len += extendlen;
 800bf2a:	890b      	ldrh	r3, [r1, #8]
 800bf2c:	4403      	add	r3, r0
 800bf2e:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf30:	6813      	ldr	r3, [r2, #0]
 800bf32:	4611      	mov	r1, r2
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d1f7      	bne.n	800bf28 <tcp_write+0x560>
    p->tot_len += extendlen;
 800bf38:	8913      	ldrh	r3, [r2, #8]
 800bf3a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf3c:	440b      	add	r3, r1
 800bf3e:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 800bf40:	8953      	ldrh	r3, [r2, #10]
 800bf42:	440b      	add	r3, r1
 800bf44:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 800bf46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf48:	8913      	ldrh	r3, [r2, #8]
 800bf4a:	440b      	add	r3, r1
 800bf4c:	8113      	strh	r3, [r2, #8]
 800bf4e:	e7a6      	b.n	800be9e <tcp_write+0x4d6>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800bf50:	460a      	mov	r2, r1
 800bf52:	e7f1      	b.n	800bf38 <tcp_write+0x570>
    LWIP_ASSERT("tcp_write: valid queue length",
 800bf54:	f8d8 306c 	ldr.w	r3, [r8, #108]	; 0x6c
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1b5      	bne.n	800bec8 <tcp_write+0x500>
 800bf5c:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <tcp_write+0x600>)
 800bf5e:	f240 3212 	movw	r2, #786	; 0x312
 800bf62:	4920      	ldr	r1, [pc, #128]	; (800bfe4 <tcp_write+0x61c>)
 800bf64:	481a      	ldr	r0, [pc, #104]	; (800bfd0 <tcp_write+0x608>)
 800bf66:	f002 ffc5 	bl	800eef4 <iprintf>
 800bf6a:	e7ad      	b.n	800bec8 <tcp_write+0x500>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800bf6c:	899c      	ldrh	r4, [r3, #12]
 800bf6e:	2008      	movs	r0, #8
 800bf70:	f7fb fc8a 	bl	8007888 <lwip_htons>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4304      	orrs	r4, r0
 800bf78:	819c      	strh	r4, [r3, #12]
  return ERR_OK;
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	e74a      	b.n	800be14 <tcp_write+0x44c>
 800bf7e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bf82:	e725      	b.n	800bdd0 <tcp_write+0x408>
 800bf84:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bf88:	e722      	b.n	800bdd0 <tcp_write+0x408>
 800bf8a:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800bf8e:	e71f      	b.n	800bdd0 <tcp_write+0x408>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800bf90:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <tcp_write+0x600>)
 800bf92:	f240 3227 	movw	r2, #807	; 0x327
 800bf96:	4913      	ldr	r1, [pc, #76]	; (800bfe4 <tcp_write+0x61c>)
 800bf98:	480d      	ldr	r0, [pc, #52]	; (800bfd0 <tcp_write+0x608>)
 800bf9a:	f002 ffab 	bl	800eef4 <iprintf>
  return ERR_MEM;
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa2:	e737      	b.n	800be14 <tcp_write+0x44c>
  return ERR_OK;
 800bfa4:	2000      	movs	r0, #0
 800bfa6:	e735      	b.n	800be14 <tcp_write+0x44c>
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e733      	b.n	800be14 <tcp_write+0x44c>
  return ERR_MEM;
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e730      	b.n	800be14 <tcp_write+0x44c>
 800bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb6:	e72d      	b.n	800be14 <tcp_write+0x44c>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800bfb8:	f8b8 301a 	ldrh.w	r3, [r8, #26]
 800bfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc0:	f8a8 301a 	strh.w	r3, [r8, #26]
  if (queue != NULL) {
 800bfc4:	e715      	b.n	800bdf2 <tcp_write+0x42a>
 800bfc6:	bf00      	nop
 800bfc8:	08011bd8 	.word	0x08011bd8
 800bfcc:	08011f18 	.word	0x08011f18
 800bfd0:	08010198 	.word	0x08010198
 800bfd4:	08011f58 	.word	0x08011f58
 800bfd8:	08011f68 	.word	0x08011f68
 800bfdc:	08011f7c 	.word	0x08011f7c
 800bfe0:	08011fb4 	.word	0x08011fb4
 800bfe4:	08011fec 	.word	0x08011fec
  } else if (extendlen > 0) {
 800bfe8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfea:	b983      	cbnz	r3, 800c00e <tcp_write+0x646>
  if (last_unsent == NULL) {
 800bfec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f47f af55 	bne.w	800be9e <tcp_write+0x4d6>
    pcb->unsent = queue;
 800bff4:	f8c8 906c 	str.w	r9, [r8, #108]	; 0x6c
 800bff8:	e754      	b.n	800bea4 <tcp_write+0x4dc>
  pcb->unsent_oversize = oversize;
 800bffa:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 800bffe:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
  } else if (extendlen > 0) {
 800c002:	2c00      	cmp	r4, #0
 800c004:	d0f2      	beq.n	800bfec <tcp_write+0x624>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800c006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d084      	beq.n	800bf16 <tcp_write+0x54e>
 800c00c:	940b      	str	r4, [sp, #44]	; 0x2c
 800c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d080      	beq.n	800bf18 <tcp_write+0x550>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800c016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c018:	6859      	ldr	r1, [r3, #4]
 800c01a:	680a      	ldr	r2, [r1, #0]
 800c01c:	2a00      	cmp	r2, #0
 800c01e:	d097      	beq.n	800bf50 <tcp_write+0x588>
 800c020:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800c022:	e782      	b.n	800bf2a <tcp_write+0x562>

0800c024 <tcp_split_unsent_seg>:
{
 800c024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c028:	b083      	sub	sp, #12
 800c02a:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c02c:	4607      	mov	r7, r0
 800c02e:	2800      	cmp	r0, #0
 800c030:	d037      	beq.n	800c0a2 <tcp_split_unsent_seg+0x7e>
  useg = pcb->unsent;
 800c032:	6efd      	ldr	r5, [r7, #108]	; 0x6c
  if (useg == NULL) {
 800c034:	2d00      	cmp	r5, #0
 800c036:	f000 80b7 	beq.w	800c1a8 <tcp_split_unsent_seg+0x184>
  if (split == 0) {
 800c03a:	2c00      	cmp	r4, #0
 800c03c:	d039      	beq.n	800c0b2 <tcp_split_unsent_seg+0x8e>
  if (useg->len <= split) {
 800c03e:	892b      	ldrh	r3, [r5, #8]
 800c040:	42a3      	cmp	r3, r4
 800c042:	f240 80b4 	bls.w	800c1ae <tcp_split_unsent_seg+0x18a>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c046:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c048:	42a3      	cmp	r3, r4
 800c04a:	d33c      	bcc.n	800c0c6 <tcp_split_unsent_seg+0xa2>
  optflags = useg->flags;
 800c04c:	f895 900a 	ldrb.w	r9, [r5, #10]
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800c050:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 800c054:	f00b 0b04 	and.w	fp, fp, #4
  remainder = useg->len - split;
 800c058:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800c05c:	ebaa 0604 	sub.w	r6, sl, r4
 800c060:	b2b6      	uxth	r6, r6
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800c062:	eb06 010b 	add.w	r1, r6, fp
 800c066:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c06a:	b289      	uxth	r1, r1
 800c06c:	2036      	movs	r0, #54	; 0x36
 800c06e:	f7fc fabb 	bl	80085e8 <pbuf_alloc>
  if (p == NULL) {
 800c072:	4680      	mov	r8, r0
 800c074:	2800      	cmp	r0, #0
 800c076:	f000 809e 	beq.w	800c1b6 <tcp_split_unsent_seg+0x192>
  offset = useg->p->tot_len - useg->len + split;
 800c07a:	6868      	ldr	r0, [r5, #4]
 800c07c:	8903      	ldrh	r3, [r0, #8]
 800c07e:	892a      	ldrh	r2, [r5, #8]
 800c080:	1a9b      	subs	r3, r3, r2
 800c082:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800c084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	4632      	mov	r2, r6
 800c08c:	4459      	add	r1, fp
 800c08e:	f7fc fcbb 	bl	8008a08 <pbuf_copy_partial>
 800c092:	42b0      	cmp	r0, r6
 800c094:	d029      	beq.n	800c0ea <tcp_split_unsent_seg+0xc6>
    pbuf_free(p);
 800c096:	4640      	mov	r0, r8
 800c098:	f7fc fa36 	bl	8008508 <pbuf_free>
  return ERR_MEM;
 800c09c:	f04f 30ff 	mov.w	r0, #4294967295
 800c0a0:	e086      	b.n	800c1b0 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800c0a2:	4b46      	ldr	r3, [pc, #280]	; (800c1bc <tcp_split_unsent_seg+0x198>)
 800c0a4:	f240 324b 	movw	r2, #843	; 0x34b
 800c0a8:	4945      	ldr	r1, [pc, #276]	; (800c1c0 <tcp_split_unsent_seg+0x19c>)
 800c0aa:	4846      	ldr	r0, [pc, #280]	; (800c1c4 <tcp_split_unsent_seg+0x1a0>)
 800c0ac:	f002 ff22 	bl	800eef4 <iprintf>
 800c0b0:	e7bf      	b.n	800c032 <tcp_split_unsent_seg+0xe>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800c0b2:	4b42      	ldr	r3, [pc, #264]	; (800c1bc <tcp_split_unsent_seg+0x198>)
 800c0b4:	f240 3253 	movw	r2, #851	; 0x353
 800c0b8:	4943      	ldr	r1, [pc, #268]	; (800c1c8 <tcp_split_unsent_seg+0x1a4>)
 800c0ba:	4842      	ldr	r0, [pc, #264]	; (800c1c4 <tcp_split_unsent_seg+0x1a0>)
 800c0bc:	f002 ff1a 	bl	800eef4 <iprintf>
    return ERR_VAL;
 800c0c0:	f06f 0005 	mvn.w	r0, #5
 800c0c4:	e074      	b.n	800c1b0 <tcp_split_unsent_seg+0x18c>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800c0c6:	4b3d      	ldr	r3, [pc, #244]	; (800c1bc <tcp_split_unsent_seg+0x198>)
 800c0c8:	f240 325b 	movw	r2, #859	; 0x35b
 800c0cc:	493f      	ldr	r1, [pc, #252]	; (800c1cc <tcp_split_unsent_seg+0x1a8>)
 800c0ce:	483d      	ldr	r0, [pc, #244]	; (800c1c4 <tcp_split_unsent_seg+0x1a0>)
 800c0d0:	f002 ff10 	bl	800eef4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800c0d4:	892b      	ldrh	r3, [r5, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1b8      	bne.n	800c04c <tcp_split_unsent_seg+0x28>
 800c0da:	4b38      	ldr	r3, [pc, #224]	; (800c1bc <tcp_split_unsent_seg+0x198>)
 800c0dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800c0e0:	493b      	ldr	r1, [pc, #236]	; (800c1d0 <tcp_split_unsent_seg+0x1ac>)
 800c0e2:	4838      	ldr	r0, [pc, #224]	; (800c1c4 <tcp_split_unsent_seg+0x1a0>)
 800c0e4:	f002 ff06 	bl	800eef4 <iprintf>
 800c0e8:	e7b0      	b.n	800c04c <tcp_split_unsent_seg+0x28>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0ea:	68eb      	ldr	r3, [r5, #12]
 800c0ec:	8998      	ldrh	r0, [r3, #12]
 800c0ee:	f7fb fbcb 	bl	8007888 <lwip_htons>
 800c0f2:	b2c6      	uxtb	r6, r0
  if (split_flags & TCP_PSH) {
 800c0f4:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800c0f8:	bf0e      	itee	eq
 800c0fa:	f006 063f 	andeq.w	r6, r6, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800c0fe:	f006 0637 	andne.w	r6, r6, #55	; 0x37
    remainder_flags |= TCP_PSH;
 800c102:	f04f 0b08 	movne.w	fp, #8
  if (split_flags & TCP_FIN) {
 800c106:	f016 0f01 	tst.w	r6, #1
    split_flags &= ~TCP_FIN;
 800c10a:	bf1c      	itt	ne
 800c10c:	f006 06fe 	andne.w	r6, r6, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 800c110:	f04b 0b01 	orrne.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800c114:	68eb      	ldr	r3, [r5, #12]
 800c116:	6858      	ldr	r0, [r3, #4]
 800c118:	f7fb fbbb 	bl	8007892 <lwip_htonl>
 800c11c:	f8cd 9000 	str.w	r9, [sp]
 800c120:	1823      	adds	r3, r4, r0
 800c122:	465a      	mov	r2, fp
 800c124:	4641      	mov	r1, r8
 800c126:	4638      	mov	r0, r7
 800c128:	f7ff fb20 	bl	800b76c <tcp_create_segment>
  if (seg == NULL) {
 800c12c:	4681      	mov	r9, r0
 800c12e:	2800      	cmp	r0, #0
 800c130:	d0b1      	beq.n	800c096 <tcp_split_unsent_seg+0x72>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800c132:	6868      	ldr	r0, [r5, #4]
 800c134:	f7fc fb60 	bl	80087f8 <pbuf_clen>
 800c138:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c13c:	1a1b      	subs	r3, r3, r0
 800c13e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800c142:	6868      	ldr	r0, [r5, #4]
 800c144:	eba4 040a 	sub.w	r4, r4, sl
 800c148:	b2a4      	uxth	r4, r4
 800c14a:	8901      	ldrh	r1, [r0, #8]
 800c14c:	4421      	add	r1, r4
 800c14e:	b289      	uxth	r1, r1
 800c150:	f7fc faf2 	bl	8008738 <pbuf_realloc>
  useg->len -= remainder;
 800c154:	892b      	ldrh	r3, [r5, #8]
 800c156:	441c      	add	r4, r3
 800c158:	812c      	strh	r4, [r5, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800c15a:	68eb      	ldr	r3, [r5, #12]
 800c15c:	899c      	ldrh	r4, [r3, #12]
 800c15e:	4630      	mov	r0, r6
 800c160:	f7fb fb92 	bl	8007888 <lwip_htons>
 800c164:	68eb      	ldr	r3, [r5, #12]
 800c166:	4304      	orrs	r4, r0
 800c168:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800c16a:	6868      	ldr	r0, [r5, #4]
 800c16c:	f7fc fb44 	bl	80087f8 <pbuf_clen>
 800c170:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c174:	4418      	add	r0, r3
 800c176:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c17a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800c17e:	f7fc fb3b 	bl	80087f8 <pbuf_clen>
 800c182:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800c186:	4418      	add	r0, r3
 800c188:	f8a7 0066 	strh.w	r0, [r7, #102]	; 0x66
  seg->next = useg->next;
 800c18c:	682b      	ldr	r3, [r5, #0]
 800c18e:	f8c9 3000 	str.w	r3, [r9]
  useg->next = seg;
 800c192:	f8c5 9000 	str.w	r9, [r5]
  if (seg->next == NULL) {
 800c196:	f8d9 3000 	ldr.w	r3, [r9]
 800c19a:	b10b      	cbz	r3, 800c1a0 <tcp_split_unsent_seg+0x17c>
  return ERR_OK;
 800c19c:	2000      	movs	r0, #0
 800c19e:	e007      	b.n	800c1b0 <tcp_split_unsent_seg+0x18c>
    pcb->unsent_oversize = 0;
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	f8a7 0068 	strh.w	r0, [r7, #104]	; 0x68
 800c1a6:	e003      	b.n	800c1b0 <tcp_split_unsent_seg+0x18c>
    return ERR_MEM;
 800c1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ac:	e000      	b.n	800c1b0 <tcp_split_unsent_seg+0x18c>
    return ERR_OK;
 800c1ae:	2000      	movs	r0, #0
}
 800c1b0:	b003      	add	sp, #12
 800c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 800c1b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ba:	e7f9      	b.n	800c1b0 <tcp_split_unsent_seg+0x18c>
 800c1bc:	08011bd8 	.word	0x08011bd8
 800c1c0:	0801200c 	.word	0x0801200c
 800c1c4:	08010198 	.word	0x08010198
 800c1c8:	08012030 	.word	0x08012030
 800c1cc:	08012054 	.word	0x08012054
 800c1d0:	08012064 	.word	0x08012064

0800c1d4 <tcp_enqueue_flags>:
{
 800c1d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1d8:	b083      	sub	sp, #12
 800c1da:	4604      	mov	r4, r0
 800c1dc:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c1de:	f011 0703 	ands.w	r7, r1, #3
 800c1e2:	d048      	beq.n	800c276 <tcp_enqueue_flags+0xa2>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c1e4:	2c00      	cmp	r4, #0
 800c1e6:	d04e      	beq.n	800c286 <tcp_enqueue_flags+0xb2>
  if (flags & TCP_SYN) {
 800c1e8:	f3c5 0640 	ubfx	r6, r5, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800c1ec:	ea4f 0886 	mov.w	r8, r6, lsl #2
 800c1f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c1f4:	4641      	mov	r1, r8
 800c1f6:	2036      	movs	r0, #54	; 0x36
 800c1f8:	f7fc f9f6 	bl	80085e8 <pbuf_alloc>
 800c1fc:	4681      	mov	r9, r0
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d049      	beq.n	800c296 <tcp_enqueue_flags+0xc2>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c202:	8943      	ldrh	r3, [r0, #10]
 800c204:	4543      	cmp	r3, r8
 800c206:	d34d      	bcc.n	800c2a4 <tcp_enqueue_flags+0xd0>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800c208:	9600      	str	r6, [sp, #0]
 800c20a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c20c:	462a      	mov	r2, r5
 800c20e:	4649      	mov	r1, r9
 800c210:	4620      	mov	r0, r4
 800c212:	f7ff faab 	bl	800b76c <tcp_create_segment>
 800c216:	4606      	mov	r6, r0
 800c218:	2800      	cmp	r0, #0
 800c21a:	d04b      	beq.n	800c2b4 <tcp_enqueue_flags+0xe0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c21c:	68c3      	ldr	r3, [r0, #12]
 800c21e:	f013 0f03 	tst.w	r3, #3
 800c222:	d14e      	bne.n	800c2c2 <tcp_enqueue_flags+0xee>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c224:	8933      	ldrh	r3, [r6, #8]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d153      	bne.n	800c2d2 <tcp_enqueue_flags+0xfe>
  if (pcb->unsent == NULL) {
 800c22a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d058      	beq.n	800c2e2 <tcp_enqueue_flags+0x10e>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800c230:	461a      	mov	r2, r3
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1fb      	bne.n	800c230 <tcp_enqueue_flags+0x5c>
    useg->next = seg;
 800c238:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800c240:	b117      	cbz	r7, 800c248 <tcp_enqueue_flags+0x74>
    pcb->snd_lbb++;
 800c242:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800c244:	3301      	adds	r3, #1
 800c246:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800c248:	f015 0f01 	tst.w	r5, #1
 800c24c:	d003      	beq.n	800c256 <tcp_enqueue_flags+0x82>
    tcp_set_flags(pcb, TF_FIN);
 800c24e:	8b63      	ldrh	r3, [r4, #26]
 800c250:	f043 0320 	orr.w	r3, r3, #32
 800c254:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800c256:	6870      	ldr	r0, [r6, #4]
 800c258:	f7fc face 	bl	80087f8 <pbuf_clen>
 800c25c:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800c260:	4418      	add	r0, r3
 800c262:	b280      	uxth	r0, r0
 800c264:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800c268:	2800      	cmp	r0, #0
 800c26a:	d049      	beq.n	800c300 <tcp_enqueue_flags+0x12c>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c26c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d039      	beq.n	800c2e6 <tcp_enqueue_flags+0x112>
  return ERR_OK;
 800c272:	2000      	movs	r0, #0
 800c274:	e045      	b.n	800c302 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800c276:	4b24      	ldr	r3, [pc, #144]	; (800c308 <tcp_enqueue_flags+0x134>)
 800c278:	f240 4211 	movw	r2, #1041	; 0x411
 800c27c:	4923      	ldr	r1, [pc, #140]	; (800c30c <tcp_enqueue_flags+0x138>)
 800c27e:	4824      	ldr	r0, [pc, #144]	; (800c310 <tcp_enqueue_flags+0x13c>)
 800c280:	f002 fe38 	bl	800eef4 <iprintf>
 800c284:	e7ae      	b.n	800c1e4 <tcp_enqueue_flags+0x10>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800c286:	4b20      	ldr	r3, [pc, #128]	; (800c308 <tcp_enqueue_flags+0x134>)
 800c288:	f240 4213 	movw	r2, #1043	; 0x413
 800c28c:	4921      	ldr	r1, [pc, #132]	; (800c314 <tcp_enqueue_flags+0x140>)
 800c28e:	4820      	ldr	r0, [pc, #128]	; (800c310 <tcp_enqueue_flags+0x13c>)
 800c290:	f002 fe30 	bl	800eef4 <iprintf>
 800c294:	e7a8      	b.n	800c1e8 <tcp_enqueue_flags+0x14>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c296:	8b63      	ldrh	r3, [r4, #26]
 800c298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c29c:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800c29e:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a2:	e02e      	b.n	800c302 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800c2a4:	4b18      	ldr	r3, [pc, #96]	; (800c308 <tcp_enqueue_flags+0x134>)
 800c2a6:	f240 4239 	movw	r2, #1081	; 0x439
 800c2aa:	491b      	ldr	r1, [pc, #108]	; (800c318 <tcp_enqueue_flags+0x144>)
 800c2ac:	4818      	ldr	r0, [pc, #96]	; (800c310 <tcp_enqueue_flags+0x13c>)
 800c2ae:	f002 fe21 	bl	800eef4 <iprintf>
 800c2b2:	e7a9      	b.n	800c208 <tcp_enqueue_flags+0x34>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c2b4:	8b63      	ldrh	r3, [r4, #26]
 800c2b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c2ba:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2c0:	e01f      	b.n	800c302 <tcp_enqueue_flags+0x12e>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800c2c2:	4b11      	ldr	r3, [pc, #68]	; (800c308 <tcp_enqueue_flags+0x134>)
 800c2c4:	f240 4242 	movw	r2, #1090	; 0x442
 800c2c8:	4914      	ldr	r1, [pc, #80]	; (800c31c <tcp_enqueue_flags+0x148>)
 800c2ca:	4811      	ldr	r0, [pc, #68]	; (800c310 <tcp_enqueue_flags+0x13c>)
 800c2cc:	f002 fe12 	bl	800eef4 <iprintf>
 800c2d0:	e7a8      	b.n	800c224 <tcp_enqueue_flags+0x50>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <tcp_enqueue_flags+0x134>)
 800c2d4:	f240 4243 	movw	r2, #1091	; 0x443
 800c2d8:	4911      	ldr	r1, [pc, #68]	; (800c320 <tcp_enqueue_flags+0x14c>)
 800c2da:	480d      	ldr	r0, [pc, #52]	; (800c310 <tcp_enqueue_flags+0x13c>)
 800c2dc:	f002 fe0a 	bl	800eef4 <iprintf>
 800c2e0:	e7a3      	b.n	800c22a <tcp_enqueue_flags+0x56>
    pcb->unsent = seg;
 800c2e2:	66e6      	str	r6, [r4, #108]	; 0x6c
 800c2e4:	e7a9      	b.n	800c23a <tcp_enqueue_flags+0x66>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c2e6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c2e8:	b10b      	cbz	r3, 800c2ee <tcp_enqueue_flags+0x11a>
  return ERR_OK;
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e009      	b.n	800c302 <tcp_enqueue_flags+0x12e>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800c2ee:	4b06      	ldr	r3, [pc, #24]	; (800c308 <tcp_enqueue_flags+0x134>)
 800c2f0:	f240 4265 	movw	r2, #1125	; 0x465
 800c2f4:	490b      	ldr	r1, [pc, #44]	; (800c324 <tcp_enqueue_flags+0x150>)
 800c2f6:	4806      	ldr	r0, [pc, #24]	; (800c310 <tcp_enqueue_flags+0x13c>)
 800c2f8:	f002 fdfc 	bl	800eef4 <iprintf>
  return ERR_OK;
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e000      	b.n	800c302 <tcp_enqueue_flags+0x12e>
 800c300:	2000      	movs	r0, #0
}
 800c302:	b003      	add	sp, #12
 800c304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c308:	08011bd8 	.word	0x08011bd8
 800c30c:	08012074 	.word	0x08012074
 800c310:	08010198 	.word	0x08010198
 800c314:	080120cc 	.word	0x080120cc
 800c318:	080120ec 	.word	0x080120ec
 800c31c:	08012128 	.word	0x08012128
 800c320:	08012140 	.word	0x08012140
 800c324:	0801216c 	.word	0x0801216c

0800c328 <tcp_send_fin>:
{
 800c328:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c32a:	4605      	mov	r5, r0
 800c32c:	b188      	cbz	r0, 800c352 <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 800c32e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c330:	b153      	cbz	r3, 800c348 <tcp_send_fin+0x20>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800c332:	461c      	mov	r4, r3
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1fb      	bne.n	800c332 <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800c33a:	68e3      	ldr	r3, [r4, #12]
 800c33c:	8998      	ldrh	r0, [r3, #12]
 800c33e:	f7fb faa3 	bl	8007888 <lwip_htons>
 800c342:	f010 0f07 	tst.w	r0, #7
 800c346:	d00c      	beq.n	800c362 <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800c348:	2101      	movs	r1, #1
 800c34a:	4628      	mov	r0, r5
 800c34c:	f7ff ff42 	bl	800c1d4 <tcp_enqueue_flags>
}
 800c350:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800c352:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <tcp_send_fin+0x58>)
 800c354:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800c358:	490a      	ldr	r1, [pc, #40]	; (800c384 <tcp_send_fin+0x5c>)
 800c35a:	480b      	ldr	r0, [pc, #44]	; (800c388 <tcp_send_fin+0x60>)
 800c35c:	f002 fdca 	bl	800eef4 <iprintf>
 800c360:	e7e5      	b.n	800c32e <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800c362:	68e3      	ldr	r3, [r4, #12]
 800c364:	899e      	ldrh	r6, [r3, #12]
 800c366:	2001      	movs	r0, #1
 800c368:	f7fb fa8e 	bl	8007888 <lwip_htons>
 800c36c:	68e3      	ldr	r3, [r4, #12]
 800c36e:	4306      	orrs	r6, r0
 800c370:	819e      	strh	r6, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800c372:	8b6b      	ldrh	r3, [r5, #26]
 800c374:	f043 0320 	orr.w	r3, r3, #32
 800c378:	836b      	strh	r3, [r5, #26]
      return ERR_OK;
 800c37a:	2000      	movs	r0, #0
 800c37c:	e7e8      	b.n	800c350 <tcp_send_fin+0x28>
 800c37e:	bf00      	nop
 800c380:	08011bd8 	.word	0x08011bd8
 800c384:	08012194 	.word	0x08012194
 800c388:	08010198 	.word	0x08010198

0800c38c <tcp_rexmit_rto_prepare>:
{
 800c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c390:	4605      	mov	r5, r0
 800c392:	2800      	cmp	r0, #0
 800c394:	d031      	beq.n	800c3fa <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 800c396:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 800c398:	2c00      	cmp	r4, #0
 800c39a:	d036      	beq.n	800c40a <tcp_rexmit_rto_prepare+0x7e>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c39c:	6823      	ldr	r3, [r4, #0]
 800c39e:	b143      	cbz	r3, 800c3b2 <tcp_rexmit_rto_prepare+0x26>
    if (tcp_output_segment_busy(seg)) {
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f7ff f949 	bl	800b638 <tcp_output_segment_busy>
 800c3a6:	2800      	cmp	r0, #0
 800c3a8:	d132      	bne.n	800c410 <tcp_rexmit_rto_prepare+0x84>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800c3aa:	6824      	ldr	r4, [r4, #0]
 800c3ac:	6823      	ldr	r3, [r4, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1f6      	bne.n	800c3a0 <tcp_rexmit_rto_prepare+0x14>
  if (tcp_output_segment_busy(seg)) {
 800c3b2:	4620      	mov	r0, r4
 800c3b4:	f7ff f940 	bl	800b638 <tcp_output_segment_busy>
 800c3b8:	bb68      	cbnz	r0, 800c416 <tcp_rexmit_rto_prepare+0x8a>
  seg->next = pcb->unsent;
 800c3ba:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c3bc:	6023      	str	r3, [r4, #0]
  pcb->unsent = pcb->unacked;
 800c3be:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c3c0:	66eb      	str	r3, [r5, #108]	; 0x6c
  pcb->unacked = NULL;
 800c3c2:	2600      	movs	r6, #0
 800c3c4:	672e      	str	r6, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 800c3c6:	8b6b      	ldrh	r3, [r5, #26]
 800c3c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c3cc:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c3ce:	68e3      	ldr	r3, [r4, #12]
 800c3d0:	6858      	ldr	r0, [r3, #4]
 800c3d2:	f7fb fa5e 	bl	8007892 <lwip_htonl>
 800c3d6:	4607      	mov	r7, r0
 800c3d8:	f8b4 8008 	ldrh.w	r8, [r4, #8]
 800c3dc:	68e3      	ldr	r3, [r4, #12]
 800c3de:	8998      	ldrh	r0, [r3, #12]
 800c3e0:	f7fb fa52 	bl	8007888 <lwip_htons>
 800c3e4:	f010 0303 	ands.w	r3, r0, #3
 800c3e8:	bf18      	it	ne
 800c3ea:	2301      	movne	r3, #1
 800c3ec:	4447      	add	r7, r8
 800c3ee:	443b      	add	r3, r7
 800c3f0:	64eb      	str	r3, [r5, #76]	; 0x4c
  pcb->rttest = 0;
 800c3f2:	636e      	str	r6, [r5, #52]	; 0x34
  return ERR_OK;
 800c3f4:	4630      	mov	r0, r6
}
 800c3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800c3fa:	4b08      	ldr	r3, [pc, #32]	; (800c41c <tcp_rexmit_rto_prepare+0x90>)
 800c3fc:	f240 6263 	movw	r2, #1635	; 0x663
 800c400:	4907      	ldr	r1, [pc, #28]	; (800c420 <tcp_rexmit_rto_prepare+0x94>)
 800c402:	4808      	ldr	r0, [pc, #32]	; (800c424 <tcp_rexmit_rto_prepare+0x98>)
 800c404:	f002 fd76 	bl	800eef4 <iprintf>
 800c408:	e7c5      	b.n	800c396 <tcp_rexmit_rto_prepare+0xa>
    return ERR_VAL;
 800c40a:	f06f 0005 	mvn.w	r0, #5
 800c40e:	e7f2      	b.n	800c3f6 <tcp_rexmit_rto_prepare+0x6a>
      return ERR_VAL;
 800c410:	f06f 0005 	mvn.w	r0, #5
 800c414:	e7ef      	b.n	800c3f6 <tcp_rexmit_rto_prepare+0x6a>
    return ERR_VAL;
 800c416:	f06f 0005 	mvn.w	r0, #5
 800c41a:	e7ec      	b.n	800c3f6 <tcp_rexmit_rto_prepare+0x6a>
 800c41c:	08011bd8 	.word	0x08011bd8
 800c420:	080121b0 	.word	0x080121b0
 800c424:	08010198 	.word	0x08010198

0800c428 <tcp_rexmit>:
{
 800c428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c42a:	4607      	mov	r7, r0
 800c42c:	2800      	cmp	r0, #0
 800c42e:	d02c      	beq.n	800c48a <tcp_rexmit+0x62>
  if (pcb->unacked == NULL) {
 800c430:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800c432:	2e00      	cmp	r6, #0
 800c434:	d034      	beq.n	800c4a0 <tcp_rexmit+0x78>
  if (tcp_output_segment_busy(seg)) {
 800c436:	4630      	mov	r0, r6
 800c438:	f7ff f8fe 	bl	800b638 <tcp_output_segment_busy>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d132      	bne.n	800c4a6 <tcp_rexmit+0x7e>
  pcb->unacked = seg->next;
 800c440:	6833      	ldr	r3, [r6, #0]
 800c442:	673b      	str	r3, [r7, #112]	; 0x70
  cur_seg = &(pcb->unsent);
 800c444:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 800c448:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c44a:	b17b      	cbz	r3, 800c46c <tcp_rexmit+0x44>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	6858      	ldr	r0, [r3, #4]
 800c450:	f7fb fa1f 	bl	8007892 <lwip_htonl>
 800c454:	4604      	mov	r4, r0
 800c456:	68f3      	ldr	r3, [r6, #12]
 800c458:	6858      	ldr	r0, [r3, #4]
 800c45a:	f7fb fa1a 	bl	8007892 <lwip_htonl>
 800c45e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 800c460:	2c00      	cmp	r4, #0
 800c462:	da03      	bge.n	800c46c <tcp_rexmit+0x44>
    cur_seg = &((*cur_seg)->next );
 800c464:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 800c466:	682b      	ldr	r3, [r5, #0]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d1ef      	bne.n	800c44c <tcp_rexmit+0x24>
  seg->next = *cur_seg;
 800c46c:	682b      	ldr	r3, [r5, #0]
 800c46e:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 800c470:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 800c472:	6833      	ldr	r3, [r6, #0]
 800c474:	b18b      	cbz	r3, 800c49a <tcp_rexmit+0x72>
  if (pcb->nrtx < 0xFF) {
 800c476:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800c47a:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c47c:	bf1c      	itt	ne
 800c47e:	3301      	addne	r3, #1
 800c480:	f887 3042 	strbne.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 800c484:	2000      	movs	r0, #0
 800c486:	6378      	str	r0, [r7, #52]	; 0x34
}
 800c488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800c48a:	4b08      	ldr	r3, [pc, #32]	; (800c4ac <tcp_rexmit+0x84>)
 800c48c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800c490:	4907      	ldr	r1, [pc, #28]	; (800c4b0 <tcp_rexmit+0x88>)
 800c492:	4808      	ldr	r0, [pc, #32]	; (800c4b4 <tcp_rexmit+0x8c>)
 800c494:	f002 fd2e 	bl	800eef4 <iprintf>
 800c498:	e7ca      	b.n	800c430 <tcp_rexmit+0x8>
    pcb->unsent_oversize = 0;
 800c49a:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 800c49e:	e7ea      	b.n	800c476 <tcp_rexmit+0x4e>
    return ERR_VAL;
 800c4a0:	f06f 0005 	mvn.w	r0, #5
 800c4a4:	e7f0      	b.n	800c488 <tcp_rexmit+0x60>
    return ERR_VAL;
 800c4a6:	f06f 0005 	mvn.w	r0, #5
 800c4aa:	e7ed      	b.n	800c488 <tcp_rexmit+0x60>
 800c4ac:	08011bd8 	.word	0x08011bd8
 800c4b0:	080121d4 	.word	0x080121d4
 800c4b4:	08010198 	.word	0x08010198

0800c4b8 <tcp_rexmit_fast>:
{
 800c4b8:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	b130      	cbz	r0, 800c4cc <tcp_rexmit_fast+0x14>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800c4be:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c4c0:	b11b      	cbz	r3, 800c4ca <tcp_rexmit_fast+0x12>
 800c4c2:	8b63      	ldrh	r3, [r4, #26]
 800c4c4:	f013 0f04 	tst.w	r3, #4
 800c4c8:	d008      	beq.n	800c4dc <tcp_rexmit_fast+0x24>
}
 800c4ca:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800c4cc:	4b15      	ldr	r3, [pc, #84]	; (800c524 <tcp_rexmit_fast+0x6c>)
 800c4ce:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800c4d2:	4915      	ldr	r1, [pc, #84]	; (800c528 <tcp_rexmit_fast+0x70>)
 800c4d4:	4815      	ldr	r0, [pc, #84]	; (800c52c <tcp_rexmit_fast+0x74>)
 800c4d6:	f002 fd0d 	bl	800eef4 <iprintf>
 800c4da:	e7f0      	b.n	800c4be <tcp_rexmit_fast+0x6>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f7ff ffa3 	bl	800c428 <tcp_rexmit>
 800c4e2:	2800      	cmp	r0, #0
 800c4e4:	d1f1      	bne.n	800c4ca <tcp_rexmit_fast+0x12>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800c4e6:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
 800c4ea:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800c4ee:	429a      	cmp	r2, r3
 800c4f0:	bf28      	it	cs
 800c4f2:	461a      	movcs	r2, r3
 800c4f4:	1052      	asrs	r2, r2, #1
 800c4f6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800c4fa:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800c4fc:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
        pcb->ssthresh = 2 * pcb->mss;
 800c500:	bf3c      	itt	cc
 800c502:	005a      	lslcc	r2, r3, #1
 800c504:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800c508:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800c50c:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800c510:	4413      	add	r3, r2
 800c512:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800c516:	8b63      	ldrh	r3, [r4, #26]
 800c518:	f043 0304 	orr.w	r3, r3, #4
 800c51c:	8363      	strh	r3, [r4, #26]
      pcb->rtime = 0;
 800c51e:	2300      	movs	r3, #0
 800c520:	8623      	strh	r3, [r4, #48]	; 0x30
}
 800c522:	e7d2      	b.n	800c4ca <tcp_rexmit_fast+0x12>
 800c524:	08011bd8 	.word	0x08011bd8
 800c528:	080121ec 	.word	0x080121ec
 800c52c:	08010198 	.word	0x08010198

0800c530 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800c530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	4604      	mov	r4, r0
 800c538:	460e      	mov	r6, r1
 800c53a:	4615      	mov	r5, r2
 800c53c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c53e:	4698      	mov	r8, r3
 800c540:	b32b      	cbz	r3, 800c58e <tcp_rst+0x5e>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c542:	b367      	cbz	r7, 800c59e <tcp_rst+0x6e>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800c544:	4630      	mov	r0, r6
 800c546:	f7fb f9a4 	bl	8007892 <lwip_htonl>
 800c54a:	4603      	mov	r3, r0
 800c54c:	f246 0208 	movw	r2, #24584	; 0x6008
 800c550:	9203      	str	r2, [sp, #12]
 800c552:	2214      	movs	r2, #20
 800c554:	9202      	str	r2, [sp, #8]
 800c556:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 800c55a:	9201      	str	r2, [sp, #4]
 800c55c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 800c560:	9200      	str	r2, [sp, #0]
 800c562:	2200      	movs	r2, #0
 800c564:	4611      	mov	r1, r2
 800c566:	4628      	mov	r0, r5
 800c568:	f7ff f974 	bl	800b854 <tcp_output_alloc_header_common>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800c56c:	4605      	mov	r5, r0
 800c56e:	b158      	cbz	r0, 800c588 <tcp_rst+0x58>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800c570:	2300      	movs	r3, #0
 800c572:	461a      	mov	r2, r3
 800c574:	4601      	mov	r1, r0
 800c576:	4620      	mov	r0, r4
 800c578:	f7ff f876 	bl	800b668 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800c57c:	463b      	mov	r3, r7
 800c57e:	4642      	mov	r2, r8
 800c580:	4629      	mov	r1, r5
 800c582:	4620      	mov	r0, r4
 800c584:	f7ff f9da 	bl	800b93c <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800c588:	b004      	add	sp, #16
 800c58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800c58e:	4b08      	ldr	r3, [pc, #32]	; (800c5b0 <tcp_rst+0x80>)
 800c590:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800c594:	4907      	ldr	r1, [pc, #28]	; (800c5b4 <tcp_rst+0x84>)
 800c596:	4808      	ldr	r0, [pc, #32]	; (800c5b8 <tcp_rst+0x88>)
 800c598:	f002 fcac 	bl	800eef4 <iprintf>
 800c59c:	e7d1      	b.n	800c542 <tcp_rst+0x12>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800c59e:	4b04      	ldr	r3, [pc, #16]	; (800c5b0 <tcp_rst+0x80>)
 800c5a0:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800c5a4:	4905      	ldr	r1, [pc, #20]	; (800c5bc <tcp_rst+0x8c>)
 800c5a6:	4804      	ldr	r0, [pc, #16]	; (800c5b8 <tcp_rst+0x88>)
 800c5a8:	f002 fca4 	bl	800eef4 <iprintf>
 800c5ac:	e7ca      	b.n	800c544 <tcp_rst+0x14>
 800c5ae:	bf00      	nop
 800c5b0:	08011bd8 	.word	0x08011bd8
 800c5b4:	0801220c 	.word	0x0801220c
 800c5b8:	08010198 	.word	0x08010198
 800c5bc:	08012228 	.word	0x08012228

0800c5c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800c5c0:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	b1e0      	cbz	r0, 800c600 <tcp_send_empty_ack+0x40>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800c5c6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c5c8:	f7fb f963 	bl	8007892 <lwip_htonl>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	4611      	mov	r1, r2
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f7ff f988 	bl	800b8e8 <tcp_output_alloc_header>
  if (p == NULL) {
 800c5d8:	4605      	mov	r5, r0
 800c5da:	b1c8      	cbz	r0, 800c610 <tcp_send_empty_ack+0x50>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800c5dc:	2300      	movs	r3, #0
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4601      	mov	r1, r0
 800c5e2:	4620      	mov	r0, r4
 800c5e4:	f7ff f840 	bl	800b668 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800c5e8:	1d23      	adds	r3, r4, #4
 800c5ea:	4622      	mov	r2, r4
 800c5ec:	4629      	mov	r1, r5
 800c5ee:	4620      	mov	r0, r4
 800c5f0:	f7ff f9a4 	bl	800b93c <tcp_output_control_segment>
  if (err != ERR_OK) {
 800c5f4:	b198      	cbz	r0, 800c61e <tcp_send_empty_ack+0x5e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c5f6:	8b63      	ldrh	r3, [r4, #26]
 800c5f8:	f043 0303 	orr.w	r3, r3, #3
 800c5fc:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800c5fe:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800c600:	4b09      	ldr	r3, [pc, #36]	; (800c628 <tcp_send_empty_ack+0x68>)
 800c602:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800c606:	4909      	ldr	r1, [pc, #36]	; (800c62c <tcp_send_empty_ack+0x6c>)
 800c608:	4809      	ldr	r0, [pc, #36]	; (800c630 <tcp_send_empty_ack+0x70>)
 800c60a:	f002 fc73 	bl	800eef4 <iprintf>
 800c60e:	e7da      	b.n	800c5c6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c610:	8b63      	ldrh	r3, [r4, #26]
 800c612:	f043 0303 	orr.w	r3, r3, #3
 800c616:	8363      	strh	r3, [r4, #26]
    return ERR_BUF;
 800c618:	f06f 0001 	mvn.w	r0, #1
 800c61c:	e7ef      	b.n	800c5fe <tcp_send_empty_ack+0x3e>
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c61e:	8b63      	ldrh	r3, [r4, #26]
 800c620:	f023 0303 	bic.w	r3, r3, #3
 800c624:	8363      	strh	r3, [r4, #26]
 800c626:	e7ea      	b.n	800c5fe <tcp_send_empty_ack+0x3e>
 800c628:	08011bd8 	.word	0x08011bd8
 800c62c:	08012244 	.word	0x08012244
 800c630:	08010198 	.word	0x08010198

0800c634 <tcp_output>:
{
 800c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c638:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c63a:	4605      	mov	r5, r0
 800c63c:	2800      	cmp	r0, #0
 800c63e:	d03a      	beq.n	800c6b6 <tcp_output+0x82>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c640:	7d2b      	ldrb	r3, [r5, #20]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d03f      	beq.n	800c6c6 <tcp_output+0x92>
  if (tcp_input_pcb == pcb) {
 800c646:	4b9b      	ldr	r3, [pc, #620]	; (800c8b4 <tcp_output+0x280>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	42ab      	cmp	r3, r5
 800c64c:	f000 81b8 	beq.w	800c9c0 <tcp_output+0x38c>
  seg = pcb->unsent;
 800c650:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  if (seg == NULL) {
 800c652:	2c00      	cmp	r4, #0
 800c654:	d03f      	beq.n	800c6d6 <tcp_output+0xa2>
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c656:	f8b5 7048 	ldrh.w	r7, [r5, #72]	; 0x48
 800c65a:	f8b5 6060 	ldrh.w	r6, [r5, #96]	; 0x60
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800c65e:	f105 0a04 	add.w	sl, r5, #4
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800c662:	7a28      	ldrb	r0, [r5, #8]
 800c664:	2800      	cmp	r0, #0
 800c666:	d148      	bne.n	800c6fa <tcp_output+0xc6>
    return ip_route(src, dst);
 800c668:	4650      	mov	r0, sl
 800c66a:	f001 fabb 	bl	800dbe4 <ip4_route>
 800c66e:	4681      	mov	r9, r0
  if (netif == NULL) {
 800c670:	f1b9 0f00 	cmp.w	r9, #0
 800c674:	f000 81a6 	beq.w	800c9c4 <tcp_output+0x390>
  if (ip_addr_isany(&pcb->local_ip)) {
 800c678:	682b      	ldr	r3, [r5, #0]
 800c67a:	b913      	cbnz	r3, 800c682 <tcp_output+0x4e>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800c67c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c680:	602b      	str	r3, [r5, #0]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800c682:	42b7      	cmp	r7, r6
 800c684:	bf28      	it	cs
 800c686:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800c688:	68e3      	ldr	r3, [r4, #12]
 800c68a:	6858      	ldr	r0, [r3, #4]
 800c68c:	f7fb f901 	bl	8007892 <lwip_htonl>
 800c690:	8923      	ldrh	r3, [r4, #8]
 800c692:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800c694:	1a9b      	subs	r3, r3, r2
 800c696:	4403      	add	r3, r0
 800c698:	42bb      	cmp	r3, r7
 800c69a:	d941      	bls.n	800c720 <tcp_output+0xec>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c69c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 800c6a0:	42bb      	cmp	r3, r7
 800c6a2:	d02e      	beq.n	800c702 <tcp_output+0xce>
    if (pcb->flags & TF_ACK_NOW) {
 800c6a4:	8b6b      	ldrh	r3, [r5, #26]
 800c6a6:	f013 0f02 	tst.w	r3, #2
 800c6aa:	d018      	beq.n	800c6de <tcp_output+0xaa>
      return tcp_send_empty_ack(pcb);
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	f7ff ff87 	bl	800c5c0 <tcp_send_empty_ack>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	e018      	b.n	800c6e8 <tcp_output+0xb4>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800c6b6:	4b80      	ldr	r3, [pc, #512]	; (800c8b8 <tcp_output+0x284>)
 800c6b8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800c6bc:	497f      	ldr	r1, [pc, #508]	; (800c8bc <tcp_output+0x288>)
 800c6be:	4880      	ldr	r0, [pc, #512]	; (800c8c0 <tcp_output+0x28c>)
 800c6c0:	f002 fc18 	bl	800eef4 <iprintf>
 800c6c4:	e7bc      	b.n	800c640 <tcp_output+0xc>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800c6c6:	4b7c      	ldr	r3, [pc, #496]	; (800c8b8 <tcp_output+0x284>)
 800c6c8:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c6cc:	497d      	ldr	r1, [pc, #500]	; (800c8c4 <tcp_output+0x290>)
 800c6ce:	487c      	ldr	r0, [pc, #496]	; (800c8c0 <tcp_output+0x28c>)
 800c6d0:	f002 fc10 	bl	800eef4 <iprintf>
 800c6d4:	e7b7      	b.n	800c646 <tcp_output+0x12>
    if (pcb->flags & TF_ACK_NOW) {
 800c6d6:	8b6b      	ldrh	r3, [r5, #26]
 800c6d8:	f013 0f02 	tst.w	r3, #2
 800c6dc:	d108      	bne.n	800c6f0 <tcp_output+0xbc>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800c6de:	8b6b      	ldrh	r3, [r5, #26]
 800c6e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c6e4:	836b      	strh	r3, [r5, #26]
  return ERR_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	b005      	add	sp, #20
 800c6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f7ff ff65 	bl	800c5c0 <tcp_send_empty_ack>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	e7f6      	b.n	800c6e8 <tcp_output+0xb4>
    return netif_get_by_index(pcb->netif_idx);
 800c6fa:	f7fb fe11 	bl	8008320 <netif_get_by_index>
 800c6fe:	4681      	mov	r9, r0
 800c700:	e7b6      	b.n	800c670 <tcp_output+0x3c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800c702:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1cd      	bne.n	800c6a4 <tcp_output+0x70>
 800c708:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d1c9      	bne.n	800c6a4 <tcp_output+0x70>
      pcb->persist_cnt = 0;
 800c710:	f885 3098 	strb.w	r3, [r5, #152]	; 0x98
      pcb->persist_backoff = 1;
 800c714:	2201      	movs	r2, #1
 800c716:	f885 2099 	strb.w	r2, [r5, #153]	; 0x99
      pcb->persist_probe = 0;
 800c71a:	f885 309a 	strb.w	r3, [r5, #154]	; 0x9a
 800c71e:	e7c1      	b.n	800c6a4 <tcp_output+0x70>
  pcb->persist_backoff = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	f885 3099 	strb.w	r3, [r5, #153]	; 0x99
  useg = pcb->unacked;
 800c726:	6f2b      	ldr	r3, [r5, #112]	; 0x70
  if (useg != NULL) {
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 8147 	beq.w	800c9bc <tcp_output+0x388>
    for (; useg->next != NULL; useg = useg->next);
 800c72e:	4698      	mov	r8, r3
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1fb      	bne.n	800c72e <tcp_output+0xfa>
 800c736:	e0d4      	b.n	800c8e2 <tcp_output+0x2ae>
    LWIP_ASSERT("RST not expected here!",
 800c738:	4b5f      	ldr	r3, [pc, #380]	; (800c8b8 <tcp_output+0x284>)
 800c73a:	f240 5236 	movw	r2, #1334	; 0x536
 800c73e:	4962      	ldr	r1, [pc, #392]	; (800c8c8 <tcp_output+0x294>)
 800c740:	485f      	ldr	r0, [pc, #380]	; (800c8c0 <tcp_output+0x28c>)
 800c742:	f002 fbd7 	bl	800eef4 <iprintf>
 800c746:	e0df      	b.n	800c908 <tcp_output+0x2d4>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c748:	8911      	ldrh	r1, [r2, #8]
 800c74a:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
 800c74c:	4291      	cmp	r1, r2
 800c74e:	f080 80e9 	bcs.w	800c924 <tcp_output+0x2f0>
 800c752:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
 800c756:	2a00      	cmp	r2, #0
 800c758:	f000 80e4 	beq.w	800c924 <tcp_output+0x2f0>
 800c75c:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 800c760:	2a08      	cmp	r2, #8
 800c762:	f200 80df 	bhi.w	800c924 <tcp_output+0x2f0>
 800c766:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 800c76a:	f040 80db 	bne.w	800c924 <tcp_output+0x2f0>
  if (pcb->unsent == NULL) {
 800c76e:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1b4      	bne.n	800c6de <tcp_output+0xaa>
    pcb->unsent_oversize = 0;
 800c774:	2300      	movs	r3, #0
 800c776:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 800c77a:	e7b0      	b.n	800c6de <tcp_output+0xaa>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800c77c:	68e3      	ldr	r3, [r4, #12]
 800c77e:	899e      	ldrh	r6, [r3, #12]
 800c780:	2010      	movs	r0, #16
 800c782:	f7fb f881 	bl	8007888 <lwip_htons>
 800c786:	68e3      	ldr	r3, [r4, #12]
 800c788:	4330      	orrs	r0, r6
 800c78a:	8198      	strh	r0, [r3, #12]
 800c78c:	e0ce      	b.n	800c92c <tcp_output+0x2f8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800c78e:	68e6      	ldr	r6, [r4, #12]
 800c790:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c792:	f7fb f87e 	bl	8007892 <lwip_htonl>
 800c796:	60b0      	str	r0, [r6, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800c798:	68e6      	ldr	r6, [r4, #12]
 800c79a:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 800c79c:	f7fb f874 	bl	8007888 <lwip_htons>
 800c7a0:	81f0      	strh	r0, [r6, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800c7a2:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
 800c7a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c7a6:	4413      	add	r3, r2
 800c7a8:	62eb      	str	r3, [r5, #44]	; 0x2c
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c7aa:	68e6      	ldr	r6, [r4, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800c7ac:	7aa3      	ldrb	r3, [r4, #10]
 800c7ae:	f013 0f01 	tst.w	r3, #1
 800c7b2:	d140      	bne.n	800c836 <tcp_output+0x202>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800c7b4:	3614      	adds	r6, #20
  if (pcb->rtime < 0) {
 800c7b6:	f9b5 3030 	ldrsh.w	r3, [r5, #48]	; 0x30
 800c7ba:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800c7bc:	bfbc      	itt	lt
 800c7be:	2300      	movlt	r3, #0
 800c7c0:	862b      	strhlt	r3, [r5, #48]	; 0x30
  if (pcb->rttest == 0) {
 800c7c2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d043      	beq.n	800c850 <tcp_output+0x21c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800c7c8:	6862      	ldr	r2, [r4, #4]
 800c7ca:	68e3      	ldr	r3, [r4, #12]
 800c7cc:	6851      	ldr	r1, [r2, #4]
 800c7ce:	1a5b      	subs	r3, r3, r1
 800c7d0:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 800c7d2:	8951      	ldrh	r1, [r2, #10]
 800c7d4:	1ac9      	subs	r1, r1, r3
 800c7d6:	8151      	strh	r1, [r2, #10]
  seg->p->tot_len -= len;
 800c7d8:	6861      	ldr	r1, [r4, #4]
 800c7da:	890a      	ldrh	r2, [r1, #8]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	810b      	strh	r3, [r1, #8]
  seg->p->payload = seg->tcphdr;
 800c7e0:	6862      	ldr	r2, [r4, #4]
 800c7e2:	68e3      	ldr	r3, [r4, #12]
 800c7e4:	6053      	str	r3, [r2, #4]
  seg->tcphdr->chksum = 0;
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	741a      	strb	r2, [r3, #16]
 800c7ea:	745a      	strb	r2, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800c7ec:	7aa3      	ldrb	r3, [r4, #10]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	f003 0304 	and.w	r3, r3, #4
 800c7f4:	3314      	adds	r3, #20
 800c7f6:	68e2      	ldr	r2, [r4, #12]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	429e      	cmp	r6, r3
 800c7fc:	d006      	beq.n	800c80c <tcp_output+0x1d8>
 800c7fe:	4b2e      	ldr	r3, [pc, #184]	; (800c8b8 <tcp_output+0x284>)
 800c800:	f240 621c 	movw	r2, #1564	; 0x61c
 800c804:	4931      	ldr	r1, [pc, #196]	; (800c8cc <tcp_output+0x298>)
 800c806:	482e      	ldr	r0, [pc, #184]	; (800c8c0 <tcp_output+0x28c>)
 800c808:	f002 fb74 	bl	800eef4 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800c80c:	6860      	ldr	r0, [r4, #4]
 800c80e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c812:	2306      	movs	r3, #6
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	7aab      	ldrb	r3, [r5, #10]
 800c818:	9300      	str	r3, [sp, #0]
 800c81a:	7aeb      	ldrb	r3, [r5, #11]
 800c81c:	4652      	mov	r2, sl
 800c81e:	4629      	mov	r1, r5
 800c820:	f001 fb6c 	bl	800defc <ip4_output_if>
    if (err != ERR_OK) {
 800c824:	4603      	mov	r3, r0
 800c826:	2800      	cmp	r0, #0
 800c828:	f000 8086 	beq.w	800c938 <tcp_output+0x304>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800c82c:	8b6a      	ldrh	r2, [r5, #26]
 800c82e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c832:	836a      	strh	r2, [r5, #26]
      return err;
 800c834:	e758      	b.n	800c6e8 <tcp_output+0xb4>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800c836:	4652      	mov	r2, sl
 800c838:	4649      	mov	r1, r9
 800c83a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800c83e:	f7fc fbf1 	bl	8009024 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800c842:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800c846:	f7fb f824 	bl	8007892 <lwip_htonl>
 800c84a:	6170      	str	r0, [r6, #20]
    opts += 1;
 800c84c:	3618      	adds	r6, #24
 800c84e:	e7b2      	b.n	800c7b6 <tcp_output+0x182>
    pcb->rttest = tcp_ticks;
 800c850:	4b1f      	ldr	r3, [pc, #124]	; (800c8d0 <tcp_output+0x29c>)
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	636b      	str	r3, [r5, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800c856:	68e3      	ldr	r3, [r4, #12]
 800c858:	6858      	ldr	r0, [r3, #4]
 800c85a:	f7fb f81a 	bl	8007892 <lwip_htonl>
 800c85e:	63a8      	str	r0, [r5, #56]	; 0x38
 800c860:	e7b2      	b.n	800c7c8 <tcp_output+0x194>
        pcb->unacked = seg;
 800c862:	672c      	str	r4, [r5, #112]	; 0x70
        useg = seg;
 800c864:	46a0      	mov	r8, r4
 800c866:	e038      	b.n	800c8da <tcp_output+0x2a6>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800c868:	f105 0b70 	add.w	fp, r5, #112	; 0x70
          while (*cur_seg &&
 800c86c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c86e:	b1d3      	cbz	r3, 800c8a6 <tcp_output+0x272>
 800c870:	4622      	mov	r2, r4
 800c872:	465c      	mov	r4, fp
 800c874:	4693      	mov	fp, r2
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	6858      	ldr	r0, [r3, #4]
 800c87a:	f7fb f80a 	bl	8007892 <lwip_htonl>
 800c87e:	4606      	mov	r6, r0
 800c880:	f8db 300c 	ldr.w	r3, [fp, #12]
 800c884:	6858      	ldr	r0, [r3, #4]
 800c886:	f7fb f804 	bl	8007892 <lwip_htonl>
 800c88a:	1a36      	subs	r6, r6, r0
          while (*cur_seg &&
 800c88c:	2e00      	cmp	r6, #0
 800c88e:	da07      	bge.n	800c8a0 <tcp_output+0x26c>
            cur_seg = &((*cur_seg)->next );
 800c890:	6824      	ldr	r4, [r4, #0]
          while (*cur_seg &&
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1ee      	bne.n	800c876 <tcp_output+0x242>
 800c898:	465b      	mov	r3, fp
 800c89a:	46a3      	mov	fp, r4
 800c89c:	461c      	mov	r4, r3
 800c89e:	e002      	b.n	800c8a6 <tcp_output+0x272>
 800c8a0:	465b      	mov	r3, fp
 800c8a2:	46a3      	mov	fp, r4
 800c8a4:	461c      	mov	r4, r3
          seg->next = (*cur_seg);
 800c8a6:	f8db 3000 	ldr.w	r3, [fp]
 800c8aa:	6023      	str	r3, [r4, #0]
          (*cur_seg) = seg;
 800c8ac:	f8cb 4000 	str.w	r4, [fp]
 800c8b0:	e013      	b.n	800c8da <tcp_output+0x2a6>
 800c8b2:	bf00      	nop
 800c8b4:	20010948 	.word	0x20010948
 800c8b8:	08011bd8 	.word	0x08011bd8
 800c8bc:	08012264 	.word	0x08012264
 800c8c0:	08010198 	.word	0x08010198
 800c8c4:	0801227c 	.word	0x0801227c
 800c8c8:	080122a4 	.word	0x080122a4
 800c8cc:	08011c5c 	.word	0x08011c5c
 800c8d0:	20010914 	.word	0x20010914
      tcp_seg_free(seg);
 800c8d4:	4620      	mov	r0, r4
 800c8d6:	f7fc fad1 	bl	8008e7c <tcp_seg_free>
    seg = pcb->unsent;
 800c8da:	6eec      	ldr	r4, [r5, #108]	; 0x6c
  while (seg != NULL &&
 800c8dc:	2c00      	cmp	r4, #0
 800c8de:	f43f af49 	beq.w	800c774 <tcp_output+0x140>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800c8e2:	68e3      	ldr	r3, [r4, #12]
 800c8e4:	6858      	ldr	r0, [r3, #4]
 800c8e6:	f7fa ffd4 	bl	8007892 <lwip_htonl>
 800c8ea:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c8ec:	1ac0      	subs	r0, r0, r3
 800c8ee:	8923      	ldrh	r3, [r4, #8]
 800c8f0:	4418      	add	r0, r3
  while (seg != NULL &&
 800c8f2:	42b8      	cmp	r0, r7
 800c8f4:	f63f af3b 	bhi.w	800c76e <tcp_output+0x13a>
    LWIP_ASSERT("RST not expected here!",
 800c8f8:	68e3      	ldr	r3, [r4, #12]
 800c8fa:	8998      	ldrh	r0, [r3, #12]
 800c8fc:	f7fa ffc4 	bl	8007888 <lwip_htons>
 800c900:	f010 0f04 	tst.w	r0, #4
 800c904:	f47f af18 	bne.w	800c738 <tcp_output+0x104>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800c908:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c90a:	b15b      	cbz	r3, 800c924 <tcp_output+0x2f0>
 800c90c:	8b6b      	ldrh	r3, [r5, #26]
 800c90e:	f013 0f44 	tst.w	r3, #68	; 0x44
 800c912:	d107      	bne.n	800c924 <tcp_output+0x2f0>
 800c914:	6eea      	ldr	r2, [r5, #108]	; 0x6c
 800c916:	2a00      	cmp	r2, #0
 800c918:	f43f af1b 	beq.w	800c752 <tcp_output+0x11e>
 800c91c:	6811      	ldr	r1, [r2, #0]
 800c91e:	2900      	cmp	r1, #0
 800c920:	f43f af12 	beq.w	800c748 <tcp_output+0x114>
    if (pcb->state != SYN_SENT) {
 800c924:	7d2b      	ldrb	r3, [r5, #20]
 800c926:	2b02      	cmp	r3, #2
 800c928:	f47f af28 	bne.w	800c77c <tcp_output+0x148>
  if (tcp_output_segment_busy(seg)) {
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7fe fe83 	bl	800b638 <tcp_output_segment_busy>
 800c932:	2800      	cmp	r0, #0
 800c934:	f43f af2b 	beq.w	800c78e <tcp_output+0x15a>
    pcb->unsent = seg->next;
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	66eb      	str	r3, [r5, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800c93c:	7d2b      	ldrb	r3, [r5, #20]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	d003      	beq.n	800c94a <tcp_output+0x316>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c942:	8b6b      	ldrh	r3, [r5, #26]
 800c944:	f023 0303 	bic.w	r3, r3, #3
 800c948:	836b      	strh	r3, [r5, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800c94a:	68e3      	ldr	r3, [r4, #12]
 800c94c:	6858      	ldr	r0, [r3, #4]
 800c94e:	f7fa ffa0 	bl	8007892 <lwip_htonl>
 800c952:	4606      	mov	r6, r0
 800c954:	f8b4 b008 	ldrh.w	fp, [r4, #8]
 800c958:	68e3      	ldr	r3, [r4, #12]
 800c95a:	8998      	ldrh	r0, [r3, #12]
 800c95c:	f7fa ff94 	bl	8007888 <lwip_htons>
 800c960:	f010 0003 	ands.w	r0, r0, #3
 800c964:	bf18      	it	ne
 800c966:	2001      	movne	r0, #1
 800c968:	445e      	add	r6, fp
 800c96a:	4430      	add	r0, r6
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800c96c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800c96e:	1a1b      	subs	r3, r3, r0
 800c970:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800c972:	bfb8      	it	lt
 800c974:	6528      	strlt	r0, [r5, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800c976:	8926      	ldrh	r6, [r4, #8]
 800c978:	68e3      	ldr	r3, [r4, #12]
 800c97a:	8998      	ldrh	r0, [r3, #12]
 800c97c:	f7fa ff84 	bl	8007888 <lwip_htons>
 800c980:	f010 0003 	ands.w	r0, r0, #3
 800c984:	bf18      	it	ne
 800c986:	2001      	movne	r0, #1
 800c988:	42f0      	cmn	r0, r6
 800c98a:	d0a3      	beq.n	800c8d4 <tcp_output+0x2a0>
      seg->next = NULL;
 800c98c:	2300      	movs	r3, #0
 800c98e:	6023      	str	r3, [r4, #0]
      if (pcb->unacked == NULL) {
 800c990:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c992:	2b00      	cmp	r3, #0
 800c994:	f43f af65 	beq.w	800c862 <tcp_output+0x22e>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800c998:	68e3      	ldr	r3, [r4, #12]
 800c99a:	6858      	ldr	r0, [r3, #4]
 800c99c:	f7fa ff79 	bl	8007892 <lwip_htonl>
 800c9a0:	4606      	mov	r6, r0
 800c9a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c9a6:	6858      	ldr	r0, [r3, #4]
 800c9a8:	f7fa ff73 	bl	8007892 <lwip_htonl>
 800c9ac:	1a36      	subs	r6, r6, r0
 800c9ae:	2e00      	cmp	r6, #0
 800c9b0:	f6ff af5a 	blt.w	800c868 <tcp_output+0x234>
          useg->next = seg;
 800c9b4:	f8c8 4000 	str.w	r4, [r8]
 800c9b8:	46a0      	mov	r8, r4
 800c9ba:	e78e      	b.n	800c8da <tcp_output+0x2a6>
  useg = pcb->unacked;
 800c9bc:	4698      	mov	r8, r3
  while (seg != NULL &&
 800c9be:	e790      	b.n	800c8e2 <tcp_output+0x2ae>
    return ERR_OK;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	e691      	b.n	800c6e8 <tcp_output+0xb4>
    return ERR_RTE;
 800c9c4:	f06f 0303 	mvn.w	r3, #3
 800c9c8:	e68e      	b.n	800c6e8 <tcp_output+0xb4>
 800c9ca:	bf00      	nop

0800c9cc <tcp_rexmit_rto_commit>:
{
 800c9cc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c9ce:	4604      	mov	r4, r0
 800c9d0:	b150      	cbz	r0, 800c9e8 <tcp_rexmit_rto_commit+0x1c>
  if (pcb->nrtx < 0xFF) {
 800c9d2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c9d6:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800c9d8:	bf1c      	itt	ne
 800c9da:	3301      	addne	r3, #1
 800c9dc:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f7ff fe27 	bl	800c634 <tcp_output>
}
 800c9e6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800c9e8:	4b03      	ldr	r3, [pc, #12]	; (800c9f8 <tcp_rexmit_rto_commit+0x2c>)
 800c9ea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c9ee:	4903      	ldr	r1, [pc, #12]	; (800c9fc <tcp_rexmit_rto_commit+0x30>)
 800c9f0:	4803      	ldr	r0, [pc, #12]	; (800ca00 <tcp_rexmit_rto_commit+0x34>)
 800c9f2:	f002 fa7f 	bl	800eef4 <iprintf>
 800c9f6:	e7ec      	b.n	800c9d2 <tcp_rexmit_rto_commit+0x6>
 800c9f8:	08011bd8 	.word	0x08011bd8
 800c9fc:	080122bc 	.word	0x080122bc
 800ca00:	08010198 	.word	0x08010198

0800ca04 <tcp_rexmit_rto>:
{
 800ca04:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ca06:	4604      	mov	r4, r0
 800ca08:	b120      	cbz	r0, 800ca14 <tcp_rexmit_rto+0x10>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f7ff fcbe 	bl	800c38c <tcp_rexmit_rto_prepare>
 800ca10:	b140      	cbz	r0, 800ca24 <tcp_rexmit_rto+0x20>
}
 800ca12:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <tcp_rexmit_rto+0x28>)
 800ca16:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800ca1a:	4905      	ldr	r1, [pc, #20]	; (800ca30 <tcp_rexmit_rto+0x2c>)
 800ca1c:	4805      	ldr	r0, [pc, #20]	; (800ca34 <tcp_rexmit_rto+0x30>)
 800ca1e:	f002 fa69 	bl	800eef4 <iprintf>
 800ca22:	e7f2      	b.n	800ca0a <tcp_rexmit_rto+0x6>
    tcp_rexmit_rto_commit(pcb);
 800ca24:	4620      	mov	r0, r4
 800ca26:	f7ff ffd1 	bl	800c9cc <tcp_rexmit_rto_commit>
}
 800ca2a:	e7f2      	b.n	800ca12 <tcp_rexmit_rto+0xe>
 800ca2c:	08011bd8 	.word	0x08011bd8
 800ca30:	080122e0 	.word	0x080122e0
 800ca34:	08010198 	.word	0x08010198

0800ca38 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800ca38:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ca3a:	4604      	mov	r4, r0
 800ca3c:	b1c0      	cbz	r0, 800ca70 <tcp_keepalive+0x38>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800ca3e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800ca40:	3801      	subs	r0, #1
 800ca42:	f7fa ff26 	bl	8007892 <lwip_htonl>
 800ca46:	4603      	mov	r3, r0
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7fe ff4b 	bl	800b8e8 <tcp_output_alloc_header>
  if (p == NULL) {
 800ca52:	4605      	mov	r5, r0
 800ca54:	b1a0      	cbz	r0, 800ca80 <tcp_keepalive+0x48>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800ca56:	2300      	movs	r3, #0
 800ca58:	461a      	mov	r2, r3
 800ca5a:	4601      	mov	r1, r0
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	f7fe fe03 	bl	800b668 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800ca62:	1d23      	adds	r3, r4, #4
 800ca64:	4622      	mov	r2, r4
 800ca66:	4629      	mov	r1, r5
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f7fe ff67 	bl	800b93c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800ca70:	4b05      	ldr	r3, [pc, #20]	; (800ca88 <tcp_keepalive+0x50>)
 800ca72:	f640 0224 	movw	r2, #2084	; 0x824
 800ca76:	4905      	ldr	r1, [pc, #20]	; (800ca8c <tcp_keepalive+0x54>)
 800ca78:	4805      	ldr	r0, [pc, #20]	; (800ca90 <tcp_keepalive+0x58>)
 800ca7a:	f002 fa3b 	bl	800eef4 <iprintf>
 800ca7e:	e7de      	b.n	800ca3e <tcp_keepalive+0x6>
    return ERR_MEM;
 800ca80:	f04f 30ff 	mov.w	r0, #4294967295
 800ca84:	e7f3      	b.n	800ca6e <tcp_keepalive+0x36>
 800ca86:	bf00      	nop
 800ca88:	08011bd8 	.word	0x08011bd8
 800ca8c:	080122fc 	.word	0x080122fc
 800ca90:	08010198 	.word	0x08010198

0800ca94 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800ca94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800ca98:	4604      	mov	r4, r0
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d03e      	beq.n	800cb1c <tcp_zero_window_probe+0x88>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ca9e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800caa0:	2d00      	cmp	r5, #0
 800caa2:	d043      	beq.n	800cb2c <tcp_zero_window_probe+0x98>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800caa4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 800caa8:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800caaa:	bf1c      	itt	ne
 800caac:	3301      	addne	r3, #1
 800caae:	f884 309a 	strbne.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800cab2:	68eb      	ldr	r3, [r5, #12]
 800cab4:	8998      	ldrh	r0, [r3, #12]
 800cab6:	f7fa fee7 	bl	8007888 <lwip_htons>
 800caba:	f010 0f01 	tst.w	r0, #1
 800cabe:	d002      	beq.n	800cac6 <tcp_zero_window_probe+0x32>
 800cac0:	892b      	ldrh	r3, [r5, #8]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d03a      	beq.n	800cb3c <tcp_zero_window_probe+0xa8>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cac6:	68eb      	ldr	r3, [r5, #12]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	2100      	movs	r1, #0
 800cace:	4620      	mov	r0, r4
 800cad0:	f7fe ff0a 	bl	800b8e8 <tcp_output_alloc_header>
  if (p == NULL) {
 800cad4:	4606      	mov	r6, r0
 800cad6:	b370      	cbz	r0, 800cb36 <tcp_zero_window_probe+0xa2>
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cad8:	6868      	ldr	r0, [r5, #4]
 800cada:	8903      	ldrh	r3, [r0, #8]
 800cadc:	892a      	ldrh	r2, [r5, #8]
 800cade:	1a9b      	subs	r3, r3, r2
    char *d = ((char *)p->payload + TCP_HLEN);
 800cae0:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	2201      	movs	r2, #1
 800cae6:	3114      	adds	r1, #20
 800cae8:	f7fb ff8e 	bl	8008a08 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800caec:	68eb      	ldr	r3, [r5, #12]
 800caee:	6858      	ldr	r0, [r3, #4]
 800caf0:	f7fa fecf 	bl	8007892 <lwip_htonl>
 800caf4:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800caf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800caf8:	1a1b      	subs	r3, r3, r0
 800cafa:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800cafc:	bfb8      	it	lt
 800cafe:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800cb00:	2300      	movs	r3, #0
 800cb02:	461a      	mov	r2, r3
 800cb04:	4631      	mov	r1, r6
 800cb06:	4620      	mov	r0, r4
 800cb08:	f7fe fdae 	bl	800b668 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800cb0c:	1d23      	adds	r3, r4, #4
 800cb0e:	4622      	mov	r2, r4
 800cb10:	4631      	mov	r1, r6
 800cb12:	4620      	mov	r0, r4
 800cb14:	f7fe ff12 	bl	800b93c <tcp_output_control_segment>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800cb1c:	4b13      	ldr	r3, [pc, #76]	; (800cb6c <tcp_zero_window_probe+0xd8>)
 800cb1e:	f640 024f 	movw	r2, #2127	; 0x84f
 800cb22:	4913      	ldr	r1, [pc, #76]	; (800cb70 <tcp_zero_window_probe+0xdc>)
 800cb24:	4813      	ldr	r0, [pc, #76]	; (800cb74 <tcp_zero_window_probe+0xe0>)
 800cb26:	f002 f9e5 	bl	800eef4 <iprintf>
 800cb2a:	e7b8      	b.n	800ca9e <tcp_zero_window_probe+0xa>
    return ERR_OK;
 800cb2c:	2000      	movs	r0, #0
 800cb2e:	e7f3      	b.n	800cb18 <tcp_zero_window_probe+0x84>
    return ERR_MEM;
 800cb30:	f04f 30ff 	mov.w	r0, #4294967295
 800cb34:	e7f0      	b.n	800cb18 <tcp_zero_window_probe+0x84>
 800cb36:	f04f 30ff 	mov.w	r0, #4294967295
 800cb3a:	e7ed      	b.n	800cb18 <tcp_zero_window_probe+0x84>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800cb3c:	68eb      	ldr	r3, [r5, #12]
 800cb3e:	685b      	ldr	r3, [r3, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	4611      	mov	r1, r2
 800cb44:	4620      	mov	r0, r4
 800cb46:	f7fe fecf 	bl	800b8e8 <tcp_output_alloc_header>
  if (p == NULL) {
 800cb4a:	4606      	mov	r6, r0
 800cb4c:	2800      	cmp	r0, #0
 800cb4e:	d0ef      	beq.n	800cb30 <tcp_zero_window_probe+0x9c>
  tcphdr = (struct tcp_hdr *)p->payload;
 800cb50:	f8d6 8004 	ldr.w	r8, [r6, #4]
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800cb54:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 800cb58:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 800cb5c:	2011      	movs	r0, #17
 800cb5e:	f7fa fe93 	bl	8007888 <lwip_htons>
 800cb62:	4307      	orrs	r7, r0
 800cb64:	f8a8 700c 	strh.w	r7, [r8, #12]
 800cb68:	e7c0      	b.n	800caec <tcp_zero_window_probe+0x58>
 800cb6a:	bf00      	nop
 800cb6c:	08011bd8 	.word	0x08011bd8
 800cb70:	08012318 	.word	0x08012318
 800cb74:	08010198 	.word	0x08010198

0800cb78 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	4604      	mov	r4, r0
 800cb7c:	460f      	mov	r7, r1
 800cb7e:	4616      	mov	r6, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800cb80:	200a      	movs	r0, #10
 800cb82:	f7fb f9cf 	bl	8007f24 <memp_malloc>
  if (timeout == NULL) {
 800cb86:	b180      	cbz	r0, 800cbaa <sys_timeout_abs+0x32>
 800cb88:	4605      	mov	r5, r0
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	6003      	str	r3, [r0, #0]
  timeout->h = handler;
 800cb8e:	6087      	str	r7, [r0, #8]
  timeout->arg = arg;
 800cb90:	60c6      	str	r6, [r0, #12]
  timeout->time = abs_time;
 800cb92:	6044      	str	r4, [r0, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800cb94:	4b0f      	ldr	r3, [pc, #60]	; (800cbd4 <sys_timeout_abs+0x5c>)
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	b173      	cbz	r3, 800cbb8 <sys_timeout_abs+0x40>
    next_timeout = timeout;
    return;
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	1aa2      	subs	r2, r4, r2
 800cb9e:	2a00      	cmp	r2, #0
 800cba0:	da0d      	bge.n	800cbbe <sys_timeout_abs+0x46>
    timeout->next = next_timeout;
 800cba2:	6003      	str	r3, [r0, #0]
    next_timeout = timeout;
 800cba4:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <sys_timeout_abs+0x5c>)
 800cba6:	6018      	str	r0, [r3, #0]
        t->next = timeout;
        break;
      }
    }
  }
}
 800cba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800cbaa:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <sys_timeout_abs+0x60>)
 800cbac:	22be      	movs	r2, #190	; 0xbe
 800cbae:	490b      	ldr	r1, [pc, #44]	; (800cbdc <sys_timeout_abs+0x64>)
 800cbb0:	480b      	ldr	r0, [pc, #44]	; (800cbe0 <sys_timeout_abs+0x68>)
 800cbb2:	f002 f99f 	bl	800eef4 <iprintf>
    return;
 800cbb6:	e7f7      	b.n	800cba8 <sys_timeout_abs+0x30>
    next_timeout = timeout;
 800cbb8:	4b06      	ldr	r3, [pc, #24]	; (800cbd4 <sys_timeout_abs+0x5c>)
 800cbba:	6018      	str	r0, [r3, #0]
    return;
 800cbbc:	e7f4      	b.n	800cba8 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	b11b      	cbz	r3, 800cbcc <sys_timeout_abs+0x54>
 800cbc4:	685a      	ldr	r2, [r3, #4]
 800cbc6:	1aa2      	subs	r2, r4, r2
 800cbc8:	2a00      	cmp	r2, #0
 800cbca:	daf8      	bge.n	800cbbe <sys_timeout_abs+0x46>
        timeout->next = t->next;
 800cbcc:	602b      	str	r3, [r5, #0]
        t->next = timeout;
 800cbce:	600d      	str	r5, [r1, #0]
        break;
 800cbd0:	e7ea      	b.n	800cba8 <sys_timeout_abs+0x30>
 800cbd2:	bf00      	nop
 800cbd4:	20010964 	.word	0x20010964
 800cbd8:	0801233c 	.word	0x0801233c
 800cbdc:	08012370 	.word	0x08012370
 800cbe0:	08010198 	.word	0x08010198

0800cbe4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800cbe4:	b538      	push	{r3, r4, r5, lr}
 800cbe6:	4604      	mov	r4, r0
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800cbe8:	6843      	ldr	r3, [r0, #4]
 800cbea:	4798      	blx	r3

  now = sys_now();
 800cbec:	f7f6 fbf8 	bl	80033e0 <sys_now>
 800cbf0:	4684      	mov	ip, r0
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800cbf2:	6825      	ldr	r5, [r4, #0]
 800cbf4:	4b06      	ldr	r3, [pc, #24]	; (800cc10 <lwip_cyclic_timer+0x2c>)
 800cbf6:	6818      	ldr	r0, [r3, #0]
 800cbf8:	4428      	add	r0, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800cbfa:	eba0 030c 	sub.w	r3, r0, ip
 800cbfe:	2b00      	cmp	r3, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800cc00:	4622      	mov	r2, r4
 800cc02:	4904      	ldr	r1, [pc, #16]	; (800cc14 <lwip_cyclic_timer+0x30>)
 800cc04:	bfb8      	it	lt
 800cc06:	eb05 000c 	addlt.w	r0, r5, ip
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800cc0a:	f7ff ffb5 	bl	800cb78 <sys_timeout_abs>
#endif
  }
}
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	20010960 	.word	0x20010960
 800cc14:	0800cbe5 	.word	0x0800cbe5

0800cc18 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800cc18:	b570      	push	{r4, r5, r6, lr}
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	4616      	mov	r6, r2
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cc20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800cc24:	d207      	bcs.n	800cc36 <sys_timeout+0x1e>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800cc26:	f7f6 fbdb 	bl	80033e0 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800cc2a:	4632      	mov	r2, r6
 800cc2c:	4629      	mov	r1, r5
 800cc2e:	4420      	add	r0, r4
 800cc30:	f7ff ffa2 	bl	800cb78 <sys_timeout_abs>
#endif
}
 800cc34:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <sys_timeout+0x30>)
 800cc38:	f240 1229 	movw	r2, #297	; 0x129
 800cc3c:	4903      	ldr	r1, [pc, #12]	; (800cc4c <sys_timeout+0x34>)
 800cc3e:	4804      	ldr	r0, [pc, #16]	; (800cc50 <sys_timeout+0x38>)
 800cc40:	f002 f958 	bl	800eef4 <iprintf>
 800cc44:	e7ef      	b.n	800cc26 <sys_timeout+0xe>
 800cc46:	bf00      	nop
 800cc48:	0801233c 	.word	0x0801233c
 800cc4c:	080123b0 	.word	0x080123b0
 800cc50:	08010198 	.word	0x08010198

0800cc54 <tcp_timer_needed>:
{
 800cc54:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cc56:	4b0a      	ldr	r3, [pc, #40]	; (800cc80 <tcp_timer_needed+0x2c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	b953      	cbnz	r3, 800cc72 <tcp_timer_needed+0x1e>
 800cc5c:	4b09      	ldr	r3, [pc, #36]	; (800cc84 <tcp_timer_needed+0x30>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	b143      	cbz	r3, 800cc74 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800cc62:	4b07      	ldr	r3, [pc, #28]	; (800cc80 <tcp_timer_needed+0x2c>)
 800cc64:	2201      	movs	r2, #1
 800cc66:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cc68:	2200      	movs	r2, #0
 800cc6a:	4907      	ldr	r1, [pc, #28]	; (800cc88 <tcp_timer_needed+0x34>)
 800cc6c:	20fa      	movs	r0, #250	; 0xfa
 800cc6e:	f7ff ffd3 	bl	800cc18 <sys_timeout>
}
 800cc72:	bd08      	pop	{r3, pc}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800cc74:	4b05      	ldr	r3, [pc, #20]	; (800cc8c <tcp_timer_needed+0x38>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1f2      	bne.n	800cc62 <tcp_timer_needed+0xe>
 800cc7c:	e7f9      	b.n	800cc72 <tcp_timer_needed+0x1e>
 800cc7e:	bf00      	nop
 800cc80:	20010968 	.word	0x20010968
 800cc84:	20010904 	.word	0x20010904
 800cc88:	0800cc91 	.word	0x0800cc91
 800cc8c:	2001091c 	.word	0x2001091c

0800cc90 <tcpip_tcp_timer>:
{
 800cc90:	b508      	push	{r3, lr}
  tcp_tmr();
 800cc92:	f7fd f89d 	bl	8009dd0 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cc96:	4b08      	ldr	r3, [pc, #32]	; (800ccb8 <tcpip_tcp_timer+0x28>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	b12b      	cbz	r3, 800cca8 <tcpip_tcp_timer+0x18>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	4907      	ldr	r1, [pc, #28]	; (800ccbc <tcpip_tcp_timer+0x2c>)
 800cca0:	20fa      	movs	r0, #250	; 0xfa
 800cca2:	f7ff ffb9 	bl	800cc18 <sys_timeout>
}
 800cca6:	bd08      	pop	{r3, pc}
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800cca8:	4b05      	ldr	r3, [pc, #20]	; (800ccc0 <tcpip_tcp_timer+0x30>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d1f5      	bne.n	800cc9c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 800ccb0:	4b04      	ldr	r3, [pc, #16]	; (800ccc4 <tcpip_tcp_timer+0x34>)
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	601a      	str	r2, [r3, #0]
}
 800ccb6:	e7f6      	b.n	800cca6 <tcpip_tcp_timer+0x16>
 800ccb8:	20010904 	.word	0x20010904
 800ccbc:	0800cc91 	.word	0x0800cc91
 800ccc0:	2001091c 	.word	0x2001091c
 800ccc4:	20010968 	.word	0x20010968

0800ccc8 <sys_timeouts_init>:
{
 800ccc8:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ccca:	4d08      	ldr	r5, [pc, #32]	; (800ccec <sys_timeouts_init+0x24>)
 800cccc:	4c08      	ldr	r4, [pc, #32]	; (800ccf0 <sys_timeouts_init+0x28>)
 800ccce:	f105 0208 	add.w	r2, r5, #8
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ccd8:	f7ff ff9e 	bl	800cc18 <sys_timeout>
 800ccdc:	f105 0210 	add.w	r2, r5, #16
 800cce0:	4621      	mov	r1, r4
 800cce2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cce6:	f7ff ff97 	bl	800cc18 <sys_timeout>
}
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
 800ccec:	080123fc 	.word	0x080123fc
 800ccf0:	0800cbe5 	.word	0x0800cbe5

0800ccf4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ccf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ccf8:	f7f6 fb72 	bl	80033e0 <sys_now>
 800ccfc:	4606      	mov	r6, r0
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ccfe:	4c0d      	ldr	r4, [pc, #52]	; (800cd34 <sys_check_timeouts+0x40>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 800cd00:	f8df 8034 	ldr.w	r8, [pc, #52]	; 800cd38 <sys_check_timeouts+0x44>
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd04:	270a      	movs	r7, #10
    tmptimeout = next_timeout;
 800cd06:	6821      	ldr	r1, [r4, #0]
    if (tmptimeout == NULL) {
 800cd08:	b191      	cbz	r1, 800cd30 <sys_check_timeouts+0x3c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800cd0a:	684b      	ldr	r3, [r1, #4]
 800cd0c:	1af2      	subs	r2, r6, r3
 800cd0e:	2a00      	cmp	r2, #0
 800cd10:	db0e      	blt.n	800cd30 <sys_check_timeouts+0x3c>
    next_timeout = tmptimeout->next;
 800cd12:	680a      	ldr	r2, [r1, #0]
 800cd14:	6022      	str	r2, [r4, #0]
    handler = tmptimeout->h;
 800cd16:	688d      	ldr	r5, [r1, #8]
    arg = tmptimeout->arg;
 800cd18:	f8d1 900c 	ldr.w	r9, [r1, #12]
    current_timeout_due_time = tmptimeout->time;
 800cd1c:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800cd20:	4638      	mov	r0, r7
 800cd22:	f7fb f92f 	bl	8007f84 <memp_free>
    if (handler != NULL) {
 800cd26:	2d00      	cmp	r5, #0
 800cd28:	d0ed      	beq.n	800cd06 <sys_check_timeouts+0x12>
      handler(arg);
 800cd2a:	4648      	mov	r0, r9
 800cd2c:	47a8      	blx	r5
 800cd2e:	e7e9      	b.n	800cd04 <sys_check_timeouts+0x10>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800cd30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd34:	20010964 	.word	0x20010964
 800cd38:	20010960 	.word	0x20010960

0800cd3c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800cd3c:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800cd3e:	4b0d      	ldr	r3, [pc, #52]	; (800cd74 <sys_timeouts_sleeptime+0x38>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	b183      	cbz	r3, 800cd66 <sys_timeouts_sleeptime+0x2a>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800cd44:	f7f6 fb4c 	bl	80033e0 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800cd48:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <sys_timeouts_sleeptime+0x38>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685c      	ldr	r4, [r3, #4]
 800cd4e:	1a24      	subs	r4, r4, r0
 800cd50:	d40c      	bmi.n	800cd6c <sys_timeouts_sleeptime+0x30>
    return 0;
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	da0b      	bge.n	800cd6e <sys_timeouts_sleeptime+0x32>
 800cd56:	4b08      	ldr	r3, [pc, #32]	; (800cd78 <sys_timeouts_sleeptime+0x3c>)
 800cd58:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800cd5c:	4907      	ldr	r1, [pc, #28]	; (800cd7c <sys_timeouts_sleeptime+0x40>)
 800cd5e:	4808      	ldr	r0, [pc, #32]	; (800cd80 <sys_timeouts_sleeptime+0x44>)
 800cd60:	f002 f8c8 	bl	800eef4 <iprintf>
 800cd64:	e003      	b.n	800cd6e <sys_timeouts_sleeptime+0x32>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800cd66:	f04f 34ff 	mov.w	r4, #4294967295
 800cd6a:	e000      	b.n	800cd6e <sys_timeouts_sleeptime+0x32>
    return 0;
 800cd6c:	2400      	movs	r4, #0
    return ret;
  }
}
 800cd6e:	4620      	mov	r0, r4
 800cd70:	bd10      	pop	{r4, pc}
 800cd72:	bf00      	nop
 800cd74:	20010964 	.word	0x20010964
 800cd78:	0801233c 	.word	0x0801233c
 800cd7c:	080123e8 	.word	0x080123e8
 800cd80:	08010198 	.word	0x08010198

0800cd84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800cd84:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cd86:	f002 f8cd 	bl	800ef24 <rand>
 800cd8a:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800cd8e:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800cd92:	4b01      	ldr	r3, [pc, #4]	; (800cd98 <udp_init+0x14>)
 800cd94:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800cd96:	bd08      	pop	{r3, pc}
 800cd98:	2000002a 	.word	0x2000002a

0800cd9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800cd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cda0:	b085      	sub	sp, #20
 800cda2:	460e      	mov	r6, r1

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cda4:	4681      	mov	r9, r0
 800cda6:	b300      	cbz	r0, 800cdea <udp_input+0x4e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cda8:	b336      	cbz	r6, 800cdf8 <udp_input+0x5c>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800cdaa:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 800cdae:	2b07      	cmp	r3, #7
 800cdb0:	d929      	bls.n	800ce06 <udp_input+0x6a>
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
    goto end;
  }

  udphdr = (struct udp_hdr *)p->payload;
 800cdb2:	f8d9 4004 	ldr.w	r4, [r9, #4]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800cdb6:	4b68      	ldr	r3, [pc, #416]	; (800cf58 <udp_input+0x1bc>)
 800cdb8:	6819      	ldr	r1, [r3, #0]
 800cdba:	6958      	ldr	r0, [r3, #20]
 800cdbc:	f001 f8b3 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800cdc0:	4607      	mov	r7, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800cdc2:	8820      	ldrh	r0, [r4, #0]
 800cdc4:	f7fa fd60 	bl	8007888 <lwip_htons>
 800cdc8:	4682      	mov	sl, r0
  dest = lwip_ntohs(udphdr->dest);
 800cdca:	8860      	ldrh	r0, [r4, #2]
 800cdcc:	f7fa fd5c 	bl	8007888 <lwip_htons>
 800cdd0:	4605      	mov	r5, r0
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cdd2:	4b62      	ldr	r3, [pc, #392]	; (800cf5c <udp_input+0x1c0>)
 800cdd4:	681c      	ldr	r4, [r3, #0]
 800cdd6:	2c00      	cmp	r4, #0
 800cdd8:	f000 8088 	beq.w	800ceec <udp_input+0x150>
  uncon_pcb = NULL;
 800cddc:	f04f 0b00 	mov.w	fp, #0
  prev = NULL;
 800cde0:	f8cd b00c 	str.w	fp, [sp, #12]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
          (ip_addr_isany_val(pcb->remote_ip) ||
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800cde4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800cf58 <udp_input+0x1bc>
 800cde8:	e02c      	b.n	800ce44 <udp_input+0xa8>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800cdea:	4b5d      	ldr	r3, [pc, #372]	; (800cf60 <udp_input+0x1c4>)
 800cdec:	22cf      	movs	r2, #207	; 0xcf
 800cdee:	495d      	ldr	r1, [pc, #372]	; (800cf64 <udp_input+0x1c8>)
 800cdf0:	485d      	ldr	r0, [pc, #372]	; (800cf68 <udp_input+0x1cc>)
 800cdf2:	f002 f87f 	bl	800eef4 <iprintf>
 800cdf6:	e7d7      	b.n	800cda8 <udp_input+0xc>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800cdf8:	4b59      	ldr	r3, [pc, #356]	; (800cf60 <udp_input+0x1c4>)
 800cdfa:	22d0      	movs	r2, #208	; 0xd0
 800cdfc:	495b      	ldr	r1, [pc, #364]	; (800cf6c <udp_input+0x1d0>)
 800cdfe:	485a      	ldr	r0, [pc, #360]	; (800cf68 <udp_input+0x1cc>)
 800ce00:	f002 f878 	bl	800eef4 <iprintf>
 800ce04:	e7d1      	b.n	800cdaa <udp_input+0xe>
    pbuf_free(p);
 800ce06:	4648      	mov	r0, r9
 800ce08:	f7fb fb7e 	bl	8008508 <pbuf_free>
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ce0c:	b005      	add	sp, #20
 800ce0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ce12:	4b53      	ldr	r3, [pc, #332]	; (800cf60 <udp_input+0x1c4>)
 800ce14:	2288      	movs	r2, #136	; 0x88
 800ce16:	4956      	ldr	r1, [pc, #344]	; (800cf70 <udp_input+0x1d4>)
 800ce18:	4853      	ldr	r0, [pc, #332]	; (800cf68 <udp_input+0x1cc>)
 800ce1a:	f002 f86b 	bl	800eef4 <iprintf>
 800ce1e:	e016      	b.n	800ce4e <udp_input+0xb2>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	b11b      	cbz	r3, 800ce2c <udp_input+0x90>
 800ce24:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d106      	bne.n	800ce3a <udp_input+0x9e>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800ce2c:	7c23      	ldrb	r3, [r4, #16]
 800ce2e:	f013 0f04 	tst.w	r3, #4
 800ce32:	d025      	beq.n	800ce80 <udp_input+0xe4>
      if ((pcb->remote_port == src) &&
 800ce34:	8aa3      	ldrh	r3, [r4, #20]
 800ce36:	4553      	cmp	r3, sl
 800ce38:	d038      	beq.n	800ceac <udp_input+0x110>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce3a:	68e3      	ldr	r3, [r4, #12]
 800ce3c:	9403      	str	r4, [sp, #12]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d051      	beq.n	800cee6 <udp_input+0x14a>
 800ce42:	461c      	mov	r4, r3
    if ((pcb->local_port == dest) &&
 800ce44:	8a63      	ldrh	r3, [r4, #18]
 800ce46:	42ab      	cmp	r3, r5
 800ce48:	d1f7      	bne.n	800ce3a <udp_input+0x9e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800ce4a:	2e00      	cmp	r6, #0
 800ce4c:	d0e1      	beq.n	800ce12 <udp_input+0x76>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce4e:	7a22      	ldrb	r2, [r4, #8]
 800ce50:	b13a      	cbz	r2, 800ce62 <udp_input+0xc6>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ce52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ce56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ce5a:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d1eb      	bne.n	800ce3a <udp_input+0x9e>
    if (broadcast != 0) {
 800ce62:	2f00      	cmp	r7, #0
 800ce64:	d0dc      	beq.n	800ce20 <udp_input+0x84>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce66:	6823      	ldr	r3, [r4, #0]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d0df      	beq.n	800ce2c <udp_input+0x90>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ce6c:	f8d8 2014 	ldr.w	r2, [r8, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ce70:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ce74:	d0da      	beq.n	800ce2c <udp_input+0x90>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ce76:	4053      	eors	r3, r2
 800ce78:	68b2      	ldr	r2, [r6, #8]
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ce7a:	4213      	tst	r3, r2
 800ce7c:	d1dd      	bne.n	800ce3a <udp_input+0x9e>
 800ce7e:	e7d5      	b.n	800ce2c <udp_input+0x90>
        if (uncon_pcb == NULL) {
 800ce80:	f1bb 0f00 	cmp.w	fp, #0
 800ce84:	d010      	beq.n	800cea8 <udp_input+0x10c>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800ce86:	2f00      	cmp	r7, #0
 800ce88:	d0d4      	beq.n	800ce34 <udp_input+0x98>
 800ce8a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ce8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce92:	d1cf      	bne.n	800ce34 <udp_input+0x98>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800ce94:	6873      	ldr	r3, [r6, #4]
 800ce96:	f8db 2000 	ldr.w	r2, [fp]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	d0ca      	beq.n	800ce34 <udp_input+0x98>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800ce9e:	6822      	ldr	r2, [r4, #0]
 800cea0:	4293      	cmp	r3, r2
 800cea2:	bf08      	it	eq
 800cea4:	46a3      	moveq	fp, r4
 800cea6:	e7c5      	b.n	800ce34 <udp_input+0x98>
 800cea8:	46a3      	mov	fp, r4
 800ceaa:	e7c3      	b.n	800ce34 <udp_input+0x98>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ceac:	6863      	ldr	r3, [r4, #4]
      if ((pcb->remote_port == src) &&
 800ceae:	b11b      	cbz	r3, 800ceb8 <udp_input+0x11c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ceb0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ceb4:	4293      	cmp	r3, r2
 800ceb6:	d1c0      	bne.n	800ce3a <udp_input+0x9e>
        if (prev != NULL) {
 800ceb8:	9a03      	ldr	r2, [sp, #12]
 800ceba:	b12a      	cbz	r2, 800cec8 <udp_input+0x12c>
          prev->next = pcb->next;
 800cebc:	68e3      	ldr	r3, [r4, #12]
 800cebe:	60d3      	str	r3, [r2, #12]
          pcb->next = udp_pcbs;
 800cec0:	4b26      	ldr	r3, [pc, #152]	; (800cf5c <udp_input+0x1c0>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	60e2      	str	r2, [r4, #12]
          udp_pcbs = pcb;
 800cec6:	601c      	str	r4, [r3, #0]
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cec8:	2108      	movs	r1, #8
 800ceca:	4648      	mov	r0, r9
 800cecc:	f7fb fadc 	bl	8008488 <pbuf_remove_header>
 800ced0:	bb08      	cbnz	r0, 800cf16 <udp_input+0x17a>
      if (pcb->recv != NULL) {
 800ced2:	69a5      	ldr	r5, [r4, #24]
 800ced4:	b355      	cbz	r5, 800cf2c <udp_input+0x190>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800ced6:	69e0      	ldr	r0, [r4, #28]
 800ced8:	f8cd a000 	str.w	sl, [sp]
 800cedc:	4b25      	ldr	r3, [pc, #148]	; (800cf74 <udp_input+0x1d8>)
 800cede:	464a      	mov	r2, r9
 800cee0:	4621      	mov	r1, r4
 800cee2:	47a8      	blx	r5
 800cee4:	e792      	b.n	800ce0c <udp_input+0x70>
  if (pcb != NULL) {
 800cee6:	f1bb 0f00 	cmp.w	fp, #0
 800ceea:	d133      	bne.n	800cf54 <udp_input+0x1b8>
  if (for_us) {
 800ceec:	6872      	ldr	r2, [r6, #4]
 800ceee:	4b1a      	ldr	r3, [pc, #104]	; (800cf58 <udp_input+0x1bc>)
 800cef0:	695b      	ldr	r3, [r3, #20]
 800cef2:	429a      	cmp	r2, r3
 800cef4:	d12a      	bne.n	800cf4c <udp_input+0x1b0>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800cef6:	2108      	movs	r1, #8
 800cef8:	4648      	mov	r0, r9
 800cefa:	f7fb fac5 	bl	8008488 <pbuf_remove_header>
 800cefe:	b950      	cbnz	r0, 800cf16 <udp_input+0x17a>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800cf00:	b92f      	cbnz	r7, 800cf0e <udp_input+0x172>
 800cf02:	4b15      	ldr	r3, [pc, #84]	; (800cf58 <udp_input+0x1bc>)
 800cf04:	695b      	ldr	r3, [r3, #20]
 800cf06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cf0a:	2be0      	cmp	r3, #224	; 0xe0
 800cf0c:	d112      	bne.n	800cf34 <udp_input+0x198>
      pbuf_free(p);
 800cf0e:	4648      	mov	r0, r9
 800cf10:	f7fb fafa 	bl	8008508 <pbuf_free>
 800cf14:	e77a      	b.n	800ce0c <udp_input+0x70>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800cf16:	4b12      	ldr	r3, [pc, #72]	; (800cf60 <udp_input+0x1c4>)
 800cf18:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800cf1c:	4916      	ldr	r1, [pc, #88]	; (800cf78 <udp_input+0x1dc>)
 800cf1e:	4812      	ldr	r0, [pc, #72]	; (800cf68 <udp_input+0x1cc>)
 800cf20:	f001 ffe8 	bl	800eef4 <iprintf>
      pbuf_free(p);
 800cf24:	4648      	mov	r0, r9
 800cf26:	f7fb faef 	bl	8008508 <pbuf_free>
      goto end;
 800cf2a:	e76f      	b.n	800ce0c <udp_input+0x70>
        pbuf_free(p);
 800cf2c:	4648      	mov	r0, r9
 800cf2e:	f7fb faeb 	bl	8008508 <pbuf_free>
        goto end;
 800cf32:	e76b      	b.n	800ce0c <udp_input+0x70>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800cf34:	4b08      	ldr	r3, [pc, #32]	; (800cf58 <udp_input+0x1bc>)
 800cf36:	8999      	ldrh	r1, [r3, #12]
 800cf38:	3108      	adds	r1, #8
 800cf3a:	b209      	sxth	r1, r1
 800cf3c:	4648      	mov	r0, r9
 800cf3e:	f7fb fad7 	bl	80084f0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800cf42:	2103      	movs	r1, #3
 800cf44:	4648      	mov	r0, r9
 800cf46:	f000 fe25 	bl	800db94 <icmp_dest_unreach>
 800cf4a:	e7e0      	b.n	800cf0e <udp_input+0x172>
    pbuf_free(p);
 800cf4c:	4648      	mov	r0, r9
 800cf4e:	f7fb fadb 	bl	8008508 <pbuf_free>
  return;
 800cf52:	e75b      	b.n	800ce0c <udp_input+0x70>
 800cf54:	465c      	mov	r4, fp
 800cf56:	e7b7      	b.n	800cec8 <udp_input+0x12c>
 800cf58:	2000aff0 	.word	0x2000aff0
 800cf5c:	2001096c 	.word	0x2001096c
 800cf60:	08012414 	.word	0x08012414
 800cf64:	08012444 	.word	0x08012444
 800cf68:	08010198 	.word	0x08010198
 800cf6c:	0801245c 	.word	0x0801245c
 800cf70:	08012478 	.word	0x08012478
 800cf74:	2000b000 	.word	0x2000b000
 800cf78:	080124a0 	.word	0x080124a0

0800cf7c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800cf7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800cf7e:	4d3c      	ldr	r5, [pc, #240]	; (800d070 <udp_bind+0xf4>)
 800cf80:	2900      	cmp	r1, #0
 800cf82:	bf18      	it	ne
 800cf84:	460d      	movne	r5, r1
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf86:	b168      	cbz	r0, 800cfa4 <udp_bind+0x28>
 800cf88:	4604      	mov	r4, r0
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cf8a:	4b3a      	ldr	r3, [pc, #232]	; (800d074 <udp_bind+0xf8>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d05c      	beq.n	800d04c <udp_bind+0xd0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800cf92:	4298      	cmp	r0, r3
 800cf94:	d05d      	beq.n	800d052 <udp_bind+0xd6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800cf96:	4619      	mov	r1, r3
 800cf98:	68c9      	ldr	r1, [r1, #12]
 800cf9a:	b169      	cbz	r1, 800cfb8 <udp_bind+0x3c>
    if (pcb == ipcb) {
 800cf9c:	428c      	cmp	r4, r1
 800cf9e:	d1fb      	bne.n	800cf98 <udp_bind+0x1c>
      rebind = 1;
 800cfa0:	2701      	movs	r7, #1
 800cfa2:	e00a      	b.n	800cfba <udp_bind+0x3e>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800cfa4:	4b34      	ldr	r3, [pc, #208]	; (800d078 <udp_bind+0xfc>)
 800cfa6:	f240 32b7 	movw	r2, #951	; 0x3b7
 800cfaa:	4934      	ldr	r1, [pc, #208]	; (800d07c <udp_bind+0x100>)
 800cfac:	4834      	ldr	r0, [pc, #208]	; (800d080 <udp_bind+0x104>)
 800cfae:	f001 ffa1 	bl	800eef4 <iprintf>
 800cfb2:	f06f 000f 	mvn.w	r0, #15
 800cfb6:	e056      	b.n	800d066 <udp_bind+0xea>
  rebind = 0;
 800cfb8:	2700      	movs	r7, #0
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800cfba:	2a00      	cmp	r2, #0
 800cfbc:	d12f      	bne.n	800d01e <udp_bind+0xa2>
 800cfbe:	4a31      	ldr	r2, [pc, #196]	; (800d084 <udp_bind+0x108>)
 800cfc0:	8810      	ldrh	r0, [r2, #0]
  rebind = 0;
 800cfc2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cfc6:	f64f 7cff 	movw	ip, #65535	; 0xffff
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cfca:	f44f 4e40 	mov.w	lr, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800cfce:	4560      	cmp	r0, ip
 800cfd0:	bf1a      	itte	ne
 800cfd2:	3001      	addne	r0, #1
 800cfd4:	b280      	uxthne	r0, r0
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800cfd6:	4670      	moveq	r0, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfd8:	b1db      	cbz	r3, 800d012 <udp_bind+0x96>
 800cfda:	461a      	mov	r2, r3
    if (pcb->local_port == udp_port) {
 800cfdc:	8a51      	ldrh	r1, [r2, #18]
 800cfde:	4281      	cmp	r1, r0
 800cfe0:	d00e      	beq.n	800d000 <udp_bind+0x84>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfe2:	68d2      	ldr	r2, [r2, #12]
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	d1f9      	bne.n	800cfdc <udp_bind+0x60>
 800cfe8:	4b26      	ldr	r3, [pc, #152]	; (800d084 <udp_bind+0x108>)
 800cfea:	8018      	strh	r0, [r3, #0]
  return udp_port;
 800cfec:	4b25      	ldr	r3, [pc, #148]	; (800d084 <udp_bind+0x108>)
 800cfee:	881a      	ldrh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800cff0:	b325      	cbz	r5, 800d03c <udp_bind+0xc0>
 800cff2:	682b      	ldr	r3, [r5, #0]
 800cff4:	6023      	str	r3, [r4, #0]

  pcb->local_port = port;
 800cff6:	8262      	strh	r2, [r4, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800cff8:	2f00      	cmp	r7, #0
 800cffa:	d02f      	beq.n	800d05c <udp_bind+0xe0>
    udp_pcbs = pcb;
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800cffc:	2000      	movs	r0, #0
 800cffe:	e032      	b.n	800d066 <udp_bind+0xea>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800d000:	3e01      	subs	r6, #1
 800d002:	b2b6      	uxth	r6, r6
 800d004:	2e00      	cmp	r6, #0
 800d006:	d1e2      	bne.n	800cfce <udp_bind+0x52>
 800d008:	4b1e      	ldr	r3, [pc, #120]	; (800d084 <udp_bind+0x108>)
 800d00a:	8018      	strh	r0, [r3, #0]
      return ERR_USE;
 800d00c:	f06f 0007 	mvn.w	r0, #7
 800d010:	e029      	b.n	800d066 <udp_bind+0xea>
 800d012:	4b1c      	ldr	r3, [pc, #112]	; (800d084 <udp_bind+0x108>)
 800d014:	8018      	strh	r0, [r3, #0]
 800d016:	e7e9      	b.n	800cfec <udp_bind+0x70>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800d018:	68db      	ldr	r3, [r3, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d0e8      	beq.n	800cff0 <udp_bind+0x74>
      if (pcb != ipcb) {
 800d01e:	429c      	cmp	r4, r3
 800d020:	d0fa      	beq.n	800d018 <udp_bind+0x9c>
          if ((ipcb->local_port == port) &&
 800d022:	8a59      	ldrh	r1, [r3, #18]
 800d024:	4291      	cmp	r1, r2
 800d026:	d1f7      	bne.n	800d018 <udp_bind+0x9c>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d028:	6818      	ldr	r0, [r3, #0]
 800d02a:	6829      	ldr	r1, [r5, #0]
          if ((ipcb->local_port == port) &&
 800d02c:	4288      	cmp	r0, r1
 800d02e:	d007      	beq.n	800d040 <udp_bind+0xc4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800d030:	b149      	cbz	r1, 800d046 <udp_bind+0xca>
              ip_addr_isany(&ipcb->local_ip))) {
 800d032:	2800      	cmp	r0, #0
 800d034:	d1f0      	bne.n	800d018 <udp_bind+0x9c>
            return ERR_USE;
 800d036:	f06f 0007 	mvn.w	r0, #7
 800d03a:	e014      	b.n	800d066 <udp_bind+0xea>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d03c:	2300      	movs	r3, #0
 800d03e:	e7d9      	b.n	800cff4 <udp_bind+0x78>
            return ERR_USE;
 800d040:	f06f 0007 	mvn.w	r0, #7
 800d044:	e00f      	b.n	800d066 <udp_bind+0xea>
 800d046:	f06f 0007 	mvn.w	r0, #7
 800d04a:	e00c      	b.n	800d066 <udp_bind+0xea>
  if (port == 0) {
 800d04c:	b962      	cbnz	r2, 800d068 <udp_bind+0xec>
  rebind = 0;
 800d04e:	2700      	movs	r7, #0
 800d050:	e7b5      	b.n	800cfbe <udp_bind+0x42>
      rebind = 1;
 800d052:	2701      	movs	r7, #1
 800d054:	e7b1      	b.n	800cfba <udp_bind+0x3e>
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d056:	2300      	movs	r3, #0
 800d058:	6023      	str	r3, [r4, #0]
  pcb->local_port = port;
 800d05a:	8262      	strh	r2, [r4, #18]
    pcb->next = udp_pcbs;
 800d05c:	4b05      	ldr	r3, [pc, #20]	; (800d074 <udp_bind+0xf8>)
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	60e2      	str	r2, [r4, #12]
    udp_pcbs = pcb;
 800d062:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800d064:	2000      	movs	r0, #0
}
 800d066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800d068:	2d00      	cmp	r5, #0
 800d06a:	d0f4      	beq.n	800d056 <udp_bind+0xda>
  rebind = 0;
 800d06c:	2700      	movs	r7, #0
 800d06e:	e7c0      	b.n	800cff2 <udp_bind+0x76>
 800d070:	080127e4 	.word	0x080127e4
 800d074:	2001096c 	.word	0x2001096c
 800d078:	08012414 	.word	0x08012414
 800d07c:	080124bc 	.word	0x080124bc
 800d080:	08010198 	.word	0x08010198
 800d084:	2000002a 	.word	0x2000002a

0800d088 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800d088:	b508      	push	{r3, lr}
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d08a:	b110      	cbz	r0, 800d092 <udp_recv+0xa>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800d08c:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800d08e:	61c2      	str	r2, [r0, #28]
}
 800d090:	bd08      	pop	{r3, pc}
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800d092:	4b04      	ldr	r3, [pc, #16]	; (800d0a4 <udp_recv+0x1c>)
 800d094:	f240 428a 	movw	r2, #1162	; 0x48a
 800d098:	4903      	ldr	r1, [pc, #12]	; (800d0a8 <udp_recv+0x20>)
 800d09a:	4804      	ldr	r0, [pc, #16]	; (800d0ac <udp_recv+0x24>)
 800d09c:	f001 ff2a 	bl	800eef4 <iprintf>
 800d0a0:	e7f6      	b.n	800d090 <udp_recv+0x8>
 800d0a2:	bf00      	nop
 800d0a4:	08012414 	.word	0x08012414
 800d0a8:	080124d4 	.word	0x080124d4
 800d0ac:	08010198 	.word	0x08010198

0800d0b0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800d0b0:	b508      	push	{r3, lr}
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d0b2:	b168      	cbz	r0, 800d0d0 <udp_remove+0x20>
 800d0b4:	4601      	mov	r1, r0

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800d0b6:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <udp_remove+0x40>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	4283      	cmp	r3, r0
 800d0bc:	d010      	beq.n	800d0e0 <udp_remove+0x30>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800d0be:	b193      	cbz	r3, 800d0e6 <udp_remove+0x36>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800d0c0:	461a      	mov	r2, r3
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	b17b      	cbz	r3, 800d0e6 <udp_remove+0x36>
 800d0c6:	428b      	cmp	r3, r1
 800d0c8:	d1fa      	bne.n	800d0c0 <udp_remove+0x10>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800d0ca:	68cb      	ldr	r3, [r1, #12]
 800d0cc:	60d3      	str	r3, [r2, #12]
        break;
 800d0ce:	e00a      	b.n	800d0e6 <udp_remove+0x36>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800d0d0:	4b08      	ldr	r3, [pc, #32]	; (800d0f4 <udp_remove+0x44>)
 800d0d2:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800d0d6:	4908      	ldr	r1, [pc, #32]	; (800d0f8 <udp_remove+0x48>)
 800d0d8:	4808      	ldr	r0, [pc, #32]	; (800d0fc <udp_remove+0x4c>)
 800d0da:	f001 ff0b 	bl	800eef4 <iprintf>
 800d0de:	e005      	b.n	800d0ec <udp_remove+0x3c>
    udp_pcbs = udp_pcbs->next;
 800d0e0:	68c2      	ldr	r2, [r0, #12]
 800d0e2:	4b03      	ldr	r3, [pc, #12]	; (800d0f0 <udp_remove+0x40>)
 800d0e4:	601a      	str	r2, [r3, #0]
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800d0e6:	2000      	movs	r0, #0
 800d0e8:	f7fa ff4c 	bl	8007f84 <memp_free>
}
 800d0ec:	bd08      	pop	{r3, pc}
 800d0ee:	bf00      	nop
 800d0f0:	2001096c 	.word	0x2001096c
 800d0f4:	08012414 	.word	0x08012414
 800d0f8:	080124ec 	.word	0x080124ec
 800d0fc:	08010198 	.word	0x08010198

0800d100 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800d100:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800d102:	2000      	movs	r0, #0
 800d104:	f7fa ff0e 	bl	8007f24 <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800d108:	4604      	mov	r4, r0
 800d10a:	b128      	cbz	r0, 800d118 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800d10c:	2220      	movs	r2, #32
 800d10e:	2100      	movs	r1, #0
 800d110:	f001 fe53 	bl	800edba <memset>
    pcb->ttl = UDP_TTL;
 800d114:	23ff      	movs	r3, #255	; 0xff
 800d116:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800d118:	4620      	mov	r0, r4
 800d11a:	bd10      	pop	{r4, pc}

0800d11c <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 800d11c:	b508      	push	{r3, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800d11e:	f7ff ffef 	bl	800d100 <udp_new>
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 800d122:	bd08      	pop	{r3, pc}

0800d124 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800d124:	b1a8      	cbz	r0, 800d152 <udp_netif_ip_addr_changed+0x2e>
 800d126:	4602      	mov	r2, r0
 800d128:	6803      	ldr	r3, [r0, #0]
 800d12a:	b193      	cbz	r3, 800d152 <udp_netif_ip_addr_changed+0x2e>
 800d12c:	b189      	cbz	r1, 800d152 <udp_netif_ip_addr_changed+0x2e>
 800d12e:	680b      	ldr	r3, [r1, #0]
 800d130:	b17b      	cbz	r3, 800d152 <udp_netif_ip_addr_changed+0x2e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d132:	4b08      	ldr	r3, [pc, #32]	; (800d154 <udp_netif_ip_addr_changed+0x30>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	b163      	cbz	r3, 800d152 <udp_netif_ip_addr_changed+0x2e>
{
 800d138:	b410      	push	{r4}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800d13a:	6810      	ldr	r0, [r2, #0]
 800d13c:	681c      	ldr	r4, [r3, #0]
 800d13e:	4284      	cmp	r4, r0
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800d140:	bf04      	itt	eq
 800d142:	6808      	ldreq	r0, [r1, #0]
 800d144:	6018      	streq	r0, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d1f6      	bne.n	800d13a <udp_netif_ip_addr_changed+0x16>
      }
    }
  }
}
 800d14c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d150:	4770      	bx	lr
 800d152:	4770      	bx	lr
 800d154:	2001096c 	.word	0x2001096c

0800d158 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d158:	b510      	push	{r4, lr}
 800d15a:	4604      	mov	r4, r0
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d15c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800d160:	4b09      	ldr	r3, [pc, #36]	; (800d188 <etharp_free_entry+0x30>)
 800d162:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 800d166:	b138      	cbz	r0, 800d178 <etharp_free_entry+0x20>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d168:	f7fb f9ce 	bl	8008508 <pbuf_free>
    arp_table[i].q = NULL;
 800d16c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d170:	00db      	lsls	r3, r3, #3
 800d172:	4a05      	ldr	r2, [pc, #20]	; (800d188 <etharp_free_entry+0x30>)
 800d174:	2100      	movs	r1, #0
 800d176:	50d1      	str	r1, [r2, r3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d178:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d17c:	4802      	ldr	r0, [pc, #8]	; (800d188 <etharp_free_entry+0x30>)
 800d17e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800d182:	2300      	movs	r3, #0
 800d184:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d186:	bd10      	pop	{r4, pc}
 800d188:	20010970 	.word	0x20010970

0800d18c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d190:	b085      	sub	sp, #20
 800d192:	4606      	mov	r6, r0
 800d194:	4617      	mov	r7, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d196:	4c4f      	ldr	r4, [pc, #316]	; (800d2d4 <etharp_find_entry+0x148>)
{
 800d198:	2300      	movs	r3, #0
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d19a:	4699      	mov	r9, r3
 800d19c:	9302      	str	r3, [sp, #8]
 800d19e:	469b      	mov	fp, r3
  s16_t old_queue = ARP_TABLE_SIZE;
 800d1a0:	200a      	movs	r0, #10
  s16_t empty = ARP_TABLE_SIZE;
 800d1a2:	4605      	mov	r5, r0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d1a4:	4680      	mov	r8, r0
 800d1a6:	9003      	str	r0, [sp, #12]
 800d1a8:	4682      	mov	sl, r0
 800d1aa:	9101      	str	r1, [sp, #4]
 800d1ac:	e007      	b.n	800d1be <etharp_find_entry+0x32>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d1ae:	f1bc 0f00 	cmp.w	ip, #0
 800d1b2:	d10e      	bne.n	800d1d2 <etharp_find_entry+0x46>
 800d1b4:	4675      	mov	r5, lr
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	3418      	adds	r4, #24
 800d1ba:	2b0a      	cmp	r3, #10
 800d1bc:	d02e      	beq.n	800d21c <etharp_find_entry+0x90>
 800d1be:	fa0f fe83 	sxth.w	lr, r3
    u8_t state = arp_table[i].state;
 800d1c2:	4622      	mov	r2, r4
 800d1c4:	f894 c014 	ldrb.w	ip, [r4, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d1c8:	2d0a      	cmp	r5, #10
 800d1ca:	d0f0      	beq.n	800d1ae <etharp_find_entry+0x22>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
 800d1cc:	f1bc 0f00 	cmp.w	ip, #0
 800d1d0:	d0f1      	beq.n	800d1b6 <etharp_find_entry+0x2a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d1d2:	b11e      	cbz	r6, 800d1dc <etharp_find_entry+0x50>
 800d1d4:	6831      	ldr	r1, [r6, #0]
 800d1d6:	6850      	ldr	r0, [r2, #4]
 800d1d8:	4281      	cmp	r1, r0
 800d1da:	d008      	beq.n	800d1ee <etharp_find_entry+0x62>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d1dc:	f1bc 0f01 	cmp.w	ip, #1
 800d1e0:	d00c      	beq.n	800d1fc <etharp_find_entry+0x70>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d1e2:	8a52      	ldrh	r2, [r2, #18]
 800d1e4:	454a      	cmp	r2, r9
 800d1e6:	d3e6      	bcc.n	800d1b6 <etharp_find_entry+0x2a>
            old_stable = i;
            age_stable = arp_table[i].ctime;
 800d1e8:	4691      	mov	r9, r2
          if (arp_table[i].ctime >= age_stable) {
 800d1ea:	46f0      	mov	r8, lr
 800d1ec:	e7e3      	b.n	800d1b6 <etharp_find_entry+0x2a>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d1ee:	2f00      	cmp	r7, #0
 800d1f0:	d064      	beq.n	800d2bc <etharp_find_entry+0x130>
 800d1f2:	6891      	ldr	r1, [r2, #8]
 800d1f4:	42b9      	cmp	r1, r7
 800d1f6:	d1f1      	bne.n	800d1dc <etharp_find_entry+0x50>
 800d1f8:	4675      	mov	r5, lr
 800d1fa:	e031      	b.n	800d260 <etharp_find_entry+0xd4>
        if (arp_table[i].q != NULL) {
 800d1fc:	6811      	ldr	r1, [r2, #0]
 800d1fe:	b129      	cbz	r1, 800d20c <etharp_find_entry+0x80>
          if (arp_table[i].ctime >= age_queue) {
 800d200:	8a52      	ldrh	r2, [r2, #18]
 800d202:	455a      	cmp	r2, fp
 800d204:	d3d7      	bcc.n	800d1b6 <etharp_find_entry+0x2a>
            age_queue = arp_table[i].ctime;
 800d206:	4693      	mov	fp, r2
          if (arp_table[i].ctime >= age_queue) {
 800d208:	46f2      	mov	sl, lr
 800d20a:	e7d4      	b.n	800d1b6 <etharp_find_entry+0x2a>
          if (arp_table[i].ctime >= age_pending) {
 800d20c:	8a52      	ldrh	r2, [r2, #18]
 800d20e:	9902      	ldr	r1, [sp, #8]
 800d210:	428a      	cmp	r2, r1
 800d212:	d3d0      	bcc.n	800d1b6 <etharp_find_entry+0x2a>
            age_pending = arp_table[i].ctime;
 800d214:	9202      	str	r2, [sp, #8]
          if (arp_table[i].ctime >= age_pending) {
 800d216:	f8cd e00c 	str.w	lr, [sp, #12]
 800d21a:	e7cc      	b.n	800d1b6 <etharp_find_entry+0x2a>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d21c:	4650      	mov	r0, sl
 800d21e:	9901      	ldr	r1, [sp, #4]
 800d220:	f011 0f02 	tst.w	r1, #2
 800d224:	d14c      	bne.n	800d2c0 <etharp_find_entry+0x134>
 800d226:	2d0a      	cmp	r5, #10
 800d228:	d01e      	beq.n	800d268 <etharp_find_entry+0xdc>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d22a:	2d09      	cmp	r5, #9
 800d22c:	dc1f      	bgt.n	800d26e <etharp_find_entry+0xe2>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d22e:	462c      	mov	r4, r5
 800d230:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800d234:	4a27      	ldr	r2, [pc, #156]	; (800d2d4 <etharp_find_entry+0x148>)
 800d236:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d23a:	7d1b      	ldrb	r3, [r3, #20]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d135      	bne.n	800d2ac <etharp_find_entry+0x120>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d240:	b136      	cbz	r6, 800d250 <etharp_find_entry+0xc4>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d242:	6831      	ldr	r1, [r6, #0]
 800d244:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d248:	4a22      	ldr	r2, [pc, #136]	; (800d2d4 <etharp_find_entry+0x148>)
 800d24a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d24e:	6059      	str	r1, [r3, #4]
  }
  arp_table[i].ctime = 0;
 800d250:	4b20      	ldr	r3, [pc, #128]	; (800d2d4 <etharp_find_entry+0x148>)
 800d252:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d256:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800d25a:	2100      	movs	r1, #0
 800d25c:	8251      	strh	r1, [r2, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d25e:	6097      	str	r7, [r2, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 800d260:	4628      	mov	r0, r5
 800d262:	b005      	add	sp, #20
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d268:	f011 0f01 	tst.w	r1, #1
 800d26c:	d02b      	beq.n	800d2c6 <etharp_find_entry+0x13a>
    if (old_stable < ARP_TABLE_SIZE) {
 800d26e:	f1b8 0f09 	cmp.w	r8, #9
 800d272:	dc11      	bgt.n	800d298 <etharp_find_entry+0x10c>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d274:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800d278:	4a16      	ldr	r2, [pc, #88]	; (800d2d4 <etharp_find_entry+0x148>)
 800d27a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d27e:	b133      	cbz	r3, 800d28e <etharp_find_entry+0x102>
 800d280:	4b15      	ldr	r3, [pc, #84]	; (800d2d8 <etharp_find_entry+0x14c>)
 800d282:	f240 126d 	movw	r2, #365	; 0x16d
 800d286:	4915      	ldr	r1, [pc, #84]	; (800d2dc <etharp_find_entry+0x150>)
 800d288:	4815      	ldr	r0, [pc, #84]	; (800d2e0 <etharp_find_entry+0x154>)
 800d28a:	f001 fe33 	bl	800eef4 <iprintf>
    etharp_free_entry(i);
 800d28e:	4640      	mov	r0, r8
 800d290:	f7ff ff62 	bl	800d158 <etharp_free_entry>
 800d294:	4645      	mov	r5, r8
 800d296:	e7ca      	b.n	800d22e <etharp_find_entry+0xa2>
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d298:	9b03      	ldr	r3, [sp, #12]
 800d29a:	2b09      	cmp	r3, #9
 800d29c:	dd16      	ble.n	800d2cc <etharp_find_entry+0x140>
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d29e:	2809      	cmp	r0, #9
      return (s16_t)ERR_MEM;
 800d2a0:	bfc8      	it	gt
 800d2a2:	f04f 35ff 	movgt.w	r5, #4294967295
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d2a6:	dcdb      	bgt.n	800d260 <etharp_find_entry+0xd4>
 800d2a8:	4680      	mov	r8, r0
 800d2aa:	e7f0      	b.n	800d28e <etharp_find_entry+0x102>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <etharp_find_entry+0x14c>)
 800d2ae:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800d2b2:	490c      	ldr	r1, [pc, #48]	; (800d2e4 <etharp_find_entry+0x158>)
 800d2b4:	480a      	ldr	r0, [pc, #40]	; (800d2e0 <etharp_find_entry+0x154>)
 800d2b6:	f001 fe1d 	bl	800eef4 <iprintf>
 800d2ba:	e7c1      	b.n	800d240 <etharp_find_entry+0xb4>
 800d2bc:	4675      	mov	r5, lr
 800d2be:	e7cf      	b.n	800d260 <etharp_find_entry+0xd4>
    return (s16_t)ERR_MEM;
 800d2c0:	f04f 35ff 	mov.w	r5, #4294967295
 800d2c4:	e7cc      	b.n	800d260 <etharp_find_entry+0xd4>
 800d2c6:	f04f 35ff 	mov.w	r5, #4294967295
 800d2ca:	e7c9      	b.n	800d260 <etharp_find_entry+0xd4>
 800d2cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d2d0:	e7dd      	b.n	800d28e <etharp_find_entry+0x102>
 800d2d2:	bf00      	nop
 800d2d4:	20010970 	.word	0x20010970
 800d2d8:	08012504 	.word	0x08012504
 800d2dc:	0801253c 	.word	0x0801253c
 800d2e0:	08010198 	.word	0x08010198
 800d2e4:	08012554 	.word	0x08012554

0800d2e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	b082      	sub	sp, #8
 800d2ee:	460f      	mov	r7, r1
 800d2f0:	4690      	mov	r8, r2
 800d2f2:	461d      	mov	r5, r3
 800d2f4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d2f8:	4681      	mov	r9, r0
 800d2fa:	2800      	cmp	r0, #0
 800d2fc:	d042      	beq.n	800d384 <etharp_raw+0x9c>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d2fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d302:	211c      	movs	r1, #28
 800d304:	200e      	movs	r0, #14
 800d306:	f7fb f96f 	bl	80085e8 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d30a:	4606      	mov	r6, r0
 800d30c:	2800      	cmp	r0, #0
 800d30e:	d051      	beq.n	800d3b4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d310:	8943      	ldrh	r3, [r0, #10]
 800d312:	2b1b      	cmp	r3, #27
 800d314:	d93e      	bls.n	800d394 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d316:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d318:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800d31c:	f7fa fab4 	bl	8007888 <lwip_htons>
 800d320:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d322:	f899 302c 	ldrb.w	r3, [r9, #44]	; 0x2c
 800d326:	2b06      	cmp	r3, #6
 800d328:	d13c      	bne.n	800d3a4 <etharp_raw+0xbc>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d32a:	682b      	ldr	r3, [r5, #0]
 800d32c:	60a3      	str	r3, [r4, #8]
 800d32e:	88ab      	ldrh	r3, [r5, #4]
 800d330:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d332:	f8da 3000 	ldr.w	r3, [sl]
 800d336:	f8c4 3012 	str.w	r3, [r4, #18]
 800d33a:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800d33e:	82e3      	strh	r3, [r4, #22]
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	61a3      	str	r3, [r4, #24]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d34e:	2500      	movs	r5, #0
 800d350:	7025      	strb	r5, [r4, #0]
 800d352:	2301      	movs	r3, #1
 800d354:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d356:	2308      	movs	r3, #8
 800d358:	70a3      	strb	r3, [r4, #2]
 800d35a:	70e5      	strb	r5, [r4, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d35c:	2306      	movs	r3, #6
 800d35e:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d360:	2304      	movs	r3, #4
 800d362:	7163      	strb	r3, [r4, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d364:	f640 0306 	movw	r3, #2054	; 0x806
 800d368:	9300      	str	r3, [sp, #0]
 800d36a:	4643      	mov	r3, r8
 800d36c:	463a      	mov	r2, r7
 800d36e:	4631      	mov	r1, r6
 800d370:	4648      	mov	r0, r9
 800d372:	f001 faa9 	bl	800e8c8 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d376:	4630      	mov	r0, r6
 800d378:	f7fb f8c6 	bl	8008508 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800d37c:	4628      	mov	r0, r5
}
 800d37e:	b002      	add	sp, #8
 800d380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <etharp_raw+0xd4>)
 800d386:	f240 4257 	movw	r2, #1111	; 0x457
 800d38a:	490d      	ldr	r1, [pc, #52]	; (800d3c0 <etharp_raw+0xd8>)
 800d38c:	480d      	ldr	r0, [pc, #52]	; (800d3c4 <etharp_raw+0xdc>)
 800d38e:	f001 fdb1 	bl	800eef4 <iprintf>
 800d392:	e7b4      	b.n	800d2fe <etharp_raw+0x16>
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d394:	4b09      	ldr	r3, [pc, #36]	; (800d3bc <etharp_raw+0xd4>)
 800d396:	f240 4262 	movw	r2, #1122	; 0x462
 800d39a:	490b      	ldr	r1, [pc, #44]	; (800d3c8 <etharp_raw+0xe0>)
 800d39c:	4809      	ldr	r0, [pc, #36]	; (800d3c4 <etharp_raw+0xdc>)
 800d39e:	f001 fda9 	bl	800eef4 <iprintf>
 800d3a2:	e7b8      	b.n	800d316 <etharp_raw+0x2e>
  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d3a4:	4b05      	ldr	r3, [pc, #20]	; (800d3bc <etharp_raw+0xd4>)
 800d3a6:	f240 4269 	movw	r2, #1129	; 0x469
 800d3aa:	4908      	ldr	r1, [pc, #32]	; (800d3cc <etharp_raw+0xe4>)
 800d3ac:	4805      	ldr	r0, [pc, #20]	; (800d3c4 <etharp_raw+0xdc>)
 800d3ae:	f001 fda1 	bl	800eef4 <iprintf>
 800d3b2:	e7ba      	b.n	800d32a <etharp_raw+0x42>
    return ERR_MEM;
 800d3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3b8:	e7e1      	b.n	800d37e <etharp_raw+0x96>
 800d3ba:	bf00      	nop
 800d3bc:	08012504 	.word	0x08012504
 800d3c0:	08010188 	.word	0x08010188
 800d3c4:	08010198 	.word	0x08010198
 800d3c8:	08012580 	.word	0x08012580
 800d3cc:	080125b4 	.word	0x080125b4

0800d3d0 <etharp_cleanup_netif>:
{
 800d3d0:	b570      	push	{r4, r5, r6, lr}
 800d3d2:	4606      	mov	r6, r0
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d3d4:	4c08      	ldr	r4, [pc, #32]	; (800d3f8 <etharp_cleanup_netif+0x28>)
 800d3d6:	2500      	movs	r5, #0
 800d3d8:	e003      	b.n	800d3e2 <etharp_cleanup_netif+0x12>
 800d3da:	3501      	adds	r5, #1
 800d3dc:	3418      	adds	r4, #24
 800d3de:	2d0a      	cmp	r5, #10
 800d3e0:	d009      	beq.n	800d3f6 <etharp_cleanup_netif+0x26>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800d3e2:	7d23      	ldrb	r3, [r4, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d0f8      	beq.n	800d3da <etharp_cleanup_netif+0xa>
 800d3e8:	68a3      	ldr	r3, [r4, #8]
 800d3ea:	42b3      	cmp	r3, r6
 800d3ec:	d1f5      	bne.n	800d3da <etharp_cleanup_netif+0xa>
      etharp_free_entry(i);
 800d3ee:	4628      	mov	r0, r5
 800d3f0:	f7ff feb2 	bl	800d158 <etharp_free_entry>
 800d3f4:	e7f1      	b.n	800d3da <etharp_cleanup_netif+0xa>
}
 800d3f6:	bd70      	pop	{r4, r5, r6, pc}
 800d3f8:	20010970 	.word	0x20010970

0800d3fc <etharp_input>:
{
 800d3fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d400:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d402:	b1a9      	cbz	r1, 800d430 <etharp_input+0x34>
 800d404:	4604      	mov	r4, r0
 800d406:	460e      	mov	r6, r1
  hdr = (struct etharp_hdr *)p->payload;
 800d408:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800d40a:	882b      	ldrh	r3, [r5, #0]
 800d40c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d410:	d108      	bne.n	800d424 <etharp_input+0x28>
 800d412:	792b      	ldrb	r3, [r5, #4]
 800d414:	2b06      	cmp	r3, #6
 800d416:	d105      	bne.n	800d424 <etharp_input+0x28>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800d418:	796b      	ldrb	r3, [r5, #5]
 800d41a:	2b04      	cmp	r3, #4
 800d41c:	d102      	bne.n	800d424 <etharp_input+0x28>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800d41e:	886b      	ldrh	r3, [r5, #2]
 800d420:	2b08      	cmp	r3, #8
 800d422:	d00d      	beq.n	800d440 <etharp_input+0x44>
    pbuf_free(p);
 800d424:	4620      	mov	r0, r4
 800d426:	f7fb f86f 	bl	8008508 <pbuf_free>
}
 800d42a:	b007      	add	sp, #28
 800d42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d430:	4b44      	ldr	r3, [pc, #272]	; (800d544 <etharp_input+0x148>)
 800d432:	f240 228a 	movw	r2, #650	; 0x28a
 800d436:	4944      	ldr	r1, [pc, #272]	; (800d548 <etharp_input+0x14c>)
 800d438:	4844      	ldr	r0, [pc, #272]	; (800d54c <etharp_input+0x150>)
 800d43a:	f001 fd5b 	bl	800eef4 <iprintf>
 800d43e:	e7f4      	b.n	800d42a <etharp_input+0x2e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800d440:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800d444:	9305      	str	r3, [sp, #20]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800d446:	69aa      	ldr	r2, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d448:	684b      	ldr	r3, [r1, #4]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d153      	bne.n	800d4f6 <etharp_input+0xfa>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d44e:	f105 0708 	add.w	r7, r5, #8
    for_us = 0;
 800d452:	f04f 0900 	mov.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d456:	f04f 0802 	mov.w	r8, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d45a:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 800d45e:	2b06      	cmp	r3, #6
 800d460:	d155      	bne.n	800d50e <etharp_input+0x112>
  if (ip4_addr_isany(ipaddr) ||
 800d462:	9805      	ldr	r0, [sp, #20]
 800d464:	2800      	cmp	r0, #0
 800d466:	d03e      	beq.n	800d4e6 <etharp_input+0xea>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d468:	4631      	mov	r1, r6
 800d46a:	f000 fd5c 	bl	800df26 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800d46e:	2800      	cmp	r0, #0
 800d470:	d139      	bne.n	800d4e6 <etharp_input+0xea>
      ip4_addr_ismulticast(ipaddr)) {
 800d472:	9b05      	ldr	r3, [sp, #20]
 800d474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800d478:	2be0      	cmp	r3, #224	; 0xe0
 800d47a:	d034      	beq.n	800d4e6 <etharp_input+0xea>
  i = etharp_find_entry(ipaddr, flags, netif);
 800d47c:	4632      	mov	r2, r6
 800d47e:	4641      	mov	r1, r8
 800d480:	a805      	add	r0, sp, #20
 800d482:	f7ff fe83 	bl	800d18c <etharp_find_entry>
  if (i < 0) {
 800d486:	1e03      	subs	r3, r0, #0
 800d488:	db2d      	blt.n	800d4e6 <etharp_input+0xea>
    arp_table[i].state = ETHARP_STATE_STABLE;
 800d48a:	4931      	ldr	r1, [pc, #196]	; (800d550 <etharp_input+0x154>)
 800d48c:	eb03 0e43 	add.w	lr, r3, r3, lsl #1
 800d490:	eb01 0cce 	add.w	ip, r1, lr, lsl #3
 800d494:	2202      	movs	r2, #2
 800d496:	f88c 2014 	strb.w	r2, [ip, #20]
  arp_table[i].netif = netif;
 800d49a:	f8cc 6008 	str.w	r6, [ip, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800d49e:	4672      	mov	r2, lr
 800d4a0:	00d2      	lsls	r2, r2, #3
 800d4a2:	320c      	adds	r2, #12
 800d4a4:	eb01 0802 	add.w	r8, r1, r2
 800d4a8:	6838      	ldr	r0, [r7, #0]
 800d4aa:	5088      	str	r0, [r1, r2]
 800d4ac:	88ba      	ldrh	r2, [r7, #4]
 800d4ae:	f8a8 2004 	strh.w	r2, [r8, #4]
  arp_table[i].ctime = 0;
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	f8ac 2012 	strh.w	r2, [ip, #18]
  if (arp_table[i].q != NULL) {
 800d4b8:	f851 803e 	ldr.w	r8, [r1, lr, lsl #3]
 800d4bc:	f1b8 0f00 	cmp.w	r8, #0
 800d4c0:	d011      	beq.n	800d4e6 <etharp_input+0xea>
    arp_table[i].q = NULL;
 800d4c2:	4673      	mov	r3, lr
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	460a      	mov	r2, r1
 800d4c8:	2100      	movs	r1, #0
 800d4ca:	50d1      	str	r1, [r2, r3]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800d4cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	463b      	mov	r3, r7
 800d4d4:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800d4d8:	4641      	mov	r1, r8
 800d4da:	4630      	mov	r0, r6
 800d4dc:	f001 f9f4 	bl	800e8c8 <ethernet_output>
    pbuf_free(p);
 800d4e0:	4640      	mov	r0, r8
 800d4e2:	f7fb f811 	bl	8008508 <pbuf_free>
  switch (hdr->opcode) {
 800d4e6:	88eb      	ldrh	r3, [r5, #6]
 800d4e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ec:	d017      	beq.n	800d51e <etharp_input+0x122>
  pbuf_free(p);
 800d4ee:	4620      	mov	r0, r4
 800d4f0:	f7fb f80a 	bl	8008508 <pbuf_free>
 800d4f4:	e799      	b.n	800d42a <etharp_input+0x2e>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d4f6:	f105 0708 	add.w	r7, r5, #8
 800d4fa:	4293      	cmp	r3, r2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d4fc:	bf19      	ittee	ne
 800d4fe:	f04f 0900 	movne.w	r9, #0
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d502:	f04f 0802 	movne.w	r8, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800d506:	f04f 0901 	moveq.w	r9, #1
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d50a:	46c8      	moveq	r8, r9
 800d50c:	e7a5      	b.n	800d45a <etharp_input+0x5e>
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800d50e:	4b0d      	ldr	r3, [pc, #52]	; (800d544 <etharp_input+0x148>)
 800d510:	f240 12a9 	movw	r2, #425	; 0x1a9
 800d514:	490f      	ldr	r1, [pc, #60]	; (800d554 <etharp_input+0x158>)
 800d516:	480d      	ldr	r0, [pc, #52]	; (800d54c <etharp_input+0x150>)
 800d518:	f001 fcec 	bl	800eef4 <iprintf>
 800d51c:	e7a1      	b.n	800d462 <etharp_input+0x66>
      if (for_us) {
 800d51e:	f1b9 0f00 	cmp.w	r9, #0
 800d522:	d0e4      	beq.n	800d4ee <etharp_input+0xf2>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d524:	f106 0126 	add.w	r1, r6, #38	; 0x26
        etharp_raw(netif,
 800d528:	2302      	movs	r3, #2
 800d52a:	9303      	str	r3, [sp, #12]
 800d52c:	ab05      	add	r3, sp, #20
 800d52e:	9302      	str	r3, [sp, #8]
 800d530:	9701      	str	r7, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d532:	1d33      	adds	r3, r6, #4
        etharp_raw(netif,
 800d534:	9300      	str	r3, [sp, #0]
 800d536:	460b      	mov	r3, r1
 800d538:	463a      	mov	r2, r7
 800d53a:	4630      	mov	r0, r6
 800d53c:	f7ff fed4 	bl	800d2e8 <etharp_raw>
 800d540:	e7d5      	b.n	800d4ee <etharp_input+0xf2>
 800d542:	bf00      	nop
 800d544:	08012504 	.word	0x08012504
 800d548:	08010188 	.word	0x08010188
 800d54c:	08010198 	.word	0x08010198
 800d550:	20010970 	.word	0x20010970
 800d554:	08012618 	.word	0x08012618

0800d558 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d558:	b510      	push	{r4, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d55e:	f100 0326 	add.w	r3, r0, #38	; 0x26
 800d562:	2401      	movs	r4, #1
 800d564:	9403      	str	r4, [sp, #12]
 800d566:	9102      	str	r1, [sp, #8]
 800d568:	4904      	ldr	r1, [pc, #16]	; (800d57c <etharp_request+0x24>)
 800d56a:	9101      	str	r1, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d56c:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d56e:	9200      	str	r2, [sp, #0]
 800d570:	4a03      	ldr	r2, [pc, #12]	; (800d580 <etharp_request+0x28>)
 800d572:	4619      	mov	r1, r3
 800d574:	f7ff feb8 	bl	800d2e8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800d578:	b004      	add	sp, #16
 800d57a:	bd10      	pop	{r4, pc}
 800d57c:	080129ec 	.word	0x080129ec
 800d580:	080129e4 	.word	0x080129e4

0800d584 <etharp_tmr>:
{
 800d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d586:	4c14      	ldr	r4, [pc, #80]	; (800d5d8 <etharp_tmr+0x54>)
 800d588:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d58a:	2702      	movs	r7, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d58c:	2604      	movs	r6, #4
 800d58e:	e008      	b.n	800d5a2 <etharp_tmr+0x1e>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d590:	2b04      	cmp	r3, #4
 800d592:	d91b      	bls.n	800d5cc <etharp_tmr+0x48>
        etharp_free_entry(i);
 800d594:	4628      	mov	r0, r5
 800d596:	f7ff fddf 	bl	800d158 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d59a:	3501      	adds	r5, #1
 800d59c:	3418      	adds	r4, #24
 800d59e:	2d0a      	cmp	r5, #10
 800d5a0:	d018      	beq.n	800d5d4 <etharp_tmr+0x50>
    u8_t state = arp_table[i].state;
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 800d5a6:	2a00      	cmp	r2, #0
 800d5a8:	d0f7      	beq.n	800d59a <etharp_tmr+0x16>
      arp_table[i].ctime++;
 800d5aa:	89e3      	ldrh	r3, [r4, #14]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b29b      	uxth	r3, r3
 800d5b0:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d5b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d5b6:	d2ed      	bcs.n	800d594 <etharp_tmr+0x10>
 800d5b8:	2a01      	cmp	r2, #1
 800d5ba:	d0e9      	beq.n	800d590 <etharp_tmr+0xc>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d5bc:	2a03      	cmp	r2, #3
 800d5be:	d003      	beq.n	800d5c8 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d5c0:	2a04      	cmp	r2, #4
 800d5c2:	d1ea      	bne.n	800d59a <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d5c4:	7427      	strb	r7, [r4, #16]
 800d5c6:	e7e8      	b.n	800d59a <etharp_tmr+0x16>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d5c8:	7426      	strb	r6, [r4, #16]
 800d5ca:	e7e6      	b.n	800d59a <etharp_tmr+0x16>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d5cc:	6860      	ldr	r0, [r4, #4]
 800d5ce:	f7ff ffc3 	bl	800d558 <etharp_request>
 800d5d2:	e7e2      	b.n	800d59a <etharp_tmr+0x16>
}
 800d5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	20010974 	.word	0x20010974

0800d5dc <etharp_output_to_arp_index>:
{
 800d5dc:	b570      	push	{r4, r5, r6, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	4605      	mov	r5, r0
 800d5e2:	460e      	mov	r6, r1
 800d5e4:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d5e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d5ea:	4b32      	ldr	r3, [pc, #200]	; (800d6b4 <etharp_output_to_arp_index+0xd8>)
 800d5ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5f0:	7d1b      	ldrb	r3, [r3, #20]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d919      	bls.n	800d62a <etharp_output_to_arp_index+0x4e>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d5f6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d5fa:	4a2e      	ldr	r2, [pc, #184]	; (800d6b4 <etharp_output_to_arp_index+0xd8>)
 800d5fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d600:	7d1b      	ldrb	r3, [r3, #20]
 800d602:	2b02      	cmp	r3, #2
 800d604:	d019      	beq.n	800d63a <etharp_output_to_arp_index+0x5e>
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d606:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d60a:	4b2a      	ldr	r3, [pc, #168]	; (800d6b4 <etharp_output_to_arp_index+0xd8>)
 800d60c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800d610:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d614:	9300      	str	r3, [sp, #0]
 800d616:	f104 030c 	add.w	r3, r4, #12
 800d61a:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800d61e:	4631      	mov	r1, r6
 800d620:	4628      	mov	r0, r5
 800d622:	f001 f951 	bl	800e8c8 <ethernet_output>
}
 800d626:	b004      	add	sp, #16
 800d628:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d62a:	4b23      	ldr	r3, [pc, #140]	; (800d6b8 <etharp_output_to_arp_index+0xdc>)
 800d62c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d630:	4922      	ldr	r1, [pc, #136]	; (800d6bc <etharp_output_to_arp_index+0xe0>)
 800d632:	4823      	ldr	r0, [pc, #140]	; (800d6c0 <etharp_output_to_arp_index+0xe4>)
 800d634:	f001 fc5e 	bl	800eef4 <iprintf>
 800d638:	e7dd      	b.n	800d5f6 <etharp_output_to_arp_index+0x1a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d63a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d63e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d642:	8a5b      	ldrh	r3, [r3, #18]
 800d644:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d648:	d822      	bhi.n	800d690 <etharp_output_to_arp_index+0xb4>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d64a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d64e:	d3da      	bcc.n	800d606 <etharp_output_to_arp_index+0x2a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d650:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800d654:	00c0      	lsls	r0, r0, #3
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d656:	f105 0126 	add.w	r1, r5, #38	; 0x26
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d65a:	4a16      	ldr	r2, [pc, #88]	; (800d6b4 <etharp_output_to_arp_index+0xd8>)
 800d65c:	f100 0c0c 	add.w	ip, r0, #12
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d660:	2301      	movs	r3, #1
 800d662:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d664:	3004      	adds	r0, #4
 800d666:	4410      	add	r0, r2
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d668:	9002      	str	r0, [sp, #8]
 800d66a:	4b16      	ldr	r3, [pc, #88]	; (800d6c4 <etharp_output_to_arp_index+0xe8>)
 800d66c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d66e:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	460b      	mov	r3, r1
 800d674:	4462      	add	r2, ip
 800d676:	4628      	mov	r0, r5
 800d678:	f7ff fe36 	bl	800d2e8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d67c:	2800      	cmp	r0, #0
 800d67e:	d1c2      	bne.n	800d606 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d680:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d684:	4a0b      	ldr	r2, [pc, #44]	; (800d6b4 <etharp_output_to_arp_index+0xd8>)
 800d686:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d68a:	2203      	movs	r2, #3
 800d68c:	751a      	strb	r2, [r3, #20]
 800d68e:	e7ba      	b.n	800d606 <etharp_output_to_arp_index+0x2a>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d690:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800d694:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800d698:	3104      	adds	r1, #4
 800d69a:	4628      	mov	r0, r5
 800d69c:	f7ff ff5c 	bl	800d558 <etharp_request>
 800d6a0:	2800      	cmp	r0, #0
 800d6a2:	d1b0      	bne.n	800d606 <etharp_output_to_arp_index+0x2a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d6a4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d6a8:	4a02      	ldr	r2, [pc, #8]	; (800d6b4 <etharp_output_to_arp_index+0xd8>)
 800d6aa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6ae:	2203      	movs	r2, #3
 800d6b0:	751a      	strb	r2, [r3, #20]
 800d6b2:	e7a8      	b.n	800d606 <etharp_output_to_arp_index+0x2a>
 800d6b4:	20010970 	.word	0x20010970
 800d6b8:	08012504 	.word	0x08012504
 800d6bc:	0801263c 	.word	0x0801263c
 800d6c0:	08010198 	.word	0x08010198
 800d6c4:	080129ec 	.word	0x080129ec

0800d6c8 <etharp_query>:
{
 800d6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6cc:	b083      	sub	sp, #12
 800d6ce:	4606      	mov	r6, r0
 800d6d0:	460d      	mov	r5, r1
 800d6d2:	4617      	mov	r7, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d6d4:	4601      	mov	r1, r0
 800d6d6:	6828      	ldr	r0, [r5, #0]
 800d6d8:	f000 fc25 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800d6dc:	2800      	cmp	r0, #0
 800d6de:	d16b      	bne.n	800d7b8 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 800d6e0:	682b      	ldr	r3, [r5, #0]
 800d6e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d6e6:	2ae0      	cmp	r2, #224	; 0xe0
 800d6e8:	d069      	beq.n	800d7be <etharp_query+0xf6>
      ip4_addr_isany(ipaddr)) {
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d06a      	beq.n	800d7c4 <etharp_query+0xfc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d6ee:	4632      	mov	r2, r6
 800d6f0:	2101      	movs	r1, #1
 800d6f2:	4628      	mov	r0, r5
 800d6f4:	f7ff fd4a 	bl	800d18c <etharp_find_entry>
  if (i_err < 0) {
 800d6f8:	1e04      	subs	r4, r0, #0
 800d6fa:	db2b      	blt.n	800d754 <etharp_query+0x8c>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d6fc:	b2a3      	uxth	r3, r4
 800d6fe:	2b7e      	cmp	r3, #126	; 0x7e
 800d700:	d82a      	bhi.n	800d758 <etharp_query+0x90>
  i = (netif_addr_idx_t)i_err;
 800d702:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d704:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800d708:	4b46      	ldr	r3, [pc, #280]	; (800d824 <etharp_query+0x15c>)
 800d70a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d70e:	7d1b      	ldrb	r3, [r3, #20]
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 8082 	bne.w	800d81a <etharp_query+0x152>
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d716:	4613      	mov	r3, r2
 800d718:	4a42      	ldr	r2, [pc, #264]	; (800d824 <etharp_query+0x15c>)
 800d71a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d71e:	2201      	movs	r2, #1
 800d720:	751a      	strb	r2, [r3, #20]
    arp_table[i].netif = netif;
 800d722:	609e      	str	r6, [r3, #8]
    result = etharp_request(netif, ipaddr);
 800d724:	4629      	mov	r1, r5
 800d726:	4630      	mov	r0, r6
 800d728:	f7ff ff16 	bl	800d558 <etharp_request>
    if (q == NULL) {
 800d72c:	b36f      	cbz	r7, 800d78a <etharp_query+0xc2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d72e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d732:	4a3c      	ldr	r2, [pc, #240]	; (800d824 <etharp_query+0x15c>)
 800d734:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d738:	7d1b      	ldrb	r3, [r3, #20]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d814      	bhi.n	800d768 <etharp_query+0xa0>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d73e:	2b01      	cmp	r3, #1
 800d740:	d123      	bne.n	800d78a <etharp_query+0xc2>
    while (p) {
 800d742:	2f00      	cmp	r7, #0
 800d744:	d044      	beq.n	800d7d0 <etharp_query+0x108>
    p = q;
 800d746:	463d      	mov	r5, r7
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d748:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800d82c <etharp_query+0x164>
 800d74c:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800d838 <etharp_query+0x170>
 800d750:	4e35      	ldr	r6, [pc, #212]	; (800d828 <etharp_query+0x160>)
 800d752:	e023      	b.n	800d79c <etharp_query+0xd4>
    return (err_t)i_err;
 800d754:	b260      	sxtb	r0, r4
 800d756:	e018      	b.n	800d78a <etharp_query+0xc2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d758:	4b34      	ldr	r3, [pc, #208]	; (800d82c <etharp_query+0x164>)
 800d75a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d75e:	4934      	ldr	r1, [pc, #208]	; (800d830 <etharp_query+0x168>)
 800d760:	4831      	ldr	r0, [pc, #196]	; (800d828 <etharp_query+0x160>)
 800d762:	f001 fbc7 	bl	800eef4 <iprintf>
 800d766:	e7cc      	b.n	800d702 <etharp_query+0x3a>
    ETHARP_SET_ADDRHINT(netif, i);
 800d768:	4b32      	ldr	r3, [pc, #200]	; (800d834 <etharp_query+0x16c>)
 800d76a:	701c      	strb	r4, [r3, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d76c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d770:	4b2c      	ldr	r3, [pc, #176]	; (800d824 <etharp_query+0x15c>)
 800d772:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d77a:	9200      	str	r2, [sp, #0]
 800d77c:	330c      	adds	r3, #12
 800d77e:	f106 0226 	add.w	r2, r6, #38	; 0x26
 800d782:	4639      	mov	r1, r7
 800d784:	4630      	mov	r0, r6
 800d786:	f001 f89f 	bl	800e8c8 <ethernet_output>
}
 800d78a:	b003      	add	sp, #12
 800d78c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (PBUF_NEEDS_COPY(p)) {
 800d790:	7b2b      	ldrb	r3, [r5, #12]
 800d792:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d796:	d128      	bne.n	800d7ea <etharp_query+0x122>
      p = p->next;
 800d798:	682d      	ldr	r5, [r5, #0]
    while (p) {
 800d79a:	b1cd      	cbz	r5, 800d7d0 <etharp_query+0x108>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d79c:	896a      	ldrh	r2, [r5, #10]
 800d79e:	892b      	ldrh	r3, [r5, #8]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d1f5      	bne.n	800d790 <etharp_query+0xc8>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b1e3      	cbz	r3, 800d7e2 <etharp_query+0x11a>
 800d7a8:	464b      	mov	r3, r9
 800d7aa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d7ae:	4641      	mov	r1, r8
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f001 fb9f 	bl	800eef4 <iprintf>
 800d7b6:	e7eb      	b.n	800d790 <etharp_query+0xc8>
    return ERR_ARG;
 800d7b8:	f06f 000f 	mvn.w	r0, #15
 800d7bc:	e7e5      	b.n	800d78a <etharp_query+0xc2>
 800d7be:	f06f 000f 	mvn.w	r0, #15
 800d7c2:	e7e2      	b.n	800d78a <etharp_query+0xc2>
 800d7c4:	f06f 000f 	mvn.w	r0, #15
 800d7c8:	e7df      	b.n	800d78a <etharp_query+0xc2>
      result = ERR_MEM;
 800d7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ce:	e7dc      	b.n	800d78a <etharp_query+0xc2>
      pbuf_ref(p);
 800d7d0:	4638      	mov	r0, r7
 800d7d2:	f7fb f81d 	bl	8008810 <pbuf_ref>
 800d7d6:	e00f      	b.n	800d7f8 <etharp_query+0x130>
    result = etharp_request(netif, ipaddr);
 800d7d8:	4629      	mov	r1, r5
 800d7da:	4630      	mov	r0, r6
 800d7dc:	f7ff febc 	bl	800d558 <etharp_request>
    if (q == NULL) {
 800d7e0:	e7d3      	b.n	800d78a <etharp_query+0xc2>
      if (PBUF_NEEDS_COPY(p)) {
 800d7e2:	7b2b      	ldrb	r3, [r5, #12]
 800d7e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d7e8:	d0f2      	beq.n	800d7d0 <etharp_query+0x108>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d7ea:	463a      	mov	r2, r7
 800d7ec:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d7f0:	200e      	movs	r0, #14
 800d7f2:	f7fb f957 	bl	8008aa4 <pbuf_clone>
 800d7f6:	4607      	mov	r7, r0
    if (p != NULL) {
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	d0e6      	beq.n	800d7ca <etharp_query+0x102>
      if (arp_table[i].q != NULL) {
 800d7fc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d800:	4a08      	ldr	r2, [pc, #32]	; (800d824 <etharp_query+0x15c>)
 800d802:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800d806:	b108      	cbz	r0, 800d80c <etharp_query+0x144>
        pbuf_free(arp_table[i].q);
 800d808:	f7fa fe7e 	bl	8008508 <pbuf_free>
      arp_table[i].q = p;
 800d80c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800d810:	4a04      	ldr	r2, [pc, #16]	; (800d824 <etharp_query+0x15c>)
 800d812:	f842 7034 	str.w	r7, [r2, r4, lsl #3]
      result = ERR_OK;
 800d816:	2000      	movs	r0, #0
 800d818:	e7b7      	b.n	800d78a <etharp_query+0xc2>
  if (is_new_entry || (q == NULL)) {
 800d81a:	2f00      	cmp	r7, #0
 800d81c:	d0dc      	beq.n	800d7d8 <etharp_query+0x110>
  err_t result = ERR_MEM;
 800d81e:	f04f 30ff 	mov.w	r0, #4294967295
 800d822:	e784      	b.n	800d72e <etharp_query+0x66>
 800d824:	20010970 	.word	0x20010970
 800d828:	08010198 	.word	0x08010198
 800d82c:	08012504 	.word	0x08012504
 800d830:	0801266c 	.word	0x0801266c
 800d834:	20010a60 	.word	0x20010a60
 800d838:	0801267c 	.word	0x0801267c

0800d83c <etharp_output>:
{
 800d83c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d83e:	b085      	sub	sp, #20
 800d840:	460e      	mov	r6, r1
 800d842:	4614      	mov	r4, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d844:	4605      	mov	r5, r0
 800d846:	2800      	cmp	r0, #0
 800d848:	d032      	beq.n	800d8b0 <etharp_output+0x74>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	d038      	beq.n	800d8c0 <etharp_output+0x84>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d84e:	2c00      	cmp	r4, #0
 800d850:	d03e      	beq.n	800d8d0 <etharp_output+0x94>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d852:	4629      	mov	r1, r5
 800d854:	6820      	ldr	r0, [r4, #0]
 800d856:	f000 fb66 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	f040 8082 	bne.w	800d964 <etharp_output+0x128>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d860:	6823      	ldr	r3, [r4, #0]
 800d862:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d866:	2ae0      	cmp	r2, #224	; 0xe0
 800d868:	d03a      	beq.n	800d8e0 <etharp_output+0xa4>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d86a:	686a      	ldr	r2, [r5, #4]
 800d86c:	405a      	eors	r2, r3
 800d86e:	68a9      	ldr	r1, [r5, #8]
 800d870:	420a      	tst	r2, r1
 800d872:	d009      	beq.n	800d888 <etharp_output+0x4c>
        !ip4_addr_islinklocal(ipaddr)) {
 800d874:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d876:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d004      	beq.n	800d888 <etharp_output+0x4c>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d87e:	68eb      	ldr	r3, [r5, #12]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d07b      	beq.n	800d97c <etharp_output+0x140>
            dst_addr = netif_ip4_gw(netif);
 800d884:	f105 040c 	add.w	r4, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d888:	4b3e      	ldr	r3, [pc, #248]	; (800d984 <etharp_output+0x148>)
 800d88a:	781a      	ldrb	r2, [r3, #0]
 800d88c:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 800d890:	4b3d      	ldr	r3, [pc, #244]	; (800d988 <etharp_output+0x14c>)
 800d892:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800d896:	7d1b      	ldrb	r3, [r3, #20]
 800d898:	2b01      	cmp	r3, #1
 800d89a:	d906      	bls.n	800d8aa <etharp_output+0x6e>
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d89c:	460b      	mov	r3, r1
 800d89e:	493a      	ldr	r1, [pc, #232]	; (800d988 <etharp_output+0x14c>)
 800d8a0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d8a4:	689b      	ldr	r3, [r3, #8]
 800d8a6:	42ab      	cmp	r3, r5
 800d8a8:	d030      	beq.n	800d90c <etharp_output+0xd0>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d8aa:	4b37      	ldr	r3, [pc, #220]	; (800d988 <etharp_output+0x14c>)
{
 800d8ac:	2000      	movs	r0, #0
 800d8ae:	e03f      	b.n	800d930 <etharp_output+0xf4>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d8b0:	4b36      	ldr	r3, [pc, #216]	; (800d98c <etharp_output+0x150>)
 800d8b2:	f240 321e 	movw	r2, #798	; 0x31e
 800d8b6:	4936      	ldr	r1, [pc, #216]	; (800d990 <etharp_output+0x154>)
 800d8b8:	4836      	ldr	r0, [pc, #216]	; (800d994 <etharp_output+0x158>)
 800d8ba:	f001 fb1b 	bl	800eef4 <iprintf>
 800d8be:	e7c4      	b.n	800d84a <etharp_output+0xe>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d8c0:	4b32      	ldr	r3, [pc, #200]	; (800d98c <etharp_output+0x150>)
 800d8c2:	f240 321f 	movw	r2, #799	; 0x31f
 800d8c6:	4934      	ldr	r1, [pc, #208]	; (800d998 <etharp_output+0x15c>)
 800d8c8:	4832      	ldr	r0, [pc, #200]	; (800d994 <etharp_output+0x158>)
 800d8ca:	f001 fb13 	bl	800eef4 <iprintf>
 800d8ce:	e7be      	b.n	800d84e <etharp_output+0x12>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d8d0:	4b2e      	ldr	r3, [pc, #184]	; (800d98c <etharp_output+0x150>)
 800d8d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d8d6:	4931      	ldr	r1, [pc, #196]	; (800d99c <etharp_output+0x160>)
 800d8d8:	482e      	ldr	r0, [pc, #184]	; (800d994 <etharp_output+0x158>)
 800d8da:	f001 fb0b 	bl	800eef4 <iprintf>
 800d8de:	e7b8      	b.n	800d852 <etharp_output+0x16>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f88d 3009 	strb.w	r3, [sp, #9]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d8ec:	235e      	movs	r3, #94	; 0x5e
 800d8ee:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d8f2:	7863      	ldrb	r3, [r4, #1]
 800d8f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8f8:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d8fc:	78a3      	ldrb	r3, [r4, #2]
 800d8fe:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d902:	78e3      	ldrb	r3, [r4, #3]
 800d904:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800d908:	ab02      	add	r3, sp, #8
 800d90a:	e02c      	b.n	800d966 <etharp_output+0x12a>
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d90c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800d910:	491d      	ldr	r1, [pc, #116]	; (800d988 <etharp_output+0x14c>)
 800d912:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d916:	6821      	ldr	r1, [r4, #0]
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	4299      	cmp	r1, r3
 800d91c:	d1c5      	bne.n	800d8aa <etharp_output+0x6e>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d91e:	4631      	mov	r1, r6
 800d920:	4628      	mov	r0, r5
 800d922:	f7ff fe5b 	bl	800d5dc <etharp_output_to_arp_index>
 800d926:	e027      	b.n	800d978 <etharp_output+0x13c>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d928:	3001      	adds	r0, #1
 800d92a:	3318      	adds	r3, #24
 800d92c:	280a      	cmp	r0, #10
 800d92e:	d013      	beq.n	800d958 <etharp_output+0x11c>
 800d930:	b2c2      	uxtb	r2, r0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d932:	f893 c014 	ldrb.w	ip, [r3, #20]
 800d936:	f1bc 0f01 	cmp.w	ip, #1
 800d93a:	d9f5      	bls.n	800d928 <etharp_output+0xec>
 800d93c:	6899      	ldr	r1, [r3, #8]
 800d93e:	42a9      	cmp	r1, r5
 800d940:	d1f2      	bne.n	800d928 <etharp_output+0xec>
          (arp_table[i].netif == netif) &&
 800d942:	6821      	ldr	r1, [r4, #0]
 800d944:	685f      	ldr	r7, [r3, #4]
 800d946:	42b9      	cmp	r1, r7
 800d948:	d1ee      	bne.n	800d928 <etharp_output+0xec>
        ETHARP_SET_ADDRHINT(netif, i);
 800d94a:	4b0e      	ldr	r3, [pc, #56]	; (800d984 <etharp_output+0x148>)
 800d94c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d94e:	4631      	mov	r1, r6
 800d950:	4628      	mov	r0, r5
 800d952:	f7ff fe43 	bl	800d5dc <etharp_output_to_arp_index>
 800d956:	e00f      	b.n	800d978 <etharp_output+0x13c>
    return etharp_query(netif, dst_addr, q);
 800d958:	4632      	mov	r2, r6
 800d95a:	4621      	mov	r1, r4
 800d95c:	4628      	mov	r0, r5
 800d95e:	f7ff feb3 	bl	800d6c8 <etharp_query>
 800d962:	e009      	b.n	800d978 <etharp_output+0x13c>
    dest = (const struct eth_addr *)&ethbroadcast;
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <etharp_output+0x164>)
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d966:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d96a:	9200      	str	r2, [sp, #0]
 800d96c:	f105 0226 	add.w	r2, r5, #38	; 0x26
 800d970:	4631      	mov	r1, r6
 800d972:	4628      	mov	r0, r5
 800d974:	f000 ffa8 	bl	800e8c8 <ethernet_output>
}
 800d978:	b005      	add	sp, #20
 800d97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return ERR_RTE;
 800d97c:	f06f 0003 	mvn.w	r0, #3
 800d980:	e7fa      	b.n	800d978 <etharp_output+0x13c>
 800d982:	bf00      	nop
 800d984:	20010a60 	.word	0x20010a60
 800d988:	20010970 	.word	0x20010970
 800d98c:	08012504 	.word	0x08012504
 800d990:	08010188 	.word	0x08010188
 800d994:	08010198 	.word	0x08010198
 800d998:	08012698 	.word	0x08012698
 800d99c:	080125f8 	.word	0x080125f8
 800d9a0:	080129e4 	.word	0x080129e4

0800d9a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a8:	b086      	sub	sp, #24
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	4688      	mov	r8, r1
 800d9ae:	4617      	mov	r7, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d9b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d9b4:	2124      	movs	r1, #36	; 0x24
 800d9b6:	2022      	movs	r0, #34	; 0x22
 800d9b8:	f7fa fe16 	bl	80085e8 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 800d9bc:	b3a0      	cbz	r0, 800da28 <icmp_send_response+0x84>
 800d9be:	4605      	mov	r5, r0
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d9c0:	8943      	ldrh	r3, [r0, #10]
 800d9c2:	2b23      	cmp	r3, #35	; 0x23
 800d9c4:	d933      	bls.n	800da2e <icmp_send_response+0x8a>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d9c6:	f8d6 c004 	ldr.w	ip, [r6, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d9ca:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 800d9cc:	f884 8000 	strb.w	r8, [r4]
  icmphdr->code = code;
 800d9d0:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	7123      	strb	r3, [r4, #4]
 800d9d6:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800d9d8:	71a3      	strb	r3, [r4, #6]
 800d9da:	71e3      	strb	r3, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d9dc:	686b      	ldr	r3, [r5, #4]
 800d9de:	6872      	ldr	r2, [r6, #4]
 800d9e0:	6816      	ldr	r6, [r2, #0]
 800d9e2:	6850      	ldr	r0, [r2, #4]
 800d9e4:	6891      	ldr	r1, [r2, #8]
 800d9e6:	68d7      	ldr	r7, [r2, #12]
 800d9e8:	609e      	str	r6, [r3, #8]
 800d9ea:	60d8      	str	r0, [r3, #12]
 800d9ec:	6119      	str	r1, [r3, #16]
 800d9ee:	615f      	str	r7, [r3, #20]
 800d9f0:	6916      	ldr	r6, [r2, #16]
 800d9f2:	6950      	ldr	r0, [r2, #20]
 800d9f4:	6991      	ldr	r1, [r2, #24]
 800d9f6:	619e      	str	r6, [r3, #24]
 800d9f8:	61d8      	str	r0, [r3, #28]
 800d9fa:	6219      	str	r1, [r3, #32]
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d9fc:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800da00:	9305      	str	r3, [sp, #20]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800da02:	a805      	add	r0, sp, #20
 800da04:	f000 f8ee 	bl	800dbe4 <ip4_route>
#endif
  if (netif != NULL) {
 800da08:	b158      	cbz	r0, 800da22 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800da0a:	2100      	movs	r1, #0
 800da0c:	70a1      	strb	r1, [r4, #2]
 800da0e:	70e1      	strb	r1, [r4, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800da10:	9002      	str	r0, [sp, #8]
 800da12:	2301      	movs	r3, #1
 800da14:	9301      	str	r3, [sp, #4]
 800da16:	9100      	str	r1, [sp, #0]
 800da18:	23ff      	movs	r3, #255	; 0xff
 800da1a:	aa05      	add	r2, sp, #20
 800da1c:	4628      	mov	r0, r5
 800da1e:	f000 fa6d 	bl	800defc <ip4_output_if>
  }
  pbuf_free(q);
 800da22:	4628      	mov	r0, r5
 800da24:	f7fa fd70 	bl	8008508 <pbuf_free>
}
 800da28:	b006      	add	sp, #24
 800da2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800da2e:	4b04      	ldr	r3, [pc, #16]	; (800da40 <icmp_send_response+0x9c>)
 800da30:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800da34:	4903      	ldr	r1, [pc, #12]	; (800da44 <icmp_send_response+0xa0>)
 800da36:	4804      	ldr	r0, [pc, #16]	; (800da48 <icmp_send_response+0xa4>)
 800da38:	f001 fa5c 	bl	800eef4 <iprintf>
 800da3c:	e7c3      	b.n	800d9c6 <icmp_send_response+0x22>
 800da3e:	bf00      	nop
 800da40:	080126a4 	.word	0x080126a4
 800da44:	080126dc 	.word	0x080126dc
 800da48:	08010198 	.word	0x08010198

0800da4c <icmp_input>:
{
 800da4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da50:	b085      	sub	sp, #20
 800da52:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 800da54:	4b4a      	ldr	r3, [pc, #296]	; (800db80 <icmp_input+0x134>)
 800da56:	689f      	ldr	r7, [r3, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 800da58:	783b      	ldrb	r3, [r7, #0]
 800da5a:	f003 030f 	and.w	r3, r3, #15
 800da5e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 800da62:	4644      	mov	r4, r8
  if (hlen < IP_HLEN) {
 800da64:	2c13      	cmp	r4, #19
 800da66:	d915      	bls.n	800da94 <icmp_input+0x48>
 800da68:	460e      	mov	r6, r1
  if (p->len < sizeof(u16_t) * 2) {
 800da6a:	8943      	ldrh	r3, [r0, #10]
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d911      	bls.n	800da94 <icmp_input+0x48>
  type = *((u8_t *)p->payload);
 800da70:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	2b08      	cmp	r3, #8
 800da76:	d161      	bne.n	800db3c <icmp_input+0xf0>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800da78:	4b41      	ldr	r3, [pc, #260]	; (800db80 <icmp_input+0x134>)
 800da7a:	6958      	ldr	r0, [r3, #20]
 800da7c:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800da80:	2be0      	cmp	r3, #224	; 0xe0
 800da82:	d01a      	beq.n	800daba <icmp_input+0x6e>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800da84:	4b3e      	ldr	r3, [pc, #248]	; (800db80 <icmp_input+0x134>)
 800da86:	6819      	ldr	r1, [r3, #0]
 800da88:	f000 fa4d 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800da8c:	b9a8      	cbnz	r0, 800daba <icmp_input+0x6e>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800da8e:	892b      	ldrh	r3, [r5, #8]
 800da90:	2b07      	cmp	r3, #7
 800da92:	d805      	bhi.n	800daa0 <icmp_input+0x54>
  pbuf_free(p);
 800da94:	4628      	mov	r0, r5
 800da96:	f7fa fd37 	bl	8008508 <pbuf_free>
}
 800da9a:	b005      	add	sp, #20
 800da9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800daa0:	f108 090e 	add.w	r9, r8, #14
 800daa4:	4649      	mov	r1, r9
 800daa6:	4628      	mov	r0, r5
 800daa8:	f7fa fce9 	bl	800847e <pbuf_add_header>
 800daac:	2800      	cmp	r0, #0
 800daae:	d03a      	beq.n	800db26 <icmp_input+0xda>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800dab0:	892a      	ldrh	r2, [r5, #8]
 800dab2:	1913      	adds	r3, r2, r4
 800dab4:	b299      	uxth	r1, r3
        if (alloc_len < p->tot_len) {
 800dab6:	428a      	cmp	r2, r1
 800dab8:	d903      	bls.n	800dac2 <icmp_input+0x76>
  pbuf_free(p);
 800daba:	4628      	mov	r0, r5
 800dabc:	f7fa fd24 	bl	8008508 <pbuf_free>
  return;
 800dac0:	e7eb      	b.n	800da9a <icmp_input+0x4e>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800dac2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800dac6:	200e      	movs	r0, #14
 800dac8:	f7fa fd8e 	bl	80085e8 <pbuf_alloc>
        if (r == NULL) {
 800dacc:	4604      	mov	r4, r0
 800dace:	2800      	cmp	r0, #0
 800dad0:	d0f3      	beq.n	800daba <icmp_input+0x6e>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800dad2:	8942      	ldrh	r2, [r0, #10]
 800dad4:	f108 0308 	add.w	r3, r8, #8
 800dad8:	429a      	cmp	r2, r3
 800dada:	d313      	bcc.n	800db04 <icmp_input+0xb8>
        MEMCPY(r->payload, iphdr_in, hlen);
 800dadc:	4642      	mov	r2, r8
 800dade:	4639      	mov	r1, r7
 800dae0:	6840      	ldr	r0, [r0, #4]
 800dae2:	f001 f942 	bl	800ed6a <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 800dae6:	4641      	mov	r1, r8
 800dae8:	4620      	mov	r0, r4
 800daea:	f7fa fccd 	bl	8008488 <pbuf_remove_header>
 800daee:	b960      	cbnz	r0, 800db0a <icmp_input+0xbe>
        if (pbuf_copy(r, p) != ERR_OK) {
 800daf0:	4629      	mov	r1, r5
 800daf2:	4620      	mov	r0, r4
 800daf4:	f7fa fee6 	bl	80088c4 <pbuf_copy>
 800daf8:	b988      	cbnz	r0, 800db1e <icmp_input+0xd2>
        pbuf_free(p);
 800dafa:	4628      	mov	r0, r5
 800dafc:	f7fa fd04 	bl	8008508 <pbuf_free>
        p = r;
 800db00:	4625      	mov	r5, r4
 800db02:	e015      	b.n	800db30 <icmp_input+0xe4>
          pbuf_free(r);
 800db04:	f7fa fd00 	bl	8008508 <pbuf_free>
          goto icmperr;
 800db08:	e7d7      	b.n	800daba <icmp_input+0x6e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800db0a:	4b1e      	ldr	r3, [pc, #120]	; (800db84 <icmp_input+0x138>)
 800db0c:	22b6      	movs	r2, #182	; 0xb6
 800db0e:	491e      	ldr	r1, [pc, #120]	; (800db88 <icmp_input+0x13c>)
 800db10:	481e      	ldr	r0, [pc, #120]	; (800db8c <icmp_input+0x140>)
 800db12:	f001 f9ef 	bl	800eef4 <iprintf>
          pbuf_free(r);
 800db16:	4620      	mov	r0, r4
 800db18:	f7fa fcf6 	bl	8008508 <pbuf_free>
          goto icmperr;
 800db1c:	e7cd      	b.n	800daba <icmp_input+0x6e>
          pbuf_free(r);
 800db1e:	4620      	mov	r0, r4
 800db20:	f7fa fcf2 	bl	8008508 <pbuf_free>
          goto icmperr;
 800db24:	e7c9      	b.n	800daba <icmp_input+0x6e>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800db26:	4649      	mov	r1, r9
 800db28:	4628      	mov	r0, r5
 800db2a:	f7fa fcad 	bl	8008488 <pbuf_remove_header>
 800db2e:	b948      	cbnz	r0, 800db44 <icmp_input+0xf8>
      iecho = (struct icmp_echo_hdr *)p->payload;
 800db30:	686c      	ldr	r4, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 800db32:	4641      	mov	r1, r8
 800db34:	4628      	mov	r0, r5
 800db36:	f7fa fca2 	bl	800847e <pbuf_add_header>
 800db3a:	b150      	cbz	r0, 800db52 <icmp_input+0x106>
  pbuf_free(p);
 800db3c:	4628      	mov	r0, r5
 800db3e:	f7fa fce3 	bl	8008508 <pbuf_free>
  return;
 800db42:	e7aa      	b.n	800da9a <icmp_input+0x4e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800db44:	4b0f      	ldr	r3, [pc, #60]	; (800db84 <icmp_input+0x138>)
 800db46:	22c7      	movs	r2, #199	; 0xc7
 800db48:	4911      	ldr	r1, [pc, #68]	; (800db90 <icmp_input+0x144>)
 800db4a:	4810      	ldr	r0, [pc, #64]	; (800db8c <icmp_input+0x140>)
 800db4c:	f001 f9d2 	bl	800eef4 <iprintf>
          goto icmperr;
 800db50:	e7b3      	b.n	800daba <icmp_input+0x6e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800db52:	6868      	ldr	r0, [r5, #4]
        ip4_addr_copy(iphdr->src, *src);
 800db54:	490a      	ldr	r1, [pc, #40]	; (800db80 <icmp_input+0x134>)
 800db56:	694b      	ldr	r3, [r1, #20]
 800db58:	60c3      	str	r3, [r0, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800db5a:	690b      	ldr	r3, [r1, #16]
 800db5c:	6103      	str	r3, [r0, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800db5e:	2200      	movs	r2, #0
 800db60:	7022      	strb	r2, [r4, #0]
        iecho->chksum = 0;
 800db62:	70a2      	strb	r2, [r4, #2]
 800db64:	70e2      	strb	r2, [r4, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800db66:	23ff      	movs	r3, #255	; 0xff
 800db68:	7203      	strb	r3, [r0, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800db6a:	7282      	strb	r2, [r0, #10]
 800db6c:	72c2      	strb	r2, [r0, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800db6e:	9602      	str	r6, [sp, #8]
 800db70:	2001      	movs	r0, #1
 800db72:	9001      	str	r0, [sp, #4]
 800db74:	9200      	str	r2, [sp, #0]
 800db76:	3114      	adds	r1, #20
 800db78:	4628      	mov	r0, r5
 800db7a:	f000 f9bf 	bl	800defc <ip4_output_if>
        if (ret != ERR_OK) {
 800db7e:	e7dd      	b.n	800db3c <icmp_input+0xf0>
 800db80:	2000aff0 	.word	0x2000aff0
 800db84:	080126a4 	.word	0x080126a4
 800db88:	08012708 	.word	0x08012708
 800db8c:	08010198 	.word	0x08010198
 800db90:	08012740 	.word	0x08012740

0800db94 <icmp_dest_unreach>:
{
 800db94:	b508      	push	{r3, lr}
 800db96:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 800db98:	2103      	movs	r1, #3
 800db9a:	f7ff ff03 	bl	800d9a4 <icmp_send_response>
}
 800db9e:	bd08      	pop	{r3, pc}

0800dba0 <icmp_time_exceeded>:
{
 800dba0:	b508      	push	{r3, lr}
 800dba2:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 800dba4:	210b      	movs	r1, #11
 800dba6:	f7ff fefd 	bl	800d9a4 <icmp_send_response>
}
 800dbaa:	bd08      	pop	{r3, pc}

0800dbac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dbac:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dbae:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dbb2:	f013 0f01 	tst.w	r3, #1
 800dbb6:	d00c      	beq.n	800dbd2 <ip4_input_accept+0x26>
 800dbb8:	4601      	mov	r1, r0
 800dbba:	6843      	ldr	r3, [r0, #4]
 800dbbc:	b15b      	cbz	r3, 800dbd6 <ip4_input_accept+0x2a>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbbe:	4a08      	ldr	r2, [pc, #32]	; (800dbe0 <ip4_input_accept+0x34>)
 800dbc0:	6950      	ldr	r0, [r2, #20]
 800dbc2:	4283      	cmp	r3, r0
 800dbc4:	d009      	beq.n	800dbda <ip4_input_accept+0x2e>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dbc6:	f000 f9ae 	bl	800df26 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dbca:	3800      	subs	r0, #0
 800dbcc:	bf18      	it	ne
 800dbce:	2001      	movne	r0, #1
 800dbd0:	e000      	b.n	800dbd4 <ip4_input_accept+0x28>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dbd2:	2000      	movs	r0, #0
}
 800dbd4:	bd08      	pop	{r3, pc}
  return 0;
 800dbd6:	2000      	movs	r0, #0
 800dbd8:	e7fc      	b.n	800dbd4 <ip4_input_accept+0x28>
      return 1;
 800dbda:	2001      	movs	r0, #1
 800dbdc:	e7fa      	b.n	800dbd4 <ip4_input_accept+0x28>
 800dbde:	bf00      	nop
 800dbe0:	2000aff0 	.word	0x2000aff0

0800dbe4 <ip4_route>:
{
 800dbe4:	b410      	push	{r4}
 800dbe6:	4684      	mov	ip, r0
  NETIF_FOREACH(netif) {
 800dbe8:	4b1a      	ldr	r3, [pc, #104]	; (800dc54 <ip4_route+0x70>)
 800dbea:	6818      	ldr	r0, [r3, #0]
 800dbec:	b9a8      	cbnz	r0, 800dc1a <ip4_route+0x36>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dbee:	4b1a      	ldr	r3, [pc, #104]	; (800dc58 <ip4_route+0x74>)
 800dbf0:	6818      	ldr	r0, [r3, #0]
 800dbf2:	b160      	cbz	r0, 800dc0e <ip4_route+0x2a>
 800dbf4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dbf8:	f003 0305 	and.w	r3, r3, #5
 800dbfc:	2b05      	cmp	r3, #5
 800dbfe:	d124      	bne.n	800dc4a <ip4_route+0x66>
 800dc00:	6843      	ldr	r3, [r0, #4]
 800dc02:	b323      	cbz	r3, 800dc4e <ip4_route+0x6a>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dc04:	f89c 3000 	ldrb.w	r3, [ip]
    return NULL;
 800dc08:	2b7f      	cmp	r3, #127	; 0x7f
 800dc0a:	bf08      	it	eq
 800dc0c:	2000      	moveq	r0, #0
}
 800dc0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc12:	4770      	bx	lr
  NETIF_FOREACH(netif) {
 800dc14:	6800      	ldr	r0, [r0, #0]
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d0e9      	beq.n	800dbee <ip4_route+0xa>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc1a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800dc1e:	f013 0f01 	tst.w	r3, #1
 800dc22:	d0f7      	beq.n	800dc14 <ip4_route+0x30>
 800dc24:	f013 0f04 	tst.w	r3, #4
 800dc28:	d0f4      	beq.n	800dc14 <ip4_route+0x30>
 800dc2a:	6842      	ldr	r2, [r0, #4]
 800dc2c:	2a00      	cmp	r2, #0
 800dc2e:	d0f1      	beq.n	800dc14 <ip4_route+0x30>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800dc30:	f8dc 1000 	ldr.w	r1, [ip]
 800dc34:	404a      	eors	r2, r1
 800dc36:	6884      	ldr	r4, [r0, #8]
 800dc38:	4222      	tst	r2, r4
 800dc3a:	d0e8      	beq.n	800dc0e <ip4_route+0x2a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800dc3c:	f013 0f02 	tst.w	r3, #2
 800dc40:	d1e8      	bne.n	800dc14 <ip4_route+0x30>
 800dc42:	68c3      	ldr	r3, [r0, #12]
 800dc44:	4299      	cmp	r1, r3
 800dc46:	d1e5      	bne.n	800dc14 <ip4_route+0x30>
 800dc48:	e7e1      	b.n	800dc0e <ip4_route+0x2a>
    return NULL;
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e7df      	b.n	800dc0e <ip4_route+0x2a>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e7dd      	b.n	800dc0e <ip4_route+0x2a>
 800dc52:	bf00      	nop
 800dc54:	200108fc 	.word	0x200108fc
 800dc58:	200108f8 	.word	0x200108f8

0800dc5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dc5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc60:	4604      	mov	r4, r0

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dc62:	f8d0 8004 	ldr.w	r8, [r0, #4]
  if (IPH_V(iphdr) != 4) {
 800dc66:	f898 3000 	ldrb.w	r3, [r8]
 800dc6a:	091a      	lsrs	r2, r3, #4
 800dc6c:	2a04      	cmp	r2, #4
 800dc6e:	d004      	beq.n	800dc7a <ip4_input+0x1e>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dc70:	f7fa fc4a 	bl	8008508 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 800dc74:	2000      	movs	r0, #0
 800dc76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc7a:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dc7c:	f003 030f 	and.w	r3, r3, #15
 800dc80:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800dc84:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc86:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 800dc8a:	f7f9 fdfd 	bl	8007888 <lwip_htons>
 800dc8e:	4606      	mov	r6, r0
  if (iphdr_len < p->tot_len) {
 800dc90:	8923      	ldrh	r3, [r4, #8]
 800dc92:	4283      	cmp	r3, r0
 800dc94:	d860      	bhi.n	800dd58 <ip4_input+0xfc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dc96:	8963      	ldrh	r3, [r4, #10]
 800dc98:	42ab      	cmp	r3, r5
 800dc9a:	d362      	bcc.n	800dd62 <ip4_input+0x106>
 800dc9c:	8923      	ldrh	r3, [r4, #8]
 800dc9e:	42b3      	cmp	r3, r6
 800dca0:	d35f      	bcc.n	800dd62 <ip4_input+0x106>
 800dca2:	2d13      	cmp	r5, #19
 800dca4:	d95d      	bls.n	800dd62 <ip4_input+0x106>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dca6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dcaa:	4a52      	ldr	r2, [pc, #328]	; (800ddf4 <ip4_input+0x198>)
 800dcac:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dcae:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800dcb2:	6111      	str	r1, [r2, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dcb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcb8:	2be0      	cmp	r3, #224	; 0xe0
 800dcba:	d156      	bne.n	800dd6a <ip4_input+0x10e>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dcbc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800dcc0:	f013 0f01 	tst.w	r3, #1
 800dcc4:	d068      	beq.n	800dd98 <ip4_input+0x13c>
 800dcc6:	687b      	ldr	r3, [r7, #4]
      netif = inp;
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	bf14      	ite	ne
 800dccc:	463d      	movne	r5, r7
 800dcce:	2500      	moveq	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	4b48      	ldr	r3, [pc, #288]	; (800ddf4 <ip4_input+0x198>)
 800dcd4:	6918      	ldr	r0, [r3, #16]
 800dcd6:	f000 f926 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800dcda:	2800      	cmp	r0, #0
 800dcdc:	d162      	bne.n	800dda4 <ip4_input+0x148>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dcde:	4b45      	ldr	r3, [pc, #276]	; (800ddf4 <ip4_input+0x198>)
 800dce0:	691b      	ldr	r3, [r3, #16]
 800dce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dce6:	2be0      	cmp	r3, #224	; 0xe0
 800dce8:	d05c      	beq.n	800dda4 <ip4_input+0x148>
  if (netif == NULL) {
 800dcea:	2d00      	cmp	r5, #0
 800dcec:	d05e      	beq.n	800ddac <ip4_input+0x150>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dcee:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800dcf2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	b13b      	cbz	r3, 800dd0a <ip4_input+0xae>
    p = ip4_reass(p);
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	f000 fa62 	bl	800e1c4 <ip4_reass>
    if (p == NULL) {
 800dd00:	4604      	mov	r4, r0
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0b6      	beq.n	800dc74 <ip4_input+0x18>
    iphdr = (const struct ip_hdr *)p->payload;
 800dd06:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 800dd0a:	4a3a      	ldr	r2, [pc, #232]	; (800ddf4 <ip4_input+0x198>)
 800dd0c:	6015      	str	r5, [r2, #0]
  ip_data.current_input_netif = inp;
 800dd0e:	6057      	str	r7, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800dd10:	f8c2 8008 	str.w	r8, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dd14:	f898 3000 	ldrb.w	r3, [r8]
 800dd18:	f003 030f 	and.w	r3, r3, #15
 800dd1c:	009b      	lsls	r3, r3, #2
 800dd1e:	8193      	strh	r3, [r2, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800dd20:	4649      	mov	r1, r9
 800dd22:	4620      	mov	r0, r4
 800dd24:	f7fa fbb0 	bl	8008488 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 800dd28:	f898 3009 	ldrb.w	r3, [r8, #9]
 800dd2c:	2b06      	cmp	r3, #6
 800dd2e:	d04e      	beq.n	800ddce <ip4_input+0x172>
 800dd30:	2b11      	cmp	r3, #17
 800dd32:	d03f      	beq.n	800ddb4 <ip4_input+0x158>
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d04f      	beq.n	800ddd8 <ip4_input+0x17c>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dd38:	4629      	mov	r1, r5
 800dd3a:	4b2e      	ldr	r3, [pc, #184]	; (800ddf4 <ip4_input+0x198>)
 800dd3c:	6958      	ldr	r0, [r3, #20]
 800dd3e:	f000 f8f2 	bl	800df26 <ip4_addr_isbroadcast_u32>
 800dd42:	b928      	cbnz	r0, 800dd50 <ip4_input+0xf4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dd44:	4b2b      	ldr	r3, [pc, #172]	; (800ddf4 <ip4_input+0x198>)
 800dd46:	695b      	ldr	r3, [r3, #20]
 800dd48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800dd4c:	2be0      	cmp	r3, #224	; 0xe0
 800dd4e:	d148      	bne.n	800dde2 <ip4_input+0x186>
        pbuf_free(p);
 800dd50:	4620      	mov	r0, r4
 800dd52:	f7fa fbd9 	bl	8008508 <pbuf_free>
        break;
 800dd56:	e031      	b.n	800ddbc <ip4_input+0x160>
    pbuf_realloc(p, iphdr_len);
 800dd58:	4601      	mov	r1, r0
 800dd5a:	4620      	mov	r0, r4
 800dd5c:	f7fa fcec 	bl	8008738 <pbuf_realloc>
 800dd60:	e799      	b.n	800dc96 <ip4_input+0x3a>
    pbuf_free(p);
 800dd62:	4620      	mov	r0, r4
 800dd64:	f7fa fbd0 	bl	8008508 <pbuf_free>
    return ERR_OK;
 800dd68:	e784      	b.n	800dc74 <ip4_input+0x18>
    if (ip4_input_accept(inp)) {
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	f7ff ff1e 	bl	800dbac <ip4_input_accept>
 800dd70:	b9a0      	cbnz	r0, 800dd9c <ip4_input+0x140>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dd72:	4b20      	ldr	r3, [pc, #128]	; (800ddf4 <ip4_input+0x198>)
 800dd74:	7d1b      	ldrb	r3, [r3, #20]
 800dd76:	2b7f      	cmp	r3, #127	; 0x7f
 800dd78:	d012      	beq.n	800dda0 <ip4_input+0x144>
        NETIF_FOREACH(netif) {
 800dd7a:	4b1f      	ldr	r3, [pc, #124]	; (800ddf8 <ip4_input+0x19c>)
 800dd7c:	681d      	ldr	r5, [r3, #0]
 800dd7e:	b91d      	cbnz	r5, 800dd88 <ip4_input+0x12c>
 800dd80:	e7a6      	b.n	800dcd0 <ip4_input+0x74>
 800dd82:	682d      	ldr	r5, [r5, #0]
 800dd84:	2d00      	cmp	r5, #0
 800dd86:	d0a3      	beq.n	800dcd0 <ip4_input+0x74>
          if (netif == inp) {
 800dd88:	42af      	cmp	r7, r5
 800dd8a:	d0fa      	beq.n	800dd82 <ip4_input+0x126>
          if (ip4_input_accept(netif)) {
 800dd8c:	4628      	mov	r0, r5
 800dd8e:	f7ff ff0d 	bl	800dbac <ip4_input_accept>
 800dd92:	2800      	cmp	r0, #0
 800dd94:	d0f5      	beq.n	800dd82 <ip4_input+0x126>
 800dd96:	e79b      	b.n	800dcd0 <ip4_input+0x74>
      netif = NULL;
 800dd98:	2500      	movs	r5, #0
 800dd9a:	e799      	b.n	800dcd0 <ip4_input+0x74>
      netif = inp;
 800dd9c:	463d      	mov	r5, r7
 800dd9e:	e797      	b.n	800dcd0 <ip4_input+0x74>
      netif = NULL;
 800dda0:	2500      	movs	r5, #0
 800dda2:	e795      	b.n	800dcd0 <ip4_input+0x74>
      pbuf_free(p);
 800dda4:	4620      	mov	r0, r4
 800dda6:	f7fa fbaf 	bl	8008508 <pbuf_free>
      return ERR_OK;
 800ddaa:	e763      	b.n	800dc74 <ip4_input+0x18>
    pbuf_free(p);
 800ddac:	4620      	mov	r0, r4
 800ddae:	f7fa fbab 	bl	8008508 <pbuf_free>
    return ERR_OK;
 800ddb2:	e75f      	b.n	800dc74 <ip4_input+0x18>
        udp_input(p, inp);
 800ddb4:	4639      	mov	r1, r7
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f7fe fff0 	bl	800cd9c <udp_input>
  ip_data.current_netif = NULL;
 800ddbc:	4b0d      	ldr	r3, [pc, #52]	; (800ddf4 <ip4_input+0x198>)
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ddc2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ddc4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ddc6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800ddc8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800ddca:	615a      	str	r2, [r3, #20]
  return ERR_OK;
 800ddcc:	e752      	b.n	800dc74 <ip4_input+0x18>
        tcp_input(p, inp);
 800ddce:	4639      	mov	r1, r7
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f7fc fdf5 	bl	800a9c0 <tcp_input>
        break;
 800ddd6:	e7f1      	b.n	800ddbc <ip4_input+0x160>
        icmp_input(p, inp);
 800ddd8:	4639      	mov	r1, r7
 800ddda:	4620      	mov	r0, r4
 800dddc:	f7ff fe36 	bl	800da4c <icmp_input>
        break;
 800dde0:	e7ec      	b.n	800ddbc <ip4_input+0x160>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800dde2:	4649      	mov	r1, r9
 800dde4:	4620      	mov	r0, r4
 800dde6:	f7fa fb83 	bl	80084f0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ddea:	2102      	movs	r1, #2
 800ddec:	4620      	mov	r0, r4
 800ddee:	f7ff fed1 	bl	800db94 <icmp_dest_unreach>
 800ddf2:	e7ad      	b.n	800dd50 <ip4_input+0xf4>
 800ddf4:	2000aff0 	.word	0x2000aff0
 800ddf8:	200108fc 	.word	0x200108fc

0800ddfc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800ddfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de00:	b083      	sub	sp, #12
 800de02:	4604      	mov	r4, r0
 800de04:	460f      	mov	r7, r1
 800de06:	4616      	mov	r6, r2
 800de08:	4699      	mov	r9, r3
 800de0a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800de0e:	7b82      	ldrb	r2, [r0, #14]
 800de10:	2a01      	cmp	r2, #1
 800de12:	d13f      	bne.n	800de94 <ip4_output_if_src+0x98>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800de14:	2e00      	cmp	r6, #0
 800de16:	d050      	beq.n	800deba <ip4_output_if_src+0xbe>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800de18:	2114      	movs	r1, #20
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7fa fb2f 	bl	800847e <pbuf_add_header>
 800de20:	2800      	cmp	r0, #0
 800de22:	d158      	bne.n	800ded6 <ip4_output_if_src+0xda>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
 800de24:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800de26:	8963      	ldrh	r3, [r4, #10]
 800de28:	2b13      	cmp	r3, #19
 800de2a:	d93b      	bls.n	800dea4 <ip4_output_if_src+0xa8>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800de2c:	f885 9008 	strb.w	r9, [r5, #8]
    IPH_PROTO_SET(iphdr, proto);
 800de30:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 800de34:	726b      	strb	r3, [r5, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800de36:	6833      	ldr	r3, [r6, #0]
 800de38:	612b      	str	r3, [r5, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800de3a:	2345      	movs	r3, #69	; 0x45
 800de3c:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 800de3e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800de42:	706b      	strb	r3, [r5, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800de44:	8920      	ldrh	r0, [r4, #8]
 800de46:	f7f9 fd1f 	bl	8007888 <lwip_htons>
 800de4a:	8068      	strh	r0, [r5, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800de4c:	2300      	movs	r3, #0
 800de4e:	71ab      	strb	r3, [r5, #6]
 800de50:	71eb      	strb	r3, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800de52:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800def8 <ip4_output_if_src+0xfc>
 800de56:	f8b9 0000 	ldrh.w	r0, [r9]
 800de5a:	f7f9 fd15 	bl	8007888 <lwip_htons>
 800de5e:	80a8      	strh	r0, [r5, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800de60:	f8b9 3000 	ldrh.w	r3, [r9]
 800de64:	3301      	adds	r3, #1
 800de66:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 800de6a:	b31f      	cbz	r7, 800deb4 <ip4_output_if_src+0xb8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	60eb      	str	r3, [r5, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800de70:	2300      	movs	r3, #0
 800de72:	72ab      	strb	r3, [r5, #10]
 800de74:	72eb      	strb	r3, [r5, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800de76:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 800de7a:	b113      	cbz	r3, 800de82 <ip4_output_if_src+0x86>
 800de7c:	8922      	ldrh	r2, [r4, #8]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d823      	bhi.n	800deca <ip4_output_if_src+0xce>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800de82:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800de86:	4632      	mov	r2, r6
 800de88:	4621      	mov	r1, r4
 800de8a:	4640      	mov	r0, r8
 800de8c:	4798      	blx	r3
}
 800de8e:	b003      	add	sp, #12
 800de90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800de94:	4b13      	ldr	r3, [pc, #76]	; (800dee4 <ip4_output_if_src+0xe8>)
 800de96:	f44f 7255 	mov.w	r2, #852	; 0x354
 800de9a:	4913      	ldr	r1, [pc, #76]	; (800dee8 <ip4_output_if_src+0xec>)
 800de9c:	4813      	ldr	r0, [pc, #76]	; (800deec <ip4_output_if_src+0xf0>)
 800de9e:	f001 f829 	bl	800eef4 <iprintf>
 800dea2:	e7b7      	b.n	800de14 <ip4_output_if_src+0x18>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800dea4:	4b0f      	ldr	r3, [pc, #60]	; (800dee4 <ip4_output_if_src+0xe8>)
 800dea6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800deaa:	4911      	ldr	r1, [pc, #68]	; (800def0 <ip4_output_if_src+0xf4>)
 800deac:	480f      	ldr	r0, [pc, #60]	; (800deec <ip4_output_if_src+0xf0>)
 800deae:	f001 f821 	bl	800eef4 <iprintf>
 800deb2:	e7bb      	b.n	800de2c <ip4_output_if_src+0x30>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800deb4:	4b0f      	ldr	r3, [pc, #60]	; (800def4 <ip4_output_if_src+0xf8>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	e7d9      	b.n	800de6e <ip4_output_if_src+0x72>
    if (p->len < IP_HLEN) {
 800deba:	8963      	ldrh	r3, [r4, #10]
 800debc:	2b13      	cmp	r3, #19
 800debe:	d90d      	bls.n	800dedc <ip4_output_if_src+0xe0>
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dec0:	6863      	ldr	r3, [r4, #4]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800dec6:	ae01      	add	r6, sp, #4
 800dec8:	e7d5      	b.n	800de76 <ip4_output_if_src+0x7a>
    return ip4_frag(p, netif, dest);
 800deca:	4632      	mov	r2, r6
 800decc:	4641      	mov	r1, r8
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 fba2 	bl	800e618 <ip4_frag>
 800ded4:	e7db      	b.n	800de8e <ip4_output_if_src+0x92>
      return ERR_BUF;
 800ded6:	f06f 0001 	mvn.w	r0, #1
 800deda:	e7d8      	b.n	800de8e <ip4_output_if_src+0x92>
      return ERR_BUF;
 800dedc:	f06f 0001 	mvn.w	r0, #1
 800dee0:	e7d5      	b.n	800de8e <ip4_output_if_src+0x92>
 800dee2:	bf00      	nop
 800dee4:	08012774 	.word	0x08012774
 800dee8:	080127a8 	.word	0x080127a8
 800deec:	08010198 	.word	0x08010198
 800def0:	080127b4 	.word	0x080127b4
 800def4:	080127e4 	.word	0x080127e4
 800def8:	20010a62 	.word	0x20010a62

0800defc <ip4_output_if>:
{
 800defc:	b510      	push	{r4, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	9c08      	ldr	r4, [sp, #32]
  if (dest != LWIP_IP_HDRINCL) {
 800df02:	4694      	mov	ip, r2
 800df04:	b11a      	cbz	r2, 800df0e <ip4_output_if+0x12>
    if (ip4_addr_isany(src)) {
 800df06:	b109      	cbz	r1, 800df0c <ip4_output_if+0x10>
 800df08:	680a      	ldr	r2, [r1, #0]
 800df0a:	b902      	cbnz	r2, 800df0e <ip4_output_if+0x12>
      src_used = netif_ip4_addr(netif);
 800df0c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800df0e:	9402      	str	r4, [sp, #8]
 800df10:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800df14:	9201      	str	r2, [sp, #4]
 800df16:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800df1a:	9200      	str	r2, [sp, #0]
 800df1c:	4662      	mov	r2, ip
 800df1e:	f7ff ff6d 	bl	800ddfc <ip4_output_if_src>
}
 800df22:	b004      	add	sp, #16
 800df24:	bd10      	pop	{r4, pc}

0800df26 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800df26:	4603      	mov	r3, r0
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800df28:	1e42      	subs	r2, r0, #1
 800df2a:	f112 0f03 	cmn.w	r2, #3
 800df2e:	d813      	bhi.n	800df58 <ip4_addr_isbroadcast_u32+0x32>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800df30:	f891 002d 	ldrb.w	r0, [r1, #45]	; 0x2d
 800df34:	f010 0002 	ands.w	r0, r0, #2
 800df38:	d013      	beq.n	800df62 <ip4_addr_isbroadcast_u32+0x3c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800df3a:	684a      	ldr	r2, [r1, #4]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d00d      	beq.n	800df5c <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800df40:	6889      	ldr	r1, [r1, #8]
 800df42:	405a      	eors	r2, r3
 800df44:	420a      	tst	r2, r1
 800df46:	d10b      	bne.n	800df60 <ip4_addr_isbroadcast_u32+0x3a>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800df48:	43c8      	mvns	r0, r1
 800df4a:	ea23 0301 	bic.w	r3, r3, r1
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 800df4e:	4283      	cmp	r3, r0
 800df50:	bf14      	ite	ne
 800df52:	2000      	movne	r0, #0
 800df54:	2001      	moveq	r0, #1
 800df56:	4770      	bx	lr
    return 1;
 800df58:	2001      	movs	r0, #1
 800df5a:	4770      	bx	lr
    return 0;
 800df5c:	2000      	movs	r0, #0
 800df5e:	4770      	bx	lr
    return 0;
 800df60:	2000      	movs	r0, #0
  }
}
 800df62:	4770      	bx	lr

0800df64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800df64:	b538      	push	{r3, r4, r5, lr}
 800df66:	4604      	mov	r4, r0
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800df68:	4b0c      	ldr	r3, [pc, #48]	; (800df9c <ip_reass_dequeue_datagram+0x38>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4283      	cmp	r3, r0
 800df6e:	d008      	beq.n	800df82 <ip_reass_dequeue_datagram+0x1e>
 800df70:	460d      	mov	r5, r1
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800df72:	b151      	cbz	r1, 800df8a <ip_reass_dequeue_datagram+0x26>
    prev->next = ipr->next;
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	602b      	str	r3, [r5, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800df78:	4621      	mov	r1, r4
 800df7a:	2004      	movs	r0, #4
 800df7c:	f7fa f802 	bl	8007f84 <memp_free>
}
 800df80:	bd38      	pop	{r3, r4, r5, pc}
    reassdatagrams = ipr->next;
 800df82:	6802      	ldr	r2, [r0, #0]
 800df84:	4b05      	ldr	r3, [pc, #20]	; (800df9c <ip_reass_dequeue_datagram+0x38>)
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	e7f6      	b.n	800df78 <ip_reass_dequeue_datagram+0x14>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800df8a:	4b05      	ldr	r3, [pc, #20]	; (800dfa0 <ip_reass_dequeue_datagram+0x3c>)
 800df8c:	f240 1245 	movw	r2, #325	; 0x145
 800df90:	4904      	ldr	r1, [pc, #16]	; (800dfa4 <ip_reass_dequeue_datagram+0x40>)
 800df92:	4805      	ldr	r0, [pc, #20]	; (800dfa8 <ip_reass_dequeue_datagram+0x44>)
 800df94:	f000 ffae 	bl	800eef4 <iprintf>
 800df98:	e7ec      	b.n	800df74 <ip_reass_dequeue_datagram+0x10>
 800df9a:	bf00      	nop
 800df9c:	20010a68 	.word	0x20010a68
 800dfa0:	080127e8 	.word	0x080127e8
 800dfa4:	08012824 	.word	0x08012824
 800dfa8:	08010198 	.word	0x08010198

0800dfac <ip_reass_free_complete_datagram>:
{
 800dfac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfb0:	4680      	mov	r8, r0
 800dfb2:	4689      	mov	r9, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dfb4:	4281      	cmp	r1, r0
 800dfb6:	d017      	beq.n	800dfe8 <ip_reass_free_complete_datagram+0x3c>
  if (prev != NULL) {
 800dfb8:	f1b9 0f00 	cmp.w	r9, #0
 800dfbc:	d009      	beq.n	800dfd2 <ip_reass_free_complete_datagram+0x26>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800dfbe:	f8d9 3000 	ldr.w	r3, [r9]
 800dfc2:	4543      	cmp	r3, r8
 800dfc4:	d005      	beq.n	800dfd2 <ip_reass_free_complete_datagram+0x26>
 800dfc6:	4b34      	ldr	r3, [pc, #208]	; (800e098 <ip_reass_free_complete_datagram+0xec>)
 800dfc8:	22ad      	movs	r2, #173	; 0xad
 800dfca:	4934      	ldr	r1, [pc, #208]	; (800e09c <ip_reass_free_complete_datagram+0xf0>)
 800dfcc:	4834      	ldr	r0, [pc, #208]	; (800e0a0 <ip_reass_free_complete_datagram+0xf4>)
 800dfce:	f000 ff91 	bl	800eef4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800dfd2:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800dfd6:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 800dfd8:	889a      	ldrh	r2, [r3, #4]
 800dfda:	b162      	cbz	r2, 800dff6 <ip_reass_free_complete_datagram+0x4a>
  u16_t pbufs_freed = 0;
 800dfdc:	2400      	movs	r4, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800dfde:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800e098 <ip_reass_free_complete_datagram+0xec>
 800dfe2:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800e0b0 <ip_reass_free_complete_datagram+0x104>
 800dfe6:	e03e      	b.n	800e066 <ip_reass_free_complete_datagram+0xba>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800dfe8:	4b2b      	ldr	r3, [pc, #172]	; (800e098 <ip_reass_free_complete_datagram+0xec>)
 800dfea:	22ab      	movs	r2, #171	; 0xab
 800dfec:	492d      	ldr	r1, [pc, #180]	; (800e0a4 <ip_reass_free_complete_datagram+0xf8>)
 800dfee:	482c      	ldr	r0, [pc, #176]	; (800e0a0 <ip_reass_free_complete_datagram+0xf4>)
 800dff0:	f000 ff80 	bl	800eef4 <iprintf>
 800dff4:	e7e0      	b.n	800dfb8 <ip_reass_free_complete_datagram+0xc>
    ipr->p = iprh->next_pbuf;
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f8c8 3004 	str.w	r3, [r8, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800dffc:	6873      	ldr	r3, [r6, #4]
 800dffe:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800e002:	f8d8 400c 	ldr.w	r4, [r8, #12]
 800e006:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800e00a:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800e00e:	601a      	str	r2, [r3, #0]
 800e010:	605c      	str	r4, [r3, #4]
 800e012:	6098      	str	r0, [r3, #8]
 800e014:	60d9      	str	r1, [r3, #12]
 800e016:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800e01a:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e01c:	2101      	movs	r1, #1
 800e01e:	4630      	mov	r0, r6
 800e020:	f7ff fdbe 	bl	800dba0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e024:	4630      	mov	r0, r6
 800e026:	f7fa fbe7 	bl	80087f8 <pbuf_clen>
 800e02a:	4604      	mov	r4, r0
    pbuf_free(p);
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7fa fa6b 	bl	8008508 <pbuf_free>
  p = ipr->p;
 800e032:	f8d8 6004 	ldr.w	r6, [r8, #4]
  while (p != NULL) {
 800e036:	2e00      	cmp	r6, #0
 800e038:	d1d1      	bne.n	800dfde <ip_reass_free_complete_datagram+0x32>
  ip_reass_dequeue_datagram(ipr, prev);
 800e03a:	4649      	mov	r1, r9
 800e03c:	4640      	mov	r0, r8
 800e03e:	f7ff ff91 	bl	800df64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e042:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <ip_reass_free_complete_datagram+0xfc>)
 800e044:	881b      	ldrh	r3, [r3, #0]
 800e046:	42a3      	cmp	r3, r4
 800e048:	d31f      	bcc.n	800e08a <ip_reass_free_complete_datagram+0xde>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e04a:	4a17      	ldr	r2, [pc, #92]	; (800e0a8 <ip_reass_free_complete_datagram+0xfc>)
 800e04c:	8813      	ldrh	r3, [r2, #0]
 800e04e:	1b1b      	subs	r3, r3, r4
 800e050:	8013      	strh	r3, [r2, #0]
}
 800e052:	4620      	mov	r0, r4
 800e054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e058:	4425      	add	r5, r4
 800e05a:	b2ac      	uxth	r4, r5
    pbuf_free(pcur);
 800e05c:	4638      	mov	r0, r7
 800e05e:	f7fa fa53 	bl	8008508 <pbuf_free>
  while (p != NULL) {
 800e062:	2e00      	cmp	r6, #0
 800e064:	d0e9      	beq.n	800e03a <ip_reass_free_complete_datagram+0x8e>
    iprh = (struct ip_reass_helper *)p->payload;
 800e066:	6873      	ldr	r3, [r6, #4]
    p = iprh->next_pbuf;
 800e068:	4637      	mov	r7, r6
 800e06a:	681e      	ldr	r6, [r3, #0]
    clen = pbuf_clen(pcur);
 800e06c:	4638      	mov	r0, r7
 800e06e:	f7fa fbc3 	bl	80087f8 <pbuf_clen>
 800e072:	4605      	mov	r5, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e074:	1823      	adds	r3, r4, r0
 800e076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e07a:	dbed      	blt.n	800e058 <ip_reass_free_complete_datagram+0xac>
 800e07c:	465b      	mov	r3, fp
 800e07e:	22cc      	movs	r2, #204	; 0xcc
 800e080:	4651      	mov	r1, sl
 800e082:	4807      	ldr	r0, [pc, #28]	; (800e0a0 <ip_reass_free_complete_datagram+0xf4>)
 800e084:	f000 ff36 	bl	800eef4 <iprintf>
 800e088:	e7e6      	b.n	800e058 <ip_reass_free_complete_datagram+0xac>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e08a:	4b03      	ldr	r3, [pc, #12]	; (800e098 <ip_reass_free_complete_datagram+0xec>)
 800e08c:	22d2      	movs	r2, #210	; 0xd2
 800e08e:	4907      	ldr	r1, [pc, #28]	; (800e0ac <ip_reass_free_complete_datagram+0x100>)
 800e090:	4803      	ldr	r0, [pc, #12]	; (800e0a0 <ip_reass_free_complete_datagram+0xf4>)
 800e092:	f000 ff2f 	bl	800eef4 <iprintf>
 800e096:	e7d8      	b.n	800e04a <ip_reass_free_complete_datagram+0x9e>
 800e098:	080127e8 	.word	0x080127e8
 800e09c:	0801284c 	.word	0x0801284c
 800e0a0:	08010198 	.word	0x08010198
 800e0a4:	08012840 	.word	0x08012840
 800e0a8:	20010a64 	.word	0x20010a64
 800e0ac:	08012880 	.word	0x08012880
 800e0b0:	08012860 	.word	0x08012860

0800e0b4 <ip_reass_remove_oldest_datagram>:
{
 800e0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0b8:	4605      	mov	r5, r0
 800e0ba:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 800e0bc:	2600      	movs	r6, #0
    r = reassdatagrams;
 800e0be:	f8df 8070 	ldr.w	r8, [pc, #112]	; 800e130 <ip_reass_remove_oldest_datagram+0x7c>
 800e0c2:	e027      	b.n	800e114 <ip_reass_remove_oldest_datagram+0x60>
        other_datagrams++;
 800e0c4:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800e0c6:	b1d0      	cbz	r0, 800e0fe <ip_reass_remove_oldest_datagram+0x4a>
        } else if (r->timer <= oldest->timer) {
 800e0c8:	f893 901f 	ldrb.w	r9, [r3, #31]
 800e0cc:	7fc2      	ldrb	r2, [r0, #31]
 800e0ce:	4591      	cmp	r9, r2
 800e0d0:	bf98      	it	ls
 800e0d2:	4661      	movls	r1, ip
 800e0d4:	4591      	cmp	r9, r2
 800e0d6:	bf98      	it	ls
 800e0d8:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	469c      	mov	ip, r3
 800e0de:	b18a      	cbz	r2, 800e104 <ip_reass_remove_oldest_datagram+0x50>
 800e0e0:	4613      	mov	r3, r2
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e0e2:	695a      	ldr	r2, [r3, #20]
 800e0e4:	4572      	cmp	r2, lr
 800e0e6:	d1ed      	bne.n	800e0c4 <ip_reass_remove_oldest_datagram+0x10>
 800e0e8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e0ec:	699a      	ldr	r2, [r3, #24]
 800e0ee:	454a      	cmp	r2, r9
 800e0f0:	d1e8      	bne.n	800e0c4 <ip_reass_remove_oldest_datagram+0x10>
 800e0f2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 800e0f6:	88aa      	ldrh	r2, [r5, #4]
 800e0f8:	4591      	cmp	r9, r2
 800e0fa:	d1e3      	bne.n	800e0c4 <ip_reass_remove_oldest_datagram+0x10>
 800e0fc:	e7ed      	b.n	800e0da <ip_reass_remove_oldest_datagram+0x26>
 800e0fe:	4661      	mov	r1, ip
 800e100:	4618      	mov	r0, r3
 800e102:	e7ea      	b.n	800e0da <ip_reass_remove_oldest_datagram+0x26>
    if (oldest != NULL) {
 800e104:	b110      	cbz	r0, 800e10c <ip_reass_remove_oldest_datagram+0x58>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e106:	f7ff ff51 	bl	800dfac <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800e10a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e10c:	42be      	cmp	r6, r7
 800e10e:	da0b      	bge.n	800e128 <ip_reass_remove_oldest_datagram+0x74>
 800e110:	2c01      	cmp	r4, #1
 800e112:	dd09      	ble.n	800e128 <ip_reass_remove_oldest_datagram+0x74>
    r = reassdatagrams;
 800e114:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 800e118:	b133      	cbz	r3, 800e128 <ip_reass_remove_oldest_datagram+0x74>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e11a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    other_datagrams = 0;
 800e11e:	2400      	movs	r4, #0
    oldest_prev = NULL;
 800e120:	4621      	mov	r1, r4
    prev = NULL;
 800e122:	46a4      	mov	ip, r4
    oldest = NULL;
 800e124:	4620      	mov	r0, r4
 800e126:	e7dc      	b.n	800e0e2 <ip_reass_remove_oldest_datagram+0x2e>
}
 800e128:	4630      	mov	r0, r6
 800e12a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e12e:	bf00      	nop
 800e130:	20010a68 	.word	0x20010a68

0800e134 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800e134:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e136:	4604      	mov	r4, r0
 800e138:	b120      	cbz	r0, 800e144 <ip_frag_free_pbuf_custom_ref+0x10>
  memp_free(MEMP_FRAG_PBUF, p);
 800e13a:	4621      	mov	r1, r4
 800e13c:	2005      	movs	r0, #5
 800e13e:	f7f9 ff21 	bl	8007f84 <memp_free>
}
 800e142:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 800e144:	4b03      	ldr	r3, [pc, #12]	; (800e154 <ip_frag_free_pbuf_custom_ref+0x20>)
 800e146:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800e14a:	4903      	ldr	r1, [pc, #12]	; (800e158 <ip_frag_free_pbuf_custom_ref+0x24>)
 800e14c:	4803      	ldr	r0, [pc, #12]	; (800e15c <ip_frag_free_pbuf_custom_ref+0x28>)
 800e14e:	f000 fed1 	bl	800eef4 <iprintf>
 800e152:	e7f2      	b.n	800e13a <ip_frag_free_pbuf_custom_ref+0x6>
 800e154:	080127e8 	.word	0x080127e8
 800e158:	0801053c 	.word	0x0801053c
 800e15c:	08010198 	.word	0x08010198

0800e160 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e160:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e162:	4604      	mov	r4, r0
 800e164:	b138      	cbz	r0, 800e176 <ipfrag_free_pbuf_custom+0x16>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 800e166:	6960      	ldr	r0, [r4, #20]
 800e168:	b108      	cbz	r0, 800e16e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 800e16a:	f7fa f9cd 	bl	8008508 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e16e:	4620      	mov	r0, r4
 800e170:	f7ff ffe0 	bl	800e134 <ip_frag_free_pbuf_custom_ref>
}
 800e174:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e176:	4b04      	ldr	r3, [pc, #16]	; (800e188 <ipfrag_free_pbuf_custom+0x28>)
 800e178:	f240 22ce 	movw	r2, #718	; 0x2ce
 800e17c:	4903      	ldr	r1, [pc, #12]	; (800e18c <ipfrag_free_pbuf_custom+0x2c>)
 800e17e:	4804      	ldr	r0, [pc, #16]	; (800e190 <ipfrag_free_pbuf_custom+0x30>)
 800e180:	f000 feb8 	bl	800eef4 <iprintf>
 800e184:	e7ef      	b.n	800e166 <ipfrag_free_pbuf_custom+0x6>
 800e186:	bf00      	nop
 800e188:	080127e8 	.word	0x080127e8
 800e18c:	080128a4 	.word	0x080128a4
 800e190:	08010198 	.word	0x08010198

0800e194 <ip_reass_tmr>:
{
 800e194:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 800e196:	4b0a      	ldr	r3, [pc, #40]	; (800e1c0 <ip_reass_tmr+0x2c>)
 800e198:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 800e19a:	b178      	cbz	r0, 800e1bc <ip_reass_tmr+0x28>
  struct ip_reassdata *r, *prev = NULL;
 800e19c:	2400      	movs	r4, #0
 800e19e:	e004      	b.n	800e1aa <ip_reass_tmr+0x16>
      r->timer--;
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 800e1a4:	4604      	mov	r4, r0
 800e1a6:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 800e1a8:	b140      	cbz	r0, 800e1bc <ip_reass_tmr+0x28>
    if (r->timer > 0) {
 800e1aa:	7fc3      	ldrb	r3, [r0, #31]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1f7      	bne.n	800e1a0 <ip_reass_tmr+0xc>
      r = r->next;
 800e1b0:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	f7ff fefa 	bl	800dfac <ip_reass_free_complete_datagram>
      r = r->next;
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	e7f5      	b.n	800e1a8 <ip_reass_tmr+0x14>
}
 800e1bc:	bd38      	pop	{r3, r4, r5, pc}
 800e1be:	bf00      	nop
 800e1c0:	20010a68 	.word	0x20010a68

0800e1c4 <ip4_reass>:
{
 800e1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c8:	b083      	sub	sp, #12
 800e1ca:	4605      	mov	r5, r0
  fraghdr = (struct ip_hdr *)p->payload;
 800e1cc:	f8d0 9004 	ldr.w	r9, [r0, #4]
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e1d0:	f899 3000 	ldrb.w	r3, [r9]
 800e1d4:	f003 030f 	and.w	r3, r3, #15
 800e1d8:	2b05      	cmp	r3, #5
 800e1da:	d16e      	bne.n	800e2ba <ip4_reass+0xf6>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e1dc:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800e1e0:	f7f9 fb52 	bl	8007888 <lwip_htons>
 800e1e4:	4607      	mov	r7, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e1e6:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 800e1ea:	f7f9 fb4d 	bl	8007888 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e1ee:	f899 3000 	ldrb.w	r3, [r9]
 800e1f2:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e1f6:	009e      	lsls	r6, r3, #2
 800e1f8:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e1fc:	d35d      	bcc.n	800e2ba <ip4_reass+0xf6>
  len = (u16_t)(len - hlen);
 800e1fe:	1b80      	subs	r0, r0, r6
 800e200:	b286      	uxth	r6, r0
  clen = pbuf_clen(p);
 800e202:	4628      	mov	r0, r5
 800e204:	f7fa faf8 	bl	80087f8 <pbuf_clen>
 800e208:	4680      	mov	r8, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e20a:	4ba4      	ldr	r3, [pc, #656]	; (800e49c <ip4_reass+0x2d8>)
 800e20c:	881b      	ldrh	r3, [r3, #0]
 800e20e:	4403      	add	r3, r0
 800e210:	2b0a      	cmp	r3, #10
 800e212:	dc07      	bgt.n	800e224 <ip4_reass+0x60>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e214:	4ba2      	ldr	r3, [pc, #648]	; (800e4a0 <ip4_reass+0x2dc>)
 800e216:	681c      	ldr	r4, [r3, #0]
 800e218:	2c00      	cmp	r4, #0
 800e21a:	f000 81c7 	beq.w	800e5ac <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e21e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e222:	e00f      	b.n	800e244 <ip4_reass+0x80>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e224:	4601      	mov	r1, r0
 800e226:	4648      	mov	r0, r9
 800e228:	f7ff ff44 	bl	800e0b4 <ip_reass_remove_oldest_datagram>
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d044      	beq.n	800e2ba <ip4_reass+0xf6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e230:	4b9a      	ldr	r3, [pc, #616]	; (800e49c <ip4_reass+0x2d8>)
 800e232:	881b      	ldrh	r3, [r3, #0]
 800e234:	4443      	add	r3, r8
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e236:	2b0a      	cmp	r3, #10
 800e238:	ddec      	ble.n	800e214 <ip4_reass+0x50>
 800e23a:	e03e      	b.n	800e2ba <ip4_reass+0xf6>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800e23c:	6824      	ldr	r4, [r4, #0]
 800e23e:	2c00      	cmp	r4, #0
 800e240:	f000 81b4 	beq.w	800e5ac <ip4_reass+0x3e8>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800e244:	6963      	ldr	r3, [r4, #20]
 800e246:	4293      	cmp	r3, r2
 800e248:	d1f8      	bne.n	800e23c <ip4_reass+0x78>
 800e24a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e24e:	69a1      	ldr	r1, [r4, #24]
 800e250:	4299      	cmp	r1, r3
 800e252:	d1f3      	bne.n	800e23c <ip4_reass+0x78>
 800e254:	89a1      	ldrh	r1, [r4, #12]
 800e256:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 800e25a:	4299      	cmp	r1, r3
 800e25c:	d1ee      	bne.n	800e23c <ip4_reass+0x78>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e25e:	f8b9 0006 	ldrh.w	r0, [r9, #6]
 800e262:	f7f9 fb11 	bl	8007888 <lwip_htons>
 800e266:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d03b      	beq.n	800e2e6 <ip4_reass+0x122>
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e26e:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800e272:	00ff      	lsls	r7, r7, #3
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800e274:	f8b9 9006 	ldrh.w	r9, [r9, #6]
  if (is_last) {
 800e278:	f019 0920 	ands.w	r9, r9, #32
 800e27c:	d107      	bne.n	800e28e <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 800e27e:	19bb      	adds	r3, r7, r6
 800e280:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800e282:	429f      	cmp	r7, r3
 800e284:	d812      	bhi.n	800e2ac <ip4_reass+0xe8>
 800e286:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d80e      	bhi.n	800e2ac <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e28e:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e292:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800e296:	f7f9 faf7 	bl	8007888 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800e29a:	f89a 3000 	ldrb.w	r3, [sl]
 800e29e:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 800e2a2:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800e2a6:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800e2aa:	d233      	bcs.n	800e314 <ip4_reass+0x150>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e2ac:	2c00      	cmp	r4, #0
 800e2ae:	f000 814c 	beq.w	800e54a <ip4_reass+0x386>
  if (ipr->p == NULL) {
 800e2b2:	6863      	ldr	r3, [r4, #4]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	f000 8150 	beq.w	800e55a <ip4_reass+0x396>
  pbuf_free(p);
 800e2ba:	4628      	mov	r0, r5
 800e2bc:	f7fa f924 	bl	8008508 <pbuf_free>
  return NULL;
 800e2c0:	2500      	movs	r5, #0
}
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	b003      	add	sp, #12
 800e2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e2ca:	4641      	mov	r1, r8
 800e2cc:	4648      	mov	r0, r9
 800e2ce:	f7ff fef1 	bl	800e0b4 <ip_reass_remove_oldest_datagram>
 800e2d2:	4580      	cmp	r8, r0
 800e2d4:	dcf1      	bgt.n	800e2ba <ip4_reass+0xf6>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e2d6:	2004      	movs	r0, #4
 800e2d8:	f7f9 fe24 	bl	8007f24 <memp_malloc>
    if (ipr == NULL)
 800e2dc:	4604      	mov	r4, r0
 800e2de:	2800      	cmp	r0, #0
 800e2e0:	f040 816b 	bne.w	800e5ba <ip4_reass+0x3f6>
 800e2e4:	e7e9      	b.n	800e2ba <ip4_reass+0xf6>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800e2e6:	89e0      	ldrh	r0, [r4, #14]
 800e2e8:	f7f9 face 	bl	8007888 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800e2ec:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800e2f0:	2800      	cmp	r0, #0
 800e2f2:	d0bc      	beq.n	800e26e <ip4_reass+0xaa>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800e2f4:	f8d9 3000 	ldr.w	r3, [r9]
 800e2f8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e2fc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e300:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e304:	60a3      	str	r3, [r4, #8]
 800e306:	60e0      	str	r0, [r4, #12]
 800e308:	6121      	str	r1, [r4, #16]
 800e30a:	6162      	str	r2, [r4, #20]
 800e30c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e310:	61a3      	str	r3, [r4, #24]
 800e312:	e7ac      	b.n	800e26e <ip4_reass+0xaa>
  len = (u16_t)(len - hlen);
 800e314:	eba0 000b 	sub.w	r0, r0, fp
 800e318:	fa1f fb80 	uxth.w	fp, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e31c:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e320:	f7f9 fab2 	bl	8007888 <lwip_htons>
 800e324:	f3c0 020c 	ubfx	r2, r0, #0, #13
 800e328:	00d2      	lsls	r2, r2, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e32a:	f8d5 a004 	ldr.w	sl, [r5, #4]
  iprh->next_pbuf = NULL;
 800e32e:	2300      	movs	r3, #0
 800e330:	f88a 3000 	strb.w	r3, [sl]
 800e334:	f88a 3001 	strb.w	r3, [sl, #1]
 800e338:	f88a 3002 	strb.w	r3, [sl, #2]
 800e33c:	f88a 3003 	strb.w	r3, [sl, #3]
  iprh->start = offset;
 800e340:	f8aa 2004 	strh.w	r2, [sl, #4]
  iprh->end = (u16_t)(offset + len);
 800e344:	4493      	add	fp, r2
 800e346:	fa1f f38b 	uxth.w	r3, fp
 800e34a:	9301      	str	r3, [sp, #4]
 800e34c:	f8aa b006 	strh.w	fp, [sl, #6]
  if (iprh->end < offset) {
 800e350:	429a      	cmp	r2, r3
 800e352:	d8ab      	bhi.n	800e2ac <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 800e354:	6860      	ldr	r0, [r4, #4]
 800e356:	2800      	cmp	r0, #0
 800e358:	f000 8120 	beq.w	800e59c <ip4_reass+0x3d8>
  int valid = 1;
 800e35c:	f04f 0e01 	mov.w	lr, #1
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e360:	2300      	movs	r3, #0
 800e362:	e030      	b.n	800e3c6 <ip4_reass+0x202>
      iprh->next_pbuf = q;
 800e364:	f8ca 0000 	str.w	r0, [sl]
      if (iprh_prev != NULL) {
 800e368:	f1bc 0f00 	cmp.w	ip, #0
 800e36c:	d020      	beq.n	800e3b0 <ip4_reass+0x1ec>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e36e:	f8bc 1006 	ldrh.w	r1, [ip, #6]
 800e372:	428a      	cmp	r2, r1
 800e374:	d39d      	bcc.n	800e2b2 <ip4_reass+0xee>
 800e376:	889b      	ldrh	r3, [r3, #4]
 800e378:	9a01      	ldr	r2, [sp, #4]
 800e37a:	4293      	cmp	r3, r2
 800e37c:	d399      	bcc.n	800e2b2 <ip4_reass+0xee>
        iprh_prev->next_pbuf = new_p;
 800e37e:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 800e382:	f8ba 3004 	ldrh.w	r3, [sl, #4]
          valid = 0;
 800e386:	428b      	cmp	r3, r1
 800e388:	bf18      	it	ne
 800e38a:	f04f 0e00 	movne.w	lr, #0
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e38e:	f1b9 0f00 	cmp.w	r9, #0
 800e392:	d02f      	beq.n	800e3f4 <ip4_reass+0x230>
 800e394:	7fa3      	ldrb	r3, [r4, #30]
 800e396:	f013 0f01 	tst.w	r3, #1
 800e39a:	d12b      	bne.n	800e3f4 <ip4_reass+0x230>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e39c:	4a3f      	ldr	r2, [pc, #252]	; (800e49c <ip4_reass+0x2d8>)
 800e39e:	8813      	ldrh	r3, [r2, #0]
 800e3a0:	4498      	add	r8, r3
 800e3a2:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800e3a6:	f1b9 0f00 	cmp.w	r9, #0
 800e3aa:	d074      	beq.n	800e496 <ip4_reass+0x2d2>
  return NULL;
 800e3ac:	2500      	movs	r5, #0
 800e3ae:	e788      	b.n	800e2c2 <ip4_reass+0xfe>
        if (iprh->end > iprh_tmp->start) {
 800e3b0:	889b      	ldrh	r3, [r3, #4]
 800e3b2:	9a01      	ldr	r2, [sp, #4]
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	f4ff af7c 	bcc.w	800e2b2 <ip4_reass+0xee>
        ipr->p = new_p;
 800e3ba:	6065      	str	r5, [r4, #4]
 800e3bc:	e7e7      	b.n	800e38e <ip4_reass+0x1ca>
    q = iprh_tmp->next_pbuf;
 800e3be:	6818      	ldr	r0, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	f000 80da 	beq.w	800e57a <ip4_reass+0x3b6>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e3c6:	469c      	mov	ip, r3
 800e3c8:	6843      	ldr	r3, [r0, #4]
    if (iprh->start < iprh_tmp->start) {
 800e3ca:	8899      	ldrh	r1, [r3, #4]
 800e3cc:	428a      	cmp	r2, r1
 800e3ce:	d3c9      	bcc.n	800e364 <ip4_reass+0x1a0>
    } else if (iprh->start == iprh_tmp->start) {
 800e3d0:	428a      	cmp	r2, r1
 800e3d2:	f43f af6e 	beq.w	800e2b2 <ip4_reass+0xee>
    } else if (iprh->start < iprh_tmp->end) {
 800e3d6:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 800e3da:	455a      	cmp	r2, fp
 800e3dc:	f4ff af69 	bcc.w	800e2b2 <ip4_reass+0xee>
      if (iprh_prev != NULL) {
 800e3e0:	f1bc 0f00 	cmp.w	ip, #0
 800e3e4:	d0eb      	beq.n	800e3be <ip4_reass+0x1fa>
        if (iprh_prev->end != iprh_tmp->start) {
 800e3e6:	f8bc 0006 	ldrh.w	r0, [ip, #6]
          valid = 0;
 800e3ea:	4288      	cmp	r0, r1
 800e3ec:	bf18      	it	ne
 800e3ee:	f04f 0e00 	movne.w	lr, #0
 800e3f2:	e7e4      	b.n	800e3be <ip4_reass+0x1fa>
    if (valid) {
 800e3f4:	f1be 0f00 	cmp.w	lr, #0
 800e3f8:	d02f      	beq.n	800e45a <ip4_reass+0x296>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e3fa:	6863      	ldr	r3, [r4, #4]
 800e3fc:	b343      	cbz	r3, 800e450 <ip4_reass+0x28c>
 800e3fe:	6859      	ldr	r1, [r3, #4]
 800e400:	888b      	ldrh	r3, [r1, #4]
 800e402:	bb43      	cbnz	r3, 800e456 <ip4_reass+0x292>
        q = iprh->next_pbuf;
 800e404:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800e408:	b15b      	cbz	r3, 800e422 <ip4_reass+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 800e40a:	4652      	mov	r2, sl
 800e40c:	f8d3 a004 	ldr.w	sl, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800e410:	88d2      	ldrh	r2, [r2, #6]
 800e412:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e416:	429a      	cmp	r2, r3
 800e418:	d134      	bne.n	800e484 <ip4_reass+0x2c0>
          q = iprh->next_pbuf;
 800e41a:	f8da 3000 	ldr.w	r3, [sl]
        while (q != NULL) {
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1f3      	bne.n	800e40a <ip4_reass+0x246>
          LWIP_ASSERT("sanity check",
 800e422:	458a      	cmp	sl, r1
 800e424:	f040 80e7 	bne.w	800e5f6 <ip4_reass+0x432>
 800e428:	4b1e      	ldr	r3, [pc, #120]	; (800e4a4 <ip4_reass+0x2e0>)
 800e42a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e42e:	491e      	ldr	r1, [pc, #120]	; (800e4a8 <ip4_reass+0x2e4>)
 800e430:	481e      	ldr	r0, [pc, #120]	; (800e4ac <ip4_reass+0x2e8>)
 800e432:	f000 fd5f 	bl	800eef4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e436:	f8da 3000 	ldr.w	r3, [sl]
 800e43a:	b333      	cbz	r3, 800e48a <ip4_reass+0x2c6>
 800e43c:	4b19      	ldr	r3, [pc, #100]	; (800e4a4 <ip4_reass+0x2e0>)
 800e43e:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e442:	491b      	ldr	r1, [pc, #108]	; (800e4b0 <ip4_reass+0x2ec>)
 800e444:	4819      	ldr	r0, [pc, #100]	; (800e4ac <ip4_reass+0x2e8>)
 800e446:	f000 fd55 	bl	800eef4 <iprintf>
 800e44a:	f04f 0e01 	mov.w	lr, #1
 800e44e:	e004      	b.n	800e45a <ip4_reass+0x296>
        valid = 0;
 800e450:	f04f 0e00 	mov.w	lr, #0
 800e454:	e001      	b.n	800e45a <ip4_reass+0x296>
 800e456:	f04f 0e00 	mov.w	lr, #0
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e45a:	f1be 0100 	subs.w	r1, lr, #0
 800e45e:	bf18      	it	ne
 800e460:	2101      	movne	r1, #1
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800e462:	4a0e      	ldr	r2, [pc, #56]	; (800e49c <ip4_reass+0x2d8>)
 800e464:	8813      	ldrh	r3, [r2, #0]
 800e466:	4498      	add	r8, r3
 800e468:	f8a2 8000 	strh.w	r8, [r2]
  if (is_last) {
 800e46c:	f1b9 0f00 	cmp.w	r9, #0
 800e470:	d105      	bne.n	800e47e <ip4_reass+0x2ba>
    u16_t datagram_len = (u16_t)(offset + len);
 800e472:	443e      	add	r6, r7
    ipr->datagram_len = datagram_len;
 800e474:	83a6      	strh	r6, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800e476:	7fa3      	ldrb	r3, [r4, #30]
 800e478:	f043 0301 	orr.w	r3, r3, #1
 800e47c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800e47e:	b9c9      	cbnz	r1, 800e4b4 <ip4_reass+0x2f0>
  return NULL;
 800e480:	2500      	movs	r5, #0
 800e482:	e71e      	b.n	800e2c2 <ip4_reass+0xfe>
 800e484:	f04f 0e00 	mov.w	lr, #0
 800e488:	e7e7      	b.n	800e45a <ip4_reass+0x296>
 800e48a:	f04f 0e01 	mov.w	lr, #1
 800e48e:	e7e4      	b.n	800e45a <ip4_reass+0x296>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e490:	f04f 0e00 	mov.w	lr, #0
 800e494:	e7e1      	b.n	800e45a <ip4_reass+0x296>
  if (is_last) {
 800e496:	2100      	movs	r1, #0
 800e498:	e7eb      	b.n	800e472 <ip4_reass+0x2ae>
 800e49a:	bf00      	nop
 800e49c:	20010a64 	.word	0x20010a64
 800e4a0:	20010a68 	.word	0x20010a68
 800e4a4:	080127e8 	.word	0x080127e8
 800e4a8:	080128b0 	.word	0x080128b0
 800e4ac:	08010198 	.word	0x08010198
 800e4b0:	080128c0 	.word	0x080128c0
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800e4b4:	8ba0      	ldrh	r0, [r4, #28]
 800e4b6:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800e4b8:	6863      	ldr	r3, [r4, #4]
 800e4ba:	685d      	ldr	r5, [r3, #4]
 800e4bc:	682e      	ldr	r6, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800e4be:	68a3      	ldr	r3, [r4, #8]
 800e4c0:	68e7      	ldr	r7, [r4, #12]
 800e4c2:	6921      	ldr	r1, [r4, #16]
 800e4c4:	6962      	ldr	r2, [r4, #20]
 800e4c6:	602b      	str	r3, [r5, #0]
 800e4c8:	606f      	str	r7, [r5, #4]
 800e4ca:	60a9      	str	r1, [r5, #8]
 800e4cc:	60ea      	str	r2, [r5, #12]
 800e4ce:	69a3      	ldr	r3, [r4, #24]
 800e4d0:	612b      	str	r3, [r5, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800e4d2:	b280      	uxth	r0, r0
 800e4d4:	f7f9 f9d8 	bl	8007888 <lwip_htons>
 800e4d8:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800e4da:	2300      	movs	r3, #0
 800e4dc:	71ab      	strb	r3, [r5, #6]
 800e4de:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800e4e0:	72ab      	strb	r3, [r5, #10]
 800e4e2:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 800e4e4:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800e4e6:	b16e      	cbz	r6, 800e504 <ip4_reass+0x340>
      pbuf_remove_header(r, IP_HLEN);
 800e4e8:	f04f 0814 	mov.w	r8, #20
      iprh = (struct ip_reass_helper *)r->payload;
 800e4ec:	6877      	ldr	r7, [r6, #4]
      pbuf_remove_header(r, IP_HLEN);
 800e4ee:	4641      	mov	r1, r8
 800e4f0:	4630      	mov	r0, r6
 800e4f2:	f7f9 ffc9 	bl	8008488 <pbuf_remove_header>
      pbuf_cat(p, r);
 800e4f6:	4631      	mov	r1, r6
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	f7fa f9a5 	bl	8008848 <pbuf_cat>
      r = iprh->next_pbuf;
 800e4fe:	683e      	ldr	r6, [r7, #0]
    while (r != NULL) {
 800e500:	2e00      	cmp	r6, #0
 800e502:	d1f3      	bne.n	800e4ec <ip4_reass+0x328>
    if (ipr == reassdatagrams) {
 800e504:	4b3d      	ldr	r3, [pc, #244]	; (800e5fc <ip4_reass+0x438>)
 800e506:	6819      	ldr	r1, [r3, #0]
 800e508:	42a1      	cmp	r1, r4
 800e50a:	d005      	beq.n	800e518 <ip4_reass+0x354>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e50c:	b129      	cbz	r1, 800e51a <ip4_reass+0x356>
        if (ipr_prev->next == ipr) {
 800e50e:	680b      	ldr	r3, [r1, #0]
 800e510:	42a3      	cmp	r3, r4
 800e512:	d002      	beq.n	800e51a <ip4_reass+0x356>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800e514:	4619      	mov	r1, r3
 800e516:	e7f9      	b.n	800e50c <ip4_reass+0x348>
      ipr_prev = NULL;
 800e518:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800e51a:	4620      	mov	r0, r4
 800e51c:	f7ff fd22 	bl	800df64 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800e520:	4628      	mov	r0, r5
 800e522:	f7fa f969 	bl	80087f8 <pbuf_clen>
 800e526:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e528:	4b35      	ldr	r3, [pc, #212]	; (800e600 <ip4_reass+0x43c>)
 800e52a:	881b      	ldrh	r3, [r3, #0]
 800e52c:	4283      	cmp	r3, r0
 800e52e:	d304      	bcc.n	800e53a <ip4_reass+0x376>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800e530:	4a33      	ldr	r2, [pc, #204]	; (800e600 <ip4_reass+0x43c>)
 800e532:	8813      	ldrh	r3, [r2, #0]
 800e534:	1b1c      	subs	r4, r3, r4
 800e536:	8014      	strh	r4, [r2, #0]
    return p;
 800e538:	e6c3      	b.n	800e2c2 <ip4_reass+0xfe>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800e53a:	4b32      	ldr	r3, [pc, #200]	; (800e604 <ip4_reass+0x440>)
 800e53c:	f240 229b 	movw	r2, #667	; 0x29b
 800e540:	4931      	ldr	r1, [pc, #196]	; (800e608 <ip4_reass+0x444>)
 800e542:	4832      	ldr	r0, [pc, #200]	; (800e60c <ip4_reass+0x448>)
 800e544:	f000 fcd6 	bl	800eef4 <iprintf>
 800e548:	e7f2      	b.n	800e530 <ip4_reass+0x36c>
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800e54a:	4b2e      	ldr	r3, [pc, #184]	; (800e604 <ip4_reass+0x440>)
 800e54c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800e550:	492f      	ldr	r1, [pc, #188]	; (800e610 <ip4_reass+0x44c>)
 800e552:	482e      	ldr	r0, [pc, #184]	; (800e60c <ip4_reass+0x448>)
 800e554:	f000 fcce 	bl	800eef4 <iprintf>
 800e558:	e6ab      	b.n	800e2b2 <ip4_reass+0xee>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800e55a:	4b28      	ldr	r3, [pc, #160]	; (800e5fc <ip4_reass+0x438>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	42a3      	cmp	r3, r4
 800e560:	d006      	beq.n	800e570 <ip4_reass+0x3ac>
 800e562:	4b28      	ldr	r3, [pc, #160]	; (800e604 <ip4_reass+0x440>)
 800e564:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e568:	492a      	ldr	r1, [pc, #168]	; (800e614 <ip4_reass+0x450>)
 800e56a:	4828      	ldr	r0, [pc, #160]	; (800e60c <ip4_reass+0x448>)
 800e56c:	f000 fcc2 	bl	800eef4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800e570:	2100      	movs	r1, #0
 800e572:	4620      	mov	r0, r4
 800e574:	f7ff fcf6 	bl	800df64 <ip_reass_dequeue_datagram>
 800e578:	e69f      	b.n	800e2ba <ip4_reass+0xf6>
      iprh_prev->next_pbuf = new_p;
 800e57a:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e57c:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 800e580:	455b      	cmp	r3, fp
 800e582:	f43f af04 	beq.w	800e38e <ip4_reass+0x1ca>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e586:	f1b9 0f00 	cmp.w	r9, #0
 800e58a:	d081      	beq.n	800e490 <ip4_reass+0x2cc>
 800e58c:	7fa3      	ldrb	r3, [r4, #30]
 800e58e:	f013 0f01 	tst.w	r3, #1
 800e592:	f43f af03 	beq.w	800e39c <ip4_reass+0x1d8>
 800e596:	f04f 0e00 	mov.w	lr, #0
 800e59a:	e75e      	b.n	800e45a <ip4_reass+0x296>
      ipr->p = new_p;
 800e59c:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e59e:	f1b9 0f00 	cmp.w	r9, #0
 800e5a2:	f43f af2a 	beq.w	800e3fa <ip4_reass+0x236>
  int valid = 1;
 800e5a6:	f04f 0e01 	mov.w	lr, #1
 800e5aa:	e6f3      	b.n	800e394 <ip4_reass+0x1d0>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5ac:	2004      	movs	r0, #4
 800e5ae:	f7f9 fcb9 	bl	8007f24 <memp_malloc>
  if (ipr == NULL) {
 800e5b2:	4604      	mov	r4, r0
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	f43f ae88 	beq.w	800e2ca <ip4_reass+0x106>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	6063      	str	r3, [r4, #4]
 800e5be:	60a3      	str	r3, [r4, #8]
 800e5c0:	60e3      	str	r3, [r4, #12]
 800e5c2:	6123      	str	r3, [r4, #16]
 800e5c4:	6163      	str	r3, [r4, #20]
 800e5c6:	61a3      	str	r3, [r4, #24]
 800e5c8:	61e3      	str	r3, [r4, #28]
  ipr->timer = IP_REASS_MAXAGE;
 800e5ca:	230f      	movs	r3, #15
 800e5cc:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 800e5ce:	4b0b      	ldr	r3, [pc, #44]	; (800e5fc <ip4_reass+0x438>)
 800e5d0:	681a      	ldr	r2, [r3, #0]
 800e5d2:	6022      	str	r2, [r4, #0]
  reassdatagrams = ipr;
 800e5d4:	601c      	str	r4, [r3, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e5d6:	f8d9 3000 	ldr.w	r3, [r9]
 800e5da:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800e5de:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800e5e2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 800e5e6:	60a3      	str	r3, [r4, #8]
 800e5e8:	60e0      	str	r0, [r4, #12]
 800e5ea:	6121      	str	r1, [r4, #16]
 800e5ec:	6162      	str	r2, [r4, #20]
 800e5ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e5f2:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 800e5f4:	e63b      	b.n	800e26e <ip4_reass+0xaa>
          LWIP_ASSERT("sanity check",
 800e5f6:	f04f 0e01 	mov.w	lr, #1
 800e5fa:	e72e      	b.n	800e45a <ip4_reass+0x296>
 800e5fc:	20010a68 	.word	0x20010a68
 800e600:	20010a64 	.word	0x20010a64
 800e604:	080127e8 	.word	0x080127e8
 800e608:	080128e4 	.word	0x080128e4
 800e60c:	08010198 	.word	0x08010198
 800e610:	08012900 	.word	0x08012900
 800e614:	0801290c 	.word	0x0801290c

0800e618 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e61c:	b08d      	sub	sp, #52	; 0x34
 800e61e:	4605      	mov	r5, r0
 800e620:	9107      	str	r1, [sp, #28]
 800e622:	920a      	str	r2, [sp, #40]	; 0x28
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800e624:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
 800e626:	3b14      	subs	r3, #20
 800e628:	bf48      	it	mi
 800e62a:	3307      	addmi	r3, #7
 800e62c:	f3c3 03cf 	ubfx	r3, r3, #3, #16
 800e630:	9306      	str	r3, [sp, #24]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e632:	f8d0 a004 	ldr.w	sl, [r0, #4]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800e636:	f89a 3000 	ldrb.w	r3, [sl]
 800e63a:	f003 030f 	and.w	r3, r3, #15
 800e63e:	2b05      	cmp	r3, #5
 800e640:	f040 80d9 	bne.w	800e7f6 <ip4_frag+0x1de>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e644:	8943      	ldrh	r3, [r0, #10]
 800e646:	2b13      	cmp	r3, #19
 800e648:	d943      	bls.n	800e6d2 <ip4_frag+0xba>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e64a:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 800e64e:	f7f9 f91b 	bl	8007888 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800e652:	f3c0 030c 	ubfx	r3, r0, #0, #13
 800e656:	9305      	str	r3, [sp, #20]
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800e658:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
 800e65c:	930b      	str	r3, [sp, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800e65e:	892b      	ldrh	r3, [r5, #8]
 800e660:	3b14      	subs	r3, #20
 800e662:	b29b      	uxth	r3, r3
 800e664:	9303      	str	r3, [sp, #12]

  while (left) {
 800e666:	2b00      	cmp	r3, #0
 800e668:	f000 80c8 	beq.w	800e7fc <ip4_frag+0x1e4>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e66c:	9b06      	ldr	r3, [sp, #24]
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	b29b      	uxth	r3, r3
 800e672:	9308      	str	r3, [sp, #32]
  u16_t poff = IP_HLEN;
 800e674:	f04f 0914 	mov.w	r9, #20
  u16_t newpbuflen = 0;
 800e678:	2400      	movs	r4, #0
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800e67a:	9b08      	ldr	r3, [sp, #32]
 800e67c:	9a03      	ldr	r2, [sp, #12]
 800e67e:	4293      	cmp	r3, r2
 800e680:	bf28      	it	cs
 800e682:	4613      	movcs	r3, r2
 800e684:	9304      	str	r3, [sp, #16]
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e686:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e68a:	2114      	movs	r1, #20
 800e68c:	200e      	movs	r0, #14
 800e68e:	f7f9 ffab 	bl	80085e8 <pbuf_alloc>
    if (rambuf == NULL) {
 800e692:	4683      	mov	fp, r0
 800e694:	2800      	cmp	r0, #0
 800e696:	f000 80b3 	beq.w	800e800 <ip4_frag+0x1e8>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e69a:	8943      	ldrh	r3, [r0, #10]
 800e69c:	2b13      	cmp	r3, #19
 800e69e:	d922      	bls.n	800e6e6 <ip4_frag+0xce>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e6a0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e6a4:	f8da 2000 	ldr.w	r2, [sl]
 800e6a8:	f8da 6004 	ldr.w	r6, [sl, #4]
 800e6ac:	f8da 0008 	ldr.w	r0, [sl, #8]
 800e6b0:	f8da 100c 	ldr.w	r1, [sl, #12]
 800e6b4:	601a      	str	r2, [r3, #0]
 800e6b6:	605e      	str	r6, [r3, #4]
 800e6b8:	6098      	str	r0, [r3, #8]
 800e6ba:	60d9      	str	r1, [r3, #12]
 800e6bc:	f8da 2010 	ldr.w	r2, [sl, #16]
 800e6c0:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e6c2:	f8db 3004 	ldr.w	r3, [fp, #4]
 800e6c6:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 800e6c8:	9b04      	ldr	r3, [sp, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d04e      	beq.n	800e76c <ip4_frag+0x154>
    left_to_copy = fragsize;
 800e6ce:	461e      	mov	r6, r3
 800e6d0:	e01d      	b.n	800e70e <ip4_frag+0xf6>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800e6d2:	4b4d      	ldr	r3, [pc, #308]	; (800e808 <ip4_frag+0x1f0>)
 800e6d4:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800e6d8:	494c      	ldr	r1, [pc, #304]	; (800e80c <ip4_frag+0x1f4>)
 800e6da:	484d      	ldr	r0, [pc, #308]	; (800e810 <ip4_frag+0x1f8>)
 800e6dc:	f000 fc0a 	bl	800eef4 <iprintf>
 800e6e0:	f06f 0005 	mvn.w	r0, #5
 800e6e4:	e07b      	b.n	800e7de <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e6e6:	4b48      	ldr	r3, [pc, #288]	; (800e808 <ip4_frag+0x1f0>)
 800e6e8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800e6ec:	4949      	ldr	r1, [pc, #292]	; (800e814 <ip4_frag+0x1fc>)
 800e6ee:	4848      	ldr	r0, [pc, #288]	; (800e810 <ip4_frag+0x1f8>)
 800e6f0:	f000 fc00 	bl	800eef4 <iprintf>
 800e6f4:	e7d4      	b.n	800e6a0 <ip4_frag+0x88>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e6f6:	4b44      	ldr	r3, [pc, #272]	; (800e808 <ip4_frag+0x1f0>)
 800e6f8:	f240 322d 	movw	r2, #813	; 0x32d
 800e6fc:	4946      	ldr	r1, [pc, #280]	; (800e818 <ip4_frag+0x200>)
 800e6fe:	4844      	ldr	r0, [pc, #272]	; (800e810 <ip4_frag+0x1f8>)
 800e700:	f000 fbf8 	bl	800eef4 <iprintf>
 800e704:	e009      	b.n	800e71a <ip4_frag+0x102>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
        poff = 0;
        p = p->next;
 800e706:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800e708:	b376      	cbz	r6, 800e768 <ip4_frag+0x150>
  u16_t newpbuflen = 0;
 800e70a:	f04f 0900 	mov.w	r9, #0
      u16_t plen = (u16_t)(p->len - poff);
 800e70e:	896b      	ldrh	r3, [r5, #10]
 800e710:	eba3 0409 	sub.w	r4, r3, r9
 800e714:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800e716:	454b      	cmp	r3, r9
 800e718:	d3ed      	bcc.n	800e6f6 <ip4_frag+0xde>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e71a:	42b4      	cmp	r4, r6
 800e71c:	bf28      	it	cs
 800e71e:	4634      	movcs	r4, r6
      if (!newpbuflen) {
 800e720:	2c00      	cmp	r4, #0
 800e722:	d0f0      	beq.n	800e706 <ip4_frag+0xee>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800e724:	2005      	movs	r0, #5
 800e726:	f7f9 fbfd 	bl	8007f24 <memp_malloc>
        continue;
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
      if (pcr == NULL) {
 800e72a:	4607      	mov	r7, r0
 800e72c:	2800      	cmp	r0, #0
 800e72e:	d051      	beq.n	800e7d4 <ip4_frag+0x1bc>
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e730:	9401      	str	r4, [sp, #4]
 800e732:	686b      	ldr	r3, [r5, #4]
 800e734:	444b      	add	r3, r9
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	4603      	mov	r3, r0
 800e73a:	2241      	movs	r2, #65	; 0x41
 800e73c:	4621      	mov	r1, r4
 800e73e:	2000      	movs	r0, #0
 800e740:	f7f9 fe80 	bl	8008444 <pbuf_alloced_custom>
                                    (u8_t *)p->payload + poff, newpbuflen);
      if (newpbuf == NULL) {
 800e744:	4680      	mov	r8, r0
 800e746:	2800      	cmp	r0, #0
 800e748:	d04c      	beq.n	800e7e4 <ip4_frag+0x1cc>
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 800e74a:	4628      	mov	r0, r5
 800e74c:	f7fa f860 	bl	8008810 <pbuf_ref>
      pcr->original = p;
 800e750:	617d      	str	r5, [r7, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e752:	4b32      	ldr	r3, [pc, #200]	; (800e81c <ip4_frag+0x204>)
 800e754:	613b      	str	r3, [r7, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e756:	4641      	mov	r1, r8
 800e758:	4658      	mov	r0, fp
 800e75a:	f7fa f875 	bl	8008848 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800e75e:	1b36      	subs	r6, r6, r4
 800e760:	b2b6      	uxth	r6, r6
      if (left_to_copy) {
 800e762:	b11e      	cbz	r6, 800e76c <ip4_frag+0x154>
        poff = 0;
        p = p->next;
 800e764:	682d      	ldr	r5, [r5, #0]
    while (left_to_copy) {
 800e766:	e7d0      	b.n	800e70a <ip4_frag+0xf2>
        poff = 0;
 800e768:	46b1      	mov	r9, r6
 800e76a:	4634      	mov	r4, r6
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800e76c:	44a1      	add	r9, r4
 800e76e:	fa1f f989 	uxth.w	r9, r9

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e772:	9b05      	ldr	r3, [sp, #20]
 800e774:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 800e778:	9b07      	ldr	r3, [sp, #28]
 800e77a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e77c:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800e77e:	9a03      	ldr	r2, [sp, #12]
 800e780:	4293      	cmp	r3, r2
 800e782:	dd01      	ble.n	800e788 <ip4_frag+0x170>
 800e784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e786:	b10b      	cbz	r3, 800e78c <ip4_frag+0x174>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800e788:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e78c:	f7f9 f87c 	bl	8007888 <lwip_htons>
 800e790:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e792:	80f0      	strh	r0, [r6, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800e794:	9f04      	ldr	r7, [sp, #16]
 800e796:	f107 0014 	add.w	r0, r7, #20
 800e79a:	b280      	uxth	r0, r0
 800e79c:	f7f9 f874 	bl	8007888 <lwip_htons>
 800e7a0:	8070      	strh	r0, [r6, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	72b3      	strb	r3, [r6, #10]
 800e7a6:	72f3      	strb	r3, [r6, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e7a8:	9807      	ldr	r0, [sp, #28]
 800e7aa:	6943      	ldr	r3, [r0, #20]
 800e7ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7ae:	4659      	mov	r1, fp
 800e7b0:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e7b2:	4658      	mov	r0, fp
 800e7b4:	f7f9 fea8 	bl	8008508 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800e7b8:	9b03      	ldr	r3, [sp, #12]
 800e7ba:	1bdb      	subs	r3, r3, r7
 800e7bc:	b29a      	uxth	r2, r3
 800e7be:	9203      	str	r2, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 800e7c0:	9b05      	ldr	r3, [sp, #20]
 800e7c2:	9906      	ldr	r1, [sp, #24]
 800e7c4:	440b      	add	r3, r1
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	9305      	str	r3, [sp, #20]
  while (left) {
 800e7ca:	2a00      	cmp	r2, #0
 800e7cc:	f47f af55 	bne.w	800e67a <ip4_frag+0x62>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	e004      	b.n	800e7de <ip4_frag+0x1c6>
        pbuf_free(rambuf);
 800e7d4:	4658      	mov	r0, fp
 800e7d6:	f7f9 fe97 	bl	8008508 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e7da:	f04f 30ff 	mov.w	r0, #4294967295
}
 800e7de:	b00d      	add	sp, #52	; 0x34
 800e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ip_frag_free_pbuf_custom_ref(pcr);
 800e7e4:	4638      	mov	r0, r7
 800e7e6:	f7ff fca5 	bl	800e134 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e7ea:	4658      	mov	r0, fp
 800e7ec:	f7f9 fe8c 	bl	8008508 <pbuf_free>
  return ERR_MEM;
 800e7f0:	f04f 30ff 	mov.w	r0, #4294967295
        goto memerr;
 800e7f4:	e7f3      	b.n	800e7de <ip4_frag+0x1c6>
    return ERR_VAL;
 800e7f6:	f06f 0005 	mvn.w	r0, #5
 800e7fa:	e7f0      	b.n	800e7de <ip4_frag+0x1c6>
  return ERR_OK;
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	e7ee      	b.n	800e7de <ip4_frag+0x1c6>
  return ERR_MEM;
 800e800:	f04f 30ff 	mov.w	r0, #4294967295
 800e804:	e7eb      	b.n	800e7de <ip4_frag+0x1c6>
 800e806:	bf00      	nop
 800e808:	080127e8 	.word	0x080127e8
 800e80c:	0801292c 	.word	0x0801292c
 800e810:	08010198 	.word	0x08010198
 800e814:	08012948 	.word	0x08012948
 800e818:	08012968 	.word	0x08012968
 800e81c:	0800e161 	.word	0x0800e161

0800e820 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e820:	b570      	push	{r4, r5, r6, lr}
 800e822:	4604      	mov	r4, r0
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800e824:	8943      	ldrh	r3, [r0, #10]
 800e826:	2b0e      	cmp	r3, #14
 800e828:	d91c      	bls.n	800e864 <ethernet_input+0x44>
 800e82a:	460d      	mov	r5, r1
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800e82c:	7bc3      	ldrb	r3, [r0, #15]
 800e82e:	b91b      	cbnz	r3, 800e838 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800e830:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800e834:	3301      	adds	r3, #1
 800e836:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e838:	6860      	ldr	r0, [r4, #4]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e83a:	8986      	ldrh	r6, [r0, #12]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e83c:	7803      	ldrb	r3, [r0, #0]
 800e83e:	f013 0f01 	tst.w	r3, #1
 800e842:	d00a      	beq.n	800e85a <ethernet_input+0x3a>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e844:	2b01      	cmp	r3, #1
 800e846:	d012      	beq.n	800e86e <ethernet_input+0x4e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e848:	2206      	movs	r2, #6
 800e84a:	491e      	ldr	r1, [pc, #120]	; (800e8c4 <ethernet_input+0xa4>)
 800e84c:	f000 fa7d 	bl	800ed4a <memcmp>
 800e850:	b918      	cbnz	r0, 800e85a <ethernet_input+0x3a>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e852:	7b63      	ldrb	r3, [r4, #13]
 800e854:	f043 0308 	orr.w	r3, r3, #8
 800e858:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800e85a:	2e08      	cmp	r6, #8
 800e85c:	d012      	beq.n	800e884 <ethernet_input+0x64>
 800e85e:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800e862:	d01f      	beq.n	800e8a4 <ethernet_input+0x84>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800e864:	4620      	mov	r0, r4
 800e866:	f7f9 fe4f 	bl	8008508 <pbuf_free>
  return ERR_OK;
}
 800e86a:	2000      	movs	r0, #0
 800e86c:	bd70      	pop	{r4, r5, r6, pc}
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e86e:	7843      	ldrb	r3, [r0, #1]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d1f2      	bne.n	800e85a <ethernet_input+0x3a>
 800e874:	7883      	ldrb	r3, [r0, #2]
 800e876:	2b5e      	cmp	r3, #94	; 0x5e
 800e878:	d1ef      	bne.n	800e85a <ethernet_input+0x3a>
        p->flags |= PBUF_FLAG_LLMCAST;
 800e87a:	7b63      	ldrb	r3, [r4, #13]
 800e87c:	f043 0310 	orr.w	r3, r3, #16
 800e880:	7363      	strb	r3, [r4, #13]
 800e882:	e7ea      	b.n	800e85a <ethernet_input+0x3a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e884:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e888:	f013 0f08 	tst.w	r3, #8
 800e88c:	d0ea      	beq.n	800e864 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e88e:	210e      	movs	r1, #14
 800e890:	4620      	mov	r0, r4
 800e892:	f7f9 fdf9 	bl	8008488 <pbuf_remove_header>
 800e896:	2800      	cmp	r0, #0
 800e898:	d1e4      	bne.n	800e864 <ethernet_input+0x44>
        ip4_input(p, netif);
 800e89a:	4629      	mov	r1, r5
 800e89c:	4620      	mov	r0, r4
 800e89e:	f7ff f9dd 	bl	800dc5c <ip4_input>
      break;
 800e8a2:	e7e2      	b.n	800e86a <ethernet_input+0x4a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e8a4:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800e8a8:	f013 0f08 	tst.w	r3, #8
 800e8ac:	d0da      	beq.n	800e864 <ethernet_input+0x44>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800e8ae:	210e      	movs	r1, #14
 800e8b0:	4620      	mov	r0, r4
 800e8b2:	f7f9 fde9 	bl	8008488 <pbuf_remove_header>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d1d4      	bne.n	800e864 <ethernet_input+0x44>
        etharp_input(p, netif);
 800e8ba:	4629      	mov	r1, r5
 800e8bc:	4620      	mov	r0, r4
 800e8be:	f7fe fd9d 	bl	800d3fc <etharp_input>
      break;
 800e8c2:	e7d2      	b.n	800e86a <ethernet_input+0x4a>
 800e8c4:	080129e4 	.word	0x080129e4

0800e8c8 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800e8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8cc:	4605      	mov	r5, r0
 800e8ce:	460c      	mov	r4, r1
 800e8d0:	4616      	mov	r6, r2
 800e8d2:	461f      	mov	r7, r3
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e8d4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800e8d8:	f7f8 ffd6 	bl	8007888 <lwip_htons>
 800e8dc:	4680      	mov	r8, r0

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800e8de:	210e      	movs	r1, #14
 800e8e0:	4620      	mov	r0, r4
 800e8e2:	f7f9 fdcc 	bl	800847e <pbuf_add_header>
 800e8e6:	b9e8      	cbnz	r0, 800e924 <ethernet_output+0x5c>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800e8e8:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 800e8ea:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	600b      	str	r3, [r1, #0]
 800e8f2:	88bb      	ldrh	r3, [r7, #4]
 800e8f4:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800e8f6:	6833      	ldr	r3, [r6, #0]
 800e8f8:	f8c1 3006 	str.w	r3, [r1, #6]
 800e8fc:	88b3      	ldrh	r3, [r6, #4]
 800e8fe:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e900:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e904:	2b06      	cmp	r3, #6
 800e906:	d105      	bne.n	800e914 <ethernet_output+0x4c>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e908:	69ab      	ldr	r3, [r5, #24]
 800e90a:	4621      	mov	r1, r4
 800e90c:	4628      	mov	r0, r5
 800e90e:	4798      	blx	r3
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800e910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e914:	4b05      	ldr	r3, [pc, #20]	; (800e92c <ethernet_output+0x64>)
 800e916:	f44f 7299 	mov.w	r2, #306	; 0x132
 800e91a:	4905      	ldr	r1, [pc, #20]	; (800e930 <ethernet_output+0x68>)
 800e91c:	4805      	ldr	r0, [pc, #20]	; (800e934 <ethernet_output+0x6c>)
 800e91e:	f000 fae9 	bl	800eef4 <iprintf>
 800e922:	e7f1      	b.n	800e908 <ethernet_output+0x40>
  return ERR_BUF;
 800e924:	f06f 0001 	mvn.w	r0, #1
 800e928:	e7f2      	b.n	800e910 <ethernet_output+0x48>
 800e92a:	bf00      	nop
 800e92c:	08012978 	.word	0x08012978
 800e930:	080129b0 	.word	0x080129b0
 800e934:	08010198 	.word	0x08010198

0800e938 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800e938:	b510      	push	{r4, lr}
 800e93a:	4604      	mov	r4, r0
 800e93c:	4608      	mov	r0, r1
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800e93e:	2200      	movs	r2, #0
 800e940:	2104      	movs	r1, #4
 800e942:	f7f5 f892 	bl	8003a6a <osMessageQueueNew>
 800e946:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800e948:	fab0 f080 	clz	r0, r0
 800e94c:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800e94e:	4240      	negs	r0, r0
 800e950:	bd10      	pop	{r4, pc}

0800e952 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800e952:	b510      	push	{r4, lr}
 800e954:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 800e956:	6800      	ldr	r0, [r0, #0]
 800e958:	f7f5 f950 	bl	8003bfc <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 800e95c:	6820      	ldr	r0, [r4, #0]
 800e95e:	f7f5 f95a 	bl	8003c16 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800e962:	bd10      	pop	{r4, pc}

0800e964 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800e964:	b500      	push	{lr}
 800e966:	b083      	sub	sp, #12
 800e968:	9101      	str	r1, [sp, #4]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800e96a:	2300      	movs	r3, #0
 800e96c:	461a      	mov	r2, r3
 800e96e:	a901      	add	r1, sp, #4
 800e970:	6800      	ldr	r0, [r0, #0]
 800e972:	f7f5 f8c0 	bl	8003af6 <osMessageQueuePut>
 800e976:	3800      	subs	r0, #0
 800e978:	bf18      	it	ne
 800e97a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800e97c:	4240      	negs	r0, r0
 800e97e:	b003      	add	sp, #12
 800e980:	f85d fb04 	ldr.w	pc, [sp], #4

0800e984 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800e984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e986:	4606      	mov	r6, r0
 800e988:	460f      	mov	r7, r1
 800e98a:	4615      	mov	r5, r2
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800e98c:	f7f4 fea6 	bl	80036dc <osKernelGetTickCount>
 800e990:	4604      	mov	r4, r0
#endif
  if(timeout != 0)
 800e992:	b16d      	cbz	r5, 800e9b0 <sys_arch_mbox_fetch+0x2c>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800e994:	462b      	mov	r3, r5
 800e996:	2200      	movs	r2, #0
 800e998:	4639      	mov	r1, r7
 800e99a:	6830      	ldr	r0, [r6, #0]
 800e99c:	f7f5 f8ed 	bl	8003b7a <osMessageQueueGet>
    if (status == osOK)
 800e9a0:	b110      	cbz	r0, 800e9a8 <sys_arch_mbox_fetch+0x24>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800e9a2:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800e9a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return (osKernelGetTickCount() - starttime);
 800e9a8:	f7f4 fe98 	bl	80036dc <osKernelGetTickCount>
 800e9ac:	1b00      	subs	r0, r0, r4
 800e9ae:	e7fa      	b.n	800e9a6 <sys_arch_mbox_fetch+0x22>
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800e9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b4:	2200      	movs	r2, #0
 800e9b6:	4639      	mov	r1, r7
 800e9b8:	6830      	ldr	r0, [r6, #0]
 800e9ba:	f7f5 f8de 	bl	8003b7a <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800e9be:	f7f4 fe8d 	bl	80036dc <osKernelGetTickCount>
 800e9c2:	1b00      	subs	r0, r0, r4
 800e9c4:	e7ef      	b.n	800e9a6 <sys_arch_mbox_fetch+0x22>

0800e9c6 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800e9c6:	b508      	push	{r3, lr}

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	6800      	ldr	r0, [r0, #0]
 800e9ce:	f7f5 f8d4 	bl	8003b7a <osMessageQueueGet>
 800e9d2:	3800      	subs	r0, #0
 800e9d4:	bf18      	it	ne
 800e9d6:	2001      	movne	r0, #1
  }
  else
  {
    return SYS_MBOX_EMPTY;
  }
}
 800e9d8:	4240      	negs	r0, r0
 800e9da:	bd08      	pop	{r3, pc}

0800e9dc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
  if (*mbox == SYS_MBOX_NULL)
 800e9dc:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800e9de:	3800      	subs	r0, #0
 800e9e0:	bf18      	it	ne
 800e9e2:	2001      	movne	r0, #1
 800e9e4:	4770      	bx	lr

0800e9e6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
  *mbox = SYS_MBOX_NULL;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	6003      	str	r3, [r0, #0]
}
 800e9ea:	4770      	bx	lr

0800e9ec <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e9f8:	f7f4 ff64 	bl	80038c4 <osSemaphoreNew>
 800e9fc:	6020      	str	r0, [r4, #0]
#endif

  if(*sem == NULL)
 800e9fe:	b138      	cbz	r0, 800ea10 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800ea00:	b10d      	cbz	r5, 800ea06 <sys_sem_new+0x1a>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800ea02:	2000      	movs	r0, #0
}
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
    osSemaphoreAcquire(*sem, 0);
 800ea06:	2100      	movs	r1, #0
 800ea08:	f7f4 ffba 	bl	8003980 <osSemaphoreAcquire>
  return ERR_OK;
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e7f9      	b.n	800ea04 <sys_sem_new+0x18>
    return ERR_MEM;
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295
 800ea14:	e7f6      	b.n	800ea04 <sys_sem_new+0x18>

0800ea16 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800ea16:	b570      	push	{r4, r5, r6, lr}
 800ea18:	4604      	mov	r4, r0
 800ea1a:	460e      	mov	r6, r1
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 800ea1c:	f7f4 fe5e 	bl	80036dc <osKernelGetTickCount>
 800ea20:	4605      	mov	r5, r0
#endif
  if(timeout != 0)
 800ea22:	b95e      	cbnz	r6, 800ea3c <sys_arch_sem_wait+0x26>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 800ea24:	f04f 36ff 	mov.w	r6, #4294967295
 800ea28:	4631      	mov	r1, r6
 800ea2a:	6820      	ldr	r0, [r4, #0]
 800ea2c:	f7f4 ffa8 	bl	8003980 <osSemaphoreAcquire>
 800ea30:	2800      	cmp	r0, #0
 800ea32:	d1f9      	bne.n	800ea28 <sys_arch_sem_wait+0x12>
    return (osKernelGetTickCount() - starttime);
 800ea34:	f7f4 fe52 	bl	80036dc <osKernelGetTickCount>
 800ea38:	1b40      	subs	r0, r0, r5
#endif
  }
}
 800ea3a:	bd70      	pop	{r4, r5, r6, pc}
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 800ea3c:	4631      	mov	r1, r6
 800ea3e:	6820      	ldr	r0, [r4, #0]
 800ea40:	f7f4 ff9e 	bl	8003980 <osSemaphoreAcquire>
 800ea44:	b110      	cbz	r0, 800ea4c <sys_arch_sem_wait+0x36>
      return SYS_ARCH_TIMEOUT;
 800ea46:	f04f 30ff 	mov.w	r0, #4294967295
 800ea4a:	e7f6      	b.n	800ea3a <sys_arch_sem_wait+0x24>
        return (osKernelGetTickCount() - starttime);
 800ea4c:	f7f4 fe46 	bl	80036dc <osKernelGetTickCount>
 800ea50:	1b40      	subs	r0, r0, r5
 800ea52:	e7f2      	b.n	800ea3a <sys_arch_sem_wait+0x24>

0800ea54 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 800ea54:	b508      	push	{r3, lr}
  osSemaphoreRelease(*sem);
 800ea56:	6800      	ldr	r0, [r0, #0]
 800ea58:	f7f4 ffc6 	bl	80039e8 <osSemaphoreRelease>
}
 800ea5c:	bd08      	pop	{r3, pc}

0800ea5e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 800ea5e:	b508      	push	{r3, lr}
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800ea60:	6800      	ldr	r0, [r0, #0]
 800ea62:	f7f4 ffef 	bl	8003a44 <osSemaphoreDelete>
}
 800ea66:	bd08      	pop	{r3, pc}

0800ea68 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800ea68:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800ea6a:	3800      	subs	r0, #0
 800ea6c:	bf18      	it	ne
 800ea6e:	2001      	movne	r0, #1
 800ea70:	4770      	bx	lr

0800ea72 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800ea72:	2300      	movs	r3, #0
 800ea74:	6003      	str	r3, [r0, #0]
}
 800ea76:	4770      	bx	lr

0800ea78 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800ea78:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800ea7a:	2000      	movs	r0, #0
 800ea7c:	f7f4 fe92 	bl	80037a4 <osMutexNew>
 800ea80:	4b01      	ldr	r3, [pc, #4]	; (800ea88 <sys_init+0x10>)
 800ea82:	6018      	str	r0, [r3, #0]
#endif
}
 800ea84:	bd08      	pop	{r3, pc}
 800ea86:	bf00      	nop
 800ea88:	20010a6c 	.word	0x20010a6c

0800ea8c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	4604      	mov	r4, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800ea90:	2000      	movs	r0, #0
 800ea92:	f7f4 fe87 	bl	80037a4 <osMutexNew>
 800ea96:	6020      	str	r0, [r4, #0]
#endif

  if(*mutex == NULL)
 800ea98:	fab0 f080 	clz	r0, r0
 800ea9c:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800ea9e:	4240      	negs	r0, r0
 800eaa0:	bd10      	pop	{r4, pc}

0800eaa2 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800eaa2:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800eaa4:	f04f 31ff 	mov.w	r1, #4294967295
 800eaa8:	6800      	ldr	r0, [r0, #0]
 800eaaa:	f7f4 febb 	bl	8003824 <osMutexAcquire>
#endif
}
 800eaae:	bd08      	pop	{r3, pc}

0800eab0 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800eab0:	b508      	push	{r3, lr}
  osMutexRelease(*mutex);
 800eab2:	6800      	ldr	r0, [r0, #0]
 800eab4:	f7f4 fee2 	bl	800387c <osMutexRelease>
}
 800eab8:	bd08      	pop	{r3, pc}

0800eaba <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800eaba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eabc:	b08b      	sub	sp, #44	; 0x2c
 800eabe:	4607      	mov	r7, r0
 800eac0:	460c      	mov	r4, r1
 800eac2:	4615      	mov	r5, r2
 800eac4:	461e      	mov	r6, r3
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800eac6:	2220      	movs	r2, #32
 800eac8:	2100      	movs	r1, #0
 800eaca:	a802      	add	r0, sp, #8
 800eacc:	f000 f975 	bl	800edba <memset>
 800ead0:	9701      	str	r7, [sp, #4]
 800ead2:	9606      	str	r6, [sp, #24]
 800ead4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ead6:	9307      	str	r3, [sp, #28]
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800ead8:	aa01      	add	r2, sp, #4
 800eada:	4629      	mov	r1, r5
 800eadc:	4620      	mov	r0, r4
 800eade:	f7f4 fe07 	bl	80036f0 <osThreadNew>
#endif
}
 800eae2:	b00b      	add	sp, #44	; 0x2c
 800eae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800eae8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800eae8:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800eaea:	f04f 31ff 	mov.w	r1, #4294967295
 800eaee:	4b03      	ldr	r3, [pc, #12]	; (800eafc <sys_arch_protect+0x14>)
 800eaf0:	6818      	ldr	r0, [r3, #0]
 800eaf2:	f7f4 fe97 	bl	8003824 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
}
 800eaf6:	2001      	movs	r0, #1
 800eaf8:	bd08      	pop	{r3, pc}
 800eafa:	bf00      	nop
 800eafc:	20010a6c 	.word	0x20010a6c

0800eb00 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800eb00:	b508      	push	{r3, lr}
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800eb02:	4b02      	ldr	r3, [pc, #8]	; (800eb0c <sys_arch_unprotect+0xc>)
 800eb04:	6818      	ldr	r0, [r3, #0]
 800eb06:	f7f4 feb9 	bl	800387c <osMutexRelease>
}
 800eb0a:	bd08      	pop	{r3, pc}
 800eb0c:	20010a6c 	.word	0x20010a6c

0800eb10 <std>:
 800eb10:	2300      	movs	r3, #0
 800eb12:	b510      	push	{r4, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	e9c0 3300 	strd	r3, r3, [r0]
 800eb1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb1e:	6083      	str	r3, [r0, #8]
 800eb20:	8181      	strh	r1, [r0, #12]
 800eb22:	6643      	str	r3, [r0, #100]	; 0x64
 800eb24:	81c2      	strh	r2, [r0, #14]
 800eb26:	6183      	str	r3, [r0, #24]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	2208      	movs	r2, #8
 800eb2c:	305c      	adds	r0, #92	; 0x5c
 800eb2e:	f000 f944 	bl	800edba <memset>
 800eb32:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <std+0x38>)
 800eb34:	6263      	str	r3, [r4, #36]	; 0x24
 800eb36:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <std+0x3c>)
 800eb38:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb3a:	4b05      	ldr	r3, [pc, #20]	; (800eb50 <std+0x40>)
 800eb3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb3e:	4b05      	ldr	r3, [pc, #20]	; (800eb54 <std+0x44>)
 800eb40:	6224      	str	r4, [r4, #32]
 800eb42:	6323      	str	r3, [r4, #48]	; 0x30
 800eb44:	bd10      	pop	{r4, pc}
 800eb46:	bf00      	nop
 800eb48:	0800f0d5 	.word	0x0800f0d5
 800eb4c:	0800f0f7 	.word	0x0800f0f7
 800eb50:	0800f12f 	.word	0x0800f12f
 800eb54:	0800f153 	.word	0x0800f153

0800eb58 <_cleanup_r>:
 800eb58:	4901      	ldr	r1, [pc, #4]	; (800eb60 <_cleanup_r+0x8>)
 800eb5a:	f000 b8af 	b.w	800ecbc <_fwalk_reent>
 800eb5e:	bf00      	nop
 800eb60:	0800f30d 	.word	0x0800f30d

0800eb64 <__sfmoreglue>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	2268      	movs	r2, #104	; 0x68
 800eb68:	1e4d      	subs	r5, r1, #1
 800eb6a:	4355      	muls	r5, r2
 800eb6c:	460e      	mov	r6, r1
 800eb6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb72:	f000 f94b 	bl	800ee0c <_malloc_r>
 800eb76:	4604      	mov	r4, r0
 800eb78:	b140      	cbz	r0, 800eb8c <__sfmoreglue+0x28>
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb80:	300c      	adds	r0, #12
 800eb82:	60a0      	str	r0, [r4, #8]
 800eb84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb88:	f000 f917 	bl	800edba <memset>
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	bd70      	pop	{r4, r5, r6, pc}

0800eb90 <__sfp_lock_acquire>:
 800eb90:	4801      	ldr	r0, [pc, #4]	; (800eb98 <__sfp_lock_acquire+0x8>)
 800eb92:	f000 b8d8 	b.w	800ed46 <__retarget_lock_acquire_recursive>
 800eb96:	bf00      	nop
 800eb98:	20010a71 	.word	0x20010a71

0800eb9c <__sfp_lock_release>:
 800eb9c:	4801      	ldr	r0, [pc, #4]	; (800eba4 <__sfp_lock_release+0x8>)
 800eb9e:	f000 b8d3 	b.w	800ed48 <__retarget_lock_release_recursive>
 800eba2:	bf00      	nop
 800eba4:	20010a71 	.word	0x20010a71

0800eba8 <__sinit_lock_acquire>:
 800eba8:	4801      	ldr	r0, [pc, #4]	; (800ebb0 <__sinit_lock_acquire+0x8>)
 800ebaa:	f000 b8cc 	b.w	800ed46 <__retarget_lock_acquire_recursive>
 800ebae:	bf00      	nop
 800ebb0:	20010a72 	.word	0x20010a72

0800ebb4 <__sinit_lock_release>:
 800ebb4:	4801      	ldr	r0, [pc, #4]	; (800ebbc <__sinit_lock_release+0x8>)
 800ebb6:	f000 b8c7 	b.w	800ed48 <__retarget_lock_release_recursive>
 800ebba:	bf00      	nop
 800ebbc:	20010a72 	.word	0x20010a72

0800ebc0 <__sinit>:
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	f7ff fff0 	bl	800eba8 <__sinit_lock_acquire>
 800ebc8:	69a3      	ldr	r3, [r4, #24]
 800ebca:	b11b      	cbz	r3, 800ebd4 <__sinit+0x14>
 800ebcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebd0:	f7ff bff0 	b.w	800ebb4 <__sinit_lock_release>
 800ebd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebd8:	6523      	str	r3, [r4, #80]	; 0x50
 800ebda:	4b13      	ldr	r3, [pc, #76]	; (800ec28 <__sinit+0x68>)
 800ebdc:	4a13      	ldr	r2, [pc, #76]	; (800ec2c <__sinit+0x6c>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebe2:	42a3      	cmp	r3, r4
 800ebe4:	bf04      	itt	eq
 800ebe6:	2301      	moveq	r3, #1
 800ebe8:	61a3      	streq	r3, [r4, #24]
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 f820 	bl	800ec30 <__sfp>
 800ebf0:	6060      	str	r0, [r4, #4]
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 f81c 	bl	800ec30 <__sfp>
 800ebf8:	60a0      	str	r0, [r4, #8]
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f000 f818 	bl	800ec30 <__sfp>
 800ec00:	2200      	movs	r2, #0
 800ec02:	60e0      	str	r0, [r4, #12]
 800ec04:	2104      	movs	r1, #4
 800ec06:	6860      	ldr	r0, [r4, #4]
 800ec08:	f7ff ff82 	bl	800eb10 <std>
 800ec0c:	68a0      	ldr	r0, [r4, #8]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	2109      	movs	r1, #9
 800ec12:	f7ff ff7d 	bl	800eb10 <std>
 800ec16:	68e0      	ldr	r0, [r4, #12]
 800ec18:	2202      	movs	r2, #2
 800ec1a:	2112      	movs	r1, #18
 800ec1c:	f7ff ff78 	bl	800eb10 <std>
 800ec20:	2301      	movs	r3, #1
 800ec22:	61a3      	str	r3, [r4, #24]
 800ec24:	e7d2      	b.n	800ebcc <__sinit+0xc>
 800ec26:	bf00      	nop
 800ec28:	08012a54 	.word	0x08012a54
 800ec2c:	0800eb59 	.word	0x0800eb59

0800ec30 <__sfp>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	4607      	mov	r7, r0
 800ec34:	f7ff ffac 	bl	800eb90 <__sfp_lock_acquire>
 800ec38:	4b1e      	ldr	r3, [pc, #120]	; (800ecb4 <__sfp+0x84>)
 800ec3a:	681e      	ldr	r6, [r3, #0]
 800ec3c:	69b3      	ldr	r3, [r6, #24]
 800ec3e:	b913      	cbnz	r3, 800ec46 <__sfp+0x16>
 800ec40:	4630      	mov	r0, r6
 800ec42:	f7ff ffbd 	bl	800ebc0 <__sinit>
 800ec46:	3648      	adds	r6, #72	; 0x48
 800ec48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	d503      	bpl.n	800ec58 <__sfp+0x28>
 800ec50:	6833      	ldr	r3, [r6, #0]
 800ec52:	b30b      	cbz	r3, 800ec98 <__sfp+0x68>
 800ec54:	6836      	ldr	r6, [r6, #0]
 800ec56:	e7f7      	b.n	800ec48 <__sfp+0x18>
 800ec58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec5c:	b9d5      	cbnz	r5, 800ec94 <__sfp+0x64>
 800ec5e:	4b16      	ldr	r3, [pc, #88]	; (800ecb8 <__sfp+0x88>)
 800ec60:	60e3      	str	r3, [r4, #12]
 800ec62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec66:	6665      	str	r5, [r4, #100]	; 0x64
 800ec68:	f000 f86c 	bl	800ed44 <__retarget_lock_init_recursive>
 800ec6c:	f7ff ff96 	bl	800eb9c <__sfp_lock_release>
 800ec70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec78:	6025      	str	r5, [r4, #0]
 800ec7a:	61a5      	str	r5, [r4, #24]
 800ec7c:	2208      	movs	r2, #8
 800ec7e:	4629      	mov	r1, r5
 800ec80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec84:	f000 f899 	bl	800edba <memset>
 800ec88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec90:	4620      	mov	r0, r4
 800ec92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec94:	3468      	adds	r4, #104	; 0x68
 800ec96:	e7d9      	b.n	800ec4c <__sfp+0x1c>
 800ec98:	2104      	movs	r1, #4
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	f7ff ff62 	bl	800eb64 <__sfmoreglue>
 800eca0:	4604      	mov	r4, r0
 800eca2:	6030      	str	r0, [r6, #0]
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d1d5      	bne.n	800ec54 <__sfp+0x24>
 800eca8:	f7ff ff78 	bl	800eb9c <__sfp_lock_release>
 800ecac:	230c      	movs	r3, #12
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	e7ee      	b.n	800ec90 <__sfp+0x60>
 800ecb2:	bf00      	nop
 800ecb4:	08012a54 	.word	0x08012a54
 800ecb8:	ffff0001 	.word	0xffff0001

0800ecbc <_fwalk_reent>:
 800ecbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	4688      	mov	r8, r1
 800ecc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecc8:	2700      	movs	r7, #0
 800ecca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecce:	f1b9 0901 	subs.w	r9, r9, #1
 800ecd2:	d505      	bpl.n	800ece0 <_fwalk_reent+0x24>
 800ecd4:	6824      	ldr	r4, [r4, #0]
 800ecd6:	2c00      	cmp	r4, #0
 800ecd8:	d1f7      	bne.n	800ecca <_fwalk_reent+0xe>
 800ecda:	4638      	mov	r0, r7
 800ecdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece0:	89ab      	ldrh	r3, [r5, #12]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d907      	bls.n	800ecf6 <_fwalk_reent+0x3a>
 800ece6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecea:	3301      	adds	r3, #1
 800ecec:	d003      	beq.n	800ecf6 <_fwalk_reent+0x3a>
 800ecee:	4629      	mov	r1, r5
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	47c0      	blx	r8
 800ecf4:	4307      	orrs	r7, r0
 800ecf6:	3568      	adds	r5, #104	; 0x68
 800ecf8:	e7e9      	b.n	800ecce <_fwalk_reent+0x12>
	...

0800ecfc <__libc_init_array>:
 800ecfc:	b570      	push	{r4, r5, r6, lr}
 800ecfe:	4d0d      	ldr	r5, [pc, #52]	; (800ed34 <__libc_init_array+0x38>)
 800ed00:	4c0d      	ldr	r4, [pc, #52]	; (800ed38 <__libc_init_array+0x3c>)
 800ed02:	1b64      	subs	r4, r4, r5
 800ed04:	10a4      	asrs	r4, r4, #2
 800ed06:	2600      	movs	r6, #0
 800ed08:	42a6      	cmp	r6, r4
 800ed0a:	d109      	bne.n	800ed20 <__libc_init_array+0x24>
 800ed0c:	4d0b      	ldr	r5, [pc, #44]	; (800ed3c <__libc_init_array+0x40>)
 800ed0e:	4c0c      	ldr	r4, [pc, #48]	; (800ed40 <__libc_init_array+0x44>)
 800ed10:	f001 f9e2 	bl	80100d8 <_init>
 800ed14:	1b64      	subs	r4, r4, r5
 800ed16:	10a4      	asrs	r4, r4, #2
 800ed18:	2600      	movs	r6, #0
 800ed1a:	42a6      	cmp	r6, r4
 800ed1c:	d105      	bne.n	800ed2a <__libc_init_array+0x2e>
 800ed1e:	bd70      	pop	{r4, r5, r6, pc}
 800ed20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed24:	4798      	blx	r3
 800ed26:	3601      	adds	r6, #1
 800ed28:	e7ee      	b.n	800ed08 <__libc_init_array+0xc>
 800ed2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed2e:	4798      	blx	r3
 800ed30:	3601      	adds	r6, #1
 800ed32:	e7f2      	b.n	800ed1a <__libc_init_array+0x1e>
 800ed34:	08012b44 	.word	0x08012b44
 800ed38:	08012b44 	.word	0x08012b44
 800ed3c:	08012b44 	.word	0x08012b44
 800ed40:	08012b48 	.word	0x08012b48

0800ed44 <__retarget_lock_init_recursive>:
 800ed44:	4770      	bx	lr

0800ed46 <__retarget_lock_acquire_recursive>:
 800ed46:	4770      	bx	lr

0800ed48 <__retarget_lock_release_recursive>:
 800ed48:	4770      	bx	lr

0800ed4a <memcmp>:
 800ed4a:	b510      	push	{r4, lr}
 800ed4c:	3901      	subs	r1, #1
 800ed4e:	4402      	add	r2, r0
 800ed50:	4290      	cmp	r0, r2
 800ed52:	d101      	bne.n	800ed58 <memcmp+0xe>
 800ed54:	2000      	movs	r0, #0
 800ed56:	e005      	b.n	800ed64 <memcmp+0x1a>
 800ed58:	7803      	ldrb	r3, [r0, #0]
 800ed5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ed5e:	42a3      	cmp	r3, r4
 800ed60:	d001      	beq.n	800ed66 <memcmp+0x1c>
 800ed62:	1b18      	subs	r0, r3, r4
 800ed64:	bd10      	pop	{r4, pc}
 800ed66:	3001      	adds	r0, #1
 800ed68:	e7f2      	b.n	800ed50 <memcmp+0x6>

0800ed6a <memcpy>:
 800ed6a:	440a      	add	r2, r1
 800ed6c:	4291      	cmp	r1, r2
 800ed6e:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed72:	d100      	bne.n	800ed76 <memcpy+0xc>
 800ed74:	4770      	bx	lr
 800ed76:	b510      	push	{r4, lr}
 800ed78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed80:	4291      	cmp	r1, r2
 800ed82:	d1f9      	bne.n	800ed78 <memcpy+0xe>
 800ed84:	bd10      	pop	{r4, pc}

0800ed86 <memmove>:
 800ed86:	4288      	cmp	r0, r1
 800ed88:	b510      	push	{r4, lr}
 800ed8a:	eb01 0402 	add.w	r4, r1, r2
 800ed8e:	d902      	bls.n	800ed96 <memmove+0x10>
 800ed90:	4284      	cmp	r4, r0
 800ed92:	4623      	mov	r3, r4
 800ed94:	d807      	bhi.n	800eda6 <memmove+0x20>
 800ed96:	1e43      	subs	r3, r0, #1
 800ed98:	42a1      	cmp	r1, r4
 800ed9a:	d008      	beq.n	800edae <memmove+0x28>
 800ed9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eda0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eda4:	e7f8      	b.n	800ed98 <memmove+0x12>
 800eda6:	4402      	add	r2, r0
 800eda8:	4601      	mov	r1, r0
 800edaa:	428a      	cmp	r2, r1
 800edac:	d100      	bne.n	800edb0 <memmove+0x2a>
 800edae:	bd10      	pop	{r4, pc}
 800edb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800edb4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800edb8:	e7f7      	b.n	800edaa <memmove+0x24>

0800edba <memset>:
 800edba:	4402      	add	r2, r0
 800edbc:	4603      	mov	r3, r0
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d100      	bne.n	800edc4 <memset+0xa>
 800edc2:	4770      	bx	lr
 800edc4:	f803 1b01 	strb.w	r1, [r3], #1
 800edc8:	e7f9      	b.n	800edbe <memset+0x4>
	...

0800edcc <sbrk_aligned>:
 800edcc:	b570      	push	{r4, r5, r6, lr}
 800edce:	4e0e      	ldr	r6, [pc, #56]	; (800ee08 <sbrk_aligned+0x3c>)
 800edd0:	460c      	mov	r4, r1
 800edd2:	6831      	ldr	r1, [r6, #0]
 800edd4:	4605      	mov	r5, r0
 800edd6:	b911      	cbnz	r1, 800edde <sbrk_aligned+0x12>
 800edd8:	f000 f94c 	bl	800f074 <_sbrk_r>
 800eddc:	6030      	str	r0, [r6, #0]
 800edde:	4621      	mov	r1, r4
 800ede0:	4628      	mov	r0, r5
 800ede2:	f000 f947 	bl	800f074 <_sbrk_r>
 800ede6:	1c43      	adds	r3, r0, #1
 800ede8:	d00a      	beq.n	800ee00 <sbrk_aligned+0x34>
 800edea:	1cc4      	adds	r4, r0, #3
 800edec:	f024 0403 	bic.w	r4, r4, #3
 800edf0:	42a0      	cmp	r0, r4
 800edf2:	d007      	beq.n	800ee04 <sbrk_aligned+0x38>
 800edf4:	1a21      	subs	r1, r4, r0
 800edf6:	4628      	mov	r0, r5
 800edf8:	f000 f93c 	bl	800f074 <_sbrk_r>
 800edfc:	3001      	adds	r0, #1
 800edfe:	d101      	bne.n	800ee04 <sbrk_aligned+0x38>
 800ee00:	f04f 34ff 	mov.w	r4, #4294967295
 800ee04:	4620      	mov	r0, r4
 800ee06:	bd70      	pop	{r4, r5, r6, pc}
 800ee08:	20010a78 	.word	0x20010a78

0800ee0c <_malloc_r>:
 800ee0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee10:	1ccd      	adds	r5, r1, #3
 800ee12:	f025 0503 	bic.w	r5, r5, #3
 800ee16:	3508      	adds	r5, #8
 800ee18:	2d0c      	cmp	r5, #12
 800ee1a:	bf38      	it	cc
 800ee1c:	250c      	movcc	r5, #12
 800ee1e:	2d00      	cmp	r5, #0
 800ee20:	4607      	mov	r7, r0
 800ee22:	db01      	blt.n	800ee28 <_malloc_r+0x1c>
 800ee24:	42a9      	cmp	r1, r5
 800ee26:	d905      	bls.n	800ee34 <_malloc_r+0x28>
 800ee28:	230c      	movs	r3, #12
 800ee2a:	603b      	str	r3, [r7, #0]
 800ee2c:	2600      	movs	r6, #0
 800ee2e:	4630      	mov	r0, r6
 800ee30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee34:	4e2e      	ldr	r6, [pc, #184]	; (800eef0 <_malloc_r+0xe4>)
 800ee36:	f000 fad1 	bl	800f3dc <__malloc_lock>
 800ee3a:	6833      	ldr	r3, [r6, #0]
 800ee3c:	461c      	mov	r4, r3
 800ee3e:	bb34      	cbnz	r4, 800ee8e <_malloc_r+0x82>
 800ee40:	4629      	mov	r1, r5
 800ee42:	4638      	mov	r0, r7
 800ee44:	f7ff ffc2 	bl	800edcc <sbrk_aligned>
 800ee48:	1c43      	adds	r3, r0, #1
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	d14d      	bne.n	800eeea <_malloc_r+0xde>
 800ee4e:	6834      	ldr	r4, [r6, #0]
 800ee50:	4626      	mov	r6, r4
 800ee52:	2e00      	cmp	r6, #0
 800ee54:	d140      	bne.n	800eed8 <_malloc_r+0xcc>
 800ee56:	6823      	ldr	r3, [r4, #0]
 800ee58:	4631      	mov	r1, r6
 800ee5a:	4638      	mov	r0, r7
 800ee5c:	eb04 0803 	add.w	r8, r4, r3
 800ee60:	f000 f908 	bl	800f074 <_sbrk_r>
 800ee64:	4580      	cmp	r8, r0
 800ee66:	d13a      	bne.n	800eede <_malloc_r+0xd2>
 800ee68:	6821      	ldr	r1, [r4, #0]
 800ee6a:	3503      	adds	r5, #3
 800ee6c:	1a6d      	subs	r5, r5, r1
 800ee6e:	f025 0503 	bic.w	r5, r5, #3
 800ee72:	3508      	adds	r5, #8
 800ee74:	2d0c      	cmp	r5, #12
 800ee76:	bf38      	it	cc
 800ee78:	250c      	movcc	r5, #12
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	f7ff ffa5 	bl	800edcc <sbrk_aligned>
 800ee82:	3001      	adds	r0, #1
 800ee84:	d02b      	beq.n	800eede <_malloc_r+0xd2>
 800ee86:	6823      	ldr	r3, [r4, #0]
 800ee88:	442b      	add	r3, r5
 800ee8a:	6023      	str	r3, [r4, #0]
 800ee8c:	e00e      	b.n	800eeac <_malloc_r+0xa0>
 800ee8e:	6822      	ldr	r2, [r4, #0]
 800ee90:	1b52      	subs	r2, r2, r5
 800ee92:	d41e      	bmi.n	800eed2 <_malloc_r+0xc6>
 800ee94:	2a0b      	cmp	r2, #11
 800ee96:	d916      	bls.n	800eec6 <_malloc_r+0xba>
 800ee98:	1961      	adds	r1, r4, r5
 800ee9a:	42a3      	cmp	r3, r4
 800ee9c:	6025      	str	r5, [r4, #0]
 800ee9e:	bf18      	it	ne
 800eea0:	6059      	strne	r1, [r3, #4]
 800eea2:	6863      	ldr	r3, [r4, #4]
 800eea4:	bf08      	it	eq
 800eea6:	6031      	streq	r1, [r6, #0]
 800eea8:	5162      	str	r2, [r4, r5]
 800eeaa:	604b      	str	r3, [r1, #4]
 800eeac:	4638      	mov	r0, r7
 800eeae:	f104 060b 	add.w	r6, r4, #11
 800eeb2:	f000 fa99 	bl	800f3e8 <__malloc_unlock>
 800eeb6:	f026 0607 	bic.w	r6, r6, #7
 800eeba:	1d23      	adds	r3, r4, #4
 800eebc:	1af2      	subs	r2, r6, r3
 800eebe:	d0b6      	beq.n	800ee2e <_malloc_r+0x22>
 800eec0:	1b9b      	subs	r3, r3, r6
 800eec2:	50a3      	str	r3, [r4, r2]
 800eec4:	e7b3      	b.n	800ee2e <_malloc_r+0x22>
 800eec6:	6862      	ldr	r2, [r4, #4]
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	bf0c      	ite	eq
 800eecc:	6032      	streq	r2, [r6, #0]
 800eece:	605a      	strne	r2, [r3, #4]
 800eed0:	e7ec      	b.n	800eeac <_malloc_r+0xa0>
 800eed2:	4623      	mov	r3, r4
 800eed4:	6864      	ldr	r4, [r4, #4]
 800eed6:	e7b2      	b.n	800ee3e <_malloc_r+0x32>
 800eed8:	4634      	mov	r4, r6
 800eeda:	6876      	ldr	r6, [r6, #4]
 800eedc:	e7b9      	b.n	800ee52 <_malloc_r+0x46>
 800eede:	230c      	movs	r3, #12
 800eee0:	603b      	str	r3, [r7, #0]
 800eee2:	4638      	mov	r0, r7
 800eee4:	f000 fa80 	bl	800f3e8 <__malloc_unlock>
 800eee8:	e7a1      	b.n	800ee2e <_malloc_r+0x22>
 800eeea:	6025      	str	r5, [r4, #0]
 800eeec:	e7de      	b.n	800eeac <_malloc_r+0xa0>
 800eeee:	bf00      	nop
 800eef0:	20010a74 	.word	0x20010a74

0800eef4 <iprintf>:
 800eef4:	b40f      	push	{r0, r1, r2, r3}
 800eef6:	4b0a      	ldr	r3, [pc, #40]	; (800ef20 <iprintf+0x2c>)
 800eef8:	b513      	push	{r0, r1, r4, lr}
 800eefa:	681c      	ldr	r4, [r3, #0]
 800eefc:	b124      	cbz	r4, 800ef08 <iprintf+0x14>
 800eefe:	69a3      	ldr	r3, [r4, #24]
 800ef00:	b913      	cbnz	r3, 800ef08 <iprintf+0x14>
 800ef02:	4620      	mov	r0, r4
 800ef04:	f7ff fe5c 	bl	800ebc0 <__sinit>
 800ef08:	ab05      	add	r3, sp, #20
 800ef0a:	9a04      	ldr	r2, [sp, #16]
 800ef0c:	68a1      	ldr	r1, [r4, #8]
 800ef0e:	9301      	str	r3, [sp, #4]
 800ef10:	4620      	mov	r0, r4
 800ef12:	f000 fc41 	bl	800f798 <_vfiprintf_r>
 800ef16:	b002      	add	sp, #8
 800ef18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef1c:	b004      	add	sp, #16
 800ef1e:	4770      	bx	lr
 800ef20:	2000002c 	.word	0x2000002c

0800ef24 <rand>:
 800ef24:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <rand+0x5c>)
 800ef26:	b510      	push	{r4, lr}
 800ef28:	681c      	ldr	r4, [r3, #0]
 800ef2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef2c:	b9b3      	cbnz	r3, 800ef5c <rand+0x38>
 800ef2e:	2018      	movs	r0, #24
 800ef30:	f000 fa4c 	bl	800f3cc <malloc>
 800ef34:	63a0      	str	r0, [r4, #56]	; 0x38
 800ef36:	b928      	cbnz	r0, 800ef44 <rand+0x20>
 800ef38:	4602      	mov	r2, r0
 800ef3a:	4b12      	ldr	r3, [pc, #72]	; (800ef84 <rand+0x60>)
 800ef3c:	4812      	ldr	r0, [pc, #72]	; (800ef88 <rand+0x64>)
 800ef3e:	214e      	movs	r1, #78	; 0x4e
 800ef40:	f000 f930 	bl	800f1a4 <__assert_func>
 800ef44:	4a11      	ldr	r2, [pc, #68]	; (800ef8c <rand+0x68>)
 800ef46:	4b12      	ldr	r3, [pc, #72]	; (800ef90 <rand+0x6c>)
 800ef48:	e9c0 2300 	strd	r2, r3, [r0]
 800ef4c:	4b11      	ldr	r3, [pc, #68]	; (800ef94 <rand+0x70>)
 800ef4e:	6083      	str	r3, [r0, #8]
 800ef50:	230b      	movs	r3, #11
 800ef52:	8183      	strh	r3, [r0, #12]
 800ef54:	2201      	movs	r2, #1
 800ef56:	2300      	movs	r3, #0
 800ef58:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ef5c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800ef5e:	4a0e      	ldr	r2, [pc, #56]	; (800ef98 <rand+0x74>)
 800ef60:	6920      	ldr	r0, [r4, #16]
 800ef62:	6963      	ldr	r3, [r4, #20]
 800ef64:	490d      	ldr	r1, [pc, #52]	; (800ef9c <rand+0x78>)
 800ef66:	4342      	muls	r2, r0
 800ef68:	fb01 2203 	mla	r2, r1, r3, r2
 800ef6c:	fba0 0101 	umull	r0, r1, r0, r1
 800ef70:	1c43      	adds	r3, r0, #1
 800ef72:	eb42 0001 	adc.w	r0, r2, r1
 800ef76:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800ef7a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef7e:	bd10      	pop	{r4, pc}
 800ef80:	2000002c 	.word	0x2000002c
 800ef84:	08012a58 	.word	0x08012a58
 800ef88:	08012a6f 	.word	0x08012a6f
 800ef8c:	abcd330e 	.word	0xabcd330e
 800ef90:	e66d1234 	.word	0xe66d1234
 800ef94:	0005deec 	.word	0x0005deec
 800ef98:	5851f42d 	.word	0x5851f42d
 800ef9c:	4c957f2d 	.word	0x4c957f2d

0800efa0 <cleanup_glue>:
 800efa0:	b538      	push	{r3, r4, r5, lr}
 800efa2:	460c      	mov	r4, r1
 800efa4:	6809      	ldr	r1, [r1, #0]
 800efa6:	4605      	mov	r5, r0
 800efa8:	b109      	cbz	r1, 800efae <cleanup_glue+0xe>
 800efaa:	f7ff fff9 	bl	800efa0 <cleanup_glue>
 800efae:	4621      	mov	r1, r4
 800efb0:	4628      	mov	r0, r5
 800efb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efb6:	f000 ba1d 	b.w	800f3f4 <_free_r>
	...

0800efbc <_reclaim_reent>:
 800efbc:	4b2c      	ldr	r3, [pc, #176]	; (800f070 <_reclaim_reent+0xb4>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4283      	cmp	r3, r0
 800efc2:	b570      	push	{r4, r5, r6, lr}
 800efc4:	4604      	mov	r4, r0
 800efc6:	d051      	beq.n	800f06c <_reclaim_reent+0xb0>
 800efc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800efca:	b143      	cbz	r3, 800efde <_reclaim_reent+0x22>
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d14a      	bne.n	800f068 <_reclaim_reent+0xac>
 800efd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efd4:	6819      	ldr	r1, [r3, #0]
 800efd6:	b111      	cbz	r1, 800efde <_reclaim_reent+0x22>
 800efd8:	4620      	mov	r0, r4
 800efda:	f000 fa0b 	bl	800f3f4 <_free_r>
 800efde:	6961      	ldr	r1, [r4, #20]
 800efe0:	b111      	cbz	r1, 800efe8 <_reclaim_reent+0x2c>
 800efe2:	4620      	mov	r0, r4
 800efe4:	f000 fa06 	bl	800f3f4 <_free_r>
 800efe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800efea:	b111      	cbz	r1, 800eff2 <_reclaim_reent+0x36>
 800efec:	4620      	mov	r0, r4
 800efee:	f000 fa01 	bl	800f3f4 <_free_r>
 800eff2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800eff4:	b111      	cbz	r1, 800effc <_reclaim_reent+0x40>
 800eff6:	4620      	mov	r0, r4
 800eff8:	f000 f9fc 	bl	800f3f4 <_free_r>
 800effc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800effe:	b111      	cbz	r1, 800f006 <_reclaim_reent+0x4a>
 800f000:	4620      	mov	r0, r4
 800f002:	f000 f9f7 	bl	800f3f4 <_free_r>
 800f006:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f008:	b111      	cbz	r1, 800f010 <_reclaim_reent+0x54>
 800f00a:	4620      	mov	r0, r4
 800f00c:	f000 f9f2 	bl	800f3f4 <_free_r>
 800f010:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f012:	b111      	cbz	r1, 800f01a <_reclaim_reent+0x5e>
 800f014:	4620      	mov	r0, r4
 800f016:	f000 f9ed 	bl	800f3f4 <_free_r>
 800f01a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f01c:	b111      	cbz	r1, 800f024 <_reclaim_reent+0x68>
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 f9e8 	bl	800f3f4 <_free_r>
 800f024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f026:	b111      	cbz	r1, 800f02e <_reclaim_reent+0x72>
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 f9e3 	bl	800f3f4 <_free_r>
 800f02e:	69a3      	ldr	r3, [r4, #24]
 800f030:	b1e3      	cbz	r3, 800f06c <_reclaim_reent+0xb0>
 800f032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f034:	4620      	mov	r0, r4
 800f036:	4798      	blx	r3
 800f038:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f03a:	b1b9      	cbz	r1, 800f06c <_reclaim_reent+0xb0>
 800f03c:	4620      	mov	r0, r4
 800f03e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f042:	f7ff bfad 	b.w	800efa0 <cleanup_glue>
 800f046:	5949      	ldr	r1, [r1, r5]
 800f048:	b941      	cbnz	r1, 800f05c <_reclaim_reent+0xa0>
 800f04a:	3504      	adds	r5, #4
 800f04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f04e:	2d80      	cmp	r5, #128	; 0x80
 800f050:	68d9      	ldr	r1, [r3, #12]
 800f052:	d1f8      	bne.n	800f046 <_reclaim_reent+0x8a>
 800f054:	4620      	mov	r0, r4
 800f056:	f000 f9cd 	bl	800f3f4 <_free_r>
 800f05a:	e7ba      	b.n	800efd2 <_reclaim_reent+0x16>
 800f05c:	680e      	ldr	r6, [r1, #0]
 800f05e:	4620      	mov	r0, r4
 800f060:	f000 f9c8 	bl	800f3f4 <_free_r>
 800f064:	4631      	mov	r1, r6
 800f066:	e7ef      	b.n	800f048 <_reclaim_reent+0x8c>
 800f068:	2500      	movs	r5, #0
 800f06a:	e7ef      	b.n	800f04c <_reclaim_reent+0x90>
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	bf00      	nop
 800f070:	2000002c 	.word	0x2000002c

0800f074 <_sbrk_r>:
 800f074:	b538      	push	{r3, r4, r5, lr}
 800f076:	4d06      	ldr	r5, [pc, #24]	; (800f090 <_sbrk_r+0x1c>)
 800f078:	2300      	movs	r3, #0
 800f07a:	4604      	mov	r4, r0
 800f07c:	4608      	mov	r0, r1
 800f07e:	602b      	str	r3, [r5, #0]
 800f080:	f7f1 fcf6 	bl	8000a70 <_sbrk>
 800f084:	1c43      	adds	r3, r0, #1
 800f086:	d102      	bne.n	800f08e <_sbrk_r+0x1a>
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	b103      	cbz	r3, 800f08e <_sbrk_r+0x1a>
 800f08c:	6023      	str	r3, [r4, #0]
 800f08e:	bd38      	pop	{r3, r4, r5, pc}
 800f090:	20010a7c 	.word	0x20010a7c

0800f094 <siprintf>:
 800f094:	b40e      	push	{r1, r2, r3}
 800f096:	b500      	push	{lr}
 800f098:	b09c      	sub	sp, #112	; 0x70
 800f09a:	ab1d      	add	r3, sp, #116	; 0x74
 800f09c:	9002      	str	r0, [sp, #8]
 800f09e:	9006      	str	r0, [sp, #24]
 800f0a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f0a4:	4809      	ldr	r0, [pc, #36]	; (800f0cc <siprintf+0x38>)
 800f0a6:	9107      	str	r1, [sp, #28]
 800f0a8:	9104      	str	r1, [sp, #16]
 800f0aa:	4909      	ldr	r1, [pc, #36]	; (800f0d0 <siprintf+0x3c>)
 800f0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0b0:	9105      	str	r1, [sp, #20]
 800f0b2:	6800      	ldr	r0, [r0, #0]
 800f0b4:	9301      	str	r3, [sp, #4]
 800f0b6:	a902      	add	r1, sp, #8
 800f0b8:	f000 fa44 	bl	800f544 <_svfiprintf_r>
 800f0bc:	9b02      	ldr	r3, [sp, #8]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	701a      	strb	r2, [r3, #0]
 800f0c2:	b01c      	add	sp, #112	; 0x70
 800f0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0c8:	b003      	add	sp, #12
 800f0ca:	4770      	bx	lr
 800f0cc:	2000002c 	.word	0x2000002c
 800f0d0:	ffff0208 	.word	0xffff0208

0800f0d4 <__sread>:
 800f0d4:	b510      	push	{r4, lr}
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f0dc:	f000 fe20 	bl	800fd20 <_read_r>
 800f0e0:	2800      	cmp	r0, #0
 800f0e2:	bfab      	itete	ge
 800f0e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f0e6:	89a3      	ldrhlt	r3, [r4, #12]
 800f0e8:	181b      	addge	r3, r3, r0
 800f0ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f0ee:	bfac      	ite	ge
 800f0f0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f0f2:	81a3      	strhlt	r3, [r4, #12]
 800f0f4:	bd10      	pop	{r4, pc}

0800f0f6 <__swrite>:
 800f0f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0fa:	461f      	mov	r7, r3
 800f0fc:	898b      	ldrh	r3, [r1, #12]
 800f0fe:	05db      	lsls	r3, r3, #23
 800f100:	4605      	mov	r5, r0
 800f102:	460c      	mov	r4, r1
 800f104:	4616      	mov	r6, r2
 800f106:	d505      	bpl.n	800f114 <__swrite+0x1e>
 800f108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f10c:	2302      	movs	r3, #2
 800f10e:	2200      	movs	r2, #0
 800f110:	f000 f94a 	bl	800f3a8 <_lseek_r>
 800f114:	89a3      	ldrh	r3, [r4, #12]
 800f116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f11a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f11e:	81a3      	strh	r3, [r4, #12]
 800f120:	4632      	mov	r2, r6
 800f122:	463b      	mov	r3, r7
 800f124:	4628      	mov	r0, r5
 800f126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	f000 b829 	b.w	800f180 <_write_r>

0800f12e <__sseek>:
 800f12e:	b510      	push	{r4, lr}
 800f130:	460c      	mov	r4, r1
 800f132:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f136:	f000 f937 	bl	800f3a8 <_lseek_r>
 800f13a:	1c43      	adds	r3, r0, #1
 800f13c:	89a3      	ldrh	r3, [r4, #12]
 800f13e:	bf15      	itete	ne
 800f140:	6560      	strne	r0, [r4, #84]	; 0x54
 800f142:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f146:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f14a:	81a3      	strheq	r3, [r4, #12]
 800f14c:	bf18      	it	ne
 800f14e:	81a3      	strhne	r3, [r4, #12]
 800f150:	bd10      	pop	{r4, pc}

0800f152 <__sclose>:
 800f152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f156:	f000 b843 	b.w	800f1e0 <_close_r>

0800f15a <strncpy>:
 800f15a:	b510      	push	{r4, lr}
 800f15c:	3901      	subs	r1, #1
 800f15e:	4603      	mov	r3, r0
 800f160:	b132      	cbz	r2, 800f170 <strncpy+0x16>
 800f162:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f166:	f803 4b01 	strb.w	r4, [r3], #1
 800f16a:	3a01      	subs	r2, #1
 800f16c:	2c00      	cmp	r4, #0
 800f16e:	d1f7      	bne.n	800f160 <strncpy+0x6>
 800f170:	441a      	add	r2, r3
 800f172:	2100      	movs	r1, #0
 800f174:	4293      	cmp	r3, r2
 800f176:	d100      	bne.n	800f17a <strncpy+0x20>
 800f178:	bd10      	pop	{r4, pc}
 800f17a:	f803 1b01 	strb.w	r1, [r3], #1
 800f17e:	e7f9      	b.n	800f174 <strncpy+0x1a>

0800f180 <_write_r>:
 800f180:	b538      	push	{r3, r4, r5, lr}
 800f182:	4d07      	ldr	r5, [pc, #28]	; (800f1a0 <_write_r+0x20>)
 800f184:	4604      	mov	r4, r0
 800f186:	4608      	mov	r0, r1
 800f188:	4611      	mov	r1, r2
 800f18a:	2200      	movs	r2, #0
 800f18c:	602a      	str	r2, [r5, #0]
 800f18e:	461a      	mov	r2, r3
 800f190:	f7f1 fc55 	bl	8000a3e <_write>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_write_r+0x1e>
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_write_r+0x1e>
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	20010a7c 	.word	0x20010a7c

0800f1a4 <__assert_func>:
 800f1a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f1a6:	4614      	mov	r4, r2
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <__assert_func+0x2c>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4605      	mov	r5, r0
 800f1b0:	68d8      	ldr	r0, [r3, #12]
 800f1b2:	b14c      	cbz	r4, 800f1c8 <__assert_func+0x24>
 800f1b4:	4b07      	ldr	r3, [pc, #28]	; (800f1d4 <__assert_func+0x30>)
 800f1b6:	9100      	str	r1, [sp, #0]
 800f1b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f1bc:	4906      	ldr	r1, [pc, #24]	; (800f1d8 <__assert_func+0x34>)
 800f1be:	462b      	mov	r3, r5
 800f1c0:	f000 f8e0 	bl	800f384 <fiprintf>
 800f1c4:	f000 fe7e 	bl	800fec4 <abort>
 800f1c8:	4b04      	ldr	r3, [pc, #16]	; (800f1dc <__assert_func+0x38>)
 800f1ca:	461c      	mov	r4, r3
 800f1cc:	e7f3      	b.n	800f1b6 <__assert_func+0x12>
 800f1ce:	bf00      	nop
 800f1d0:	2000002c 	.word	0x2000002c
 800f1d4:	08012aca 	.word	0x08012aca
 800f1d8:	08012ad7 	.word	0x08012ad7
 800f1dc:	08012b05 	.word	0x08012b05

0800f1e0 <_close_r>:
 800f1e0:	b538      	push	{r3, r4, r5, lr}
 800f1e2:	4d06      	ldr	r5, [pc, #24]	; (800f1fc <_close_r+0x1c>)
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	4608      	mov	r0, r1
 800f1ea:	602b      	str	r3, [r5, #0]
 800f1ec:	f7f1 fc34 	bl	8000a58 <_close>
 800f1f0:	1c43      	adds	r3, r0, #1
 800f1f2:	d102      	bne.n	800f1fa <_close_r+0x1a>
 800f1f4:	682b      	ldr	r3, [r5, #0]
 800f1f6:	b103      	cbz	r3, 800f1fa <_close_r+0x1a>
 800f1f8:	6023      	str	r3, [r4, #0]
 800f1fa:	bd38      	pop	{r3, r4, r5, pc}
 800f1fc:	20010a7c 	.word	0x20010a7c

0800f200 <__sflush_r>:
 800f200:	898a      	ldrh	r2, [r1, #12]
 800f202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f206:	4605      	mov	r5, r0
 800f208:	0710      	lsls	r0, r2, #28
 800f20a:	460c      	mov	r4, r1
 800f20c:	d458      	bmi.n	800f2c0 <__sflush_r+0xc0>
 800f20e:	684b      	ldr	r3, [r1, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	dc05      	bgt.n	800f220 <__sflush_r+0x20>
 800f214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f216:	2b00      	cmp	r3, #0
 800f218:	dc02      	bgt.n	800f220 <__sflush_r+0x20>
 800f21a:	2000      	movs	r0, #0
 800f21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f222:	2e00      	cmp	r6, #0
 800f224:	d0f9      	beq.n	800f21a <__sflush_r+0x1a>
 800f226:	2300      	movs	r3, #0
 800f228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f22c:	682f      	ldr	r7, [r5, #0]
 800f22e:	602b      	str	r3, [r5, #0]
 800f230:	d032      	beq.n	800f298 <__sflush_r+0x98>
 800f232:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	075a      	lsls	r2, r3, #29
 800f238:	d505      	bpl.n	800f246 <__sflush_r+0x46>
 800f23a:	6863      	ldr	r3, [r4, #4]
 800f23c:	1ac0      	subs	r0, r0, r3
 800f23e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f240:	b10b      	cbz	r3, 800f246 <__sflush_r+0x46>
 800f242:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f244:	1ac0      	subs	r0, r0, r3
 800f246:	2300      	movs	r3, #0
 800f248:	4602      	mov	r2, r0
 800f24a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f24c:	6a21      	ldr	r1, [r4, #32]
 800f24e:	4628      	mov	r0, r5
 800f250:	47b0      	blx	r6
 800f252:	1c43      	adds	r3, r0, #1
 800f254:	89a3      	ldrh	r3, [r4, #12]
 800f256:	d106      	bne.n	800f266 <__sflush_r+0x66>
 800f258:	6829      	ldr	r1, [r5, #0]
 800f25a:	291d      	cmp	r1, #29
 800f25c:	d82c      	bhi.n	800f2b8 <__sflush_r+0xb8>
 800f25e:	4a2a      	ldr	r2, [pc, #168]	; (800f308 <__sflush_r+0x108>)
 800f260:	40ca      	lsrs	r2, r1
 800f262:	07d6      	lsls	r6, r2, #31
 800f264:	d528      	bpl.n	800f2b8 <__sflush_r+0xb8>
 800f266:	2200      	movs	r2, #0
 800f268:	6062      	str	r2, [r4, #4]
 800f26a:	04d9      	lsls	r1, r3, #19
 800f26c:	6922      	ldr	r2, [r4, #16]
 800f26e:	6022      	str	r2, [r4, #0]
 800f270:	d504      	bpl.n	800f27c <__sflush_r+0x7c>
 800f272:	1c42      	adds	r2, r0, #1
 800f274:	d101      	bne.n	800f27a <__sflush_r+0x7a>
 800f276:	682b      	ldr	r3, [r5, #0]
 800f278:	b903      	cbnz	r3, 800f27c <__sflush_r+0x7c>
 800f27a:	6560      	str	r0, [r4, #84]	; 0x54
 800f27c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f27e:	602f      	str	r7, [r5, #0]
 800f280:	2900      	cmp	r1, #0
 800f282:	d0ca      	beq.n	800f21a <__sflush_r+0x1a>
 800f284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f288:	4299      	cmp	r1, r3
 800f28a:	d002      	beq.n	800f292 <__sflush_r+0x92>
 800f28c:	4628      	mov	r0, r5
 800f28e:	f000 f8b1 	bl	800f3f4 <_free_r>
 800f292:	2000      	movs	r0, #0
 800f294:	6360      	str	r0, [r4, #52]	; 0x34
 800f296:	e7c1      	b.n	800f21c <__sflush_r+0x1c>
 800f298:	6a21      	ldr	r1, [r4, #32]
 800f29a:	2301      	movs	r3, #1
 800f29c:	4628      	mov	r0, r5
 800f29e:	47b0      	blx	r6
 800f2a0:	1c41      	adds	r1, r0, #1
 800f2a2:	d1c7      	bne.n	800f234 <__sflush_r+0x34>
 800f2a4:	682b      	ldr	r3, [r5, #0]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0c4      	beq.n	800f234 <__sflush_r+0x34>
 800f2aa:	2b1d      	cmp	r3, #29
 800f2ac:	d001      	beq.n	800f2b2 <__sflush_r+0xb2>
 800f2ae:	2b16      	cmp	r3, #22
 800f2b0:	d101      	bne.n	800f2b6 <__sflush_r+0xb6>
 800f2b2:	602f      	str	r7, [r5, #0]
 800f2b4:	e7b1      	b.n	800f21a <__sflush_r+0x1a>
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2bc:	81a3      	strh	r3, [r4, #12]
 800f2be:	e7ad      	b.n	800f21c <__sflush_r+0x1c>
 800f2c0:	690f      	ldr	r7, [r1, #16]
 800f2c2:	2f00      	cmp	r7, #0
 800f2c4:	d0a9      	beq.n	800f21a <__sflush_r+0x1a>
 800f2c6:	0793      	lsls	r3, r2, #30
 800f2c8:	680e      	ldr	r6, [r1, #0]
 800f2ca:	bf08      	it	eq
 800f2cc:	694b      	ldreq	r3, [r1, #20]
 800f2ce:	600f      	str	r7, [r1, #0]
 800f2d0:	bf18      	it	ne
 800f2d2:	2300      	movne	r3, #0
 800f2d4:	eba6 0807 	sub.w	r8, r6, r7
 800f2d8:	608b      	str	r3, [r1, #8]
 800f2da:	f1b8 0f00 	cmp.w	r8, #0
 800f2de:	dd9c      	ble.n	800f21a <__sflush_r+0x1a>
 800f2e0:	6a21      	ldr	r1, [r4, #32]
 800f2e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f2e4:	4643      	mov	r3, r8
 800f2e6:	463a      	mov	r2, r7
 800f2e8:	4628      	mov	r0, r5
 800f2ea:	47b0      	blx	r6
 800f2ec:	2800      	cmp	r0, #0
 800f2ee:	dc06      	bgt.n	800f2fe <__sflush_r+0xfe>
 800f2f0:	89a3      	ldrh	r3, [r4, #12]
 800f2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2f6:	81a3      	strh	r3, [r4, #12]
 800f2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2fc:	e78e      	b.n	800f21c <__sflush_r+0x1c>
 800f2fe:	4407      	add	r7, r0
 800f300:	eba8 0800 	sub.w	r8, r8, r0
 800f304:	e7e9      	b.n	800f2da <__sflush_r+0xda>
 800f306:	bf00      	nop
 800f308:	20400001 	.word	0x20400001

0800f30c <_fflush_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	690b      	ldr	r3, [r1, #16]
 800f310:	4605      	mov	r5, r0
 800f312:	460c      	mov	r4, r1
 800f314:	b913      	cbnz	r3, 800f31c <_fflush_r+0x10>
 800f316:	2500      	movs	r5, #0
 800f318:	4628      	mov	r0, r5
 800f31a:	bd38      	pop	{r3, r4, r5, pc}
 800f31c:	b118      	cbz	r0, 800f326 <_fflush_r+0x1a>
 800f31e:	6983      	ldr	r3, [r0, #24]
 800f320:	b90b      	cbnz	r3, 800f326 <_fflush_r+0x1a>
 800f322:	f7ff fc4d 	bl	800ebc0 <__sinit>
 800f326:	4b14      	ldr	r3, [pc, #80]	; (800f378 <_fflush_r+0x6c>)
 800f328:	429c      	cmp	r4, r3
 800f32a:	d11b      	bne.n	800f364 <_fflush_r+0x58>
 800f32c:	686c      	ldr	r4, [r5, #4]
 800f32e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d0ef      	beq.n	800f316 <_fflush_r+0xa>
 800f336:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f338:	07d0      	lsls	r0, r2, #31
 800f33a:	d404      	bmi.n	800f346 <_fflush_r+0x3a>
 800f33c:	0599      	lsls	r1, r3, #22
 800f33e:	d402      	bmi.n	800f346 <_fflush_r+0x3a>
 800f340:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f342:	f7ff fd00 	bl	800ed46 <__retarget_lock_acquire_recursive>
 800f346:	4628      	mov	r0, r5
 800f348:	4621      	mov	r1, r4
 800f34a:	f7ff ff59 	bl	800f200 <__sflush_r>
 800f34e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f350:	07da      	lsls	r2, r3, #31
 800f352:	4605      	mov	r5, r0
 800f354:	d4e0      	bmi.n	800f318 <_fflush_r+0xc>
 800f356:	89a3      	ldrh	r3, [r4, #12]
 800f358:	059b      	lsls	r3, r3, #22
 800f35a:	d4dd      	bmi.n	800f318 <_fflush_r+0xc>
 800f35c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f35e:	f7ff fcf3 	bl	800ed48 <__retarget_lock_release_recursive>
 800f362:	e7d9      	b.n	800f318 <_fflush_r+0xc>
 800f364:	4b05      	ldr	r3, [pc, #20]	; (800f37c <_fflush_r+0x70>)
 800f366:	429c      	cmp	r4, r3
 800f368:	d101      	bne.n	800f36e <_fflush_r+0x62>
 800f36a:	68ac      	ldr	r4, [r5, #8]
 800f36c:	e7df      	b.n	800f32e <_fflush_r+0x22>
 800f36e:	4b04      	ldr	r3, [pc, #16]	; (800f380 <_fflush_r+0x74>)
 800f370:	429c      	cmp	r4, r3
 800f372:	bf08      	it	eq
 800f374:	68ec      	ldreq	r4, [r5, #12]
 800f376:	e7da      	b.n	800f32e <_fflush_r+0x22>
 800f378:	08012a14 	.word	0x08012a14
 800f37c:	08012a34 	.word	0x08012a34
 800f380:	080129f4 	.word	0x080129f4

0800f384 <fiprintf>:
 800f384:	b40e      	push	{r1, r2, r3}
 800f386:	b503      	push	{r0, r1, lr}
 800f388:	4601      	mov	r1, r0
 800f38a:	ab03      	add	r3, sp, #12
 800f38c:	4805      	ldr	r0, [pc, #20]	; (800f3a4 <fiprintf+0x20>)
 800f38e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f392:	6800      	ldr	r0, [r0, #0]
 800f394:	9301      	str	r3, [sp, #4]
 800f396:	f000 f9ff 	bl	800f798 <_vfiprintf_r>
 800f39a:	b002      	add	sp, #8
 800f39c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f3a0:	b003      	add	sp, #12
 800f3a2:	4770      	bx	lr
 800f3a4:	2000002c 	.word	0x2000002c

0800f3a8 <_lseek_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4d07      	ldr	r5, [pc, #28]	; (800f3c8 <_lseek_r+0x20>)
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	4608      	mov	r0, r1
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	602a      	str	r2, [r5, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f7f1 fb58 	bl	8000a6c <_lseek>
 800f3bc:	1c43      	adds	r3, r0, #1
 800f3be:	d102      	bne.n	800f3c6 <_lseek_r+0x1e>
 800f3c0:	682b      	ldr	r3, [r5, #0]
 800f3c2:	b103      	cbz	r3, 800f3c6 <_lseek_r+0x1e>
 800f3c4:	6023      	str	r3, [r4, #0]
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}
 800f3c8:	20010a7c 	.word	0x20010a7c

0800f3cc <malloc>:
 800f3cc:	4b02      	ldr	r3, [pc, #8]	; (800f3d8 <malloc+0xc>)
 800f3ce:	4601      	mov	r1, r0
 800f3d0:	6818      	ldr	r0, [r3, #0]
 800f3d2:	f7ff bd1b 	b.w	800ee0c <_malloc_r>
 800f3d6:	bf00      	nop
 800f3d8:	2000002c 	.word	0x2000002c

0800f3dc <__malloc_lock>:
 800f3dc:	4801      	ldr	r0, [pc, #4]	; (800f3e4 <__malloc_lock+0x8>)
 800f3de:	f7ff bcb2 	b.w	800ed46 <__retarget_lock_acquire_recursive>
 800f3e2:	bf00      	nop
 800f3e4:	20010a70 	.word	0x20010a70

0800f3e8 <__malloc_unlock>:
 800f3e8:	4801      	ldr	r0, [pc, #4]	; (800f3f0 <__malloc_unlock+0x8>)
 800f3ea:	f7ff bcad 	b.w	800ed48 <__retarget_lock_release_recursive>
 800f3ee:	bf00      	nop
 800f3f0:	20010a70 	.word	0x20010a70

0800f3f4 <_free_r>:
 800f3f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3f6:	2900      	cmp	r1, #0
 800f3f8:	d044      	beq.n	800f484 <_free_r+0x90>
 800f3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3fe:	9001      	str	r0, [sp, #4]
 800f400:	2b00      	cmp	r3, #0
 800f402:	f1a1 0404 	sub.w	r4, r1, #4
 800f406:	bfb8      	it	lt
 800f408:	18e4      	addlt	r4, r4, r3
 800f40a:	f7ff ffe7 	bl	800f3dc <__malloc_lock>
 800f40e:	4a1e      	ldr	r2, [pc, #120]	; (800f488 <_free_r+0x94>)
 800f410:	9801      	ldr	r0, [sp, #4]
 800f412:	6813      	ldr	r3, [r2, #0]
 800f414:	b933      	cbnz	r3, 800f424 <_free_r+0x30>
 800f416:	6063      	str	r3, [r4, #4]
 800f418:	6014      	str	r4, [r2, #0]
 800f41a:	b003      	add	sp, #12
 800f41c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f420:	f7ff bfe2 	b.w	800f3e8 <__malloc_unlock>
 800f424:	42a3      	cmp	r3, r4
 800f426:	d908      	bls.n	800f43a <_free_r+0x46>
 800f428:	6825      	ldr	r5, [r4, #0]
 800f42a:	1961      	adds	r1, r4, r5
 800f42c:	428b      	cmp	r3, r1
 800f42e:	bf01      	itttt	eq
 800f430:	6819      	ldreq	r1, [r3, #0]
 800f432:	685b      	ldreq	r3, [r3, #4]
 800f434:	1949      	addeq	r1, r1, r5
 800f436:	6021      	streq	r1, [r4, #0]
 800f438:	e7ed      	b.n	800f416 <_free_r+0x22>
 800f43a:	461a      	mov	r2, r3
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	b10b      	cbz	r3, 800f444 <_free_r+0x50>
 800f440:	42a3      	cmp	r3, r4
 800f442:	d9fa      	bls.n	800f43a <_free_r+0x46>
 800f444:	6811      	ldr	r1, [r2, #0]
 800f446:	1855      	adds	r5, r2, r1
 800f448:	42a5      	cmp	r5, r4
 800f44a:	d10b      	bne.n	800f464 <_free_r+0x70>
 800f44c:	6824      	ldr	r4, [r4, #0]
 800f44e:	4421      	add	r1, r4
 800f450:	1854      	adds	r4, r2, r1
 800f452:	42a3      	cmp	r3, r4
 800f454:	6011      	str	r1, [r2, #0]
 800f456:	d1e0      	bne.n	800f41a <_free_r+0x26>
 800f458:	681c      	ldr	r4, [r3, #0]
 800f45a:	685b      	ldr	r3, [r3, #4]
 800f45c:	6053      	str	r3, [r2, #4]
 800f45e:	4421      	add	r1, r4
 800f460:	6011      	str	r1, [r2, #0]
 800f462:	e7da      	b.n	800f41a <_free_r+0x26>
 800f464:	d902      	bls.n	800f46c <_free_r+0x78>
 800f466:	230c      	movs	r3, #12
 800f468:	6003      	str	r3, [r0, #0]
 800f46a:	e7d6      	b.n	800f41a <_free_r+0x26>
 800f46c:	6825      	ldr	r5, [r4, #0]
 800f46e:	1961      	adds	r1, r4, r5
 800f470:	428b      	cmp	r3, r1
 800f472:	bf04      	itt	eq
 800f474:	6819      	ldreq	r1, [r3, #0]
 800f476:	685b      	ldreq	r3, [r3, #4]
 800f478:	6063      	str	r3, [r4, #4]
 800f47a:	bf04      	itt	eq
 800f47c:	1949      	addeq	r1, r1, r5
 800f47e:	6021      	streq	r1, [r4, #0]
 800f480:	6054      	str	r4, [r2, #4]
 800f482:	e7ca      	b.n	800f41a <_free_r+0x26>
 800f484:	b003      	add	sp, #12
 800f486:	bd30      	pop	{r4, r5, pc}
 800f488:	20010a74 	.word	0x20010a74

0800f48c <__ssputs_r>:
 800f48c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f490:	688e      	ldr	r6, [r1, #8]
 800f492:	429e      	cmp	r6, r3
 800f494:	4682      	mov	sl, r0
 800f496:	460c      	mov	r4, r1
 800f498:	4690      	mov	r8, r2
 800f49a:	461f      	mov	r7, r3
 800f49c:	d838      	bhi.n	800f510 <__ssputs_r+0x84>
 800f49e:	898a      	ldrh	r2, [r1, #12]
 800f4a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4a4:	d032      	beq.n	800f50c <__ssputs_r+0x80>
 800f4a6:	6825      	ldr	r5, [r4, #0]
 800f4a8:	6909      	ldr	r1, [r1, #16]
 800f4aa:	eba5 0901 	sub.w	r9, r5, r1
 800f4ae:	6965      	ldr	r5, [r4, #20]
 800f4b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4b8:	3301      	adds	r3, #1
 800f4ba:	444b      	add	r3, r9
 800f4bc:	106d      	asrs	r5, r5, #1
 800f4be:	429d      	cmp	r5, r3
 800f4c0:	bf38      	it	cc
 800f4c2:	461d      	movcc	r5, r3
 800f4c4:	0553      	lsls	r3, r2, #21
 800f4c6:	d531      	bpl.n	800f52c <__ssputs_r+0xa0>
 800f4c8:	4629      	mov	r1, r5
 800f4ca:	f7ff fc9f 	bl	800ee0c <_malloc_r>
 800f4ce:	4606      	mov	r6, r0
 800f4d0:	b950      	cbnz	r0, 800f4e8 <__ssputs_r+0x5c>
 800f4d2:	230c      	movs	r3, #12
 800f4d4:	f8ca 3000 	str.w	r3, [sl]
 800f4d8:	89a3      	ldrh	r3, [r4, #12]
 800f4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4de:	81a3      	strh	r3, [r4, #12]
 800f4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e8:	6921      	ldr	r1, [r4, #16]
 800f4ea:	464a      	mov	r2, r9
 800f4ec:	f7ff fc3d 	bl	800ed6a <memcpy>
 800f4f0:	89a3      	ldrh	r3, [r4, #12]
 800f4f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f4f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f4fa:	81a3      	strh	r3, [r4, #12]
 800f4fc:	6126      	str	r6, [r4, #16]
 800f4fe:	6165      	str	r5, [r4, #20]
 800f500:	444e      	add	r6, r9
 800f502:	eba5 0509 	sub.w	r5, r5, r9
 800f506:	6026      	str	r6, [r4, #0]
 800f508:	60a5      	str	r5, [r4, #8]
 800f50a:	463e      	mov	r6, r7
 800f50c:	42be      	cmp	r6, r7
 800f50e:	d900      	bls.n	800f512 <__ssputs_r+0x86>
 800f510:	463e      	mov	r6, r7
 800f512:	6820      	ldr	r0, [r4, #0]
 800f514:	4632      	mov	r2, r6
 800f516:	4641      	mov	r1, r8
 800f518:	f7ff fc35 	bl	800ed86 <memmove>
 800f51c:	68a3      	ldr	r3, [r4, #8]
 800f51e:	1b9b      	subs	r3, r3, r6
 800f520:	60a3      	str	r3, [r4, #8]
 800f522:	6823      	ldr	r3, [r4, #0]
 800f524:	4433      	add	r3, r6
 800f526:	6023      	str	r3, [r4, #0]
 800f528:	2000      	movs	r0, #0
 800f52a:	e7db      	b.n	800f4e4 <__ssputs_r+0x58>
 800f52c:	462a      	mov	r2, r5
 800f52e:	f000 fd35 	bl	800ff9c <_realloc_r>
 800f532:	4606      	mov	r6, r0
 800f534:	2800      	cmp	r0, #0
 800f536:	d1e1      	bne.n	800f4fc <__ssputs_r+0x70>
 800f538:	6921      	ldr	r1, [r4, #16]
 800f53a:	4650      	mov	r0, sl
 800f53c:	f7ff ff5a 	bl	800f3f4 <_free_r>
 800f540:	e7c7      	b.n	800f4d2 <__ssputs_r+0x46>
	...

0800f544 <_svfiprintf_r>:
 800f544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f548:	4698      	mov	r8, r3
 800f54a:	898b      	ldrh	r3, [r1, #12]
 800f54c:	061b      	lsls	r3, r3, #24
 800f54e:	b09d      	sub	sp, #116	; 0x74
 800f550:	4607      	mov	r7, r0
 800f552:	460d      	mov	r5, r1
 800f554:	4614      	mov	r4, r2
 800f556:	d50e      	bpl.n	800f576 <_svfiprintf_r+0x32>
 800f558:	690b      	ldr	r3, [r1, #16]
 800f55a:	b963      	cbnz	r3, 800f576 <_svfiprintf_r+0x32>
 800f55c:	2140      	movs	r1, #64	; 0x40
 800f55e:	f7ff fc55 	bl	800ee0c <_malloc_r>
 800f562:	6028      	str	r0, [r5, #0]
 800f564:	6128      	str	r0, [r5, #16]
 800f566:	b920      	cbnz	r0, 800f572 <_svfiprintf_r+0x2e>
 800f568:	230c      	movs	r3, #12
 800f56a:	603b      	str	r3, [r7, #0]
 800f56c:	f04f 30ff 	mov.w	r0, #4294967295
 800f570:	e0d1      	b.n	800f716 <_svfiprintf_r+0x1d2>
 800f572:	2340      	movs	r3, #64	; 0x40
 800f574:	616b      	str	r3, [r5, #20]
 800f576:	2300      	movs	r3, #0
 800f578:	9309      	str	r3, [sp, #36]	; 0x24
 800f57a:	2320      	movs	r3, #32
 800f57c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f580:	f8cd 800c 	str.w	r8, [sp, #12]
 800f584:	2330      	movs	r3, #48	; 0x30
 800f586:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f730 <_svfiprintf_r+0x1ec>
 800f58a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f58e:	f04f 0901 	mov.w	r9, #1
 800f592:	4623      	mov	r3, r4
 800f594:	469a      	mov	sl, r3
 800f596:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f59a:	b10a      	cbz	r2, 800f5a0 <_svfiprintf_r+0x5c>
 800f59c:	2a25      	cmp	r2, #37	; 0x25
 800f59e:	d1f9      	bne.n	800f594 <_svfiprintf_r+0x50>
 800f5a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f5a4:	d00b      	beq.n	800f5be <_svfiprintf_r+0x7a>
 800f5a6:	465b      	mov	r3, fp
 800f5a8:	4622      	mov	r2, r4
 800f5aa:	4629      	mov	r1, r5
 800f5ac:	4638      	mov	r0, r7
 800f5ae:	f7ff ff6d 	bl	800f48c <__ssputs_r>
 800f5b2:	3001      	adds	r0, #1
 800f5b4:	f000 80aa 	beq.w	800f70c <_svfiprintf_r+0x1c8>
 800f5b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5ba:	445a      	add	r2, fp
 800f5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f5be:	f89a 3000 	ldrb.w	r3, [sl]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f000 80a2 	beq.w	800f70c <_svfiprintf_r+0x1c8>
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f5ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5d2:	f10a 0a01 	add.w	sl, sl, #1
 800f5d6:	9304      	str	r3, [sp, #16]
 800f5d8:	9307      	str	r3, [sp, #28]
 800f5da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f5de:	931a      	str	r3, [sp, #104]	; 0x68
 800f5e0:	4654      	mov	r4, sl
 800f5e2:	2205      	movs	r2, #5
 800f5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5e8:	4851      	ldr	r0, [pc, #324]	; (800f730 <_svfiprintf_r+0x1ec>)
 800f5ea:	f7f0 fe01 	bl	80001f0 <memchr>
 800f5ee:	9a04      	ldr	r2, [sp, #16]
 800f5f0:	b9d8      	cbnz	r0, 800f62a <_svfiprintf_r+0xe6>
 800f5f2:	06d0      	lsls	r0, r2, #27
 800f5f4:	bf44      	itt	mi
 800f5f6:	2320      	movmi	r3, #32
 800f5f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f5fc:	0711      	lsls	r1, r2, #28
 800f5fe:	bf44      	itt	mi
 800f600:	232b      	movmi	r3, #43	; 0x2b
 800f602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f606:	f89a 3000 	ldrb.w	r3, [sl]
 800f60a:	2b2a      	cmp	r3, #42	; 0x2a
 800f60c:	d015      	beq.n	800f63a <_svfiprintf_r+0xf6>
 800f60e:	9a07      	ldr	r2, [sp, #28]
 800f610:	4654      	mov	r4, sl
 800f612:	2000      	movs	r0, #0
 800f614:	f04f 0c0a 	mov.w	ip, #10
 800f618:	4621      	mov	r1, r4
 800f61a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f61e:	3b30      	subs	r3, #48	; 0x30
 800f620:	2b09      	cmp	r3, #9
 800f622:	d94e      	bls.n	800f6c2 <_svfiprintf_r+0x17e>
 800f624:	b1b0      	cbz	r0, 800f654 <_svfiprintf_r+0x110>
 800f626:	9207      	str	r2, [sp, #28]
 800f628:	e014      	b.n	800f654 <_svfiprintf_r+0x110>
 800f62a:	eba0 0308 	sub.w	r3, r0, r8
 800f62e:	fa09 f303 	lsl.w	r3, r9, r3
 800f632:	4313      	orrs	r3, r2
 800f634:	9304      	str	r3, [sp, #16]
 800f636:	46a2      	mov	sl, r4
 800f638:	e7d2      	b.n	800f5e0 <_svfiprintf_r+0x9c>
 800f63a:	9b03      	ldr	r3, [sp, #12]
 800f63c:	1d19      	adds	r1, r3, #4
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	9103      	str	r1, [sp, #12]
 800f642:	2b00      	cmp	r3, #0
 800f644:	bfbb      	ittet	lt
 800f646:	425b      	neglt	r3, r3
 800f648:	f042 0202 	orrlt.w	r2, r2, #2
 800f64c:	9307      	strge	r3, [sp, #28]
 800f64e:	9307      	strlt	r3, [sp, #28]
 800f650:	bfb8      	it	lt
 800f652:	9204      	strlt	r2, [sp, #16]
 800f654:	7823      	ldrb	r3, [r4, #0]
 800f656:	2b2e      	cmp	r3, #46	; 0x2e
 800f658:	d10c      	bne.n	800f674 <_svfiprintf_r+0x130>
 800f65a:	7863      	ldrb	r3, [r4, #1]
 800f65c:	2b2a      	cmp	r3, #42	; 0x2a
 800f65e:	d135      	bne.n	800f6cc <_svfiprintf_r+0x188>
 800f660:	9b03      	ldr	r3, [sp, #12]
 800f662:	1d1a      	adds	r2, r3, #4
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	9203      	str	r2, [sp, #12]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	bfb8      	it	lt
 800f66c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f670:	3402      	adds	r4, #2
 800f672:	9305      	str	r3, [sp, #20]
 800f674:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f740 <_svfiprintf_r+0x1fc>
 800f678:	7821      	ldrb	r1, [r4, #0]
 800f67a:	2203      	movs	r2, #3
 800f67c:	4650      	mov	r0, sl
 800f67e:	f7f0 fdb7 	bl	80001f0 <memchr>
 800f682:	b140      	cbz	r0, 800f696 <_svfiprintf_r+0x152>
 800f684:	2340      	movs	r3, #64	; 0x40
 800f686:	eba0 000a 	sub.w	r0, r0, sl
 800f68a:	fa03 f000 	lsl.w	r0, r3, r0
 800f68e:	9b04      	ldr	r3, [sp, #16]
 800f690:	4303      	orrs	r3, r0
 800f692:	3401      	adds	r4, #1
 800f694:	9304      	str	r3, [sp, #16]
 800f696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69a:	4826      	ldr	r0, [pc, #152]	; (800f734 <_svfiprintf_r+0x1f0>)
 800f69c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6a0:	2206      	movs	r2, #6
 800f6a2:	f7f0 fda5 	bl	80001f0 <memchr>
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d038      	beq.n	800f71c <_svfiprintf_r+0x1d8>
 800f6aa:	4b23      	ldr	r3, [pc, #140]	; (800f738 <_svfiprintf_r+0x1f4>)
 800f6ac:	bb1b      	cbnz	r3, 800f6f6 <_svfiprintf_r+0x1b2>
 800f6ae:	9b03      	ldr	r3, [sp, #12]
 800f6b0:	3307      	adds	r3, #7
 800f6b2:	f023 0307 	bic.w	r3, r3, #7
 800f6b6:	3308      	adds	r3, #8
 800f6b8:	9303      	str	r3, [sp, #12]
 800f6ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6bc:	4433      	add	r3, r6
 800f6be:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c0:	e767      	b.n	800f592 <_svfiprintf_r+0x4e>
 800f6c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	2001      	movs	r0, #1
 800f6ca:	e7a5      	b.n	800f618 <_svfiprintf_r+0xd4>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	3401      	adds	r4, #1
 800f6d0:	9305      	str	r3, [sp, #20]
 800f6d2:	4619      	mov	r1, r3
 800f6d4:	f04f 0c0a 	mov.w	ip, #10
 800f6d8:	4620      	mov	r0, r4
 800f6da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6de:	3a30      	subs	r2, #48	; 0x30
 800f6e0:	2a09      	cmp	r2, #9
 800f6e2:	d903      	bls.n	800f6ec <_svfiprintf_r+0x1a8>
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d0c5      	beq.n	800f674 <_svfiprintf_r+0x130>
 800f6e8:	9105      	str	r1, [sp, #20]
 800f6ea:	e7c3      	b.n	800f674 <_svfiprintf_r+0x130>
 800f6ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6f0:	4604      	mov	r4, r0
 800f6f2:	2301      	movs	r3, #1
 800f6f4:	e7f0      	b.n	800f6d8 <_svfiprintf_r+0x194>
 800f6f6:	ab03      	add	r3, sp, #12
 800f6f8:	9300      	str	r3, [sp, #0]
 800f6fa:	462a      	mov	r2, r5
 800f6fc:	4b0f      	ldr	r3, [pc, #60]	; (800f73c <_svfiprintf_r+0x1f8>)
 800f6fe:	a904      	add	r1, sp, #16
 800f700:	4638      	mov	r0, r7
 800f702:	f3af 8000 	nop.w
 800f706:	1c42      	adds	r2, r0, #1
 800f708:	4606      	mov	r6, r0
 800f70a:	d1d6      	bne.n	800f6ba <_svfiprintf_r+0x176>
 800f70c:	89ab      	ldrh	r3, [r5, #12]
 800f70e:	065b      	lsls	r3, r3, #25
 800f710:	f53f af2c 	bmi.w	800f56c <_svfiprintf_r+0x28>
 800f714:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f716:	b01d      	add	sp, #116	; 0x74
 800f718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71c:	ab03      	add	r3, sp, #12
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	462a      	mov	r2, r5
 800f722:	4b06      	ldr	r3, [pc, #24]	; (800f73c <_svfiprintf_r+0x1f8>)
 800f724:	a904      	add	r1, sp, #16
 800f726:	4638      	mov	r0, r7
 800f728:	f000 f9d4 	bl	800fad4 <_printf_i>
 800f72c:	e7eb      	b.n	800f706 <_svfiprintf_r+0x1c2>
 800f72e:	bf00      	nop
 800f730:	08012b06 	.word	0x08012b06
 800f734:	08012b10 	.word	0x08012b10
 800f738:	00000000 	.word	0x00000000
 800f73c:	0800f48d 	.word	0x0800f48d
 800f740:	08012b0c 	.word	0x08012b0c

0800f744 <__sfputc_r>:
 800f744:	6893      	ldr	r3, [r2, #8]
 800f746:	3b01      	subs	r3, #1
 800f748:	2b00      	cmp	r3, #0
 800f74a:	b410      	push	{r4}
 800f74c:	6093      	str	r3, [r2, #8]
 800f74e:	da08      	bge.n	800f762 <__sfputc_r+0x1e>
 800f750:	6994      	ldr	r4, [r2, #24]
 800f752:	42a3      	cmp	r3, r4
 800f754:	db01      	blt.n	800f75a <__sfputc_r+0x16>
 800f756:	290a      	cmp	r1, #10
 800f758:	d103      	bne.n	800f762 <__sfputc_r+0x1e>
 800f75a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f75e:	f000 baf1 	b.w	800fd44 <__swbuf_r>
 800f762:	6813      	ldr	r3, [r2, #0]
 800f764:	1c58      	adds	r0, r3, #1
 800f766:	6010      	str	r0, [r2, #0]
 800f768:	7019      	strb	r1, [r3, #0]
 800f76a:	4608      	mov	r0, r1
 800f76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f770:	4770      	bx	lr

0800f772 <__sfputs_r>:
 800f772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f774:	4606      	mov	r6, r0
 800f776:	460f      	mov	r7, r1
 800f778:	4614      	mov	r4, r2
 800f77a:	18d5      	adds	r5, r2, r3
 800f77c:	42ac      	cmp	r4, r5
 800f77e:	d101      	bne.n	800f784 <__sfputs_r+0x12>
 800f780:	2000      	movs	r0, #0
 800f782:	e007      	b.n	800f794 <__sfputs_r+0x22>
 800f784:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f788:	463a      	mov	r2, r7
 800f78a:	4630      	mov	r0, r6
 800f78c:	f7ff ffda 	bl	800f744 <__sfputc_r>
 800f790:	1c43      	adds	r3, r0, #1
 800f792:	d1f3      	bne.n	800f77c <__sfputs_r+0xa>
 800f794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f798 <_vfiprintf_r>:
 800f798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f79c:	460d      	mov	r5, r1
 800f79e:	b09d      	sub	sp, #116	; 0x74
 800f7a0:	4614      	mov	r4, r2
 800f7a2:	4698      	mov	r8, r3
 800f7a4:	4606      	mov	r6, r0
 800f7a6:	b118      	cbz	r0, 800f7b0 <_vfiprintf_r+0x18>
 800f7a8:	6983      	ldr	r3, [r0, #24]
 800f7aa:	b90b      	cbnz	r3, 800f7b0 <_vfiprintf_r+0x18>
 800f7ac:	f7ff fa08 	bl	800ebc0 <__sinit>
 800f7b0:	4b89      	ldr	r3, [pc, #548]	; (800f9d8 <_vfiprintf_r+0x240>)
 800f7b2:	429d      	cmp	r5, r3
 800f7b4:	d11b      	bne.n	800f7ee <_vfiprintf_r+0x56>
 800f7b6:	6875      	ldr	r5, [r6, #4]
 800f7b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7ba:	07d9      	lsls	r1, r3, #31
 800f7bc:	d405      	bmi.n	800f7ca <_vfiprintf_r+0x32>
 800f7be:	89ab      	ldrh	r3, [r5, #12]
 800f7c0:	059a      	lsls	r2, r3, #22
 800f7c2:	d402      	bmi.n	800f7ca <_vfiprintf_r+0x32>
 800f7c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7c6:	f7ff fabe 	bl	800ed46 <__retarget_lock_acquire_recursive>
 800f7ca:	89ab      	ldrh	r3, [r5, #12]
 800f7cc:	071b      	lsls	r3, r3, #28
 800f7ce:	d501      	bpl.n	800f7d4 <_vfiprintf_r+0x3c>
 800f7d0:	692b      	ldr	r3, [r5, #16]
 800f7d2:	b9eb      	cbnz	r3, 800f810 <_vfiprintf_r+0x78>
 800f7d4:	4629      	mov	r1, r5
 800f7d6:	4630      	mov	r0, r6
 800f7d8:	f000 fb06 	bl	800fde8 <__swsetup_r>
 800f7dc:	b1c0      	cbz	r0, 800f810 <_vfiprintf_r+0x78>
 800f7de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7e0:	07dc      	lsls	r4, r3, #31
 800f7e2:	d50e      	bpl.n	800f802 <_vfiprintf_r+0x6a>
 800f7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7e8:	b01d      	add	sp, #116	; 0x74
 800f7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ee:	4b7b      	ldr	r3, [pc, #492]	; (800f9dc <_vfiprintf_r+0x244>)
 800f7f0:	429d      	cmp	r5, r3
 800f7f2:	d101      	bne.n	800f7f8 <_vfiprintf_r+0x60>
 800f7f4:	68b5      	ldr	r5, [r6, #8]
 800f7f6:	e7df      	b.n	800f7b8 <_vfiprintf_r+0x20>
 800f7f8:	4b79      	ldr	r3, [pc, #484]	; (800f9e0 <_vfiprintf_r+0x248>)
 800f7fa:	429d      	cmp	r5, r3
 800f7fc:	bf08      	it	eq
 800f7fe:	68f5      	ldreq	r5, [r6, #12]
 800f800:	e7da      	b.n	800f7b8 <_vfiprintf_r+0x20>
 800f802:	89ab      	ldrh	r3, [r5, #12]
 800f804:	0598      	lsls	r0, r3, #22
 800f806:	d4ed      	bmi.n	800f7e4 <_vfiprintf_r+0x4c>
 800f808:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f80a:	f7ff fa9d 	bl	800ed48 <__retarget_lock_release_recursive>
 800f80e:	e7e9      	b.n	800f7e4 <_vfiprintf_r+0x4c>
 800f810:	2300      	movs	r3, #0
 800f812:	9309      	str	r3, [sp, #36]	; 0x24
 800f814:	2320      	movs	r3, #32
 800f816:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f81a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f81e:	2330      	movs	r3, #48	; 0x30
 800f820:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f9e4 <_vfiprintf_r+0x24c>
 800f824:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f828:	f04f 0901 	mov.w	r9, #1
 800f82c:	4623      	mov	r3, r4
 800f82e:	469a      	mov	sl, r3
 800f830:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f834:	b10a      	cbz	r2, 800f83a <_vfiprintf_r+0xa2>
 800f836:	2a25      	cmp	r2, #37	; 0x25
 800f838:	d1f9      	bne.n	800f82e <_vfiprintf_r+0x96>
 800f83a:	ebba 0b04 	subs.w	fp, sl, r4
 800f83e:	d00b      	beq.n	800f858 <_vfiprintf_r+0xc0>
 800f840:	465b      	mov	r3, fp
 800f842:	4622      	mov	r2, r4
 800f844:	4629      	mov	r1, r5
 800f846:	4630      	mov	r0, r6
 800f848:	f7ff ff93 	bl	800f772 <__sfputs_r>
 800f84c:	3001      	adds	r0, #1
 800f84e:	f000 80aa 	beq.w	800f9a6 <_vfiprintf_r+0x20e>
 800f852:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f854:	445a      	add	r2, fp
 800f856:	9209      	str	r2, [sp, #36]	; 0x24
 800f858:	f89a 3000 	ldrb.w	r3, [sl]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f000 80a2 	beq.w	800f9a6 <_vfiprintf_r+0x20e>
 800f862:	2300      	movs	r3, #0
 800f864:	f04f 32ff 	mov.w	r2, #4294967295
 800f868:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f86c:	f10a 0a01 	add.w	sl, sl, #1
 800f870:	9304      	str	r3, [sp, #16]
 800f872:	9307      	str	r3, [sp, #28]
 800f874:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f878:	931a      	str	r3, [sp, #104]	; 0x68
 800f87a:	4654      	mov	r4, sl
 800f87c:	2205      	movs	r2, #5
 800f87e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f882:	4858      	ldr	r0, [pc, #352]	; (800f9e4 <_vfiprintf_r+0x24c>)
 800f884:	f7f0 fcb4 	bl	80001f0 <memchr>
 800f888:	9a04      	ldr	r2, [sp, #16]
 800f88a:	b9d8      	cbnz	r0, 800f8c4 <_vfiprintf_r+0x12c>
 800f88c:	06d1      	lsls	r1, r2, #27
 800f88e:	bf44      	itt	mi
 800f890:	2320      	movmi	r3, #32
 800f892:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f896:	0713      	lsls	r3, r2, #28
 800f898:	bf44      	itt	mi
 800f89a:	232b      	movmi	r3, #43	; 0x2b
 800f89c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8a0:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a4:	2b2a      	cmp	r3, #42	; 0x2a
 800f8a6:	d015      	beq.n	800f8d4 <_vfiprintf_r+0x13c>
 800f8a8:	9a07      	ldr	r2, [sp, #28]
 800f8aa:	4654      	mov	r4, sl
 800f8ac:	2000      	movs	r0, #0
 800f8ae:	f04f 0c0a 	mov.w	ip, #10
 800f8b2:	4621      	mov	r1, r4
 800f8b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8b8:	3b30      	subs	r3, #48	; 0x30
 800f8ba:	2b09      	cmp	r3, #9
 800f8bc:	d94e      	bls.n	800f95c <_vfiprintf_r+0x1c4>
 800f8be:	b1b0      	cbz	r0, 800f8ee <_vfiprintf_r+0x156>
 800f8c0:	9207      	str	r2, [sp, #28]
 800f8c2:	e014      	b.n	800f8ee <_vfiprintf_r+0x156>
 800f8c4:	eba0 0308 	sub.w	r3, r0, r8
 800f8c8:	fa09 f303 	lsl.w	r3, r9, r3
 800f8cc:	4313      	orrs	r3, r2
 800f8ce:	9304      	str	r3, [sp, #16]
 800f8d0:	46a2      	mov	sl, r4
 800f8d2:	e7d2      	b.n	800f87a <_vfiprintf_r+0xe2>
 800f8d4:	9b03      	ldr	r3, [sp, #12]
 800f8d6:	1d19      	adds	r1, r3, #4
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	9103      	str	r1, [sp, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	bfbb      	ittet	lt
 800f8e0:	425b      	neglt	r3, r3
 800f8e2:	f042 0202 	orrlt.w	r2, r2, #2
 800f8e6:	9307      	strge	r3, [sp, #28]
 800f8e8:	9307      	strlt	r3, [sp, #28]
 800f8ea:	bfb8      	it	lt
 800f8ec:	9204      	strlt	r2, [sp, #16]
 800f8ee:	7823      	ldrb	r3, [r4, #0]
 800f8f0:	2b2e      	cmp	r3, #46	; 0x2e
 800f8f2:	d10c      	bne.n	800f90e <_vfiprintf_r+0x176>
 800f8f4:	7863      	ldrb	r3, [r4, #1]
 800f8f6:	2b2a      	cmp	r3, #42	; 0x2a
 800f8f8:	d135      	bne.n	800f966 <_vfiprintf_r+0x1ce>
 800f8fa:	9b03      	ldr	r3, [sp, #12]
 800f8fc:	1d1a      	adds	r2, r3, #4
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	9203      	str	r2, [sp, #12]
 800f902:	2b00      	cmp	r3, #0
 800f904:	bfb8      	it	lt
 800f906:	f04f 33ff 	movlt.w	r3, #4294967295
 800f90a:	3402      	adds	r4, #2
 800f90c:	9305      	str	r3, [sp, #20]
 800f90e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f9f4 <_vfiprintf_r+0x25c>
 800f912:	7821      	ldrb	r1, [r4, #0]
 800f914:	2203      	movs	r2, #3
 800f916:	4650      	mov	r0, sl
 800f918:	f7f0 fc6a 	bl	80001f0 <memchr>
 800f91c:	b140      	cbz	r0, 800f930 <_vfiprintf_r+0x198>
 800f91e:	2340      	movs	r3, #64	; 0x40
 800f920:	eba0 000a 	sub.w	r0, r0, sl
 800f924:	fa03 f000 	lsl.w	r0, r3, r0
 800f928:	9b04      	ldr	r3, [sp, #16]
 800f92a:	4303      	orrs	r3, r0
 800f92c:	3401      	adds	r4, #1
 800f92e:	9304      	str	r3, [sp, #16]
 800f930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f934:	482c      	ldr	r0, [pc, #176]	; (800f9e8 <_vfiprintf_r+0x250>)
 800f936:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f93a:	2206      	movs	r2, #6
 800f93c:	f7f0 fc58 	bl	80001f0 <memchr>
 800f940:	2800      	cmp	r0, #0
 800f942:	d03f      	beq.n	800f9c4 <_vfiprintf_r+0x22c>
 800f944:	4b29      	ldr	r3, [pc, #164]	; (800f9ec <_vfiprintf_r+0x254>)
 800f946:	bb1b      	cbnz	r3, 800f990 <_vfiprintf_r+0x1f8>
 800f948:	9b03      	ldr	r3, [sp, #12]
 800f94a:	3307      	adds	r3, #7
 800f94c:	f023 0307 	bic.w	r3, r3, #7
 800f950:	3308      	adds	r3, #8
 800f952:	9303      	str	r3, [sp, #12]
 800f954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f956:	443b      	add	r3, r7
 800f958:	9309      	str	r3, [sp, #36]	; 0x24
 800f95a:	e767      	b.n	800f82c <_vfiprintf_r+0x94>
 800f95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800f960:	460c      	mov	r4, r1
 800f962:	2001      	movs	r0, #1
 800f964:	e7a5      	b.n	800f8b2 <_vfiprintf_r+0x11a>
 800f966:	2300      	movs	r3, #0
 800f968:	3401      	adds	r4, #1
 800f96a:	9305      	str	r3, [sp, #20]
 800f96c:	4619      	mov	r1, r3
 800f96e:	f04f 0c0a 	mov.w	ip, #10
 800f972:	4620      	mov	r0, r4
 800f974:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f978:	3a30      	subs	r2, #48	; 0x30
 800f97a:	2a09      	cmp	r2, #9
 800f97c:	d903      	bls.n	800f986 <_vfiprintf_r+0x1ee>
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d0c5      	beq.n	800f90e <_vfiprintf_r+0x176>
 800f982:	9105      	str	r1, [sp, #20]
 800f984:	e7c3      	b.n	800f90e <_vfiprintf_r+0x176>
 800f986:	fb0c 2101 	mla	r1, ip, r1, r2
 800f98a:	4604      	mov	r4, r0
 800f98c:	2301      	movs	r3, #1
 800f98e:	e7f0      	b.n	800f972 <_vfiprintf_r+0x1da>
 800f990:	ab03      	add	r3, sp, #12
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	462a      	mov	r2, r5
 800f996:	4b16      	ldr	r3, [pc, #88]	; (800f9f0 <_vfiprintf_r+0x258>)
 800f998:	a904      	add	r1, sp, #16
 800f99a:	4630      	mov	r0, r6
 800f99c:	f3af 8000 	nop.w
 800f9a0:	4607      	mov	r7, r0
 800f9a2:	1c78      	adds	r0, r7, #1
 800f9a4:	d1d6      	bne.n	800f954 <_vfiprintf_r+0x1bc>
 800f9a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9a8:	07d9      	lsls	r1, r3, #31
 800f9aa:	d405      	bmi.n	800f9b8 <_vfiprintf_r+0x220>
 800f9ac:	89ab      	ldrh	r3, [r5, #12]
 800f9ae:	059a      	lsls	r2, r3, #22
 800f9b0:	d402      	bmi.n	800f9b8 <_vfiprintf_r+0x220>
 800f9b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9b4:	f7ff f9c8 	bl	800ed48 <__retarget_lock_release_recursive>
 800f9b8:	89ab      	ldrh	r3, [r5, #12]
 800f9ba:	065b      	lsls	r3, r3, #25
 800f9bc:	f53f af12 	bmi.w	800f7e4 <_vfiprintf_r+0x4c>
 800f9c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f9c2:	e711      	b.n	800f7e8 <_vfiprintf_r+0x50>
 800f9c4:	ab03      	add	r3, sp, #12
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	462a      	mov	r2, r5
 800f9ca:	4b09      	ldr	r3, [pc, #36]	; (800f9f0 <_vfiprintf_r+0x258>)
 800f9cc:	a904      	add	r1, sp, #16
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f000 f880 	bl	800fad4 <_printf_i>
 800f9d4:	e7e4      	b.n	800f9a0 <_vfiprintf_r+0x208>
 800f9d6:	bf00      	nop
 800f9d8:	08012a14 	.word	0x08012a14
 800f9dc:	08012a34 	.word	0x08012a34
 800f9e0:	080129f4 	.word	0x080129f4
 800f9e4:	08012b06 	.word	0x08012b06
 800f9e8:	08012b10 	.word	0x08012b10
 800f9ec:	00000000 	.word	0x00000000
 800f9f0:	0800f773 	.word	0x0800f773
 800f9f4:	08012b0c 	.word	0x08012b0c

0800f9f8 <_printf_common>:
 800f9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9fc:	4616      	mov	r6, r2
 800f9fe:	4699      	mov	r9, r3
 800fa00:	688a      	ldr	r2, [r1, #8]
 800fa02:	690b      	ldr	r3, [r1, #16]
 800fa04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	bfb8      	it	lt
 800fa0c:	4613      	movlt	r3, r2
 800fa0e:	6033      	str	r3, [r6, #0]
 800fa10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa14:	4607      	mov	r7, r0
 800fa16:	460c      	mov	r4, r1
 800fa18:	b10a      	cbz	r2, 800fa1e <_printf_common+0x26>
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	6033      	str	r3, [r6, #0]
 800fa1e:	6823      	ldr	r3, [r4, #0]
 800fa20:	0699      	lsls	r1, r3, #26
 800fa22:	bf42      	ittt	mi
 800fa24:	6833      	ldrmi	r3, [r6, #0]
 800fa26:	3302      	addmi	r3, #2
 800fa28:	6033      	strmi	r3, [r6, #0]
 800fa2a:	6825      	ldr	r5, [r4, #0]
 800fa2c:	f015 0506 	ands.w	r5, r5, #6
 800fa30:	d106      	bne.n	800fa40 <_printf_common+0x48>
 800fa32:	f104 0a19 	add.w	sl, r4, #25
 800fa36:	68e3      	ldr	r3, [r4, #12]
 800fa38:	6832      	ldr	r2, [r6, #0]
 800fa3a:	1a9b      	subs	r3, r3, r2
 800fa3c:	42ab      	cmp	r3, r5
 800fa3e:	dc26      	bgt.n	800fa8e <_printf_common+0x96>
 800fa40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa44:	1e13      	subs	r3, r2, #0
 800fa46:	6822      	ldr	r2, [r4, #0]
 800fa48:	bf18      	it	ne
 800fa4a:	2301      	movne	r3, #1
 800fa4c:	0692      	lsls	r2, r2, #26
 800fa4e:	d42b      	bmi.n	800faa8 <_printf_common+0xb0>
 800fa50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa54:	4649      	mov	r1, r9
 800fa56:	4638      	mov	r0, r7
 800fa58:	47c0      	blx	r8
 800fa5a:	3001      	adds	r0, #1
 800fa5c:	d01e      	beq.n	800fa9c <_printf_common+0xa4>
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	68e5      	ldr	r5, [r4, #12]
 800fa62:	6832      	ldr	r2, [r6, #0]
 800fa64:	f003 0306 	and.w	r3, r3, #6
 800fa68:	2b04      	cmp	r3, #4
 800fa6a:	bf08      	it	eq
 800fa6c:	1aad      	subeq	r5, r5, r2
 800fa6e:	68a3      	ldr	r3, [r4, #8]
 800fa70:	6922      	ldr	r2, [r4, #16]
 800fa72:	bf0c      	ite	eq
 800fa74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa78:	2500      	movne	r5, #0
 800fa7a:	4293      	cmp	r3, r2
 800fa7c:	bfc4      	itt	gt
 800fa7e:	1a9b      	subgt	r3, r3, r2
 800fa80:	18ed      	addgt	r5, r5, r3
 800fa82:	2600      	movs	r6, #0
 800fa84:	341a      	adds	r4, #26
 800fa86:	42b5      	cmp	r5, r6
 800fa88:	d11a      	bne.n	800fac0 <_printf_common+0xc8>
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	e008      	b.n	800faa0 <_printf_common+0xa8>
 800fa8e:	2301      	movs	r3, #1
 800fa90:	4652      	mov	r2, sl
 800fa92:	4649      	mov	r1, r9
 800fa94:	4638      	mov	r0, r7
 800fa96:	47c0      	blx	r8
 800fa98:	3001      	adds	r0, #1
 800fa9a:	d103      	bne.n	800faa4 <_printf_common+0xac>
 800fa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800faa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800faa4:	3501      	adds	r5, #1
 800faa6:	e7c6      	b.n	800fa36 <_printf_common+0x3e>
 800faa8:	18e1      	adds	r1, r4, r3
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	2030      	movs	r0, #48	; 0x30
 800faae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fab2:	4422      	add	r2, r4
 800fab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fabc:	3302      	adds	r3, #2
 800fabe:	e7c7      	b.n	800fa50 <_printf_common+0x58>
 800fac0:	2301      	movs	r3, #1
 800fac2:	4622      	mov	r2, r4
 800fac4:	4649      	mov	r1, r9
 800fac6:	4638      	mov	r0, r7
 800fac8:	47c0      	blx	r8
 800faca:	3001      	adds	r0, #1
 800facc:	d0e6      	beq.n	800fa9c <_printf_common+0xa4>
 800face:	3601      	adds	r6, #1
 800fad0:	e7d9      	b.n	800fa86 <_printf_common+0x8e>
	...

0800fad4 <_printf_i>:
 800fad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fad8:	7e0f      	ldrb	r7, [r1, #24]
 800fada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fadc:	2f78      	cmp	r7, #120	; 0x78
 800fade:	4691      	mov	r9, r2
 800fae0:	4680      	mov	r8, r0
 800fae2:	460c      	mov	r4, r1
 800fae4:	469a      	mov	sl, r3
 800fae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800faea:	d807      	bhi.n	800fafc <_printf_i+0x28>
 800faec:	2f62      	cmp	r7, #98	; 0x62
 800faee:	d80a      	bhi.n	800fb06 <_printf_i+0x32>
 800faf0:	2f00      	cmp	r7, #0
 800faf2:	f000 80d8 	beq.w	800fca6 <_printf_i+0x1d2>
 800faf6:	2f58      	cmp	r7, #88	; 0x58
 800faf8:	f000 80a3 	beq.w	800fc42 <_printf_i+0x16e>
 800fafc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fb04:	e03a      	b.n	800fb7c <_printf_i+0xa8>
 800fb06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fb0a:	2b15      	cmp	r3, #21
 800fb0c:	d8f6      	bhi.n	800fafc <_printf_i+0x28>
 800fb0e:	a101      	add	r1, pc, #4	; (adr r1, 800fb14 <_printf_i+0x40>)
 800fb10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb14:	0800fb6d 	.word	0x0800fb6d
 800fb18:	0800fb81 	.word	0x0800fb81
 800fb1c:	0800fafd 	.word	0x0800fafd
 800fb20:	0800fafd 	.word	0x0800fafd
 800fb24:	0800fafd 	.word	0x0800fafd
 800fb28:	0800fafd 	.word	0x0800fafd
 800fb2c:	0800fb81 	.word	0x0800fb81
 800fb30:	0800fafd 	.word	0x0800fafd
 800fb34:	0800fafd 	.word	0x0800fafd
 800fb38:	0800fafd 	.word	0x0800fafd
 800fb3c:	0800fafd 	.word	0x0800fafd
 800fb40:	0800fc8d 	.word	0x0800fc8d
 800fb44:	0800fbb1 	.word	0x0800fbb1
 800fb48:	0800fc6f 	.word	0x0800fc6f
 800fb4c:	0800fafd 	.word	0x0800fafd
 800fb50:	0800fafd 	.word	0x0800fafd
 800fb54:	0800fcaf 	.word	0x0800fcaf
 800fb58:	0800fafd 	.word	0x0800fafd
 800fb5c:	0800fbb1 	.word	0x0800fbb1
 800fb60:	0800fafd 	.word	0x0800fafd
 800fb64:	0800fafd 	.word	0x0800fafd
 800fb68:	0800fc77 	.word	0x0800fc77
 800fb6c:	682b      	ldr	r3, [r5, #0]
 800fb6e:	1d1a      	adds	r2, r3, #4
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	602a      	str	r2, [r5, #0]
 800fb74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb7c:	2301      	movs	r3, #1
 800fb7e:	e0a3      	b.n	800fcc8 <_printf_i+0x1f4>
 800fb80:	6820      	ldr	r0, [r4, #0]
 800fb82:	6829      	ldr	r1, [r5, #0]
 800fb84:	0606      	lsls	r6, r0, #24
 800fb86:	f101 0304 	add.w	r3, r1, #4
 800fb8a:	d50a      	bpl.n	800fba2 <_printf_i+0xce>
 800fb8c:	680e      	ldr	r6, [r1, #0]
 800fb8e:	602b      	str	r3, [r5, #0]
 800fb90:	2e00      	cmp	r6, #0
 800fb92:	da03      	bge.n	800fb9c <_printf_i+0xc8>
 800fb94:	232d      	movs	r3, #45	; 0x2d
 800fb96:	4276      	negs	r6, r6
 800fb98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb9c:	485e      	ldr	r0, [pc, #376]	; (800fd18 <_printf_i+0x244>)
 800fb9e:	230a      	movs	r3, #10
 800fba0:	e019      	b.n	800fbd6 <_printf_i+0x102>
 800fba2:	680e      	ldr	r6, [r1, #0]
 800fba4:	602b      	str	r3, [r5, #0]
 800fba6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fbaa:	bf18      	it	ne
 800fbac:	b236      	sxthne	r6, r6
 800fbae:	e7ef      	b.n	800fb90 <_printf_i+0xbc>
 800fbb0:	682b      	ldr	r3, [r5, #0]
 800fbb2:	6820      	ldr	r0, [r4, #0]
 800fbb4:	1d19      	adds	r1, r3, #4
 800fbb6:	6029      	str	r1, [r5, #0]
 800fbb8:	0601      	lsls	r1, r0, #24
 800fbba:	d501      	bpl.n	800fbc0 <_printf_i+0xec>
 800fbbc:	681e      	ldr	r6, [r3, #0]
 800fbbe:	e002      	b.n	800fbc6 <_printf_i+0xf2>
 800fbc0:	0646      	lsls	r6, r0, #25
 800fbc2:	d5fb      	bpl.n	800fbbc <_printf_i+0xe8>
 800fbc4:	881e      	ldrh	r6, [r3, #0]
 800fbc6:	4854      	ldr	r0, [pc, #336]	; (800fd18 <_printf_i+0x244>)
 800fbc8:	2f6f      	cmp	r7, #111	; 0x6f
 800fbca:	bf0c      	ite	eq
 800fbcc:	2308      	moveq	r3, #8
 800fbce:	230a      	movne	r3, #10
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbd6:	6865      	ldr	r5, [r4, #4]
 800fbd8:	60a5      	str	r5, [r4, #8]
 800fbda:	2d00      	cmp	r5, #0
 800fbdc:	bfa2      	ittt	ge
 800fbde:	6821      	ldrge	r1, [r4, #0]
 800fbe0:	f021 0104 	bicge.w	r1, r1, #4
 800fbe4:	6021      	strge	r1, [r4, #0]
 800fbe6:	b90e      	cbnz	r6, 800fbec <_printf_i+0x118>
 800fbe8:	2d00      	cmp	r5, #0
 800fbea:	d04d      	beq.n	800fc88 <_printf_i+0x1b4>
 800fbec:	4615      	mov	r5, r2
 800fbee:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbf2:	fb03 6711 	mls	r7, r3, r1, r6
 800fbf6:	5dc7      	ldrb	r7, [r0, r7]
 800fbf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbfc:	4637      	mov	r7, r6
 800fbfe:	42bb      	cmp	r3, r7
 800fc00:	460e      	mov	r6, r1
 800fc02:	d9f4      	bls.n	800fbee <_printf_i+0x11a>
 800fc04:	2b08      	cmp	r3, #8
 800fc06:	d10b      	bne.n	800fc20 <_printf_i+0x14c>
 800fc08:	6823      	ldr	r3, [r4, #0]
 800fc0a:	07de      	lsls	r6, r3, #31
 800fc0c:	d508      	bpl.n	800fc20 <_printf_i+0x14c>
 800fc0e:	6923      	ldr	r3, [r4, #16]
 800fc10:	6861      	ldr	r1, [r4, #4]
 800fc12:	4299      	cmp	r1, r3
 800fc14:	bfde      	ittt	le
 800fc16:	2330      	movle	r3, #48	; 0x30
 800fc18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc20:	1b52      	subs	r2, r2, r5
 800fc22:	6122      	str	r2, [r4, #16]
 800fc24:	f8cd a000 	str.w	sl, [sp]
 800fc28:	464b      	mov	r3, r9
 800fc2a:	aa03      	add	r2, sp, #12
 800fc2c:	4621      	mov	r1, r4
 800fc2e:	4640      	mov	r0, r8
 800fc30:	f7ff fee2 	bl	800f9f8 <_printf_common>
 800fc34:	3001      	adds	r0, #1
 800fc36:	d14c      	bne.n	800fcd2 <_printf_i+0x1fe>
 800fc38:	f04f 30ff 	mov.w	r0, #4294967295
 800fc3c:	b004      	add	sp, #16
 800fc3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc42:	4835      	ldr	r0, [pc, #212]	; (800fd18 <_printf_i+0x244>)
 800fc44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc48:	6829      	ldr	r1, [r5, #0]
 800fc4a:	6823      	ldr	r3, [r4, #0]
 800fc4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc50:	6029      	str	r1, [r5, #0]
 800fc52:	061d      	lsls	r5, r3, #24
 800fc54:	d514      	bpl.n	800fc80 <_printf_i+0x1ac>
 800fc56:	07df      	lsls	r7, r3, #31
 800fc58:	bf44      	itt	mi
 800fc5a:	f043 0320 	orrmi.w	r3, r3, #32
 800fc5e:	6023      	strmi	r3, [r4, #0]
 800fc60:	b91e      	cbnz	r6, 800fc6a <_printf_i+0x196>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	f023 0320 	bic.w	r3, r3, #32
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	2310      	movs	r3, #16
 800fc6c:	e7b0      	b.n	800fbd0 <_printf_i+0xfc>
 800fc6e:	6823      	ldr	r3, [r4, #0]
 800fc70:	f043 0320 	orr.w	r3, r3, #32
 800fc74:	6023      	str	r3, [r4, #0]
 800fc76:	2378      	movs	r3, #120	; 0x78
 800fc78:	4828      	ldr	r0, [pc, #160]	; (800fd1c <_printf_i+0x248>)
 800fc7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc7e:	e7e3      	b.n	800fc48 <_printf_i+0x174>
 800fc80:	0659      	lsls	r1, r3, #25
 800fc82:	bf48      	it	mi
 800fc84:	b2b6      	uxthmi	r6, r6
 800fc86:	e7e6      	b.n	800fc56 <_printf_i+0x182>
 800fc88:	4615      	mov	r5, r2
 800fc8a:	e7bb      	b.n	800fc04 <_printf_i+0x130>
 800fc8c:	682b      	ldr	r3, [r5, #0]
 800fc8e:	6826      	ldr	r6, [r4, #0]
 800fc90:	6961      	ldr	r1, [r4, #20]
 800fc92:	1d18      	adds	r0, r3, #4
 800fc94:	6028      	str	r0, [r5, #0]
 800fc96:	0635      	lsls	r5, r6, #24
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	d501      	bpl.n	800fca0 <_printf_i+0x1cc>
 800fc9c:	6019      	str	r1, [r3, #0]
 800fc9e:	e002      	b.n	800fca6 <_printf_i+0x1d2>
 800fca0:	0670      	lsls	r0, r6, #25
 800fca2:	d5fb      	bpl.n	800fc9c <_printf_i+0x1c8>
 800fca4:	8019      	strh	r1, [r3, #0]
 800fca6:	2300      	movs	r3, #0
 800fca8:	6123      	str	r3, [r4, #16]
 800fcaa:	4615      	mov	r5, r2
 800fcac:	e7ba      	b.n	800fc24 <_printf_i+0x150>
 800fcae:	682b      	ldr	r3, [r5, #0]
 800fcb0:	1d1a      	adds	r2, r3, #4
 800fcb2:	602a      	str	r2, [r5, #0]
 800fcb4:	681d      	ldr	r5, [r3, #0]
 800fcb6:	6862      	ldr	r2, [r4, #4]
 800fcb8:	2100      	movs	r1, #0
 800fcba:	4628      	mov	r0, r5
 800fcbc:	f7f0 fa98 	bl	80001f0 <memchr>
 800fcc0:	b108      	cbz	r0, 800fcc6 <_printf_i+0x1f2>
 800fcc2:	1b40      	subs	r0, r0, r5
 800fcc4:	6060      	str	r0, [r4, #4]
 800fcc6:	6863      	ldr	r3, [r4, #4]
 800fcc8:	6123      	str	r3, [r4, #16]
 800fcca:	2300      	movs	r3, #0
 800fccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcd0:	e7a8      	b.n	800fc24 <_printf_i+0x150>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	462a      	mov	r2, r5
 800fcd6:	4649      	mov	r1, r9
 800fcd8:	4640      	mov	r0, r8
 800fcda:	47d0      	blx	sl
 800fcdc:	3001      	adds	r0, #1
 800fcde:	d0ab      	beq.n	800fc38 <_printf_i+0x164>
 800fce0:	6823      	ldr	r3, [r4, #0]
 800fce2:	079b      	lsls	r3, r3, #30
 800fce4:	d413      	bmi.n	800fd0e <_printf_i+0x23a>
 800fce6:	68e0      	ldr	r0, [r4, #12]
 800fce8:	9b03      	ldr	r3, [sp, #12]
 800fcea:	4298      	cmp	r0, r3
 800fcec:	bfb8      	it	lt
 800fcee:	4618      	movlt	r0, r3
 800fcf0:	e7a4      	b.n	800fc3c <_printf_i+0x168>
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	4632      	mov	r2, r6
 800fcf6:	4649      	mov	r1, r9
 800fcf8:	4640      	mov	r0, r8
 800fcfa:	47d0      	blx	sl
 800fcfc:	3001      	adds	r0, #1
 800fcfe:	d09b      	beq.n	800fc38 <_printf_i+0x164>
 800fd00:	3501      	adds	r5, #1
 800fd02:	68e3      	ldr	r3, [r4, #12]
 800fd04:	9903      	ldr	r1, [sp, #12]
 800fd06:	1a5b      	subs	r3, r3, r1
 800fd08:	42ab      	cmp	r3, r5
 800fd0a:	dcf2      	bgt.n	800fcf2 <_printf_i+0x21e>
 800fd0c:	e7eb      	b.n	800fce6 <_printf_i+0x212>
 800fd0e:	2500      	movs	r5, #0
 800fd10:	f104 0619 	add.w	r6, r4, #25
 800fd14:	e7f5      	b.n	800fd02 <_printf_i+0x22e>
 800fd16:	bf00      	nop
 800fd18:	08012b17 	.word	0x08012b17
 800fd1c:	08012b28 	.word	0x08012b28

0800fd20 <_read_r>:
 800fd20:	b538      	push	{r3, r4, r5, lr}
 800fd22:	4d07      	ldr	r5, [pc, #28]	; (800fd40 <_read_r+0x20>)
 800fd24:	4604      	mov	r4, r0
 800fd26:	4608      	mov	r0, r1
 800fd28:	4611      	mov	r1, r2
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	602a      	str	r2, [r5, #0]
 800fd2e:	461a      	mov	r2, r3
 800fd30:	f7f0 fe78 	bl	8000a24 <_read>
 800fd34:	1c43      	adds	r3, r0, #1
 800fd36:	d102      	bne.n	800fd3e <_read_r+0x1e>
 800fd38:	682b      	ldr	r3, [r5, #0]
 800fd3a:	b103      	cbz	r3, 800fd3e <_read_r+0x1e>
 800fd3c:	6023      	str	r3, [r4, #0]
 800fd3e:	bd38      	pop	{r3, r4, r5, pc}
 800fd40:	20010a7c 	.word	0x20010a7c

0800fd44 <__swbuf_r>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	460e      	mov	r6, r1
 800fd48:	4614      	mov	r4, r2
 800fd4a:	4605      	mov	r5, r0
 800fd4c:	b118      	cbz	r0, 800fd56 <__swbuf_r+0x12>
 800fd4e:	6983      	ldr	r3, [r0, #24]
 800fd50:	b90b      	cbnz	r3, 800fd56 <__swbuf_r+0x12>
 800fd52:	f7fe ff35 	bl	800ebc0 <__sinit>
 800fd56:	4b21      	ldr	r3, [pc, #132]	; (800fddc <__swbuf_r+0x98>)
 800fd58:	429c      	cmp	r4, r3
 800fd5a:	d12b      	bne.n	800fdb4 <__swbuf_r+0x70>
 800fd5c:	686c      	ldr	r4, [r5, #4]
 800fd5e:	69a3      	ldr	r3, [r4, #24]
 800fd60:	60a3      	str	r3, [r4, #8]
 800fd62:	89a3      	ldrh	r3, [r4, #12]
 800fd64:	071a      	lsls	r2, r3, #28
 800fd66:	d52f      	bpl.n	800fdc8 <__swbuf_r+0x84>
 800fd68:	6923      	ldr	r3, [r4, #16]
 800fd6a:	b36b      	cbz	r3, 800fdc8 <__swbuf_r+0x84>
 800fd6c:	6923      	ldr	r3, [r4, #16]
 800fd6e:	6820      	ldr	r0, [r4, #0]
 800fd70:	1ac0      	subs	r0, r0, r3
 800fd72:	6963      	ldr	r3, [r4, #20]
 800fd74:	b2f6      	uxtb	r6, r6
 800fd76:	4283      	cmp	r3, r0
 800fd78:	4637      	mov	r7, r6
 800fd7a:	dc04      	bgt.n	800fd86 <__swbuf_r+0x42>
 800fd7c:	4621      	mov	r1, r4
 800fd7e:	4628      	mov	r0, r5
 800fd80:	f7ff fac4 	bl	800f30c <_fflush_r>
 800fd84:	bb30      	cbnz	r0, 800fdd4 <__swbuf_r+0x90>
 800fd86:	68a3      	ldr	r3, [r4, #8]
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	60a3      	str	r3, [r4, #8]
 800fd8c:	6823      	ldr	r3, [r4, #0]
 800fd8e:	1c5a      	adds	r2, r3, #1
 800fd90:	6022      	str	r2, [r4, #0]
 800fd92:	701e      	strb	r6, [r3, #0]
 800fd94:	6963      	ldr	r3, [r4, #20]
 800fd96:	3001      	adds	r0, #1
 800fd98:	4283      	cmp	r3, r0
 800fd9a:	d004      	beq.n	800fda6 <__swbuf_r+0x62>
 800fd9c:	89a3      	ldrh	r3, [r4, #12]
 800fd9e:	07db      	lsls	r3, r3, #31
 800fda0:	d506      	bpl.n	800fdb0 <__swbuf_r+0x6c>
 800fda2:	2e0a      	cmp	r6, #10
 800fda4:	d104      	bne.n	800fdb0 <__swbuf_r+0x6c>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f7ff faaf 	bl	800f30c <_fflush_r>
 800fdae:	b988      	cbnz	r0, 800fdd4 <__swbuf_r+0x90>
 800fdb0:	4638      	mov	r0, r7
 800fdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fdb4:	4b0a      	ldr	r3, [pc, #40]	; (800fde0 <__swbuf_r+0x9c>)
 800fdb6:	429c      	cmp	r4, r3
 800fdb8:	d101      	bne.n	800fdbe <__swbuf_r+0x7a>
 800fdba:	68ac      	ldr	r4, [r5, #8]
 800fdbc:	e7cf      	b.n	800fd5e <__swbuf_r+0x1a>
 800fdbe:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <__swbuf_r+0xa0>)
 800fdc0:	429c      	cmp	r4, r3
 800fdc2:	bf08      	it	eq
 800fdc4:	68ec      	ldreq	r4, [r5, #12]
 800fdc6:	e7ca      	b.n	800fd5e <__swbuf_r+0x1a>
 800fdc8:	4621      	mov	r1, r4
 800fdca:	4628      	mov	r0, r5
 800fdcc:	f000 f80c 	bl	800fde8 <__swsetup_r>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	d0cb      	beq.n	800fd6c <__swbuf_r+0x28>
 800fdd4:	f04f 37ff 	mov.w	r7, #4294967295
 800fdd8:	e7ea      	b.n	800fdb0 <__swbuf_r+0x6c>
 800fdda:	bf00      	nop
 800fddc:	08012a14 	.word	0x08012a14
 800fde0:	08012a34 	.word	0x08012a34
 800fde4:	080129f4 	.word	0x080129f4

0800fde8 <__swsetup_r>:
 800fde8:	4b32      	ldr	r3, [pc, #200]	; (800feb4 <__swsetup_r+0xcc>)
 800fdea:	b570      	push	{r4, r5, r6, lr}
 800fdec:	681d      	ldr	r5, [r3, #0]
 800fdee:	4606      	mov	r6, r0
 800fdf0:	460c      	mov	r4, r1
 800fdf2:	b125      	cbz	r5, 800fdfe <__swsetup_r+0x16>
 800fdf4:	69ab      	ldr	r3, [r5, #24]
 800fdf6:	b913      	cbnz	r3, 800fdfe <__swsetup_r+0x16>
 800fdf8:	4628      	mov	r0, r5
 800fdfa:	f7fe fee1 	bl	800ebc0 <__sinit>
 800fdfe:	4b2e      	ldr	r3, [pc, #184]	; (800feb8 <__swsetup_r+0xd0>)
 800fe00:	429c      	cmp	r4, r3
 800fe02:	d10f      	bne.n	800fe24 <__swsetup_r+0x3c>
 800fe04:	686c      	ldr	r4, [r5, #4]
 800fe06:	89a3      	ldrh	r3, [r4, #12]
 800fe08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe0c:	0719      	lsls	r1, r3, #28
 800fe0e:	d42c      	bmi.n	800fe6a <__swsetup_r+0x82>
 800fe10:	06dd      	lsls	r5, r3, #27
 800fe12:	d411      	bmi.n	800fe38 <__swsetup_r+0x50>
 800fe14:	2309      	movs	r3, #9
 800fe16:	6033      	str	r3, [r6, #0]
 800fe18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fe1c:	81a3      	strh	r3, [r4, #12]
 800fe1e:	f04f 30ff 	mov.w	r0, #4294967295
 800fe22:	e03e      	b.n	800fea2 <__swsetup_r+0xba>
 800fe24:	4b25      	ldr	r3, [pc, #148]	; (800febc <__swsetup_r+0xd4>)
 800fe26:	429c      	cmp	r4, r3
 800fe28:	d101      	bne.n	800fe2e <__swsetup_r+0x46>
 800fe2a:	68ac      	ldr	r4, [r5, #8]
 800fe2c:	e7eb      	b.n	800fe06 <__swsetup_r+0x1e>
 800fe2e:	4b24      	ldr	r3, [pc, #144]	; (800fec0 <__swsetup_r+0xd8>)
 800fe30:	429c      	cmp	r4, r3
 800fe32:	bf08      	it	eq
 800fe34:	68ec      	ldreq	r4, [r5, #12]
 800fe36:	e7e6      	b.n	800fe06 <__swsetup_r+0x1e>
 800fe38:	0758      	lsls	r0, r3, #29
 800fe3a:	d512      	bpl.n	800fe62 <__swsetup_r+0x7a>
 800fe3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe3e:	b141      	cbz	r1, 800fe52 <__swsetup_r+0x6a>
 800fe40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe44:	4299      	cmp	r1, r3
 800fe46:	d002      	beq.n	800fe4e <__swsetup_r+0x66>
 800fe48:	4630      	mov	r0, r6
 800fe4a:	f7ff fad3 	bl	800f3f4 <_free_r>
 800fe4e:	2300      	movs	r3, #0
 800fe50:	6363      	str	r3, [r4, #52]	; 0x34
 800fe52:	89a3      	ldrh	r3, [r4, #12]
 800fe54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fe58:	81a3      	strh	r3, [r4, #12]
 800fe5a:	2300      	movs	r3, #0
 800fe5c:	6063      	str	r3, [r4, #4]
 800fe5e:	6923      	ldr	r3, [r4, #16]
 800fe60:	6023      	str	r3, [r4, #0]
 800fe62:	89a3      	ldrh	r3, [r4, #12]
 800fe64:	f043 0308 	orr.w	r3, r3, #8
 800fe68:	81a3      	strh	r3, [r4, #12]
 800fe6a:	6923      	ldr	r3, [r4, #16]
 800fe6c:	b94b      	cbnz	r3, 800fe82 <__swsetup_r+0x9a>
 800fe6e:	89a3      	ldrh	r3, [r4, #12]
 800fe70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fe74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe78:	d003      	beq.n	800fe82 <__swsetup_r+0x9a>
 800fe7a:	4621      	mov	r1, r4
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	f000 f84d 	bl	800ff1c <__smakebuf_r>
 800fe82:	89a0      	ldrh	r0, [r4, #12]
 800fe84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fe88:	f010 0301 	ands.w	r3, r0, #1
 800fe8c:	d00a      	beq.n	800fea4 <__swsetup_r+0xbc>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	60a3      	str	r3, [r4, #8]
 800fe92:	6963      	ldr	r3, [r4, #20]
 800fe94:	425b      	negs	r3, r3
 800fe96:	61a3      	str	r3, [r4, #24]
 800fe98:	6923      	ldr	r3, [r4, #16]
 800fe9a:	b943      	cbnz	r3, 800feae <__swsetup_r+0xc6>
 800fe9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fea0:	d1ba      	bne.n	800fe18 <__swsetup_r+0x30>
 800fea2:	bd70      	pop	{r4, r5, r6, pc}
 800fea4:	0781      	lsls	r1, r0, #30
 800fea6:	bf58      	it	pl
 800fea8:	6963      	ldrpl	r3, [r4, #20]
 800feaa:	60a3      	str	r3, [r4, #8]
 800feac:	e7f4      	b.n	800fe98 <__swsetup_r+0xb0>
 800feae:	2000      	movs	r0, #0
 800feb0:	e7f7      	b.n	800fea2 <__swsetup_r+0xba>
 800feb2:	bf00      	nop
 800feb4:	2000002c 	.word	0x2000002c
 800feb8:	08012a14 	.word	0x08012a14
 800febc:	08012a34 	.word	0x08012a34
 800fec0:	080129f4 	.word	0x080129f4

0800fec4 <abort>:
 800fec4:	b508      	push	{r3, lr}
 800fec6:	2006      	movs	r0, #6
 800fec8:	f000 f8c0 	bl	801004c <raise>
 800fecc:	2001      	movs	r0, #1
 800fece:	f7f0 fda3 	bl	8000a18 <_exit>

0800fed2 <__swhatbuf_r>:
 800fed2:	b570      	push	{r4, r5, r6, lr}
 800fed4:	460e      	mov	r6, r1
 800fed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feda:	2900      	cmp	r1, #0
 800fedc:	b096      	sub	sp, #88	; 0x58
 800fede:	4614      	mov	r4, r2
 800fee0:	461d      	mov	r5, r3
 800fee2:	da08      	bge.n	800fef6 <__swhatbuf_r+0x24>
 800fee4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fee8:	2200      	movs	r2, #0
 800feea:	602a      	str	r2, [r5, #0]
 800feec:	061a      	lsls	r2, r3, #24
 800feee:	d410      	bmi.n	800ff12 <__swhatbuf_r+0x40>
 800fef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fef4:	e00e      	b.n	800ff14 <__swhatbuf_r+0x42>
 800fef6:	466a      	mov	r2, sp
 800fef8:	f000 f8c4 	bl	8010084 <_fstat_r>
 800fefc:	2800      	cmp	r0, #0
 800fefe:	dbf1      	blt.n	800fee4 <__swhatbuf_r+0x12>
 800ff00:	9a01      	ldr	r2, [sp, #4]
 800ff02:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff06:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff0a:	425a      	negs	r2, r3
 800ff0c:	415a      	adcs	r2, r3
 800ff0e:	602a      	str	r2, [r5, #0]
 800ff10:	e7ee      	b.n	800fef0 <__swhatbuf_r+0x1e>
 800ff12:	2340      	movs	r3, #64	; 0x40
 800ff14:	2000      	movs	r0, #0
 800ff16:	6023      	str	r3, [r4, #0]
 800ff18:	b016      	add	sp, #88	; 0x58
 800ff1a:	bd70      	pop	{r4, r5, r6, pc}

0800ff1c <__smakebuf_r>:
 800ff1c:	898b      	ldrh	r3, [r1, #12]
 800ff1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff20:	079d      	lsls	r5, r3, #30
 800ff22:	4606      	mov	r6, r0
 800ff24:	460c      	mov	r4, r1
 800ff26:	d507      	bpl.n	800ff38 <__smakebuf_r+0x1c>
 800ff28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff2c:	6023      	str	r3, [r4, #0]
 800ff2e:	6123      	str	r3, [r4, #16]
 800ff30:	2301      	movs	r3, #1
 800ff32:	6163      	str	r3, [r4, #20]
 800ff34:	b002      	add	sp, #8
 800ff36:	bd70      	pop	{r4, r5, r6, pc}
 800ff38:	ab01      	add	r3, sp, #4
 800ff3a:	466a      	mov	r2, sp
 800ff3c:	f7ff ffc9 	bl	800fed2 <__swhatbuf_r>
 800ff40:	9900      	ldr	r1, [sp, #0]
 800ff42:	4605      	mov	r5, r0
 800ff44:	4630      	mov	r0, r6
 800ff46:	f7fe ff61 	bl	800ee0c <_malloc_r>
 800ff4a:	b948      	cbnz	r0, 800ff60 <__smakebuf_r+0x44>
 800ff4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff50:	059a      	lsls	r2, r3, #22
 800ff52:	d4ef      	bmi.n	800ff34 <__smakebuf_r+0x18>
 800ff54:	f023 0303 	bic.w	r3, r3, #3
 800ff58:	f043 0302 	orr.w	r3, r3, #2
 800ff5c:	81a3      	strh	r3, [r4, #12]
 800ff5e:	e7e3      	b.n	800ff28 <__smakebuf_r+0xc>
 800ff60:	4b0d      	ldr	r3, [pc, #52]	; (800ff98 <__smakebuf_r+0x7c>)
 800ff62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ff64:	89a3      	ldrh	r3, [r4, #12]
 800ff66:	6020      	str	r0, [r4, #0]
 800ff68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff6c:	81a3      	strh	r3, [r4, #12]
 800ff6e:	9b00      	ldr	r3, [sp, #0]
 800ff70:	6163      	str	r3, [r4, #20]
 800ff72:	9b01      	ldr	r3, [sp, #4]
 800ff74:	6120      	str	r0, [r4, #16]
 800ff76:	b15b      	cbz	r3, 800ff90 <__smakebuf_r+0x74>
 800ff78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff7c:	4630      	mov	r0, r6
 800ff7e:	f000 f893 	bl	80100a8 <_isatty_r>
 800ff82:	b128      	cbz	r0, 800ff90 <__smakebuf_r+0x74>
 800ff84:	89a3      	ldrh	r3, [r4, #12]
 800ff86:	f023 0303 	bic.w	r3, r3, #3
 800ff8a:	f043 0301 	orr.w	r3, r3, #1
 800ff8e:	81a3      	strh	r3, [r4, #12]
 800ff90:	89a0      	ldrh	r0, [r4, #12]
 800ff92:	4305      	orrs	r5, r0
 800ff94:	81a5      	strh	r5, [r4, #12]
 800ff96:	e7cd      	b.n	800ff34 <__smakebuf_r+0x18>
 800ff98:	0800eb59 	.word	0x0800eb59

0800ff9c <_realloc_r>:
 800ff9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa0:	4680      	mov	r8, r0
 800ffa2:	4614      	mov	r4, r2
 800ffa4:	460e      	mov	r6, r1
 800ffa6:	b921      	cbnz	r1, 800ffb2 <_realloc_r+0x16>
 800ffa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffac:	4611      	mov	r1, r2
 800ffae:	f7fe bf2d 	b.w	800ee0c <_malloc_r>
 800ffb2:	b92a      	cbnz	r2, 800ffc0 <_realloc_r+0x24>
 800ffb4:	f7ff fa1e 	bl	800f3f4 <_free_r>
 800ffb8:	4625      	mov	r5, r4
 800ffba:	4628      	mov	r0, r5
 800ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc0:	f000 f882 	bl	80100c8 <_malloc_usable_size_r>
 800ffc4:	4284      	cmp	r4, r0
 800ffc6:	4607      	mov	r7, r0
 800ffc8:	d802      	bhi.n	800ffd0 <_realloc_r+0x34>
 800ffca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ffce:	d812      	bhi.n	800fff6 <_realloc_r+0x5a>
 800ffd0:	4621      	mov	r1, r4
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	f7fe ff1a 	bl	800ee0c <_malloc_r>
 800ffd8:	4605      	mov	r5, r0
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	d0ed      	beq.n	800ffba <_realloc_r+0x1e>
 800ffde:	42bc      	cmp	r4, r7
 800ffe0:	4622      	mov	r2, r4
 800ffe2:	4631      	mov	r1, r6
 800ffe4:	bf28      	it	cs
 800ffe6:	463a      	movcs	r2, r7
 800ffe8:	f7fe febf 	bl	800ed6a <memcpy>
 800ffec:	4631      	mov	r1, r6
 800ffee:	4640      	mov	r0, r8
 800fff0:	f7ff fa00 	bl	800f3f4 <_free_r>
 800fff4:	e7e1      	b.n	800ffba <_realloc_r+0x1e>
 800fff6:	4635      	mov	r5, r6
 800fff8:	e7df      	b.n	800ffba <_realloc_r+0x1e>

0800fffa <_raise_r>:
 800fffa:	291f      	cmp	r1, #31
 800fffc:	b538      	push	{r3, r4, r5, lr}
 800fffe:	4604      	mov	r4, r0
 8010000:	460d      	mov	r5, r1
 8010002:	d904      	bls.n	801000e <_raise_r+0x14>
 8010004:	2316      	movs	r3, #22
 8010006:	6003      	str	r3, [r0, #0]
 8010008:	f04f 30ff 	mov.w	r0, #4294967295
 801000c:	bd38      	pop	{r3, r4, r5, pc}
 801000e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010010:	b112      	cbz	r2, 8010018 <_raise_r+0x1e>
 8010012:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010016:	b94b      	cbnz	r3, 801002c <_raise_r+0x32>
 8010018:	4620      	mov	r0, r4
 801001a:	f000 f831 	bl	8010080 <_getpid_r>
 801001e:	462a      	mov	r2, r5
 8010020:	4601      	mov	r1, r0
 8010022:	4620      	mov	r0, r4
 8010024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010028:	f000 b818 	b.w	801005c <_kill_r>
 801002c:	2b01      	cmp	r3, #1
 801002e:	d00a      	beq.n	8010046 <_raise_r+0x4c>
 8010030:	1c59      	adds	r1, r3, #1
 8010032:	d103      	bne.n	801003c <_raise_r+0x42>
 8010034:	2316      	movs	r3, #22
 8010036:	6003      	str	r3, [r0, #0]
 8010038:	2001      	movs	r0, #1
 801003a:	e7e7      	b.n	801000c <_raise_r+0x12>
 801003c:	2400      	movs	r4, #0
 801003e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010042:	4628      	mov	r0, r5
 8010044:	4798      	blx	r3
 8010046:	2000      	movs	r0, #0
 8010048:	e7e0      	b.n	801000c <_raise_r+0x12>
	...

0801004c <raise>:
 801004c:	4b02      	ldr	r3, [pc, #8]	; (8010058 <raise+0xc>)
 801004e:	4601      	mov	r1, r0
 8010050:	6818      	ldr	r0, [r3, #0]
 8010052:	f7ff bfd2 	b.w	800fffa <_raise_r>
 8010056:	bf00      	nop
 8010058:	2000002c 	.word	0x2000002c

0801005c <_kill_r>:
 801005c:	b538      	push	{r3, r4, r5, lr}
 801005e:	4d07      	ldr	r5, [pc, #28]	; (801007c <_kill_r+0x20>)
 8010060:	2300      	movs	r3, #0
 8010062:	4604      	mov	r4, r0
 8010064:	4608      	mov	r0, r1
 8010066:	4611      	mov	r1, r2
 8010068:	602b      	str	r3, [r5, #0]
 801006a:	f7f0 fccd 	bl	8000a08 <_kill>
 801006e:	1c43      	adds	r3, r0, #1
 8010070:	d102      	bne.n	8010078 <_kill_r+0x1c>
 8010072:	682b      	ldr	r3, [r5, #0]
 8010074:	b103      	cbz	r3, 8010078 <_kill_r+0x1c>
 8010076:	6023      	str	r3, [r4, #0]
 8010078:	bd38      	pop	{r3, r4, r5, pc}
 801007a:	bf00      	nop
 801007c:	20010a7c 	.word	0x20010a7c

08010080 <_getpid_r>:
 8010080:	f7f0 bcc0 	b.w	8000a04 <_getpid>

08010084 <_fstat_r>:
 8010084:	b538      	push	{r3, r4, r5, lr}
 8010086:	4d07      	ldr	r5, [pc, #28]	; (80100a4 <_fstat_r+0x20>)
 8010088:	2300      	movs	r3, #0
 801008a:	4604      	mov	r4, r0
 801008c:	4608      	mov	r0, r1
 801008e:	4611      	mov	r1, r2
 8010090:	602b      	str	r3, [r5, #0]
 8010092:	f7f0 fce4 	bl	8000a5e <_fstat>
 8010096:	1c43      	adds	r3, r0, #1
 8010098:	d102      	bne.n	80100a0 <_fstat_r+0x1c>
 801009a:	682b      	ldr	r3, [r5, #0]
 801009c:	b103      	cbz	r3, 80100a0 <_fstat_r+0x1c>
 801009e:	6023      	str	r3, [r4, #0]
 80100a0:	bd38      	pop	{r3, r4, r5, pc}
 80100a2:	bf00      	nop
 80100a4:	20010a7c 	.word	0x20010a7c

080100a8 <_isatty_r>:
 80100a8:	b538      	push	{r3, r4, r5, lr}
 80100aa:	4d06      	ldr	r5, [pc, #24]	; (80100c4 <_isatty_r+0x1c>)
 80100ac:	2300      	movs	r3, #0
 80100ae:	4604      	mov	r4, r0
 80100b0:	4608      	mov	r0, r1
 80100b2:	602b      	str	r3, [r5, #0]
 80100b4:	f7f0 fcd8 	bl	8000a68 <_isatty>
 80100b8:	1c43      	adds	r3, r0, #1
 80100ba:	d102      	bne.n	80100c2 <_isatty_r+0x1a>
 80100bc:	682b      	ldr	r3, [r5, #0]
 80100be:	b103      	cbz	r3, 80100c2 <_isatty_r+0x1a>
 80100c0:	6023      	str	r3, [r4, #0]
 80100c2:	bd38      	pop	{r3, r4, r5, pc}
 80100c4:	20010a7c 	.word	0x20010a7c

080100c8 <_malloc_usable_size_r>:
 80100c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80100cc:	1f18      	subs	r0, r3, #4
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	bfbc      	itt	lt
 80100d2:	580b      	ldrlt	r3, [r1, r0]
 80100d4:	18c0      	addlt	r0, r0, r3
 80100d6:	4770      	bx	lr

080100d8 <_init>:
 80100d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100da:	bf00      	nop
 80100dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100de:	bc08      	pop	{r3}
 80100e0:	469e      	mov	lr, r3
 80100e2:	4770      	bx	lr

080100e4 <_fini>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	bf00      	nop
 80100e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ea:	bc08      	pop	{r3}
 80100ec:	469e      	mov	lr, r3
 80100ee:	4770      	bx	lr
